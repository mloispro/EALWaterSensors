
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  0000782c  000078e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000782c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000458  008001da  008001da  000079ba  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000079ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000079c0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a1c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001108  00000000  00000000  00007a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002b0ac  00000000  00000000  00008b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000053cc  00000000  00000000  00033c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000bc79  00000000  00000000  00038fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003430  00000000  00000000  00044c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00013796  00000000  00000000  00048088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009eaf  00000000  00000000  0005b81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001068  00000000  00000000  000656cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000103a9  00000000  00000000  00066735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c2       	rjmp	.+1230   	; 0x4d0 <__dtors_end>
       2:	00 00       	nop
       4:	8d c2       	rjmp	.+1306   	; 0x520 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c2       	rjmp	.+1302   	; 0x520 <__bad_interrupt>
       a:	00 00       	nop
       c:	13 c7       	rjmp	.+3622   	; 0xe34 <__vector_3>
       e:	00 00       	nop
      10:	11 c7       	rjmp	.+3618   	; 0xe34 <__vector_3>
      12:	00 00       	nop
      14:	0f c7       	rjmp	.+3614   	; 0xe34 <__vector_3>
      16:	00 00       	nop
      18:	83 c2       	rjmp	.+1286   	; 0x520 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c2       	rjmp	.+1282   	; 0x520 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c2       	rjmp	.+1278   	; 0x520 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c2       	rjmp	.+1274   	; 0x520 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c2       	rjmp	.+1270   	; 0x520 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c2       	rjmp	.+1266   	; 0x520 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c2       	rjmp	.+1262   	; 0x520 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c2       	rjmp	.+1258   	; 0x520 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c2       	rjmp	.+1254   	; 0x520 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c2       	rjmp	.+1250   	; 0x520 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 dc 2f 	jmp	0x5fb8	; 0x5fb8 <__vector_16>
      44:	6d c2       	rjmp	.+1242   	; 0x520 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__vector_18>
      4c:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__vector_19>
      50:	67 c2       	rjmp	.+1230   	; 0x520 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c2       	rjmp	.+1226   	; 0x520 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c2       	rjmp	.+1222   	; 0x520 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c2       	rjmp	.+1218   	; 0x520 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c3       	rjmp	.+1670   	; 0x6e8 <__vector_24>
      62:	00 00       	nop
      64:	5d c2       	rjmp	.+1210   	; 0x520 <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 04       	cpc	r10, r1
      6a:	a5 04       	cpc	r10, r5
      6c:	a5 04       	cpc	r10, r5
      6e:	a5 04       	cpc	r10, r5
      70:	a5 04       	cpc	r10, r5
      72:	a5 04       	cpc	r10, r5
      74:	a5 04       	cpc	r10, r5
      76:	a5 04       	cpc	r10, r5
      78:	a5 03       	fmuls	r18, r21
      7a:	a5 04       	cpc	r10, r5
      7c:	a5 04       	cpc	r10, r5
      7e:	a5 04       	cpc	r10, r5
      80:	a5 04       	cpc	r10, r5
      82:	a5 04       	cpc	r10, r5
      84:	a5 04       	cpc	r10, r5
      86:	a5 04       	cpc	r10, r5
      88:	a5 03       	fmuls	r18, r21
      8a:	a5 04       	cpc	r10, r5
      8c:	a5 04       	cpc	r10, r5
      8e:	a5 04       	cpc	r10, r5
      90:	a5 04       	cpc	r10, r5
      92:	a5 04       	cpc	r10, r5
      94:	a5 04       	cpc	r10, r5
      96:	a5 04       	cpc	r10, r5
      98:	ae 03       	fmulsu	r18, r22
      9a:	a5 04       	cpc	r10, r5
      9c:	a5 04       	cpc	r10, r5
      9e:	a5 04       	cpc	r10, r5
      a0:	a5 04       	cpc	r10, r5
      a2:	a5 04       	cpc	r10, r5
      a4:	a5 04       	cpc	r10, r5
      a6:	a5 04       	cpc	r10, r5
      a8:	d9 03       	fmulsu	r21, r17
      aa:	a5 04       	cpc	r10, r5
      ac:	a5 04       	cpc	r10, r5
      ae:	a5 04       	cpc	r10, r5
      b0:	a5 04       	cpc	r10, r5
      b2:	a5 04       	cpc	r10, r5
      b4:	a5 04       	cpc	r10, r5
      b6:	a5 04       	cpc	r10, r5
      b8:	ae 03       	fmulsu	r18, r22
      ba:	a5 04       	cpc	r10, r5
      bc:	a5 04       	cpc	r10, r5
      be:	a5 04       	cpc	r10, r5
      c0:	a5 04       	cpc	r10, r5
      c2:	a5 04       	cpc	r10, r5
      c4:	a5 04       	cpc	r10, r5
      c6:	a5 04       	cpc	r10, r5
      c8:	de 03       	fmulsu	r21, r22
      ca:	a5 04       	cpc	r10, r5
      cc:	a5 04       	cpc	r10, r5
      ce:	a5 04       	cpc	r10, r5
      d0:	a5 04       	cpc	r10, r5
      d2:	a5 04       	cpc	r10, r5
      d4:	a5 04       	cpc	r10, r5
      d6:	a5 04       	cpc	r10, r5
      d8:	e3 03       	fmuls	r22, r19
      da:	a5 04       	cpc	r10, r5
      dc:	a5 04       	cpc	r10, r5
      de:	a5 04       	cpc	r10, r5
      e0:	a5 04       	cpc	r10, r5
      e2:	a5 04       	cpc	r10, r5
      e4:	a5 04       	cpc	r10, r5
      e6:	a5 04       	cpc	r10, r5
      e8:	f8 03       	fmulsu	r23, r16
      ea:	a5 04       	cpc	r10, r5
      ec:	a5 04       	cpc	r10, r5
      ee:	a5 04       	cpc	r10, r5
      f0:	a5 04       	cpc	r10, r5
      f2:	a5 04       	cpc	r10, r5
      f4:	a5 04       	cpc	r10, r5
      f6:	a5 04       	cpc	r10, r5
      f8:	25 04       	cpc	r2, r5
      fa:	a5 04       	cpc	r10, r5
      fc:	a5 04       	cpc	r10, r5
      fe:	a5 04       	cpc	r10, r5
     100:	a5 04       	cpc	r10, r5
     102:	a5 04       	cpc	r10, r5
     104:	a5 04       	cpc	r10, r5
     106:	a5 04       	cpc	r10, r5
     108:	e8 03       	fmulsu	r22, r16
     10a:	a5 04       	cpc	r10, r5
     10c:	a5 04       	cpc	r10, r5
     10e:	a5 04       	cpc	r10, r5
     110:	a5 04       	cpc	r10, r5
     112:	a5 04       	cpc	r10, r5
     114:	a5 04       	cpc	r10, r5
     116:	a5 04       	cpc	r10, r5
     118:	04 04       	cpc	r0, r4
     11a:	a5 04       	cpc	r10, r5
     11c:	a5 04       	cpc	r10, r5
     11e:	a5 04       	cpc	r10, r5
     120:	a5 04       	cpc	r10, r5
     122:	a5 04       	cpc	r10, r5
     124:	a5 04       	cpc	r10, r5
     126:	a5 04       	cpc	r10, r5
     128:	27 04       	cpc	r2, r7
     12a:	a5 04       	cpc	r10, r5
     12c:	a5 04       	cpc	r10, r5
     12e:	a5 04       	cpc	r10, r5
     130:	a5 04       	cpc	r10, r5
     132:	a5 04       	cpc	r10, r5
     134:	a5 04       	cpc	r10, r5
     136:	a5 04       	cpc	r10, r5
     138:	27 04       	cpc	r2, r7
     13a:	a5 04       	cpc	r10, r5
     13c:	a5 04       	cpc	r10, r5
     13e:	a5 04       	cpc	r10, r5
     140:	a5 04       	cpc	r10, r5
     142:	a5 04       	cpc	r10, r5
     144:	a5 04       	cpc	r10, r5
     146:	a5 04       	cpc	r10, r5
     148:	27 04       	cpc	r2, r7
     14a:	a5 04       	cpc	r10, r5
     14c:	a5 04       	cpc	r10, r5
     14e:	a5 04       	cpc	r10, r5
     150:	a5 04       	cpc	r10, r5
     152:	a5 04       	cpc	r10, r5
     154:	a5 04       	cpc	r10, r5
     156:	a5 04       	cpc	r10, r5
     158:	27 04       	cpc	r2, r7
     15a:	a5 04       	cpc	r10, r5
     15c:	a5 04       	cpc	r10, r5
     15e:	a5 04       	cpc	r10, r5
     160:	a5 04       	cpc	r10, r5
     162:	a5 04       	cpc	r10, r5
     164:	a5 04       	cpc	r10, r5
     166:	a5 04       	cpc	r10, r5
     168:	2f 04       	cpc	r2, r15
     16a:	a5 04       	cpc	r10, r5
     16c:	a5 04       	cpc	r10, r5
     16e:	a5 04       	cpc	r10, r5
     170:	a5 04       	cpc	r10, r5
     172:	a5 04       	cpc	r10, r5
     174:	a5 04       	cpc	r10, r5
     176:	a5 04       	cpc	r10, r5
     178:	67 04       	cpc	r6, r7
     17a:	a5 04       	cpc	r10, r5
     17c:	a5 04       	cpc	r10, r5
     17e:	a5 04       	cpc	r10, r5
     180:	a5 04       	cpc	r10, r5
     182:	a5 04       	cpc	r10, r5
     184:	a5 04       	cpc	r10, r5
     186:	a5 04       	cpc	r10, r5
     188:	2f 04       	cpc	r2, r15
     18a:	a5 04       	cpc	r10, r5
     18c:	a5 04       	cpc	r10, r5
     18e:	a5 04       	cpc	r10, r5
     190:	a5 04       	cpc	r10, r5
     192:	a5 04       	cpc	r10, r5
     194:	a5 04       	cpc	r10, r5
     196:	a5 04       	cpc	r10, r5
     198:	67 04       	cpc	r6, r7
     19a:	a5 04       	cpc	r10, r5
     19c:	a5 04       	cpc	r10, r5
     19e:	a5 04       	cpc	r10, r5
     1a0:	a5 04       	cpc	r10, r5
     1a2:	a5 04       	cpc	r10, r5
     1a4:	a5 04       	cpc	r10, r5
     1a6:	a5 04       	cpc	r10, r5
     1a8:	49 04       	cpc	r4, r9
     1aa:	a5 04       	cpc	r10, r5
     1ac:	a5 04       	cpc	r10, r5
     1ae:	a5 04       	cpc	r10, r5
     1b0:	a5 04       	cpc	r10, r5
     1b2:	a5 04       	cpc	r10, r5
     1b4:	a5 04       	cpc	r10, r5
     1b6:	a5 04       	cpc	r10, r5
     1b8:	6a 04       	cpc	r6, r10
     1ba:	a5 04       	cpc	r10, r5
     1bc:	a5 04       	cpc	r10, r5
     1be:	a5 04       	cpc	r10, r5
     1c0:	a5 04       	cpc	r10, r5
     1c2:	a5 04       	cpc	r10, r5
     1c4:	a5 04       	cpc	r10, r5
     1c6:	a5 04       	cpc	r10, r5
     1c8:	6a 04       	cpc	r6, r10
     1ca:	a5 04       	cpc	r10, r5
     1cc:	a5 04       	cpc	r10, r5
     1ce:	a5 04       	cpc	r10, r5
     1d0:	a5 04       	cpc	r10, r5
     1d2:	a5 04       	cpc	r10, r5
     1d4:	a5 04       	cpc	r10, r5
     1d6:	a5 04       	cpc	r10, r5
     1d8:	80 04       	cpc	r8, r0
     1da:	a5 04       	cpc	r10, r5
     1dc:	a5 04       	cpc	r10, r5
     1de:	a5 04       	cpc	r10, r5
     1e0:	a5 04       	cpc	r10, r5
     1e2:	a5 04       	cpc	r10, r5
     1e4:	a5 04       	cpc	r10, r5
     1e6:	a5 04       	cpc	r10, r5
     1e8:	9c 04       	cpc	r9, r12
     1ea:	a5 04       	cpc	r10, r5
     1ec:	a5 04       	cpc	r10, r5
     1ee:	a5 04       	cpc	r10, r5
     1f0:	a5 04       	cpc	r10, r5
     1f2:	a5 04       	cpc	r10, r5
     1f4:	a5 04       	cpc	r10, r5
     1f6:	a5 04       	cpc	r10, r5
     1f8:	9c 04       	cpc	r9, r12
     1fa:	a5 04       	cpc	r10, r5
     1fc:	a5 04       	cpc	r10, r5
     1fe:	a5 04       	cpc	r10, r5
     200:	a5 04       	cpc	r10, r5
     202:	a5 04       	cpc	r10, r5
     204:	a5 04       	cpc	r10, r5
     206:	a5 04       	cpc	r10, r5
     208:	a5 04       	cpc	r10, r5
     20a:	a5 04       	cpc	r10, r5
     20c:	a5 04       	cpc	r10, r5
     20e:	a5 04       	cpc	r10, r5
     210:	a5 04       	cpc	r10, r5
     212:	a5 04       	cpc	r10, r5
     214:	a5 04       	cpc	r10, r5
     216:	a5 04       	cpc	r10, r5
     218:	a5 04       	cpc	r10, r5
     21a:	a5 04       	cpc	r10, r5
     21c:	a5 04       	cpc	r10, r5
     21e:	a5 04       	cpc	r10, r5
     220:	a5 04       	cpc	r10, r5
     222:	a5 04       	cpc	r10, r5
     224:	a5 04       	cpc	r10, r5
     226:	a5 04       	cpc	r10, r5
     228:	a5 04       	cpc	r10, r5
     22a:	a5 04       	cpc	r10, r5
     22c:	a5 04       	cpc	r10, r5
     22e:	a5 04       	cpc	r10, r5
     230:	a5 04       	cpc	r10, r5
     232:	a5 04       	cpc	r10, r5
     234:	a5 04       	cpc	r10, r5
     236:	a5 04       	cpc	r10, r5
     238:	a5 04       	cpc	r10, r5
     23a:	a5 04       	cpc	r10, r5
     23c:	a5 04       	cpc	r10, r5
     23e:	a5 04       	cpc	r10, r5
     240:	a5 04       	cpc	r10, r5
     242:	a5 04       	cpc	r10, r5
     244:	a5 04       	cpc	r10, r5
     246:	a5 04       	cpc	r10, r5
     248:	a5 04       	cpc	r10, r5
     24a:	a5 04       	cpc	r10, r5
     24c:	a5 04       	cpc	r10, r5
     24e:	a5 04       	cpc	r10, r5
     250:	a5 04       	cpc	r10, r5
     252:	a5 04       	cpc	r10, r5
     254:	a5 04       	cpc	r10, r5
     256:	a5 04       	cpc	r10, r5
     258:	a5 04       	cpc	r10, r5

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     29d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2ad:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2bd:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2cd:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2dd:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2ed:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2fd:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     30d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     31d:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     32d:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     33d:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     34d:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     35d:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     36d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     37d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     38d:	3d 27                                               ='

0000038f <_ZZN7LCDBase9ClearLineEsE3__c>:
     38f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000003a0 <_ZZN7MathExt16CalculateAverageEPiiE3__c>:
     3a0:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3b0:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3c0:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003ca <_ZZN8PHSensor11CalculatePHEvE3__c>:
     3ca:	41 64 64 69 6e 67 20 70 68 56 61 6c 3a 20 00        Adding phVal: .

000003d9 <_ZZN8PHSensor11CalculatePHEvE3__c_0>:
     3d9:	53 65 74 74 69 6e 67 20 70 68 56 61 6c 3a 20 00     Setting phVal: .

000003e9 <_ZZN8PHSensor10getPHValueEvE3__c>:
     3e9:	50 48 20 52 61 77 20 52 65 61 64 69 6e 67 3a 20     PH Raw Reading: 
	...

000003fa <_ZZN15WaterSensorWire5SetupEvE3__c>:
     3fa:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

00000403 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     403:	63 6d 64 3a 20 00                                   cmd: .

00000409 <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     409:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

00000413 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     413:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     423:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     433:	76 65 64 3a 20 00                                   ved: .

00000439 <_ZZN15WaterSensorWire7RequestEvE3__c>:
     439:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     449:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

00000454 <_ZZ11AsyncDoWorkvE3__c>:
     454:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     464:	64 00                                               d.

00000466 <digital_pin_to_timer_PGM>:
     466:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     476:	00 00 00 00                                         ....

0000047a <digital_pin_to_bit_mask_PGM>:
     47a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     48a:	04 08 10 20                                         ... 

0000048e <digital_pin_to_port_PGM>:
     48e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     49e:	03 03 03 03                                         ....

000004a2 <port_to_input_PGM>:
     4a2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004ac <port_to_output_PGM>:
     4ac:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004b6 <port_to_mode_PGM>:
     4b6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004c0 <__ctors_start>:
     4c0:	d2 06       	cpc	r13, r18
     4c2:	ed 0b       	sbc	r30, r29
     4c4:	6e 27       	eor	r22, r30
     4c6:	5c 28       	or	r5, r12
     4c8:	a0 29       	or	r26, r0
     4ca:	55 2d       	mov	r21, r5

000004cc <__ctors_end>:
     4cc:	7c 27       	eor	r23, r28
     4ce:	6a 28       	or	r6, r10

000004d0 <__dtors_end>:
     4d0:	11 24       	eor	r1, r1
     4d2:	1f be       	out	0x3f, r1	; 63
     4d4:	cf ef       	ldi	r28, 0xFF	; 255
     4d6:	d8 e0       	ldi	r29, 0x08	; 8
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	cd bf       	out	0x3d, r28	; 61

000004dc <__do_copy_data>:
     4dc:	11 e0       	ldi	r17, 0x01	; 1
     4de:	a0 e0       	ldi	r26, 0x00	; 0
     4e0:	b1 e0       	ldi	r27, 0x01	; 1
     4e2:	ec e2       	ldi	r30, 0x2C	; 44
     4e4:	f8 e7       	ldi	r31, 0x78	; 120
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__do_copy_data+0x10>
     4e8:	05 90       	lpm	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	aa 3d       	cpi	r26, 0xDA	; 218
     4ee:	b1 07       	cpc	r27, r17
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <__do_copy_data+0xc>

000004f2 <__do_clear_bss>:
     4f2:	26 e0       	ldi	r18, 0x06	; 6
     4f4:	aa ed       	ldi	r26, 0xDA	; 218
     4f6:	b1 e0       	ldi	r27, 0x01	; 1
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <.do_clear_bss_start>

000004fa <.do_clear_bss_loop>:
     4fa:	1d 92       	st	X+, r1

000004fc <.do_clear_bss_start>:
     4fc:	a2 33       	cpi	r26, 0x32	; 50
     4fe:	b2 07       	cpc	r27, r18
     500:	e1 f7       	brne	.-8      	; 0x4fa <.do_clear_bss_loop>

00000502 <__do_global_ctors>:
     502:	12 e0       	ldi	r17, 0x02	; 2
     504:	c6 e6       	ldi	r28, 0x66	; 102
     506:	d2 e0       	ldi	r29, 0x02	; 2
     508:	04 c0       	rjmp	.+8      	; 0x512 <__do_global_ctors+0x10>
     50a:	21 97       	sbiw	r28, 0x01	; 1
     50c:	fe 01       	movw	r30, r28
     50e:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <__tablejump2__>
     512:	c0 36       	cpi	r28, 0x60	; 96
     514:	d1 07       	cpc	r29, r17
     516:	c9 f7       	brne	.-14     	; 0x50a <__do_global_ctors+0x8>
     518:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <main>
     51c:	0c 94 0a 3c 	jmp	0x7814	; 0x7814 <__do_global_dtors>

00000520 <__bad_interrupt>:
     520:	6f cd       	rjmp	.-1314   	; 0x0 <__vectors>

00000522 <twi_init>:
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	e7 e9       	ldi	r30, 0x97	; 151
     528:	f2 e0       	ldi	r31, 0x02	; 2
     52a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     52e:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_sendStop>
     538:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <twi_inRepStart>
     53c:	82 e1       	ldi	r24, 0x12	; 18
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
     544:	83 e1       	ldi	r24, 0x13	; 19
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
     54c:	89 eb       	ldi	r24, 0xB9	; 185
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	29 eb       	ldi	r18, 0xB9	; 185
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	2e 7f       	andi	r18, 0xFE	; 254
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
     55e:	89 eb       	ldi	r24, 0xB9	; 185
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	29 eb       	ldi	r18, 0xB9	; 185
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	2d 7f       	andi	r18, 0xFD	; 253
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	88 eb       	ldi	r24, 0xB8	; 184
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	28 e4       	ldi	r18, 0x48	; 72
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
     57a:	8c eb       	ldi	r24, 0xBC	; 188
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	25 e4       	ldi	r18, 0x45	; 69
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
     584:	e2 e0       	ldi	r30, 0x02	; 2
     586:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000058a <twi_setAddress>:
     58a:	a1 e0       	ldi	r26, 0x01	; 1
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	eb ec       	ldi	r30, 0xCB	; 203
     590:	f2 e0       	ldi	r31, 0x02	; 2
     592:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	8a eb       	ldi	r24, 0xBA	; 186
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	29 81       	ldd	r18, Y+1	; 0x01
     59e:	22 0f       	add	r18, r18
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
     5a4:	21 96       	adiw	r28, 0x01	; 1
     5a6:	e2 e0       	ldi	r30, 0x02	; 2
     5a8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000005ac <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     5ac:	a4 e0       	ldi	r26, 0x04	; 4
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	ec ed       	ldi	r30, 0xDC	; 220
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     5b8:	9b 83       	std	Y+3, r25	; 0x03
     5ba:	8a 83       	std	Y+2, r24	; 0x02
     5bc:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     5be:	8c 81       	ldd	r24, Y+4	; 0x04
     5c0:	81 32       	cpi	r24, 0x21	; 33
     5c2:	10 f0       	brcs	.+4      	; 0x5c8 <twi_transmit+0x1c>
    return 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	23 c0       	rjmp	.+70     	; 0x60e <twi_transmit+0x62>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     5c8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <twi_transmit+0x28>
    return 2;
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	1d c0       	rjmp	.+58     	; 0x60e <twi_transmit+0x62>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twi_txBufferLength>
  for(i = 0; i < length; ++i){
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	13 c0       	rjmp	.+38     	; 0x604 <twi_transmit+0x58>
    twi_txBuffer[i] = data[i];
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	29 81       	ldd	r18, Y+1	; 0x01
     5e6:	22 2f       	mov	r18, r18
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	4a 81       	ldd	r20, Y+2	; 0x02
     5ec:	5b 81       	ldd	r21, Y+3	; 0x03
     5ee:	24 0f       	add	r18, r20
     5f0:	35 1f       	adc	r19, r21
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	8c 5f       	subi	r24, 0xFC	; 252
     5f8:	9d 4f       	sbci	r25, 0xFD	; 253
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	99 81       	ldd	r25, Y+1	; 0x01
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	98 17       	cp	r25, r24
     60a:	48 f3       	brcs	.-46     	; 0x5de <twi_transmit+0x32>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     60c:	80 e0       	ldi	r24, 0x00	; 0
}
     60e:	24 96       	adiw	r28, 0x04	; 4
     610:	e2 e0       	ldi	r30, 0x02	; 2
     612:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000616 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
     616:	a2 e0       	ldi	r26, 0x02	; 2
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e1 e1       	ldi	r30, 0x11	; 17
     61c:	f3 e0       	ldi	r31, 0x03	; 3
     61e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <twi_onSlaveReceive+0x1>
     62e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <twi_onSlaveReceive>
}
     632:	22 96       	adiw	r28, 0x02	; 2
     634:	e2 e0       	ldi	r30, 0x02	; 2
     636:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000063a <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
     63a:	a2 e0       	ldi	r26, 0x02	; 2
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <twi_onSlaveTransmit+0x1>
     652:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <twi_onSlaveTransmit>
}
     656:	22 96       	adiw	r28, 0x02	; 2
     658:	e2 e0       	ldi	r30, 0x02	; 2
     65a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000065e <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
     65e:	a1 e0       	ldi	r26, 0x01	; 1
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	e5 e3       	ldi	r30, 0x35	; 53
     664:	f3 e0       	ldi	r31, 0x03	; 3
     666:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     66a:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	88 23       	and	r24, r24
     670:	31 f0       	breq	.+12     	; 0x67e <twi_reply+0x20>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     672:	8c eb       	ldi	r24, 0xBC	; 188
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	25 ec       	ldi	r18, 0xC5	; 197
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
     67c:	05 c0       	rjmp	.+10     	; 0x688 <twi_reply+0x2a>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     67e:	8c eb       	ldi	r24, 0xBC	; 188
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	25 e8       	ldi	r18, 0x85	; 133
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
  }
}
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	e2 e0       	ldi	r30, 0x02	; 2
     68c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000690 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
     690:	a0 e0       	ldi	r26, 0x00	; 0
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	ee e4       	ldi	r30, 0x4E	; 78
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     69c:	8c eb       	ldi	r24, 0xBC	; 188
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	25 ed       	ldi	r18, 0xD5	; 213
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <twi_stop+0x1a>
    continue;
     6a8:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     6aa:	8c eb       	ldi	r24, 0xBC	; 188
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	80 81       	ld	r24, Z
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	80 71       	andi	r24, 0x10	; 16
     6b8:	99 27       	eor	r25, r25
     6ba:	89 2b       	or	r24, r25
     6bc:	a9 f7       	brne	.-22     	; 0x6a8 <twi_stop+0x18>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     6be:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
}
     6c2:	e2 e0       	ldi	r30, 0x02	; 2
     6c4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000006c8 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	ea e6       	ldi	r30, 0x6A	; 106
     6ce:	f3 e0       	ldi	r31, 0x03	; 3
     6d0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     6d4:	8c eb       	ldi	r24, 0xBC	; 188
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	25 ec       	ldi	r18, 0xC5	; 197
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
     6de:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
}
     6e2:	e2 e0       	ldi	r30, 0x02	; 2
     6e4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000006e8 <__vector_24>:

ISR(TWI_vect)
{
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
     714:	89 eb       	ldi	r24, 0xB9	; 185
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	fc 01       	movw	r30, r24
     71a:	80 81       	ld	r24, Z
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	88 7f       	andi	r24, 0xF8	; 248
     722:	99 27       	eor	r25, r25
     724:	09 2e       	mov	r0, r25
     726:	00 0c       	add	r0, r0
     728:	aa 0b       	sbc	r26, r26
     72a:	bb 0b       	sbc	r27, r27
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	28 ef       	ldi	r18, 0xF8	; 248
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	84 1b       	sub	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	28 17       	cp	r18, r24
     73a:	39 07       	cpc	r19, r25
     73c:	08 f4       	brcc	.+2      	; 0x740 <__vector_24+0x58>
     73e:	05 c1       	rjmp	.+522    	; 0x94a <__stack+0x4b>
     740:	8c 5c       	subi	r24, 0xCC	; 204
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	fc 01       	movw	r30, r24
     746:	0c 94 d2 34 	jmp	0x69a4	; 0x69a4 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     74a:	8b eb       	ldi	r24, 0xBB	; 187
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <twi_slarw>
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
      twi_reply(1);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	82 df       	rcall	.-252    	; 0x65e <twi_reply>
      break;
     75a:	f7 c0       	rjmp	.+494    	; 0x94a <__stack+0x4b>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     75c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <twi_masterBufferIndex>
     760:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <twi_masterBufferLength>
     764:	98 17       	cp	r25, r24
     766:	98 f4       	brcc	.+38     	; 0x78e <__vector_24+0xa6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     768:	8b eb       	ldi	r24, 0xBB	; 187
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <twi_masterBufferIndex>
     770:	31 e0       	ldi	r19, 0x01	; 1
     772:	32 0f       	add	r19, r18
     774:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <twi_masterBufferIndex>
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	2e 51       	subi	r18, 0x1E	; 30
     77e:	3e 4f       	sbci	r19, 0xFE	; 254
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18
        twi_reply(1);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	69 df       	rcall	.-302    	; 0x65e <twi_reply>
     78c:	11 c0       	rjmp	.+34     	; 0x7b0 <__vector_24+0xc8>
      }else{
	if (twi_sendStop)
     78e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_sendStop>
     792:	88 23       	and	r24, r24
     794:	11 f0       	breq	.+4      	; 0x79a <__vector_24+0xb2>
          twi_stop();
     796:	7c df       	rcall	.-264    	; 0x690 <twi_stop>
     798:	0b c0       	rjmp	.+22     	; 0x7b0 <__vector_24+0xc8>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     7a0:	8c eb       	ldi	r24, 0xBC	; 188
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	24 ea       	ldi	r18, 0xA4	; 164
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     7aa:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
	}
      }
      break;
     7ae:	cd c0       	rjmp	.+410    	; 0x94a <__stack+0x4b>
     7b0:	cc c0       	rjmp	.+408    	; 0x94a <__stack+0x4b>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <twi_error>
      twi_stop();
     7b8:	6b df       	rcall	.-298    	; 0x690 <twi_stop>
      break;
     7ba:	c7 c0       	rjmp	.+398    	; 0x94a <__stack+0x4b>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     7bc:	80 e3       	ldi	r24, 0x30	; 48
     7be:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <twi_error>
      twi_stop();
     7c2:	66 df       	rcall	.-308    	; 0x690 <twi_stop>
      break;
     7c4:	c2 c0       	rjmp	.+388    	; 0x94a <__stack+0x4b>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     7c6:	88 e3       	ldi	r24, 0x38	; 56
     7c8:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <twi_error>
      twi_releaseBus();
     7cc:	7d df       	rcall	.-262    	; 0x6c8 <twi_releaseBus>
      break;
     7ce:	bd c0       	rjmp	.+378    	; 0x94a <__stack+0x4b>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7d0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_masterBufferIndex>
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	98 0f       	add	r25, r24
     7d8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <twi_masterBufferIndex>
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2b eb       	ldi	r18, 0xBB	; 187
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	8e 51       	subi	r24, 0x1E	; 30
     7ea:	9e 4f       	sbci	r25, 0xFE	; 254
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7f0:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <twi_masterBufferIndex>
     7f4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <twi_masterBufferLength>
     7f8:	98 17       	cp	r25, r24
     7fa:	18 f4       	brcc	.+6      	; 0x802 <__vector_24+0x11a>
        twi_reply(1);
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	2f df       	rcall	.-418    	; 0x65e <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     800:	a4 c0       	rjmp	.+328    	; 0x94a <__stack+0x4b>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	2c df       	rcall	.-424    	; 0x65e <twi_reply>
      }
      break;
     806:	a1 c0       	rjmp	.+322    	; 0x94a <__stack+0x4b>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     808:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_masterBufferIndex>
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	98 0f       	add	r25, r24
     810:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <twi_masterBufferIndex>
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	2b eb       	ldi	r18, 0xBB	; 187
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	20 81       	ld	r18, Z
     820:	8e 51       	subi	r24, 0x1E	; 30
     822:	9e 4f       	sbci	r25, 0xFE	; 254
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
	if (twi_sendStop)
     828:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_sendStop>
     82c:	88 23       	and	r24, r24
     82e:	11 f0       	breq	.+4      	; 0x834 <__vector_24+0x14c>
          twi_stop();
     830:	2f df       	rcall	.-418    	; 0x690 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
     832:	8b c0       	rjmp	.+278    	; 0x94a <__stack+0x4b>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     83a:	8c eb       	ldi	r24, 0xBC	; 188
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	24 ea       	ldi	r18, 0xA4	; 164
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     844:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
	}    
	break;
     848:	80 c0       	rjmp	.+256    	; 0x94a <__stack+0x4b>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     84a:	22 df       	rcall	.-444    	; 0x690 <twi_stop>
      break;
     84c:	7e c0       	rjmp	.+252    	; 0x94a <__stack+0x4b>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     854:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <twi_rxBufferIndex>
      twi_reply(1);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	01 df       	rcall	.-510    	; 0x65e <twi_reply>
      break;
     85c:	76 c0       	rjmp	.+236    	; 0x94a <__stack+0x4b>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     85e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_rxBufferIndex>
     862:	80 32       	cpi	r24, 0x20	; 32
     864:	98 f4       	brcc	.+38     	; 0x88c <__vector_24+0x1a4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     866:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_rxBufferIndex>
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	98 0f       	add	r25, r24
     86e:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <twi_rxBufferIndex>
     872:	88 2f       	mov	r24, r24
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2b eb       	ldi	r18, 0xBB	; 187
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	8a 5d       	subi	r24, 0xDA	; 218
     880:	9d 4f       	sbci	r25, 0xFD	; 253
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
        twi_reply(1);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	ea de       	rcall	.-556    	; 0x65e <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
     88a:	5f c0       	rjmp	.+190    	; 0x94a <__stack+0x4b>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	e7 de       	rcall	.-562    	; 0x65e <twi_reply>
      }
      break;
     890:	5c c0       	rjmp	.+184    	; 0x94a <__stack+0x4b>
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     892:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_rxBufferIndex>
     896:	80 32       	cpi	r24, 0x20	; 32
     898:	40 f4       	brcc	.+16     	; 0x8aa <__vector_24+0x1c2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     89a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_rxBufferIndex>
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	8a 5d       	subi	r24, 0xDA	; 218
     8a4:	9d 4f       	sbci	r25, 0xFD	; 253
     8a6:	fc 01       	movw	r30, r24
     8a8:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     8aa:	f2 de       	rcall	.-540    	; 0x690 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     8ac:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <twi_onSlaveReceive>
     8b0:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <twi_onSlaveReceive+0x1>
     8b4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_rxBufferIndex>
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	bc 01       	movw	r22, r24
     8be:	86 e2       	ldi	r24, 0x26	; 38
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	f9 01       	movw	r30, r18
     8c4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     8c6:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     8ca:	fe de       	rcall	.-516    	; 0x6c8 <twi_releaseBus>
      break;
     8cc:	3e c0       	rjmp	.+124    	; 0x94a <__stack+0x4b>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	c6 de       	rcall	.-628    	; 0x65e <twi_reply>
      break;
     8d2:	3b c0       	rjmp	.+118    	; 0x94a <__stack+0x4b>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     8da:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     8de:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     8e2:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <twi_onSlaveTransmit>
     8e6:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <twi_onSlaveTransmit+0x1>
     8ea:	fc 01       	movw	r30, r24
     8ec:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     8ee:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <twi_txBufferLength>
     8f2:	88 23       	and	r24, r24
     8f4:	29 f4       	brne	.+10     	; 0x900 <__stack+0x1>
        twi_txBufferLength = 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     8fc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     900:	8b eb       	ldi	r24, 0xBB	; 187
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <twi_txBufferIndex>
     908:	31 e0       	ldi	r19, 0x01	; 1
     90a:	32 0f       	add	r19, r18
     90c:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <twi_txBufferIndex>
     910:	22 2f       	mov	r18, r18
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	2c 5f       	subi	r18, 0xFC	; 252
     916:	3d 4f       	sbci	r19, 0xFD	; 253
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     920:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <twi_txBufferIndex>
     924:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <twi_txBufferLength>
     928:	98 17       	cp	r25, r24
     92a:	18 f4       	brcc	.+6      	; 0x932 <__stack+0x33>
        twi_reply(1);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	97 de       	rcall	.-722    	; 0x65e <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     930:	0c c0       	rjmp	.+24     	; 0x94a <__stack+0x4b>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	94 de       	rcall	.-728    	; 0x65e <twi_reply>
      }
      break;
     936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	91 de       	rcall	.-734    	; 0x65e <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     93c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
      break;
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     942:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <twi_error>
      twi_stop();
     946:	a4 de       	rcall	.-696    	; 0x690 <twi_stop>
      break;
     948:	00 00       	nop
  }
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     972:	a4 e0       	ldi	r26, 0x04	; 4
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	ef eb       	ldi	r30, 0xBF	; 191
     978:	f4 e0       	ldi	r31, 0x04	; 4
     97a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	7c 83       	std	Y+4, r23	; 0x04
     984:	6b 83       	std	Y+3, r22	; 0x03
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	3c 81       	ldd	r19, Y+4	; 0x04
     98e:	fc 01       	movw	r30, r24
     990:	33 83       	std	Z+3, r19	; 0x03
     992:	22 83       	std	Z+2, r18	; 0x02
     994:	24 96       	adiw	r28, 0x04	; 4
     996:	e2 e0       	ldi	r30, 0x02	; 2
     998:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000099c <_ZN5PrintC1Ev>:
     99c:	a2 e0       	ldi	r26, 0x02	; 2
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e4 ed       	ldi	r30, 0xD4	; 212
     9a2:	f4 e0       	ldi	r31, 0x04	; 4
     9a4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	26 ed       	ldi	r18, 0xD6	; 214
     9b2:	31 e0       	ldi	r19, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	20 83       	st	Z, r18
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	fc 01       	movw	r30, r24
     9c0:	13 82       	std	Z+3, r1	; 0x03
     9c2:	12 82       	std	Z+2, r1	; 0x02
     9c4:	22 96       	adiw	r28, 0x02	; 2
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000009cc <_ZN6StreamC1Ev>:
     9cc:	a2 e0       	ldi	r26, 0x02	; 2
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	ec ee       	ldi	r30, 0xEC	; 236
     9d2:	f4 e0       	ldi	r31, 0x04	; 4
     9d4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     9d8:	9a 83       	std	Y+2, r25	; 0x02
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	dd df       	rcall	.-70     	; 0x99c <_ZN5PrintC1Ev>
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	27 e7       	ldi	r18, 0x77	; 119
     9e8:	31 e0       	ldi	r19, 0x01	; 1
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	3a 81       	ldd	r19, Y+2	; 0x02
     9f4:	88 ee       	ldi	r24, 0xE8	; 232
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	84 83       	std	Z+4, r24	; 0x04
     a00:	95 83       	std	Z+5, r25	; 0x05
     a02:	a6 83       	std	Z+6, r26	; 0x06
     a04:	b7 83       	std	Z+7, r27	; 0x07
     a06:	22 96       	adiw	r28, 0x02	; 2
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000a0e <_ZN7TwoWireC1Ev>:
     a0e:	a2 e0       	ldi	r26, 0x02	; 2
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	d4 df       	rcall	.-88     	; 0x9cc <_ZN6StreamC1Ev>
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	27 e6       	ldi	r18, 0x67	; 103
     a2a:	31 e0       	ldi	r19, 0x01	; 1
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 83       	std	Z+1, r19	; 0x01
     a30:	20 83       	st	Z, r18
     a32:	22 96       	adiw	r28, 0x02	; 2
     a34:	e2 e0       	ldi	r30, 0x02	; 2
     a36:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000a3a <_ZN7TwoWire5beginEv>:
     a3a:	a2 e0       	ldi	r26, 0x02	; 2
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e3 e2       	ldi	r30, 0x23	; 35
     a40:	f5 e0       	ldi	r31, 0x05	; 5
     a42:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     a4e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
     a52:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
     a56:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZN7TwoWire14txBufferLengthE>
     a5a:	63 dd       	rcall	.-1338   	; 0x522 <twi_init>
     a5c:	22 96       	adiw	r28, 0x02	; 2
     a5e:	e2 e0       	ldi	r30, 0x02	; 2
     a60:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000a64 <_ZN7TwoWire5beginEh>:
     a64:	a3 e0       	ldi	r26, 0x03	; 3
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e8 e3       	ldi	r30, 0x38	; 56
     a6a:	f5 e0       	ldi	r31, 0x05	; 5
     a6c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	6b 83       	std	Y+3, r22	; 0x03
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	88 dd       	rcall	.-1264   	; 0x58a <twi_setAddress>
     a7a:	87 e7       	ldi	r24, 0x77	; 119
     a7c:	96 e0       	ldi	r25, 0x06	; 6
     a7e:	dd dd       	rcall	.-1094   	; 0x63a <twi_attachSlaveTxEvent>
     a80:	81 e3       	ldi	r24, 0x31	; 49
     a82:	96 e0       	ldi	r25, 0x06	; 6
     a84:	c8 dd       	rcall	.-1136   	; 0x616 <twi_attachSlaveRxEvent>
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	d7 df       	rcall	.-82     	; 0xa3a <_ZN7TwoWire5beginEv>
     a8c:	23 96       	adiw	r28, 0x03	; 3
     a8e:	e2 e0       	ldi	r30, 0x02	; 2
     a90:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000a94 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a94:	a3 e0       	ldi	r26, 0x03	; 3
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	e0 e5       	ldi	r30, 0x50	; 80
     a9a:	f5 e0       	ldi	r31, 0x05	; 5
     a9c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     aa6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZN7TwoWire12transmittingE>
     aaa:	88 23       	and	r24, r24
     aac:	f9 f0       	breq	.+62     	; 0xaec <_ZN7TwoWire5writeEh+0x58>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     aae:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14txBufferLengthE>
     ab2:	80 32       	cpi	r24, 0x20	; 32
     ab4:	40 f0       	brcs	.+16     	; 0xac6 <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	61 e0       	ldi	r22, 0x01	; 1
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	59 df       	rcall	.-334    	; 0x972 <_ZN5Print13setWriteErrorEi>
      return 0;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	19 c0       	rjmp	.+50     	; 0xaf8 <_ZN7TwoWire5writeEh+0x64>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     ac6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2b 81       	ldd	r18, Y+3	; 0x03
     ad0:	86 59       	subi	r24, 0x96	; 150
     ad2:	9d 4f       	sbci	r25, 0xFD	; 253
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
    ++txBufferIndex;
     ad8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     ae2:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
     ae6:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN7TwoWire14txBufferLengthE>
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <_ZN7TwoWire5writeEh+0x60>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     aec:	ce 01       	movw	r24, r28
     aee:	03 96       	adiw	r24, 0x03	; 3
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	5c dd       	rcall	.-1352   	; 0x5ac <twi_transmit>
  }
  return 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
}
     af8:	23 96       	adiw	r28, 0x03	; 3
     afa:	e2 e0       	ldi	r30, 0x02	; 2
     afc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000b00 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     b00:	a8 e0       	ldi	r26, 0x08	; 8
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	7e 83       	std	Y+6, r23	; 0x06
     b12:	6d 83       	std	Y+5, r22	; 0x05
     b14:	58 87       	std	Y+8, r21	; 0x08
     b16:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     b18:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZN7TwoWire12transmittingE>
     b1c:	88 23       	and	r24, r24
     b1e:	29 f1       	breq	.+74     	; 0xb6a <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b20:	1a 82       	std	Y+2, r1	; 0x02
     b22:	19 82       	std	Y+1, r1	; 0x01
     b24:	1a c0       	rjmp	.+52     	; 0xb5a <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	fc 01       	movw	r30, r24
     b32:	20 81       	ld	r18, Z
     b34:	31 81       	ldd	r19, Z+1	; 0x01
     b36:	4d 81       	ldd	r20, Y+5	; 0x05
     b38:	5e 81       	ldd	r21, Y+6	; 0x06
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	84 0f       	add	r24, r20
     b40:	95 1f       	adc	r25, r21
     b42:	fc 01       	movw	r30, r24
     b44:	40 81       	ld	r20, Z
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	64 2f       	mov	r22, r20
     b4c:	f9 01       	movw	r30, r18
     b4e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	8f 81       	ldd	r24, Y+7	; 0x07
     b60:	98 85       	ldd	r25, Y+8	; 0x08
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	f8 f2       	brcs	.-66     	; 0xb26 <_ZN7TwoWire5writeEPKhj+0x26>
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     b6a:	2f 81       	ldd	r18, Y+7	; 0x07
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	9e 81       	ldd	r25, Y+6	; 0x06
     b70:	62 2f       	mov	r22, r18
     b72:	1c dd       	rcall	.-1480   	; 0x5ac <twi_transmit>
  }
  return quantity;
     b74:	8f 81       	ldd	r24, Y+7	; 0x07
     b76:	98 85       	ldd	r25, Y+8	; 0x08
}
     b78:	28 96       	adiw	r28, 0x08	; 8
     b7a:	e2 e0       	ldi	r30, 0x02	; 2
     b7c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000b80 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     b80:	a2 e0       	ldi	r26, 0x02	; 2
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 ec       	ldi	r30, 0xC6	; 198
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     b90:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	48 1b       	sub	r20, r24
     ba4:	59 0b       	sbc	r21, r25
     ba6:	ca 01       	movw	r24, r20
}
     ba8:	22 96       	adiw	r28, 0x02	; 2
     baa:	e2 e0       	ldi	r30, 0x02	; 2
     bac:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000bb0 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     bb0:	a4 e0       	ldi	r26, 0x04	; 4
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ee ed       	ldi	r30, 0xDE	; 222
     bb6:	f5 e0       	ldi	r31, 0x05	; 5
     bb8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     bbc:	9c 83       	std	Y+4, r25	; 0x04
     bbe:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     bc8:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     bcc:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
     bd0:	98 17       	cp	r25, r24
     bd2:	88 f4       	brcc	.+34     	; 0xbf6 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     bd4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	88 5b       	subi	r24, 0xB8	; 184
     bde:	9d 4f       	sbci	r25, 0xFD	; 253
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     bec:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bfa:	24 96       	adiw	r28, 0x04	; 4
     bfc:	e2 e0       	ldi	r30, 0x02	; 2
     bfe:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000c02 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     c02:	a4 e0       	ldi	r26, 0x04	; 4
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e0       	ldi	r30, 0x07	; 7
     c08:	f6 e0       	ldi	r31, 0x06	; 6
     c0a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     c1a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     c1e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
     c22:	98 17       	cp	r25, r24
     c24:	60 f4       	brcc	.+24     	; 0xc3e <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     c26:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	88 5b       	subi	r24, 0xB8	; 184
     c30:	9d 4f       	sbci	r25, 0xFD	; 253
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c42:	24 96       	adiw	r28, 0x04	; 4
     c44:	e2 e0       	ldi	r30, 0x02	; 2
     c46:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000c4a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     c4a:	a2 e0       	ldi	r26, 0x02	; 2
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f6 e0       	ldi	r31, 0x06	; 6
     c52:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     c5a:	22 96       	adiw	r28, 0x02	; 2
     c5c:	e2 e0       	ldi	r30, 0x02	; 2
     c5e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000c62 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     c62:	a5 e0       	ldi	r26, 0x05	; 5
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     c6e:	9b 83       	std	Y+3, r25	; 0x03
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	7d 83       	std	Y+5, r23	; 0x05
     c74:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     c76:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <_ZN7TwoWire14user_onReceiveE>
     c7a:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <_ZN7TwoWire14user_onReceiveE+0x1>
     c7e:	89 2b       	or	r24, r25
     c80:	09 f4       	brne	.+2      	; 0xc84 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     c82:	31 c0       	rjmp	.+98     	; 0xce6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     c84:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
     c88:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
     c8c:	98 17       	cp	r25, r24
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     c90:	2a c0       	rjmp	.+84     	; 0xce6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     c92:	19 82       	std	Y+1, r1	; 0x01
     c94:	13 c0       	rjmp	.+38     	; 0xcbc <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	29 81       	ldd	r18, Y+1	; 0x01
     c9e:	22 2f       	mov	r18, r18
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a 81       	ldd	r20, Y+2	; 0x02
     ca4:	5b 81       	ldd	r21, Y+3	; 0x03
     ca6:	24 0f       	add	r18, r20
     ca8:	35 1f       	adc	r19, r21
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	88 5b       	subi	r24, 0xB8	; 184
     cb0:	9d 4f       	sbci	r25, 0xFD	; 253
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	28 17       	cp	r18, r24
     cc8:	39 07       	cpc	r19, r25
     cca:	2c f3       	brlt	.-54     	; 0xc96 <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     ccc:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     cd6:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <_ZN7TwoWire14user_onReceiveE>
     cda:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <_ZN7TwoWire14user_onReceiveE+0x1>
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	9d 81       	ldd	r25, Y+5	; 0x05
     ce2:	f9 01       	movw	r30, r18
     ce4:	09 95       	icall
}
     ce6:	25 96       	adiw	r28, 0x05	; 5
     ce8:	e2 e0       	ldi	r30, 0x02	; 2
     cea:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000cee <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ed e7       	ldi	r30, 0x7D	; 125
     cf4:	f6 e0       	ldi	r31, 0x06	; 6
     cf6:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     cfa:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN7TwoWire14user_onRequestE>
     cfe:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_ZN7TwoWire14user_onRequestE+0x1>
     d02:	89 2b       	or	r24, r25
     d04:	09 f4       	brne	.+2      	; 0xd08 <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     d08:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     d0c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     d10:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN7TwoWire14user_onRequestE>
     d14:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_ZN7TwoWire14user_onRequestE+0x1>
     d18:	fc 01       	movw	r30, r24
     d1a:	09 95       	icall
}
     d1c:	e2 e0       	ldi	r30, 0x02	; 2
     d1e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000d22 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     d22:	a4 e0       	ldi	r26, 0x04	; 4
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e9       	ldi	r30, 0x97	; 151
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	7c 83       	std	Y+4, r23	; 0x04
     d34:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <_ZN7TwoWire14user_onReceiveE+0x1>
     d3e:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <_ZN7TwoWire14user_onReceiveE>
}
     d42:	24 96       	adiw	r28, 0x04	; 4
     d44:	e2 e0       	ldi	r30, 0x02	; 2
     d46:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000d4a <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     d4a:	a4 e0       	ldi	r26, 0x04	; 4
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	eb ea       	ldi	r30, 0xAB	; 171
     d50:	f6 e0       	ldi	r31, 0x06	; 6
     d52:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	7c 83       	std	Y+4, r23	; 0x04
     d5c:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <_ZN7TwoWire14user_onRequestE+0x1>
     d66:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN7TwoWire14user_onRequestE>
}
     d6a:	24 96       	adiw	r28, 0x04	; 4
     d6c:	e2 e0       	ldi	r30, 0x02	; 2
     d6e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000d72 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     d72:	a4 e0       	ldi	r26, 0x04	; 4
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ef eb       	ldi	r30, 0xBF	; 191
     d78:	f6 e0       	ldi	r31, 0x06	; 6
     d7a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	7c 83       	std	Y+4, r23	; 0x04
     d84:	6b 83       	std	Y+3, r22	; 0x03
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	39 f4       	brne	.+14     	; 0xd9c <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	19 f4       	brne	.+6      	; 0xd9c <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d96:	81 e9       	ldi	r24, 0x91	; 145
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	39 de       	rcall	.-910    	; 0xa0e <_ZN7TwoWireC1Ev>
     d9c:	24 96       	adiw	r28, 0x04	; 4
     d9e:	e2 e0       	ldi	r30, 0x02	; 2
     da0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000da4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 ed       	ldi	r30, 0xD8	; 216
     daa:	f6 e0       	ldi	r31, 0x06	; 6
     dac:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     db0:	6f ef       	ldi	r22, 0xFF	; 255
     db2:	7f ef       	ldi	r23, 0xFF	; 255
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	dc df       	rcall	.-72     	; 0xd72 <_Z41__static_initialization_and_destruction_0ii>
     dba:	e2 e0       	ldi	r30, 0x02	; 2
     dbc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000dc0 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     dc0:	a2 e0       	ldi	r26, 0x02	; 2
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e6 ee       	ldi	r30, 0xE6	; 230
     dc6:	f6 e0       	ldi	r31, 0x06	; 6
     dc8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	6a 83       	std	Y+2, r22	; 0x02
     dd0:	22 96       	adiw	r28, 0x02	; 2
     dd2:	e2 e0       	ldi	r30, 0x02	; 2
     dd4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000dd8 <_ZN14SoftwareSerial10tunedDelayEj>:
     dd8:	a4 e0       	ldi	r26, 0x04	; 4
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e2 ef       	ldi	r30, 0xF2	; 242
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	24 96       	adiw	r28, 0x04	; 4
     dfe:	e2 e0       	ldi	r30, 0x02	; 2
     e00:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000e04 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     e04:	a2 e0       	ldi	r26, 0x02	; 2
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e8 e0       	ldi	r30, 0x08	; 8
     e0a:	f7 e0       	ldi	r31, 0x07	; 7
     e0c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	fc 01       	movw	r30, r24
     e1a:	86 85       	ldd	r24, Z+14	; 0x0e
     e1c:	97 85       	ldd	r25, Z+15	; 0x0f
     e1e:	fc 01       	movw	r30, r24
     e20:	20 81       	ld	r18, Z
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	fc 01       	movw	r30, r24
     e28:	85 85       	ldd	r24, Z+13	; 0x0d
     e2a:	82 23       	and	r24, r18
}
     e2c:	22 96       	adiw	r28, 0x02	; 2
     e2e:	e2 e0       	ldi	r30, 0x02	; 2
     e30:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00000e34 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	2b 97       	sbiw	r28, 0x0b	; 11
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     e66:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN14SoftwareSerial13active_objectE>
     e6a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_ZN14SoftwareSerial13active_objectE+0x1>
     e6e:	89 2b       	or	r24, r25
     e70:	09 f4       	brne	.+2      	; 0xe74 <__vector_3+0x40>
     e72:	f4 c0       	rjmp	.+488    	; 0x105c <__vector_3+0x228>
  {
    active_object->recv();
     e74:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN14SoftwareSerial13active_objectE>
     e78:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_ZN14SoftwareSerial13active_objectE+0x1>
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     e80:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	86 8d       	ldd	r24, Z+30	; 0x1e
     e8a:	82 70       	andi	r24, 0x02	; 2
     e8c:	88 23       	and	r24, r24
     e8e:	49 f0       	breq	.+18     	; 0xea2 <__vector_3+0x6e>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	b7 df       	rcall	.-146    	; 0xe04 <_ZN14SoftwareSerial11rx_pin_readEv>
     e96:	98 2f       	mov	r25, r24
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	99 23       	and	r25, r25
     e9c:	51 f4       	brne	.+20     	; 0xeb2 <__vector_3+0x7e>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__vector_3+0x7e>
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	ae df       	rcall	.-164    	; 0xe04 <_ZN14SoftwareSerial11rx_pin_readEv>
     ea8:	98 2f       	mov	r25, r24
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	99 23       	and	r25, r25
     eae:	09 f0       	breq	.+2      	; 0xeb2 <__vector_3+0x7e>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <__vector_3+0x84>
     eb6:	d2 c0       	rjmp	.+420    	; 0x105c <__vector_3+0x228>
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	9d 83       	std	Y+5, r25	; 0x05
     ebe:	8c 83       	std	Y+4, r24	; 0x04
     ec0:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f0       	breq	.+40     	; 0xef0 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	fc 01       	movw	r30, r24
     ece:	83 89       	ldd	r24, Z+19	; 0x13
     ed0:	94 89       	ldd	r25, Z+20	; 0x14
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	f9 01       	movw	r30, r18
     ed8:	23 89       	ldd	r18, Z+19	; 0x13
     eda:	34 89       	ldd	r19, Z+20	; 0x14
     edc:	f9 01       	movw	r30, r18
     ede:	40 81       	ld	r20, Z
     ee0:	2c 81       	ldd	r18, Y+4	; 0x04
     ee2:	3d 81       	ldd	r19, Y+5	; 0x05
     ee4:	f9 01       	movw	r30, r18
     ee6:	25 89       	ldd	r18, Z+21	; 0x15
     ee8:	24 2b       	or	r18, r20
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
     eee:	15 c0       	rjmp	.+42     	; 0xf1a <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	fc 01       	movw	r30, r24
     ef6:	83 89       	ldd	r24, Z+19	; 0x13
     ef8:	94 89       	ldd	r25, Z+20	; 0x14
     efa:	2c 81       	ldd	r18, Y+4	; 0x04
     efc:	3d 81       	ldd	r19, Y+5	; 0x05
     efe:	f9 01       	movw	r30, r18
     f00:	23 89       	ldd	r18, Z+19	; 0x13
     f02:	34 89       	ldd	r19, Z+20	; 0x14
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	42 2f       	mov	r20, r18
     f0a:	2c 81       	ldd	r18, Y+4	; 0x04
     f0c:	3d 81       	ldd	r19, Y+5	; 0x05
     f0e:	f9 01       	movw	r30, r18
     f10:	25 89       	ldd	r18, Z+21	; 0x15
     f12:	20 95       	com	r18
     f14:	24 23       	and	r18, r20
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	fc 01       	movw	r30, r24
     f20:	86 89       	ldd	r24, Z+22	; 0x16
     f22:	97 89       	ldd	r25, Z+23	; 0x17
     f24:	59 df       	rcall	.-334    	; 0xdd8 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	8d e0       	ldi	r24, 0x0D	; 13
     f2a:	4a df       	rcall	.-364    	; 0xdc0 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f2c:	88 e0       	ldi	r24, 0x08	; 8
     f2e:	8f 83       	std	Y+7, r24	; 0x07
     f30:	1f c0       	rjmp	.+62     	; 0xf70 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	80 8d       	ldd	r24, Z+24	; 0x18
     f3a:	91 8d       	ldd	r25, Z+25	; 0x19
     f3c:	4d df       	rcall	.-358    	; 0xdd8 <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	95 95       	asr	r25
     f46:	87 95       	ror	r24
     f48:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	8d e0       	ldi	r24, 0x0D	; 13
     f4e:	38 df       	rcall	.-400    	; 0xdc0 <_Z10DebugPulsehh>
      if (rx_pin_read())
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	57 df       	rcall	.-338    	; 0xe04 <_ZN14SoftwareSerial11rx_pin_readEv>
     f56:	98 2f       	mov	r25, r24
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	99 23       	and	r25, r25
     f5c:	09 f4       	brne	.+2      	; 0xf60 <__vector_3+0x12c>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	88 23       	and	r24, r24
     f62:	19 f0       	breq	.+6      	; 0xf6a <__vector_3+0x136>
        d |= 0x80;
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	8f 83       	std	Y+7, r24	; 0x07
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	88 23       	and	r24, r24
     f74:	f1 f6       	brne	.-68     	; 0xf32 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	fc 01       	movw	r30, r24
     f7c:	86 8d       	ldd	r24, Z+30	; 0x1e
     f7e:	82 70       	andi	r24, 0x02	; 2
     f80:	88 23       	and	r24, r24
     f82:	19 f0       	breq	.+6      	; 0xf8a <__vector_3+0x156>
      d = ~d;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	80 95       	com	r24
     f88:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     f8a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	8f 73       	andi	r24, 0x3F	; 63
     f96:	90 78       	andi	r25, 0x80	; 128
     f98:	99 23       	and	r25, r25
     f9a:	24 f4       	brge	.+8      	; 0xfa4 <__vector_3+0x170>
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	80 6c       	ori	r24, 0xC0	; 192
     fa0:	9f 6f       	ori	r25, 0xFF	; 255
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     fa6:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <_ZN14SoftwareSerial20_receive_buffer_headE>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	28 85       	ldd	r18, Y+8	; 0x08
     fae:	29 17       	cp	r18, r25
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__vector_3+0x180>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	69 f0       	breq	.+26     	; 0xfd2 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     fb8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	81 56       	subi	r24, 0x61	; 97
     fc2:	9d 4f       	sbci	r25, 0xFD	; 253
     fc4:	2b 81       	ldd	r18, Y+3	; 0x03
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	8b e0       	ldi	r24, 0x0B	; 11
     fd6:	f4 de       	rcall	.-536    	; 0xdc0 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	fc 01       	movw	r30, r24
     fde:	26 8d       	ldd	r18, Z+30	; 0x1e
     fe0:	21 60       	ori	r18, 0x01	; 1
     fe2:	fc 01       	movw	r30, r24
     fe4:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	fc 01       	movw	r30, r24
     fec:	82 8d       	ldd	r24, Z+26	; 0x1a
     fee:	93 8d       	ldd	r25, Z+27	; 0x1b
     ff0:	f3 de       	rcall	.-538    	; 0xdd8 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	8b e0       	ldi	r24, 0x0B	; 11
     ff6:	e4 de       	rcall	.-568    	; 0xdc0 <_Z10DebugPulsehh>
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	9a 87       	std	Y+10, r25	; 0x0a
     ffe:	89 87       	std	Y+9, r24	; 0x09
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
    1004:	8b 85       	ldd	r24, Y+11	; 0x0b
    1006:	88 23       	and	r24, r24
    1008:	a1 f0       	breq	.+40     	; 0x1032 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	fc 01       	movw	r30, r24
    1010:	83 89       	ldd	r24, Z+19	; 0x13
    1012:	94 89       	ldd	r25, Z+20	; 0x14
    1014:	29 85       	ldd	r18, Y+9	; 0x09
    1016:	3a 85       	ldd	r19, Y+10	; 0x0a
    1018:	f9 01       	movw	r30, r18
    101a:	23 89       	ldd	r18, Z+19	; 0x13
    101c:	34 89       	ldd	r19, Z+20	; 0x14
    101e:	f9 01       	movw	r30, r18
    1020:	40 81       	ld	r20, Z
    1022:	29 85       	ldd	r18, Y+9	; 0x09
    1024:	3a 85       	ldd	r19, Y+10	; 0x0a
    1026:	f9 01       	movw	r30, r18
    1028:	25 89       	ldd	r18, Z+21	; 0x15
    102a:	24 2b       	or	r18, r20
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
    1030:	15 c0       	rjmp	.+42     	; 0x105c <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	fc 01       	movw	r30, r24
    1038:	83 89       	ldd	r24, Z+19	; 0x13
    103a:	94 89       	ldd	r25, Z+20	; 0x14
    103c:	29 85       	ldd	r18, Y+9	; 0x09
    103e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1040:	f9 01       	movw	r30, r18
    1042:	23 89       	ldd	r18, Z+19	; 0x13
    1044:	34 89       	ldd	r19, Z+20	; 0x14
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	42 2f       	mov	r20, r18
    104c:	29 85       	ldd	r18, Y+9	; 0x09
    104e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1050:	f9 01       	movw	r30, r18
    1052:	25 89       	ldd	r18, Z+21	; 0x15
    1054:	20 95       	com	r18
    1056:	24 23       	and	r18, r20
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    105c:	2b 96       	adiw	r28, 0x0b	; 11
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1090:	8f 92       	push	r8
    1092:	af 92       	push	r10
    1094:	cf 92       	push	r12
    1096:	ef 92       	push	r14
    1098:	0f 93       	push	r16
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	28 97       	sbiw	r28, 0x08	; 8
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    10b4:	4c 83       	std	Y+4, r20	; 0x04
    10b6:	2d 83       	std	Y+5, r18	; 0x05
    10b8:	0e 83       	std	Y+6, r16	; 0x06
    10ba:	ef 82       	std	Y+7, r14	; 0x07
    10bc:	c8 86       	std	Y+8, r12	; 0x08
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	6c dc       	rcall	.-1832   	; 0x99c <_ZN5PrintC1Ev>
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	27 e8       	ldi	r18, 0x87	; 135
    10ca:	31 e0       	ldi	r19, 0x01	; 1
    10cc:	fc 01       	movw	r30, r24
    10ce:	31 83       	std	Z+1, r19	; 0x01
    10d0:	20 83       	st	Z, r18
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	1f 92       	push	r1
    10d8:	1f 92       	push	r1
    10da:	1f 92       	push	r1
    10dc:	1f 92       	push	r1
    10de:	88 84       	ldd	r8, Y+8	; 0x08
    10e0:	af 80       	ldd	r10, Y+7	; 0x07
    10e2:	ce 80       	ldd	r12, Y+6	; 0x06
    10e4:	ed 80       	ldd	r14, Y+5	; 0x05
    10e6:	0c 81       	ldd	r16, Y+4	; 0x04
    10e8:	2f ef       	ldi	r18, 0xFF	; 255
    10ea:	4b 81       	ldd	r20, Y+3	; 0x03
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	12 d0       	rcall	.+36     	; 0x1114 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	28 96       	adiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	0f 91       	pop	r16
    110a:	ef 90       	pop	r14
    110c:	cf 90       	pop	r12
    110e:	af 90       	pop	r10
    1110:	8f 90       	pop	r8
    1112:	08 95       	ret

00001114 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    1114:	8f 92       	push	r8
    1116:	af 92       	push	r10
    1118:	cf 92       	push	r12
    111a:	ef 92       	push	r14
    111c:	0f 93       	push	r16
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	2a 97       	sbiw	r28, 0x0a	; 10
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6b 83       	std	Y+3, r22	; 0x03
    1138:	4c 83       	std	Y+4, r20	; 0x04
    113a:	2d 83       	std	Y+5, r18	; 0x05
    113c:	0e 83       	std	Y+6, r16	; 0x06
    113e:	ef 82       	std	Y+7, r14	; 0x07
    1140:	c8 86       	std	Y+8, r12	; 0x08
    1142:	a9 86       	std	Y+9, r10	; 0x09
    1144:	8a 86       	std	Y+10, r8	; 0x0a
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	fc 01       	movw	r30, r24
    114e:	24 83       	std	Z+4, r18	; 0x04
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	2d 81       	ldd	r18, Y+5	; 0x05
    1156:	fc 01       	movw	r30, r24
    1158:	25 83       	std	Z+5, r18	; 0x05
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	2e 81       	ldd	r18, Y+6	; 0x06
    1160:	fc 01       	movw	r30, r24
    1162:	26 83       	std	Z+6, r18	; 0x06
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	2f 81       	ldd	r18, Y+7	; 0x07
    116a:	fc 01       	movw	r30, r24
    116c:	27 83       	std	Z+7, r18	; 0x07
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	28 85       	ldd	r18, Y+8	; 0x08
    1174:	fc 01       	movw	r30, r24
    1176:	20 87       	std	Z+8, r18	; 0x08
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	29 85       	ldd	r18, Y+9	; 0x09
    117e:	fc 01       	movw	r30, r24
    1180:	21 87       	std	Z+9, r18	; 0x09
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	2a 85       	ldd	r18, Y+10	; 0x0a
    1188:	fc 01       	movw	r30, r24
    118a:	22 87       	std	Z+10, r18	; 0x0a
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	2c 89       	ldd	r18, Y+20	; 0x14
    1192:	fc 01       	movw	r30, r24
    1194:	23 87       	std	Z+11, r18	; 0x0b
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	2d 89       	ldd	r18, Y+21	; 0x15
    119c:	fc 01       	movw	r30, r24
    119e:	24 87       	std	Z+12, r18	; 0x0c
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	2e 89       	ldd	r18, Y+22	; 0x16
    11a6:	fc 01       	movw	r30, r24
    11a8:	25 87       	std	Z+13, r18	; 0x0d
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	2f 89       	ldd	r18, Y+23	; 0x17
    11b0:	fc 01       	movw	r30, r24
    11b2:	26 87       	std	Z+14, r18	; 0x0e
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	84 81       	ldd	r24, Z+4	; 0x04
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	fc 01       	movw	r30, r24
    11c8:	85 81       	ldd	r24, Z+5	; 0x05
    11ca:	8f 3f       	cpi	r24, 0xFF	; 255
    11cc:	39 f0       	breq	.+14     	; 0x11dc <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	fc 01       	movw	r30, r24
    11d4:	85 81       	ldd	r24, Z+5	; 0x05
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	fc 01       	movw	r30, r24
    11e2:	86 81       	ldd	r24, Z+6	; 0x06
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	29 f0       	breq	.+10     	; 0x11fa <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	fc 01       	movw	r30, r24
    11f6:	17 86       	std	Z+15, r1	; 0x0f
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	20 e1       	ldi	r18, 0x10	; 16
    1200:	fc 01       	movw	r30, r24
    1202:	27 87       	std	Z+15, r18	; 0x0f
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	60 e1       	ldi	r22, 0x10	; 16
    120e:	0e d0       	rcall	.+28     	; 0x122c <_ZN13LiquidCrystal5beginEhhh>
    1210:	2a 96       	adiw	r28, 0x0a	; 10
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	0f 91       	pop	r16
    1222:	ef 90       	pop	r14
    1224:	cf 90       	pop	r12
    1226:	af 90       	pop	r10
    1228:	8f 90       	pop	r8
    122a:	08 95       	ret

0000122c <_ZN13LiquidCrystal5beginEhhh>:
    122c:	a5 e0       	ldi	r26, 0x05	; 5
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ec e1       	ldi	r30, 0x1C	; 28
    1232:	f9 e0       	ldi	r31, 0x09	; 9
    1234:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6b 83       	std	Y+3, r22	; 0x03
    123e:	4c 83       	std	Y+4, r20	; 0x04
    1240:	2d 83       	std	Y+5, r18	; 0x05
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	50 f0       	brcs	.+20     	; 0x125c <_ZN13LiquidCrystal5beginEhhh+0x30>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	87 85       	ldd	r24, Z+15	; 0x0f
    1250:	28 2f       	mov	r18, r24
    1252:	28 60       	ori	r18, 0x08	; 8
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	fc 01       	movw	r30, r24
    125a:	27 87       	std	Z+15, r18	; 0x0f
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	fc 01       	movw	r30, r24
    1264:	23 8b       	std	Z+19, r18	; 0x13
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	ac 01       	movw	r20, r24
    126e:	40 5c       	subi	r20, 0xC0	; 192
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	8a 01       	movw	r16, r20
    127e:	40 e4       	ldi	r20, 0x40	; 64
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	a4 d0       	rcall	.+328    	; 0x13d0 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	88 23       	and	r24, r24
    128c:	69 f0       	breq	.+26     	; 0x12a8 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	51 f4       	brne	.+20     	; 0x12a8 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	87 85       	ldd	r24, Z+15	; 0x0f
    129c:	28 2f       	mov	r18, r24
    129e:	24 60       	ori	r18, 0x04	; 4
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	27 87       	std	Z+15, r18	; 0x0f
    12a8:	80 e5       	ldi	r24, 0x50	; 80
    12aa:	93 ec       	ldi	r25, 0xC3	; 195
    12ac:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	fc 01       	movw	r30, r24
    12b6:	84 81       	ldd	r24, Z+4	; 0x04
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	fc 01       	movw	r30, r24
    12c4:	86 81       	ldd	r24, Z+6	; 0x06
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	fc 01       	movw	r30, r24
    12d2:	85 81       	ldd	r24, Z+5	; 0x05
    12d4:	8f 3f       	cpi	r24, 0xFF	; 255
    12d6:	39 f0       	breq	.+14     	; 0x12e6 <_ZN13LiquidCrystal5beginEhhh+0xba>
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	fc 01       	movw	r30, r24
    12de:	85 81       	ldd	r24, Z+5	; 0x05
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	fc 01       	movw	r30, r24
    12ec:	87 85       	ldd	r24, Z+15	; 0x0f
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	80 71       	andi	r24, 0x10	; 16
    12f4:	99 27       	eor	r25, r25
    12f6:	89 2b       	or	r24, r25
    12f8:	e9 f4       	brne	.+58     	; 0x1334 <_ZN13LiquidCrystal5beginEhhh+0x108>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	63 e0       	ldi	r22, 0x03	; 3
    1300:	91 d1       	rcall	.+802    	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
    1302:	84 e9       	ldi	r24, 0x94	; 148
    1304:	91 e1       	ldi	r25, 0x11	; 17
    1306:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	89 d1       	rcall	.+786    	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
    1312:	84 e9       	ldi	r24, 0x94	; 148
    1314:	91 e1       	ldi	r25, 0x11	; 17
    1316:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	63 e0       	ldi	r22, 0x03	; 3
    1320:	81 d1       	rcall	.+770    	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
    1322:	86 e9       	ldi	r24, 0x96	; 150
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	79 d1       	rcall	.+754    	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
    1332:	26 c0       	rjmp	.+76     	; 0x1380 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	fc 01       	movw	r30, r24
    133a:	87 85       	ldd	r24, Z+15	; 0x0f
    133c:	28 2f       	mov	r18, r24
    133e:	20 62       	ori	r18, 0x20	; 32
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	62 2f       	mov	r22, r18
    1346:	d6 d0       	rcall	.+428    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    1348:	84 e9       	ldi	r24, 0x94	; 148
    134a:	91 e1       	ldi	r25, 0x11	; 17
    134c:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	fc 01       	movw	r30, r24
    1356:	87 85       	ldd	r24, Z+15	; 0x0f
    1358:	28 2f       	mov	r18, r24
    135a:	20 62       	ori	r18, 0x20	; 32
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	62 2f       	mov	r22, r18
    1362:	c8 d0       	rcall	.+400    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    1364:	86 e9       	ldi	r24, 0x96	; 150
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	fc 01       	movw	r30, r24
    1372:	87 85       	ldd	r24, Z+15	; 0x0f
    1374:	28 2f       	mov	r18, r24
    1376:	20 62       	ori	r18, 0x20	; 32
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	62 2f       	mov	r22, r18
    137e:	ba d0       	rcall	.+372    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	fc 01       	movw	r30, r24
    1386:	87 85       	ldd	r24, Z+15	; 0x0f
    1388:	28 2f       	mov	r18, r24
    138a:	20 62       	ori	r18, 0x20	; 32
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	62 2f       	mov	r22, r18
    1392:	b0 d0       	rcall	.+352    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	24 e0       	ldi	r18, 0x04	; 4
    139a:	fc 01       	movw	r30, r24
    139c:	20 8b       	std	Z+16, r18	; 0x10
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	88 d0       	rcall	.+272    	; 0x14b4 <_ZN13LiquidCrystal7displayEv>
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	3b d0       	rcall	.+118    	; 0x1420 <_ZN13LiquidCrystal5clearEv>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	22 e0       	ldi	r18, 0x02	; 2
    13b0:	fc 01       	movw	r30, r24
    13b2:	21 8b       	std	Z+17, r18	; 0x11
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	fc 01       	movw	r30, r24
    13ba:	81 89       	ldd	r24, Z+17	; 0x11
    13bc:	28 2f       	mov	r18, r24
    13be:	24 60       	ori	r18, 0x04	; 4
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	62 2f       	mov	r22, r18
    13c6:	96 d0       	rcall	.+300    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    13c8:	25 96       	adiw	r28, 0x05	; 5
    13ca:	e4 e0       	ldi	r30, 0x04	; 4
    13cc:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

000013d0 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    13d0:	aa e0       	ldi	r26, 0x0A	; 10
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee ee       	ldi	r30, 0xEE	; 238
    13d6:	f9 e0       	ldi	r31, 0x09	; 9
    13d8:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	7c 83       	std	Y+4, r23	; 0x04
    13e2:	6b 83       	std	Y+3, r22	; 0x03
    13e4:	5e 83       	std	Y+6, r21	; 0x06
    13e6:	4d 83       	std	Y+5, r20	; 0x05
    13e8:	38 87       	std	Y+8, r19	; 0x08
    13ea:	2f 83       	std	Y+7, r18	; 0x07
    13ec:	1a 87       	std	Y+10, r17	; 0x0a
    13ee:	09 87       	std	Y+9, r16	; 0x09
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	fc 01       	movw	r30, r24
    13f8:	24 8b       	std	Z+20, r18	; 0x14
    13fa:	2d 81       	ldd	r18, Y+5	; 0x05
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	fc 01       	movw	r30, r24
    1402:	25 8b       	std	Z+21, r18	; 0x15
    1404:	2f 81       	ldd	r18, Y+7	; 0x07
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	fc 01       	movw	r30, r24
    140c:	26 8b       	std	Z+22, r18	; 0x16
    140e:	29 85       	ldd	r18, Y+9	; 0x09
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	fc 01       	movw	r30, r24
    1416:	27 8b       	std	Z+23, r18	; 0x17
    1418:	2a 96       	adiw	r28, 0x0a	; 10
    141a:	e4 e0       	ldi	r30, 0x04	; 4
    141c:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00001420 <_ZN13LiquidCrystal5clearEv>:
    1420:	a2 e0       	ldi	r26, 0x02	; 2
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e6 e1       	ldi	r30, 0x16	; 22
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	5e d0       	rcall	.+188    	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    1438:	80 ed       	ldi	r24, 0xD0	; 208
    143a:	97 e0       	ldi	r25, 0x07	; 7
    143c:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
    1440:	22 96       	adiw	r28, 0x02	; 2
    1442:	e2 e0       	ldi	r30, 0x02	; 2
    1444:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001448 <_ZN13LiquidCrystal9setCursorEhh>:
    1448:	a6 e0       	ldi	r26, 0x06	; 6
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e2       	ldi	r30, 0x2A	; 42
    144e:	fa e0       	ldi	r31, 0x0A	; 10
    1450:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	6d 83       	std	Y+5, r22	; 0x05
    145a:	4e 83       	std	Y+6, r20	; 0x06
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	8e 81       	ldd	r24, Y+6	; 0x06
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	10 f0       	brcs	.+4      	; 0x146e <_ZN13LiquidCrystal9setCursorEhh+0x26>
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	8e 83       	std	Y+6, r24	; 0x06
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	fc 01       	movw	r30, r24
    1474:	93 89       	ldd	r25, Z+19	; 0x13
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	89 17       	cp	r24, r25
    147a:	30 f0       	brcs	.+12     	; 0x1488 <_ZN13LiquidCrystal9setCursorEhh+0x40>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	fc 01       	movw	r30, r24
    1482:	83 89       	ldd	r24, Z+19	; 0x13
    1484:	81 50       	subi	r24, 0x01	; 1
    1486:	8e 83       	std	Y+6, r24	; 0x06
    1488:	8e 81       	ldd	r24, Y+6	; 0x06
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	44 96       	adiw	r24, 0x14	; 20
    1498:	fc 01       	movw	r30, r24
    149a:	90 81       	ld	r25, Z
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	89 0f       	add	r24, r25
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	28 2f       	mov	r18, r24
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	62 2f       	mov	r22, r18
    14aa:	24 d0       	rcall	.+72     	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    14ac:	26 96       	adiw	r28, 0x06	; 6
    14ae:	e2 e0       	ldi	r30, 0x02	; 2
    14b0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000014b4 <_ZN13LiquidCrystal7displayEv>:
    14b4:	a2 e0       	ldi	r26, 0x02	; 2
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e0 e6       	ldi	r30, 0x60	; 96
    14ba:	fa e0       	ldi	r31, 0x0A	; 10
    14bc:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	fc 01       	movw	r30, r24
    14ca:	80 89       	ldd	r24, Z+16	; 0x10
    14cc:	28 2f       	mov	r18, r24
    14ce:	24 60       	ori	r18, 0x04	; 4
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 8b       	std	Z+16, r18	; 0x10
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	fc 01       	movw	r30, r24
    14de:	80 89       	ldd	r24, Z+16	; 0x10
    14e0:	28 2f       	mov	r18, r24
    14e2:	28 60       	ori	r18, 0x08	; 8
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	62 2f       	mov	r22, r18
    14ea:	04 d0       	rcall	.+8      	; 0x14f4 <_ZN13LiquidCrystal7commandEh>
    14ec:	22 96       	adiw	r28, 0x02	; 2
    14ee:	e2 e0       	ldi	r30, 0x02	; 2
    14f0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000014f4 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    14f4:	a3 e0       	ldi	r26, 0x03	; 3
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e0 e8       	ldi	r30, 0x80	; 128
    14fa:	fa e0       	ldi	r31, 0x0A	; 10
    14fc:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	6b 81       	ldd	r22, Y+3	; 0x03
    150e:	18 d0       	rcall	.+48     	; 0x1540 <_ZN13LiquidCrystal4sendEhh>
}
    1510:	23 96       	adiw	r28, 0x03	; 3
    1512:	e2 e0       	ldi	r30, 0x02	; 2
    1514:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001518 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    1518:	a3 e0       	ldi	r26, 0x03	; 3
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e9       	ldi	r30, 0x92	; 146
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	6b 81       	ldd	r22, Y+3	; 0x03
    1532:	06 d0       	rcall	.+12     	; 0x1540 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
}
    1538:	23 96       	adiw	r28, 0x03	; 3
    153a:	e2 e0       	ldi	r30, 0x02	; 2
    153c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001540 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1540:	a4 e0       	ldi	r26, 0x04	; 4
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	6b 83       	std	Y+3, r22	; 0x03
    1552:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	fc 01       	movw	r30, r24
    155a:	84 81       	ldd	r24, Z+4	; 0x04
    155c:	6c 81       	ldd	r22, Y+4	; 0x04
    155e:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	fc 01       	movw	r30, r24
    1568:	85 81       	ldd	r24, Z+5	; 0x05
    156a:	8f 3f       	cpi	r24, 0xFF	; 255
    156c:	39 f0       	breq	.+14     	; 0x157c <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	fc 01       	movw	r30, r24
    1574:	85 81       	ldd	r24, Z+5	; 0x05
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	fc 01       	movw	r30, r24
    1582:	87 85       	ldd	r24, Z+15	; 0x0f
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	80 71       	andi	r24, 0x10	; 16
    158a:	99 27       	eor	r25, r25
    158c:	89 2b       	or	r24, r25
    158e:	29 f0       	breq	.+10     	; 0x159a <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	6b 81       	ldd	r22, Y+3	; 0x03
    1596:	85 d0       	rcall	.+266    	; 0x16a2 <_ZN13LiquidCrystal10write8bitsEh>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	95 95       	asr	r25
    15ae:	87 95       	ror	r24
    15b0:	28 2f       	mov	r18, r24
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	62 2f       	mov	r22, r18
    15b8:	35 d0       	rcall	.+106    	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	6b 81       	ldd	r22, Y+3	; 0x03
    15c0:	31 d0       	rcall	.+98     	; 0x1624 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    15c2:	24 96       	adiw	r28, 0x04	; 4
    15c4:	e2 e0       	ldi	r30, 0x02	; 2
    15c6:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000015ca <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    15ca:	a2 e0       	ldi	r26, 0x02	; 2
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb ee       	ldi	r30, 0xEB	; 235
    15d0:	fa e0       	ldi	r31, 0x0A	; 10
    15d2:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	fc 01       	movw	r30, r24
    15e0:	86 81       	ldd	r24, Z+6	; 0x06
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
  delayMicroseconds(1);    
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	fc 01       	movw	r30, r24
    15f6:	86 81       	ldd	r24, Z+6	; 0x06
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	fc 01       	movw	r30, r24
    160c:	86 81       	ldd	r24, Z+6	; 0x06
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1614:	84 e6       	ldi	r24, 0x64	; 100
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 90 30 	call	0x6120	; 0x6120 <delayMicroseconds>
}
    161c:	22 96       	adiw	r28, 0x02	; 2
    161e:	e2 e0       	ldi	r30, 0x02	; 2
    1620:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001624 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1624:	a5 e0       	ldi	r26, 0x05	; 5
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e1       	ldi	r30, 0x18	; 24
    162a:	fb e0       	ldi	r31, 0x0B	; 11
    162c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
    1634:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    1636:	1a 82       	std	Y+2, r1	; 0x02
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	28 c0       	rjmp	.+80     	; 0x168c <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	07 96       	adiw	r24, 0x07	; 7
    164a:	fc 01       	movw	r30, r24
    164c:	80 81       	ld	r24, Z
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	09 80       	ldd	r0, Y+1	; 0x01
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    165e:	95 95       	asr	r25
    1660:	87 95       	ror	r24
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    1666:	48 2f       	mov	r20, r24
    1668:	41 70       	andi	r20, 0x01	; 1
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	07 96       	adiw	r24, 0x07	; 7
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	64 2f       	mov	r22, r20
    167e:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	04 97       	sbiw	r24, 0x04	; 4
    1692:	a4 f2       	brlt	.-88     	; 0x163c <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	98 df       	rcall	.-208    	; 0x15ca <_ZN13LiquidCrystal11pulseEnableEv>
}
    169a:	25 96       	adiw	r28, 0x05	; 5
    169c:	e2 e0       	ldi	r30, 0x02	; 2
    169e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000016a2 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    16a2:	a5 e0       	ldi	r26, 0x05	; 5
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e5       	ldi	r30, 0x57	; 87
    16a8:	fb e0       	ldi	r31, 0x0B	; 11
    16aa:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    16b4:	1a 82       	std	Y+2, r1	; 0x02
    16b6:	19 82       	std	Y+1, r1	; 0x01
    16b8:	28 c0       	rjmp	.+80     	; 0x170a <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	07 96       	adiw	r24, 0x07	; 7
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	09 80       	ldd	r0, Y+1	; 0x01
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    16dc:	95 95       	asr	r25
    16de:	87 95       	ror	r24
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    16e4:	48 2f       	mov	r20, r24
    16e6:	41 70       	andi	r20, 0x01	; 1
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	07 96       	adiw	r24, 0x07	; 7
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	64 2f       	mov	r22, r20
    16fc:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	08 97       	sbiw	r24, 0x08	; 8
    1710:	a4 f2       	brlt	.-88     	; 0x16ba <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	59 df       	rcall	.-334    	; 0x15ca <_ZN13LiquidCrystal11pulseEnableEv>
}
    1718:	25 96       	adiw	r28, 0x05	; 5
    171a:	e2 e0       	ldi	r30, 0x02	; 2
    171c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001720 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e6 e9       	ldi	r30, 0x96	; 150
    1726:	fb e0       	ldi	r31, 0x0B	; 11
    1728:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    172c:	81 ee       	ldi	r24, 0xE1	; 225
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	fc 01       	movw	r30, r24
    1732:	80 81       	ld	r24, Z
    1734:	88 23       	and	r24, r24
    1736:	51 f4       	brne	.+20     	; 0x174c <_ZN4erom6Access8instanceEv+0x2c>
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	8b ee       	ldi	r24, 0xEB	; 235
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	0a d0       	rcall	.+20     	; 0x1756 <_ZN4erom6AccessC1Ej>
    1742:	81 ee       	ldi	r24, 0xE1	; 225
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
    174c:	8b ee       	ldi	r24, 0xEB	; 235
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	e2 e0       	ldi	r30, 0x02	; 2
    1752:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001756 <_ZN4erom6AccessC1Ej>:
    1756:	a4 e0       	ldi	r26, 0x04	; 4
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e1 eb       	ldi	r30, 0xB1	; 177
    175c:	fb e0       	ldi	r31, 0x0B	; 11
    175e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	7c 83       	std	Y+4, r23	; 0x04
    1768:	6b 83       	std	Y+3, r22	; 0x03
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	fc 01       	movw	r30, r24
    1774:	31 83       	std	Z+1, r19	; 0x01
    1776:	20 83       	st	Z, r18
    1778:	0a d0       	rcall	.+20     	; 0x178e <_ZN4erom6Access18device_memory_sizeEv>
    177a:	9c 01       	movw	r18, r24
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	fc 01       	movw	r30, r24
    1782:	33 83       	std	Z+3, r19	; 0x03
    1784:	22 83       	std	Z+2, r18	; 0x02
    1786:	24 96       	adiw	r28, 0x04	; 4
    1788:	e2 e0       	ldi	r30, 0x02	; 2
    178a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000178e <_ZN4erom6Access18device_memory_sizeEv>:
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed ec       	ldi	r30, 0xCD	; 205
    1794:	fb e0       	ldi	r31, 0x0B	; 11
    1796:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	e2 e0       	ldi	r30, 0x02	; 2
    17a0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000017a4 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    17a4:	a4 e0       	ldi	r26, 0x04	; 4
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e8 ed       	ldi	r30, 0xD8	; 216
    17aa:	fb e0       	ldi	r31, 0x0B	; 11
    17ac:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	7c 83       	std	Y+4, r23	; 0x04
    17b6:	6b 83       	std	Y+3, r22	; 0x03
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	49 f4       	brne	.+18     	; 0x17d2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    17c8:	ab df       	rcall	.-170    	; 0x1720 <_ZN4erom6Access8instanceEv>
    17ca:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <_ZN4erom6accessE+0x1>
    17ce:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    17d2:	24 96       	adiw	r28, 0x04	; 4
    17d4:	e2 e0       	ldi	r30, 0x02	; 2
    17d6:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000017da <_GLOBAL__sub_I__ZN4erom6accessE>:
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 ef       	ldi	r30, 0xF3	; 243
    17e0:	fb e0       	ldi	r31, 0x0B	; 11
    17e2:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    17e6:	6f ef       	ldi	r22, 0xFF	; 255
    17e8:	7f ef       	ldi	r23, 0xFF	; 255
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	da df       	rcall	.-76     	; 0x17a4 <_Z41__static_initialization_and_destruction_0ii>
    17f0:	e2 e0       	ldi	r30, 0x02	; 2
    17f2:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000017f6 <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	fc e0       	ldi	r31, 0x0C	; 12
    17fe:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1802:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	e2 e0       	ldi	r30, 0x02	; 2
    1810:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001814 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1814:	a8 e0       	ldi	r26, 0x08	; 8
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e0 e1       	ldi	r30, 0x10	; 16
    181a:	fc e0       	ldi	r31, 0x0C	; 12
    181c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	8f 83       	std	Y+7, r24	; 0x07
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	98 85       	ldd	r25, Y+8	; 0x08
    1828:	2f e8       	ldi	r18, 0x8F	; 143
    182a:	31 e0       	ldi	r19, 0x01	; 1
    182c:	fc 01       	movw	r30, r24
    182e:	31 83       	std	Z+1, r19	; 0x01
    1830:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1832:	e1 df       	rcall	.-62     	; 0x17f6 <_ZL7elapsedv>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	8b 83       	std	Y+3, r24	; 0x03
    183a:	9c 83       	std	Y+4, r25	; 0x04
    183c:	ad 83       	std	Y+5, r26	; 0x05
    183e:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1840:	1a 82       	std	Y+2, r1	; 0x02
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	3d c0       	rjmp	.+122    	; 0x18c0 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    1846:	2f 81       	ldd	r18, Y+7	; 0x07
    1848:	38 85       	ldd	r19, Y+8	; 0x08
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	82 0f       	add	r24, r18
    1850:	93 1f       	adc	r25, r19
    1852:	82 57       	subi	r24, 0x72	; 114
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	fc 01       	movw	r30, r24
    1858:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    185a:	2f 81       	ldd	r18, Y+7	; 0x07
    185c:	38 85       	ldd	r19, Y+8	; 0x08
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	45 96       	adiw	r24, 0x15	; 21
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	82 0f       	add	r24, r18
    186a:	93 1f       	adc	r25, r19
    186c:	fc 01       	movw	r30, r24
    186e:	11 82       	std	Z+1, r1	; 0x01
    1870:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    1872:	2f 81       	ldd	r18, Y+7	; 0x07
    1874:	38 85       	ldd	r19, Y+8	; 0x08
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	82 0f       	add	r24, r18
    1884:	93 1f       	adc	r25, r19
    1886:	9c 01       	movw	r18, r24
    1888:	2e 5f       	subi	r18, 0xFE	; 254
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	ad 81       	ldd	r26, Y+5	; 0x05
    1892:	be 81       	ldd	r27, Y+6	; 0x06
    1894:	f9 01       	movw	r30, r18
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    189e:	2f 81       	ldd	r18, Y+7	; 0x07
    18a0:	38 85       	ldd	r19, Y+8	; 0x08
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	cd 96       	adiw	r24, 0x3d	; 61
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	fc 01       	movw	r30, r24
    18b2:	11 82       	std	Z+1, r1	; 0x01
    18b4:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	0a 97       	sbiw	r24, 0x0a	; 10
    18c6:	0c f4       	brge	.+2      	; 0x18ca <_ZN11SimpleTimerC1Ev+0xb6>
    18c8:	be cf       	rjmp	.-132    	; 0x1846 <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    18ca:	8f 81       	ldd	r24, Y+7	; 0x07
    18cc:	98 85       	ldd	r25, Y+8	; 0x08
    18ce:	84 55       	subi	r24, 0x54	; 84
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	fc 01       	movw	r30, r24
    18d4:	11 82       	std	Z+1, r1	; 0x01
    18d6:	10 82       	st	Z, r1
}
    18d8:	28 96       	adiw	r28, 0x08	; 8
    18da:	e2 e0       	ldi	r30, 0x02	; 2
    18dc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000018e0 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    18e0:	a8 e0       	ldi	r26, 0x08	; 8
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e6 e7       	ldi	r30, 0x76	; 118
    18e6:	fc e0       	ldi	r31, 0x0C	; 12
    18e8:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    18ec:	98 87       	std	Y+8, r25	; 0x08
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    18f0:	82 df       	rcall	.-252    	; 0x17f6 <_ZL7elapsedv>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8b 83       	std	Y+3, r24	; 0x03
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	ad 83       	std	Y+5, r26	; 0x05
    18fc:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    18fe:	1a 82       	std	Y+2, r1	; 0x02
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	25 c1       	rjmp	.+586    	; 0x1b4e <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1904:	2f 81       	ldd	r18, Y+7	; 0x07
    1906:	38 85       	ldd	r19, Y+8	; 0x08
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	84 5b       	subi	r24, 0xB4	; 180
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	82 0f       	add	r24, r18
    1916:	93 1f       	adc	r25, r19
    1918:	fc 01       	movw	r30, r24
    191a:	11 82       	std	Z+1, r1	; 0x01
    191c:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    191e:	2f 81       	ldd	r18, Y+7	; 0x07
    1920:	38 85       	ldd	r19, Y+8	; 0x08
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	45 96       	adiw	r24, 0x15	; 21
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	89 2b       	or	r24, r25
    1938:	09 f4       	brne	.+2      	; 0x193c <_ZN11SimpleTimer3runEv+0x5c>
    193a:	04 c1       	rjmp	.+520    	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    193c:	2f 81       	ldd	r18, Y+7	; 0x07
    193e:	38 85       	ldd	r19, Y+8	; 0x08
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	a2 81       	ldd	r26, Z+2	; 0x02
    195a:	b3 81       	ldd	r27, Z+3	; 0x03
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	4d 81       	ldd	r20, Y+5	; 0x05
    1962:	5e 81       	ldd	r21, Y+6	; 0x06
    1964:	79 01       	movw	r14, r18
    1966:	8a 01       	movw	r16, r20
    1968:	e8 1a       	sub	r14, r24
    196a:	f9 0a       	sbc	r15, r25
    196c:	0a 0b       	sbc	r16, r26
    196e:	1b 0b       	sbc	r17, r27
    1970:	d8 01       	movw	r26, r16
    1972:	c7 01       	movw	r24, r14
    1974:	4f 81       	ldd	r20, Y+7	; 0x07
    1976:	58 85       	ldd	r21, Y+8	; 0x08
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	24 0f       	add	r18, r20
    1986:	35 1f       	adc	r19, r21
    1988:	22 5c       	subi	r18, 0xC2	; 194
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	f9 01       	movw	r30, r18
    198e:	20 81       	ld	r18, Z
    1990:	31 81       	ldd	r19, Z+1	; 0x01
    1992:	42 81       	ldd	r20, Z+2	; 0x02
    1994:	53 81       	ldd	r21, Z+3	; 0x03
    1996:	82 17       	cp	r24, r18
    1998:	93 07       	cpc	r25, r19
    199a:	a4 07       	cpc	r26, r20
    199c:	b5 07       	cpc	r27, r21
    199e:	08 f4       	brcc	.+2      	; 0x19a2 <_ZN11SimpleTimer3runEv+0xc2>
    19a0:	d1 c0       	rjmp	.+418    	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    19a2:	2f 81       	ldd	r18, Y+7	; 0x07
    19a4:	38 85       	ldd	r19, Y+8	; 0x08
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	02 96       	adiw	r24, 0x02	; 2
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	a2 81       	ldd	r26, Z+2	; 0x02
    19c0:	b3 81       	ldd	r27, Z+3	; 0x03
    19c2:	4f 81       	ldd	r20, Y+7	; 0x07
    19c4:	58 85       	ldd	r21, Y+8	; 0x08
    19c6:	29 81       	ldd	r18, Y+1	; 0x01
    19c8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	24 0f       	add	r18, r20
    19d4:	35 1f       	adc	r19, r21
    19d6:	22 5c       	subi	r18, 0xC2	; 194
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	f9 01       	movw	r30, r18
    19dc:	20 81       	ld	r18, Z
    19de:	31 81       	ldd	r19, Z+1	; 0x01
    19e0:	42 81       	ldd	r20, Z+2	; 0x02
    19e2:	53 81       	ldd	r21, Z+3	; 0x03
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	a4 1f       	adc	r26, r20
    19ea:	b5 1f       	adc	r27, r21
    19ec:	4f 81       	ldd	r20, Y+7	; 0x07
    19ee:	58 85       	ldd	r21, Y+8	; 0x08
    19f0:	29 81       	ldd	r18, Y+1	; 0x01
    19f2:	3a 81       	ldd	r19, Y+2	; 0x02
    19f4:	22 0f       	add	r18, r18
    19f6:	33 1f       	adc	r19, r19
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	24 0f       	add	r18, r20
    19fe:	35 1f       	adc	r19, r21
    1a00:	2e 5f       	subi	r18, 0xFE	; 254
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	f9 01       	movw	r30, r18
    1a06:	80 83       	st	Z, r24
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	a2 83       	std	Z+2, r26	; 0x02
    1a0c:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1a0e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a10:	38 85       	ldd	r19, Y+8	; 0x08
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	82 57       	subi	r24, 0x72	; 114
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	88 23       	and	r24, r24
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <_ZN11SimpleTimer3runEv+0x148>
    1a26:	8e c0       	rjmp	.+284    	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1a28:	2f 81       	ldd	r18, Y+7	; 0x07
    1a2a:	38 85       	ldd	r19, Y+8	; 0x08
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	c3 96       	adiw	r24, 0x33	; 51
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	82 0f       	add	r24, r18
    1a38:	93 1f       	adc	r25, r19
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	89 2b       	or	r24, r25
    1a42:	81 f4       	brne	.+32     	; 0x1a64 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a44:	2f 81       	ldd	r18, Y+7	; 0x07
    1a46:	38 85       	ldd	r19, Y+8	; 0x08
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	84 5b       	subi	r24, 0xB4	; 180
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	82 0f       	add	r24, r18
    1a56:	93 1f       	adc	r25, r19
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	31 83       	std	Z+1, r19	; 0x01
    1a60:	20 83       	st	Z, r18
    1a62:	70 c0       	rjmp	.+224    	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1a64:	2f 81       	ldd	r18, Y+7	; 0x07
    1a66:	38 85       	ldd	r19, Y+8	; 0x08
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	cd 96       	adiw	r24, 0x3d	; 61
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
    1a76:	fc 01       	movw	r30, r24
    1a78:	20 81       	ld	r18, Z
    1a7a:	31 81       	ldd	r19, Z+1	; 0x01
    1a7c:	4f 81       	ldd	r20, Y+7	; 0x07
    1a7e:	58 85       	ldd	r21, Y+8	; 0x08
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	c3 96       	adiw	r24, 0x33	; 51
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	84 0f       	add	r24, r20
    1a8c:	95 1f       	adc	r25, r21
    1a8e:	fc 01       	movw	r30, r24
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	28 17       	cp	r18, r24
    1a96:	39 07       	cpc	r19, r25
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <_ZN11SimpleTimer3runEv+0x1bc>
    1a9a:	54 c0       	rjmp	.+168    	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9e:	38 85       	ldd	r19, Y+8	; 0x08
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	84 5b       	subi	r24, 0xB4	; 180
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	82 0f       	add	r24, r18
    1aae:	93 1f       	adc	r25, r19
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	31 83       	std	Z+1, r19	; 0x01
    1ab8:	20 83       	st	Z, r18
                        numRuns[i]++;
    1aba:	2f 81       	ldd	r18, Y+7	; 0x07
    1abc:	38 85       	ldd	r19, Y+8	; 0x08
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	cd 96       	adiw	r24, 0x3d	; 61
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	fc 01       	movw	r30, r24
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	9c 01       	movw	r18, r24
    1ad4:	2f 5f       	subi	r18, 0xFF	; 255
    1ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad8:	4f 81       	ldd	r20, Y+7	; 0x07
    1ada:	58 85       	ldd	r21, Y+8	; 0x08
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	cd 96       	adiw	r24, 0x3d	; 61
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	84 0f       	add	r24, r20
    1ae8:	95 1f       	adc	r25, r21
    1aea:	fc 01       	movw	r30, r24
    1aec:	31 83       	std	Z+1, r19	; 0x01
    1aee:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1af0:	2f 81       	ldd	r18, Y+7	; 0x07
    1af2:	38 85       	ldd	r19, Y+8	; 0x08
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	cd 96       	adiw	r24, 0x3d	; 61
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	fc 01       	movw	r30, r24
    1b04:	20 81       	ld	r18, Z
    1b06:	31 81       	ldd	r19, Z+1	; 0x01
    1b08:	4f 81       	ldd	r20, Y+7	; 0x07
    1b0a:	58 85       	ldd	r21, Y+8	; 0x08
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	c3 96       	adiw	r24, 0x33	; 51
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	84 0f       	add	r24, r20
    1b18:	95 1f       	adc	r25, r21
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	7c f0       	brlt	.+30     	; 0x1b44 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1b26:	2f 81       	ldd	r18, Y+7	; 0x07
    1b28:	38 85       	ldd	r19, Y+8	; 0x08
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	84 5b       	subi	r24, 0xB4	; 180
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	22 e0       	ldi	r18, 0x02	; 2
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	31 83       	std	Z+1, r19	; 0x01
    1b42:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	0a 97       	sbiw	r24, 0x0a	; 10
    1b54:	0c f4       	brge	.+2      	; 0x1b58 <_ZN11SimpleTimer3runEv+0x278>
    1b56:	d6 ce       	rjmp	.-596    	; 0x1904 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1b58:	1a 82       	std	Y+2, r1	; 0x02
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	46 c0       	rjmp	.+140    	; 0x1bea <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1b5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b60:	38 85       	ldd	r19, Y+8	; 0x08
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	84 5b       	subi	r24, 0xB4	; 180
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	82 0f       	add	r24, r18
    1b70:	93 1f       	adc	r25, r19
    1b72:	fc 01       	movw	r30, r24
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <_ZN11SimpleTimer3runEv+0x2a4>
    1b7e:	02 97       	sbiw	r24, 0x02	; 2
    1b80:	81 f0       	breq	.+32     	; 0x1ba2 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1b82:	2e c0       	rjmp	.+92     	; 0x1be0 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1b84:	2f 81       	ldd	r18, Y+7	; 0x07
    1b86:	38 85       	ldd	r19, Y+8	; 0x08
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	45 96       	adiw	r24, 0x15	; 21
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	82 0f       	add	r24, r18
    1b94:	93 1f       	adc	r25, r19
    1b96:	fc 01       	movw	r30, r24
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	09 95       	icall
                break;
    1ba0:	1f c0       	rjmp	.+62     	; 0x1be0 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1ba2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba4:	38 85       	ldd	r19, Y+8	; 0x08
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	45 96       	adiw	r24, 0x15	; 21
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	fc 01       	movw	r30, r24
    1bbc:	09 95       	icall
                deleteTimer(i);
    1bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc0:	98 85       	ldd	r25, Y+8	; 0x08
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	08 96       	adiw	r24, 0x08	; 8
    1bca:	fc 01       	movw	r30, r24
    1bcc:	20 81       	ld	r18, Z
    1bce:	31 81       	ldd	r19, Z+1	; 0x01
    1bd0:	49 81       	ldd	r20, Y+1	; 0x01
    1bd2:	5a 81       	ldd	r21, Y+2	; 0x02
    1bd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd6:	98 85       	ldd	r25, Y+8	; 0x08
    1bd8:	ba 01       	movw	r22, r20
    1bda:	f9 01       	movw	r30, r18
    1bdc:	09 95       	icall
                break;
    1bde:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	0a 97       	sbiw	r24, 0x0a	; 10
    1bf0:	0c f4       	brge	.+2      	; 0x1bf4 <_ZN11SimpleTimer3runEv+0x314>
    1bf2:	b5 cf       	rjmp	.-150    	; 0x1b5e <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1bf4:	28 96       	adiw	r28, 0x08	; 8
    1bf6:	e6 e0       	ldi	r30, 0x06	; 6
    1bf8:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00001bfc <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1bfc:	a4 e0       	ldi	r26, 0x04	; 4
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e4 e0       	ldi	r30, 0x04	; 4
    1c02:	fe e0       	ldi	r31, 0x0E	; 14
    1c04:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	84 55       	subi	r24, 0x54	; 84
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	fc 01       	movw	r30, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c1c:	1c f0       	brlt	.+6      	; 0x1c24 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	9f ef       	ldi	r25, 0xFF	; 255
    1c22:	1f c0       	rjmp	.+62     	; 0x1c62 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c24:	1a 82       	std	Y+2, r1	; 0x02
    1c26:	19 82       	std	Y+1, r1	; 0x01
    1c28:	16 c0       	rjmp	.+44     	; 0x1c56 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	45 96       	adiw	r24, 0x15	; 21
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	89 2b       	or	r24, r25
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	0b c0       	rjmp	.+22     	; 0x1c62 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c5c:	34 f3       	brlt	.-52     	; 0x1c2a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	9f ef       	ldi	r25, 0xFF	; 255
}
    1c62:	24 96       	adiw	r28, 0x04	; 4
    1c64:	e2 e0       	ldi	r30, 0x02	; 2
    1c66:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001c6a <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1c6a:	ac e0       	ldi	r26, 0x0C	; 12
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	fe e0       	ldi	r31, 0x0E	; 14
    1c72:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	4d 83       	std	Y+5, r20	; 0x05
    1c7c:	5e 83       	std	Y+6, r21	; 0x06
    1c7e:	6f 83       	std	Y+7, r22	; 0x07
    1c80:	78 87       	std	Y+8, r23	; 0x08
    1c82:	3a 87       	std	Y+10, r19	; 0x0a
    1c84:	29 87       	std	Y+9, r18	; 0x09
    1c86:	1c 87       	std	Y+12, r17	; 0x0c
    1c88:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	b6 df       	rcall	.-148    	; 0x1bfc <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	99 23       	and	r25, r25
    1c9a:	1c f4       	brge	.+6      	; 0x1ca2 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	6b c0       	rjmp	.+214    	; 0x1d78 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	89 2b       	or	r24, r25
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	9f ef       	ldi	r25, 0xFF	; 255
    1cae:	64 c0       	rjmp	.+200    	; 0x1d78 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	82 0f       	add	r24, r18
    1cc2:	93 1f       	adc	r25, r19
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	22 5c       	subi	r18, 0xC2	; 194
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	af 81       	ldd	r26, Y+7	; 0x07
    1cd0:	b8 85       	ldd	r27, Y+8	; 0x08
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cde:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	45 96       	adiw	r24, 0x15	; 21
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	82 0f       	add	r24, r18
    1cec:	93 1f       	adc	r25, r19
    1cee:	29 85       	ldd	r18, Y+9	; 0x09
    1cf0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	c3 96       	adiw	r24, 0x33	; 51
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d0e:	fc 01       	movw	r30, r24
    1d10:	31 83       	std	Z+1, r19	; 0x01
    1d12:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	82 57       	subi	r24, 0x72	; 114
    1d22:	9f 4f       	sbci	r25, 0xFF	; 255
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	fc 01       	movw	r30, r24
    1d28:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1d2a:	65 dd       	rcall	.-1334   	; 0x17f6 <_ZL7elapsedv>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	4b 81       	ldd	r20, Y+3	; 0x03
    1d32:	5c 81       	ldd	r21, Y+4	; 0x04
    1d34:	29 81       	ldd	r18, Y+1	; 0x01
    1d36:	3a 81       	ldd	r19, Y+2	; 0x02
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	22 0f       	add	r18, r18
    1d3e:	33 1f       	adc	r19, r19
    1d40:	24 0f       	add	r18, r20
    1d42:	35 1f       	adc	r19, r21
    1d44:	2e 5f       	subi	r18, 0xFE	; 254
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	f9 01       	movw	r30, r18
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	a2 83       	std	Z+2, r26	; 0x02
    1d50:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	84 55       	subi	r24, 0x54	; 84
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	9c 01       	movw	r18, r24
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	84 55       	subi	r24, 0x54	; 84
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	fc 01       	movw	r30, r24
    1d70:	31 83       	std	Z+1, r19	; 0x01
    1d72:	20 83       	st	Z, r18

    return freeTimer;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d78:	2c 96       	adiw	r28, 0x0c	; 12
    1d7a:	e4 e0       	ldi	r30, 0x04	; 4
    1d7c:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00001d80 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1d80:	a8 e0       	ldi	r26, 0x08	; 8
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	4b 83       	std	Y+3, r20	; 0x03
    1d92:	5c 83       	std	Y+4, r21	; 0x04
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	7e 83       	std	Y+6, r23	; 0x06
    1d98:	38 87       	std	Y+8, r19	; 0x08
    1d9a:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	dc 01       	movw	r26, r24
    1da2:	8d 91       	ld	r24, X+
    1da4:	9c 91       	ld	r25, X
    1da6:	06 96       	adiw	r24, 0x06	; 6
    1da8:	dc 01       	movw	r26, r24
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	2f 81       	ldd	r18, Y+7	; 0x07
    1db0:	38 85       	ldd	r19, Y+8	; 0x08
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	ad 81       	ldd	r26, Y+5	; 0x05
    1db8:	be 81       	ldd	r27, Y+6	; 0x06
    1dba:	e9 80       	ldd	r14, Y+1	; 0x01
    1dbc:	fa 80       	ldd	r15, Y+2	; 0x02
    1dbe:	00 e0       	ldi	r16, 0x00	; 0
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	ac 01       	movw	r20, r24
    1dc4:	bd 01       	movw	r22, r26
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	09 95       	icall
}
    1dca:	28 96       	adiw	r28, 0x08	; 8
    1dcc:	e6 e0       	ldi	r30, 0x06	; 6
    1dce:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00001dd2 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1dd2:	a8 e0       	ldi	r26, 0x08	; 8
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ef ee       	ldi	r30, 0xEF	; 239
    1dd8:	fe e0       	ldi	r31, 0x0E	; 14
    1dda:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	4b 83       	std	Y+3, r20	; 0x03
    1de4:	5c 83       	std	Y+4, r21	; 0x04
    1de6:	6d 83       	std	Y+5, r22	; 0x05
    1de8:	7e 83       	std	Y+6, r23	; 0x06
    1dea:	38 87       	std	Y+8, r19	; 0x08
    1dec:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	dc 01       	movw	r26, r24
    1df4:	8d 91       	ld	r24, X+
    1df6:	9c 91       	ld	r25, X
    1df8:	06 96       	adiw	r24, 0x06	; 6
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	fc 91       	ld	r31, X
    1e00:	2f 81       	ldd	r18, Y+7	; 0x07
    1e02:	38 85       	ldd	r19, Y+8	; 0x08
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	ad 81       	ldd	r26, Y+5	; 0x05
    1e0a:	be 81       	ldd	r27, Y+6	; 0x06
    1e0c:	e9 80       	ldd	r14, Y+1	; 0x01
    1e0e:	fa 80       	ldd	r15, Y+2	; 0x02
    1e10:	01 e0       	ldi	r16, 0x01	; 1
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	ac 01       	movw	r20, r24
    1e16:	bd 01       	movw	r22, r26
    1e18:	c7 01       	movw	r24, r14
    1e1a:	09 95       	icall
}
    1e1c:	28 96       	adiw	r28, 0x08	; 8
    1e1e:	e6 e0       	ldi	r30, 0x06	; 6
    1e20:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00001e24 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1e24:	a4 e0       	ldi	r26, 0x04	; 4
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e8 e1       	ldi	r30, 0x18	; 24
    1e2a:	ff e0       	ldi	r31, 0x0F	; 15
    1e2c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	7c 83       	std	Y+4, r23	; 0x04
    1e36:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	0a 97       	sbiw	r24, 0x0a	; 10
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1e40:	69 c0       	rjmp	.+210    	; 0x1f14 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	84 55       	subi	r24, 0x54	; 84
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	89 2b       	or	r24, r25
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1e54:	5f c0       	rjmp	.+190    	; 0x1f14 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1e56:	29 81       	ldd	r18, Y+1	; 0x01
    1e58:	3a 81       	ldd	r19, Y+2	; 0x02
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	45 96       	adiw	r24, 0x15	; 21
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	82 0f       	add	r24, r18
    1e66:	93 1f       	adc	r25, r19
    1e68:	fc 01       	movw	r30, r24
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	89 2b       	or	r24, r25
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1e72:	50 c0       	rjmp	.+160    	; 0x1f14 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1e74:	29 81       	ldd	r18, Y+1	; 0x01
    1e76:	3a 81       	ldd	r19, Y+2	; 0x02
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	45 96       	adiw	r24, 0x15	; 21
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	82 0f       	add	r24, r18
    1e84:	93 1f       	adc	r25, r19
    1e86:	fc 01       	movw	r30, r24
    1e88:	11 82       	std	Z+1, r1	; 0x01
    1e8a:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1e8c:	29 81       	ldd	r18, Y+1	; 0x01
    1e8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	82 0f       	add	r24, r18
    1e96:	93 1f       	adc	r25, r19
    1e98:	82 57       	subi	r24, 0x72	; 114
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1ea0:	29 81       	ldd	r18, Y+1	; 0x01
    1ea2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	84 5b       	subi	r24, 0xB4	; 180
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	82 0f       	add	r24, r18
    1eb2:	93 1f       	adc	r25, r19
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	11 82       	std	Z+1, r1	; 0x01
    1eb8:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1eba:	29 81       	ldd	r18, Y+1	; 0x01
    1ebc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	82 0f       	add	r24, r18
    1ecc:	93 1f       	adc	r25, r19
    1ece:	ce 96       	adiw	r24, 0x3e	; 62
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	10 82       	st	Z, r1
    1ed4:	11 82       	std	Z+1, r1	; 0x01
    1ed6:	12 82       	std	Z+2, r1	; 0x02
    1ed8:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1eda:	29 81       	ldd	r18, Y+1	; 0x01
    1edc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	cd 96       	adiw	r24, 0x3d	; 61
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	82 0f       	add	r24, r18
    1eea:	93 1f       	adc	r25, r19
    1eec:	fc 01       	movw	r30, r24
    1eee:	11 82       	std	Z+1, r1	; 0x01
    1ef0:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	84 55       	subi	r24, 0x54	; 84
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	fc 01       	movw	r30, r24
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	9c 01       	movw	r18, r24
    1f02:	21 50       	subi	r18, 0x01	; 1
    1f04:	31 09       	sbc	r19, r1
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	84 55       	subi	r24, 0x54	; 84
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	fc 01       	movw	r30, r24
    1f10:	31 83       	std	Z+1, r19	; 0x01
    1f12:	20 83       	st	Z, r18
    }
}
    1f14:	24 96       	adiw	r28, 0x04	; 4
    1f16:	e2 e0       	ldi	r30, 0x02	; 2
    1f18:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001f1c <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1f1c:	a4 e0       	ldi	r26, 0x04	; 4
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	7c 83       	std	Y+4, r23	; 0x04
    1f2e:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	0a 97       	sbiw	r24, 0x0a	; 10
    1f36:	0c f0       	brlt	.+2      	; 0x1f3a <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1f3a:	5d dc       	rcall	.-1862   	; 0x17f6 <_ZL7elapsedv>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	49 81       	ldd	r20, Y+1	; 0x01
    1f42:	5a 81       	ldd	r21, Y+2	; 0x02
    1f44:	2b 81       	ldd	r18, Y+3	; 0x03
    1f46:	3c 81       	ldd	r19, Y+4	; 0x04
    1f48:	22 0f       	add	r18, r18
    1f4a:	33 1f       	adc	r19, r19
    1f4c:	22 0f       	add	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	24 0f       	add	r18, r20
    1f52:	35 1f       	adc	r19, r21
    1f54:	2e 5f       	subi	r18, 0xFE	; 254
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	f9 01       	movw	r30, r18
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
}
    1f62:	24 96       	adiw	r28, 0x04	; 4
    1f64:	e2 e0       	ldi	r30, 0x02	; 2
    1f66:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001f6a <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1f6a:	a4 e0       	ldi	r26, 0x04	; 4
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	eb eb       	ldi	r30, 0xBB	; 187
    1f70:	ff e0       	ldi	r31, 0x0F	; 15
    1f72:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	7c 83       	std	Y+4, r23	; 0x04
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	0a 97       	sbiw	r24, 0x0a	; 10
    1f84:	14 f0       	brlt	.+4      	; 0x1f8a <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1f8a:	29 81       	ldd	r18, Y+1	; 0x01
    1f8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	82 57       	subi	r24, 0x72	; 114
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
}
    1f9e:	24 96       	adiw	r28, 0x04	; 4
    1fa0:	e2 e0       	ldi	r30, 0x02	; 2
    1fa2:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001fa6 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1fa6:	a4 e0       	ldi	r26, 0x04	; 4
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e9 ed       	ldi	r30, 0xD9	; 217
    1fac:	ff e0       	ldi	r31, 0x0F	; 15
    1fae:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	7c 83       	std	Y+4, r23	; 0x04
    1fb8:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	0a 97       	sbiw	r24, 0x0a	; 10
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1fc2:	0b c0       	rjmp	.+22     	; 0x1fda <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1fc4:	29 81       	ldd	r18, Y+1	; 0x01
    1fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	82 57       	subi	r24, 0x72	; 114
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	21 e0       	ldi	r18, 0x01	; 1
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	20 83       	st	Z, r18
}
    1fda:	24 96       	adiw	r28, 0x04	; 4
    1fdc:	e2 e0       	ldi	r30, 0x02	; 2
    1fde:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00001fe2 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1fe2:	a4 e0       	ldi	r26, 0x04	; 4
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e7 ef       	ldi	r30, 0xF7	; 247
    1fe8:	ff e0       	ldi	r31, 0x0F	; 15
    1fea:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	7c 83       	std	Y+4, r23	; 0x04
    1ff4:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	0a 97       	sbiw	r24, 0x0a	; 10
    1ffc:	0c f0       	brlt	.+2      	; 0x2000 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    2000:	29 81       	ldd	r18, Y+1	; 0x01
    2002:	3a 81       	ldd	r19, Y+2	; 0x02
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	82 0f       	add	r24, r18
    200a:	93 1f       	adc	r25, r19
    200c:	82 57       	subi	r24, 0x72	; 114
    200e:	9f 4f       	sbci	r25, 0xFF	; 255
    2010:	fc 01       	movw	r30, r24
    2012:	10 82       	st	Z, r1
}
    2014:	24 96       	adiw	r28, 0x04	; 4
    2016:	e2 e0       	ldi	r30, 0x02	; 2
    2018:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000201c <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    201c:	cf 92       	push	r12
    201e:	ef 92       	push	r14
    2020:	0f 93       	push	r16
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <_ZN7LCDBaseC1Ev+0xc>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	0f 2e       	mov	r0, r31
    2036:	f7 e0       	ldi	r31, 0x07	; 7
    2038:	cf 2e       	mov	r12, r31
    203a:	f0 2d       	mov	r31, r0
    203c:	0f 2e       	mov	r0, r31
    203e:	f6 e0       	ldi	r31, 0x06	; 6
    2040:	ef 2e       	mov	r14, r31
    2042:	f0 2d       	mov	r31, r0
    2044:	05 e0       	ldi	r16, 0x05	; 5
    2046:	24 e0       	ldi	r18, 0x04	; 4
    2048:	49 e0       	ldi	r20, 0x09	; 9
    204a:	68 e0       	ldi	r22, 0x08	; 8
    204c:	21 d8       	rcall	.-4030   	; 0x1090 <_ZN13LiquidCrystalC1Ehhhhhh>
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	25 ea       	ldi	r18, 0xA5	; 165
    2054:	31 e0       	ldi	r19, 0x01	; 1
    2056:	fc 01       	movw	r30, r24
    2058:	31 83       	std	Z+1, r19	; 0x01
    205a:	20 83       	st	Z, r18
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	e5 e1       	ldi	r30, 0x15	; 21
    2064:	f1 e0       	ldi	r31, 0x01	; 1
    2066:	dc 01       	movw	r26, r24
    2068:	58 96       	adiw	r26, 0x18	; 24
    206a:	01 90       	ld	r0, Z+
    206c:	0d 92       	st	X+, r0
    206e:	2a 95       	dec	r18
    2070:	e1 f7       	brne	.-8      	; 0x206a <_ZN7LCDBaseC1Ev+0x4e>
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	25 e0       	ldi	r18, 0x05	; 5
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	33 a3       	std	Z+35, r19	; 0x23
    207e:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	08 d0       	rcall	.+16     	; 0x2096 <_ZN7LCDBase4InitEv>
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	0f 91       	pop	r16
    2090:	ef 90       	pop	r14
    2092:	cf 90       	pop	r12
    2094:	08 95       	ret

00002096 <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    2096:	a2 e0       	ldi	r26, 0x02	; 2
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e1 e5       	ldi	r30, 0x51	; 81
    209c:	f0 e1       	ldi	r31, 0x10	; 16
    209e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	42 e0       	ldi	r20, 0x02	; 2
    20ae:	60 e1       	ldi	r22, 0x10	; 16
    20b0:	bd d8       	rcall	.-3718   	; 0x122c <_ZN13LiquidCrystal5beginEhhh>
    clear();
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	b4 d9       	rcall	.-3224   	; 0x1420 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	c3 d9       	rcall	.-3194   	; 0x1448 <_ZN13LiquidCrystal9setCursorEhh>

}
    20c2:	22 96       	adiw	r28, 0x02	; 2
    20c4:	e2 e0       	ldi	r30, 0x02	; 2
    20c6:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000020ca <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    20ca:	a4 e0       	ldi	r26, 0x04	; 4
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e6       	ldi	r30, 0x6B	; 107
    20d0:	f0 e1       	ldi	r31, 0x10	; 16
    20d2:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	7c 83       	std	Y+4, r23	; 0x04
    20dc:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    20de:	2b 81       	ldd	r18, Y+3	; 0x03
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	42 2f       	mov	r20, r18
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	af d9       	rcall	.-3234   	; 0x1448 <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    20ea:	2f e8       	ldi	r18, 0x8F	; 143
    20ec:	33 e0       	ldi	r19, 0x03	; 3
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
}
    20f8:	24 96       	adiw	r28, 0x04	; 4
    20fa:	e2 e0       	ldi	r30, 0x02	; 2
    20fc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002100 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    2100:	a6 e0       	ldi	r26, 0x06	; 6
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e8       	ldi	r30, 0x86	; 134
    2106:	f0 e1       	ldi	r31, 0x10	; 16
    2108:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	7c 83       	std	Y+4, r23	; 0x04
    2112:	6b 83       	std	Y+3, r22	; 0x03
    2114:	5e 83       	std	Y+6, r21	; 0x06
    2116:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	3c 81       	ldd	r19, Y+4	; 0x04
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	b9 01       	movw	r22, r18
    2122:	d3 df       	rcall	.-90     	; 0x20ca <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    2124:	2b 81       	ldd	r18, Y+3	; 0x03
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	42 2f       	mov	r20, r18
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	8c d9       	rcall	.-3304   	; 0x1448 <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	2d 81       	ldd	r18, Y+5	; 0x05
    2136:	3e 81       	ldd	r19, Y+6	; 0x06
    2138:	b9 01       	movw	r22, r18
    213a:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <_ZN5Print5printERK6String>
}
    213e:	26 96       	adiw	r28, 0x06	; 6
    2140:	e2 e0       	ldi	r30, 0x02	; 2
    2142:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002146 <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    2146:	a4 e0       	ldi	r26, 0x04	; 4
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e9 ea       	ldi	r30, 0xA9	; 169
    214c:	f0 e1       	ldi	r31, 0x10	; 16
    214e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	69 d0       	rcall	.+210    	; 0x222e <_ZN7LCDBase6getKeyEv>
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	91 05       	cpc	r25, r1
    2168:	91 f0       	breq	.+36     	; 0x218e <_ZN7LCDBase14DetectKeyPressEv+0x48>
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	91 05       	cpc	r25, r1
    216e:	2c f4       	brge	.+10     	; 0x217a <_ZN7LCDBase14DetectKeyPressEv+0x34>
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	49 f0       	breq	.+18     	; 0x2186 <_ZN7LCDBase14DetectKeyPressEv+0x40>
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	49 f0       	breq	.+18     	; 0x218a <_ZN7LCDBase14DetectKeyPressEv+0x44>
    2178:	10 c0       	rjmp	.+32     	; 0x219a <_ZN7LCDBase14DetectKeyPressEv+0x54>
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	91 05       	cpc	r25, r1
    217e:	49 f0       	breq	.+18     	; 0x2192 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    2180:	04 97       	sbiw	r24, 0x04	; 4
    2182:	49 f0       	breq	.+18     	; 0x2196 <_ZN7LCDBase14DetectKeyPressEv+0x50>
    2184:	0a c0       	rjmp	.+20     	; 0x219a <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	09 c0       	rjmp	.+18     	; 0x219c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	07 c0       	rjmp	.+14     	; 0x219c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	05 c0       	rjmp	.+10     	; 0x219c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	03 c0       	rjmp	.+6      	; 0x219c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	01 c0       	rjmp	.+2      	; 0x219c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    219a:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    219c:	24 96       	adiw	r28, 0x04	; 4
    219e:	e2 e0       	ldi	r30, 0x02	; 2
    21a0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000021a4 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    21a4:	a6 e0       	ldi	r26, 0x06	; 6
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e8 ed       	ldi	r30, 0xD8	; 216
    21aa:	f0 e1       	ldi	r31, 0x10	; 16
    21ac:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	7e 83       	std	Y+6, r23	; 0x06
    21b6:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21b8:	1a 82       	std	Y+2, r1	; 0x02
    21ba:	19 82       	std	Y+1, r1	; 0x01
    21bc:	1a c0       	rjmp	.+52     	; 0x21f2 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	3c 81       	ldd	r19, Y+4	; 0x04
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	0c 96       	adiw	r24, 0x0c	; 12
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	82 0f       	add	r24, r18
    21ce:	93 1f       	adc	r25, r19
    21d0:	fc 01       	movw	r30, r24
    21d2:	80 81       	ld	r24, Z
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	9c 01       	movw	r18, r24
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	82 17       	cp	r24, r18
    21de:	93 07       	cpc	r25, r19
    21e0:	18 f4       	brcc	.+6      	; 0x21e8 <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	1f c0       	rjmp	.+62     	; 0x2226 <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	9a 81       	ldd	r25, Y+2	; 0x02
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	fc 01       	movw	r30, r24
    21f8:	22 a1       	ldd	r18, Z+34	; 0x22
    21fa:	33 a1       	ldd	r19, Z+35	; 0x23
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	82 17       	cp	r24, r18
    2202:	93 07       	cpc	r25, r19
    2204:	e4 f2       	brlt	.-72     	; 0x21be <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	fc 01       	movw	r30, r24
    220c:	22 a1       	ldd	r18, Z+34	; 0x22
    220e:	33 a1       	ldd	r19, Z+35	; 0x23
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	82 17       	cp	r24, r18
    2216:	93 07       	cpc	r25, r19
    2218:	24 f0       	brlt	.+8      	; 0x2222 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2226:	26 96       	adiw	r28, 0x06	; 6
    2228:	e2 e0       	ldi	r30, 0x02	; 2
    222a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000222e <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    222e:	a6 e0       	ldi	r26, 0x06	; 6
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ed e1       	ldi	r30, 0x1D	; 29
    2234:	f1 e1       	ldi	r31, 0x11	; 17
    2236:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	0e 94 d6 30 	call	0x61ac	; 0x61ac <analogRead>
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    2248:	29 81       	ldd	r18, Y+1	; 0x01
    224a:	3a 81       	ldd	r19, Y+2	; 0x02
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	b9 01       	movw	r22, r18
    2252:	a8 df       	rcall	.-176    	; 0x21a4 <_ZN7LCDBase13getKeyFromValEj>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    225c:	26 96       	adiw	r28, 0x06	; 6
    225e:	e2 e0       	ldi	r30, 0x02	; 2
    2260:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002264 <_ZnwjPv>:
		typename Operation::second_argument_type value;
	public:
		binder2nd(const Operation& x, const typename Operation::second_argument_type& y) : op(x), value(y) {  }
		typename Operation::result_type operator()(const typename Operation::first_argument_type& x) const{
			return op(x,value);
		}
    2264:	a4 e0       	ldi	r26, 0x04	; 4
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e8 e3       	ldi	r30, 0x38	; 56
    226a:	f1 e1       	ldi	r31, 0x11	; 17
    226c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	7c 83       	std	Y+4, r23	; 0x04
    2276:	6b 83       	std	Y+3, r22	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	24 96       	adiw	r28, 0x04	; 4
    227e:	e2 e0       	ldi	r30, 0x02	; 2
    2280:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002284 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>:
    2284:	aa e0       	ldi	r26, 0x0A	; 10
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e4       	ldi	r30, 0x48	; 72
    228a:	f1 e1       	ldi	r31, 0x11	; 17
    228c:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    2290:	9a 87       	std	Y+10, r25	; 0x0a
    2292:	89 87       	std	Y+9, r24	; 0x09
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	a4 d1       	rcall	.+840    	; 0x25e2 <_ZNSt6vectorIdSaIdEE3endEv>
    229a:	8c 01       	movw	r16, r24
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	8f d1       	rcall	.+798    	; 0x25c0 <_ZNSt6vectorIdSaIdEE5beginEv>
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	a9 01       	movw	r20, r18
    22a8:	b8 01       	movw	r22, r16
    22aa:	b7 d1       	rcall	.+878    	; 0x261a <_ZSt10accumulateIPddET0_T_S2_S1_>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	ab 83       	std	Y+3, r26	; 0x03
    22b6:	bc 83       	std	Y+4, r27	; 0x04
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	e8 d1       	rcall	.+976    	; 0x268e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    22be:	cc 01       	movw	r24, r24
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__floatunsisf>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 01       	movw	r18, r24
    22d2:	ad 01       	movw	r20, r26
    22d4:	69 81       	ldd	r22, Y+1	; 0x01
    22d6:	7a 81       	ldd	r23, Y+2	; 0x02
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	af 83       	std	Y+7, r26	; 0x07
    22ea:	b8 87       	std	Y+8, r27	; 0x08
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	af 81       	ldd	r26, Y+7	; 0x07
    22f2:	b8 85       	ldd	r27, Y+8	; 0x08
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	2a 96       	adiw	r28, 0x0a	; 10
    22fa:	e4 e0       	ldi	r30, 0x04	; 4
    22fc:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00002300 <_ZN7MathExt16CalculateAverageEPii>:
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	66 97       	sbiw	r28, 0x16	; 22
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	98 8b       	std	Y+16, r25	; 0x10
    231e:	8f 87       	std	Y+15, r24	; 0x0f
    2320:	7a 8b       	std	Y+18, r23	; 0x12
    2322:	69 8b       	std	Y+17, r22	; 0x11
    2324:	1f 82       	std	Y+7, r1	; 0x07
    2326:	18 86       	std	Y+8, r1	; 0x08
    2328:	19 86       	std	Y+9, r1	; 0x09
    232a:	1a 86       	std	Y+10, r1	; 0x0a
    232c:	89 89       	ldd	r24, Y+17	; 0x11
    232e:	9a 89       	ldd	r25, Y+18	; 0x12
    2330:	18 16       	cp	r1, r24
    2332:	19 06       	cpc	r1, r25
    2334:	5c f0       	brlt	.+22     	; 0x234c <_ZN7MathExt16CalculateAverageEPii+0x4c>
    2336:	80 ea       	ldi	r24, 0xA0	; 160
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	bc 01       	movw	r22, r24
    233c:	86 e8       	ldi	r24, 0x86	; 134
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	dc 01       	movw	r26, r24
    234a:	2b c1       	rjmp	.+598    	; 0x25a2 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    234c:	89 89       	ldd	r24, Y+17	; 0x11
    234e:	9a 89       	ldd	r25, Y+18	; 0x12
    2350:	05 97       	sbiw	r24, 0x05	; 5
    2352:	0c f0       	brlt	.+2      	; 0x2356 <_ZN7MathExt16CalculateAverageEPii+0x56>
    2354:	49 c0       	rjmp	.+146    	; 0x23e8 <_ZN7MathExt16CalculateAverageEPii+0xe8>
    2356:	1a 82       	std	Y+2, r1	; 0x02
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	20 c0       	rjmp	.+64     	; 0x239c <_ZN7MathExt16CalculateAverageEPii+0x9c>
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	2f 85       	ldd	r18, Y+15	; 0x0f
    2366:	38 89       	ldd	r19, Y+16	; 0x10
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	fc 01       	movw	r30, r24
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	09 2e       	mov	r0, r25
    2374:	00 0c       	add	r0, r0
    2376:	aa 0b       	sbc	r26, r26
    2378:	bb 0b       	sbc	r27, r27
    237a:	2f 81       	ldd	r18, Y+7	; 0x07
    237c:	38 85       	ldd	r19, Y+8	; 0x08
    237e:	49 85       	ldd	r20, Y+9	; 0x09
    2380:	5a 85       	ldd	r21, Y+10	; 0x0a
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	a4 1f       	adc	r26, r20
    2388:	b5 1f       	adc	r27, r21
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	29 81       	ldd	r18, Y+1	; 0x01
    239e:	3a 81       	ldd	r19, Y+2	; 0x02
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	9a 89       	ldd	r25, Y+18	; 0x12
    23a4:	28 17       	cp	r18, r24
    23a6:	39 07       	cpc	r19, r25
    23a8:	cc f2       	brlt	.-78     	; 0x235c <_ZN7MathExt16CalculateAverageEPii+0x5c>
    23aa:	89 89       	ldd	r24, Y+17	; 0x11
    23ac:	9a 89       	ldd	r25, Y+18	; 0x12
    23ae:	9c 01       	movw	r18, r24
    23b0:	99 0f       	add	r25, r25
    23b2:	44 0b       	sbc	r20, r20
    23b4:	55 0b       	sbc	r21, r21
    23b6:	8f 81       	ldd	r24, Y+7	; 0x07
    23b8:	98 85       	ldd	r25, Y+8	; 0x08
    23ba:	a9 85       	ldd	r26, Y+9	; 0x09
    23bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 b6 34 	call	0x696c	; 0x696c <__divmodsi4>
    23c6:	da 01       	movw	r26, r20
    23c8:	c9 01       	movw	r24, r18
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8b 87       	std	Y+11, r24	; 0x0b
    23d8:	9c 87       	std	Y+12, r25	; 0x0c
    23da:	ad 87       	std	Y+13, r26	; 0x0d
    23dc:	be 87       	std	Y+14, r27	; 0x0e
    23de:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    23e4:	be 85       	ldd	r27, Y+14	; 0x0e
    23e6:	dd c0       	rjmp	.+442    	; 0x25a2 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    23e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ea:	98 89       	ldd	r25, Y+16	; 0x10
    23ec:	fc 01       	movw	r30, r24
    23ee:	20 81       	ld	r18, Z
    23f0:	31 81       	ldd	r19, Z+1	; 0x01
    23f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f4:	98 89       	ldd	r25, Y+16	; 0x10
    23f6:	02 96       	adiw	r24, 0x02	; 2
    23f8:	fc 01       	movw	r30, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	7c f4       	brge	.+30     	; 0x2422 <_ZN7MathExt16CalculateAverageEPii+0x122>
    2404:	8f 85       	ldd	r24, Y+15	; 0x0f
    2406:	98 89       	ldd	r25, Y+16	; 0x10
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    2412:	8f 85       	ldd	r24, Y+15	; 0x0f
    2414:	98 89       	ldd	r25, Y+16	; 0x10
    2416:	fc 01       	movw	r30, r24
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	0e c0       	rjmp	.+28     	; 0x243e <_ZN7MathExt16CalculateAverageEPii+0x13e>
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	98 89       	ldd	r25, Y+16	; 0x10
    2426:	fc 01       	movw	r30, r24
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	98 89       	ldd	r25, Y+16	; 0x10
    2434:	fc 01       	movw	r30, r24
    2436:	80 81       	ld	r24, Z
    2438:	91 81       	ldd	r25, Z+1	; 0x01
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	80 c0       	rjmp	.+256    	; 0x2548 <_ZN7MathExt16CalculateAverageEPii+0x248>
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	2f 85       	ldd	r18, Y+15	; 0x0f
    2452:	38 89       	ldd	r19, Y+16	; 0x10
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	fc 01       	movw	r30, r24
    245a:	20 81       	ld	r18, Z
    245c:	31 81       	ldd	r19, Z+1	; 0x01
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	28 17       	cp	r18, r24
    2464:	39 07       	cpc	r19, r25
    2466:	04 f5       	brge	.+64     	; 0x24a8 <_ZN7MathExt16CalculateAverageEPii+0x1a8>
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	09 2e       	mov	r0, r25
    246e:	00 0c       	add	r0, r0
    2470:	aa 0b       	sbc	r26, r26
    2472:	bb 0b       	sbc	r27, r27
    2474:	2f 81       	ldd	r18, Y+7	; 0x07
    2476:	38 85       	ldd	r19, Y+8	; 0x08
    2478:	49 85       	ldd	r20, Y+9	; 0x09
    247a:	5a 85       	ldd	r21, Y+10	; 0x0a
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	a4 1f       	adc	r26, r20
    2482:	b5 1f       	adc	r27, r21
    2484:	8f 83       	std	Y+7, r24	; 0x07
    2486:	98 87       	std	Y+8, r25	; 0x08
    2488:	a9 87       	std	Y+9, r26	; 0x09
    248a:	ba 87       	std	Y+10, r27	; 0x0a
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	2f 85       	ldd	r18, Y+15	; 0x0f
    2496:	38 89       	ldd	r19, Y+16	; 0x10
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	fc 01       	movw	r30, r24
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	4b c0       	rjmp	.+150    	; 0x253e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    24b2:	38 89       	ldd	r19, Y+16	; 0x10
    24b4:	82 0f       	add	r24, r18
    24b6:	93 1f       	adc	r25, r19
    24b8:	fc 01       	movw	r30, r24
    24ba:	20 81       	ld	r18, Z
    24bc:	31 81       	ldd	r19, Z+1	; 0x01
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	82 17       	cp	r24, r18
    24c4:	93 07       	cpc	r25, r19
    24c6:	04 f5       	brge	.+64     	; 0x2508 <_ZN7MathExt16CalculateAverageEPii+0x208>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	09 2e       	mov	r0, r25
    24ce:	00 0c       	add	r0, r0
    24d0:	aa 0b       	sbc	r26, r26
    24d2:	bb 0b       	sbc	r27, r27
    24d4:	2f 81       	ldd	r18, Y+7	; 0x07
    24d6:	38 85       	ldd	r19, Y+8	; 0x08
    24d8:	49 85       	ldd	r20, Y+9	; 0x09
    24da:	5a 85       	ldd	r21, Y+10	; 0x0a
    24dc:	82 0f       	add	r24, r18
    24de:	93 1f       	adc	r25, r19
    24e0:	a4 1f       	adc	r26, r20
    24e2:	b5 1f       	adc	r27, r21
    24e4:	8f 83       	std	Y+7, r24	; 0x07
    24e6:	98 87       	std	Y+8, r25	; 0x08
    24e8:	a9 87       	std	Y+9, r26	; 0x09
    24ea:	ba 87       	std	Y+10, r27	; 0x0a
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    24f6:	38 89       	ldd	r19, Y+16	; 0x10
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	1b c0       	rjmp	.+54     	; 0x253e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	2f 85       	ldd	r18, Y+15	; 0x0f
    2512:	38 89       	ldd	r19, Y+16	; 0x10
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	09 2e       	mov	r0, r25
    2520:	00 0c       	add	r0, r0
    2522:	aa 0b       	sbc	r26, r26
    2524:	bb 0b       	sbc	r27, r27
    2526:	2f 81       	ldd	r18, Y+7	; 0x07
    2528:	38 85       	ldd	r19, Y+8	; 0x08
    252a:	49 85       	ldd	r20, Y+9	; 0x09
    252c:	5a 85       	ldd	r21, Y+10	; 0x0a
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	a4 1f       	adc	r26, r20
    2534:	b5 1f       	adc	r27, r21
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	29 81       	ldd	r18, Y+1	; 0x01
    254a:	3a 81       	ldd	r19, Y+2	; 0x02
    254c:	89 89       	ldd	r24, Y+17	; 0x11
    254e:	9a 89       	ldd	r25, Y+18	; 0x12
    2550:	28 17       	cp	r18, r24
    2552:	39 07       	cpc	r19, r25
    2554:	0c f4       	brge	.+2      	; 0x2558 <_ZN7MathExt16CalculateAverageEPii+0x258>
    2556:	78 cf       	rjmp	.-272    	; 0x2448 <_ZN7MathExt16CalculateAverageEPii+0x148>
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    2564:	6b 01       	movw	r12, r22
    2566:	7c 01       	movw	r14, r24
    2568:	89 89       	ldd	r24, Y+17	; 0x11
    256a:	9a 89       	ldd	r25, Y+18	; 0x12
    256c:	02 97       	sbiw	r24, 0x02	; 2
    256e:	09 2e       	mov	r0, r25
    2570:	00 0c       	add	r0, r0
    2572:	aa 0b       	sbc	r26, r26
    2574:	bb 0b       	sbc	r27, r27
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9c 01       	movw	r18, r24
    2584:	ad 01       	movw	r20, r26
    2586:	c7 01       	movw	r24, r14
    2588:	b6 01       	movw	r22, r12
    258a:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8b 87       	std	Y+11, r24	; 0x0b
    2594:	9c 87       	std	Y+12, r25	; 0x0c
    2596:	ad 87       	std	Y+13, r26	; 0x0d
    2598:	be 87       	std	Y+14, r27	; 0x0e
    259a:	8b 85       	ldd	r24, Y+11	; 0x0b
    259c:	9c 85       	ldd	r25, Y+12	; 0x0c
    259e:	ad 85       	ldd	r26, Y+13	; 0x0d
    25a0:	be 85       	ldd	r27, Y+14	; 0x0e
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	66 96       	adiw	r28, 0x16	; 22
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	cf 90       	pop	r12
    25be:	08 95       	ret

000025c0 <_ZNSt6vectorIdSaIdEE5beginEv>:
    25c0:	a2 e0       	ldi	r26, 0x02	; 2
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 ee       	ldi	r30, 0xE6	; 230
    25c6:	f2 e1       	ldi	r31, 0x12	; 18
    25c8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	22 96       	adiw	r28, 0x02	; 2
    25dc:	e2 e0       	ldi	r30, 0x02	; 2
    25de:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000025e2 <_ZNSt6vectorIdSaIdEE3endEv>:
    25e2:	a2 e0       	ldi	r26, 0x02	; 2
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e7 ef       	ldi	r30, 0xF7	; 247
    25e8:	f2 e1       	ldi	r31, 0x12	; 18
    25ea:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	fc 01       	movw	r30, r24
    25f8:	20 81       	ld	r18, Z
    25fa:	31 81       	ldd	r19, Z+1	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	84 81       	ldd	r24, Z+4	; 0x04
    2604:	95 81       	ldd	r25, Z+5	; 0x05
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	22 96       	adiw	r28, 0x02	; 2
    2614:	e2 e0       	ldi	r30, 0x02	; 2
    2616:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000261a <_ZSt10accumulateIPddET0_T_S2_S1_>:
    261a:	a8 e0       	ldi	r26, 0x08	; 8
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e3 e1       	ldi	r30, 0x13	; 19
    2620:	f3 e1       	ldi	r31, 0x13	; 19
    2622:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	7c 83       	std	Y+4, r23	; 0x04
    262c:	6b 83       	std	Y+3, r22	; 0x03
    262e:	2d 83       	std	Y+5, r18	; 0x05
    2630:	3e 83       	std	Y+6, r19	; 0x06
    2632:	4f 83       	std	Y+7, r20	; 0x07
    2634:	58 87       	std	Y+8, r21	; 0x08
    2636:	1a c0       	rjmp	.+52     	; 0x266c <_ZSt10accumulateIPddET0_T_S2_S1_+0x52>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	fc 01       	movw	r30, r24
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	a2 81       	ldd	r26, Z+2	; 0x02
    2644:	b3 81       	ldd	r27, Z+3	; 0x03
    2646:	9c 01       	movw	r18, r24
    2648:	ad 01       	movw	r20, r26
    264a:	6d 81       	ldd	r22, Y+5	; 0x05
    264c:	7e 81       	ldd	r23, Y+6	; 0x06
    264e:	8f 81       	ldd	r24, Y+7	; 0x07
    2650:	98 85       	ldd	r25, Y+8	; 0x08
    2652:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	af 83       	std	Y+7, r26	; 0x07
    2660:	b8 87       	std	Y+8, r27	; 0x08
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	04 96       	adiw	r24, 0x04	; 4
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	29 81       	ldd	r18, Y+1	; 0x01
    266e:	3a 81       	ldd	r19, Y+2	; 0x02
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	28 17       	cp	r18, r24
    2676:	39 07       	cpc	r19, r25
    2678:	f9 f6       	brne	.-66     	; 0x2638 <_ZSt10accumulateIPddET0_T_S2_S1_+0x1e>
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	af 81       	ldd	r26, Y+7	; 0x07
    2680:	b8 85       	ldd	r27, Y+8	; 0x08
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	28 96       	adiw	r28, 0x08	; 8
    2688:	e2 e0       	ldi	r30, 0x02	; 2
    268a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000268e <_ZNKSt6vectorIdSaIdEE4sizeEv>:
    268e:	a2 e0       	ldi	r26, 0x02	; 2
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e4       	ldi	r30, 0x4D	; 77
    2694:	f3 e1       	ldi	r31, 0x13	; 19
    2696:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	fc 01       	movw	r30, r24
    26a4:	84 81       	ldd	r24, Z+4	; 0x04
    26a6:	95 81       	ldd	r25, Z+5	; 0x05
    26a8:	22 96       	adiw	r28, 0x02	; 2
    26aa:	e2 e0       	ldi	r30, 0x02	; 2
    26ac:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000026b0 <_ZNSaIdEC1Ev>:
    26b0:	a2 e0       	ldi	r26, 0x02	; 2
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ee e5       	ldi	r30, 0x5E	; 94
    26b6:	f3 e1       	ldi	r31, 0x13	; 19
    26b8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	22 96       	adiw	r28, 0x02	; 2
    26c2:	e2 e0       	ldi	r30, 0x02	; 2
    26c4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000026c8 <_ZNSaIdED1Ev>:
    26c8:	a2 e0       	ldi	r26, 0x02	; 2
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ea e6       	ldi	r30, 0x6A	; 106
    26ce:	f3 e1       	ldi	r31, 0x13	; 19
    26d0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	22 96       	adiw	r28, 0x02	; 2
    26da:	e2 e0       	ldi	r30, 0x02	; 2
    26dc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000026e0 <_ZNSt6vectorIdSaIdEED1Ev>:
    26e0:	a4 e0       	ldi	r26, 0x04	; 4
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e6 e7       	ldi	r30, 0x76	; 118
    26e6:	f3 e1       	ldi	r31, 0x13	; 19
    26e8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	1a 82       	std	Y+2, r1	; 0x02
    26f2:	19 82       	std	Y+1, r1	; 0x01
    26f4:	17 c0       	rjmp	.+46     	; 0x2724 <_ZNSt6vectorIdSaIdEED1Ev+0x44>
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	fc 01       	movw	r30, r24
    26fc:	20 81       	ld	r18, Z
    26fe:	31 81       	ldd	r19, Z+1	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	28 0f       	add	r18, r24
    270e:	39 1f       	adc	r19, r25
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	06 96       	adiw	r24, 0x06	; 6
    2716:	b9 01       	movw	r22, r18
    2718:	a2 d0       	rcall	.+324    	; 0x285e <_ZNSaIdE7destroyEPd>
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	fc 01       	movw	r30, r24
    272a:	24 81       	ldd	r18, Z+4	; 0x04
    272c:	35 81       	ldd	r19, Z+5	; 0x05
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	82 17       	cp	r24, r18
    2734:	93 07       	cpc	r25, r19
    2736:	f8 f2       	brcs	.-66     	; 0x26f6 <_ZNSt6vectorIdSaIdEED1Ev+0x16>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	fc 01       	movw	r30, r24
    273e:	42 81       	ldd	r20, Z+2	; 0x02
    2740:	53 81       	ldd	r21, Z+3	; 0x03
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	fc 01       	movw	r30, r24
    2748:	20 81       	ld	r18, Z
    274a:	31 81       	ldd	r19, Z+1	; 0x01
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	06 96       	adiw	r24, 0x06	; 6
    2752:	b9 01       	movw	r22, r18
    2754:	92 d0       	rcall	.+292    	; 0x287a <_ZNSaIdE10deallocateEPdj>
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	06 96       	adiw	r24, 0x06	; 6
    275c:	b5 df       	rcall	.-150    	; 0x26c8 <_ZNSaIdED1Ev>
    275e:	24 96       	adiw	r28, 0x04	; 4
    2760:	e2 e0       	ldi	r30, 0x02	; 2
    2762:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002766 <_ZNSaIdE8allocateEjPKv>:
    2766:	a6 e0       	ldi	r26, 0x06	; 6
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e9 eb       	ldi	r30, 0xB9	; 185
    276c:	f3 e1       	ldi	r31, 0x13	; 19
    276e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	7c 83       	std	Y+4, r23	; 0x04
    2778:	6b 83       	std	Y+3, r22	; 0x03
    277a:	5e 83       	std	Y+6, r21	; 0x06
    277c:	4d 83       	std	Y+5, r20	; 0x05
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_Znwj>
    278e:	26 96       	adiw	r28, 0x06	; 6
    2790:	e2 e0       	ldi	r30, 0x02	; 2
    2792:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002796 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
    2796:	a8 e0       	ldi	r26, 0x08	; 8
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e1 ed       	ldi	r30, 0xD1	; 209
    279c:	f3 e1       	ldi	r31, 0x13	; 19
    279e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    27a2:	9c 83       	std	Y+4, r25	; 0x04
    27a4:	8b 83       	std	Y+3, r24	; 0x03
    27a6:	7e 83       	std	Y+6, r23	; 0x06
    27a8:	6d 83       	std	Y+5, r22	; 0x05
    27aa:	58 87       	std	Y+8, r21	; 0x08
    27ac:	4f 83       	std	Y+7, r20	; 0x07
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	fc 01       	movw	r30, r24
    27b4:	24 81       	ldd	r18, Z+4	; 0x04
    27b6:	35 81       	ldd	r19, Z+5	; 0x05
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	28 17       	cp	r18, r24
    27be:	39 07       	cpc	r19, r25
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x2e>
    27c2:	43 c0       	rjmp	.+134    	; 0x284a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xb4>
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	fc 01       	movw	r30, r24
    27ca:	22 81       	ldd	r18, Z+2	; 0x02
    27cc:	33 81       	ldd	r19, Z+3	; 0x03
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	28 17       	cp	r18, r24
    27d4:	39 07       	cpc	r19, r25
    27d6:	48 f4       	brcc	.+18     	; 0x27ea <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x54>
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	9c 01       	movw	r18, r24
    27de:	28 5f       	subi	r18, 0xF8	; 248
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	b9 01       	movw	r22, r18
    27e8:	5c d0       	rcall	.+184    	; 0x28a2 <_ZNSt6vectorIdSaIdEE7reserveEj>
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	fc 01       	movw	r30, r24
    27f0:	84 81       	ldd	r24, Z+4	; 0x04
    27f2:	95 81       	ldd	r25, Z+5	; 0x05
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	19 c0       	rjmp	.+50     	; 0x282c <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x96>
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	fc 01       	movw	r30, r24
    2800:	20 81       	ld	r18, Z
    2802:	31 81       	ldd	r19, Z+1	; 0x01
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	28 0f       	add	r18, r24
    2812:	39 1f       	adc	r19, r25
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	06 96       	adiw	r24, 0x06	; 6
    281a:	4f 81       	ldd	r20, Y+7	; 0x07
    281c:	58 85       	ldd	r21, Y+8	; 0x08
    281e:	b9 01       	movw	r22, r18
    2820:	c7 d0       	rcall	.+398    	; 0x29b0 <_ZNSaIdE9constructEPdRKd>
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	29 81       	ldd	r18, Y+1	; 0x01
    282e:	3a 81       	ldd	r19, Y+2	; 0x02
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	28 17       	cp	r18, r24
    2836:	39 07       	cpc	r19, r25
    2838:	00 f3       	brcs	.-64     	; 0x27fa <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x64>
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	2d 81       	ldd	r18, Y+5	; 0x05
    2840:	3e 81       	ldd	r19, Y+6	; 0x06
    2842:	fc 01       	movw	r30, r24
    2844:	35 83       	std	Z+5, r19	; 0x05
    2846:	24 83       	std	Z+4, r18	; 0x04
    2848:	06 c0       	rjmp	.+12     	; 0x2856 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xc0>
    284a:	2d 81       	ldd	r18, Y+5	; 0x05
    284c:	3e 81       	ldd	r19, Y+6	; 0x06
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	b9 01       	movw	r22, r18
    2854:	d3 d0       	rcall	.+422    	; 0x29fc <_ZNSt6vectorIdSaIdEE8downsizeEj>
    2856:	28 96       	adiw	r28, 0x08	; 8
    2858:	e2 e0       	ldi	r30, 0x02	; 2
    285a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000285e <_ZNSaIdE7destroyEPd>:
    285e:	a4 e0       	ldi	r26, 0x04	; 4
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e5 e3       	ldi	r30, 0x35	; 53
    2864:	f4 e1       	ldi	r31, 0x14	; 20
    2866:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	7c 83       	std	Y+4, r23	; 0x04
    2870:	6b 83       	std	Y+3, r22	; 0x03
    2872:	24 96       	adiw	r28, 0x04	; 4
    2874:	e2 e0       	ldi	r30, 0x02	; 2
    2876:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000287a <_ZNSaIdE10deallocateEPdj>:
    287a:	a6 e0       	ldi	r26, 0x06	; 6
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e3 e4       	ldi	r30, 0x43	; 67
    2880:	f4 e1       	ldi	r31, 0x14	; 20
    2882:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	7c 83       	std	Y+4, r23	; 0x04
    288c:	6b 83       	std	Y+3, r22	; 0x03
    288e:	5e 83       	std	Y+6, r21	; 0x06
    2890:	4d 83       	std	Y+5, r20	; 0x05
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZdlPv>
    289a:	26 96       	adiw	r28, 0x06	; 6
    289c:	e2 e0       	ldi	r30, 0x02	; 2
    289e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000028a2 <_ZNSt6vectorIdSaIdEE7reserveEj>:
		}
		a.deallocate(data, data_size);
	}


	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::reserve(size_type n){
    28a2:	aa e0       	ldi	r26, 0x0A	; 10
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e7 e5       	ldi	r30, 0x57	; 87
    28a8:	f4 e1       	ldi	r31, 0x14	; 20
    28aa:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    28ae:	98 87       	std	Y+8, r25	; 0x08
    28b0:	8f 83       	std	Y+7, r24	; 0x07
    28b2:	7a 87       	std	Y+10, r23	; 0x0a
    28b4:	69 87       	std	Y+9, r22	; 0x09
		if(n > data_size){              //We never shrink...
    28b6:	8f 81       	ldd	r24, Y+7	; 0x07
    28b8:	98 85       	ldd	r25, Y+8	; 0x08
    28ba:	fc 01       	movw	r30, r24
    28bc:	22 81       	ldd	r18, Z+2	; 0x02
    28be:	33 81       	ldd	r19, Z+3	; 0x03
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <_ZNSt6vectorIdSaIdEE7reserveEj+0x2a>
    28ca:	6e c0       	rjmp	.+220    	; 0x29a8 <_ZNSt6vectorIdSaIdEE7reserveEj+0x106>
			T * temp_ptr = data;
    28cc:	8f 81       	ldd	r24, Y+7	; 0x07
    28ce:	98 85       	ldd	r25, Y+8	; 0x08
    28d0:	fc 01       	movw	r30, r24
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
			size_type temp_size = data_size;
    28da:	8f 81       	ldd	r24, Y+7	; 0x07
    28dc:	98 85       	ldd	r25, Y+8	; 0x08
    28de:	fc 01       	movw	r30, r24
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05

			data_size = n;
    28e8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ea:	98 85       	ldd	r25, Y+8	; 0x08
    28ec:	29 85       	ldd	r18, Y+9	; 0x09
    28ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    28f0:	fc 01       	movw	r30, r24
    28f2:	33 83       	std	Z+3, r19	; 0x03
    28f4:	22 83       	std	Z+2, r18	; 0x02
			data = a.allocate(data_size);
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	98 85       	ldd	r25, Y+8	; 0x08
    28fa:	fc 01       	movw	r30, r24
    28fc:	22 81       	ldd	r18, Z+2	; 0x02
    28fe:	33 81       	ldd	r19, Z+3	; 0x03
    2900:	8f 81       	ldd	r24, Y+7	; 0x07
    2902:	98 85       	ldd	r25, Y+8	; 0x08
    2904:	06 96       	adiw	r24, 0x06	; 6
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	b9 01       	movw	r22, r18
    290c:	2c df       	rcall	.-424    	; 0x2766 <_ZNSaIdE8allocateEjPKv>
    290e:	9c 01       	movw	r18, r24
    2910:	8f 81       	ldd	r24, Y+7	; 0x07
    2912:	98 85       	ldd	r25, Y+8	; 0x08
    2914:	fc 01       	movw	r30, r24
    2916:	31 83       	std	Z+1, r19	; 0x01
    2918:	20 83       	st	Z, r18

			for(size_type i = 0; i<elements; ++i){
    291a:	1a 82       	std	Y+2, r1	; 0x02
    291c:	19 82       	std	Y+1, r1	; 0x01
    291e:	31 c0       	rjmp	.+98     	; 0x2982 <_ZNSt6vectorIdSaIdEE7reserveEj+0xe0>
				a.construct(data+i, temp_ptr[i]);
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	a9 01       	movw	r20, r18
    2932:	48 0f       	add	r20, r24
    2934:	59 1f       	adc	r21, r25
    2936:	8f 81       	ldd	r24, Y+7	; 0x07
    2938:	98 85       	ldd	r25, Y+8	; 0x08
    293a:	fc 01       	movw	r30, r24
    293c:	20 81       	ld	r18, Z
    293e:	31 81       	ldd	r19, Z+1	; 0x01
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	28 0f       	add	r18, r24
    294e:	39 1f       	adc	r19, r25
    2950:	8f 81       	ldd	r24, Y+7	; 0x07
    2952:	98 85       	ldd	r25, Y+8	; 0x08
    2954:	06 96       	adiw	r24, 0x06	; 6
    2956:	b9 01       	movw	r22, r18
    2958:	2b d0       	rcall	.+86     	; 0x29b0 <_ZNSaIdE9constructEPdRKd>
				a.destroy(temp_ptr+i);
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	2b 81       	ldd	r18, Y+3	; 0x03
    2968:	3c 81       	ldd	r19, Y+4	; 0x04
    296a:	28 0f       	add	r18, r24
    296c:	39 1f       	adc	r19, r25
    296e:	8f 81       	ldd	r24, Y+7	; 0x07
    2970:	98 85       	ldd	r25, Y+8	; 0x08
    2972:	06 96       	adiw	r24, 0x06	; 6
    2974:	b9 01       	movw	r22, r18
    2976:	73 df       	rcall	.-282    	; 0x285e <_ZNSaIdE7destroyEPd>
			size_type temp_size = data_size;

			data_size = n;
			data = a.allocate(data_size);

			for(size_type i = 0; i<elements; ++i){
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	8f 81       	ldd	r24, Y+7	; 0x07
    2984:	98 85       	ldd	r25, Y+8	; 0x08
    2986:	fc 01       	movw	r30, r24
    2988:	24 81       	ldd	r18, Z+4	; 0x04
    298a:	35 81       	ldd	r19, Z+5	; 0x05
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	82 17       	cp	r24, r18
    2992:	93 07       	cpc	r25, r19
    2994:	28 f2       	brcs	.-118    	; 0x2920 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7e>
				a.construct(data+i, temp_ptr[i]);
				a.destroy(temp_ptr+i);
			}
			a.deallocate(temp_ptr, temp_size);
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	06 96       	adiw	r24, 0x06	; 6
    299c:	4d 81       	ldd	r20, Y+5	; 0x05
    299e:	5e 81       	ldd	r21, Y+6	; 0x06
    29a0:	2b 81       	ldd	r18, Y+3	; 0x03
    29a2:	3c 81       	ldd	r19, Y+4	; 0x04
    29a4:	b9 01       	movw	r22, r18
    29a6:	69 df       	rcall	.-302    	; 0x287a <_ZNSaIdE10deallocateEPdj>
		}
	}
    29a8:	2a 96       	adiw	r28, 0x0a	; 10
    29aa:	e2 e0       	ldi	r30, 0x02	; 2
    29ac:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000029b0 <_ZNSaIdE9constructEPdRKd>:
	void deallocate(pointer p, size_type){
		::operator delete(p);
	}

	//Use placement new to engage the constructor
	void construct(pointer p, const T& val) { new((void*)p) T(val); }
    29b0:	a6 e0       	ldi	r26, 0x06	; 6
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ee ed       	ldi	r30, 0xDE	; 222
    29b6:	f4 e1       	ldi	r31, 0x14	; 20
    29b8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	7c 83       	std	Y+4, r23	; 0x04
    29c2:	6b 83       	std	Y+3, r22	; 0x03
    29c4:	5e 83       	std	Y+6, r21	; 0x06
    29c6:	4d 83       	std	Y+5, r20	; 0x05
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	bc 01       	movw	r22, r24
    29ce:	84 e0       	ldi	r24, 0x04	; 4
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	48 dc       	rcall	.-1904   	; 0x2264 <_ZnwjPv>
    29d4:	9c 01       	movw	r18, r24
    29d6:	21 15       	cp	r18, r1
    29d8:	31 05       	cpc	r19, r1
    29da:	61 f0       	breq	.+24     	; 0x29f4 <_ZNSaIdE9constructEPdRKd+0x44>
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	fc 01       	movw	r30, r24
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	a2 81       	ldd	r26, Z+2	; 0x02
    29e8:	b3 81       	ldd	r27, Z+3	; 0x03
    29ea:	f9 01       	movw	r30, r18
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
    29f4:	26 96       	adiw	r28, 0x06	; 6
    29f6:	e2 e0       	ldi	r30, 0x02	; 2
    29f8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000029fc <_ZNSt6vectorIdSaIdEE8downsizeEj>:
		}else{
			downsize(sz);
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
    29fc:	a6 e0       	ldi	r26, 0x06	; 6
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e4 e0       	ldi	r30, 0x04	; 4
    2a02:	f5 e1       	ldi	r31, 0x15	; 21
    2a04:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	7e 83       	std	Y+6, r23	; 0x06
    2a0e:	6d 83       	std	Y+5, r22	; 0x05
		if(sz < elements){      //Actually are downsizing
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	fc 01       	movw	r30, r24
    2a16:	24 81       	ldd	r18, Z+4	; 0x04
    2a18:	35 81       	ldd	r19, Z+5	; 0x05
    2a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1e:	82 17       	cp	r24, r18
    2a20:	93 07       	cpc	r25, r19
    2a22:	68 f5       	brcc	.+90     	; 0x2a7e <_ZNSt6vectorIdSaIdEE8downsizeEj+0x82>
			for(size_t i = sz; i< elements; ++i){
    2a24:	8d 81       	ldd	r24, Y+5	; 0x05
    2a26:	9e 81       	ldd	r25, Y+6	; 0x06
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	17 c0       	rjmp	.+46     	; 0x2a5c <_ZNSt6vectorIdSaIdEE8downsizeEj+0x60>
				a.destroy(data+i);
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	fc 01       	movw	r30, r24
    2a34:	20 81       	ld	r18, Z
    2a36:	31 81       	ldd	r19, Z+1	; 0x01
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	28 0f       	add	r18, r24
    2a46:	39 1f       	adc	r19, r25
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	06 96       	adiw	r24, 0x06	; 6
    2a4e:	b9 01       	movw	r22, r18
    2a50:	06 df       	rcall	.-500    	; 0x285e <_ZNSaIdE7destroyEPd>
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
		if(sz < elements){      //Actually are downsizing
			for(size_t i = sz; i< elements; ++i){
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	fc 01       	movw	r30, r24
    2a62:	24 81       	ldd	r18, Z+4	; 0x04
    2a64:	35 81       	ldd	r19, Z+5	; 0x05
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	82 17       	cp	r24, r18
    2a6c:	93 07       	cpc	r25, r19
    2a6e:	f8 f2       	brcs	.-66     	; 0x2a2e <_ZNSt6vectorIdSaIdEE8downsizeEj+0x32>
				a.destroy(data+i);
			}
			elements = sz;
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	2d 81       	ldd	r18, Y+5	; 0x05
    2a76:	3e 81       	ldd	r19, Y+6	; 0x06
    2a78:	fc 01       	movw	r30, r24
    2a7a:	35 83       	std	Z+5, r19	; 0x05
    2a7c:	24 83       	std	Z+4, r18	; 0x04
		}
	}
    2a7e:	26 96       	adiw	r28, 0x06	; 6
    2a80:	e2 e0       	ldi	r30, 0x02	; 2
    2a82:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002a86 <_ZNK6String5c_strEv>:
    2a86:	a2 e0       	ldi	r26, 0x02	; 2
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 e4       	ldi	r30, 0x49	; 73
    2a8c:	f5 e1       	ldi	r31, 0x15	; 21
    2a8e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	22 96       	adiw	r28, 0x02	; 2
    2aa2:	e2 e0       	ldi	r30, 0x02	; 2
    2aa4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002aa8 <_ZN15StringSumHelperC1EPKc>:
    2aa8:	a4 e0       	ldi	r26, 0x04	; 4
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	ea e5       	ldi	r30, 0x5A	; 90
    2aae:	f5 e1       	ldi	r31, 0x15	; 21
    2ab0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	7c 83       	std	Y+4, r23	; 0x04
    2aba:	6b 83       	std	Y+3, r22	; 0x03
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac4:	b9 01       	movw	r22, r18
    2ac6:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    2aca:	24 96       	adiw	r28, 0x04	; 4
    2acc:	e2 e0       	ldi	r30, 0x02	; 2
    2ace:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002ad2 <_ZN5EERefC1Ei>:
    2ad2:	a4 e0       	ldi	r26, 0x04	; 4
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	ef e6       	ldi	r30, 0x6F	; 111
    2ad8:	f5 e1       	ldi	r31, 0x15	; 21
    2ada:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	7c 83       	std	Y+4, r23	; 0x04
    2ae4:	6b 83       	std	Y+3, r22	; 0x03
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	2b 81       	ldd	r18, Y+3	; 0x03
    2aec:	3c 81       	ldd	r19, Y+4	; 0x04
    2aee:	fc 01       	movw	r30, r24
    2af0:	31 83       	std	Z+1, r19	; 0x01
    2af2:	20 83       	st	Z, r18
    2af4:	24 96       	adiw	r28, 0x04	; 4
    2af6:	e2 e0       	ldi	r30, 0x02	; 2
    2af8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002afc <_ZNK5EERefdeEv>:
    2afc:	a2 e0       	ldi	r26, 0x02	; 2
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e4 e8       	ldi	r30, 0x84	; 132
    2b02:	f5 e1       	ldi	r31, 0x15	; 21
    2b04:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <eeprom_read_byte>
    2b1a:	22 96       	adiw	r28, 0x02	; 2
    2b1c:	e2 e0       	ldi	r30, 0x02	; 2
    2b1e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002b22 <_ZNK5EERefcvKhEv>:
    2b22:	a2 e0       	ldi	r26, 0x02	; 2
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e7 e9       	ldi	r30, 0x97	; 151
    2b28:	f5 e1       	ldi	r31, 0x15	; 21
    2b2a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2b2e:	9a 83       	std	Y+2, r25	; 0x02
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	e2 df       	rcall	.-60     	; 0x2afc <_ZNK5EERefdeEv>
    2b38:	22 96       	adiw	r28, 0x02	; 2
    2b3a:	e2 e0       	ldi	r30, 0x02	; 2
    2b3c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002b40 <_ZN5EERefaSEh>:
    2b40:	a3 e0       	ldi	r26, 0x03	; 3
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e6 ea       	ldi	r30, 0xA6	; 166
    2b46:	f5 e1       	ldi	r31, 0x15	; 21
    2b48:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	6b 83       	std	Y+3, r22	; 0x03
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	fc 01       	movw	r30, r24
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	6b 81       	ldd	r22, Y+3	; 0x03
    2b5e:	0e 94 fc 3b 	call	0x77f8	; 0x77f8 <eeprom_write_byte>
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	23 96       	adiw	r28, 0x03	; 3
    2b68:	e2 e0       	ldi	r30, 0x02	; 2
    2b6a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002b6e <_ZN5EERef6updateEh>:
    2b6e:	a3 e0       	ldi	r26, 0x03	; 3
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ed eb       	ldi	r30, 0xBD	; 189
    2b74:	f5 e1       	ldi	r31, 0x15	; 21
    2b76:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	6b 83       	std	Y+3, r22	; 0x03
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	ce df       	rcall	.-100    	; 0x2b22 <_ZNK5EERefcvKhEv>
    2b86:	98 2f       	mov	r25, r24
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	98 17       	cp	r25, r24
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <_ZN5EERef6updateEh+0x2a>
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	6b 81       	ldd	r22, Y+3	; 0x03
    2b94:	d5 df       	rcall	.-86     	; 0x2b40 <_ZN5EERefaSEh>
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <_ZN5EERef6updateEh+0x2e>
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	23 96       	adiw	r28, 0x03	; 3
    2b9e:	e2 e0       	ldi	r30, 0x02	; 2
    2ba0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002ba4 <_ZN11EEPROMClassixEi>:
    2ba4:	a6 e0       	ldi	r26, 0x06	; 6
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    2baa:	f5 e1       	ldi	r31, 0x15	; 21
    2bac:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	7e 83       	std	Y+6, r23	; 0x06
    2bb6:	6d 83       	std	Y+5, r22	; 0x05
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	87 df       	rcall	.-242    	; 0x2ad2 <_ZN5EERefC1Ei>
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	26 96       	adiw	r28, 0x06	; 6
    2bca:	e2 e0       	ldi	r30, 0x02	; 2
    2bcc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002bd0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    2bd0:	aa e0       	ldi	r26, 0x0A	; 10
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ee ee       	ldi	r30, 0xEE	; 238
    2bd6:	f5 e1       	ldi	r31, 0x15	; 21
    2bd8:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
    2be0:	78 87       	std	Y+8, r23	; 0x08
    2be2:	6f 83       	std	Y+7, r22	; 0x07
    2be4:	5a 87       	std	Y+10, r21	; 0x0a
    2be6:	49 87       	std	Y+9, r20	; 0x09
    2be8:	1a 82       	std	Y+2, r1	; 0x02
    2bea:	19 82       	std	Y+1, r1	; 0x01
    2bec:	1d c0       	rjmp	.+58     	; 0x2c28 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    2bee:	0d 81       	ldd	r16, Y+5	; 0x05
    2bf0:	1e 81       	ldd	r17, Y+6	; 0x06
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfc:	98 85       	ldd	r25, Y+8	; 0x08
    2bfe:	9c 01       	movw	r18, r24
    2c00:	2f 5f       	subi	r18, 0xFF	; 255
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	38 87       	std	Y+8, r19	; 0x08
    2c06:	2f 83       	std	Y+7, r18	; 0x07
    2c08:	bc 01       	movw	r22, r24
    2c0a:	8f ee       	ldi	r24, 0xEF	; 239
    2c0c:	92 e0       	ldi	r25, 0x02	; 2
    2c0e:	ca df       	rcall	.-108    	; 0x2ba4 <_ZN11EEPROMClassixEi>
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
    2c14:	ce 01       	movw	r24, r28
    2c16:	03 96       	adiw	r24, 0x03	; 3
    2c18:	84 df       	rcall	.-248    	; 0x2b22 <_ZNK5EERefcvKhEv>
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	80 83       	st	Z, r24
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	29 81       	ldd	r18, Y+1	; 0x01
    2c2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	28 17       	cp	r18, r24
    2c32:	39 07       	cpc	r19, r25
    2c34:	e0 f2       	brcs	.-72     	; 0x2bee <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2c36:	2a 96       	adiw	r28, 0x0a	; 10
    2c38:	e4 e0       	ldi	r30, 0x04	; 4
    2c3a:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00002c3e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2c3e:	ab e0       	ldi	r26, 0x0B	; 11
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e5 e2       	ldi	r30, 0x25	; 37
    2c44:	f6 e1       	ldi	r31, 0x16	; 22
    2c46:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2c4a:	9f 83       	std	Y+7, r25	; 0x07
    2c4c:	8e 83       	std	Y+6, r24	; 0x06
    2c4e:	79 87       	std	Y+9, r23	; 0x09
    2c50:	68 87       	std	Y+8, r22	; 0x08
    2c52:	5b 87       	std	Y+11, r21	; 0x0b
    2c54:	4a 87       	std	Y+10, r20	; 0x0a
    2c56:	1a 82       	std	Y+2, r1	; 0x02
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	20 c0       	rjmp	.+64     	; 0x2c9c <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c60:	fc 01       	movw	r30, r24
    2c62:	80 81       	ld	r24, Z
    2c64:	8b 83       	std	Y+3, r24	; 0x03
    2c66:	88 85       	ldd	r24, Y+8	; 0x08
    2c68:	99 85       	ldd	r25, Y+9	; 0x09
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	2f 5f       	subi	r18, 0xFF	; 255
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c70:	39 87       	std	Y+9, r19	; 0x09
    2c72:	28 87       	std	Y+8, r18	; 0x08
    2c74:	bc 01       	movw	r22, r24
    2c76:	8f ee       	ldi	r24, 0xEF	; 239
    2c78:	92 e0       	ldi	r25, 0x02	; 2
    2c7a:	94 df       	rcall	.-216    	; 0x2ba4 <_ZN11EEPROMClassixEi>
    2c7c:	9d 83       	std	Y+5, r25	; 0x05
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
    2c80:	ce 01       	movw	r24, r28
    2c82:	04 96       	adiw	r24, 0x04	; 4
    2c84:	6b 81       	ldd	r22, Y+3	; 0x03
    2c86:	73 df       	rcall	.-282    	; 0x2b6e <_ZN5EERef6updateEh>
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	9f 83       	std	Y+7, r25	; 0x07
    2c90:	8e 83       	std	Y+6, r24	; 0x06
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	29 81       	ldd	r18, Y+1	; 0x01
    2c9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2ca0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca4:	28 17       	cp	r18, r24
    2ca6:	39 07       	cpc	r19, r25
    2ca8:	c8 f2       	brcs	.-78     	; 0x2c5c <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    2caa:	2b 96       	adiw	r28, 0x0b	; 11
    2cac:	e2 e0       	ldi	r30, 0x02	; 2
    2cae:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002cb2 <_ZN5PrintC1ERKS_>:
    2cb2:	a4 e0       	ldi	r26, 0x04	; 4
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	ef e5       	ldi	r30, 0x5F	; 95
    2cb8:	f6 e1       	ldi	r31, 0x16	; 22
    2cba:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	7c 83       	std	Y+4, r23	; 0x04
    2cc4:	6b 83       	std	Y+3, r22	; 0x03
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	26 ed       	ldi	r18, 0xD6	; 214
    2ccc:	31 e0       	ldi	r19, 0x01	; 1
    2cce:	fc 01       	movw	r30, r24
    2cd0:	31 83       	std	Z+1, r19	; 0x01
    2cd2:	20 83       	st	Z, r18
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd8:	fc 01       	movw	r30, r24
    2cda:	22 81       	ldd	r18, Z+2	; 0x02
    2cdc:	33 81       	ldd	r19, Z+3	; 0x03
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	33 83       	std	Z+3, r19	; 0x03
    2ce6:	22 83       	std	Z+2, r18	; 0x02
    2ce8:	24 96       	adiw	r28, 0x04	; 4
    2cea:	e2 e0       	ldi	r30, 0x02	; 2
    2cec:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002cf0 <_ZN13LiquidCrystalC1ERKS_>:
    2cf0:	a4 e0       	ldi	r26, 0x04	; 4
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e7       	ldi	r30, 0x7E	; 126
    2cf6:	f6 e1       	ldi	r31, 0x16	; 22
    2cf8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	7c 83       	std	Y+4, r23	; 0x04
    2d02:	6b 83       	std	Y+3, r22	; 0x03
    2d04:	2b 81       	ldd	r18, Y+3	; 0x03
    2d06:	3c 81       	ldd	r19, Y+4	; 0x04
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	b9 01       	movw	r22, r18
    2d0e:	d1 df       	rcall	.-94     	; 0x2cb2 <_ZN5PrintC1ERKS_>
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	27 e8       	ldi	r18, 0x87	; 135
    2d16:	31 e0       	ldi	r19, 0x01	; 1
    2d18:	fc 01       	movw	r30, r24
    2d1a:	31 83       	std	Z+1, r19	; 0x01
    2d1c:	20 83       	st	Z, r18
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	fc 01       	movw	r30, r24
    2d24:	24 81       	ldd	r18, Z+4	; 0x04
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	24 83       	std	Z+4, r18	; 0x04
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	fc 01       	movw	r30, r24
    2d34:	25 81       	ldd	r18, Z+5	; 0x05
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	25 83       	std	Z+5, r18	; 0x05
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	fc 01       	movw	r30, r24
    2d44:	26 81       	ldd	r18, Z+6	; 0x06
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	26 83       	std	Z+6, r18	; 0x06
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	2b 81       	ldd	r18, Y+3	; 0x03
    2d54:	3c 81       	ldd	r19, Y+4	; 0x04
    2d56:	48 e0       	ldi	r20, 0x08	; 8
    2d58:	f9 01       	movw	r30, r18
    2d5a:	37 96       	adiw	r30, 0x07	; 7
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	17 96       	adiw	r26, 0x07	; 7
    2d60:	01 90       	ld	r0, Z+
    2d62:	0d 92       	st	X+, r0
    2d64:	4a 95       	dec	r20
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <_ZN13LiquidCrystalC1ERKS_+0x70>
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	27 85       	ldd	r18, Z+15	; 0x0f
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	fc 01       	movw	r30, r24
    2d76:	27 87       	std	Z+15, r18	; 0x0f
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	20 89       	ldd	r18, Z+16	; 0x10
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	fc 01       	movw	r30, r24
    2d86:	20 8b       	std	Z+16, r18	; 0x10
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	21 89       	ldd	r18, Z+17	; 0x11
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	fc 01       	movw	r30, r24
    2d96:	21 8b       	std	Z+17, r18	; 0x11
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	22 89       	ldd	r18, Z+18	; 0x12
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	fc 01       	movw	r30, r24
    2da6:	22 8b       	std	Z+18, r18	; 0x12
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	fc 01       	movw	r30, r24
    2dae:	23 89       	ldd	r18, Z+19	; 0x13
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	fc 01       	movw	r30, r24
    2db6:	23 8b       	std	Z+19, r18	; 0x13
    2db8:	29 81       	ldd	r18, Y+1	; 0x01
    2dba:	3a 81       	ldd	r19, Y+2	; 0x02
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	84 89       	ldd	r24, Z+20	; 0x14
    2dc4:	95 89       	ldd	r25, Z+21	; 0x15
    2dc6:	a6 89       	ldd	r26, Z+22	; 0x16
    2dc8:	b7 89       	ldd	r27, Z+23	; 0x17
    2dca:	f9 01       	movw	r30, r18
    2dcc:	84 8b       	std	Z+20, r24	; 0x14
    2dce:	95 8b       	std	Z+21, r25	; 0x15
    2dd0:	a6 8b       	std	Z+22, r26	; 0x16
    2dd2:	b7 8b       	std	Z+23, r27	; 0x17
    2dd4:	24 96       	adiw	r28, 0x04	; 4
    2dd6:	e2 e0       	ldi	r30, 0x02	; 2
    2dd8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002ddc <_ZN7LCDBaseC1ERKS_>:
    2ddc:	a4 e0       	ldi	r26, 0x04	; 4
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e4 ef       	ldi	r30, 0xF4	; 244
    2de2:	f6 e1       	ldi	r31, 0x16	; 22
    2de4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	7c 83       	std	Y+4, r23	; 0x04
    2dee:	6b 83       	std	Y+3, r22	; 0x03
    2df0:	2b 81       	ldd	r18, Y+3	; 0x03
    2df2:	3c 81       	ldd	r19, Y+4	; 0x04
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	b9 01       	movw	r22, r18
    2dfa:	7a df       	rcall	.-268    	; 0x2cf0 <_ZN13LiquidCrystalC1ERKS_>
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	25 ea       	ldi	r18, 0xA5	; 165
    2e02:	31 e0       	ldi	r19, 0x01	; 1
    2e04:	fc 01       	movw	r30, r24
    2e06:	31 83       	std	Z+1, r19	; 0x01
    2e08:	20 83       	st	Z, r18
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e10:	3c 81       	ldd	r19, Y+4	; 0x04
    2e12:	4a e0       	ldi	r20, 0x0A	; 10
    2e14:	f9 01       	movw	r30, r18
    2e16:	78 96       	adiw	r30, 0x18	; 24
    2e18:	dc 01       	movw	r26, r24
    2e1a:	58 96       	adiw	r26, 0x18	; 24
    2e1c:	01 90       	ld	r0, Z+
    2e1e:	0d 92       	st	X+, r0
    2e20:	4a 95       	dec	r20
    2e22:	e1 f7       	brne	.-8      	; 0x2e1c <_ZN7LCDBaseC1ERKS_+0x40>
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	9c 81       	ldd	r25, Y+4	; 0x04
    2e28:	fc 01       	movw	r30, r24
    2e2a:	22 a1       	ldd	r18, Z+34	; 0x22
    2e2c:	33 a1       	ldd	r19, Z+35	; 0x23
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	fc 01       	movw	r30, r24
    2e34:	33 a3       	std	Z+35, r19	; 0x23
    2e36:	22 a3       	std	Z+34, r18	; 0x22
    2e38:	24 96       	adiw	r28, 0x04	; 4
    2e3a:	e2 e0       	ldi	r30, 0x02	; 2
    2e3c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002e40 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2e40:	ac e0       	ldi	r26, 0x0C	; 12
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e6 e2       	ldi	r30, 0x26	; 38
    2e46:	f7 e1       	ldi	r31, 0x17	; 23
    2e48:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    2e4c:	9b 83       	std	Y+3, r25	; 0x03
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	7d 83       	std	Y+5, r23	; 0x05
    2e52:	6c 83       	std	Y+4, r22	; 0x04
    2e54:	5f 83       	std	Y+7, r21	; 0x07
    2e56:	4e 83       	std	Y+6, r20	; 0x06
    2e58:	28 87       	std	Y+8, r18	; 0x08
    2e5a:	1a 87       	std	Y+10, r17	; 0x0a
    2e5c:	09 87       	std	Y+9, r16	; 0x09
    2e5e:	fc 86       	std	Y+12, r15	; 0x0c
    2e60:	eb 86       	std	Y+11, r14	; 0x0b
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	2c 81       	ldd	r18, Y+4	; 0x04
    2e68:	3d 81       	ldd	r19, Y+5	; 0x05
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	31 83       	std	Z+1, r19	; 0x01
    2e6e:	20 83       	st	Z, r18
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	9b 81       	ldd	r25, Y+3	; 0x03
    2e74:	fc 01       	movw	r30, r24
    2e76:	17 ae       	std	Z+63, r1	; 0x3f
    2e78:	16 ae       	std	Z+62, r1	; 0x3e
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	80 5c       	subi	r24, 0xC0	; 192
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	2e 81       	ldd	r18, Y+6	; 0x06
    2e84:	3f 81       	ldd	r19, Y+7	; 0x07
    2e86:	fc 01       	movw	r30, r24
    2e88:	31 83       	std	Z+1, r19	; 0x01
    2e8a:	20 83       	st	Z, r18
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0f dc       	rcall	.-2018   	; 0x26b0 <_ZNSaIdEC1Ev>
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	8e 5b       	subi	r24, 0xBE	; 190
    2e98:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9a:	9e 01       	movw	r18, r28
    2e9c:	2f 5f       	subi	r18, 0xFF	; 255
    2e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea0:	b9 01       	movw	r22, r18
    2ea2:	58 d5       	rcall	.+2736   	; 0x3954 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	0f dc       	rcall	.-2018   	; 0x26c8 <_ZNSaIdED1Ev>
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	87 5b       	subi	r24, 0xB7	; 183
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	11 82       	std	Z+1, r1	; 0x01
    2eb6:	10 82       	st	Z, r1
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	89 5a       	subi	r24, 0xA9	; 169
    2ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec0:	28 85       	ldd	r18, Y+8	; 0x08
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	20 83       	st	Z, r18
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	88 5a       	subi	r24, 0xA8	; 168
    2ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ece:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ed0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	31 83       	std	Z+1, r19	; 0x01
    2ed6:	20 83       	st	Z, r18
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	9b 81       	ldd	r25, Y+3	; 0x03
    2edc:	85 5a       	subi	r24, 0xA5	; 165
    2ede:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	11 82       	std	Z+1, r1	; 0x01
    2ee4:	10 82       	st	Z, r1
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	83 5a       	subi	r24, 0xA3	; 163
    2eec:	9f 4f       	sbci	r25, 0xFF	; 255
    2eee:	29 85       	ldd	r18, Y+9	; 0x09
    2ef0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ef2:	b9 01       	movw	r22, r18
    2ef4:	73 df       	rcall	.-282    	; 0x2ddc <_ZN7LCDBaseC1ERKS_>
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	8f 57       	subi	r24, 0x7F	; 127
    2efc:	9f 4f       	sbci	r25, 0xFF	; 255
    2efe:	6f e1       	ldi	r22, 0x1F	; 31
    2f00:	71 e0       	ldi	r23, 0x01	; 1
    2f02:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0a:	89 57       	subi	r24, 0x79	; 121
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	6f e1       	ldi	r22, 0x1F	; 31
    2f10:	71 e0       	ldi	r23, 0x01	; 1
    2f12:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1a:	9c 01       	movw	r18, r24
    2f1c:	23 57       	subi	r18, 0x73	; 115
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 e4       	ldi	r26, 0x40	; 64
    2f26:	b0 e4       	ldi	r27, 0x40	; 64
    2f28:	f9 01       	movw	r30, r18
    2f2a:	80 83       	st	Z, r24
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	a2 83       	std	Z+2, r26	; 0x02
    2f30:	b3 83       	std	Z+3, r27	; 0x03
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	9b 81       	ldd	r25, Y+3	; 0x03
    2f36:	04 d0       	rcall	.+8      	; 0x2f40 <_ZN8PHSensor4initEv>
    2f38:	2c 96       	adiw	r28, 0x0c	; 12
    2f3a:	e6 e0       	ldi	r30, 0x06	; 6
    2f3c:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00002f40 <_ZN8PHSensor4initEv>:
    2f40:	a6 e0       	ldi	r26, 0x06	; 6
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e6 ea       	ldi	r30, 0xA6	; 166
    2f46:	f7 e1       	ldi	r31, 0x17	; 23
    2f48:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	8d e0       	ldi	r24, 0x0D	; 13
    2f54:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	88 5a       	subi	r24, 0xA8	; 168
    2f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f60:	fc 01       	movw	r30, r24
    2f62:	80 81       	ld	r24, Z
    2f64:	91 81       	ldd	r25, Z+1	; 0x01
    2f66:	61 e0       	ldi	r22, 0x01	; 1
    2f68:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    2f6c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN6Memory13TheSensorsMemE>
    2f70:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN6Memory13TheSensorsMemE+0x1>
    2f74:	21 d5       	rcall	.+2626   	; 0x39b8 <_ZN6EEWrapIfEcvKfEv>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	89 83       	std	Y+1, r24	; 0x01
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	ab 83       	std	Y+3, r26	; 0x03
    2f80:	bc 83       	std	Y+4, r27	; 0x04
    2f82:	29 81       	ldd	r18, Y+1	; 0x01
    2f84:	3a 81       	ldd	r19, Y+2	; 0x02
    2f86:	4b 81       	ldd	r20, Y+3	; 0x03
    2f88:	5c 81       	ldd	r21, Y+4	; 0x04
    2f8a:	69 81       	ldd	r22, Y+1	; 0x01
    2f8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	9c 81       	ldd	r25, Y+4	; 0x04
    2f92:	0e 94 c9 2b 	call	0x5792	; 0x5792 <__unordsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	71 f4       	brne	.+28     	; 0x2fb6 <_ZN8PHSensor4initEv+0x76>
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	9c 01       	movw	r18, r24
    2fa0:	23 57       	subi	r18, 0x73	; 115
    2fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	ab 81       	ldd	r26, Y+3	; 0x03
    2faa:	bc 81       	ldd	r27, Y+4	; 0x04
    2fac:	f9 01       	movw	r30, r18
    2fae:	80 83       	st	Z, r24
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	a2 83       	std	Z+2, r26	; 0x02
    2fb4:	b3 83       	std	Z+3, r27	; 0x03
    2fb6:	26 96       	adiw	r28, 0x06	; 6
    2fb8:	e2 e0       	ldi	r30, 0x02	; 2
    2fba:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00002fbe <_ZN8PHSensor6UpdateEd>:
    2fbe:	aa e0       	ldi	r26, 0x0A	; 10
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2fc4:	f7 e1       	ldi	r31, 0x17	; 23
    2fc6:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	4f 83       	std	Y+7, r20	; 0x07
    2fd0:	58 87       	std	Y+8, r21	; 0x08
    2fd2:	69 87       	std	Y+9, r22	; 0x09
    2fd4:	7a 87       	std	Y+10, r23	; 0x0a
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	9c 01       	movw	r18, r24
    2fdc:	23 57       	subi	r18, 0x73	; 115
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe2:	98 85       	ldd	r25, Y+8	; 0x08
    2fe4:	a9 85       	ldd	r26, Y+9	; 0x09
    2fe6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fe8:	f9 01       	movw	r30, r18
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
    2ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff6:	83 57       	subi	r24, 0x73	; 115
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	a2 81       	ldd	r26, Z+2	; 0x02
    3002:	b3 81       	ldd	r27, Z+3	; 0x03
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	9a 83       	std	Y+2, r25	; 0x02
    3008:	ab 83       	std	Y+3, r26	; 0x03
    300a:	bc 83       	std	Y+4, r27	; 0x04
    300c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN6Memory13TheSensorsMemE>
    3010:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN6Memory13TheSensorsMemE+0x1>
    3014:	9c 01       	movw	r18, r24
    3016:	ce 01       	movw	r24, r28
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	bc 01       	movw	r22, r24
    301c:	c9 01       	movw	r24, r18
    301e:	df d4       	rcall	.+2494   	; 0x39de <_ZN6EEWrapIfEaSERKf>
    3020:	2a 96       	adiw	r28, 0x0a	; 10
    3022:	e2 e0       	ldi	r30, 0x02	; 2
    3024:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003028 <_ZN8PHSensor5GetPHEv>:
    3028:	ae e0       	ldi	r26, 0x0E	; 14
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	ea e1       	ldi	r30, 0x1A	; 26
    302e:	f8 e1       	ldi	r31, 0x18	; 24
    3030:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3034:	9e 87       	std	Y+14, r25	; 0x0e
    3036:	8d 87       	std	Y+13, r24	; 0x0d
    3038:	8d 85       	ldd	r24, Y+13	; 0x0d
    303a:	9e 85       	ldd	r25, Y+14	; 0x0e
    303c:	85 5b       	subi	r24, 0xB5	; 181
    303e:	9f 4f       	sbci	r25, 0xFF	; 255
    3040:	fc 01       	movw	r30, r24
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	a2 81       	ldd	r26, Z+2	; 0x02
    3048:	b3 81       	ldd	r27, Z+3	; 0x03
    304a:	fe 01       	movw	r30, r28
    304c:	37 96       	adiw	r30, 0x07	; 7
    304e:	22 e0       	ldi	r18, 0x02	; 2
    3050:	ac 01       	movw	r20, r24
    3052:	bd 01       	movw	r22, r26
    3054:	cf 01       	movw	r24, r30
    3056:	0e 94 b1 32 	call	0x6562	; 0x6562 <_ZN6StringC1Efh>
    305a:	ce 01       	movw	r24, r28
    305c:	07 96       	adiw	r24, 0x07	; 7
    305e:	13 dd       	rcall	.-1498   	; 0x2a86 <_ZNK6String5c_strEv>
    3060:	9c 01       	movw	r18, r24
    3062:	8d 85       	ldd	r24, Y+13	; 0x0d
    3064:	9e 85       	ldd	r25, Y+14	; 0x0e
    3066:	8f 57       	subi	r24, 0x7F	; 127
    3068:	9f 4f       	sbci	r25, 0xFF	; 255
    306a:	b9 01       	movw	r22, r18
    306c:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    3070:	ce 01       	movw	r24, r28
    3072:	07 96       	adiw	r24, 0x07	; 7
    3074:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    3078:	8d 85       	ldd	r24, Y+13	; 0x0d
    307a:	9e 85       	ldd	r25, Y+14	; 0x0e
    307c:	81 5b       	subi	r24, 0xB1	; 177
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	fc 01       	movw	r30, r24
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	a2 81       	ldd	r26, Z+2	; 0x02
    3088:	b3 81       	ldd	r27, Z+3	; 0x03
    308a:	22 e0       	ldi	r18, 0x02	; 2
    308c:	ac 01       	movw	r20, r24
    308e:	bd 01       	movw	r22, r26
    3090:	ce 01       	movw	r24, r28
    3092:	01 96       	adiw	r24, 0x01	; 1
    3094:	0e 94 b1 32 	call	0x6562	; 0x6562 <_ZN6StringC1Efh>
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	f4 dc       	rcall	.-1560   	; 0x2a86 <_ZNK6String5c_strEv>
    309e:	9c 01       	movw	r18, r24
    30a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a4:	89 57       	subi	r24, 0x79	; 121
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	b9 01       	movw	r22, r18
    30aa:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    30ae:	ce 01       	movw	r24, r28
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    30b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ba:	85 5b       	subi	r24, 0xB5	; 181
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	fc 01       	movw	r30, r24
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	a2 81       	ldd	r26, Z+2	; 0x02
    30c6:	b3 81       	ldd	r27, Z+3	; 0x03
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	2e 96       	adiw	r28, 0x0e	; 14
    30ce:	e2 e0       	ldi	r30, 0x02	; 2
    30d0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000030d4 <_ZN8PHSensor11CalculatePHEv>:
    30d4:	ac e2       	ldi	r26, 0x2C	; 44
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	e0 e7       	ldi	r30, 0x70	; 112
    30da:	f8 e1       	ldi	r31, 0x18	; 24
    30dc:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    30e0:	9c a7       	std	Y+44, r25	; 0x2c
    30e2:	8b a7       	std	Y+43, r24	; 0x2b
    30e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    30e8:	86 5a       	subi	r24, 0xA6	; 166
    30ea:	9f 4f       	sbci	r25, 0xFF	; 255
    30ec:	fc 01       	movw	r30, r24
    30ee:	90 81       	ld	r25, Z
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	89 27       	eor	r24, r25
    30f4:	88 23       	and	r24, r24
    30f6:	09 f0       	breq	.+2      	; 0x30fa <_ZN8PHSensor11CalculatePHEv+0x26>
    30f8:	a4 c1       	rjmp	.+840    	; 0x3442 <_ZN8PHSensor11CalculatePHEv+0x36e>
    30fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    30fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30fe:	a5 d1       	rcall	.+842    	; 0x344a <_ZN8PHSensor10getPHValueEv>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	2b a5       	ldd	r18, Y+43	; 0x2b
    3106:	3c a5       	ldd	r19, Y+44	; 0x2c
    3108:	25 5b       	subi	r18, 0xB5	; 181
    310a:	3f 4f       	sbci	r19, 0xFF	; 255
    310c:	f9 01       	movw	r30, r18
    310e:	80 83       	st	Z, r24
    3110:	91 83       	std	Z+1, r25	; 0x01
    3112:	a2 83       	std	Z+2, r26	; 0x02
    3114:	b3 83       	std	Z+3, r27	; 0x03
    3116:	80 ef       	ldi	r24, 0xF0	; 240
    3118:	92 e0       	ldi	r25, 0x02	; 2
    311a:	fc 01       	movw	r30, r24
    311c:	80 81       	ld	r24, Z
    311e:	88 23       	and	r24, r24
    3120:	89 f4       	brne	.+34     	; 0x3144 <_ZN8PHSensor11CalculatePHEv+0x70>
    3122:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    312e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    3132:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    3136:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    313a:	80 ef       	ldi	r24, 0xF0	; 240
    313c:	92 e0       	ldi	r25, 0x02	; 2
    313e:	21 e0       	ldi	r18, 0x01	; 1
    3140:	fc 01       	movw	r30, r24
    3142:	20 83       	st	Z, r18
    3144:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3148:	9b 01       	movw	r18, r22
    314a:	ac 01       	movw	r20, r24
    314c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    3150:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    3154:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    3158:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    315c:	79 01       	movw	r14, r18
    315e:	8a 01       	movw	r16, r20
    3160:	e8 1a       	sub	r14, r24
    3162:	f9 0a       	sbc	r15, r25
    3164:	0a 0b       	sbc	r16, r26
    3166:	1b 0b       	sbc	r17, r27
    3168:	d8 01       	movw	r26, r16
    316a:	c7 01       	movw	r24, r14
    316c:	21 e0       	ldi	r18, 0x01	; 1
    316e:	81 36       	cpi	r24, 0x61	; 97
    3170:	9a 4e       	sbci	r25, 0xEA	; 234
    3172:	a1 05       	cpc	r26, r1
    3174:	b1 05       	cpc	r27, r1
    3176:	08 f4       	brcc	.+2      	; 0x317a <_ZN8PHSensor11CalculatePHEv+0xa6>
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	22 23       	and	r18, r18
    317c:	09 f4       	brne	.+2      	; 0x3180 <_ZN8PHSensor11CalculatePHEv+0xac>
    317e:	61 c1       	rjmp	.+706    	; 0x3442 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3180:	19 82       	std	Y+1, r1	; 0x01
    3182:	1a 82       	std	Y+2, r1	; 0x02
    3184:	1b 82       	std	Y+3, r1	; 0x03
    3186:	1c 82       	std	Y+4, r1	; 0x04
    3188:	8b a5       	ldd	r24, Y+43	; 0x2b
    318a:	9c a5       	ldd	r25, Y+44	; 0x2c
    318c:	8e 5b       	subi	r24, 0xBE	; 190
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	7e da       	rcall	.-2820   	; 0x268e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3192:	21 e0       	ldi	r18, 0x01	; 1
    3194:	05 97       	sbiw	r24, 0x05	; 5
    3196:	08 f0       	brcs	.+2      	; 0x319a <_ZN8PHSensor11CalculatePHEv+0xc6>
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	22 23       	and	r18, r18
    319c:	d1 f1       	breq	.+116    	; 0x3212 <_ZN8PHSensor11CalculatePHEv+0x13e>
    319e:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31a2:	85 5b       	subi	r24, 0xB5	; 181
    31a4:	9f 4f       	sbci	r25, 0xFF	; 255
    31a6:	fc 01       	movw	r30, r24
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	a2 81       	ldd	r26, Z+2	; 0x02
    31ae:	b3 81       	ldd	r27, Z+3	; 0x03
    31b0:	8b a3       	std	Y+35, r24	; 0x23
    31b2:	9c a3       	std	Y+36, r25	; 0x24
    31b4:	ad a3       	std	Y+37, r26	; 0x25
    31b6:	be a3       	std	Y+38, r27	; 0x26
    31b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    31bc:	8e 5b       	subi	r24, 0xBE	; 190
    31be:	9f 4f       	sbci	r25, 0xFF	; 255
    31c0:	9e 01       	movw	r18, r28
    31c2:	2d 5d       	subi	r18, 0xDD	; 221
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	b9 01       	movw	r22, r18
    31c8:	1e d4       	rcall	.+2108   	; 0x3a06 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    31ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    31cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ce:	9c 01       	movw	r18, r24
    31d0:	2e 5b       	subi	r18, 0xBE	; 190
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	ce 01       	movw	r24, r28
    31d6:	4c 96       	adiw	r24, 0x1c	; 28
    31d8:	b9 01       	movw	r22, r18
    31da:	31 d4       	rcall	.+2146   	; 0x3a3e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    31dc:	ce 01       	movw	r24, r28
    31de:	4c 96       	adiw	r24, 0x1c	; 28
    31e0:	51 d8       	rcall	.-3934   	; 0x2284 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	ab 83       	std	Y+3, r26	; 0x03
    31ec:	bc 83       	std	Y+4, r27	; 0x04
    31ee:	ce 01       	movw	r24, r28
    31f0:	4c 96       	adiw	r24, 0x1c	; 28
    31f2:	76 da       	rcall	.-2836   	; 0x26e0 <_ZNSt6vectorIdSaIdEED1Ev>
    31f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31f8:	9c 01       	movw	r18, r24
    31fa:	21 5b       	subi	r18, 0xB1	; 177
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	ab 81       	ldd	r26, Y+3	; 0x03
    3204:	bc 81       	ldd	r27, Y+4	; 0x04
    3206:	f9 01       	movw	r30, r18
    3208:	80 83       	st	Z, r24
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	a2 83       	std	Z+2, r26	; 0x02
    320e:	b3 83       	std	Z+3, r27	; 0x03
    3210:	18 c1       	rjmp	.+560    	; 0x3442 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3212:	8b a5       	ldd	r24, Y+43	; 0x2b
    3214:	9c a5       	ldd	r25, Y+44	; 0x2c
    3216:	9c 01       	movw	r18, r24
    3218:	2e 5b       	subi	r18, 0xBE	; 190
    321a:	3f 4f       	sbci	r19, 0xFF	; 255
    321c:	ce 01       	movw	r24, r28
    321e:	45 96       	adiw	r24, 0x15	; 21
    3220:	b9 01       	movw	r22, r18
    3222:	0d d4       	rcall	.+2074   	; 0x3a3e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    3224:	ce 01       	movw	r24, r28
    3226:	45 96       	adiw	r24, 0x15	; 21
    3228:	2d d8       	rcall	.-4006   	; 0x2284 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	ab 83       	std	Y+3, r26	; 0x03
    3234:	bc 83       	std	Y+4, r27	; 0x04
    3236:	ce 01       	movw	r24, r28
    3238:	45 96       	adiw	r24, 0x15	; 21
    323a:	52 da       	rcall	.-2908   	; 0x26e0 <_ZNSt6vectorIdSaIdEED1Ev>
    323c:	8b a5       	ldd	r24, Y+43	; 0x2b
    323e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3240:	85 5b       	subi	r24, 0xB5	; 181
    3242:	9f 4f       	sbci	r25, 0xFF	; 255
    3244:	fc 01       	movw	r30, r24
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	a2 81       	ldd	r26, Z+2	; 0x02
    324c:	b3 81       	ldd	r27, Z+3	; 0x03
    324e:	29 81       	ldd	r18, Y+1	; 0x01
    3250:	3a 81       	ldd	r19, Y+2	; 0x02
    3252:	4b 81       	ldd	r20, Y+3	; 0x03
    3254:	5c 81       	ldd	r21, Y+4	; 0x04
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e4       	ldi	r21, 0x40	; 64
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	8f a3       	std	Y+39, r24	; 0x27
    3278:	98 a7       	std	Y+40, r25	; 0x28
    327a:	a9 a7       	std	Y+41, r26	; 0x29
    327c:	ba a7       	std	Y+42, r27	; 0x2a
    327e:	2f a1       	ldd	r18, Y+39	; 0x27
    3280:	38 a5       	ldd	r19, Y+40	; 0x28
    3282:	49 a5       	ldd	r20, Y+41	; 0x29
    3284:	5a a5       	ldd	r21, Y+42	; 0x2a
    3286:	8b a5       	ldd	r24, Y+43	; 0x2b
    3288:	9c a5       	ldd	r25, Y+44	; 0x2c
    328a:	85 5b       	subi	r24, 0xB5	; 181
    328c:	9f 4f       	sbci	r25, 0xFF	; 255
    328e:	fc 01       	movw	r30, r24
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	a2 81       	ldd	r26, Z+2	; 0x02
    3296:	b3 81       	ldd	r27, Z+3	; 0x03
    3298:	eb a5       	ldd	r30, Y+43	; 0x2b
    329a:	fc a5       	ldd	r31, Y+44	; 0x2c
    329c:	89 01       	movw	r16, r18
    329e:	9a 01       	movw	r18, r20
    32a0:	ac 01       	movw	r20, r24
    32a2:	bd 01       	movw	r22, r26
    32a4:	cf 01       	movw	r24, r30
    32a6:	fd d2       	rcall	.+1530   	; 0x38a2 <_ZN8PHSensor9isOutlierEdd>
    32a8:	8d 83       	std	Y+5, r24	; 0x05
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	88 23       	and	r24, r24
    32ae:	d9 f0       	breq	.+54     	; 0x32e6 <_ZN8PHSensor11CalculatePHEv+0x212>
    32b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b4:	85 5a       	subi	r24, 0xA5	; 165
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	fc 01       	movw	r30, r24
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	0a 97       	sbiw	r24, 0x0a	; 10
    32c0:	94 f4       	brge	.+36     	; 0x32e6 <_ZN8PHSensor11CalculatePHEv+0x212>
    32c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    32c6:	85 5a       	subi	r24, 0xA5	; 165
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	fc 01       	movw	r30, r24
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	9c 01       	movw	r18, r24
    32d2:	2f 5f       	subi	r18, 0xFF	; 255
    32d4:	3f 4f       	sbci	r19, 0xFF	; 255
    32d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32da:	85 5a       	subi	r24, 0xA5	; 165
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	fc 01       	movw	r30, r24
    32e0:	31 83       	std	Z+1, r19	; 0x01
    32e2:	20 83       	st	Z, r18
    32e4:	ae c0       	rjmp	.+348    	; 0x3442 <_ZN8PHSensor11CalculatePHEv+0x36e>
    32e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ea:	85 5a       	subi	r24, 0xA5	; 165
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	fc 01       	movw	r30, r24
    32f0:	11 82       	std	Z+1, r1	; 0x01
    32f2:	10 82       	st	Z, r1
    32f4:	8f e0       	ldi	r24, 0x0F	; 15
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9f 83       	std	Y+7, r25	; 0x07
    32fa:	8e 83       	std	Y+6, r24	; 0x06
    32fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    32fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3300:	8e 5b       	subi	r24, 0xBE	; 190
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	c4 d9       	rcall	.-3192   	; 0x268e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3306:	99 87       	std	Y+9, r25	; 0x09
    3308:	88 87       	std	Y+8, r24	; 0x08
    330a:	28 85       	ldd	r18, Y+8	; 0x08
    330c:	39 85       	ldd	r19, Y+9	; 0x09
    330e:	8e 81       	ldd	r24, Y+6	; 0x06
    3310:	9f 81       	ldd	r25, Y+7	; 0x07
    3312:	28 17       	cp	r18, r24
    3314:	39 07       	cpc	r19, r25
    3316:	ec f4       	brge	.+58     	; 0x3352 <_ZN8PHSensor11CalculatePHEv+0x27e>
    3318:	8a ec       	ldi	r24, 0xCA	; 202
    331a:	93 e0       	ldi	r25, 0x03	; 3
    331c:	bc 01       	movw	r22, r24
    331e:	86 e8       	ldi	r24, 0x86	; 134
    3320:	95 e0       	ldi	r25, 0x05	; 5
    3322:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    3326:	8f a1       	ldd	r24, Y+39	; 0x27
    3328:	98 a5       	ldd	r25, Y+40	; 0x28
    332a:	a9 a5       	ldd	r26, Y+41	; 0x29
    332c:	ba a5       	ldd	r27, Y+42	; 0x2a
    332e:	22 e0       	ldi	r18, 0x02	; 2
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	ac 01       	movw	r20, r24
    3334:	bd 01       	movw	r22, r26
    3336:	86 e8       	ldi	r24, 0x86	; 134
    3338:	95 e0       	ldi	r25, 0x05	; 5
    333a:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <_ZN5Print7printlnEdi>
    333e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3340:	9c a5       	ldd	r25, Y+44	; 0x2c
    3342:	8e 5b       	subi	r24, 0xBE	; 190
    3344:	9f 4f       	sbci	r25, 0xFF	; 255
    3346:	9e 01       	movw	r18, r28
    3348:	29 5d       	subi	r18, 0xD9	; 217
    334a:	3f 4f       	sbci	r19, 0xFF	; 255
    334c:	b9 01       	movw	r22, r18
    334e:	5b d3       	rcall	.+1718   	; 0x3a06 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    3350:	35 c0       	rjmp	.+106    	; 0x33bc <_ZN8PHSensor11CalculatePHEv+0x2e8>
    3352:	89 ed       	ldi	r24, 0xD9	; 217
    3354:	93 e0       	ldi	r25, 0x03	; 3
    3356:	bc 01       	movw	r22, r24
    3358:	86 e8       	ldi	r24, 0x86	; 134
    335a:	95 e0       	ldi	r25, 0x05	; 5
    335c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    3360:	8f a1       	ldd	r24, Y+39	; 0x27
    3362:	98 a5       	ldd	r25, Y+40	; 0x28
    3364:	a9 a5       	ldd	r26, Y+41	; 0x29
    3366:	ba a5       	ldd	r27, Y+42	; 0x2a
    3368:	22 e0       	ldi	r18, 0x02	; 2
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	ac 01       	movw	r20, r24
    336e:	bd 01       	movw	r22, r26
    3370:	86 e8       	ldi	r24, 0x86	; 134
    3372:	95 e0       	ldi	r25, 0x05	; 5
    3374:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <_ZN5Print7printlnEdi>
    3378:	8b a5       	ldd	r24, Y+43	; 0x2b
    337a:	9c a5       	ldd	r25, Y+44	; 0x2c
    337c:	87 5b       	subi	r24, 0xB7	; 183
    337e:	9f 4f       	sbci	r25, 0xFF	; 255
    3380:	fc 01       	movw	r30, r24
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	ac 01       	movw	r20, r24
    3388:	4f 5f       	subi	r20, 0xFF	; 255
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	2b a5       	ldd	r18, Y+43	; 0x2b
    338e:	3c a5       	ldd	r19, Y+44	; 0x2c
    3390:	27 5b       	subi	r18, 0xB7	; 183
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	f9 01       	movw	r30, r18
    3396:	51 83       	std	Z+1, r21	; 0x01
    3398:	40 83       	st	Z, r20
    339a:	9c 01       	movw	r18, r24
    339c:	8b a5       	ldd	r24, Y+43	; 0x2b
    339e:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a0:	8e 5b       	subi	r24, 0xBE	; 190
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	b9 01       	movw	r22, r18
    33a6:	bb d3       	rcall	.+1910   	; 0x3b1e <_ZNSt6vectorIdSaIdEEixEj>
    33a8:	9c 01       	movw	r18, r24
    33aa:	8f a1       	ldd	r24, Y+39	; 0x27
    33ac:	98 a5       	ldd	r25, Y+40	; 0x28
    33ae:	a9 a5       	ldd	r26, Y+41	; 0x29
    33b0:	ba a5       	ldd	r27, Y+42	; 0x2a
    33b2:	f9 01       	movw	r30, r18
    33b4:	80 83       	st	Z, r24
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	a2 83       	std	Z+2, r26	; 0x02
    33ba:	b3 83       	std	Z+3, r27	; 0x03
    33bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    33be:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c0:	87 5b       	subi	r24, 0xB7	; 183
    33c2:	9f 4f       	sbci	r25, 0xFF	; 255
    33c4:	fc 01       	movw	r30, r24
    33c6:	20 81       	ld	r18, Z
    33c8:	31 81       	ldd	r19, Z+1	; 0x01
    33ca:	8e 81       	ldd	r24, Y+6	; 0x06
    33cc:	9f 81       	ldd	r25, Y+7	; 0x07
    33ce:	28 17       	cp	r18, r24
    33d0:	39 07       	cpc	r19, r25
    33d2:	39 f4       	brne	.+14     	; 0x33e2 <_ZN8PHSensor11CalculatePHEv+0x30e>
    33d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33d8:	87 5b       	subi	r24, 0xB7	; 183
    33da:	9f 4f       	sbci	r25, 0xFF	; 255
    33dc:	fc 01       	movw	r30, r24
    33de:	11 82       	std	Z+1, r1	; 0x01
    33e0:	10 82       	st	Z, r1
    33e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e6:	9c 01       	movw	r18, r24
    33e8:	2e 5b       	subi	r18, 0xBE	; 190
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	ce 01       	movw	r24, r28
    33ee:	0e 96       	adiw	r24, 0x0e	; 14
    33f0:	b9 01       	movw	r22, r18
    33f2:	25 d3       	rcall	.+1610   	; 0x3a3e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    33f4:	ce 01       	movw	r24, r28
    33f6:	0e 96       	adiw	r24, 0x0e	; 14
    33f8:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	8a 87       	std	Y+10, r24	; 0x0a
    3402:	9b 87       	std	Y+11, r25	; 0x0b
    3404:	ac 87       	std	Y+12, r26	; 0x0c
    3406:	bd 87       	std	Y+13, r27	; 0x0d
    3408:	ce 01       	movw	r24, r28
    340a:	0e 96       	adiw	r24, 0x0e	; 14
    340c:	69 d9       	rcall	.-3374   	; 0x26e0 <_ZNSt6vectorIdSaIdEED1Ev>
    340e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3410:	9c a5       	ldd	r25, Y+44	; 0x2c
    3412:	9c 01       	movw	r18, r24
    3414:	21 5b       	subi	r18, 0xB1	; 177
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	8a 85       	ldd	r24, Y+10	; 0x0a
    341a:	9b 85       	ldd	r25, Y+11	; 0x0b
    341c:	ac 85       	ldd	r26, Y+12	; 0x0c
    341e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3420:	f9 01       	movw	r30, r18
    3422:	80 83       	st	Z, r24
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	a2 83       	std	Z+2, r26	; 0x02
    3428:	b3 83       	std	Z+3, r27	; 0x03
    342a:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    3436:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    343a:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    343e:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    3442:	ac 96       	adiw	r28, 0x2c	; 44
    3444:	e6 e0       	ldi	r30, 0x06	; 6
    3446:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

0000344a <_ZN8PHSensor10getPHValueEv>:
    344a:	ae e0       	ldi	r26, 0x0E	; 14
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	eb e2       	ldi	r30, 0x2B	; 43
    3450:	fa e1       	ldi	r31, 0x1A	; 26
    3452:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    3456:	9e 87       	std	Y+14, r25	; 0x0e
    3458:	8d 87       	std	Y+13, r24	; 0x0d
    345a:	88 ef       	ldi	r24, 0xF8	; 248
    345c:	92 e0       	ldi	r25, 0x02	; 2
    345e:	fc 01       	movw	r30, r24
    3460:	80 81       	ld	r24, Z
    3462:	88 23       	and	r24, r24
    3464:	89 f4       	brne	.+34     	; 0x3488 <_ZN8PHSensor10getPHValueEv+0x3e>
    3466:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    3472:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    3476:	a0 93 0e 03 	sts	0x030E, r26	; 0x80030e <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    347a:	b0 93 0f 03 	sts	0x030F, r27	; 0x80030f <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    347e:	88 ef       	ldi	r24, 0xF8	; 248
    3480:	92 e0       	ldi	r25, 0x02	; 2
    3482:	21 e0       	ldi	r18, 0x01	; 1
    3484:	fc 01       	movw	r30, r24
    3486:	20 83       	st	Z, r18
    3488:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    348c:	9b 01       	movw	r18, r22
    348e:	ac 01       	movw	r20, r24
    3490:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    3494:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    3498:	a0 91 0e 03 	lds	r26, 0x030E	; 0x80030e <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    349c:	b0 91 0f 03 	lds	r27, 0x030F	; 0x80030f <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    34a0:	79 01       	movw	r14, r18
    34a2:	8a 01       	movw	r16, r20
    34a4:	e8 1a       	sub	r14, r24
    34a6:	f9 0a       	sbc	r15, r25
    34a8:	0a 0b       	sbc	r16, r26
    34aa:	1b 0b       	sbc	r17, r27
    34ac:	d8 01       	movw	r26, r16
    34ae:	c7 01       	movw	r24, r14
    34b0:	21 e0       	ldi	r18, 0x01	; 1
    34b2:	89 3e       	cpi	r24, 0xE9	; 233
    34b4:	93 40       	sbci	r25, 0x03	; 3
    34b6:	a1 05       	cpc	r26, r1
    34b8:	b1 05       	cpc	r27, r1
    34ba:	08 f4       	brcc	.+2      	; 0x34be <_ZN8PHSensor10getPHValueEv+0x74>
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	22 23       	and	r18, r18
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <_ZN8PHSensor10getPHValueEv+0x7a>
    34c2:	d0 c0       	rjmp	.+416    	; 0x3664 <_ZN8PHSensor10getPHValueEv+0x21a>
    34c4:	8e e1       	ldi	r24, 0x1E	; 30
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	fc 01       	movw	r30, r24
    34d2:	80 81       	ld	r24, Z
    34d4:	91 81       	ldd	r25, Z+1	; 0x01
    34d6:	0e 94 d6 30 	call	0x61ac	; 0x61ac <analogRead>
    34da:	98 87       	std	Y+8, r25	; 0x08
    34dc:	8f 83       	std	Y+7, r24	; 0x07
    34de:	89 ee       	ldi	r24, 0xE9	; 233
    34e0:	93 e0       	ldi	r25, 0x03	; 3
    34e2:	bc 01       	movw	r22, r24
    34e4:	86 e8       	ldi	r24, 0x86	; 134
    34e6:	95 e0       	ldi	r25, 0x05	; 5
    34e8:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    34ec:	8f 81       	ldd	r24, Y+7	; 0x07
    34ee:	98 85       	ldd	r25, Y+8	; 0x08
    34f0:	4a e0       	ldi	r20, 0x0A	; 10
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	bc 01       	movw	r22, r24
    34f6:	86 e8       	ldi	r24, 0x86	; 134
    34f8:	95 e0       	ldi	r25, 0x05	; 5
    34fa:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <_ZN5Print7printlnEii>
    34fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3500:	9e 85       	ldd	r25, Y+14	; 0x0e
    3502:	fc 01       	movw	r30, r24
    3504:	86 ad       	ldd	r24, Z+62	; 0x3e
    3506:	97 ad       	ldd	r25, Z+63	; 0x3f
    3508:	ac 01       	movw	r20, r24
    350a:	4f 5f       	subi	r20, 0xFF	; 255
    350c:	5f 4f       	sbci	r21, 0xFF	; 255
    350e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3510:	3e 85       	ldd	r19, Y+14	; 0x0e
    3512:	f9 01       	movw	r30, r18
    3514:	57 af       	std	Z+63, r21	; 0x3f
    3516:	46 af       	std	Z+62, r20	; 0x3e
    3518:	2d 85       	ldd	r18, Y+13	; 0x0d
    351a:	3e 85       	ldd	r19, Y+14	; 0x0e
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	82 0f       	add	r24, r18
    3524:	93 1f       	adc	r25, r19
    3526:	2f 81       	ldd	r18, Y+7	; 0x07
    3528:	38 85       	ldd	r19, Y+8	; 0x08
    352a:	fc 01       	movw	r30, r24
    352c:	31 83       	std	Z+1, r19	; 0x01
    352e:	20 83       	st	Z, r18
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	9e 85       	ldd	r25, Y+14	; 0x0e
    3534:	fc 01       	movw	r30, r24
    3536:	26 ad       	ldd	r18, Z+62	; 0x3e
    3538:	37 ad       	ldd	r19, Z+63	; 0x3f
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	28 17       	cp	r18, r24
    3540:	39 07       	cpc	r19, r25
    3542:	29 f4       	brne	.+10     	; 0x354e <_ZN8PHSensor10getPHValueEv+0x104>
    3544:	8d 85       	ldd	r24, Y+13	; 0x0d
    3546:	9e 85       	ldd	r25, Y+14	; 0x0e
    3548:	fc 01       	movw	r30, r24
    354a:	17 ae       	std	Z+63, r1	; 0x3f
    354c:	16 ae       	std	Z+62, r1	; 0x3e
    354e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3550:	9e 85       	ldd	r25, Y+14	; 0x0e
    3552:	02 96       	adiw	r24, 0x02	; 2
    3554:	2d 81       	ldd	r18, Y+5	; 0x05
    3556:	3e 81       	ldd	r19, Y+6	; 0x06
    3558:	b9 01       	movw	r22, r18
    355a:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN7MathExt16CalculateAverageEPii>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	89 87       	std	Y+9, r24	; 0x09
    3564:	9a 87       	std	Y+10, r25	; 0x0a
    3566:	ab 87       	std	Y+11, r26	; 0x0b
    3568:	bc 87       	std	Y+12, r27	; 0x0c
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 ea       	ldi	r20, 0xA0	; 160
    3570:	50 e4       	ldi	r21, 0x40	; 64
    3572:	69 85       	ldd	r22, Y+9	; 0x09
    3574:	7a 85       	ldd	r23, Y+10	; 0x0a
    3576:	8b 85       	ldd	r24, Y+11	; 0x0b
    3578:	9c 85       	ldd	r25, Y+12	; 0x0c
    357a:	0e 94 66 2b 	call	0x56cc	; 0x56cc <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	54 e4       	ldi	r21, 0x44	; 68
    358a:	bc 01       	movw	r22, r24
    358c:	cd 01       	movw	r24, r26
    358e:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	2d 85       	ldd	r18, Y+13	; 0x0d
    3598:	3e 85       	ldd	r19, Y+14	; 0x0e
    359a:	2d 5a       	subi	r18, 0xAD	; 173
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	f9 01       	movw	r30, r18
    35a0:	80 83       	st	Z, r24
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	a2 83       	std	Z+2, r26	; 0x02
    35a6:	b3 83       	std	Z+3, r27	; 0x03
    35a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ac:	8d 5a       	subi	r24, 0xAD	; 173
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	fc 01       	movw	r30, r24
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	a2 81       	ldd	r26, Z+2	; 0x02
    35b8:	b3 81       	ldd	r27, Z+3	; 0x03
    35ba:	9c 01       	movw	r18, r24
    35bc:	ad 01       	movw	r20, r26
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	80 e2       	ldi	r24, 0x20	; 32
    35c4:	90 e4       	ldi	r25, 0x40	; 64
    35c6:	0e 94 ae 29 	call	0x535c	; 0x535c <__subsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	2c ee       	ldi	r18, 0xEC	; 236
    35d0:	31 e5       	ldi	r19, 0x51	; 81
    35d2:	48 e3       	ldi	r20, 0x38	; 56
    35d4:	5e e3       	ldi	r21, 0x3E	; 62
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 ee       	ldi	r20, 0xE0	; 224
    35e8:	50 e4       	ldi	r21, 0x40	; 64
    35ea:	bc 01       	movw	r22, r24
    35ec:	cd 01       	movw	r24, r26
    35ee:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	7c 01       	movw	r14, r24
    35f8:	8d 01       	movw	r16, r26
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	83 57       	subi	r24, 0x73	; 115
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	fc 01       	movw	r30, r24
    3604:	80 81       	ld	r24, Z
    3606:	91 81       	ldd	r25, Z+1	; 0x01
    3608:	a2 81       	ldd	r26, Z+2	; 0x02
    360a:	b3 81       	ldd	r27, Z+3	; 0x03
    360c:	9c 01       	movw	r18, r24
    360e:	ad 01       	movw	r20, r26
    3610:	c8 01       	movw	r24, r16
    3612:	b7 01       	movw	r22, r14
    3614:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	ab 83       	std	Y+3, r26	; 0x03
    3622:	bc 83       	std	Y+4, r27	; 0x04
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	a9 01       	movw	r20, r18
    362a:	69 81       	ldd	r22, Y+1	; 0x01
    362c:	7a 81       	ldd	r23, Y+2	; 0x02
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	0e 94 13 2a 	call	0x5426	; 0x5426 <__cmpsf2>
    3636:	88 23       	and	r24, r24
    3638:	24 f4       	brge	.+8      	; 0x3642 <_ZN8PHSensor10getPHValueEv+0x1f8>
    363a:	19 82       	std	Y+1, r1	; 0x01
    363c:	1a 82       	std	Y+2, r1	; 0x02
    363e:	1b 82       	std	Y+3, r1	; 0x03
    3640:	1c 82       	std	Y+4, r1	; 0x04
    3642:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    364e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    3652:	a0 93 0e 03 	sts	0x030E, r26	; 0x80030e <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    3656:	b0 93 0f 03 	sts	0x030F, r27	; 0x80030f <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	ab 81       	ldd	r26, Y+3	; 0x03
    3660:	bc 81       	ldd	r27, Y+4	; 0x04
    3662:	09 c0       	rjmp	.+18     	; 0x3676 <_ZN8PHSensor10getPHValueEv+0x22c>
    3664:	8d 85       	ldd	r24, Y+13	; 0x0d
    3666:	9e 85       	ldd	r25, Y+14	; 0x0e
    3668:	85 5b       	subi	r24, 0xB5	; 181
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	fc 01       	movw	r30, r24
    366e:	80 81       	ld	r24, Z
    3670:	91 81       	ldd	r25, Z+1	; 0x01
    3672:	a2 81       	ldd	r26, Z+2	; 0x02
    3674:	b3 81       	ldd	r27, Z+3	; 0x03
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	2e 96       	adiw	r28, 0x0e	; 14
    367c:	e6 e0       	ldi	r30, 0x06	; 6
    367e:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00003682 <_ZN15StringSumHelperD1Ev>:
    3682:	a2 e0       	ldi	r26, 0x02	; 2
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e7 e4       	ldi	r30, 0x47	; 71
    3688:	fb e1       	ldi	r31, 0x1B	; 27
    368a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    369a:	22 96       	adiw	r28, 0x02	; 2
    369c:	e2 e0       	ldi	r30, 0x02	; 2
    369e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000036a2 <_ZN8PHSensor12PrintPHToLCDEv>:
    36a2:	aa e1       	ldi	r26, 0x1A	; 26
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e7 e5       	ldi	r30, 0x57	; 87
    36a8:	fb e1       	ldi	r31, 0x1B	; 27
    36aa:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    36ae:	9a 8f       	std	Y+26, r25	; 0x1a
    36b0:	89 8f       	std	Y+25, r24	; 0x19
    36b2:	89 8d       	ldd	r24, Y+25	; 0x19
    36b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36b6:	b8 dc       	rcall	.-1680   	; 0x3028 <_ZN8PHSensor5GetPHEv>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	fc 01       	movw	r30, r24
    36be:	80 81       	ld	r24, Z
    36c0:	88 23       	and	r24, r24
    36c2:	89 f4       	brne	.+34     	; 0x36e6 <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    36c4:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    36d0:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    36d4:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    36d8:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	93 e0       	ldi	r25, 0x03	; 3
    36e0:	21 e0       	ldi	r18, 0x01	; 1
    36e2:	fc 01       	movw	r30, r24
    36e4:	20 83       	st	Z, r18
    36e6:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    36ea:	9b 01       	movw	r18, r22
    36ec:	ac 01       	movw	r20, r24
    36ee:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    36f2:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    36f6:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    36fa:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    36fe:	28 1b       	sub	r18, r24
    3700:	39 0b       	sbc	r19, r25
    3702:	4a 0b       	sbc	r20, r26
    3704:	5b 0b       	sbc	r21, r27
    3706:	89 8d       	ldd	r24, Y+25	; 0x19
    3708:	9a 8d       	ldd	r25, Y+26	; 0x1a
    370a:	80 5c       	subi	r24, 0xC0	; 192
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	fc 01       	movw	r30, r24
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	80 57       	subi	r24, 0x70	; 112
    3716:	9e 4f       	sbci	r25, 0xFE	; 254
    3718:	09 2e       	mov	r0, r25
    371a:	00 0c       	add	r0, r0
    371c:	aa 0b       	sbc	r26, r26
    371e:	bb 0b       	sbc	r27, r27
    3720:	61 e0       	ldi	r22, 0x01	; 1
    3722:	82 17       	cp	r24, r18
    3724:	93 07       	cpc	r25, r19
    3726:	a4 07       	cpc	r26, r20
    3728:	b5 07       	cpc	r27, r21
    372a:	08 f0       	brcs	.+2      	; 0x372e <_ZN8PHSensor12PrintPHToLCDEv+0x8c>
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	66 23       	and	r22, r22
    3730:	09 f4       	brne	.+2      	; 0x3734 <_ZN8PHSensor12PrintPHToLCDEv+0x92>
    3732:	74 c0       	rjmp	.+232    	; 0x381c <_ZN8PHSensor12PrintPHToLCDEv+0x17a>
    3734:	89 8d       	ldd	r24, Y+25	; 0x19
    3736:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3738:	89 5a       	subi	r24, 0xA9	; 169
    373a:	9f 4f       	sbci	r25, 0xFF	; 255
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	88 23       	and	r24, r24
    3742:	09 f4       	brne	.+2      	; 0x3746 <_ZN8PHSensor12PrintPHToLCDEv+0xa4>
    3744:	5f c0       	rjmp	.+190    	; 0x3804 <_ZN8PHSensor12PrintPHToLCDEv+0x162>
    3746:	ce 01       	movw	r24, r28
    3748:	0d 96       	adiw	r24, 0x0d	; 13
    374a:	6f e1       	ldi	r22, 0x1F	; 31
    374c:	71 e0       	ldi	r23, 0x01	; 1
    374e:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    3752:	89 8d       	ldd	r24, Y+25	; 0x19
    3754:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3756:	86 5a       	subi	r24, 0xA6	; 166
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	fc 01       	movw	r30, r24
    375c:	80 81       	ld	r24, Z
    375e:	88 23       	and	r24, r24
    3760:	31 f0       	breq	.+12     	; 0x376e <_ZN8PHSensor12PrintPHToLCDEv+0xcc>
    3762:	ce 01       	movw	r24, r28
    3764:	0d 96       	adiw	r24, 0x0d	; 13
    3766:	60 e2       	ldi	r22, 0x20	; 32
    3768:	71 e0       	ldi	r23, 0x01	; 1
    376a:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    376e:	89 8d       	ldd	r24, Y+25	; 0x19
    3770:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3772:	8c 01       	movw	r16, r24
    3774:	0f 57       	subi	r16, 0x7F	; 127
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	89 8d       	ldd	r24, Y+25	; 0x19
    377a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    377c:	7c 01       	movw	r14, r24
    377e:	f7 e8       	ldi	r31, 0x87	; 135
    3780:	ef 0e       	add	r14, r31
    3782:	f1 1c       	adc	r15, r1
    3784:	ce 01       	movw	r24, r28
    3786:	07 96       	adiw	r24, 0x07	; 7
    3788:	62 e2       	ldi	r22, 0x22	; 34
    378a:	71 e0       	ldi	r23, 0x01	; 1
    378c:	8d d9       	rcall	.-3302   	; 0x2aa8 <_ZN15StringSumHelperC1EPKc>
    378e:	ce 01       	movw	r24, r28
    3790:	07 96       	adiw	r24, 0x07	; 7
    3792:	b7 01       	movw	r22, r14
    3794:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    3798:	67 e2       	ldi	r22, 0x27	; 39
    379a:	71 e0       	ldi	r23, 0x01	; 1
    379c:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZplRK15StringSumHelperPKc>
    37a0:	b8 01       	movw	r22, r16
    37a2:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    37a6:	9c 01       	movw	r18, r24
    37a8:	ce 01       	movw	r24, r28
    37aa:	0d 96       	adiw	r24, 0x0d	; 13
    37ac:	bc 01       	movw	r22, r24
    37ae:	c9 01       	movw	r24, r18
    37b0:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    37b4:	9c 01       	movw	r18, r24
    37b6:	ce 01       	movw	r24, r28
    37b8:	43 96       	adiw	r24, 0x13	; 19
    37ba:	b9 01       	movw	r22, r18
    37bc:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    37c0:	ce 01       	movw	r24, r28
    37c2:	07 96       	adiw	r24, 0x07	; 7
    37c4:	5e df       	rcall	.-324    	; 0x3682 <_ZN15StringSumHelperD1Ev>
    37c6:	ce 01       	movw	r24, r28
    37c8:	43 96       	adiw	r24, 0x13	; 19
    37ca:	bc 01       	movw	r22, r24
    37cc:	ce 01       	movw	r24, r28
    37ce:	01 96       	adiw	r24, 0x01	; 1
    37d0:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    37d4:	89 8d       	ldd	r24, Y+25	; 0x19
    37d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37d8:	83 5a       	subi	r24, 0xA3	; 163
    37da:	9f 4f       	sbci	r25, 0xFF	; 255
    37dc:	9e 01       	movw	r18, r28
    37de:	2f 5f       	subi	r18, 0xFF	; 255
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	a9 01       	movw	r20, r18
    37e4:	60 e0       	ldi	r22, 0x00	; 0
    37e6:	70 e0       	ldi	r23, 0x00	; 0
    37e8:	0e 94 80 10 	call	0x2100	; 0x2100 <_ZN7LCDBase9PrintLineEs6String>
    37ec:	ce 01       	movw	r24, r28
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    37f4:	ce 01       	movw	r24, r28
    37f6:	43 96       	adiw	r24, 0x13	; 19
    37f8:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    37fc:	ce 01       	movw	r24, r28
    37fe:	0d 96       	adiw	r24, 0x0d	; 13
    3800:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    3804:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    3810:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    3814:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    3818:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    381c:	6a 96       	adiw	r28, 0x1a	; 26
    381e:	e6 e0       	ldi	r30, 0x06	; 6
    3820:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00003824 <_ZN8PHSensor6TurnOnEv>:
    3824:	a2 e0       	ldi	r26, 0x02	; 2
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e8 e1       	ldi	r30, 0x18	; 24
    382a:	fc e1       	ldi	r31, 0x1C	; 28
    382c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3830:	9a 83       	std	Y+2, r25	; 0x02
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	9a 81       	ldd	r25, Y+2	; 0x02
    3838:	86 5a       	subi	r24, 0xA6	; 166
    383a:	9f 4f       	sbci	r25, 0xFF	; 255
    383c:	21 e0       	ldi	r18, 0x01	; 1
    383e:	fc 01       	movw	r30, r24
    3840:	20 83       	st	Z, r18
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	88 5a       	subi	r24, 0xA8	; 168
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	fc 01       	movw	r30, r24
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    3856:	22 96       	adiw	r28, 0x02	; 2
    3858:	e2 e0       	ldi	r30, 0x02	; 2
    385a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000385e <_ZN8PHSensor7TurnOffEv>:
    385e:	a2 e0       	ldi	r26, 0x02	; 2
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	e5 e3       	ldi	r30, 0x35	; 53
    3864:	fc e1       	ldi	r31, 0x1C	; 28
    3866:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	86 5a       	subi	r24, 0xA6	; 166
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	fc 01       	movw	r30, r24
    3878:	10 82       	st	Z, r1
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	9a 81       	ldd	r25, Y+2	; 0x02
    387e:	88 5a       	subi	r24, 0xA8	; 168
    3880:	9f 4f       	sbci	r25, 0xFF	; 255
    3882:	fc 01       	movw	r30, r24
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    388e:	68 ee       	ldi	r22, 0xE8	; 232
    3890:	73 e0       	ldi	r23, 0x03	; 3
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	0e 94 57 30 	call	0x60ae	; 0x60ae <delay>
    389a:	22 96       	adiw	r28, 0x02	; 2
    389c:	e2 e0       	ldi	r30, 0x02	; 2
    389e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000038a2 <_ZN8PHSensor9isOutlierEdd>:
    38a2:	a1 e1       	ldi	r26, 0x11	; 17
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e7 e5       	ldi	r30, 0x57	; 87
    38a8:	fc e1       	ldi	r31, 0x1C	; 28
    38aa:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    38ae:	99 87       	std	Y+9, r25	; 0x09
    38b0:	88 87       	std	Y+8, r24	; 0x08
    38b2:	4a 87       	std	Y+10, r20	; 0x0a
    38b4:	5b 87       	std	Y+11, r21	; 0x0b
    38b6:	6c 87       	std	Y+12, r22	; 0x0c
    38b8:	7d 87       	std	Y+13, r23	; 0x0d
    38ba:	0e 87       	std	Y+14, r16	; 0x0e
    38bc:	1f 87       	std	Y+15, r17	; 0x0f
    38be:	28 8b       	std	Y+16, r18	; 0x10
    38c0:	39 8b       	std	Y+17, r19	; 0x11
    38c2:	8d ec       	ldi	r24, 0xCD	; 205
    38c4:	9c ec       	ldi	r25, 0xCC	; 204
    38c6:	ac e4       	ldi	r26, 0x4C	; 76
    38c8:	be e3       	ldi	r27, 0x3E	; 62
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	ab 83       	std	Y+3, r26	; 0x03
    38d0:	bc 83       	std	Y+4, r27	; 0x04
    38d2:	29 81       	ldd	r18, Y+1	; 0x01
    38d4:	3a 81       	ldd	r19, Y+2	; 0x02
    38d6:	4b 81       	ldd	r20, Y+3	; 0x03
    38d8:	5c 81       	ldd	r21, Y+4	; 0x04
    38da:	6e 85       	ldd	r22, Y+14	; 0x0e
    38dc:	7f 85       	ldd	r23, Y+15	; 0x0f
    38de:	88 89       	ldd	r24, Y+16	; 0x10
    38e0:	99 89       	ldd	r25, Y+17	; 0x11
    38e2:	0e 94 ae 29 	call	0x535c	; 0x535c <__subsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	11 e0       	ldi	r17, 0x01	; 1
    38ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    38ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    38f0:	4c 85       	ldd	r20, Y+12	; 0x0c
    38f2:	5d 85       	ldd	r21, Y+13	; 0x0d
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <__gesf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	0c f0       	brlt	.+2      	; 0x3902 <_ZN8PHSensor9isOutlierEdd+0x60>
    3900:	10 e0       	ldi	r17, 0x00	; 0
    3902:	1d 83       	std	Y+5, r17	; 0x05
    3904:	29 81       	ldd	r18, Y+1	; 0x01
    3906:	3a 81       	ldd	r19, Y+2	; 0x02
    3908:	4b 81       	ldd	r20, Y+3	; 0x03
    390a:	5c 81       	ldd	r21, Y+4	; 0x04
    390c:	6e 85       	ldd	r22, Y+14	; 0x0e
    390e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3910:	88 89       	ldd	r24, Y+16	; 0x10
    3912:	99 89       	ldd	r25, Y+17	; 0x11
    3914:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	11 e0       	ldi	r17, 0x01	; 1
    391e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3920:	3b 85       	ldd	r19, Y+11	; 0x0b
    3922:	4c 85       	ldd	r20, Y+12	; 0x0c
    3924:	5d 85       	ldd	r21, Y+13	; 0x0d
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	0e 94 13 2a 	call	0x5426	; 0x5426 <__cmpsf2>
    392e:	88 23       	and	r24, r24
    3930:	0c f0       	brlt	.+2      	; 0x3934 <_ZN8PHSensor9isOutlierEdd+0x92>
    3932:	10 e0       	ldi	r17, 0x00	; 0
    3934:	1e 83       	std	Y+6, r17	; 0x06
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	88 23       	and	r24, r24
    393a:	19 f4       	brne	.+6      	; 0x3942 <_ZN8PHSensor9isOutlierEdd+0xa0>
    393c:	8e 81       	ldd	r24, Y+6	; 0x06
    393e:	88 23       	and	r24, r24
    3940:	11 f0       	breq	.+4      	; 0x3946 <_ZN8PHSensor9isOutlierEdd+0xa4>
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <_ZN8PHSensor9isOutlierEdd+0xa6>
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	8f 83       	std	Y+7, r24	; 0x07
    394a:	8f 81       	ldd	r24, Y+7	; 0x07
    394c:	61 96       	adiw	r28, 0x11	; 17
    394e:	e4 e0       	ldi	r30, 0x04	; 4
    3950:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00003954 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
    3954:	a4 e0       	ldi	r26, 0x04	; 4
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e0 eb       	ldi	r30, 0xB0	; 176
    395a:	fc e1       	ldi	r31, 0x1C	; 28
    395c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	7c 83       	std	Y+4, r23	; 0x04
    3966:	6b 83       	std	Y+3, r22	; 0x03
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	fc 01       	movw	r30, r24
    396e:	11 82       	std	Z+1, r1	; 0x01
    3970:	10 82       	st	Z, r1
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	9a 81       	ldd	r25, Y+2	; 0x02
    3976:	28 e0       	ldi	r18, 0x08	; 8
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	fc 01       	movw	r30, r24
    397c:	33 83       	std	Z+3, r19	; 0x03
    397e:	22 83       	std	Z+2, r18	; 0x02
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	fc 01       	movw	r30, r24
    3986:	15 82       	std	Z+5, r1	; 0x05
    3988:	14 82       	std	Z+4, r1	; 0x04
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	fc 01       	movw	r30, r24
    3990:	22 81       	ldd	r18, Z+2	; 0x02
    3992:	33 81       	ldd	r19, Z+3	; 0x03
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	06 96       	adiw	r24, 0x06	; 6
    399a:	40 e0       	ldi	r20, 0x00	; 0
    399c:	50 e0       	ldi	r21, 0x00	; 0
    399e:	b9 01       	movw	r22, r18
    39a0:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZNSaIdE8allocateEjPKv>
    39a4:	9c 01       	movw	r18, r24
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	fc 01       	movw	r30, r24
    39ac:	31 83       	std	Z+1, r19	; 0x01
    39ae:	20 83       	st	Z, r18
    39b0:	24 96       	adiw	r28, 0x04	; 4
    39b2:	e2 e0       	ldi	r30, 0x02	; 2
    39b4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000039b8 <_ZN6EEWrapIfEcvKfEv>:
    39b8:	a2 e0       	ldi	r26, 0x02	; 2
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e2 ee       	ldi	r30, 0xE2	; 226
    39be:	fc e1       	ldi	r31, 0x1C	; 28
    39c0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	89 83       	std	Y+1, r24	; 0x01
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	9a 81       	ldd	r25, Y+2	; 0x02
    39cc:	c3 d0       	rcall	.+390    	; 0x3b54 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	22 96       	adiw	r28, 0x02	; 2
    39d8:	e2 e0       	ldi	r30, 0x02	; 2
    39da:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000039de <_ZN6EEWrapIfEaSERKf>:
    39de:	a4 e0       	ldi	r26, 0x04	; 4
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e5 ef       	ldi	r30, 0xF5	; 245
    39e4:	fc e1       	ldi	r31, 0x1C	; 28
    39e6:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	7c 83       	std	Y+4, r23	; 0x04
    39f0:	6b 83       	std	Y+3, r22	; 0x03
    39f2:	2b 81       	ldd	r18, Y+3	; 0x03
    39f4:	3c 81       	ldd	r19, Y+4	; 0x04
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	9a 81       	ldd	r25, Y+2	; 0x02
    39fa:	b9 01       	movw	r22, r18
    39fc:	cb d0       	rcall	.+406    	; 0x3b94 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    39fe:	24 96       	adiw	r28, 0x04	; 4
    3a00:	e2 e0       	ldi	r30, 0x02	; 2
    3a02:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003a06 <_ZNSt6vectorIdSaIdEE9push_backERKd>:
    3a06:	a4 e0       	ldi	r26, 0x04	; 4
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	e9 e0       	ldi	r30, 0x09	; 9
    3a0c:	fd e1       	ldi	r31, 0x1D	; 29
    3a0e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
    3a16:	7c 83       	std	Y+4, r23	; 0x04
    3a18:	6b 83       	std	Y+3, r22	; 0x03
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	0e 94 47 13 	call	0x268e	; 0x268e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3a22:	9c 01       	movw	r18, r24
    3a24:	2f 5f       	subi	r18, 0xFF	; 255
    3a26:	3f 4f       	sbci	r19, 0xFF	; 255
    3a28:	4b 81       	ldd	r20, Y+3	; 0x03
    3a2a:	5c 81       	ldd	r21, Y+4	; 0x04
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	b9 01       	movw	r22, r18
    3a32:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
    3a36:	24 96       	adiw	r28, 0x04	; 4
    3a38:	e2 e0       	ldi	r30, 0x02	; 2
    3a3a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003a3e <_ZNSt6vectorIdSaIdEEC1ERKS1_>:
    3a3e:	a6 e0       	ldi	r26, 0x06	; 6
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e5 e2       	ldi	r30, 0x25	; 37
    3a44:	fd e1       	ldi	r31, 0x1D	; 29
    3a46:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3a4a:	9c 83       	std	Y+4, r25	; 0x04
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
    3a4e:	7e 83       	std	Y+6, r23	; 0x06
    3a50:	6d 83       	std	Y+5, r22	; 0x05
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	9c 81       	ldd	r25, Y+4	; 0x04
    3a56:	06 96       	adiw	r24, 0x06	; 6
    3a58:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZNSaIdEC1Ev>
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	fc 01       	movw	r30, r24
    3a62:	24 81       	ldd	r18, Z+4	; 0x04
    3a64:	35 81       	ldd	r19, Z+5	; 0x05
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	35 83       	std	Z+5, r19	; 0x05
    3a6e:	24 83       	std	Z+4, r18	; 0x04
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	fc 01       	movw	r30, r24
    3a76:	84 81       	ldd	r24, Z+4	; 0x04
    3a78:	95 81       	ldd	r25, Z+5	; 0x05
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	28 5f       	subi	r18, 0xF8	; 248
    3a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	9c 81       	ldd	r25, Y+4	; 0x04
    3a84:	fc 01       	movw	r30, r24
    3a86:	33 83       	std	Z+3, r19	; 0x03
    3a88:	22 83       	std	Z+2, r18	; 0x02
    3a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8e:	fc 01       	movw	r30, r24
    3a90:	22 81       	ldd	r18, Z+2	; 0x02
    3a92:	33 81       	ldd	r19, Z+3	; 0x03
    3a94:	8b 81       	ldd	r24, Y+3	; 0x03
    3a96:	9c 81       	ldd	r25, Y+4	; 0x04
    3a98:	06 96       	adiw	r24, 0x06	; 6
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	b9 01       	movw	r22, r18
    3aa0:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZNSaIdE8allocateEjPKv>
    3aa4:	9c 01       	movw	r18, r24
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	fc 01       	movw	r30, r24
    3aac:	31 83       	std	Z+1, r19	; 0x01
    3aae:	20 83       	st	Z, r18
    3ab0:	1a 82       	std	Y+2, r1	; 0x02
    3ab2:	19 82       	std	Y+1, r1	; 0x01
    3ab4:	26 c0       	rjmp	.+76     	; 0x3b02 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0xc4>
    3ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aba:	fc 01       	movw	r30, r24
    3abc:	20 81       	ld	r18, Z
    3abe:	31 81       	ldd	r19, Z+1	; 0x01
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	a9 01       	movw	r20, r18
    3ace:	48 0f       	add	r20, r24
    3ad0:	59 1f       	adc	r21, r25
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	20 81       	ld	r18, Z
    3ada:	31 81       	ldd	r19, Z+1	; 0x01
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	88 0f       	add	r24, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	28 0f       	add	r18, r24
    3aea:	39 1f       	adc	r19, r25
    3aec:	8b 81       	ldd	r24, Y+3	; 0x03
    3aee:	9c 81       	ldd	r25, Y+4	; 0x04
    3af0:	06 96       	adiw	r24, 0x06	; 6
    3af2:	b9 01       	movw	r22, r18
    3af4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZNSaIdE9constructEPdRKd>
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	01 96       	adiw	r24, 0x01	; 1
    3afe:	9a 83       	std	Y+2, r25	; 0x02
    3b00:	89 83       	std	Y+1, r24	; 0x01
    3b02:	8b 81       	ldd	r24, Y+3	; 0x03
    3b04:	9c 81       	ldd	r25, Y+4	; 0x04
    3b06:	fc 01       	movw	r30, r24
    3b08:	24 81       	ldd	r18, Z+4	; 0x04
    3b0a:	35 81       	ldd	r19, Z+5	; 0x05
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	82 17       	cp	r24, r18
    3b12:	93 07       	cpc	r25, r19
    3b14:	80 f2       	brcs	.-96     	; 0x3ab6 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0x78>
    3b16:	26 96       	adiw	r28, 0x06	; 6
    3b18:	e2 e0       	ldi	r30, 0x02	; 2
    3b1a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003b1e <_ZNSt6vectorIdSaIdEEixEj>:
    3b1e:	a4 e0       	ldi	r26, 0x04	; 4
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	e5 e9       	ldi	r30, 0x95	; 149
    3b24:	fd e1       	ldi	r31, 0x1D	; 29
    3b26:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
    3b2e:	7c 83       	std	Y+4, r23	; 0x04
    3b30:	6b 83       	std	Y+3, r22	; 0x03
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	fc 01       	movw	r30, r24
    3b38:	20 81       	ld	r18, Z
    3b3a:	31 81       	ldd	r19, Z+1	; 0x01
    3b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	88 0f       	add	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	82 0f       	add	r24, r18
    3b4a:	93 1f       	adc	r25, r19
    3b4c:	24 96       	adiw	r28, 0x04	; 4
    3b4e:	e2 e0       	ldi	r30, 0x02	; 2
    3b50:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003b54 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:
    3b54:	a6 e0       	ldi	r26, 0x06	; 6
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	e0 eb       	ldi	r30, 0xB0	; 176
    3b5a:	fd e1       	ldi	r31, 0x1D	; 29
    3b5c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	8d 83       	std	Y+5, r24	; 0x05
    3b64:	8d 81       	ldd	r24, Y+5	; 0x05
    3b66:	9e 81       	ldd	r25, Y+6	; 0x06
    3b68:	33 d0       	rcall	.+102    	; 0x3bd0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	83 e0       	ldi	r24, 0x03	; 3
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9e 01       	movw	r18, r28
    3b72:	2f 5f       	subi	r18, 0xFF	; 255
    3b74:	3f 4f       	sbci	r19, 0xFF	; 255
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	44 e0       	ldi	r20, 0x04	; 4
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	28 d8       	rcall	.-4016   	; 0x2bd0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	9a 81       	ldd	r25, Y+2	; 0x02
    3b84:	ab 81       	ldd	r26, Y+3	; 0x03
    3b86:	bc 81       	ldd	r27, Y+4	; 0x04
    3b88:	bc 01       	movw	r22, r24
    3b8a:	cd 01       	movw	r24, r26
    3b8c:	26 96       	adiw	r28, 0x06	; 6
    3b8e:	e2 e0       	ldi	r30, 0x02	; 2
    3b90:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003b94 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:
    3b94:	a4 e0       	ldi	r26, 0x04	; 4
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	e0 ed       	ldi	r30, 0xD0	; 208
    3b9a:	fd e1       	ldi	r31, 0x1D	; 29
    3b9c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
    3ba4:	7c 83       	std	Y+4, r23	; 0x04
    3ba6:	6b 83       	std	Y+3, r22	; 0x03
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	11 d0       	rcall	.+34     	; 0x3bd0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3bae:	bc 01       	movw	r22, r24
    3bb0:	83 e0       	ldi	r24, 0x03	; 3
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    3bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    3bb8:	82 0f       	add	r24, r18
    3bba:	93 1f       	adc	r25, r19
    3bbc:	44 e0       	ldi	r20, 0x04	; 4
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	3e d8       	rcall	.-3972   	; 0x2c3e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	04 d0       	rcall	.+8      	; 0x3bd0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3bc8:	24 96       	adiw	r28, 0x04	; 4
    3bca:	e2 e0       	ldi	r30, 0x02	; 2
    3bcc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003bd0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:

        D &EEWrite( const T& v ){
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return self();
        }
        protected: STATIC_ACCESS
    3bd0:	a2 e0       	ldi	r26, 0x02	; 2
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	ee ee       	ldi	r30, 0xEE	; 238
    3bd6:	fd e1       	ldi	r31, 0x1D	; 29
    3bd8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	9a 81       	ldd	r25, Y+2	; 0x02
    3be4:	22 96       	adiw	r28, 0x02	; 2
    3be6:	e2 e0       	ldi	r30, 0x02	; 2
    3be8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003bec <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    3bec:	ab e0       	ldi	r26, 0x0B	; 11
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ec ef       	ldi	r30, 0xFC	; 252
    3bf2:	fd e1       	ldi	r31, 0x1D	; 29
    3bf4:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	7c 83       	std	Y+4, r23	; 0x04
    3bfe:	6b 83       	std	Y+3, r22	; 0x03
    3c00:	5e 83       	std	Y+6, r21	; 0x06
    3c02:	4d 83       	std	Y+5, r20	; 0x05
    3c04:	2f 83       	std	Y+7, r18	; 0x07
    3c06:	19 87       	std	Y+9, r17	; 0x09
    3c08:	08 87       	std	Y+8, r16	; 0x08
    3c0a:	fb 86       	std	Y+11, r15	; 0x0b
    3c0c:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	2b 81       	ldd	r18, Y+3	; 0x03
    3c14:	3c 81       	ldd	r19, Y+4	; 0x04
    3c16:	fc 01       	movw	r30, r24
    3c18:	31 83       	std	Z+1, r19	; 0x01
    3c1a:	20 83       	st	Z, r18
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	fc 01       	movw	r30, r24
    3c22:	17 ae       	std	Z+63, r1	; 0x3f
    3c24:	16 ae       	std	Z+62, r1	; 0x3e
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	80 5c       	subi	r24, 0xC0	; 192
    3c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2e:	2d 81       	ldd	r18, Y+5	; 0x05
    3c30:	3e 81       	ldd	r19, Y+6	; 0x06
    3c32:	fc 01       	movw	r30, r24
    3c34:	31 83       	std	Z+1, r19	; 0x01
    3c36:	20 83       	st	Z, r18
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	82 5b       	subi	r24, 0xB2	; 178
    3c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c40:	2f 81       	ldd	r18, Y+7	; 0x07
    3c42:	fc 01       	movw	r30, r24
    3c44:	20 83       	st	Z, r18
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4a:	81 5b       	subi	r24, 0xB1	; 177
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c50:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c52:	fc 01       	movw	r30, r24
    3c54:	31 83       	std	Z+1, r19	; 0x01
    3c56:	20 83       	st	Z, r18
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	8e 5a       	subi	r24, 0xAE	; 174
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	fc 01       	movw	r30, r24
    3c62:	11 82       	std	Z+1, r1	; 0x01
    3c64:	10 82       	st	Z, r1
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	8c 5a       	subi	r24, 0xAC	; 172
    3c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6e:	28 85       	ldd	r18, Y+8	; 0x08
    3c70:	39 85       	ldd	r19, Y+9	; 0x09
    3c72:	b9 01       	movw	r22, r18
    3c74:	b3 d8       	rcall	.-3738   	; 0x2ddc <_ZN7LCDBaseC1ERKS_>
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7a:	88 58       	subi	r24, 0x88	; 136
    3c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7e:	6a e2       	ldi	r22, 0x2A	; 42
    3c80:	71 e0       	ldi	r23, 0x01	; 1
    3c82:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8a:	82 58       	subi	r24, 0x82	; 130
    3c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8e:	6a e2       	ldi	r22, 0x2A	; 42
    3c90:	71 e0       	ldi	r23, 0x01	; 1
    3c92:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9a:	8c 57       	subi	r24, 0x7C	; 124
    3c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9e:	2a eb       	ldi	r18, 0xBA	; 186
    3ca0:	34 e0       	ldi	r19, 0x04	; 4
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	31 83       	std	Z+1, r19	; 0x01
    3ca6:	20 83       	st	Z, r18
    init();
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	04 d0       	rcall	.+8      	; 0x3cb6 <_ZN9TDSSensor4initEv>
}
    3cae:	2b 96       	adiw	r28, 0x0b	; 11
    3cb0:	e6 e0       	ldi	r30, 0x06	; 6
    3cb2:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00003cb6 <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    3cb6:	a6 e0       	ldi	r26, 0x06	; 6
    3cb8:	b0 e0       	ldi	r27, 0x00	; 0
    3cba:	e1 e6       	ldi	r30, 0x61	; 97
    3cbc:	fe e1       	ldi	r31, 0x1E	; 30
    3cbe:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3cc2:	9e 83       	std	Y+6, r25	; 0x06
    3cc4:	8d 83       	std	Y+5, r24	; 0x05
    //led to show board working
    pinMode(13, OUTPUT);
    3cc6:	61 e0       	ldi	r22, 0x01	; 1
    3cc8:	8d e0       	ldi	r24, 0x0D	; 13
    3cca:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    pinMode(_relayPin, OUTPUT);
    3cce:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd2:	81 5b       	subi	r24, 0xB1	; 177
    3cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	0e 94 1c 31 	call	0x6238	; 0x6238 <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    3ce2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN6Memory13TheSensorsMemE>
    3ce6:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN6Memory13TheSensorsMemE+0x1>
    3cea:	04 96       	adiw	r24, 0x04	; 4
    3cec:	a7 d3       	rcall	.+1870   	; 0x443c <_ZN6EEWrapIiEcvKiEv>
    3cee:	09 2e       	mov	r0, r25
    3cf0:	00 0c       	add	r0, r0
    3cf2:	aa 0b       	sbc	r26, r26
    3cf4:	bb 0b       	sbc	r27, r27
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	9a 83       	std	Y+2, r25	; 0x02
    3d06:	ab 83       	std	Y+3, r26	; 0x03
    3d08:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    3d0a:	29 81       	ldd	r18, Y+1	; 0x01
    3d0c:	3a 81       	ldd	r19, Y+2	; 0x02
    3d0e:	4b 81       	ldd	r20, Y+3	; 0x03
    3d10:	5c 81       	ldd	r21, Y+4	; 0x04
    3d12:	69 81       	ldd	r22, Y+1	; 0x01
    3d14:	7a 81       	ldd	r23, Y+2	; 0x02
    3d16:	8b 81       	ldd	r24, Y+3	; 0x03
    3d18:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1a:	0e 94 c9 2b 	call	0x5792	; 0x5792 <__unordsf2>
    3d1e:	88 23       	and	r24, r24
    3d20:	81 f4       	brne	.+32     	; 0x3d42 <_ZN9TDSSensor4initEv+0x8c>
        Offset = offset;
    3d22:	69 81       	ldd	r22, Y+1	; 0x01
    3d24:	7a 81       	ldd	r23, Y+2	; 0x02
    3d26:	8b 81       	ldd	r24, Y+3	; 0x03
    3d28:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2a:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <__fixsfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	9c 01       	movw	r18, r24
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	9e 81       	ldd	r25, Y+6	; 0x06
    3d38:	8c 57       	subi	r24, 0x7C	; 124
    3d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	31 83       	std	Z+1, r19	; 0x01
    3d40:	20 83       	st	Z, r18
    }
}
    3d42:	26 96       	adiw	r28, 0x06	; 6
    3d44:	e2 e0       	ldi	r30, 0x02	; 2
    3d46:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003d4a <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    3d4a:	a4 e0       	ldi	r26, 0x04	; 4
    3d4c:	b0 e0       	ldi	r27, 0x00	; 0
    3d4e:	eb ea       	ldi	r30, 0xAB	; 171
    3d50:	fe e1       	ldi	r31, 0x1E	; 30
    3d52:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	7c 83       	std	Y+4, r23	; 0x04
    3d5c:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	9a 81       	ldd	r25, Y+2	; 0x02
    3d62:	8c 57       	subi	r24, 0x7C	; 124
    3d64:	9f 4f       	sbci	r25, 0xFF	; 255
    3d66:	2b 81       	ldd	r18, Y+3	; 0x03
    3d68:	3c 81       	ldd	r19, Y+4	; 0x04
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	31 83       	std	Z+1, r19	; 0x01
    3d6e:	20 83       	st	Z, r18
    TheSensorsMem.TdsOffset = Offset;
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	9a 81       	ldd	r25, Y+2	; 0x02
    3d74:	9c 01       	movw	r18, r24
    3d76:	2c 57       	subi	r18, 0x7C	; 124
    3d78:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN6Memory13TheSensorsMemE>
    3d7e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN6Memory13TheSensorsMemE+0x1>
    3d82:	04 96       	adiw	r24, 0x04	; 4
    3d84:	b9 01       	movw	r22, r18
    3d86:	69 d3       	rcall	.+1746   	; 0x445a <_ZN6EEWrapIiEaSERKi>
}
    3d88:	24 96       	adiw	r28, 0x04	; 4
    3d8a:	e2 e0       	ldi	r30, 0x02	; 2
    3d8c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003d90 <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    3d90:	ae e0       	ldi	r26, 0x0E	; 14
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	ee ec       	ldi	r30, 0xCE	; 206
    3d96:	fe e1       	ldi	r31, 0x1E	; 30
    3d98:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    3d9c:	9e 87       	std	Y+14, r25	; 0x0e
    3d9e:	8d 87       	std	Y+13, r24	; 0x0d
    //// change the analog out value:
    //analogWrite(9, outputValue);
    //double sensorVal2 = analogRead(_pin);//analogRead(1);


    TdsString = String(_tdsValue, 0).c_str();
    3da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da4:	8e 5b       	subi	r24, 0xBE	; 190
    3da6:	9f 4f       	sbci	r25, 0xFF	; 255
    3da8:	fc 01       	movw	r30, r24
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	a2 81       	ldd	r26, Z+2	; 0x02
    3db0:	b3 81       	ldd	r27, Z+3	; 0x03
    3db2:	fe 01       	movw	r30, r28
    3db4:	37 96       	adiw	r30, 0x07	; 7
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	ac 01       	movw	r20, r24
    3dba:	bd 01       	movw	r22, r26
    3dbc:	cf 01       	movw	r24, r30
    3dbe:	0e 94 b1 32 	call	0x6562	; 0x6562 <_ZN6StringC1Efh>
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	07 96       	adiw	r24, 0x07	; 7
    3dc6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    3dca:	9c 01       	movw	r18, r24
    3dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd0:	88 58       	subi	r24, 0x88	; 136
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	b9 01       	movw	r22, r18
    3dd6:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    3dda:	ce 01       	movw	r24, r28
    3ddc:	07 96       	adiw	r24, 0x07	; 7
    3dde:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    TdsAvgString = String(_tdsValueAverage, 0).c_str();
    3de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de6:	8a 5b       	subi	r24, 0xBA	; 186
    3de8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dea:	fc 01       	movw	r30, r24
    3dec:	80 81       	ld	r24, Z
    3dee:	91 81       	ldd	r25, Z+1	; 0x01
    3df0:	a2 81       	ldd	r26, Z+2	; 0x02
    3df2:	b3 81       	ldd	r27, Z+3	; 0x03
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	ac 01       	movw	r20, r24
    3df8:	bd 01       	movw	r22, r26
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	01 96       	adiw	r24, 0x01	; 1
    3dfe:	0e 94 b1 32 	call	0x6562	; 0x6562 <_ZN6StringC1Efh>
    3e02:	ce 01       	movw	r24, r28
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    3e0a:	9c 01       	movw	r18, r24
    3e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e10:	82 58       	subi	r24, 0x82	; 130
    3e12:	9f 4f       	sbci	r25, 0xFF	; 255
    3e14:	b9 01       	movw	r22, r18
    3e16:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	01 96       	adiw	r24, 0x01	; 1
    3e1e:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    return _tdsValue;
    3e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e26:	8e 5b       	subi	r24, 0xBE	; 190
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	80 81       	ld	r24, Z
    3e2e:	91 81       	ldd	r25, Z+1	; 0x01
    3e30:	a2 81       	ldd	r26, Z+2	; 0x02
    3e32:	b3 81       	ldd	r27, Z+3	; 0x03

}
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	2e 96       	adiw	r28, 0x0e	; 14
    3e3a:	e2 e0       	ldi	r30, 0x02	; 2
    3e3c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00003e40 <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    3e40:	aa e1       	ldi	r26, 0x1A	; 26
    3e42:	b0 e0       	ldi	r27, 0x00	; 0
    3e44:	e6 e2       	ldi	r30, 0x26	; 38
    3e46:	ff e1       	ldi	r31, 0x1F	; 31
    3e48:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    3e4c:	9a 8f       	std	Y+26, r25	; 0x1a
    3e4e:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    3e50:	89 8d       	ldd	r24, Y+25	; 0x19
    3e52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e54:	9d df       	rcall	.-198    	; 0x3d90 <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    3e56:	84 e1       	ldi	r24, 0x14	; 20
    3e58:	93 e0       	ldi	r25, 0x03	; 3
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	80 81       	ld	r24, Z
    3e5e:	88 23       	and	r24, r24
    3e60:	89 f4       	brne	.+34     	; 0x3e84 <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    3e62:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3e6e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3e72:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3e76:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3e7a:	84 e1       	ldi	r24, 0x14	; 20
    3e7c:	93 e0       	ldi	r25, 0x03	; 3
    3e7e:	21 e0       	ldi	r18, 0x01	; 1
    3e80:	fc 01       	movw	r30, r24
    3e82:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    3e84:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3e88:	9b 01       	movw	r18, r22
    3e8a:	ac 01       	movw	r20, r24
    3e8c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3e90:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3e94:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3e98:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3e9c:	28 1b       	sub	r18, r24
    3e9e:	39 0b       	sbc	r19, r25
    3ea0:	4a 0b       	sbc	r20, r26
    3ea2:	5b 0b       	sbc	r21, r27
    3ea4:	89 8d       	ldd	r24, Y+25	; 0x19
    3ea6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ea8:	80 5c       	subi	r24, 0xC0	; 192
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	fc 01       	movw	r30, r24
    3eae:	80 81       	ld	r24, Z
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	80 57       	subi	r24, 0x70	; 112
    3eb4:	9e 4f       	sbci	r25, 0xFE	; 254
    3eb6:	09 2e       	mov	r0, r25
    3eb8:	00 0c       	add	r0, r0
    3eba:	aa 0b       	sbc	r26, r26
    3ebc:	bb 0b       	sbc	r27, r27
    3ebe:	61 e0       	ldi	r22, 0x01	; 1
    3ec0:	82 17       	cp	r24, r18
    3ec2:	93 07       	cpc	r25, r19
    3ec4:	a4 07       	cpc	r26, r20
    3ec6:	b5 07       	cpc	r27, r21
    3ec8:	08 f0       	brcs	.+2      	; 0x3ecc <_ZN9TDSSensor13PrintTDSToLCDEv+0x8c>
    3eca:	60 e0       	ldi	r22, 0x00	; 0
    3ecc:	66 23       	and	r22, r22
    3ece:	09 f4       	brne	.+2      	; 0x3ed2 <_ZN9TDSSensor13PrintTDSToLCDEv+0x92>
    3ed0:	7f c0       	rjmp	.+254    	; 0x3fd0 <_ZN9TDSSensor13PrintTDSToLCDEv+0x190>
        if(_printToLCD) {
    3ed2:	89 8d       	ldd	r24, Y+25	; 0x19
    3ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ed6:	82 5b       	subi	r24, 0xB2	; 178
    3ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eda:	fc 01       	movw	r30, r24
    3edc:	80 81       	ld	r24, Z
    3ede:	88 23       	and	r24, r24
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <_ZN9TDSSensor13PrintTDSToLCDEv+0xa4>
    3ee2:	60 c0       	rjmp	.+192    	; 0x3fa4 <_ZN9TDSSensor13PrintTDSToLCDEv+0x164>
            String enabled = "";
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	0d 96       	adiw	r24, 0x0d	; 13
    3ee8:	6a e2       	ldi	r22, 0x2A	; 42
    3eea:	71 e0       	ldi	r23, 0x01	; 1
    3eec:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
            if(_enabled) {
    3ef0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ef2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ef4:	8f 5a       	subi	r24, 0xAF	; 175
    3ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef8:	fc 01       	movw	r30, r24
    3efa:	80 81       	ld	r24, Z
    3efc:	88 23       	and	r24, r24
    3efe:	31 f0       	breq	.+12     	; 0x3f0c <_ZN9TDSSensor13PrintTDSToLCDEv+0xcc>
                enabled = "<";
    3f00:	ce 01       	movw	r24, r28
    3f02:	0d 96       	adiw	r24, 0x0d	; 13
    3f04:	6b e2       	ldi	r22, 0x2B	; 43
    3f06:	71 e0       	ldi	r23, 0x01	; 1
    3f08:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3f0c:	89 8d       	ldd	r24, Y+25	; 0x19
    3f0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f10:	8c 01       	movw	r16, r24
    3f12:	08 58       	subi	r16, 0x88	; 136
    3f14:	1f 4f       	sbci	r17, 0xFF	; 255
    3f16:	89 8d       	ldd	r24, Y+25	; 0x19
    3f18:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f1a:	7c 01       	movw	r14, r24
    3f1c:	fe e7       	ldi	r31, 0x7E	; 126
    3f1e:	ef 0e       	add	r14, r31
    3f20:	f1 1c       	adc	r15, r1
    3f22:	ce 01       	movw	r24, r28
    3f24:	07 96       	adiw	r24, 0x07	; 7
    3f26:	6d e2       	ldi	r22, 0x2D	; 45
    3f28:	71 e0       	ldi	r23, 0x01	; 1
    3f2a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN15StringSumHelperC1EPKc>
    3f2e:	ce 01       	movw	r24, r28
    3f30:	07 96       	adiw	r24, 0x07	; 7
    3f32:	b7 01       	movw	r22, r14
    3f34:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    3f38:	63 e3       	ldi	r22, 0x33	; 51
    3f3a:	71 e0       	ldi	r23, 0x01	; 1
    3f3c:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZplRK15StringSumHelperPKc>
    3f40:	b8 01       	movw	r22, r16
    3f42:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    3f46:	9c 01       	movw	r18, r24
    3f48:	ce 01       	movw	r24, r28
    3f4a:	0d 96       	adiw	r24, 0x0d	; 13
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	c9 01       	movw	r24, r18
    3f50:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZplRK15StringSumHelperRK6String>
    3f54:	9c 01       	movw	r18, r24
    3f56:	ce 01       	movw	r24, r28
    3f58:	43 96       	adiw	r24, 0x13	; 19
    3f5a:	b9 01       	movw	r22, r18
    3f5c:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    3f60:	ce 01       	movw	r24, r28
    3f62:	07 96       	adiw	r24, 0x07	; 7
    3f64:	8e db       	rcall	.-2276   	; 0x3682 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    3f66:	ce 01       	movw	r24, r28
    3f68:	43 96       	adiw	r24, 0x13	; 19
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    3f74:	89 8d       	ldd	r24, Y+25	; 0x19
    3f76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f78:	8c 5a       	subi	r24, 0xAC	; 172
    3f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7c:	9e 01       	movw	r18, r28
    3f7e:	2f 5f       	subi	r18, 0xFF	; 255
    3f80:	3f 4f       	sbci	r19, 0xFF	; 255
    3f82:	a9 01       	movw	r20, r18
    3f84:	61 e0       	ldi	r22, 0x01	; 1
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	0e 94 80 10 	call	0x2100	; 0x2100 <_ZN7LCDBase9PrintLineEs6String>
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	01 96       	adiw	r24, 0x01	; 1
    3f90:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3f94:	ce 01       	movw	r24, r28
    3f96:	43 96       	adiw	r24, 0x13	; 19
    3f98:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	0d 96       	adiw	r24, 0x0d	; 13
    3fa0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    3fa4:	8d e0       	ldi	r24, 0x0D	; 13
    3fa6:	0e 94 87 31 	call	0x630e	; 0x630e <digitalRead>
    3faa:	98 2f       	mov	r25, r24
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	89 27       	eor	r24, r25
    3fb0:	68 2f       	mov	r22, r24
    3fb2:	8d e0       	ldi	r24, 0x0D	; 13
    3fb4:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
        printTime = millis();
    3fb8:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3fc4:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3fc8:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3fcc:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    3fd0:	6a 96       	adiw	r28, 0x1a	; 26
    3fd2:	e6 e0       	ldi	r30, 0x06	; 6
    3fd4:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

00003fd8 <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    3fd8:	a2 e0       	ldi	r26, 0x02	; 2
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	e2 ef       	ldi	r30, 0xF2	; 242
    3fde:	ff e1       	ldi	r31, 0x1F	; 31
    3fe0:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x14>
    3fe4:	9a 83       	std	Y+2, r25	; 0x02
    3fe6:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	9a 81       	ldd	r25, Y+2	; 0x02
    3fec:	8f 5a       	subi	r24, 0xAF	; 175
    3fee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	90 81       	ld	r25, Z
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	89 27       	eor	r24, r25
    3ff8:	88 23       	and	r24, r24
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <_ZN9TDSSensor12CalculateTDSEv+0x26>
        return;
    3ffc:	1b c1       	rjmp	.+566    	; 0x4234 <_ZN9TDSSensor12CalculateTDSEv+0x25c>
    }

    _tdsValue = getTDSValue();
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	9a 81       	ldd	r25, Y+2	; 0x02
    4002:	1c d1       	rcall	.+568    	; 0x423c <_ZN9TDSSensor11getTDSValueEv>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	29 81       	ldd	r18, Y+1	; 0x01
    400a:	3a 81       	ldd	r19, Y+2	; 0x02
    400c:	2e 5b       	subi	r18, 0xBE	; 190
    400e:	3f 4f       	sbci	r19, 0xFF	; 255
    4010:	f9 01       	movw	r30, r18
    4012:	80 83       	st	Z, r24
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	a2 83       	std	Z+2, r26	; 0x02
    4018:	b3 83       	std	Z+3, r27	; 0x03

    if(_numOfSamples <= 1) {
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	9a 81       	ldd	r25, Y+2	; 0x02
    401e:	8e 5a       	subi	r24, 0xAE	; 174
    4020:	9f 4f       	sbci	r25, 0xFF	; 255
    4022:	fc 01       	movw	r30, r24
    4024:	80 81       	ld	r24, Z
    4026:	91 81       	ldd	r25, Z+1	; 0x01
    4028:	02 97       	sbiw	r24, 0x02	; 2
    402a:	dc f4       	brge	.+54     	; 0x4062 <_ZN9TDSSensor12CalculateTDSEv+0x8a>
        _numOfSamples = 1;
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
    4030:	8e 5a       	subi	r24, 0xAE	; 174
    4032:	9f 4f       	sbci	r25, 0xFF	; 255
    4034:	21 e0       	ldi	r18, 0x01	; 1
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	fc 01       	movw	r30, r24
    403a:	31 83       	std	Z+1, r19	; 0x01
    403c:	20 83       	st	Z, r18
        _tdsTotal = _tdsValue;
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	8e 5b       	subi	r24, 0xBE	; 190
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	fc 01       	movw	r30, r24
    4048:	80 81       	ld	r24, Z
    404a:	91 81       	ldd	r25, Z+1	; 0x01
    404c:	a2 81       	ldd	r26, Z+2	; 0x02
    404e:	b3 81       	ldd	r27, Z+3	; 0x03
    4050:	29 81       	ldd	r18, Y+1	; 0x01
    4052:	3a 81       	ldd	r19, Y+2	; 0x02
    4054:	26 5b       	subi	r18, 0xB6	; 182
    4056:	3f 4f       	sbci	r19, 0xFF	; 255
    4058:	f9 01       	movw	r30, r18
    405a:	80 83       	st	Z, r24
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	a2 83       	std	Z+2, r26	; 0x02
    4060:	b3 83       	std	Z+3, r27	; 0x03
    }

    //_tdsTotal = getTDSValue();

    static unsigned long samplingTime = millis();
    4062:	8c e1       	ldi	r24, 0x1C	; 28
    4064:	93 e0       	ldi	r25, 0x03	; 3
    4066:	fc 01       	movw	r30, r24
    4068:	80 81       	ld	r24, Z
    406a:	88 23       	and	r24, r24
    406c:	89 f4       	brne	.+34     	; 0x4090 <_ZN9TDSSensor12CalculateTDSEv+0xb8>
    406e:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    407a:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    407e:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    4082:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    4086:	8c e1       	ldi	r24, 0x1C	; 28
    4088:	93 e0       	ldi	r25, 0x03	; 3
    408a:	21 e0       	ldi	r18, 0x01	; 1
    408c:	fc 01       	movw	r30, r24
    408e:	20 83       	st	Z, r18
    if(millis() - samplingTime > 60000) { //wait 1 min inbetween readings
    4090:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    4094:	9b 01       	movw	r18, r22
    4096:	ac 01       	movw	r20, r24
    4098:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    409c:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    40a0:	a0 91 32 03 	lds	r26, 0x0332	; 0x800332 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    40a4:	b0 91 33 03 	lds	r27, 0x0333	; 0x800333 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    40a8:	79 01       	movw	r14, r18
    40aa:	8a 01       	movw	r16, r20
    40ac:	e8 1a       	sub	r14, r24
    40ae:	f9 0a       	sbc	r15, r25
    40b0:	0a 0b       	sbc	r16, r26
    40b2:	1b 0b       	sbc	r17, r27
    40b4:	d8 01       	movw	r26, r16
    40b6:	c7 01       	movw	r24, r14
    40b8:	21 e0       	ldi	r18, 0x01	; 1
    40ba:	81 36       	cpi	r24, 0x61	; 97
    40bc:	9a 4e       	sbci	r25, 0xEA	; 234
    40be:	a1 05       	cpc	r26, r1
    40c0:	b1 05       	cpc	r27, r1
    40c2:	08 f4       	brcc	.+2      	; 0x40c6 <_ZN9TDSSensor12CalculateTDSEv+0xee>
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	22 23       	and	r18, r18
    40c8:	09 f4       	brne	.+2      	; 0x40cc <_ZN9TDSSensor12CalculateTDSEv+0xf4>
    40ca:	4c c0       	rjmp	.+152    	; 0x4164 <_ZN9TDSSensor12CalculateTDSEv+0x18c>

        _tdsValue = getTDSValue();
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	b5 d0       	rcall	.+362    	; 0x423c <_ZN9TDSSensor11getTDSValueEv>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	29 81       	ldd	r18, Y+1	; 0x01
    40d8:	3a 81       	ldd	r19, Y+2	; 0x02
    40da:	2e 5b       	subi	r18, 0xBE	; 190
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	f9 01       	movw	r30, r18
    40e0:	80 83       	st	Z, r24
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	a2 83       	std	Z+2, r26	; 0x02
    40e6:	b3 83       	std	Z+3, r27	; 0x03
        _tdsTotal += _tdsValue;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	86 5b       	subi	r24, 0xB6	; 182
    40ee:	9f 4f       	sbci	r25, 0xFF	; 255
    40f0:	fc 01       	movw	r30, r24
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	a2 81       	ldd	r26, Z+2	; 0x02
    40f8:	b3 81       	ldd	r27, Z+3	; 0x03
    40fa:	29 81       	ldd	r18, Y+1	; 0x01
    40fc:	3a 81       	ldd	r19, Y+2	; 0x02
    40fe:	2e 5b       	subi	r18, 0xBE	; 190
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	f9 01       	movw	r30, r18
    4104:	20 81       	ld	r18, Z
    4106:	31 81       	ldd	r19, Z+1	; 0x01
    4108:	42 81       	ldd	r20, Z+2	; 0x02
    410a:	53 81       	ldd	r21, Z+3	; 0x03
    410c:	bc 01       	movw	r22, r24
    410e:	cd 01       	movw	r24, r26
    4110:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	29 81       	ldd	r18, Y+1	; 0x01
    411a:	3a 81       	ldd	r19, Y+2	; 0x02
    411c:	26 5b       	subi	r18, 0xB6	; 182
    411e:	3f 4f       	sbci	r19, 0xFF	; 255
    4120:	f9 01       	movw	r30, r18
    4122:	80 83       	st	Z, r24
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	a2 83       	std	Z+2, r26	; 0x02
    4128:	b3 83       	std	Z+3, r27	; 0x03
        _numOfSamples++;
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
    412e:	8e 5a       	subi	r24, 0xAE	; 174
    4130:	9f 4f       	sbci	r25, 0xFF	; 255
    4132:	fc 01       	movw	r30, r24
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	9c 01       	movw	r18, r24
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	9a 81       	ldd	r25, Y+2	; 0x02
    4142:	8e 5a       	subi	r24, 0xAE	; 174
    4144:	9f 4f       	sbci	r25, 0xFF	; 255
    4146:	fc 01       	movw	r30, r24
    4148:	31 83       	std	Z+1, r19	; 0x01
    414a:	20 83       	st	Z, r18

        samplingTime = millis();
    414c:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    4158:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    415c:	a0 93 32 03 	sts	0x0332, r26	; 0x800332 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    4160:	b0 93 33 03 	sts	0x0333, r27	; 0x800333 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    }

    _tdsValueAverage = _tdsTotal / _numOfSamples;
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
    4168:	86 5b       	subi	r24, 0xB6	; 182
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	fc 01       	movw	r30, r24
    416e:	c0 80       	ld	r12, Z
    4170:	d1 80       	ldd	r13, Z+1	; 0x01
    4172:	e2 80       	ldd	r14, Z+2	; 0x02
    4174:	f3 80       	ldd	r15, Z+3	; 0x03
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	8e 5a       	subi	r24, 0xAE	; 174
    417c:	9f 4f       	sbci	r25, 0xFF	; 255
    417e:	fc 01       	movw	r30, r24
    4180:	80 81       	ld	r24, Z
    4182:	91 81       	ldd	r25, Z+1	; 0x01
    4184:	09 2e       	mov	r0, r25
    4186:	00 0c       	add	r0, r0
    4188:	aa 0b       	sbc	r26, r26
    418a:	bb 0b       	sbc	r27, r27
    418c:	bc 01       	movw	r22, r24
    418e:	cd 01       	movw	r24, r26
    4190:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	9c 01       	movw	r18, r24
    419a:	ad 01       	movw	r20, r26
    419c:	c7 01       	movw	r24, r14
    419e:	b6 01       	movw	r22, r12
    41a0:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	29 81       	ldd	r18, Y+1	; 0x01
    41aa:	3a 81       	ldd	r19, Y+2	; 0x02
    41ac:	2a 5b       	subi	r18, 0xBA	; 186
    41ae:	3f 4f       	sbci	r19, 0xFF	; 255
    41b0:	f9 01       	movw	r30, r18
    41b2:	80 83       	st	Z, r24
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	a2 83       	std	Z+2, r26	; 0x02
    41b8:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.println(_numOfSamples);
    //Serial.print(F("_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    //soften
    _tdsValueAverage = (_tdsValueAverage + _tdsValue) / 2;
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	8a 5b       	subi	r24, 0xBA	; 186
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	fc 01       	movw	r30, r24
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	a2 81       	ldd	r26, Z+2	; 0x02
    41ca:	b3 81       	ldd	r27, Z+3	; 0x03
    41cc:	29 81       	ldd	r18, Y+1	; 0x01
    41ce:	3a 81       	ldd	r19, Y+2	; 0x02
    41d0:	2e 5b       	subi	r18, 0xBE	; 190
    41d2:	3f 4f       	sbci	r19, 0xFF	; 255
    41d4:	f9 01       	movw	r30, r18
    41d6:	20 81       	ld	r18, Z
    41d8:	31 81       	ldd	r19, Z+1	; 0x01
    41da:	42 81       	ldd	r20, Z+2	; 0x02
    41dc:	53 81       	ldd	r21, Z+3	; 0x03
    41de:	bc 01       	movw	r22, r24
    41e0:	cd 01       	movw	r24, r26
    41e2:	0e 94 af 29 	call	0x535e	; 0x535e <__addsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	50 e4       	ldi	r21, 0x40	; 64
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 17 2a 	call	0x542e	; 0x542e <__divsf3>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	29 81       	ldd	r18, Y+1	; 0x01
    4200:	3a 81       	ldd	r19, Y+2	; 0x02
    4202:	2a 5b       	subi	r18, 0xBA	; 186
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	f9 01       	movw	r30, r18
    4208:	80 83       	st	Z, r24
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	a2 83       	std	Z+2, r26	; 0x02
    420e:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.print(F("sft_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    if(_numOfSamples > 10) {
    4210:	89 81       	ldd	r24, Y+1	; 0x01
    4212:	9a 81       	ldd	r25, Y+2	; 0x02
    4214:	8e 5a       	subi	r24, 0xAE	; 174
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	fc 01       	movw	r30, r24
    421a:	80 81       	ld	r24, Z
    421c:	91 81       	ldd	r25, Z+1	; 0x01
    421e:	0b 97       	sbiw	r24, 0x0b	; 11
    4220:	4c f0       	brlt	.+18     	; 0x4234 <_ZN9TDSSensor12CalculateTDSEv+0x25c>
        _numOfSamples = 1;
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	8e 5a       	subi	r24, 0xAE	; 174
    4228:	9f 4f       	sbci	r25, 0xFF	; 255
    422a:	21 e0       	ldi	r18, 0x01	; 1
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	fc 01       	movw	r30, r24
    4230:	31 83       	std	Z+1, r19	; 0x01
    4232:	20 83       	st	Z, r18
    }

}
    4234:	22 96       	adiw	r28, 0x02	; 2
    4236:	e8 e0       	ldi	r30, 0x08	; 8
    4238:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x14>

0000423c <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    423c:	a0 e1       	ldi	r26, 0x10	; 16
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	e4 e2       	ldi	r30, 0x24	; 36
    4242:	f1 e2       	ldi	r31, 0x21	; 33
    4244:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    4248:	98 8b       	std	Y+16, r25	; 0x10
    424a:	8f 87       	std	Y+15, r24	; 0x0f
    static unsigned long samplingTime = millis();
    424c:	84 e2       	ldi	r24, 0x24	; 36
    424e:	93 e0       	ldi	r25, 0x03	; 3
    4250:	fc 01       	movw	r30, r24
    4252:	80 81       	ld	r24, Z
    4254:	88 23       	and	r24, r24
    4256:	89 f4       	brne	.+34     	; 0x427a <_ZN9TDSSensor11getTDSValueEv+0x3e>
    4258:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4264:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    4268:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    426c:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    4270:	84 e2       	ldi	r24, 0x24	; 36
    4272:	93 e0       	ldi	r25, 0x03	; 3
    4274:	21 e0       	ldi	r18, 0x01	; 1
    4276:	fc 01       	movw	r30, r24
    4278:	20 83       	st	Z, r18
    if(millis() - samplingTime > 500) {//wait .5 sec between readings, according to spec
    427a:	0e 94 26 30 	call	0x604c	; 0x604c <millis>
    427e:	9b 01       	movw	r18, r22
    4280:	ac 01       	movw	r20, r24
    4282:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4286:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    428a:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    428e:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    4292:	79 01       	movw	r14, r18
    4294:	8a 01       	movw	r16, r20
    4296:	e8 1a       	sub	r14, r24
    4298:	f9 0a       	sbc	r15, r25
    429a:	0a 0b       	sbc	r16, r26
    429c:	1b 0b       	sbc	r17, r27
    429e:	d8 01       	movw	r26, r16
    42a0:	c7 01       	movw	r24, r14
    42a2:	21 e0       	ldi	r18, 0x01	; 1
    42a4:	85 3f       	cpi	r24, 0xF5	; 245
    42a6:	91 40       	sbci	r25, 0x01	; 1
    42a8:	a1 05       	cpc	r26, r1
    42aa:	b1 05       	cpc	r27, r1
    42ac:	08 f4       	brcc	.+2      	; 0x42b0 <_ZN9TDSSensor11getTDSValueEv+0x74>
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	22 23       	and	r18, r18
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <_ZN9TDSSensor11getTDSValueEv+0x7a>
    42b4:	75 c0       	rjmp	.+234    	; 0x43a0 <_ZN9TDSSensor11getTDSValueEv+0x164>
        int numOfSamples = 30;
    42b6:	8e e1       	ldi	r24, 0x1E	; 30
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
        _tdsAverage[_tdsArrayIndex++] = analogRead(_pin);
    42be:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c0:	98 89       	ldd	r25, Y+16	; 0x10
    42c2:	fc 01       	movw	r30, r24
    42c4:	06 ad       	ldd	r16, Z+62	; 0x3e
    42c6:	17 ad       	ldd	r17, Z+63	; 0x3f
    42c8:	98 01       	movw	r18, r16
    42ca:	2f 5f       	subi	r18, 0xFF	; 255
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d0:	98 89       	ldd	r25, Y+16	; 0x10
    42d2:	fc 01       	movw	r30, r24
    42d4:	37 af       	std	Z+63, r19	; 0x3f
    42d6:	26 af       	std	Z+62, r18	; 0x3e
    42d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    42da:	98 89       	ldd	r25, Y+16	; 0x10
    42dc:	fc 01       	movw	r30, r24
    42de:	80 81       	ld	r24, Z
    42e0:	91 81       	ldd	r25, Z+1	; 0x01
    42e2:	0e 94 d6 30 	call	0x61ac	; 0x61ac <analogRead>
    42e6:	ac 01       	movw	r20, r24
    42e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    42ea:	38 89       	ldd	r19, Y+16	; 0x10
    42ec:	c8 01       	movw	r24, r16
    42ee:	01 96       	adiw	r24, 0x01	; 1
    42f0:	88 0f       	add	r24, r24
    42f2:	99 1f       	adc	r25, r25
    42f4:	82 0f       	add	r24, r18
    42f6:	93 1f       	adc	r25, r19
    42f8:	fc 01       	movw	r30, r24
    42fa:	51 83       	std	Z+1, r21	; 0x01
    42fc:	40 83       	st	Z, r20
        if(_tdsArrayIndex == numOfSamples) {
    42fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4300:	98 89       	ldd	r25, Y+16	; 0x10
    4302:	fc 01       	movw	r30, r24
    4304:	26 ad       	ldd	r18, Z+62	; 0x3e
    4306:	37 ad       	ldd	r19, Z+63	; 0x3f
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	28 17       	cp	r18, r24
    430e:	39 07       	cpc	r19, r25
    4310:	29 f4       	brne	.+10     	; 0x431c <_ZN9TDSSensor11getTDSValueEv+0xe0>
            _tdsArrayIndex = 0;
    4312:	8f 85       	ldd	r24, Y+15	; 0x0f
    4314:	98 89       	ldd	r25, Y+16	; 0x10
    4316:	fc 01       	movw	r30, r24
    4318:	17 ae       	std	Z+63, r1	; 0x3f
    431a:	16 ae       	std	Z+62, r1	; 0x3e
        }
        double tdsAvg = MathExt::CalculateAverage(_tdsAverage, numOfSamples);
    431c:	8f 85       	ldd	r24, Y+15	; 0x0f
    431e:	98 89       	ldd	r25, Y+16	; 0x10
    4320:	02 96       	adiw	r24, 0x02	; 2
    4322:	29 81       	ldd	r18, Y+1	; 0x01
    4324:	3a 81       	ldd	r19, Y+2	; 0x02
    4326:	b9 01       	movw	r22, r18
    4328:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN7MathExt16CalculateAverageEPii>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	8b 83       	std	Y+3, r24	; 0x03
    4332:	9c 83       	std	Y+4, r25	; 0x04
    4334:	ad 83       	std	Y+5, r26	; 0x05
    4336:	be 83       	std	Y+6, r27	; 0x06
        double voltage = tdsAvg * (5.0 / 1024);
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 ea       	ldi	r20, 0xA0	; 160
    433e:	5b e3       	ldi	r21, 0x3B	; 59
    4340:	6b 81       	ldd	r22, Y+3	; 0x03
    4342:	7c 81       	ldd	r23, Y+4	; 0x04
    4344:	8d 81       	ldd	r24, Y+5	; 0x05
    4346:	9e 81       	ldd	r25, Y+6	; 0x06
    4348:	0e 94 66 2b 	call	0x56cc	; 0x56cc <__mulsf3>
    434c:	dc 01       	movw	r26, r24
    434e:	cb 01       	movw	r24, r22
    4350:	8f 83       	std	Y+7, r24	; 0x07
    4352:	98 87       	std	Y+8, r25	; 0x08
    4354:	a9 87       	std	Y+9, r26	; 0x09
    4356:	ba 87       	std	Y+10, r27	; 0x0a
        double tankTDS = voltage * Offset;
    4358:	8f 85       	ldd	r24, Y+15	; 0x0f
    435a:	98 89       	ldd	r25, Y+16	; 0x10
    435c:	8c 57       	subi	r24, 0x7C	; 124
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	fc 01       	movw	r30, r24
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	09 2e       	mov	r0, r25
    4368:	00 0c       	add	r0, r0
    436a:	aa 0b       	sbc	r26, r26
    436c:	bb 0b       	sbc	r27, r27
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__floatsisf>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	2f 81       	ldd	r18, Y+7	; 0x07
    437c:	38 85       	ldd	r19, Y+8	; 0x08
    437e:	49 85       	ldd	r20, Y+9	; 0x09
    4380:	5a 85       	ldd	r21, Y+10	; 0x0a
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	0e 94 66 2b 	call	0x56cc	; 0x56cc <__mulsf3>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	8b 87       	std	Y+11, r24	; 0x0b
    4390:	9c 87       	std	Y+12, r25	; 0x0c
    4392:	ad 87       	std	Y+13, r26	; 0x0d
    4394:	be 87       	std	Y+14, r27	; 0x0e

        return tankTDS;
    4396:	8b 85       	ldd	r24, Y+11	; 0x0b
    4398:	9c 85       	ldd	r25, Y+12	; 0x0c
    439a:	ad 85       	ldd	r26, Y+13	; 0x0d
    439c:	be 85       	ldd	r27, Y+14	; 0x0e
    439e:	09 c0       	rjmp	.+18     	; 0x43b2 <_ZN9TDSSensor11getTDSValueEv+0x176>
        samplingTime = millis();
    }
    return _tdsValue;
    43a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43a2:	98 89       	ldd	r25, Y+16	; 0x10
    43a4:	8e 5b       	subi	r24, 0xBE	; 190
    43a6:	9f 4f       	sbci	r25, 0xFF	; 255
    43a8:	fc 01       	movw	r30, r24
    43aa:	80 81       	ld	r24, Z
    43ac:	91 81       	ldd	r25, Z+1	; 0x01
    43ae:	a2 81       	ldd	r26, Z+2	; 0x02
    43b0:	b3 81       	ldd	r27, Z+3	; 0x03

}
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	60 96       	adiw	r28, 0x10	; 16
    43b8:	e6 e0       	ldi	r30, 0x06	; 6
    43ba:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

000043be <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    43be:	a2 e0       	ldi	r26, 0x02	; 2
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	e5 ee       	ldi	r30, 0xE5	; 229
    43c4:	f1 e2       	ldi	r31, 0x21	; 33
    43c6:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	8f 5a       	subi	r24, 0xAF	; 175
    43d4:	9f 4f       	sbci	r25, 0xFF	; 255
    43d6:	21 e0       	ldi	r18, 0x01	; 1
    43d8:	fc 01       	movw	r30, r24
    43da:	20 83       	st	Z, r18
    digitalWrite(_relayPin, HIGH);
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	9a 81       	ldd	r25, Y+2	; 0x02
    43e0:	81 5b       	subi	r24, 0xB1	; 177
    43e2:	9f 4f       	sbci	r25, 0xFF	; 255
    43e4:	fc 01       	movw	r30, r24
    43e6:	80 81       	ld	r24, Z
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	61 e0       	ldi	r22, 0x01	; 1
    43ec:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
}
    43f0:	22 96       	adiw	r28, 0x02	; 2
    43f2:	e2 e0       	ldi	r30, 0x02	; 2
    43f4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000043f8 <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    43f8:	a2 e0       	ldi	r26, 0x02	; 2
    43fa:	b0 e0       	ldi	r27, 0x00	; 0
    43fc:	e2 e0       	ldi	r30, 0x02	; 2
    43fe:	f2 e2       	ldi	r31, 0x22	; 34
    4400:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	8f 5a       	subi	r24, 0xAF	; 175
    440e:	9f 4f       	sbci	r25, 0xFF	; 255
    4410:	fc 01       	movw	r30, r24
    4412:	10 82       	st	Z, r1
    digitalWrite(_relayPin, LOW);
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	9a 81       	ldd	r25, Y+2	; 0x02
    4418:	81 5b       	subi	r24, 0xB1	; 177
    441a:	9f 4f       	sbci	r25, 0xFF	; 255
    441c:	fc 01       	movw	r30, r24
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	0e 94 58 31 	call	0x62b0	; 0x62b0 <digitalWrite>
    delay(1000);
    4428:	68 ee       	ldi	r22, 0xE8	; 232
    442a:	73 e0       	ldi	r23, 0x03	; 3
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 57 30 	call	0x60ae	; 0x60ae <delay>

}
    4434:	22 96       	adiw	r28, 0x02	; 2
    4436:	e2 e0       	ldi	r30, 0x02	; 2
    4438:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000443c <_ZN6EEWrapIiEcvKiEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    443c:	a2 e0       	ldi	r26, 0x02	; 2
    443e:	b0 e0       	ldi	r27, 0x00	; 0
    4440:	e4 e2       	ldi	r30, 0x24	; 36
    4442:	f2 e2       	ldi	r31, 0x22	; 34
    4444:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4448:	9a 83       	std	Y+2, r25	; 0x02
    444a:	89 83       	std	Y+1, r24	; 0x01
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	9a 81       	ldd	r25, Y+2	; 0x02
    4450:	18 d0       	rcall	.+48     	; 0x4482 <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    4452:	22 96       	adiw	r28, 0x02	; 2
    4454:	e2 e0       	ldi	r30, 0x02	; 2
    4456:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000445a <_ZN6EEWrapIiEaSERKi>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    445a:	a4 e0       	ldi	r26, 0x04	; 4
    445c:	b0 e0       	ldi	r27, 0x00	; 0
    445e:	e3 e3       	ldi	r30, 0x33	; 51
    4460:	f2 e2       	ldi	r31, 0x22	; 34
    4462:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4466:	9a 83       	std	Y+2, r25	; 0x02
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	7c 83       	std	Y+4, r23	; 0x04
    446c:	6b 83       	std	Y+3, r22	; 0x03
    446e:	2b 81       	ldd	r18, Y+3	; 0x03
    4470:	3c 81       	ldd	r19, Y+4	; 0x04
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	b9 01       	movw	r22, r18
    4478:	21 d0       	rcall	.+66     	; 0x44bc <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    447a:	24 96       	adiw	r28, 0x04	; 4
    447c:	e2 e0       	ldi	r30, 0x02	; 2
    447e:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004482 <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    4482:	a4 e0       	ldi	r26, 0x04	; 4
    4484:	b0 e0       	ldi	r27, 0x00	; 0
    4486:	e7 e4       	ldi	r30, 0x47	; 71
    4488:	f2 e2       	ldi	r31, 0x22	; 34
    448a:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    448e:	9c 83       	std	Y+4, r25	; 0x04
    4490:	8b 83       	std	Y+3, r24	; 0x03
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    4492:	8b 81       	ldd	r24, Y+3	; 0x03
    4494:	9c 81       	ldd	r25, Y+4	; 0x04
    4496:	31 d0       	rcall	.+98     	; 0x44fa <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    4498:	bc 01       	movw	r22, r24
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9e 01       	movw	r18, r28
    44a0:	2f 5f       	subi	r18, 0xFF	; 255
    44a2:	3f 4f       	sbci	r19, 0xFF	; 255
    44a4:	82 0f       	add	r24, r18
    44a6:	93 1f       	adc	r25, r19
    44a8:	42 e0       	ldi	r20, 0x02	; 2
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    44b0:	89 81       	ldd	r24, Y+1	; 0x01
    44b2:	9a 81       	ldd	r25, Y+2	; 0x02
        }
    44b4:	24 96       	adiw	r28, 0x04	; 4
    44b6:	e2 e0       	ldi	r30, 0x02	; 2
    44b8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000044bc <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:

        D &EEWrite( const T& v ){
    44bc:	a4 e0       	ldi	r26, 0x04	; 4
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	e4 e6       	ldi	r30, 0x64	; 100
    44c2:	f2 e2       	ldi	r31, 0x22	; 34
    44c4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    44c8:	9a 83       	std	Y+2, r25	; 0x02
    44ca:	89 83       	std	Y+1, r24	; 0x01
    44cc:	7c 83       	std	Y+4, r23	; 0x04
    44ce:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	12 d0       	rcall	.+36     	; 0x44fa <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    44d6:	bc 01       	movw	r22, r24
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	2b 81       	ldd	r18, Y+3	; 0x03
    44de:	3c 81       	ldd	r19, Y+4	; 0x04
    44e0:	82 0f       	add	r24, r18
    44e2:	93 1f       	adc	r25, r19
    44e4:	42 e0       	ldi	r20, 0x02	; 2
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	9a 81       	ldd	r25, Y+2	; 0x02
    44f0:	04 d0       	rcall	.+8      	; 0x44fa <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    44f2:	24 96       	adiw	r28, 0x04	; 4
    44f4:	e2 e0       	ldi	r30, 0x02	; 2
    44f6:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000044fa <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:
        protected: STATIC_ACCESS
    44fa:	a2 e0       	ldi	r26, 0x02	; 2
    44fc:	b0 e0       	ldi	r27, 0x00	; 0
    44fe:	e3 e8       	ldi	r30, 0x83	; 131
    4500:	f2 e2       	ldi	r31, 0x22	; 34
    4502:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4506:	9a 83       	std	Y+2, r25	; 0x02
    4508:	89 83       	std	Y+1, r24	; 0x01
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	9a 81       	ldd	r25, Y+2	; 0x02
    450e:	22 96       	adiw	r28, 0x02	; 2
    4510:	e2 e0       	ldi	r30, 0x02	; 2
    4512:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004516 <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4516:	a2 e0       	ldi	r26, 0x02	; 2
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	e1 e9       	ldi	r30, 0x91	; 145
    451c:	f2 e2       	ldi	r31, 0x22	; 34
    451e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4522:	9a 83       	std	Y+2, r25	; 0x02
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	89 81       	ldd	r24, Y+1	; 0x01
    4528:	9a 81       	ldd	r25, Y+2	; 0x02
    452a:	fc 01       	movw	r30, r24
    452c:	84 81       	ldd	r24, Z+4	; 0x04
    452e:	95 81       	ldd	r25, Z+5	; 0x05
    4530:	22 96       	adiw	r28, 0x02	; 2
    4532:	e2 e0       	ldi	r30, 0x02	; 2
    4534:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004538 <_ZN6StringpLEPKc>:
    4538:	a4 e0       	ldi	r26, 0x04	; 4
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e2 ea       	ldi	r30, 0xA2	; 162
    453e:	f2 e2       	ldi	r31, 0x22	; 34
    4540:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4544:	9a 83       	std	Y+2, r25	; 0x02
    4546:	89 83       	std	Y+1, r24	; 0x01
    4548:	7c 83       	std	Y+4, r23	; 0x04
    454a:	6b 83       	std	Y+3, r22	; 0x03
    454c:	2b 81       	ldd	r18, Y+3	; 0x03
    454e:	3c 81       	ldd	r19, Y+4	; 0x04
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	9a 81       	ldd	r25, Y+2	; 0x02
    4554:	b9 01       	movw	r22, r18
    4556:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZN6String6concatEPKc>
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	9a 81       	ldd	r25, Y+2	; 0x02
    455e:	24 96       	adiw	r28, 0x04	; 4
    4560:	e2 e0       	ldi	r30, 0x02	; 2
    4562:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004566 <_ZNK6StringeqEPKc>:
    4566:	a4 e0       	ldi	r26, 0x04	; 4
    4568:	b0 e0       	ldi	r27, 0x00	; 0
    456a:	e9 eb       	ldi	r30, 0xB9	; 185
    456c:	f2 e2       	ldi	r31, 0x22	; 34
    456e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
    4576:	7c 83       	std	Y+4, r23	; 0x04
    4578:	6b 83       	std	Y+3, r22	; 0x03
    457a:	2b 81       	ldd	r18, Y+3	; 0x03
    457c:	3c 81       	ldd	r19, Y+4	; 0x04
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	9a 81       	ldd	r25, Y+2	; 0x02
    4582:	b9 01       	movw	r22, r18
    4584:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZNK6String6equalsEPKc>
    4588:	24 96       	adiw	r28, 0x04	; 4
    458a:	e2 e0       	ldi	r30, 0x02	; 2
    458c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004590 <_ZN15StringSumHelperC1ERK6String>:
    4590:	a4 e0       	ldi	r26, 0x04	; 4
    4592:	b0 e0       	ldi	r27, 0x00	; 0
    4594:	ee ec       	ldi	r30, 0xCE	; 206
    4596:	f2 e2       	ldi	r31, 0x22	; 34
    4598:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    459c:	9a 83       	std	Y+2, r25	; 0x02
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	7c 83       	std	Y+4, r23	; 0x04
    45a2:	6b 83       	std	Y+3, r22	; 0x03
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	9a 81       	ldd	r25, Y+2	; 0x02
    45a8:	2b 81       	ldd	r18, Y+3	; 0x03
    45aa:	3c 81       	ldd	r19, Y+4	; 0x04
    45ac:	b9 01       	movw	r22, r18
    45ae:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    45b2:	24 96       	adiw	r28, 0x04	; 4
    45b4:	e2 e0       	ldi	r30, 0x02	; 2
    45b6:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000045ba <_ZN15WaterSensorWire5SetupEv>:
    45ba:	a0 e0       	ldi	r26, 0x00	; 0
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	e3 ee       	ldi	r30, 0xE3	; 227
    45c0:	f2 e2       	ldi	r31, 0x22	; 34
    45c2:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    45c6:	8a ef       	ldi	r24, 0xFA	; 250
    45c8:	93 e0       	ldi	r25, 0x03	; 3
    45ca:	bc 01       	movw	r22, r24
    45cc:	86 e8       	ldi	r24, 0x86	; 134
    45ce:	95 e0       	ldi	r25, 0x05	; 5
    45d0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    45d4:	4a e0       	ldi	r20, 0x0A	; 10
    45d6:	50 e0       	ldi	r21, 0x00	; 0
    45d8:	68 e0       	ldi	r22, 0x08	; 8
    45da:	86 e8       	ldi	r24, 0x86	; 134
    45dc:	95 e0       	ldi	r25, 0x05	; 5
    45de:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZN5Print7printlnEhi>
    45e2:	68 e0       	ldi	r22, 0x08	; 8
    45e4:	81 e9       	ldi	r24, 0x91	; 145
    45e6:	92 e0       	ldi	r25, 0x02	; 2
    45e8:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN7TwoWire5beginEh>
    45ec:	64 e0       	ldi	r22, 0x04	; 4
    45ee:	75 e2       	ldi	r23, 0x25	; 37
    45f0:	81 e9       	ldi	r24, 0x91	; 145
    45f2:	92 e0       	ldi	r25, 0x02	; 2
    45f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN7TwoWire9onRequestEPFvvE>
    45f8:	6a e0       	ldi	r22, 0x0A	; 10
    45fa:	74 e2       	ldi	r23, 0x24	; 36
    45fc:	81 e9       	ldi	r24, 0x91	; 145
    45fe:	92 e0       	ldi	r25, 0x02	; 2
    4600:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN7TwoWire9onReceiveEPFviE>
    4604:	e2 e0       	ldi	r30, 0x02	; 2
    4606:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000460a <_ZN15WaterSensorWire4LoopEv>:
    460a:	a4 e3       	ldi	r26, 0x34	; 52
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	eb e0       	ldi	r30, 0x0B	; 11
    4610:	f3 e2       	ldi	r31, 0x23	; 35
    4612:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4616:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    461a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    461e:	8f 57       	subi	r24, 0x7F	; 127
    4620:	9f 4f       	sbci	r25, 0xFF	; 255
    4622:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    4626:	bc 01       	movw	r22, r24
    4628:	86 e5       	ldi	r24, 0x56	; 86
    462a:	93 e0       	ldi	r25, 0x03	; 3
    462c:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    4630:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    4634:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    4638:	89 57       	subi	r24, 0x79	; 121
    463a:	9f 4f       	sbci	r25, 0xFF	; 255
    463c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    4640:	bc 01       	movw	r22, r24
    4642:	8c e5       	ldi	r24, 0x5C	; 92
    4644:	93 e0       	ldi	r25, 0x03	; 3
    4646:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    464a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    464e:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    4652:	88 58       	subi	r24, 0x88	; 136
    4654:	9f 4f       	sbci	r25, 0xFF	; 255
    4656:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    465a:	bc 01       	movw	r22, r24
    465c:	82 e6       	ldi	r24, 0x62	; 98
    465e:	93 e0       	ldi	r25, 0x03	; 3
    4660:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    4664:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    4668:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    466c:	82 58       	subi	r24, 0x82	; 130
    466e:	9f 4f       	sbci	r25, 0xFF	; 255
    4670:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    4674:	bc 01       	movw	r22, r24
    4676:	88 e6       	ldi	r24, 0x68	; 104
    4678:	93 e0       	ldi	r25, 0x03	; 3
    467a:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    467e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    4682:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    4686:	83 57       	subi	r24, 0x73	; 115
    4688:	9f 4f       	sbci	r25, 0xFF	; 255
    468a:	fc 01       	movw	r30, r24
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	a2 81       	ldd	r26, Z+2	; 0x02
    4692:	b3 81       	ldd	r27, Z+3	; 0x03
    4694:	fe 01       	movw	r30, r28
    4696:	b7 96       	adiw	r30, 0x27	; 39
    4698:	22 e0       	ldi	r18, 0x02	; 2
    469a:	ac 01       	movw	r20, r24
    469c:	bd 01       	movw	r22, r26
    469e:	cf 01       	movw	r24, r30
    46a0:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6StringC1Edh>
    46a4:	ce 01       	movw	r24, r28
    46a6:	87 96       	adiw	r24, 0x27	; 39
    46a8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    46ac:	bc 01       	movw	r22, r24
    46ae:	80 e8       	ldi	r24, 0x80	; 128
    46b0:	93 e0       	ldi	r25, 0x03	; 3
    46b2:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    46b6:	ce 01       	movw	r24, r28
    46b8:	87 96       	adiw	r24, 0x27	; 39
    46ba:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    46be:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    46c2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    46c6:	8c 57       	subi	r24, 0x7C	; 124
    46c8:	9f 4f       	sbci	r25, 0xFF	; 255
    46ca:	fc 01       	movw	r30, r24
    46cc:	20 81       	ld	r18, Z
    46ce:	31 81       	ldd	r19, Z+1	; 0x01
    46d0:	ce 01       	movw	r24, r28
    46d2:	81 96       	adiw	r24, 0x21	; 33
    46d4:	4a e0       	ldi	r20, 0x0A	; 10
    46d6:	b9 01       	movw	r22, r18
    46d8:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <_ZN6StringC1Eih>
    46dc:	ce 01       	movw	r24, r28
    46de:	81 96       	adiw	r24, 0x21	; 33
    46e0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZNK6String5c_strEv>
    46e4:	bc 01       	movw	r22, r24
    46e6:	86 e8       	ldi	r24, 0x86	; 134
    46e8:	93 e0       	ldi	r25, 0x03	; 3
    46ea:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    46ee:	ce 01       	movw	r24, r28
    46f0:	81 96       	adiw	r24, 0x21	; 33
    46f2:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    46f6:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <_ZN7Globals10ReadingTDSE>
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	89 27       	eor	r24, r25
    46fe:	88 23       	and	r24, r24
    4700:	39 f0       	breq	.+14     	; 0x4710 <_ZN15WaterSensorWire4LoopEv+0x106>
    4702:	66 e3       	ldi	r22, 0x36	; 54
    4704:	71 e0       	ldi	r23, 0x01	; 1
    4706:	8a e7       	ldi	r24, 0x7A	; 122
    4708:	93 e0       	ldi	r25, 0x03	; 3
    470a:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    470e:	06 c0       	rjmp	.+12     	; 0x471c <_ZN15WaterSensorWire4LoopEv+0x112>
    4710:	69 e3       	ldi	r22, 0x39	; 57
    4712:	71 e0       	ldi	r23, 0x01	; 1
    4714:	8a e7       	ldi	r24, 0x7A	; 122
    4716:	93 e0       	ldi	r25, 0x03	; 3
    4718:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    471c:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZN7Globals18SensorReadDurationE>
    4720:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <_ZN7Globals18SensorReadDurationE+0x1>
    4724:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <_ZN7Globals18SensorReadDurationE+0x2>
    4728:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <_ZN7Globals18SensorReadDurationE+0x3>
    472c:	28 ee       	ldi	r18, 0xE8	; 232
    472e:	33 e0       	ldi	r19, 0x03	; 3
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	bc 01       	movw	r22, r24
    4736:	cd 01       	movw	r24, r26
    4738:	0e 94 b6 34 	call	0x696c	; 0x696c <__divmodsi4>
    473c:	da 01       	movw	r26, r20
    473e:	c9 01       	movw	r24, r18
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	ab 83       	std	Y+3, r26	; 0x03
    4746:	bc 83       	std	Y+4, r27	; 0x04
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	9a 81       	ldd	r25, Y+2	; 0x02
    474c:	ab 81       	ldd	r26, Y+3	; 0x03
    474e:	bc 81       	ldd	r27, Y+4	; 0x04
    4750:	fe 01       	movw	r30, r28
    4752:	75 96       	adiw	r30, 0x15	; 21
    4754:	2a e0       	ldi	r18, 0x0A	; 10
    4756:	ac 01       	movw	r20, r24
    4758:	bd 01       	movw	r22, r26
    475a:	cf 01       	movw	r24, r30
    475c:	0e 94 86 32 	call	0x650c	; 0x650c <_ZN6StringC1Elh>
    4760:	9e 01       	movw	r18, r28
    4762:	2b 5e       	subi	r18, 0xEB	; 235
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	ce 01       	movw	r24, r28
    4768:	4b 96       	adiw	r24, 0x1b	; 27
    476a:	b9 01       	movw	r22, r18
    476c:	11 df       	rcall	.-478    	; 0x4590 <_ZN15StringSumHelperC1ERK6String>
    476e:	ce 01       	movw	r24, r28
    4770:	4b 96       	adiw	r24, 0x1b	; 27
    4772:	6d e3       	ldi	r22, 0x3D	; 61
    4774:	71 e0       	ldi	r23, 0x01	; 1
    4776:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZplRK15StringSumHelperPKc>
    477a:	bc 01       	movw	r22, r24
    477c:	84 e7       	ldi	r24, 0x74	; 116
    477e:	93 e0       	ldi	r25, 0x03	; 3
    4780:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4784:	ce 01       	movw	r24, r28
    4786:	4b 96       	adiw	r24, 0x1b	; 27
    4788:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN15StringSumHelperD1Ev>
    478c:	ce 01       	movw	r24, r28
    478e:	45 96       	adiw	r24, 0x15	; 21
    4790:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4794:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    4798:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    479c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    47a0:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    47a4:	28 ee       	ldi	r18, 0xE8	; 232
    47a6:	33 e0       	ldi	r19, 0x03	; 3
    47a8:	40 e0       	ldi	r20, 0x00	; 0
    47aa:	50 e0       	ldi	r21, 0x00	; 0
    47ac:	bc 01       	movw	r22, r24
    47ae:	cd 01       	movw	r24, r26
    47b0:	0e 94 b6 34 	call	0x696c	; 0x696c <__divmodsi4>
    47b4:	da 01       	movw	r26, r20
    47b6:	c9 01       	movw	r24, r18
    47b8:	8d 83       	std	Y+5, r24	; 0x05
    47ba:	9e 83       	std	Y+6, r25	; 0x06
    47bc:	af 83       	std	Y+7, r26	; 0x07
    47be:	b8 87       	std	Y+8, r27	; 0x08
    47c0:	8d 81       	ldd	r24, Y+5	; 0x05
    47c2:	9e 81       	ldd	r25, Y+6	; 0x06
    47c4:	af 81       	ldd	r26, Y+7	; 0x07
    47c6:	b8 85       	ldd	r27, Y+8	; 0x08
    47c8:	fe 01       	movw	r30, r28
    47ca:	39 96       	adiw	r30, 0x09	; 9
    47cc:	2a e0       	ldi	r18, 0x0A	; 10
    47ce:	ac 01       	movw	r20, r24
    47d0:	bd 01       	movw	r22, r26
    47d2:	cf 01       	movw	r24, r30
    47d4:	0e 94 86 32 	call	0x650c	; 0x650c <_ZN6StringC1Elh>
    47d8:	9e 01       	movw	r18, r28
    47da:	27 5f       	subi	r18, 0xF7	; 247
    47dc:	3f 4f       	sbci	r19, 0xFF	; 255
    47de:	ce 01       	movw	r24, r28
    47e0:	0f 96       	adiw	r24, 0x0f	; 15
    47e2:	b9 01       	movw	r22, r18
    47e4:	d5 de       	rcall	.-598    	; 0x4590 <_ZN15StringSumHelperC1ERK6String>
    47e6:	ce 01       	movw	r24, r28
    47e8:	0f 96       	adiw	r24, 0x0f	; 15
    47ea:	6d e3       	ldi	r22, 0x3D	; 61
    47ec:	71 e0       	ldi	r23, 0x01	; 1
    47ee:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <_ZplRK15StringSumHelperPKc>
    47f2:	bc 01       	movw	r22, r24
    47f4:	8e e6       	ldi	r24, 0x6E	; 110
    47f6:	93 e0       	ldi	r25, 0x03	; 3
    47f8:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    47fc:	ce 01       	movw	r24, r28
    47fe:	0f 96       	adiw	r24, 0x0f	; 15
    4800:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN15StringSumHelperD1Ev>
    4804:	ce 01       	movw	r24, r28
    4806:	09 96       	adiw	r24, 0x09	; 9
    4808:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    480c:	e4 96       	adiw	r28, 0x34	; 52
    480e:	e2 e0       	ldi	r30, 0x02	; 2
    4810:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004814 <_ZN15WaterSensorWire7ReceiveEi>:
    4814:	a7 e2       	ldi	r26, 0x27	; 39
    4816:	b0 e0       	ldi	r27, 0x00	; 0
    4818:	e0 e1       	ldi	r30, 0x10	; 16
    481a:	f4 e2       	ldi	r31, 0x24	; 36
    481c:	0c 94 f1 34 	jmp	0x69e2	; 0x69e2 <__prologue_saves__+0x1e>
    4820:	9f a3       	std	Y+39, r25	; 0x27
    4822:	8e a3       	std	Y+38, r24	; 0x26
    4824:	6f e3       	ldi	r22, 0x3F	; 63
    4826:	71 e0       	ldi	r23, 0x01	; 1
    4828:	88 e3       	ldi	r24, 0x38	; 56
    482a:	93 e0       	ldi	r25, 0x03	; 3
    482c:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    4830:	6f e3       	ldi	r22, 0x3F	; 63
    4832:	71 e0       	ldi	r23, 0x01	; 1
    4834:	84 e4       	ldi	r24, 0x44	; 68
    4836:	93 e0       	ldi	r25, 0x03	; 3
    4838:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    483c:	6f e3       	ldi	r22, 0x3F	; 63
    483e:	71 e0       	ldi	r23, 0x01	; 1
    4840:	8a e4       	ldi	r24, 0x4A	; 74
    4842:	93 e0       	ldi	r25, 0x03	; 3
    4844:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    4848:	8e a1       	ldd	r24, Y+38	; 0x26
    484a:	9f a1       	ldd	r25, Y+39	; 0x27
    484c:	44 97       	sbiw	r24, 0x14	; 20
    484e:	09 f0       	breq	.+2      	; 0x4852 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    4850:	c7 c0       	rjmp	.+398    	; 0x49e0 <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    4852:	0a c0       	rjmp	.+20     	; 0x4868 <_ZN15WaterSensorWire7ReceiveEi+0x54>
    4854:	81 e9       	ldi	r24, 0x91	; 145
    4856:	92 e0       	ldi	r25, 0x02	; 2
    4858:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7TwoWire4readEv>
    485c:	89 83       	std	Y+1, r24	; 0x01
    485e:	69 81       	ldd	r22, Y+1	; 0x01
    4860:	88 e3       	ldi	r24, 0x38	; 56
    4862:	93 e0       	ldi	r25, 0x03	; 3
    4864:	0e 94 47 33 	call	0x668e	; 0x668e <_ZN6String6concatEc>
    4868:	81 e9       	ldi	r24, 0x91	; 145
    486a:	92 e0       	ldi	r25, 0x02	; 2
    486c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN7TwoWire9availableEv>
    4870:	21 e0       	ldi	r18, 0x01	; 1
    4872:	18 16       	cp	r1, r24
    4874:	19 06       	cpc	r1, r25
    4876:	0c f0       	brlt	.+2      	; 0x487a <_ZN15WaterSensorWire7ReceiveEi+0x66>
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	22 23       	and	r18, r18
    487c:	59 f7       	brne	.-42     	; 0x4854 <_ZN15WaterSensorWire7ReceiveEi+0x40>
    487e:	88 e3       	ldi	r24, 0x38	; 56
    4880:	93 e0       	ldi	r25, 0x03	; 3
    4882:	0e 94 28 34 	call	0x6850	; 0x6850 <_ZN6String4trimEv>
    4886:	ce 01       	movw	r24, r28
    4888:	44 96       	adiw	r24, 0x14	; 20
    488a:	60 e4       	ldi	r22, 0x40	; 64
    488c:	71 e0       	ldi	r23, 0x01	; 1
    488e:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    4892:	ce 01       	movw	r24, r28
    4894:	44 96       	adiw	r24, 0x14	; 20
    4896:	bc 01       	movw	r22, r24
    4898:	88 e3       	ldi	r24, 0x38	; 56
    489a:	93 e0       	ldi	r25, 0x03	; 3
    489c:	0e 94 c4 33 	call	0x6788	; 0x6788 <_ZNK6String10startsWithERKS_>
    48a0:	11 e0       	ldi	r17, 0x01	; 1
    48a2:	88 23       	and	r24, r24
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <_ZN15WaterSensorWire7ReceiveEi+0x94>
    48a6:	10 e0       	ldi	r17, 0x00	; 0
    48a8:	ce 01       	movw	r24, r28
    48aa:	44 96       	adiw	r24, 0x14	; 20
    48ac:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    48b0:	11 23       	and	r17, r17
    48b2:	a1 f0       	breq	.+40     	; 0x48dc <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    48b4:	68 e3       	ldi	r22, 0x38	; 56
    48b6:	73 e0       	ldi	r23, 0x03	; 3
    48b8:	84 e4       	ldi	r24, 0x44	; 68
    48ba:	93 e0       	ldi	r25, 0x03	; 3
    48bc:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    48c0:	83 e0       	ldi	r24, 0x03	; 3
    48c2:	94 e0       	ldi	r25, 0x04	; 4
    48c4:	bc 01       	movw	r22, r24
    48c6:	86 e8       	ldi	r24, 0x86	; 134
    48c8:	95 e0       	ldi	r25, 0x05	; 5
    48ca:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    48ce:	64 e4       	ldi	r22, 0x44	; 68
    48d0:	73 e0       	ldi	r23, 0x03	; 3
    48d2:	86 e8       	ldi	r24, 0x86	; 134
    48d4:	95 e0       	ldi	r25, 0x05	; 5
    48d6:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <_ZN5Print7printlnERK6String>
    48da:	92 c0       	rjmp	.+292    	; 0x4a00 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    48dc:	68 e3       	ldi	r22, 0x38	; 56
    48de:	73 e0       	ldi	r23, 0x03	; 3
    48e0:	8a e4       	ldi	r24, 0x4A	; 74
    48e2:	93 e0       	ldi	r25, 0x03	; 3
    48e4:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    48e8:	89 e0       	ldi	r24, 0x09	; 9
    48ea:	94 e0       	ldi	r25, 0x04	; 4
    48ec:	bc 01       	movw	r22, r24
    48ee:	86 e8       	ldi	r24, 0x86	; 134
    48f0:	95 e0       	ldi	r25, 0x05	; 5
    48f2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    48f6:	6a e4       	ldi	r22, 0x4A	; 74
    48f8:	73 e0       	ldi	r23, 0x03	; 3
    48fa:	86 e8       	ldi	r24, 0x86	; 134
    48fc:	95 e0       	ldi	r25, 0x05	; 5
    48fe:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <_ZN5Print7printlnERK6String>
    4902:	ce 01       	movw	r24, r28
    4904:	0e 96       	adiw	r24, 0x0e	; 14
    4906:	6a e4       	ldi	r22, 0x4A	; 74
    4908:	73 e0       	ldi	r23, 0x03	; 3
    490a:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    490e:	ce 01       	movw	r24, r28
    4910:	4a 96       	adiw	r24, 0x1a	; 26
    4912:	be 01       	movw	r22, r28
    4914:	62 5f       	subi	r22, 0xF2	; 242
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	4d e3       	ldi	r20, 0x3D	; 61
    491e:	af d1       	rcall	.+862    	; 0x4c7e <_ZN15WaterSensorWire11SplitStringE6Stringci>
    4920:	ce 01       	movw	r24, r28
    4922:	0e 96       	adiw	r24, 0x0e	; 14
    4924:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4928:	ce 01       	movw	r24, r28
    492a:	08 96       	adiw	r24, 0x08	; 8
    492c:	6a e4       	ldi	r22, 0x4A	; 74
    492e:	73 e0       	ldi	r23, 0x03	; 3
    4930:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    4934:	ce 01       	movw	r24, r28
    4936:	80 96       	adiw	r24, 0x20	; 32
    4938:	be 01       	movw	r22, r28
    493a:	68 5f       	subi	r22, 0xF8	; 248
    493c:	7f 4f       	sbci	r23, 0xFF	; 255
    493e:	21 e0       	ldi	r18, 0x01	; 1
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	4d e3       	ldi	r20, 0x3D	; 61
    4944:	9c d1       	rcall	.+824    	; 0x4c7e <_ZN15WaterSensorWire11SplitStringE6Stringci>
    4946:	ce 01       	movw	r24, r28
    4948:	08 96       	adiw	r24, 0x08	; 8
    494a:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    494e:	ce 01       	movw	r24, r28
    4950:	4a 96       	adiw	r24, 0x1a	; 26
    4952:	62 e4       	ldi	r22, 0x42	; 66
    4954:	71 e0       	ldi	r23, 0x01	; 1
    4956:	07 de       	rcall	.-1010   	; 0x4566 <_ZNK6StringeqEPKc>
    4958:	98 2f       	mov	r25, r24
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	99 23       	and	r25, r25
    495e:	09 f4       	brne	.+2      	; 0x4962 <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	88 23       	and	r24, r24
    4964:	89 f0       	breq	.+34     	; 0x4988 <_ZN15WaterSensorWire7ReceiveEi+0x174>
    4966:	ce 01       	movw	r24, r28
    4968:	80 96       	adiw	r24, 0x20	; 32
    496a:	0e 94 7f 34 	call	0x68fe	; 0x68fe <_ZNK6String5toIntEv>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9b 83       	std	Y+3, r25	; 0x03
    4974:	8a 83       	std	Y+2, r24	; 0x02
    4976:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    497a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    497e:	2a 81       	ldd	r18, Y+2	; 0x02
    4980:	3b 81       	ldd	r19, Y+3	; 0x03
    4982:	b9 01       	movw	r22, r18
    4984:	e2 d9       	rcall	.-3132   	; 0x3d4a <_ZN9TDSSensor6UpdateEi>
    4986:	23 c0       	rjmp	.+70     	; 0x49ce <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    4988:	ce 01       	movw	r24, r28
    498a:	4a 96       	adiw	r24, 0x1a	; 26
    498c:	6c e4       	ldi	r22, 0x4C	; 76
    498e:	71 e0       	ldi	r23, 0x01	; 1
    4990:	ea dd       	rcall	.-1068   	; 0x4566 <_ZNK6StringeqEPKc>
    4992:	98 2f       	mov	r25, r24
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	99 23       	and	r25, r25
    4998:	09 f4       	brne	.+2      	; 0x499c <_ZN15WaterSensorWire7ReceiveEi+0x188>
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	88 23       	and	r24, r24
    499e:	b9 f0       	breq	.+46     	; 0x49ce <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    49a0:	ce 01       	movw	r24, r28
    49a2:	80 96       	adiw	r24, 0x20	; 32
    49a4:	0e 94 89 34 	call	0x6912	; 0x6912 <_ZNK6String7toFloatEv>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	8c 83       	std	Y+4, r24	; 0x04
    49ae:	9d 83       	std	Y+5, r25	; 0x05
    49b0:	ae 83       	std	Y+6, r26	; 0x06
    49b2:	bf 83       	std	Y+7, r27	; 0x07
    49b4:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    49b8:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    49bc:	8c 81       	ldd	r24, Y+4	; 0x04
    49be:	9d 81       	ldd	r25, Y+5	; 0x05
    49c0:	ae 81       	ldd	r26, Y+6	; 0x06
    49c2:	bf 81       	ldd	r27, Y+7	; 0x07
    49c4:	ac 01       	movw	r20, r24
    49c6:	bd 01       	movw	r22, r26
    49c8:	c9 01       	movw	r24, r18
    49ca:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_ZN8PHSensor6UpdateEd>
    49ce:	ce 01       	movw	r24, r28
    49d0:	80 96       	adiw	r24, 0x20	; 32
    49d2:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    49d6:	ce 01       	movw	r24, r28
    49d8:	4a 96       	adiw	r24, 0x1a	; 26
    49da:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    49de:	10 c0       	rjmp	.+32     	; 0x4a00 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    49e0:	83 e1       	ldi	r24, 0x13	; 19
    49e2:	94 e0       	ldi	r25, 0x04	; 4
    49e4:	bc 01       	movw	r22, r24
    49e6:	86 e8       	ldi	r24, 0x86	; 134
    49e8:	95 e0       	ldi	r25, 0x05	; 5
    49ea:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    49ee:	8e a1       	ldd	r24, Y+38	; 0x26
    49f0:	9f a1       	ldd	r25, Y+39	; 0x27
    49f2:	4a e0       	ldi	r20, 0x0A	; 10
    49f4:	50 e0       	ldi	r21, 0x00	; 0
    49f6:	bc 01       	movw	r22, r24
    49f8:	86 e8       	ldi	r24, 0x86	; 134
    49fa:	95 e0       	ldi	r25, 0x05	; 5
    49fc:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <_ZN5Print7printlnEii>
    4a00:	a7 96       	adiw	r28, 0x27	; 39
    4a02:	e3 e0       	ldi	r30, 0x03	; 3
    4a04:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__epilogue_restores__+0x1e>

00004a08 <_ZN15WaterSensorWire7RequestEv>:
    4a08:	a2 e1       	ldi	r26, 0x12	; 18
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	ea e0       	ldi	r30, 0x0A	; 10
    4a0e:	f5 e2       	ldi	r31, 0x25	; 37
    4a10:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x1c>
    4a14:	ce 01       	movw	r24, r28
    4a16:	0d 96       	adiw	r24, 0x0d	; 13
    4a18:	6f e3       	ldi	r22, 0x3F	; 63
    4a1a:	71 e0       	ldi	r23, 0x01	; 1
    4a1c:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    4a20:	60 e4       	ldi	r22, 0x40	; 64
    4a22:	71 e0       	ldi	r23, 0x01	; 1
    4a24:	84 e4       	ldi	r24, 0x44	; 68
    4a26:	93 e0       	ldi	r25, 0x03	; 3
    4a28:	9e dd       	rcall	.-1220   	; 0x4566 <_ZNK6StringeqEPKc>
    4a2a:	98 2f       	mov	r25, r24
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	99 23       	and	r25, r25
    4a30:	09 f4       	brne	.+2      	; 0x4a34 <_ZN15WaterSensorWire7RequestEv+0x2c>
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	88 23       	and	r24, r24
    4a36:	c1 f0       	breq	.+48     	; 0x4a68 <_ZN15WaterSensorWire7RequestEv+0x60>
    4a38:	ce 01       	movw	r24, r28
    4a3a:	0d 96       	adiw	r24, 0x0d	; 13
    4a3c:	65 e5       	ldi	r22, 0x55	; 85
    4a3e:	71 e0       	ldi	r23, 0x01	; 1
    4a40:	0e 94 47 32 	call	0x648e	; 0x648e <_ZN6StringaSEPKc>
    4a44:	9e 01       	movw	r18, r28
    4a46:	23 5f       	subi	r18, 0xF3	; 243
    4a48:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	07 96       	adiw	r24, 0x07	; 7
    4a4e:	b9 01       	movw	r22, r18
    4a50:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    4a54:	ce 01       	movw	r24, r28
    4a56:	07 96       	adiw	r24, 0x07	; 7
    4a58:	c2 d0       	rcall	.+388    	; 0x4bde <_ZN15WaterSensorWire8TransmitE6String>
    4a5a:	ce 01       	movw	r24, r28
    4a5c:	07 96       	adiw	r24, 0x07	; 7
    4a5e:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4a62:	00 e0       	ldi	r16, 0x00	; 0
    4a64:	10 e0       	ldi	r17, 0x00	; 0
    4a66:	af c0       	rjmp	.+350    	; 0x4bc6 <_ZN15WaterSensorWire7RequestEv+0x1be>
    4a68:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4a6c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4a76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4a7a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4a7e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4a82:	89 2b       	or	r24, r25
    4a84:	39 f4       	brne	.+14     	; 0x4a94 <_ZN15WaterSensorWire7RequestEv+0x8c>
    4a86:	ce 01       	movw	r24, r28
    4a88:	0d 96       	adiw	r24, 0x0d	; 13
    4a8a:	66 e5       	ldi	r22, 0x56	; 86
    4a8c:	73 e0       	ldi	r23, 0x03	; 3
    4a8e:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4a92:	89 c0       	rjmp	.+274    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4a94:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4a98:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	39 f4       	brne	.+14     	; 0x4aae <_ZN15WaterSensorWire7RequestEv+0xa6>
    4aa0:	ce 01       	movw	r24, r28
    4aa2:	0d 96       	adiw	r24, 0x0d	; 13
    4aa4:	6c e5       	ldi	r22, 0x5C	; 92
    4aa6:	73 e0       	ldi	r23, 0x03	; 3
    4aa8:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4aac:	7c c0       	rjmp	.+248    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4aae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4ab2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4ab6:	02 97       	sbiw	r24, 0x02	; 2
    4ab8:	39 f4       	brne	.+14     	; 0x4ac8 <_ZN15WaterSensorWire7RequestEv+0xc0>
    4aba:	ce 01       	movw	r24, r28
    4abc:	0d 96       	adiw	r24, 0x0d	; 13
    4abe:	62 e6       	ldi	r22, 0x62	; 98
    4ac0:	73 e0       	ldi	r23, 0x03	; 3
    4ac2:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4ac6:	6f c0       	rjmp	.+222    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4ac8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4acc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4ad0:	03 97       	sbiw	r24, 0x03	; 3
    4ad2:	39 f4       	brne	.+14     	; 0x4ae2 <_ZN15WaterSensorWire7RequestEv+0xda>
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	0d 96       	adiw	r24, 0x0d	; 13
    4ad8:	68 e6       	ldi	r22, 0x68	; 104
    4ada:	73 e0       	ldi	r23, 0x03	; 3
    4adc:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4ae0:	62 c0       	rjmp	.+196    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4ae2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4ae6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4aea:	04 97       	sbiw	r24, 0x04	; 4
    4aec:	39 f4       	brne	.+14     	; 0x4afc <_ZN15WaterSensorWire7RequestEv+0xf4>
    4aee:	ce 01       	movw	r24, r28
    4af0:	0d 96       	adiw	r24, 0x0d	; 13
    4af2:	60 e8       	ldi	r22, 0x80	; 128
    4af4:	73 e0       	ldi	r23, 0x03	; 3
    4af6:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4afa:	55 c0       	rjmp	.+170    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4afc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4b00:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4b04:	05 97       	sbiw	r24, 0x05	; 5
    4b06:	39 f4       	brne	.+14     	; 0x4b16 <_ZN15WaterSensorWire7RequestEv+0x10e>
    4b08:	ce 01       	movw	r24, r28
    4b0a:	0d 96       	adiw	r24, 0x0d	; 13
    4b0c:	66 e8       	ldi	r22, 0x86	; 134
    4b0e:	73 e0       	ldi	r23, 0x03	; 3
    4b10:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4b14:	48 c0       	rjmp	.+144    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4b16:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4b1a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4b1e:	06 97       	sbiw	r24, 0x06	; 6
    4b20:	39 f4       	brne	.+14     	; 0x4b30 <_ZN15WaterSensorWire7RequestEv+0x128>
    4b22:	ce 01       	movw	r24, r28
    4b24:	0d 96       	adiw	r24, 0x0d	; 13
    4b26:	6a e7       	ldi	r22, 0x7A	; 122
    4b28:	73 e0       	ldi	r23, 0x03	; 3
    4b2a:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4b2e:	3b c0       	rjmp	.+118    	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4b30:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4b34:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4b38:	07 97       	sbiw	r24, 0x07	; 7
    4b3a:	39 f4       	brne	.+14     	; 0x4b4a <_ZN15WaterSensorWire7RequestEv+0x142>
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	0d 96       	adiw	r24, 0x0d	; 13
    4b40:	64 e7       	ldi	r22, 0x74	; 116
    4b42:	73 e0       	ldi	r23, 0x03	; 3
    4b44:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4b48:	2e c0       	rjmp	.+92     	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4b4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4b4e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4b52:	08 97       	sbiw	r24, 0x08	; 8
    4b54:	69 f4       	brne	.+26     	; 0x4b70 <_ZN15WaterSensorWire7RequestEv+0x168>
    4b56:	ce 01       	movw	r24, r28
    4b58:	0d 96       	adiw	r24, 0x0d	; 13
    4b5a:	6e e6       	ldi	r22, 0x6E	; 110
    4b5c:	73 e0       	ldi	r23, 0x03	; 3
    4b5e:	0e 94 2a 32 	call	0x6454	; 0x6454 <_ZN6StringaSERKS_>
    4b62:	8f ef       	ldi	r24, 0xFF	; 255
    4b64:	9f ef       	ldi	r25, 0xFF	; 255
    4b66:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4b6a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4b6e:	1b c0       	rjmp	.+54     	; 0x4ba6 <_ZN15WaterSensorWire7RequestEv+0x19e>
    4b70:	89 e3       	ldi	r24, 0x39	; 57
    4b72:	94 e0       	ldi	r25, 0x04	; 4
    4b74:	bc 01       	movw	r22, r24
    4b76:	86 e8       	ldi	r24, 0x86	; 134
    4b78:	95 e0       	ldi	r25, 0x05	; 5
    4b7a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    4b7e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4b82:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4b86:	4a e0       	ldi	r20, 0x0A	; 10
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	bc 01       	movw	r22, r24
    4b8c:	86 e8       	ldi	r24, 0x86	; 134
    4b8e:	95 e0       	ldi	r25, 0x05	; 5
    4b90:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <_ZN5Print7printlnEii>
    4b94:	8f ef       	ldi	r24, 0xFF	; 255
    4b96:	9f ef       	ldi	r25, 0xFF	; 255
    4b98:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4b9c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4ba0:	00 e0       	ldi	r16, 0x00	; 0
    4ba2:	10 e0       	ldi	r17, 0x00	; 0
    4ba4:	10 c0       	rjmp	.+32     	; 0x4bc6 <_ZN15WaterSensorWire7RequestEv+0x1be>
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	0d 96       	adiw	r24, 0x0d	; 13
    4baa:	bc 01       	movw	r22, r24
    4bac:	ce 01       	movw	r24, r28
    4bae:	01 96       	adiw	r24, 0x01	; 1
    4bb0:	0e 94 3f 32 	call	0x647e	; 0x647e <_ZN6StringC1ERKS_>
    4bb4:	ce 01       	movw	r24, r28
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	12 d0       	rcall	.+36     	; 0x4bde <_ZN15WaterSensorWire8TransmitE6String>
    4bba:	ce 01       	movw	r24, r28
    4bbc:	01 96       	adiw	r24, 0x01	; 1
    4bbe:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4bc2:	01 e0       	ldi	r16, 0x01	; 1
    4bc4:	10 e0       	ldi	r17, 0x00	; 0
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	0d 96       	adiw	r24, 0x0d	; 13
    4bca:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4bce:	01 30       	cpi	r16, 0x01	; 1
    4bd0:	11 05       	cpc	r17, r1
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <_ZN15WaterSensorWire7RequestEv+0x1ce>
    4bd4:	00 00       	nop
    4bd6:	62 96       	adiw	r28, 0x12	; 18
    4bd8:	e4 e0       	ldi	r30, 0x04	; 4
    4bda:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x1c>

00004bde <_ZN15WaterSensorWire8TransmitE6String>:
    4bde:	a2 e1       	ldi	r26, 0x12	; 18
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	e5 ef       	ldi	r30, 0xF5	; 245
    4be4:	f5 e2       	ldi	r31, 0x25	; 37
    4be6:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4bea:	9a 8b       	std	Y+18, r25	; 0x12
    4bec:	89 8b       	std	Y+17, r24	; 0x11
    4bee:	89 89       	ldd	r24, Y+17	; 0x11
    4bf0:	9a 89       	ldd	r25, Y+18	; 0x12
    4bf2:	91 dc       	rcall	.-1758   	; 0x4516 <_ZNK6String6lengthEv>
    4bf4:	9c 01       	movw	r18, r24
    4bf6:	8a e0       	ldi	r24, 0x0A	; 10
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	82 1b       	sub	r24, r18
    4bfc:	93 0b       	sbc	r25, r19
    4bfe:	9e 83       	std	Y+6, r25	; 0x06
    4c00:	8d 83       	std	Y+5, r24	; 0x05
    4c02:	1a 82       	std	Y+2, r1	; 0x02
    4c04:	19 82       	std	Y+1, r1	; 0x01
    4c06:	0a c0       	rjmp	.+20     	; 0x4c1c <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    4c08:	89 89       	ldd	r24, Y+17	; 0x11
    4c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    4c0c:	6b e5       	ldi	r22, 0x5B	; 91
    4c0e:	71 e0       	ldi	r23, 0x01	; 1
    4c10:	93 dc       	rcall	.-1754   	; 0x4538 <_ZN6StringpLEPKc>
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	9a 81       	ldd	r25, Y+2	; 0x02
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	9a 83       	std	Y+2, r25	; 0x02
    4c1a:	89 83       	std	Y+1, r24	; 0x01
    4c1c:	29 81       	ldd	r18, Y+1	; 0x01
    4c1e:	3a 81       	ldd	r19, Y+2	; 0x02
    4c20:	8d 81       	ldd	r24, Y+5	; 0x05
    4c22:	9e 81       	ldd	r25, Y+6	; 0x06
    4c24:	28 17       	cp	r18, r24
    4c26:	39 07       	cpc	r19, r25
    4c28:	7c f3       	brlt	.-34     	; 0x4c08 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    4c2a:	1c 82       	std	Y+4, r1	; 0x04
    4c2c:	1b 82       	std	Y+3, r1	; 0x03
    4c2e:	16 c0       	rjmp	.+44     	; 0x4c5c <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    4c30:	2b 81       	ldd	r18, Y+3	; 0x03
    4c32:	3c 81       	ldd	r19, Y+4	; 0x04
    4c34:	89 89       	ldd	r24, Y+17	; 0x11
    4c36:	9a 89       	ldd	r25, Y+18	; 0x12
    4c38:	b9 01       	movw	r22, r18
    4c3a:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <_ZNK6String6charAtEj>
    4c3e:	48 2f       	mov	r20, r24
    4c40:	9e 01       	movw	r18, r28
    4c42:	29 5f       	subi	r18, 0xF9	; 249
    4c44:	3f 4f       	sbci	r19, 0xFF	; 255
    4c46:	8b 81       	ldd	r24, Y+3	; 0x03
    4c48:	9c 81       	ldd	r25, Y+4	; 0x04
    4c4a:	82 0f       	add	r24, r18
    4c4c:	93 1f       	adc	r25, r19
    4c4e:	fc 01       	movw	r30, r24
    4c50:	40 83       	st	Z, r20
    4c52:	8b 81       	ldd	r24, Y+3	; 0x03
    4c54:	9c 81       	ldd	r25, Y+4	; 0x04
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	9c 83       	std	Y+4, r25	; 0x04
    4c5a:	8b 83       	std	Y+3, r24	; 0x03
    4c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c60:	0a 97       	sbiw	r24, 0x0a	; 10
    4c62:	34 f3       	brlt	.-52     	; 0x4c30 <_ZN15WaterSensorWire8TransmitE6String+0x52>
    4c64:	ce 01       	movw	r24, r28
    4c66:	07 96       	adiw	r24, 0x07	; 7
    4c68:	4a e0       	ldi	r20, 0x0A	; 10
    4c6a:	50 e0       	ldi	r21, 0x00	; 0
    4c6c:	bc 01       	movw	r22, r24
    4c6e:	81 e9       	ldi	r24, 0x91	; 145
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN7TwoWire5writeEPKhj>
    4c76:	62 96       	adiw	r28, 0x12	; 18
    4c78:	e2 e0       	ldi	r30, 0x02	; 2
    4c7a:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004c7e <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    4c7e:	a1 e1       	ldi	r26, 0x11	; 17
    4c80:	b0 e0       	ldi	r27, 0x00	; 0
    4c82:	e5 e4       	ldi	r30, 0x45	; 69
    4c84:	f6 e2       	ldi	r31, 0x26	; 38
    4c86:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4c8a:	9c 87       	std	Y+12, r25	; 0x0c
    4c8c:	8b 87       	std	Y+11, r24	; 0x0b
    4c8e:	7e 87       	std	Y+14, r23	; 0x0e
    4c90:	6d 87       	std	Y+13, r22	; 0x0d
    4c92:	4f 87       	std	Y+15, r20	; 0x0f
    4c94:	39 8b       	std	Y+17, r19	; 0x11
    4c96:	28 8b       	std	Y+16, r18	; 0x10
    4c98:	1a 82       	std	Y+2, r1	; 0x02
    4c9a:	19 82       	std	Y+1, r1	; 0x01
    4c9c:	18 86       	std	Y+8, r1	; 0x08
    4c9e:	1f 82       	std	Y+7, r1	; 0x07
    4ca0:	8f ef       	ldi	r24, 0xFF	; 255
    4ca2:	9f ef       	ldi	r25, 0xFF	; 255
    4ca4:	9a 87       	std	Y+10, r25	; 0x0a
    4ca6:	89 87       	std	Y+9, r24	; 0x09
    4ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cac:	34 dc       	rcall	.-1944   	; 0x4516 <_ZNK6String6lengthEv>
    4cae:	01 97       	sbiw	r24, 0x01	; 1
    4cb0:	9e 83       	std	Y+6, r25	; 0x06
    4cb2:	8d 83       	std	Y+5, r24	; 0x05
    4cb4:	1c 82       	std	Y+4, r1	; 0x04
    4cb6:	1b 82       	std	Y+3, r1	; 0x03
    4cb8:	35 c0       	rjmp	.+106    	; 0x4d24 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    4cba:	2b 81       	ldd	r18, Y+3	; 0x03
    4cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    4cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc2:	b9 01       	movw	r22, r18
    4cc4:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <_ZNK6String6charAtEj>
    4cc8:	98 2f       	mov	r25, r24
    4cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ccc:	98 17       	cp	r25, r24
    4cce:	39 f0       	breq	.+14     	; 0x4cde <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    4cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    4cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd8:	28 17       	cp	r18, r24
    4cda:	39 07       	cpc	r19, r25
    4cdc:	11 f4       	brne	.+4      	; 0x4ce2 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	01 c0       	rjmp	.+2      	; 0x4ce4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	88 23       	and	r24, r24
    4ce6:	c9 f0       	breq	.+50     	; 0x4d1a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    4ce8:	89 81       	ldd	r24, Y+1	; 0x01
    4cea:	9a 81       	ldd	r25, Y+2	; 0x02
    4cec:	01 96       	adiw	r24, 0x01	; 1
    4cee:	9a 83       	std	Y+2, r25	; 0x02
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	01 96       	adiw	r24, 0x01	; 1
    4cf8:	98 87       	std	Y+8, r25	; 0x08
    4cfa:	8f 83       	std	Y+7, r24	; 0x07
    4cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    4cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    4d00:	8d 81       	ldd	r24, Y+5	; 0x05
    4d02:	9e 81       	ldd	r25, Y+6	; 0x06
    4d04:	28 17       	cp	r18, r24
    4d06:	39 07       	cpc	r19, r25
    4d08:	21 f4       	brne	.+8      	; 0x4d12 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    4d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0e:	01 96       	adiw	r24, 0x01	; 1
    4d10:	02 c0       	rjmp	.+4      	; 0x4d16 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    4d12:	8b 81       	ldd	r24, Y+3	; 0x03
    4d14:	9c 81       	ldd	r25, Y+4	; 0x04
    4d16:	9a 87       	std	Y+10, r25	; 0x0a
    4d18:	89 87       	std	Y+9, r24	; 0x09
    4d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d1e:	01 96       	adiw	r24, 0x01	; 1
    4d20:	9c 83       	std	Y+4, r25	; 0x04
    4d22:	8b 83       	std	Y+3, r24	; 0x03
    4d24:	2b 81       	ldd	r18, Y+3	; 0x03
    4d26:	3c 81       	ldd	r19, Y+4	; 0x04
    4d28:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2c:	82 17       	cp	r24, r18
    4d2e:	93 07       	cpc	r25, r19
    4d30:	44 f0       	brlt	.+16     	; 0x4d42 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4d32:	29 81       	ldd	r18, Y+1	; 0x01
    4d34:	3a 81       	ldd	r19, Y+2	; 0x02
    4d36:	88 89       	ldd	r24, Y+16	; 0x10
    4d38:	99 89       	ldd	r25, Y+17	; 0x11
    4d3a:	82 17       	cp	r24, r18
    4d3c:	93 07       	cpc	r25, r19
    4d3e:	0c f0       	brlt	.+2      	; 0x4d42 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4d40:	bc cf       	rjmp	.-136    	; 0x4cba <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    4d42:	29 81       	ldd	r18, Y+1	; 0x01
    4d44:	3a 81       	ldd	r19, Y+2	; 0x02
    4d46:	88 89       	ldd	r24, Y+16	; 0x10
    4d48:	99 89       	ldd	r25, Y+17	; 0x11
    4d4a:	82 17       	cp	r24, r18
    4d4c:	93 07       	cpc	r25, r19
    4d4e:	6c f4       	brge	.+26     	; 0x4d6a <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    4d50:	89 85       	ldd	r24, Y+9	; 0x09
    4d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d54:	9c 01       	movw	r18, r24
    4d56:	8f 81       	ldd	r24, Y+7	; 0x07
    4d58:	98 85       	ldd	r25, Y+8	; 0x08
    4d5a:	ac 01       	movw	r20, r24
    4d5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d60:	6d 85       	ldd	r22, Y+13	; 0x0d
    4d62:	7e 85       	ldd	r23, Y+14	; 0x0e
    4d64:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZNK6String9substringEjj>
    4d68:	06 c0       	rjmp	.+12     	; 0x4d76 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    4d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d6e:	6f e3       	ldi	r22, 0x3F	; 63
    4d70:	71 e0       	ldi	r23, 0x01	; 1
    4d72:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    4d76:	00 00       	nop
    4d78:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d7c:	61 96       	adiw	r28, 0x11	; 17
    4d7e:	e2 e0       	ldi	r30, 0x02	; 2
    4d80:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004d84 <_Z41__static_initialization_and_destruction_0ii>:
    4d84:	a4 e0       	ldi	r26, 0x04	; 4
    4d86:	b0 e0       	ldi	r27, 0x00	; 0
    4d88:	e8 ec       	ldi	r30, 0xC8	; 200
    4d8a:	f6 e2       	ldi	r31, 0x26	; 38
    4d8c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4d90:	9a 83       	std	Y+2, r25	; 0x02
    4d92:	89 83       	std	Y+1, r24	; 0x01
    4d94:	7c 83       	std	Y+4, r23	; 0x04
    4d96:	6b 83       	std	Y+3, r22	; 0x03
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	09 f0       	breq	.+2      	; 0x4da2 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    4da0:	59 c0       	rjmp	.+178    	; 0x4e54 <_Z41__static_initialization_and_destruction_0ii+0xd0>
    4da2:	8b 81       	ldd	r24, Y+3	; 0x03
    4da4:	9c 81       	ldd	r25, Y+4	; 0x04
    4da6:	01 96       	adiw	r24, 0x01	; 1
    4da8:	09 f0       	breq	.+2      	; 0x4dac <_Z41__static_initialization_and_destruction_0ii+0x28>
    4daa:	54 c0       	rjmp	.+168    	; 0x4e54 <_Z41__static_initialization_and_destruction_0ii+0xd0>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4dac:	6f e3       	ldi	r22, 0x3F	; 63
    4dae:	71 e0       	ldi	r23, 0x01	; 1
    4db0:	88 e3       	ldi	r24, 0x38	; 56
    4db2:	93 e0       	ldi	r25, 0x03	; 3
    4db4:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _wireResponse = "";
    4db8:	6f e3       	ldi	r22, 0x3F	; 63
    4dba:	71 e0       	ldi	r23, 0x01	; 1
    4dbc:	8e e3       	ldi	r24, 0x3E	; 62
    4dbe:	93 e0       	ldi	r25, 0x03	; 3
    4dc0:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    4dc4:	6f e3       	ldi	r22, 0x3F	; 63
    4dc6:	71 e0       	ldi	r23, 0x01	; 1
    4dc8:	84 e4       	ldi	r24, 0x44	; 68
    4dca:	93 e0       	ldi	r25, 0x03	; 3
    4dcc:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _cmdData = "";
    4dd0:	6f e3       	ldi	r22, 0x3F	; 63
    4dd2:	71 e0       	ldi	r23, 0x01	; 1
    4dd4:	8a e4       	ldi	r24, 0x4A	; 74
    4dd6:	93 e0       	ldi	r25, 0x03	; 3
    4dd8:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _response = "";
    4ddc:	6f e3       	ldi	r22, 0x3F	; 63
    4dde:	71 e0       	ldi	r23, 0x01	; 1
    4de0:	80 e5       	ldi	r24, 0x50	; 80
    4de2:	93 e0       	ldi	r25, 0x03	; 3
    4de4:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
//static long _lastReqReceived = 0;
//static const char* _sensorReadInter = "";
//static const char* _sensorReadDur = "";
//static const char* _reading = "";
static String _ph = "";
    4de8:	6f e3       	ldi	r22, 0x3F	; 63
    4dea:	71 e0       	ldi	r23, 0x01	; 1
    4dec:	86 e5       	ldi	r24, 0x56	; 86
    4dee:	93 e0       	ldi	r25, 0x03	; 3
    4df0:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _phAvg = "";
    4df4:	6f e3       	ldi	r22, 0x3F	; 63
    4df6:	71 e0       	ldi	r23, 0x01	; 1
    4df8:	8c e5       	ldi	r24, 0x5C	; 92
    4dfa:	93 e0       	ldi	r25, 0x03	; 3
    4dfc:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _tds = "";
    4e00:	6f e3       	ldi	r22, 0x3F	; 63
    4e02:	71 e0       	ldi	r23, 0x01	; 1
    4e04:	82 e6       	ldi	r24, 0x62	; 98
    4e06:	93 e0       	ldi	r25, 0x03	; 3
    4e08:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _tdsAvg = "";
    4e0c:	6f e3       	ldi	r22, 0x3F	; 63
    4e0e:	71 e0       	ldi	r23, 0x01	; 1
    4e10:	88 e6       	ldi	r24, 0x68	; 104
    4e12:	93 e0       	ldi	r25, 0x03	; 3
    4e14:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _sensorReadInter = "";
    4e18:	6f e3       	ldi	r22, 0x3F	; 63
    4e1a:	71 e0       	ldi	r23, 0x01	; 1
    4e1c:	8e e6       	ldi	r24, 0x6E	; 110
    4e1e:	93 e0       	ldi	r25, 0x03	; 3
    4e20:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _sensorReadDur = "";
    4e24:	6f e3       	ldi	r22, 0x3F	; 63
    4e26:	71 e0       	ldi	r23, 0x01	; 1
    4e28:	84 e7       	ldi	r24, 0x74	; 116
    4e2a:	93 e0       	ldi	r25, 0x03	; 3
    4e2c:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _reading = "";
    4e30:	6f e3       	ldi	r22, 0x3F	; 63
    4e32:	71 e0       	ldi	r23, 0x01	; 1
    4e34:	8a e7       	ldi	r24, 0x7A	; 122
    4e36:	93 e0       	ldi	r25, 0x03	; 3
    4e38:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _phOffset = "";
    4e3c:	6f e3       	ldi	r22, 0x3F	; 63
    4e3e:	71 e0       	ldi	r23, 0x01	; 1
    4e40:	80 e8       	ldi	r24, 0x80	; 128
    4e42:	93 e0       	ldi	r25, 0x03	; 3
    4e44:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
static String _tdsOffset = "";
    4e48:	6f e3       	ldi	r22, 0x3F	; 63
    4e4a:	71 e0       	ldi	r23, 0x01	; 1
    4e4c:	86 e8       	ldi	r24, 0x86	; 134
    4e4e:	93 e0       	ldi	r25, 0x03	; 3
    4e50:	0e 94 16 32 	call	0x642c	; 0x642c <_ZN6StringC1EPKc>
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	9a 81       	ldd	r25, Y+2	; 0x02
    4e58:	89 2b       	or	r24, r25
    4e5a:	e1 f5       	brne	.+120    	; 0x4ed4 <_Z41__static_initialization_and_destruction_0ii+0x150>
    4e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e60:	01 96       	adiw	r24, 0x01	; 1
    4e62:	c1 f5       	brne	.+112    	; 0x4ed4 <_Z41__static_initialization_and_destruction_0ii+0x150>
    4e64:	86 e8       	ldi	r24, 0x86	; 134
    4e66:	93 e0       	ldi	r25, 0x03	; 3
    4e68:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static String _tds = "";
static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
static String _phOffset = "";
    4e6c:	80 e8       	ldi	r24, 0x80	; 128
    4e6e:	93 e0       	ldi	r25, 0x03	; 3
    4e70:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static String _phAvg = "";
static String _tds = "";
static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
    4e74:	8a e7       	ldi	r24, 0x7A	; 122
    4e76:	93 e0       	ldi	r25, 0x03	; 3
    4e78:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static String _ph = "";
static String _phAvg = "";
static String _tds = "";
static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
    4e7c:	84 e7       	ldi	r24, 0x74	; 116
    4e7e:	93 e0       	ldi	r25, 0x03	; 3
    4e80:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
//static const char* _reading = "";
static String _ph = "";
static String _phAvg = "";
static String _tds = "";
static String _tdsAvg = "";
static String _sensorReadInter = "";
    4e84:	8e e6       	ldi	r24, 0x6E	; 110
    4e86:	93 e0       	ldi	r25, 0x03	; 3
    4e88:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
//static const char* _sensorReadDur = "";
//static const char* _reading = "";
static String _ph = "";
static String _phAvg = "";
static String _tds = "";
static String _tdsAvg = "";
    4e8c:	88 e6       	ldi	r24, 0x68	; 104
    4e8e:	93 e0       	ldi	r25, 0x03	; 3
    4e90:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
//static const char* _sensorReadInter = "";
//static const char* _sensorReadDur = "";
//static const char* _reading = "";
static String _ph = "";
static String _phAvg = "";
static String _tds = "";
    4e94:	82 e6       	ldi	r24, 0x62	; 98
    4e96:	93 e0       	ldi	r25, 0x03	; 3
    4e98:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
//static long _lastReqReceived = 0;
//static const char* _sensorReadInter = "";
//static const char* _sensorReadDur = "";
//static const char* _reading = "";
static String _ph = "";
static String _phAvg = "";
    4e9c:	8c e5       	ldi	r24, 0x5C	; 92
    4e9e:	93 e0       	ldi	r25, 0x03	; 3
    4ea0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static String _response = "";
//static long _lastReqReceived = 0;
//static const char* _sensorReadInter = "";
//static const char* _sensorReadDur = "";
//static const char* _reading = "";
static String _ph = "";
    4ea4:	86 e5       	ldi	r24, 0x56	; 86
    4ea6:	93 e0       	ldi	r25, 0x03	; 3
    4ea8:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
    4eac:	80 e5       	ldi	r24, 0x50	; 80
    4eae:	93 e0       	ldi	r25, 0x03	; 3
    4eb0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    4eb4:	8a e4       	ldi	r24, 0x4A	; 74
    4eb6:	93 e0       	ldi	r25, 0x03	; 3
    4eb8:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    4ebc:	84 e4       	ldi	r24, 0x44	; 68
    4ebe:	93 e0       	ldi	r25, 0x03	; 3
    4ec0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    4ec4:	8e e3       	ldi	r24, 0x3E	; 62
    4ec6:	93 e0       	ldi	r25, 0x03	; 3
    4ec8:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4ecc:	88 e3       	ldi	r24, 0x38	; 56
    4ece:	93 e0       	ldi	r25, 0x03	; 3
    4ed0:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4ed4:	24 96       	adiw	r28, 0x04	; 4
    4ed6:	e2 e0       	ldi	r30, 0x02	; 2
    4ed8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004edc <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    4edc:	a0 e0       	ldi	r26, 0x00	; 0
    4ede:	b0 e0       	ldi	r27, 0x00	; 0
    4ee0:	e4 e7       	ldi	r30, 0x74	; 116
    4ee2:	f7 e2       	ldi	r31, 0x27	; 39
    4ee4:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4ee8:	6f ef       	ldi	r22, 0xFF	; 255
    4eea:	7f ef       	ldi	r23, 0xFF	; 255
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	49 df       	rcall	.-366    	; 0x4d84 <_Z41__static_initialization_and_destruction_0ii>
    4ef2:	e2 e0       	ldi	r30, 0x02	; 2
    4ef4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004ef8 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    4ef8:	a0 e0       	ldi	r26, 0x00	; 0
    4efa:	b0 e0       	ldi	r27, 0x00	; 0
    4efc:	e2 e8       	ldi	r30, 0x82	; 130
    4efe:	f7 e2       	ldi	r31, 0x27	; 39
    4f00:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4f04:	6f ef       	ldi	r22, 0xFF	; 255
    4f06:	7f ef       	ldi	r23, 0xFF	; 255
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	3b df       	rcall	.-394    	; 0x4d84 <_Z41__static_initialization_and_destruction_0ii>
    4f0e:	e2 e0       	ldi	r30, 0x02	; 2
    4f10:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004f14 <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    4f14:	a2 e0       	ldi	r26, 0x02	; 2
    4f16:	b0 e0       	ldi	r27, 0x00	; 0
    4f18:	e0 e9       	ldi	r30, 0x90	; 144
    4f1a:	f7 e2       	ldi	r31, 0x27	; 39
    4f1c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4f20:	9a 83       	std	Y+2, r25	; 0x02
    4f22:	89 83       	std	Y+1, r24	; 0x01
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	9a 81       	ldd	r25, Y+2	; 0x02
    4f28:	89 57       	subi	r24, 0x79	; 121
    4f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2c:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	9a 81       	ldd	r25, Y+2	; 0x02
    4f34:	8f 57       	subi	r24, 0x7F	; 127
    4f36:	9f 4f       	sbci	r25, 0xFF	; 255
    4f38:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f40:	8e 5b       	subi	r24, 0xBE	; 190
    4f42:	9f 4f       	sbci	r25, 0xFF	; 255
    4f44:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZNSt6vectorIdSaIdEED1Ev>
    4f48:	22 96       	adiw	r28, 0x02	; 2
    4f4a:	e2 e0       	ldi	r30, 0x02	; 2
    4f4c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004f50 <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    4f50:	a2 e0       	ldi	r26, 0x02	; 2
    4f52:	b0 e0       	ldi	r27, 0x00	; 0
    4f54:	ee ea       	ldi	r30, 0xAE	; 174
    4f56:	f7 e2       	ldi	r31, 0x27	; 39
    4f58:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    4f5c:	9a 83       	std	Y+2, r25	; 0x02
    4f5e:	89 83       	std	Y+1, r24	; 0x01
    4f60:	89 81       	ldd	r24, Y+1	; 0x01
    4f62:	9a 81       	ldd	r25, Y+2	; 0x02
    4f64:	82 58       	subi	r24, 0x82	; 130
    4f66:	9f 4f       	sbci	r25, 0xFF	; 255
    4f68:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f70:	88 58       	subi	r24, 0x88	; 136
    4f72:	9f 4f       	sbci	r25, 0xFF	; 255
    4f74:	0e 94 af 31 	call	0x635e	; 0x635e <_ZN6StringD1Ev>
    4f78:	22 96       	adiw	r28, 0x02	; 2
    4f7a:	e2 e0       	ldi	r30, 0x02	; 2
    4f7c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004f80 <_ZN7Globals13SwitchSensorsEv>:

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

    void SwitchSensors() {
    4f80:	a0 e0       	ldi	r26, 0x00	; 0
    4f82:	b0 e0       	ldi	r27, 0x00	; 0
    4f84:	e6 ec       	ldi	r30, 0xC6	; 198
    4f86:	f7 e2       	ldi	r31, 0x27	; 39
    4f88:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    4f8c:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <_ZN7Globals10ReadingTDSE>
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	89 27       	eor	r24, r25
    4f94:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    4f98:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_ZN7Globals10ReadingTDSE>
    4f9c:	88 23       	and	r24, r24
    4f9e:	41 f0       	breq	.+16     	; 0x4fb0 <_ZN7Globals13SwitchSensorsEv+0x30>
            ThePHSensor.TurnOff();
    4fa0:	85 eb       	ldi	r24, 0xB5	; 181
    4fa2:	93 e0       	ldi	r25, 0x03	; 3
    4fa4:	0e 94 2f 1c 	call	0x385e	; 0x385e <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    4fa8:	86 e4       	ldi	r24, 0x46	; 70
    4faa:	94 e0       	ldi	r25, 0x04	; 4
    4fac:	08 da       	rcall	.-3056   	; 0x43be <_ZN9TDSSensor6TurnOnEv>
    4fae:	07 c0       	rjmp	.+14     	; 0x4fbe <_ZN7Globals13SwitchSensorsEv+0x3e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    4fb0:	86 e4       	ldi	r24, 0x46	; 70
    4fb2:	94 e0       	ldi	r25, 0x04	; 4
    4fb4:	21 da       	rcall	.-3006   	; 0x43f8 <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    4fb6:	85 eb       	ldi	r24, 0xB5	; 181
    4fb8:	93 e0       	ldi	r25, 0x03	; 3
    4fba:	0e 94 12 1c 	call	0x3824	; 0x3824 <_ZN8PHSensor6TurnOnEv>
        }
    }
    4fbe:	e2 e0       	ldi	r30, 0x02	; 2
    4fc0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00004fc4 <_Z41__static_initialization_and_destruction_0ii>:

}
    4fc4:	ac e4       	ldi	r26, 0x4C	; 76
    4fc6:	b0 e0       	ldi	r27, 0x00	; 0
    4fc8:	e8 ee       	ldi	r30, 0xE8	; 232
    4fca:	f7 e2       	ldi	r31, 0x27	; 39
    4fcc:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>
    4fd0:	9e 01       	movw	r18, r28
    4fd2:	27 5b       	subi	r18, 0xB7	; 183
    4fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd6:	f9 01       	movw	r30, r18
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
    4fdc:	ce 01       	movw	r24, r28
    4fde:	85 5b       	subi	r24, 0xB5	; 181
    4fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	71 83       	std	Z+1, r23	; 0x01
    4fe6:	60 83       	st	Z, r22
    4fe8:	ce 01       	movw	r24, r28
    4fea:	87 5b       	subi	r24, 0xB7	; 183
    4fec:	9f 4f       	sbci	r25, 0xFF	; 255
    4fee:	fc 01       	movw	r30, r24
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <_Z41__static_initialization_and_destruction_0ii+0x36>
    4ff8:	44 c0       	rjmp	.+136    	; 0x5082 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    4ffa:	ce 01       	movw	r24, r28
    4ffc:	85 5b       	subi	r24, 0xB5	; 181
    4ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    5000:	fc 01       	movw	r30, r24
    5002:	80 81       	ld	r24, Z
    5004:	91 81       	ldd	r25, Z+1	; 0x01
    5006:	01 96       	adiw	r24, 0x01	; 1
    5008:	e1 f5       	brne	.+120    	; 0x5082 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    500a:	81 e9       	ldi	r24, 0x91	; 145
    500c:	93 e0       	ldi	r25, 0x03	; 3
    500e:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    5012:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN7Globals11_phRelayPinE>
    5016:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN7Globals11_phRelayPinE+0x1>
    501a:	21 e9       	ldi	r18, 0x91	; 145
    501c:	33 e0       	ldi	r19, 0x03	; 3
    501e:	ce 01       	movw	r24, r28
    5020:	85 96       	adiw	r24, 0x25	; 37
    5022:	b9 01       	movw	r22, r18
    5024:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <_ZN7LCDBaseC1ERKS_>
    5028:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    502c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    5030:	9e 01       	movw	r18, r28
    5032:	2b 5d       	subi	r18, 0xDB	; 219
    5034:	3f 4f       	sbci	r19, 0xFF	; 255
    5036:	78 01       	movw	r14, r16
    5038:	89 01       	movw	r16, r18
    503a:	21 e0       	ldi	r18, 0x01	; 1
    503c:	40 ed       	ldi	r20, 0xD0	; 208
    503e:	57 e0       	ldi	r21, 0x07	; 7
    5040:	bc 01       	movw	r22, r24
    5042:	85 eb       	ldi	r24, 0xB5	; 181
    5044:	93 e0       	ldi	r25, 0x03	; 3
    5046:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    504a:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN7Globals12_tdsRelayPinE>
    504e:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN7Globals12_tdsRelayPinE+0x1>
    5052:	81 e9       	ldi	r24, 0x91	; 145
    5054:	93 e0       	ldi	r25, 0x03	; 3
    5056:	bc 01       	movw	r22, r24
    5058:	ce 01       	movw	r24, r28
    505a:	01 96       	adiw	r24, 0x01	; 1
    505c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <_ZN7LCDBaseC1ERKS_>
    5060:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    5064:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    5068:	78 01       	movw	r14, r16
    506a:	9e 01       	movw	r18, r28
    506c:	2f 5f       	subi	r18, 0xFF	; 255
    506e:	3f 4f       	sbci	r19, 0xFF	; 255
    5070:	89 01       	movw	r16, r18
    5072:	21 e0       	ldi	r18, 0x01	; 1
    5074:	48 ee       	ldi	r20, 0xE8	; 232
    5076:	53 e0       	ldi	r21, 0x03	; 3
    5078:	bc 01       	movw	r22, r24
    507a:	86 e4       	ldi	r24, 0x46	; 70
    507c:	94 e0       	ldi	r25, 0x04	; 4
    507e:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <_ZN9TDSSensorC1Eiib7LCDBasei>
    5082:	ce 01       	movw	r24, r28
    5084:	87 5b       	subi	r24, 0xB7	; 183
    5086:	9f 4f       	sbci	r25, 0xFF	; 255
    5088:	fc 01       	movw	r30, r24
    508a:	80 81       	ld	r24, Z
    508c:	91 81       	ldd	r25, Z+1	; 0x01
    508e:	89 2b       	or	r24, r25
    5090:	71 f4       	brne	.+28     	; 0x50ae <_Z41__static_initialization_and_destruction_0ii+0xea>
    5092:	ce 01       	movw	r24, r28
    5094:	85 5b       	subi	r24, 0xB5	; 181
    5096:	9f 4f       	sbci	r25, 0xFF	; 255
    5098:	fc 01       	movw	r30, r24
    509a:	80 81       	ld	r24, Z
    509c:	91 81       	ldd	r25, Z+1	; 0x01
    509e:	01 96       	adiw	r24, 0x01	; 1
    50a0:	31 f4       	brne	.+12     	; 0x50ae <_Z41__static_initialization_and_destruction_0ii+0xea>
    50a2:	86 e4       	ldi	r24, 0x46	; 70
    50a4:	94 e0       	ldi	r25, 0x04	; 4
    50a6:	54 df       	rcall	.-344    	; 0x4f50 <_ZN9TDSSensorD1Ev>
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    50a8:	85 eb       	ldi	r24, 0xB5	; 181
    50aa:	93 e0       	ldi	r25, 0x03	; 3
    50ac:	33 df       	rcall	.-410    	; 0x4f14 <_ZN8PHSensorD1Ev>
            TheTDSSensor.TurnOff();//signal mofset
            ThePHSensor.TurnOn();
        }
    }

}
    50ae:	c4 5b       	subi	r28, 0xB4	; 180
    50b0:	df 4f       	sbci	r29, 0xFF	; 255
    50b2:	e6 e0       	ldi	r30, 0x06	; 6
    50b4:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

000050b8 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    50b8:	a0 e0       	ldi	r26, 0x00	; 0
    50ba:	b0 e0       	ldi	r27, 0x00	; 0
    50bc:	e2 e6       	ldi	r30, 0x62	; 98
    50be:	f8 e2       	ldi	r31, 0x28	; 40
    50c0:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    50c4:	6f ef       	ldi	r22, 0xFF	; 255
    50c6:	7f ef       	ldi	r23, 0xFF	; 255
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	7b df       	rcall	.-266    	; 0x4fc4 <_Z41__static_initialization_and_destruction_0ii>
    50ce:	e2 e0       	ldi	r30, 0x02	; 2
    50d0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000050d4 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    50d4:	a0 e0       	ldi	r26, 0x00	; 0
    50d6:	b0 e0       	ldi	r27, 0x00	; 0
    50d8:	e0 e7       	ldi	r30, 0x70	; 112
    50da:	f8 e2       	ldi	r31, 0x28	; 40
    50dc:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    50e0:	6f ef       	ldi	r22, 0xFF	; 255
    50e2:	7f ef       	ldi	r23, 0xFF	; 255
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	6d df       	rcall	.-294    	; 0x4fc4 <_Z41__static_initialization_and_destruction_0ii>
    50ea:	e2 e0       	ldi	r30, 0x02	; 2
    50ec:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000050f0 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    50f0:	a6 e0       	ldi	r26, 0x06	; 6
    50f2:	b0 e0       	ldi	r27, 0x00	; 0
    50f4:	ee e7       	ldi	r30, 0x7E	; 126
    50f6:	f8 e2       	ldi	r31, 0x28	; 40
    50f8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    50fc:	9a 83       	std	Y+2, r25	; 0x02
    50fe:	89 83       	std	Y+1, r24	; 0x01
    5100:	4b 83       	std	Y+3, r20	; 0x03
    5102:	5c 83       	std	Y+4, r21	; 0x04
    5104:	6d 83       	std	Y+5, r22	; 0x05
    5106:	7e 83       	std	Y+6, r23	; 0x06
    5108:	8b 81       	ldd	r24, Y+3	; 0x03
    510a:	9c 81       	ldd	r25, Y+4	; 0x04
    510c:	ad 81       	ldd	r26, Y+5	; 0x05
    510e:	be 81       	ldd	r27, Y+6	; 0x06
    5110:	e9 81       	ldd	r30, Y+1	; 0x01
    5112:	fa 81       	ldd	r31, Y+2	; 0x02
    5114:	26 e0       	ldi	r18, 0x06	; 6
    5116:	ac 01       	movw	r20, r24
    5118:	bd 01       	movw	r22, r26
    511a:	cf 01       	movw	r24, r30
    511c:	03 d4       	rcall	.+2054   	; 0x5924 <_ZN14HardwareSerial5beginEmh>
    511e:	26 96       	adiw	r28, 0x06	; 6
    5120:	e2 e0       	ldi	r30, 0x02	; 2
    5122:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00005126 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    5126:	a2 e0       	ldi	r26, 0x02	; 2
    5128:	b0 e0       	ldi	r27, 0x00	; 0
    512a:	e9 e9       	ldi	r30, 0x99	; 153
    512c:	f8 e2       	ldi	r31, 0x28	; 40
    512e:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    5132:	9a 83       	std	Y+2, r25	; 0x02
    5134:	89 83       	std	Y+1, r24	; 0x01
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	22 96       	adiw	r28, 0x02	; 2
    513a:	e2 e0       	ldi	r30, 0x02	; 2
    513c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00005140 <setup>:
SimpleTimer _asyncTimer;


void AsyncDoWork();

void setup(void) {
    5140:	a0 e0       	ldi	r26, 0x00	; 0
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	e6 ea       	ldi	r30, 0xA6	; 166
    5146:	f8 e2       	ldi	r31, 0x28	; 40
    5148:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    514c:	40 e0       	ldi	r20, 0x00	; 0
    514e:	51 ee       	ldi	r21, 0xE1	; 225
    5150:	60 e0       	ldi	r22, 0x00	; 0
    5152:	70 e0       	ldi	r23, 0x00	; 0
    5154:	86 e8       	ldi	r24, 0x86	; 134
    5156:	95 e0       	ldi	r25, 0x05	; 5
    5158:	cb df       	rcall	.-106    	; 0x50f0 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    515a:	00 00       	nop
    515c:	86 e8       	ldi	r24, 0x86	; 134
    515e:	95 e0       	ldi	r25, 0x05	; 5
    5160:	e2 df       	rcall	.-60     	; 0x5126 <_ZN14HardwareSerialcvbEv>
    5162:	98 2f       	mov	r25, r24
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	89 27       	eor	r24, r25
    5168:	88 23       	and	r24, r24
    516a:	c1 f7       	brne	.-16     	; 0x515c <setup+0x1c>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    516c:	89 e0       	ldi	r24, 0x09	; 9
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	88 70       	andi	r24, 0x08	; 8
    5172:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    5174:	89 2b       	or	r24, r25
    5176:	11 f0       	breq	.+4      	; 0x517c <setup+0x3c>
    5178:	88 e2       	ldi	r24, 0x28	; 40
    517a:	01 c0       	rjmp	.+2      	; 0x517e <setup+0x3e>
    517c:	88 e0       	ldi	r24, 0x08	; 8
    517e:	99 e0       	ldi	r25, 0x09	; 9
    5180:	97 70       	andi	r25, 0x07	; 7
    5182:	89 2b       	or	r24, r25
    5184:	98 2f       	mov	r25, r24
    5186:	88 e1       	ldi	r24, 0x18	; 24
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	a8 95       	wdr
    518e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

    wdt_enable(WDTO_8S);

    WaterSensorWire::Setup();
    5198:	10 da       	rcall	.-3040   	; 0x45ba <_ZN15WaterSensorWire5SetupEv>
    ThePHSensor.TurnOn();
    519a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    519e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    51a2:	0e 94 12 1c 	call	0x3824	; 0x3824 <_ZN8PHSensor6TurnOnEv>

    _asyncTimer.setInterval(1000, AsyncDoWork); //todo: set to 1000;
    51a6:	29 ef       	ldi	r18, 0xF9	; 249
    51a8:	38 e2       	ldi	r19, 0x28	; 40
    51aa:	48 ee       	ldi	r20, 0xE8	; 232
    51ac:	53 e0       	ldi	r21, 0x03	; 3
    51ae:	60 e0       	ldi	r22, 0x00	; 0
    51b0:	70 e0       	ldi	r23, 0x00	; 0
    51b2:	8c ec       	ldi	r24, 0xCC	; 204
    51b4:	94 e0       	ldi	r25, 0x04	; 4
    51b6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    51ba:	e2 e0       	ldi	r30, 0x02	; 2
    51bc:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000051c0 <loop>:

//String _request;
//String _response;
void loop(void) {
    51c0:	a0 e0       	ldi	r26, 0x00	; 0
    51c2:	b0 e0       	ldi	r27, 0x00	; 0
    51c4:	e6 ee       	ldi	r30, 0xE6	; 230
    51c6:	f8 e2       	ldi	r31, 0x28	; 40
    51c8:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>

    _asyncTimer.run();
    51cc:	8c ec       	ldi	r24, 0xCC	; 204
    51ce:	94 e0       	ldi	r25, 0x04	; 4
    51d0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN11SimpleTimer3runEv>

    ThePHSensor.PrintPHToLCD();
    51d4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    51d8:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    51dc:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN8PHSensor12PrintPHToLCDEv>
    TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    51e0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    51e4:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    51e8:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    51ec:	e2 e0       	ldi	r30, 0x02	; 2
    51ee:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

000051f2 <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    51f2:	a0 e0       	ldi	r26, 0x00	; 0
    51f4:	b0 e0       	ldi	r27, 0x00	; 0
    51f6:	ef ef       	ldi	r30, 0xFF	; 255
    51f8:	f8 e2       	ldi	r31, 0x28	; 40
    51fa:	0c 94 ee 34 	jmp	0x69dc	; 0x69dc <__prologue_saves__+0x18>

    wdt_reset();
    51fe:	a8 95       	wdr

    static unsigned long lastSensorReadTime = millis();
    5200:	8a e7       	ldi	r24, 0x7A	; 122
    5202:	95 e0       	ldi	r25, 0x05	; 5
    5204:	fc 01       	movw	r30, r24
    5206:	80 81       	ld	r24, Z
    5208:	88 23       	and	r24, r24
    520a:	81 f4       	brne	.+32     	; 0x522c <_Z11AsyncDoWorkv+0x3a>
    520c:	1f d7       	rcall	.+3646   	; 0x604c <millis>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    5216:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    521a:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    521e:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    5222:	8a e7       	ldi	r24, 0x7A	; 122
    5224:	95 e0       	ldi	r25, 0x05	; 5
    5226:	21 e0       	ldi	r18, 0x01	; 1
    5228:	fc 01       	movw	r30, r24
    522a:	20 83       	st	Z, r18

    if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    522c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals6TheLCDE>
    5230:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals6TheLCDE+0x1>
    5234:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN7LCDBase14DetectKeyPressEv>
    5238:	98 2f       	mov	r25, r24
    523a:	81 e0       	ldi	r24, 0x01	; 1
    523c:	94 30       	cpi	r25, 0x04	; 4
    523e:	09 f0       	breq	.+2      	; 0x5242 <_Z11AsyncDoWorkv+0x50>
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	88 23       	and	r24, r24
    5244:	91 f0       	breq	.+36     	; 0x526a <_Z11AsyncDoWorkv+0x78>
        Serial.println(F("[Selelct] Pressed"));
    5246:	84 e5       	ldi	r24, 0x54	; 84
    5248:	94 e0       	ldi	r25, 0x04	; 4
    524a:	bc 01       	movw	r22, r24
    524c:	86 e8       	ldi	r24, 0x86	; 134
    524e:	95 e0       	ldi	r25, 0x05	; 5
    5250:	e3 d4       	rcall	.+2502   	; 0x5c18 <_ZN5Print7printlnEPK19__FlashStringHelper>
        SwitchSensors();
    5252:	96 de       	rcall	.-724    	; 0x4f80 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    5254:	fb d6       	rcall	.+3574   	; 0x604c <millis>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    525e:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    5262:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    5266:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    SensorReadDuration = millis() - lastSensorReadTime;
    526a:	f0 d6       	rcall	.+3552   	; 0x604c <millis>
    526c:	9b 01       	movw	r18, r22
    526e:	ac 01       	movw	r20, r24
    5270:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    5274:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    5278:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    527c:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    5280:	79 01       	movw	r14, r18
    5282:	8a 01       	movw	r16, r20
    5284:	e8 1a       	sub	r14, r24
    5286:	f9 0a       	sbc	r15, r25
    5288:	0a 0b       	sbc	r16, r26
    528a:	1b 0b       	sbc	r17, r27
    528c:	d8 01       	movw	r26, r16
    528e:	c7 01       	movw	r24, r14
    5290:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <_ZN7Globals18SensorReadDurationE>
    5294:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <_ZN7Globals18SensorReadDurationE+0x1>
    5298:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <_ZN7Globals18SensorReadDurationE+0x2>
    529c:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <_ZN7Globals18SensorReadDurationE+0x3>
    WaterSensorWire::Loop();
    52a0:	b4 d9       	rcall	.-3224   	; 0x460a <_ZN15WaterSensorWire4LoopEv>
    if(SensorReadDuration > SensorReadInterval) {
    52a2:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <_ZN7Globals18SensorReadDurationE>
    52a6:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <_ZN7Globals18SensorReadDurationE+0x1>
    52aa:	40 91 8f 03 	lds	r20, 0x038F	; 0x80038f <_ZN7Globals18SensorReadDurationE+0x2>
    52ae:	50 91 90 03 	lds	r21, 0x0390	; 0x800390 <_ZN7Globals18SensorReadDurationE+0x3>
    52b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    52b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    52ba:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    52be:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    52c2:	82 17       	cp	r24, r18
    52c4:	93 07       	cpc	r25, r19
    52c6:	a4 07       	cpc	r26, r20
    52c8:	b5 07       	cpc	r27, r21
    52ca:	64 f4       	brge	.+24     	; 0x52e4 <_Z11AsyncDoWorkv+0xf2>

        SwitchSensors();
    52cc:	59 de       	rcall	.-846    	; 0x4f80 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    52ce:	be d6       	rcall	.+3452   	; 0x604c <millis>
    52d0:	dc 01       	movw	r26, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    52d8:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    52dc:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    52e0:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    if(ReadingTDS) {
    52e4:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_ZN7Globals10ReadingTDSE>
    52e8:	88 23       	and	r24, r24
    52ea:	39 f0       	breq	.+14     	; 0x52fa <_Z11AsyncDoWorkv+0x108>
        TheTDSSensor.CalculateTDS();
    52ec:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN7Globals12TheTDSSensorE>
    52f0:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN7Globals12TheTDSSensorE+0x1>
    52f4:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <_ZN9TDSSensor12CalculateTDSEv>
    52f8:	06 c0       	rjmp	.+12     	; 0x5306 <_Z11AsyncDoWorkv+0x114>
    }
    else {
        ThePHSensor.CalculatePH();
    52fa:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals11ThePHSensorE>
    52fe:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals11ThePHSensorE+0x1>
    5302:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN8PHSensor11CalculatePHEv>
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    5306:	e6 e0       	ldi	r30, 0x06	; 6
    5308:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <__epilogue_restores__+0x18>

0000530c <_Z41__static_initialization_and_destruction_0ii>:
    530c:	a4 e0       	ldi	r26, 0x04	; 4
    530e:	b0 e0       	ldi	r27, 0x00	; 0
    5310:	ec e8       	ldi	r30, 0x8C	; 140
    5312:	f9 e2       	ldi	r31, 0x29	; 41
    5314:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    5318:	9a 83       	std	Y+2, r25	; 0x02
    531a:	89 83       	std	Y+1, r24	; 0x01
    531c:	7c 83       	std	Y+4, r23	; 0x04
    531e:	6b 83       	std	Y+3, r22	; 0x03
    5320:	89 81       	ldd	r24, Y+1	; 0x01
    5322:	9a 81       	ldd	r25, Y+2	; 0x02
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	41 f4       	brne	.+16     	; 0x5338 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    5328:	8b 81       	ldd	r24, Y+3	; 0x03
    532a:	9c 81       	ldd	r25, Y+4	; 0x04
    532c:	01 96       	adiw	r24, 0x01	; 1
    532e:	21 f4       	brne	.+8      	; 0x5338 <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    5330:	8c ec       	ldi	r24, 0xCC	; 204
    5332:	94 e0       	ldi	r25, 0x04	; 4
    5334:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN11SimpleTimerC1Ev>
        ThePHSensor.CalculatePH();
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    5338:	24 96       	adiw	r28, 0x04	; 4
    533a:	e2 e0       	ldi	r30, 0x02	; 2
    533c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

00005340 <_GLOBAL__sub_I__asyncTimer>:
    5340:	a0 e0       	ldi	r26, 0x00	; 0
    5342:	b0 e0       	ldi	r27, 0x00	; 0
    5344:	e6 ea       	ldi	r30, 0xA6	; 166
    5346:	f9 e2       	ldi	r31, 0x29	; 41
    5348:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__prologue_saves__+0x20>
    534c:	6f ef       	ldi	r22, 0xFF	; 255
    534e:	7f ef       	ldi	r23, 0xFF	; 255
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	db df       	rcall	.-74     	; 0x530c <_Z41__static_initialization_and_destruction_0ii>
    5356:	e2 e0       	ldi	r30, 0x02	; 2
    5358:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__epilogue_restores__+0x20>

0000535c <__subsf3>:
    535c:	50 58       	subi	r21, 0x80	; 128

0000535e <__addsf3>:
    535e:	bb 27       	eor	r27, r27
    5360:	aa 27       	eor	r26, r26
    5362:	0e d0       	rcall	.+28     	; 0x5380 <__addsf3x>
    5364:	75 c1       	rjmp	.+746    	; 0x5650 <__fp_round>
    5366:	66 d1       	rcall	.+716    	; 0x5634 <__fp_pscA>
    5368:	30 f0       	brcs	.+12     	; 0x5376 <__addsf3+0x18>
    536a:	6b d1       	rcall	.+726    	; 0x5642 <__fp_pscB>
    536c:	20 f0       	brcs	.+8      	; 0x5376 <__addsf3+0x18>
    536e:	31 f4       	brne	.+12     	; 0x537c <__addsf3+0x1e>
    5370:	9f 3f       	cpi	r25, 0xFF	; 255
    5372:	11 f4       	brne	.+4      	; 0x5378 <__addsf3+0x1a>
    5374:	1e f4       	brtc	.+6      	; 0x537c <__addsf3+0x1e>
    5376:	5b c1       	rjmp	.+694    	; 0x562e <__fp_nan>
    5378:	0e f4       	brtc	.+2      	; 0x537c <__addsf3+0x1e>
    537a:	e0 95       	com	r30
    537c:	e7 fb       	bst	r30, 7
    537e:	51 c1       	rjmp	.+674    	; 0x5622 <__fp_inf>

00005380 <__addsf3x>:
    5380:	e9 2f       	mov	r30, r25
    5382:	77 d1       	rcall	.+750    	; 0x5672 <__fp_split3>
    5384:	80 f3       	brcs	.-32     	; 0x5366 <__addsf3+0x8>
    5386:	ba 17       	cp	r27, r26
    5388:	62 07       	cpc	r22, r18
    538a:	73 07       	cpc	r23, r19
    538c:	84 07       	cpc	r24, r20
    538e:	95 07       	cpc	r25, r21
    5390:	18 f0       	brcs	.+6      	; 0x5398 <__addsf3x+0x18>
    5392:	71 f4       	brne	.+28     	; 0x53b0 <__addsf3x+0x30>
    5394:	9e f5       	brtc	.+102    	; 0x53fc <__addsf3x+0x7c>
    5396:	8f c1       	rjmp	.+798    	; 0x56b6 <__fp_zero>
    5398:	0e f4       	brtc	.+2      	; 0x539c <__addsf3x+0x1c>
    539a:	e0 95       	com	r30
    539c:	0b 2e       	mov	r0, r27
    539e:	ba 2f       	mov	r27, r26
    53a0:	a0 2d       	mov	r26, r0
    53a2:	0b 01       	movw	r0, r22
    53a4:	b9 01       	movw	r22, r18
    53a6:	90 01       	movw	r18, r0
    53a8:	0c 01       	movw	r0, r24
    53aa:	ca 01       	movw	r24, r20
    53ac:	a0 01       	movw	r20, r0
    53ae:	11 24       	eor	r1, r1
    53b0:	ff 27       	eor	r31, r31
    53b2:	59 1b       	sub	r21, r25
    53b4:	99 f0       	breq	.+38     	; 0x53dc <__addsf3x+0x5c>
    53b6:	59 3f       	cpi	r21, 0xF9	; 249
    53b8:	50 f4       	brcc	.+20     	; 0x53ce <__addsf3x+0x4e>
    53ba:	50 3e       	cpi	r21, 0xE0	; 224
    53bc:	68 f1       	brcs	.+90     	; 0x5418 <__addsf3x+0x98>
    53be:	1a 16       	cp	r1, r26
    53c0:	f0 40       	sbci	r31, 0x00	; 0
    53c2:	a2 2f       	mov	r26, r18
    53c4:	23 2f       	mov	r18, r19
    53c6:	34 2f       	mov	r19, r20
    53c8:	44 27       	eor	r20, r20
    53ca:	58 5f       	subi	r21, 0xF8	; 248
    53cc:	f3 cf       	rjmp	.-26     	; 0x53b4 <__addsf3x+0x34>
    53ce:	46 95       	lsr	r20
    53d0:	37 95       	ror	r19
    53d2:	27 95       	ror	r18
    53d4:	a7 95       	ror	r26
    53d6:	f0 40       	sbci	r31, 0x00	; 0
    53d8:	53 95       	inc	r21
    53da:	c9 f7       	brne	.-14     	; 0x53ce <__addsf3x+0x4e>
    53dc:	7e f4       	brtc	.+30     	; 0x53fc <__addsf3x+0x7c>
    53de:	1f 16       	cp	r1, r31
    53e0:	ba 0b       	sbc	r27, r26
    53e2:	62 0b       	sbc	r22, r18
    53e4:	73 0b       	sbc	r23, r19
    53e6:	84 0b       	sbc	r24, r20
    53e8:	ba f0       	brmi	.+46     	; 0x5418 <__addsf3x+0x98>
    53ea:	91 50       	subi	r25, 0x01	; 1
    53ec:	a1 f0       	breq	.+40     	; 0x5416 <__addsf3x+0x96>
    53ee:	ff 0f       	add	r31, r31
    53f0:	bb 1f       	adc	r27, r27
    53f2:	66 1f       	adc	r22, r22
    53f4:	77 1f       	adc	r23, r23
    53f6:	88 1f       	adc	r24, r24
    53f8:	c2 f7       	brpl	.-16     	; 0x53ea <__addsf3x+0x6a>
    53fa:	0e c0       	rjmp	.+28     	; 0x5418 <__addsf3x+0x98>
    53fc:	ba 0f       	add	r27, r26
    53fe:	62 1f       	adc	r22, r18
    5400:	73 1f       	adc	r23, r19
    5402:	84 1f       	adc	r24, r20
    5404:	48 f4       	brcc	.+18     	; 0x5418 <__addsf3x+0x98>
    5406:	87 95       	ror	r24
    5408:	77 95       	ror	r23
    540a:	67 95       	ror	r22
    540c:	b7 95       	ror	r27
    540e:	f7 95       	ror	r31
    5410:	9e 3f       	cpi	r25, 0xFE	; 254
    5412:	08 f0       	brcs	.+2      	; 0x5416 <__addsf3x+0x96>
    5414:	b3 cf       	rjmp	.-154    	; 0x537c <__addsf3+0x1e>
    5416:	93 95       	inc	r25
    5418:	88 0f       	add	r24, r24
    541a:	08 f0       	brcs	.+2      	; 0x541e <__addsf3x+0x9e>
    541c:	99 27       	eor	r25, r25
    541e:	ee 0f       	add	r30, r30
    5420:	97 95       	ror	r25
    5422:	87 95       	ror	r24
    5424:	08 95       	ret

00005426 <__cmpsf2>:
    5426:	d9 d0       	rcall	.+434    	; 0x55da <__fp_cmp>
    5428:	08 f4       	brcc	.+2      	; 0x542c <__cmpsf2+0x6>
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	08 95       	ret

0000542e <__divsf3>:
    542e:	0c d0       	rcall	.+24     	; 0x5448 <__divsf3x>
    5430:	0f c1       	rjmp	.+542    	; 0x5650 <__fp_round>
    5432:	07 d1       	rcall	.+526    	; 0x5642 <__fp_pscB>
    5434:	40 f0       	brcs	.+16     	; 0x5446 <__divsf3+0x18>
    5436:	fe d0       	rcall	.+508    	; 0x5634 <__fp_pscA>
    5438:	30 f0       	brcs	.+12     	; 0x5446 <__divsf3+0x18>
    543a:	21 f4       	brne	.+8      	; 0x5444 <__divsf3+0x16>
    543c:	5f 3f       	cpi	r21, 0xFF	; 255
    543e:	19 f0       	breq	.+6      	; 0x5446 <__divsf3+0x18>
    5440:	f0 c0       	rjmp	.+480    	; 0x5622 <__fp_inf>
    5442:	51 11       	cpse	r21, r1
    5444:	39 c1       	rjmp	.+626    	; 0x56b8 <__fp_szero>
    5446:	f3 c0       	rjmp	.+486    	; 0x562e <__fp_nan>

00005448 <__divsf3x>:
    5448:	14 d1       	rcall	.+552    	; 0x5672 <__fp_split3>
    544a:	98 f3       	brcs	.-26     	; 0x5432 <__divsf3+0x4>

0000544c <__divsf3_pse>:
    544c:	99 23       	and	r25, r25
    544e:	c9 f3       	breq	.-14     	; 0x5442 <__divsf3+0x14>
    5450:	55 23       	and	r21, r21
    5452:	b1 f3       	breq	.-20     	; 0x5440 <__divsf3+0x12>
    5454:	95 1b       	sub	r25, r21
    5456:	55 0b       	sbc	r21, r21
    5458:	bb 27       	eor	r27, r27
    545a:	aa 27       	eor	r26, r26
    545c:	62 17       	cp	r22, r18
    545e:	73 07       	cpc	r23, r19
    5460:	84 07       	cpc	r24, r20
    5462:	38 f0       	brcs	.+14     	; 0x5472 <__divsf3_pse+0x26>
    5464:	9f 5f       	subi	r25, 0xFF	; 255
    5466:	5f 4f       	sbci	r21, 0xFF	; 255
    5468:	22 0f       	add	r18, r18
    546a:	33 1f       	adc	r19, r19
    546c:	44 1f       	adc	r20, r20
    546e:	aa 1f       	adc	r26, r26
    5470:	a9 f3       	breq	.-22     	; 0x545c <__divsf3_pse+0x10>
    5472:	33 d0       	rcall	.+102    	; 0x54da <__divsf3_pse+0x8e>
    5474:	0e 2e       	mov	r0, r30
    5476:	3a f0       	brmi	.+14     	; 0x5486 <__divsf3_pse+0x3a>
    5478:	e0 e8       	ldi	r30, 0x80	; 128
    547a:	30 d0       	rcall	.+96     	; 0x54dc <__divsf3_pse+0x90>
    547c:	91 50       	subi	r25, 0x01	; 1
    547e:	50 40       	sbci	r21, 0x00	; 0
    5480:	e6 95       	lsr	r30
    5482:	00 1c       	adc	r0, r0
    5484:	ca f7       	brpl	.-14     	; 0x5478 <__divsf3_pse+0x2c>
    5486:	29 d0       	rcall	.+82     	; 0x54da <__divsf3_pse+0x8e>
    5488:	fe 2f       	mov	r31, r30
    548a:	27 d0       	rcall	.+78     	; 0x54da <__divsf3_pse+0x8e>
    548c:	66 0f       	add	r22, r22
    548e:	77 1f       	adc	r23, r23
    5490:	88 1f       	adc	r24, r24
    5492:	bb 1f       	adc	r27, r27
    5494:	26 17       	cp	r18, r22
    5496:	37 07       	cpc	r19, r23
    5498:	48 07       	cpc	r20, r24
    549a:	ab 07       	cpc	r26, r27
    549c:	b0 e8       	ldi	r27, 0x80	; 128
    549e:	09 f0       	breq	.+2      	; 0x54a2 <__divsf3_pse+0x56>
    54a0:	bb 0b       	sbc	r27, r27
    54a2:	80 2d       	mov	r24, r0
    54a4:	bf 01       	movw	r22, r30
    54a6:	ff 27       	eor	r31, r31
    54a8:	93 58       	subi	r25, 0x83	; 131
    54aa:	5f 4f       	sbci	r21, 0xFF	; 255
    54ac:	2a f0       	brmi	.+10     	; 0x54b8 <__divsf3_pse+0x6c>
    54ae:	9e 3f       	cpi	r25, 0xFE	; 254
    54b0:	51 05       	cpc	r21, r1
    54b2:	68 f0       	brcs	.+26     	; 0x54ce <__divsf3_pse+0x82>
    54b4:	b6 c0       	rjmp	.+364    	; 0x5622 <__fp_inf>
    54b6:	00 c1       	rjmp	.+512    	; 0x56b8 <__fp_szero>
    54b8:	5f 3f       	cpi	r21, 0xFF	; 255
    54ba:	ec f3       	brlt	.-6      	; 0x54b6 <__divsf3_pse+0x6a>
    54bc:	98 3e       	cpi	r25, 0xE8	; 232
    54be:	dc f3       	brlt	.-10     	; 0x54b6 <__divsf3_pse+0x6a>
    54c0:	86 95       	lsr	r24
    54c2:	77 95       	ror	r23
    54c4:	67 95       	ror	r22
    54c6:	b7 95       	ror	r27
    54c8:	f7 95       	ror	r31
    54ca:	9f 5f       	subi	r25, 0xFF	; 255
    54cc:	c9 f7       	brne	.-14     	; 0x54c0 <__divsf3_pse+0x74>
    54ce:	88 0f       	add	r24, r24
    54d0:	91 1d       	adc	r25, r1
    54d2:	96 95       	lsr	r25
    54d4:	87 95       	ror	r24
    54d6:	97 f9       	bld	r25, 7
    54d8:	08 95       	ret
    54da:	e1 e0       	ldi	r30, 0x01	; 1
    54dc:	66 0f       	add	r22, r22
    54de:	77 1f       	adc	r23, r23
    54e0:	88 1f       	adc	r24, r24
    54e2:	bb 1f       	adc	r27, r27
    54e4:	62 17       	cp	r22, r18
    54e6:	73 07       	cpc	r23, r19
    54e8:	84 07       	cpc	r24, r20
    54ea:	ba 07       	cpc	r27, r26
    54ec:	20 f0       	brcs	.+8      	; 0x54f6 <__divsf3_pse+0xaa>
    54ee:	62 1b       	sub	r22, r18
    54f0:	73 0b       	sbc	r23, r19
    54f2:	84 0b       	sbc	r24, r20
    54f4:	ba 0b       	sbc	r27, r26
    54f6:	ee 1f       	adc	r30, r30
    54f8:	88 f7       	brcc	.-30     	; 0x54dc <__divsf3_pse+0x90>
    54fa:	e0 95       	com	r30
    54fc:	08 95       	ret

000054fe <__fixsfsi>:
    54fe:	04 d0       	rcall	.+8      	; 0x5508 <__fixunssfsi>
    5500:	68 94       	set
    5502:	b1 11       	cpse	r27, r1
    5504:	d9 c0       	rjmp	.+434    	; 0x56b8 <__fp_szero>
    5506:	08 95       	ret

00005508 <__fixunssfsi>:
    5508:	bc d0       	rcall	.+376    	; 0x5682 <__fp_splitA>
    550a:	88 f0       	brcs	.+34     	; 0x552e <__fixunssfsi+0x26>
    550c:	9f 57       	subi	r25, 0x7F	; 127
    550e:	90 f0       	brcs	.+36     	; 0x5534 <__fixunssfsi+0x2c>
    5510:	b9 2f       	mov	r27, r25
    5512:	99 27       	eor	r25, r25
    5514:	b7 51       	subi	r27, 0x17	; 23
    5516:	a0 f0       	brcs	.+40     	; 0x5540 <__fixunssfsi+0x38>
    5518:	d1 f0       	breq	.+52     	; 0x554e <__fixunssfsi+0x46>
    551a:	66 0f       	add	r22, r22
    551c:	77 1f       	adc	r23, r23
    551e:	88 1f       	adc	r24, r24
    5520:	99 1f       	adc	r25, r25
    5522:	1a f0       	brmi	.+6      	; 0x552a <__fixunssfsi+0x22>
    5524:	ba 95       	dec	r27
    5526:	c9 f7       	brne	.-14     	; 0x551a <__fixunssfsi+0x12>
    5528:	12 c0       	rjmp	.+36     	; 0x554e <__fixunssfsi+0x46>
    552a:	b1 30       	cpi	r27, 0x01	; 1
    552c:	81 f0       	breq	.+32     	; 0x554e <__fixunssfsi+0x46>
    552e:	c3 d0       	rcall	.+390    	; 0x56b6 <__fp_zero>
    5530:	b1 e0       	ldi	r27, 0x01	; 1
    5532:	08 95       	ret
    5534:	c0 c0       	rjmp	.+384    	; 0x56b6 <__fp_zero>
    5536:	67 2f       	mov	r22, r23
    5538:	78 2f       	mov	r23, r24
    553a:	88 27       	eor	r24, r24
    553c:	b8 5f       	subi	r27, 0xF8	; 248
    553e:	39 f0       	breq	.+14     	; 0x554e <__fixunssfsi+0x46>
    5540:	b9 3f       	cpi	r27, 0xF9	; 249
    5542:	cc f3       	brlt	.-14     	; 0x5536 <__fixunssfsi+0x2e>
    5544:	86 95       	lsr	r24
    5546:	77 95       	ror	r23
    5548:	67 95       	ror	r22
    554a:	b3 95       	inc	r27
    554c:	d9 f7       	brne	.-10     	; 0x5544 <__fixunssfsi+0x3c>
    554e:	3e f4       	brtc	.+14     	; 0x555e <__fixunssfsi+0x56>
    5550:	90 95       	com	r25
    5552:	80 95       	com	r24
    5554:	70 95       	com	r23
    5556:	61 95       	neg	r22
    5558:	7f 4f       	sbci	r23, 0xFF	; 255
    555a:	8f 4f       	sbci	r24, 0xFF	; 255
    555c:	9f 4f       	sbci	r25, 0xFF	; 255
    555e:	08 95       	ret

00005560 <__floatunsisf>:
    5560:	e8 94       	clt
    5562:	09 c0       	rjmp	.+18     	; 0x5576 <__floatsisf+0x12>

00005564 <__floatsisf>:
    5564:	97 fb       	bst	r25, 7
    5566:	3e f4       	brtc	.+14     	; 0x5576 <__floatsisf+0x12>
    5568:	90 95       	com	r25
    556a:	80 95       	com	r24
    556c:	70 95       	com	r23
    556e:	61 95       	neg	r22
    5570:	7f 4f       	sbci	r23, 0xFF	; 255
    5572:	8f 4f       	sbci	r24, 0xFF	; 255
    5574:	9f 4f       	sbci	r25, 0xFF	; 255
    5576:	99 23       	and	r25, r25
    5578:	a9 f0       	breq	.+42     	; 0x55a4 <__floatsisf+0x40>
    557a:	f9 2f       	mov	r31, r25
    557c:	96 e9       	ldi	r25, 0x96	; 150
    557e:	bb 27       	eor	r27, r27
    5580:	93 95       	inc	r25
    5582:	f6 95       	lsr	r31
    5584:	87 95       	ror	r24
    5586:	77 95       	ror	r23
    5588:	67 95       	ror	r22
    558a:	b7 95       	ror	r27
    558c:	f1 11       	cpse	r31, r1
    558e:	f8 cf       	rjmp	.-16     	; 0x5580 <__floatsisf+0x1c>
    5590:	fa f4       	brpl	.+62     	; 0x55d0 <__floatsisf+0x6c>
    5592:	bb 0f       	add	r27, r27
    5594:	11 f4       	brne	.+4      	; 0x559a <__floatsisf+0x36>
    5596:	60 ff       	sbrs	r22, 0
    5598:	1b c0       	rjmp	.+54     	; 0x55d0 <__floatsisf+0x6c>
    559a:	6f 5f       	subi	r22, 0xFF	; 255
    559c:	7f 4f       	sbci	r23, 0xFF	; 255
    559e:	8f 4f       	sbci	r24, 0xFF	; 255
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	16 c0       	rjmp	.+44     	; 0x55d0 <__floatsisf+0x6c>
    55a4:	88 23       	and	r24, r24
    55a6:	11 f0       	breq	.+4      	; 0x55ac <__floatsisf+0x48>
    55a8:	96 e9       	ldi	r25, 0x96	; 150
    55aa:	11 c0       	rjmp	.+34     	; 0x55ce <__floatsisf+0x6a>
    55ac:	77 23       	and	r23, r23
    55ae:	21 f0       	breq	.+8      	; 0x55b8 <__floatsisf+0x54>
    55b0:	9e e8       	ldi	r25, 0x8E	; 142
    55b2:	87 2f       	mov	r24, r23
    55b4:	76 2f       	mov	r23, r22
    55b6:	05 c0       	rjmp	.+10     	; 0x55c2 <__floatsisf+0x5e>
    55b8:	66 23       	and	r22, r22
    55ba:	71 f0       	breq	.+28     	; 0x55d8 <__floatsisf+0x74>
    55bc:	96 e8       	ldi	r25, 0x86	; 134
    55be:	86 2f       	mov	r24, r22
    55c0:	70 e0       	ldi	r23, 0x00	; 0
    55c2:	60 e0       	ldi	r22, 0x00	; 0
    55c4:	2a f0       	brmi	.+10     	; 0x55d0 <__floatsisf+0x6c>
    55c6:	9a 95       	dec	r25
    55c8:	66 0f       	add	r22, r22
    55ca:	77 1f       	adc	r23, r23
    55cc:	88 1f       	adc	r24, r24
    55ce:	da f7       	brpl	.-10     	; 0x55c6 <__floatsisf+0x62>
    55d0:	88 0f       	add	r24, r24
    55d2:	96 95       	lsr	r25
    55d4:	87 95       	ror	r24
    55d6:	97 f9       	bld	r25, 7
    55d8:	08 95       	ret

000055da <__fp_cmp>:
    55da:	99 0f       	add	r25, r25
    55dc:	00 08       	sbc	r0, r0
    55de:	55 0f       	add	r21, r21
    55e0:	aa 0b       	sbc	r26, r26
    55e2:	e0 e8       	ldi	r30, 0x80	; 128
    55e4:	fe ef       	ldi	r31, 0xFE	; 254
    55e6:	16 16       	cp	r1, r22
    55e8:	17 06       	cpc	r1, r23
    55ea:	e8 07       	cpc	r30, r24
    55ec:	f9 07       	cpc	r31, r25
    55ee:	c0 f0       	brcs	.+48     	; 0x5620 <__fp_cmp+0x46>
    55f0:	12 16       	cp	r1, r18
    55f2:	13 06       	cpc	r1, r19
    55f4:	e4 07       	cpc	r30, r20
    55f6:	f5 07       	cpc	r31, r21
    55f8:	98 f0       	brcs	.+38     	; 0x5620 <__fp_cmp+0x46>
    55fa:	62 1b       	sub	r22, r18
    55fc:	73 0b       	sbc	r23, r19
    55fe:	84 0b       	sbc	r24, r20
    5600:	95 0b       	sbc	r25, r21
    5602:	39 f4       	brne	.+14     	; 0x5612 <__fp_cmp+0x38>
    5604:	0a 26       	eor	r0, r26
    5606:	61 f0       	breq	.+24     	; 0x5620 <__fp_cmp+0x46>
    5608:	23 2b       	or	r18, r19
    560a:	24 2b       	or	r18, r20
    560c:	25 2b       	or	r18, r21
    560e:	21 f4       	brne	.+8      	; 0x5618 <__fp_cmp+0x3e>
    5610:	08 95       	ret
    5612:	0a 26       	eor	r0, r26
    5614:	09 f4       	brne	.+2      	; 0x5618 <__fp_cmp+0x3e>
    5616:	a1 40       	sbci	r26, 0x01	; 1
    5618:	a6 95       	lsr	r26
    561a:	8f ef       	ldi	r24, 0xFF	; 255
    561c:	81 1d       	adc	r24, r1
    561e:	81 1d       	adc	r24, r1
    5620:	08 95       	ret

00005622 <__fp_inf>:
    5622:	97 f9       	bld	r25, 7
    5624:	9f 67       	ori	r25, 0x7F	; 127
    5626:	80 e8       	ldi	r24, 0x80	; 128
    5628:	70 e0       	ldi	r23, 0x00	; 0
    562a:	60 e0       	ldi	r22, 0x00	; 0
    562c:	08 95       	ret

0000562e <__fp_nan>:
    562e:	9f ef       	ldi	r25, 0xFF	; 255
    5630:	80 ec       	ldi	r24, 0xC0	; 192
    5632:	08 95       	ret

00005634 <__fp_pscA>:
    5634:	00 24       	eor	r0, r0
    5636:	0a 94       	dec	r0
    5638:	16 16       	cp	r1, r22
    563a:	17 06       	cpc	r1, r23
    563c:	18 06       	cpc	r1, r24
    563e:	09 06       	cpc	r0, r25
    5640:	08 95       	ret

00005642 <__fp_pscB>:
    5642:	00 24       	eor	r0, r0
    5644:	0a 94       	dec	r0
    5646:	12 16       	cp	r1, r18
    5648:	13 06       	cpc	r1, r19
    564a:	14 06       	cpc	r1, r20
    564c:	05 06       	cpc	r0, r21
    564e:	08 95       	ret

00005650 <__fp_round>:
    5650:	09 2e       	mov	r0, r25
    5652:	03 94       	inc	r0
    5654:	00 0c       	add	r0, r0
    5656:	11 f4       	brne	.+4      	; 0x565c <__fp_round+0xc>
    5658:	88 23       	and	r24, r24
    565a:	52 f0       	brmi	.+20     	; 0x5670 <__fp_round+0x20>
    565c:	bb 0f       	add	r27, r27
    565e:	40 f4       	brcc	.+16     	; 0x5670 <__fp_round+0x20>
    5660:	bf 2b       	or	r27, r31
    5662:	11 f4       	brne	.+4      	; 0x5668 <__fp_round+0x18>
    5664:	60 ff       	sbrs	r22, 0
    5666:	04 c0       	rjmp	.+8      	; 0x5670 <__fp_round+0x20>
    5668:	6f 5f       	subi	r22, 0xFF	; 255
    566a:	7f 4f       	sbci	r23, 0xFF	; 255
    566c:	8f 4f       	sbci	r24, 0xFF	; 255
    566e:	9f 4f       	sbci	r25, 0xFF	; 255
    5670:	08 95       	ret

00005672 <__fp_split3>:
    5672:	57 fd       	sbrc	r21, 7
    5674:	90 58       	subi	r25, 0x80	; 128
    5676:	44 0f       	add	r20, r20
    5678:	55 1f       	adc	r21, r21
    567a:	59 f0       	breq	.+22     	; 0x5692 <__fp_splitA+0x10>
    567c:	5f 3f       	cpi	r21, 0xFF	; 255
    567e:	71 f0       	breq	.+28     	; 0x569c <__fp_splitA+0x1a>
    5680:	47 95       	ror	r20

00005682 <__fp_splitA>:
    5682:	88 0f       	add	r24, r24
    5684:	97 fb       	bst	r25, 7
    5686:	99 1f       	adc	r25, r25
    5688:	61 f0       	breq	.+24     	; 0x56a2 <__fp_splitA+0x20>
    568a:	9f 3f       	cpi	r25, 0xFF	; 255
    568c:	79 f0       	breq	.+30     	; 0x56ac <__fp_splitA+0x2a>
    568e:	87 95       	ror	r24
    5690:	08 95       	ret
    5692:	12 16       	cp	r1, r18
    5694:	13 06       	cpc	r1, r19
    5696:	14 06       	cpc	r1, r20
    5698:	55 1f       	adc	r21, r21
    569a:	f2 cf       	rjmp	.-28     	; 0x5680 <__fp_split3+0xe>
    569c:	46 95       	lsr	r20
    569e:	f1 df       	rcall	.-30     	; 0x5682 <__fp_splitA>
    56a0:	08 c0       	rjmp	.+16     	; 0x56b2 <__fp_splitA+0x30>
    56a2:	16 16       	cp	r1, r22
    56a4:	17 06       	cpc	r1, r23
    56a6:	18 06       	cpc	r1, r24
    56a8:	99 1f       	adc	r25, r25
    56aa:	f1 cf       	rjmp	.-30     	; 0x568e <__fp_splitA+0xc>
    56ac:	86 95       	lsr	r24
    56ae:	71 05       	cpc	r23, r1
    56b0:	61 05       	cpc	r22, r1
    56b2:	08 94       	sec
    56b4:	08 95       	ret

000056b6 <__fp_zero>:
    56b6:	e8 94       	clt

000056b8 <__fp_szero>:
    56b8:	bb 27       	eor	r27, r27
    56ba:	66 27       	eor	r22, r22
    56bc:	77 27       	eor	r23, r23
    56be:	cb 01       	movw	r24, r22
    56c0:	97 f9       	bld	r25, 7
    56c2:	08 95       	ret

000056c4 <__gesf2>:
    56c4:	8a df       	rcall	.-236    	; 0x55da <__fp_cmp>
    56c6:	08 f4       	brcc	.+2      	; 0x56ca <__gesf2+0x6>
    56c8:	8f ef       	ldi	r24, 0xFF	; 255
    56ca:	08 95       	ret

000056cc <__mulsf3>:
    56cc:	0b d0       	rcall	.+22     	; 0x56e4 <__mulsf3x>
    56ce:	c0 cf       	rjmp	.-128    	; 0x5650 <__fp_round>
    56d0:	b1 df       	rcall	.-158    	; 0x5634 <__fp_pscA>
    56d2:	28 f0       	brcs	.+10     	; 0x56de <__mulsf3+0x12>
    56d4:	b6 df       	rcall	.-148    	; 0x5642 <__fp_pscB>
    56d6:	18 f0       	brcs	.+6      	; 0x56de <__mulsf3+0x12>
    56d8:	95 23       	and	r25, r21
    56da:	09 f0       	breq	.+2      	; 0x56de <__mulsf3+0x12>
    56dc:	a2 cf       	rjmp	.-188    	; 0x5622 <__fp_inf>
    56de:	a7 cf       	rjmp	.-178    	; 0x562e <__fp_nan>
    56e0:	11 24       	eor	r1, r1
    56e2:	ea cf       	rjmp	.-44     	; 0x56b8 <__fp_szero>

000056e4 <__mulsf3x>:
    56e4:	c6 df       	rcall	.-116    	; 0x5672 <__fp_split3>
    56e6:	a0 f3       	brcs	.-24     	; 0x56d0 <__mulsf3+0x4>

000056e8 <__mulsf3_pse>:
    56e8:	95 9f       	mul	r25, r21
    56ea:	d1 f3       	breq	.-12     	; 0x56e0 <__mulsf3+0x14>
    56ec:	95 0f       	add	r25, r21
    56ee:	50 e0       	ldi	r21, 0x00	; 0
    56f0:	55 1f       	adc	r21, r21
    56f2:	62 9f       	mul	r22, r18
    56f4:	f0 01       	movw	r30, r0
    56f6:	72 9f       	mul	r23, r18
    56f8:	bb 27       	eor	r27, r27
    56fa:	f0 0d       	add	r31, r0
    56fc:	b1 1d       	adc	r27, r1
    56fe:	63 9f       	mul	r22, r19
    5700:	aa 27       	eor	r26, r26
    5702:	f0 0d       	add	r31, r0
    5704:	b1 1d       	adc	r27, r1
    5706:	aa 1f       	adc	r26, r26
    5708:	64 9f       	mul	r22, r20
    570a:	66 27       	eor	r22, r22
    570c:	b0 0d       	add	r27, r0
    570e:	a1 1d       	adc	r26, r1
    5710:	66 1f       	adc	r22, r22
    5712:	82 9f       	mul	r24, r18
    5714:	22 27       	eor	r18, r18
    5716:	b0 0d       	add	r27, r0
    5718:	a1 1d       	adc	r26, r1
    571a:	62 1f       	adc	r22, r18
    571c:	73 9f       	mul	r23, r19
    571e:	b0 0d       	add	r27, r0
    5720:	a1 1d       	adc	r26, r1
    5722:	62 1f       	adc	r22, r18
    5724:	83 9f       	mul	r24, r19
    5726:	a0 0d       	add	r26, r0
    5728:	61 1d       	adc	r22, r1
    572a:	22 1f       	adc	r18, r18
    572c:	74 9f       	mul	r23, r20
    572e:	33 27       	eor	r19, r19
    5730:	a0 0d       	add	r26, r0
    5732:	61 1d       	adc	r22, r1
    5734:	23 1f       	adc	r18, r19
    5736:	84 9f       	mul	r24, r20
    5738:	60 0d       	add	r22, r0
    573a:	21 1d       	adc	r18, r1
    573c:	82 2f       	mov	r24, r18
    573e:	76 2f       	mov	r23, r22
    5740:	6a 2f       	mov	r22, r26
    5742:	11 24       	eor	r1, r1
    5744:	9f 57       	subi	r25, 0x7F	; 127
    5746:	50 40       	sbci	r21, 0x00	; 0
    5748:	8a f0       	brmi	.+34     	; 0x576c <__mulsf3_pse+0x84>
    574a:	e1 f0       	breq	.+56     	; 0x5784 <__mulsf3_pse+0x9c>
    574c:	88 23       	and	r24, r24
    574e:	4a f0       	brmi	.+18     	; 0x5762 <__mulsf3_pse+0x7a>
    5750:	ee 0f       	add	r30, r30
    5752:	ff 1f       	adc	r31, r31
    5754:	bb 1f       	adc	r27, r27
    5756:	66 1f       	adc	r22, r22
    5758:	77 1f       	adc	r23, r23
    575a:	88 1f       	adc	r24, r24
    575c:	91 50       	subi	r25, 0x01	; 1
    575e:	50 40       	sbci	r21, 0x00	; 0
    5760:	a9 f7       	brne	.-22     	; 0x574c <__mulsf3_pse+0x64>
    5762:	9e 3f       	cpi	r25, 0xFE	; 254
    5764:	51 05       	cpc	r21, r1
    5766:	70 f0       	brcs	.+28     	; 0x5784 <__mulsf3_pse+0x9c>
    5768:	5c cf       	rjmp	.-328    	; 0x5622 <__fp_inf>
    576a:	a6 cf       	rjmp	.-180    	; 0x56b8 <__fp_szero>
    576c:	5f 3f       	cpi	r21, 0xFF	; 255
    576e:	ec f3       	brlt	.-6      	; 0x576a <__mulsf3_pse+0x82>
    5770:	98 3e       	cpi	r25, 0xE8	; 232
    5772:	dc f3       	brlt	.-10     	; 0x576a <__mulsf3_pse+0x82>
    5774:	86 95       	lsr	r24
    5776:	77 95       	ror	r23
    5778:	67 95       	ror	r22
    577a:	b7 95       	ror	r27
    577c:	f7 95       	ror	r31
    577e:	e7 95       	ror	r30
    5780:	9f 5f       	subi	r25, 0xFF	; 255
    5782:	c1 f7       	brne	.-16     	; 0x5774 <__mulsf3_pse+0x8c>
    5784:	fe 2b       	or	r31, r30
    5786:	88 0f       	add	r24, r24
    5788:	91 1d       	adc	r25, r1
    578a:	96 95       	lsr	r25
    578c:	87 95       	ror	r24
    578e:	97 f9       	bld	r25, 7
    5790:	08 95       	ret

00005792 <__unordsf2>:
    5792:	23 df       	rcall	.-442    	; 0x55da <__fp_cmp>
    5794:	88 0b       	sbc	r24, r24
    5796:	99 0b       	sbc	r25, r25
    5798:	08 95       	ret

0000579a <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    579a:	0e 94 8d 38 	call	0x711a	; 0x711a <abort>

0000579e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    579e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    57a0:	91 8d       	ldd	r25, Z+25	; 0x19
    57a2:	22 8d       	ldd	r18, Z+26	; 0x1a
    57a4:	89 2f       	mov	r24, r25
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	80 5c       	subi	r24, 0xC0	; 192
    57aa:	9f 4f       	sbci	r25, 0xFF	; 255
    57ac:	82 1b       	sub	r24, r18
    57ae:	91 09       	sbc	r25, r1
}
    57b0:	8f 73       	andi	r24, 0x3F	; 63
    57b2:	99 27       	eor	r25, r25
    57b4:	08 95       	ret

000057b6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    57b6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    57b8:	91 8d       	ldd	r25, Z+25	; 0x19
    57ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    57bc:	98 17       	cp	r25, r24
    57be:	31 f0       	breq	.+12     	; 0x57cc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    57c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    57c2:	e8 0f       	add	r30, r24
    57c4:	f1 1d       	adc	r31, r1
    57c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    57cc:	8f ef       	ldi	r24, 0xFF	; 255
    57ce:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    57d0:	08 95       	ret

000057d2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    57d2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    57d4:	91 8d       	ldd	r25, Z+25	; 0x19
    57d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    57d8:	98 17       	cp	r25, r24
    57da:	61 f0       	breq	.+24     	; 0x57f4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    57dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    57de:	df 01       	movw	r26, r30
    57e0:	a8 0f       	add	r26, r24
    57e2:	b1 1d       	adc	r27, r1
    57e4:	5d 96       	adiw	r26, 0x1d	; 29
    57e6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    57e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    57ea:	9f 5f       	subi	r25, 0xFF	; 255
    57ec:	9f 73       	andi	r25, 0x3F	; 63
    57ee:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    57f4:	8f ef       	ldi	r24, 0xFF	; 255
    57f6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    57f8:	08 95       	ret

000057fa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    57fa:	8c e4       	ldi	r24, 0x4C	; 76
    57fc:	9d e2       	ldi	r25, 0x2D	; 45
    57fe:	89 2b       	or	r24, r25
    5800:	41 f0       	breq	.+16     	; 0x5812 <_Z14serialEventRunv+0x18>
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	89 2b       	or	r24, r25
    5808:	21 f0       	breq	.+8      	; 0x5812 <_Z14serialEventRunv+0x18>
    580a:	46 d1       	rcall	.+652    	; 0x5a98 <_Z17Serial0_availablev>
    580c:	81 11       	cpse	r24, r1
    580e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5812:	08 95       	ret

00005814 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5814:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5816:	84 8d       	ldd	r24, Z+28	; 0x1c
    5818:	df 01       	movw	r26, r30
    581a:	a8 0f       	add	r26, r24
    581c:	b1 1d       	adc	r27, r1
    581e:	a3 5a       	subi	r26, 0xA3	; 163
    5820:	bf 4f       	sbci	r27, 0xFF	; 255
    5822:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5824:	84 8d       	ldd	r24, Z+28	; 0x1c
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	01 96       	adiw	r24, 0x01	; 1
    582a:	8f 73       	andi	r24, 0x3F	; 63
    582c:	99 27       	eor	r25, r25
    582e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5830:	a6 89       	ldd	r26, Z+22	; 0x16
    5832:	b7 89       	ldd	r27, Z+23	; 0x17
    5834:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5836:	a0 89       	ldd	r26, Z+16	; 0x10
    5838:	b1 89       	ldd	r27, Z+17	; 0x11
    583a:	8c 91       	ld	r24, X
    583c:	80 64       	ori	r24, 0x40	; 64
    583e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    5840:	93 8d       	ldd	r25, Z+27	; 0x1b
    5842:	84 8d       	ldd	r24, Z+28	; 0x1c
    5844:	98 13       	cpse	r25, r24
    5846:	06 c0       	rjmp	.+12     	; 0x5854 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5848:	02 88       	ldd	r0, Z+18	; 0x12
    584a:	f3 89       	ldd	r31, Z+19	; 0x13
    584c:	e0 2d       	mov	r30, r0
    584e:	80 81       	ld	r24, Z
    5850:	8f 7d       	andi	r24, 0xDF	; 223
    5852:	80 83       	st	Z, r24
    5854:	08 95       	ret

00005856 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5856:	cf 93       	push	r28
    5858:	df 93       	push	r29
    585a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    585c:	88 8d       	ldd	r24, Y+24	; 0x18
    585e:	88 23       	and	r24, r24
    5860:	c1 f0       	breq	.+48     	; 0x5892 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5862:	ea 89       	ldd	r30, Y+18	; 0x12
    5864:	fb 89       	ldd	r31, Y+19	; 0x13
    5866:	80 81       	ld	r24, Z
    5868:	85 fd       	sbrc	r24, 5
    586a:	05 c0       	rjmp	.+10     	; 0x5876 <_ZN14HardwareSerial5flushEv+0x20>
    586c:	a8 89       	ldd	r26, Y+16	; 0x10
    586e:	b9 89       	ldd	r27, Y+17	; 0x11
    5870:	8c 91       	ld	r24, X
    5872:	86 fd       	sbrc	r24, 6
    5874:	0e c0       	rjmp	.+28     	; 0x5892 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5876:	0f b6       	in	r0, 0x3f	; 63
    5878:	07 fc       	sbrc	r0, 7
    587a:	f5 cf       	rjmp	.-22     	; 0x5866 <_ZN14HardwareSerial5flushEv+0x10>
    587c:	80 81       	ld	r24, Z
    587e:	85 ff       	sbrs	r24, 5
    5880:	f2 cf       	rjmp	.-28     	; 0x5866 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5882:	a8 89       	ldd	r26, Y+16	; 0x10
    5884:	b9 89       	ldd	r27, Y+17	; 0x11
    5886:	8c 91       	ld	r24, X
    5888:	85 ff       	sbrs	r24, 5
    588a:	ed cf       	rjmp	.-38     	; 0x5866 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    588c:	ce 01       	movw	r24, r28
    588e:	c2 df       	rcall	.-124    	; 0x5814 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5890:	e8 cf       	rjmp	.-48     	; 0x5862 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	08 95       	ret

00005898 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    5898:	ef 92       	push	r14
    589a:	ff 92       	push	r15
    589c:	0f 93       	push	r16
    589e:	1f 93       	push	r17
    58a0:	cf 93       	push	r28
    58a2:	df 93       	push	r29
    58a4:	ec 01       	movw	r28, r24
  _written = true;
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    58aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58ae:	98 13       	cpse	r25, r24
    58b0:	05 c0       	rjmp	.+10     	; 0x58bc <_ZN14HardwareSerial5writeEh+0x24>
    58b2:	e8 89       	ldd	r30, Y+16	; 0x10
    58b4:	f9 89       	ldd	r31, Y+17	; 0x11
    58b6:	80 81       	ld	r24, Z
    58b8:	85 fd       	sbrc	r24, 5
    58ba:	23 c0       	rjmp	.+70     	; 0x5902 <_ZN14HardwareSerial5writeEh+0x6a>
    58bc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    58be:	0b 8d       	ldd	r16, Y+27	; 0x1b
    58c0:	10 e0       	ldi	r17, 0x00	; 0
    58c2:	0f 5f       	subi	r16, 0xFF	; 255
    58c4:	1f 4f       	sbci	r17, 0xFF	; 255
    58c6:	0f 73       	andi	r16, 0x3F	; 63
    58c8:	11 27       	eor	r17, r17
    58ca:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    58cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58ce:	e8 12       	cpse	r14, r24
    58d0:	0b c0       	rjmp	.+22     	; 0x58e8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    58d2:	0f b6       	in	r0, 0x3f	; 63
    58d4:	07 fc       	sbrc	r0, 7
    58d6:	fa cf       	rjmp	.-12     	; 0x58cc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    58d8:	e8 89       	ldd	r30, Y+16	; 0x10
    58da:	f9 89       	ldd	r31, Y+17	; 0x11
    58dc:	80 81       	ld	r24, Z
    58de:	85 ff       	sbrs	r24, 5
    58e0:	f5 cf       	rjmp	.-22     	; 0x58cc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    58e2:	ce 01       	movw	r24, r28
    58e4:	97 df       	rcall	.-210    	; 0x5814 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    58e6:	f2 cf       	rjmp	.-28     	; 0x58cc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    58e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58ea:	fe 01       	movw	r30, r28
    58ec:	e8 0f       	add	r30, r24
    58ee:	f1 1d       	adc	r31, r1
    58f0:	e3 5a       	subi	r30, 0xA3	; 163
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    58f6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    58f8:	ea 89       	ldd	r30, Y+18	; 0x12
    58fa:	fb 89       	ldd	r31, Y+19	; 0x13
    58fc:	80 81       	ld	r24, Z
    58fe:	80 62       	ori	r24, 0x20	; 32
    5900:	07 c0       	rjmp	.+14     	; 0x5910 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    5902:	ee 89       	ldd	r30, Y+22	; 0x16
    5904:	ff 89       	ldd	r31, Y+23	; 0x17
    5906:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    5908:	e8 89       	ldd	r30, Y+16	; 0x10
    590a:	f9 89       	ldd	r31, Y+17	; 0x11
    590c:	80 81       	ld	r24, Z
    590e:	80 64       	ori	r24, 0x40	; 64
    5910:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	df 91       	pop	r29
    5918:	cf 91       	pop	r28
    591a:	1f 91       	pop	r17
    591c:	0f 91       	pop	r16
    591e:	ff 90       	pop	r15
    5920:	ef 90       	pop	r14
    5922:	08 95       	ret

00005924 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5924:	cf 92       	push	r12
    5926:	df 92       	push	r13
    5928:	ef 92       	push	r14
    592a:	ff 92       	push	r15
    592c:	1f 93       	push	r17
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	ec 01       	movw	r28, r24
    5934:	6a 01       	movw	r12, r20
    5936:	7b 01       	movw	r14, r22
    5938:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    593a:	e8 89       	ldd	r30, Y+16	; 0x10
    593c:	f9 89       	ldd	r31, Y+17	; 0x11
    593e:	82 e0       	ldi	r24, 0x02	; 2
    5940:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5942:	41 15       	cp	r20, r1
    5944:	51 4e       	sbci	r21, 0xE1	; 225
    5946:	61 05       	cpc	r22, r1
    5948:	71 05       	cpc	r23, r1
    594a:	a9 f0       	breq	.+42     	; 0x5976 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    594c:	60 e0       	ldi	r22, 0x00	; 0
    594e:	79 e0       	ldi	r23, 0x09	; 9
    5950:	8d e3       	ldi	r24, 0x3D	; 61
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	a7 01       	movw	r20, r14
    5956:	96 01       	movw	r18, r12
    5958:	e7 d7       	rcall	.+4046   	; 0x6928 <__udivmodsi4>
    595a:	da 01       	movw	r26, r20
    595c:	c9 01       	movw	r24, r18
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	a1 09       	sbc	r26, r1
    5962:	b1 09       	sbc	r27, r1
    5964:	b6 95       	lsr	r27
    5966:	a7 95       	ror	r26
    5968:	97 95       	ror	r25
    596a:	87 95       	ror	r24
    596c:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    596e:	41 15       	cp	r20, r1
    5970:	80 e1       	ldi	r24, 0x10	; 16
    5972:	58 07       	cpc	r21, r24
    5974:	a0 f0       	brcs	.+40     	; 0x599e <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5976:	e8 89       	ldd	r30, Y+16	; 0x10
    5978:	f9 89       	ldd	r31, Y+17	; 0x11
    597a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    597c:	60 e8       	ldi	r22, 0x80	; 128
    597e:	74 e8       	ldi	r23, 0x84	; 132
    5980:	8e e1       	ldi	r24, 0x1E	; 30
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	a7 01       	movw	r20, r14
    5986:	96 01       	movw	r18, r12
    5988:	cf d7       	rcall	.+3998   	; 0x6928 <__udivmodsi4>
    598a:	ba 01       	movw	r22, r20
    598c:	a9 01       	movw	r20, r18
    598e:	41 50       	subi	r20, 0x01	; 1
    5990:	51 09       	sbc	r21, r1
    5992:	61 09       	sbc	r22, r1
    5994:	71 09       	sbc	r23, r1
    5996:	76 95       	lsr	r23
    5998:	67 95       	ror	r22
    599a:	57 95       	ror	r21
    599c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    599e:	ec 85       	ldd	r30, Y+12	; 0x0c
    59a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    59a2:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    59a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    59a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    59a8:	40 83       	st	Z, r20

  _written = false;
    59aa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    59ac:	ec 89       	ldd	r30, Y+20	; 0x14
    59ae:	fd 89       	ldd	r31, Y+21	; 0x15
    59b0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    59b2:	ea 89       	ldd	r30, Y+18	; 0x12
    59b4:	fb 89       	ldd	r31, Y+19	; 0x13
    59b6:	80 81       	ld	r24, Z
    59b8:	80 61       	ori	r24, 0x10	; 16
    59ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    59bc:	ea 89       	ldd	r30, Y+18	; 0x12
    59be:	fb 89       	ldd	r31, Y+19	; 0x13
    59c0:	80 81       	ld	r24, Z
    59c2:	88 60       	ori	r24, 0x08	; 8
    59c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    59c6:	ea 89       	ldd	r30, Y+18	; 0x12
    59c8:	fb 89       	ldd	r31, Y+19	; 0x13
    59ca:	80 81       	ld	r24, Z
    59cc:	80 68       	ori	r24, 0x80	; 128
    59ce:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    59d0:	ea 89       	ldd	r30, Y+18	; 0x12
    59d2:	fb 89       	ldd	r31, Y+19	; 0x13
    59d4:	80 81       	ld	r24, Z
    59d6:	8f 7d       	andi	r24, 0xDF	; 223
    59d8:	80 83       	st	Z, r24
}
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	1f 91       	pop	r17
    59e0:	ff 90       	pop	r15
    59e2:	ef 90       	pop	r14
    59e4:	df 90       	pop	r13
    59e6:	cf 90       	pop	r12
    59e8:	08 95       	ret

000059ea <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    59ea:	1f 92       	push	r1
    59ec:	0f 92       	push	r0
    59ee:	0f b6       	in	r0, 0x3f	; 63
    59f0:	0f 92       	push	r0
    59f2:	11 24       	eor	r1, r1
    59f4:	2f 93       	push	r18
    59f6:	8f 93       	push	r24
    59f8:	9f 93       	push	r25
    59fa:	ef 93       	push	r30
    59fc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    59fe:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <Serial+0x10>
    5a02:	f0 91 97 05 	lds	r31, 0x0597	; 0x800597 <Serial+0x11>
    5a06:	80 81       	ld	r24, Z
    5a08:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <Serial+0x16>
    5a0c:	f0 91 9d 05 	lds	r31, 0x059D	; 0x80059d <Serial+0x17>
    5a10:	82 fd       	sbrc	r24, 2
    5a12:	12 c0       	rjmp	.+36     	; 0x5a38 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5a14:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5a16:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <Serial+0x19>
    5a1a:	8f 5f       	subi	r24, 0xFF	; 255
    5a1c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5a1e:	20 91 a0 05 	lds	r18, 0x05A0	; 0x8005a0 <Serial+0x1a>
    5a22:	82 17       	cp	r24, r18
    5a24:	51 f0       	breq	.+20     	; 0x5a3a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5a26:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <Serial+0x19>
    5a2a:	f0 e0       	ldi	r31, 0x00	; 0
    5a2c:	ea 57       	subi	r30, 0x7A	; 122
    5a2e:	fa 4f       	sbci	r31, 0xFA	; 250
    5a30:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5a32:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <Serial+0x19>
    5a36:	01 c0       	rjmp	.+2      	; 0x5a3a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5a38:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5a3a:	ff 91       	pop	r31
    5a3c:	ef 91       	pop	r30
    5a3e:	9f 91       	pop	r25
    5a40:	8f 91       	pop	r24
    5a42:	2f 91       	pop	r18
    5a44:	0f 90       	pop	r0
    5a46:	0f be       	out	0x3f, r0	; 63
    5a48:	0f 90       	pop	r0
    5a4a:	1f 90       	pop	r1
    5a4c:	18 95       	reti

00005a4e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5a4e:	1f 92       	push	r1
    5a50:	0f 92       	push	r0
    5a52:	0f b6       	in	r0, 0x3f	; 63
    5a54:	0f 92       	push	r0
    5a56:	11 24       	eor	r1, r1
    5a58:	2f 93       	push	r18
    5a5a:	3f 93       	push	r19
    5a5c:	4f 93       	push	r20
    5a5e:	5f 93       	push	r21
    5a60:	6f 93       	push	r22
    5a62:	7f 93       	push	r23
    5a64:	8f 93       	push	r24
    5a66:	9f 93       	push	r25
    5a68:	af 93       	push	r26
    5a6a:	bf 93       	push	r27
    5a6c:	ef 93       	push	r30
    5a6e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5a70:	86 e8       	ldi	r24, 0x86	; 134
    5a72:	95 e0       	ldi	r25, 0x05	; 5
    5a74:	cf de       	rcall	.-610    	; 0x5814 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5a76:	ff 91       	pop	r31
    5a78:	ef 91       	pop	r30
    5a7a:	bf 91       	pop	r27
    5a7c:	af 91       	pop	r26
    5a7e:	9f 91       	pop	r25
    5a80:	8f 91       	pop	r24
    5a82:	7f 91       	pop	r23
    5a84:	6f 91       	pop	r22
    5a86:	5f 91       	pop	r21
    5a88:	4f 91       	pop	r20
    5a8a:	3f 91       	pop	r19
    5a8c:	2f 91       	pop	r18
    5a8e:	0f 90       	pop	r0
    5a90:	0f be       	out	0x3f, r0	; 63
    5a92:	0f 90       	pop	r0
    5a94:	1f 90       	pop	r1
    5a96:	18 95       	reti

00005a98 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5a98:	86 e8       	ldi	r24, 0x86	; 134
    5a9a:	95 e0       	ldi	r25, 0x05	; 5
    5a9c:	80 de       	rcall	.-768    	; 0x579e <_ZN14HardwareSerial9availableEv>
    5a9e:	21 e0       	ldi	r18, 0x01	; 1
    5aa0:	89 2b       	or	r24, r25
    5aa2:	09 f4       	brne	.+2      	; 0x5aa6 <_Z17Serial0_availablev+0xe>
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
}
    5aa6:	82 2f       	mov	r24, r18
    5aa8:	08 95       	ret

00005aaa <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5aaa:	e6 e8       	ldi	r30, 0x86	; 134
    5aac:	f5 e0       	ldi	r31, 0x05	; 5
    5aae:	13 82       	std	Z+3, r1	; 0x03
    5ab0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5ab2:	88 ee       	ldi	r24, 0xE8	; 232
    5ab4:	93 e0       	ldi	r25, 0x03	; 3
    5ab6:	a0 e0       	ldi	r26, 0x00	; 0
    5ab8:	b0 e0       	ldi	r27, 0x00	; 0
    5aba:	84 83       	std	Z+4, r24	; 0x04
    5abc:	95 83       	std	Z+5, r25	; 0x05
    5abe:	a6 83       	std	Z+6, r26	; 0x06
    5ac0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5ac2:	85 eb       	ldi	r24, 0xB5	; 181
    5ac4:	91 e0       	ldi	r25, 0x01	; 1
    5ac6:	91 83       	std	Z+1, r25	; 0x01
    5ac8:	80 83       	st	Z, r24
    5aca:	85 ec       	ldi	r24, 0xC5	; 197
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	95 87       	std	Z+13, r25	; 0x0d
    5ad0:	84 87       	std	Z+12, r24	; 0x0c
    5ad2:	84 ec       	ldi	r24, 0xC4	; 196
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	97 87       	std	Z+15, r25	; 0x0f
    5ad8:	86 87       	std	Z+14, r24	; 0x0e
    5ada:	80 ec       	ldi	r24, 0xC0	; 192
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	91 8b       	std	Z+17, r25	; 0x11
    5ae0:	80 8b       	std	Z+16, r24	; 0x10
    5ae2:	81 ec       	ldi	r24, 0xC1	; 193
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	93 8b       	std	Z+19, r25	; 0x13
    5ae8:	82 8b       	std	Z+18, r24	; 0x12
    5aea:	82 ec       	ldi	r24, 0xC2	; 194
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	95 8b       	std	Z+21, r25	; 0x15
    5af0:	84 8b       	std	Z+20, r24	; 0x14
    5af2:	86 ec       	ldi	r24, 0xC6	; 198
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	97 8b       	std	Z+23, r25	; 0x17
    5af8:	86 8b       	std	Z+22, r24	; 0x16
    5afa:	11 8e       	std	Z+25, r1	; 0x19
    5afc:	12 8e       	std	Z+26, r1	; 0x1a
    5afe:	13 8e       	std	Z+27, r1	; 0x1b
    5b00:	14 8e       	std	Z+28, r1	; 0x1c
    5b02:	08 95       	ret

00005b04 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    5b04:	08 95       	ret

00005b06 <main>:

int main(void)
{
	init();
    5b06:	17 d3       	rcall	.+1582   	; 0x6136 <init>

	initVariant();
    5b08:	fd df       	rcall	.-6      	; 0x5b04 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5b0a:	1a db       	rcall	.-2508   	; 0x5140 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5b0c:	cd ef       	ldi	r28, 0xFD	; 253
    5b0e:	db e2       	ldi	r29, 0x2B	; 43
#endif
	
	setup();
    
	for (;;) {
		loop();
    5b10:	57 db       	rcall	.-2386   	; 0x51c0 <loop>
		if (serialEventRun) serialEventRun();
    5b12:	20 97       	sbiw	r28, 0x00	; 0
    5b14:	e9 f3       	breq	.-6      	; 0x5b10 <main+0xa>
    5b16:	71 de       	rcall	.-798    	; 0x57fa <_Z14serialEventRunv>
    5b18:	fb cf       	rjmp	.-10     	; 0x5b10 <main+0xa>

00005b1a <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    5b1a:	b9 c7       	rjmp	.+3954   	; 0x6a8e <malloc>

00005b1c <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    5b1c:	0c 94 dc 35 	jmp	0x6bb8	; 0x6bb8 <free>

00005b20 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    5b20:	cf 92       	push	r12
    5b22:	df 92       	push	r13
    5b24:	ef 92       	push	r14
    5b26:	ff 92       	push	r15
    5b28:	0f 93       	push	r16
    5b2a:	1f 93       	push	r17
    5b2c:	cf 93       	push	r28
    5b2e:	df 93       	push	r29
    5b30:	6c 01       	movw	r12, r24
    5b32:	7a 01       	movw	r14, r20
    5b34:	8b 01       	movw	r16, r22
    5b36:	c0 e0       	ldi	r28, 0x00	; 0
    5b38:	d0 e0       	ldi	r29, 0x00	; 0
    5b3a:	ce 15       	cp	r28, r14
    5b3c:	df 05       	cpc	r29, r15
    5b3e:	89 f0       	breq	.+34     	; 0x5b62 <_ZN5Print5writeEPKhj+0x42>
    5b40:	d8 01       	movw	r26, r16
    5b42:	6d 91       	ld	r22, X+
    5b44:	8d 01       	movw	r16, r26
    5b46:	d6 01       	movw	r26, r12
    5b48:	ed 91       	ld	r30, X+
    5b4a:	fc 91       	ld	r31, X
    5b4c:	01 90       	ld	r0, Z+
    5b4e:	f0 81       	ld	r31, Z
    5b50:	e0 2d       	mov	r30, r0
    5b52:	c6 01       	movw	r24, r12
    5b54:	09 95       	icall
    5b56:	89 2b       	or	r24, r25
    5b58:	11 f4       	brne	.+4      	; 0x5b5e <_ZN5Print5writeEPKhj+0x3e>
    5b5a:	7e 01       	movw	r14, r28
    5b5c:	02 c0       	rjmp	.+4      	; 0x5b62 <_ZN5Print5writeEPKhj+0x42>
    5b5e:	21 96       	adiw	r28, 0x01	; 1
    5b60:	ec cf       	rjmp	.-40     	; 0x5b3a <_ZN5Print5writeEPKhj+0x1a>
    5b62:	c7 01       	movw	r24, r14
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	1f 91       	pop	r17
    5b6a:	0f 91       	pop	r16
    5b6c:	ff 90       	pop	r15
    5b6e:	ef 90       	pop	r14
    5b70:	df 90       	pop	r13
    5b72:	cf 90       	pop	r12
    5b74:	08 95       	ret

00005b76 <_ZN5Print5writeEPKc>:
    5b76:	61 15       	cp	r22, r1
    5b78:	71 05       	cpc	r23, r1
    5b7a:	79 f0       	breq	.+30     	; 0x5b9a <_ZN5Print5writeEPKc+0x24>
    5b7c:	fb 01       	movw	r30, r22
    5b7e:	01 90       	ld	r0, Z+
    5b80:	00 20       	and	r0, r0
    5b82:	e9 f7       	brne	.-6      	; 0x5b7e <_ZN5Print5writeEPKc+0x8>
    5b84:	31 97       	sbiw	r30, 0x01	; 1
    5b86:	af 01       	movw	r20, r30
    5b88:	46 1b       	sub	r20, r22
    5b8a:	57 0b       	sbc	r21, r23
    5b8c:	dc 01       	movw	r26, r24
    5b8e:	ed 91       	ld	r30, X+
    5b90:	fc 91       	ld	r31, X
    5b92:	02 80       	ldd	r0, Z+2	; 0x02
    5b94:	f3 81       	ldd	r31, Z+3	; 0x03
    5b96:	e0 2d       	mov	r30, r0
    5b98:	09 94       	ijmp
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	08 95       	ret

00005ba0 <_ZN5Print5printEPK19__FlashStringHelper>:
    5ba0:	ef 92       	push	r14
    5ba2:	ff 92       	push	r15
    5ba4:	0f 93       	push	r16
    5ba6:	1f 93       	push	r17
    5ba8:	cf 93       	push	r28
    5baa:	df 93       	push	r29
    5bac:	8c 01       	movw	r16, r24
    5bae:	7b 01       	movw	r14, r22
    5bb0:	c0 e0       	ldi	r28, 0x00	; 0
    5bb2:	d0 e0       	ldi	r29, 0x00	; 0
    5bb4:	f7 01       	movw	r30, r14
    5bb6:	ec 0f       	add	r30, r28
    5bb8:	fd 1f       	adc	r31, r29
    5bba:	64 91       	lpm	r22, Z
    5bbc:	66 23       	and	r22, r22
    5bbe:	61 f0       	breq	.+24     	; 0x5bd8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5bc0:	d8 01       	movw	r26, r16
    5bc2:	ed 91       	ld	r30, X+
    5bc4:	fc 91       	ld	r31, X
    5bc6:	01 90       	ld	r0, Z+
    5bc8:	f0 81       	ld	r31, Z
    5bca:	e0 2d       	mov	r30, r0
    5bcc:	c8 01       	movw	r24, r16
    5bce:	09 95       	icall
    5bd0:	89 2b       	or	r24, r25
    5bd2:	11 f0       	breq	.+4      	; 0x5bd8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5bd4:	21 96       	adiw	r28, 0x01	; 1
    5bd6:	ee cf       	rjmp	.-36     	; 0x5bb4 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5bd8:	ce 01       	movw	r24, r28
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	1f 91       	pop	r17
    5be0:	0f 91       	pop	r16
    5be2:	ff 90       	pop	r15
    5be4:	ef 90       	pop	r14
    5be6:	08 95       	ret

00005be8 <_ZN5Print5printERK6String>:
    5be8:	dc 01       	movw	r26, r24
    5bea:	ed 91       	ld	r30, X+
    5bec:	fc 91       	ld	r31, X
    5bee:	db 01       	movw	r26, r22
    5bf0:	14 96       	adiw	r26, 0x04	; 4
    5bf2:	4d 91       	ld	r20, X+
    5bf4:	5c 91       	ld	r21, X
    5bf6:	15 97       	sbiw	r26, 0x05	; 5
    5bf8:	6d 91       	ld	r22, X+
    5bfa:	7c 91       	ld	r23, X
    5bfc:	02 80       	ldd	r0, Z+2	; 0x02
    5bfe:	f3 81       	ldd	r31, Z+3	; 0x03
    5c00:	e0 2d       	mov	r30, r0
    5c02:	09 94       	ijmp

00005c04 <_ZN5Print5printEc>:
    5c04:	dc 01       	movw	r26, r24
    5c06:	ed 91       	ld	r30, X+
    5c08:	fc 91       	ld	r31, X
    5c0a:	01 90       	ld	r0, Z+
    5c0c:	f0 81       	ld	r31, Z
    5c0e:	e0 2d       	mov	r30, r0
    5c10:	09 94       	ijmp

00005c12 <_ZN5Print7printlnEv>:
    5c12:	61 ec       	ldi	r22, 0xC1	; 193
    5c14:	71 e0       	ldi	r23, 0x01	; 1
    5c16:	af cf       	rjmp	.-162    	; 0x5b76 <_ZN5Print5writeEPKc>

00005c18 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5c18:	0f 93       	push	r16
    5c1a:	1f 93       	push	r17
    5c1c:	cf 93       	push	r28
    5c1e:	df 93       	push	r29
    5c20:	ec 01       	movw	r28, r24
    5c22:	be df       	rcall	.-132    	; 0x5ba0 <_ZN5Print5printEPK19__FlashStringHelper>
    5c24:	8c 01       	movw	r16, r24
    5c26:	ce 01       	movw	r24, r28
    5c28:	f4 df       	rcall	.-24     	; 0x5c12 <_ZN5Print7printlnEv>
    5c2a:	80 0f       	add	r24, r16
    5c2c:	91 1f       	adc	r25, r17
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	08 95       	ret

00005c38 <_ZN5Print7printlnERK6String>:
    5c38:	0f 93       	push	r16
    5c3a:	1f 93       	push	r17
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	ec 01       	movw	r28, r24
    5c42:	d2 df       	rcall	.-92     	; 0x5be8 <_ZN5Print5printERK6String>
    5c44:	8c 01       	movw	r16, r24
    5c46:	ce 01       	movw	r24, r28
    5c48:	e4 df       	rcall	.-56     	; 0x5c12 <_ZN5Print7printlnEv>
    5c4a:	80 0f       	add	r24, r16
    5c4c:	91 1f       	adc	r25, r17
    5c4e:	df 91       	pop	r29
    5c50:	cf 91       	pop	r28
    5c52:	1f 91       	pop	r17
    5c54:	0f 91       	pop	r16
    5c56:	08 95       	ret

00005c58 <_ZN5Print11printNumberEmh>:
    5c58:	8f 92       	push	r8
    5c5a:	9f 92       	push	r9
    5c5c:	af 92       	push	r10
    5c5e:	bf 92       	push	r11
    5c60:	cf 92       	push	r12
    5c62:	df 92       	push	r13
    5c64:	ef 92       	push	r14
    5c66:	ff 92       	push	r15
    5c68:	0f 93       	push	r16
    5c6a:	1f 93       	push	r17
    5c6c:	cf 93       	push	r28
    5c6e:	df 93       	push	r29
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    5c74:	a1 97       	sbiw	r28, 0x21	; 33
    5c76:	0f b6       	in	r0, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	0f be       	out	0x3f, r0	; 63
    5c7e:	cd bf       	out	0x3d, r28	; 61
    5c80:	7c 01       	movw	r14, r24
    5c82:	d4 2e       	mov	r13, r20
    5c84:	c5 2e       	mov	r12, r21
    5c86:	db 01       	movw	r26, r22
    5c88:	19 a2       	std	Y+33, r1	; 0x21
    5c8a:	22 30       	cpi	r18, 0x02	; 2
    5c8c:	08 f4       	brcc	.+2      	; 0x5c90 <_ZN5Print11printNumberEmh+0x38>
    5c8e:	2a e0       	ldi	r18, 0x0A	; 10
    5c90:	8e 01       	movw	r16, r28
    5c92:	0f 5d       	subi	r16, 0xDF	; 223
    5c94:	1f 4f       	sbci	r17, 0xFF	; 255
    5c96:	82 2e       	mov	r8, r18
    5c98:	91 2c       	mov	r9, r1
    5c9a:	a1 2c       	mov	r10, r1
    5c9c:	b1 2c       	mov	r11, r1
    5c9e:	6d 2d       	mov	r22, r13
    5ca0:	7c 2d       	mov	r23, r12
    5ca2:	cd 01       	movw	r24, r26
    5ca4:	a5 01       	movw	r20, r10
    5ca6:	94 01       	movw	r18, r8
    5ca8:	3f d6       	rcall	.+3198   	; 0x6928 <__udivmodsi4>
    5caa:	d2 2e       	mov	r13, r18
    5cac:	c3 2e       	mov	r12, r19
    5cae:	da 01       	movw	r26, r20
    5cb0:	01 50       	subi	r16, 0x01	; 1
    5cb2:	11 09       	sbc	r17, r1
    5cb4:	6a 30       	cpi	r22, 0x0A	; 10
    5cb6:	71 05       	cpc	r23, r1
    5cb8:	81 05       	cpc	r24, r1
    5cba:	91 05       	cpc	r25, r1
    5cbc:	10 f4       	brcc	.+4      	; 0x5cc2 <_ZN5Print11printNumberEmh+0x6a>
    5cbe:	60 5d       	subi	r22, 0xD0	; 208
    5cc0:	01 c0       	rjmp	.+2      	; 0x5cc4 <_ZN5Print11printNumberEmh+0x6c>
    5cc2:	69 5c       	subi	r22, 0xC9	; 201
    5cc4:	f8 01       	movw	r30, r16
    5cc6:	60 83       	st	Z, r22
    5cc8:	23 2b       	or	r18, r19
    5cca:	24 2b       	or	r18, r20
    5ccc:	25 2b       	or	r18, r21
    5cce:	39 f7       	brne	.-50     	; 0x5c9e <_ZN5Print11printNumberEmh+0x46>
    5cd0:	b8 01       	movw	r22, r16
    5cd2:	c7 01       	movw	r24, r14
    5cd4:	50 df       	rcall	.-352    	; 0x5b76 <_ZN5Print5writeEPKc>
    5cd6:	a1 96       	adiw	r28, 0x21	; 33
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	f8 94       	cli
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	cd bf       	out	0x3d, r28	; 61
    5ce2:	df 91       	pop	r29
    5ce4:	cf 91       	pop	r28
    5ce6:	1f 91       	pop	r17
    5ce8:	0f 91       	pop	r16
    5cea:	ff 90       	pop	r15
    5cec:	ef 90       	pop	r14
    5cee:	df 90       	pop	r13
    5cf0:	cf 90       	pop	r12
    5cf2:	bf 90       	pop	r11
    5cf4:	af 90       	pop	r10
    5cf6:	9f 90       	pop	r9
    5cf8:	8f 90       	pop	r8
    5cfa:	08 95       	ret

00005cfc <_ZN5Print5printEli>:
    5cfc:	cf 92       	push	r12
    5cfe:	df 92       	push	r13
    5d00:	ef 92       	push	r14
    5d02:	ff 92       	push	r15
    5d04:	0f 93       	push	r16
    5d06:	1f 93       	push	r17
    5d08:	cf 93       	push	r28
    5d0a:	df 93       	push	r29
    5d0c:	ec 01       	movw	r28, r24
    5d0e:	6a 01       	movw	r12, r20
    5d10:	7b 01       	movw	r14, r22
    5d12:	21 15       	cp	r18, r1
    5d14:	31 05       	cpc	r19, r1
    5d16:	79 f4       	brne	.+30     	; 0x5d36 <_ZN5Print5printEli+0x3a>
    5d18:	e8 81       	ld	r30, Y
    5d1a:	f9 81       	ldd	r31, Y+1	; 0x01
    5d1c:	01 90       	ld	r0, Z+
    5d1e:	f0 81       	ld	r31, Z
    5d20:	e0 2d       	mov	r30, r0
    5d22:	64 2f       	mov	r22, r20
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ff 90       	pop	r15
    5d2e:	ef 90       	pop	r14
    5d30:	df 90       	pop	r13
    5d32:	cf 90       	pop	r12
    5d34:	09 94       	ijmp
    5d36:	2a 30       	cpi	r18, 0x0A	; 10
    5d38:	31 05       	cpc	r19, r1
    5d3a:	d9 f4       	brne	.+54     	; 0x5d72 <_ZN5Print5printEli+0x76>
    5d3c:	77 ff       	sbrs	r23, 7
    5d3e:	18 c0       	rjmp	.+48     	; 0x5d70 <_ZN5Print5printEli+0x74>
    5d40:	6d e2       	ldi	r22, 0x2D	; 45
    5d42:	60 df       	rcall	.-320    	; 0x5c04 <_ZN5Print5printEc>
    5d44:	8c 01       	movw	r16, r24
    5d46:	44 27       	eor	r20, r20
    5d48:	55 27       	eor	r21, r21
    5d4a:	ba 01       	movw	r22, r20
    5d4c:	4c 19       	sub	r20, r12
    5d4e:	5d 09       	sbc	r21, r13
    5d50:	6e 09       	sbc	r22, r14
    5d52:	7f 09       	sbc	r23, r15
    5d54:	2a e0       	ldi	r18, 0x0A	; 10
    5d56:	ce 01       	movw	r24, r28
    5d58:	7f df       	rcall	.-258    	; 0x5c58 <_ZN5Print11printNumberEmh>
    5d5a:	80 0f       	add	r24, r16
    5d5c:	91 1f       	adc	r25, r17
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	1f 91       	pop	r17
    5d64:	0f 91       	pop	r16
    5d66:	ff 90       	pop	r15
    5d68:	ef 90       	pop	r14
    5d6a:	df 90       	pop	r13
    5d6c:	cf 90       	pop	r12
    5d6e:	08 95       	ret
    5d70:	2a e0       	ldi	r18, 0x0A	; 10
    5d72:	b7 01       	movw	r22, r14
    5d74:	a6 01       	movw	r20, r12
    5d76:	ce 01       	movw	r24, r28
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ff 90       	pop	r15
    5d82:	ef 90       	pop	r14
    5d84:	df 90       	pop	r13
    5d86:	cf 90       	pop	r12
    5d88:	67 cf       	rjmp	.-306    	; 0x5c58 <_ZN5Print11printNumberEmh>

00005d8a <_ZN5Print7printlnEii>:
    5d8a:	0f 93       	push	r16
    5d8c:	1f 93       	push	r17
    5d8e:	cf 93       	push	r28
    5d90:	df 93       	push	r29
    5d92:	ec 01       	movw	r28, r24
    5d94:	9a 01       	movw	r18, r20
    5d96:	ab 01       	movw	r20, r22
    5d98:	77 0f       	add	r23, r23
    5d9a:	66 0b       	sbc	r22, r22
    5d9c:	77 0b       	sbc	r23, r23
    5d9e:	ae df       	rcall	.-164    	; 0x5cfc <_ZN5Print5printEli>
    5da0:	8c 01       	movw	r16, r24
    5da2:	ce 01       	movw	r24, r28
    5da4:	36 df       	rcall	.-404    	; 0x5c12 <_ZN5Print7printlnEv>
    5da6:	80 0f       	add	r24, r16
    5da8:	91 1f       	adc	r25, r17
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	1f 91       	pop	r17
    5db0:	0f 91       	pop	r16
    5db2:	08 95       	ret

00005db4 <_ZN5Print5printEmi>:
    5db4:	21 15       	cp	r18, r1
    5db6:	31 05       	cpc	r19, r1
    5db8:	41 f4       	brne	.+16     	; 0x5dca <_ZN5Print5printEmi+0x16>
    5dba:	dc 01       	movw	r26, r24
    5dbc:	ed 91       	ld	r30, X+
    5dbe:	fc 91       	ld	r31, X
    5dc0:	01 90       	ld	r0, Z+
    5dc2:	f0 81       	ld	r31, Z
    5dc4:	e0 2d       	mov	r30, r0
    5dc6:	64 2f       	mov	r22, r20
    5dc8:	09 94       	ijmp
    5dca:	46 cf       	rjmp	.-372    	; 0x5c58 <_ZN5Print11printNumberEmh>

00005dcc <_ZN5Print7printlnEhi>:
    5dcc:	0f 93       	push	r16
    5dce:	1f 93       	push	r17
    5dd0:	cf 93       	push	r28
    5dd2:	df 93       	push	r29
    5dd4:	ec 01       	movw	r28, r24
    5dd6:	9a 01       	movw	r18, r20
    5dd8:	46 2f       	mov	r20, r22
    5dda:	50 e0       	ldi	r21, 0x00	; 0
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	70 e0       	ldi	r23, 0x00	; 0
    5de0:	e9 df       	rcall	.-46     	; 0x5db4 <_ZN5Print5printEmi>
    5de2:	8c 01       	movw	r16, r24
    5de4:	ce 01       	movw	r24, r28
    5de6:	15 df       	rcall	.-470    	; 0x5c12 <_ZN5Print7printlnEv>
    5de8:	80 0f       	add	r24, r16
    5dea:	91 1f       	adc	r25, r17
    5dec:	df 91       	pop	r29
    5dee:	cf 91       	pop	r28
    5df0:	1f 91       	pop	r17
    5df2:	0f 91       	pop	r16
    5df4:	08 95       	ret

00005df6 <_ZN5Print10printFloatEdh>:
    5df6:	4f 92       	push	r4
    5df8:	5f 92       	push	r5
    5dfa:	6f 92       	push	r6
    5dfc:	7f 92       	push	r7
    5dfe:	8f 92       	push	r8
    5e00:	9f 92       	push	r9
    5e02:	af 92       	push	r10
    5e04:	bf 92       	push	r11
    5e06:	cf 92       	push	r12
    5e08:	df 92       	push	r13
    5e0a:	ef 92       	push	r14
    5e0c:	ff 92       	push	r15
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	ec 01       	movw	r28, r24
    5e14:	6a 01       	movw	r12, r20
    5e16:	7b 01       	movw	r14, r22
    5e18:	b2 2e       	mov	r11, r18
    5e1a:	9a 01       	movw	r18, r20
    5e1c:	ab 01       	movw	r20, r22
    5e1e:	c7 01       	movw	r24, r14
    5e20:	b6 01       	movw	r22, r12
    5e22:	b7 dc       	rcall	.-1682   	; 0x5792 <__unordsf2>
    5e24:	88 23       	and	r24, r24
    5e26:	19 f0       	breq	.+6      	; 0x5e2e <_ZN5Print10printFloatEdh+0x38>
    5e28:	64 ec       	ldi	r22, 0xC4	; 196
    5e2a:	71 e0       	ldi	r23, 0x01	; 1
    5e2c:	24 c0       	rjmp	.+72     	; 0x5e76 <_ZN5Print10printFloatEdh+0x80>
    5e2e:	26 01       	movw	r4, r12
    5e30:	37 01       	movw	r6, r14
    5e32:	e8 94       	clt
    5e34:	77 f8       	bld	r7, 7
    5e36:	2f ef       	ldi	r18, 0xFF	; 255
    5e38:	3f ef       	ldi	r19, 0xFF	; 255
    5e3a:	4f e7       	ldi	r20, 0x7F	; 127
    5e3c:	5f e7       	ldi	r21, 0x7F	; 127
    5e3e:	c3 01       	movw	r24, r6
    5e40:	b2 01       	movw	r22, r4
    5e42:	a7 dc       	rcall	.-1714   	; 0x5792 <__unordsf2>
    5e44:	81 11       	cpse	r24, r1
    5e46:	0c c0       	rjmp	.+24     	; 0x5e60 <_ZN5Print10printFloatEdh+0x6a>
    5e48:	2f ef       	ldi	r18, 0xFF	; 255
    5e4a:	3f ef       	ldi	r19, 0xFF	; 255
    5e4c:	4f e7       	ldi	r20, 0x7F	; 127
    5e4e:	5f e7       	ldi	r21, 0x7F	; 127
    5e50:	c3 01       	movw	r24, r6
    5e52:	b2 01       	movw	r22, r4
    5e54:	e8 da       	rcall	.-2608   	; 0x5426 <__cmpsf2>
    5e56:	18 16       	cp	r1, r24
    5e58:	1c f4       	brge	.+6      	; 0x5e60 <_ZN5Print10printFloatEdh+0x6a>
    5e5a:	68 ec       	ldi	r22, 0xC8	; 200
    5e5c:	71 e0       	ldi	r23, 0x01	; 1
    5e5e:	0b c0       	rjmp	.+22     	; 0x5e76 <_ZN5Print10printFloatEdh+0x80>
    5e60:	2f ef       	ldi	r18, 0xFF	; 255
    5e62:	3f ef       	ldi	r19, 0xFF	; 255
    5e64:	4f e7       	ldi	r20, 0x7F	; 127
    5e66:	5f e4       	ldi	r21, 0x4F	; 79
    5e68:	c7 01       	movw	r24, r14
    5e6a:	b6 01       	movw	r22, r12
    5e6c:	2b dc       	rcall	.-1962   	; 0x56c4 <__gesf2>
    5e6e:	18 16       	cp	r1, r24
    5e70:	94 f4       	brge	.+36     	; 0x5e96 <_ZN5Print10printFloatEdh+0xa0>
    5e72:	6c ec       	ldi	r22, 0xCC	; 204
    5e74:	71 e0       	ldi	r23, 0x01	; 1
    5e76:	ce 01       	movw	r24, r28
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	ff 90       	pop	r15
    5e7e:	ef 90       	pop	r14
    5e80:	df 90       	pop	r13
    5e82:	cf 90       	pop	r12
    5e84:	bf 90       	pop	r11
    5e86:	af 90       	pop	r10
    5e88:	9f 90       	pop	r9
    5e8a:	8f 90       	pop	r8
    5e8c:	7f 90       	pop	r7
    5e8e:	6f 90       	pop	r6
    5e90:	5f 90       	pop	r5
    5e92:	4f 90       	pop	r4
    5e94:	70 ce       	rjmp	.-800    	; 0x5b76 <_ZN5Print5writeEPKc>
    5e96:	2f ef       	ldi	r18, 0xFF	; 255
    5e98:	3f ef       	ldi	r19, 0xFF	; 255
    5e9a:	4f e7       	ldi	r20, 0x7F	; 127
    5e9c:	5f ec       	ldi	r21, 0xCF	; 207
    5e9e:	c7 01       	movw	r24, r14
    5ea0:	b6 01       	movw	r22, r12
    5ea2:	c1 da       	rcall	.-2686   	; 0x5426 <__cmpsf2>
    5ea4:	87 fd       	sbrc	r24, 7
    5ea6:	e5 cf       	rjmp	.-54     	; 0x5e72 <_ZN5Print10printFloatEdh+0x7c>
    5ea8:	20 e0       	ldi	r18, 0x00	; 0
    5eaa:	30 e0       	ldi	r19, 0x00	; 0
    5eac:	a9 01       	movw	r20, r18
    5eae:	c7 01       	movw	r24, r14
    5eb0:	b6 01       	movw	r22, r12
    5eb2:	b9 da       	rcall	.-2702   	; 0x5426 <__cmpsf2>
    5eb4:	87 ff       	sbrs	r24, 7
    5eb6:	09 c0       	rjmp	.+18     	; 0x5eca <_ZN5Print10printFloatEdh+0xd4>
    5eb8:	6d e2       	ldi	r22, 0x2D	; 45
    5eba:	ce 01       	movw	r24, r28
    5ebc:	a3 de       	rcall	.-698    	; 0x5c04 <_ZN5Print5printEc>
    5ebe:	4c 01       	movw	r8, r24
    5ec0:	f7 fa       	bst	r15, 7
    5ec2:	f0 94       	com	r15
    5ec4:	f7 f8       	bld	r15, 7
    5ec6:	f0 94       	com	r15
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <_ZN5Print10printFloatEdh+0xd8>
    5eca:	81 2c       	mov	r8, r1
    5ecc:	91 2c       	mov	r9, r1
    5ece:	a1 2c       	mov	r10, r1
    5ed0:	60 e0       	ldi	r22, 0x00	; 0
    5ed2:	70 e0       	ldi	r23, 0x00	; 0
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	9f e3       	ldi	r25, 0x3F	; 63
    5ed8:	ab 14       	cp	r10, r11
    5eda:	39 f0       	breq	.+14     	; 0x5eea <_ZN5Print10printFloatEdh+0xf4>
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	40 e2       	ldi	r20, 0x20	; 32
    5ee2:	51 e4       	ldi	r21, 0x41	; 65
    5ee4:	a4 da       	rcall	.-2744   	; 0x542e <__divsf3>
    5ee6:	a3 94       	inc	r10
    5ee8:	f7 cf       	rjmp	.-18     	; 0x5ed8 <_ZN5Print10printFloatEdh+0xe2>
    5eea:	9b 01       	movw	r18, r22
    5eec:	ac 01       	movw	r20, r24
    5eee:	c7 01       	movw	r24, r14
    5ef0:	b6 01       	movw	r22, r12
    5ef2:	35 da       	rcall	.-2966   	; 0x535e <__addsf3>
    5ef4:	2b 01       	movw	r4, r22
    5ef6:	3c 01       	movw	r6, r24
    5ef8:	07 db       	rcall	.-2546   	; 0x5508 <__fixunssfsi>
    5efa:	6b 01       	movw	r12, r22
    5efc:	7c 01       	movw	r14, r24
    5efe:	30 db       	rcall	.-2464   	; 0x5560 <__floatunsisf>
    5f00:	9b 01       	movw	r18, r22
    5f02:	ac 01       	movw	r20, r24
    5f04:	c3 01       	movw	r24, r6
    5f06:	b2 01       	movw	r22, r4
    5f08:	29 da       	rcall	.-2990   	; 0x535c <__subsf3>
    5f0a:	2b 01       	movw	r4, r22
    5f0c:	3c 01       	movw	r6, r24
    5f0e:	2a e0       	ldi	r18, 0x0A	; 10
    5f10:	b7 01       	movw	r22, r14
    5f12:	a6 01       	movw	r20, r12
    5f14:	ce 01       	movw	r24, r28
    5f16:	a0 de       	rcall	.-704    	; 0x5c58 <_ZN5Print11printNumberEmh>
    5f18:	7c 01       	movw	r14, r24
    5f1a:	e8 0c       	add	r14, r8
    5f1c:	f9 1c       	adc	r15, r9
    5f1e:	bb 20       	and	r11, r11
    5f20:	31 f0       	breq	.+12     	; 0x5f2e <_ZN5Print10printFloatEdh+0x138>
    5f22:	60 ed       	ldi	r22, 0xD0	; 208
    5f24:	71 e0       	ldi	r23, 0x01	; 1
    5f26:	ce 01       	movw	r24, r28
    5f28:	26 de       	rcall	.-948    	; 0x5b76 <_ZN5Print5writeEPKc>
    5f2a:	e8 0e       	add	r14, r24
    5f2c:	f9 1e       	adc	r15, r25
    5f2e:	db 2c       	mov	r13, r11
    5f30:	dd 20       	and	r13, r13
    5f32:	11 f1       	breq	.+68     	; 0x5f78 <_ZN5Print10printFloatEdh+0x182>
    5f34:	20 e0       	ldi	r18, 0x00	; 0
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	40 e2       	ldi	r20, 0x20	; 32
    5f3a:	51 e4       	ldi	r21, 0x41	; 65
    5f3c:	c3 01       	movw	r24, r6
    5f3e:	b2 01       	movw	r22, r4
    5f40:	c5 db       	rcall	.-2166   	; 0x56cc <__mulsf3>
    5f42:	2b 01       	movw	r4, r22
    5f44:	3c 01       	movw	r6, r24
    5f46:	db da       	rcall	.-2634   	; 0x54fe <__fixsfsi>
    5f48:	4b 01       	movw	r8, r22
    5f4a:	77 0f       	add	r23, r23
    5f4c:	aa 08       	sbc	r10, r10
    5f4e:	bb 08       	sbc	r11, r11
    5f50:	2a e0       	ldi	r18, 0x0A	; 10
    5f52:	30 e0       	ldi	r19, 0x00	; 0
    5f54:	b5 01       	movw	r22, r10
    5f56:	a4 01       	movw	r20, r8
    5f58:	ce 01       	movw	r24, r28
    5f5a:	d0 de       	rcall	.-608    	; 0x5cfc <_ZN5Print5printEli>
    5f5c:	e8 0e       	add	r14, r24
    5f5e:	f9 1e       	adc	r15, r25
    5f60:	c5 01       	movw	r24, r10
    5f62:	b4 01       	movw	r22, r8
    5f64:	ff da       	rcall	.-2562   	; 0x5564 <__floatsisf>
    5f66:	9b 01       	movw	r18, r22
    5f68:	ac 01       	movw	r20, r24
    5f6a:	c3 01       	movw	r24, r6
    5f6c:	b2 01       	movw	r22, r4
    5f6e:	f6 d9       	rcall	.-3092   	; 0x535c <__subsf3>
    5f70:	2b 01       	movw	r4, r22
    5f72:	3c 01       	movw	r6, r24
    5f74:	da 94       	dec	r13
    5f76:	dc cf       	rjmp	.-72     	; 0x5f30 <_ZN5Print10printFloatEdh+0x13a>
    5f78:	c7 01       	movw	r24, r14
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	ff 90       	pop	r15
    5f80:	ef 90       	pop	r14
    5f82:	df 90       	pop	r13
    5f84:	cf 90       	pop	r12
    5f86:	bf 90       	pop	r11
    5f88:	af 90       	pop	r10
    5f8a:	9f 90       	pop	r9
    5f8c:	8f 90       	pop	r8
    5f8e:	7f 90       	pop	r7
    5f90:	6f 90       	pop	r6
    5f92:	5f 90       	pop	r5
    5f94:	4f 90       	pop	r4
    5f96:	08 95       	ret

00005f98 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    5f98:	0f 93       	push	r16
    5f9a:	1f 93       	push	r17
    5f9c:	cf 93       	push	r28
    5f9e:	df 93       	push	r29
    5fa0:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    5fa2:	29 df       	rcall	.-430    	; 0x5df6 <_ZN5Print10printFloatEdh>
    5fa4:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    5fa6:	ce 01       	movw	r24, r28
    5fa8:	34 de       	rcall	.-920    	; 0x5c12 <_ZN5Print7printlnEv>
  return n;
}
    5faa:	80 0f       	add	r24, r16
    5fac:	91 1f       	adc	r25, r17
    5fae:	df 91       	pop	r29
    5fb0:	cf 91       	pop	r28
    5fb2:	1f 91       	pop	r17
    5fb4:	0f 91       	pop	r16
    5fb6:	08 95       	ret

00005fb8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5fb8:	1f 92       	push	r1
    5fba:	0f 92       	push	r0
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	0f 92       	push	r0
    5fc0:	11 24       	eor	r1, r1
    5fc2:	2f 93       	push	r18
    5fc4:	3f 93       	push	r19
    5fc6:	8f 93       	push	r24
    5fc8:	9f 93       	push	r25
    5fca:	af 93       	push	r26
    5fcc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5fce:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <timer0_millis>
    5fd2:	90 91 25 06 	lds	r25, 0x0625	; 0x800625 <timer0_millis+0x1>
    5fd6:	a0 91 26 06 	lds	r26, 0x0626	; 0x800626 <timer0_millis+0x2>
    5fda:	b0 91 27 06 	lds	r27, 0x0627	; 0x800627 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5fde:	30 91 23 06 	lds	r19, 0x0623	; 0x800623 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5fe2:	23 e0       	ldi	r18, 0x03	; 3
    5fe4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5fe6:	2d 37       	cpi	r18, 0x7D	; 125
    5fe8:	20 f4       	brcc	.+8      	; 0x5ff2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5fea:	01 96       	adiw	r24, 0x01	; 1
    5fec:	a1 1d       	adc	r26, r1
    5fee:	b1 1d       	adc	r27, r1
    5ff0:	05 c0       	rjmp	.+10     	; 0x5ffc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5ff2:	26 e8       	ldi	r18, 0x86	; 134
    5ff4:	23 0f       	add	r18, r19
		m += 1;
    5ff6:	02 96       	adiw	r24, 0x02	; 2
    5ff8:	a1 1d       	adc	r26, r1
    5ffa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5ffc:	20 93 23 06 	sts	0x0623, r18	; 0x800623 <timer0_fract>
	timer0_millis = m;
    6000:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <timer0_millis>
    6004:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <timer0_millis+0x1>
    6008:	a0 93 26 06 	sts	0x0626, r26	; 0x800626 <timer0_millis+0x2>
    600c:	b0 93 27 06 	sts	0x0627, r27	; 0x800627 <timer0_millis+0x3>
	timer0_overflow_count++;
    6010:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <timer0_overflow_count>
    6014:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <timer0_overflow_count+0x1>
    6018:	a0 91 2a 06 	lds	r26, 0x062A	; 0x80062a <timer0_overflow_count+0x2>
    601c:	b0 91 2b 06 	lds	r27, 0x062B	; 0x80062b <timer0_overflow_count+0x3>
    6020:	01 96       	adiw	r24, 0x01	; 1
    6022:	a1 1d       	adc	r26, r1
    6024:	b1 1d       	adc	r27, r1
    6026:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <timer0_overflow_count>
    602a:	90 93 29 06 	sts	0x0629, r25	; 0x800629 <timer0_overflow_count+0x1>
    602e:	a0 93 2a 06 	sts	0x062A, r26	; 0x80062a <timer0_overflow_count+0x2>
    6032:	b0 93 2b 06 	sts	0x062B, r27	; 0x80062b <timer0_overflow_count+0x3>
}
    6036:	bf 91       	pop	r27
    6038:	af 91       	pop	r26
    603a:	9f 91       	pop	r25
    603c:	8f 91       	pop	r24
    603e:	3f 91       	pop	r19
    6040:	2f 91       	pop	r18
    6042:	0f 90       	pop	r0
    6044:	0f be       	out	0x3f, r0	; 63
    6046:	0f 90       	pop	r0
    6048:	1f 90       	pop	r1
    604a:	18 95       	reti

0000604c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    604c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    604e:	f8 94       	cli
	m = timer0_millis;
    6050:	60 91 24 06 	lds	r22, 0x0624	; 0x800624 <timer0_millis>
    6054:	70 91 25 06 	lds	r23, 0x0625	; 0x800625 <timer0_millis+0x1>
    6058:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <timer0_millis+0x2>
    605c:	90 91 27 06 	lds	r25, 0x0627	; 0x800627 <timer0_millis+0x3>
	SREG = oldSREG;
    6060:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6062:	08 95       	ret

00006064 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6064:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6066:	f8 94       	cli
	m = timer0_overflow_count;
    6068:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <timer0_overflow_count>
    606c:	90 91 29 06 	lds	r25, 0x0629	; 0x800629 <timer0_overflow_count+0x1>
    6070:	a0 91 2a 06 	lds	r26, 0x062A	; 0x80062a <timer0_overflow_count+0x2>
    6074:	b0 91 2b 06 	lds	r27, 0x062B	; 0x80062b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6078:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    607a:	a8 9b       	sbis	0x15, 0	; 21
    607c:	05 c0       	rjmp	.+10     	; 0x6088 <micros+0x24>
    607e:	2f 3f       	cpi	r18, 0xFF	; 255
    6080:	19 f0       	breq	.+6      	; 0x6088 <micros+0x24>
		m++;
    6082:	01 96       	adiw	r24, 0x01	; 1
    6084:	a1 1d       	adc	r26, r1
    6086:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6088:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    608a:	ba 2f       	mov	r27, r26
    608c:	a9 2f       	mov	r26, r25
    608e:	98 2f       	mov	r25, r24
    6090:	88 27       	eor	r24, r24
    6092:	82 0f       	add	r24, r18
    6094:	91 1d       	adc	r25, r1
    6096:	a1 1d       	adc	r26, r1
    6098:	b1 1d       	adc	r27, r1
    609a:	bc 01       	movw	r22, r24
    609c:	cd 01       	movw	r24, r26
    609e:	42 e0       	ldi	r20, 0x02	; 2
    60a0:	66 0f       	add	r22, r22
    60a2:	77 1f       	adc	r23, r23
    60a4:	88 1f       	adc	r24, r24
    60a6:	99 1f       	adc	r25, r25
    60a8:	4a 95       	dec	r20
    60aa:	d1 f7       	brne	.-12     	; 0x60a0 <micros+0x3c>
}
    60ac:	08 95       	ret

000060ae <delay>:

void delay(unsigned long ms)
{
    60ae:	8f 92       	push	r8
    60b0:	9f 92       	push	r9
    60b2:	af 92       	push	r10
    60b4:	bf 92       	push	r11
    60b6:	cf 92       	push	r12
    60b8:	df 92       	push	r13
    60ba:	ef 92       	push	r14
    60bc:	ff 92       	push	r15
    60be:	6b 01       	movw	r12, r22
    60c0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    60c2:	d0 df       	rcall	.-96     	; 0x6064 <micros>
    60c4:	4b 01       	movw	r8, r22
    60c6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    60c8:	c1 14       	cp	r12, r1
    60ca:	d1 04       	cpc	r13, r1
    60cc:	e1 04       	cpc	r14, r1
    60ce:	f1 04       	cpc	r15, r1
    60d0:	f1 f0       	breq	.+60     	; 0x610e <delay+0x60>
		yield();
    60d2:	29 d4       	rcall	.+2130   	; 0x6926 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    60d4:	c7 df       	rcall	.-114    	; 0x6064 <micros>
    60d6:	dc 01       	movw	r26, r24
    60d8:	cb 01       	movw	r24, r22
    60da:	88 19       	sub	r24, r8
    60dc:	99 09       	sbc	r25, r9
    60de:	aa 09       	sbc	r26, r10
    60e0:	bb 09       	sbc	r27, r11
    60e2:	88 3e       	cpi	r24, 0xE8	; 232
    60e4:	93 40       	sbci	r25, 0x03	; 3
    60e6:	a1 05       	cpc	r26, r1
    60e8:	b1 05       	cpc	r27, r1
    60ea:	70 f3       	brcs	.-36     	; 0x60c8 <delay+0x1a>
			ms--;
    60ec:	21 e0       	ldi	r18, 0x01	; 1
    60ee:	c2 1a       	sub	r12, r18
    60f0:	d1 08       	sbc	r13, r1
    60f2:	e1 08       	sbc	r14, r1
    60f4:	f1 08       	sbc	r15, r1
			start += 1000;
    60f6:	88 ee       	ldi	r24, 0xE8	; 232
    60f8:	88 0e       	add	r8, r24
    60fa:	83 e0       	ldi	r24, 0x03	; 3
    60fc:	98 1e       	adc	r9, r24
    60fe:	a1 1c       	adc	r10, r1
    6100:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6102:	c1 14       	cp	r12, r1
    6104:	d1 04       	cpc	r13, r1
    6106:	e1 04       	cpc	r14, r1
    6108:	f1 04       	cpc	r15, r1
    610a:	21 f7       	brne	.-56     	; 0x60d4 <delay+0x26>
    610c:	dd cf       	rjmp	.-70     	; 0x60c8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    610e:	ff 90       	pop	r15
    6110:	ef 90       	pop	r14
    6112:	df 90       	pop	r13
    6114:	cf 90       	pop	r12
    6116:	bf 90       	pop	r11
    6118:	af 90       	pop	r10
    611a:	9f 90       	pop	r9
    611c:	8f 90       	pop	r8
    611e:	08 95       	ret

00006120 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6120:	82 30       	cpi	r24, 0x02	; 2
    6122:	91 05       	cpc	r25, r1
    6124:	38 f0       	brcs	.+14     	; 0x6134 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6126:	88 0f       	add	r24, r24
    6128:	99 1f       	adc	r25, r25
    612a:	88 0f       	add	r24, r24
    612c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    612e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6130:	01 97       	sbiw	r24, 0x01	; 1
    6132:	f1 f7       	brne	.-4      	; 0x6130 <delayMicroseconds+0x10>
    6134:	08 95       	ret

00006136 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6136:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6138:	84 b5       	in	r24, 0x24	; 36
    613a:	82 60       	ori	r24, 0x02	; 2
    613c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    613e:	84 b5       	in	r24, 0x24	; 36
    6140:	81 60       	ori	r24, 0x01	; 1
    6142:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6144:	85 b5       	in	r24, 0x25	; 37
    6146:	82 60       	ori	r24, 0x02	; 2
    6148:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    614a:	85 b5       	in	r24, 0x25	; 37
    614c:	81 60       	ori	r24, 0x01	; 1
    614e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6150:	ee e6       	ldi	r30, 0x6E	; 110
    6152:	f0 e0       	ldi	r31, 0x00	; 0
    6154:	80 81       	ld	r24, Z
    6156:	81 60       	ori	r24, 0x01	; 1
    6158:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    615a:	e1 e8       	ldi	r30, 0x81	; 129
    615c:	f0 e0       	ldi	r31, 0x00	; 0
    615e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6160:	80 81       	ld	r24, Z
    6162:	82 60       	ori	r24, 0x02	; 2
    6164:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6166:	80 81       	ld	r24, Z
    6168:	81 60       	ori	r24, 0x01	; 1
    616a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    616c:	e0 e8       	ldi	r30, 0x80	; 128
    616e:	f0 e0       	ldi	r31, 0x00	; 0
    6170:	80 81       	ld	r24, Z
    6172:	81 60       	ori	r24, 0x01	; 1
    6174:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6176:	e1 eb       	ldi	r30, 0xB1	; 177
    6178:	f0 e0       	ldi	r31, 0x00	; 0
    617a:	80 81       	ld	r24, Z
    617c:	84 60       	ori	r24, 0x04	; 4
    617e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6180:	e0 eb       	ldi	r30, 0xB0	; 176
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	80 81       	ld	r24, Z
    6186:	81 60       	ori	r24, 0x01	; 1
    6188:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    618a:	ea e7       	ldi	r30, 0x7A	; 122
    618c:	f0 e0       	ldi	r31, 0x00	; 0
    618e:	80 81       	ld	r24, Z
    6190:	84 60       	ori	r24, 0x04	; 4
    6192:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6194:	80 81       	ld	r24, Z
    6196:	82 60       	ori	r24, 0x02	; 2
    6198:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    619a:	80 81       	ld	r24, Z
    619c:	81 60       	ori	r24, 0x01	; 1
    619e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    61a0:	80 81       	ld	r24, Z
    61a2:	80 68       	ori	r24, 0x80	; 128
    61a4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    61a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    61aa:	08 95       	ret

000061ac <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    61ac:	8e 30       	cpi	r24, 0x0E	; 14
    61ae:	08 f0       	brcs	.+2      	; 0x61b2 <analogRead+0x6>
    61b0:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    61b2:	87 70       	andi	r24, 0x07	; 7
    61b4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    61b8:	90 e4       	ldi	r25, 0x40	; 64
    61ba:	29 9f       	mul	r18, r25
    61bc:	90 01       	movw	r18, r0
    61be:	11 24       	eor	r1, r1
    61c0:	82 2b       	or	r24, r18
    61c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    61c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    61ca:	80 64       	ori	r24, 0x40	; 64
    61cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    61d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    61d4:	86 fd       	sbrc	r24, 6
    61d6:	fc cf       	rjmp	.-8      	; 0x61d0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    61d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    61dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    61e0:	90 e0       	ldi	r25, 0x00	; 0
}
    61e2:	92 2b       	or	r25, r18
    61e4:	08 95       	ret

000061e6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    61e6:	83 30       	cpi	r24, 0x03	; 3
    61e8:	81 f0       	breq	.+32     	; 0x620a <turnOffPWM+0x24>
    61ea:	28 f4       	brcc	.+10     	; 0x61f6 <turnOffPWM+0x10>
    61ec:	81 30       	cpi	r24, 0x01	; 1
    61ee:	99 f0       	breq	.+38     	; 0x6216 <turnOffPWM+0x30>
    61f0:	82 30       	cpi	r24, 0x02	; 2
    61f2:	a1 f0       	breq	.+40     	; 0x621c <turnOffPWM+0x36>
    61f4:	08 95       	ret
    61f6:	87 30       	cpi	r24, 0x07	; 7
    61f8:	a9 f0       	breq	.+42     	; 0x6224 <turnOffPWM+0x3e>
    61fa:	88 30       	cpi	r24, 0x08	; 8
    61fc:	b9 f0       	breq	.+46     	; 0x622c <turnOffPWM+0x46>
    61fe:	84 30       	cpi	r24, 0x04	; 4
    6200:	d1 f4       	brne	.+52     	; 0x6236 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6202:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6206:	8f 7d       	andi	r24, 0xDF	; 223
    6208:	03 c0       	rjmp	.+6      	; 0x6210 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    620a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    620e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6210:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6214:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6216:	84 b5       	in	r24, 0x24	; 36
    6218:	8f 77       	andi	r24, 0x7F	; 127
    621a:	02 c0       	rjmp	.+4      	; 0x6220 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    621c:	84 b5       	in	r24, 0x24	; 36
    621e:	8f 7d       	andi	r24, 0xDF	; 223
    6220:	84 bd       	out	0x24, r24	; 36
    6222:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6224:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6228:	8f 77       	andi	r24, 0x7F	; 127
    622a:	03 c0       	rjmp	.+6      	; 0x6232 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    622c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6230:	8f 7d       	andi	r24, 0xDF	; 223
    6232:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6236:	08 95       	ret

00006238 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	fc 01       	movw	r30, r24
    6240:	e6 58       	subi	r30, 0x86	; 134
    6242:	fb 4f       	sbci	r31, 0xFB	; 251
    6244:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6246:	fc 01       	movw	r30, r24
    6248:	e2 57       	subi	r30, 0x72	; 114
    624a:	fb 4f       	sbci	r31, 0xFB	; 251
    624c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    624e:	88 23       	and	r24, r24
    6250:	61 f1       	breq	.+88     	; 0x62aa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	88 0f       	add	r24, r24
    6256:	99 1f       	adc	r25, r25
    6258:	fc 01       	movw	r30, r24
    625a:	ea 54       	subi	r30, 0x4A	; 74
    625c:	fb 4f       	sbci	r31, 0xFB	; 251
    625e:	c5 91       	lpm	r28, Z+
    6260:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6262:	fc 01       	movw	r30, r24
    6264:	e4 55       	subi	r30, 0x54	; 84
    6266:	fb 4f       	sbci	r31, 0xFB	; 251
    6268:	a5 91       	lpm	r26, Z+
    626a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    626c:	61 11       	cpse	r22, r1
    626e:	09 c0       	rjmp	.+18     	; 0x6282 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6270:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6272:	f8 94       	cli
		*reg &= ~bit;
    6274:	88 81       	ld	r24, Y
    6276:	20 95       	com	r18
    6278:	82 23       	and	r24, r18
    627a:	88 83       	st	Y, r24
		*out &= ~bit;
    627c:	ec 91       	ld	r30, X
    627e:	2e 23       	and	r18, r30
    6280:	0b c0       	rjmp	.+22     	; 0x6298 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6282:	62 30       	cpi	r22, 0x02	; 2
    6284:	61 f4       	brne	.+24     	; 0x629e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6286:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6288:	f8 94       	cli
		*reg &= ~bit;
    628a:	38 81       	ld	r19, Y
    628c:	82 2f       	mov	r24, r18
    628e:	80 95       	com	r24
    6290:	83 23       	and	r24, r19
    6292:	88 83       	st	Y, r24
		*out |= bit;
    6294:	ec 91       	ld	r30, X
    6296:	2e 2b       	or	r18, r30
    6298:	2c 93       	st	X, r18
		SREG = oldSREG;
    629a:	9f bf       	out	0x3f, r25	; 63
    629c:	06 c0       	rjmp	.+12     	; 0x62aa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    629e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    62a0:	f8 94       	cli
		*reg |= bit;
    62a2:	e8 81       	ld	r30, Y
    62a4:	2e 2b       	or	r18, r30
    62a6:	28 83       	st	Y, r18
		SREG = oldSREG;
    62a8:	8f bf       	out	0x3f, r24	; 63
	}
}
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	08 95       	ret

000062b0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    62b0:	1f 93       	push	r17
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    62b6:	28 2f       	mov	r18, r24
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	f9 01       	movw	r30, r18
    62bc:	ea 59       	subi	r30, 0x9A	; 154
    62be:	fb 4f       	sbci	r31, 0xFB	; 251
    62c0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    62c2:	f9 01       	movw	r30, r18
    62c4:	e6 58       	subi	r30, 0x86	; 134
    62c6:	fb 4f       	sbci	r31, 0xFB	; 251
    62c8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    62ca:	f9 01       	movw	r30, r18
    62cc:	e2 57       	subi	r30, 0x72	; 114
    62ce:	fb 4f       	sbci	r31, 0xFB	; 251
    62d0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    62d2:	cc 23       	and	r28, r28
    62d4:	c1 f0       	breq	.+48     	; 0x6306 <digitalWrite+0x56>
    62d6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    62d8:	81 11       	cpse	r24, r1
    62da:	85 df       	rcall	.-246    	; 0x61e6 <turnOffPWM>

	out = portOutputRegister(port);
    62dc:	ec 2f       	mov	r30, r28
    62de:	f0 e0       	ldi	r31, 0x00	; 0
    62e0:	ee 0f       	add	r30, r30
    62e2:	ff 1f       	adc	r31, r31
    62e4:	e4 55       	subi	r30, 0x54	; 84
    62e6:	fb 4f       	sbci	r31, 0xFB	; 251
    62e8:	a5 91       	lpm	r26, Z+
    62ea:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    62ec:	8f b7       	in	r24, 0x3f	; 63
	cli();
    62ee:	f8 94       	cli

	if (val == LOW) {
    62f0:	11 11       	cpse	r17, r1
    62f2:	05 c0       	rjmp	.+10     	; 0x62fe <digitalWrite+0x4e>
		*out &= ~bit;
    62f4:	9c 91       	ld	r25, X
    62f6:	ed 2f       	mov	r30, r29
    62f8:	e0 95       	com	r30
    62fa:	e9 23       	and	r30, r25
    62fc:	02 c0       	rjmp	.+4      	; 0x6302 <digitalWrite+0x52>
	} else {
		*out |= bit;
    62fe:	ec 91       	ld	r30, X
    6300:	ed 2b       	or	r30, r29
    6302:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    6304:	8f bf       	out	0x3f, r24	; 63
}
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	1f 91       	pop	r17
    630c:	08 95       	ret

0000630e <digitalRead>:

int digitalRead(uint8_t pin)
{
    630e:	cf 93       	push	r28
    6310:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6312:	28 2f       	mov	r18, r24
    6314:	30 e0       	ldi	r19, 0x00	; 0
    6316:	f9 01       	movw	r30, r18
    6318:	ea 59       	subi	r30, 0x9A	; 154
    631a:	fb 4f       	sbci	r31, 0xFB	; 251
    631c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    631e:	f9 01       	movw	r30, r18
    6320:	e6 58       	subi	r30, 0x86	; 134
    6322:	fb 4f       	sbci	r31, 0xFB	; 251
    6324:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6326:	f9 01       	movw	r30, r18
    6328:	e2 57       	subi	r30, 0x72	; 114
    632a:	fb 4f       	sbci	r31, 0xFB	; 251
    632c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    632e:	cc 23       	and	r28, r28
    6330:	89 f0       	breq	.+34     	; 0x6354 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6332:	81 11       	cpse	r24, r1
    6334:	58 df       	rcall	.-336    	; 0x61e6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6336:	ec 2f       	mov	r30, r28
    6338:	f0 e0       	ldi	r31, 0x00	; 0
    633a:	ee 0f       	add	r30, r30
    633c:	ff 1f       	adc	r31, r31
    633e:	ee 55       	subi	r30, 0x5E	; 94
    6340:	fb 4f       	sbci	r31, 0xFB	; 251
    6342:	a5 91       	lpm	r26, Z+
    6344:	b4 91       	lpm	r27, Z
    6346:	ec 91       	ld	r30, X
    6348:	ed 23       	and	r30, r29
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	21 f4       	brne	.+8      	; 0x6358 <digitalRead+0x4a>
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	02 c0       	rjmp	.+4      	; 0x6358 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6358:	df 91       	pop	r29
    635a:	cf 91       	pop	r28
    635c:	08 95       	ret

0000635e <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    635e:	fc 01       	movw	r30, r24
    6360:	80 81       	ld	r24, Z
    6362:	91 81       	ldd	r25, Z+1	; 0x01
    6364:	29 c4       	rjmp	.+2130   	; 0x6bb8 <free>

00006366 <_ZN6String10invalidateEv>:
    6366:	cf 93       	push	r28
    6368:	df 93       	push	r29
    636a:	ec 01       	movw	r28, r24
    636c:	88 81       	ld	r24, Y
    636e:	99 81       	ldd	r25, Y+1	; 0x01
    6370:	00 97       	sbiw	r24, 0x00	; 0
    6372:	09 f0       	breq	.+2      	; 0x6376 <_ZN6String10invalidateEv+0x10>
    6374:	21 d4       	rcall	.+2114   	; 0x6bb8 <free>
    6376:	19 82       	std	Y+1, r1	; 0x01
    6378:	18 82       	st	Y, r1
    637a:	1d 82       	std	Y+5, r1	; 0x05
    637c:	1c 82       	std	Y+4, r1	; 0x04
    637e:	1b 82       	std	Y+3, r1	; 0x03
    6380:	1a 82       	std	Y+2, r1	; 0x02
    6382:	df 91       	pop	r29
    6384:	cf 91       	pop	r28
    6386:	08 95       	ret

00006388 <_ZN6String12changeBufferEj>:
    6388:	0f 93       	push	r16
    638a:	1f 93       	push	r17
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	ec 01       	movw	r28, r24
    6392:	8b 01       	movw	r16, r22
    6394:	6f 5f       	subi	r22, 0xFF	; 255
    6396:	7f 4f       	sbci	r23, 0xFF	; 255
    6398:	88 81       	ld	r24, Y
    639a:	99 81       	ldd	r25, Y+1	; 0x01
    639c:	a5 d4       	rcall	.+2378   	; 0x6ce8 <realloc>
    639e:	00 97       	sbiw	r24, 0x00	; 0
    63a0:	31 f0       	breq	.+12     	; 0x63ae <_ZN6String12changeBufferEj+0x26>
    63a2:	99 83       	std	Y+1, r25	; 0x01
    63a4:	88 83       	st	Y, r24
    63a6:	1b 83       	std	Y+3, r17	; 0x03
    63a8:	0a 83       	std	Y+2, r16	; 0x02
    63aa:	81 e0       	ldi	r24, 0x01	; 1
    63ac:	01 c0       	rjmp	.+2      	; 0x63b0 <_ZN6String12changeBufferEj+0x28>
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	df 91       	pop	r29
    63b2:	cf 91       	pop	r28
    63b4:	1f 91       	pop	r17
    63b6:	0f 91       	pop	r16
    63b8:	08 95       	ret

000063ba <_ZN6String7reserveEj>:
    63ba:	cf 93       	push	r28
    63bc:	df 93       	push	r29
    63be:	ec 01       	movw	r28, r24
    63c0:	88 81       	ld	r24, Y
    63c2:	99 81       	ldd	r25, Y+1	; 0x01
    63c4:	89 2b       	or	r24, r25
    63c6:	29 f0       	breq	.+10     	; 0x63d2 <_ZN6String7reserveEj+0x18>
    63c8:	8a 81       	ldd	r24, Y+2	; 0x02
    63ca:	9b 81       	ldd	r25, Y+3	; 0x03
    63cc:	86 17       	cp	r24, r22
    63ce:	97 07       	cpc	r25, r23
    63d0:	58 f4       	brcc	.+22     	; 0x63e8 <_ZN6String7reserveEj+0x2e>
    63d2:	ce 01       	movw	r24, r28
    63d4:	d9 df       	rcall	.-78     	; 0x6388 <_ZN6String12changeBufferEj>
    63d6:	88 23       	and	r24, r24
    63d8:	41 f0       	breq	.+16     	; 0x63ea <_ZN6String7reserveEj+0x30>
    63da:	8c 81       	ldd	r24, Y+4	; 0x04
    63dc:	9d 81       	ldd	r25, Y+5	; 0x05
    63de:	89 2b       	or	r24, r25
    63e0:	19 f4       	brne	.+6      	; 0x63e8 <_ZN6String7reserveEj+0x2e>
    63e2:	e8 81       	ld	r30, Y
    63e4:	f9 81       	ldd	r31, Y+1	; 0x01
    63e6:	10 82       	st	Z, r1
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	df 91       	pop	r29
    63ec:	cf 91       	pop	r28
    63ee:	08 95       	ret

000063f0 <_ZN6String4copyEPKcj>:
    63f0:	ef 92       	push	r14
    63f2:	ff 92       	push	r15
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	ec 01       	movw	r28, r24
    63fe:	7b 01       	movw	r14, r22
    6400:	8a 01       	movw	r16, r20
    6402:	ba 01       	movw	r22, r20
    6404:	da df       	rcall	.-76     	; 0x63ba <_ZN6String7reserveEj>
    6406:	81 11       	cpse	r24, r1
    6408:	03 c0       	rjmp	.+6      	; 0x6410 <_ZN6String4copyEPKcj+0x20>
    640a:	ce 01       	movw	r24, r28
    640c:	ac df       	rcall	.-168    	; 0x6366 <_ZN6String10invalidateEv>
    640e:	06 c0       	rjmp	.+12     	; 0x641c <_ZN6String4copyEPKcj+0x2c>
    6410:	1d 83       	std	Y+5, r17	; 0x05
    6412:	0c 83       	std	Y+4, r16	; 0x04
    6414:	b7 01       	movw	r22, r14
    6416:	88 81       	ld	r24, Y
    6418:	99 81       	ldd	r25, Y+1	; 0x01
    641a:	de d6       	rcall	.+3516   	; 0x71d8 <strcpy>
    641c:	ce 01       	movw	r24, r28
    641e:	df 91       	pop	r29
    6420:	cf 91       	pop	r28
    6422:	1f 91       	pop	r17
    6424:	0f 91       	pop	r16
    6426:	ff 90       	pop	r15
    6428:	ef 90       	pop	r14
    642a:	08 95       	ret

0000642c <_ZN6StringC1EPKc>:
    642c:	fc 01       	movw	r30, r24
    642e:	11 82       	std	Z+1, r1	; 0x01
    6430:	10 82       	st	Z, r1
    6432:	13 82       	std	Z+3, r1	; 0x03
    6434:	12 82       	std	Z+2, r1	; 0x02
    6436:	15 82       	std	Z+5, r1	; 0x05
    6438:	14 82       	std	Z+4, r1	; 0x04
    643a:	61 15       	cp	r22, r1
    643c:	71 05       	cpc	r23, r1
    643e:	49 f0       	breq	.+18     	; 0x6452 <_ZN6StringC1EPKc+0x26>
    6440:	fb 01       	movw	r30, r22
    6442:	01 90       	ld	r0, Z+
    6444:	00 20       	and	r0, r0
    6446:	e9 f7       	brne	.-6      	; 0x6442 <_ZN6StringC1EPKc+0x16>
    6448:	31 97       	sbiw	r30, 0x01	; 1
    644a:	af 01       	movw	r20, r30
    644c:	46 1b       	sub	r20, r22
    644e:	57 0b       	sbc	r21, r23
    6450:	cf cf       	rjmp	.-98     	; 0x63f0 <_ZN6String4copyEPKcj>
    6452:	08 95       	ret

00006454 <_ZN6StringaSERKS_>:
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	ec 01       	movw	r28, r24
    645a:	fb 01       	movw	r30, r22
    645c:	86 17       	cp	r24, r22
    645e:	97 07       	cpc	r25, r23
    6460:	51 f0       	breq	.+20     	; 0x6476 <_ZN6StringaSERKS_+0x22>
    6462:	60 81       	ld	r22, Z
    6464:	71 81       	ldd	r23, Z+1	; 0x01
    6466:	61 15       	cp	r22, r1
    6468:	71 05       	cpc	r23, r1
    646a:	21 f0       	breq	.+8      	; 0x6474 <_ZN6StringaSERKS_+0x20>
    646c:	44 81       	ldd	r20, Z+4	; 0x04
    646e:	55 81       	ldd	r21, Z+5	; 0x05
    6470:	bf df       	rcall	.-130    	; 0x63f0 <_ZN6String4copyEPKcj>
    6472:	01 c0       	rjmp	.+2      	; 0x6476 <_ZN6StringaSERKS_+0x22>
    6474:	78 df       	rcall	.-272    	; 0x6366 <_ZN6String10invalidateEv>
    6476:	ce 01       	movw	r24, r28
    6478:	df 91       	pop	r29
    647a:	cf 91       	pop	r28
    647c:	08 95       	ret

0000647e <_ZN6StringC1ERKS_>:
    647e:	fc 01       	movw	r30, r24
    6480:	11 82       	std	Z+1, r1	; 0x01
    6482:	10 82       	st	Z, r1
    6484:	13 82       	std	Z+3, r1	; 0x03
    6486:	12 82       	std	Z+2, r1	; 0x02
    6488:	15 82       	std	Z+5, r1	; 0x05
    648a:	14 82       	std	Z+4, r1	; 0x04
    648c:	e3 cf       	rjmp	.-58     	; 0x6454 <_ZN6StringaSERKS_>

0000648e <_ZN6StringaSEPKc>:
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
    6492:	ec 01       	movw	r28, r24
    6494:	61 15       	cp	r22, r1
    6496:	71 05       	cpc	r23, r1
    6498:	51 f0       	breq	.+20     	; 0x64ae <_ZN6StringaSEPKc+0x20>
    649a:	fb 01       	movw	r30, r22
    649c:	01 90       	ld	r0, Z+
    649e:	00 20       	and	r0, r0
    64a0:	e9 f7       	brne	.-6      	; 0x649c <_ZN6StringaSEPKc+0xe>
    64a2:	31 97       	sbiw	r30, 0x01	; 1
    64a4:	af 01       	movw	r20, r30
    64a6:	46 1b       	sub	r20, r22
    64a8:	57 0b       	sbc	r21, r23
    64aa:	a2 df       	rcall	.-188    	; 0x63f0 <_ZN6String4copyEPKcj>
    64ac:	01 c0       	rjmp	.+2      	; 0x64b0 <_ZN6StringaSEPKc+0x22>
    64ae:	5b df       	rcall	.-330    	; 0x6366 <_ZN6String10invalidateEv>
    64b0:	ce 01       	movw	r24, r28
    64b2:	df 91       	pop	r29
    64b4:	cf 91       	pop	r28
    64b6:	08 95       	ret

000064b8 <_ZN6StringC1Eih>:
    64b8:	0f 93       	push	r16
    64ba:	1f 93       	push	r17
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	cd b7       	in	r28, 0x3d	; 61
    64c2:	de b7       	in	r29, 0x3e	; 62
    64c4:	62 97       	sbiw	r28, 0x12	; 18
    64c6:	0f b6       	in	r0, 0x3f	; 63
    64c8:	f8 94       	cli
    64ca:	de bf       	out	0x3e, r29	; 62
    64cc:	0f be       	out	0x3f, r0	; 63
    64ce:	cd bf       	out	0x3d, r28	; 61
    64d0:	8c 01       	movw	r16, r24
    64d2:	cb 01       	movw	r24, r22
    64d4:	f8 01       	movw	r30, r16
    64d6:	11 82       	std	Z+1, r1	; 0x01
    64d8:	10 82       	st	Z, r1
    64da:	13 82       	std	Z+3, r1	; 0x03
    64dc:	12 82       	std	Z+2, r1	; 0x02
    64de:	15 82       	std	Z+5, r1	; 0x05
    64e0:	14 82       	std	Z+4, r1	; 0x04
    64e2:	50 e0       	ldi	r21, 0x00	; 0
    64e4:	be 01       	movw	r22, r28
    64e6:	6f 5f       	subi	r22, 0xFF	; 255
    64e8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ea:	8b d6       	rcall	.+3350   	; 0x7202 <itoa>
    64ec:	be 01       	movw	r22, r28
    64ee:	6f 5f       	subi	r22, 0xFF	; 255
    64f0:	7f 4f       	sbci	r23, 0xFF	; 255
    64f2:	c8 01       	movw	r24, r16
    64f4:	cc df       	rcall	.-104    	; 0x648e <_ZN6StringaSEPKc>
    64f6:	62 96       	adiw	r28, 0x12	; 18
    64f8:	0f b6       	in	r0, 0x3f	; 63
    64fa:	f8 94       	cli
    64fc:	de bf       	out	0x3e, r29	; 62
    64fe:	0f be       	out	0x3f, r0	; 63
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	df 91       	pop	r29
    6504:	cf 91       	pop	r28
    6506:	1f 91       	pop	r17
    6508:	0f 91       	pop	r16
    650a:	08 95       	ret

0000650c <_ZN6StringC1Elh>:
    650c:	0f 93       	push	r16
    650e:	1f 93       	push	r17
    6510:	cf 93       	push	r28
    6512:	df 93       	push	r29
    6514:	cd b7       	in	r28, 0x3d	; 61
    6516:	de b7       	in	r29, 0x3e	; 62
    6518:	a2 97       	sbiw	r28, 0x22	; 34
    651a:	0f b6       	in	r0, 0x3f	; 63
    651c:	f8 94       	cli
    651e:	de bf       	out	0x3e, r29	; 62
    6520:	0f be       	out	0x3f, r0	; 63
    6522:	cd bf       	out	0x3d, r28	; 61
    6524:	8c 01       	movw	r16, r24
    6526:	cb 01       	movw	r24, r22
    6528:	ba 01       	movw	r22, r20
    652a:	f8 01       	movw	r30, r16
    652c:	11 82       	std	Z+1, r1	; 0x01
    652e:	10 82       	st	Z, r1
    6530:	13 82       	std	Z+3, r1	; 0x03
    6532:	12 82       	std	Z+2, r1	; 0x02
    6534:	15 82       	std	Z+5, r1	; 0x05
    6536:	14 82       	std	Z+4, r1	; 0x04
    6538:	30 e0       	ldi	r19, 0x00	; 0
    653a:	ae 01       	movw	r20, r28
    653c:	4f 5f       	subi	r20, 0xFF	; 255
    653e:	5f 4f       	sbci	r21, 0xFF	; 255
    6540:	74 d6       	rcall	.+3304   	; 0x722a <ltoa>
    6542:	be 01       	movw	r22, r28
    6544:	6f 5f       	subi	r22, 0xFF	; 255
    6546:	7f 4f       	sbci	r23, 0xFF	; 255
    6548:	c8 01       	movw	r24, r16
    654a:	a1 df       	rcall	.-190    	; 0x648e <_ZN6StringaSEPKc>
    654c:	a2 96       	adiw	r28, 0x22	; 34
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	f8 94       	cli
    6552:	de bf       	out	0x3e, r29	; 62
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	cd bf       	out	0x3d, r28	; 61
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	08 95       	ret

00006562 <_ZN6StringC1Efh>:
    6562:	ef 92       	push	r14
    6564:	ff 92       	push	r15
    6566:	0f 93       	push	r16
    6568:	1f 93       	push	r17
    656a:	cf 93       	push	r28
    656c:	df 93       	push	r29
    656e:	cd b7       	in	r28, 0x3d	; 61
    6570:	de b7       	in	r29, 0x3e	; 62
    6572:	a1 97       	sbiw	r28, 0x21	; 33
    6574:	0f b6       	in	r0, 0x3f	; 63
    6576:	f8 94       	cli
    6578:	de bf       	out	0x3e, r29	; 62
    657a:	0f be       	out	0x3f, r0	; 63
    657c:	cd bf       	out	0x3d, r28	; 61
    657e:	7c 01       	movw	r14, r24
    6580:	cb 01       	movw	r24, r22
    6582:	ba 01       	movw	r22, r20
    6584:	f7 01       	movw	r30, r14
    6586:	11 82       	std	Z+1, r1	; 0x01
    6588:	10 82       	st	Z, r1
    658a:	13 82       	std	Z+3, r1	; 0x03
    658c:	12 82       	std	Z+2, r1	; 0x02
    658e:	15 82       	std	Z+5, r1	; 0x05
    6590:	14 82       	std	Z+4, r1	; 0x04
    6592:	42 e0       	ldi	r20, 0x02	; 2
    6594:	42 0f       	add	r20, r18
    6596:	8e 01       	movw	r16, r28
    6598:	0f 5f       	subi	r16, 0xFF	; 255
    659a:	1f 4f       	sbci	r17, 0xFF	; 255
    659c:	59 d2       	rcall	.+1202   	; 0x6a50 <dtostrf>
    659e:	bc 01       	movw	r22, r24
    65a0:	c7 01       	movw	r24, r14
    65a2:	75 df       	rcall	.-278    	; 0x648e <_ZN6StringaSEPKc>
    65a4:	a1 96       	adiw	r28, 0x21	; 33
    65a6:	0f b6       	in	r0, 0x3f	; 63
    65a8:	f8 94       	cli
    65aa:	de bf       	out	0x3e, r29	; 62
    65ac:	0f be       	out	0x3f, r0	; 63
    65ae:	cd bf       	out	0x3d, r28	; 61
    65b0:	df 91       	pop	r29
    65b2:	cf 91       	pop	r28
    65b4:	1f 91       	pop	r17
    65b6:	0f 91       	pop	r16
    65b8:	ff 90       	pop	r15
    65ba:	ef 90       	pop	r14
    65bc:	08 95       	ret

000065be <_ZN6StringC1Edh>:
    65be:	ef 92       	push	r14
    65c0:	ff 92       	push	r15
    65c2:	0f 93       	push	r16
    65c4:	1f 93       	push	r17
    65c6:	cf 93       	push	r28
    65c8:	df 93       	push	r29
    65ca:	cd b7       	in	r28, 0x3d	; 61
    65cc:	de b7       	in	r29, 0x3e	; 62
    65ce:	a1 97       	sbiw	r28, 0x21	; 33
    65d0:	0f b6       	in	r0, 0x3f	; 63
    65d2:	f8 94       	cli
    65d4:	de bf       	out	0x3e, r29	; 62
    65d6:	0f be       	out	0x3f, r0	; 63
    65d8:	cd bf       	out	0x3d, r28	; 61
    65da:	7c 01       	movw	r14, r24
    65dc:	cb 01       	movw	r24, r22
    65de:	ba 01       	movw	r22, r20
    65e0:	f7 01       	movw	r30, r14
    65e2:	11 82       	std	Z+1, r1	; 0x01
    65e4:	10 82       	st	Z, r1
    65e6:	13 82       	std	Z+3, r1	; 0x03
    65e8:	12 82       	std	Z+2, r1	; 0x02
    65ea:	15 82       	std	Z+5, r1	; 0x05
    65ec:	14 82       	std	Z+4, r1	; 0x04
    65ee:	42 e0       	ldi	r20, 0x02	; 2
    65f0:	42 0f       	add	r20, r18
    65f2:	8e 01       	movw	r16, r28
    65f4:	0f 5f       	subi	r16, 0xFF	; 255
    65f6:	1f 4f       	sbci	r17, 0xFF	; 255
    65f8:	2b d2       	rcall	.+1110   	; 0x6a50 <dtostrf>
    65fa:	bc 01       	movw	r22, r24
    65fc:	c7 01       	movw	r24, r14
    65fe:	47 df       	rcall	.-370    	; 0x648e <_ZN6StringaSEPKc>
    6600:	a1 96       	adiw	r28, 0x21	; 33
    6602:	0f b6       	in	r0, 0x3f	; 63
    6604:	f8 94       	cli
    6606:	de bf       	out	0x3e, r29	; 62
    6608:	0f be       	out	0x3f, r0	; 63
    660a:	cd bf       	out	0x3d, r28	; 61
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	1f 91       	pop	r17
    6612:	0f 91       	pop	r16
    6614:	ff 90       	pop	r15
    6616:	ef 90       	pop	r14
    6618:	08 95       	ret

0000661a <_ZN6String6concatEPKcj>:
    661a:	ef 92       	push	r14
    661c:	ff 92       	push	r15
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
    6626:	fc 01       	movw	r30, r24
    6628:	24 81       	ldd	r18, Z+4	; 0x04
    662a:	35 81       	ldd	r19, Z+5	; 0x05
    662c:	61 15       	cp	r22, r1
    662e:	71 05       	cpc	r23, r1
    6630:	11 f4       	brne	.+4      	; 0x6636 <_ZN6String6concatEPKcj+0x1c>
    6632:	80 e0       	ldi	r24, 0x00	; 0
    6634:	17 c0       	rjmp	.+46     	; 0x6664 <_ZN6String6concatEPKcj+0x4a>
    6636:	41 15       	cp	r20, r1
    6638:	51 05       	cpc	r21, r1
    663a:	99 f0       	breq	.+38     	; 0x6662 <_ZN6String6concatEPKcj+0x48>
    663c:	7b 01       	movw	r14, r22
    663e:	ec 01       	movw	r28, r24
    6640:	8a 01       	movw	r16, r20
    6642:	02 0f       	add	r16, r18
    6644:	13 1f       	adc	r17, r19
    6646:	b8 01       	movw	r22, r16
    6648:	b8 de       	rcall	.-656    	; 0x63ba <_ZN6String7reserveEj>
    664a:	88 23       	and	r24, r24
    664c:	91 f3       	breq	.-28     	; 0x6632 <_ZN6String6concatEPKcj+0x18>
    664e:	28 81       	ld	r18, Y
    6650:	39 81       	ldd	r19, Y+1	; 0x01
    6652:	8c 81       	ldd	r24, Y+4	; 0x04
    6654:	9d 81       	ldd	r25, Y+5	; 0x05
    6656:	b7 01       	movw	r22, r14
    6658:	82 0f       	add	r24, r18
    665a:	93 1f       	adc	r25, r19
    665c:	bd d5       	rcall	.+2938   	; 0x71d8 <strcpy>
    665e:	1d 83       	std	Y+5, r17	; 0x05
    6660:	0c 83       	std	Y+4, r16	; 0x04
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	ff 90       	pop	r15
    666e:	ef 90       	pop	r14
    6670:	08 95       	ret

00006672 <_ZN6String6concatEPKc>:
    6672:	61 15       	cp	r22, r1
    6674:	71 05       	cpc	r23, r1
    6676:	49 f0       	breq	.+18     	; 0x668a <_ZN6String6concatEPKc+0x18>
    6678:	fb 01       	movw	r30, r22
    667a:	01 90       	ld	r0, Z+
    667c:	00 20       	and	r0, r0
    667e:	e9 f7       	brne	.-6      	; 0x667a <_ZN6String6concatEPKc+0x8>
    6680:	31 97       	sbiw	r30, 0x01	; 1
    6682:	af 01       	movw	r20, r30
    6684:	46 1b       	sub	r20, r22
    6686:	57 0b       	sbc	r21, r23
    6688:	c8 cf       	rjmp	.-112    	; 0x661a <_ZN6String6concatEPKcj>
    668a:	80 e0       	ldi	r24, 0x00	; 0
    668c:	08 95       	ret

0000668e <_ZN6String6concatEc>:
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    6692:	00 d0       	rcall	.+0      	; 0x6694 <_ZN6String6concatEc+0x6>
    6694:	cd b7       	in	r28, 0x3d	; 61
    6696:	de b7       	in	r29, 0x3e	; 62
    6698:	69 83       	std	Y+1, r22	; 0x01
    669a:	1a 82       	std	Y+2, r1	; 0x02
    669c:	41 e0       	ldi	r20, 0x01	; 1
    669e:	50 e0       	ldi	r21, 0x00	; 0
    66a0:	be 01       	movw	r22, r28
    66a2:	6f 5f       	subi	r22, 0xFF	; 255
    66a4:	7f 4f       	sbci	r23, 0xFF	; 255
    66a6:	b9 df       	rcall	.-142    	; 0x661a <_ZN6String6concatEPKcj>
    66a8:	0f 90       	pop	r0
    66aa:	0f 90       	pop	r0
    66ac:	df 91       	pop	r29
    66ae:	cf 91       	pop	r28
    66b0:	08 95       	ret

000066b2 <_ZplRK15StringSumHelperRK6String>:
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	ec 01       	movw	r28, r24
    66b8:	fb 01       	movw	r30, r22
    66ba:	44 81       	ldd	r20, Z+4	; 0x04
    66bc:	55 81       	ldd	r21, Z+5	; 0x05
    66be:	60 81       	ld	r22, Z
    66c0:	71 81       	ldd	r23, Z+1	; 0x01
    66c2:	ab df       	rcall	.-170    	; 0x661a <_ZN6String6concatEPKcj>
    66c4:	81 11       	cpse	r24, r1
    66c6:	02 c0       	rjmp	.+4      	; 0x66cc <_ZplRK15StringSumHelperRK6String+0x1a>
    66c8:	ce 01       	movw	r24, r28
    66ca:	4d de       	rcall	.-870    	; 0x6366 <_ZN6String10invalidateEv>
    66cc:	ce 01       	movw	r24, r28
    66ce:	df 91       	pop	r29
    66d0:	cf 91       	pop	r28
    66d2:	08 95       	ret

000066d4 <_ZplRK15StringSumHelperPKc>:
    66d4:	cf 93       	push	r28
    66d6:	df 93       	push	r29
    66d8:	ec 01       	movw	r28, r24
    66da:	61 15       	cp	r22, r1
    66dc:	71 05       	cpc	r23, r1
    66de:	59 f0       	breq	.+22     	; 0x66f6 <_ZplRK15StringSumHelperPKc+0x22>
    66e0:	fb 01       	movw	r30, r22
    66e2:	01 90       	ld	r0, Z+
    66e4:	00 20       	and	r0, r0
    66e6:	e9 f7       	brne	.-6      	; 0x66e2 <_ZplRK15StringSumHelperPKc+0xe>
    66e8:	31 97       	sbiw	r30, 0x01	; 1
    66ea:	af 01       	movw	r20, r30
    66ec:	46 1b       	sub	r20, r22
    66ee:	57 0b       	sbc	r21, r23
    66f0:	94 df       	rcall	.-216    	; 0x661a <_ZN6String6concatEPKcj>
    66f2:	81 11       	cpse	r24, r1
    66f4:	02 c0       	rjmp	.+4      	; 0x66fa <_ZplRK15StringSumHelperPKc+0x26>
    66f6:	ce 01       	movw	r24, r28
    66f8:	36 de       	rcall	.-916    	; 0x6366 <_ZN6String10invalidateEv>
    66fa:	ce 01       	movw	r24, r28
    66fc:	df 91       	pop	r29
    66fe:	cf 91       	pop	r28
    6700:	08 95       	ret

00006702 <_ZNK6String6equalsEPKc>:
    6702:	fc 01       	movw	r30, r24
    6704:	24 81       	ldd	r18, Z+4	; 0x04
    6706:	35 81       	ldd	r19, Z+5	; 0x05
    6708:	23 2b       	or	r18, r19
    670a:	31 f4       	brne	.+12     	; 0x6718 <_ZNK6String6equalsEPKc+0x16>
    670c:	21 e0       	ldi	r18, 0x01	; 1
    670e:	61 15       	cp	r22, r1
    6710:	71 05       	cpc	r23, r1
    6712:	99 f0       	breq	.+38     	; 0x673a <_ZNK6String6equalsEPKc+0x38>
    6714:	fb 01       	movw	r30, r22
    6716:	08 c0       	rjmp	.+16     	; 0x6728 <_ZNK6String6equalsEPKc+0x26>
    6718:	fc 01       	movw	r30, r24
    671a:	80 81       	ld	r24, Z
    671c:	91 81       	ldd	r25, Z+1	; 0x01
    671e:	61 15       	cp	r22, r1
    6720:	71 05       	cpc	r23, r1
    6722:	31 f4       	brne	.+12     	; 0x6730 <_ZNK6String6equalsEPKc+0x2e>
    6724:	21 e0       	ldi	r18, 0x01	; 1
    6726:	fc 01       	movw	r30, r24
    6728:	80 81       	ld	r24, Z
    672a:	88 23       	and	r24, r24
    672c:	31 f0       	breq	.+12     	; 0x673a <_ZNK6String6equalsEPKc+0x38>
    672e:	04 c0       	rjmp	.+8      	; 0x6738 <_ZNK6String6equalsEPKc+0x36>
    6730:	4a d5       	rcall	.+2708   	; 0x71c6 <strcmp>
    6732:	21 e0       	ldi	r18, 0x01	; 1
    6734:	89 2b       	or	r24, r25
    6736:	09 f0       	breq	.+2      	; 0x673a <_ZNK6String6equalsEPKc+0x38>
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	82 2f       	mov	r24, r18
    673c:	08 95       	ret

0000673e <_ZNK6String10startsWithERKS_j>:
    673e:	db 01       	movw	r26, r22
    6740:	14 96       	adiw	r26, 0x04	; 4
    6742:	ed 91       	ld	r30, X+
    6744:	fc 91       	ld	r31, X
    6746:	15 97       	sbiw	r26, 0x05	; 5
    6748:	dc 01       	movw	r26, r24
    674a:	14 96       	adiw	r26, 0x04	; 4
    674c:	2d 91       	ld	r18, X+
    674e:	3c 91       	ld	r19, X
    6750:	15 97       	sbiw	r26, 0x05	; 5
    6752:	2e 1b       	sub	r18, r30
    6754:	3f 0b       	sbc	r19, r31
    6756:	24 17       	cp	r18, r20
    6758:	35 07       	cpc	r19, r21
    675a:	98 f0       	brcs	.+38     	; 0x6782 <_ZNK6String10startsWithERKS_j+0x44>
    675c:	2d 91       	ld	r18, X+
    675e:	3c 91       	ld	r19, X
    6760:	21 15       	cp	r18, r1
    6762:	31 05       	cpc	r19, r1
    6764:	71 f0       	breq	.+28     	; 0x6782 <_ZNK6String10startsWithERKS_j+0x44>
    6766:	db 01       	movw	r26, r22
    6768:	6d 91       	ld	r22, X+
    676a:	7c 91       	ld	r23, X
    676c:	61 15       	cp	r22, r1
    676e:	71 05       	cpc	r23, r1
    6770:	41 f0       	breq	.+16     	; 0x6782 <_ZNK6String10startsWithERKS_j+0x44>
    6772:	ca 01       	movw	r24, r20
    6774:	af 01       	movw	r20, r30
    6776:	82 0f       	add	r24, r18
    6778:	93 1f       	adc	r25, r19
    677a:	35 d5       	rcall	.+2666   	; 0x71e6 <strncmp>
    677c:	21 e0       	ldi	r18, 0x01	; 1
    677e:	89 2b       	or	r24, r25
    6780:	09 f0       	breq	.+2      	; 0x6784 <_ZNK6String10startsWithERKS_j+0x46>
    6782:	20 e0       	ldi	r18, 0x00	; 0
    6784:	82 2f       	mov	r24, r18
    6786:	08 95       	ret

00006788 <_ZNK6String10startsWithERKS_>:
    6788:	fc 01       	movw	r30, r24
    678a:	44 81       	ldd	r20, Z+4	; 0x04
    678c:	55 81       	ldd	r21, Z+5	; 0x05
    678e:	fb 01       	movw	r30, r22
    6790:	24 81       	ldd	r18, Z+4	; 0x04
    6792:	35 81       	ldd	r19, Z+5	; 0x05
    6794:	42 17       	cp	r20, r18
    6796:	53 07       	cpc	r21, r19
    6798:	18 f0       	brcs	.+6      	; 0x67a0 <_ZNK6String10startsWithERKS_+0x18>
    679a:	40 e0       	ldi	r20, 0x00	; 0
    679c:	50 e0       	ldi	r21, 0x00	; 0
    679e:	cf cf       	rjmp	.-98     	; 0x673e <_ZNK6String10startsWithERKS_j>
    67a0:	80 e0       	ldi	r24, 0x00	; 0
    67a2:	08 95       	ret

000067a4 <_ZNK6StringixEj>:
    67a4:	fc 01       	movw	r30, r24
    67a6:	24 81       	ldd	r18, Z+4	; 0x04
    67a8:	35 81       	ldd	r19, Z+5	; 0x05
    67aa:	62 17       	cp	r22, r18
    67ac:	73 07       	cpc	r23, r19
    67ae:	48 f4       	brcc	.+18     	; 0x67c2 <_ZNK6StringixEj+0x1e>
    67b0:	80 81       	ld	r24, Z
    67b2:	91 81       	ldd	r25, Z+1	; 0x01
    67b4:	00 97       	sbiw	r24, 0x00	; 0
    67b6:	29 f0       	breq	.+10     	; 0x67c2 <_ZNK6StringixEj+0x1e>
    67b8:	fc 01       	movw	r30, r24
    67ba:	e6 0f       	add	r30, r22
    67bc:	f7 1f       	adc	r31, r23
    67be:	80 81       	ld	r24, Z
    67c0:	08 95       	ret
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	08 95       	ret

000067c6 <_ZNK6String6charAtEj>:
    67c6:	ee cf       	rjmp	.-36     	; 0x67a4 <_ZNK6StringixEj>

000067c8 <_ZNK6String9substringEjj>:
    67c8:	bf 92       	push	r11
    67ca:	cf 92       	push	r12
    67cc:	df 92       	push	r13
    67ce:	ef 92       	push	r14
    67d0:	ff 92       	push	r15
    67d2:	0f 93       	push	r16
    67d4:	1f 93       	push	r17
    67d6:	cf 93       	push	r28
    67d8:	df 93       	push	r29
    67da:	7c 01       	movw	r14, r24
    67dc:	6b 01       	movw	r12, r22
    67de:	8a 01       	movw	r16, r20
    67e0:	e9 01       	movw	r28, r18
    67e2:	24 17       	cp	r18, r20
    67e4:	35 07       	cpc	r19, r21
    67e6:	20 f4       	brcc	.+8      	; 0x67f0 <_ZNK6String9substringEjj+0x28>
    67e8:	81 2f       	mov	r24, r17
    67ea:	89 01       	movw	r16, r18
    67ec:	c4 2f       	mov	r28, r20
    67ee:	d8 2f       	mov	r29, r24
    67f0:	63 ec       	ldi	r22, 0xC3	; 195
    67f2:	71 e0       	ldi	r23, 0x01	; 1
    67f4:	c7 01       	movw	r24, r14
    67f6:	1a de       	rcall	.-972    	; 0x642c <_ZN6StringC1EPKc>
    67f8:	d6 01       	movw	r26, r12
    67fa:	14 96       	adiw	r26, 0x04	; 4
    67fc:	8d 91       	ld	r24, X+
    67fe:	9c 91       	ld	r25, X
    6800:	15 97       	sbiw	r26, 0x05	; 5
    6802:	08 17       	cp	r16, r24
    6804:	19 07       	cpc	r17, r25
    6806:	c8 f4       	brcc	.+50     	; 0x683a <_ZNK6String9substringEjj+0x72>
    6808:	8c 17       	cp	r24, r28
    680a:	9d 07       	cpc	r25, r29
    680c:	08 f4       	brcc	.+2      	; 0x6810 <_ZNK6String9substringEjj+0x48>
    680e:	ec 01       	movw	r28, r24
    6810:	d6 01       	movw	r26, r12
    6812:	ed 91       	ld	r30, X+
    6814:	fc 91       	ld	r31, X
    6816:	11 97       	sbiw	r26, 0x01	; 1
    6818:	ec 0f       	add	r30, r28
    681a:	fd 1f       	adc	r31, r29
    681c:	b0 80       	ld	r11, Z
    681e:	10 82       	st	Z, r1
    6820:	4d 91       	ld	r20, X+
    6822:	5c 91       	ld	r21, X
    6824:	ba 01       	movw	r22, r20
    6826:	60 0f       	add	r22, r16
    6828:	71 1f       	adc	r23, r17
    682a:	c7 01       	movw	r24, r14
    682c:	30 de       	rcall	.-928    	; 0x648e <_ZN6StringaSEPKc>
    682e:	d6 01       	movw	r26, r12
    6830:	ed 91       	ld	r30, X+
    6832:	fc 91       	ld	r31, X
    6834:	ec 0f       	add	r30, r28
    6836:	fd 1f       	adc	r31, r29
    6838:	b0 82       	st	Z, r11
    683a:	c7 01       	movw	r24, r14
    683c:	df 91       	pop	r29
    683e:	cf 91       	pop	r28
    6840:	1f 91       	pop	r17
    6842:	0f 91       	pop	r16
    6844:	ff 90       	pop	r15
    6846:	ef 90       	pop	r14
    6848:	df 90       	pop	r13
    684a:	cf 90       	pop	r12
    684c:	bf 90       	pop	r11
    684e:	08 95       	ret

00006850 <_ZN6String4trimEv>:

void String::trim(void)
{
    6850:	af 92       	push	r10
    6852:	bf 92       	push	r11
    6854:	cf 92       	push	r12
    6856:	df 92       	push	r13
    6858:	ef 92       	push	r14
    685a:	ff 92       	push	r15
    685c:	0f 93       	push	r16
    685e:	1f 93       	push	r17
    6860:	cf 93       	push	r28
    6862:	df 93       	push	r29
	if (!buffer || len == 0) return;
    6864:	dc 01       	movw	r26, r24
    6866:	cd 90       	ld	r12, X+
    6868:	dc 90       	ld	r13, X
    686a:	11 97       	sbiw	r26, 0x01	; 1
    686c:	c1 14       	cp	r12, r1
    686e:	d1 04       	cpc	r13, r1
    6870:	d9 f1       	breq	.+118    	; 0x68e8 <_ZN6String4trimEv+0x98>
    6872:	14 96       	adiw	r26, 0x04	; 4
    6874:	cd 91       	ld	r28, X+
    6876:	dc 91       	ld	r29, X
    6878:	15 97       	sbiw	r26, 0x05	; 5
    687a:	20 97       	sbiw	r28, 0x00	; 0
    687c:	a9 f1       	breq	.+106    	; 0x68e8 <_ZN6String4trimEv+0x98>
    687e:	8c 01       	movw	r16, r24
    6880:	56 01       	movw	r10, r12
    6882:	75 01       	movw	r14, r10
    6884:	bf ef       	ldi	r27, 0xFF	; 255
    6886:	ab 1a       	sub	r10, r27
    6888:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    688a:	f7 01       	movw	r30, r14
    688c:	80 81       	ld	r24, Z
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	71 d4       	rcall	.+2274   	; 0x7174 <isspace>
    6892:	89 2b       	or	r24, r25
    6894:	b1 f7       	brne	.-20     	; 0x6882 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    6896:	21 97       	sbiw	r28, 0x01	; 1
    6898:	cc 0d       	add	r28, r12
    689a:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    689c:	88 81       	ld	r24, Y
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	69 d4       	rcall	.+2258   	; 0x7174 <isspace>
    68a2:	89 2b       	or	r24, r25
    68a4:	89 f4       	brne	.+34     	; 0x68c8 <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    68a6:	ae 01       	movw	r20, r28
    68a8:	4f 5f       	subi	r20, 0xFF	; 255
    68aa:	5f 4f       	sbci	r21, 0xFF	; 255
    68ac:	4e 19       	sub	r20, r14
    68ae:	5f 09       	sbc	r21, r15
    68b0:	d8 01       	movw	r26, r16
    68b2:	15 96       	adiw	r26, 0x05	; 5
    68b4:	5c 93       	st	X, r21
    68b6:	4e 93       	st	-X, r20
    68b8:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    68ba:	ce 14       	cp	r12, r14
    68bc:	df 04       	cpc	r13, r15
    68be:	48 f4       	brcc	.+18     	; 0x68d2 <_ZN6String4trimEv+0x82>
    68c0:	b7 01       	movw	r22, r14
    68c2:	c6 01       	movw	r24, r12
    68c4:	77 d4       	rcall	.+2286   	; 0x71b4 <memcpy>
    68c6:	05 c0       	rjmp	.+10     	; 0x68d2 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    68c8:	ce 15       	cp	r28, r14
    68ca:	df 05       	cpc	r29, r15
    68cc:	60 f3       	brcs	.-40     	; 0x68a6 <_ZN6String4trimEv+0x56>
    68ce:	21 97       	sbiw	r28, 0x01	; 1
    68d0:	e5 cf       	rjmp	.-54     	; 0x689c <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    68d2:	d8 01       	movw	r26, r16
    68d4:	ed 91       	ld	r30, X+
    68d6:	fc 91       	ld	r31, X
    68d8:	11 97       	sbiw	r26, 0x01	; 1
    68da:	14 96       	adiw	r26, 0x04	; 4
    68dc:	8d 91       	ld	r24, X+
    68de:	9c 91       	ld	r25, X
    68e0:	15 97       	sbiw	r26, 0x05	; 5
    68e2:	e8 0f       	add	r30, r24
    68e4:	f9 1f       	adc	r31, r25
    68e6:	10 82       	st	Z, r1
}
    68e8:	df 91       	pop	r29
    68ea:	cf 91       	pop	r28
    68ec:	1f 91       	pop	r17
    68ee:	0f 91       	pop	r16
    68f0:	ff 90       	pop	r15
    68f2:	ef 90       	pop	r14
    68f4:	df 90       	pop	r13
    68f6:	cf 90       	pop	r12
    68f8:	bf 90       	pop	r11
    68fa:	af 90       	pop	r10
    68fc:	08 95       	ret

000068fe <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    68fe:	fc 01       	movw	r30, r24
    6900:	80 81       	ld	r24, Z
    6902:	91 81       	ldd	r25, Z+1	; 0x01
    6904:	00 97       	sbiw	r24, 0x00	; 0
    6906:	09 f0       	breq	.+2      	; 0x690a <_ZNK6String5toIntEv+0xc>
    6908:	0f c4       	rjmp	.+2078   	; 0x7128 <atol>
	return 0;
}
    690a:	60 e0       	ldi	r22, 0x00	; 0
    690c:	70 e0       	ldi	r23, 0x00	; 0
    690e:	cb 01       	movw	r24, r22
    6910:	08 95       	ret

00006912 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    6912:	fc 01       	movw	r30, r24
    6914:	80 81       	ld	r24, Z
    6916:	91 81       	ldd	r25, Z+1	; 0x01
    6918:	00 97       	sbiw	r24, 0x00	; 0
    691a:	09 f0       	breq	.+2      	; 0x691e <_ZNK6String7toFloatEv+0xc>
    691c:	02 c4       	rjmp	.+2052   	; 0x7122 <atof>
	return 0;
}
    691e:	60 e0       	ldi	r22, 0x00	; 0
    6920:	70 e0       	ldi	r23, 0x00	; 0
    6922:	cb 01       	movw	r24, r22
    6924:	08 95       	ret

00006926 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6926:	08 95       	ret

00006928 <__udivmodsi4>:
    6928:	a1 e2       	ldi	r26, 0x21	; 33
    692a:	1a 2e       	mov	r1, r26
    692c:	aa 1b       	sub	r26, r26
    692e:	bb 1b       	sub	r27, r27
    6930:	fd 01       	movw	r30, r26
    6932:	0d c0       	rjmp	.+26     	; 0x694e <__udivmodsi4_ep>

00006934 <__udivmodsi4_loop>:
    6934:	aa 1f       	adc	r26, r26
    6936:	bb 1f       	adc	r27, r27
    6938:	ee 1f       	adc	r30, r30
    693a:	ff 1f       	adc	r31, r31
    693c:	a2 17       	cp	r26, r18
    693e:	b3 07       	cpc	r27, r19
    6940:	e4 07       	cpc	r30, r20
    6942:	f5 07       	cpc	r31, r21
    6944:	20 f0       	brcs	.+8      	; 0x694e <__udivmodsi4_ep>
    6946:	a2 1b       	sub	r26, r18
    6948:	b3 0b       	sbc	r27, r19
    694a:	e4 0b       	sbc	r30, r20
    694c:	f5 0b       	sbc	r31, r21

0000694e <__udivmodsi4_ep>:
    694e:	66 1f       	adc	r22, r22
    6950:	77 1f       	adc	r23, r23
    6952:	88 1f       	adc	r24, r24
    6954:	99 1f       	adc	r25, r25
    6956:	1a 94       	dec	r1
    6958:	69 f7       	brne	.-38     	; 0x6934 <__udivmodsi4_loop>
    695a:	60 95       	com	r22
    695c:	70 95       	com	r23
    695e:	80 95       	com	r24
    6960:	90 95       	com	r25
    6962:	9b 01       	movw	r18, r22
    6964:	ac 01       	movw	r20, r24
    6966:	bd 01       	movw	r22, r26
    6968:	cf 01       	movw	r24, r30
    696a:	08 95       	ret

0000696c <__divmodsi4>:
    696c:	05 2e       	mov	r0, r21
    696e:	97 fb       	bst	r25, 7
    6970:	16 f4       	brtc	.+4      	; 0x6976 <__divmodsi4+0xa>
    6972:	00 94       	com	r0
    6974:	0f d0       	rcall	.+30     	; 0x6994 <__negsi2>
    6976:	57 fd       	sbrc	r21, 7
    6978:	05 d0       	rcall	.+10     	; 0x6984 <__divmodsi4_neg2>
    697a:	d6 df       	rcall	.-84     	; 0x6928 <__udivmodsi4>
    697c:	07 fc       	sbrc	r0, 7
    697e:	02 d0       	rcall	.+4      	; 0x6984 <__divmodsi4_neg2>
    6980:	46 f4       	brtc	.+16     	; 0x6992 <__divmodsi4_exit>
    6982:	08 c0       	rjmp	.+16     	; 0x6994 <__negsi2>

00006984 <__divmodsi4_neg2>:
    6984:	50 95       	com	r21
    6986:	40 95       	com	r20
    6988:	30 95       	com	r19
    698a:	21 95       	neg	r18
    698c:	3f 4f       	sbci	r19, 0xFF	; 255
    698e:	4f 4f       	sbci	r20, 0xFF	; 255
    6990:	5f 4f       	sbci	r21, 0xFF	; 255

00006992 <__divmodsi4_exit>:
    6992:	08 95       	ret

00006994 <__negsi2>:
    6994:	90 95       	com	r25
    6996:	80 95       	com	r24
    6998:	70 95       	com	r23
    699a:	61 95       	neg	r22
    699c:	7f 4f       	sbci	r23, 0xFF	; 255
    699e:	8f 4f       	sbci	r24, 0xFF	; 255
    69a0:	9f 4f       	sbci	r25, 0xFF	; 255
    69a2:	08 95       	ret

000069a4 <__tablejump2__>:
    69a4:	ee 0f       	add	r30, r30
    69a6:	ff 1f       	adc	r31, r31
    69a8:	05 90       	lpm	r0, Z+
    69aa:	f4 91       	lpm	r31, Z
    69ac:	e0 2d       	mov	r30, r0
    69ae:	09 94       	ijmp

000069b0 <__muluhisi3>:
    69b0:	40 d0       	rcall	.+128    	; 0x6a32 <__umulhisi3>
    69b2:	a5 9f       	mul	r26, r21
    69b4:	90 0d       	add	r25, r0
    69b6:	b4 9f       	mul	r27, r20
    69b8:	90 0d       	add	r25, r0
    69ba:	a4 9f       	mul	r26, r20
    69bc:	80 0d       	add	r24, r0
    69be:	91 1d       	adc	r25, r1
    69c0:	11 24       	eor	r1, r1
    69c2:	08 95       	ret

000069c4 <__prologue_saves__>:
    69c4:	2f 92       	push	r2
    69c6:	3f 92       	push	r3
    69c8:	4f 92       	push	r4
    69ca:	5f 92       	push	r5
    69cc:	6f 92       	push	r6
    69ce:	7f 92       	push	r7
    69d0:	8f 92       	push	r8
    69d2:	9f 92       	push	r9
    69d4:	af 92       	push	r10
    69d6:	bf 92       	push	r11
    69d8:	cf 92       	push	r12
    69da:	df 92       	push	r13
    69dc:	ef 92       	push	r14
    69de:	ff 92       	push	r15
    69e0:	0f 93       	push	r16
    69e2:	1f 93       	push	r17
    69e4:	cf 93       	push	r28
    69e6:	df 93       	push	r29
    69e8:	cd b7       	in	r28, 0x3d	; 61
    69ea:	de b7       	in	r29, 0x3e	; 62
    69ec:	ca 1b       	sub	r28, r26
    69ee:	db 0b       	sbc	r29, r27
    69f0:	0f b6       	in	r0, 0x3f	; 63
    69f2:	f8 94       	cli
    69f4:	de bf       	out	0x3e, r29	; 62
    69f6:	0f be       	out	0x3f, r0	; 63
    69f8:	cd bf       	out	0x3d, r28	; 61
    69fa:	09 94       	ijmp

000069fc <__epilogue_restores__>:
    69fc:	2a 88       	ldd	r2, Y+18	; 0x12
    69fe:	39 88       	ldd	r3, Y+17	; 0x11
    6a00:	48 88       	ldd	r4, Y+16	; 0x10
    6a02:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a04:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a06:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a08:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a0e:	b9 84       	ldd	r11, Y+9	; 0x09
    6a10:	c8 84       	ldd	r12, Y+8	; 0x08
    6a12:	df 80       	ldd	r13, Y+7	; 0x07
    6a14:	ee 80       	ldd	r14, Y+6	; 0x06
    6a16:	fd 80       	ldd	r15, Y+5	; 0x05
    6a18:	0c 81       	ldd	r16, Y+4	; 0x04
    6a1a:	1b 81       	ldd	r17, Y+3	; 0x03
    6a1c:	aa 81       	ldd	r26, Y+2	; 0x02
    6a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    6a20:	ce 0f       	add	r28, r30
    6a22:	d1 1d       	adc	r29, r1
    6a24:	0f b6       	in	r0, 0x3f	; 63
    6a26:	f8 94       	cli
    6a28:	de bf       	out	0x3e, r29	; 62
    6a2a:	0f be       	out	0x3f, r0	; 63
    6a2c:	cd bf       	out	0x3d, r28	; 61
    6a2e:	ed 01       	movw	r28, r26
    6a30:	08 95       	ret

00006a32 <__umulhisi3>:
    6a32:	a2 9f       	mul	r26, r18
    6a34:	b0 01       	movw	r22, r0
    6a36:	b3 9f       	mul	r27, r19
    6a38:	c0 01       	movw	r24, r0
    6a3a:	a3 9f       	mul	r26, r19
    6a3c:	70 0d       	add	r23, r0
    6a3e:	81 1d       	adc	r24, r1
    6a40:	11 24       	eor	r1, r1
    6a42:	91 1d       	adc	r25, r1
    6a44:	b2 9f       	mul	r27, r18
    6a46:	70 0d       	add	r23, r0
    6a48:	81 1d       	adc	r24, r1
    6a4a:	11 24       	eor	r1, r1
    6a4c:	91 1d       	adc	r25, r1
    6a4e:	08 95       	ret

00006a50 <dtostrf>:
    6a50:	ef 92       	push	r14
    6a52:	0f 93       	push	r16
    6a54:	1f 93       	push	r17
    6a56:	cf 93       	push	r28
    6a58:	df 93       	push	r29
    6a5a:	e8 01       	movw	r28, r16
    6a5c:	47 fd       	sbrc	r20, 7
    6a5e:	02 c0       	rjmp	.+4      	; 0x6a64 <dtostrf+0x14>
    6a60:	34 e0       	ldi	r19, 0x04	; 4
    6a62:	01 c0       	rjmp	.+2      	; 0x6a66 <dtostrf+0x16>
    6a64:	34 e1       	ldi	r19, 0x14	; 20
    6a66:	e4 2f       	mov	r30, r20
    6a68:	44 0f       	add	r20, r20
    6a6a:	ff 0b       	sbc	r31, r31
    6a6c:	f7 ff       	sbrs	r31, 7
    6a6e:	03 c0       	rjmp	.+6      	; 0x6a76 <dtostrf+0x26>
    6a70:	f1 95       	neg	r31
    6a72:	e1 95       	neg	r30
    6a74:	f1 09       	sbc	r31, r1
    6a76:	e3 2e       	mov	r14, r19
    6a78:	02 2f       	mov	r16, r18
    6a7a:	2e 2f       	mov	r18, r30
    6a7c:	ae 01       	movw	r20, r28
    6a7e:	3c d4       	rcall	.+2168   	; 0x72f8 <dtoa_prf>
    6a80:	ce 01       	movw	r24, r28
    6a82:	df 91       	pop	r29
    6a84:	cf 91       	pop	r28
    6a86:	1f 91       	pop	r17
    6a88:	0f 91       	pop	r16
    6a8a:	ef 90       	pop	r14
    6a8c:	08 95       	ret

00006a8e <malloc>:
    6a8e:	cf 93       	push	r28
    6a90:	df 93       	push	r29
    6a92:	82 30       	cpi	r24, 0x02	; 2
    6a94:	91 05       	cpc	r25, r1
    6a96:	10 f4       	brcc	.+4      	; 0x6a9c <malloc+0xe>
    6a98:	82 e0       	ldi	r24, 0x02	; 2
    6a9a:	90 e0       	ldi	r25, 0x00	; 0
    6a9c:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <__flp>
    6aa0:	f0 91 2f 06 	lds	r31, 0x062F	; 0x80062f <__flp+0x1>
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	c0 e0       	ldi	r28, 0x00	; 0
    6aaa:	d0 e0       	ldi	r29, 0x00	; 0
    6aac:	30 97       	sbiw	r30, 0x00	; 0
    6aae:	11 f1       	breq	.+68     	; 0x6af4 <malloc+0x66>
    6ab0:	40 81       	ld	r20, Z
    6ab2:	51 81       	ldd	r21, Z+1	; 0x01
    6ab4:	48 17       	cp	r20, r24
    6ab6:	59 07       	cpc	r21, r25
    6ab8:	c0 f0       	brcs	.+48     	; 0x6aea <malloc+0x5c>
    6aba:	48 17       	cp	r20, r24
    6abc:	59 07       	cpc	r21, r25
    6abe:	61 f4       	brne	.+24     	; 0x6ad8 <malloc+0x4a>
    6ac0:	82 81       	ldd	r24, Z+2	; 0x02
    6ac2:	93 81       	ldd	r25, Z+3	; 0x03
    6ac4:	20 97       	sbiw	r28, 0x00	; 0
    6ac6:	19 f0       	breq	.+6      	; 0x6ace <malloc+0x40>
    6ac8:	9b 83       	std	Y+3, r25	; 0x03
    6aca:	8a 83       	std	Y+2, r24	; 0x02
    6acc:	2b c0       	rjmp	.+86     	; 0x6b24 <malloc+0x96>
    6ace:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <__flp+0x1>
    6ad2:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <__flp>
    6ad6:	26 c0       	rjmp	.+76     	; 0x6b24 <malloc+0x96>
    6ad8:	21 15       	cp	r18, r1
    6ada:	31 05       	cpc	r19, r1
    6adc:	19 f0       	breq	.+6      	; 0x6ae4 <malloc+0x56>
    6ade:	42 17       	cp	r20, r18
    6ae0:	53 07       	cpc	r21, r19
    6ae2:	18 f4       	brcc	.+6      	; 0x6aea <malloc+0x5c>
    6ae4:	9a 01       	movw	r18, r20
    6ae6:	be 01       	movw	r22, r28
    6ae8:	df 01       	movw	r26, r30
    6aea:	ef 01       	movw	r28, r30
    6aec:	02 80       	ldd	r0, Z+2	; 0x02
    6aee:	f3 81       	ldd	r31, Z+3	; 0x03
    6af0:	e0 2d       	mov	r30, r0
    6af2:	dc cf       	rjmp	.-72     	; 0x6aac <malloc+0x1e>
    6af4:	21 15       	cp	r18, r1
    6af6:	31 05       	cpc	r19, r1
    6af8:	09 f1       	breq	.+66     	; 0x6b3c <malloc+0xae>
    6afa:	28 1b       	sub	r18, r24
    6afc:	39 0b       	sbc	r19, r25
    6afe:	24 30       	cpi	r18, 0x04	; 4
    6b00:	31 05       	cpc	r19, r1
    6b02:	90 f4       	brcc	.+36     	; 0x6b28 <malloc+0x9a>
    6b04:	12 96       	adiw	r26, 0x02	; 2
    6b06:	8d 91       	ld	r24, X+
    6b08:	9c 91       	ld	r25, X
    6b0a:	13 97       	sbiw	r26, 0x03	; 3
    6b0c:	61 15       	cp	r22, r1
    6b0e:	71 05       	cpc	r23, r1
    6b10:	21 f0       	breq	.+8      	; 0x6b1a <malloc+0x8c>
    6b12:	fb 01       	movw	r30, r22
    6b14:	93 83       	std	Z+3, r25	; 0x03
    6b16:	82 83       	std	Z+2, r24	; 0x02
    6b18:	04 c0       	rjmp	.+8      	; 0x6b22 <malloc+0x94>
    6b1a:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <__flp+0x1>
    6b1e:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <__flp>
    6b22:	fd 01       	movw	r30, r26
    6b24:	32 96       	adiw	r30, 0x02	; 2
    6b26:	44 c0       	rjmp	.+136    	; 0x6bb0 <malloc+0x122>
    6b28:	fd 01       	movw	r30, r26
    6b2a:	e2 0f       	add	r30, r18
    6b2c:	f3 1f       	adc	r31, r19
    6b2e:	81 93       	st	Z+, r24
    6b30:	91 93       	st	Z+, r25
    6b32:	22 50       	subi	r18, 0x02	; 2
    6b34:	31 09       	sbc	r19, r1
    6b36:	2d 93       	st	X+, r18
    6b38:	3c 93       	st	X, r19
    6b3a:	3a c0       	rjmp	.+116    	; 0x6bb0 <malloc+0x122>
    6b3c:	20 91 2c 06 	lds	r18, 0x062C	; 0x80062c <__brkval>
    6b40:	30 91 2d 06 	lds	r19, 0x062D	; 0x80062d <__brkval+0x1>
    6b44:	23 2b       	or	r18, r19
    6b46:	41 f4       	brne	.+16     	; 0x6b58 <malloc+0xca>
    6b48:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6b4c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6b50:	30 93 2d 06 	sts	0x062D, r19	; 0x80062d <__brkval+0x1>
    6b54:	20 93 2c 06 	sts	0x062C, r18	; 0x80062c <__brkval>
    6b58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6b5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6b60:	21 15       	cp	r18, r1
    6b62:	31 05       	cpc	r19, r1
    6b64:	41 f4       	brne	.+16     	; 0x6b76 <malloc+0xe8>
    6b66:	2d b7       	in	r18, 0x3d	; 61
    6b68:	3e b7       	in	r19, 0x3e	; 62
    6b6a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6b6e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6b72:	24 1b       	sub	r18, r20
    6b74:	35 0b       	sbc	r19, r21
    6b76:	e0 91 2c 06 	lds	r30, 0x062C	; 0x80062c <__brkval>
    6b7a:	f0 91 2d 06 	lds	r31, 0x062D	; 0x80062d <__brkval+0x1>
    6b7e:	e2 17       	cp	r30, r18
    6b80:	f3 07       	cpc	r31, r19
    6b82:	a0 f4       	brcc	.+40     	; 0x6bac <malloc+0x11e>
    6b84:	2e 1b       	sub	r18, r30
    6b86:	3f 0b       	sbc	r19, r31
    6b88:	28 17       	cp	r18, r24
    6b8a:	39 07       	cpc	r19, r25
    6b8c:	78 f0       	brcs	.+30     	; 0x6bac <malloc+0x11e>
    6b8e:	ac 01       	movw	r20, r24
    6b90:	4e 5f       	subi	r20, 0xFE	; 254
    6b92:	5f 4f       	sbci	r21, 0xFF	; 255
    6b94:	24 17       	cp	r18, r20
    6b96:	35 07       	cpc	r19, r21
    6b98:	48 f0       	brcs	.+18     	; 0x6bac <malloc+0x11e>
    6b9a:	4e 0f       	add	r20, r30
    6b9c:	5f 1f       	adc	r21, r31
    6b9e:	50 93 2d 06 	sts	0x062D, r21	; 0x80062d <__brkval+0x1>
    6ba2:	40 93 2c 06 	sts	0x062C, r20	; 0x80062c <__brkval>
    6ba6:	81 93       	st	Z+, r24
    6ba8:	91 93       	st	Z+, r25
    6baa:	02 c0       	rjmp	.+4      	; 0x6bb0 <malloc+0x122>
    6bac:	e0 e0       	ldi	r30, 0x00	; 0
    6bae:	f0 e0       	ldi	r31, 0x00	; 0
    6bb0:	cf 01       	movw	r24, r30
    6bb2:	df 91       	pop	r29
    6bb4:	cf 91       	pop	r28
    6bb6:	08 95       	ret

00006bb8 <free>:
    6bb8:	0f 93       	push	r16
    6bba:	1f 93       	push	r17
    6bbc:	cf 93       	push	r28
    6bbe:	df 93       	push	r29
    6bc0:	00 97       	sbiw	r24, 0x00	; 0
    6bc2:	09 f4       	brne	.+2      	; 0x6bc6 <free+0xe>
    6bc4:	8c c0       	rjmp	.+280    	; 0x6cde <free+0x126>
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	32 97       	sbiw	r30, 0x02	; 2
    6bca:	13 82       	std	Z+3, r1	; 0x03
    6bcc:	12 82       	std	Z+2, r1	; 0x02
    6bce:	00 91 2e 06 	lds	r16, 0x062E	; 0x80062e <__flp>
    6bd2:	10 91 2f 06 	lds	r17, 0x062F	; 0x80062f <__flp+0x1>
    6bd6:	01 15       	cp	r16, r1
    6bd8:	11 05       	cpc	r17, r1
    6bda:	81 f4       	brne	.+32     	; 0x6bfc <free+0x44>
    6bdc:	20 81       	ld	r18, Z
    6bde:	31 81       	ldd	r19, Z+1	; 0x01
    6be0:	82 0f       	add	r24, r18
    6be2:	93 1f       	adc	r25, r19
    6be4:	20 91 2c 06 	lds	r18, 0x062C	; 0x80062c <__brkval>
    6be8:	30 91 2d 06 	lds	r19, 0x062D	; 0x80062d <__brkval+0x1>
    6bec:	28 17       	cp	r18, r24
    6bee:	39 07       	cpc	r19, r25
    6bf0:	79 f5       	brne	.+94     	; 0x6c50 <free+0x98>
    6bf2:	f0 93 2d 06 	sts	0x062D, r31	; 0x80062d <__brkval+0x1>
    6bf6:	e0 93 2c 06 	sts	0x062C, r30	; 0x80062c <__brkval>
    6bfa:	71 c0       	rjmp	.+226    	; 0x6cde <free+0x126>
    6bfc:	d8 01       	movw	r26, r16
    6bfe:	40 e0       	ldi	r20, 0x00	; 0
    6c00:	50 e0       	ldi	r21, 0x00	; 0
    6c02:	ae 17       	cp	r26, r30
    6c04:	bf 07       	cpc	r27, r31
    6c06:	50 f4       	brcc	.+20     	; 0x6c1c <free+0x64>
    6c08:	12 96       	adiw	r26, 0x02	; 2
    6c0a:	2d 91       	ld	r18, X+
    6c0c:	3c 91       	ld	r19, X
    6c0e:	13 97       	sbiw	r26, 0x03	; 3
    6c10:	ad 01       	movw	r20, r26
    6c12:	21 15       	cp	r18, r1
    6c14:	31 05       	cpc	r19, r1
    6c16:	09 f1       	breq	.+66     	; 0x6c5a <free+0xa2>
    6c18:	d9 01       	movw	r26, r18
    6c1a:	f3 cf       	rjmp	.-26     	; 0x6c02 <free+0x4a>
    6c1c:	9d 01       	movw	r18, r26
    6c1e:	da 01       	movw	r26, r20
    6c20:	33 83       	std	Z+3, r19	; 0x03
    6c22:	22 83       	std	Z+2, r18	; 0x02
    6c24:	60 81       	ld	r22, Z
    6c26:	71 81       	ldd	r23, Z+1	; 0x01
    6c28:	86 0f       	add	r24, r22
    6c2a:	97 1f       	adc	r25, r23
    6c2c:	82 17       	cp	r24, r18
    6c2e:	93 07       	cpc	r25, r19
    6c30:	69 f4       	brne	.+26     	; 0x6c4c <free+0x94>
    6c32:	ec 01       	movw	r28, r24
    6c34:	28 81       	ld	r18, Y
    6c36:	39 81       	ldd	r19, Y+1	; 0x01
    6c38:	26 0f       	add	r18, r22
    6c3a:	37 1f       	adc	r19, r23
    6c3c:	2e 5f       	subi	r18, 0xFE	; 254
    6c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c40:	31 83       	std	Z+1, r19	; 0x01
    6c42:	20 83       	st	Z, r18
    6c44:	8a 81       	ldd	r24, Y+2	; 0x02
    6c46:	9b 81       	ldd	r25, Y+3	; 0x03
    6c48:	93 83       	std	Z+3, r25	; 0x03
    6c4a:	82 83       	std	Z+2, r24	; 0x02
    6c4c:	45 2b       	or	r20, r21
    6c4e:	29 f4       	brne	.+10     	; 0x6c5a <free+0xa2>
    6c50:	f0 93 2f 06 	sts	0x062F, r31	; 0x80062f <__flp+0x1>
    6c54:	e0 93 2e 06 	sts	0x062E, r30	; 0x80062e <__flp>
    6c58:	42 c0       	rjmp	.+132    	; 0x6cde <free+0x126>
    6c5a:	13 96       	adiw	r26, 0x03	; 3
    6c5c:	fc 93       	st	X, r31
    6c5e:	ee 93       	st	-X, r30
    6c60:	12 97       	sbiw	r26, 0x02	; 2
    6c62:	ed 01       	movw	r28, r26
    6c64:	49 91       	ld	r20, Y+
    6c66:	59 91       	ld	r21, Y+
    6c68:	9e 01       	movw	r18, r28
    6c6a:	24 0f       	add	r18, r20
    6c6c:	35 1f       	adc	r19, r21
    6c6e:	e2 17       	cp	r30, r18
    6c70:	f3 07       	cpc	r31, r19
    6c72:	71 f4       	brne	.+28     	; 0x6c90 <free+0xd8>
    6c74:	80 81       	ld	r24, Z
    6c76:	91 81       	ldd	r25, Z+1	; 0x01
    6c78:	84 0f       	add	r24, r20
    6c7a:	95 1f       	adc	r25, r21
    6c7c:	02 96       	adiw	r24, 0x02	; 2
    6c7e:	11 96       	adiw	r26, 0x01	; 1
    6c80:	9c 93       	st	X, r25
    6c82:	8e 93       	st	-X, r24
    6c84:	82 81       	ldd	r24, Z+2	; 0x02
    6c86:	93 81       	ldd	r25, Z+3	; 0x03
    6c88:	13 96       	adiw	r26, 0x03	; 3
    6c8a:	9c 93       	st	X, r25
    6c8c:	8e 93       	st	-X, r24
    6c8e:	12 97       	sbiw	r26, 0x02	; 2
    6c90:	e0 e0       	ldi	r30, 0x00	; 0
    6c92:	f0 e0       	ldi	r31, 0x00	; 0
    6c94:	d8 01       	movw	r26, r16
    6c96:	12 96       	adiw	r26, 0x02	; 2
    6c98:	8d 91       	ld	r24, X+
    6c9a:	9c 91       	ld	r25, X
    6c9c:	13 97       	sbiw	r26, 0x03	; 3
    6c9e:	00 97       	sbiw	r24, 0x00	; 0
    6ca0:	19 f0       	breq	.+6      	; 0x6ca8 <free+0xf0>
    6ca2:	f8 01       	movw	r30, r16
    6ca4:	8c 01       	movw	r16, r24
    6ca6:	f6 cf       	rjmp	.-20     	; 0x6c94 <free+0xdc>
    6ca8:	8d 91       	ld	r24, X+
    6caa:	9c 91       	ld	r25, X
    6cac:	98 01       	movw	r18, r16
    6cae:	2e 5f       	subi	r18, 0xFE	; 254
    6cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb2:	82 0f       	add	r24, r18
    6cb4:	93 1f       	adc	r25, r19
    6cb6:	20 91 2c 06 	lds	r18, 0x062C	; 0x80062c <__brkval>
    6cba:	30 91 2d 06 	lds	r19, 0x062D	; 0x80062d <__brkval+0x1>
    6cbe:	28 17       	cp	r18, r24
    6cc0:	39 07       	cpc	r19, r25
    6cc2:	69 f4       	brne	.+26     	; 0x6cde <free+0x126>
    6cc4:	30 97       	sbiw	r30, 0x00	; 0
    6cc6:	29 f4       	brne	.+10     	; 0x6cd2 <free+0x11a>
    6cc8:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <__flp+0x1>
    6ccc:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <__flp>
    6cd0:	02 c0       	rjmp	.+4      	; 0x6cd6 <free+0x11e>
    6cd2:	13 82       	std	Z+3, r1	; 0x03
    6cd4:	12 82       	std	Z+2, r1	; 0x02
    6cd6:	10 93 2d 06 	sts	0x062D, r17	; 0x80062d <__brkval+0x1>
    6cda:	00 93 2c 06 	sts	0x062C, r16	; 0x80062c <__brkval>
    6cde:	df 91       	pop	r29
    6ce0:	cf 91       	pop	r28
    6ce2:	1f 91       	pop	r17
    6ce4:	0f 91       	pop	r16
    6ce6:	08 95       	ret

00006ce8 <realloc>:
    6ce8:	a0 e0       	ldi	r26, 0x00	; 0
    6cea:	b0 e0       	ldi	r27, 0x00	; 0
    6cec:	e9 e7       	ldi	r30, 0x79	; 121
    6cee:	f6 e3       	ldi	r31, 0x36	; 54
    6cf0:	6d ce       	rjmp	.-806    	; 0x69cc <__prologue_saves__+0x8>
    6cf2:	ec 01       	movw	r28, r24
    6cf4:	00 97       	sbiw	r24, 0x00	; 0
    6cf6:	19 f4       	brne	.+6      	; 0x6cfe <realloc+0x16>
    6cf8:	cb 01       	movw	r24, r22
    6cfa:	c9 de       	rcall	.-622    	; 0x6a8e <malloc>
    6cfc:	b4 c0       	rjmp	.+360    	; 0x6e66 <realloc+0x17e>
    6cfe:	fc 01       	movw	r30, r24
    6d00:	e6 0f       	add	r30, r22
    6d02:	f7 1f       	adc	r31, r23
    6d04:	9c 01       	movw	r18, r24
    6d06:	22 50       	subi	r18, 0x02	; 2
    6d08:	31 09       	sbc	r19, r1
    6d0a:	e2 17       	cp	r30, r18
    6d0c:	f3 07       	cpc	r31, r19
    6d0e:	08 f4       	brcc	.+2      	; 0x6d12 <realloc+0x2a>
    6d10:	a8 c0       	rjmp	.+336    	; 0x6e62 <realloc+0x17a>
    6d12:	d9 01       	movw	r26, r18
    6d14:	0d 91       	ld	r16, X+
    6d16:	1c 91       	ld	r17, X
    6d18:	11 97       	sbiw	r26, 0x01	; 1
    6d1a:	06 17       	cp	r16, r22
    6d1c:	17 07       	cpc	r17, r23
    6d1e:	a8 f0       	brcs	.+42     	; 0x6d4a <realloc+0x62>
    6d20:	05 30       	cpi	r16, 0x05	; 5
    6d22:	11 05       	cpc	r17, r1
    6d24:	08 f4       	brcc	.+2      	; 0x6d28 <realloc+0x40>
    6d26:	9b c0       	rjmp	.+310    	; 0x6e5e <realloc+0x176>
    6d28:	c8 01       	movw	r24, r16
    6d2a:	04 97       	sbiw	r24, 0x04	; 4
    6d2c:	86 17       	cp	r24, r22
    6d2e:	97 07       	cpc	r25, r23
    6d30:	08 f4       	brcc	.+2      	; 0x6d34 <realloc+0x4c>
    6d32:	95 c0       	rjmp	.+298    	; 0x6e5e <realloc+0x176>
    6d34:	02 50       	subi	r16, 0x02	; 2
    6d36:	11 09       	sbc	r17, r1
    6d38:	06 1b       	sub	r16, r22
    6d3a:	17 0b       	sbc	r17, r23
    6d3c:	01 93       	st	Z+, r16
    6d3e:	11 93       	st	Z+, r17
    6d40:	6d 93       	st	X+, r22
    6d42:	7c 93       	st	X, r23
    6d44:	cf 01       	movw	r24, r30
    6d46:	38 df       	rcall	.-400    	; 0x6bb8 <free>
    6d48:	8a c0       	rjmp	.+276    	; 0x6e5e <realloc+0x176>
    6d4a:	5b 01       	movw	r10, r22
    6d4c:	a0 1a       	sub	r10, r16
    6d4e:	b1 0a       	sbc	r11, r17
    6d50:	4c 01       	movw	r8, r24
    6d52:	80 0e       	add	r8, r16
    6d54:	91 1e       	adc	r9, r17
    6d56:	a0 91 2e 06 	lds	r26, 0x062E	; 0x80062e <__flp>
    6d5a:	b0 91 2f 06 	lds	r27, 0x062F	; 0x80062f <__flp+0x1>
    6d5e:	40 e0       	ldi	r20, 0x00	; 0
    6d60:	50 e0       	ldi	r21, 0x00	; 0
    6d62:	e1 2c       	mov	r14, r1
    6d64:	f1 2c       	mov	r15, r1
    6d66:	10 97       	sbiw	r26, 0x00	; 0
    6d68:	09 f4       	brne	.+2      	; 0x6d6c <realloc+0x84>
    6d6a:	4a c0       	rjmp	.+148    	; 0x6e00 <realloc+0x118>
    6d6c:	a8 15       	cp	r26, r8
    6d6e:	b9 05       	cpc	r27, r9
    6d70:	d1 f5       	brne	.+116    	; 0x6de6 <realloc+0xfe>
    6d72:	6d 90       	ld	r6, X+
    6d74:	7c 90       	ld	r7, X
    6d76:	11 97       	sbiw	r26, 0x01	; 1
    6d78:	63 01       	movw	r12, r6
    6d7a:	82 e0       	ldi	r24, 0x02	; 2
    6d7c:	c8 0e       	add	r12, r24
    6d7e:	d1 1c       	adc	r13, r1
    6d80:	ca 14       	cp	r12, r10
    6d82:	db 04       	cpc	r13, r11
    6d84:	80 f1       	brcs	.+96     	; 0x6de6 <realloc+0xfe>
    6d86:	a3 01       	movw	r20, r6
    6d88:	4a 19       	sub	r20, r10
    6d8a:	5b 09       	sbc	r21, r11
    6d8c:	6a 01       	movw	r12, r20
    6d8e:	82 e0       	ldi	r24, 0x02	; 2
    6d90:	c8 0e       	add	r12, r24
    6d92:	d1 1c       	adc	r13, r1
    6d94:	12 96       	adiw	r26, 0x02	; 2
    6d96:	bc 90       	ld	r11, X
    6d98:	12 97       	sbiw	r26, 0x02	; 2
    6d9a:	13 96       	adiw	r26, 0x03	; 3
    6d9c:	ac 91       	ld	r26, X
    6d9e:	b5 e0       	ldi	r27, 0x05	; 5
    6da0:	cb 16       	cp	r12, r27
    6da2:	d1 04       	cpc	r13, r1
    6da4:	40 f0       	brcs	.+16     	; 0x6db6 <realloc+0xce>
    6da6:	b2 82       	std	Z+2, r11	; 0x02
    6da8:	a3 83       	std	Z+3, r26	; 0x03
    6daa:	51 83       	std	Z+1, r21	; 0x01
    6dac:	40 83       	st	Z, r20
    6dae:	d9 01       	movw	r26, r18
    6db0:	6d 93       	st	X+, r22
    6db2:	7c 93       	st	X, r23
    6db4:	0a c0       	rjmp	.+20     	; 0x6dca <realloc+0xe2>
    6db6:	0e 5f       	subi	r16, 0xFE	; 254
    6db8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dba:	c3 01       	movw	r24, r6
    6dbc:	80 0f       	add	r24, r16
    6dbe:	91 1f       	adc	r25, r17
    6dc0:	f9 01       	movw	r30, r18
    6dc2:	91 83       	std	Z+1, r25	; 0x01
    6dc4:	80 83       	st	Z, r24
    6dc6:	eb 2d       	mov	r30, r11
    6dc8:	fa 2f       	mov	r31, r26
    6dca:	e1 14       	cp	r14, r1
    6dcc:	f1 04       	cpc	r15, r1
    6dce:	31 f0       	breq	.+12     	; 0x6ddc <realloc+0xf4>
    6dd0:	d7 01       	movw	r26, r14
    6dd2:	13 96       	adiw	r26, 0x03	; 3
    6dd4:	fc 93       	st	X, r31
    6dd6:	ee 93       	st	-X, r30
    6dd8:	12 97       	sbiw	r26, 0x02	; 2
    6dda:	41 c0       	rjmp	.+130    	; 0x6e5e <realloc+0x176>
    6ddc:	f0 93 2f 06 	sts	0x062F, r31	; 0x80062f <__flp+0x1>
    6de0:	e0 93 2e 06 	sts	0x062E, r30	; 0x80062e <__flp>
    6de4:	3c c0       	rjmp	.+120    	; 0x6e5e <realloc+0x176>
    6de6:	8d 91       	ld	r24, X+
    6de8:	9c 91       	ld	r25, X
    6dea:	11 97       	sbiw	r26, 0x01	; 1
    6dec:	48 17       	cp	r20, r24
    6dee:	59 07       	cpc	r21, r25
    6df0:	08 f4       	brcc	.+2      	; 0x6df4 <realloc+0x10c>
    6df2:	ac 01       	movw	r20, r24
    6df4:	7d 01       	movw	r14, r26
    6df6:	12 96       	adiw	r26, 0x02	; 2
    6df8:	0d 90       	ld	r0, X+
    6dfa:	bc 91       	ld	r27, X
    6dfc:	a0 2d       	mov	r26, r0
    6dfe:	b3 cf       	rjmp	.-154    	; 0x6d66 <realloc+0x7e>
    6e00:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <__brkval>
    6e04:	90 91 2d 06 	lds	r25, 0x062D	; 0x80062d <__brkval+0x1>
    6e08:	88 15       	cp	r24, r8
    6e0a:	99 05       	cpc	r25, r9
    6e0c:	e1 f4       	brne	.+56     	; 0x6e46 <realloc+0x15e>
    6e0e:	46 17       	cp	r20, r22
    6e10:	57 07       	cpc	r21, r23
    6e12:	c8 f4       	brcc	.+50     	; 0x6e46 <realloc+0x15e>
    6e14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6e18:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6e1c:	00 97       	sbiw	r24, 0x00	; 0
    6e1e:	41 f4       	brne	.+16     	; 0x6e30 <realloc+0x148>
    6e20:	8d b7       	in	r24, 0x3d	; 61
    6e22:	9e b7       	in	r25, 0x3e	; 62
    6e24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6e28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6e2c:	84 1b       	sub	r24, r20
    6e2e:	95 0b       	sbc	r25, r21
    6e30:	e8 17       	cp	r30, r24
    6e32:	f9 07       	cpc	r31, r25
    6e34:	b0 f4       	brcc	.+44     	; 0x6e62 <realloc+0x17a>
    6e36:	f0 93 2d 06 	sts	0x062D, r31	; 0x80062d <__brkval+0x1>
    6e3a:	e0 93 2c 06 	sts	0x062C, r30	; 0x80062c <__brkval>
    6e3e:	f9 01       	movw	r30, r18
    6e40:	71 83       	std	Z+1, r23	; 0x01
    6e42:	60 83       	st	Z, r22
    6e44:	0c c0       	rjmp	.+24     	; 0x6e5e <realloc+0x176>
    6e46:	cb 01       	movw	r24, r22
    6e48:	22 de       	rcall	.-956    	; 0x6a8e <malloc>
    6e4a:	7c 01       	movw	r14, r24
    6e4c:	00 97       	sbiw	r24, 0x00	; 0
    6e4e:	49 f0       	breq	.+18     	; 0x6e62 <realloc+0x17a>
    6e50:	a8 01       	movw	r20, r16
    6e52:	be 01       	movw	r22, r28
    6e54:	af d1       	rcall	.+862    	; 0x71b4 <memcpy>
    6e56:	ce 01       	movw	r24, r28
    6e58:	af de       	rcall	.-674    	; 0x6bb8 <free>
    6e5a:	c7 01       	movw	r24, r14
    6e5c:	04 c0       	rjmp	.+8      	; 0x6e66 <realloc+0x17e>
    6e5e:	ce 01       	movw	r24, r28
    6e60:	02 c0       	rjmp	.+4      	; 0x6e66 <realloc+0x17e>
    6e62:	80 e0       	ldi	r24, 0x00	; 0
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
    6e6a:	ee e0       	ldi	r30, 0x0E	; 14
    6e6c:	cb cd       	rjmp	.-1130   	; 0x6a04 <__epilogue_restores__+0x8>

00006e6e <strtod>:
    6e6e:	a0 e0       	ldi	r26, 0x00	; 0
    6e70:	b0 e0       	ldi	r27, 0x00	; 0
    6e72:	ec e3       	ldi	r30, 0x3C	; 60
    6e74:	f7 e3       	ldi	r31, 0x37	; 55
    6e76:	aa cd       	rjmp	.-1196   	; 0x69cc <__prologue_saves__+0x8>
    6e78:	ec 01       	movw	r28, r24
    6e7a:	7b 01       	movw	r14, r22
    6e7c:	61 15       	cp	r22, r1
    6e7e:	71 05       	cpc	r23, r1
    6e80:	19 f0       	breq	.+6      	; 0x6e88 <strtod+0x1a>
    6e82:	db 01       	movw	r26, r22
    6e84:	8d 93       	st	X+, r24
    6e86:	9c 93       	st	X, r25
    6e88:	8e 01       	movw	r16, r28
    6e8a:	0f 5f       	subi	r16, 0xFF	; 255
    6e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e8e:	78 80       	ld	r7, Y
    6e90:	87 2d       	mov	r24, r7
    6e92:	90 e0       	ldi	r25, 0x00	; 0
    6e94:	6f d1       	rcall	.+734    	; 0x7174 <isspace>
    6e96:	89 2b       	or	r24, r25
    6e98:	11 f0       	breq	.+4      	; 0x6e9e <strtod+0x30>
    6e9a:	e8 01       	movw	r28, r16
    6e9c:	f5 cf       	rjmp	.-22     	; 0x6e88 <strtod+0x1a>
    6e9e:	bd e2       	ldi	r27, 0x2D	; 45
    6ea0:	7b 12       	cpse	r7, r27
    6ea2:	05 c0       	rjmp	.+10     	; 0x6eae <strtod+0x40>
    6ea4:	0f 5f       	subi	r16, 0xFF	; 255
    6ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ea8:	79 80       	ldd	r7, Y+1	; 0x01
    6eaa:	c1 e0       	ldi	r28, 0x01	; 1
    6eac:	08 c0       	rjmp	.+16     	; 0x6ebe <strtod+0x50>
    6eae:	eb e2       	ldi	r30, 0x2B	; 43
    6eb0:	7e 12       	cpse	r7, r30
    6eb2:	04 c0       	rjmp	.+8      	; 0x6ebc <strtod+0x4e>
    6eb4:	8e 01       	movw	r16, r28
    6eb6:	0e 5f       	subi	r16, 0xFE	; 254
    6eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    6eba:	79 80       	ldd	r7, Y+1	; 0x01
    6ebc:	c0 e0       	ldi	r28, 0x00	; 0
    6ebe:	68 01       	movw	r12, r16
    6ec0:	f1 e0       	ldi	r31, 0x01	; 1
    6ec2:	cf 1a       	sub	r12, r31
    6ec4:	d1 08       	sbc	r13, r1
    6ec6:	43 e0       	ldi	r20, 0x03	; 3
    6ec8:	50 e0       	ldi	r21, 0x00	; 0
    6eca:	62 e6       	ldi	r22, 0x62	; 98
    6ecc:	72 e0       	ldi	r23, 0x02	; 2
    6ece:	c6 01       	movw	r24, r12
    6ed0:	59 d1       	rcall	.+690    	; 0x7184 <strncasecmp_P>
    6ed2:	89 2b       	or	r24, r25
    6ed4:	e9 f4       	brne	.+58     	; 0x6f10 <strtod+0xa2>
    6ed6:	68 01       	movw	r12, r16
    6ed8:	22 e0       	ldi	r18, 0x02	; 2
    6eda:	c2 0e       	add	r12, r18
    6edc:	d1 1c       	adc	r13, r1
    6ede:	45 e0       	ldi	r20, 0x05	; 5
    6ee0:	50 e0       	ldi	r21, 0x00	; 0
    6ee2:	6d e5       	ldi	r22, 0x5D	; 93
    6ee4:	72 e0       	ldi	r23, 0x02	; 2
    6ee6:	c6 01       	movw	r24, r12
    6ee8:	4d d1       	rcall	.+666    	; 0x7184 <strncasecmp_P>
    6eea:	89 2b       	or	r24, r25
    6eec:	21 f4       	brne	.+8      	; 0x6ef6 <strtod+0x88>
    6eee:	68 01       	movw	r12, r16
    6ef0:	87 e0       	ldi	r24, 0x07	; 7
    6ef2:	c8 0e       	add	r12, r24
    6ef4:	d1 1c       	adc	r13, r1
    6ef6:	e1 14       	cp	r14, r1
    6ef8:	f1 04       	cpc	r15, r1
    6efa:	19 f0       	breq	.+6      	; 0x6f02 <strtod+0x94>
    6efc:	d7 01       	movw	r26, r14
    6efe:	cd 92       	st	X+, r12
    6f00:	dc 92       	st	X, r13
    6f02:	c1 11       	cpse	r28, r1
    6f04:	fd c0       	rjmp	.+506    	; 0x7100 <strtod+0x292>
    6f06:	60 e0       	ldi	r22, 0x00	; 0
    6f08:	70 e0       	ldi	r23, 0x00	; 0
    6f0a:	80 e8       	ldi	r24, 0x80	; 128
    6f0c:	9f e7       	ldi	r25, 0x7F	; 127
    6f0e:	01 c1       	rjmp	.+514    	; 0x7112 <strtod+0x2a4>
    6f10:	43 e0       	ldi	r20, 0x03	; 3
    6f12:	50 e0       	ldi	r21, 0x00	; 0
    6f14:	6a e5       	ldi	r22, 0x5A	; 90
    6f16:	72 e0       	ldi	r23, 0x02	; 2
    6f18:	c6 01       	movw	r24, r12
    6f1a:	34 d1       	rcall	.+616    	; 0x7184 <strncasecmp_P>
    6f1c:	89 2b       	or	r24, r25
    6f1e:	51 f4       	brne	.+20     	; 0x6f34 <strtod+0xc6>
    6f20:	e1 14       	cp	r14, r1
    6f22:	f1 04       	cpc	r15, r1
    6f24:	09 f4       	brne	.+2      	; 0x6f28 <strtod+0xba>
    6f26:	f1 c0       	rjmp	.+482    	; 0x710a <strtod+0x29c>
    6f28:	0e 5f       	subi	r16, 0xFE	; 254
    6f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f2c:	f7 01       	movw	r30, r14
    6f2e:	11 83       	std	Z+1, r17	; 0x01
    6f30:	00 83       	st	Z, r16
    6f32:	eb c0       	rjmp	.+470    	; 0x710a <strtod+0x29c>
    6f34:	68 01       	movw	r12, r16
    6f36:	60 e0       	ldi	r22, 0x00	; 0
    6f38:	70 e0       	ldi	r23, 0x00	; 0
    6f3a:	cb 01       	movw	r24, r22
    6f3c:	00 e0       	ldi	r16, 0x00	; 0
    6f3e:	10 e0       	ldi	r17, 0x00	; 0
    6f40:	f6 01       	movw	r30, r12
    6f42:	d0 ed       	ldi	r29, 0xD0	; 208
    6f44:	d7 0d       	add	r29, r7
    6f46:	da 30       	cpi	r29, 0x0A	; 10
    6f48:	50 f5       	brcc	.+84     	; 0x6f9e <strtod+0x130>
    6f4a:	2c 2f       	mov	r18, r28
    6f4c:	22 60       	ori	r18, 0x02	; 2
    6f4e:	62 2e       	mov	r6, r18
    6f50:	2c 2f       	mov	r18, r28
    6f52:	28 70       	andi	r18, 0x08	; 8
    6f54:	c2 ff       	sbrs	r28, 2
    6f56:	05 c0       	rjmp	.+10     	; 0x6f62 <strtod+0xf4>
    6f58:	21 11       	cpse	r18, r1
    6f5a:	27 c0       	rjmp	.+78     	; 0x6faa <strtod+0x13c>
    6f5c:	0f 5f       	subi	r16, 0xFF	; 255
    6f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f60:	24 c0       	rjmp	.+72     	; 0x6faa <strtod+0x13c>
    6f62:	22 23       	and	r18, r18
    6f64:	11 f0       	breq	.+4      	; 0x6f6a <strtod+0xfc>
    6f66:	01 50       	subi	r16, 0x01	; 1
    6f68:	11 09       	sbc	r17, r1
    6f6a:	a5 e0       	ldi	r26, 0x05	; 5
    6f6c:	b0 e0       	ldi	r27, 0x00	; 0
    6f6e:	9b 01       	movw	r18, r22
    6f70:	ac 01       	movw	r20, r24
    6f72:	1e dd       	rcall	.-1476   	; 0x69b0 <__muluhisi3>
    6f74:	4b 01       	movw	r8, r22
    6f76:	5c 01       	movw	r10, r24
    6f78:	88 0c       	add	r8, r8
    6f7a:	99 1c       	adc	r9, r9
    6f7c:	aa 1c       	adc	r10, r10
    6f7e:	bb 1c       	adc	r11, r11
    6f80:	c5 01       	movw	r24, r10
    6f82:	b4 01       	movw	r22, r8
    6f84:	6d 0f       	add	r22, r29
    6f86:	71 1d       	adc	r23, r1
    6f88:	81 1d       	adc	r24, r1
    6f8a:	91 1d       	adc	r25, r1
    6f8c:	68 39       	cpi	r22, 0x98	; 152
    6f8e:	a9 e9       	ldi	r26, 0x99	; 153
    6f90:	7a 07       	cpc	r23, r26
    6f92:	8a 07       	cpc	r24, r26
    6f94:	a9 e1       	ldi	r26, 0x19	; 25
    6f96:	9a 07       	cpc	r25, r26
    6f98:	40 f0       	brcs	.+16     	; 0x6faa <strtod+0x13c>
    6f9a:	c6 60       	ori	r28, 0x06	; 6
    6f9c:	05 c0       	rjmp	.+10     	; 0x6fa8 <strtod+0x13a>
    6f9e:	de 3f       	cpi	r29, 0xFE	; 254
    6fa0:	51 f4       	brne	.+20     	; 0x6fb6 <strtod+0x148>
    6fa2:	c3 fd       	sbrc	r28, 3
    6fa4:	44 c0       	rjmp	.+136    	; 0x702e <strtod+0x1c0>
    6fa6:	c8 60       	ori	r28, 0x08	; 8
    6fa8:	6c 2e       	mov	r6, r28
    6faa:	bf ef       	ldi	r27, 0xFF	; 255
    6fac:	cb 1a       	sub	r12, r27
    6fae:	db 0a       	sbc	r13, r27
    6fb0:	70 80       	ld	r7, Z
    6fb2:	c6 2d       	mov	r28, r6
    6fb4:	c5 cf       	rjmp	.-118    	; 0x6f40 <strtod+0xd2>
    6fb6:	2d 2f       	mov	r18, r29
    6fb8:	2f 7d       	andi	r18, 0xDF	; 223
    6fba:	25 31       	cpi	r18, 0x15	; 21
    6fbc:	c1 f5       	brne	.+112    	; 0x702e <strtod+0x1c0>
    6fbe:	40 81       	ld	r20, Z
    6fc0:	4d 32       	cpi	r20, 0x2D	; 45
    6fc2:	11 f4       	brne	.+4      	; 0x6fc8 <strtod+0x15a>
    6fc4:	c0 61       	ori	r28, 0x10	; 16
    6fc6:	06 c0       	rjmp	.+12     	; 0x6fd4 <strtod+0x166>
    6fc8:	4b 32       	cpi	r20, 0x2B	; 43
    6fca:	21 f0       	breq	.+8      	; 0x6fd4 <strtod+0x166>
    6fcc:	31 96       	adiw	r30, 0x01	; 1
    6fce:	21 e0       	ldi	r18, 0x01	; 1
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	06 c0       	rjmp	.+12     	; 0x6fe0 <strtod+0x172>
    6fd4:	32 96       	adiw	r30, 0x02	; 2
    6fd6:	d6 01       	movw	r26, r12
    6fd8:	11 96       	adiw	r26, 0x01	; 1
    6fda:	4c 91       	ld	r20, X
    6fdc:	22 e0       	ldi	r18, 0x02	; 2
    6fde:	30 e0       	ldi	r19, 0x00	; 0
    6fe0:	a0 ed       	ldi	r26, 0xD0	; 208
    6fe2:	a4 0f       	add	r26, r20
    6fe4:	aa 30       	cpi	r26, 0x0A	; 10
    6fe6:	18 f0       	brcs	.+6      	; 0x6fee <strtod+0x180>
    6fe8:	e2 1b       	sub	r30, r18
    6fea:	f3 0b       	sbc	r31, r19
    6fec:	20 c0       	rjmp	.+64     	; 0x702e <strtod+0x1c0>
    6fee:	40 e0       	ldi	r20, 0x00	; 0
    6ff0:	50 e0       	ldi	r21, 0x00	; 0
    6ff2:	40 38       	cpi	r20, 0x80	; 128
    6ff4:	bc e0       	ldi	r27, 0x0C	; 12
    6ff6:	5b 07       	cpc	r21, r27
    6ff8:	5c f4       	brge	.+22     	; 0x7010 <strtod+0x1a2>
    6ffa:	9a 01       	movw	r18, r20
    6ffc:	22 0f       	add	r18, r18
    6ffe:	33 1f       	adc	r19, r19
    7000:	22 0f       	add	r18, r18
    7002:	33 1f       	adc	r19, r19
    7004:	42 0f       	add	r20, r18
    7006:	53 1f       	adc	r21, r19
    7008:	44 0f       	add	r20, r20
    700a:	55 1f       	adc	r21, r21
    700c:	4a 0f       	add	r20, r26
    700e:	51 1d       	adc	r21, r1
    7010:	31 96       	adiw	r30, 0x01	; 1
    7012:	df 01       	movw	r26, r30
    7014:	11 97       	sbiw	r26, 0x01	; 1
    7016:	2c 91       	ld	r18, X
    7018:	a0 ed       	ldi	r26, 0xD0	; 208
    701a:	a2 0f       	add	r26, r18
    701c:	aa 30       	cpi	r26, 0x0A	; 10
    701e:	48 f3       	brcs	.-46     	; 0x6ff2 <strtod+0x184>
    7020:	c4 ff       	sbrs	r28, 4
    7022:	03 c0       	rjmp	.+6      	; 0x702a <strtod+0x1bc>
    7024:	51 95       	neg	r21
    7026:	41 95       	neg	r20
    7028:	51 09       	sbc	r21, r1
    702a:	04 0f       	add	r16, r20
    702c:	15 1f       	adc	r17, r21
    702e:	c1 ff       	sbrs	r28, 1
    7030:	07 c0       	rjmp	.+14     	; 0x7040 <strtod+0x1d2>
    7032:	e1 14       	cp	r14, r1
    7034:	f1 04       	cpc	r15, r1
    7036:	21 f0       	breq	.+8      	; 0x7040 <strtod+0x1d2>
    7038:	31 97       	sbiw	r30, 0x01	; 1
    703a:	d7 01       	movw	r26, r14
    703c:	ed 93       	st	X+, r30
    703e:	fc 93       	st	X, r31
    7040:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__floatunsisf>
    7044:	c3 70       	andi	r28, 0x03	; 3
    7046:	c3 30       	cpi	r28, 0x03	; 3
    7048:	19 f0       	breq	.+6      	; 0x7050 <strtod+0x1e2>
    704a:	6b 01       	movw	r12, r22
    704c:	7c 01       	movw	r14, r24
    704e:	06 c0       	rjmp	.+12     	; 0x705c <strtod+0x1ee>
    7050:	6b 01       	movw	r12, r22
    7052:	7c 01       	movw	r14, r24
    7054:	f7 fa       	bst	r15, 7
    7056:	f0 94       	com	r15
    7058:	f7 f8       	bld	r15, 7
    705a:	f0 94       	com	r15
    705c:	20 e0       	ldi	r18, 0x00	; 0
    705e:	30 e0       	ldi	r19, 0x00	; 0
    7060:	a9 01       	movw	r20, r18
    7062:	c7 01       	movw	r24, r14
    7064:	b6 01       	movw	r22, r12
    7066:	0e 94 13 2a 	call	0x5426	; 0x5426 <__cmpsf2>
    706a:	88 23       	and	r24, r24
    706c:	09 f4       	brne	.+2      	; 0x7070 <strtod+0x202>
    706e:	45 c0       	rjmp	.+138    	; 0x70fa <strtod+0x28c>
    7070:	17 ff       	sbrs	r17, 7
    7072:	06 c0       	rjmp	.+12     	; 0x7080 <strtod+0x212>
    7074:	11 95       	neg	r17
    7076:	01 95       	neg	r16
    7078:	11 09       	sbc	r17, r1
    707a:	c9 e7       	ldi	r28, 0x79	; 121
    707c:	d2 e0       	ldi	r29, 0x02	; 2
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <strtod+0x216>
    7080:	c1 e9       	ldi	r28, 0x91	; 145
    7082:	d2 e0       	ldi	r29, 0x02	; 2
    7084:	5e 01       	movw	r10, r28
    7086:	b8 e1       	ldi	r27, 0x18	; 24
    7088:	ab 1a       	sub	r10, r27
    708a:	b1 08       	sbc	r11, r1
    708c:	46 01       	movw	r8, r12
    708e:	be 2d       	mov	r27, r14
    7090:	af 2d       	mov	r26, r15
    7092:	90 e2       	ldi	r25, 0x20	; 32
    7094:	e9 2e       	mov	r14, r25
    7096:	f1 2c       	mov	r15, r1
    7098:	0e 15       	cp	r16, r14
    709a:	1f 05       	cpc	r17, r15
    709c:	84 f0       	brlt	.+32     	; 0x70be <strtod+0x250>
    709e:	fe 01       	movw	r30, r28
    70a0:	25 91       	lpm	r18, Z+
    70a2:	35 91       	lpm	r19, Z+
    70a4:	45 91       	lpm	r20, Z+
    70a6:	54 91       	lpm	r21, Z
    70a8:	b4 01       	movw	r22, r8
    70aa:	8b 2f       	mov	r24, r27
    70ac:	9a 2f       	mov	r25, r26
    70ae:	0e 94 66 2b 	call	0x56cc	; 0x56cc <__mulsf3>
    70b2:	4b 01       	movw	r8, r22
    70b4:	b8 2f       	mov	r27, r24
    70b6:	a9 2f       	mov	r26, r25
    70b8:	0e 19       	sub	r16, r14
    70ba:	1f 09       	sbc	r17, r15
    70bc:	ed cf       	rjmp	.-38     	; 0x7098 <strtod+0x22a>
    70be:	24 97       	sbiw	r28, 0x04	; 4
    70c0:	f5 94       	asr	r15
    70c2:	e7 94       	ror	r14
    70c4:	ca 15       	cp	r28, r10
    70c6:	db 05       	cpc	r29, r11
    70c8:	39 f7       	brne	.-50     	; 0x7098 <strtod+0x22a>
    70ca:	64 01       	movw	r12, r8
    70cc:	eb 2e       	mov	r14, r27
    70ce:	fa 2e       	mov	r15, r26
    70d0:	8e 2d       	mov	r24, r14
    70d2:	88 0f       	add	r24, r24
    70d4:	8f 2d       	mov	r24, r15
    70d6:	88 1f       	adc	r24, r24
    70d8:	8f 3f       	cpi	r24, 0xFF	; 255
    70da:	49 f0       	breq	.+18     	; 0x70ee <strtod+0x280>
    70dc:	20 e0       	ldi	r18, 0x00	; 0
    70de:	30 e0       	ldi	r19, 0x00	; 0
    70e0:	a9 01       	movw	r20, r18
    70e2:	c7 01       	movw	r24, r14
    70e4:	b6 01       	movw	r22, r12
    70e6:	0e 94 13 2a 	call	0x5426	; 0x5426 <__cmpsf2>
    70ea:	81 11       	cpse	r24, r1
    70ec:	06 c0       	rjmp	.+12     	; 0x70fa <strtod+0x28c>
    70ee:	82 e2       	ldi	r24, 0x22	; 34
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	90 93 31 06 	sts	0x0631, r25	; 0x800631 <errno+0x1>
    70f6:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <errno>
    70fa:	c7 01       	movw	r24, r14
    70fc:	b6 01       	movw	r22, r12
    70fe:	09 c0       	rjmp	.+18     	; 0x7112 <strtod+0x2a4>
    7100:	60 e0       	ldi	r22, 0x00	; 0
    7102:	70 e0       	ldi	r23, 0x00	; 0
    7104:	80 e8       	ldi	r24, 0x80	; 128
    7106:	9f ef       	ldi	r25, 0xFF	; 255
    7108:	04 c0       	rjmp	.+8      	; 0x7112 <strtod+0x2a4>
    710a:	60 e0       	ldi	r22, 0x00	; 0
    710c:	70 e0       	ldi	r23, 0x00	; 0
    710e:	80 ec       	ldi	r24, 0xC0	; 192
    7110:	9f e7       	ldi	r25, 0x7F	; 127
    7112:	cd b7       	in	r28, 0x3d	; 61
    7114:	de b7       	in	r29, 0x3e	; 62
    7116:	ee e0       	ldi	r30, 0x0E	; 14
    7118:	75 cc       	rjmp	.-1814   	; 0x6a04 <__epilogue_restores__+0x8>

0000711a <abort>:
    711a:	81 e0       	ldi	r24, 0x01	; 1
    711c:	90 e0       	ldi	r25, 0x00	; 0
    711e:	f8 94       	cli
    7120:	79 c3       	rjmp	.+1778   	; 0x7814 <__do_global_dtors>

00007122 <atof>:
    7122:	66 27       	eor	r22, r22
    7124:	77 27       	eor	r23, r23
    7126:	a3 ce       	rjmp	.-698    	; 0x6e6e <strtod>

00007128 <atol>:
    7128:	1f 93       	push	r17
    712a:	fc 01       	movw	r30, r24
    712c:	99 27       	eor	r25, r25
    712e:	88 27       	eor	r24, r24
    7130:	bc 01       	movw	r22, r24
    7132:	e8 94       	clt
    7134:	11 91       	ld	r17, Z+
    7136:	10 32       	cpi	r17, 0x20	; 32
    7138:	e9 f3       	breq	.-6      	; 0x7134 <atol+0xc>
    713a:	19 30       	cpi	r17, 0x09	; 9
    713c:	10 f0       	brcs	.+4      	; 0x7142 <atol+0x1a>
    713e:	1e 30       	cpi	r17, 0x0E	; 14
    7140:	c8 f3       	brcs	.-14     	; 0x7134 <atol+0xc>
    7142:	1b 32       	cpi	r17, 0x2B	; 43
    7144:	49 f0       	breq	.+18     	; 0x7158 <atol+0x30>
    7146:	1d 32       	cpi	r17, 0x2D	; 45
    7148:	41 f4       	brne	.+16     	; 0x715a <atol+0x32>
    714a:	68 94       	set
    714c:	05 c0       	rjmp	.+10     	; 0x7158 <atol+0x30>
    714e:	85 d0       	rcall	.+266    	; 0x725a <__mulsi_const_10>
    7150:	61 0f       	add	r22, r17
    7152:	71 1d       	adc	r23, r1
    7154:	81 1d       	adc	r24, r1
    7156:	91 1d       	adc	r25, r1
    7158:	11 91       	ld	r17, Z+
    715a:	10 53       	subi	r17, 0x30	; 48
    715c:	1a 30       	cpi	r17, 0x0A	; 10
    715e:	b8 f3       	brcs	.-18     	; 0x714e <atol+0x26>
    7160:	3e f4       	brtc	.+14     	; 0x7170 <atol+0x48>
    7162:	90 95       	com	r25
    7164:	80 95       	com	r24
    7166:	70 95       	com	r23
    7168:	61 95       	neg	r22
    716a:	7f 4f       	sbci	r23, 0xFF	; 255
    716c:	8f 4f       	sbci	r24, 0xFF	; 255
    716e:	9f 4f       	sbci	r25, 0xFF	; 255
    7170:	1f 91       	pop	r17
    7172:	08 95       	ret

00007174 <isspace>:
    7174:	91 11       	cpse	r25, r1
    7176:	25 c3       	rjmp	.+1610   	; 0x77c2 <__ctype_isfalse>
    7178:	80 32       	cpi	r24, 0x20	; 32
    717a:	19 f0       	breq	.+6      	; 0x7182 <isspace+0xe>
    717c:	89 50       	subi	r24, 0x09	; 9
    717e:	85 50       	subi	r24, 0x05	; 5
    7180:	d0 f7       	brcc	.-12     	; 0x7176 <isspace+0x2>
    7182:	08 95       	ret

00007184 <strncasecmp_P>:
    7184:	fb 01       	movw	r30, r22
    7186:	dc 01       	movw	r26, r24
    7188:	41 50       	subi	r20, 0x01	; 1
    718a:	50 40       	sbci	r21, 0x00	; 0
    718c:	88 f0       	brcs	.+34     	; 0x71b0 <strncasecmp_P+0x2c>
    718e:	8d 91       	ld	r24, X+
    7190:	81 34       	cpi	r24, 0x41	; 65
    7192:	1c f0       	brlt	.+6      	; 0x719a <strncasecmp_P+0x16>
    7194:	8b 35       	cpi	r24, 0x5B	; 91
    7196:	0c f4       	brge	.+2      	; 0x719a <strncasecmp_P+0x16>
    7198:	80 5e       	subi	r24, 0xE0	; 224
    719a:	65 91       	lpm	r22, Z+
    719c:	61 34       	cpi	r22, 0x41	; 65
    719e:	1c f0       	brlt	.+6      	; 0x71a6 <strncasecmp_P+0x22>
    71a0:	6b 35       	cpi	r22, 0x5B	; 91
    71a2:	0c f4       	brge	.+2      	; 0x71a6 <strncasecmp_P+0x22>
    71a4:	60 5e       	subi	r22, 0xE0	; 224
    71a6:	86 1b       	sub	r24, r22
    71a8:	61 11       	cpse	r22, r1
    71aa:	71 f3       	breq	.-36     	; 0x7188 <strncasecmp_P+0x4>
    71ac:	99 0b       	sbc	r25, r25
    71ae:	08 95       	ret
    71b0:	88 1b       	sub	r24, r24
    71b2:	fc cf       	rjmp	.-8      	; 0x71ac <strncasecmp_P+0x28>

000071b4 <memcpy>:
    71b4:	fb 01       	movw	r30, r22
    71b6:	dc 01       	movw	r26, r24
    71b8:	02 c0       	rjmp	.+4      	; 0x71be <memcpy+0xa>
    71ba:	01 90       	ld	r0, Z+
    71bc:	0d 92       	st	X+, r0
    71be:	41 50       	subi	r20, 0x01	; 1
    71c0:	50 40       	sbci	r21, 0x00	; 0
    71c2:	d8 f7       	brcc	.-10     	; 0x71ba <memcpy+0x6>
    71c4:	08 95       	ret

000071c6 <strcmp>:
    71c6:	fb 01       	movw	r30, r22
    71c8:	dc 01       	movw	r26, r24
    71ca:	8d 91       	ld	r24, X+
    71cc:	01 90       	ld	r0, Z+
    71ce:	80 19       	sub	r24, r0
    71d0:	01 10       	cpse	r0, r1
    71d2:	d9 f3       	breq	.-10     	; 0x71ca <strcmp+0x4>
    71d4:	99 0b       	sbc	r25, r25
    71d6:	08 95       	ret

000071d8 <strcpy>:
    71d8:	fb 01       	movw	r30, r22
    71da:	dc 01       	movw	r26, r24
    71dc:	01 90       	ld	r0, Z+
    71de:	0d 92       	st	X+, r0
    71e0:	00 20       	and	r0, r0
    71e2:	e1 f7       	brne	.-8      	; 0x71dc <strcpy+0x4>
    71e4:	08 95       	ret

000071e6 <strncmp>:
    71e6:	fb 01       	movw	r30, r22
    71e8:	dc 01       	movw	r26, r24
    71ea:	41 50       	subi	r20, 0x01	; 1
    71ec:	50 40       	sbci	r21, 0x00	; 0
    71ee:	30 f0       	brcs	.+12     	; 0x71fc <strncmp+0x16>
    71f0:	8d 91       	ld	r24, X+
    71f2:	01 90       	ld	r0, Z+
    71f4:	80 19       	sub	r24, r0
    71f6:	19 f4       	brne	.+6      	; 0x71fe <strncmp+0x18>
    71f8:	00 20       	and	r0, r0
    71fa:	b9 f7       	brne	.-18     	; 0x71ea <strncmp+0x4>
    71fc:	88 1b       	sub	r24, r24
    71fe:	99 0b       	sbc	r25, r25
    7200:	08 95       	ret

00007202 <itoa>:
    7202:	45 32       	cpi	r20, 0x25	; 37
    7204:	51 05       	cpc	r21, r1
    7206:	18 f4       	brcc	.+6      	; 0x720e <itoa+0xc>
    7208:	42 30       	cpi	r20, 0x02	; 2
    720a:	08 f0       	brcs	.+2      	; 0x720e <itoa+0xc>
    720c:	04 c0       	rjmp	.+8      	; 0x7216 <__itoa_ncheck>
    720e:	fb 01       	movw	r30, r22
    7210:	10 82       	st	Z, r1
    7212:	cb 01       	movw	r24, r22
    7214:	08 95       	ret

00007216 <__itoa_ncheck>:
    7216:	bb 27       	eor	r27, r27
    7218:	4a 30       	cpi	r20, 0x0A	; 10
    721a:	31 f4       	brne	.+12     	; 0x7228 <__itoa_ncheck+0x12>
    721c:	99 23       	and	r25, r25
    721e:	22 f4       	brpl	.+8      	; 0x7228 <__itoa_ncheck+0x12>
    7220:	bd e2       	ldi	r27, 0x2D	; 45
    7222:	90 95       	com	r25
    7224:	81 95       	neg	r24
    7226:	9f 4f       	sbci	r25, 0xFF	; 255
    7228:	4f c0       	rjmp	.+158    	; 0x72c8 <__utoa_common>

0000722a <ltoa>:
    722a:	25 32       	cpi	r18, 0x25	; 37
    722c:	31 05       	cpc	r19, r1
    722e:	18 f4       	brcc	.+6      	; 0x7236 <ltoa+0xc>
    7230:	22 30       	cpi	r18, 0x02	; 2
    7232:	08 f0       	brcs	.+2      	; 0x7236 <ltoa+0xc>
    7234:	04 c0       	rjmp	.+8      	; 0x723e <__ltoa_ncheck>
    7236:	fa 01       	movw	r30, r20
    7238:	10 82       	st	Z, r1
    723a:	ca 01       	movw	r24, r20
    723c:	08 95       	ret

0000723e <__ltoa_ncheck>:
    723e:	bb 27       	eor	r27, r27
    7240:	2a 30       	cpi	r18, 0x0A	; 10
    7242:	51 f4       	brne	.+20     	; 0x7258 <__ltoa_ncheck+0x1a>
    7244:	99 23       	and	r25, r25
    7246:	42 f4       	brpl	.+16     	; 0x7258 <__ltoa_ncheck+0x1a>
    7248:	bd e2       	ldi	r27, 0x2D	; 45
    724a:	90 95       	com	r25
    724c:	80 95       	com	r24
    724e:	70 95       	com	r23
    7250:	61 95       	neg	r22
    7252:	7f 4f       	sbci	r23, 0xFF	; 255
    7254:	8f 4f       	sbci	r24, 0xFF	; 255
    7256:	9f 4f       	sbci	r25, 0xFF	; 255
    7258:	16 c0       	rjmp	.+44     	; 0x7286 <__ultoa_common>

0000725a <__mulsi_const_10>:
    725a:	59 2f       	mov	r21, r25
    725c:	48 2f       	mov	r20, r24
    725e:	37 2f       	mov	r19, r23
    7260:	26 2f       	mov	r18, r22
    7262:	66 0f       	add	r22, r22
    7264:	77 1f       	adc	r23, r23
    7266:	88 1f       	adc	r24, r24
    7268:	99 1f       	adc	r25, r25
    726a:	66 0f       	add	r22, r22
    726c:	77 1f       	adc	r23, r23
    726e:	88 1f       	adc	r24, r24
    7270:	99 1f       	adc	r25, r25
    7272:	62 0f       	add	r22, r18
    7274:	73 1f       	adc	r23, r19
    7276:	84 1f       	adc	r24, r20
    7278:	95 1f       	adc	r25, r21
    727a:	66 0f       	add	r22, r22
    727c:	77 1f       	adc	r23, r23
    727e:	88 1f       	adc	r24, r24
    7280:	99 1f       	adc	r25, r25
    7282:	08 95       	ret

00007284 <__ultoa_ncheck>:
    7284:	bb 27       	eor	r27, r27

00007286 <__ultoa_common>:
    7286:	fa 01       	movw	r30, r20
    7288:	a6 2f       	mov	r26, r22
    728a:	62 17       	cp	r22, r18
    728c:	71 05       	cpc	r23, r1
    728e:	81 05       	cpc	r24, r1
    7290:	91 05       	cpc	r25, r1
    7292:	33 0b       	sbc	r19, r19
    7294:	30 fb       	bst	r19, 0
    7296:	66 f0       	brts	.+24     	; 0x72b0 <__ultoa_common+0x2a>
    7298:	aa 27       	eor	r26, r26
    729a:	66 0f       	add	r22, r22
    729c:	77 1f       	adc	r23, r23
    729e:	88 1f       	adc	r24, r24
    72a0:	99 1f       	adc	r25, r25
    72a2:	aa 1f       	adc	r26, r26
    72a4:	a2 17       	cp	r26, r18
    72a6:	10 f0       	brcs	.+4      	; 0x72ac <__ultoa_common+0x26>
    72a8:	a2 1b       	sub	r26, r18
    72aa:	63 95       	inc	r22
    72ac:	38 50       	subi	r19, 0x08	; 8
    72ae:	a9 f7       	brne	.-22     	; 0x729a <__ultoa_common+0x14>
    72b0:	a0 5d       	subi	r26, 0xD0	; 208
    72b2:	aa 33       	cpi	r26, 0x3A	; 58
    72b4:	08 f0       	brcs	.+2      	; 0x72b8 <__ultoa_common+0x32>
    72b6:	a9 5d       	subi	r26, 0xD9	; 217
    72b8:	a1 93       	st	Z+, r26
    72ba:	36 f7       	brtc	.-52     	; 0x7288 <__ultoa_common+0x2>
    72bc:	b1 11       	cpse	r27, r1
    72be:	b1 93       	st	Z+, r27
    72c0:	10 82       	st	Z, r1
    72c2:	ca 01       	movw	r24, r20
    72c4:	81 c2       	rjmp	.+1282   	; 0x77c8 <strrev>

000072c6 <__utoa_ncheck>:
    72c6:	bb 27       	eor	r27, r27

000072c8 <__utoa_common>:
    72c8:	fb 01       	movw	r30, r22
    72ca:	55 27       	eor	r21, r21
    72cc:	aa 27       	eor	r26, r26
    72ce:	88 0f       	add	r24, r24
    72d0:	99 1f       	adc	r25, r25
    72d2:	aa 1f       	adc	r26, r26
    72d4:	a4 17       	cp	r26, r20
    72d6:	10 f0       	brcs	.+4      	; 0x72dc <__utoa_common+0x14>
    72d8:	a4 1b       	sub	r26, r20
    72da:	83 95       	inc	r24
    72dc:	50 51       	subi	r21, 0x10	; 16
    72de:	b9 f7       	brne	.-18     	; 0x72ce <__utoa_common+0x6>
    72e0:	a0 5d       	subi	r26, 0xD0	; 208
    72e2:	aa 33       	cpi	r26, 0x3A	; 58
    72e4:	08 f0       	brcs	.+2      	; 0x72e8 <__utoa_common+0x20>
    72e6:	a9 5d       	subi	r26, 0xD9	; 217
    72e8:	a1 93       	st	Z+, r26
    72ea:	00 97       	sbiw	r24, 0x00	; 0
    72ec:	79 f7       	brne	.-34     	; 0x72cc <__utoa_common+0x4>
    72ee:	b1 11       	cpse	r27, r1
    72f0:	b1 93       	st	Z+, r27
    72f2:	11 92       	st	Z+, r1
    72f4:	cb 01       	movw	r24, r22
    72f6:	68 c2       	rjmp	.+1232   	; 0x77c8 <strrev>

000072f8 <dtoa_prf>:
    72f8:	4f 92       	push	r4
    72fa:	5f 92       	push	r5
    72fc:	6f 92       	push	r6
    72fe:	7f 92       	push	r7
    7300:	9f 92       	push	r9
    7302:	af 92       	push	r10
    7304:	bf 92       	push	r11
    7306:	cf 92       	push	r12
    7308:	df 92       	push	r13
    730a:	ef 92       	push	r14
    730c:	ff 92       	push	r15
    730e:	0f 93       	push	r16
    7310:	1f 93       	push	r17
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
    7316:	cd b7       	in	r28, 0x3d	; 61
    7318:	de b7       	in	r29, 0x3e	; 62
    731a:	29 97       	sbiw	r28, 0x09	; 9
    731c:	0f b6       	in	r0, 0x3f	; 63
    731e:	f8 94       	cli
    7320:	de bf       	out	0x3e, r29	; 62
    7322:	0f be       	out	0x3f, r0	; 63
    7324:	cd bf       	out	0x3d, r28	; 61
    7326:	6a 01       	movw	r12, r20
    7328:	12 2f       	mov	r17, r18
    732a:	b0 2e       	mov	r11, r16
    732c:	2b e3       	ldi	r18, 0x3B	; 59
    732e:	20 17       	cp	r18, r16
    7330:	20 f0       	brcs	.+8      	; 0x733a <dtoa_prf+0x42>
    7332:	ff 24       	eor	r15, r15
    7334:	f3 94       	inc	r15
    7336:	f0 0e       	add	r15, r16
    7338:	02 c0       	rjmp	.+4      	; 0x733e <dtoa_prf+0x46>
    733a:	bc e3       	ldi	r27, 0x3C	; 60
    733c:	fb 2e       	mov	r15, r27
    733e:	0f 2d       	mov	r16, r15
    7340:	27 e0       	ldi	r18, 0x07	; 7
    7342:	ae 01       	movw	r20, r28
    7344:	4f 5f       	subi	r20, 0xFF	; 255
    7346:	5f 4f       	sbci	r21, 0xFF	; 255
    7348:	64 d1       	rcall	.+712    	; 0x7612 <__ftoa_engine>
    734a:	ac 01       	movw	r20, r24
    734c:	89 81       	ldd	r24, Y+1	; 0x01
    734e:	98 2f       	mov	r25, r24
    7350:	99 70       	andi	r25, 0x09	; 9
    7352:	91 30       	cpi	r25, 0x01	; 1
    7354:	31 f0       	breq	.+12     	; 0x7362 <dtoa_prf+0x6a>
    7356:	e1 fc       	sbrc	r14, 1
    7358:	06 c0       	rjmp	.+12     	; 0x7366 <dtoa_prf+0x6e>
    735a:	e0 fe       	sbrs	r14, 0
    735c:	06 c0       	rjmp	.+12     	; 0x736a <dtoa_prf+0x72>
    735e:	90 e2       	ldi	r25, 0x20	; 32
    7360:	05 c0       	rjmp	.+10     	; 0x736c <dtoa_prf+0x74>
    7362:	9d e2       	ldi	r25, 0x2D	; 45
    7364:	03 c0       	rjmp	.+6      	; 0x736c <dtoa_prf+0x74>
    7366:	9b e2       	ldi	r25, 0x2B	; 43
    7368:	01 c0       	rjmp	.+2      	; 0x736c <dtoa_prf+0x74>
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	ee 2d       	mov	r30, r14
    736e:	e0 71       	andi	r30, 0x10	; 16
    7370:	83 ff       	sbrs	r24, 3
    7372:	3c c0       	rjmp	.+120    	; 0x73ec <dtoa_prf+0xf4>
    7374:	91 11       	cpse	r25, r1
    7376:	02 c0       	rjmp	.+4      	; 0x737c <dtoa_prf+0x84>
    7378:	83 e0       	ldi	r24, 0x03	; 3
    737a:	01 c0       	rjmp	.+2      	; 0x737e <dtoa_prf+0x86>
    737c:	84 e0       	ldi	r24, 0x04	; 4
    737e:	81 17       	cp	r24, r17
    7380:	18 f4       	brcc	.+6      	; 0x7388 <dtoa_prf+0x90>
    7382:	21 2f       	mov	r18, r17
    7384:	28 1b       	sub	r18, r24
    7386:	01 c0       	rjmp	.+2      	; 0x738a <dtoa_prf+0x92>
    7388:	20 e0       	ldi	r18, 0x00	; 0
    738a:	e1 11       	cpse	r30, r1
    738c:	0b c0       	rjmp	.+22     	; 0x73a4 <dtoa_prf+0xac>
    738e:	f6 01       	movw	r30, r12
    7390:	82 2f       	mov	r24, r18
    7392:	30 e2       	ldi	r19, 0x20	; 32
    7394:	88 23       	and	r24, r24
    7396:	19 f0       	breq	.+6      	; 0x739e <dtoa_prf+0xa6>
    7398:	31 93       	st	Z+, r19
    739a:	81 50       	subi	r24, 0x01	; 1
    739c:	fb cf       	rjmp	.-10     	; 0x7394 <dtoa_prf+0x9c>
    739e:	c2 0e       	add	r12, r18
    73a0:	d1 1c       	adc	r13, r1
    73a2:	20 e0       	ldi	r18, 0x00	; 0
    73a4:	99 23       	and	r25, r25
    73a6:	29 f0       	breq	.+10     	; 0x73b2 <dtoa_prf+0xba>
    73a8:	d6 01       	movw	r26, r12
    73aa:	9c 93       	st	X, r25
    73ac:	f6 01       	movw	r30, r12
    73ae:	31 96       	adiw	r30, 0x01	; 1
    73b0:	6f 01       	movw	r12, r30
    73b2:	c6 01       	movw	r24, r12
    73b4:	03 96       	adiw	r24, 0x03	; 3
    73b6:	e2 fe       	sbrs	r14, 2
    73b8:	0a c0       	rjmp	.+20     	; 0x73ce <dtoa_prf+0xd6>
    73ba:	3e e4       	ldi	r19, 0x4E	; 78
    73bc:	d6 01       	movw	r26, r12
    73be:	3c 93       	st	X, r19
    73c0:	41 e4       	ldi	r20, 0x41	; 65
    73c2:	11 96       	adiw	r26, 0x01	; 1
    73c4:	4c 93       	st	X, r20
    73c6:	11 97       	sbiw	r26, 0x01	; 1
    73c8:	12 96       	adiw	r26, 0x02	; 2
    73ca:	3c 93       	st	X, r19
    73cc:	06 c0       	rjmp	.+12     	; 0x73da <dtoa_prf+0xe2>
    73ce:	3e e6       	ldi	r19, 0x6E	; 110
    73d0:	f6 01       	movw	r30, r12
    73d2:	30 83       	st	Z, r19
    73d4:	41 e6       	ldi	r20, 0x61	; 97
    73d6:	41 83       	std	Z+1, r20	; 0x01
    73d8:	32 83       	std	Z+2, r19	; 0x02
    73da:	fc 01       	movw	r30, r24
    73dc:	32 2f       	mov	r19, r18
    73de:	40 e2       	ldi	r20, 0x20	; 32
    73e0:	33 23       	and	r19, r19
    73e2:	09 f4       	brne	.+2      	; 0x73e6 <dtoa_prf+0xee>
    73e4:	42 c0       	rjmp	.+132    	; 0x746a <dtoa_prf+0x172>
    73e6:	41 93       	st	Z+, r20
    73e8:	31 50       	subi	r19, 0x01	; 1
    73ea:	fa cf       	rjmp	.-12     	; 0x73e0 <dtoa_prf+0xe8>
    73ec:	82 ff       	sbrs	r24, 2
    73ee:	44 c0       	rjmp	.+136    	; 0x7478 <dtoa_prf+0x180>
    73f0:	91 11       	cpse	r25, r1
    73f2:	02 c0       	rjmp	.+4      	; 0x73f8 <dtoa_prf+0x100>
    73f4:	83 e0       	ldi	r24, 0x03	; 3
    73f6:	01 c0       	rjmp	.+2      	; 0x73fa <dtoa_prf+0x102>
    73f8:	84 e0       	ldi	r24, 0x04	; 4
    73fa:	81 17       	cp	r24, r17
    73fc:	18 f4       	brcc	.+6      	; 0x7404 <dtoa_prf+0x10c>
    73fe:	21 2f       	mov	r18, r17
    7400:	28 1b       	sub	r18, r24
    7402:	01 c0       	rjmp	.+2      	; 0x7406 <dtoa_prf+0x10e>
    7404:	20 e0       	ldi	r18, 0x00	; 0
    7406:	e1 11       	cpse	r30, r1
    7408:	0b c0       	rjmp	.+22     	; 0x7420 <dtoa_prf+0x128>
    740a:	f6 01       	movw	r30, r12
    740c:	82 2f       	mov	r24, r18
    740e:	30 e2       	ldi	r19, 0x20	; 32
    7410:	88 23       	and	r24, r24
    7412:	19 f0       	breq	.+6      	; 0x741a <dtoa_prf+0x122>
    7414:	31 93       	st	Z+, r19
    7416:	81 50       	subi	r24, 0x01	; 1
    7418:	fb cf       	rjmp	.-10     	; 0x7410 <dtoa_prf+0x118>
    741a:	c2 0e       	add	r12, r18
    741c:	d1 1c       	adc	r13, r1
    741e:	20 e0       	ldi	r18, 0x00	; 0
    7420:	99 23       	and	r25, r25
    7422:	29 f0       	breq	.+10     	; 0x742e <dtoa_prf+0x136>
    7424:	d6 01       	movw	r26, r12
    7426:	9c 93       	st	X, r25
    7428:	f6 01       	movw	r30, r12
    742a:	31 96       	adiw	r30, 0x01	; 1
    742c:	6f 01       	movw	r12, r30
    742e:	c6 01       	movw	r24, r12
    7430:	03 96       	adiw	r24, 0x03	; 3
    7432:	e2 fe       	sbrs	r14, 2
    7434:	0b c0       	rjmp	.+22     	; 0x744c <dtoa_prf+0x154>
    7436:	39 e4       	ldi	r19, 0x49	; 73
    7438:	d6 01       	movw	r26, r12
    743a:	3c 93       	st	X, r19
    743c:	3e e4       	ldi	r19, 0x4E	; 78
    743e:	11 96       	adiw	r26, 0x01	; 1
    7440:	3c 93       	st	X, r19
    7442:	11 97       	sbiw	r26, 0x01	; 1
    7444:	36 e4       	ldi	r19, 0x46	; 70
    7446:	12 96       	adiw	r26, 0x02	; 2
    7448:	3c 93       	st	X, r19
    744a:	07 c0       	rjmp	.+14     	; 0x745a <dtoa_prf+0x162>
    744c:	39 e6       	ldi	r19, 0x69	; 105
    744e:	f6 01       	movw	r30, r12
    7450:	30 83       	st	Z, r19
    7452:	3e e6       	ldi	r19, 0x6E	; 110
    7454:	31 83       	std	Z+1, r19	; 0x01
    7456:	36 e6       	ldi	r19, 0x66	; 102
    7458:	32 83       	std	Z+2, r19	; 0x02
    745a:	fc 01       	movw	r30, r24
    745c:	32 2f       	mov	r19, r18
    745e:	40 e2       	ldi	r20, 0x20	; 32
    7460:	33 23       	and	r19, r19
    7462:	19 f0       	breq	.+6      	; 0x746a <dtoa_prf+0x172>
    7464:	41 93       	st	Z+, r20
    7466:	31 50       	subi	r19, 0x01	; 1
    7468:	fb cf       	rjmp	.-10     	; 0x7460 <dtoa_prf+0x168>
    746a:	fc 01       	movw	r30, r24
    746c:	e2 0f       	add	r30, r18
    746e:	f1 1d       	adc	r31, r1
    7470:	10 82       	st	Z, r1
    7472:	8e ef       	ldi	r24, 0xFE	; 254
    7474:	9f ef       	ldi	r25, 0xFF	; 255
    7476:	b7 c0       	rjmp	.+366    	; 0x75e6 <dtoa_prf+0x2ee>
    7478:	f1 e0       	ldi	r31, 0x01	; 1
    747a:	91 11       	cpse	r25, r1
    747c:	01 c0       	rjmp	.+2      	; 0x7480 <dtoa_prf+0x188>
    747e:	f0 e0       	ldi	r31, 0x00	; 0
    7480:	6f 2f       	mov	r22, r31
    7482:	70 e0       	ldi	r23, 0x00	; 0
    7484:	14 16       	cp	r1, r20
    7486:	15 06       	cpc	r1, r21
    7488:	24 f4       	brge	.+8      	; 0x7492 <dtoa_prf+0x19a>
    748a:	9a 01       	movw	r18, r20
    748c:	2f 5f       	subi	r18, 0xFF	; 255
    748e:	3f 4f       	sbci	r19, 0xFF	; 255
    7490:	02 c0       	rjmp	.+4      	; 0x7496 <dtoa_prf+0x19e>
    7492:	21 e0       	ldi	r18, 0x01	; 1
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	26 0f       	add	r18, r22
    7498:	37 1f       	adc	r19, r23
    749a:	bb 20       	and	r11, r11
    749c:	29 f0       	breq	.+10     	; 0x74a8 <dtoa_prf+0x1b0>
    749e:	6b 2d       	mov	r22, r11
    74a0:	70 e0       	ldi	r23, 0x00	; 0
    74a2:	6f 5f       	subi	r22, 0xFF	; 255
    74a4:	7f 4f       	sbci	r23, 0xFF	; 255
    74a6:	02 c0       	rjmp	.+4      	; 0x74ac <dtoa_prf+0x1b4>
    74a8:	60 e0       	ldi	r22, 0x00	; 0
    74aa:	70 e0       	ldi	r23, 0x00	; 0
    74ac:	26 0f       	add	r18, r22
    74ae:	37 1f       	adc	r19, r23
    74b0:	61 2f       	mov	r22, r17
    74b2:	70 e0       	ldi	r23, 0x00	; 0
    74b4:	26 17       	cp	r18, r22
    74b6:	37 07       	cpc	r19, r23
    74b8:	1c f4       	brge	.+6      	; 0x74c0 <dtoa_prf+0x1c8>
    74ba:	12 1b       	sub	r17, r18
    74bc:	21 2f       	mov	r18, r17
    74be:	01 c0       	rjmp	.+2      	; 0x74c2 <dtoa_prf+0x1ca>
    74c0:	20 e0       	ldi	r18, 0x00	; 0
    74c2:	3e 2d       	mov	r19, r14
    74c4:	38 71       	andi	r19, 0x18	; 24
    74c6:	59 f4       	brne	.+22     	; 0x74de <dtoa_prf+0x1e6>
    74c8:	d6 01       	movw	r26, r12
    74ca:	32 2f       	mov	r19, r18
    74cc:	60 e2       	ldi	r22, 0x20	; 32
    74ce:	33 23       	and	r19, r19
    74d0:	19 f0       	breq	.+6      	; 0x74d8 <dtoa_prf+0x1e0>
    74d2:	6d 93       	st	X+, r22
    74d4:	31 50       	subi	r19, 0x01	; 1
    74d6:	fb cf       	rjmp	.-10     	; 0x74ce <dtoa_prf+0x1d6>
    74d8:	c2 0e       	add	r12, r18
    74da:	d1 1c       	adc	r13, r1
    74dc:	20 e0       	ldi	r18, 0x00	; 0
    74de:	ff 23       	and	r31, r31
    74e0:	31 f0       	breq	.+12     	; 0x74ee <dtoa_prf+0x1f6>
    74e2:	d6 01       	movw	r26, r12
    74e4:	9c 93       	st	X, r25
    74e6:	b6 01       	movw	r22, r12
    74e8:	6f 5f       	subi	r22, 0xFF	; 255
    74ea:	7f 4f       	sbci	r23, 0xFF	; 255
    74ec:	6b 01       	movw	r12, r22
    74ee:	e1 11       	cpse	r30, r1
    74f0:	0b c0       	rjmp	.+22     	; 0x7508 <dtoa_prf+0x210>
    74f2:	f6 01       	movw	r30, r12
    74f4:	92 2f       	mov	r25, r18
    74f6:	30 e3       	ldi	r19, 0x30	; 48
    74f8:	99 23       	and	r25, r25
    74fa:	19 f0       	breq	.+6      	; 0x7502 <dtoa_prf+0x20a>
    74fc:	31 93       	st	Z+, r19
    74fe:	91 50       	subi	r25, 0x01	; 1
    7500:	fb cf       	rjmp	.-10     	; 0x74f8 <dtoa_prf+0x200>
    7502:	c2 0e       	add	r12, r18
    7504:	d1 1c       	adc	r13, r1
    7506:	20 e0       	ldi	r18, 0x00	; 0
    7508:	9f 2d       	mov	r25, r15
    750a:	94 0f       	add	r25, r20
    750c:	3a 81       	ldd	r19, Y+2	; 0x02
    750e:	78 2f       	mov	r23, r24
    7510:	70 71       	andi	r23, 0x10	; 16
    7512:	a7 2e       	mov	r10, r23
    7514:	84 ff       	sbrs	r24, 4
    7516:	03 c0       	rjmp	.+6      	; 0x751e <dtoa_prf+0x226>
    7518:	31 33       	cpi	r19, 0x31	; 49
    751a:	09 f4       	brne	.+2      	; 0x751e <dtoa_prf+0x226>
    751c:	91 50       	subi	r25, 0x01	; 1
    751e:	19 16       	cp	r1, r25
    7520:	24 f4       	brge	.+8      	; 0x752a <dtoa_prf+0x232>
    7522:	99 30       	cpi	r25, 0x09	; 9
    7524:	18 f0       	brcs	.+6      	; 0x752c <dtoa_prf+0x234>
    7526:	98 e0       	ldi	r25, 0x08	; 8
    7528:	01 c0       	rjmp	.+2      	; 0x752c <dtoa_prf+0x234>
    752a:	91 e0       	ldi	r25, 0x01	; 1
    752c:	e4 2f       	mov	r30, r20
    752e:	85 2f       	mov	r24, r21
    7530:	57 ff       	sbrs	r21, 7
    7532:	02 c0       	rjmp	.+4      	; 0x7538 <dtoa_prf+0x240>
    7534:	e0 e0       	ldi	r30, 0x00	; 0
    7536:	80 e0       	ldi	r24, 0x00	; 0
    7538:	6e 2f       	mov	r22, r30
    753a:	78 2f       	mov	r23, r24
    753c:	e0 e0       	ldi	r30, 0x00	; 0
    753e:	f0 e0       	ldi	r31, 0x00	; 0
    7540:	ae e2       	ldi	r26, 0x2E	; 46
    7542:	9a 2e       	mov	r9, r26
    7544:	3a 01       	movw	r6, r20
    7546:	69 1a       	sub	r6, r25
    7548:	71 08       	sbc	r7, r1
    754a:	2a 01       	movw	r4, r20
    754c:	46 1a       	sub	r4, r22
    754e:	57 0a       	sbc	r5, r23
    7550:	0b 2d       	mov	r16, r11
    7552:	10 e0       	ldi	r17, 0x00	; 0
    7554:	11 95       	neg	r17
    7556:	01 95       	neg	r16
    7558:	11 09       	sbc	r17, r1
    755a:	6f 3f       	cpi	r22, 0xFF	; 255
    755c:	8f ef       	ldi	r24, 0xFF	; 255
    755e:	78 07       	cpc	r23, r24
    7560:	29 f4       	brne	.+10     	; 0x756c <dtoa_prf+0x274>
    7562:	d6 01       	movw	r26, r12
    7564:	9c 92       	st	X, r9
    7566:	c6 01       	movw	r24, r12
    7568:	01 96       	adiw	r24, 0x01	; 1
    756a:	6c 01       	movw	r12, r24
    756c:	46 17       	cp	r20, r22
    756e:	57 07       	cpc	r21, r23
    7570:	84 f0       	brlt	.+32     	; 0x7592 <dtoa_prf+0x29a>
    7572:	66 16       	cp	r6, r22
    7574:	77 06       	cpc	r7, r23
    7576:	6c f4       	brge	.+26     	; 0x7592 <dtoa_prf+0x29a>
    7578:	7f 01       	movw	r14, r30
    757a:	e4 0c       	add	r14, r4
    757c:	f5 1c       	adc	r15, r5
    757e:	a1 e0       	ldi	r26, 0x01	; 1
    7580:	b0 e0       	ldi	r27, 0x00	; 0
    7582:	ac 0f       	add	r26, r28
    7584:	bd 1f       	adc	r27, r29
    7586:	ea 0e       	add	r14, r26
    7588:	fb 1e       	adc	r15, r27
    758a:	d7 01       	movw	r26, r14
    758c:	11 96       	adiw	r26, 0x01	; 1
    758e:	bc 90       	ld	r11, X
    7590:	02 c0       	rjmp	.+4      	; 0x7596 <dtoa_prf+0x29e>
    7592:	90 e3       	ldi	r25, 0x30	; 48
    7594:	b9 2e       	mov	r11, r25
    7596:	61 50       	subi	r22, 0x01	; 1
    7598:	71 09       	sbc	r23, r1
    759a:	31 96       	adiw	r30, 0x01	; 1
    759c:	c6 01       	movw	r24, r12
    759e:	01 96       	adiw	r24, 0x01	; 1
    75a0:	7c 01       	movw	r14, r24
    75a2:	60 17       	cp	r22, r16
    75a4:	71 07       	cpc	r23, r17
    75a6:	24 f0       	brlt	.+8      	; 0x75b0 <dtoa_prf+0x2b8>
    75a8:	d6 01       	movw	r26, r12
    75aa:	bc 92       	st	X, r11
    75ac:	6c 01       	movw	r12, r24
    75ae:	d5 cf       	rjmp	.-86     	; 0x755a <dtoa_prf+0x262>
    75b0:	64 17       	cp	r22, r20
    75b2:	75 07       	cpc	r23, r21
    75b4:	41 f4       	brne	.+16     	; 0x75c6 <dtoa_prf+0x2ce>
    75b6:	36 33       	cpi	r19, 0x36	; 54
    75b8:	20 f4       	brcc	.+8      	; 0x75c2 <dtoa_prf+0x2ca>
    75ba:	35 33       	cpi	r19, 0x35	; 53
    75bc:	21 f4       	brne	.+8      	; 0x75c6 <dtoa_prf+0x2ce>
    75be:	a1 10       	cpse	r10, r1
    75c0:	02 c0       	rjmp	.+4      	; 0x75c6 <dtoa_prf+0x2ce>
    75c2:	81 e3       	ldi	r24, 0x31	; 49
    75c4:	b8 2e       	mov	r11, r24
    75c6:	f6 01       	movw	r30, r12
    75c8:	b0 82       	st	Z, r11
    75ca:	f7 01       	movw	r30, r14
    75cc:	82 2f       	mov	r24, r18
    75ce:	90 e2       	ldi	r25, 0x20	; 32
    75d0:	88 23       	and	r24, r24
    75d2:	19 f0       	breq	.+6      	; 0x75da <dtoa_prf+0x2e2>
    75d4:	91 93       	st	Z+, r25
    75d6:	81 50       	subi	r24, 0x01	; 1
    75d8:	fb cf       	rjmp	.-10     	; 0x75d0 <dtoa_prf+0x2d8>
    75da:	f7 01       	movw	r30, r14
    75dc:	e2 0f       	add	r30, r18
    75de:	f1 1d       	adc	r31, r1
    75e0:	10 82       	st	Z, r1
    75e2:	80 e0       	ldi	r24, 0x00	; 0
    75e4:	90 e0       	ldi	r25, 0x00	; 0
    75e6:	29 96       	adiw	r28, 0x09	; 9
    75e8:	0f b6       	in	r0, 0x3f	; 63
    75ea:	f8 94       	cli
    75ec:	de bf       	out	0x3e, r29	; 62
    75ee:	0f be       	out	0x3f, r0	; 63
    75f0:	cd bf       	out	0x3d, r28	; 61
    75f2:	df 91       	pop	r29
    75f4:	cf 91       	pop	r28
    75f6:	1f 91       	pop	r17
    75f8:	0f 91       	pop	r16
    75fa:	ff 90       	pop	r15
    75fc:	ef 90       	pop	r14
    75fe:	df 90       	pop	r13
    7600:	cf 90       	pop	r12
    7602:	bf 90       	pop	r11
    7604:	af 90       	pop	r10
    7606:	9f 90       	pop	r9
    7608:	7f 90       	pop	r7
    760a:	6f 90       	pop	r6
    760c:	5f 90       	pop	r5
    760e:	4f 90       	pop	r4
    7610:	08 95       	ret

00007612 <__ftoa_engine>:
    7612:	28 30       	cpi	r18, 0x08	; 8
    7614:	08 f0       	brcs	.+2      	; 0x7618 <__ftoa_engine+0x6>
    7616:	27 e0       	ldi	r18, 0x07	; 7
    7618:	33 27       	eor	r19, r19
    761a:	da 01       	movw	r26, r20
    761c:	99 0f       	add	r25, r25
    761e:	31 1d       	adc	r19, r1
    7620:	87 fd       	sbrc	r24, 7
    7622:	91 60       	ori	r25, 0x01	; 1
    7624:	00 96       	adiw	r24, 0x00	; 0
    7626:	61 05       	cpc	r22, r1
    7628:	71 05       	cpc	r23, r1
    762a:	39 f4       	brne	.+14     	; 0x763a <__ftoa_engine+0x28>
    762c:	32 60       	ori	r19, 0x02	; 2
    762e:	2e 5f       	subi	r18, 0xFE	; 254
    7630:	3d 93       	st	X+, r19
    7632:	30 e3       	ldi	r19, 0x30	; 48
    7634:	2a 95       	dec	r18
    7636:	e1 f7       	brne	.-8      	; 0x7630 <__ftoa_engine+0x1e>
    7638:	08 95       	ret
    763a:	9f 3f       	cpi	r25, 0xFF	; 255
    763c:	30 f0       	brcs	.+12     	; 0x764a <__ftoa_engine+0x38>
    763e:	80 38       	cpi	r24, 0x80	; 128
    7640:	71 05       	cpc	r23, r1
    7642:	61 05       	cpc	r22, r1
    7644:	09 f0       	breq	.+2      	; 0x7648 <__ftoa_engine+0x36>
    7646:	3c 5f       	subi	r19, 0xFC	; 252
    7648:	3c 5f       	subi	r19, 0xFC	; 252
    764a:	3d 93       	st	X+, r19
    764c:	91 30       	cpi	r25, 0x01	; 1
    764e:	08 f0       	brcs	.+2      	; 0x7652 <__ftoa_engine+0x40>
    7650:	80 68       	ori	r24, 0x80	; 128
    7652:	91 1d       	adc	r25, r1
    7654:	df 93       	push	r29
    7656:	cf 93       	push	r28
    7658:	1f 93       	push	r17
    765a:	0f 93       	push	r16
    765c:	ff 92       	push	r15
    765e:	ef 92       	push	r14
    7660:	19 2f       	mov	r17, r25
    7662:	98 7f       	andi	r25, 0xF8	; 248
    7664:	96 95       	lsr	r25
    7666:	e9 2f       	mov	r30, r25
    7668:	96 95       	lsr	r25
    766a:	96 95       	lsr	r25
    766c:	e9 0f       	add	r30, r25
    766e:	ff 27       	eor	r31, r31
    7670:	e1 51       	subi	r30, 0x11	; 17
    7672:	fd 4f       	sbci	r31, 0xFD	; 253
    7674:	99 27       	eor	r25, r25
    7676:	33 27       	eor	r19, r19
    7678:	ee 24       	eor	r14, r14
    767a:	ff 24       	eor	r15, r15
    767c:	a7 01       	movw	r20, r14
    767e:	e7 01       	movw	r28, r14
    7680:	05 90       	lpm	r0, Z+
    7682:	08 94       	sec
    7684:	07 94       	ror	r0
    7686:	28 f4       	brcc	.+10     	; 0x7692 <__ftoa_engine+0x80>
    7688:	36 0f       	add	r19, r22
    768a:	e7 1e       	adc	r14, r23
    768c:	f8 1e       	adc	r15, r24
    768e:	49 1f       	adc	r20, r25
    7690:	51 1d       	adc	r21, r1
    7692:	66 0f       	add	r22, r22
    7694:	77 1f       	adc	r23, r23
    7696:	88 1f       	adc	r24, r24
    7698:	99 1f       	adc	r25, r25
    769a:	06 94       	lsr	r0
    769c:	a1 f7       	brne	.-24     	; 0x7686 <__ftoa_engine+0x74>
    769e:	05 90       	lpm	r0, Z+
    76a0:	07 94       	ror	r0
    76a2:	28 f4       	brcc	.+10     	; 0x76ae <__ftoa_engine+0x9c>
    76a4:	e7 0e       	add	r14, r23
    76a6:	f8 1e       	adc	r15, r24
    76a8:	49 1f       	adc	r20, r25
    76aa:	56 1f       	adc	r21, r22
    76ac:	c1 1d       	adc	r28, r1
    76ae:	77 0f       	add	r23, r23
    76b0:	88 1f       	adc	r24, r24
    76b2:	99 1f       	adc	r25, r25
    76b4:	66 1f       	adc	r22, r22
    76b6:	06 94       	lsr	r0
    76b8:	a1 f7       	brne	.-24     	; 0x76a2 <__ftoa_engine+0x90>
    76ba:	05 90       	lpm	r0, Z+
    76bc:	07 94       	ror	r0
    76be:	28 f4       	brcc	.+10     	; 0x76ca <__ftoa_engine+0xb8>
    76c0:	f8 0e       	add	r15, r24
    76c2:	49 1f       	adc	r20, r25
    76c4:	56 1f       	adc	r21, r22
    76c6:	c7 1f       	adc	r28, r23
    76c8:	d1 1d       	adc	r29, r1
    76ca:	88 0f       	add	r24, r24
    76cc:	99 1f       	adc	r25, r25
    76ce:	66 1f       	adc	r22, r22
    76d0:	77 1f       	adc	r23, r23
    76d2:	06 94       	lsr	r0
    76d4:	a1 f7       	brne	.-24     	; 0x76be <__ftoa_engine+0xac>
    76d6:	05 90       	lpm	r0, Z+
    76d8:	07 94       	ror	r0
    76da:	20 f4       	brcc	.+8      	; 0x76e4 <__ftoa_engine+0xd2>
    76dc:	49 0f       	add	r20, r25
    76de:	56 1f       	adc	r21, r22
    76e0:	c7 1f       	adc	r28, r23
    76e2:	d8 1f       	adc	r29, r24
    76e4:	99 0f       	add	r25, r25
    76e6:	66 1f       	adc	r22, r22
    76e8:	77 1f       	adc	r23, r23
    76ea:	88 1f       	adc	r24, r24
    76ec:	06 94       	lsr	r0
    76ee:	a9 f7       	brne	.-22     	; 0x76da <__ftoa_engine+0xc8>
    76f0:	84 91       	lpm	r24, Z
    76f2:	10 95       	com	r17
    76f4:	17 70       	andi	r17, 0x07	; 7
    76f6:	41 f0       	breq	.+16     	; 0x7708 <__ftoa_engine+0xf6>
    76f8:	d6 95       	lsr	r29
    76fa:	c7 95       	ror	r28
    76fc:	57 95       	ror	r21
    76fe:	47 95       	ror	r20
    7700:	f7 94       	ror	r15
    7702:	e7 94       	ror	r14
    7704:	1a 95       	dec	r17
    7706:	c1 f7       	brne	.-16     	; 0x76f8 <__ftoa_engine+0xe6>
    7708:	e5 e9       	ldi	r30, 0x95	; 149
    770a:	f2 e0       	ldi	r31, 0x02	; 2
    770c:	68 94       	set
    770e:	15 90       	lpm	r1, Z+
    7710:	15 91       	lpm	r17, Z+
    7712:	35 91       	lpm	r19, Z+
    7714:	65 91       	lpm	r22, Z+
    7716:	95 91       	lpm	r25, Z+
    7718:	05 90       	lpm	r0, Z+
    771a:	7f e2       	ldi	r23, 0x2F	; 47
    771c:	73 95       	inc	r23
    771e:	e1 18       	sub	r14, r1
    7720:	f1 0a       	sbc	r15, r17
    7722:	43 0b       	sbc	r20, r19
    7724:	56 0b       	sbc	r21, r22
    7726:	c9 0b       	sbc	r28, r25
    7728:	d0 09       	sbc	r29, r0
    772a:	c0 f7       	brcc	.-16     	; 0x771c <__ftoa_engine+0x10a>
    772c:	e1 0c       	add	r14, r1
    772e:	f1 1e       	adc	r15, r17
    7730:	43 1f       	adc	r20, r19
    7732:	56 1f       	adc	r21, r22
    7734:	c9 1f       	adc	r28, r25
    7736:	d0 1d       	adc	r29, r0
    7738:	7e f4       	brtc	.+30     	; 0x7758 <__ftoa_engine+0x146>
    773a:	70 33       	cpi	r23, 0x30	; 48
    773c:	11 f4       	brne	.+4      	; 0x7742 <__ftoa_engine+0x130>
    773e:	8a 95       	dec	r24
    7740:	e6 cf       	rjmp	.-52     	; 0x770e <__ftoa_engine+0xfc>
    7742:	e8 94       	clt
    7744:	01 50       	subi	r16, 0x01	; 1
    7746:	30 f0       	brcs	.+12     	; 0x7754 <__ftoa_engine+0x142>
    7748:	08 0f       	add	r16, r24
    774a:	0a f4       	brpl	.+2      	; 0x774e <__ftoa_engine+0x13c>
    774c:	00 27       	eor	r16, r16
    774e:	02 17       	cp	r16, r18
    7750:	08 f4       	brcc	.+2      	; 0x7754 <__ftoa_engine+0x142>
    7752:	20 2f       	mov	r18, r16
    7754:	23 95       	inc	r18
    7756:	02 2f       	mov	r16, r18
    7758:	7a 33       	cpi	r23, 0x3A	; 58
    775a:	28 f0       	brcs	.+10     	; 0x7766 <__ftoa_engine+0x154>
    775c:	79 e3       	ldi	r23, 0x39	; 57
    775e:	7d 93       	st	X+, r23
    7760:	2a 95       	dec	r18
    7762:	e9 f7       	brne	.-6      	; 0x775e <__ftoa_engine+0x14c>
    7764:	10 c0       	rjmp	.+32     	; 0x7786 <__ftoa_engine+0x174>
    7766:	7d 93       	st	X+, r23
    7768:	2a 95       	dec	r18
    776a:	89 f6       	brne	.-94     	; 0x770e <__ftoa_engine+0xfc>
    776c:	06 94       	lsr	r0
    776e:	97 95       	ror	r25
    7770:	67 95       	ror	r22
    7772:	37 95       	ror	r19
    7774:	17 95       	ror	r17
    7776:	17 94       	ror	r1
    7778:	e1 18       	sub	r14, r1
    777a:	f1 0a       	sbc	r15, r17
    777c:	43 0b       	sbc	r20, r19
    777e:	56 0b       	sbc	r21, r22
    7780:	c9 0b       	sbc	r28, r25
    7782:	d0 09       	sbc	r29, r0
    7784:	98 f0       	brcs	.+38     	; 0x77ac <__ftoa_engine+0x19a>
    7786:	23 95       	inc	r18
    7788:	7e 91       	ld	r23, -X
    778a:	73 95       	inc	r23
    778c:	7a 33       	cpi	r23, 0x3A	; 58
    778e:	08 f0       	brcs	.+2      	; 0x7792 <__ftoa_engine+0x180>
    7790:	70 e3       	ldi	r23, 0x30	; 48
    7792:	7c 93       	st	X, r23
    7794:	20 13       	cpse	r18, r16
    7796:	b8 f7       	brcc	.-18     	; 0x7786 <__ftoa_engine+0x174>
    7798:	7e 91       	ld	r23, -X
    779a:	70 61       	ori	r23, 0x10	; 16
    779c:	7d 93       	st	X+, r23
    779e:	30 f0       	brcs	.+12     	; 0x77ac <__ftoa_engine+0x19a>
    77a0:	83 95       	inc	r24
    77a2:	71 e3       	ldi	r23, 0x31	; 49
    77a4:	7d 93       	st	X+, r23
    77a6:	70 e3       	ldi	r23, 0x30	; 48
    77a8:	2a 95       	dec	r18
    77aa:	e1 f7       	brne	.-8      	; 0x77a4 <__ftoa_engine+0x192>
    77ac:	11 24       	eor	r1, r1
    77ae:	ef 90       	pop	r14
    77b0:	ff 90       	pop	r15
    77b2:	0f 91       	pop	r16
    77b4:	1f 91       	pop	r17
    77b6:	cf 91       	pop	r28
    77b8:	df 91       	pop	r29
    77ba:	99 27       	eor	r25, r25
    77bc:	87 fd       	sbrc	r24, 7
    77be:	90 95       	com	r25
    77c0:	08 95       	ret

000077c2 <__ctype_isfalse>:
    77c2:	99 27       	eor	r25, r25
    77c4:	88 27       	eor	r24, r24

000077c6 <__ctype_istrue>:
    77c6:	08 95       	ret

000077c8 <strrev>:
    77c8:	dc 01       	movw	r26, r24
    77ca:	fc 01       	movw	r30, r24
    77cc:	67 2f       	mov	r22, r23
    77ce:	71 91       	ld	r23, Z+
    77d0:	77 23       	and	r23, r23
    77d2:	e1 f7       	brne	.-8      	; 0x77cc <strrev+0x4>
    77d4:	32 97       	sbiw	r30, 0x02	; 2
    77d6:	04 c0       	rjmp	.+8      	; 0x77e0 <strrev+0x18>
    77d8:	7c 91       	ld	r23, X
    77da:	6d 93       	st	X+, r22
    77dc:	70 83       	st	Z, r23
    77de:	62 91       	ld	r22, -Z
    77e0:	ae 17       	cp	r26, r30
    77e2:	bf 07       	cpc	r27, r31
    77e4:	c8 f3       	brcs	.-14     	; 0x77d8 <strrev+0x10>
    77e6:	08 95       	ret

000077e8 <eeprom_read_byte>:
    77e8:	f9 99       	sbic	0x1f, 1	; 31
    77ea:	fe cf       	rjmp	.-4      	; 0x77e8 <eeprom_read_byte>
    77ec:	92 bd       	out	0x22, r25	; 34
    77ee:	81 bd       	out	0x21, r24	; 33
    77f0:	f8 9a       	sbi	0x1f, 0	; 31
    77f2:	99 27       	eor	r25, r25
    77f4:	80 b5       	in	r24, 0x20	; 32
    77f6:	08 95       	ret

000077f8 <eeprom_write_byte>:
    77f8:	26 2f       	mov	r18, r22

000077fa <eeprom_write_r18>:
    77fa:	f9 99       	sbic	0x1f, 1	; 31
    77fc:	fe cf       	rjmp	.-4      	; 0x77fa <eeprom_write_r18>
    77fe:	1f ba       	out	0x1f, r1	; 31
    7800:	92 bd       	out	0x22, r25	; 34
    7802:	81 bd       	out	0x21, r24	; 33
    7804:	20 bd       	out	0x20, r18	; 32
    7806:	0f b6       	in	r0, 0x3f	; 63
    7808:	f8 94       	cli
    780a:	fa 9a       	sbi	0x1f, 2	; 31
    780c:	f9 9a       	sbi	0x1f, 1	; 31
    780e:	0f be       	out	0x3f, r0	; 63
    7810:	01 96       	adiw	r24, 0x01	; 1
    7812:	08 95       	ret

00007814 <__do_global_dtors>:
    7814:	12 e0       	ldi	r17, 0x02	; 2
    7816:	c6 e6       	ldi	r28, 0x66	; 102
    7818:	d2 e0       	ldi	r29, 0x02	; 2
    781a:	03 c0       	rjmp	.+6      	; 0x7822 <__do_global_dtors+0xe>
    781c:	fe 01       	movw	r30, r28
    781e:	c2 d8       	rcall	.-3708   	; 0x69a4 <__tablejump2__>
    7820:	21 96       	adiw	r28, 0x01	; 1
    7822:	c8 36       	cpi	r28, 0x68	; 104
    7824:	d1 07       	cpc	r29, r17
    7826:	d1 f7       	brne	.-12     	; 0x781c <__do_global_dtors+0x8>
    7828:	f8 94       	cli

0000782a <__stop_program>:
    782a:	ff cf       	rjmp	.-2      	; 0x782a <__stop_program>
