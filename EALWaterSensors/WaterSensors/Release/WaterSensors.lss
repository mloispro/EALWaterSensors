
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  000067e0  00006894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000394  008001d8  008001d8  0000696c  2**0
                  ALLOC
  3 .eeprom       0000005e  00810000  00810000  0000696c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000069ca  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a28  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000010d8  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002a00c  00000000  00000000  00007b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000052d9  00000000  00000000  00031b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c111  00000000  00000000  00036e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000033b8  00000000  00000000  00042f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000136e6  00000000  00000000  000462f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009dd5  00000000  00000000  000599d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  000637ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00012b6c  00000000  00000000  000647e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c2       	rjmp	.+1218   	; 0x4c4 <__dtors_end>
       2:	00 00       	nop
       4:	87 c2       	rjmp	.+1294   	; 0x514 <__bad_interrupt>
       6:	00 00       	nop
       8:	85 c2       	rjmp	.+1290   	; 0x514 <__bad_interrupt>
       a:	00 00       	nop
       c:	0d c7       	rjmp	.+3610   	; 0xe28 <__vector_3>
       e:	00 00       	nop
      10:	0b c7       	rjmp	.+3606   	; 0xe28 <__vector_3>
      12:	00 00       	nop
      14:	09 c7       	rjmp	.+3602   	; 0xe28 <__vector_3>
      16:	00 00       	nop
      18:	7d c2       	rjmp	.+1274   	; 0x514 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c2       	rjmp	.+1270   	; 0x514 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c2       	rjmp	.+1266   	; 0x514 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c2       	rjmp	.+1262   	; 0x514 <__bad_interrupt>
      26:	00 00       	nop
      28:	75 c2       	rjmp	.+1258   	; 0x514 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c2       	rjmp	.+1254   	; 0x514 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c2       	rjmp	.+1250   	; 0x514 <__bad_interrupt>
      32:	00 00       	nop
      34:	6f c2       	rjmp	.+1246   	; 0x514 <__bad_interrupt>
      36:	00 00       	nop
      38:	6d c2       	rjmp	.+1242   	; 0x514 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c2       	rjmp	.+1238   	; 0x514 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 b6 27 	jmp	0x4f6c	; 0x4f6c <__vector_16>
      44:	67 c2       	rjmp	.+1230   	; 0x514 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__vector_18>
      4c:	0c 94 e5 25 	jmp	0x4bca	; 0x4bca <__vector_19>
      50:	61 c2       	rjmp	.+1218   	; 0x514 <__bad_interrupt>
      52:	00 00       	nop
      54:	5f c2       	rjmp	.+1214   	; 0x514 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c2       	rjmp	.+1210   	; 0x514 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c2       	rjmp	.+1206   	; 0x514 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c3       	rjmp	.+1658   	; 0x6dc <__vector_24>
      62:	00 00       	nop
      64:	57 c2       	rjmp	.+1198   	; 0x514 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b 04       	cpc	r9, r11
      6a:	9f 04       	cpc	r9, r15
      6c:	9f 04       	cpc	r9, r15
      6e:	9f 04       	cpc	r9, r15
      70:	9f 04       	cpc	r9, r15
      72:	9f 04       	cpc	r9, r15
      74:	9f 04       	cpc	r9, r15
      76:	9f 04       	cpc	r9, r15
      78:	9f 03       	fmulsu	r17, r23
      7a:	9f 04       	cpc	r9, r15
      7c:	9f 04       	cpc	r9, r15
      7e:	9f 04       	cpc	r9, r15
      80:	9f 04       	cpc	r9, r15
      82:	9f 04       	cpc	r9, r15
      84:	9f 04       	cpc	r9, r15
      86:	9f 04       	cpc	r9, r15
      88:	9f 03       	fmulsu	r17, r23
      8a:	9f 04       	cpc	r9, r15
      8c:	9f 04       	cpc	r9, r15
      8e:	9f 04       	cpc	r9, r15
      90:	9f 04       	cpc	r9, r15
      92:	9f 04       	cpc	r9, r15
      94:	9f 04       	cpc	r9, r15
      96:	9f 04       	cpc	r9, r15
      98:	a8 03       	fmulsu	r18, r16
      9a:	9f 04       	cpc	r9, r15
      9c:	9f 04       	cpc	r9, r15
      9e:	9f 04       	cpc	r9, r15
      a0:	9f 04       	cpc	r9, r15
      a2:	9f 04       	cpc	r9, r15
      a4:	9f 04       	cpc	r9, r15
      a6:	9f 04       	cpc	r9, r15
      a8:	d3 03       	fmuls	r21, r19
      aa:	9f 04       	cpc	r9, r15
      ac:	9f 04       	cpc	r9, r15
      ae:	9f 04       	cpc	r9, r15
      b0:	9f 04       	cpc	r9, r15
      b2:	9f 04       	cpc	r9, r15
      b4:	9f 04       	cpc	r9, r15
      b6:	9f 04       	cpc	r9, r15
      b8:	a8 03       	fmulsu	r18, r16
      ba:	9f 04       	cpc	r9, r15
      bc:	9f 04       	cpc	r9, r15
      be:	9f 04       	cpc	r9, r15
      c0:	9f 04       	cpc	r9, r15
      c2:	9f 04       	cpc	r9, r15
      c4:	9f 04       	cpc	r9, r15
      c6:	9f 04       	cpc	r9, r15
      c8:	d8 03       	fmulsu	r21, r16
      ca:	9f 04       	cpc	r9, r15
      cc:	9f 04       	cpc	r9, r15
      ce:	9f 04       	cpc	r9, r15
      d0:	9f 04       	cpc	r9, r15
      d2:	9f 04       	cpc	r9, r15
      d4:	9f 04       	cpc	r9, r15
      d6:	9f 04       	cpc	r9, r15
      d8:	dd 03       	fmulsu	r21, r21
      da:	9f 04       	cpc	r9, r15
      dc:	9f 04       	cpc	r9, r15
      de:	9f 04       	cpc	r9, r15
      e0:	9f 04       	cpc	r9, r15
      e2:	9f 04       	cpc	r9, r15
      e4:	9f 04       	cpc	r9, r15
      e6:	9f 04       	cpc	r9, r15
      e8:	f2 03       	fmuls	r23, r18
      ea:	9f 04       	cpc	r9, r15
      ec:	9f 04       	cpc	r9, r15
      ee:	9f 04       	cpc	r9, r15
      f0:	9f 04       	cpc	r9, r15
      f2:	9f 04       	cpc	r9, r15
      f4:	9f 04       	cpc	r9, r15
      f6:	9f 04       	cpc	r9, r15
      f8:	1f 04       	cpc	r1, r15
      fa:	9f 04       	cpc	r9, r15
      fc:	9f 04       	cpc	r9, r15
      fe:	9f 04       	cpc	r9, r15
     100:	9f 04       	cpc	r9, r15
     102:	9f 04       	cpc	r9, r15
     104:	9f 04       	cpc	r9, r15
     106:	9f 04       	cpc	r9, r15
     108:	e2 03       	fmuls	r22, r18
     10a:	9f 04       	cpc	r9, r15
     10c:	9f 04       	cpc	r9, r15
     10e:	9f 04       	cpc	r9, r15
     110:	9f 04       	cpc	r9, r15
     112:	9f 04       	cpc	r9, r15
     114:	9f 04       	cpc	r9, r15
     116:	9f 04       	cpc	r9, r15
     118:	fe 03       	fmulsu	r23, r22
     11a:	9f 04       	cpc	r9, r15
     11c:	9f 04       	cpc	r9, r15
     11e:	9f 04       	cpc	r9, r15
     120:	9f 04       	cpc	r9, r15
     122:	9f 04       	cpc	r9, r15
     124:	9f 04       	cpc	r9, r15
     126:	9f 04       	cpc	r9, r15
     128:	21 04       	cpc	r2, r1
     12a:	9f 04       	cpc	r9, r15
     12c:	9f 04       	cpc	r9, r15
     12e:	9f 04       	cpc	r9, r15
     130:	9f 04       	cpc	r9, r15
     132:	9f 04       	cpc	r9, r15
     134:	9f 04       	cpc	r9, r15
     136:	9f 04       	cpc	r9, r15
     138:	21 04       	cpc	r2, r1
     13a:	9f 04       	cpc	r9, r15
     13c:	9f 04       	cpc	r9, r15
     13e:	9f 04       	cpc	r9, r15
     140:	9f 04       	cpc	r9, r15
     142:	9f 04       	cpc	r9, r15
     144:	9f 04       	cpc	r9, r15
     146:	9f 04       	cpc	r9, r15
     148:	21 04       	cpc	r2, r1
     14a:	9f 04       	cpc	r9, r15
     14c:	9f 04       	cpc	r9, r15
     14e:	9f 04       	cpc	r9, r15
     150:	9f 04       	cpc	r9, r15
     152:	9f 04       	cpc	r9, r15
     154:	9f 04       	cpc	r9, r15
     156:	9f 04       	cpc	r9, r15
     158:	21 04       	cpc	r2, r1
     15a:	9f 04       	cpc	r9, r15
     15c:	9f 04       	cpc	r9, r15
     15e:	9f 04       	cpc	r9, r15
     160:	9f 04       	cpc	r9, r15
     162:	9f 04       	cpc	r9, r15
     164:	9f 04       	cpc	r9, r15
     166:	9f 04       	cpc	r9, r15
     168:	29 04       	cpc	r2, r9
     16a:	9f 04       	cpc	r9, r15
     16c:	9f 04       	cpc	r9, r15
     16e:	9f 04       	cpc	r9, r15
     170:	9f 04       	cpc	r9, r15
     172:	9f 04       	cpc	r9, r15
     174:	9f 04       	cpc	r9, r15
     176:	9f 04       	cpc	r9, r15
     178:	61 04       	cpc	r6, r1
     17a:	9f 04       	cpc	r9, r15
     17c:	9f 04       	cpc	r9, r15
     17e:	9f 04       	cpc	r9, r15
     180:	9f 04       	cpc	r9, r15
     182:	9f 04       	cpc	r9, r15
     184:	9f 04       	cpc	r9, r15
     186:	9f 04       	cpc	r9, r15
     188:	29 04       	cpc	r2, r9
     18a:	9f 04       	cpc	r9, r15
     18c:	9f 04       	cpc	r9, r15
     18e:	9f 04       	cpc	r9, r15
     190:	9f 04       	cpc	r9, r15
     192:	9f 04       	cpc	r9, r15
     194:	9f 04       	cpc	r9, r15
     196:	9f 04       	cpc	r9, r15
     198:	61 04       	cpc	r6, r1
     19a:	9f 04       	cpc	r9, r15
     19c:	9f 04       	cpc	r9, r15
     19e:	9f 04       	cpc	r9, r15
     1a0:	9f 04       	cpc	r9, r15
     1a2:	9f 04       	cpc	r9, r15
     1a4:	9f 04       	cpc	r9, r15
     1a6:	9f 04       	cpc	r9, r15
     1a8:	43 04       	cpc	r4, r3
     1aa:	9f 04       	cpc	r9, r15
     1ac:	9f 04       	cpc	r9, r15
     1ae:	9f 04       	cpc	r9, r15
     1b0:	9f 04       	cpc	r9, r15
     1b2:	9f 04       	cpc	r9, r15
     1b4:	9f 04       	cpc	r9, r15
     1b6:	9f 04       	cpc	r9, r15
     1b8:	64 04       	cpc	r6, r4
     1ba:	9f 04       	cpc	r9, r15
     1bc:	9f 04       	cpc	r9, r15
     1be:	9f 04       	cpc	r9, r15
     1c0:	9f 04       	cpc	r9, r15
     1c2:	9f 04       	cpc	r9, r15
     1c4:	9f 04       	cpc	r9, r15
     1c6:	9f 04       	cpc	r9, r15
     1c8:	64 04       	cpc	r6, r4
     1ca:	9f 04       	cpc	r9, r15
     1cc:	9f 04       	cpc	r9, r15
     1ce:	9f 04       	cpc	r9, r15
     1d0:	9f 04       	cpc	r9, r15
     1d2:	9f 04       	cpc	r9, r15
     1d4:	9f 04       	cpc	r9, r15
     1d6:	9f 04       	cpc	r9, r15
     1d8:	7a 04       	cpc	r7, r10
     1da:	9f 04       	cpc	r9, r15
     1dc:	9f 04       	cpc	r9, r15
     1de:	9f 04       	cpc	r9, r15
     1e0:	9f 04       	cpc	r9, r15
     1e2:	9f 04       	cpc	r9, r15
     1e4:	9f 04       	cpc	r9, r15
     1e6:	9f 04       	cpc	r9, r15
     1e8:	96 04       	cpc	r9, r6
     1ea:	9f 04       	cpc	r9, r15
     1ec:	9f 04       	cpc	r9, r15
     1ee:	9f 04       	cpc	r9, r15
     1f0:	9f 04       	cpc	r9, r15
     1f2:	9f 04       	cpc	r9, r15
     1f4:	9f 04       	cpc	r9, r15
     1f6:	9f 04       	cpc	r9, r15
     1f8:	96 04       	cpc	r9, r6
     1fa:	9f 04       	cpc	r9, r15
     1fc:	9f 04       	cpc	r9, r15
     1fe:	9f 04       	cpc	r9, r15
     200:	9f 04       	cpc	r9, r15
     202:	9f 04       	cpc	r9, r15
     204:	9f 04       	cpc	r9, r15
     206:	9f 04       	cpc	r9, r15
     208:	9f 04       	cpc	r9, r15
     20a:	9f 04       	cpc	r9, r15
     20c:	9f 04       	cpc	r9, r15
     20e:	9f 04       	cpc	r9, r15
     210:	9f 04       	cpc	r9, r15
     212:	9f 04       	cpc	r9, r15
     214:	9f 04       	cpc	r9, r15
     216:	9f 04       	cpc	r9, r15
     218:	9f 04       	cpc	r9, r15
     21a:	9f 04       	cpc	r9, r15
     21c:	9f 04       	cpc	r9, r15
     21e:	9f 04       	cpc	r9, r15
     220:	9f 04       	cpc	r9, r15
     222:	9f 04       	cpc	r9, r15
     224:	9f 04       	cpc	r9, r15
     226:	9f 04       	cpc	r9, r15
     228:	9f 04       	cpc	r9, r15
     22a:	9f 04       	cpc	r9, r15
     22c:	9f 04       	cpc	r9, r15
     22e:	9f 04       	cpc	r9, r15
     230:	9f 04       	cpc	r9, r15
     232:	9f 04       	cpc	r9, r15
     234:	9f 04       	cpc	r9, r15
     236:	9f 04       	cpc	r9, r15
     238:	9f 04       	cpc	r9, r15
     23a:	9f 04       	cpc	r9, r15
     23c:	9f 04       	cpc	r9, r15
     23e:	9f 04       	cpc	r9, r15
     240:	9f 04       	cpc	r9, r15
     242:	9f 04       	cpc	r9, r15
     244:	9f 04       	cpc	r9, r15
     246:	9f 04       	cpc	r9, r15
     248:	9f 04       	cpc	r9, r15
     24a:	9f 04       	cpc	r9, r15
     24c:	9f 04       	cpc	r9, r15
     24e:	9f 04       	cpc	r9, r15
     250:	9f 04       	cpc	r9, r15
     252:	9f 04       	cpc	r9, r15
     254:	9f 04       	cpc	r9, r15
     256:	9f 04       	cpc	r9, r15
     258:	9f 04       	cpc	r9, r15

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     29d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2ad:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2bd:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2cd:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2dd:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2ed:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2fd:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     30d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     31d:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     32d:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     33d:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     34d:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     35d:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     36d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     37d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     38d:	3d 27                                               ='

0000038f <_ZZN7LCDBase9ClearLineEsE3__c>:
     38f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000003a0 <_ZZN7MathExt16CalculateAverageEP6EEWrapIiEiE3__c>:
     3a0:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3b0:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3c0:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003ca <_ZZN8PHSensor10getPHValueEvE3__c>:
     3ca:	50 48 20 52 61 77 20 52 65 61 64 69 6e 67 3a 20     PH Raw Reading: 
	...

000003db <_ZZN9TDSSensor11getTDSValueEvE3__c>:
     3db:	54 44 53 20 52 61 77 20 52 65 61 64 69 6e 67 3a     TDS Raw Reading:
     3eb:	20 00                                                .

000003ed <_ZZN15WaterSensorWire5SetupEvE3__c>:
     3ed:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

000003f6 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     3f6:	63 6d 64 3a 20 00                                   cmd: .

000003fc <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     3fc:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

00000406 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     406:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     416:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     426:	76 65 64 3a 20 00                                   ved: .

0000042c <_ZZN15WaterSensorWire7RequestEvE3__c>:
     42c:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     43c:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

00000447 <_ZZN6Sketch11AsyncDoWorkEvE3__c>:
     447:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     457:	64 00                                               d.

00000459 <digital_pin_to_timer_PGM>:
     459:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     469:	00 00 00 00                                         ....

0000046d <digital_pin_to_bit_mask_PGM>:
     46d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     47d:	04 08 10 20                                         ... 

00000481 <digital_pin_to_port_PGM>:
     481:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     491:	03 03 03 03                                         ....

00000495 <port_to_input_PGM>:
     495:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000049f <port_to_output_PGM>:
     49f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004a9 <port_to_mode_PGM>:
     4a9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004b4 <__ctors_start>:
     4b4:	cc 06       	cpc	r12, r28
     4b6:	e7 0b       	sbc	r30, r23
     4b8:	0a 20       	and	r0, r10
     4ba:	c2 20       	and	r12, r2
     4bc:	62 22       	and	r6, r18
     4be:	13 26       	eor	r1, r19

000004c0 <__ctors_end>:
     4c0:	18 20       	and	r1, r8
     4c2:	d0 20       	and	r13, r0

000004c4 <__dtors_end>:
     4c4:	11 24       	eor	r1, r1
     4c6:	1f be       	out	0x3f, r1	; 63
     4c8:	cf ef       	ldi	r28, 0xFF	; 255
     4ca:	d8 e0       	ldi	r29, 0x08	; 8
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	cd bf       	out	0x3d, r28	; 61

000004d0 <__do_copy_data>:
     4d0:	11 e0       	ldi	r17, 0x01	; 1
     4d2:	a0 e0       	ldi	r26, 0x00	; 0
     4d4:	b1 e0       	ldi	r27, 0x01	; 1
     4d6:	e0 ee       	ldi	r30, 0xE0	; 224
     4d8:	f7 e6       	ldi	r31, 0x67	; 103
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__do_copy_data+0x10>
     4dc:	05 90       	lpm	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	a8 3d       	cpi	r26, 0xD8	; 216
     4e2:	b1 07       	cpc	r27, r17
     4e4:	d9 f7       	brne	.-10     	; 0x4dc <__do_copy_data+0xc>

000004e6 <__do_clear_bss>:
     4e6:	25 e0       	ldi	r18, 0x05	; 5
     4e8:	a8 ed       	ldi	r26, 0xD8	; 216
     4ea:	b1 e0       	ldi	r27, 0x01	; 1
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <.do_clear_bss_start>

000004ee <.do_clear_bss_loop>:
     4ee:	1d 92       	st	X+, r1

000004f0 <.do_clear_bss_start>:
     4f0:	ac 36       	cpi	r26, 0x6C	; 108
     4f2:	b2 07       	cpc	r27, r18
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <.do_clear_bss_loop>

000004f6 <__do_global_ctors>:
     4f6:	12 e0       	ldi	r17, 0x02	; 2
     4f8:	c0 e6       	ldi	r28, 0x60	; 96
     4fa:	d2 e0       	ldi	r29, 0x02	; 2
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__do_global_ctors+0x10>
     4fe:	21 97       	sbiw	r28, 0x01	; 1
     500:	fe 01       	movw	r30, r28
     502:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__tablejump2__>
     506:	ca 35       	cpi	r28, 0x5A	; 90
     508:	d1 07       	cpc	r29, r17
     50a:	c9 f7       	brne	.-14     	; 0x4fe <__do_global_ctors+0x8>
     50c:	0e 94 41 26 	call	0x4c82	; 0x4c82 <main>
     510:	0c 94 e4 33 	jmp	0x67c8	; 0x67c8 <__do_global_dtors>

00000514 <__bad_interrupt>:
     514:	75 cd       	rjmp	.-1302   	; 0x0 <__vectors>

00000516 <twi_init>:
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e1 e9       	ldi	r30, 0x91	; 145
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     522:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <twi_sendStop>
     52c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_inRepStart>
     530:	82 e1       	ldi	r24, 0x12	; 18
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
     538:	83 e1       	ldi	r24, 0x13	; 19
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
     540:	89 eb       	ldi	r24, 0xB9	; 185
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	29 eb       	ldi	r18, 0xB9	; 185
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	2e 7f       	andi	r18, 0xFE	; 254
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
     552:	89 eb       	ldi	r24, 0xB9	; 185
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	29 eb       	ldi	r18, 0xB9	; 185
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	2d 7f       	andi	r18, 0xFD	; 253
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	88 eb       	ldi	r24, 0xB8	; 184
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	28 e4       	ldi	r18, 0x48	; 72
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
     56e:	8c eb       	ldi	r24, 0xBC	; 188
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	25 e4       	ldi	r18, 0x45	; 69
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
     578:	e2 e0       	ldi	r30, 0x02	; 2
     57a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000057e <twi_setAddress>:
     57e:	a1 e0       	ldi	r26, 0x01	; 1
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	8a eb       	ldi	r24, 0xBA	; 186
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	22 0f       	add	r18, r18
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	21 96       	adiw	r28, 0x01	; 1
     59a:	e2 e0       	ldi	r30, 0x02	; 2
     59c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000005a0 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     5a0:	a4 e0       	ldi	r26, 0x04	; 4
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	e6 ed       	ldi	r30, 0xD6	; 214
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     5ac:	9b 83       	std	Y+3, r25	; 0x03
     5ae:	8a 83       	std	Y+2, r24	; 0x02
     5b0:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     5b2:	8c 81       	ldd	r24, Y+4	; 0x04
     5b4:	81 32       	cpi	r24, 0x21	; 33
     5b6:	10 f0       	brcs	.+4      	; 0x5bc <twi_transmit+0x1c>
    return 1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	23 c0       	rjmp	.+70     	; 0x602 <twi_transmit+0x62>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     5bc:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
     5c0:	84 30       	cpi	r24, 0x04	; 4
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <twi_transmit+0x28>
    return 2;
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	1d c0       	rjmp	.+58     	; 0x602 <twi_transmit+0x62>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     5c8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ca:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <twi_txBufferLength>
  for(i = 0; i < length; ++i){
     5ce:	19 82       	std	Y+1, r1	; 0x01
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <twi_transmit+0x58>
    twi_txBuffer[i] = data[i];
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	29 81       	ldd	r18, Y+1	; 0x01
     5da:	22 2f       	mov	r18, r18
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	4a 81       	ldd	r20, Y+2	; 0x02
     5e0:	5b 81       	ldd	r21, Y+3	; 0x03
     5e2:	24 0f       	add	r18, r20
     5e4:	35 1f       	adc	r19, r21
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	8e 5f       	subi	r24, 0xFE	; 254
     5ec:	9d 4f       	sbci	r25, 0xFD	; 253
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	8f 5f       	subi	r24, 0xFF	; 255
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	99 81       	ldd	r25, Y+1	; 0x01
     5fa:	8c 81       	ldd	r24, Y+4	; 0x04
     5fc:	98 17       	cp	r25, r24
     5fe:	48 f3       	brcs	.-46     	; 0x5d2 <twi_transmit+0x32>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     600:	80 e0       	ldi	r24, 0x00	; 0
}
     602:	24 96       	adiw	r28, 0x04	; 4
     604:	e2 e0       	ldi	r30, 0x02	; 2
     606:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000060a <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
     60a:	a2 e0       	ldi	r26, 0x02	; 2
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	eb e0       	ldi	r30, 0x0B	; 11
     610:	f3 e0       	ldi	r31, 0x03	; 3
     612:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <twi_onSlaveReceive+0x1>
     622:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <twi_onSlaveReceive>
}
     626:	22 96       	adiw	r28, 0x02	; 2
     628:	e2 e0       	ldi	r30, 0x02	; 2
     62a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000062e <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
     62e:	a2 e0       	ldi	r26, 0x02	; 2
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ed e1       	ldi	r30, 0x1D	; 29
     634:	f3 e0       	ldi	r31, 0x03	; 3
     636:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <twi_onSlaveTransmit+0x1>
     646:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_onSlaveTransmit>
}
     64a:	22 96       	adiw	r28, 0x02	; 2
     64c:	e2 e0       	ldi	r30, 0x02	; 2
     64e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000652 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
     652:	a1 e0       	ldi	r26, 0x01	; 1
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	ef e2       	ldi	r30, 0x2F	; 47
     658:	f3 e0       	ldi	r31, 0x03	; 3
     65a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     65e:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	88 23       	and	r24, r24
     664:	31 f0       	breq	.+12     	; 0x672 <twi_reply+0x20>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     666:	8c eb       	ldi	r24, 0xBC	; 188
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	25 ec       	ldi	r18, 0xC5	; 197
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
     670:	05 c0       	rjmp	.+10     	; 0x67c <twi_reply+0x2a>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     672:	8c eb       	ldi	r24, 0xBC	; 188
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	25 e8       	ldi	r18, 0x85	; 133
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
  }
}
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	e2 e0       	ldi	r30, 0x02	; 2
     680:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000684 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e8 e4       	ldi	r30, 0x48	; 72
     68a:	f3 e0       	ldi	r31, 0x03	; 3
     68c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     690:	8c eb       	ldi	r24, 0xBC	; 188
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	25 ed       	ldi	r18, 0xD5	; 213
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     69a:	01 c0       	rjmp	.+2      	; 0x69e <twi_stop+0x1a>
    continue;
     69c:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     69e:	8c eb       	ldi	r24, 0xBC	; 188
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	80 71       	andi	r24, 0x10	; 16
     6ac:	99 27       	eor	r25, r25
     6ae:	89 2b       	or	r24, r25
     6b0:	a9 f7       	brne	.-22     	; 0x69c <twi_stop+0x18>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     6b2:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
}
     6b6:	e2 e0       	ldi	r30, 0x02	; 2
     6b8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000006bc <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	e4 e6       	ldi	r30, 0x64	; 100
     6c2:	f3 e0       	ldi	r31, 0x03	; 3
     6c4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     6c8:	8c eb       	ldi	r24, 0xBC	; 188
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	25 ec       	ldi	r18, 0xC5	; 197
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
     6d2:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
}
     6d6:	e2 e0       	ldi	r30, 0x02	; 2
     6d8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000006dc <__vector_24>:

ISR(TWI_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
     708:	89 eb       	ldi	r24, 0xB9	; 185
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	88 7f       	andi	r24, 0xF8	; 248
     716:	99 27       	eor	r25, r25
     718:	09 2e       	mov	r0, r25
     71a:	00 0c       	add	r0, r0
     71c:	aa 0b       	sbc	r26, r26
     71e:	bb 0b       	sbc	r27, r27
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	28 ef       	ldi	r18, 0xF8	; 248
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	84 1b       	sub	r24, r20
     72a:	95 0b       	sbc	r25, r21
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	08 f4       	brcc	.+2      	; 0x734 <__vector_24+0x58>
     732:	05 c1       	rjmp	.+522    	; 0x93e <__stack+0x3f>
     734:	8c 5c       	subi	r24, 0xCC	; 204
     736:	9f 4f       	sbci	r25, 0xFF	; 255
     738:	fc 01       	movw	r30, r24
     73a:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     73e:	8b eb       	ldi	r24, 0xBB	; 187
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <twi_slarw>
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
      twi_reply(1);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	82 df       	rcall	.-252    	; 0x652 <twi_reply>
      break;
     74e:	f7 c0       	rjmp	.+494    	; 0x93e <__stack+0x3f>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     750:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <twi_masterBufferIndex>
     754:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_masterBufferLength>
     758:	98 17       	cp	r25, r24
     75a:	98 f4       	brcc	.+38     	; 0x782 <__vector_24+0xa6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     75c:	8b eb       	ldi	r24, 0xBB	; 187
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <twi_masterBufferIndex>
     764:	31 e0       	ldi	r19, 0x01	; 1
     766:	32 0f       	add	r19, r18
     768:	30 93 00 02 	sts	0x0200, r19	; 0x800200 <twi_masterBufferIndex>
     76c:	22 2f       	mov	r18, r18
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	20 52       	subi	r18, 0x20	; 32
     772:	3e 4f       	sbci	r19, 0xFE	; 254
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
        twi_reply(1);
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	69 df       	rcall	.-302    	; 0x652 <twi_reply>
     780:	11 c0       	rjmp	.+34     	; 0x7a4 <__vector_24+0xc8>
      }else{
	if (twi_sendStop)
     782:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_sendStop>
     786:	88 23       	and	r24, r24
     788:	11 f0       	breq	.+4      	; 0x78e <__vector_24+0xb2>
          twi_stop();
     78a:	7c df       	rcall	.-264    	; 0x684 <twi_stop>
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <__vector_24+0xc8>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     794:	8c eb       	ldi	r24, 0xBC	; 188
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 ea       	ldi	r18, 0xA4	; 164
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     79e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
	}
      }
      break;
     7a2:	cd c0       	rjmp	.+410    	; 0x93e <__stack+0x3f>
     7a4:	cc c0       	rjmp	.+408    	; 0x93e <__stack+0x3f>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     7a6:	80 e2       	ldi	r24, 0x20	; 32
     7a8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_error>
      twi_stop();
     7ac:	6b df       	rcall	.-298    	; 0x684 <twi_stop>
      break;
     7ae:	c7 c0       	rjmp	.+398    	; 0x93e <__stack+0x3f>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     7b0:	80 e3       	ldi	r24, 0x30	; 48
     7b2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_error>
      twi_stop();
     7b6:	66 df       	rcall	.-308    	; 0x684 <twi_stop>
      break;
     7b8:	c2 c0       	rjmp	.+388    	; 0x93e <__stack+0x3f>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     7ba:	88 e3       	ldi	r24, 0x38	; 56
     7bc:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_error>
      twi_releaseBus();
     7c0:	7d df       	rcall	.-262    	; 0x6bc <twi_releaseBus>
      break;
     7c2:	bd c0       	rjmp	.+378    	; 0x93e <__stack+0x3f>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7c4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <twi_masterBufferIndex>
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	98 0f       	add	r25, r24
     7cc:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <twi_masterBufferIndex>
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2b eb       	ldi	r18, 0xBB	; 187
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	80 52       	subi	r24, 0x20	; 32
     7de:	9e 4f       	sbci	r25, 0xFE	; 254
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7e4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <twi_masterBufferIndex>
     7e8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_masterBufferLength>
     7ec:	98 17       	cp	r25, r24
     7ee:	18 f4       	brcc	.+6      	; 0x7f6 <__vector_24+0x11a>
        twi_reply(1);
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	2f df       	rcall	.-418    	; 0x652 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     7f4:	a4 c0       	rjmp	.+328    	; 0x93e <__stack+0x3f>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	2c df       	rcall	.-424    	; 0x652 <twi_reply>
      }
      break;
     7fa:	a1 c0       	rjmp	.+322    	; 0x93e <__stack+0x3f>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7fc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <twi_masterBufferIndex>
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	98 0f       	add	r25, r24
     804:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <twi_masterBufferIndex>
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2b eb       	ldi	r18, 0xBB	; 187
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	80 52       	subi	r24, 0x20	; 32
     816:	9e 4f       	sbci	r25, 0xFE	; 254
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	if (twi_sendStop)
     81c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_sendStop>
     820:	88 23       	and	r24, r24
     822:	11 f0       	breq	.+4      	; 0x828 <__vector_24+0x14c>
          twi_stop();
     824:	2f df       	rcall	.-418    	; 0x684 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
     826:	8b c0       	rjmp	.+278    	; 0x93e <__stack+0x3f>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     82e:	8c eb       	ldi	r24, 0xBC	; 188
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	24 ea       	ldi	r18, 0xA4	; 164
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     838:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
	}    
	break;
     83c:	80 c0       	rjmp	.+256    	; 0x93e <__stack+0x3f>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     83e:	22 df       	rcall	.-444    	; 0x684 <twi_stop>
      break;
     840:	7e c0       	rjmp	.+252    	; 0x93e <__stack+0x3f>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     848:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <twi_rxBufferIndex>
      twi_reply(1);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	01 df       	rcall	.-510    	; 0x652 <twi_reply>
      break;
     850:	76 c0       	rjmp	.+236    	; 0x93e <__stack+0x3f>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     852:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_rxBufferIndex>
     856:	80 32       	cpi	r24, 0x20	; 32
     858:	98 f4       	brcc	.+38     	; 0x880 <__vector_24+0x1a4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     85a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_rxBufferIndex>
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	98 0f       	add	r25, r24
     862:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <twi_rxBufferIndex>
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	2b eb       	ldi	r18, 0xBB	; 187
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	8c 5d       	subi	r24, 0xDC	; 220
     874:	9d 4f       	sbci	r25, 0xFD	; 253
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
        twi_reply(1);
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	ea de       	rcall	.-556    	; 0x652 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
     87e:	5f c0       	rjmp	.+190    	; 0x93e <__stack+0x3f>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	e7 de       	rcall	.-562    	; 0x652 <twi_reply>
      }
      break;
     884:	5c c0       	rjmp	.+184    	; 0x93e <__stack+0x3f>
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     886:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_rxBufferIndex>
     88a:	80 32       	cpi	r24, 0x20	; 32
     88c:	40 f4       	brcc	.+16     	; 0x89e <__vector_24+0x1c2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     88e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_rxBufferIndex>
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	8c 5d       	subi	r24, 0xDC	; 220
     898:	9d 4f       	sbci	r25, 0xFD	; 253
     89a:	fc 01       	movw	r30, r24
     89c:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     89e:	f2 de       	rcall	.-540    	; 0x684 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     8a0:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <twi_onSlaveReceive>
     8a4:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <twi_onSlaveReceive+0x1>
     8a8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_rxBufferIndex>
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	bc 01       	movw	r22, r24
     8b2:	84 e2       	ldi	r24, 0x24	; 36
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	f9 01       	movw	r30, r18
     8b8:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     8ba:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     8be:	fe de       	rcall	.-516    	; 0x6bc <twi_releaseBus>
      break;
     8c0:	3e c0       	rjmp	.+124    	; 0x93e <__stack+0x3f>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	c6 de       	rcall	.-628    	; 0x652 <twi_reply>
      break;
     8c6:	3b c0       	rjmp	.+118    	; 0x93e <__stack+0x3f>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     8ce:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     8d2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     8d6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_onSlaveTransmit>
     8da:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <twi_onSlaveTransmit+0x1>
     8de:	fc 01       	movw	r30, r24
     8e0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     8e2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <twi_txBufferLength>
     8e6:	88 23       	and	r24, r24
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <__vector_24+0x218>
        twi_txBufferLength = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     8f0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     8f4:	8b eb       	ldi	r24, 0xBB	; 187
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <twi_txBufferIndex>
     8fc:	31 e0       	ldi	r19, 0x01	; 1
     8fe:	32 0f       	add	r19, r18
     900:	30 93 22 02 	sts	0x0222, r19	; 0x800222 <twi_txBufferIndex>
     904:	22 2f       	mov	r18, r18
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	2e 5f       	subi	r18, 0xFE	; 254
     90a:	3d 4f       	sbci	r19, 0xFD	; 253
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     914:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <twi_txBufferIndex>
     918:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <twi_txBufferLength>
     91c:	98 17       	cp	r25, r24
     91e:	18 f4       	brcc	.+6      	; 0x926 <__stack+0x27>
        twi_reply(1);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	97 de       	rcall	.-722    	; 0x652 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     924:	0c c0       	rjmp	.+24     	; 0x93e <__stack+0x3f>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	94 de       	rcall	.-728    	; 0x652 <twi_reply>
      }
      break;
     92a:	09 c0       	rjmp	.+18     	; 0x93e <__stack+0x3f>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	91 de       	rcall	.-734    	; 0x652 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     930:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
      break;
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0x3f>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     936:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_error>
      twi_stop();
     93a:	a4 de       	rcall	.-696    	; 0x684 <twi_stop>
      break;
     93c:	00 00       	nop
  }
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	7f 91       	pop	r23
     950:	6f 91       	pop	r22
     952:	5f 91       	pop	r21
     954:	4f 91       	pop	r20
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     966:	a4 e0       	ldi	r26, 0x04	; 4
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	7c 83       	std	Y+4, r23	; 0x04
     978:	6b 83       	std	Y+3, r22	; 0x03
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	2b 81       	ldd	r18, Y+3	; 0x03
     980:	3c 81       	ldd	r19, Y+4	; 0x04
     982:	fc 01       	movw	r30, r24
     984:	33 83       	std	Z+3, r19	; 0x03
     986:	22 83       	std	Z+2, r18	; 0x02
     988:	24 96       	adiw	r28, 0x04	; 4
     98a:	e2 e0       	ldi	r30, 0x02	; 2
     98c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000990 <_ZN5PrintC1Ev>:
     990:	a2 e0       	ldi	r26, 0x02	; 2
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	ee ec       	ldi	r30, 0xCE	; 206
     996:	f4 e0       	ldi	r31, 0x04	; 4
     998:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	24 ed       	ldi	r18, 0xD4	; 212
     9a6:	31 e0       	ldi	r19, 0x01	; 1
     9a8:	fc 01       	movw	r30, r24
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	20 83       	st	Z, r18
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	fc 01       	movw	r30, r24
     9b4:	13 82       	std	Z+3, r1	; 0x03
     9b6:	12 82       	std	Z+2, r1	; 0x02
     9b8:	22 96       	adiw	r28, 0x02	; 2
     9ba:	e2 e0       	ldi	r30, 0x02	; 2
     9bc:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000009c0 <_ZN6StreamC1Ev>:
     9c0:	a2 e0       	ldi	r26, 0x02	; 2
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e6 ee       	ldi	r30, 0xE6	; 230
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	dd df       	rcall	.-70     	; 0x990 <_ZN5PrintC1Ev>
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	25 e7       	ldi	r18, 0x75	; 117
     9dc:	31 e0       	ldi	r19, 0x01	; 1
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	29 81       	ldd	r18, Y+1	; 0x01
     9e6:	3a 81       	ldd	r19, Y+2	; 0x02
     9e8:	88 ee       	ldi	r24, 0xE8	; 232
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	a0 e0       	ldi	r26, 0x00	; 0
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	84 83       	std	Z+4, r24	; 0x04
     9f4:	95 83       	std	Z+5, r25	; 0x05
     9f6:	a6 83       	std	Z+6, r26	; 0x06
     9f8:	b7 83       	std	Z+7, r27	; 0x07
     9fa:	22 96       	adiw	r28, 0x02	; 2
     9fc:	e2 e0       	ldi	r30, 0x02	; 2
     9fe:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000a02 <_ZN7TwoWireC1Ev>:
     a02:	a2 e0       	ldi	r26, 0x02	; 2
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	d4 df       	rcall	.-88     	; 0x9c0 <_ZN6StreamC1Ev>
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	25 e6       	ldi	r18, 0x65	; 101
     a1e:	31 e0       	ldi	r19, 0x01	; 1
     a20:	fc 01       	movw	r30, r24
     a22:	31 83       	std	Z+1, r19	; 0x01
     a24:	20 83       	st	Z, r18
     a26:	22 96       	adiw	r28, 0x02	; 2
     a28:	e2 e0       	ldi	r30, 0x02	; 2
     a2a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000a2e <_ZN7TwoWire5beginEv>:
     a2e:	a2 e0       	ldi	r26, 0x02	; 2
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	ed e1       	ldi	r30, 0x1D	; 29
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     a3a:	9a 83       	std	Y+2, r25	; 0x02
     a3c:	89 83       	std	Y+1, r24	; 0x01
     a3e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a42:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     a46:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     a4a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     a4e:	63 dd       	rcall	.-1338   	; 0x516 <twi_init>
     a50:	22 96       	adiw	r28, 0x02	; 2
     a52:	e2 e0       	ldi	r30, 0x02	; 2
     a54:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000a58 <_ZN7TwoWire5beginEh>:
     a58:	a3 e0       	ldi	r26, 0x03	; 3
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e2 e3       	ldi	r30, 0x32	; 50
     a5e:	f5 e0       	ldi	r31, 0x05	; 5
     a60:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	6b 83       	std	Y+3, r22	; 0x03
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	88 dd       	rcall	.-1264   	; 0x57e <twi_setAddress>
     a6e:	81 e7       	ldi	r24, 0x71	; 113
     a70:	96 e0       	ldi	r25, 0x06	; 6
     a72:	dd dd       	rcall	.-1094   	; 0x62e <twi_attachSlaveTxEvent>
     a74:	8b e2       	ldi	r24, 0x2B	; 43
     a76:	96 e0       	ldi	r25, 0x06	; 6
     a78:	c8 dd       	rcall	.-1136   	; 0x60a <twi_attachSlaveRxEvent>
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	d7 df       	rcall	.-82     	; 0xa2e <_ZN7TwoWire5beginEv>
     a80:	23 96       	adiw	r28, 0x03	; 3
     a82:	e2 e0       	ldi	r30, 0x02	; 2
     a84:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000a88 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a88:	a3 e0       	ldi	r26, 0x03	; 3
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	ea e4       	ldi	r30, 0x4A	; 74
     a8e:	f5 e0       	ldi	r31, 0x05	; 5
     a90:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     a9a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     a9e:	88 23       	and	r24, r24
     aa0:	f9 f0       	breq	.+62     	; 0xae0 <_ZN7TwoWire5writeEh+0x58>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     aa2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     aa6:	80 32       	cpi	r24, 0x20	; 32
     aa8:	40 f0       	brcs	.+16     	; 0xaba <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	59 df       	rcall	.-334    	; 0x966 <_ZN5Print13setWriteErrorEi>
      return 0;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	19 c0       	rjmp	.+50     	; 0xaec <_ZN7TwoWire5writeEh+0x64>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     aba:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	2b 81       	ldd	r18, Y+3	; 0x03
     ac4:	88 59       	subi	r24, 0x98	; 152
     ac6:	9d 4f       	sbci	r25, 0xFD	; 253
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
    ++txBufferIndex;
     acc:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     ad6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     ada:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <_ZN7TwoWire5writeEh+0x60>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     ae0:	ce 01       	movw	r24, r28
     ae2:	03 96       	adiw	r24, 0x03	; 3
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	5c dd       	rcall	.-1352   	; 0x5a0 <twi_transmit>
  }
  return 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
}
     aec:	23 96       	adiw	r28, 0x03	; 3
     aee:	e2 e0       	ldi	r30, 0x02	; 2
     af0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000af4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     af4:	a8 e0       	ldi	r26, 0x08	; 8
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e0 e8       	ldi	r30, 0x80	; 128
     afa:	f5 e0       	ldi	r31, 0x05	; 5
     afc:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	7e 83       	std	Y+6, r23	; 0x06
     b06:	6d 83       	std	Y+5, r22	; 0x05
     b08:	58 87       	std	Y+8, r21	; 0x08
     b0a:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     b0c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     b10:	88 23       	and	r24, r24
     b12:	29 f1       	breq	.+74     	; 0xb5e <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b14:	1a 82       	std	Y+2, r1	; 0x02
     b16:	19 82       	std	Y+1, r1	; 0x01
     b18:	1a c0       	rjmp	.+52     	; 0xb4e <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	9c 81       	ldd	r25, Y+4	; 0x04
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	fc 01       	movw	r30, r24
     b26:	20 81       	ld	r18, Z
     b28:	31 81       	ldd	r19, Z+1	; 0x01
     b2a:	4d 81       	ldd	r20, Y+5	; 0x05
     b2c:	5e 81       	ldd	r21, Y+6	; 0x06
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	84 0f       	add	r24, r20
     b34:	95 1f       	adc	r25, r21
     b36:	fc 01       	movw	r30, r24
     b38:	40 81       	ld	r20, Z
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	64 2f       	mov	r22, r20
     b40:	f9 01       	movw	r30, r18
     b42:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	29 81       	ldd	r18, Y+1	; 0x01
     b50:	3a 81       	ldd	r19, Y+2	; 0x02
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	98 85       	ldd	r25, Y+8	; 0x08
     b56:	28 17       	cp	r18, r24
     b58:	39 07       	cpc	r19, r25
     b5a:	f8 f2       	brcs	.-66     	; 0xb1a <_ZN7TwoWire5writeEPKhj+0x26>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     b5e:	2f 81       	ldd	r18, Y+7	; 0x07
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	62 2f       	mov	r22, r18
     b66:	1c dd       	rcall	.-1480   	; 0x5a0 <twi_transmit>
  }
  return quantity;
     b68:	8f 81       	ldd	r24, Y+7	; 0x07
     b6a:	98 85       	ldd	r25, Y+8	; 0x08
}
     b6c:	28 96       	adiw	r28, 0x08	; 8
     b6e:	e2 e0       	ldi	r30, 0x02	; 2
     b70:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000b74 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     b74:	a2 e0       	ldi	r26, 0x02	; 2
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e0 ec       	ldi	r30, 0xC0	; 192
     b7a:	f5 e0       	ldi	r31, 0x05	; 5
     b7c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     b84:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a9 01       	movw	r20, r18
     b96:	48 1b       	sub	r20, r24
     b98:	59 0b       	sbc	r21, r25
     b9a:	ca 01       	movw	r24, r20
}
     b9c:	22 96       	adiw	r28, 0x02	; 2
     b9e:	e2 e0       	ldi	r30, 0x02	; 2
     ba0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000ba4 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     ba4:	a4 e0       	ldi	r26, 0x04	; 4
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e8 ed       	ldi	r30, 0xD8	; 216
     baa:	f5 e0       	ldi	r31, 0x05	; 5
     bac:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	9a 83       	std	Y+2, r25	; 0x02
     bba:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     bbc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     bc0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     bc4:	98 17       	cp	r25, r24
     bc6:	88 f4       	brcc	.+34     	; 0xbea <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     bc8:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	8a 5b       	subi	r24, 0xBA	; 186
     bd2:	9d 4f       	sbci	r25, 0xFD	; 253
     bd4:	fc 01       	movw	r30, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     be0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bee:	24 96       	adiw	r28, 0x04	; 4
     bf0:	e2 e0       	ldi	r30, 0x02	; 2
     bf2:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000bf6 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     bf6:	a4 e0       	ldi	r26, 0x04	; 4
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e1 e0       	ldi	r30, 0x01	; 1
     bfc:	f6 e0       	ldi	r31, 0x06	; 6
     bfe:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	9f ef       	ldi	r25, 0xFF	; 255
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     c0e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     c12:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     c16:	98 17       	cp	r25, r24
     c18:	60 f4       	brcc	.+24     	; 0xc32 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     c1a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	8a 5b       	subi	r24, 0xBA	; 186
     c24:	9d 4f       	sbci	r25, 0xFD	; 253
     c26:	fc 01       	movw	r30, r24
     c28:	80 81       	ld	r24, Z
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c36:	24 96       	adiw	r28, 0x04	; 4
     c38:	e2 e0       	ldi	r30, 0x02	; 2
     c3a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000c3e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     c3e:	a2 e0       	ldi	r26, 0x02	; 2
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     c4e:	22 96       	adiw	r28, 0x02	; 2
     c50:	e2 e0       	ldi	r30, 0x02	; 2
     c52:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000c56 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     c56:	a5 e0       	ldi	r26, 0x05	; 5
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     c62:	9b 83       	std	Y+3, r25	; 0x03
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	7d 83       	std	Y+5, r23	; 0x05
     c68:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     c6a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     c6e:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     c72:	89 2b       	or	r24, r25
     c74:	09 f4       	brne	.+2      	; 0xc78 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     c76:	31 c0       	rjmp	.+98     	; 0xcda <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     c78:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     c7c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     c80:	98 17       	cp	r25, r24
     c82:	08 f4       	brcc	.+2      	; 0xc86 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     c84:	2a c0       	rjmp	.+84     	; 0xcda <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     c86:	19 82       	std	Y+1, r1	; 0x01
     c88:	13 c0       	rjmp	.+38     	; 0xcb0 <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	29 81       	ldd	r18, Y+1	; 0x01
     c92:	22 2f       	mov	r18, r18
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	24 0f       	add	r18, r20
     c9c:	35 1f       	adc	r19, r21
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	8a 5b       	subi	r24, 0xBA	; 186
     ca4:	9d 4f       	sbci	r25, 0xFD	; 253
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	28 17       	cp	r18, r24
     cbc:	39 07       	cpc	r19, r25
     cbe:	2c f3       	brlt	.-54     	; 0xc8a <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     cc0:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     cca:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     cce:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	f9 01       	movw	r30, r18
     cd8:	09 95       	icall
}
     cda:	25 96       	adiw	r28, 0x05	; 5
     cdc:	e2 e0       	ldi	r30, 0x02	; 2
     cde:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000ce2 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     ce2:	a0 e0       	ldi	r26, 0x00	; 0
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e7       	ldi	r30, 0x77	; 119
     ce8:	f6 e0       	ldi	r31, 0x06	; 6
     cea:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     cee:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     cf2:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     cf6:	89 2b       	or	r24, r25
     cf8:	09 f4       	brne	.+2      	; 0xcfc <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     cfc:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     d00:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     d04:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     d08:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     d0c:	fc 01       	movw	r30, r24
     d0e:	09 95       	icall
}
     d10:	e2 e0       	ldi	r30, 0x02	; 2
     d12:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000d16 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     d16:	a4 e0       	ldi	r26, 0x04	; 4
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e9       	ldi	r30, 0x91	; 145
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	7c 83       	std	Y+4, r23	; 0x04
     d28:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     d32:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
}
     d36:	24 96       	adiw	r28, 0x04	; 4
     d38:	e2 e0       	ldi	r30, 0x02	; 2
     d3a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000d3e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     d3e:	a4 e0       	ldi	r26, 0x04	; 4
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 ea       	ldi	r30, 0xA5	; 165
     d44:	f6 e0       	ldi	r31, 0x06	; 6
     d46:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	7c 83       	std	Y+4, r23	; 0x04
     d50:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     d5a:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN7TwoWire14user_onRequestE>
}
     d5e:	24 96       	adiw	r28, 0x04	; 4
     d60:	e2 e0       	ldi	r30, 0x02	; 2
     d62:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000d66 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     d66:	a4 e0       	ldi	r26, 0x04	; 4
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e9 eb       	ldi	r30, 0xB9	; 185
     d6c:	f6 e0       	ldi	r31, 0x06	; 6
     d6e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	7c 83       	std	Y+4, r23	; 0x04
     d78:	6b 83       	std	Y+3, r22	; 0x03
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	39 f4       	brne	.+14     	; 0xd90 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	19 f4       	brne	.+6      	; 0xd90 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d8a:	8f e8       	ldi	r24, 0x8F	; 143
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	39 de       	rcall	.-910    	; 0xa02 <_ZN7TwoWireC1Ev>
     d90:	24 96       	adiw	r28, 0x04	; 4
     d92:	e2 e0       	ldi	r30, 0x02	; 2
     d94:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000d98 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     da4:	6f ef       	ldi	r22, 0xFF	; 255
     da6:	7f ef       	ldi	r23, 0xFF	; 255
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	dc df       	rcall	.-72     	; 0xd66 <_Z41__static_initialization_and_destruction_0ii>
     dae:	e2 e0       	ldi	r30, 0x02	; 2
     db0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000db4 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     db4:	a2 e0       	ldi	r26, 0x02	; 2
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e0 ee       	ldi	r30, 0xE0	; 224
     dba:	f6 e0       	ldi	r31, 0x06	; 6
     dbc:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	6a 83       	std	Y+2, r22	; 0x02
     dc4:	22 96       	adiw	r28, 0x02	; 2
     dc6:	e2 e0       	ldi	r30, 0x02	; 2
     dc8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000dcc <_ZN14SoftwareSerial10tunedDelayEj>:
     dcc:	a4 e0       	ldi	r26, 0x04	; 4
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ec ee       	ldi	r30, 0xEC	; 236
     dd2:	f6 e0       	ldi	r31, 0x06	; 6
     dd4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	24 96       	adiw	r28, 0x04	; 4
     df2:	e2 e0       	ldi	r30, 0x02	; 2
     df4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000df8 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     df8:	a2 e0       	ldi	r26, 0x02	; 2
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e2 e0       	ldi	r30, 0x02	; 2
     dfe:	f7 e0       	ldi	r31, 0x07	; 7
     e00:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	fc 01       	movw	r30, r24
     e0e:	86 85       	ldd	r24, Z+14	; 0x0e
     e10:	97 85       	ldd	r25, Z+15	; 0x0f
     e12:	fc 01       	movw	r30, r24
     e14:	20 81       	ld	r18, Z
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	85 85       	ldd	r24, Z+13	; 0x0d
     e1e:	82 23       	and	r24, r18
}
     e20:	22 96       	adiw	r28, 0x02	; 2
     e22:	e2 e0       	ldi	r30, 0x02	; 2
     e24:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00000e28 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2b 97       	sbiw	r28, 0x0b	; 11
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     e5a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     e5e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     e62:	89 2b       	or	r24, r25
     e64:	09 f4       	brne	.+2      	; 0xe68 <__vector_3+0x40>
     e66:	f4 c0       	rjmp	.+488    	; 0x1050 <__vector_3+0x228>
  {
    active_object->recv();
     e68:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     e6c:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     e74:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	fc 01       	movw	r30, r24
     e7c:	86 8d       	ldd	r24, Z+30	; 0x1e
     e7e:	82 70       	andi	r24, 0x02	; 2
     e80:	88 23       	and	r24, r24
     e82:	49 f0       	breq	.+18     	; 0xe96 <__vector_3+0x6e>
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	b7 df       	rcall	.-146    	; 0xdf8 <_ZN14SoftwareSerial11rx_pin_readEv>
     e8a:	98 2f       	mov	r25, r24
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	99 23       	and	r25, r25
     e90:	51 f4       	brne	.+20     	; 0xea6 <__vector_3+0x7e>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <__vector_3+0x7e>
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	ae df       	rcall	.-164    	; 0xdf8 <_ZN14SoftwareSerial11rx_pin_readEv>
     e9c:	98 2f       	mov	r25, r24
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	99 23       	and	r25, r25
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__vector_3+0x7e>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <__vector_3+0x84>
     eaa:	d2 c0       	rjmp	.+420    	; 0x1050 <__vector_3+0x228>
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	9d 83       	std	Y+5, r25	; 0x05
     eb2:	8c 83       	std	Y+4, r24	; 0x04
     eb4:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	88 23       	and	r24, r24
     eba:	a1 f0       	breq	.+40     	; 0xee4 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	fc 01       	movw	r30, r24
     ec2:	83 89       	ldd	r24, Z+19	; 0x13
     ec4:	94 89       	ldd	r25, Z+20	; 0x14
     ec6:	2c 81       	ldd	r18, Y+4	; 0x04
     ec8:	3d 81       	ldd	r19, Y+5	; 0x05
     eca:	f9 01       	movw	r30, r18
     ecc:	23 89       	ldd	r18, Z+19	; 0x13
     ece:	34 89       	ldd	r19, Z+20	; 0x14
     ed0:	f9 01       	movw	r30, r18
     ed2:	40 81       	ld	r20, Z
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	f9 01       	movw	r30, r18
     eda:	25 89       	ldd	r18, Z+21	; 0x15
     edc:	24 2b       	or	r18, r20
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
     ee2:	15 c0       	rjmp	.+42     	; 0xf0e <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	9d 81       	ldd	r25, Y+5	; 0x05
     ee8:	fc 01       	movw	r30, r24
     eea:	83 89       	ldd	r24, Z+19	; 0x13
     eec:	94 89       	ldd	r25, Z+20	; 0x14
     eee:	2c 81       	ldd	r18, Y+4	; 0x04
     ef0:	3d 81       	ldd	r19, Y+5	; 0x05
     ef2:	f9 01       	movw	r30, r18
     ef4:	23 89       	ldd	r18, Z+19	; 0x13
     ef6:	34 89       	ldd	r19, Z+20	; 0x14
     ef8:	f9 01       	movw	r30, r18
     efa:	20 81       	ld	r18, Z
     efc:	42 2f       	mov	r20, r18
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	f9 01       	movw	r30, r18
     f04:	25 89       	ldd	r18, Z+21	; 0x15
     f06:	20 95       	com	r18
     f08:	24 23       	and	r18, r20
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	fc 01       	movw	r30, r24
     f14:	86 89       	ldd	r24, Z+22	; 0x16
     f16:	97 89       	ldd	r25, Z+23	; 0x17
     f18:	59 df       	rcall	.-334    	; 0xdcc <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	8d e0       	ldi	r24, 0x0D	; 13
     f1e:	4a df       	rcall	.-364    	; 0xdb4 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	8f 83       	std	Y+7, r24	; 0x07
     f24:	1f c0       	rjmp	.+62     	; 0xf64 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	80 8d       	ldd	r24, Z+24	; 0x18
     f2e:	91 8d       	ldd	r25, Z+25	; 0x19
     f30:	4d df       	rcall	.-358    	; 0xdcc <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	95 95       	asr	r25
     f3a:	87 95       	ror	r24
     f3c:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	8d e0       	ldi	r24, 0x0D	; 13
     f42:	38 df       	rcall	.-400    	; 0xdb4 <_Z10DebugPulsehh>
      if (rx_pin_read())
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	57 df       	rcall	.-338    	; 0xdf8 <_ZN14SoftwareSerial11rx_pin_readEv>
     f4a:	98 2f       	mov	r25, r24
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	99 23       	and	r25, r25
     f50:	09 f4       	brne	.+2      	; 0xf54 <__vector_3+0x12c>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	88 23       	and	r24, r24
     f56:	19 f0       	breq	.+6      	; 0xf5e <__vector_3+0x136>
        d |= 0x80;
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	80 68       	ori	r24, 0x80	; 128
     f5c:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f5e:	8f 81       	ldd	r24, Y+7	; 0x07
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	8f 83       	std	Y+7, r24	; 0x07
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	88 23       	and	r24, r24
     f68:	f1 f6       	brne	.-68     	; 0xf26 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	fc 01       	movw	r30, r24
     f70:	86 8d       	ldd	r24, Z+30	; 0x1e
     f72:	82 70       	andi	r24, 0x02	; 2
     f74:	88 23       	and	r24, r24
     f76:	19 f0       	breq	.+6      	; 0xf7e <__vector_3+0x156>
      d = ~d;
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	80 95       	com	r24
     f7c:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     f7e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	8f 73       	andi	r24, 0x3F	; 63
     f8a:	90 78       	andi	r25, 0x80	; 128
     f8c:	99 23       	and	r25, r25
     f8e:	24 f4       	brge	.+8      	; 0xf98 <__vector_3+0x170>
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	80 6c       	ori	r24, 0xC0	; 192
     f94:	9f 6f       	ori	r25, 0xFF	; 255
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     f9a:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <_ZN14SoftwareSerial20_receive_buffer_headE>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	28 85       	ldd	r18, Y+8	; 0x08
     fa2:	29 17       	cp	r18, r25
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <__vector_3+0x180>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	69 f0       	breq	.+26     	; 0xfc6 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     fac:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	83 56       	subi	r24, 0x63	; 99
     fb6:	9d 4f       	sbci	r25, 0xFD	; 253
     fb8:	2b 81       	ldd	r18, Y+3	; 0x03
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     fbe:	88 85       	ldd	r24, Y+8	; 0x08
     fc0:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fc4:	0a c0       	rjmp	.+20     	; 0xfda <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	8b e0       	ldi	r24, 0x0B	; 11
     fca:	f4 de       	rcall	.-536    	; 0xdb4 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	fc 01       	movw	r30, r24
     fd2:	26 8d       	ldd	r18, Z+30	; 0x1e
     fd4:	21 60       	ori	r18, 0x01	; 1
     fd6:	fc 01       	movw	r30, r24
     fd8:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	fc 01       	movw	r30, r24
     fe0:	82 8d       	ldd	r24, Z+26	; 0x1a
     fe2:	93 8d       	ldd	r25, Z+27	; 0x1b
     fe4:	f3 de       	rcall	.-538    	; 0xdcc <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	8b e0       	ldi	r24, 0x0B	; 11
     fea:	e4 de       	rcall	.-568    	; 0xdb4 <_Z10DebugPulsehh>
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	9a 87       	std	Y+10, r25	; 0x0a
     ff2:	89 87       	std	Y+9, r24	; 0x09
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
     ffa:	88 23       	and	r24, r24
     ffc:	a1 f0       	breq	.+40     	; 0x1026 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	9a 85       	ldd	r25, Y+10	; 0x0a
    1002:	fc 01       	movw	r30, r24
    1004:	83 89       	ldd	r24, Z+19	; 0x13
    1006:	94 89       	ldd	r25, Z+20	; 0x14
    1008:	29 85       	ldd	r18, Y+9	; 0x09
    100a:	3a 85       	ldd	r19, Y+10	; 0x0a
    100c:	f9 01       	movw	r30, r18
    100e:	23 89       	ldd	r18, Z+19	; 0x13
    1010:	34 89       	ldd	r19, Z+20	; 0x14
    1012:	f9 01       	movw	r30, r18
    1014:	40 81       	ld	r20, Z
    1016:	29 85       	ldd	r18, Y+9	; 0x09
    1018:	3a 85       	ldd	r19, Y+10	; 0x0a
    101a:	f9 01       	movw	r30, r18
    101c:	25 89       	ldd	r18, Z+21	; 0x15
    101e:	24 2b       	or	r18, r20
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
    1024:	15 c0       	rjmp	.+42     	; 0x1050 <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	fc 01       	movw	r30, r24
    102c:	83 89       	ldd	r24, Z+19	; 0x13
    102e:	94 89       	ldd	r25, Z+20	; 0x14
    1030:	29 85       	ldd	r18, Y+9	; 0x09
    1032:	3a 85       	ldd	r19, Y+10	; 0x0a
    1034:	f9 01       	movw	r30, r18
    1036:	23 89       	ldd	r18, Z+19	; 0x13
    1038:	34 89       	ldd	r19, Z+20	; 0x14
    103a:	f9 01       	movw	r30, r18
    103c:	20 81       	ld	r18, Z
    103e:	42 2f       	mov	r20, r18
    1040:	29 85       	ldd	r18, Y+9	; 0x09
    1042:	3a 85       	ldd	r19, Y+10	; 0x0a
    1044:	f9 01       	movw	r30, r18
    1046:	25 89       	ldd	r18, Z+21	; 0x15
    1048:	20 95       	com	r18
    104a:	24 23       	and	r18, r20
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1050:	2b 96       	adiw	r28, 0x0b	; 11
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1084:	8f 92       	push	r8
    1086:	af 92       	push	r10
    1088:	cf 92       	push	r12
    108a:	ef 92       	push	r14
    108c:	0f 93       	push	r16
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	28 97       	sbiw	r28, 0x08	; 8
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6b 83       	std	Y+3, r22	; 0x03
    10a8:	4c 83       	std	Y+4, r20	; 0x04
    10aa:	2d 83       	std	Y+5, r18	; 0x05
    10ac:	0e 83       	std	Y+6, r16	; 0x06
    10ae:	ef 82       	std	Y+7, r14	; 0x07
    10b0:	c8 86       	std	Y+8, r12	; 0x08
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	6c dc       	rcall	.-1832   	; 0x990 <_ZN5PrintC1Ev>
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	25 e8       	ldi	r18, 0x85	; 133
    10be:	31 e0       	ldi	r19, 0x01	; 1
    10c0:	fc 01       	movw	r30, r24
    10c2:	31 83       	std	Z+1, r19	; 0x01
    10c4:	20 83       	st	Z, r18
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	1f 92       	push	r1
    10cc:	1f 92       	push	r1
    10ce:	1f 92       	push	r1
    10d0:	1f 92       	push	r1
    10d2:	88 84       	ldd	r8, Y+8	; 0x08
    10d4:	af 80       	ldd	r10, Y+7	; 0x07
    10d6:	ce 80       	ldd	r12, Y+6	; 0x06
    10d8:	ed 80       	ldd	r14, Y+5	; 0x05
    10da:	0c 81       	ldd	r16, Y+4	; 0x04
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	4b 81       	ldd	r20, Y+3	; 0x03
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	12 d0       	rcall	.+36     	; 0x1108 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	28 96       	adiw	r28, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	0f 91       	pop	r16
    10fe:	ef 90       	pop	r14
    1100:	cf 90       	pop	r12
    1102:	af 90       	pop	r10
    1104:	8f 90       	pop	r8
    1106:	08 95       	ret

00001108 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    1108:	8f 92       	push	r8
    110a:	af 92       	push	r10
    110c:	cf 92       	push	r12
    110e:	ef 92       	push	r14
    1110:	0f 93       	push	r16
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	2a 97       	sbiw	r28, 0x0a	; 10
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6b 83       	std	Y+3, r22	; 0x03
    112c:	4c 83       	std	Y+4, r20	; 0x04
    112e:	2d 83       	std	Y+5, r18	; 0x05
    1130:	0e 83       	std	Y+6, r16	; 0x06
    1132:	ef 82       	std	Y+7, r14	; 0x07
    1134:	c8 86       	std	Y+8, r12	; 0x08
    1136:	a9 86       	std	Y+9, r10	; 0x09
    1138:	8a 86       	std	Y+10, r8	; 0x0a
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	fc 01       	movw	r30, r24
    1142:	24 83       	std	Z+4, r18	; 0x04
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	fc 01       	movw	r30, r24
    114c:	25 83       	std	Z+5, r18	; 0x05
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	2e 81       	ldd	r18, Y+6	; 0x06
    1154:	fc 01       	movw	r30, r24
    1156:	26 83       	std	Z+6, r18	; 0x06
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	2f 81       	ldd	r18, Y+7	; 0x07
    115e:	fc 01       	movw	r30, r24
    1160:	27 83       	std	Z+7, r18	; 0x07
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	28 85       	ldd	r18, Y+8	; 0x08
    1168:	fc 01       	movw	r30, r24
    116a:	20 87       	std	Z+8, r18	; 0x08
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	29 85       	ldd	r18, Y+9	; 0x09
    1172:	fc 01       	movw	r30, r24
    1174:	21 87       	std	Z+9, r18	; 0x09
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	2a 85       	ldd	r18, Y+10	; 0x0a
    117c:	fc 01       	movw	r30, r24
    117e:	22 87       	std	Z+10, r18	; 0x0a
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	2c 89       	ldd	r18, Y+20	; 0x14
    1186:	fc 01       	movw	r30, r24
    1188:	23 87       	std	Z+11, r18	; 0x0b
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	2d 89       	ldd	r18, Y+21	; 0x15
    1190:	fc 01       	movw	r30, r24
    1192:	24 87       	std	Z+12, r18	; 0x0c
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	2e 89       	ldd	r18, Y+22	; 0x16
    119a:	fc 01       	movw	r30, r24
    119c:	25 87       	std	Z+13, r18	; 0x0d
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	2f 89       	ldd	r18, Y+23	; 0x17
    11a4:	fc 01       	movw	r30, r24
    11a6:	26 87       	std	Z+14, r18	; 0x0e
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	fc 01       	movw	r30, r24
    11ae:	84 81       	ldd	r24, Z+4	; 0x04
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	fc 01       	movw	r30, r24
    11bc:	85 81       	ldd	r24, Z+5	; 0x05
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	fc 01       	movw	r30, r24
    11c8:	85 81       	ldd	r24, Z+5	; 0x05
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	fc 01       	movw	r30, r24
    11d6:	86 81       	ldd	r24, Z+6	; 0x06
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 23       	and	r24, r24
    11e2:	29 f0       	breq	.+10     	; 0x11ee <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	fc 01       	movw	r30, r24
    11ea:	17 86       	std	Z+15, r1	; 0x0f
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	20 e1       	ldi	r18, 0x10	; 16
    11f4:	fc 01       	movw	r30, r24
    11f6:	27 87       	std	Z+15, r18	; 0x0f
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	60 e1       	ldi	r22, 0x10	; 16
    1202:	0e d0       	rcall	.+28     	; 0x1220 <_ZN13LiquidCrystal5beginEhhh>
    1204:	2a 96       	adiw	r28, 0x0a	; 10
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	0f 91       	pop	r16
    1216:	ef 90       	pop	r14
    1218:	cf 90       	pop	r12
    121a:	af 90       	pop	r10
    121c:	8f 90       	pop	r8
    121e:	08 95       	ret

00001220 <_ZN13LiquidCrystal5beginEhhh>:
    1220:	a5 e0       	ldi	r26, 0x05	; 5
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e6 e1       	ldi	r30, 0x16	; 22
    1226:	f9 e0       	ldi	r31, 0x09	; 9
    1228:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6b 83       	std	Y+3, r22	; 0x03
    1232:	4c 83       	std	Y+4, r20	; 0x04
    1234:	2d 83       	std	Y+5, r18	; 0x05
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	50 f0       	brcs	.+20     	; 0x1250 <_ZN13LiquidCrystal5beginEhhh+0x30>
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	fc 01       	movw	r30, r24
    1242:	87 85       	ldd	r24, Z+15	; 0x0f
    1244:	28 2f       	mov	r18, r24
    1246:	28 60       	ori	r18, 0x08	; 8
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	27 87       	std	Z+15, r18	; 0x0f
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	fc 01       	movw	r30, r24
    1258:	23 8b       	std	Z+19, r18	; 0x13
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	ac 01       	movw	r20, r24
    1262:	40 5c       	subi	r20, 0xC0	; 192
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	8a 01       	movw	r16, r20
    1272:	40 e4       	ldi	r20, 0x40	; 64
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	a4 d0       	rcall	.+328    	; 0x13c4 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	88 23       	and	r24, r24
    1280:	69 f0       	breq	.+26     	; 0x129c <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	51 f4       	brne	.+20     	; 0x129c <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	87 85       	ldd	r24, Z+15	; 0x0f
    1290:	28 2f       	mov	r18, r24
    1292:	24 60       	ori	r18, 0x04	; 4
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	27 87       	std	Z+15, r18	; 0x0f
    129c:	80 e5       	ldi	r24, 0x50	; 80
    129e:	93 ec       	ldi	r25, 0xC3	; 195
    12a0:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	fc 01       	movw	r30, r24
    12aa:	84 81       	ldd	r24, Z+4	; 0x04
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	fc 01       	movw	r30, r24
    12b8:	86 81       	ldd	r24, Z+6	; 0x06
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	fc 01       	movw	r30, r24
    12c6:	85 81       	ldd	r24, Z+5	; 0x05
    12c8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ca:	39 f0       	breq	.+14     	; 0x12da <_ZN13LiquidCrystal5beginEhhh+0xba>
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	fc 01       	movw	r30, r24
    12d2:	85 81       	ldd	r24, Z+5	; 0x05
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	fc 01       	movw	r30, r24
    12e0:	87 85       	ldd	r24, Z+15	; 0x0f
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	80 71       	andi	r24, 0x10	; 16
    12e8:	99 27       	eor	r25, r25
    12ea:	89 2b       	or	r24, r25
    12ec:	e9 f4       	brne	.+58     	; 0x1328 <_ZN13LiquidCrystal5beginEhhh+0x108>
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	91 d1       	rcall	.+802    	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
    12f6:	84 e9       	ldi	r24, 0x94	; 148
    12f8:	91 e1       	ldi	r25, 0x11	; 17
    12fa:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	89 d1       	rcall	.+786    	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
    1306:	84 e9       	ldi	r24, 0x94	; 148
    1308:	91 e1       	ldi	r25, 0x11	; 17
    130a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	81 d1       	rcall	.+770    	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
    1316:	86 e9       	ldi	r24, 0x96	; 150
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	62 e0       	ldi	r22, 0x02	; 2
    1324:	79 d1       	rcall	.+754    	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
    1326:	26 c0       	rjmp	.+76     	; 0x1374 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	fc 01       	movw	r30, r24
    132e:	87 85       	ldd	r24, Z+15	; 0x0f
    1330:	28 2f       	mov	r18, r24
    1332:	20 62       	ori	r18, 0x20	; 32
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	62 2f       	mov	r22, r18
    133a:	d6 d0       	rcall	.+428    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    133c:	84 e9       	ldi	r24, 0x94	; 148
    133e:	91 e1       	ldi	r25, 0x11	; 17
    1340:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	fc 01       	movw	r30, r24
    134a:	87 85       	ldd	r24, Z+15	; 0x0f
    134c:	28 2f       	mov	r18, r24
    134e:	20 62       	ori	r18, 0x20	; 32
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	62 2f       	mov	r22, r18
    1356:	c8 d0       	rcall	.+400    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    1358:	86 e9       	ldi	r24, 0x96	; 150
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	fc 01       	movw	r30, r24
    1366:	87 85       	ldd	r24, Z+15	; 0x0f
    1368:	28 2f       	mov	r18, r24
    136a:	20 62       	ori	r18, 0x20	; 32
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	62 2f       	mov	r22, r18
    1372:	ba d0       	rcall	.+372    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	fc 01       	movw	r30, r24
    137a:	87 85       	ldd	r24, Z+15	; 0x0f
    137c:	28 2f       	mov	r18, r24
    137e:	20 62       	ori	r18, 0x20	; 32
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	62 2f       	mov	r22, r18
    1386:	b0 d0       	rcall	.+352    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	24 e0       	ldi	r18, 0x04	; 4
    138e:	fc 01       	movw	r30, r24
    1390:	20 8b       	std	Z+16, r18	; 0x10
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	88 d0       	rcall	.+272    	; 0x14a8 <_ZN13LiquidCrystal7displayEv>
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	3b d0       	rcall	.+118    	; 0x1414 <_ZN13LiquidCrystal5clearEv>
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	22 e0       	ldi	r18, 0x02	; 2
    13a4:	fc 01       	movw	r30, r24
    13a6:	21 8b       	std	Z+17, r18	; 0x11
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	fc 01       	movw	r30, r24
    13ae:	81 89       	ldd	r24, Z+17	; 0x11
    13b0:	28 2f       	mov	r18, r24
    13b2:	24 60       	ori	r18, 0x04	; 4
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	62 2f       	mov	r22, r18
    13ba:	96 d0       	rcall	.+300    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    13bc:	25 96       	adiw	r28, 0x05	; 5
    13be:	e4 e0       	ldi	r30, 0x04	; 4
    13c0:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

000013c4 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    13c4:	aa e0       	ldi	r26, 0x0A	; 10
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 ee       	ldi	r30, 0xE8	; 232
    13ca:	f9 e0       	ldi	r31, 0x09	; 9
    13cc:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	7c 83       	std	Y+4, r23	; 0x04
    13d6:	6b 83       	std	Y+3, r22	; 0x03
    13d8:	5e 83       	std	Y+6, r21	; 0x06
    13da:	4d 83       	std	Y+5, r20	; 0x05
    13dc:	38 87       	std	Y+8, r19	; 0x08
    13de:	2f 83       	std	Y+7, r18	; 0x07
    13e0:	1a 87       	std	Y+10, r17	; 0x0a
    13e2:	09 87       	std	Y+9, r16	; 0x09
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	fc 01       	movw	r30, r24
    13ec:	24 8b       	std	Z+20, r18	; 0x14
    13ee:	2d 81       	ldd	r18, Y+5	; 0x05
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	fc 01       	movw	r30, r24
    13f6:	25 8b       	std	Z+21, r18	; 0x15
    13f8:	2f 81       	ldd	r18, Y+7	; 0x07
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	fc 01       	movw	r30, r24
    1400:	26 8b       	std	Z+22, r18	; 0x16
    1402:	29 85       	ldd	r18, Y+9	; 0x09
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	fc 01       	movw	r30, r24
    140a:	27 8b       	std	Z+23, r18	; 0x17
    140c:	2a 96       	adiw	r28, 0x0a	; 10
    140e:	e4 e0       	ldi	r30, 0x04	; 4
    1410:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00001414 <_ZN13LiquidCrystal5clearEv>:
    1414:	a2 e0       	ldi	r26, 0x02	; 2
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e0 e1       	ldi	r30, 0x10	; 16
    141a:	fa e0       	ldi	r31, 0x0A	; 10
    141c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	5e d0       	rcall	.+188    	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    142c:	80 ed       	ldi	r24, 0xD0	; 208
    142e:	97 e0       	ldi	r25, 0x07	; 7
    1430:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
    1434:	22 96       	adiw	r28, 0x02	; 2
    1436:	e2 e0       	ldi	r30, 0x02	; 2
    1438:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000143c <_ZN13LiquidCrystal9setCursorEhh>:
    143c:	a6 e0       	ldi	r26, 0x06	; 6
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e2       	ldi	r30, 0x24	; 36
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	6d 83       	std	Y+5, r22	; 0x05
    144e:	4e 83       	std	Y+6, r20	; 0x06
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	8e 81       	ldd	r24, Y+6	; 0x06
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	10 f0       	brcs	.+4      	; 0x1462 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	8e 83       	std	Y+6, r24	; 0x06
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	fc 01       	movw	r30, r24
    1468:	93 89       	ldd	r25, Z+19	; 0x13
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	89 17       	cp	r24, r25
    146e:	30 f0       	brcs	.+12     	; 0x147c <_ZN13LiquidCrystal9setCursorEhh+0x40>
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	fc 01       	movw	r30, r24
    1476:	83 89       	ldd	r24, Z+19	; 0x13
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	8e 83       	std	Y+6, r24	; 0x06
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	82 0f       	add	r24, r18
    1488:	93 1f       	adc	r25, r19
    148a:	44 96       	adiw	r24, 0x14	; 20
    148c:	fc 01       	movw	r30, r24
    148e:	90 81       	ld	r25, Z
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	89 0f       	add	r24, r25
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	28 2f       	mov	r18, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	62 2f       	mov	r22, r18
    149e:	24 d0       	rcall	.+72     	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    14a0:	26 96       	adiw	r28, 0x06	; 6
    14a2:	e2 e0       	ldi	r30, 0x02	; 2
    14a4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000014a8 <_ZN13LiquidCrystal7displayEv>:
    14a8:	a2 e0       	ldi	r26, 0x02	; 2
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ea e5       	ldi	r30, 0x5A	; 90
    14ae:	fa e0       	ldi	r31, 0x0A	; 10
    14b0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	fc 01       	movw	r30, r24
    14be:	80 89       	ldd	r24, Z+16	; 0x10
    14c0:	28 2f       	mov	r18, r24
    14c2:	24 60       	ori	r18, 0x04	; 4
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 8b       	std	Z+16, r18	; 0x10
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	fc 01       	movw	r30, r24
    14d2:	80 89       	ldd	r24, Z+16	; 0x10
    14d4:	28 2f       	mov	r18, r24
    14d6:	28 60       	ori	r18, 0x08	; 8
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	62 2f       	mov	r22, r18
    14de:	04 d0       	rcall	.+8      	; 0x14e8 <_ZN13LiquidCrystal7commandEh>
    14e0:	22 96       	adiw	r28, 0x02	; 2
    14e2:	e2 e0       	ldi	r30, 0x02	; 2
    14e4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000014e8 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    14e8:	a3 e0       	ldi	r26, 0x03	; 3
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e7       	ldi	r30, 0x7A	; 122
    14ee:	fa e0       	ldi	r31, 0x0A	; 10
    14f0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	6b 81       	ldd	r22, Y+3	; 0x03
    1502:	18 d0       	rcall	.+48     	; 0x1534 <_ZN13LiquidCrystal4sendEhh>
}
    1504:	23 96       	adiw	r28, 0x03	; 3
    1506:	e2 e0       	ldi	r30, 0x02	; 2
    1508:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000150c <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    150c:	a3 e0       	ldi	r26, 0x03	; 3
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ec e8       	ldi	r30, 0x8C	; 140
    1512:	fa e0       	ldi	r31, 0x0A	; 10
    1514:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	6b 81       	ldd	r22, Y+3	; 0x03
    1526:	06 d0       	rcall	.+12     	; 0x1534 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
}
    152c:	23 96       	adiw	r28, 0x03	; 3
    152e:	e2 e0       	ldi	r30, 0x02	; 2
    1530:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001534 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1534:	a4 e0       	ldi	r26, 0x04	; 4
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e0 ea       	ldi	r30, 0xA0	; 160
    153a:	fa e0       	ldi	r31, 0x0A	; 10
    153c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6b 83       	std	Y+3, r22	; 0x03
    1546:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	84 81       	ldd	r24, Z+4	; 0x04
    1550:	6c 81       	ldd	r22, Y+4	; 0x04
    1552:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	85 81       	ldd	r24, Z+5	; 0x05
    155e:	8f 3f       	cpi	r24, 0xFF	; 255
    1560:	39 f0       	breq	.+14     	; 0x1570 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	fc 01       	movw	r30, r24
    1568:	85 81       	ldd	r24, Z+5	; 0x05
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	87 85       	ldd	r24, Z+15	; 0x0f
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	80 71       	andi	r24, 0x10	; 16
    157e:	99 27       	eor	r25, r25
    1580:	89 2b       	or	r24, r25
    1582:	29 f0       	breq	.+10     	; 0x158e <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	6b 81       	ldd	r22, Y+3	; 0x03
    158a:	85 d0       	rcall	.+266    	; 0x1696 <_ZN13LiquidCrystal10write8bitsEh>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	95 95       	asr	r25
    1596:	87 95       	ror	r24
    1598:	95 95       	asr	r25
    159a:	87 95       	ror	r24
    159c:	95 95       	asr	r25
    159e:	87 95       	ror	r24
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	28 2f       	mov	r18, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	62 2f       	mov	r22, r18
    15ac:	35 d0       	rcall	.+106    	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	6b 81       	ldd	r22, Y+3	; 0x03
    15b4:	31 d0       	rcall	.+98     	; 0x1618 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    15b6:	24 96       	adiw	r28, 0x04	; 4
    15b8:	e2 e0       	ldi	r30, 0x02	; 2
    15ba:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000015be <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    15be:	a2 e0       	ldi	r26, 0x02	; 2
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 ee       	ldi	r30, 0xE5	; 229
    15c4:	fa e0       	ldi	r31, 0x0A	; 10
    15c6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	fc 01       	movw	r30, r24
    15d4:	86 81       	ldd	r24, Z+6	; 0x06
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
  delayMicroseconds(1);    
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	fc 01       	movw	r30, r24
    15ea:	86 81       	ldd	r24, Z+6	; 0x06
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	fc 01       	movw	r30, r24
    1600:	86 81       	ldd	r24, Z+6	; 0x06
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1608:	84 e6       	ldi	r24, 0x64	; 100
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <delayMicroseconds>
}
    1610:	22 96       	adiw	r28, 0x02	; 2
    1612:	e2 e0       	ldi	r30, 0x02	; 2
    1614:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001618 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1618:	a5 e0       	ldi	r26, 0x05	; 5
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e1       	ldi	r30, 0x12	; 18
    161e:	fb e0       	ldi	r31, 0x0B	; 11
    1620:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    162a:	1a 82       	std	Y+2, r1	; 0x02
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	28 c0       	rjmp	.+80     	; 0x1680 <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	07 96       	adiw	r24, 0x07	; 7
    163e:	fc 01       	movw	r30, r24
    1640:	80 81       	ld	r24, Z
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	09 80       	ldd	r0, Y+1	; 0x01
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    165a:	48 2f       	mov	r20, r24
    165c:	41 70       	andi	r20, 0x01	; 1
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	07 96       	adiw	r24, 0x07	; 7
    166c:	fc 01       	movw	r30, r24
    166e:	80 81       	ld	r24, Z
    1670:	64 2f       	mov	r22, r20
    1672:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	04 97       	sbiw	r24, 0x04	; 4
    1686:	a4 f2       	brlt	.-88     	; 0x1630 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	98 df       	rcall	.-208    	; 0x15be <_ZN13LiquidCrystal11pulseEnableEv>
}
    168e:	25 96       	adiw	r28, 0x05	; 5
    1690:	e2 e0       	ldi	r30, 0x02	; 2
    1692:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001696 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    1696:	a5 e0       	ldi	r26, 0x05	; 5
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e5       	ldi	r30, 0x51	; 81
    169c:	fb e0       	ldi	r31, 0x0B	; 11
    169e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    16a8:	1a 82       	std	Y+2, r1	; 0x02
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	28 c0       	rjmp	.+80     	; 0x16fe <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    16ae:	2b 81       	ldd	r18, Y+3	; 0x03
    16b0:	3c 81       	ldd	r19, Y+4	; 0x04
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	07 96       	adiw	r24, 0x07	; 7
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	09 80       	ldd	r0, Y+1	; 0x01
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    16d0:	95 95       	asr	r25
    16d2:	87 95       	ror	r24
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    16d8:	48 2f       	mov	r20, r24
    16da:	41 70       	andi	r20, 0x01	; 1
    16dc:	2b 81       	ldd	r18, Y+3	; 0x03
    16de:	3c 81       	ldd	r19, Y+4	; 0x04
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	07 96       	adiw	r24, 0x07	; 7
    16ea:	fc 01       	movw	r30, r24
    16ec:	80 81       	ld	r24, Z
    16ee:	64 2f       	mov	r22, r20
    16f0:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	08 97       	sbiw	r24, 0x08	; 8
    1704:	a4 f2       	brlt	.-88     	; 0x16ae <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	59 df       	rcall	.-334    	; 0x15be <_ZN13LiquidCrystal11pulseEnableEv>
}
    170c:	25 96       	adiw	r28, 0x05	; 5
    170e:	e2 e0       	ldi	r30, 0x02	; 2
    1710:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001714 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e0 e9       	ldi	r30, 0x90	; 144
    171a:	fb e0       	ldi	r31, 0x0B	; 11
    171c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1720:	8f ed       	ldi	r24, 0xDF	; 223
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	fc 01       	movw	r30, r24
    1726:	80 81       	ld	r24, Z
    1728:	88 23       	and	r24, r24
    172a:	51 f4       	brne	.+20     	; 0x1740 <_ZN4erom6Access8instanceEv+0x2c>
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	89 ee       	ldi	r24, 0xE9	; 233
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0a d0       	rcall	.+20     	; 0x174a <_ZN4erom6AccessC1Ej>
    1736:	8f ed       	ldi	r24, 0xDF	; 223
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	fc 01       	movw	r30, r24
    173e:	20 83       	st	Z, r18
    1740:	89 ee       	ldi	r24, 0xE9	; 233
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	e2 e0       	ldi	r30, 0x02	; 2
    1746:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000174a <_ZN4erom6AccessC1Ej>:
    174a:	a4 e0       	ldi	r26, 0x04	; 4
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb ea       	ldi	r30, 0xAB	; 171
    1750:	fb e0       	ldi	r31, 0x0B	; 11
    1752:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	7c 83       	std	Y+4, r23	; 0x04
    175c:	6b 83       	std	Y+3, r22	; 0x03
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	fc 01       	movw	r30, r24
    1768:	31 83       	std	Z+1, r19	; 0x01
    176a:	20 83       	st	Z, r18
    176c:	0a d0       	rcall	.+20     	; 0x1782 <_ZN4erom6Access18device_memory_sizeEv>
    176e:	9c 01       	movw	r18, r24
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	fc 01       	movw	r30, r24
    1776:	33 83       	std	Z+3, r19	; 0x03
    1778:	22 83       	std	Z+2, r18	; 0x02
    177a:	24 96       	adiw	r28, 0x04	; 4
    177c:	e2 e0       	ldi	r30, 0x02	; 2
    177e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001782 <_ZN4erom6Access18device_memory_sizeEv>:
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 ec       	ldi	r30, 0xC7	; 199
    1788:	fb e0       	ldi	r31, 0x0B	; 11
    178a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	e2 e0       	ldi	r30, 0x02	; 2
    1794:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001798 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1798:	a4 e0       	ldi	r26, 0x04	; 4
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e2 ed       	ldi	r30, 0xD2	; 210
    179e:	fb e0       	ldi	r31, 0x0B	; 11
    17a0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	7c 83       	std	Y+4, r23	; 0x04
    17aa:	6b 83       	std	Y+3, r22	; 0x03
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	49 f4       	brne	.+18     	; 0x17c6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	29 f4       	brne	.+10     	; 0x17c6 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    17bc:	ab df       	rcall	.-170    	; 0x1714 <_ZN4erom6Access8instanceEv>
    17be:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZN4erom6accessE+0x1>
    17c2:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    17c6:	24 96       	adiw	r28, 0x04	; 4
    17c8:	e2 e0       	ldi	r30, 0x02	; 2
    17ca:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000017ce <_GLOBAL__sub_I__ZN4erom6accessE>:
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	ed ee       	ldi	r30, 0xED	; 237
    17d4:	fb e0       	ldi	r31, 0x0B	; 11
    17d6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    17da:	6f ef       	ldi	r22, 0xFF	; 255
    17dc:	7f ef       	ldi	r23, 0xFF	; 255
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	da df       	rcall	.-76     	; 0x1798 <_Z41__static_initialization_and_destruction_0ii>
    17e4:	e2 e0       	ldi	r30, 0x02	; 2
    17e6:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000017ea <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb ef       	ldi	r30, 0xFB	; 251
    17f0:	fb e0       	ldi	r31, 0x0B	; 11
    17f2:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    17f6:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	e2 e0       	ldi	r30, 0x02	; 2
    1804:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001808 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1808:	a8 e0       	ldi	r26, 0x08	; 8
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ea e0       	ldi	r30, 0x0A	; 10
    180e:	fc e0       	ldi	r31, 0x0C	; 12
    1810:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1814:	98 87       	std	Y+8, r25	; 0x08
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	8f 81       	ldd	r24, Y+7	; 0x07
    181a:	98 85       	ldd	r25, Y+8	; 0x08
    181c:	2d e8       	ldi	r18, 0x8D	; 141
    181e:	31 e0       	ldi	r19, 0x01	; 1
    1820:	fc 01       	movw	r30, r24
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1826:	e1 df       	rcall	.-62     	; 0x17ea <_ZL7elapsedv>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	ad 83       	std	Y+5, r26	; 0x05
    1832:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1834:	1a 82       	std	Y+2, r1	; 0x02
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	3d c0       	rjmp	.+122    	; 0x18b4 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    183a:	2f 81       	ldd	r18, Y+7	; 0x07
    183c:	38 85       	ldd	r19, Y+8	; 0x08
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	82 0f       	add	r24, r18
    1844:	93 1f       	adc	r25, r19
    1846:	82 57       	subi	r24, 0x72	; 114
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	fc 01       	movw	r30, r24
    184c:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    184e:	2f 81       	ldd	r18, Y+7	; 0x07
    1850:	38 85       	ldd	r19, Y+8	; 0x08
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	45 96       	adiw	r24, 0x15	; 21
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	fc 01       	movw	r30, r24
    1862:	11 82       	std	Z+1, r1	; 0x01
    1864:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    1866:	2f 81       	ldd	r18, Y+7	; 0x07
    1868:	38 85       	ldd	r19, Y+8	; 0x08
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	82 0f       	add	r24, r18
    1878:	93 1f       	adc	r25, r19
    187a:	9c 01       	movw	r18, r24
    187c:	2e 5f       	subi	r18, 0xFE	; 254
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	ad 81       	ldd	r26, Y+5	; 0x05
    1886:	be 81       	ldd	r27, Y+6	; 0x06
    1888:	f9 01       	movw	r30, r18
    188a:	80 83       	st	Z, r24
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	a2 83       	std	Z+2, r26	; 0x02
    1890:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    1892:	2f 81       	ldd	r18, Y+7	; 0x07
    1894:	38 85       	ldd	r19, Y+8	; 0x08
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	cd 96       	adiw	r24, 0x3d	; 61
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	fc 01       	movw	r30, r24
    18a6:	11 82       	std	Z+1, r1	; 0x01
    18a8:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	0a 97       	sbiw	r24, 0x0a	; 10
    18ba:	0c f4       	brge	.+2      	; 0x18be <_ZN11SimpleTimerC1Ev+0xb6>
    18bc:	be cf       	rjmp	.-132    	; 0x183a <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    18be:	8f 81       	ldd	r24, Y+7	; 0x07
    18c0:	98 85       	ldd	r25, Y+8	; 0x08
    18c2:	84 55       	subi	r24, 0x54	; 84
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	fc 01       	movw	r30, r24
    18c8:	11 82       	std	Z+1, r1	; 0x01
    18ca:	10 82       	st	Z, r1
}
    18cc:	28 96       	adiw	r28, 0x08	; 8
    18ce:	e2 e0       	ldi	r30, 0x02	; 2
    18d0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000018d4 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    18d4:	a8 e0       	ldi	r26, 0x08	; 8
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e0 e7       	ldi	r30, 0x70	; 112
    18da:	fc e0       	ldi	r31, 0x0C	; 12
    18dc:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    18e4:	82 df       	rcall	.-252    	; 0x17ea <_ZL7elapsedv>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	9c 83       	std	Y+4, r25	; 0x04
    18ee:	ad 83       	std	Y+5, r26	; 0x05
    18f0:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    18f2:	1a 82       	std	Y+2, r1	; 0x02
    18f4:	19 82       	std	Y+1, r1	; 0x01
    18f6:	25 c1       	rjmp	.+586    	; 0x1b42 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    18f8:	2f 81       	ldd	r18, Y+7	; 0x07
    18fa:	38 85       	ldd	r19, Y+8	; 0x08
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	84 5b       	subi	r24, 0xB4	; 180
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	fc 01       	movw	r30, r24
    190e:	11 82       	std	Z+1, r1	; 0x01
    1910:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1912:	2f 81       	ldd	r18, Y+7	; 0x07
    1914:	38 85       	ldd	r19, Y+8	; 0x08
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	45 96       	adiw	r24, 0x15	; 21
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	82 0f       	add	r24, r18
    1922:	93 1f       	adc	r25, r19
    1924:	fc 01       	movw	r30, r24
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	89 2b       	or	r24, r25
    192c:	09 f4       	brne	.+2      	; 0x1930 <_ZN11SimpleTimer3runEv+0x5c>
    192e:	04 c1       	rjmp	.+520    	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1930:	2f 81       	ldd	r18, Y+7	; 0x07
    1932:	38 85       	ldd	r19, Y+8	; 0x08
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	82 0f       	add	r24, r18
    1942:	93 1f       	adc	r25, r19
    1944:	02 96       	adiw	r24, 0x02	; 2
    1946:	fc 01       	movw	r30, r24
    1948:	80 81       	ld	r24, Z
    194a:	91 81       	ldd	r25, Z+1	; 0x01
    194c:	a2 81       	ldd	r26, Z+2	; 0x02
    194e:	b3 81       	ldd	r27, Z+3	; 0x03
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	4d 81       	ldd	r20, Y+5	; 0x05
    1956:	5e 81       	ldd	r21, Y+6	; 0x06
    1958:	79 01       	movw	r14, r18
    195a:	8a 01       	movw	r16, r20
    195c:	e8 1a       	sub	r14, r24
    195e:	f9 0a       	sbc	r15, r25
    1960:	0a 0b       	sbc	r16, r26
    1962:	1b 0b       	sbc	r17, r27
    1964:	d8 01       	movw	r26, r16
    1966:	c7 01       	movw	r24, r14
    1968:	4f 81       	ldd	r20, Y+7	; 0x07
    196a:	58 85       	ldd	r21, Y+8	; 0x08
    196c:	29 81       	ldd	r18, Y+1	; 0x01
    196e:	3a 81       	ldd	r19, Y+2	; 0x02
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	24 0f       	add	r18, r20
    197a:	35 1f       	adc	r19, r21
    197c:	22 5c       	subi	r18, 0xC2	; 194
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	f9 01       	movw	r30, r18
    1982:	20 81       	ld	r18, Z
    1984:	31 81       	ldd	r19, Z+1	; 0x01
    1986:	42 81       	ldd	r20, Z+2	; 0x02
    1988:	53 81       	ldd	r21, Z+3	; 0x03
    198a:	82 17       	cp	r24, r18
    198c:	93 07       	cpc	r25, r19
    198e:	a4 07       	cpc	r26, r20
    1990:	b5 07       	cpc	r27, r21
    1992:	08 f4       	brcc	.+2      	; 0x1996 <_ZN11SimpleTimer3runEv+0xc2>
    1994:	d1 c0       	rjmp	.+418    	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    1996:	2f 81       	ldd	r18, Y+7	; 0x07
    1998:	38 85       	ldd	r19, Y+8	; 0x08
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	82 0f       	add	r24, r18
    19a8:	93 1f       	adc	r25, r19
    19aa:	02 96       	adiw	r24, 0x02	; 2
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	a2 81       	ldd	r26, Z+2	; 0x02
    19b4:	b3 81       	ldd	r27, Z+3	; 0x03
    19b6:	4f 81       	ldd	r20, Y+7	; 0x07
    19b8:	58 85       	ldd	r21, Y+8	; 0x08
    19ba:	29 81       	ldd	r18, Y+1	; 0x01
    19bc:	3a 81       	ldd	r19, Y+2	; 0x02
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	24 0f       	add	r18, r20
    19c8:	35 1f       	adc	r19, r21
    19ca:	22 5c       	subi	r18, 0xC2	; 194
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	31 81       	ldd	r19, Z+1	; 0x01
    19d4:	42 81       	ldd	r20, Z+2	; 0x02
    19d6:	53 81       	ldd	r21, Z+3	; 0x03
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	a4 1f       	adc	r26, r20
    19de:	b5 1f       	adc	r27, r21
    19e0:	4f 81       	ldd	r20, Y+7	; 0x07
    19e2:	58 85       	ldd	r21, Y+8	; 0x08
    19e4:	29 81       	ldd	r18, Y+1	; 0x01
    19e6:	3a 81       	ldd	r19, Y+2	; 0x02
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	24 0f       	add	r18, r20
    19f2:	35 1f       	adc	r19, r21
    19f4:	2e 5f       	subi	r18, 0xFE	; 254
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	f9 01       	movw	r30, r18
    19fa:	80 83       	st	Z, r24
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	a2 83       	std	Z+2, r26	; 0x02
    1a00:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1a02:	2f 81       	ldd	r18, Y+7	; 0x07
    1a04:	38 85       	ldd	r19, Y+8	; 0x08
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	82 57       	subi	r24, 0x72	; 114
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <_ZN11SimpleTimer3runEv+0x148>
    1a1a:	8e c0       	rjmp	.+284    	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1a1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1e:	38 85       	ldd	r19, Y+8	; 0x08
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	c3 96       	adiw	r24, 0x33	; 51
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	82 0f       	add	r24, r18
    1a2c:	93 1f       	adc	r25, r19
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	89 2b       	or	r24, r25
    1a36:	81 f4       	brne	.+32     	; 0x1a58 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a38:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3a:	38 85       	ldd	r19, Y+8	; 0x08
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	84 5b       	subi	r24, 0xB4	; 180
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	fc 01       	movw	r30, r24
    1a52:	31 83       	std	Z+1, r19	; 0x01
    1a54:	20 83       	st	Z, r18
    1a56:	70 c0       	rjmp	.+224    	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1a58:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5a:	38 85       	ldd	r19, Y+8	; 0x08
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	cd 96       	adiw	r24, 0x3d	; 61
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	82 0f       	add	r24, r18
    1a68:	93 1f       	adc	r25, r19
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 81       	ld	r18, Z
    1a6e:	31 81       	ldd	r19, Z+1	; 0x01
    1a70:	4f 81       	ldd	r20, Y+7	; 0x07
    1a72:	58 85       	ldd	r21, Y+8	; 0x08
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	c3 96       	adiw	r24, 0x33	; 51
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	84 0f       	add	r24, r20
    1a80:	95 1f       	adc	r25, r21
    1a82:	fc 01       	movw	r30, r24
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	28 17       	cp	r18, r24
    1a8a:	39 07       	cpc	r19, r25
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <_ZN11SimpleTimer3runEv+0x1bc>
    1a8e:	54 c0       	rjmp	.+168    	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a90:	2f 81       	ldd	r18, Y+7	; 0x07
    1a92:	38 85       	ldd	r19, Y+8	; 0x08
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	84 5b       	subi	r24, 0xB4	; 180
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	82 0f       	add	r24, r18
    1aa2:	93 1f       	adc	r25, r19
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	31 83       	std	Z+1, r19	; 0x01
    1aac:	20 83       	st	Z, r18
                        numRuns[i]++;
    1aae:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab0:	38 85       	ldd	r19, Y+8	; 0x08
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	cd 96       	adiw	r24, 0x3d	; 61
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	82 0f       	add	r24, r18
    1abe:	93 1f       	adc	r25, r19
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	80 81       	ld	r24, Z
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	4f 81       	ldd	r20, Y+7	; 0x07
    1ace:	58 85       	ldd	r21, Y+8	; 0x08
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	cd 96       	adiw	r24, 0x3d	; 61
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	84 0f       	add	r24, r20
    1adc:	95 1f       	adc	r25, r21
    1ade:	fc 01       	movw	r30, r24
    1ae0:	31 83       	std	Z+1, r19	; 0x01
    1ae2:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1ae4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae6:	38 85       	ldd	r19, Y+8	; 0x08
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	cd 96       	adiw	r24, 0x3d	; 61
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 81       	ld	r18, Z
    1afa:	31 81       	ldd	r19, Z+1	; 0x01
    1afc:	4f 81       	ldd	r20, Y+7	; 0x07
    1afe:	58 85       	ldd	r21, Y+8	; 0x08
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	c3 96       	adiw	r24, 0x33	; 51
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	84 0f       	add	r24, r20
    1b0c:	95 1f       	adc	r25, r21
    1b0e:	fc 01       	movw	r30, r24
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	28 17       	cp	r18, r24
    1b16:	39 07       	cpc	r19, r25
    1b18:	7c f0       	brlt	.+30     	; 0x1b38 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1b1a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b1c:	38 85       	ldd	r19, Y+8	; 0x08
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	84 5b       	subi	r24, 0xB4	; 180
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	22 e0       	ldi	r18, 0x02	; 2
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	31 83       	std	Z+1, r19	; 0x01
    1b36:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	0a 97       	sbiw	r24, 0x0a	; 10
    1b48:	0c f4       	brge	.+2      	; 0x1b4c <_ZN11SimpleTimer3runEv+0x278>
    1b4a:	d6 ce       	rjmp	.-596    	; 0x18f8 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1b4c:	1a 82       	std	Y+2, r1	; 0x02
    1b4e:	19 82       	std	Y+1, r1	; 0x01
    1b50:	46 c0       	rjmp	.+140    	; 0x1bde <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1b52:	2f 81       	ldd	r18, Y+7	; 0x07
    1b54:	38 85       	ldd	r19, Y+8	; 0x08
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	84 5b       	subi	r24, 0xB4	; 180
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	82 0f       	add	r24, r18
    1b64:	93 1f       	adc	r25, r19
    1b66:	fc 01       	movw	r30, r24
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <_ZN11SimpleTimer3runEv+0x2a4>
    1b72:	02 97       	sbiw	r24, 0x02	; 2
    1b74:	81 f0       	breq	.+32     	; 0x1b96 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1b76:	2e c0       	rjmp	.+92     	; 0x1bd4 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1b78:	2f 81       	ldd	r18, Y+7	; 0x07
    1b7a:	38 85       	ldd	r19, Y+8	; 0x08
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	45 96       	adiw	r24, 0x15	; 21
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	fc 01       	movw	r30, r24
    1b92:	09 95       	icall
                break;
    1b94:	1f c0       	rjmp	.+62     	; 0x1bd4 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1b96:	2f 81       	ldd	r18, Y+7	; 0x07
    1b98:	38 85       	ldd	r19, Y+8	; 0x08
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	45 96       	adiw	r24, 0x15	; 21
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	82 0f       	add	r24, r18
    1ba6:	93 1f       	adc	r25, r19
    1ba8:	fc 01       	movw	r30, r24
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	fc 01       	movw	r30, r24
    1bb0:	09 95       	icall
                deleteTimer(i);
    1bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb4:	98 85       	ldd	r25, Y+8	; 0x08
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	08 96       	adiw	r24, 0x08	; 8
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 81       	ld	r18, Z
    1bc2:	31 81       	ldd	r19, Z+1	; 0x01
    1bc4:	49 81       	ldd	r20, Y+1	; 0x01
    1bc6:	5a 81       	ldd	r21, Y+2	; 0x02
    1bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bca:	98 85       	ldd	r25, Y+8	; 0x08
    1bcc:	ba 01       	movw	r22, r20
    1bce:	f9 01       	movw	r30, r18
    1bd0:	09 95       	icall
                break;
    1bd2:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	0a 97       	sbiw	r24, 0x0a	; 10
    1be4:	0c f4       	brge	.+2      	; 0x1be8 <_ZN11SimpleTimer3runEv+0x314>
    1be6:	b5 cf       	rjmp	.-150    	; 0x1b52 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1be8:	28 96       	adiw	r28, 0x08	; 8
    1bea:	e6 e0       	ldi	r30, 0x06	; 6
    1bec:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00001bf0 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1bf0:	a4 e0       	ldi	r26, 0x04	; 4
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee ef       	ldi	r30, 0xFE	; 254
    1bf6:	fd e0       	ldi	r31, 0x0D	; 13
    1bf8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	84 55       	subi	r24, 0x54	; 84
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	fc 01       	movw	r30, r24
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	0a 97       	sbiw	r24, 0x0a	; 10
    1c10:	1c f0       	brlt	.+6      	; 0x1c18 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	1f c0       	rjmp	.+62     	; 0x1c56 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c18:	1a 82       	std	Y+2, r1	; 0x02
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	16 c0       	rjmp	.+44     	; 0x1c4a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c20:	3c 81       	ldd	r19, Y+4	; 0x04
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	45 96       	adiw	r24, 0x15	; 21
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	82 0f       	add	r24, r18
    1c2e:	93 1f       	adc	r25, r19
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	89 2b       	or	r24, r25
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1c50:	34 f3       	brlt	.-52     	; 0x1c1e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
}
    1c56:	24 96       	adiw	r28, 0x04	; 4
    1c58:	e2 e0       	ldi	r30, 0x02	; 2
    1c5a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001c5e <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1c5e:	ac e0       	ldi	r26, 0x0C	; 12
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	fe e0       	ldi	r31, 0x0E	; 14
    1c66:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	4d 83       	std	Y+5, r20	; 0x05
    1c70:	5e 83       	std	Y+6, r21	; 0x06
    1c72:	6f 83       	std	Y+7, r22	; 0x07
    1c74:	78 87       	std	Y+8, r23	; 0x08
    1c76:	3a 87       	std	Y+10, r19	; 0x0a
    1c78:	29 87       	std	Y+9, r18	; 0x09
    1c7a:	1c 87       	std	Y+12, r17	; 0x0c
    1c7c:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	b6 df       	rcall	.-148    	; 0x1bf0 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	99 23       	and	r25, r25
    1c8e:	1c f4       	brge	.+6      	; 0x1c96 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	6b c0       	rjmp	.+214    	; 0x1d6c <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	89 2b       	or	r24, r25
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	9f ef       	ldi	r25, 0xFF	; 255
    1ca2:	64 c0       	rjmp	.+200    	; 0x1d6c <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	82 0f       	add	r24, r18
    1cb6:	93 1f       	adc	r25, r19
    1cb8:	9c 01       	movw	r18, r24
    1cba:	22 5c       	subi	r18, 0xC2	; 194
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	af 81       	ldd	r26, Y+7	; 0x07
    1cc4:	b8 85       	ldd	r27, Y+8	; 0x08
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	45 96       	adiw	r24, 0x15	; 21
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	29 85       	ldd	r18, Y+9	; 0x09
    1ce4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	31 83       	std	Z+1, r19	; 0x01
    1cea:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	c3 96       	adiw	r24, 0x33	; 51
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d00:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d02:	fc 01       	movw	r30, r24
    1d04:	31 83       	std	Z+1, r19	; 0x01
    1d06:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	82 57       	subi	r24, 0x72	; 114
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1d1e:	65 dd       	rcall	.-1334   	; 0x17ea <_ZL7elapsedv>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	4b 81       	ldd	r20, Y+3	; 0x03
    1d26:	5c 81       	ldd	r21, Y+4	; 0x04
    1d28:	29 81       	ldd	r18, Y+1	; 0x01
    1d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	24 0f       	add	r18, r20
    1d36:	35 1f       	adc	r19, r21
    1d38:	2e 5f       	subi	r18, 0xFE	; 254
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	80 83       	st	Z, r24
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	a2 83       	std	Z+2, r26	; 0x02
    1d44:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	84 55       	subi	r24, 0x54	; 84
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	fc 01       	movw	r30, r24
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	9c 01       	movw	r18, r24
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	84 55       	subi	r24, 0x54	; 84
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	fc 01       	movw	r30, r24
    1d64:	31 83       	std	Z+1, r19	; 0x01
    1d66:	20 83       	st	Z, r18

    return freeTimer;
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d6c:	2c 96       	adiw	r28, 0x0c	; 12
    1d6e:	e4 e0       	ldi	r30, 0x04	; 4
    1d70:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00001d74 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1d74:	a8 e0       	ldi	r26, 0x08	; 8
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e0 ec       	ldi	r30, 0xC0	; 192
    1d7a:	fe e0       	ldi	r31, 0x0E	; 14
    1d7c:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	4b 83       	std	Y+3, r20	; 0x03
    1d86:	5c 83       	std	Y+4, r21	; 0x04
    1d88:	6d 83       	std	Y+5, r22	; 0x05
    1d8a:	7e 83       	std	Y+6, r23	; 0x06
    1d8c:	38 87       	std	Y+8, r19	; 0x08
    1d8e:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	dc 01       	movw	r26, r24
    1d96:	8d 91       	ld	r24, X+
    1d98:	9c 91       	ld	r25, X
    1d9a:	06 96       	adiw	r24, 0x06	; 6
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	2f 81       	ldd	r18, Y+7	; 0x07
    1da4:	38 85       	ldd	r19, Y+8	; 0x08
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	ad 81       	ldd	r26, Y+5	; 0x05
    1dac:	be 81       	ldd	r27, Y+6	; 0x06
    1dae:	e9 80       	ldd	r14, Y+1	; 0x01
    1db0:	fa 80       	ldd	r15, Y+2	; 0x02
    1db2:	00 e0       	ldi	r16, 0x00	; 0
    1db4:	10 e0       	ldi	r17, 0x00	; 0
    1db6:	ac 01       	movw	r20, r24
    1db8:	bd 01       	movw	r22, r26
    1dba:	c7 01       	movw	r24, r14
    1dbc:	09 95       	icall
}
    1dbe:	28 96       	adiw	r28, 0x08	; 8
    1dc0:	e6 e0       	ldi	r30, 0x06	; 6
    1dc2:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00001dc6 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1dc6:	a8 e0       	ldi	r26, 0x08	; 8
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 ee       	ldi	r30, 0xE9	; 233
    1dcc:	fe e0       	ldi	r31, 0x0E	; 14
    1dce:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	4b 83       	std	Y+3, r20	; 0x03
    1dd8:	5c 83       	std	Y+4, r21	; 0x04
    1dda:	6d 83       	std	Y+5, r22	; 0x05
    1ddc:	7e 83       	std	Y+6, r23	; 0x06
    1dde:	38 87       	std	Y+8, r19	; 0x08
    1de0:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	dc 01       	movw	r26, r24
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	06 96       	adiw	r24, 0x06	; 6
    1dee:	dc 01       	movw	r26, r24
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	2f 81       	ldd	r18, Y+7	; 0x07
    1df6:	38 85       	ldd	r19, Y+8	; 0x08
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	ad 81       	ldd	r26, Y+5	; 0x05
    1dfe:	be 81       	ldd	r27, Y+6	; 0x06
    1e00:	e9 80       	ldd	r14, Y+1	; 0x01
    1e02:	fa 80       	ldd	r15, Y+2	; 0x02
    1e04:	01 e0       	ldi	r16, 0x01	; 1
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	ac 01       	movw	r20, r24
    1e0a:	bd 01       	movw	r22, r26
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	09 95       	icall
}
    1e10:	28 96       	adiw	r28, 0x08	; 8
    1e12:	e6 e0       	ldi	r30, 0x06	; 6
    1e14:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00001e18 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1e18:	a4 e0       	ldi	r26, 0x04	; 4
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e1       	ldi	r30, 0x12	; 18
    1e1e:	ff e0       	ldi	r31, 0x0F	; 15
    1e20:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	7c 83       	std	Y+4, r23	; 0x04
    1e2a:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	0a 97       	sbiw	r24, 0x0a	; 10
    1e32:	0c f0       	brlt	.+2      	; 0x1e36 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1e34:	69 c0       	rjmp	.+210    	; 0x1f08 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	84 55       	subi	r24, 0x54	; 84
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	89 2b       	or	r24, r25
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1e48:	5f c0       	rjmp	.+190    	; 0x1f08 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1e4a:	29 81       	ldd	r18, Y+1	; 0x01
    1e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	45 96       	adiw	r24, 0x15	; 21
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	89 2b       	or	r24, r25
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1e66:	50 c0       	rjmp	.+160    	; 0x1f08 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1e68:	29 81       	ldd	r18, Y+1	; 0x01
    1e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	45 96       	adiw	r24, 0x15	; 21
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	82 0f       	add	r24, r18
    1e78:	93 1f       	adc	r25, r19
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	11 82       	std	Z+1, r1	; 0x01
    1e7e:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1e80:	29 81       	ldd	r18, Y+1	; 0x01
    1e82:	3a 81       	ldd	r19, Y+2	; 0x02
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	82 0f       	add	r24, r18
    1e8a:	93 1f       	adc	r25, r19
    1e8c:	82 57       	subi	r24, 0x72	; 114
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	fc 01       	movw	r30, r24
    1e92:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1e94:	29 81       	ldd	r18, Y+1	; 0x01
    1e96:	3a 81       	ldd	r19, Y+2	; 0x02
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	84 5b       	subi	r24, 0xB4	; 180
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	82 0f       	add	r24, r18
    1ea6:	93 1f       	adc	r25, r19
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	11 82       	std	Z+1, r1	; 0x01
    1eac:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1eae:	29 81       	ldd	r18, Y+1	; 0x01
    1eb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	ce 96       	adiw	r24, 0x3e	; 62
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	10 82       	st	Z, r1
    1ec8:	11 82       	std	Z+1, r1	; 0x01
    1eca:	12 82       	std	Z+2, r1	; 0x02
    1ecc:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1ece:	29 81       	ldd	r18, Y+1	; 0x01
    1ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	cd 96       	adiw	r24, 0x3d	; 61
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	82 0f       	add	r24, r18
    1ede:	93 1f       	adc	r25, r19
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	84 55       	subi	r24, 0x54	; 84
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	fc 01       	movw	r30, r24
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	9c 01       	movw	r18, r24
    1ef6:	21 50       	subi	r18, 0x01	; 1
    1ef8:	31 09       	sbc	r19, r1
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	84 55       	subi	r24, 0x54	; 84
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	fc 01       	movw	r30, r24
    1f04:	31 83       	std	Z+1, r19	; 0x01
    1f06:	20 83       	st	Z, r18
    }
}
    1f08:	24 96       	adiw	r28, 0x04	; 4
    1f0a:	e2 e0       	ldi	r30, 0x02	; 2
    1f0c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001f10 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1f10:	a4 e0       	ldi	r26, 0x04	; 4
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e8       	ldi	r30, 0x8E	; 142
    1f16:	ff e0       	ldi	r31, 0x0F	; 15
    1f18:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	7c 83       	std	Y+4, r23	; 0x04
    1f22:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	0a 97       	sbiw	r24, 0x0a	; 10
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1f2e:	5d dc       	rcall	.-1862   	; 0x17ea <_ZL7elapsedv>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	49 81       	ldd	r20, Y+1	; 0x01
    1f36:	5a 81       	ldd	r21, Y+2	; 0x02
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	24 0f       	add	r18, r20
    1f46:	35 1f       	adc	r19, r21
    1f48:	2e 5f       	subi	r18, 0xFE	; 254
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	80 83       	st	Z, r24
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	a2 83       	std	Z+2, r26	; 0x02
    1f54:	b3 83       	std	Z+3, r27	; 0x03
}
    1f56:	24 96       	adiw	r28, 0x04	; 4
    1f58:	e2 e0       	ldi	r30, 0x02	; 2
    1f5a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001f5e <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1f5e:	a4 e0       	ldi	r26, 0x04	; 4
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e5 eb       	ldi	r30, 0xB5	; 181
    1f64:	ff e0       	ldi	r31, 0x0F	; 15
    1f66:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	7c 83       	std	Y+4, r23	; 0x04
    1f70:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	0a 97       	sbiw	r24, 0x0a	; 10
    1f78:	14 f0       	brlt	.+4      	; 0x1f7e <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	0a c0       	rjmp	.+20     	; 0x1f92 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1f7e:	29 81       	ldd	r18, Y+1	; 0x01
    1f80:	3a 81       	ldd	r19, Y+2	; 0x02
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	82 0f       	add	r24, r18
    1f88:	93 1f       	adc	r25, r19
    1f8a:	82 57       	subi	r24, 0x72	; 114
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	fc 01       	movw	r30, r24
    1f90:	80 81       	ld	r24, Z
}
    1f92:	24 96       	adiw	r28, 0x04	; 4
    1f94:	e2 e0       	ldi	r30, 0x02	; 2
    1f96:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001f9a <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1f9a:	a4 e0       	ldi	r26, 0x04	; 4
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1fa0:	ff e0       	ldi	r31, 0x0F	; 15
    1fa2:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	7c 83       	std	Y+4, r23	; 0x04
    1fac:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	0a 97       	sbiw	r24, 0x0a	; 10
    1fb4:	0c f0       	brlt	.+2      	; 0x1fb8 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1fb6:	0b c0       	rjmp	.+22     	; 0x1fce <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1fb8:	29 81       	ldd	r18, Y+1	; 0x01
    1fba:	3a 81       	ldd	r19, Y+2	; 0x02
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	82 0f       	add	r24, r18
    1fc2:	93 1f       	adc	r25, r19
    1fc4:	82 57       	subi	r24, 0x72	; 114
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	21 e0       	ldi	r18, 0x01	; 1
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18
}
    1fce:	24 96       	adiw	r28, 0x04	; 4
    1fd0:	e2 e0       	ldi	r30, 0x02	; 2
    1fd2:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00001fd6 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1fd6:	a4 e0       	ldi	r26, 0x04	; 4
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e1 ef       	ldi	r30, 0xF1	; 241
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	7c 83       	std	Y+4, r23	; 0x04
    1fe8:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	0a 97       	sbiw	r24, 0x0a	; 10
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    1ff4:	29 81       	ldd	r18, Y+1	; 0x01
    1ff6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	82 57       	subi	r24, 0x72	; 114
    2002:	9f 4f       	sbci	r25, 0xFF	; 255
    2004:	fc 01       	movw	r30, r24
    2006:	10 82       	st	Z, r1
}
    2008:	24 96       	adiw	r28, 0x04	; 4
    200a:	e2 e0       	ldi	r30, 0x02	; 2
    200c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002010 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    2010:	cf 92       	push	r12
    2012:	ef 92       	push	r14
    2014:	0f 93       	push	r16
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	00 d0       	rcall	.+0      	; 0x201c <_ZN7LCDBaseC1Ev+0xc>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	0f 2e       	mov	r0, r31
    202a:	f7 e0       	ldi	r31, 0x07	; 7
    202c:	cf 2e       	mov	r12, r31
    202e:	f0 2d       	mov	r31, r0
    2030:	0f 2e       	mov	r0, r31
    2032:	f6 e0       	ldi	r31, 0x06	; 6
    2034:	ef 2e       	mov	r14, r31
    2036:	f0 2d       	mov	r31, r0
    2038:	05 e0       	ldi	r16, 0x05	; 5
    203a:	24 e0       	ldi	r18, 0x04	; 4
    203c:	49 e0       	ldi	r20, 0x09	; 9
    203e:	68 e0       	ldi	r22, 0x08	; 8
    2040:	21 d8       	rcall	.-4030   	; 0x1084 <_ZN13LiquidCrystalC1Ehhhhhh>
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	23 ea       	ldi	r18, 0xA3	; 163
    2048:	31 e0       	ldi	r19, 0x01	; 1
    204a:	fc 01       	movw	r30, r24
    204c:	31 83       	std	Z+1, r19	; 0x01
    204e:	20 83       	st	Z, r18
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	2a e0       	ldi	r18, 0x0A	; 10
    2056:	e5 e1       	ldi	r30, 0x15	; 21
    2058:	f1 e0       	ldi	r31, 0x01	; 1
    205a:	dc 01       	movw	r26, r24
    205c:	58 96       	adiw	r26, 0x18	; 24
    205e:	01 90       	ld	r0, Z+
    2060:	0d 92       	st	X+, r0
    2062:	2a 95       	dec	r18
    2064:	e1 f7       	brne	.-8      	; 0x205e <_ZN7LCDBaseC1Ev+0x4e>
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	25 e0       	ldi	r18, 0x05	; 5
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	fc 01       	movw	r30, r24
    2070:	33 a3       	std	Z+35, r19	; 0x23
    2072:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	08 d0       	rcall	.+16     	; 0x208a <_ZN7LCDBase4InitEv>
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	0f 91       	pop	r16
    2084:	ef 90       	pop	r14
    2086:	cf 90       	pop	r12
    2088:	08 95       	ret

0000208a <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    208a:	a2 e0       	ldi	r26, 0x02	; 2
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e4       	ldi	r30, 0x4B	; 75
    2090:	f0 e1       	ldi	r31, 0x10	; 16
    2092:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	42 e0       	ldi	r20, 0x02	; 2
    20a2:	60 e1       	ldi	r22, 0x10	; 16
    20a4:	bd d8       	rcall	.-3718   	; 0x1220 <_ZN13LiquidCrystal5beginEhhh>
    clear();
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	b4 d9       	rcall	.-3224   	; 0x1414 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	c3 d9       	rcall	.-3194   	; 0x143c <_ZN13LiquidCrystal9setCursorEhh>

}
    20b6:	22 96       	adiw	r28, 0x02	; 2
    20b8:	e2 e0       	ldi	r30, 0x02	; 2
    20ba:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000020be <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    20be:	a4 e0       	ldi	r26, 0x04	; 4
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e5 e6       	ldi	r30, 0x65	; 101
    20c4:	f0 e1       	ldi	r31, 0x10	; 16
    20c6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	7c 83       	std	Y+4, r23	; 0x04
    20d0:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	42 2f       	mov	r20, r18
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	af d9       	rcall	.-3234   	; 0x143c <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    20de:	2f e8       	ldi	r18, 0x8F	; 143
    20e0:	33 e0       	ldi	r19, 0x03	; 3
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	b9 01       	movw	r22, r18
    20e8:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
}
    20ec:	24 96       	adiw	r28, 0x04	; 4
    20ee:	e2 e0       	ldi	r30, 0x02	; 2
    20f0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000020f4 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    20f4:	a6 e0       	ldi	r26, 0x06	; 6
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e0 e8       	ldi	r30, 0x80	; 128
    20fa:	f0 e1       	ldi	r31, 0x10	; 16
    20fc:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	7c 83       	std	Y+4, r23	; 0x04
    2106:	6b 83       	std	Y+3, r22	; 0x03
    2108:	5e 83       	std	Y+6, r21	; 0x06
    210a:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	b9 01       	movw	r22, r18
    2116:	d3 df       	rcall	.-90     	; 0x20be <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	42 2f       	mov	r20, r18
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	8c d9       	rcall	.-3304   	; 0x143c <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	2d 81       	ldd	r18, Y+5	; 0x05
    212a:	3e 81       	ldd	r19, Y+6	; 0x06
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN5Print5printERK6String>
}
    2132:	26 96       	adiw	r28, 0x06	; 6
    2134:	e2 e0       	ldi	r30, 0x02	; 2
    2136:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000213a <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    213a:	a4 e0       	ldi	r26, 0x04	; 4
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e3 ea       	ldi	r30, 0xA3	; 163
    2140:	f0 e1       	ldi	r31, 0x10	; 16
    2142:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	69 d0       	rcall	.+210    	; 0x2222 <_ZN7LCDBase6getKeyEv>
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	91 05       	cpc	r25, r1
    215c:	91 f0       	breq	.+36     	; 0x2182 <_ZN7LCDBase14DetectKeyPressEv+0x48>
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	91 05       	cpc	r25, r1
    2162:	2c f4       	brge	.+10     	; 0x216e <_ZN7LCDBase14DetectKeyPressEv+0x34>
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	49 f0       	breq	.+18     	; 0x217a <_ZN7LCDBase14DetectKeyPressEv+0x40>
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	49 f0       	breq	.+18     	; 0x217e <_ZN7LCDBase14DetectKeyPressEv+0x44>
    216c:	10 c0       	rjmp	.+32     	; 0x218e <_ZN7LCDBase14DetectKeyPressEv+0x54>
    216e:	83 30       	cpi	r24, 0x03	; 3
    2170:	91 05       	cpc	r25, r1
    2172:	49 f0       	breq	.+18     	; 0x2186 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    2174:	04 97       	sbiw	r24, 0x04	; 4
    2176:	49 f0       	breq	.+18     	; 0x218a <_ZN7LCDBase14DetectKeyPressEv+0x50>
    2178:	0a c0       	rjmp	.+20     	; 0x218e <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    218e:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    2190:	24 96       	adiw	r28, 0x04	; 4
    2192:	e2 e0       	ldi	r30, 0x02	; 2
    2194:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002198 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    2198:	a6 e0       	ldi	r26, 0x06	; 6
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e2 ed       	ldi	r30, 0xD2	; 210
    219e:	f0 e1       	ldi	r31, 0x10	; 16
    21a0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	7e 83       	std	Y+6, r23	; 0x06
    21aa:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21ac:	1a 82       	std	Y+2, r1	; 0x02
    21ae:	19 82       	std	Y+1, r1	; 0x01
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	0c 96       	adiw	r24, 0x0c	; 12
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	fc 01       	movw	r30, r24
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	9c 01       	movw	r18, r24
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	1f c0       	rjmp	.+62     	; 0x221a <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	fc 01       	movw	r30, r24
    21ec:	22 a1       	ldd	r18, Z+34	; 0x22
    21ee:	33 a1       	ldd	r19, Z+35	; 0x23
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	82 17       	cp	r24, r18
    21f6:	93 07       	cpc	r25, r19
    21f8:	e4 f2       	brlt	.-72     	; 0x21b2 <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	fc 01       	movw	r30, r24
    2200:	22 a1       	ldd	r18, Z+34	; 0x22
    2202:	33 a1       	ldd	r19, Z+35	; 0x23
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	82 17       	cp	r24, r18
    220a:	93 07       	cpc	r25, r19
    220c:	24 f0       	brlt	.+8      	; 0x2216 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	9f ef       	ldi	r25, 0xFF	; 255
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
}
    221a:	26 96       	adiw	r28, 0x06	; 6
    221c:	e2 e0       	ldi	r30, 0x02	; 2
    221e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002222 <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    2222:	a6 e0       	ldi	r26, 0x06	; 6
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e7 e1       	ldi	r30, 0x17	; 23
    2228:	f1 e1       	ldi	r31, 0x11	; 17
    222a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	0e 94 b0 28 	call	0x5160	; 0x5160 <analogRead>
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    223c:	29 81       	ldd	r18, Y+1	; 0x01
    223e:	3a 81       	ldd	r19, Y+2	; 0x02
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	b9 01       	movw	r22, r18
    2246:	a8 df       	rcall	.-176    	; 0x2198 <_ZN7LCDBase13getKeyFromValEj>
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2250:	26 96       	adiw	r28, 0x06	; 6
    2252:	e2 e0       	ldi	r30, 0x02	; 2
    2254:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002258 <_ZN5EERefC1Ei>:
	};

	template <class T> struct _UCXXEXPORT minus : binary_function<T,T,T>{
		T operator()(const T& x, const T& y) const{
			return x - y;
		}
    2258:	a4 e0       	ldi	r26, 0x04	; 4
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e2 e3       	ldi	r30, 0x32	; 50
    225e:	f1 e1       	ldi	r31, 0x11	; 17
    2260:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	7c 83       	std	Y+4, r23	; 0x04
    226a:	6b 83       	std	Y+3, r22	; 0x03
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	3c 81       	ldd	r19, Y+4	; 0x04
    2274:	fc 01       	movw	r30, r24
    2276:	31 83       	std	Z+1, r19	; 0x01
    2278:	20 83       	st	Z, r18
    227a:	24 96       	adiw	r28, 0x04	; 4
    227c:	e2 e0       	ldi	r30, 0x02	; 2
    227e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002282 <_ZNK5EERefdeEv>:
    2282:	a2 e0       	ldi	r26, 0x02	; 2
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e7 e4       	ldi	r30, 0x47	; 71
    2288:	f1 e1       	ldi	r31, 0x11	; 17
    228a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	0e 94 ce 33 	call	0x679c	; 0x679c <eeprom_read_byte>
    22a0:	22 96       	adiw	r28, 0x02	; 2
    22a2:	e2 e0       	ldi	r30, 0x02	; 2
    22a4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000022a8 <_ZNK5EERefcvKhEv>:
    22a8:	a2 e0       	ldi	r26, 0x02	; 2
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e5       	ldi	r30, 0x5A	; 90
    22ae:	f1 e1       	ldi	r31, 0x11	; 17
    22b0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	e2 df       	rcall	.-60     	; 0x2282 <_ZNK5EERefdeEv>
    22be:	22 96       	adiw	r28, 0x02	; 2
    22c0:	e2 e0       	ldi	r30, 0x02	; 2
    22c2:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000022c6 <_ZN11EEPROMClassixEi>:
    22c6:	a6 e0       	ldi	r26, 0x06	; 6
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e9 e6       	ldi	r30, 0x69	; 105
    22cc:	f1 e1       	ldi	r31, 0x11	; 17
    22ce:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	7e 83       	std	Y+6, r23	; 0x06
    22d8:	6d 83       	std	Y+5, r22	; 0x05
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	bc 01       	movw	r22, r24
    22e0:	ce 01       	movw	r24, r28
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	b9 df       	rcall	.-142    	; 0x2258 <_ZN5EERefC1Ei>
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	26 96       	adiw	r28, 0x06	; 6
    22ec:	e2 e0       	ldi	r30, 0x02	; 2
    22ee:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000022f2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    22f2:	aa e0       	ldi	r26, 0x0A	; 10
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ef e7       	ldi	r30, 0x7F	; 127
    22f8:	f1 e1       	ldi	r31, 0x11	; 17
    22fa:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	78 87       	std	Y+8, r23	; 0x08
    2304:	6f 83       	std	Y+7, r22	; 0x07
    2306:	5a 87       	std	Y+10, r21	; 0x0a
    2308:	49 87       	std	Y+9, r20	; 0x09
    230a:	1a 82       	std	Y+2, r1	; 0x02
    230c:	19 82       	std	Y+1, r1	; 0x01
    230e:	1d c0       	rjmp	.+58     	; 0x234a <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    2310:	0d 81       	ldd	r16, Y+5	; 0x05
    2312:	1e 81       	ldd	r17, Y+6	; 0x06
    2314:	c8 01       	movw	r24, r16
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	8f 81       	ldd	r24, Y+7	; 0x07
    231e:	98 85       	ldd	r25, Y+8	; 0x08
    2320:	9c 01       	movw	r18, r24
    2322:	2f 5f       	subi	r18, 0xFF	; 255
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	38 87       	std	Y+8, r19	; 0x08
    2328:	2f 83       	std	Y+7, r18	; 0x07
    232a:	bc 01       	movw	r22, r24
    232c:	8d ee       	ldi	r24, 0xED	; 237
    232e:	92 e0       	ldi	r25, 0x02	; 2
    2330:	ca df       	rcall	.-108    	; 0x22c6 <_ZN11EEPROMClassixEi>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
    2336:	ce 01       	movw	r24, r28
    2338:	03 96       	adiw	r24, 0x03	; 3
    233a:	b6 df       	rcall	.-148    	; 0x22a8 <_ZNK5EERefcvKhEv>
    233c:	f8 01       	movw	r30, r16
    233e:	80 83       	st	Z, r24
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	9a 81       	ldd	r25, Y+2	; 0x02
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	29 81       	ldd	r18, Y+1	; 0x01
    234c:	3a 81       	ldd	r19, Y+2	; 0x02
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	28 17       	cp	r18, r24
    2354:	39 07       	cpc	r19, r25
    2356:	e0 f2       	brcs	.-72     	; 0x2310 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2358:	2a 96       	adiw	r28, 0x0a	; 10
    235a:	e4 e0       	ldi	r30, 0x04	; 4
    235c:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00002360 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>:
    2360:	a6 e1       	ldi	r26, 0x16	; 22
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e6 eb       	ldi	r30, 0xB6	; 182
    2366:	f1 e1       	ldi	r31, 0x11	; 17
    2368:	0c 94 c6 2c 	jmp	0x598c	; 0x598c <__prologue_saves__+0x14>
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
    2370:	7a 8b       	std	Y+18, r23	; 0x12
    2372:	69 8b       	std	Y+17, r22	; 0x11
    2374:	1f 82       	std	Y+7, r1	; 0x07
    2376:	18 86       	std	Y+8, r1	; 0x08
    2378:	19 86       	std	Y+9, r1	; 0x09
    237a:	1a 86       	std	Y+10, r1	; 0x0a
    237c:	89 89       	ldd	r24, Y+17	; 0x11
    237e:	9a 89       	ldd	r25, Y+18	; 0x12
    2380:	18 16       	cp	r1, r24
    2382:	19 06       	cpc	r1, r25
    2384:	5c f0       	brlt	.+22     	; 0x239c <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x3c>
    2386:	80 ea       	ldi	r24, 0xA0	; 160
    2388:	93 e0       	ldi	r25, 0x03	; 3
    238a:	bc 01       	movw	r22, r24
    238c:	80 ec       	ldi	r24, 0xC0	; 192
    238e:	94 e0       	ldi	r25, 0x04	; 4
    2390:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	dc 01       	movw	r26, r24
    239a:	24 c1       	rjmp	.+584    	; 0x25e4 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x284>
    239c:	89 89       	ldd	r24, Y+17	; 0x11
    239e:	9a 89       	ldd	r25, Y+18	; 0x12
    23a0:	05 97       	sbiw	r24, 0x05	; 5
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x46>
    23a4:	47 c0       	rjmp	.+142    	; 0x2434 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0xd4>
    23a6:	1a 82       	std	Y+2, r1	; 0x02
    23a8:	19 82       	std	Y+1, r1	; 0x01
    23aa:	1e c0       	rjmp	.+60     	; 0x23e8 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x88>
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    23b6:	38 89       	ldd	r19, Y+16	; 0x10
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	19 d1       	rcall	.+562    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    23be:	09 2e       	mov	r0, r25
    23c0:	00 0c       	add	r0, r0
    23c2:	aa 0b       	sbc	r26, r26
    23c4:	bb 0b       	sbc	r27, r27
    23c6:	2f 81       	ldd	r18, Y+7	; 0x07
    23c8:	38 85       	ldd	r19, Y+8	; 0x08
    23ca:	49 85       	ldd	r20, Y+9	; 0x09
    23cc:	5a 85       	ldd	r21, Y+10	; 0x0a
    23ce:	82 0f       	add	r24, r18
    23d0:	93 1f       	adc	r25, r19
    23d2:	a4 1f       	adc	r26, r20
    23d4:	b5 1f       	adc	r27, r21
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	29 81       	ldd	r18, Y+1	; 0x01
    23ea:	3a 81       	ldd	r19, Y+2	; 0x02
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	9a 89       	ldd	r25, Y+18	; 0x12
    23f0:	28 17       	cp	r18, r24
    23f2:	39 07       	cpc	r19, r25
    23f4:	dc f2       	brlt	.-74     	; 0x23ac <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x4c>
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	9c 01       	movw	r18, r24
    23fc:	99 0f       	add	r25, r25
    23fe:	44 0b       	sbc	r20, r20
    2400:	55 0b       	sbc	r21, r21
    2402:	8f 81       	ldd	r24, Y+7	; 0x07
    2404:	98 85       	ldd	r25, Y+8	; 0x08
    2406:	a9 85       	ldd	r26, Y+9	; 0x09
    2408:	ba 85       	ldd	r27, Y+10	; 0x0a
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 90 2c 	call	0x5920	; 0x5920 <__divmodsi4>
    2412:	da 01       	movw	r26, r20
    2414:	c9 01       	movw	r24, r18
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__floatsisf>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8b 87       	std	Y+11, r24	; 0x0b
    2424:	9c 87       	std	Y+12, r25	; 0x0c
    2426:	ad 87       	std	Y+13, r26	; 0x0d
    2428:	be 87       	std	Y+14, r27	; 0x0e
    242a:	8b 85       	ldd	r24, Y+11	; 0x0b
    242c:	9c 85       	ldd	r25, Y+12	; 0x0c
    242e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2430:	be 85       	ldd	r27, Y+14	; 0x0e
    2432:	d8 c0       	rjmp	.+432    	; 0x25e4 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x284>
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	98 89       	ldd	r25, Y+16	; 0x10
    2438:	db d0       	rcall	.+438    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    243a:	8c 01       	movw	r16, r24
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	98 89       	ldd	r25, Y+16	; 0x10
    2440:	02 96       	adiw	r24, 0x02	; 2
    2442:	d6 d0       	rcall	.+428    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2444:	21 e0       	ldi	r18, 0x01	; 1
    2446:	08 17       	cp	r16, r24
    2448:	19 07       	cpc	r17, r25
    244a:	0c f0       	brlt	.+2      	; 0x244e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0xee>
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	22 23       	and	r18, r18
    2450:	61 f0       	breq	.+24     	; 0x246a <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x10a>
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 89       	ldd	r25, Y+16	; 0x10
    2456:	cc d0       	rcall	.+408    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	8f 85       	ldd	r24, Y+15	; 0x0f
    245e:	98 89       	ldd	r25, Y+16	; 0x10
    2460:	02 96       	adiw	r24, 0x02	; 2
    2462:	c6 d0       	rcall	.+396    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	8b 83       	std	Y+3, r24	; 0x03
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x120>
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	98 89       	ldd	r25, Y+16	; 0x10
    246e:	02 96       	adiw	r24, 0x02	; 2
    2470:	bf d0       	rcall	.+382    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	8f 85       	ldd	r24, Y+15	; 0x0f
    2478:	98 89       	ldd	r25, Y+16	; 0x10
    247a:	ba d0       	rcall	.+372    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	80 c0       	rjmp	.+256    	; 0x258a <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x22a>
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	2f 85       	ldd	r18, Y+15	; 0x0f
    2494:	38 89       	ldd	r19, Y+16	; 0x10
    2496:	82 0f       	add	r24, r18
    2498:	93 1f       	adc	r25, r19
    249a:	aa d0       	rcall	.+340    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    249c:	9c 01       	movw	r18, r24
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	0c f0       	brlt	.+2      	; 0x24ac <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x14c>
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	44 23       	and	r20, r20
    24ae:	f1 f0       	breq	.+60     	; 0x24ec <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x18c>
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	09 2e       	mov	r0, r25
    24b6:	00 0c       	add	r0, r0
    24b8:	aa 0b       	sbc	r26, r26
    24ba:	bb 0b       	sbc	r27, r27
    24bc:	2f 81       	ldd	r18, Y+7	; 0x07
    24be:	38 85       	ldd	r19, Y+8	; 0x08
    24c0:	49 85       	ldd	r20, Y+9	; 0x09
    24c2:	5a 85       	ldd	r21, Y+10	; 0x0a
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	a4 1f       	adc	r26, r20
    24ca:	b5 1f       	adc	r27, r21
    24cc:	8f 83       	std	Y+7, r24	; 0x07
    24ce:	98 87       	std	Y+8, r25	; 0x08
    24d0:	a9 87       	std	Y+9, r26	; 0x09
    24d2:	ba 87       	std	Y+10, r27	; 0x0a
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    24de:	38 89       	ldd	r19, Y+16	; 0x10
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	85 d0       	rcall	.+266    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	4a c0       	rjmp	.+148    	; 0x2580 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x220>
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    24f6:	38 89       	ldd	r19, Y+16	; 0x10
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	79 d0       	rcall	.+242    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    24fe:	9c 01       	movw	r18, r24
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	82 17       	cp	r24, r18
    2508:	93 07       	cpc	r25, r19
    250a:	0c f0       	brlt	.+2      	; 0x250e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x1ae>
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	44 23       	and	r20, r20
    2510:	f1 f0       	breq	.+60     	; 0x254e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x1ee>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	09 2e       	mov	r0, r25
    2518:	00 0c       	add	r0, r0
    251a:	aa 0b       	sbc	r26, r26
    251c:	bb 0b       	sbc	r27, r27
    251e:	2f 81       	ldd	r18, Y+7	; 0x07
    2520:	38 85       	ldd	r19, Y+8	; 0x08
    2522:	49 85       	ldd	r20, Y+9	; 0x09
    2524:	5a 85       	ldd	r21, Y+10	; 0x0a
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	a4 1f       	adc	r26, r20
    252c:	b5 1f       	adc	r27, r21
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
    2532:	a9 87       	std	Y+9, r26	; 0x09
    2534:	ba 87       	std	Y+10, r27	; 0x0a
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2540:	38 89       	ldd	r19, Y+16	; 0x10
    2542:	82 0f       	add	r24, r18
    2544:	93 1f       	adc	r25, r19
    2546:	54 d0       	rcall	.+168    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	19 c0       	rjmp	.+50     	; 0x2580 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x220>
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	2f 85       	ldd	r18, Y+15	; 0x0f
    2558:	38 89       	ldd	r19, Y+16	; 0x10
    255a:	82 0f       	add	r24, r18
    255c:	93 1f       	adc	r25, r19
    255e:	48 d0       	rcall	.+144    	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    2560:	09 2e       	mov	r0, r25
    2562:	00 0c       	add	r0, r0
    2564:	aa 0b       	sbc	r26, r26
    2566:	bb 0b       	sbc	r27, r27
    2568:	2f 81       	ldd	r18, Y+7	; 0x07
    256a:	38 85       	ldd	r19, Y+8	; 0x08
    256c:	49 85       	ldd	r20, Y+9	; 0x09
    256e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	a4 1f       	adc	r26, r20
    2576:	b5 1f       	adc	r27, r21
    2578:	8f 83       	std	Y+7, r24	; 0x07
    257a:	98 87       	std	Y+8, r25	; 0x08
    257c:	a9 87       	std	Y+9, r26	; 0x09
    257e:	ba 87       	std	Y+10, r27	; 0x0a
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	29 81       	ldd	r18, Y+1	; 0x01
    258c:	3a 81       	ldd	r19, Y+2	; 0x02
    258e:	89 89       	ldd	r24, Y+17	; 0x11
    2590:	9a 89       	ldd	r25, Y+18	; 0x12
    2592:	28 17       	cp	r18, r24
    2594:	39 07       	cpc	r19, r25
    2596:	0c f4       	brge	.+2      	; 0x259a <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x23a>
    2598:	78 cf       	rjmp	.-272    	; 0x248a <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x12a>
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__floatsisf>
    25a6:	6b 01       	movw	r12, r22
    25a8:	7c 01       	movw	r14, r24
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	9a 89       	ldd	r25, Y+18	; 0x12
    25ae:	02 97       	sbiw	r24, 0x02	; 2
    25b0:	09 2e       	mov	r0, r25
    25b2:	00 0c       	add	r0, r0
    25b4:	aa 0b       	sbc	r26, r26
    25b6:	bb 0b       	sbc	r27, r27
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__floatsisf>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 01       	movw	r18, r24
    25c6:	ad 01       	movw	r20, r26
    25c8:	c7 01       	movw	r24, r14
    25ca:	b6 01       	movw	r22, r12
    25cc:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__divsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8b 87       	std	Y+11, r24	; 0x0b
    25d6:	9c 87       	std	Y+12, r25	; 0x0c
    25d8:	ad 87       	std	Y+13, r26	; 0x0d
    25da:	be 87       	std	Y+14, r27	; 0x0e
    25dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    25de:	9c 85       	ldd	r25, Y+12	; 0x0c
    25e0:	ad 85       	ldd	r26, Y+13	; 0x0d
    25e2:	be 85       	ldd	r27, Y+14	; 0x0e
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	66 96       	adiw	r28, 0x16	; 22
    25ea:	e8 e0       	ldi	r30, 0x08	; 8
    25ec:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <__epilogue_restores__+0x14>

000025f0 <_ZN6EEWrapIiEcvKiEv>:
    25f0:	a2 e0       	ldi	r26, 0x02	; 2
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ee ef       	ldi	r30, 0xFE	; 254
    25f6:	f2 e1       	ldi	r31, 0x12	; 18
    25f8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	04 d0       	rcall	.+8      	; 0x260e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    2606:	22 96       	adiw	r28, 0x02	; 2
    2608:	e2 e0       	ldi	r30, 0x02	; 2
    260a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000260e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:
    260e:	a4 e0       	ldi	r26, 0x04	; 4
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ed e0       	ldi	r30, 0x0D	; 13
    2614:	f3 e1       	ldi	r31, 0x13	; 19
    2616:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	11 d0       	rcall	.+34     	; 0x2646 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    2624:	bc 01       	movw	r22, r24
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e 01       	movw	r18, r28
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	42 e0       	ldi	r20, 0x02	; 2
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	5c de       	rcall	.-840    	; 0x22f2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	24 96       	adiw	r28, 0x04	; 4
    2640:	e2 e0       	ldi	r30, 0x02	; 2
    2642:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002646 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:

        D &EEWrite( const T& v ){
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return self();
        }
        protected: STATIC_ACCESS
    2646:	a2 e0       	ldi	r26, 0x02	; 2
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e9 e2       	ldi	r30, 0x29	; 41
    264c:	f3 e1       	ldi	r31, 0x13	; 19
    264e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	22 96       	adiw	r28, 0x02	; 2
    265c:	e2 e0       	ldi	r30, 0x02	; 2
    265e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002662 <_ZNK6String5c_strEv>:
        Serial.println(tankPH, 2);
        //}
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}
    2662:	a2 e0       	ldi	r26, 0x02	; 2
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e7 e3       	ldi	r30, 0x37	; 55
    2668:	f3 e1       	ldi	r31, 0x13	; 19
    266a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	fc 01       	movw	r30, r24
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	22 96       	adiw	r28, 0x02	; 2
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002684 <_ZN15StringSumHelperC1EPKc>:
    2684:	a4 e0       	ldi	r26, 0x04	; 4
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e8 e4       	ldi	r30, 0x48	; 72
    268a:	f3 e1       	ldi	r31, 0x13	; 19
    268c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	7c 83       	std	Y+4, r23	; 0x04
    2696:	6b 83       	std	Y+3, r22	; 0x03
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	2b 81       	ldd	r18, Y+3	; 0x03
    269e:	3c 81       	ldd	r19, Y+4	; 0x04
    26a0:	b9 01       	movw	r22, r18
    26a2:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    26a6:	24 96       	adiw	r28, 0x04	; 4
    26a8:	e2 e0       	ldi	r30, 0x02	; 2
    26aa:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000026ae <_ZN5EERefaSEh>:
    26ae:	a3 e0       	ldi	r26, 0x03	; 3
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ed e5       	ldi	r30, 0x5D	; 93
    26b4:	f3 e1       	ldi	r31, 0x13	; 19
    26b6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	6b 83       	std	Y+3, r22	; 0x03
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	6b 81       	ldd	r22, Y+3	; 0x03
    26cc:	0e 94 d6 33 	call	0x67ac	; 0x67ac <eeprom_write_byte>
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	23 96       	adiw	r28, 0x03	; 3
    26d6:	e2 e0       	ldi	r30, 0x02	; 2
    26d8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000026dc <_ZN5EERef6updateEh>:
    26dc:	a3 e0       	ldi	r26, 0x03	; 3
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e4 e7       	ldi	r30, 0x74	; 116
    26e2:	f3 e1       	ldi	r31, 0x13	; 19
    26e4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	6b 83       	std	Y+3, r22	; 0x03
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	da dd       	rcall	.-1100   	; 0x22a8 <_ZNK5EERefcvKhEv>
    26f4:	98 2f       	mov	r25, r24
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	98 17       	cp	r25, r24
    26fa:	29 f0       	breq	.+10     	; 0x2706 <_ZN5EERef6updateEh+0x2a>
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	6b 81       	ldd	r22, Y+3	; 0x03
    2702:	d5 df       	rcall	.-86     	; 0x26ae <_ZN5EERefaSEh>
    2704:	02 c0       	rjmp	.+4      	; 0x270a <_ZN5EERef6updateEh+0x2e>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	23 96       	adiw	r28, 0x03	; 3
    270c:	e2 e0       	ldi	r30, 0x02	; 2
    270e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002712 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2712:	ab e0       	ldi	r26, 0x0B	; 11
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ef e8       	ldi	r30, 0x8F	; 143
    2718:	f3 e1       	ldi	r31, 0x13	; 19
    271a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    271e:	9f 83       	std	Y+7, r25	; 0x07
    2720:	8e 83       	std	Y+6, r24	; 0x06
    2722:	79 87       	std	Y+9, r23	; 0x09
    2724:	68 87       	std	Y+8, r22	; 0x08
    2726:	5b 87       	std	Y+11, r21	; 0x0b
    2728:	4a 87       	std	Y+10, r20	; 0x0a
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	19 82       	std	Y+1, r1	; 0x01
    272e:	20 c0       	rjmp	.+64     	; 0x2770 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	9f 81       	ldd	r25, Y+7	; 0x07
    2734:	fc 01       	movw	r30, r24
    2736:	80 81       	ld	r24, Z
    2738:	8b 83       	std	Y+3, r24	; 0x03
    273a:	88 85       	ldd	r24, Y+8	; 0x08
    273c:	99 85       	ldd	r25, Y+9	; 0x09
    273e:	9c 01       	movw	r18, r24
    2740:	2f 5f       	subi	r18, 0xFF	; 255
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	39 87       	std	Y+9, r19	; 0x09
    2746:	28 87       	std	Y+8, r18	; 0x08
    2748:	bc 01       	movw	r22, r24
    274a:	8e ee       	ldi	r24, 0xEE	; 238
    274c:	92 e0       	ldi	r25, 0x02	; 2
    274e:	bb dd       	rcall	.-1162   	; 0x22c6 <_ZN11EEPROMClassixEi>
    2750:	9d 83       	std	Y+5, r25	; 0x05
    2752:	8c 83       	std	Y+4, r24	; 0x04
    2754:	ce 01       	movw	r24, r28
    2756:	04 96       	adiw	r24, 0x04	; 4
    2758:	6b 81       	ldd	r22, Y+3	; 0x03
    275a:	c0 df       	rcall	.-128    	; 0x26dc <_ZN5EERef6updateEh>
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	9f 81       	ldd	r25, Y+7	; 0x07
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9f 83       	std	Y+7, r25	; 0x07
    2764:	8e 83       	std	Y+6, r24	; 0x06
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	29 81       	ldd	r18, Y+1	; 0x01
    2772:	3a 81       	ldd	r19, Y+2	; 0x02
    2774:	8a 85       	ldd	r24, Y+10	; 0x0a
    2776:	9b 85       	ldd	r25, Y+11	; 0x0b
    2778:	28 17       	cp	r18, r24
    277a:	39 07       	cpc	r19, r25
    277c:	c8 f2       	brcs	.-78     	; 0x2730 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    277e:	2b 96       	adiw	r28, 0x0b	; 11
    2780:	e2 e0       	ldi	r30, 0x02	; 2
    2782:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002786 <_ZN5PrintC1ERKS_>:
    2786:	a4 e0       	ldi	r26, 0x04	; 4
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e9 ec       	ldi	r30, 0xC9	; 201
    278c:	f3 e1       	ldi	r31, 0x13	; 19
    278e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	7c 83       	std	Y+4, r23	; 0x04
    2798:	6b 83       	std	Y+3, r22	; 0x03
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	24 ed       	ldi	r18, 0xD4	; 212
    27a0:	31 e0       	ldi	r19, 0x01	; 1
    27a2:	fc 01       	movw	r30, r24
    27a4:	31 83       	std	Z+1, r19	; 0x01
    27a6:	20 83       	st	Z, r18
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	fc 01       	movw	r30, r24
    27ae:	22 81       	ldd	r18, Z+2	; 0x02
    27b0:	33 81       	ldd	r19, Z+3	; 0x03
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	fc 01       	movw	r30, r24
    27b8:	33 83       	std	Z+3, r19	; 0x03
    27ba:	22 83       	std	Z+2, r18	; 0x02
    27bc:	24 96       	adiw	r28, 0x04	; 4
    27be:	e2 e0       	ldi	r30, 0x02	; 2
    27c0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000027c4 <_ZN13LiquidCrystalC1ERKS_>:
    27c4:	a4 e0       	ldi	r26, 0x04	; 4
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ca:	f3 e1       	ldi	r31, 0x13	; 19
    27cc:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	7c 83       	std	Y+4, r23	; 0x04
    27d6:	6b 83       	std	Y+3, r22	; 0x03
    27d8:	2b 81       	ldd	r18, Y+3	; 0x03
    27da:	3c 81       	ldd	r19, Y+4	; 0x04
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	b9 01       	movw	r22, r18
    27e2:	d1 df       	rcall	.-94     	; 0x2786 <_ZN5PrintC1ERKS_>
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	25 e8       	ldi	r18, 0x85	; 133
    27ea:	31 e0       	ldi	r19, 0x01	; 1
    27ec:	fc 01       	movw	r30, r24
    27ee:	31 83       	std	Z+1, r19	; 0x01
    27f0:	20 83       	st	Z, r18
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	fc 01       	movw	r30, r24
    27f8:	24 81       	ldd	r18, Z+4	; 0x04
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	fc 01       	movw	r30, r24
    2800:	24 83       	std	Z+4, r18	; 0x04
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	fc 01       	movw	r30, r24
    2808:	25 81       	ldd	r18, Z+5	; 0x05
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	fc 01       	movw	r30, r24
    2810:	25 83       	std	Z+5, r18	; 0x05
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	fc 01       	movw	r30, r24
    2818:	26 81       	ldd	r18, Z+6	; 0x06
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	fc 01       	movw	r30, r24
    2820:	26 83       	std	Z+6, r18	; 0x06
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	2b 81       	ldd	r18, Y+3	; 0x03
    2828:	3c 81       	ldd	r19, Y+4	; 0x04
    282a:	48 e0       	ldi	r20, 0x08	; 8
    282c:	f9 01       	movw	r30, r18
    282e:	37 96       	adiw	r30, 0x07	; 7
    2830:	dc 01       	movw	r26, r24
    2832:	17 96       	adiw	r26, 0x07	; 7
    2834:	01 90       	ld	r0, Z+
    2836:	0d 92       	st	X+, r0
    2838:	4a 95       	dec	r20
    283a:	e1 f7       	brne	.-8      	; 0x2834 <_ZN13LiquidCrystalC1ERKS_+0x70>
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	fc 01       	movw	r30, r24
    2842:	27 85       	ldd	r18, Z+15	; 0x0f
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	fc 01       	movw	r30, r24
    284a:	27 87       	std	Z+15, r18	; 0x0f
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	fc 01       	movw	r30, r24
    2852:	20 89       	ldd	r18, Z+16	; 0x10
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	fc 01       	movw	r30, r24
    285a:	20 8b       	std	Z+16, r18	; 0x10
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	fc 01       	movw	r30, r24
    2862:	21 89       	ldd	r18, Z+17	; 0x11
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	fc 01       	movw	r30, r24
    286a:	21 8b       	std	Z+17, r18	; 0x11
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	fc 01       	movw	r30, r24
    2872:	22 89       	ldd	r18, Z+18	; 0x12
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	fc 01       	movw	r30, r24
    287a:	22 8b       	std	Z+18, r18	; 0x12
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	fc 01       	movw	r30, r24
    2882:	23 89       	ldd	r18, Z+19	; 0x13
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	fc 01       	movw	r30, r24
    288a:	23 8b       	std	Z+19, r18	; 0x13
    288c:	29 81       	ldd	r18, Y+1	; 0x01
    288e:	3a 81       	ldd	r19, Y+2	; 0x02
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	fc 01       	movw	r30, r24
    2896:	84 89       	ldd	r24, Z+20	; 0x14
    2898:	95 89       	ldd	r25, Z+21	; 0x15
    289a:	a6 89       	ldd	r26, Z+22	; 0x16
    289c:	b7 89       	ldd	r27, Z+23	; 0x17
    289e:	f9 01       	movw	r30, r18
    28a0:	84 8b       	std	Z+20, r24	; 0x14
    28a2:	95 8b       	std	Z+21, r25	; 0x15
    28a4:	a6 8b       	std	Z+22, r26	; 0x16
    28a6:	b7 8b       	std	Z+23, r27	; 0x17
    28a8:	24 96       	adiw	r28, 0x04	; 4
    28aa:	e2 e0       	ldi	r30, 0x02	; 2
    28ac:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000028b0 <_ZN7LCDBaseC1ERKS_>:
    28b0:	a4 e0       	ldi	r26, 0x04	; 4
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	ee e5       	ldi	r30, 0x5E	; 94
    28b6:	f4 e1       	ldi	r31, 0x14	; 20
    28b8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	7c 83       	std	Y+4, r23	; 0x04
    28c2:	6b 83       	std	Y+3, r22	; 0x03
    28c4:	2b 81       	ldd	r18, Y+3	; 0x03
    28c6:	3c 81       	ldd	r19, Y+4	; 0x04
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	b9 01       	movw	r22, r18
    28ce:	7a df       	rcall	.-268    	; 0x27c4 <_ZN13LiquidCrystalC1ERKS_>
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	23 ea       	ldi	r18, 0xA3	; 163
    28d6:	31 e0       	ldi	r19, 0x01	; 1
    28d8:	fc 01       	movw	r30, r24
    28da:	31 83       	std	Z+1, r19	; 0x01
    28dc:	20 83       	st	Z, r18
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	2b 81       	ldd	r18, Y+3	; 0x03
    28e4:	3c 81       	ldd	r19, Y+4	; 0x04
    28e6:	4a e0       	ldi	r20, 0x0A	; 10
    28e8:	f9 01       	movw	r30, r18
    28ea:	78 96       	adiw	r30, 0x18	; 24
    28ec:	dc 01       	movw	r26, r24
    28ee:	58 96       	adiw	r26, 0x18	; 24
    28f0:	01 90       	ld	r0, Z+
    28f2:	0d 92       	st	X+, r0
    28f4:	4a 95       	dec	r20
    28f6:	e1 f7       	brne	.-8      	; 0x28f0 <_ZN7LCDBaseC1ERKS_+0x40>
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	fc 01       	movw	r30, r24
    28fe:	22 a1       	ldd	r18, Z+34	; 0x22
    2900:	33 a1       	ldd	r19, Z+35	; 0x23
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	fc 01       	movw	r30, r24
    2908:	33 a3       	std	Z+35, r19	; 0x23
    290a:	22 a3       	std	Z+34, r18	; 0x22
    290c:	24 96       	adiw	r28, 0x04	; 4
    290e:	e2 e0       	ldi	r30, 0x02	; 2
    2910:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002914 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2914:	ab e0       	ldi	r26, 0x0B	; 11
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e0 e9       	ldi	r30, 0x90	; 144
    291a:	f4 e1       	ldi	r31, 0x14	; 20
    291c:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	7c 83       	std	Y+4, r23	; 0x04
    2926:	6b 83       	std	Y+3, r22	; 0x03
    2928:	5e 83       	std	Y+6, r21	; 0x06
    292a:	4d 83       	std	Y+5, r20	; 0x05
    292c:	2f 83       	std	Y+7, r18	; 0x07
    292e:	19 87       	std	Y+9, r17	; 0x09
    2930:	08 87       	std	Y+8, r16	; 0x08
    2932:	fb 86       	std	Y+11, r15	; 0x0b
    2934:	ea 86       	std	Y+10, r14	; 0x0a
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	2b 81       	ldd	r18, Y+3	; 0x03
    293c:	3c 81       	ldd	r19, Y+4	; 0x04
    293e:	fc 01       	movw	r30, r24
    2940:	31 83       	std	Z+1, r19	; 0x01
    2942:	20 83       	st	Z, r18
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	fc 01       	movw	r30, r24
    294a:	13 82       	std	Z+3, r1	; 0x03
    294c:	12 82       	std	Z+2, r1	; 0x02
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	2d 81       	ldd	r18, Y+5	; 0x05
    2954:	3e 81       	ldd	r19, Y+6	; 0x06
    2956:	fc 01       	movw	r30, r24
    2958:	35 83       	std	Z+5, r19	; 0x05
    295a:	24 83       	std	Z+4, r18	; 0x04
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	2f 81       	ldd	r18, Y+7	; 0x07
    2962:	fc 01       	movw	r30, r24
    2964:	22 87       	std	Z+10, r18	; 0x0a
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	2a 85       	ldd	r18, Y+10	; 0x0a
    296c:	3b 85       	ldd	r19, Y+11	; 0x0b
    296e:	fc 01       	movw	r30, r24
    2970:	34 87       	std	Z+12, r19	; 0x0c
    2972:	23 87       	std	Z+11, r18	; 0x0b
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	0e 96       	adiw	r24, 0x0e	; 14
    297a:	28 85       	ldd	r18, Y+8	; 0x08
    297c:	39 85       	ldd	r19, Y+9	; 0x09
    297e:	b9 01       	movw	r22, r18
    2980:	97 df       	rcall	.-210    	; 0x28b0 <_ZN7LCDBaseC1ERKS_>
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	c2 96       	adiw	r24, 0x32	; 50
    2988:	6f e1       	ldi	r22, 0x1F	; 31
    298a:	71 e0       	ldi	r23, 0x01	; 1
    298c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	3a 81       	ldd	r19, Y+2	; 0x02
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a0 e4       	ldi	r26, 0x40	; 64
    299a:	b0 e4       	ldi	r27, 0x40	; 64
    299c:	f9 01       	movw	r30, r18
    299e:	80 af       	std	Z+56, r24	; 0x38
    29a0:	91 af       	std	Z+57, r25	; 0x39
    29a2:	a2 af       	std	Z+58, r26	; 0x3a
    29a4:	b3 af       	std	Z+59, r27	; 0x3b
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	04 d0       	rcall	.+8      	; 0x29b4 <_ZN8PHSensor4initEv>
    29ac:	2b 96       	adiw	r28, 0x0b	; 11
    29ae:	e6 e0       	ldi	r30, 0x06	; 6
    29b0:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

000029b4 <_ZN8PHSensor4initEv>:
    29b4:	aa e0       	ldi	r26, 0x0A	; 10
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e0 ee       	ldi	r30, 0xE0	; 224
    29ba:	f4 e1       	ldi	r31, 0x14	; 20
    29bc:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__prologue_saves__+0x1e>
    29c0:	9a 87       	std	Y+10, r25	; 0x0a
    29c2:	89 87       	std	Y+9, r24	; 0x09
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	8d e0       	ldi	r24, 0x0D	; 13
    29c8:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	fc 01       	movw	r30, r24
    29d2:	83 85       	ldd	r24, Z+11	; 0x0b
    29d4:	94 85       	ldd	r25, Z+12	; 0x0c
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    29dc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    29e0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    29e4:	da d2       	rcall	.+1460   	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	ab 83       	std	Y+3, r26	; 0x03
    29f0:	bc 83       	std	Y+4, r27	; 0x04
    29f2:	29 81       	ldd	r18, Y+1	; 0x01
    29f4:	3a 81       	ldd	r19, Y+2	; 0x02
    29f6:	4b 81       	ldd	r20, Y+3	; 0x03
    29f8:	5c 81       	ldd	r21, Y+4	; 0x04
    29fa:	69 81       	ldd	r22, Y+1	; 0x01
    29fc:	7a 81       	ldd	r23, Y+2	; 0x02
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	0e 94 87 24 	call	0x490e	; 0x490e <__unordsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	59 f4       	brne	.+22     	; 0x2a20 <_ZN8PHSensor4initEv+0x6c>
    2a0a:	29 85       	ldd	r18, Y+9	; 0x09
    2a0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	ab 81       	ldd	r26, Y+3	; 0x03
    2a14:	bc 81       	ldd	r27, Y+4	; 0x04
    2a16:	f9 01       	movw	r30, r18
    2a18:	80 af       	std	Z+56, r24	; 0x38
    2a1a:	91 af       	std	Z+57, r25	; 0x39
    2a1c:	a2 af       	std	Z+58, r26	; 0x3a
    2a1e:	b3 af       	std	Z+59, r27	; 0x3b
    2a20:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2a24:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2a28:	06 96       	adiw	r24, 0x06	; 6
    2a2a:	b7 d2       	rcall	.+1390   	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	11 e0       	ldi	r17, 0x01	; 1
    2a32:	9c 01       	movw	r18, r24
    2a34:	ad 01       	movw	r20, r26
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 87 24 	call	0x490e	; 0x490e <__unordsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <_ZN8PHSensor4initEv+0x90>
    2a42:	10 e0       	ldi	r17, 0x00	; 0
    2a44:	11 23       	and	r17, r17
    2a46:	71 f0       	breq	.+28     	; 0x2a64 <_ZN8PHSensor4initEv+0xb0>
    2a48:	1d 82       	std	Y+5, r1	; 0x05
    2a4a:	1e 82       	std	Y+6, r1	; 0x06
    2a4c:	1f 82       	std	Y+7, r1	; 0x07
    2a4e:	18 86       	std	Y+8, r1	; 0x08
    2a50:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2a54:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2a58:	06 96       	adiw	r24, 0x06	; 6
    2a5a:	9e 01       	movw	r18, r28
    2a5c:	2b 5f       	subi	r18, 0xFB	; 251
    2a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a60:	b9 01       	movw	r22, r18
    2a62:	ae d2       	rcall	.+1372   	; 0x2fc0 <_ZN6EEWrapIfEaSERKf>
    2a64:	2a 96       	adiw	r28, 0x0a	; 10
    2a66:	e3 e0       	ldi	r30, 0x03	; 3
    2a68:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <__epilogue_restores__+0x1e>

00002a6c <_ZN8PHSensor6UpdateEd>:
    2a6c:	aa e0       	ldi	r26, 0x0A	; 10
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	ec e3       	ldi	r30, 0x3C	; 60
    2a72:	f5 e1       	ldi	r31, 0x15	; 21
    2a74:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	4f 83       	std	Y+7, r20	; 0x07
    2a7e:	58 87       	std	Y+8, r21	; 0x08
    2a80:	69 87       	std	Y+9, r22	; 0x09
    2a82:	7a 87       	std	Y+10, r23	; 0x0a
    2a84:	2d 81       	ldd	r18, Y+5	; 0x05
    2a86:	3e 81       	ldd	r19, Y+6	; 0x06
    2a88:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8a:	98 85       	ldd	r25, Y+8	; 0x08
    2a8c:	a9 85       	ldd	r26, Y+9	; 0x09
    2a8e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a90:	f9 01       	movw	r30, r18
    2a92:	80 af       	std	Z+56, r24	; 0x38
    2a94:	91 af       	std	Z+57, r25	; 0x39
    2a96:	a2 af       	std	Z+58, r26	; 0x3a
    2a98:	b3 af       	std	Z+59, r27	; 0x3b
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	80 ad       	ldd	r24, Z+56	; 0x38
    2aa2:	91 ad       	ldd	r25, Z+57	; 0x39
    2aa4:	a2 ad       	ldd	r26, Z+58	; 0x3a
    2aa6:	b3 ad       	ldd	r27, Z+59	; 0x3b
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	ab 83       	std	Y+3, r26	; 0x03
    2aae:	bc 83       	std	Y+4, r27	; 0x04
    2ab0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2ab4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2ab8:	9c 01       	movw	r18, r24
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	bc 01       	movw	r22, r24
    2ac0:	c9 01       	movw	r24, r18
    2ac2:	7e d2       	rcall	.+1276   	; 0x2fc0 <_ZN6EEWrapIfEaSERKf>
    2ac4:	2a 96       	adiw	r28, 0x0a	; 10
    2ac6:	e2 e0       	ldi	r30, 0x02	; 2
    2ac8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002acc <_ZN8PHSensor5GetPHEv>:
    2acc:	a8 e0       	ldi	r26, 0x08	; 8
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ec e6       	ldi	r30, 0x6C	; 108
    2ad2:	f5 e1       	ldi	r31, 0x15	; 21
    2ad4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2ad8:	98 87       	std	Y+8, r25	; 0x08
    2ada:	8f 83       	std	Y+7, r24	; 0x07
    2adc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2ae0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2ae4:	06 96       	adiw	r24, 0x06	; 6
    2ae6:	59 d2       	rcall	.+1202   	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	22 e0       	ldi	r18, 0x02	; 2
    2aee:	ac 01       	movw	r20, r24
    2af0:	bd 01       	movw	r22, r26
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	0e 94 8b 2a 	call	0x5516	; 0x5516 <_ZN6StringC1Efh>
    2afa:	ce 01       	movw	r24, r28
    2afc:	01 96       	adiw	r24, 0x01	; 1
    2afe:	b1 dd       	rcall	.-1182   	; 0x2662 <_ZNK6String5c_strEv>
    2b00:	9c 01       	movw	r18, r24
    2b02:	8f 81       	ldd	r24, Y+7	; 0x07
    2b04:	98 85       	ldd	r25, Y+8	; 0x08
    2b06:	c2 96       	adiw	r24, 0x32	; 50
    2b08:	b9 01       	movw	r22, r18
    2b0a:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    2b0e:	ce 01       	movw	r24, r28
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    2b16:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2b1a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2b1e:	06 96       	adiw	r24, 0x06	; 6
    2b20:	3c d2       	rcall	.+1144   	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	28 96       	adiw	r28, 0x08	; 8
    2b2c:	e2 e0       	ldi	r30, 0x02	; 2
    2b2e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002b32 <_ZN8PHSensor11CalculatePHEv>:
    2b32:	a2 e0       	ldi	r26, 0x02	; 2
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	ef e9       	ldi	r30, 0x9F	; 159
    2b38:	f5 e1       	ldi	r31, 0x15	; 21
    2b3a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	fc 01       	movw	r30, r24
    2b48:	95 85       	ldd	r25, Z+13	; 0x0d
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	89 27       	eor	r24, r25
    2b4e:	88 23       	and	r24, r24
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <_ZN8PHSensor11CalculatePHEv+0x22>
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <_ZN8PHSensor11CalculatePHEv+0x28>
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	04 d0       	rcall	.+8      	; 0x2b62 <_ZN8PHSensor10getPHValueEv>
    2b5a:	22 96       	adiw	r28, 0x02	; 2
    2b5c:	e2 e0       	ldi	r30, 0x02	; 2
    2b5e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002b62 <_ZN8PHSensor10getPHValueEv>:
    2b62:	a0 e1       	ldi	r26, 0x10	; 16
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e7 eb       	ldi	r30, 0xB7	; 183
    2b68:	f5 e1       	ldi	r31, 0x15	; 21
    2b6a:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    2b6e:	98 8b       	std	Y+16, r25	; 0x10
    2b70:	8f 87       	std	Y+15, r24	; 0x0f
    2b72:	80 ed       	ldi	r24, 0xD0	; 208
    2b74:	97 e0       	ldi	r25, 0x07	; 7
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	8f ee       	ldi	r24, 0xEF	; 239
    2b7c:	92 e0       	ldi	r25, 0x02	; 2
    2b7e:	fc 01       	movw	r30, r24
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	89 f4       	brne	.+34     	; 0x2ba8 <_ZN8PHSensor10getPHValueEv+0x46>
    2b86:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2b92:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2b96:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2b9a:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2b9e:	8f ee       	ldi	r24, 0xEF	; 239
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	21 e0       	ldi	r18, 0x01	; 1
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	20 83       	st	Z, r18
    2ba8:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2bac:	9b 01       	movw	r18, r22
    2bae:	ac 01       	movw	r20, r24
    2bb0:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2bb4:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2bb8:	a0 91 01 03 	lds	r26, 0x0301	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2bbc:	b0 91 02 03 	lds	r27, 0x0302	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2bc0:	28 1b       	sub	r18, r24
    2bc2:	39 0b       	sbc	r19, r25
    2bc4:	4a 0b       	sbc	r20, r26
    2bc6:	5b 0b       	sbc	r21, r27
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	09 2e       	mov	r0, r25
    2bce:	00 0c       	add	r0, r0
    2bd0:	aa 0b       	sbc	r26, r26
    2bd2:	bb 0b       	sbc	r27, r27
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	82 17       	cp	r24, r18
    2bd8:	93 07       	cpc	r25, r19
    2bda:	a4 07       	cpc	r26, r20
    2bdc:	b5 07       	cpc	r27, r21
    2bde:	08 f0       	brcs	.+2      	; 0x2be2 <_ZN8PHSensor10getPHValueEv+0x80>
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	66 23       	and	r22, r22
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <_ZN8PHSensor10getPHValueEv+0x86>
    2be6:	d4 c0       	rjmp	.+424    	; 0x2d90 <_ZN8PHSensor10getPHValueEv+0x22e>
    2be8:	8e e1       	ldi	r24, 0x1E	; 30
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
    2bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf2:	98 89       	ldd	r25, Y+16	; 0x10
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	0e 94 b0 28 	call	0x5160	; 0x5160 <analogRead>
    2bfe:	9a 87       	std	Y+10, r25	; 0x0a
    2c00:	89 87       	std	Y+9, r24	; 0x09
    2c02:	8a ec       	ldi	r24, 0xCA	; 202
    2c04:	93 e0       	ldi	r25, 0x03	; 3
    2c06:	bc 01       	movw	r22, r24
    2c08:	80 ec       	ldi	r24, 0xC0	; 192
    2c0a:	94 e0       	ldi	r25, 0x04	; 4
    2c0c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	4a e0       	ldi	r20, 0x0A	; 10
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	bc 01       	movw	r22, r24
    2c1a:	80 ec       	ldi	r24, 0xC0	; 192
    2c1c:	94 e0       	ldi	r25, 0x04	; 4
    2c1e:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_ZN5Print7printlnEii>
    2c22:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2c26:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2c:	98 89       	ldd	r25, Y+16	; 0x10
    2c2e:	fc 01       	movw	r30, r24
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	bc 01       	movw	r22, r24
    2c36:	6f 5f       	subi	r22, 0xFF	; 255
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c3c:	58 89       	ldd	r21, Y+16	; 0x10
    2c3e:	fa 01       	movw	r30, r20
    2c40:	73 83       	std	Z+3, r23	; 0x03
    2c42:	62 83       	std	Z+2, r22	; 0x02
    2c44:	07 96       	adiw	r24, 0x07	; 7
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	82 0f       	add	r24, r18
    2c4c:	93 1f       	adc	r25, r19
    2c4e:	9e 01       	movw	r18, r28
    2c50:	27 5f       	subi	r18, 0xF7	; 247
    2c52:	3f 4f       	sbci	r19, 0xFF	; 255
    2c54:	b9 01       	movw	r22, r18
    2c56:	c8 d1       	rcall	.+912    	; 0x2fe8 <_ZN6EEWrapIiEaSERKi>
    2c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5a:	98 89       	ldd	r25, Y+16	; 0x10
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	22 81       	ldd	r18, Z+2	; 0x02
    2c60:	33 81       	ldd	r19, Z+3	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	28 17       	cp	r18, r24
    2c68:	39 07       	cpc	r19, r25
    2c6a:	29 f4       	brne	.+10     	; 0x2c76 <_ZN8PHSensor10getPHValueEv+0x114>
    2c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6e:	98 89       	ldd	r25, Y+16	; 0x10
    2c70:	fc 01       	movw	r30, r24
    2c72:	13 82       	std	Z+3, r1	; 0x03
    2c74:	12 82       	std	Z+2, r1	; 0x02
    2c76:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2c7a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2c7e:	0e 96       	adiw	r24, 0x0e	; 14
    2c80:	2b 81       	ldd	r18, Y+3	; 0x03
    2c82:	3c 81       	ldd	r19, Y+4	; 0x04
    2c84:	b9 01       	movw	r22, r18
    2c86:	6c db       	rcall	.-2344   	; 0x2360 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	af 83       	std	Y+7, r26	; 0x07
    2c92:	b8 87       	std	Y+8, r27	; 0x08
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 ea       	ldi	r20, 0xA0	; 160
    2c9a:	50 e4       	ldi	r21, 0x40	; 64
    2c9c:	6d 81       	ldd	r22, Y+5	; 0x05
    2c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    2ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca2:	98 85       	ldd	r25, Y+8	; 0x08
    2ca4:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__divsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cc2:	38 89       	ldd	r19, Y+16	; 0x10
    2cc4:	f9 01       	movw	r30, r18
    2cc6:	86 83       	std	Z+6, r24	; 0x06
    2cc8:	97 83       	std	Z+7, r25	; 0x07
    2cca:	a0 87       	std	Z+8, r26	; 0x08
    2ccc:	b1 87       	std	Z+9, r27	; 0x09
    2cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd0:	98 89       	ldd	r25, Y+16	; 0x10
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	86 81       	ldd	r24, Z+6	; 0x06
    2cd6:	97 81       	ldd	r25, Z+7	; 0x07
    2cd8:	a0 85       	ldd	r26, Z+8	; 0x08
    2cda:	b1 85       	ldd	r27, Z+9	; 0x09
    2cdc:	9c 01       	movw	r18, r24
    2cde:	ad 01       	movw	r20, r26
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	80 e2       	ldi	r24, 0x20	; 32
    2ce6:	90 e4       	ldi	r25, 0x40	; 64
    2ce8:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__subsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	2c ee       	ldi	r18, 0xEC	; 236
    2cf2:	31 e5       	ldi	r19, 0x51	; 81
    2cf4:	48 e3       	ldi	r20, 0x38	; 56
    2cf6:	5e e3       	ldi	r21, 0x3E	; 62
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__divsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 ee       	ldi	r20, 0xE0	; 224
    2d0a:	50 e4       	ldi	r21, 0x40	; 64
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 71 22 	call	0x44e2	; 0x44e2 <__addsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	7c 01       	movw	r14, r24
    2d1a:	8d 01       	movw	r16, r26
    2d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1e:	98 89       	ldd	r25, Y+16	; 0x10
    2d20:	fc 01       	movw	r30, r24
    2d22:	80 ad       	ldd	r24, Z+56	; 0x38
    2d24:	91 ad       	ldd	r25, Z+57	; 0x39
    2d26:	a2 ad       	ldd	r26, Z+58	; 0x3a
    2d28:	b3 ad       	ldd	r27, Z+59	; 0x3b
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	ad 01       	movw	r20, r26
    2d2e:	c8 01       	movw	r24, r16
    2d30:	b7 01       	movw	r22, r14
    2d32:	0e 94 71 22 	call	0x44e2	; 0x44e2 <__addsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8b 87       	std	Y+11, r24	; 0x0b
    2d3c:	9c 87       	std	Y+12, r25	; 0x0c
    2d3e:	ad 87       	std	Y+13, r26	; 0x0d
    2d40:	be 87       	std	Y+14, r27	; 0x0e
    2d42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d46:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d48:	be 85       	ldd	r27, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	a9 01       	movw	r20, r18
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__cmpsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	24 f4       	brge	.+8      	; 0x2d64 <_ZN8PHSensor10getPHValueEv+0x202>
    2d5c:	1b 86       	std	Y+11, r1	; 0x0b
    2d5e:	1c 86       	std	Y+12, r1	; 0x0c
    2d60:	1d 86       	std	Y+13, r1	; 0x0d
    2d62:	1e 86       	std	Y+14, r1	; 0x0e
    2d64:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2d68:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2d6c:	06 96       	adiw	r24, 0x06	; 6
    2d6e:	9e 01       	movw	r18, r28
    2d70:	25 5f       	subi	r18, 0xF5	; 245
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	b9 01       	movw	r22, r18
    2d76:	24 d1       	rcall	.+584    	; 0x2fc0 <_ZN6EEWrapIfEaSERKf>
    2d78:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2d84:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2d88:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2d8c:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2d90:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2d94:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2d98:	06 96       	adiw	r24, 0x06	; 6
    2d9a:	ff d0       	rcall	.+510    	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	60 96       	adiw	r28, 0x10	; 16
    2da6:	e6 e0       	ldi	r30, 0x06	; 6
    2da8:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00002dac <_ZN15StringSumHelperD1Ev>:
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2dac:	a2 e0       	ldi	r26, 0x02	; 2
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	ec ed       	ldi	r30, 0xDC	; 220
    2db2:	f6 e1       	ldi	r31, 0x16	; 22
    2db4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    2dc4:	22 96       	adiw	r28, 0x02	; 2
    2dc6:	e2 e0       	ldi	r30, 0x02	; 2
    2dc8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002dcc <_ZN8PHSensor12PrintPHToLCDEv>:
void PHSensor::PrintPHToLCD() {
    2dcc:	aa e1       	ldi	r26, 0x1A	; 26
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	ec ee       	ldi	r30, 0xEC	; 236
    2dd2:	f6 e1       	ldi	r31, 0x16	; 22
    2dd4:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    2dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dda:	89 8f       	std	Y+25, r24	; 0x19
    GetPH();
    2ddc:	89 8d       	ldd	r24, Y+25	; 0x19
    2dde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2de0:	75 de       	rcall	.-790    	; 0x2acc <_ZN8PHSensor5GetPHEv>
    static unsigned long printTime = millis();
    2de2:	87 ef       	ldi	r24, 0xF7	; 247
    2de4:	92 e0       	ldi	r25, 0x02	; 2
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	88 23       	and	r24, r24
    2dec:	89 f4       	brne	.+34     	; 0x2e10 <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    2dee:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2dfa:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2dfe:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2e02:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2e06:	87 ef       	ldi	r24, 0xF7	; 247
    2e08:	92 e0       	ldi	r25, 0x02	; 2
    2e0a:	21 e0       	ldi	r18, 0x01	; 1
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	20 83       	st	Z, r18
    if(millis() - printTime > _printPHEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    2e10:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2e14:	9b 01       	movw	r18, r22
    2e16:	ac 01       	movw	r20, r24
    2e18:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2e1c:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2e20:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2e24:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2e28:	28 1b       	sub	r18, r24
    2e2a:	39 0b       	sbc	r19, r25
    2e2c:	4a 0b       	sbc	r20, r26
    2e2e:	5b 0b       	sbc	r21, r27
    2e30:	89 8d       	ldd	r24, Y+25	; 0x19
    2e32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e34:	fc 01       	movw	r30, r24
    2e36:	84 81       	ldd	r24, Z+4	; 0x04
    2e38:	95 81       	ldd	r25, Z+5	; 0x05
    2e3a:	80 57       	subi	r24, 0x70	; 112
    2e3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e3e:	09 2e       	mov	r0, r25
    2e40:	00 0c       	add	r0, r0
    2e42:	aa 0b       	sbc	r26, r26
    2e44:	bb 0b       	sbc	r27, r27
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	82 17       	cp	r24, r18
    2e4a:	93 07       	cpc	r25, r19
    2e4c:	a4 07       	cpc	r26, r20
    2e4e:	b5 07       	cpc	r27, r21
    2e50:	08 f0       	brcs	.+2      	; 0x2e54 <_ZN8PHSensor12PrintPHToLCDEv+0x88>
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	66 23       	and	r22, r22
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <_ZN8PHSensor12PrintPHToLCDEv+0x8e>
    2e58:	65 c0       	rjmp	.+202    	; 0x2f24 <_ZN8PHSensor12PrintPHToLCDEv+0x158>
        if(_printToLCD) {
    2e5a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e5e:	fc 01       	movw	r30, r24
    2e60:	82 85       	ldd	r24, Z+10	; 0x0a
    2e62:	88 23       	and	r24, r24
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <_ZN8PHSensor12PrintPHToLCDEv+0x9c>
    2e66:	52 c0       	rjmp	.+164    	; 0x2f0c <_ZN8PHSensor12PrintPHToLCDEv+0x140>
            //Serial.print(F("LCD Print: "));
            //Serial.println(tankPH, 2);
            String enabled = "";
    2e68:	ce 01       	movw	r24, r28
    2e6a:	0d 96       	adiw	r24, 0x0d	; 13
    2e6c:	6f e1       	ldi	r22, 0x1F	; 31
    2e6e:	71 e0       	ldi	r23, 0x01	; 1
    2e70:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
            if(_enabled) {
    2e74:	89 8d       	ldd	r24, Y+25	; 0x19
    2e76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e78:	fc 01       	movw	r30, r24
    2e7a:	85 85       	ldd	r24, Z+13	; 0x0d
    2e7c:	88 23       	and	r24, r24
    2e7e:	31 f0       	breq	.+12     	; 0x2e8c <_ZN8PHSensor12PrintPHToLCDEv+0xc0>
                enabled = "<";
    2e80:	ce 01       	movw	r24, r28
    2e82:	0d 96       	adiw	r24, 0x0d	; 13
    2e84:	60 e2       	ldi	r22, 0x20	; 32
    2e86:	71 e0       	ldi	r23, 0x01	; 1
    2e88:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
            }

            String text = "PH: " + PhString + " " + enabled;
    2e8c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e90:	8c 01       	movw	r16, r24
    2e92:	0e 5c       	subi	r16, 0xCE	; 206
    2e94:	1f 4f       	sbci	r17, 0xFF	; 255
    2e96:	ce 01       	movw	r24, r28
    2e98:	07 96       	adiw	r24, 0x07	; 7
    2e9a:	62 e2       	ldi	r22, 0x22	; 34
    2e9c:	71 e0       	ldi	r23, 0x01	; 1
    2e9e:	f2 db       	rcall	.-2076   	; 0x2684 <_ZN15StringSumHelperC1EPKc>
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	07 96       	adiw	r24, 0x07	; 7
    2ea4:	b8 01       	movw	r22, r16
    2ea6:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZplRK15StringSumHelperRK6String>
    2eaa:	67 e2       	ldi	r22, 0x27	; 39
    2eac:	71 e0       	ldi	r23, 0x01	; 1
    2eae:	0e 94 44 2b 	call	0x5688	; 0x5688 <_ZplRK15StringSumHelperPKc>
    2eb2:	9c 01       	movw	r18, r24
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	0d 96       	adiw	r24, 0x0d	; 13
    2eb8:	bc 01       	movw	r22, r24
    2eba:	c9 01       	movw	r24, r18
    2ebc:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZplRK15StringSumHelperRK6String>
    2ec0:	9c 01       	movw	r18, r24
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	43 96       	adiw	r24, 0x13	; 19
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    2ecc:	ce 01       	movw	r24, r28
    2ece:	07 96       	adiw	r24, 0x07	; 7
    2ed0:	6d df       	rcall	.-294    	; 0x2dac <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(0, text);
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	43 96       	adiw	r24, 0x13	; 19
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	ce 01       	movw	r24, r28
    2eda:	01 96       	adiw	r24, 0x01	; 1
    2edc:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    2ee0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ee2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ee4:	0e 96       	adiw	r24, 0x0e	; 14
    2ee6:	9e 01       	movw	r18, r28
    2ee8:	2f 5f       	subi	r18, 0xFF	; 255
    2eea:	3f 4f       	sbci	r19, 0xFF	; 255
    2eec:	a9 01       	movw	r20, r18
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	00 d9       	rcall	.-3584   	; 0x20f4 <_ZN7LCDBase9PrintLineEs6String>
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	01 96       	adiw	r24, 0x01	; 1
    2ef8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }

            String text = "PH: " + PhString + " " + enabled;
    2efc:	ce 01       	movw	r24, r28
    2efe:	43 96       	adiw	r24, 0x13	; 19
    2f00:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
            _lcd.PrintLine(0, text);
    2f04:	ce 01       	movw	r24, r28
    2f06:	0d 96       	adiw	r24, 0x0d	; 13
    2f08:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
        }
        //digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    2f0c:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2f18:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2f1c:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2f20:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    }
}
    2f24:	6a 96       	adiw	r28, 0x1a	; 26
    2f26:	e4 e0       	ldi	r30, 0x04	; 4
    2f28:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00002f2c <_ZN8PHSensor6TurnOnEv>:



void PHSensor::TurnOn() {
    2f2c:	a2 e0       	ldi	r26, 0x02	; 2
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	ec e9       	ldi	r30, 0x9C	; 156
    2f32:	f7 e1       	ldi	r31, 0x17	; 23
    2f34:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	21 e0       	ldi	r18, 0x01	; 1
    2f42:	fc 01       	movw	r30, r24
    2f44:	25 87       	std	Z+13, r18	; 0x0d
    digitalWrite(_relayPin, HIGH);
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	83 85       	ldd	r24, Z+11	; 0x0b
    2f4e:	94 85       	ldd	r25, Z+12	; 0x0c
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
}
    2f56:	22 96       	adiw	r28, 0x02	; 2
    2f58:	e2 e0       	ldi	r30, 0x02	; 2
    2f5a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002f5e <_ZN8PHSensor7TurnOffEv>:

void PHSensor::TurnOff() {
    2f5e:	a2 e0       	ldi	r26, 0x02	; 2
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e5 eb       	ldi	r30, 0xB5	; 181
    2f64:	f7 e1       	ldi	r31, 0x17	; 23
    2f66:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	fc 01       	movw	r30, r24
    2f74:	15 86       	std	Z+13, r1	; 0x0d
    digitalWrite(_relayPin, LOW);
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	83 85       	ldd	r24, Z+11	; 0x0b
    2f7e:	94 85       	ldd	r25, Z+12	; 0x0c
    2f80:	60 e0       	ldi	r22, 0x00	; 0
    2f82:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
    delay(1000);
    2f86:	68 ee       	ldi	r22, 0xE8	; 232
    2f88:	73 e0       	ldi	r23, 0x03	; 3
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 31 28 	call	0x5062	; 0x5062 <delay>

}
    2f92:	22 96       	adiw	r28, 0x02	; 2
    2f94:	e2 e0       	ldi	r30, 0x02	; 2
    2f96:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002f9a <_ZN6EEWrapIfEcvKfEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    2f9a:	a2 e0       	ldi	r26, 0x02	; 2
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    2fa0:	f7 e1       	ldi	r31, 0x17	; 23
    2fa2:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	30 d0       	rcall	.+96     	; 0x3010 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	22 96       	adiw	r28, 0x02	; 2
    2fba:	e2 e0       	ldi	r30, 0x02	; 2
    2fbc:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002fc0 <_ZN6EEWrapIfEaSERKf>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    2fc0:	a4 e0       	ldi	r26, 0x04	; 4
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    2fc6:	f7 e1       	ldi	r31, 0x17	; 23
    2fc8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2fcc:	9a 83       	std	Y+2, r25	; 0x02
    2fce:	89 83       	std	Y+1, r24	; 0x01
    2fd0:	7c 83       	std	Y+4, r23	; 0x04
    2fd2:	6b 83       	std	Y+3, r22	; 0x03
    2fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	b9 01       	movw	r22, r18
    2fde:	38 d0       	rcall	.+112    	; 0x3050 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    2fe0:	24 96       	adiw	r28, 0x04	; 4
    2fe2:	e2 e0       	ldi	r30, 0x02	; 2
    2fe4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00002fe8 <_ZN6EEWrapIiEaSERKi>:
    2fe8:	a4 e0       	ldi	r26, 0x04	; 4
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	ea ef       	ldi	r30, 0xFA	; 250
    2fee:	f7 e1       	ldi	r31, 0x17	; 23
    2ff0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    2ff4:	9a 83       	std	Y+2, r25	; 0x02
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	7c 83       	std	Y+4, r23	; 0x04
    2ffa:	6b 83       	std	Y+3, r22	; 0x03
    2ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	9a 81       	ldd	r25, Y+2	; 0x02
    3004:	b9 01       	movw	r22, r18
    3006:	42 d0       	rcall	.+132    	; 0x308c <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    3008:	24 96       	adiw	r28, 0x04	; 4
    300a:	e2 e0       	ldi	r30, 0x02	; 2
    300c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003010 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    3010:	a6 e0       	ldi	r26, 0x06	; 6
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	ee e0       	ldi	r30, 0x0E	; 14
    3016:	f8 e1       	ldi	r31, 0x18	; 24
    3018:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	9e 81       	ldd	r25, Y+6	; 0x06
    3024:	51 d0       	rcall	.+162    	; 0x30c8 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3026:	bc 01       	movw	r22, r24
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9e 01       	movw	r18, r28
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	82 0f       	add	r24, r18
    3034:	93 1f       	adc	r25, r19
    3036:	44 e0       	ldi	r20, 0x04	; 4
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	5b d9       	rcall	.-3402   	; 0x22f2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	ab 81       	ldd	r26, Y+3	; 0x03
    3042:	bc 81       	ldd	r27, Y+4	; 0x04
        }
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	26 96       	adiw	r28, 0x06	; 6
    304a:	e2 e0       	ldi	r30, 0x02	; 2
    304c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003050 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:

        D &EEWrite( const T& v ){
    3050:	a4 e0       	ldi	r26, 0x04	; 4
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ee e2       	ldi	r30, 0x2E	; 46
    3056:	f8 e1       	ldi	r31, 0x18	; 24
    3058:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	7c 83       	std	Y+4, r23	; 0x04
    3062:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	2f d0       	rcall	.+94     	; 0x30c8 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    306a:	bc 01       	movw	r22, r24
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	2b 81       	ldd	r18, Y+3	; 0x03
    3072:	3c 81       	ldd	r19, Y+4	; 0x04
    3074:	82 0f       	add	r24, r18
    3076:	93 1f       	adc	r25, r19
    3078:	44 e0       	ldi	r20, 0x04	; 4
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	4a db       	rcall	.-2412   	; 0x2712 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	22 d0       	rcall	.+68     	; 0x30c8 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
        }
    3084:	24 96       	adiw	r28, 0x04	; 4
    3086:	e2 e0       	ldi	r30, 0x02	; 2
    3088:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000308c <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return(ret);
        }

        D &EEWrite( const T& v ){
    308c:	a4 e0       	ldi	r26, 0x04	; 4
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	ec e4       	ldi	r30, 0x4C	; 76
    3092:	f8 e1       	ldi	r31, 0x18	; 24
    3094:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3098:	9a 83       	std	Y+2, r25	; 0x02
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	7c 83       	std	Y+4, r23	; 0x04
    309e:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	d0 da       	rcall	.-2656   	; 0x2646 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    30a6:	bc 01       	movw	r22, r24
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	2b 81       	ldd	r18, Y+3	; 0x03
    30ae:	3c 81       	ldd	r19, Y+4	; 0x04
    30b0:	82 0f       	add	r24, r18
    30b2:	93 1f       	adc	r25, r19
    30b4:	42 e0       	ldi	r20, 0x02	; 2
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	2c db       	rcall	.-2472   	; 0x2712 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	9a 81       	ldd	r25, Y+2	; 0x02
    30be:	c3 da       	rcall	.-2682   	; 0x2646 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    30c0:	24 96       	adiw	r28, 0x04	; 4
    30c2:	e2 e0       	ldi	r30, 0x02	; 2
    30c4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000030c8 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:
        protected: STATIC_ACCESS
    30c8:	a2 e0       	ldi	r26, 0x02	; 2
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ea e6       	ldi	r30, 0x6A	; 106
    30ce:	f8 e1       	ldi	r31, 0x18	; 24
    30d0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	22 96       	adiw	r28, 0x02	; 2
    30de:	e2 e0       	ldi	r30, 0x02	; 2
    30e0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000030e4 <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    30e4:	ab e0       	ldi	r26, 0x0B	; 11
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e8 e7       	ldi	r30, 0x78	; 120
    30ea:	f8 e1       	ldi	r31, 0x18	; 24
    30ec:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	7c 83       	std	Y+4, r23	; 0x04
    30f6:	6b 83       	std	Y+3, r22	; 0x03
    30f8:	5e 83       	std	Y+6, r21	; 0x06
    30fa:	4d 83       	std	Y+5, r20	; 0x05
    30fc:	2f 83       	std	Y+7, r18	; 0x07
    30fe:	19 87       	std	Y+9, r17	; 0x09
    3100:	08 87       	std	Y+8, r16	; 0x08
    3102:	fb 86       	std	Y+11, r15	; 0x0b
    3104:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	2b 81       	ldd	r18, Y+3	; 0x03
    310c:	3c 81       	ldd	r19, Y+4	; 0x04
    310e:	fc 01       	movw	r30, r24
    3110:	31 83       	std	Z+1, r19	; 0x01
    3112:	20 83       	st	Z, r18
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	fc 01       	movw	r30, r24
    311a:	13 82       	std	Z+3, r1	; 0x03
    311c:	12 82       	std	Z+2, r1	; 0x02
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	2d 81       	ldd	r18, Y+5	; 0x05
    3124:	3e 81       	ldd	r19, Y+6	; 0x06
    3126:	fc 01       	movw	r30, r24
    3128:	35 83       	std	Z+5, r19	; 0x05
    312a:	24 83       	std	Z+4, r18	; 0x04
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	9a 81       	ldd	r25, Y+2	; 0x02
    3130:	2f 81       	ldd	r18, Y+7	; 0x07
    3132:	fc 01       	movw	r30, r24
    3134:	26 83       	std	Z+6, r18	; 0x06
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	2a 85       	ldd	r18, Y+10	; 0x0a
    313c:	3b 85       	ldd	r19, Y+11	; 0x0b
    313e:	fc 01       	movw	r30, r24
    3140:	30 87       	std	Z+8, r19	; 0x08
    3142:	27 83       	std	Z+7, r18	; 0x07
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	9a 81       	ldd	r25, Y+2	; 0x02
    3148:	fc 01       	movw	r30, r24
    314a:	13 86       	std	Z+11, r1	; 0x0b
    314c:	12 86       	std	Z+10, r1	; 0x0a
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	9a 81       	ldd	r25, Y+2	; 0x02
    3152:	0c 96       	adiw	r24, 0x0c	; 12
    3154:	28 85       	ldd	r18, Y+8	; 0x08
    3156:	39 85       	ldd	r19, Y+9	; 0x09
    3158:	b9 01       	movw	r22, r18
    315a:	aa db       	rcall	.-2220   	; 0x28b0 <_ZN7LCDBaseC1ERKS_>
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	c0 96       	adiw	r24, 0x30	; 48
    3162:	69 e2       	ldi	r22, 0x29	; 41
    3164:	71 e0       	ldi	r23, 0x01	; 1
    3166:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	2e e0       	ldi	r18, 0x0E	; 14
    3170:	31 e0       	ldi	r19, 0x01	; 1
    3172:	fc 01       	movw	r30, r24
    3174:	37 ab       	std	Z+55, r19	; 0x37
    3176:	26 ab       	std	Z+54, r18	; 0x36
    init();
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	04 d0       	rcall	.+8      	; 0x3186 <_ZN9TDSSensor4initEv>
}
    317e:	2b 96       	adiw	r28, 0x0b	; 11
    3180:	e6 e0       	ldi	r30, 0x06	; 6
    3182:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00003186 <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    3186:	aa e0       	ldi	r26, 0x0A	; 10
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e9 ec       	ldi	r30, 0xC9	; 201
    318c:	f8 e1       	ldi	r31, 0x18	; 24
    318e:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__prologue_saves__+0x1e>
    3192:	9a 87       	std	Y+10, r25	; 0x0a
    3194:	89 87       	std	Y+9, r24	; 0x09
    //led to show board working
    pinMode(13, OUTPUT);
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	8d e0       	ldi	r24, 0x0D	; 13
    319a:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    pinMode(_relayPin, OUTPUT);
    319e:	89 85       	ldd	r24, Y+9	; 0x09
    31a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a2:	fc 01       	movw	r30, r24
    31a4:	87 81       	ldd	r24, Z+7	; 0x07
    31a6:	90 85       	ldd	r25, Z+8	; 0x08
    31a8:	61 e0       	ldi	r22, 0x01	; 1
    31aa:	0e 94 f6 28 	call	0x51ec	; 0x51ec <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    31ae:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    31b2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    31b6:	04 96       	adiw	r24, 0x04	; 4
    31b8:	1b da       	rcall	.-3018   	; 0x25f0 <_ZN6EEWrapIiEcvKiEv>
    31ba:	09 2e       	mov	r0, r25
    31bc:	00 0c       	add	r0, r0
    31be:	aa 0b       	sbc	r26, r26
    31c0:	bb 0b       	sbc	r27, r27
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__floatsisf>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	ab 83       	std	Y+3, r26	; 0x03
    31d4:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    31d6:	29 81       	ldd	r18, Y+1	; 0x01
    31d8:	3a 81       	ldd	r19, Y+2	; 0x02
    31da:	4b 81       	ldd	r20, Y+3	; 0x03
    31dc:	5c 81       	ldd	r21, Y+4	; 0x04
    31de:	69 81       	ldd	r22, Y+1	; 0x01
    31e0:	7a 81       	ldd	r23, Y+2	; 0x02
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	0e 94 87 24 	call	0x490e	; 0x490e <__unordsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	71 f4       	brne	.+28     	; 0x320a <_ZN9TDSSensor4initEv+0x84>
        Offset = offset;
    31ee:	69 81       	ldd	r22, Y+1	; 0x01
    31f0:	7a 81       	ldd	r23, Y+2	; 0x02
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	0e 94 41 23 	call	0x4682	; 0x4682 <__fixsfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9c 01       	movw	r18, r24
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	fc 01       	movw	r30, r24
    3206:	37 ab       	std	Z+55, r19	; 0x37
    3208:	26 ab       	std	Z+54, r18	; 0x36
    }
    if(isnan(TheSensorsMem.TdsVal)) {
    320a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    320e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3212:	0a 96       	adiw	r24, 0x0a	; 10
    3214:	c2 de       	rcall	.-636    	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	11 e0       	ldi	r17, 0x01	; 1
    321c:	9c 01       	movw	r18, r24
    321e:	ad 01       	movw	r20, r26
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 87 24 	call	0x490e	; 0x490e <__unordsf2>
    3228:	88 23       	and	r24, r24
    322a:	09 f4       	brne	.+2      	; 0x322e <_ZN9TDSSensor4initEv+0xa8>
    322c:	10 e0       	ldi	r17, 0x00	; 0
    322e:	11 23       	and	r17, r17
    3230:	71 f0       	breq	.+28     	; 0x324e <_ZN9TDSSensor4initEv+0xc8>
        TheSensorsMem.TdsVal = 0;
    3232:	1d 82       	std	Y+5, r1	; 0x05
    3234:	1e 82       	std	Y+6, r1	; 0x06
    3236:	1f 82       	std	Y+7, r1	; 0x07
    3238:	18 86       	std	Y+8, r1	; 0x08
    323a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    323e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3242:	0a 96       	adiw	r24, 0x0a	; 10
    3244:	9e 01       	movw	r18, r28
    3246:	2b 5f       	subi	r18, 0xFB	; 251
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	b9 01       	movw	r22, r18
    324c:	b9 de       	rcall	.-654    	; 0x2fc0 <_ZN6EEWrapIfEaSERKf>
    }
}
    324e:	2a 96       	adiw	r28, 0x0a	; 10
    3250:	e3 e0       	ldi	r30, 0x03	; 3
    3252:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <__epilogue_restores__+0x1e>

00003256 <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    3256:	a4 e0       	ldi	r26, 0x04	; 4
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e1 e3       	ldi	r30, 0x31	; 49
    325c:	f9 e1       	ldi	r31, 0x19	; 25
    325e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	7c 83       	std	Y+4, r23	; 0x04
    3268:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	2b 81       	ldd	r18, Y+3	; 0x03
    3270:	3c 81       	ldd	r19, Y+4	; 0x04
    3272:	fc 01       	movw	r30, r24
    3274:	37 ab       	std	Z+55, r19	; 0x37
    3276:	26 ab       	std	Z+54, r18	; 0x36
    TheSensorsMem.TdsOffset = Offset;
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	9c 01       	movw	r18, r24
    327e:	2a 5c       	subi	r18, 0xCA	; 202
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3286:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    328a:	04 96       	adiw	r24, 0x04	; 4
    328c:	b9 01       	movw	r22, r18
    328e:	ac de       	rcall	.-680    	; 0x2fe8 <_ZN6EEWrapIiEaSERKi>
}
    3290:	24 96       	adiw	r28, 0x04	; 4
    3292:	e2 e0       	ldi	r30, 0x02	; 2
    3294:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003298 <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    3298:	a8 e0       	ldi	r26, 0x08	; 8
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e2 e5       	ldi	r30, 0x52	; 82
    329e:	f9 e1       	ldi	r31, 0x19	; 25
    32a0:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    32a4:	98 87       	std	Y+8, r25	; 0x08
    32a6:	8f 83       	std	Y+7, r24	; 0x07

    TdsString = String(TheSensorsMem.TdsVal, 0).c_str();
    32a8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    32ac:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    32b0:	0a 96       	adiw	r24, 0x0a	; 10
    32b2:	73 de       	rcall	.-794    	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	ac 01       	movw	r20, r24
    32bc:	bd 01       	movw	r22, r26
    32be:	ce 01       	movw	r24, r28
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	0e 94 8b 2a 	call	0x5516	; 0x5516 <_ZN6StringC1Efh>
    32c6:	ce 01       	movw	r24, r28
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	cb d9       	rcall	.-3178   	; 0x2662 <_ZNK6String5c_strEv>
    32cc:	9c 01       	movw	r18, r24
    32ce:	8f 81       	ldd	r24, Y+7	; 0x07
    32d0:	98 85       	ldd	r25, Y+8	; 0x08
    32d2:	c0 96       	adiw	r24, 0x30	; 48
    32d4:	b9 01       	movw	r22, r18
    32d6:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    32da:	ce 01       	movw	r24, r28
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    //TdsAvgString = String(_tdsValueAverage, 0).c_str();
    return TheSensorsMem.TdsVal;
    32e2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    32e6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    32ea:	0a 96       	adiw	r24, 0x0a	; 10
    32ec:	56 de       	rcall	.-852    	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22

}
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	28 96       	adiw	r28, 0x08	; 8
    32f8:	e2 e0       	ldi	r30, 0x02	; 2
    32fa:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000032fe <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    32fe:	aa e1       	ldi	r26, 0x1A	; 26
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e5 e8       	ldi	r30, 0x85	; 133
    3304:	f9 e1       	ldi	r31, 0x19	; 25
    3306:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    330a:	9a 8f       	std	Y+26, r25	; 0x1a
    330c:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    330e:	89 8d       	ldd	r24, Y+25	; 0x19
    3310:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3312:	c2 df       	rcall	.-124    	; 0x3298 <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    3314:	87 e0       	ldi	r24, 0x07	; 7
    3316:	93 e0       	ldi	r25, 0x03	; 3
    3318:	fc 01       	movw	r30, r24
    331a:	80 81       	ld	r24, Z
    331c:	88 23       	and	r24, r24
    331e:	89 f4       	brne	.+34     	; 0x3342 <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    3320:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    332c:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3330:	a0 93 19 03 	sts	0x0319, r26	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3334:	b0 93 1a 03 	sts	0x031A, r27	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3338:	87 e0       	ldi	r24, 0x07	; 7
    333a:	93 e0       	ldi	r25, 0x03	; 3
    333c:	21 e0       	ldi	r18, 0x01	; 1
    333e:	fc 01       	movw	r30, r24
    3340:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    3342:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    3346:	9b 01       	movw	r18, r22
    3348:	ac 01       	movw	r20, r24
    334a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    334e:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3352:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3356:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    335a:	28 1b       	sub	r18, r24
    335c:	39 0b       	sbc	r19, r25
    335e:	4a 0b       	sbc	r20, r26
    3360:	5b 0b       	sbc	r21, r27
    3362:	89 8d       	ldd	r24, Y+25	; 0x19
    3364:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3366:	fc 01       	movw	r30, r24
    3368:	84 81       	ldd	r24, Z+4	; 0x04
    336a:	95 81       	ldd	r25, Z+5	; 0x05
    336c:	80 57       	subi	r24, 0x70	; 112
    336e:	9e 4f       	sbci	r25, 0xFE	; 254
    3370:	09 2e       	mov	r0, r25
    3372:	00 0c       	add	r0, r0
    3374:	aa 0b       	sbc	r26, r26
    3376:	bb 0b       	sbc	r27, r27
    3378:	61 e0       	ldi	r22, 0x01	; 1
    337a:	82 17       	cp	r24, r18
    337c:	93 07       	cpc	r25, r19
    337e:	a4 07       	cpc	r26, r20
    3380:	b5 07       	cpc	r27, r21
    3382:	08 f0       	brcs	.+2      	; 0x3386 <_ZN9TDSSensor13PrintTDSToLCDEv+0x88>
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	66 23       	and	r22, r22
    3388:	09 f4       	brne	.+2      	; 0x338c <_ZN9TDSSensor13PrintTDSToLCDEv+0x8e>
    338a:	70 c0       	rjmp	.+224    	; 0x346c <_ZN9TDSSensor13PrintTDSToLCDEv+0x16e>
        if(_printToLCD) {
    338c:	89 8d       	ldd	r24, Y+25	; 0x19
    338e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3390:	fc 01       	movw	r30, r24
    3392:	86 81       	ldd	r24, Z+6	; 0x06
    3394:	88 23       	and	r24, r24
    3396:	09 f4       	brne	.+2      	; 0x339a <_ZN9TDSSensor13PrintTDSToLCDEv+0x9c>
    3398:	53 c0       	rjmp	.+166    	; 0x3440 <_ZN9TDSSensor13PrintTDSToLCDEv+0x142>
            String enabled = "";
    339a:	ce 01       	movw	r24, r28
    339c:	0d 96       	adiw	r24, 0x0d	; 13
    339e:	69 e2       	ldi	r22, 0x29	; 41
    33a0:	71 e0       	ldi	r23, 0x01	; 1
    33a2:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
            if(_enabled) {
    33a6:	89 8d       	ldd	r24, Y+25	; 0x19
    33a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33aa:	fc 01       	movw	r30, r24
    33ac:	81 85       	ldd	r24, Z+9	; 0x09
    33ae:	88 23       	and	r24, r24
    33b0:	31 f0       	breq	.+12     	; 0x33be <_ZN9TDSSensor13PrintTDSToLCDEv+0xc0>
                enabled = "<";
    33b2:	ce 01       	movw	r24, r28
    33b4:	0d 96       	adiw	r24, 0x0d	; 13
    33b6:	6a e2       	ldi	r22, 0x2A	; 42
    33b8:	71 e0       	ldi	r23, 0x01	; 1
    33ba:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsString + " " + enabled;
    33be:	89 8d       	ldd	r24, Y+25	; 0x19
    33c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33c2:	8c 01       	movw	r16, r24
    33c4:	00 5d       	subi	r16, 0xD0	; 208
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	ce 01       	movw	r24, r28
    33ca:	07 96       	adiw	r24, 0x07	; 7
    33cc:	6c e2       	ldi	r22, 0x2C	; 44
    33ce:	71 e0       	ldi	r23, 0x01	; 1
    33d0:	59 d9       	rcall	.-3406   	; 0x2684 <_ZN15StringSumHelperC1EPKc>
    33d2:	ce 01       	movw	r24, r28
    33d4:	07 96       	adiw	r24, 0x07	; 7
    33d6:	b8 01       	movw	r22, r16
    33d8:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZplRK15StringSumHelperRK6String>
    33dc:	62 e3       	ldi	r22, 0x32	; 50
    33de:	71 e0       	ldi	r23, 0x01	; 1
    33e0:	0e 94 44 2b 	call	0x5688	; 0x5688 <_ZplRK15StringSumHelperPKc>
    33e4:	9c 01       	movw	r18, r24
    33e6:	ce 01       	movw	r24, r28
    33e8:	0d 96       	adiw	r24, 0x0d	; 13
    33ea:	bc 01       	movw	r22, r24
    33ec:	c9 01       	movw	r24, r18
    33ee:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZplRK15StringSumHelperRK6String>
    33f2:	9c 01       	movw	r18, r24
    33f4:	ce 01       	movw	r24, r28
    33f6:	43 96       	adiw	r24, 0x13	; 19
    33f8:	b9 01       	movw	r22, r18
    33fa:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    33fe:	ce 01       	movw	r24, r28
    3400:	07 96       	adiw	r24, 0x07	; 7
    3402:	d4 dc       	rcall	.-1624   	; 0x2dac <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    3404:	ce 01       	movw	r24, r28
    3406:	43 96       	adiw	r24, 0x13	; 19
    3408:	bc 01       	movw	r22, r24
    340a:	ce 01       	movw	r24, r28
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    3412:	89 8d       	ldd	r24, Y+25	; 0x19
    3414:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3416:	0c 96       	adiw	r24, 0x0c	; 12
    3418:	9e 01       	movw	r18, r28
    341a:	2f 5f       	subi	r18, 0xFF	; 255
    341c:	3f 4f       	sbci	r19, 0xFF	; 255
    341e:	a9 01       	movw	r20, r18
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_ZN7LCDBase9PrintLineEs6String>
    3428:	ce 01       	movw	r24, r28
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsString + " " + enabled;
    3430:	ce 01       	movw	r24, r28
    3432:	43 96       	adiw	r24, 0x13	; 19
    3434:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3438:	ce 01       	movw	r24, r28
    343a:	0d 96       	adiw	r24, 0x0d	; 13
    343c:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    3440:	8d e0       	ldi	r24, 0x0D	; 13
    3442:	0e 94 61 29 	call	0x52c2	; 0x52c2 <digitalRead>
    3446:	98 2f       	mov	r25, r24
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	89 27       	eor	r24, r25
    344c:	68 2f       	mov	r22, r24
    344e:	8d e0       	ldi	r24, 0x0D	; 13
    3450:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
        printTime = millis();
    3454:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3460:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3464:	a0 93 19 03 	sts	0x0319, r26	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3468:	b0 93 1a 03 	sts	0x031A, r27	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    346c:	6a 96       	adiw	r28, 0x1a	; 26
    346e:	e4 e0       	ldi	r30, 0x04	; 4
    3470:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00003474 <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    3474:	a2 e0       	ldi	r26, 0x02	; 2
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	e0 e4       	ldi	r30, 0x40	; 64
    347a:	fa e1       	ldi	r31, 0x1A	; 26
    347c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	9a 81       	ldd	r25, Y+2	; 0x02
    3488:	fc 01       	movw	r30, r24
    348a:	91 85       	ldd	r25, Z+9	; 0x09
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	89 27       	eor	r24, r25
    3490:	88 23       	and	r24, r24
    3492:	09 f0       	breq	.+2      	; 0x3496 <_ZN9TDSSensor12CalculateTDSEv+0x22>
        return;
    3494:	03 c0       	rjmp	.+6      	; 0x349c <_ZN9TDSSensor12CalculateTDSEv+0x28>
    }

    //TheSensorsMem.TdsVal = getTDSValue();
    getTDSValue();
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	04 d0       	rcall	.+8      	; 0x34a4 <_ZN9TDSSensor11getTDSValueEv>
    //
    //if(_numOfSamples > 10) {
    //_numOfSamples = 1;
    //}

}
    349c:	22 96       	adiw	r28, 0x02	; 2
    349e:	e2 e0       	ldi	r30, 0x02	; 2
    34a0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000034a4 <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    34a4:	a6 e1       	ldi	r26, 0x16	; 22
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e8 e5       	ldi	r30, 0x58	; 88
    34aa:	fa e1       	ldi	r31, 0x1A	; 26
    34ac:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    34b0:	9e 8b       	std	Y+22, r25	; 0x16
    34b2:	8d 8b       	std	Y+21, r24	; 0x15
    static unsigned long samplingTime = millis();
    34b4:	8f e0       	ldi	r24, 0x0F	; 15
    34b6:	93 e0       	ldi	r25, 0x03	; 3
    34b8:	fc 01       	movw	r30, r24
    34ba:	80 81       	ld	r24, Z
    34bc:	88 23       	and	r24, r24
    34be:	89 f4       	brne	.+34     	; 0x34e2 <_ZN9TDSSensor11getTDSValueEv+0x3e>
    34c0:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    34cc:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    34d0:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    34d4:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    34d8:	8f e0       	ldi	r24, 0x0F	; 15
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	21 e0       	ldi	r18, 0x01	; 1
    34de:	fc 01       	movw	r30, r24
    34e0:	20 83       	st	Z, r18
    if(millis() - samplingTime > 2000) {//wait .5 sec between readings, according to spec
    34e2:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    34e6:	9b 01       	movw	r18, r22
    34e8:	ac 01       	movw	r20, r24
    34ea:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    34ee:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    34f2:	a0 91 1d 03 	lds	r26, 0x031D	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    34f6:	b0 91 1e 03 	lds	r27, 0x031E	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    34fa:	79 01       	movw	r14, r18
    34fc:	8a 01       	movw	r16, r20
    34fe:	e8 1a       	sub	r14, r24
    3500:	f9 0a       	sbc	r15, r25
    3502:	0a 0b       	sbc	r16, r26
    3504:	1b 0b       	sbc	r17, r27
    3506:	d8 01       	movw	r26, r16
    3508:	c7 01       	movw	r24, r14
    350a:	21 e0       	ldi	r18, 0x01	; 1
    350c:	81 3d       	cpi	r24, 0xD1	; 209
    350e:	97 40       	sbci	r25, 0x07	; 7
    3510:	a1 05       	cpc	r26, r1
    3512:	b1 05       	cpc	r27, r1
    3514:	08 f4       	brcc	.+2      	; 0x3518 <_ZN9TDSSensor11getTDSValueEv+0x74>
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	22 23       	and	r18, r18
    351a:	09 f4       	brne	.+2      	; 0x351e <_ZN9TDSSensor11getTDSValueEv+0x7a>
    351c:	a3 c0       	rjmp	.+326    	; 0x3664 <_ZN9TDSSensor11getTDSValueEv+0x1c0>
        int numOfSamples = 10;
    351e:	8a e0       	ldi	r24, 0x0A	; 10
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
        int reading = analogRead(_pin);
    3526:	8d 89       	ldd	r24, Y+21	; 0x15
    3528:	9e 89       	ldd	r25, Y+22	; 0x16
    352a:	fc 01       	movw	r30, r24
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	0e 94 b0 28 	call	0x5160	; 0x5160 <analogRead>
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13

        Serial.print(F("TDS Raw Reading: "));
    3538:	8b ed       	ldi	r24, 0xDB	; 219
    353a:	93 e0       	ldi	r25, 0x03	; 3
    353c:	bc 01       	movw	r22, r24
    353e:	80 ec       	ldi	r24, 0xC0	; 192
    3540:	94 e0       	ldi	r25, 0x04	; 4
    3542:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(reading);
    3546:	8b 89       	ldd	r24, Y+19	; 0x13
    3548:	9c 89       	ldd	r25, Y+20	; 0x14
    354a:	4a e0       	ldi	r20, 0x0A	; 10
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	bc 01       	movw	r22, r24
    3550:	80 ec       	ldi	r24, 0xC0	; 192
    3552:	94 e0       	ldi	r25, 0x04	; 4
    3554:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_ZN5Print7printlnEii>

        //_tdsAverage[_tdsArrayIndex++] = reading;
        TheSensorsMem.TdsAvgArr[_tdsArrayIndex++] = reading;
    3558:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    355c:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3560:	8d 89       	ldd	r24, Y+21	; 0x15
    3562:	9e 89       	ldd	r25, Y+22	; 0x16
    3564:	fc 01       	movw	r30, r24
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	bc 01       	movw	r22, r24
    356c:	6f 5f       	subi	r22, 0xFF	; 255
    356e:	7f 4f       	sbci	r23, 0xFF	; 255
    3570:	4d 89       	ldd	r20, Y+21	; 0x15
    3572:	5e 89       	ldd	r21, Y+22	; 0x16
    3574:	fa 01       	movw	r30, r20
    3576:	73 83       	std	Z+3, r23	; 0x03
    3578:	62 83       	std	Z+2, r22	; 0x02
    357a:	85 96       	adiw	r24, 0x25	; 37
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	82 0f       	add	r24, r18
    3582:	93 1f       	adc	r25, r19
    3584:	9e 01       	movw	r18, r28
    3586:	2d 5e       	subi	r18, 0xED	; 237
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
    358a:	b9 01       	movw	r22, r18
    358c:	2d dd       	rcall	.-1446   	; 0x2fe8 <_ZN6EEWrapIiEaSERKi>
        if(_tdsArrayIndex == numOfSamples) {
    358e:	8d 89       	ldd	r24, Y+21	; 0x15
    3590:	9e 89       	ldd	r25, Y+22	; 0x16
    3592:	fc 01       	movw	r30, r24
    3594:	22 81       	ldd	r18, Z+2	; 0x02
    3596:	33 81       	ldd	r19, Z+3	; 0x03
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	28 17       	cp	r18, r24
    359e:	39 07       	cpc	r19, r25
    35a0:	29 f4       	brne	.+10     	; 0x35ac <_ZN9TDSSensor11getTDSValueEv+0x108>
            _tdsArrayIndex = 0;
    35a2:	8d 89       	ldd	r24, Y+21	; 0x15
    35a4:	9e 89       	ldd	r25, Y+22	; 0x16
    35a6:	fc 01       	movw	r30, r24
    35a8:	13 82       	std	Z+3, r1	; 0x03
    35aa:	12 82       	std	Z+2, r1	; 0x02
        }
        double tdsAvg = MathExt::CalculateAverage(TheSensorsMem.TdsAvgArr, numOfSamples);
    35ac:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    35b0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    35b4:	86 5b       	subi	r24, 0xB6	; 182
    35b6:	9f 4f       	sbci	r25, 0xFF	; 255
    35b8:	29 81       	ldd	r18, Y+1	; 0x01
    35ba:	3a 81       	ldd	r19, Y+2	; 0x02
    35bc:	b9 01       	movw	r22, r18
    35be:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	8b 83       	std	Y+3, r24	; 0x03
    35c8:	9c 83       	std	Y+4, r25	; 0x04
    35ca:	ad 83       	std	Y+5, r26	; 0x05
    35cc:	be 83       	std	Y+6, r27	; 0x06
        double voltage = tdsAvg * (5.0 / 1024);
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 ea       	ldi	r20, 0xA0	; 160
    35d4:	5b e3       	ldi	r21, 0x3B	; 59
    35d6:	6b 81       	ldd	r22, Y+3	; 0x03
    35d8:	7c 81       	ldd	r23, Y+4	; 0x04
    35da:	8d 81       	ldd	r24, Y+5	; 0x05
    35dc:	9e 81       	ldd	r25, Y+6	; 0x06
    35de:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8f 83       	std	Y+7, r24	; 0x07
    35e8:	98 87       	std	Y+8, r25	; 0x08
    35ea:	a9 87       	std	Y+9, r26	; 0x09
    35ec:	ba 87       	std	Y+10, r27	; 0x0a
        double tankTDS = voltage * Offset;
    35ee:	8d 89       	ldd	r24, Y+21	; 0x15
    35f0:	9e 89       	ldd	r25, Y+22	; 0x16
    35f2:	fc 01       	movw	r30, r24
    35f4:	86 a9       	ldd	r24, Z+54	; 0x36
    35f6:	97 a9       	ldd	r25, Z+55	; 0x37
    35f8:	09 2e       	mov	r0, r25
    35fa:	00 0c       	add	r0, r0
    35fc:	aa 0b       	sbc	r26, r26
    35fe:	bb 0b       	sbc	r27, r27
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__floatsisf>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	2f 81       	ldd	r18, Y+7	; 0x07
    360e:	38 85       	ldd	r19, Y+8	; 0x08
    3610:	49 85       	ldd	r20, Y+9	; 0x09
    3612:	5a 85       	ldd	r21, Y+10	; 0x0a
    3614:	bc 01       	movw	r22, r24
    3616:	cd 01       	movw	r24, r26
    3618:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e

        TheSensorsMem.TdsVal = tankTDS;
    3628:	8b 85       	ldd	r24, Y+11	; 0x0b
    362a:	9c 85       	ldd	r25, Y+12	; 0x0c
    362c:	ad 85       	ldd	r26, Y+13	; 0x0d
    362e:	be 85       	ldd	r27, Y+14	; 0x0e
    3630:	8f 87       	std	Y+15, r24	; 0x0f
    3632:	98 8b       	std	Y+16, r25	; 0x10
    3634:	a9 8b       	std	Y+17, r26	; 0x11
    3636:	ba 8b       	std	Y+18, r27	; 0x12
    3638:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    363c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3640:	0a 96       	adiw	r24, 0x0a	; 10
    3642:	9e 01       	movw	r18, r28
    3644:	21 5f       	subi	r18, 0xF1	; 241
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	b9 01       	movw	r22, r18
    364a:	ba dc       	rcall	.-1676   	; 0x2fc0 <_ZN6EEWrapIfEaSERKf>
        //TheSensorsMem.TdsAvgArr = _tdsAverage;
        samplingTime = millis();
    364c:	0e 94 00 28 	call	0x5000	; 0x5000 <millis>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    3658:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    365c:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    3660:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
        //return tankTDS;
    }
    return TheSensorsMem.TdsVal;
    3664:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3668:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    366c:	0a 96       	adiw	r24, 0x0a	; 10
    366e:	95 dc       	rcall	.-1750   	; 0x2f9a <_ZN6EEWrapIfEcvKfEv>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22

}
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	66 96       	adiw	r28, 0x16	; 22
    367a:	e6 e0       	ldi	r30, 0x06	; 6
    367c:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00003680 <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    3680:	a2 e0       	ldi	r26, 0x02	; 2
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e6 e4       	ldi	r30, 0x46	; 70
    3686:	fb e1       	ldi	r31, 0x1B	; 27
    3688:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	21 e0       	ldi	r18, 0x01	; 1
    3696:	fc 01       	movw	r30, r24
    3698:	21 87       	std	Z+9, r18	; 0x09
    digitalWrite(_relayPin, HIGH);
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	fc 01       	movw	r30, r24
    36a0:	87 81       	ldd	r24, Z+7	; 0x07
    36a2:	90 85       	ldd	r25, Z+8	; 0x08
    36a4:	61 e0       	ldi	r22, 0x01	; 1
    36a6:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
}
    36aa:	22 96       	adiw	r28, 0x02	; 2
    36ac:	e2 e0       	ldi	r30, 0x02	; 2
    36ae:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000036b2 <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    36b2:	a2 e0       	ldi	r26, 0x02	; 2
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	ef e5       	ldi	r30, 0x5F	; 95
    36b8:	fb e1       	ldi	r31, 0x1B	; 27
    36ba:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    36be:	9a 83       	std	Y+2, r25	; 0x02
    36c0:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	fc 01       	movw	r30, r24
    36c8:	11 86       	std	Z+9, r1	; 0x09
    digitalWrite(_relayPin, LOW);
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	fc 01       	movw	r30, r24
    36d0:	87 81       	ldd	r24, Z+7	; 0x07
    36d2:	90 85       	ldd	r25, Z+8	; 0x08
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	0e 94 32 29 	call	0x5264	; 0x5264 <digitalWrite>
    delay(1000);
    36da:	68 ee       	ldi	r22, 0xE8	; 232
    36dc:	73 e0       	ldi	r23, 0x03	; 3
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 31 28 	call	0x5062	; 0x5062 <delay>

}
    36e6:	22 96       	adiw	r28, 0x02	; 2
    36e8:	e2 e0       	ldi	r30, 0x02	; 2
    36ea:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000036ee <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    36ee:	a2 e0       	ldi	r26, 0x02	; 2
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	ed e7       	ldi	r30, 0x7D	; 125
    36f4:	fb e1       	ldi	r31, 0x1B	; 27
    36f6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    36fa:	9a 83       	std	Y+2, r25	; 0x02
    36fc:	89 83       	std	Y+1, r24	; 0x01
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	fc 01       	movw	r30, r24
    3704:	84 81       	ldd	r24, Z+4	; 0x04
    3706:	95 81       	ldd	r25, Z+5	; 0x05
    3708:	22 96       	adiw	r28, 0x02	; 2
    370a:	e2 e0       	ldi	r30, 0x02	; 2
    370c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003710 <_ZN6StringpLEPKc>:
    3710:	a4 e0       	ldi	r26, 0x04	; 4
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	ee e8       	ldi	r30, 0x8E	; 142
    3716:	fb e1       	ldi	r31, 0x1B	; 27
    3718:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    371c:	9a 83       	std	Y+2, r25	; 0x02
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	7c 83       	std	Y+4, r23	; 0x04
    3722:	6b 83       	std	Y+3, r22	; 0x03
    3724:	2b 81       	ldd	r18, Y+3	; 0x03
    3726:	3c 81       	ldd	r19, Y+4	; 0x04
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	b9 01       	movw	r22, r18
    372e:	0e 94 13 2b 	call	0x5626	; 0x5626 <_ZN6String6concatEPKc>
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	9a 81       	ldd	r25, Y+2	; 0x02
    3736:	24 96       	adiw	r28, 0x04	; 4
    3738:	e2 e0       	ldi	r30, 0x02	; 2
    373a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000373e <_ZNK6StringeqEPKc>:
    373e:	a4 e0       	ldi	r26, 0x04	; 4
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	e5 ea       	ldi	r30, 0xA5	; 165
    3744:	fb e1       	ldi	r31, 0x1B	; 27
    3746:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    374a:	9a 83       	std	Y+2, r25	; 0x02
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	7c 83       	std	Y+4, r23	; 0x04
    3750:	6b 83       	std	Y+3, r22	; 0x03
    3752:	2b 81       	ldd	r18, Y+3	; 0x03
    3754:	3c 81       	ldd	r19, Y+4	; 0x04
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	b9 01       	movw	r22, r18
    375c:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_ZNK6String6equalsEPKc>
    3760:	24 96       	adiw	r28, 0x04	; 4
    3762:	e2 e0       	ldi	r30, 0x02	; 2
    3764:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003768 <_ZN15StringSumHelperC1ERK6String>:
    3768:	a4 e0       	ldi	r26, 0x04	; 4
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	ea eb       	ldi	r30, 0xBA	; 186
    376e:	fb e1       	ldi	r31, 0x1B	; 27
    3770:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	7c 83       	std	Y+4, r23	; 0x04
    377a:	6b 83       	std	Y+3, r22	; 0x03
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	9a 81       	ldd	r25, Y+2	; 0x02
    3780:	2b 81       	ldd	r18, Y+3	; 0x03
    3782:	3c 81       	ldd	r19, Y+4	; 0x04
    3784:	b9 01       	movw	r22, r18
    3786:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    378a:	24 96       	adiw	r28, 0x04	; 4
    378c:	e2 e0       	ldi	r30, 0x02	; 2
    378e:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003792 <_ZN15WaterSensorWire5SetupEv>:
    3792:	a0 e0       	ldi	r26, 0x00	; 0
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ef ec       	ldi	r30, 0xCF	; 207
    3798:	fb e1       	ldi	r31, 0x1B	; 27
    379a:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    379e:	8d ee       	ldi	r24, 0xED	; 237
    37a0:	93 e0       	ldi	r25, 0x03	; 3
    37a2:	bc 01       	movw	r22, r24
    37a4:	80 ec       	ldi	r24, 0xC0	; 192
    37a6:	94 e0       	ldi	r25, 0x04	; 4
    37a8:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    37ac:	4a e0       	ldi	r20, 0x0A	; 10
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	68 e0       	ldi	r22, 0x08	; 8
    37b2:	80 ec       	ldi	r24, 0xC0	; 192
    37b4:	94 e0       	ldi	r25, 0x04	; 4
    37b6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <_ZN5Print7printlnEhi>
    37ba:	68 e0       	ldi	r22, 0x08	; 8
    37bc:	8f e8       	ldi	r24, 0x8F	; 143
    37be:	92 e0       	ldi	r25, 0x02	; 2
    37c0:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN7TwoWire5beginEh>
    37c4:	6e ec       	ldi	r22, 0xCE	; 206
    37c6:	7d e1       	ldi	r23, 0x1D	; 29
    37c8:	8f e8       	ldi	r24, 0x8F	; 143
    37ca:	92 e0       	ldi	r25, 0x02	; 2
    37cc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN7TwoWire9onRequestEPFvvE>
    37d0:	64 ed       	ldi	r22, 0xD4	; 212
    37d2:	7c e1       	ldi	r23, 0x1C	; 28
    37d4:	8f e8       	ldi	r24, 0x8F	; 143
    37d6:	92 e0       	ldi	r25, 0x02	; 2
    37d8:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN7TwoWire9onReceiveEPFviE>
    37dc:	e2 e0       	ldi	r30, 0x02	; 2
    37de:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000037e2 <_ZN15WaterSensorWire4LoopEv>:
    37e2:	a4 e3       	ldi	r26, 0x34	; 52
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e7 ef       	ldi	r30, 0xF7	; 247
    37e8:	fb e1       	ldi	r31, 0x1B	; 27
    37ea:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    37ee:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    37f2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    37f6:	c2 96       	adiw	r24, 0x32	; 50
    37f8:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZNK6String5c_strEv>
    37fc:	bc 01       	movw	r22, r24
    37fe:	8d e3       	ldi	r24, 0x3D	; 61
    3800:	93 e0       	ldi	r25, 0x03	; 3
    3802:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    3806:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    380a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    380e:	c0 96       	adiw	r24, 0x30	; 48
    3810:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZNK6String5c_strEv>
    3814:	bc 01       	movw	r22, r24
    3816:	83 e4       	ldi	r24, 0x43	; 67
    3818:	93 e0       	ldi	r25, 0x03	; 3
    381a:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    381e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3822:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    3826:	fc 01       	movw	r30, r24
    3828:	80 ad       	ldd	r24, Z+56	; 0x38
    382a:	91 ad       	ldd	r25, Z+57	; 0x39
    382c:	a2 ad       	ldd	r26, Z+58	; 0x3a
    382e:	b3 ad       	ldd	r27, Z+59	; 0x3b
    3830:	fe 01       	movw	r30, r28
    3832:	b7 96       	adiw	r30, 0x27	; 39
    3834:	22 e0       	ldi	r18, 0x02	; 2
    3836:	ac 01       	movw	r20, r24
    3838:	bd 01       	movw	r22, r26
    383a:	cf 01       	movw	r24, r30
    383c:	0e 94 b9 2a 	call	0x5572	; 0x5572 <_ZN6StringC1Edh>
    3840:	ce 01       	movw	r24, r28
    3842:	87 96       	adiw	r24, 0x27	; 39
    3844:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZNK6String5c_strEv>
    3848:	bc 01       	movw	r22, r24
    384a:	8b e5       	ldi	r24, 0x5B	; 91
    384c:	93 e0       	ldi	r25, 0x03	; 3
    384e:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    3852:	ce 01       	movw	r24, r28
    3854:	87 96       	adiw	r24, 0x27	; 39
    3856:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    385a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    385e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    3862:	fc 01       	movw	r30, r24
    3864:	26 a9       	ldd	r18, Z+54	; 0x36
    3866:	37 a9       	ldd	r19, Z+55	; 0x37
    3868:	ce 01       	movw	r24, r28
    386a:	81 96       	adiw	r24, 0x21	; 33
    386c:	4a e0       	ldi	r20, 0x0A	; 10
    386e:	b9 01       	movw	r22, r18
    3870:	0e 94 36 2a 	call	0x546c	; 0x546c <_ZN6StringC1Eih>
    3874:	ce 01       	movw	r24, r28
    3876:	81 96       	adiw	r24, 0x21	; 33
    3878:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZNK6String5c_strEv>
    387c:	bc 01       	movw	r22, r24
    387e:	81 e6       	ldi	r24, 0x61	; 97
    3880:	93 e0       	ldi	r25, 0x03	; 3
    3882:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    3886:	ce 01       	movw	r24, r28
    3888:	81 96       	adiw	r24, 0x21	; 33
    388a:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    388e:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	89 27       	eor	r24, r25
    3896:	88 23       	and	r24, r24
    3898:	39 f0       	breq	.+14     	; 0x38a8 <_ZN15WaterSensorWire4LoopEv+0xc6>
    389a:	64 e3       	ldi	r22, 0x34	; 52
    389c:	71 e0       	ldi	r23, 0x01	; 1
    389e:	85 e5       	ldi	r24, 0x55	; 85
    38a0:	93 e0       	ldi	r25, 0x03	; 3
    38a2:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    38a6:	06 c0       	rjmp	.+12     	; 0x38b4 <_ZN15WaterSensorWire4LoopEv+0xd2>
    38a8:	67 e3       	ldi	r22, 0x37	; 55
    38aa:	71 e0       	ldi	r23, 0x01	; 1
    38ac:	85 e5       	ldi	r24, 0x55	; 85
    38ae:	93 e0       	ldi	r25, 0x03	; 3
    38b0:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    38b4:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    38b8:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    38bc:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    38c0:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
    38c4:	28 ee       	ldi	r18, 0xE8	; 232
    38c6:	33 e0       	ldi	r19, 0x03	; 3
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 90 2c 	call	0x5920	; 0x5920 <__divmodsi4>
    38d4:	da 01       	movw	r26, r20
    38d6:	c9 01       	movw	r24, r18
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	ab 83       	std	Y+3, r26	; 0x03
    38de:	bc 83       	std	Y+4, r27	; 0x04
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	ab 81       	ldd	r26, Y+3	; 0x03
    38e6:	bc 81       	ldd	r27, Y+4	; 0x04
    38e8:	fe 01       	movw	r30, r28
    38ea:	75 96       	adiw	r30, 0x15	; 21
    38ec:	2a e0       	ldi	r18, 0x0A	; 10
    38ee:	ac 01       	movw	r20, r24
    38f0:	bd 01       	movw	r22, r26
    38f2:	cf 01       	movw	r24, r30
    38f4:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN6StringC1Elh>
    38f8:	9e 01       	movw	r18, r28
    38fa:	2b 5e       	subi	r18, 0xEB	; 235
    38fc:	3f 4f       	sbci	r19, 0xFF	; 255
    38fe:	ce 01       	movw	r24, r28
    3900:	4b 96       	adiw	r24, 0x1b	; 27
    3902:	b9 01       	movw	r22, r18
    3904:	31 df       	rcall	.-414    	; 0x3768 <_ZN15StringSumHelperC1ERK6String>
    3906:	ce 01       	movw	r24, r28
    3908:	4b 96       	adiw	r24, 0x1b	; 27
    390a:	6b e3       	ldi	r22, 0x3B	; 59
    390c:	71 e0       	ldi	r23, 0x01	; 1
    390e:	0e 94 44 2b 	call	0x5688	; 0x5688 <_ZplRK15StringSumHelperPKc>
    3912:	bc 01       	movw	r22, r24
    3914:	8f e4       	ldi	r24, 0x4F	; 79
    3916:	93 e0       	ldi	r25, 0x03	; 3
    3918:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    391c:	ce 01       	movw	r24, r28
    391e:	4b 96       	adiw	r24, 0x1b	; 27
    3920:	45 da       	rcall	.-2934   	; 0x2dac <_ZN15StringSumHelperD1Ev>
    3922:	ce 01       	movw	r24, r28
    3924:	45 96       	adiw	r24, 0x15	; 21
    3926:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    392a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    392e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    3932:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    3936:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    393a:	28 ee       	ldi	r18, 0xE8	; 232
    393c:	33 e0       	ldi	r19, 0x03	; 3
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 90 2c 	call	0x5920	; 0x5920 <__divmodsi4>
    394a:	da 01       	movw	r26, r20
    394c:	c9 01       	movw	r24, r18
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	af 83       	std	Y+7, r26	; 0x07
    3954:	b8 87       	std	Y+8, r27	; 0x08
    3956:	8d 81       	ldd	r24, Y+5	; 0x05
    3958:	9e 81       	ldd	r25, Y+6	; 0x06
    395a:	af 81       	ldd	r26, Y+7	; 0x07
    395c:	b8 85       	ldd	r27, Y+8	; 0x08
    395e:	fe 01       	movw	r30, r28
    3960:	39 96       	adiw	r30, 0x09	; 9
    3962:	2a e0       	ldi	r18, 0x0A	; 10
    3964:	ac 01       	movw	r20, r24
    3966:	bd 01       	movw	r22, r26
    3968:	cf 01       	movw	r24, r30
    396a:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN6StringC1Elh>
    396e:	9e 01       	movw	r18, r28
    3970:	27 5f       	subi	r18, 0xF7	; 247
    3972:	3f 4f       	sbci	r19, 0xFF	; 255
    3974:	ce 01       	movw	r24, r28
    3976:	0f 96       	adiw	r24, 0x0f	; 15
    3978:	b9 01       	movw	r22, r18
    397a:	f6 de       	rcall	.-532    	; 0x3768 <_ZN15StringSumHelperC1ERK6String>
    397c:	ce 01       	movw	r24, r28
    397e:	0f 96       	adiw	r24, 0x0f	; 15
    3980:	6b e3       	ldi	r22, 0x3B	; 59
    3982:	71 e0       	ldi	r23, 0x01	; 1
    3984:	0e 94 44 2b 	call	0x5688	; 0x5688 <_ZplRK15StringSumHelperPKc>
    3988:	bc 01       	movw	r22, r24
    398a:	89 e4       	ldi	r24, 0x49	; 73
    398c:	93 e0       	ldi	r25, 0x03	; 3
    398e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3992:	ce 01       	movw	r24, r28
    3994:	0f 96       	adiw	r24, 0x0f	; 15
    3996:	0a da       	rcall	.-3052   	; 0x2dac <_ZN15StringSumHelperD1Ev>
    3998:	ce 01       	movw	r24, r28
    399a:	09 96       	adiw	r24, 0x09	; 9
    399c:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    39a0:	e4 96       	adiw	r28, 0x34	; 52
    39a2:	e2 e0       	ldi	r30, 0x02	; 2
    39a4:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000039a8 <_ZN15WaterSensorWire7ReceiveEi>:
    39a8:	a7 e2       	ldi	r26, 0x27	; 39
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	ea ed       	ldi	r30, 0xDA	; 218
    39ae:	fc e1       	ldi	r31, 0x1C	; 28
    39b0:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__prologue_saves__+0x1e>
    39b4:	9f a3       	std	Y+39, r25	; 0x27
    39b6:	8e a3       	std	Y+38, r24	; 0x26
    39b8:	6d e3       	ldi	r22, 0x3D	; 61
    39ba:	71 e0       	ldi	r23, 0x01	; 1
    39bc:	8f e1       	ldi	r24, 0x1F	; 31
    39be:	93 e0       	ldi	r25, 0x03	; 3
    39c0:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    39c4:	6d e3       	ldi	r22, 0x3D	; 61
    39c6:	71 e0       	ldi	r23, 0x01	; 1
    39c8:	8b e2       	ldi	r24, 0x2B	; 43
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    39d0:	6d e3       	ldi	r22, 0x3D	; 61
    39d2:	71 e0       	ldi	r23, 0x01	; 1
    39d4:	81 e3       	ldi	r24, 0x31	; 49
    39d6:	93 e0       	ldi	r25, 0x03	; 3
    39d8:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    39dc:	8e a1       	ldd	r24, Y+38	; 0x26
    39de:	9f a1       	ldd	r25, Y+39	; 0x27
    39e0:	44 97       	sbiw	r24, 0x14	; 20
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    39e4:	c7 c0       	rjmp	.+398    	; 0x3b74 <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    39e6:	0a c0       	rjmp	.+20     	; 0x39fc <_ZN15WaterSensorWire7ReceiveEi+0x54>
    39e8:	8f e8       	ldi	r24, 0x8F	; 143
    39ea:	92 e0       	ldi	r25, 0x02	; 2
    39ec:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN7TwoWire4readEv>
    39f0:	89 83       	std	Y+1, r24	; 0x01
    39f2:	69 81       	ldd	r22, Y+1	; 0x01
    39f4:	8f e1       	ldi	r24, 0x1F	; 31
    39f6:	93 e0       	ldi	r25, 0x03	; 3
    39f8:	0e 94 21 2b 	call	0x5642	; 0x5642 <_ZN6String6concatEc>
    39fc:	8f e8       	ldi	r24, 0x8F	; 143
    39fe:	92 e0       	ldi	r25, 0x02	; 2
    3a00:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN7TwoWire9availableEv>
    3a04:	21 e0       	ldi	r18, 0x01	; 1
    3a06:	18 16       	cp	r1, r24
    3a08:	19 06       	cpc	r1, r25
    3a0a:	0c f0       	brlt	.+2      	; 0x3a0e <_ZN15WaterSensorWire7ReceiveEi+0x66>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	22 23       	and	r18, r18
    3a10:	59 f7       	brne	.-42     	; 0x39e8 <_ZN15WaterSensorWire7ReceiveEi+0x40>
    3a12:	8f e1       	ldi	r24, 0x1F	; 31
    3a14:	93 e0       	ldi	r25, 0x03	; 3
    3a16:	0e 94 02 2c 	call	0x5804	; 0x5804 <_ZN6String4trimEv>
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	44 96       	adiw	r24, 0x14	; 20
    3a1e:	6e e3       	ldi	r22, 0x3E	; 62
    3a20:	71 e0       	ldi	r23, 0x01	; 1
    3a22:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    3a26:	ce 01       	movw	r24, r28
    3a28:	44 96       	adiw	r24, 0x14	; 20
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	8f e1       	ldi	r24, 0x1F	; 31
    3a2e:	93 e0       	ldi	r25, 0x03	; 3
    3a30:	0e 94 9e 2b 	call	0x573c	; 0x573c <_ZNK6String10startsWithERKS_>
    3a34:	11 e0       	ldi	r17, 0x01	; 1
    3a36:	88 23       	and	r24, r24
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <_ZN15WaterSensorWire7ReceiveEi+0x94>
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	44 96       	adiw	r24, 0x14	; 20
    3a40:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3a44:	11 23       	and	r17, r17
    3a46:	a1 f0       	breq	.+40     	; 0x3a70 <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    3a48:	6f e1       	ldi	r22, 0x1F	; 31
    3a4a:	73 e0       	ldi	r23, 0x03	; 3
    3a4c:	8b e2       	ldi	r24, 0x2B	; 43
    3a4e:	93 e0       	ldi	r25, 0x03	; 3
    3a50:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3a54:	86 ef       	ldi	r24, 0xF6	; 246
    3a56:	93 e0       	ldi	r25, 0x03	; 3
    3a58:	bc 01       	movw	r22, r24
    3a5a:	80 ec       	ldi	r24, 0xC0	; 192
    3a5c:	94 e0       	ldi	r25, 0x04	; 4
    3a5e:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    3a62:	6b e2       	ldi	r22, 0x2B	; 43
    3a64:	73 e0       	ldi	r23, 0x03	; 3
    3a66:	80 ec       	ldi	r24, 0xC0	; 192
    3a68:	94 e0       	ldi	r25, 0x04	; 4
    3a6a:	0e 94 d7 26 	call	0x4dae	; 0x4dae <_ZN5Print7printlnERK6String>
    3a6e:	92 c0       	rjmp	.+292    	; 0x3b94 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    3a70:	6f e1       	ldi	r22, 0x1F	; 31
    3a72:	73 e0       	ldi	r23, 0x03	; 3
    3a74:	81 e3       	ldi	r24, 0x31	; 49
    3a76:	93 e0       	ldi	r25, 0x03	; 3
    3a78:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3a7c:	8c ef       	ldi	r24, 0xFC	; 252
    3a7e:	93 e0       	ldi	r25, 0x03	; 3
    3a80:	bc 01       	movw	r22, r24
    3a82:	80 ec       	ldi	r24, 0xC0	; 192
    3a84:	94 e0       	ldi	r25, 0x04	; 4
    3a86:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    3a8a:	61 e3       	ldi	r22, 0x31	; 49
    3a8c:	73 e0       	ldi	r23, 0x03	; 3
    3a8e:	80 ec       	ldi	r24, 0xC0	; 192
    3a90:	94 e0       	ldi	r25, 0x04	; 4
    3a92:	0e 94 d7 26 	call	0x4dae	; 0x4dae <_ZN5Print7printlnERK6String>
    3a96:	ce 01       	movw	r24, r28
    3a98:	0e 96       	adiw	r24, 0x0e	; 14
    3a9a:	61 e3       	ldi	r22, 0x31	; 49
    3a9c:	73 e0       	ldi	r23, 0x03	; 3
    3a9e:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	4a 96       	adiw	r24, 0x1a	; 26
    3aa6:	be 01       	movw	r22, r28
    3aa8:	62 5f       	subi	r22, 0xF2	; 242
    3aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	4d e3       	ldi	r20, 0x3D	; 61
    3ab2:	95 d1       	rcall	.+810    	; 0x3dde <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	0e 96       	adiw	r24, 0x0e	; 14
    3ab8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3abc:	ce 01       	movw	r24, r28
    3abe:	08 96       	adiw	r24, 0x08	; 8
    3ac0:	61 e3       	ldi	r22, 0x31	; 49
    3ac2:	73 e0       	ldi	r23, 0x03	; 3
    3ac4:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    3ac8:	ce 01       	movw	r24, r28
    3aca:	80 96       	adiw	r24, 0x20	; 32
    3acc:	be 01       	movw	r22, r28
    3ace:	68 5f       	subi	r22, 0xF8	; 248
    3ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad2:	21 e0       	ldi	r18, 0x01	; 1
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	4d e3       	ldi	r20, 0x3D	; 61
    3ad8:	82 d1       	rcall	.+772    	; 0x3dde <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3ada:	ce 01       	movw	r24, r28
    3adc:	08 96       	adiw	r24, 0x08	; 8
    3ade:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	4a 96       	adiw	r24, 0x1a	; 26
    3ae6:	60 e4       	ldi	r22, 0x40	; 64
    3ae8:	71 e0       	ldi	r23, 0x01	; 1
    3aea:	29 de       	rcall	.-942    	; 0x373e <_ZNK6StringeqEPKc>
    3aec:	98 2f       	mov	r25, r24
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	99 23       	and	r25, r25
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	88 23       	and	r24, r24
    3af8:	89 f0       	breq	.+34     	; 0x3b1c <_ZN15WaterSensorWire7ReceiveEi+0x174>
    3afa:	ce 01       	movw	r24, r28
    3afc:	80 96       	adiw	r24, 0x20	; 32
    3afe:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZNK6String5toIntEv>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9b 83       	std	Y+3, r25	; 0x03
    3b08:	8a 83       	std	Y+2, r24	; 0x02
    3b0a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    3b0e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    3b12:	2a 81       	ldd	r18, Y+2	; 0x02
    3b14:	3b 81       	ldd	r19, Y+3	; 0x03
    3b16:	b9 01       	movw	r22, r18
    3b18:	9e db       	rcall	.-2244   	; 0x3256 <_ZN9TDSSensor6UpdateEi>
    3b1a:	23 c0       	rjmp	.+70     	; 0x3b62 <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    3b1c:	ce 01       	movw	r24, r28
    3b1e:	4a 96       	adiw	r24, 0x1a	; 26
    3b20:	6a e4       	ldi	r22, 0x4A	; 74
    3b22:	71 e0       	ldi	r23, 0x01	; 1
    3b24:	0c de       	rcall	.-1000   	; 0x373e <_ZNK6StringeqEPKc>
    3b26:	98 2f       	mov	r25, r24
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	99 23       	and	r25, r25
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <_ZN15WaterSensorWire7ReceiveEi+0x188>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	88 23       	and	r24, r24
    3b32:	b9 f0       	breq	.+46     	; 0x3b62 <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    3b34:	ce 01       	movw	r24, r28
    3b36:	80 96       	adiw	r24, 0x20	; 32
    3b38:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <_ZNK6String7toFloatEv>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	8c 83       	std	Y+4, r24	; 0x04
    3b42:	9d 83       	std	Y+5, r25	; 0x05
    3b44:	ae 83       	std	Y+6, r26	; 0x06
    3b46:	bf 83       	std	Y+7, r27	; 0x07
    3b48:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3b4c:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    3b50:	8c 81       	ldd	r24, Y+4	; 0x04
    3b52:	9d 81       	ldd	r25, Y+5	; 0x05
    3b54:	ae 81       	ldd	r26, Y+6	; 0x06
    3b56:	bf 81       	ldd	r27, Y+7	; 0x07
    3b58:	ac 01       	movw	r20, r24
    3b5a:	bd 01       	movw	r22, r26
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN8PHSensor6UpdateEd>
    3b62:	ce 01       	movw	r24, r28
    3b64:	80 96       	adiw	r24, 0x20	; 32
    3b66:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	4a 96       	adiw	r24, 0x1a	; 26
    3b6e:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3b72:	10 c0       	rjmp	.+32     	; 0x3b94 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    3b74:	86 e0       	ldi	r24, 0x06	; 6
    3b76:	94 e0       	ldi	r25, 0x04	; 4
    3b78:	bc 01       	movw	r22, r24
    3b7a:	80 ec       	ldi	r24, 0xC0	; 192
    3b7c:	94 e0       	ldi	r25, 0x04	; 4
    3b7e:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    3b82:	8e a1       	ldd	r24, Y+38	; 0x26
    3b84:	9f a1       	ldd	r25, Y+39	; 0x27
    3b86:	4a e0       	ldi	r20, 0x0A	; 10
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	bc 01       	movw	r22, r24
    3b8c:	80 ec       	ldi	r24, 0xC0	; 192
    3b8e:	94 e0       	ldi	r25, 0x04	; 4
    3b90:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_ZN5Print7printlnEii>
    3b94:	a7 96       	adiw	r28, 0x27	; 39
    3b96:	e3 e0       	ldi	r30, 0x03	; 3
    3b98:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <__epilogue_restores__+0x1e>

00003b9c <_ZN15WaterSensorWire7RequestEv>:
    3b9c:	a2 e1       	ldi	r26, 0x12	; 18
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	e4 ed       	ldi	r30, 0xD4	; 212
    3ba2:	fd e1       	ldi	r31, 0x1D	; 29
    3ba4:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__prologue_saves__+0x1c>
    3ba8:	ce 01       	movw	r24, r28
    3baa:	0d 96       	adiw	r24, 0x0d	; 13
    3bac:	6d e3       	ldi	r22, 0x3D	; 61
    3bae:	71 e0       	ldi	r23, 0x01	; 1
    3bb0:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    3bb4:	6e e3       	ldi	r22, 0x3E	; 62
    3bb6:	71 e0       	ldi	r23, 0x01	; 1
    3bb8:	8b e2       	ldi	r24, 0x2B	; 43
    3bba:	93 e0       	ldi	r25, 0x03	; 3
    3bbc:	c0 dd       	rcall	.-1152   	; 0x373e <_ZNK6StringeqEPKc>
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	99 23       	and	r25, r25
    3bc4:	09 f4       	brne	.+2      	; 0x3bc8 <_ZN15WaterSensorWire7RequestEv+0x2c>
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	88 23       	and	r24, r24
    3bca:	c1 f0       	breq	.+48     	; 0x3bfc <_ZN15WaterSensorWire7RequestEv+0x60>
    3bcc:	ce 01       	movw	r24, r28
    3bce:	0d 96       	adiw	r24, 0x0d	; 13
    3bd0:	63 e5       	ldi	r22, 0x53	; 83
    3bd2:	71 e0       	ldi	r23, 0x01	; 1
    3bd4:	0e 94 21 2a 	call	0x5442	; 0x5442 <_ZN6StringaSEPKc>
    3bd8:	9e 01       	movw	r18, r28
    3bda:	23 5f       	subi	r18, 0xF3	; 243
    3bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bde:	ce 01       	movw	r24, r28
    3be0:	07 96       	adiw	r24, 0x07	; 7
    3be2:	b9 01       	movw	r22, r18
    3be4:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    3be8:	ce 01       	movw	r24, r28
    3bea:	07 96       	adiw	r24, 0x07	; 7
    3bec:	a8 d0       	rcall	.+336    	; 0x3d3e <_ZN15WaterSensorWire8TransmitE6String>
    3bee:	ce 01       	movw	r24, r28
    3bf0:	07 96       	adiw	r24, 0x07	; 7
    3bf2:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3bf6:	00 e0       	ldi	r16, 0x00	; 0
    3bf8:	10 e0       	ldi	r17, 0x00	; 0
    3bfa:	95 c0       	rjmp	.+298    	; 0x3d26 <_ZN15WaterSensorWire7RequestEv+0x18a>
    3bfc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c00:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c04:	01 96       	adiw	r24, 0x01	; 1
    3c06:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3c0a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3c0e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c12:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c16:	89 2b       	or	r24, r25
    3c18:	39 f4       	brne	.+14     	; 0x3c28 <_ZN15WaterSensorWire7RequestEv+0x8c>
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	0d 96       	adiw	r24, 0x0d	; 13
    3c1e:	6d e3       	ldi	r22, 0x3D	; 61
    3c20:	73 e0       	ldi	r23, 0x03	; 3
    3c22:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3c26:	6f c0       	rjmp	.+222    	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3c28:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c2c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	39 f4       	brne	.+14     	; 0x3c42 <_ZN15WaterSensorWire7RequestEv+0xa6>
    3c34:	ce 01       	movw	r24, r28
    3c36:	0d 96       	adiw	r24, 0x0d	; 13
    3c38:	63 e4       	ldi	r22, 0x43	; 67
    3c3a:	73 e0       	ldi	r23, 0x03	; 3
    3c3c:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3c40:	62 c0       	rjmp	.+196    	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3c42:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c46:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c4a:	02 97       	sbiw	r24, 0x02	; 2
    3c4c:	39 f4       	brne	.+14     	; 0x3c5c <_ZN15WaterSensorWire7RequestEv+0xc0>
    3c4e:	ce 01       	movw	r24, r28
    3c50:	0d 96       	adiw	r24, 0x0d	; 13
    3c52:	6b e5       	ldi	r22, 0x5B	; 91
    3c54:	73 e0       	ldi	r23, 0x03	; 3
    3c56:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3c5a:	55 c0       	rjmp	.+170    	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3c5c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c60:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c64:	03 97       	sbiw	r24, 0x03	; 3
    3c66:	39 f4       	brne	.+14     	; 0x3c76 <_ZN15WaterSensorWire7RequestEv+0xda>
    3c68:	ce 01       	movw	r24, r28
    3c6a:	0d 96       	adiw	r24, 0x0d	; 13
    3c6c:	61 e6       	ldi	r22, 0x61	; 97
    3c6e:	73 e0       	ldi	r23, 0x03	; 3
    3c70:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3c74:	48 c0       	rjmp	.+144    	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3c76:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c7a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c7e:	04 97       	sbiw	r24, 0x04	; 4
    3c80:	39 f4       	brne	.+14     	; 0x3c90 <_ZN15WaterSensorWire7RequestEv+0xf4>
    3c82:	ce 01       	movw	r24, r28
    3c84:	0d 96       	adiw	r24, 0x0d	; 13
    3c86:	65 e5       	ldi	r22, 0x55	; 85
    3c88:	73 e0       	ldi	r23, 0x03	; 3
    3c8a:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3c8e:	3b c0       	rjmp	.+118    	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3c90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c94:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c98:	05 97       	sbiw	r24, 0x05	; 5
    3c9a:	39 f4       	brne	.+14     	; 0x3caa <_ZN15WaterSensorWire7RequestEv+0x10e>
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	0d 96       	adiw	r24, 0x0d	; 13
    3ca0:	6f e4       	ldi	r22, 0x4F	; 79
    3ca2:	73 e0       	ldi	r23, 0x03	; 3
    3ca4:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3ca8:	2e c0       	rjmp	.+92     	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3caa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3cae:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3cb2:	06 97       	sbiw	r24, 0x06	; 6
    3cb4:	69 f4       	brne	.+26     	; 0x3cd0 <_ZN15WaterSensorWire7RequestEv+0x134>
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	0d 96       	adiw	r24, 0x0d	; 13
    3cba:	69 e4       	ldi	r22, 0x49	; 73
    3cbc:	73 e0       	ldi	r23, 0x03	; 3
    3cbe:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN6StringaSERKS_>
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	9f ef       	ldi	r25, 0xFF	; 255
    3cc6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3cca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3cce:	1b c0       	rjmp	.+54     	; 0x3d06 <_ZN15WaterSensorWire7RequestEv+0x16a>
    3cd0:	8c e2       	ldi	r24, 0x2C	; 44
    3cd2:	94 e0       	ldi	r25, 0x04	; 4
    3cd4:	bc 01       	movw	r22, r24
    3cd6:	80 ec       	ldi	r24, 0xC0	; 192
    3cd8:	94 e0       	ldi	r25, 0x04	; 4
    3cda:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    3cde:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3ce2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3ce6:	4a e0       	ldi	r20, 0x0A	; 10
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	bc 01       	movw	r22, r24
    3cec:	80 ec       	ldi	r24, 0xC0	; 192
    3cee:	94 e0       	ldi	r25, 0x04	; 4
    3cf0:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_ZN5Print7printlnEii>
    3cf4:	8f ef       	ldi	r24, 0xFF	; 255
    3cf6:	9f ef       	ldi	r25, 0xFF	; 255
    3cf8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3cfc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3d00:	00 e0       	ldi	r16, 0x00	; 0
    3d02:	10 e0       	ldi	r17, 0x00	; 0
    3d04:	10 c0       	rjmp	.+32     	; 0x3d26 <_ZN15WaterSensorWire7RequestEv+0x18a>
    3d06:	ce 01       	movw	r24, r28
    3d08:	0d 96       	adiw	r24, 0x0d	; 13
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	0e 94 19 2a 	call	0x5432	; 0x5432 <_ZN6StringC1ERKS_>
    3d14:	ce 01       	movw	r24, r28
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	12 d0       	rcall	.+36     	; 0x3d3e <_ZN15WaterSensorWire8TransmitE6String>
    3d1a:	ce 01       	movw	r24, r28
    3d1c:	01 96       	adiw	r24, 0x01	; 1
    3d1e:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3d22:	01 e0       	ldi	r16, 0x01	; 1
    3d24:	10 e0       	ldi	r17, 0x00	; 0
    3d26:	ce 01       	movw	r24, r28
    3d28:	0d 96       	adiw	r24, 0x0d	; 13
    3d2a:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    3d2e:	01 30       	cpi	r16, 0x01	; 1
    3d30:	11 05       	cpc	r17, r1
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <_ZN15WaterSensorWire7RequestEv+0x19a>
    3d34:	00 00       	nop
    3d36:	62 96       	adiw	r28, 0x12	; 18
    3d38:	e4 e0       	ldi	r30, 0x04	; 4
    3d3a:	0c 94 e6 2c 	jmp	0x59cc	; 0x59cc <__epilogue_restores__+0x1c>

00003d3e <_ZN15WaterSensorWire8TransmitE6String>:
    3d3e:	a2 e1       	ldi	r26, 0x12	; 18
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	e5 ea       	ldi	r30, 0xA5	; 165
    3d44:	fe e1       	ldi	r31, 0x1E	; 30
    3d46:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3d4a:	9a 8b       	std	Y+18, r25	; 0x12
    3d4c:	89 8b       	std	Y+17, r24	; 0x11
    3d4e:	89 89       	ldd	r24, Y+17	; 0x11
    3d50:	9a 89       	ldd	r25, Y+18	; 0x12
    3d52:	cd dc       	rcall	.-1638   	; 0x36ee <_ZNK6String6lengthEv>
    3d54:	9c 01       	movw	r18, r24
    3d56:	8a e0       	ldi	r24, 0x0A	; 10
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	82 1b       	sub	r24, r18
    3d5c:	93 0b       	sbc	r25, r19
    3d5e:	9e 83       	std	Y+6, r25	; 0x06
    3d60:	8d 83       	std	Y+5, r24	; 0x05
    3d62:	1a 82       	std	Y+2, r1	; 0x02
    3d64:	19 82       	std	Y+1, r1	; 0x01
    3d66:	0a c0       	rjmp	.+20     	; 0x3d7c <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    3d68:	89 89       	ldd	r24, Y+17	; 0x11
    3d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d6c:	69 e5       	ldi	r22, 0x59	; 89
    3d6e:	71 e0       	ldi	r23, 0x01	; 1
    3d70:	cf dc       	rcall	.-1634   	; 0x3710 <_ZN6StringpLEPKc>
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	01 96       	adiw	r24, 0x01	; 1
    3d78:	9a 83       	std	Y+2, r25	; 0x02
    3d7a:	89 83       	std	Y+1, r24	; 0x01
    3d7c:	29 81       	ldd	r18, Y+1	; 0x01
    3d7e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	28 17       	cp	r18, r24
    3d86:	39 07       	cpc	r19, r25
    3d88:	7c f3       	brlt	.-34     	; 0x3d68 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    3d8a:	1c 82       	std	Y+4, r1	; 0x04
    3d8c:	1b 82       	std	Y+3, r1	; 0x03
    3d8e:	16 c0       	rjmp	.+44     	; 0x3dbc <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    3d90:	2b 81       	ldd	r18, Y+3	; 0x03
    3d92:	3c 81       	ldd	r19, Y+4	; 0x04
    3d94:	89 89       	ldd	r24, Y+17	; 0x11
    3d96:	9a 89       	ldd	r25, Y+18	; 0x12
    3d98:	b9 01       	movw	r22, r18
    3d9a:	0e 94 bd 2b 	call	0x577a	; 0x577a <_ZNK6String6charAtEj>
    3d9e:	48 2f       	mov	r20, r24
    3da0:	9e 01       	movw	r18, r28
    3da2:	29 5f       	subi	r18, 0xF9	; 249
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	82 0f       	add	r24, r18
    3dac:	93 1f       	adc	r25, r19
    3dae:	fc 01       	movw	r30, r24
    3db0:	40 83       	st	Z, r20
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	9c 81       	ldd	r25, Y+4	; 0x04
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	9c 83       	std	Y+4, r25	; 0x04
    3dba:	8b 83       	std	Y+3, r24	; 0x03
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc0:	0a 97       	sbiw	r24, 0x0a	; 10
    3dc2:	34 f3       	brlt	.-52     	; 0x3d90 <_ZN15WaterSensorWire8TransmitE6String+0x52>
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	07 96       	adiw	r24, 0x07	; 7
    3dc8:	4a e0       	ldi	r20, 0x0A	; 10
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	bc 01       	movw	r22, r24
    3dce:	8f e8       	ldi	r24, 0x8F	; 143
    3dd0:	92 e0       	ldi	r25, 0x02	; 2
    3dd2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN7TwoWire5writeEPKhj>
    3dd6:	62 96       	adiw	r28, 0x12	; 18
    3dd8:	e2 e0       	ldi	r30, 0x02	; 2
    3dda:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003dde <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    3dde:	a1 e1       	ldi	r26, 0x11	; 17
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	e5 ef       	ldi	r30, 0xF5	; 245
    3de4:	fe e1       	ldi	r31, 0x1E	; 30
    3de6:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3dea:	9c 87       	std	Y+12, r25	; 0x0c
    3dec:	8b 87       	std	Y+11, r24	; 0x0b
    3dee:	7e 87       	std	Y+14, r23	; 0x0e
    3df0:	6d 87       	std	Y+13, r22	; 0x0d
    3df2:	4f 87       	std	Y+15, r20	; 0x0f
    3df4:	39 8b       	std	Y+17, r19	; 0x11
    3df6:	28 8b       	std	Y+16, r18	; 0x10
    3df8:	1a 82       	std	Y+2, r1	; 0x02
    3dfa:	19 82       	std	Y+1, r1	; 0x01
    3dfc:	18 86       	std	Y+8, r1	; 0x08
    3dfe:	1f 82       	std	Y+7, r1	; 0x07
    3e00:	8f ef       	ldi	r24, 0xFF	; 255
    3e02:	9f ef       	ldi	r25, 0xFF	; 255
    3e04:	9a 87       	std	Y+10, r25	; 0x0a
    3e06:	89 87       	std	Y+9, r24	; 0x09
    3e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0c:	70 dc       	rcall	.-1824   	; 0x36ee <_ZNK6String6lengthEv>
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	9e 83       	std	Y+6, r25	; 0x06
    3e12:	8d 83       	std	Y+5, r24	; 0x05
    3e14:	1c 82       	std	Y+4, r1	; 0x04
    3e16:	1b 82       	std	Y+3, r1	; 0x03
    3e18:	35 c0       	rjmp	.+106    	; 0x3e84 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    3e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e22:	b9 01       	movw	r22, r18
    3e24:	0e 94 bd 2b 	call	0x577a	; 0x577a <_ZNK6String6charAtEj>
    3e28:	98 2f       	mov	r25, r24
    3e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e2c:	98 17       	cp	r25, r24
    3e2e:	39 f0       	breq	.+14     	; 0x3e3e <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	3c 81       	ldd	r19, Y+4	; 0x04
    3e34:	8d 81       	ldd	r24, Y+5	; 0x05
    3e36:	9e 81       	ldd	r25, Y+6	; 0x06
    3e38:	28 17       	cp	r18, r24
    3e3a:	39 07       	cpc	r19, r25
    3e3c:	11 f4       	brne	.+4      	; 0x3e42 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	01 c0       	rjmp	.+2      	; 0x3e44 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	88 23       	and	r24, r24
    3e46:	c9 f0       	breq	.+50     	; 0x3e7a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	01 96       	adiw	r24, 0x01	; 1
    3e4e:	9a 83       	std	Y+2, r25	; 0x02
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	89 85       	ldd	r24, Y+9	; 0x09
    3e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	98 87       	std	Y+8, r25	; 0x08
    3e5a:	8f 83       	std	Y+7, r24	; 0x07
    3e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e60:	8d 81       	ldd	r24, Y+5	; 0x05
    3e62:	9e 81       	ldd	r25, Y+6	; 0x06
    3e64:	28 17       	cp	r18, r24
    3e66:	39 07       	cpc	r19, r25
    3e68:	21 f4       	brne	.+8      	; 0x3e72 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    3e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    3e72:	8b 81       	ldd	r24, Y+3	; 0x03
    3e74:	9c 81       	ldd	r25, Y+4	; 0x04
    3e76:	9a 87       	std	Y+10, r25	; 0x0a
    3e78:	89 87       	std	Y+9, r24	; 0x09
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	8b 83       	std	Y+3, r24	; 0x03
    3e84:	2b 81       	ldd	r18, Y+3	; 0x03
    3e86:	3c 81       	ldd	r19, Y+4	; 0x04
    3e88:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8c:	82 17       	cp	r24, r18
    3e8e:	93 07       	cpc	r25, r19
    3e90:	44 f0       	brlt	.+16     	; 0x3ea2 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3e92:	29 81       	ldd	r18, Y+1	; 0x01
    3e94:	3a 81       	ldd	r19, Y+2	; 0x02
    3e96:	88 89       	ldd	r24, Y+16	; 0x10
    3e98:	99 89       	ldd	r25, Y+17	; 0x11
    3e9a:	82 17       	cp	r24, r18
    3e9c:	93 07       	cpc	r25, r19
    3e9e:	0c f0       	brlt	.+2      	; 0x3ea2 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3ea0:	bc cf       	rjmp	.-136    	; 0x3e1a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    3ea2:	29 81       	ldd	r18, Y+1	; 0x01
    3ea4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea6:	88 89       	ldd	r24, Y+16	; 0x10
    3ea8:	99 89       	ldd	r25, Y+17	; 0x11
    3eaa:	82 17       	cp	r24, r18
    3eac:	93 07       	cpc	r25, r19
    3eae:	6c f4       	brge	.+26     	; 0x3eca <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	9c 01       	movw	r18, r24
    3eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb8:	98 85       	ldd	r25, Y+8	; 0x08
    3eba:	ac 01       	movw	r20, r24
    3ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ec0:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ec2:	7e 85       	ldd	r23, Y+14	; 0x0e
    3ec4:	0e 94 be 2b 	call	0x577c	; 0x577c <_ZNK6String9substringEjj>
    3ec8:	06 c0       	rjmp	.+12     	; 0x3ed6 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    3eca:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ecc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ece:	6d e3       	ldi	r22, 0x3D	; 61
    3ed0:	71 e0       	ldi	r23, 0x01	; 1
    3ed2:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    3ed6:	00 00       	nop
    3ed8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eda:	9c 85       	ldd	r25, Y+12	; 0x0c
    3edc:	61 96       	adiw	r28, 0x11	; 17
    3ede:	e2 e0       	ldi	r30, 0x02	; 2
    3ee0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00003ee4 <_Z41__static_initialization_and_destruction_0ii>:
    3ee4:	a4 e0       	ldi	r26, 0x04	; 4
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	e8 e7       	ldi	r30, 0x78	; 120
    3eea:	ff e1       	ldi	r31, 0x1F	; 31
    3eec:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	7c 83       	std	Y+4, r23	; 0x04
    3ef6:	6b 83       	std	Y+3, r22	; 0x03
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    3f00:	4d c0       	rjmp	.+154    	; 0x3f9c <_Z41__static_initialization_and_destruction_0ii+0xb8>
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	01 96       	adiw	r24, 0x01	; 1
    3f08:	09 f0       	breq	.+2      	; 0x3f0c <_Z41__static_initialization_and_destruction_0ii+0x28>
    3f0a:	48 c0       	rjmp	.+144    	; 0x3f9c <_Z41__static_initialization_and_destruction_0ii+0xb8>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3f0c:	6d e3       	ldi	r22, 0x3D	; 61
    3f0e:	71 e0       	ldi	r23, 0x01	; 1
    3f10:	8f e1       	ldi	r24, 0x1F	; 31
    3f12:	93 e0       	ldi	r25, 0x03	; 3
    3f14:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    3f18:	6d e3       	ldi	r22, 0x3D	; 61
    3f1a:	71 e0       	ldi	r23, 0x01	; 1
    3f1c:	85 e2       	ldi	r24, 0x25	; 37
    3f1e:	93 e0       	ldi	r25, 0x03	; 3
    3f20:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    3f24:	6d e3       	ldi	r22, 0x3D	; 61
    3f26:	71 e0       	ldi	r23, 0x01	; 1
    3f28:	8b e2       	ldi	r24, 0x2B	; 43
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _cmdData = "";
    3f30:	6d e3       	ldi	r22, 0x3D	; 61
    3f32:	71 e0       	ldi	r23, 0x01	; 1
    3f34:	81 e3       	ldi	r24, 0x31	; 49
    3f36:	93 e0       	ldi	r25, 0x03	; 3
    3f38:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _response = "";
    3f3c:	6d e3       	ldi	r22, 0x3D	; 61
    3f3e:	71 e0       	ldi	r23, 0x01	; 1
    3f40:	87 e3       	ldi	r24, 0x37	; 55
    3f42:	93 e0       	ldi	r25, 0x03	; 3
    3f44:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
//static long _lastReqReceived = 0;
static String _ph = "";
    3f48:	6d e3       	ldi	r22, 0x3D	; 61
    3f4a:	71 e0       	ldi	r23, 0x01	; 1
    3f4c:	8d e3       	ldi	r24, 0x3D	; 61
    3f4e:	93 e0       	ldi	r25, 0x03	; 3
    3f50:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
//static String _phAvg = "";
static String _tds = "";
    3f54:	6d e3       	ldi	r22, 0x3D	; 61
    3f56:	71 e0       	ldi	r23, 0x01	; 1
    3f58:	83 e4       	ldi	r24, 0x43	; 67
    3f5a:	93 e0       	ldi	r25, 0x03	; 3
    3f5c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3f60:	6d e3       	ldi	r22, 0x3D	; 61
    3f62:	71 e0       	ldi	r23, 0x01	; 1
    3f64:	89 e4       	ldi	r24, 0x49	; 73
    3f66:	93 e0       	ldi	r25, 0x03	; 3
    3f68:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _sensorReadDur = "";
    3f6c:	6d e3       	ldi	r22, 0x3D	; 61
    3f6e:	71 e0       	ldi	r23, 0x01	; 1
    3f70:	8f e4       	ldi	r24, 0x4F	; 79
    3f72:	93 e0       	ldi	r25, 0x03	; 3
    3f74:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _reading = "";
    3f78:	6d e3       	ldi	r22, 0x3D	; 61
    3f7a:	71 e0       	ldi	r23, 0x01	; 1
    3f7c:	85 e5       	ldi	r24, 0x55	; 85
    3f7e:	93 e0       	ldi	r25, 0x03	; 3
    3f80:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _phOffset = "";
    3f84:	6d e3       	ldi	r22, 0x3D	; 61
    3f86:	71 e0       	ldi	r23, 0x01	; 1
    3f88:	8b e5       	ldi	r24, 0x5B	; 91
    3f8a:	93 e0       	ldi	r25, 0x03	; 3
    3f8c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
static String _tdsOffset = "";
    3f90:	6d e3       	ldi	r22, 0x3D	; 61
    3f92:	71 e0       	ldi	r23, 0x01	; 1
    3f94:	81 e6       	ldi	r24, 0x61	; 97
    3f96:	93 e0       	ldi	r25, 0x03	; 3
    3f98:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <_ZN6StringC1EPKc>
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa0:	89 2b       	or	r24, r25
    3fa2:	a1 f5       	brne	.+104    	; 0x400c <_Z41__static_initialization_and_destruction_0ii+0x128>
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa8:	01 96       	adiw	r24, 0x01	; 1
    3faa:	81 f5       	brne	.+96     	; 0x400c <_Z41__static_initialization_and_destruction_0ii+0x128>
    3fac:	81 e6       	ldi	r24, 0x61	; 97
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
static String _phOffset = "";
    3fb4:	8b e5       	ldi	r24, 0x5B	; 91
    3fb6:	93 e0       	ldi	r25, 0x03	; 3
    3fb8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
    3fbc:	85 e5       	ldi	r24, 0x55	; 85
    3fbe:	93 e0       	ldi	r25, 0x03	; 3
    3fc0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
    3fc4:	8f e4       	ldi	r24, 0x4F	; 79
    3fc6:	93 e0       	ldi	r25, 0x03	; 3
    3fc8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3fcc:	89 e4       	ldi	r24, 0x49	; 73
    3fce:	93 e0       	ldi	r25, 0x03	; 3
    3fd0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
    3fd4:	83 e4       	ldi	r24, 0x43	; 67
    3fd6:	93 e0       	ldi	r25, 0x03	; 3
    3fd8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
    3fdc:	8d e3       	ldi	r24, 0x3D	; 61
    3fde:	93 e0       	ldi	r25, 0x03	; 3
    3fe0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
    3fe4:	87 e3       	ldi	r24, 0x37	; 55
    3fe6:	93 e0       	ldi	r25, 0x03	; 3
    3fe8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    3fec:	81 e3       	ldi	r24, 0x31	; 49
    3fee:	93 e0       	ldi	r25, 0x03	; 3
    3ff0:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    3ff4:	8b e2       	ldi	r24, 0x2B	; 43
    3ff6:	93 e0       	ldi	r25, 0x03	; 3
    3ff8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    3ffc:	85 e2       	ldi	r24, 0x25	; 37
    3ffe:	93 e0       	ldi	r25, 0x03	; 3
    4000:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4004:	8f e1       	ldi	r24, 0x1F	; 31
    4006:	93 e0       	ldi	r25, 0x03	; 3
    4008:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    400c:	24 96       	adiw	r28, 0x04	; 4
    400e:	e2 e0       	ldi	r30, 0x02	; 2
    4010:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004014 <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    4014:	a0 e0       	ldi	r26, 0x00	; 0
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	e0 e1       	ldi	r30, 0x10	; 16
    401a:	f0 e2       	ldi	r31, 0x20	; 32
    401c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    4020:	6f ef       	ldi	r22, 0xFF	; 255
    4022:	7f ef       	ldi	r23, 0xFF	; 255
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	5d df       	rcall	.-326    	; 0x3ee4 <_Z41__static_initialization_and_destruction_0ii>
    402a:	e2 e0       	ldi	r30, 0x02	; 2
    402c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004030 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    4030:	a0 e0       	ldi	r26, 0x00	; 0
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	ee e1       	ldi	r30, 0x1E	; 30
    4036:	f0 e2       	ldi	r31, 0x20	; 32
    4038:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    403c:	6f ef       	ldi	r22, 0xFF	; 255
    403e:	7f ef       	ldi	r23, 0xFF	; 255
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	4f df       	rcall	.-354    	; 0x3ee4 <_Z41__static_initialization_and_destruction_0ii>
    4046:	e2 e0       	ldi	r30, 0x02	; 2
    4048:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000404c <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    404c:	a2 e0       	ldi	r26, 0x02	; 2
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	ec e2       	ldi	r30, 0x2C	; 44
    4052:	f0 e2       	ldi	r31, 0x20	; 32
    4054:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	c2 96       	adiw	r24, 0x32	; 50
    4062:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    4066:	22 96       	adiw	r28, 0x02	; 2
    4068:	e2 e0       	ldi	r30, 0x02	; 2
    406a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000406e <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    406e:	a2 e0       	ldi	r26, 0x02	; 2
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	ed e3       	ldi	r30, 0x3D	; 61
    4074:	f0 e2       	ldi	r31, 0x20	; 32
    4076:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    407a:	9a 83       	std	Y+2, r25	; 0x02
    407c:	89 83       	std	Y+1, r24	; 0x01
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	c0 96       	adiw	r24, 0x30	; 48
    4084:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringD1Ev>
    4088:	22 96       	adiw	r28, 0x02	; 2
    408a:	e2 e0       	ldi	r30, 0x02	; 2
    408c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004090 <_Z41__static_initialization_and_destruction_0ii>:

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);



}
    4090:	ac e4       	ldi	r26, 0x4C	; 76
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	ee e4       	ldi	r30, 0x4E	; 78
    4096:	f0 e2       	ldi	r31, 0x20	; 32
    4098:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>
    409c:	9e 01       	movw	r18, r28
    409e:	27 5b       	subi	r18, 0xB7	; 183
    40a0:	3f 4f       	sbci	r19, 0xFF	; 255
    40a2:	f9 01       	movw	r30, r18
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	80 83       	st	Z, r24
    40a8:	ce 01       	movw	r24, r28
    40aa:	85 5b       	subi	r24, 0xB5	; 181
    40ac:	9f 4f       	sbci	r25, 0xFF	; 255
    40ae:	fc 01       	movw	r30, r24
    40b0:	71 83       	std	Z+1, r23	; 0x01
    40b2:	60 83       	st	Z, r22
    40b4:	ce 01       	movw	r24, r28
    40b6:	87 5b       	subi	r24, 0xB7	; 183
    40b8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ba:	fc 01       	movw	r30, r24
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
    40c4:	44 c0       	rjmp	.+136    	; 0x414e <_Z41__static_initialization_and_destruction_0ii+0xbe>
    40c6:	ce 01       	movw	r24, r28
    40c8:	85 5b       	subi	r24, 0xB5	; 181
    40ca:	9f 4f       	sbci	r25, 0xFF	; 255
    40cc:	fc 01       	movw	r30, r24
    40ce:	80 81       	ld	r24, Z
    40d0:	91 81       	ldd	r25, Z+1	; 0x01
    40d2:	01 96       	adiw	r24, 0x01	; 1
    40d4:	e1 f5       	brne	.+120    	; 0x414e <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    40d6:	8c e6       	ldi	r24, 0x6C	; 108
    40d8:	93 e0       	ldi	r25, 0x03	; 3
    40da:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    40de:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN7Globals11_phRelayPinE>
    40e2:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN7Globals11_phRelayPinE+0x1>
    40e6:	2c e6       	ldi	r18, 0x6C	; 108
    40e8:	33 e0       	ldi	r19, 0x03	; 3
    40ea:	ce 01       	movw	r24, r28
    40ec:	85 96       	adiw	r24, 0x25	; 37
    40ee:	b9 01       	movw	r22, r18
    40f0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7LCDBaseC1ERKS_>
    40f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    40f8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    40fc:	9e 01       	movw	r18, r28
    40fe:	2b 5d       	subi	r18, 0xDB	; 219
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	78 01       	movw	r14, r16
    4104:	89 01       	movw	r16, r18
    4106:	21 e0       	ldi	r18, 0x01	; 1
    4108:	40 ed       	ldi	r20, 0xD0	; 208
    410a:	57 e0       	ldi	r21, 0x07	; 7
    410c:	bc 01       	movw	r22, r24
    410e:	80 e9       	ldi	r24, 0x90	; 144
    4110:	93 e0       	ldi	r25, 0x03	; 3
    4112:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    4116:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN7Globals12_tdsRelayPinE>
    411a:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN7Globals12_tdsRelayPinE+0x1>
    411e:	8c e6       	ldi	r24, 0x6C	; 108
    4120:	93 e0       	ldi	r25, 0x03	; 3
    4122:	bc 01       	movw	r22, r24
    4124:	ce 01       	movw	r24, r28
    4126:	01 96       	adiw	r24, 0x01	; 1
    4128:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN7LCDBaseC1ERKS_>
    412c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    4130:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    4134:	78 01       	movw	r14, r16
    4136:	9e 01       	movw	r18, r28
    4138:	2f 5f       	subi	r18, 0xFF	; 255
    413a:	3f 4f       	sbci	r19, 0xFF	; 255
    413c:	89 01       	movw	r16, r18
    413e:	21 e0       	ldi	r18, 0x01	; 1
    4140:	48 ee       	ldi	r20, 0xE8	; 232
    4142:	53 e0       	ldi	r21, 0x03	; 3
    4144:	bc 01       	movw	r22, r24
    4146:	8c ec       	ldi	r24, 0xCC	; 204
    4148:	93 e0       	ldi	r25, 0x03	; 3
    414a:	0e 94 72 18 	call	0x30e4	; 0x30e4 <_ZN9TDSSensorC1Eiib7LCDBasei>
    414e:	ce 01       	movw	r24, r28
    4150:	87 5b       	subi	r24, 0xB7	; 183
    4152:	9f 4f       	sbci	r25, 0xFF	; 255
    4154:	fc 01       	movw	r30, r24
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	89 2b       	or	r24, r25
    415c:	71 f4       	brne	.+28     	; 0x417a <_Z41__static_initialization_and_destruction_0ii+0xea>
    415e:	ce 01       	movw	r24, r28
    4160:	85 5b       	subi	r24, 0xB5	; 181
    4162:	9f 4f       	sbci	r25, 0xFF	; 255
    4164:	fc 01       	movw	r30, r24
    4166:	80 81       	ld	r24, Z
    4168:	91 81       	ldd	r25, Z+1	; 0x01
    416a:	01 96       	adiw	r24, 0x01	; 1
    416c:	31 f4       	brne	.+12     	; 0x417a <_Z41__static_initialization_and_destruction_0ii+0xea>
    416e:	8c ec       	ldi	r24, 0xCC	; 204
    4170:	93 e0       	ldi	r25, 0x03	; 3
    4172:	7d df       	rcall	.-262    	; 0x406e <_ZN9TDSSensorD1Ev>
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4174:	80 e9       	ldi	r24, 0x90	; 144
    4176:	93 e0       	ldi	r25, 0x03	; 3
    4178:	69 df       	rcall	.-302    	; 0x404c <_ZN8PHSensorD1Ev>

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);



}
    417a:	c4 5b       	subi	r28, 0xB4	; 180
    417c:	df 4f       	sbci	r29, 0xFF	; 255
    417e:	e6 e0       	ldi	r30, 0x06	; 6
    4180:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00004184 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    4184:	a0 e0       	ldi	r26, 0x00	; 0
    4186:	b0 e0       	ldi	r27, 0x00	; 0
    4188:	e8 ec       	ldi	r30, 0xC8	; 200
    418a:	f0 e2       	ldi	r31, 0x20	; 32
    418c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    4190:	6f ef       	ldi	r22, 0xFF	; 255
    4192:	7f ef       	ldi	r23, 0xFF	; 255
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	7b df       	rcall	.-266    	; 0x4090 <_Z41__static_initialization_and_destruction_0ii>
    419a:	e2 e0       	ldi	r30, 0x02	; 2
    419c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000041a0 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    41a0:	a0 e0       	ldi	r26, 0x00	; 0
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	e6 ed       	ldi	r30, 0xD6	; 214
    41a6:	f0 e2       	ldi	r31, 0x20	; 32
    41a8:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    41ac:	6f ef       	ldi	r22, 0xFF	; 255
    41ae:	7f ef       	ldi	r23, 0xFF	; 255
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	6d df       	rcall	.-294    	; 0x4090 <_Z41__static_initialization_and_destruction_0ii>
    41b6:	e2 e0       	ldi	r30, 0x02	; 2
    41b8:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000041bc <_ZN6Sketch5SetupEv>:

namespace Sketch {

    void(* resetFunc) (void) = 0;//declare reset function at address 0

    void Setup() {
    41bc:	a0 e0       	ldi	r26, 0x00	; 0
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	e4 ee       	ldi	r30, 0xE4	; 228
    41c2:	f0 e2       	ldi	r31, 0x20	; 32
    41c4:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    41c8:	89 e0       	ldi	r24, 0x09	; 9
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	88 70       	andi	r24, 0x08	; 8
    41ce:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    41d0:	89 2b       	or	r24, r25
    41d2:	11 f0       	breq	.+4      	; 0x41d8 <_ZN6Sketch5SetupEv+0x1c>
    41d4:	88 e2       	ldi	r24, 0x28	; 40
    41d6:	01 c0       	rjmp	.+2      	; 0x41da <_ZN6Sketch5SetupEv+0x1e>
    41d8:	88 e0       	ldi	r24, 0x08	; 8
    41da:	99 e0       	ldi	r25, 0x09	; 9
    41dc:	97 70       	andi	r25, 0x07	; 7
    41de:	89 2b       	or	r24, r25
    41e0:	98 2f       	mov	r25, r24
    41e2:	88 e1       	ldi	r24, 0x18	; 24
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	a8 95       	wdr
    41ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

        //todo: test reset

        wdt_enable(WDTO_8S);

        ThePHSensor.TurnOn();
    41f4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    41f8:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    41fc:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN8PHSensor6TurnOnEv>
        WaterSensorWire::Setup();
    4200:	c8 da       	rcall	.-2672   	; 0x3792 <_ZN15WaterSensorWire5SetupEv>
    }
    4202:	e2 e0       	ldi	r30, 0x02	; 2
    4204:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004208 <_ZN6Sketch4LoopEv>:

    void Loop() {
    4208:	a0 e0       	ldi	r26, 0x00	; 0
    420a:	b0 e0       	ldi	r27, 0x00	; 0
    420c:	ea e0       	ldi	r30, 0x0A	; 10
    420e:	f1 e2       	ldi	r31, 0x21	; 33
    4210:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>

        ThePHSensor.PrintPHToLCD();
    4214:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4218:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    421c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN8PHSensor12PrintPHToLCDEv>
        TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    4220:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    4224:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    4228:	6a d8       	rcall	.-3884   	; 0x32fe <_ZN9TDSSensor13PrintTDSToLCDEv>

        //CmdMessengerExt::Loop();

        if(millis() >= 44400000) { //reset every 6 hours. 21600000
    422a:	ea d6       	rcall	.+3540   	; 0x5000 <millis>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	21 e0       	ldi	r18, 0x01	; 1
    4232:	80 38       	cpi	r24, 0x80	; 128
    4234:	9d 47       	sbci	r25, 0x7D	; 125
    4236:	a5 4a       	sbci	r26, 0xA5	; 165
    4238:	b2 40       	sbci	r27, 0x02	; 2
    423a:	08 f4       	brcc	.+2      	; 0x423e <_ZN6Sketch4LoopEv+0x36>
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	22 23       	and	r18, r18
    4240:	59 f0       	breq	.+22     	; 0x4258 <_ZN6Sketch4LoopEv+0x50>

            //Serial.print(F("Reseting Arduino: "));
            //Serial.println(millis());
            delay(100);
    4242:	64 e6       	ldi	r22, 0x64	; 100
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0b d7       	rcall	.+3606   	; 0x5062 <delay>
            resetFunc(); //call reset
    424c:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZN6Sketch9resetFuncE>
    4250:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZN6Sketch9resetFuncE+0x1>
    4254:	fc 01       	movw	r30, r24
    4256:	09 95       	icall
        }
    }
    4258:	e2 e0       	ldi	r30, 0x02	; 2
    425a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000425e <_ZN6Sketch11AsyncDoWorkEv>:

    void AsyncDoWork() {
    425e:	a0 e0       	ldi	r26, 0x00	; 0
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	e5 e3       	ldi	r30, 0x35	; 53
    4264:	f1 e2       	ldi	r31, 0x21	; 33
    4266:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__prologue_saves__+0x18>

        wdt_reset();
    426a:	a8 95       	wdr

        //Serial.print(F("millis: "));
        //Serial.println(millis());

        static unsigned long lastSensorReadTime = millis();
    426c:	86 e0       	ldi	r24, 0x06	; 6
    426e:	94 e0       	ldi	r25, 0x04	; 4
    4270:	fc 01       	movw	r30, r24
    4272:	80 81       	ld	r24, Z
    4274:	88 23       	and	r24, r24
    4276:	81 f4       	brne	.+32     	; 0x4298 <_ZN6Sketch11AsyncDoWorkEv+0x3a>
    4278:	c3 d6       	rcall	.+3462   	; 0x5000 <millis>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    4282:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    4286:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    428a:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
    428e:	86 e0       	ldi	r24, 0x06	; 6
    4290:	94 e0       	ldi	r25, 0x04	; 4
    4292:	21 e0       	ldi	r18, 0x01	; 1
    4294:	fc 01       	movw	r30, r24
    4296:	20 83       	st	Z, r18

        if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    4298:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN7Globals6TheLCDE>
    429c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN7Globals6TheLCDE+0x1>
    42a0:	0e 94 9d 10 	call	0x213a	; 0x213a <_ZN7LCDBase14DetectKeyPressEv>
    42a4:	98 2f       	mov	r25, r24
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	94 30       	cpi	r25, 0x04	; 4
    42aa:	09 f0       	breq	.+2      	; 0x42ae <_ZN6Sketch11AsyncDoWorkEv+0x50>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	88 23       	and	r24, r24
    42b0:	91 f0       	breq	.+36     	; 0x42d6 <_ZN6Sketch11AsyncDoWorkEv+0x78>
            Serial.println(F("[Selelct] Pressed"));
    42b2:	87 e4       	ldi	r24, 0x47	; 71
    42b4:	94 e0       	ldi	r25, 0x04	; 4
    42b6:	bc 01       	movw	r22, r24
    42b8:	80 ec       	ldi	r24, 0xC0	; 192
    42ba:	94 e0       	ldi	r25, 0x04	; 4
    42bc:	68 d5       	rcall	.+2768   	; 0x4d8e <_ZN5Print7printlnEPK19__FlashStringHelper>
            SwitchSensors();
    42be:	5b d0       	rcall	.+182    	; 0x4376 <_ZN6Sketch13SwitchSensorsEv>
            lastSensorReadTime = millis();
    42c0:	9f d6       	rcall	.+3390   	; 0x5000 <millis>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    42ca:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    42ce:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    42d2:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
        }
        SensorReadDuration = millis() - lastSensorReadTime;
    42d6:	94 d6       	rcall	.+3368   	; 0x5000 <millis>
    42d8:	9b 01       	movw	r18, r22
    42da:	ac 01       	movw	r20, r24
    42dc:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    42e0:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    42e4:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    42e8:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
    42ec:	79 01       	movw	r14, r18
    42ee:	8a 01       	movw	r16, r20
    42f0:	e8 1a       	sub	r14, r24
    42f2:	f9 0a       	sbc	r15, r25
    42f4:	0a 0b       	sbc	r16, r26
    42f6:	1b 0b       	sbc	r17, r27
    42f8:	d8 01       	movw	r26, r16
    42fa:	c7 01       	movw	r24, r14
    42fc:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    4300:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    4304:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    4308:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
        WaterSensorWire::Loop();
    430c:	6a da       	rcall	.-2860   	; 0x37e2 <_ZN15WaterSensorWire4LoopEv>
        if(SensorReadDuration > SensorReadInterval) {
    430e:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    4312:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    4316:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    431a:	50 91 6b 03 	lds	r21, 0x036B	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
    431e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    4322:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    4326:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    432a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    432e:	82 17       	cp	r24, r18
    4330:	93 07       	cpc	r25, r19
    4332:	a4 07       	cpc	r26, r20
    4334:	b5 07       	cpc	r27, r21
    4336:	64 f4       	brge	.+24     	; 0x4350 <_ZN6Sketch11AsyncDoWorkEv+0xf2>

            SwitchSensors();
    4338:	1e d0       	rcall	.+60     	; 0x4376 <_ZN6Sketch13SwitchSensorsEv>
            lastSensorReadTime = millis();
    433a:	62 d6       	rcall	.+3268   	; 0x5000 <millis>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    4344:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    4348:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    434c:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
        }
        if(ReadingTDS) {
    4350:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    4354:	88 23       	and	r24, r24
    4356:	31 f0       	breq	.+12     	; 0x4364 <_ZN6Sketch11AsyncDoWorkEv+0x106>
            TheTDSSensor.CalculateTDS();
    4358:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    435c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    4360:	89 d8       	rcall	.-3822   	; 0x3474 <_ZN9TDSSensor12CalculateTDSEv>
    4362:	06 c0       	rjmp	.+12     	; 0x4370 <_ZN6Sketch11AsyncDoWorkEv+0x112>
        }
        else {
            ThePHSensor.CalculatePH();
    4364:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4368:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    436c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_ZN8PHSensor11CalculatePHEv>
        }

        //WaterSensorWire::Scan();
        //WaterSensorWire::I2C_ClearBus();
    }
    4370:	e6 e0       	ldi	r30, 0x06	; 6
    4372:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__epilogue_restores__+0x18>

00004376 <_ZN6Sketch13SwitchSensorsEv>:

    void SwitchSensors() {
    4376:	a0 e0       	ldi	r26, 0x00	; 0
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e1 ec       	ldi	r30, 0xC1	; 193
    437c:	f1 e2       	ldi	r31, 0x21	; 33
    437e:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    4382:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	89 27       	eor	r24, r25
    438a:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    438e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    4392:	88 23       	and	r24, r24
    4394:	61 f0       	breq	.+24     	; 0x43ae <_ZN6Sketch13SwitchSensorsEv+0x38>
            ThePHSensor.TurnOff();
    4396:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    439a:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    439e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    43a2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    43a6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    43aa:	6a d9       	rcall	.-3372   	; 0x3680 <_ZN9TDSSensor6TurnOnEv>
    43ac:	0b c0       	rjmp	.+22     	; 0x43c4 <_ZN6Sketch13SwitchSensorsEv+0x4e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    43ae:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    43b2:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    43b6:	7d d9       	rcall	.-3334   	; 0x36b2 <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    43b8:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    43bc:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    43c0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN8PHSensor6TurnOnEv>
        }
    }
    43c4:	e2 e0       	ldi	r30, 0x02	; 2
    43c6:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000043ca <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    43ca:	a6 e0       	ldi	r26, 0x06	; 6
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	eb ee       	ldi	r30, 0xEB	; 235
    43d0:	f1 e2       	ldi	r31, 0x21	; 33
    43d2:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    43d6:	9a 83       	std	Y+2, r25	; 0x02
    43d8:	89 83       	std	Y+1, r24	; 0x01
    43da:	4b 83       	std	Y+3, r20	; 0x03
    43dc:	5c 83       	std	Y+4, r21	; 0x04
    43de:	6d 83       	std	Y+5, r22	; 0x05
    43e0:	7e 83       	std	Y+6, r23	; 0x06
    43e2:	8b 81       	ldd	r24, Y+3	; 0x03
    43e4:	9c 81       	ldd	r25, Y+4	; 0x04
    43e6:	ad 81       	ldd	r26, Y+5	; 0x05
    43e8:	be 81       	ldd	r27, Y+6	; 0x06
    43ea:	e9 81       	ldd	r30, Y+1	; 0x01
    43ec:	fa 81       	ldd	r31, Y+2	; 0x02
    43ee:	26 e0       	ldi	r18, 0x06	; 6
    43f0:	ac 01       	movw	r20, r24
    43f2:	bd 01       	movw	r22, r26
    43f4:	cf 01       	movw	r24, r30
    43f6:	54 d3       	rcall	.+1704   	; 0x4aa0 <_ZN14HardwareSerial5beginEmh>
    43f8:	26 96       	adiw	r28, 0x06	; 6
    43fa:	e2 e0       	ldi	r30, 0x02	; 2
    43fc:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004400 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    4400:	a2 e0       	ldi	r26, 0x02	; 2
    4402:	b0 e0       	ldi	r27, 0x00	; 0
    4404:	e6 e0       	ldi	r30, 0x06	; 6
    4406:	f2 e2       	ldi	r31, 0x22	; 34
    4408:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    440c:	9a 83       	std	Y+2, r25	; 0x02
    440e:	89 83       	std	Y+1, r24	; 0x01
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	22 96       	adiw	r28, 0x02	; 2
    4414:	e2 e0       	ldi	r30, 0x02	; 2
    4416:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

0000441a <setup>:
using namespace Sketch;

SimpleTimer _asyncTimer;


void setup(void) {
    441a:	a2 e0       	ldi	r26, 0x02	; 2
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	e3 e1       	ldi	r30, 0x13	; 19
    4420:	f2 e2       	ldi	r31, 0x22	; 34
    4422:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	51 ee       	ldi	r21, 0xE1	; 225
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	80 ec       	ldi	r24, 0xC0	; 192
    4430:	94 e0       	ldi	r25, 0x04	; 4
    4432:	cb df       	rcall	.-106    	; 0x43ca <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4434:	00 00       	nop
    4436:	80 ec       	ldi	r24, 0xC0	; 192
    4438:	94 e0       	ldi	r25, 0x04	; 4
    443a:	e2 df       	rcall	.-60     	; 0x4400 <_ZN14HardwareSerialcvbEv>
    443c:	98 2f       	mov	r25, r24
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	89 27       	eor	r24, r25
    4442:	88 23       	and	r24, r24
    4444:	c1 f7       	brne	.-16     	; 0x4436 <setup+0x1c>

    Sketch::Setup();
    4446:	ba de       	rcall	.-652    	; 0x41bc <_ZN6Sketch5SetupEv>

    int interval = 1000;
    4448:	88 ee       	ldi	r24, 0xE8	; 232
    444a:	93 e0       	ldi	r25, 0x03	; 3
    444c:	9a 83       	std	Y+2, r25	; 0x02
    444e:	89 83       	std	Y+1, r24	; 0x01
#if DEBUG
    interval = 1;
#endif

    _asyncTimer.setInterval(interval, Sketch::AsyncDoWork);
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	09 2e       	mov	r0, r25
    4456:	00 0c       	add	r0, r0
    4458:	aa 0b       	sbc	r26, r26
    445a:	bb 0b       	sbc	r27, r27
    445c:	2f e2       	ldi	r18, 0x2F	; 47
    445e:	31 e2       	ldi	r19, 0x21	; 33
    4460:	ac 01       	movw	r20, r24
    4462:	bd 01       	movw	r22, r26
    4464:	82 e1       	ldi	r24, 0x12	; 18
    4466:	94 e0       	ldi	r25, 0x04	; 4
    4468:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    446c:	22 96       	adiw	r28, 0x02	; 2
    446e:	e2 e0       	ldi	r30, 0x02	; 2
    4470:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004474 <loop>:

//String _request;
//String _response;
void loop(void) {
    4474:	a0 e0       	ldi	r26, 0x00	; 0
    4476:	b0 e0       	ldi	r27, 0x00	; 0
    4478:	e0 e4       	ldi	r30, 0x40	; 64
    447a:	f2 e2       	ldi	r31, 0x22	; 34
    447c:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>

    _asyncTimer.run();
    4480:	82 e1       	ldi	r24, 0x12	; 18
    4482:	94 e0       	ldi	r25, 0x04	; 4
    4484:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN11SimpleTimer3runEv>

    Sketch::Loop();
    4488:	bf de       	rcall	.-642    	; 0x4208 <_ZN6Sketch4LoopEv>

}
    448a:	e2 e0       	ldi	r30, 0x02	; 2
    448c:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

00004490 <_Z41__static_initialization_and_destruction_0ii>:
    4490:	a4 e0       	ldi	r26, 0x04	; 4
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	ee e4       	ldi	r30, 0x4E	; 78
    4496:	f2 e2       	ldi	r31, 0x22	; 34
    4498:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    449c:	9a 83       	std	Y+2, r25	; 0x02
    449e:	89 83       	std	Y+1, r24	; 0x01
    44a0:	7c 83       	std	Y+4, r23	; 0x04
    44a2:	6b 83       	std	Y+3, r22	; 0x03
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	9a 81       	ldd	r25, Y+2	; 0x02
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	41 f4       	brne	.+16     	; 0x44bc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	9c 81       	ldd	r25, Y+4	; 0x04
    44b0:	01 96       	adiw	r24, 0x01	; 1
    44b2:	21 f4       	brne	.+8      	; 0x44bc <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "_sketchExtWaterSensors.h"
////#include "CmdMessengerExt.h"
using namespace Sketch;

SimpleTimer _asyncTimer;
    44b4:	82 e1       	ldi	r24, 0x12	; 18
    44b6:	94 e0       	ldi	r25, 0x04	; 4
    44b8:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN11SimpleTimerC1Ev>

    _asyncTimer.run();

    Sketch::Loop();

}
    44bc:	24 96       	adiw	r28, 0x04	; 4
    44be:	e2 e0       	ldi	r30, 0x02	; 2
    44c0:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000044c4 <_GLOBAL__sub_I__asyncTimer>:
    44c4:	a0 e0       	ldi	r26, 0x00	; 0
    44c6:	b0 e0       	ldi	r27, 0x00	; 0
    44c8:	e8 e6       	ldi	r30, 0x68	; 104
    44ca:	f2 e2       	ldi	r31, 0x22	; 34
    44cc:	0c 94 cc 2c 	jmp	0x5998	; 0x5998 <__prologue_saves__+0x20>
    44d0:	6f ef       	ldi	r22, 0xFF	; 255
    44d2:	7f ef       	ldi	r23, 0xFF	; 255
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	db df       	rcall	.-74     	; 0x4490 <_Z41__static_initialization_and_destruction_0ii>
    44da:	e2 e0       	ldi	r30, 0x02	; 2
    44dc:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__epilogue_restores__+0x20>

000044e0 <__subsf3>:
    44e0:	50 58       	subi	r21, 0x80	; 128

000044e2 <__addsf3>:
    44e2:	bb 27       	eor	r27, r27
    44e4:	aa 27       	eor	r26, r26
    44e6:	0e d0       	rcall	.+28     	; 0x4504 <__addsf3x>
    44e8:	75 c1       	rjmp	.+746    	; 0x47d4 <__fp_round>
    44ea:	66 d1       	rcall	.+716    	; 0x47b8 <__fp_pscA>
    44ec:	30 f0       	brcs	.+12     	; 0x44fa <__addsf3+0x18>
    44ee:	6b d1       	rcall	.+726    	; 0x47c6 <__fp_pscB>
    44f0:	20 f0       	brcs	.+8      	; 0x44fa <__addsf3+0x18>
    44f2:	31 f4       	brne	.+12     	; 0x4500 <__addsf3+0x1e>
    44f4:	9f 3f       	cpi	r25, 0xFF	; 255
    44f6:	11 f4       	brne	.+4      	; 0x44fc <__addsf3+0x1a>
    44f8:	1e f4       	brtc	.+6      	; 0x4500 <__addsf3+0x1e>
    44fa:	5b c1       	rjmp	.+694    	; 0x47b2 <__fp_nan>
    44fc:	0e f4       	brtc	.+2      	; 0x4500 <__addsf3+0x1e>
    44fe:	e0 95       	com	r30
    4500:	e7 fb       	bst	r30, 7
    4502:	51 c1       	rjmp	.+674    	; 0x47a6 <__fp_inf>

00004504 <__addsf3x>:
    4504:	e9 2f       	mov	r30, r25
    4506:	77 d1       	rcall	.+750    	; 0x47f6 <__fp_split3>
    4508:	80 f3       	brcs	.-32     	; 0x44ea <__addsf3+0x8>
    450a:	ba 17       	cp	r27, r26
    450c:	62 07       	cpc	r22, r18
    450e:	73 07       	cpc	r23, r19
    4510:	84 07       	cpc	r24, r20
    4512:	95 07       	cpc	r25, r21
    4514:	18 f0       	brcs	.+6      	; 0x451c <__addsf3x+0x18>
    4516:	71 f4       	brne	.+28     	; 0x4534 <__addsf3x+0x30>
    4518:	9e f5       	brtc	.+102    	; 0x4580 <__addsf3x+0x7c>
    451a:	8f c1       	rjmp	.+798    	; 0x483a <__fp_zero>
    451c:	0e f4       	brtc	.+2      	; 0x4520 <__addsf3x+0x1c>
    451e:	e0 95       	com	r30
    4520:	0b 2e       	mov	r0, r27
    4522:	ba 2f       	mov	r27, r26
    4524:	a0 2d       	mov	r26, r0
    4526:	0b 01       	movw	r0, r22
    4528:	b9 01       	movw	r22, r18
    452a:	90 01       	movw	r18, r0
    452c:	0c 01       	movw	r0, r24
    452e:	ca 01       	movw	r24, r20
    4530:	a0 01       	movw	r20, r0
    4532:	11 24       	eor	r1, r1
    4534:	ff 27       	eor	r31, r31
    4536:	59 1b       	sub	r21, r25
    4538:	99 f0       	breq	.+38     	; 0x4560 <__addsf3x+0x5c>
    453a:	59 3f       	cpi	r21, 0xF9	; 249
    453c:	50 f4       	brcc	.+20     	; 0x4552 <__addsf3x+0x4e>
    453e:	50 3e       	cpi	r21, 0xE0	; 224
    4540:	68 f1       	brcs	.+90     	; 0x459c <__addsf3x+0x98>
    4542:	1a 16       	cp	r1, r26
    4544:	f0 40       	sbci	r31, 0x00	; 0
    4546:	a2 2f       	mov	r26, r18
    4548:	23 2f       	mov	r18, r19
    454a:	34 2f       	mov	r19, r20
    454c:	44 27       	eor	r20, r20
    454e:	58 5f       	subi	r21, 0xF8	; 248
    4550:	f3 cf       	rjmp	.-26     	; 0x4538 <__addsf3x+0x34>
    4552:	46 95       	lsr	r20
    4554:	37 95       	ror	r19
    4556:	27 95       	ror	r18
    4558:	a7 95       	ror	r26
    455a:	f0 40       	sbci	r31, 0x00	; 0
    455c:	53 95       	inc	r21
    455e:	c9 f7       	brne	.-14     	; 0x4552 <__addsf3x+0x4e>
    4560:	7e f4       	brtc	.+30     	; 0x4580 <__addsf3x+0x7c>
    4562:	1f 16       	cp	r1, r31
    4564:	ba 0b       	sbc	r27, r26
    4566:	62 0b       	sbc	r22, r18
    4568:	73 0b       	sbc	r23, r19
    456a:	84 0b       	sbc	r24, r20
    456c:	ba f0       	brmi	.+46     	; 0x459c <__addsf3x+0x98>
    456e:	91 50       	subi	r25, 0x01	; 1
    4570:	a1 f0       	breq	.+40     	; 0x459a <__addsf3x+0x96>
    4572:	ff 0f       	add	r31, r31
    4574:	bb 1f       	adc	r27, r27
    4576:	66 1f       	adc	r22, r22
    4578:	77 1f       	adc	r23, r23
    457a:	88 1f       	adc	r24, r24
    457c:	c2 f7       	brpl	.-16     	; 0x456e <__addsf3x+0x6a>
    457e:	0e c0       	rjmp	.+28     	; 0x459c <__addsf3x+0x98>
    4580:	ba 0f       	add	r27, r26
    4582:	62 1f       	adc	r22, r18
    4584:	73 1f       	adc	r23, r19
    4586:	84 1f       	adc	r24, r20
    4588:	48 f4       	brcc	.+18     	; 0x459c <__addsf3x+0x98>
    458a:	87 95       	ror	r24
    458c:	77 95       	ror	r23
    458e:	67 95       	ror	r22
    4590:	b7 95       	ror	r27
    4592:	f7 95       	ror	r31
    4594:	9e 3f       	cpi	r25, 0xFE	; 254
    4596:	08 f0       	brcs	.+2      	; 0x459a <__addsf3x+0x96>
    4598:	b3 cf       	rjmp	.-154    	; 0x4500 <__addsf3+0x1e>
    459a:	93 95       	inc	r25
    459c:	88 0f       	add	r24, r24
    459e:	08 f0       	brcs	.+2      	; 0x45a2 <__addsf3x+0x9e>
    45a0:	99 27       	eor	r25, r25
    45a2:	ee 0f       	add	r30, r30
    45a4:	97 95       	ror	r25
    45a6:	87 95       	ror	r24
    45a8:	08 95       	ret

000045aa <__cmpsf2>:
    45aa:	d9 d0       	rcall	.+434    	; 0x475e <__fp_cmp>
    45ac:	08 f4       	brcc	.+2      	; 0x45b0 <__cmpsf2+0x6>
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	08 95       	ret

000045b2 <__divsf3>:
    45b2:	0c d0       	rcall	.+24     	; 0x45cc <__divsf3x>
    45b4:	0f c1       	rjmp	.+542    	; 0x47d4 <__fp_round>
    45b6:	07 d1       	rcall	.+526    	; 0x47c6 <__fp_pscB>
    45b8:	40 f0       	brcs	.+16     	; 0x45ca <__divsf3+0x18>
    45ba:	fe d0       	rcall	.+508    	; 0x47b8 <__fp_pscA>
    45bc:	30 f0       	brcs	.+12     	; 0x45ca <__divsf3+0x18>
    45be:	21 f4       	brne	.+8      	; 0x45c8 <__divsf3+0x16>
    45c0:	5f 3f       	cpi	r21, 0xFF	; 255
    45c2:	19 f0       	breq	.+6      	; 0x45ca <__divsf3+0x18>
    45c4:	f0 c0       	rjmp	.+480    	; 0x47a6 <__fp_inf>
    45c6:	51 11       	cpse	r21, r1
    45c8:	39 c1       	rjmp	.+626    	; 0x483c <__fp_szero>
    45ca:	f3 c0       	rjmp	.+486    	; 0x47b2 <__fp_nan>

000045cc <__divsf3x>:
    45cc:	14 d1       	rcall	.+552    	; 0x47f6 <__fp_split3>
    45ce:	98 f3       	brcs	.-26     	; 0x45b6 <__divsf3+0x4>

000045d0 <__divsf3_pse>:
    45d0:	99 23       	and	r25, r25
    45d2:	c9 f3       	breq	.-14     	; 0x45c6 <__divsf3+0x14>
    45d4:	55 23       	and	r21, r21
    45d6:	b1 f3       	breq	.-20     	; 0x45c4 <__divsf3+0x12>
    45d8:	95 1b       	sub	r25, r21
    45da:	55 0b       	sbc	r21, r21
    45dc:	bb 27       	eor	r27, r27
    45de:	aa 27       	eor	r26, r26
    45e0:	62 17       	cp	r22, r18
    45e2:	73 07       	cpc	r23, r19
    45e4:	84 07       	cpc	r24, r20
    45e6:	38 f0       	brcs	.+14     	; 0x45f6 <__divsf3_pse+0x26>
    45e8:	9f 5f       	subi	r25, 0xFF	; 255
    45ea:	5f 4f       	sbci	r21, 0xFF	; 255
    45ec:	22 0f       	add	r18, r18
    45ee:	33 1f       	adc	r19, r19
    45f0:	44 1f       	adc	r20, r20
    45f2:	aa 1f       	adc	r26, r26
    45f4:	a9 f3       	breq	.-22     	; 0x45e0 <__divsf3_pse+0x10>
    45f6:	33 d0       	rcall	.+102    	; 0x465e <__divsf3_pse+0x8e>
    45f8:	0e 2e       	mov	r0, r30
    45fa:	3a f0       	brmi	.+14     	; 0x460a <__divsf3_pse+0x3a>
    45fc:	e0 e8       	ldi	r30, 0x80	; 128
    45fe:	30 d0       	rcall	.+96     	; 0x4660 <__divsf3_pse+0x90>
    4600:	91 50       	subi	r25, 0x01	; 1
    4602:	50 40       	sbci	r21, 0x00	; 0
    4604:	e6 95       	lsr	r30
    4606:	00 1c       	adc	r0, r0
    4608:	ca f7       	brpl	.-14     	; 0x45fc <__divsf3_pse+0x2c>
    460a:	29 d0       	rcall	.+82     	; 0x465e <__divsf3_pse+0x8e>
    460c:	fe 2f       	mov	r31, r30
    460e:	27 d0       	rcall	.+78     	; 0x465e <__divsf3_pse+0x8e>
    4610:	66 0f       	add	r22, r22
    4612:	77 1f       	adc	r23, r23
    4614:	88 1f       	adc	r24, r24
    4616:	bb 1f       	adc	r27, r27
    4618:	26 17       	cp	r18, r22
    461a:	37 07       	cpc	r19, r23
    461c:	48 07       	cpc	r20, r24
    461e:	ab 07       	cpc	r26, r27
    4620:	b0 e8       	ldi	r27, 0x80	; 128
    4622:	09 f0       	breq	.+2      	; 0x4626 <__divsf3_pse+0x56>
    4624:	bb 0b       	sbc	r27, r27
    4626:	80 2d       	mov	r24, r0
    4628:	bf 01       	movw	r22, r30
    462a:	ff 27       	eor	r31, r31
    462c:	93 58       	subi	r25, 0x83	; 131
    462e:	5f 4f       	sbci	r21, 0xFF	; 255
    4630:	2a f0       	brmi	.+10     	; 0x463c <__divsf3_pse+0x6c>
    4632:	9e 3f       	cpi	r25, 0xFE	; 254
    4634:	51 05       	cpc	r21, r1
    4636:	68 f0       	brcs	.+26     	; 0x4652 <__divsf3_pse+0x82>
    4638:	b6 c0       	rjmp	.+364    	; 0x47a6 <__fp_inf>
    463a:	00 c1       	rjmp	.+512    	; 0x483c <__fp_szero>
    463c:	5f 3f       	cpi	r21, 0xFF	; 255
    463e:	ec f3       	brlt	.-6      	; 0x463a <__divsf3_pse+0x6a>
    4640:	98 3e       	cpi	r25, 0xE8	; 232
    4642:	dc f3       	brlt	.-10     	; 0x463a <__divsf3_pse+0x6a>
    4644:	86 95       	lsr	r24
    4646:	77 95       	ror	r23
    4648:	67 95       	ror	r22
    464a:	b7 95       	ror	r27
    464c:	f7 95       	ror	r31
    464e:	9f 5f       	subi	r25, 0xFF	; 255
    4650:	c9 f7       	brne	.-14     	; 0x4644 <__divsf3_pse+0x74>
    4652:	88 0f       	add	r24, r24
    4654:	91 1d       	adc	r25, r1
    4656:	96 95       	lsr	r25
    4658:	87 95       	ror	r24
    465a:	97 f9       	bld	r25, 7
    465c:	08 95       	ret
    465e:	e1 e0       	ldi	r30, 0x01	; 1
    4660:	66 0f       	add	r22, r22
    4662:	77 1f       	adc	r23, r23
    4664:	88 1f       	adc	r24, r24
    4666:	bb 1f       	adc	r27, r27
    4668:	62 17       	cp	r22, r18
    466a:	73 07       	cpc	r23, r19
    466c:	84 07       	cpc	r24, r20
    466e:	ba 07       	cpc	r27, r26
    4670:	20 f0       	brcs	.+8      	; 0x467a <__divsf3_pse+0xaa>
    4672:	62 1b       	sub	r22, r18
    4674:	73 0b       	sbc	r23, r19
    4676:	84 0b       	sbc	r24, r20
    4678:	ba 0b       	sbc	r27, r26
    467a:	ee 1f       	adc	r30, r30
    467c:	88 f7       	brcc	.-30     	; 0x4660 <__divsf3_pse+0x90>
    467e:	e0 95       	com	r30
    4680:	08 95       	ret

00004682 <__fixsfsi>:
    4682:	04 d0       	rcall	.+8      	; 0x468c <__fixunssfsi>
    4684:	68 94       	set
    4686:	b1 11       	cpse	r27, r1
    4688:	d9 c0       	rjmp	.+434    	; 0x483c <__fp_szero>
    468a:	08 95       	ret

0000468c <__fixunssfsi>:
    468c:	bc d0       	rcall	.+376    	; 0x4806 <__fp_splitA>
    468e:	88 f0       	brcs	.+34     	; 0x46b2 <__fixunssfsi+0x26>
    4690:	9f 57       	subi	r25, 0x7F	; 127
    4692:	90 f0       	brcs	.+36     	; 0x46b8 <__fixunssfsi+0x2c>
    4694:	b9 2f       	mov	r27, r25
    4696:	99 27       	eor	r25, r25
    4698:	b7 51       	subi	r27, 0x17	; 23
    469a:	a0 f0       	brcs	.+40     	; 0x46c4 <__fixunssfsi+0x38>
    469c:	d1 f0       	breq	.+52     	; 0x46d2 <__fixunssfsi+0x46>
    469e:	66 0f       	add	r22, r22
    46a0:	77 1f       	adc	r23, r23
    46a2:	88 1f       	adc	r24, r24
    46a4:	99 1f       	adc	r25, r25
    46a6:	1a f0       	brmi	.+6      	; 0x46ae <__fixunssfsi+0x22>
    46a8:	ba 95       	dec	r27
    46aa:	c9 f7       	brne	.-14     	; 0x469e <__fixunssfsi+0x12>
    46ac:	12 c0       	rjmp	.+36     	; 0x46d2 <__fixunssfsi+0x46>
    46ae:	b1 30       	cpi	r27, 0x01	; 1
    46b0:	81 f0       	breq	.+32     	; 0x46d2 <__fixunssfsi+0x46>
    46b2:	c3 d0       	rcall	.+390    	; 0x483a <__fp_zero>
    46b4:	b1 e0       	ldi	r27, 0x01	; 1
    46b6:	08 95       	ret
    46b8:	c0 c0       	rjmp	.+384    	; 0x483a <__fp_zero>
    46ba:	67 2f       	mov	r22, r23
    46bc:	78 2f       	mov	r23, r24
    46be:	88 27       	eor	r24, r24
    46c0:	b8 5f       	subi	r27, 0xF8	; 248
    46c2:	39 f0       	breq	.+14     	; 0x46d2 <__fixunssfsi+0x46>
    46c4:	b9 3f       	cpi	r27, 0xF9	; 249
    46c6:	cc f3       	brlt	.-14     	; 0x46ba <__fixunssfsi+0x2e>
    46c8:	86 95       	lsr	r24
    46ca:	77 95       	ror	r23
    46cc:	67 95       	ror	r22
    46ce:	b3 95       	inc	r27
    46d0:	d9 f7       	brne	.-10     	; 0x46c8 <__fixunssfsi+0x3c>
    46d2:	3e f4       	brtc	.+14     	; 0x46e2 <__fixunssfsi+0x56>
    46d4:	90 95       	com	r25
    46d6:	80 95       	com	r24
    46d8:	70 95       	com	r23
    46da:	61 95       	neg	r22
    46dc:	7f 4f       	sbci	r23, 0xFF	; 255
    46de:	8f 4f       	sbci	r24, 0xFF	; 255
    46e0:	9f 4f       	sbci	r25, 0xFF	; 255
    46e2:	08 95       	ret

000046e4 <__floatunsisf>:
    46e4:	e8 94       	clt
    46e6:	09 c0       	rjmp	.+18     	; 0x46fa <__floatsisf+0x12>

000046e8 <__floatsisf>:
    46e8:	97 fb       	bst	r25, 7
    46ea:	3e f4       	brtc	.+14     	; 0x46fa <__floatsisf+0x12>
    46ec:	90 95       	com	r25
    46ee:	80 95       	com	r24
    46f0:	70 95       	com	r23
    46f2:	61 95       	neg	r22
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255
    46f6:	8f 4f       	sbci	r24, 0xFF	; 255
    46f8:	9f 4f       	sbci	r25, 0xFF	; 255
    46fa:	99 23       	and	r25, r25
    46fc:	a9 f0       	breq	.+42     	; 0x4728 <__floatsisf+0x40>
    46fe:	f9 2f       	mov	r31, r25
    4700:	96 e9       	ldi	r25, 0x96	; 150
    4702:	bb 27       	eor	r27, r27
    4704:	93 95       	inc	r25
    4706:	f6 95       	lsr	r31
    4708:	87 95       	ror	r24
    470a:	77 95       	ror	r23
    470c:	67 95       	ror	r22
    470e:	b7 95       	ror	r27
    4710:	f1 11       	cpse	r31, r1
    4712:	f8 cf       	rjmp	.-16     	; 0x4704 <__floatsisf+0x1c>
    4714:	fa f4       	brpl	.+62     	; 0x4754 <__floatsisf+0x6c>
    4716:	bb 0f       	add	r27, r27
    4718:	11 f4       	brne	.+4      	; 0x471e <__floatsisf+0x36>
    471a:	60 ff       	sbrs	r22, 0
    471c:	1b c0       	rjmp	.+54     	; 0x4754 <__floatsisf+0x6c>
    471e:	6f 5f       	subi	r22, 0xFF	; 255
    4720:	7f 4f       	sbci	r23, 0xFF	; 255
    4722:	8f 4f       	sbci	r24, 0xFF	; 255
    4724:	9f 4f       	sbci	r25, 0xFF	; 255
    4726:	16 c0       	rjmp	.+44     	; 0x4754 <__floatsisf+0x6c>
    4728:	88 23       	and	r24, r24
    472a:	11 f0       	breq	.+4      	; 0x4730 <__floatsisf+0x48>
    472c:	96 e9       	ldi	r25, 0x96	; 150
    472e:	11 c0       	rjmp	.+34     	; 0x4752 <__floatsisf+0x6a>
    4730:	77 23       	and	r23, r23
    4732:	21 f0       	breq	.+8      	; 0x473c <__floatsisf+0x54>
    4734:	9e e8       	ldi	r25, 0x8E	; 142
    4736:	87 2f       	mov	r24, r23
    4738:	76 2f       	mov	r23, r22
    473a:	05 c0       	rjmp	.+10     	; 0x4746 <__floatsisf+0x5e>
    473c:	66 23       	and	r22, r22
    473e:	71 f0       	breq	.+28     	; 0x475c <__floatsisf+0x74>
    4740:	96 e8       	ldi	r25, 0x86	; 134
    4742:	86 2f       	mov	r24, r22
    4744:	70 e0       	ldi	r23, 0x00	; 0
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	2a f0       	brmi	.+10     	; 0x4754 <__floatsisf+0x6c>
    474a:	9a 95       	dec	r25
    474c:	66 0f       	add	r22, r22
    474e:	77 1f       	adc	r23, r23
    4750:	88 1f       	adc	r24, r24
    4752:	da f7       	brpl	.-10     	; 0x474a <__floatsisf+0x62>
    4754:	88 0f       	add	r24, r24
    4756:	96 95       	lsr	r25
    4758:	87 95       	ror	r24
    475a:	97 f9       	bld	r25, 7
    475c:	08 95       	ret

0000475e <__fp_cmp>:
    475e:	99 0f       	add	r25, r25
    4760:	00 08       	sbc	r0, r0
    4762:	55 0f       	add	r21, r21
    4764:	aa 0b       	sbc	r26, r26
    4766:	e0 e8       	ldi	r30, 0x80	; 128
    4768:	fe ef       	ldi	r31, 0xFE	; 254
    476a:	16 16       	cp	r1, r22
    476c:	17 06       	cpc	r1, r23
    476e:	e8 07       	cpc	r30, r24
    4770:	f9 07       	cpc	r31, r25
    4772:	c0 f0       	brcs	.+48     	; 0x47a4 <__fp_cmp+0x46>
    4774:	12 16       	cp	r1, r18
    4776:	13 06       	cpc	r1, r19
    4778:	e4 07       	cpc	r30, r20
    477a:	f5 07       	cpc	r31, r21
    477c:	98 f0       	brcs	.+38     	; 0x47a4 <__fp_cmp+0x46>
    477e:	62 1b       	sub	r22, r18
    4780:	73 0b       	sbc	r23, r19
    4782:	84 0b       	sbc	r24, r20
    4784:	95 0b       	sbc	r25, r21
    4786:	39 f4       	brne	.+14     	; 0x4796 <__fp_cmp+0x38>
    4788:	0a 26       	eor	r0, r26
    478a:	61 f0       	breq	.+24     	; 0x47a4 <__fp_cmp+0x46>
    478c:	23 2b       	or	r18, r19
    478e:	24 2b       	or	r18, r20
    4790:	25 2b       	or	r18, r21
    4792:	21 f4       	brne	.+8      	; 0x479c <__fp_cmp+0x3e>
    4794:	08 95       	ret
    4796:	0a 26       	eor	r0, r26
    4798:	09 f4       	brne	.+2      	; 0x479c <__fp_cmp+0x3e>
    479a:	a1 40       	sbci	r26, 0x01	; 1
    479c:	a6 95       	lsr	r26
    479e:	8f ef       	ldi	r24, 0xFF	; 255
    47a0:	81 1d       	adc	r24, r1
    47a2:	81 1d       	adc	r24, r1
    47a4:	08 95       	ret

000047a6 <__fp_inf>:
    47a6:	97 f9       	bld	r25, 7
    47a8:	9f 67       	ori	r25, 0x7F	; 127
    47aa:	80 e8       	ldi	r24, 0x80	; 128
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	08 95       	ret

000047b2 <__fp_nan>:
    47b2:	9f ef       	ldi	r25, 0xFF	; 255
    47b4:	80 ec       	ldi	r24, 0xC0	; 192
    47b6:	08 95       	ret

000047b8 <__fp_pscA>:
    47b8:	00 24       	eor	r0, r0
    47ba:	0a 94       	dec	r0
    47bc:	16 16       	cp	r1, r22
    47be:	17 06       	cpc	r1, r23
    47c0:	18 06       	cpc	r1, r24
    47c2:	09 06       	cpc	r0, r25
    47c4:	08 95       	ret

000047c6 <__fp_pscB>:
    47c6:	00 24       	eor	r0, r0
    47c8:	0a 94       	dec	r0
    47ca:	12 16       	cp	r1, r18
    47cc:	13 06       	cpc	r1, r19
    47ce:	14 06       	cpc	r1, r20
    47d0:	05 06       	cpc	r0, r21
    47d2:	08 95       	ret

000047d4 <__fp_round>:
    47d4:	09 2e       	mov	r0, r25
    47d6:	03 94       	inc	r0
    47d8:	00 0c       	add	r0, r0
    47da:	11 f4       	brne	.+4      	; 0x47e0 <__fp_round+0xc>
    47dc:	88 23       	and	r24, r24
    47de:	52 f0       	brmi	.+20     	; 0x47f4 <__fp_round+0x20>
    47e0:	bb 0f       	add	r27, r27
    47e2:	40 f4       	brcc	.+16     	; 0x47f4 <__fp_round+0x20>
    47e4:	bf 2b       	or	r27, r31
    47e6:	11 f4       	brne	.+4      	; 0x47ec <__fp_round+0x18>
    47e8:	60 ff       	sbrs	r22, 0
    47ea:	04 c0       	rjmp	.+8      	; 0x47f4 <__fp_round+0x20>
    47ec:	6f 5f       	subi	r22, 0xFF	; 255
    47ee:	7f 4f       	sbci	r23, 0xFF	; 255
    47f0:	8f 4f       	sbci	r24, 0xFF	; 255
    47f2:	9f 4f       	sbci	r25, 0xFF	; 255
    47f4:	08 95       	ret

000047f6 <__fp_split3>:
    47f6:	57 fd       	sbrc	r21, 7
    47f8:	90 58       	subi	r25, 0x80	; 128
    47fa:	44 0f       	add	r20, r20
    47fc:	55 1f       	adc	r21, r21
    47fe:	59 f0       	breq	.+22     	; 0x4816 <__fp_splitA+0x10>
    4800:	5f 3f       	cpi	r21, 0xFF	; 255
    4802:	71 f0       	breq	.+28     	; 0x4820 <__fp_splitA+0x1a>
    4804:	47 95       	ror	r20

00004806 <__fp_splitA>:
    4806:	88 0f       	add	r24, r24
    4808:	97 fb       	bst	r25, 7
    480a:	99 1f       	adc	r25, r25
    480c:	61 f0       	breq	.+24     	; 0x4826 <__fp_splitA+0x20>
    480e:	9f 3f       	cpi	r25, 0xFF	; 255
    4810:	79 f0       	breq	.+30     	; 0x4830 <__fp_splitA+0x2a>
    4812:	87 95       	ror	r24
    4814:	08 95       	ret
    4816:	12 16       	cp	r1, r18
    4818:	13 06       	cpc	r1, r19
    481a:	14 06       	cpc	r1, r20
    481c:	55 1f       	adc	r21, r21
    481e:	f2 cf       	rjmp	.-28     	; 0x4804 <__fp_split3+0xe>
    4820:	46 95       	lsr	r20
    4822:	f1 df       	rcall	.-30     	; 0x4806 <__fp_splitA>
    4824:	08 c0       	rjmp	.+16     	; 0x4836 <__fp_splitA+0x30>
    4826:	16 16       	cp	r1, r22
    4828:	17 06       	cpc	r1, r23
    482a:	18 06       	cpc	r1, r24
    482c:	99 1f       	adc	r25, r25
    482e:	f1 cf       	rjmp	.-30     	; 0x4812 <__fp_splitA+0xc>
    4830:	86 95       	lsr	r24
    4832:	71 05       	cpc	r23, r1
    4834:	61 05       	cpc	r22, r1
    4836:	08 94       	sec
    4838:	08 95       	ret

0000483a <__fp_zero>:
    483a:	e8 94       	clt

0000483c <__fp_szero>:
    483c:	bb 27       	eor	r27, r27
    483e:	66 27       	eor	r22, r22
    4840:	77 27       	eor	r23, r23
    4842:	cb 01       	movw	r24, r22
    4844:	97 f9       	bld	r25, 7
    4846:	08 95       	ret

00004848 <__mulsf3>:
    4848:	0b d0       	rcall	.+22     	; 0x4860 <__mulsf3x>
    484a:	c4 cf       	rjmp	.-120    	; 0x47d4 <__fp_round>
    484c:	b5 df       	rcall	.-150    	; 0x47b8 <__fp_pscA>
    484e:	28 f0       	brcs	.+10     	; 0x485a <__mulsf3+0x12>
    4850:	ba df       	rcall	.-140    	; 0x47c6 <__fp_pscB>
    4852:	18 f0       	brcs	.+6      	; 0x485a <__mulsf3+0x12>
    4854:	95 23       	and	r25, r21
    4856:	09 f0       	breq	.+2      	; 0x485a <__mulsf3+0x12>
    4858:	a6 cf       	rjmp	.-180    	; 0x47a6 <__fp_inf>
    485a:	ab cf       	rjmp	.-170    	; 0x47b2 <__fp_nan>
    485c:	11 24       	eor	r1, r1
    485e:	ee cf       	rjmp	.-36     	; 0x483c <__fp_szero>

00004860 <__mulsf3x>:
    4860:	ca df       	rcall	.-108    	; 0x47f6 <__fp_split3>
    4862:	a0 f3       	brcs	.-24     	; 0x484c <__mulsf3+0x4>

00004864 <__mulsf3_pse>:
    4864:	95 9f       	mul	r25, r21
    4866:	d1 f3       	breq	.-12     	; 0x485c <__mulsf3+0x14>
    4868:	95 0f       	add	r25, r21
    486a:	50 e0       	ldi	r21, 0x00	; 0
    486c:	55 1f       	adc	r21, r21
    486e:	62 9f       	mul	r22, r18
    4870:	f0 01       	movw	r30, r0
    4872:	72 9f       	mul	r23, r18
    4874:	bb 27       	eor	r27, r27
    4876:	f0 0d       	add	r31, r0
    4878:	b1 1d       	adc	r27, r1
    487a:	63 9f       	mul	r22, r19
    487c:	aa 27       	eor	r26, r26
    487e:	f0 0d       	add	r31, r0
    4880:	b1 1d       	adc	r27, r1
    4882:	aa 1f       	adc	r26, r26
    4884:	64 9f       	mul	r22, r20
    4886:	66 27       	eor	r22, r22
    4888:	b0 0d       	add	r27, r0
    488a:	a1 1d       	adc	r26, r1
    488c:	66 1f       	adc	r22, r22
    488e:	82 9f       	mul	r24, r18
    4890:	22 27       	eor	r18, r18
    4892:	b0 0d       	add	r27, r0
    4894:	a1 1d       	adc	r26, r1
    4896:	62 1f       	adc	r22, r18
    4898:	73 9f       	mul	r23, r19
    489a:	b0 0d       	add	r27, r0
    489c:	a1 1d       	adc	r26, r1
    489e:	62 1f       	adc	r22, r18
    48a0:	83 9f       	mul	r24, r19
    48a2:	a0 0d       	add	r26, r0
    48a4:	61 1d       	adc	r22, r1
    48a6:	22 1f       	adc	r18, r18
    48a8:	74 9f       	mul	r23, r20
    48aa:	33 27       	eor	r19, r19
    48ac:	a0 0d       	add	r26, r0
    48ae:	61 1d       	adc	r22, r1
    48b0:	23 1f       	adc	r18, r19
    48b2:	84 9f       	mul	r24, r20
    48b4:	60 0d       	add	r22, r0
    48b6:	21 1d       	adc	r18, r1
    48b8:	82 2f       	mov	r24, r18
    48ba:	76 2f       	mov	r23, r22
    48bc:	6a 2f       	mov	r22, r26
    48be:	11 24       	eor	r1, r1
    48c0:	9f 57       	subi	r25, 0x7F	; 127
    48c2:	50 40       	sbci	r21, 0x00	; 0
    48c4:	8a f0       	brmi	.+34     	; 0x48e8 <__mulsf3_pse+0x84>
    48c6:	e1 f0       	breq	.+56     	; 0x4900 <__mulsf3_pse+0x9c>
    48c8:	88 23       	and	r24, r24
    48ca:	4a f0       	brmi	.+18     	; 0x48de <__mulsf3_pse+0x7a>
    48cc:	ee 0f       	add	r30, r30
    48ce:	ff 1f       	adc	r31, r31
    48d0:	bb 1f       	adc	r27, r27
    48d2:	66 1f       	adc	r22, r22
    48d4:	77 1f       	adc	r23, r23
    48d6:	88 1f       	adc	r24, r24
    48d8:	91 50       	subi	r25, 0x01	; 1
    48da:	50 40       	sbci	r21, 0x00	; 0
    48dc:	a9 f7       	brne	.-22     	; 0x48c8 <__mulsf3_pse+0x64>
    48de:	9e 3f       	cpi	r25, 0xFE	; 254
    48e0:	51 05       	cpc	r21, r1
    48e2:	70 f0       	brcs	.+28     	; 0x4900 <__mulsf3_pse+0x9c>
    48e4:	60 cf       	rjmp	.-320    	; 0x47a6 <__fp_inf>
    48e6:	aa cf       	rjmp	.-172    	; 0x483c <__fp_szero>
    48e8:	5f 3f       	cpi	r21, 0xFF	; 255
    48ea:	ec f3       	brlt	.-6      	; 0x48e6 <__mulsf3_pse+0x82>
    48ec:	98 3e       	cpi	r25, 0xE8	; 232
    48ee:	dc f3       	brlt	.-10     	; 0x48e6 <__mulsf3_pse+0x82>
    48f0:	86 95       	lsr	r24
    48f2:	77 95       	ror	r23
    48f4:	67 95       	ror	r22
    48f6:	b7 95       	ror	r27
    48f8:	f7 95       	ror	r31
    48fa:	e7 95       	ror	r30
    48fc:	9f 5f       	subi	r25, 0xFF	; 255
    48fe:	c1 f7       	brne	.-16     	; 0x48f0 <__mulsf3_pse+0x8c>
    4900:	fe 2b       	or	r31, r30
    4902:	88 0f       	add	r24, r24
    4904:	91 1d       	adc	r25, r1
    4906:	96 95       	lsr	r25
    4908:	87 95       	ror	r24
    490a:	97 f9       	bld	r25, 7
    490c:	08 95       	ret

0000490e <__unordsf2>:
    490e:	27 df       	rcall	.-434    	; 0x475e <__fp_cmp>
    4910:	88 0b       	sbc	r24, r24
    4912:	99 0b       	sbc	r25, r25
    4914:	08 95       	ret

00004916 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4916:	0e 94 67 30 	call	0x60ce	; 0x60ce <abort>

0000491a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    491a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    491c:	91 8d       	ldd	r25, Z+25	; 0x19
    491e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4920:	89 2f       	mov	r24, r25
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	80 5c       	subi	r24, 0xC0	; 192
    4926:	9f 4f       	sbci	r25, 0xFF	; 255
    4928:	82 1b       	sub	r24, r18
    492a:	91 09       	sbc	r25, r1
}
    492c:	8f 73       	andi	r24, 0x3F	; 63
    492e:	99 27       	eor	r25, r25
    4930:	08 95       	ret

00004932 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4932:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4934:	91 8d       	ldd	r25, Z+25	; 0x19
    4936:	82 8d       	ldd	r24, Z+26	; 0x1a
    4938:	98 17       	cp	r25, r24
    493a:	31 f0       	breq	.+12     	; 0x4948 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    493c:	82 8d       	ldd	r24, Z+26	; 0x1a
    493e:	e8 0f       	add	r30, r24
    4940:	f1 1d       	adc	r31, r1
    4942:	85 8d       	ldd	r24, Z+29	; 0x1d
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4948:	8f ef       	ldi	r24, 0xFF	; 255
    494a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    494c:	08 95       	ret

0000494e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    494e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4950:	91 8d       	ldd	r25, Z+25	; 0x19
    4952:	82 8d       	ldd	r24, Z+26	; 0x1a
    4954:	98 17       	cp	r25, r24
    4956:	61 f0       	breq	.+24     	; 0x4970 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4958:	82 8d       	ldd	r24, Z+26	; 0x1a
    495a:	df 01       	movw	r26, r30
    495c:	a8 0f       	add	r26, r24
    495e:	b1 1d       	adc	r27, r1
    4960:	5d 96       	adiw	r26, 0x1d	; 29
    4962:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4964:	92 8d       	ldd	r25, Z+26	; 0x1a
    4966:	9f 5f       	subi	r25, 0xFF	; 255
    4968:	9f 73       	andi	r25, 0x3F	; 63
    496a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4970:	8f ef       	ldi	r24, 0xFF	; 255
    4972:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4974:	08 95       	ret

00004976 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4976:	8a e0       	ldi	r24, 0x0A	; 10
    4978:	96 e2       	ldi	r25, 0x26	; 38
    497a:	89 2b       	or	r24, r25
    497c:	41 f0       	breq	.+16     	; 0x498e <_Z14serialEventRunv+0x18>
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	89 2b       	or	r24, r25
    4984:	21 f0       	breq	.+8      	; 0x498e <_Z14serialEventRunv+0x18>
    4986:	46 d1       	rcall	.+652    	; 0x4c14 <_Z17Serial0_availablev>
    4988:	81 11       	cpse	r24, r1
    498a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    498e:	08 95       	ret

00004990 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4990:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4992:	84 8d       	ldd	r24, Z+28	; 0x1c
    4994:	df 01       	movw	r26, r30
    4996:	a8 0f       	add	r26, r24
    4998:	b1 1d       	adc	r27, r1
    499a:	a3 5a       	subi	r26, 0xA3	; 163
    499c:	bf 4f       	sbci	r27, 0xFF	; 255
    499e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    49a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	01 96       	adiw	r24, 0x01	; 1
    49a6:	8f 73       	andi	r24, 0x3F	; 63
    49a8:	99 27       	eor	r25, r25
    49aa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    49ac:	a6 89       	ldd	r26, Z+22	; 0x16
    49ae:	b7 89       	ldd	r27, Z+23	; 0x17
    49b0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    49b2:	a0 89       	ldd	r26, Z+16	; 0x10
    49b4:	b1 89       	ldd	r27, Z+17	; 0x11
    49b6:	8c 91       	ld	r24, X
    49b8:	80 64       	ori	r24, 0x40	; 64
    49ba:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    49bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    49be:	84 8d       	ldd	r24, Z+28	; 0x1c
    49c0:	98 13       	cpse	r25, r24
    49c2:	06 c0       	rjmp	.+12     	; 0x49d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    49c4:	02 88       	ldd	r0, Z+18	; 0x12
    49c6:	f3 89       	ldd	r31, Z+19	; 0x13
    49c8:	e0 2d       	mov	r30, r0
    49ca:	80 81       	ld	r24, Z
    49cc:	8f 7d       	andi	r24, 0xDF	; 223
    49ce:	80 83       	st	Z, r24
    49d0:	08 95       	ret

000049d2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    49d2:	cf 93       	push	r28
    49d4:	df 93       	push	r29
    49d6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    49d8:	88 8d       	ldd	r24, Y+24	; 0x18
    49da:	88 23       	and	r24, r24
    49dc:	c1 f0       	breq	.+48     	; 0x4a0e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    49de:	ea 89       	ldd	r30, Y+18	; 0x12
    49e0:	fb 89       	ldd	r31, Y+19	; 0x13
    49e2:	80 81       	ld	r24, Z
    49e4:	85 fd       	sbrc	r24, 5
    49e6:	05 c0       	rjmp	.+10     	; 0x49f2 <_ZN14HardwareSerial5flushEv+0x20>
    49e8:	a8 89       	ldd	r26, Y+16	; 0x10
    49ea:	b9 89       	ldd	r27, Y+17	; 0x11
    49ec:	8c 91       	ld	r24, X
    49ee:	86 fd       	sbrc	r24, 6
    49f0:	0e c0       	rjmp	.+28     	; 0x4a0e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    49f2:	0f b6       	in	r0, 0x3f	; 63
    49f4:	07 fc       	sbrc	r0, 7
    49f6:	f5 cf       	rjmp	.-22     	; 0x49e2 <_ZN14HardwareSerial5flushEv+0x10>
    49f8:	80 81       	ld	r24, Z
    49fa:	85 ff       	sbrs	r24, 5
    49fc:	f2 cf       	rjmp	.-28     	; 0x49e2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    49fe:	a8 89       	ldd	r26, Y+16	; 0x10
    4a00:	b9 89       	ldd	r27, Y+17	; 0x11
    4a02:	8c 91       	ld	r24, X
    4a04:	85 ff       	sbrs	r24, 5
    4a06:	ed cf       	rjmp	.-38     	; 0x49e2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4a08:	ce 01       	movw	r24, r28
    4a0a:	c2 df       	rcall	.-124    	; 0x4990 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4a0c:	e8 cf       	rjmp	.-48     	; 0x49de <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4a0e:	df 91       	pop	r29
    4a10:	cf 91       	pop	r28
    4a12:	08 95       	ret

00004a14 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4a14:	ef 92       	push	r14
    4a16:	ff 92       	push	r15
    4a18:	0f 93       	push	r16
    4a1a:	1f 93       	push	r17
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	ec 01       	movw	r28, r24
  _written = true;
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4a26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4a28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a2a:	98 13       	cpse	r25, r24
    4a2c:	05 c0       	rjmp	.+10     	; 0x4a38 <_ZN14HardwareSerial5writeEh+0x24>
    4a2e:	e8 89       	ldd	r30, Y+16	; 0x10
    4a30:	f9 89       	ldd	r31, Y+17	; 0x11
    4a32:	80 81       	ld	r24, Z
    4a34:	85 fd       	sbrc	r24, 5
    4a36:	23 c0       	rjmp	.+70     	; 0x4a7e <_ZN14HardwareSerial5writeEh+0x6a>
    4a38:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4a3a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4a3c:	10 e0       	ldi	r17, 0x00	; 0
    4a3e:	0f 5f       	subi	r16, 0xFF	; 255
    4a40:	1f 4f       	sbci	r17, 0xFF	; 255
    4a42:	0f 73       	andi	r16, 0x3F	; 63
    4a44:	11 27       	eor	r17, r17
    4a46:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4a48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a4a:	e8 12       	cpse	r14, r24
    4a4c:	0b c0       	rjmp	.+22     	; 0x4a64 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	07 fc       	sbrc	r0, 7
    4a52:	fa cf       	rjmp	.-12     	; 0x4a48 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4a54:	e8 89       	ldd	r30, Y+16	; 0x10
    4a56:	f9 89       	ldd	r31, Y+17	; 0x11
    4a58:	80 81       	ld	r24, Z
    4a5a:	85 ff       	sbrs	r24, 5
    4a5c:	f5 cf       	rjmp	.-22     	; 0x4a48 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4a5e:	ce 01       	movw	r24, r28
    4a60:	97 df       	rcall	.-210    	; 0x4990 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4a62:	f2 cf       	rjmp	.-28     	; 0x4a48 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a66:	fe 01       	movw	r30, r28
    4a68:	e8 0f       	add	r30, r24
    4a6a:	f1 1d       	adc	r31, r1
    4a6c:	e3 5a       	subi	r30, 0xA3	; 163
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    4a72:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    4a74:	ea 89       	ldd	r30, Y+18	; 0x12
    4a76:	fb 89       	ldd	r31, Y+19	; 0x13
    4a78:	80 81       	ld	r24, Z
    4a7a:	80 62       	ori	r24, 0x20	; 32
    4a7c:	07 c0       	rjmp	.+14     	; 0x4a8c <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4a7e:	ee 89       	ldd	r30, Y+22	; 0x16
    4a80:	ff 89       	ldd	r31, Y+23	; 0x17
    4a82:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4a84:	e8 89       	ldd	r30, Y+16	; 0x10
    4a86:	f9 89       	ldd	r31, Y+17	; 0x11
    4a88:	80 81       	ld	r24, Z
    4a8a:	80 64       	ori	r24, 0x40	; 64
    4a8c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	df 91       	pop	r29
    4a94:	cf 91       	pop	r28
    4a96:	1f 91       	pop	r17
    4a98:	0f 91       	pop	r16
    4a9a:	ff 90       	pop	r15
    4a9c:	ef 90       	pop	r14
    4a9e:	08 95       	ret

00004aa0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4aa0:	cf 92       	push	r12
    4aa2:	df 92       	push	r13
    4aa4:	ef 92       	push	r14
    4aa6:	ff 92       	push	r15
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	ec 01       	movw	r28, r24
    4ab0:	6a 01       	movw	r12, r20
    4ab2:	7b 01       	movw	r14, r22
    4ab4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4ab6:	e8 89       	ldd	r30, Y+16	; 0x10
    4ab8:	f9 89       	ldd	r31, Y+17	; 0x11
    4aba:	82 e0       	ldi	r24, 0x02	; 2
    4abc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4abe:	41 15       	cp	r20, r1
    4ac0:	51 4e       	sbci	r21, 0xE1	; 225
    4ac2:	61 05       	cpc	r22, r1
    4ac4:	71 05       	cpc	r23, r1
    4ac6:	a9 f0       	breq	.+42     	; 0x4af2 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	79 e0       	ldi	r23, 0x09	; 9
    4acc:	8d e3       	ldi	r24, 0x3D	; 61
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	a7 01       	movw	r20, r14
    4ad2:	96 01       	movw	r18, r12
    4ad4:	03 d7       	rcall	.+3590   	; 0x58dc <__udivmodsi4>
    4ad6:	da 01       	movw	r26, r20
    4ad8:	c9 01       	movw	r24, r18
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	a1 09       	sbc	r26, r1
    4ade:	b1 09       	sbc	r27, r1
    4ae0:	b6 95       	lsr	r27
    4ae2:	a7 95       	ror	r26
    4ae4:	97 95       	ror	r25
    4ae6:	87 95       	ror	r24
    4ae8:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4aea:	41 15       	cp	r20, r1
    4aec:	80 e1       	ldi	r24, 0x10	; 16
    4aee:	58 07       	cpc	r21, r24
    4af0:	a0 f0       	brcs	.+40     	; 0x4b1a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4af2:	e8 89       	ldd	r30, Y+16	; 0x10
    4af4:	f9 89       	ldd	r31, Y+17	; 0x11
    4af6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4af8:	60 e8       	ldi	r22, 0x80	; 128
    4afa:	74 e8       	ldi	r23, 0x84	; 132
    4afc:	8e e1       	ldi	r24, 0x1E	; 30
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	a7 01       	movw	r20, r14
    4b02:	96 01       	movw	r18, r12
    4b04:	eb d6       	rcall	.+3542   	; 0x58dc <__udivmodsi4>
    4b06:	ba 01       	movw	r22, r20
    4b08:	a9 01       	movw	r20, r18
    4b0a:	41 50       	subi	r20, 0x01	; 1
    4b0c:	51 09       	sbc	r21, r1
    4b0e:	61 09       	sbc	r22, r1
    4b10:	71 09       	sbc	r23, r1
    4b12:	76 95       	lsr	r23
    4b14:	67 95       	ror	r22
    4b16:	57 95       	ror	r21
    4b18:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4b1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4b1c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4b1e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4b20:	ee 85       	ldd	r30, Y+14	; 0x0e
    4b22:	ff 85       	ldd	r31, Y+15	; 0x0f
    4b24:	40 83       	st	Z, r20

  _written = false;
    4b26:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4b28:	ec 89       	ldd	r30, Y+20	; 0x14
    4b2a:	fd 89       	ldd	r31, Y+21	; 0x15
    4b2c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4b2e:	ea 89       	ldd	r30, Y+18	; 0x12
    4b30:	fb 89       	ldd	r31, Y+19	; 0x13
    4b32:	80 81       	ld	r24, Z
    4b34:	80 61       	ori	r24, 0x10	; 16
    4b36:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4b38:	ea 89       	ldd	r30, Y+18	; 0x12
    4b3a:	fb 89       	ldd	r31, Y+19	; 0x13
    4b3c:	80 81       	ld	r24, Z
    4b3e:	88 60       	ori	r24, 0x08	; 8
    4b40:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4b42:	ea 89       	ldd	r30, Y+18	; 0x12
    4b44:	fb 89       	ldd	r31, Y+19	; 0x13
    4b46:	80 81       	ld	r24, Z
    4b48:	80 68       	ori	r24, 0x80	; 128
    4b4a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4b4c:	ea 89       	ldd	r30, Y+18	; 0x12
    4b4e:	fb 89       	ldd	r31, Y+19	; 0x13
    4b50:	80 81       	ld	r24, Z
    4b52:	8f 7d       	andi	r24, 0xDF	; 223
    4b54:	80 83       	st	Z, r24
}
    4b56:	df 91       	pop	r29
    4b58:	cf 91       	pop	r28
    4b5a:	1f 91       	pop	r17
    4b5c:	ff 90       	pop	r15
    4b5e:	ef 90       	pop	r14
    4b60:	df 90       	pop	r13
    4b62:	cf 90       	pop	r12
    4b64:	08 95       	ret

00004b66 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4b66:	1f 92       	push	r1
    4b68:	0f 92       	push	r0
    4b6a:	0f b6       	in	r0, 0x3f	; 63
    4b6c:	0f 92       	push	r0
    4b6e:	11 24       	eor	r1, r1
    4b70:	2f 93       	push	r18
    4b72:	8f 93       	push	r24
    4b74:	9f 93       	push	r25
    4b76:	ef 93       	push	r30
    4b78:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4b7a:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <Serial+0x10>
    4b7e:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <Serial+0x11>
    4b82:	80 81       	ld	r24, Z
    4b84:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <Serial+0x16>
    4b88:	f0 91 d7 04 	lds	r31, 0x04D7	; 0x8004d7 <Serial+0x17>
    4b8c:	82 fd       	sbrc	r24, 2
    4b8e:	12 c0       	rjmp	.+36     	; 0x4bb4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4b90:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4b92:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <Serial+0x19>
    4b96:	8f 5f       	subi	r24, 0xFF	; 255
    4b98:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4b9a:	20 91 da 04 	lds	r18, 0x04DA	; 0x8004da <Serial+0x1a>
    4b9e:	82 17       	cp	r24, r18
    4ba0:	51 f0       	breq	.+20     	; 0x4bb6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4ba2:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <Serial+0x19>
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	e0 54       	subi	r30, 0x40	; 64
    4baa:	fb 4f       	sbci	r31, 0xFB	; 251
    4bac:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4bae:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <Serial+0x19>
    4bb2:	01 c0       	rjmp	.+2      	; 0x4bb6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4bb4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4bb6:	ff 91       	pop	r31
    4bb8:	ef 91       	pop	r30
    4bba:	9f 91       	pop	r25
    4bbc:	8f 91       	pop	r24
    4bbe:	2f 91       	pop	r18
    4bc0:	0f 90       	pop	r0
    4bc2:	0f be       	out	0x3f, r0	; 63
    4bc4:	0f 90       	pop	r0
    4bc6:	1f 90       	pop	r1
    4bc8:	18 95       	reti

00004bca <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4bca:	1f 92       	push	r1
    4bcc:	0f 92       	push	r0
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	0f 92       	push	r0
    4bd2:	11 24       	eor	r1, r1
    4bd4:	2f 93       	push	r18
    4bd6:	3f 93       	push	r19
    4bd8:	4f 93       	push	r20
    4bda:	5f 93       	push	r21
    4bdc:	6f 93       	push	r22
    4bde:	7f 93       	push	r23
    4be0:	8f 93       	push	r24
    4be2:	9f 93       	push	r25
    4be4:	af 93       	push	r26
    4be6:	bf 93       	push	r27
    4be8:	ef 93       	push	r30
    4bea:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4bec:	80 ec       	ldi	r24, 0xC0	; 192
    4bee:	94 e0       	ldi	r25, 0x04	; 4
    4bf0:	cf de       	rcall	.-610    	; 0x4990 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4bf2:	ff 91       	pop	r31
    4bf4:	ef 91       	pop	r30
    4bf6:	bf 91       	pop	r27
    4bf8:	af 91       	pop	r26
    4bfa:	9f 91       	pop	r25
    4bfc:	8f 91       	pop	r24
    4bfe:	7f 91       	pop	r23
    4c00:	6f 91       	pop	r22
    4c02:	5f 91       	pop	r21
    4c04:	4f 91       	pop	r20
    4c06:	3f 91       	pop	r19
    4c08:	2f 91       	pop	r18
    4c0a:	0f 90       	pop	r0
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	0f 90       	pop	r0
    4c10:	1f 90       	pop	r1
    4c12:	18 95       	reti

00004c14 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4c14:	80 ec       	ldi	r24, 0xC0	; 192
    4c16:	94 e0       	ldi	r25, 0x04	; 4
    4c18:	80 de       	rcall	.-768    	; 0x491a <_ZN14HardwareSerial9availableEv>
    4c1a:	21 e0       	ldi	r18, 0x01	; 1
    4c1c:	89 2b       	or	r24, r25
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <_Z17Serial0_availablev+0xe>
    4c20:	20 e0       	ldi	r18, 0x00	; 0
}
    4c22:	82 2f       	mov	r24, r18
    4c24:	08 95       	ret

00004c26 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4c26:	e0 ec       	ldi	r30, 0xC0	; 192
    4c28:	f4 e0       	ldi	r31, 0x04	; 4
    4c2a:	13 82       	std	Z+3, r1	; 0x03
    4c2c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4c2e:	88 ee       	ldi	r24, 0xE8	; 232
    4c30:	93 e0       	ldi	r25, 0x03	; 3
    4c32:	a0 e0       	ldi	r26, 0x00	; 0
    4c34:	b0 e0       	ldi	r27, 0x00	; 0
    4c36:	84 83       	std	Z+4, r24	; 0x04
    4c38:	95 83       	std	Z+5, r25	; 0x05
    4c3a:	a6 83       	std	Z+6, r26	; 0x06
    4c3c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4c3e:	83 eb       	ldi	r24, 0xB3	; 179
    4c40:	91 e0       	ldi	r25, 0x01	; 1
    4c42:	91 83       	std	Z+1, r25	; 0x01
    4c44:	80 83       	st	Z, r24
    4c46:	85 ec       	ldi	r24, 0xC5	; 197
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	95 87       	std	Z+13, r25	; 0x0d
    4c4c:	84 87       	std	Z+12, r24	; 0x0c
    4c4e:	84 ec       	ldi	r24, 0xC4	; 196
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	97 87       	std	Z+15, r25	; 0x0f
    4c54:	86 87       	std	Z+14, r24	; 0x0e
    4c56:	80 ec       	ldi	r24, 0xC0	; 192
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	91 8b       	std	Z+17, r25	; 0x11
    4c5c:	80 8b       	std	Z+16, r24	; 0x10
    4c5e:	81 ec       	ldi	r24, 0xC1	; 193
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	93 8b       	std	Z+19, r25	; 0x13
    4c64:	82 8b       	std	Z+18, r24	; 0x12
    4c66:	82 ec       	ldi	r24, 0xC2	; 194
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	95 8b       	std	Z+21, r25	; 0x15
    4c6c:	84 8b       	std	Z+20, r24	; 0x14
    4c6e:	86 ec       	ldi	r24, 0xC6	; 198
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	97 8b       	std	Z+23, r25	; 0x17
    4c74:	86 8b       	std	Z+22, r24	; 0x16
    4c76:	11 8e       	std	Z+25, r1	; 0x19
    4c78:	12 8e       	std	Z+26, r1	; 0x1a
    4c7a:	13 8e       	std	Z+27, r1	; 0x1b
    4c7c:	14 8e       	std	Z+28, r1	; 0x1c
    4c7e:	08 95       	ret

00004c80 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4c80:	08 95       	ret

00004c82 <main>:

int main(void)
{
	init();
    4c82:	33 d2       	rcall	.+1126   	; 0x50ea <init>

	initVariant();
    4c84:	fd df       	rcall	.-6      	; 0x4c80 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4c86:	c9 db       	rcall	.-2158   	; 0x441a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4c88:	cb eb       	ldi	r28, 0xBB	; 187
    4c8a:	d4 e2       	ldi	r29, 0x24	; 36
#endif
	
	setup();
    
	for (;;) {
		loop();
    4c8c:	f3 db       	rcall	.-2074   	; 0x4474 <loop>
		if (serialEventRun) serialEventRun();
    4c8e:	20 97       	sbiw	r28, 0x00	; 0
    4c90:	e9 f3       	breq	.-6      	; 0x4c8c <main+0xa>
    4c92:	71 de       	rcall	.-798    	; 0x4976 <_Z14serialEventRunv>
    4c94:	fb cf       	rjmp	.-10     	; 0x4c8c <main+0xa>

00004c96 <_ZN5Print5writeEPKhj>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4c96:	cf 92       	push	r12
    4c98:	df 92       	push	r13
    4c9a:	ef 92       	push	r14
    4c9c:	ff 92       	push	r15
    4c9e:	0f 93       	push	r16
    4ca0:	1f 93       	push	r17
    4ca2:	cf 93       	push	r28
    4ca4:	df 93       	push	r29
    4ca6:	6c 01       	movw	r12, r24
    4ca8:	7a 01       	movw	r14, r20
    4caa:	8b 01       	movw	r16, r22
    4cac:	c0 e0       	ldi	r28, 0x00	; 0
    4cae:	d0 e0       	ldi	r29, 0x00	; 0
    4cb0:	ce 15       	cp	r28, r14
    4cb2:	df 05       	cpc	r29, r15
    4cb4:	89 f0       	breq	.+34     	; 0x4cd8 <_ZN5Print5writeEPKhj+0x42>
    4cb6:	d8 01       	movw	r26, r16
    4cb8:	6d 91       	ld	r22, X+
    4cba:	8d 01       	movw	r16, r26
    4cbc:	d6 01       	movw	r26, r12
    4cbe:	ed 91       	ld	r30, X+
    4cc0:	fc 91       	ld	r31, X
    4cc2:	01 90       	ld	r0, Z+
    4cc4:	f0 81       	ld	r31, Z
    4cc6:	e0 2d       	mov	r30, r0
    4cc8:	c6 01       	movw	r24, r12
    4cca:	09 95       	icall
    4ccc:	89 2b       	or	r24, r25
    4cce:	11 f4       	brne	.+4      	; 0x4cd4 <_ZN5Print5writeEPKhj+0x3e>
    4cd0:	7e 01       	movw	r14, r28
    4cd2:	02 c0       	rjmp	.+4      	; 0x4cd8 <_ZN5Print5writeEPKhj+0x42>
    4cd4:	21 96       	adiw	r28, 0x01	; 1
    4cd6:	ec cf       	rjmp	.-40     	; 0x4cb0 <_ZN5Print5writeEPKhj+0x1a>
    4cd8:	c7 01       	movw	r24, r14
    4cda:	df 91       	pop	r29
    4cdc:	cf 91       	pop	r28
    4cde:	1f 91       	pop	r17
    4ce0:	0f 91       	pop	r16
    4ce2:	ff 90       	pop	r15
    4ce4:	ef 90       	pop	r14
    4ce6:	df 90       	pop	r13
    4ce8:	cf 90       	pop	r12
    4cea:	08 95       	ret

00004cec <_ZN5Print5writeEPKc>:
    4cec:	61 15       	cp	r22, r1
    4cee:	71 05       	cpc	r23, r1
    4cf0:	79 f0       	breq	.+30     	; 0x4d10 <_ZN5Print5writeEPKc+0x24>
    4cf2:	fb 01       	movw	r30, r22
    4cf4:	01 90       	ld	r0, Z+
    4cf6:	00 20       	and	r0, r0
    4cf8:	e9 f7       	brne	.-6      	; 0x4cf4 <_ZN5Print5writeEPKc+0x8>
    4cfa:	31 97       	sbiw	r30, 0x01	; 1
    4cfc:	af 01       	movw	r20, r30
    4cfe:	46 1b       	sub	r20, r22
    4d00:	57 0b       	sbc	r21, r23
    4d02:	dc 01       	movw	r26, r24
    4d04:	ed 91       	ld	r30, X+
    4d06:	fc 91       	ld	r31, X
    4d08:	02 80       	ldd	r0, Z+2	; 0x02
    4d0a:	f3 81       	ldd	r31, Z+3	; 0x03
    4d0c:	e0 2d       	mov	r30, r0
    4d0e:	09 94       	ijmp
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	08 95       	ret

00004d16 <_ZN5Print5printEPK19__FlashStringHelper>:
    4d16:	ef 92       	push	r14
    4d18:	ff 92       	push	r15
    4d1a:	0f 93       	push	r16
    4d1c:	1f 93       	push	r17
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
    4d22:	8c 01       	movw	r16, r24
    4d24:	7b 01       	movw	r14, r22
    4d26:	c0 e0       	ldi	r28, 0x00	; 0
    4d28:	d0 e0       	ldi	r29, 0x00	; 0
    4d2a:	f7 01       	movw	r30, r14
    4d2c:	ec 0f       	add	r30, r28
    4d2e:	fd 1f       	adc	r31, r29
    4d30:	64 91       	lpm	r22, Z
    4d32:	66 23       	and	r22, r22
    4d34:	61 f0       	breq	.+24     	; 0x4d4e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4d36:	d8 01       	movw	r26, r16
    4d38:	ed 91       	ld	r30, X+
    4d3a:	fc 91       	ld	r31, X
    4d3c:	01 90       	ld	r0, Z+
    4d3e:	f0 81       	ld	r31, Z
    4d40:	e0 2d       	mov	r30, r0
    4d42:	c8 01       	movw	r24, r16
    4d44:	09 95       	icall
    4d46:	89 2b       	or	r24, r25
    4d48:	11 f0       	breq	.+4      	; 0x4d4e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4d4a:	21 96       	adiw	r28, 0x01	; 1
    4d4c:	ee cf       	rjmp	.-36     	; 0x4d2a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    4d4e:	ce 01       	movw	r24, r28
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	0f 91       	pop	r16
    4d58:	ff 90       	pop	r15
    4d5a:	ef 90       	pop	r14
    4d5c:	08 95       	ret

00004d5e <_ZN5Print5printERK6String>:
    4d5e:	dc 01       	movw	r26, r24
    4d60:	ed 91       	ld	r30, X+
    4d62:	fc 91       	ld	r31, X
    4d64:	db 01       	movw	r26, r22
    4d66:	14 96       	adiw	r26, 0x04	; 4
    4d68:	4d 91       	ld	r20, X+
    4d6a:	5c 91       	ld	r21, X
    4d6c:	15 97       	sbiw	r26, 0x05	; 5
    4d6e:	6d 91       	ld	r22, X+
    4d70:	7c 91       	ld	r23, X
    4d72:	02 80       	ldd	r0, Z+2	; 0x02
    4d74:	f3 81       	ldd	r31, Z+3	; 0x03
    4d76:	e0 2d       	mov	r30, r0
    4d78:	09 94       	ijmp

00004d7a <_ZN5Print5printEc>:
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	01 90       	ld	r0, Z+
    4d82:	f0 81       	ld	r31, Z
    4d84:	e0 2d       	mov	r30, r0
    4d86:	09 94       	ijmp

00004d88 <_ZN5Print7printlnEv>:
    4d88:	6f eb       	ldi	r22, 0xBF	; 191
    4d8a:	71 e0       	ldi	r23, 0x01	; 1
    4d8c:	af cf       	rjmp	.-162    	; 0x4cec <_ZN5Print5writeEPKc>

00004d8e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4d8e:	0f 93       	push	r16
    4d90:	1f 93       	push	r17
    4d92:	cf 93       	push	r28
    4d94:	df 93       	push	r29
    4d96:	ec 01       	movw	r28, r24
    4d98:	be df       	rcall	.-132    	; 0x4d16 <_ZN5Print5printEPK19__FlashStringHelper>
    4d9a:	8c 01       	movw	r16, r24
    4d9c:	ce 01       	movw	r24, r28
    4d9e:	f4 df       	rcall	.-24     	; 0x4d88 <_ZN5Print7printlnEv>
    4da0:	80 0f       	add	r24, r16
    4da2:	91 1f       	adc	r25, r17
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	08 95       	ret

00004dae <_ZN5Print7printlnERK6String>:
    4dae:	0f 93       	push	r16
    4db0:	1f 93       	push	r17
    4db2:	cf 93       	push	r28
    4db4:	df 93       	push	r29
    4db6:	ec 01       	movw	r28, r24
    4db8:	d2 df       	rcall	.-92     	; 0x4d5e <_ZN5Print5printERK6String>
    4dba:	8c 01       	movw	r16, r24
    4dbc:	ce 01       	movw	r24, r28
    4dbe:	e4 df       	rcall	.-56     	; 0x4d88 <_ZN5Print7printlnEv>
    4dc0:	80 0f       	add	r24, r16
    4dc2:	91 1f       	adc	r25, r17
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	08 95       	ret

00004dce <_ZN5Print11printNumberEmh>:
    4dce:	8f 92       	push	r8
    4dd0:	9f 92       	push	r9
    4dd2:	af 92       	push	r10
    4dd4:	bf 92       	push	r11
    4dd6:	cf 92       	push	r12
    4dd8:	df 92       	push	r13
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	a1 97       	sbiw	r28, 0x21	; 33
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	7c 01       	movw	r14, r24
    4df8:	d4 2e       	mov	r13, r20
    4dfa:	c5 2e       	mov	r12, r21
    4dfc:	db 01       	movw	r26, r22
    4dfe:	19 a2       	std	Y+33, r1	; 0x21
    4e00:	22 30       	cpi	r18, 0x02	; 2
    4e02:	08 f4       	brcc	.+2      	; 0x4e06 <_ZN5Print11printNumberEmh+0x38>
    4e04:	2a e0       	ldi	r18, 0x0A	; 10
    4e06:	8e 01       	movw	r16, r28
    4e08:	0f 5d       	subi	r16, 0xDF	; 223
    4e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0c:	82 2e       	mov	r8, r18
    4e0e:	91 2c       	mov	r9, r1
    4e10:	a1 2c       	mov	r10, r1
    4e12:	b1 2c       	mov	r11, r1
    4e14:	6d 2d       	mov	r22, r13
    4e16:	7c 2d       	mov	r23, r12
    4e18:	cd 01       	movw	r24, r26
    4e1a:	a5 01       	movw	r20, r10
    4e1c:	94 01       	movw	r18, r8
    4e1e:	5e d5       	rcall	.+2748   	; 0x58dc <__udivmodsi4>
    4e20:	d2 2e       	mov	r13, r18
    4e22:	c3 2e       	mov	r12, r19
    4e24:	da 01       	movw	r26, r20
    4e26:	01 50       	subi	r16, 0x01	; 1
    4e28:	11 09       	sbc	r17, r1
    4e2a:	6a 30       	cpi	r22, 0x0A	; 10
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	81 05       	cpc	r24, r1
    4e30:	91 05       	cpc	r25, r1
    4e32:	10 f4       	brcc	.+4      	; 0x4e38 <_ZN5Print11printNumberEmh+0x6a>
    4e34:	60 5d       	subi	r22, 0xD0	; 208
    4e36:	01 c0       	rjmp	.+2      	; 0x4e3a <_ZN5Print11printNumberEmh+0x6c>
    4e38:	69 5c       	subi	r22, 0xC9	; 201
    4e3a:	f8 01       	movw	r30, r16
    4e3c:	60 83       	st	Z, r22
    4e3e:	23 2b       	or	r18, r19
    4e40:	24 2b       	or	r18, r20
    4e42:	25 2b       	or	r18, r21
    4e44:	39 f7       	brne	.-50     	; 0x4e14 <_ZN5Print11printNumberEmh+0x46>
    4e46:	b8 01       	movw	r22, r16
    4e48:	c7 01       	movw	r24, r14
    4e4a:	50 df       	rcall	.-352    	; 0x4cec <_ZN5Print5writeEPKc>
    4e4c:	a1 96       	adiw	r28, 0x21	; 33
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	f8 94       	cli
    4e52:	de bf       	out	0x3e, r29	; 62
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	cd bf       	out	0x3d, r28	; 61
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	1f 91       	pop	r17
    4e5e:	0f 91       	pop	r16
    4e60:	ff 90       	pop	r15
    4e62:	ef 90       	pop	r14
    4e64:	df 90       	pop	r13
    4e66:	cf 90       	pop	r12
    4e68:	bf 90       	pop	r11
    4e6a:	af 90       	pop	r10
    4e6c:	9f 90       	pop	r9
    4e6e:	8f 90       	pop	r8
    4e70:	08 95       	ret

00004e72 <_ZN5Print5printEli>:
    4e72:	cf 92       	push	r12
    4e74:	df 92       	push	r13
    4e76:	ef 92       	push	r14
    4e78:	ff 92       	push	r15
    4e7a:	0f 93       	push	r16
    4e7c:	1f 93       	push	r17
    4e7e:	cf 93       	push	r28
    4e80:	df 93       	push	r29
    4e82:	ec 01       	movw	r28, r24
    4e84:	6a 01       	movw	r12, r20
    4e86:	7b 01       	movw	r14, r22
    4e88:	21 15       	cp	r18, r1
    4e8a:	31 05       	cpc	r19, r1
    4e8c:	79 f4       	brne	.+30     	; 0x4eac <_ZN5Print5printEli+0x3a>
    4e8e:	e8 81       	ld	r30, Y
    4e90:	f9 81       	ldd	r31, Y+1	; 0x01
    4e92:	01 90       	ld	r0, Z+
    4e94:	f0 81       	ld	r31, Z
    4e96:	e0 2d       	mov	r30, r0
    4e98:	64 2f       	mov	r22, r20
    4e9a:	df 91       	pop	r29
    4e9c:	cf 91       	pop	r28
    4e9e:	1f 91       	pop	r17
    4ea0:	0f 91       	pop	r16
    4ea2:	ff 90       	pop	r15
    4ea4:	ef 90       	pop	r14
    4ea6:	df 90       	pop	r13
    4ea8:	cf 90       	pop	r12
    4eaa:	09 94       	ijmp
    4eac:	2a 30       	cpi	r18, 0x0A	; 10
    4eae:	31 05       	cpc	r19, r1
    4eb0:	d9 f4       	brne	.+54     	; 0x4ee8 <_ZN5Print5printEli+0x76>
    4eb2:	77 ff       	sbrs	r23, 7
    4eb4:	18 c0       	rjmp	.+48     	; 0x4ee6 <_ZN5Print5printEli+0x74>
    4eb6:	6d e2       	ldi	r22, 0x2D	; 45
    4eb8:	60 df       	rcall	.-320    	; 0x4d7a <_ZN5Print5printEc>
    4eba:	8c 01       	movw	r16, r24
    4ebc:	44 27       	eor	r20, r20
    4ebe:	55 27       	eor	r21, r21
    4ec0:	ba 01       	movw	r22, r20
    4ec2:	4c 19       	sub	r20, r12
    4ec4:	5d 09       	sbc	r21, r13
    4ec6:	6e 09       	sbc	r22, r14
    4ec8:	7f 09       	sbc	r23, r15
    4eca:	2a e0       	ldi	r18, 0x0A	; 10
    4ecc:	ce 01       	movw	r24, r28
    4ece:	7f df       	rcall	.-258    	; 0x4dce <_ZN5Print11printNumberEmh>
    4ed0:	80 0f       	add	r24, r16
    4ed2:	91 1f       	adc	r25, r17
    4ed4:	df 91       	pop	r29
    4ed6:	cf 91       	pop	r28
    4ed8:	1f 91       	pop	r17
    4eda:	0f 91       	pop	r16
    4edc:	ff 90       	pop	r15
    4ede:	ef 90       	pop	r14
    4ee0:	df 90       	pop	r13
    4ee2:	cf 90       	pop	r12
    4ee4:	08 95       	ret
    4ee6:	2a e0       	ldi	r18, 0x0A	; 10
    4ee8:	b7 01       	movw	r22, r14
    4eea:	a6 01       	movw	r20, r12
    4eec:	ce 01       	movw	r24, r28
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	df 90       	pop	r13
    4efc:	cf 90       	pop	r12
    4efe:	67 cf       	rjmp	.-306    	; 0x4dce <_ZN5Print11printNumberEmh>

00004f00 <_ZN5Print7printlnEii>:
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	ec 01       	movw	r28, r24
    4f0a:	9a 01       	movw	r18, r20
    4f0c:	ab 01       	movw	r20, r22
    4f0e:	77 0f       	add	r23, r23
    4f10:	66 0b       	sbc	r22, r22
    4f12:	77 0b       	sbc	r23, r23
    4f14:	ae df       	rcall	.-164    	; 0x4e72 <_ZN5Print5printEli>
    4f16:	8c 01       	movw	r16, r24
    4f18:	ce 01       	movw	r24, r28
    4f1a:	36 df       	rcall	.-404    	; 0x4d88 <_ZN5Print7printlnEv>
    4f1c:	80 0f       	add	r24, r16
    4f1e:	91 1f       	adc	r25, r17
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	1f 91       	pop	r17
    4f26:	0f 91       	pop	r16
    4f28:	08 95       	ret

00004f2a <_ZN5Print5printEmi>:
    4f2a:	21 15       	cp	r18, r1
    4f2c:	31 05       	cpc	r19, r1
    4f2e:	41 f4       	brne	.+16     	; 0x4f40 <_ZN5Print5printEmi+0x16>
    4f30:	dc 01       	movw	r26, r24
    4f32:	ed 91       	ld	r30, X+
    4f34:	fc 91       	ld	r31, X
    4f36:	01 90       	ld	r0, Z+
    4f38:	f0 81       	ld	r31, Z
    4f3a:	e0 2d       	mov	r30, r0
    4f3c:	64 2f       	mov	r22, r20
    4f3e:	09 94       	ijmp
    4f40:	46 cf       	rjmp	.-372    	; 0x4dce <_ZN5Print11printNumberEmh>

00004f42 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4f42:	0f 93       	push	r16
    4f44:	1f 93       	push	r17
    4f46:	cf 93       	push	r28
    4f48:	df 93       	push	r29
    4f4a:	ec 01       	movw	r28, r24
    4f4c:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4f4e:	46 2f       	mov	r20, r22
    4f50:	50 e0       	ldi	r21, 0x00	; 0
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	70 e0       	ldi	r23, 0x00	; 0
    4f56:	e9 df       	rcall	.-46     	; 0x4f2a <_ZN5Print5printEmi>
    4f58:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4f5a:	ce 01       	movw	r24, r28
    4f5c:	15 df       	rcall	.-470    	; 0x4d88 <_ZN5Print7printlnEv>
  return n;
}
    4f5e:	80 0f       	add	r24, r16
    4f60:	91 1f       	adc	r25, r17
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	1f 91       	pop	r17
    4f68:	0f 91       	pop	r16
    4f6a:	08 95       	ret

00004f6c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4f6c:	1f 92       	push	r1
    4f6e:	0f 92       	push	r0
    4f70:	0f b6       	in	r0, 0x3f	; 63
    4f72:	0f 92       	push	r0
    4f74:	11 24       	eor	r1, r1
    4f76:	2f 93       	push	r18
    4f78:	3f 93       	push	r19
    4f7a:	8f 93       	push	r24
    4f7c:	9f 93       	push	r25
    4f7e:	af 93       	push	r26
    4f80:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4f82:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <timer0_millis>
    4f86:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <timer0_millis+0x1>
    4f8a:	a0 91 60 05 	lds	r26, 0x0560	; 0x800560 <timer0_millis+0x2>
    4f8e:	b0 91 61 05 	lds	r27, 0x0561	; 0x800561 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4f92:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4f96:	23 e0       	ldi	r18, 0x03	; 3
    4f98:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4f9a:	2d 37       	cpi	r18, 0x7D	; 125
    4f9c:	20 f4       	brcc	.+8      	; 0x4fa6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	a1 1d       	adc	r26, r1
    4fa2:	b1 1d       	adc	r27, r1
    4fa4:	05 c0       	rjmp	.+10     	; 0x4fb0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4fa6:	26 e8       	ldi	r18, 0x86	; 134
    4fa8:	23 0f       	add	r18, r19
		m += 1;
    4faa:	02 96       	adiw	r24, 0x02	; 2
    4fac:	a1 1d       	adc	r26, r1
    4fae:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4fb0:	20 93 5d 05 	sts	0x055D, r18	; 0x80055d <timer0_fract>
	timer0_millis = m;
    4fb4:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <timer0_millis>
    4fb8:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <timer0_millis+0x1>
    4fbc:	a0 93 60 05 	sts	0x0560, r26	; 0x800560 <timer0_millis+0x2>
    4fc0:	b0 93 61 05 	sts	0x0561, r27	; 0x800561 <timer0_millis+0x3>
	timer0_overflow_count++;
    4fc4:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <timer0_overflow_count>
    4fc8:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <timer0_overflow_count+0x1>
    4fcc:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <timer0_overflow_count+0x2>
    4fd0:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <timer0_overflow_count+0x3>
    4fd4:	01 96       	adiw	r24, 0x01	; 1
    4fd6:	a1 1d       	adc	r26, r1
    4fd8:	b1 1d       	adc	r27, r1
    4fda:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <timer0_overflow_count>
    4fde:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <timer0_overflow_count+0x1>
    4fe2:	a0 93 64 05 	sts	0x0564, r26	; 0x800564 <timer0_overflow_count+0x2>
    4fe6:	b0 93 65 05 	sts	0x0565, r27	; 0x800565 <timer0_overflow_count+0x3>
}
    4fea:	bf 91       	pop	r27
    4fec:	af 91       	pop	r26
    4fee:	9f 91       	pop	r25
    4ff0:	8f 91       	pop	r24
    4ff2:	3f 91       	pop	r19
    4ff4:	2f 91       	pop	r18
    4ff6:	0f 90       	pop	r0
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	0f 90       	pop	r0
    4ffc:	1f 90       	pop	r1
    4ffe:	18 95       	reti

00005000 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5000:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5002:	f8 94       	cli
	m = timer0_millis;
    5004:	60 91 5e 05 	lds	r22, 0x055E	; 0x80055e <timer0_millis>
    5008:	70 91 5f 05 	lds	r23, 0x055F	; 0x80055f <timer0_millis+0x1>
    500c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <timer0_millis+0x2>
    5010:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <timer0_millis+0x3>
	SREG = oldSREG;
    5014:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5016:	08 95       	ret

00005018 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5018:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    501a:	f8 94       	cli
	m = timer0_overflow_count;
    501c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <timer0_overflow_count>
    5020:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <timer0_overflow_count+0x1>
    5024:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <timer0_overflow_count+0x2>
    5028:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    502c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    502e:	a8 9b       	sbis	0x15, 0	; 21
    5030:	05 c0       	rjmp	.+10     	; 0x503c <micros+0x24>
    5032:	2f 3f       	cpi	r18, 0xFF	; 255
    5034:	19 f0       	breq	.+6      	; 0x503c <micros+0x24>
		m++;
    5036:	01 96       	adiw	r24, 0x01	; 1
    5038:	a1 1d       	adc	r26, r1
    503a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    503c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    503e:	ba 2f       	mov	r27, r26
    5040:	a9 2f       	mov	r26, r25
    5042:	98 2f       	mov	r25, r24
    5044:	88 27       	eor	r24, r24
    5046:	82 0f       	add	r24, r18
    5048:	91 1d       	adc	r25, r1
    504a:	a1 1d       	adc	r26, r1
    504c:	b1 1d       	adc	r27, r1
    504e:	bc 01       	movw	r22, r24
    5050:	cd 01       	movw	r24, r26
    5052:	42 e0       	ldi	r20, 0x02	; 2
    5054:	66 0f       	add	r22, r22
    5056:	77 1f       	adc	r23, r23
    5058:	88 1f       	adc	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	4a 95       	dec	r20
    505e:	d1 f7       	brne	.-12     	; 0x5054 <micros+0x3c>
}
    5060:	08 95       	ret

00005062 <delay>:

void delay(unsigned long ms)
{
    5062:	8f 92       	push	r8
    5064:	9f 92       	push	r9
    5066:	af 92       	push	r10
    5068:	bf 92       	push	r11
    506a:	cf 92       	push	r12
    506c:	df 92       	push	r13
    506e:	ef 92       	push	r14
    5070:	ff 92       	push	r15
    5072:	6b 01       	movw	r12, r22
    5074:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5076:	d0 df       	rcall	.-96     	; 0x5018 <micros>
    5078:	4b 01       	movw	r8, r22
    507a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    507c:	c1 14       	cp	r12, r1
    507e:	d1 04       	cpc	r13, r1
    5080:	e1 04       	cpc	r14, r1
    5082:	f1 04       	cpc	r15, r1
    5084:	f1 f0       	breq	.+60     	; 0x50c2 <delay+0x60>
		yield();
    5086:	29 d4       	rcall	.+2130   	; 0x58da <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5088:	c7 df       	rcall	.-114    	; 0x5018 <micros>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	88 19       	sub	r24, r8
    5090:	99 09       	sbc	r25, r9
    5092:	aa 09       	sbc	r26, r10
    5094:	bb 09       	sbc	r27, r11
    5096:	88 3e       	cpi	r24, 0xE8	; 232
    5098:	93 40       	sbci	r25, 0x03	; 3
    509a:	a1 05       	cpc	r26, r1
    509c:	b1 05       	cpc	r27, r1
    509e:	70 f3       	brcs	.-36     	; 0x507c <delay+0x1a>
			ms--;
    50a0:	21 e0       	ldi	r18, 0x01	; 1
    50a2:	c2 1a       	sub	r12, r18
    50a4:	d1 08       	sbc	r13, r1
    50a6:	e1 08       	sbc	r14, r1
    50a8:	f1 08       	sbc	r15, r1
			start += 1000;
    50aa:	88 ee       	ldi	r24, 0xE8	; 232
    50ac:	88 0e       	add	r8, r24
    50ae:	83 e0       	ldi	r24, 0x03	; 3
    50b0:	98 1e       	adc	r9, r24
    50b2:	a1 1c       	adc	r10, r1
    50b4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    50b6:	c1 14       	cp	r12, r1
    50b8:	d1 04       	cpc	r13, r1
    50ba:	e1 04       	cpc	r14, r1
    50bc:	f1 04       	cpc	r15, r1
    50be:	21 f7       	brne	.-56     	; 0x5088 <delay+0x26>
    50c0:	dd cf       	rjmp	.-70     	; 0x507c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    50c2:	ff 90       	pop	r15
    50c4:	ef 90       	pop	r14
    50c6:	df 90       	pop	r13
    50c8:	cf 90       	pop	r12
    50ca:	bf 90       	pop	r11
    50cc:	af 90       	pop	r10
    50ce:	9f 90       	pop	r9
    50d0:	8f 90       	pop	r8
    50d2:	08 95       	ret

000050d4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    50d4:	82 30       	cpi	r24, 0x02	; 2
    50d6:	91 05       	cpc	r25, r1
    50d8:	38 f0       	brcs	.+14     	; 0x50e8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    50da:	88 0f       	add	r24, r24
    50dc:	99 1f       	adc	r25, r25
    50de:	88 0f       	add	r24, r24
    50e0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    50e2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    50e4:	01 97       	sbiw	r24, 0x01	; 1
    50e6:	f1 f7       	brne	.-4      	; 0x50e4 <delayMicroseconds+0x10>
    50e8:	08 95       	ret

000050ea <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    50ea:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    50ec:	84 b5       	in	r24, 0x24	; 36
    50ee:	82 60       	ori	r24, 0x02	; 2
    50f0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    50f2:	84 b5       	in	r24, 0x24	; 36
    50f4:	81 60       	ori	r24, 0x01	; 1
    50f6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    50f8:	85 b5       	in	r24, 0x25	; 37
    50fa:	82 60       	ori	r24, 0x02	; 2
    50fc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    50fe:	85 b5       	in	r24, 0x25	; 37
    5100:	81 60       	ori	r24, 0x01	; 1
    5102:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5104:	ee e6       	ldi	r30, 0x6E	; 110
    5106:	f0 e0       	ldi	r31, 0x00	; 0
    5108:	80 81       	ld	r24, Z
    510a:	81 60       	ori	r24, 0x01	; 1
    510c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    510e:	e1 e8       	ldi	r30, 0x81	; 129
    5110:	f0 e0       	ldi	r31, 0x00	; 0
    5112:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5114:	80 81       	ld	r24, Z
    5116:	82 60       	ori	r24, 0x02	; 2
    5118:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    511a:	80 81       	ld	r24, Z
    511c:	81 60       	ori	r24, 0x01	; 1
    511e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5120:	e0 e8       	ldi	r30, 0x80	; 128
    5122:	f0 e0       	ldi	r31, 0x00	; 0
    5124:	80 81       	ld	r24, Z
    5126:	81 60       	ori	r24, 0x01	; 1
    5128:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    512a:	e1 eb       	ldi	r30, 0xB1	; 177
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	80 81       	ld	r24, Z
    5130:	84 60       	ori	r24, 0x04	; 4
    5132:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5134:	e0 eb       	ldi	r30, 0xB0	; 176
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
    513a:	81 60       	ori	r24, 0x01	; 1
    513c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    513e:	ea e7       	ldi	r30, 0x7A	; 122
    5140:	f0 e0       	ldi	r31, 0x00	; 0
    5142:	80 81       	ld	r24, Z
    5144:	84 60       	ori	r24, 0x04	; 4
    5146:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5148:	80 81       	ld	r24, Z
    514a:	82 60       	ori	r24, 0x02	; 2
    514c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    514e:	80 81       	ld	r24, Z
    5150:	81 60       	ori	r24, 0x01	; 1
    5152:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5154:	80 81       	ld	r24, Z
    5156:	80 68       	ori	r24, 0x80	; 128
    5158:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    515a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    515e:	08 95       	ret

00005160 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5160:	8e 30       	cpi	r24, 0x0E	; 14
    5162:	08 f0       	brcs	.+2      	; 0x5166 <analogRead+0x6>
    5164:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5166:	87 70       	andi	r24, 0x07	; 7
    5168:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    516c:	90 e4       	ldi	r25, 0x40	; 64
    516e:	29 9f       	mul	r18, r25
    5170:	90 01       	movw	r18, r0
    5172:	11 24       	eor	r1, r1
    5174:	82 2b       	or	r24, r18
    5176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    517a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    517e:	80 64       	ori	r24, 0x40	; 64
    5180:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5184:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5188:	86 fd       	sbrc	r24, 6
    518a:	fc cf       	rjmp	.-8      	; 0x5184 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    518c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    5190:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5194:	90 e0       	ldi	r25, 0x00	; 0
}
    5196:	92 2b       	or	r25, r18
    5198:	08 95       	ret

0000519a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    519a:	83 30       	cpi	r24, 0x03	; 3
    519c:	81 f0       	breq	.+32     	; 0x51be <turnOffPWM+0x24>
    519e:	28 f4       	brcc	.+10     	; 0x51aa <turnOffPWM+0x10>
    51a0:	81 30       	cpi	r24, 0x01	; 1
    51a2:	99 f0       	breq	.+38     	; 0x51ca <turnOffPWM+0x30>
    51a4:	82 30       	cpi	r24, 0x02	; 2
    51a6:	a1 f0       	breq	.+40     	; 0x51d0 <turnOffPWM+0x36>
    51a8:	08 95       	ret
    51aa:	87 30       	cpi	r24, 0x07	; 7
    51ac:	a9 f0       	breq	.+42     	; 0x51d8 <turnOffPWM+0x3e>
    51ae:	88 30       	cpi	r24, 0x08	; 8
    51b0:	b9 f0       	breq	.+46     	; 0x51e0 <turnOffPWM+0x46>
    51b2:	84 30       	cpi	r24, 0x04	; 4
    51b4:	d1 f4       	brne	.+52     	; 0x51ea <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    51b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    51ba:	8f 7d       	andi	r24, 0xDF	; 223
    51bc:	03 c0       	rjmp	.+6      	; 0x51c4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    51be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    51c2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    51c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    51c8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    51ca:	84 b5       	in	r24, 0x24	; 36
    51cc:	8f 77       	andi	r24, 0x7F	; 127
    51ce:	02 c0       	rjmp	.+4      	; 0x51d4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    51d0:	84 b5       	in	r24, 0x24	; 36
    51d2:	8f 7d       	andi	r24, 0xDF	; 223
    51d4:	84 bd       	out	0x24, r24	; 36
    51d6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    51d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    51dc:	8f 77       	andi	r24, 0x7F	; 127
    51de:	03 c0       	rjmp	.+6      	; 0x51e6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    51e0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    51e4:	8f 7d       	andi	r24, 0xDF	; 223
    51e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    51ea:	08 95       	ret

000051ec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	fc 01       	movw	r30, r24
    51f4:	e3 59       	subi	r30, 0x93	; 147
    51f6:	fb 4f       	sbci	r31, 0xFB	; 251
    51f8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    51fa:	fc 01       	movw	r30, r24
    51fc:	ef 57       	subi	r30, 0x7F	; 127
    51fe:	fb 4f       	sbci	r31, 0xFB	; 251
    5200:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5202:	88 23       	and	r24, r24
    5204:	61 f1       	breq	.+88     	; 0x525e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	88 0f       	add	r24, r24
    520a:	99 1f       	adc	r25, r25
    520c:	fc 01       	movw	r30, r24
    520e:	e7 55       	subi	r30, 0x57	; 87
    5210:	fb 4f       	sbci	r31, 0xFB	; 251
    5212:	c5 91       	lpm	r28, Z+
    5214:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5216:	fc 01       	movw	r30, r24
    5218:	e1 56       	subi	r30, 0x61	; 97
    521a:	fb 4f       	sbci	r31, 0xFB	; 251
    521c:	a5 91       	lpm	r26, Z+
    521e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5220:	61 11       	cpse	r22, r1
    5222:	09 c0       	rjmp	.+18     	; 0x5236 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5224:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5226:	f8 94       	cli
		*reg &= ~bit;
    5228:	88 81       	ld	r24, Y
    522a:	20 95       	com	r18
    522c:	82 23       	and	r24, r18
    522e:	88 83       	st	Y, r24
		*out &= ~bit;
    5230:	ec 91       	ld	r30, X
    5232:	2e 23       	and	r18, r30
    5234:	0b c0       	rjmp	.+22     	; 0x524c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5236:	62 30       	cpi	r22, 0x02	; 2
    5238:	61 f4       	brne	.+24     	; 0x5252 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    523a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    523c:	f8 94       	cli
		*reg &= ~bit;
    523e:	38 81       	ld	r19, Y
    5240:	82 2f       	mov	r24, r18
    5242:	80 95       	com	r24
    5244:	83 23       	and	r24, r19
    5246:	88 83       	st	Y, r24
		*out |= bit;
    5248:	ec 91       	ld	r30, X
    524a:	2e 2b       	or	r18, r30
    524c:	2c 93       	st	X, r18
		SREG = oldSREG;
    524e:	9f bf       	out	0x3f, r25	; 63
    5250:	06 c0       	rjmp	.+12     	; 0x525e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5252:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5254:	f8 94       	cli
		*reg |= bit;
    5256:	e8 81       	ld	r30, Y
    5258:	2e 2b       	or	r18, r30
    525a:	28 83       	st	Y, r18
		SREG = oldSREG;
    525c:	8f bf       	out	0x3f, r24	; 63
	}
}
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	08 95       	ret

00005264 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5264:	1f 93       	push	r17
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    526a:	28 2f       	mov	r18, r24
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	f9 01       	movw	r30, r18
    5270:	e7 5a       	subi	r30, 0xA7	; 167
    5272:	fb 4f       	sbci	r31, 0xFB	; 251
    5274:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5276:	f9 01       	movw	r30, r18
    5278:	e3 59       	subi	r30, 0x93	; 147
    527a:	fb 4f       	sbci	r31, 0xFB	; 251
    527c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    527e:	f9 01       	movw	r30, r18
    5280:	ef 57       	subi	r30, 0x7F	; 127
    5282:	fb 4f       	sbci	r31, 0xFB	; 251
    5284:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5286:	cc 23       	and	r28, r28
    5288:	c1 f0       	breq	.+48     	; 0x52ba <digitalWrite+0x56>
    528a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    528c:	81 11       	cpse	r24, r1
    528e:	85 df       	rcall	.-246    	; 0x519a <turnOffPWM>

	out = portOutputRegister(port);
    5290:	ec 2f       	mov	r30, r28
    5292:	f0 e0       	ldi	r31, 0x00	; 0
    5294:	ee 0f       	add	r30, r30
    5296:	ff 1f       	adc	r31, r31
    5298:	e1 56       	subi	r30, 0x61	; 97
    529a:	fb 4f       	sbci	r31, 0xFB	; 251
    529c:	a5 91       	lpm	r26, Z+
    529e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    52a0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    52a2:	f8 94       	cli

	if (val == LOW) {
    52a4:	11 11       	cpse	r17, r1
    52a6:	05 c0       	rjmp	.+10     	; 0x52b2 <digitalWrite+0x4e>
		*out &= ~bit;
    52a8:	9c 91       	ld	r25, X
    52aa:	ed 2f       	mov	r30, r29
    52ac:	e0 95       	com	r30
    52ae:	e9 23       	and	r30, r25
    52b0:	02 c0       	rjmp	.+4      	; 0x52b6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    52b2:	ec 91       	ld	r30, X
    52b4:	ed 2b       	or	r30, r29
    52b6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    52b8:	8f bf       	out	0x3f, r24	; 63
}
    52ba:	df 91       	pop	r29
    52bc:	cf 91       	pop	r28
    52be:	1f 91       	pop	r17
    52c0:	08 95       	ret

000052c2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    52c6:	28 2f       	mov	r18, r24
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	f9 01       	movw	r30, r18
    52cc:	e7 5a       	subi	r30, 0xA7	; 167
    52ce:	fb 4f       	sbci	r31, 0xFB	; 251
    52d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    52d2:	f9 01       	movw	r30, r18
    52d4:	e3 59       	subi	r30, 0x93	; 147
    52d6:	fb 4f       	sbci	r31, 0xFB	; 251
    52d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    52da:	f9 01       	movw	r30, r18
    52dc:	ef 57       	subi	r30, 0x7F	; 127
    52de:	fb 4f       	sbci	r31, 0xFB	; 251
    52e0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    52e2:	cc 23       	and	r28, r28
    52e4:	89 f0       	breq	.+34     	; 0x5308 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    52e6:	81 11       	cpse	r24, r1
    52e8:	58 df       	rcall	.-336    	; 0x519a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    52ea:	ec 2f       	mov	r30, r28
    52ec:	f0 e0       	ldi	r31, 0x00	; 0
    52ee:	ee 0f       	add	r30, r30
    52f0:	ff 1f       	adc	r31, r31
    52f2:	eb 56       	subi	r30, 0x6B	; 107
    52f4:	fb 4f       	sbci	r31, 0xFB	; 251
    52f6:	a5 91       	lpm	r26, Z+
    52f8:	b4 91       	lpm	r27, Z
    52fa:	ec 91       	ld	r30, X
    52fc:	ed 23       	and	r30, r29
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	21 f4       	brne	.+8      	; 0x530c <digitalRead+0x4a>
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	02 c0       	rjmp	.+4      	; 0x530c <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5308:	80 e0       	ldi	r24, 0x00	; 0
    530a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    5312:	fc 01       	movw	r30, r24
    5314:	80 81       	ld	r24, Z
    5316:	91 81       	ldd	r25, Z+1	; 0x01
    5318:	29 c4       	rjmp	.+2130   	; 0x5b6c <free>

0000531a <_ZN6String10invalidateEv>:
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	ec 01       	movw	r28, r24
    5320:	88 81       	ld	r24, Y
    5322:	99 81       	ldd	r25, Y+1	; 0x01
    5324:	00 97       	sbiw	r24, 0x00	; 0
    5326:	09 f0       	breq	.+2      	; 0x532a <_ZN6String10invalidateEv+0x10>
    5328:	21 d4       	rcall	.+2114   	; 0x5b6c <free>
    532a:	19 82       	std	Y+1, r1	; 0x01
    532c:	18 82       	st	Y, r1
    532e:	1d 82       	std	Y+5, r1	; 0x05
    5330:	1c 82       	std	Y+4, r1	; 0x04
    5332:	1b 82       	std	Y+3, r1	; 0x03
    5334:	1a 82       	std	Y+2, r1	; 0x02
    5336:	df 91       	pop	r29
    5338:	cf 91       	pop	r28
    533a:	08 95       	ret

0000533c <_ZN6String12changeBufferEj>:
    533c:	0f 93       	push	r16
    533e:	1f 93       	push	r17
    5340:	cf 93       	push	r28
    5342:	df 93       	push	r29
    5344:	ec 01       	movw	r28, r24
    5346:	8b 01       	movw	r16, r22
    5348:	6f 5f       	subi	r22, 0xFF	; 255
    534a:	7f 4f       	sbci	r23, 0xFF	; 255
    534c:	88 81       	ld	r24, Y
    534e:	99 81       	ldd	r25, Y+1	; 0x01
    5350:	a5 d4       	rcall	.+2378   	; 0x5c9c <realloc>
    5352:	00 97       	sbiw	r24, 0x00	; 0
    5354:	31 f0       	breq	.+12     	; 0x5362 <_ZN6String12changeBufferEj+0x26>
    5356:	99 83       	std	Y+1, r25	; 0x01
    5358:	88 83       	st	Y, r24
    535a:	1b 83       	std	Y+3, r17	; 0x03
    535c:	0a 83       	std	Y+2, r16	; 0x02
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <_ZN6String12changeBufferEj+0x28>
    5362:	80 e0       	ldi	r24, 0x00	; 0
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	1f 91       	pop	r17
    536a:	0f 91       	pop	r16
    536c:	08 95       	ret

0000536e <_ZN6String7reserveEj>:
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	ec 01       	movw	r28, r24
    5374:	88 81       	ld	r24, Y
    5376:	99 81       	ldd	r25, Y+1	; 0x01
    5378:	89 2b       	or	r24, r25
    537a:	29 f0       	breq	.+10     	; 0x5386 <_ZN6String7reserveEj+0x18>
    537c:	8a 81       	ldd	r24, Y+2	; 0x02
    537e:	9b 81       	ldd	r25, Y+3	; 0x03
    5380:	86 17       	cp	r24, r22
    5382:	97 07       	cpc	r25, r23
    5384:	58 f4       	brcc	.+22     	; 0x539c <_ZN6String7reserveEj+0x2e>
    5386:	ce 01       	movw	r24, r28
    5388:	d9 df       	rcall	.-78     	; 0x533c <_ZN6String12changeBufferEj>
    538a:	88 23       	and	r24, r24
    538c:	41 f0       	breq	.+16     	; 0x539e <_ZN6String7reserveEj+0x30>
    538e:	8c 81       	ldd	r24, Y+4	; 0x04
    5390:	9d 81       	ldd	r25, Y+5	; 0x05
    5392:	89 2b       	or	r24, r25
    5394:	19 f4       	brne	.+6      	; 0x539c <_ZN6String7reserveEj+0x2e>
    5396:	e8 81       	ld	r30, Y
    5398:	f9 81       	ldd	r31, Y+1	; 0x01
    539a:	10 82       	st	Z, r1
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	08 95       	ret

000053a4 <_ZN6String4copyEPKcj>:
    53a4:	ef 92       	push	r14
    53a6:	ff 92       	push	r15
    53a8:	0f 93       	push	r16
    53aa:	1f 93       	push	r17
    53ac:	cf 93       	push	r28
    53ae:	df 93       	push	r29
    53b0:	ec 01       	movw	r28, r24
    53b2:	7b 01       	movw	r14, r22
    53b4:	8a 01       	movw	r16, r20
    53b6:	ba 01       	movw	r22, r20
    53b8:	da df       	rcall	.-76     	; 0x536e <_ZN6String7reserveEj>
    53ba:	81 11       	cpse	r24, r1
    53bc:	03 c0       	rjmp	.+6      	; 0x53c4 <_ZN6String4copyEPKcj+0x20>
    53be:	ce 01       	movw	r24, r28
    53c0:	ac df       	rcall	.-168    	; 0x531a <_ZN6String10invalidateEv>
    53c2:	06 c0       	rjmp	.+12     	; 0x53d0 <_ZN6String4copyEPKcj+0x2c>
    53c4:	1d 83       	std	Y+5, r17	; 0x05
    53c6:	0c 83       	std	Y+4, r16	; 0x04
    53c8:	b7 01       	movw	r22, r14
    53ca:	88 81       	ld	r24, Y
    53cc:	99 81       	ldd	r25, Y+1	; 0x01
    53ce:	de d6       	rcall	.+3516   	; 0x618c <strcpy>
    53d0:	ce 01       	movw	r24, r28
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	1f 91       	pop	r17
    53d8:	0f 91       	pop	r16
    53da:	ff 90       	pop	r15
    53dc:	ef 90       	pop	r14
    53de:	08 95       	ret

000053e0 <_ZN6StringC1EPKc>:
    53e0:	fc 01       	movw	r30, r24
    53e2:	11 82       	std	Z+1, r1	; 0x01
    53e4:	10 82       	st	Z, r1
    53e6:	13 82       	std	Z+3, r1	; 0x03
    53e8:	12 82       	std	Z+2, r1	; 0x02
    53ea:	15 82       	std	Z+5, r1	; 0x05
    53ec:	14 82       	std	Z+4, r1	; 0x04
    53ee:	61 15       	cp	r22, r1
    53f0:	71 05       	cpc	r23, r1
    53f2:	49 f0       	breq	.+18     	; 0x5406 <_ZN6StringC1EPKc+0x26>
    53f4:	fb 01       	movw	r30, r22
    53f6:	01 90       	ld	r0, Z+
    53f8:	00 20       	and	r0, r0
    53fa:	e9 f7       	brne	.-6      	; 0x53f6 <_ZN6StringC1EPKc+0x16>
    53fc:	31 97       	sbiw	r30, 0x01	; 1
    53fe:	af 01       	movw	r20, r30
    5400:	46 1b       	sub	r20, r22
    5402:	57 0b       	sbc	r21, r23
    5404:	cf cf       	rjmp	.-98     	; 0x53a4 <_ZN6String4copyEPKcj>
    5406:	08 95       	ret

00005408 <_ZN6StringaSERKS_>:
    5408:	cf 93       	push	r28
    540a:	df 93       	push	r29
    540c:	ec 01       	movw	r28, r24
    540e:	fb 01       	movw	r30, r22
    5410:	86 17       	cp	r24, r22
    5412:	97 07       	cpc	r25, r23
    5414:	51 f0       	breq	.+20     	; 0x542a <_ZN6StringaSERKS_+0x22>
    5416:	60 81       	ld	r22, Z
    5418:	71 81       	ldd	r23, Z+1	; 0x01
    541a:	61 15       	cp	r22, r1
    541c:	71 05       	cpc	r23, r1
    541e:	21 f0       	breq	.+8      	; 0x5428 <_ZN6StringaSERKS_+0x20>
    5420:	44 81       	ldd	r20, Z+4	; 0x04
    5422:	55 81       	ldd	r21, Z+5	; 0x05
    5424:	bf df       	rcall	.-130    	; 0x53a4 <_ZN6String4copyEPKcj>
    5426:	01 c0       	rjmp	.+2      	; 0x542a <_ZN6StringaSERKS_+0x22>
    5428:	78 df       	rcall	.-272    	; 0x531a <_ZN6String10invalidateEv>
    542a:	ce 01       	movw	r24, r28
    542c:	df 91       	pop	r29
    542e:	cf 91       	pop	r28
    5430:	08 95       	ret

00005432 <_ZN6StringC1ERKS_>:
    5432:	fc 01       	movw	r30, r24
    5434:	11 82       	std	Z+1, r1	; 0x01
    5436:	10 82       	st	Z, r1
    5438:	13 82       	std	Z+3, r1	; 0x03
    543a:	12 82       	std	Z+2, r1	; 0x02
    543c:	15 82       	std	Z+5, r1	; 0x05
    543e:	14 82       	std	Z+4, r1	; 0x04
    5440:	e3 cf       	rjmp	.-58     	; 0x5408 <_ZN6StringaSERKS_>

00005442 <_ZN6StringaSEPKc>:
    5442:	cf 93       	push	r28
    5444:	df 93       	push	r29
    5446:	ec 01       	movw	r28, r24
    5448:	61 15       	cp	r22, r1
    544a:	71 05       	cpc	r23, r1
    544c:	51 f0       	breq	.+20     	; 0x5462 <_ZN6StringaSEPKc+0x20>
    544e:	fb 01       	movw	r30, r22
    5450:	01 90       	ld	r0, Z+
    5452:	00 20       	and	r0, r0
    5454:	e9 f7       	brne	.-6      	; 0x5450 <_ZN6StringaSEPKc+0xe>
    5456:	31 97       	sbiw	r30, 0x01	; 1
    5458:	af 01       	movw	r20, r30
    545a:	46 1b       	sub	r20, r22
    545c:	57 0b       	sbc	r21, r23
    545e:	a2 df       	rcall	.-188    	; 0x53a4 <_ZN6String4copyEPKcj>
    5460:	01 c0       	rjmp	.+2      	; 0x5464 <_ZN6StringaSEPKc+0x22>
    5462:	5b df       	rcall	.-330    	; 0x531a <_ZN6String10invalidateEv>
    5464:	ce 01       	movw	r24, r28
    5466:	df 91       	pop	r29
    5468:	cf 91       	pop	r28
    546a:	08 95       	ret

0000546c <_ZN6StringC1Eih>:
    546c:	0f 93       	push	r16
    546e:	1f 93       	push	r17
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	cd b7       	in	r28, 0x3d	; 61
    5476:	de b7       	in	r29, 0x3e	; 62
    5478:	62 97       	sbiw	r28, 0x12	; 18
    547a:	0f b6       	in	r0, 0x3f	; 63
    547c:	f8 94       	cli
    547e:	de bf       	out	0x3e, r29	; 62
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	cd bf       	out	0x3d, r28	; 61
    5484:	8c 01       	movw	r16, r24
    5486:	cb 01       	movw	r24, r22
    5488:	f8 01       	movw	r30, r16
    548a:	11 82       	std	Z+1, r1	; 0x01
    548c:	10 82       	st	Z, r1
    548e:	13 82       	std	Z+3, r1	; 0x03
    5490:	12 82       	std	Z+2, r1	; 0x02
    5492:	15 82       	std	Z+5, r1	; 0x05
    5494:	14 82       	std	Z+4, r1	; 0x04
    5496:	50 e0       	ldi	r21, 0x00	; 0
    5498:	be 01       	movw	r22, r28
    549a:	6f 5f       	subi	r22, 0xFF	; 255
    549c:	7f 4f       	sbci	r23, 0xFF	; 255
    549e:	8b d6       	rcall	.+3350   	; 0x61b6 <itoa>
    54a0:	be 01       	movw	r22, r28
    54a2:	6f 5f       	subi	r22, 0xFF	; 255
    54a4:	7f 4f       	sbci	r23, 0xFF	; 255
    54a6:	c8 01       	movw	r24, r16
    54a8:	cc df       	rcall	.-104    	; 0x5442 <_ZN6StringaSEPKc>
    54aa:	62 96       	adiw	r28, 0x12	; 18
    54ac:	0f b6       	in	r0, 0x3f	; 63
    54ae:	f8 94       	cli
    54b0:	de bf       	out	0x3e, r29	; 62
    54b2:	0f be       	out	0x3f, r0	; 63
    54b4:	cd bf       	out	0x3d, r28	; 61
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	08 95       	ret

000054c0 <_ZN6StringC1Elh>:
    54c0:	0f 93       	push	r16
    54c2:	1f 93       	push	r17
    54c4:	cf 93       	push	r28
    54c6:	df 93       	push	r29
    54c8:	cd b7       	in	r28, 0x3d	; 61
    54ca:	de b7       	in	r29, 0x3e	; 62
    54cc:	a2 97       	sbiw	r28, 0x22	; 34
    54ce:	0f b6       	in	r0, 0x3f	; 63
    54d0:	f8 94       	cli
    54d2:	de bf       	out	0x3e, r29	; 62
    54d4:	0f be       	out	0x3f, r0	; 63
    54d6:	cd bf       	out	0x3d, r28	; 61
    54d8:	8c 01       	movw	r16, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	ba 01       	movw	r22, r20
    54de:	f8 01       	movw	r30, r16
    54e0:	11 82       	std	Z+1, r1	; 0x01
    54e2:	10 82       	st	Z, r1
    54e4:	13 82       	std	Z+3, r1	; 0x03
    54e6:	12 82       	std	Z+2, r1	; 0x02
    54e8:	15 82       	std	Z+5, r1	; 0x05
    54ea:	14 82       	std	Z+4, r1	; 0x04
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	ae 01       	movw	r20, r28
    54f0:	4f 5f       	subi	r20, 0xFF	; 255
    54f2:	5f 4f       	sbci	r21, 0xFF	; 255
    54f4:	74 d6       	rcall	.+3304   	; 0x61de <ltoa>
    54f6:	be 01       	movw	r22, r28
    54f8:	6f 5f       	subi	r22, 0xFF	; 255
    54fa:	7f 4f       	sbci	r23, 0xFF	; 255
    54fc:	c8 01       	movw	r24, r16
    54fe:	a1 df       	rcall	.-190    	; 0x5442 <_ZN6StringaSEPKc>
    5500:	a2 96       	adiw	r28, 0x22	; 34
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	df 91       	pop	r29
    550e:	cf 91       	pop	r28
    5510:	1f 91       	pop	r17
    5512:	0f 91       	pop	r16
    5514:	08 95       	ret

00005516 <_ZN6StringC1Efh>:
    5516:	ef 92       	push	r14
    5518:	ff 92       	push	r15
    551a:	0f 93       	push	r16
    551c:	1f 93       	push	r17
    551e:	cf 93       	push	r28
    5520:	df 93       	push	r29
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
    5526:	a1 97       	sbiw	r28, 0x21	; 33
    5528:	0f b6       	in	r0, 0x3f	; 63
    552a:	f8 94       	cli
    552c:	de bf       	out	0x3e, r29	; 62
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	cd bf       	out	0x3d, r28	; 61
    5532:	7c 01       	movw	r14, r24
    5534:	cb 01       	movw	r24, r22
    5536:	ba 01       	movw	r22, r20
    5538:	f7 01       	movw	r30, r14
    553a:	11 82       	std	Z+1, r1	; 0x01
    553c:	10 82       	st	Z, r1
    553e:	13 82       	std	Z+3, r1	; 0x03
    5540:	12 82       	std	Z+2, r1	; 0x02
    5542:	15 82       	std	Z+5, r1	; 0x05
    5544:	14 82       	std	Z+4, r1	; 0x04
    5546:	42 e0       	ldi	r20, 0x02	; 2
    5548:	42 0f       	add	r20, r18
    554a:	8e 01       	movw	r16, r28
    554c:	0f 5f       	subi	r16, 0xFF	; 255
    554e:	1f 4f       	sbci	r17, 0xFF	; 255
    5550:	59 d2       	rcall	.+1202   	; 0x5a04 <dtostrf>
    5552:	bc 01       	movw	r22, r24
    5554:	c7 01       	movw	r24, r14
    5556:	75 df       	rcall	.-278    	; 0x5442 <_ZN6StringaSEPKc>
    5558:	a1 96       	adiw	r28, 0x21	; 33
    555a:	0f b6       	in	r0, 0x3f	; 63
    555c:	f8 94       	cli
    555e:	de bf       	out	0x3e, r29	; 62
    5560:	0f be       	out	0x3f, r0	; 63
    5562:	cd bf       	out	0x3d, r28	; 61
    5564:	df 91       	pop	r29
    5566:	cf 91       	pop	r28
    5568:	1f 91       	pop	r17
    556a:	0f 91       	pop	r16
    556c:	ff 90       	pop	r15
    556e:	ef 90       	pop	r14
    5570:	08 95       	ret

00005572 <_ZN6StringC1Edh>:
    5572:	ef 92       	push	r14
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	a1 97       	sbiw	r28, 0x21	; 33
    5584:	0f b6       	in	r0, 0x3f	; 63
    5586:	f8 94       	cli
    5588:	de bf       	out	0x3e, r29	; 62
    558a:	0f be       	out	0x3f, r0	; 63
    558c:	cd bf       	out	0x3d, r28	; 61
    558e:	7c 01       	movw	r14, r24
    5590:	cb 01       	movw	r24, r22
    5592:	ba 01       	movw	r22, r20
    5594:	f7 01       	movw	r30, r14
    5596:	11 82       	std	Z+1, r1	; 0x01
    5598:	10 82       	st	Z, r1
    559a:	13 82       	std	Z+3, r1	; 0x03
    559c:	12 82       	std	Z+2, r1	; 0x02
    559e:	15 82       	std	Z+5, r1	; 0x05
    55a0:	14 82       	std	Z+4, r1	; 0x04
    55a2:	42 e0       	ldi	r20, 0x02	; 2
    55a4:	42 0f       	add	r20, r18
    55a6:	8e 01       	movw	r16, r28
    55a8:	0f 5f       	subi	r16, 0xFF	; 255
    55aa:	1f 4f       	sbci	r17, 0xFF	; 255
    55ac:	2b d2       	rcall	.+1110   	; 0x5a04 <dtostrf>
    55ae:	bc 01       	movw	r22, r24
    55b0:	c7 01       	movw	r24, r14
    55b2:	47 df       	rcall	.-370    	; 0x5442 <_ZN6StringaSEPKc>
    55b4:	a1 96       	adiw	r28, 0x21	; 33
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	1f 91       	pop	r17
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	ef 90       	pop	r14
    55cc:	08 95       	ret

000055ce <_ZN6String6concatEPKcj>:
    55ce:	ef 92       	push	r14
    55d0:	ff 92       	push	r15
    55d2:	0f 93       	push	r16
    55d4:	1f 93       	push	r17
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	fc 01       	movw	r30, r24
    55dc:	24 81       	ldd	r18, Z+4	; 0x04
    55de:	35 81       	ldd	r19, Z+5	; 0x05
    55e0:	61 15       	cp	r22, r1
    55e2:	71 05       	cpc	r23, r1
    55e4:	11 f4       	brne	.+4      	; 0x55ea <_ZN6String6concatEPKcj+0x1c>
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	17 c0       	rjmp	.+46     	; 0x5618 <_ZN6String6concatEPKcj+0x4a>
    55ea:	41 15       	cp	r20, r1
    55ec:	51 05       	cpc	r21, r1
    55ee:	99 f0       	breq	.+38     	; 0x5616 <_ZN6String6concatEPKcj+0x48>
    55f0:	7b 01       	movw	r14, r22
    55f2:	ec 01       	movw	r28, r24
    55f4:	8a 01       	movw	r16, r20
    55f6:	02 0f       	add	r16, r18
    55f8:	13 1f       	adc	r17, r19
    55fa:	b8 01       	movw	r22, r16
    55fc:	b8 de       	rcall	.-656    	; 0x536e <_ZN6String7reserveEj>
    55fe:	88 23       	and	r24, r24
    5600:	91 f3       	breq	.-28     	; 0x55e6 <_ZN6String6concatEPKcj+0x18>
    5602:	28 81       	ld	r18, Y
    5604:	39 81       	ldd	r19, Y+1	; 0x01
    5606:	8c 81       	ldd	r24, Y+4	; 0x04
    5608:	9d 81       	ldd	r25, Y+5	; 0x05
    560a:	b7 01       	movw	r22, r14
    560c:	82 0f       	add	r24, r18
    560e:	93 1f       	adc	r25, r19
    5610:	bd d5       	rcall	.+2938   	; 0x618c <strcpy>
    5612:	1d 83       	std	Y+5, r17	; 0x05
    5614:	0c 83       	std	Y+4, r16	; 0x04
    5616:	81 e0       	ldi	r24, 0x01	; 1
    5618:	df 91       	pop	r29
    561a:	cf 91       	pop	r28
    561c:	1f 91       	pop	r17
    561e:	0f 91       	pop	r16
    5620:	ff 90       	pop	r15
    5622:	ef 90       	pop	r14
    5624:	08 95       	ret

00005626 <_ZN6String6concatEPKc>:
    5626:	61 15       	cp	r22, r1
    5628:	71 05       	cpc	r23, r1
    562a:	49 f0       	breq	.+18     	; 0x563e <_ZN6String6concatEPKc+0x18>
    562c:	fb 01       	movw	r30, r22
    562e:	01 90       	ld	r0, Z+
    5630:	00 20       	and	r0, r0
    5632:	e9 f7       	brne	.-6      	; 0x562e <_ZN6String6concatEPKc+0x8>
    5634:	31 97       	sbiw	r30, 0x01	; 1
    5636:	af 01       	movw	r20, r30
    5638:	46 1b       	sub	r20, r22
    563a:	57 0b       	sbc	r21, r23
    563c:	c8 cf       	rjmp	.-112    	; 0x55ce <_ZN6String6concatEPKcj>
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	08 95       	ret

00005642 <_ZN6String6concatEc>:
    5642:	cf 93       	push	r28
    5644:	df 93       	push	r29
    5646:	00 d0       	rcall	.+0      	; 0x5648 <_ZN6String6concatEc+0x6>
    5648:	cd b7       	in	r28, 0x3d	; 61
    564a:	de b7       	in	r29, 0x3e	; 62
    564c:	69 83       	std	Y+1, r22	; 0x01
    564e:	1a 82       	std	Y+2, r1	; 0x02
    5650:	41 e0       	ldi	r20, 0x01	; 1
    5652:	50 e0       	ldi	r21, 0x00	; 0
    5654:	be 01       	movw	r22, r28
    5656:	6f 5f       	subi	r22, 0xFF	; 255
    5658:	7f 4f       	sbci	r23, 0xFF	; 255
    565a:	b9 df       	rcall	.-142    	; 0x55ce <_ZN6String6concatEPKcj>
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	08 95       	ret

00005666 <_ZplRK15StringSumHelperRK6String>:
    5666:	cf 93       	push	r28
    5668:	df 93       	push	r29
    566a:	ec 01       	movw	r28, r24
    566c:	fb 01       	movw	r30, r22
    566e:	44 81       	ldd	r20, Z+4	; 0x04
    5670:	55 81       	ldd	r21, Z+5	; 0x05
    5672:	60 81       	ld	r22, Z
    5674:	71 81       	ldd	r23, Z+1	; 0x01
    5676:	ab df       	rcall	.-170    	; 0x55ce <_ZN6String6concatEPKcj>
    5678:	81 11       	cpse	r24, r1
    567a:	02 c0       	rjmp	.+4      	; 0x5680 <_ZplRK15StringSumHelperRK6String+0x1a>
    567c:	ce 01       	movw	r24, r28
    567e:	4d de       	rcall	.-870    	; 0x531a <_ZN6String10invalidateEv>
    5680:	ce 01       	movw	r24, r28
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	08 95       	ret

00005688 <_ZplRK15StringSumHelperPKc>:
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	ec 01       	movw	r28, r24
    568e:	61 15       	cp	r22, r1
    5690:	71 05       	cpc	r23, r1
    5692:	59 f0       	breq	.+22     	; 0x56aa <_ZplRK15StringSumHelperPKc+0x22>
    5694:	fb 01       	movw	r30, r22
    5696:	01 90       	ld	r0, Z+
    5698:	00 20       	and	r0, r0
    569a:	e9 f7       	brne	.-6      	; 0x5696 <_ZplRK15StringSumHelperPKc+0xe>
    569c:	31 97       	sbiw	r30, 0x01	; 1
    569e:	af 01       	movw	r20, r30
    56a0:	46 1b       	sub	r20, r22
    56a2:	57 0b       	sbc	r21, r23
    56a4:	94 df       	rcall	.-216    	; 0x55ce <_ZN6String6concatEPKcj>
    56a6:	81 11       	cpse	r24, r1
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <_ZplRK15StringSumHelperPKc+0x26>
    56aa:	ce 01       	movw	r24, r28
    56ac:	36 de       	rcall	.-916    	; 0x531a <_ZN6String10invalidateEv>
    56ae:	ce 01       	movw	r24, r28
    56b0:	df 91       	pop	r29
    56b2:	cf 91       	pop	r28
    56b4:	08 95       	ret

000056b6 <_ZNK6String6equalsEPKc>:
    56b6:	fc 01       	movw	r30, r24
    56b8:	24 81       	ldd	r18, Z+4	; 0x04
    56ba:	35 81       	ldd	r19, Z+5	; 0x05
    56bc:	23 2b       	or	r18, r19
    56be:	31 f4       	brne	.+12     	; 0x56cc <_ZNK6String6equalsEPKc+0x16>
    56c0:	21 e0       	ldi	r18, 0x01	; 1
    56c2:	61 15       	cp	r22, r1
    56c4:	71 05       	cpc	r23, r1
    56c6:	99 f0       	breq	.+38     	; 0x56ee <_ZNK6String6equalsEPKc+0x38>
    56c8:	fb 01       	movw	r30, r22
    56ca:	08 c0       	rjmp	.+16     	; 0x56dc <_ZNK6String6equalsEPKc+0x26>
    56cc:	fc 01       	movw	r30, r24
    56ce:	80 81       	ld	r24, Z
    56d0:	91 81       	ldd	r25, Z+1	; 0x01
    56d2:	61 15       	cp	r22, r1
    56d4:	71 05       	cpc	r23, r1
    56d6:	31 f4       	brne	.+12     	; 0x56e4 <_ZNK6String6equalsEPKc+0x2e>
    56d8:	21 e0       	ldi	r18, 0x01	; 1
    56da:	fc 01       	movw	r30, r24
    56dc:	80 81       	ld	r24, Z
    56de:	88 23       	and	r24, r24
    56e0:	31 f0       	breq	.+12     	; 0x56ee <_ZNK6String6equalsEPKc+0x38>
    56e2:	04 c0       	rjmp	.+8      	; 0x56ec <_ZNK6String6equalsEPKc+0x36>
    56e4:	4a d5       	rcall	.+2708   	; 0x617a <strcmp>
    56e6:	21 e0       	ldi	r18, 0x01	; 1
    56e8:	89 2b       	or	r24, r25
    56ea:	09 f0       	breq	.+2      	; 0x56ee <_ZNK6String6equalsEPKc+0x38>
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	82 2f       	mov	r24, r18
    56f0:	08 95       	ret

000056f2 <_ZNK6String10startsWithERKS_j>:
    56f2:	db 01       	movw	r26, r22
    56f4:	14 96       	adiw	r26, 0x04	; 4
    56f6:	ed 91       	ld	r30, X+
    56f8:	fc 91       	ld	r31, X
    56fa:	15 97       	sbiw	r26, 0x05	; 5
    56fc:	dc 01       	movw	r26, r24
    56fe:	14 96       	adiw	r26, 0x04	; 4
    5700:	2d 91       	ld	r18, X+
    5702:	3c 91       	ld	r19, X
    5704:	15 97       	sbiw	r26, 0x05	; 5
    5706:	2e 1b       	sub	r18, r30
    5708:	3f 0b       	sbc	r19, r31
    570a:	24 17       	cp	r18, r20
    570c:	35 07       	cpc	r19, r21
    570e:	98 f0       	brcs	.+38     	; 0x5736 <_ZNK6String10startsWithERKS_j+0x44>
    5710:	2d 91       	ld	r18, X+
    5712:	3c 91       	ld	r19, X
    5714:	21 15       	cp	r18, r1
    5716:	31 05       	cpc	r19, r1
    5718:	71 f0       	breq	.+28     	; 0x5736 <_ZNK6String10startsWithERKS_j+0x44>
    571a:	db 01       	movw	r26, r22
    571c:	6d 91       	ld	r22, X+
    571e:	7c 91       	ld	r23, X
    5720:	61 15       	cp	r22, r1
    5722:	71 05       	cpc	r23, r1
    5724:	41 f0       	breq	.+16     	; 0x5736 <_ZNK6String10startsWithERKS_j+0x44>
    5726:	ca 01       	movw	r24, r20
    5728:	af 01       	movw	r20, r30
    572a:	82 0f       	add	r24, r18
    572c:	93 1f       	adc	r25, r19
    572e:	35 d5       	rcall	.+2666   	; 0x619a <strncmp>
    5730:	21 e0       	ldi	r18, 0x01	; 1
    5732:	89 2b       	or	r24, r25
    5734:	09 f0       	breq	.+2      	; 0x5738 <_ZNK6String10startsWithERKS_j+0x46>
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	82 2f       	mov	r24, r18
    573a:	08 95       	ret

0000573c <_ZNK6String10startsWithERKS_>:
    573c:	fc 01       	movw	r30, r24
    573e:	44 81       	ldd	r20, Z+4	; 0x04
    5740:	55 81       	ldd	r21, Z+5	; 0x05
    5742:	fb 01       	movw	r30, r22
    5744:	24 81       	ldd	r18, Z+4	; 0x04
    5746:	35 81       	ldd	r19, Z+5	; 0x05
    5748:	42 17       	cp	r20, r18
    574a:	53 07       	cpc	r21, r19
    574c:	18 f0       	brcs	.+6      	; 0x5754 <_ZNK6String10startsWithERKS_+0x18>
    574e:	40 e0       	ldi	r20, 0x00	; 0
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	cf cf       	rjmp	.-98     	; 0x56f2 <_ZNK6String10startsWithERKS_j>
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	08 95       	ret

00005758 <_ZNK6StringixEj>:
    5758:	fc 01       	movw	r30, r24
    575a:	24 81       	ldd	r18, Z+4	; 0x04
    575c:	35 81       	ldd	r19, Z+5	; 0x05
    575e:	62 17       	cp	r22, r18
    5760:	73 07       	cpc	r23, r19
    5762:	48 f4       	brcc	.+18     	; 0x5776 <_ZNK6StringixEj+0x1e>
    5764:	80 81       	ld	r24, Z
    5766:	91 81       	ldd	r25, Z+1	; 0x01
    5768:	00 97       	sbiw	r24, 0x00	; 0
    576a:	29 f0       	breq	.+10     	; 0x5776 <_ZNK6StringixEj+0x1e>
    576c:	fc 01       	movw	r30, r24
    576e:	e6 0f       	add	r30, r22
    5770:	f7 1f       	adc	r31, r23
    5772:	80 81       	ld	r24, Z
    5774:	08 95       	ret
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	08 95       	ret

0000577a <_ZNK6String6charAtEj>:
    577a:	ee cf       	rjmp	.-36     	; 0x5758 <_ZNK6StringixEj>

0000577c <_ZNK6String9substringEjj>:
    577c:	bf 92       	push	r11
    577e:	cf 92       	push	r12
    5780:	df 92       	push	r13
    5782:	ef 92       	push	r14
    5784:	ff 92       	push	r15
    5786:	0f 93       	push	r16
    5788:	1f 93       	push	r17
    578a:	cf 93       	push	r28
    578c:	df 93       	push	r29
    578e:	7c 01       	movw	r14, r24
    5790:	6b 01       	movw	r12, r22
    5792:	8a 01       	movw	r16, r20
    5794:	e9 01       	movw	r28, r18
    5796:	24 17       	cp	r18, r20
    5798:	35 07       	cpc	r19, r21
    579a:	20 f4       	brcc	.+8      	; 0x57a4 <_ZNK6String9substringEjj+0x28>
    579c:	81 2f       	mov	r24, r17
    579e:	89 01       	movw	r16, r18
    57a0:	c4 2f       	mov	r28, r20
    57a2:	d8 2f       	mov	r29, r24
    57a4:	61 ec       	ldi	r22, 0xC1	; 193
    57a6:	71 e0       	ldi	r23, 0x01	; 1
    57a8:	c7 01       	movw	r24, r14
    57aa:	1a de       	rcall	.-972    	; 0x53e0 <_ZN6StringC1EPKc>
    57ac:	d6 01       	movw	r26, r12
    57ae:	14 96       	adiw	r26, 0x04	; 4
    57b0:	8d 91       	ld	r24, X+
    57b2:	9c 91       	ld	r25, X
    57b4:	15 97       	sbiw	r26, 0x05	; 5
    57b6:	08 17       	cp	r16, r24
    57b8:	19 07       	cpc	r17, r25
    57ba:	c8 f4       	brcc	.+50     	; 0x57ee <_ZNK6String9substringEjj+0x72>
    57bc:	8c 17       	cp	r24, r28
    57be:	9d 07       	cpc	r25, r29
    57c0:	08 f4       	brcc	.+2      	; 0x57c4 <_ZNK6String9substringEjj+0x48>
    57c2:	ec 01       	movw	r28, r24
    57c4:	d6 01       	movw	r26, r12
    57c6:	ed 91       	ld	r30, X+
    57c8:	fc 91       	ld	r31, X
    57ca:	11 97       	sbiw	r26, 0x01	; 1
    57cc:	ec 0f       	add	r30, r28
    57ce:	fd 1f       	adc	r31, r29
    57d0:	b0 80       	ld	r11, Z
    57d2:	10 82       	st	Z, r1
    57d4:	4d 91       	ld	r20, X+
    57d6:	5c 91       	ld	r21, X
    57d8:	ba 01       	movw	r22, r20
    57da:	60 0f       	add	r22, r16
    57dc:	71 1f       	adc	r23, r17
    57de:	c7 01       	movw	r24, r14
    57e0:	30 de       	rcall	.-928    	; 0x5442 <_ZN6StringaSEPKc>
    57e2:	d6 01       	movw	r26, r12
    57e4:	ed 91       	ld	r30, X+
    57e6:	fc 91       	ld	r31, X
    57e8:	ec 0f       	add	r30, r28
    57ea:	fd 1f       	adc	r31, r29
    57ec:	b0 82       	st	Z, r11
    57ee:	c7 01       	movw	r24, r14
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	df 90       	pop	r13
    57fe:	cf 90       	pop	r12
    5800:	bf 90       	pop	r11
    5802:	08 95       	ret

00005804 <_ZN6String4trimEv>:

void String::trim(void)
{
    5804:	af 92       	push	r10
    5806:	bf 92       	push	r11
    5808:	cf 92       	push	r12
    580a:	df 92       	push	r13
    580c:	ef 92       	push	r14
    580e:	ff 92       	push	r15
    5810:	0f 93       	push	r16
    5812:	1f 93       	push	r17
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
	if (!buffer || len == 0) return;
    5818:	dc 01       	movw	r26, r24
    581a:	cd 90       	ld	r12, X+
    581c:	dc 90       	ld	r13, X
    581e:	11 97       	sbiw	r26, 0x01	; 1
    5820:	c1 14       	cp	r12, r1
    5822:	d1 04       	cpc	r13, r1
    5824:	d9 f1       	breq	.+118    	; 0x589c <_ZN6String4trimEv+0x98>
    5826:	14 96       	adiw	r26, 0x04	; 4
    5828:	cd 91       	ld	r28, X+
    582a:	dc 91       	ld	r29, X
    582c:	15 97       	sbiw	r26, 0x05	; 5
    582e:	20 97       	sbiw	r28, 0x00	; 0
    5830:	a9 f1       	breq	.+106    	; 0x589c <_ZN6String4trimEv+0x98>
    5832:	8c 01       	movw	r16, r24
    5834:	56 01       	movw	r10, r12
    5836:	75 01       	movw	r14, r10
    5838:	bf ef       	ldi	r27, 0xFF	; 255
    583a:	ab 1a       	sub	r10, r27
    583c:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    583e:	f7 01       	movw	r30, r14
    5840:	80 81       	ld	r24, Z
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	71 d4       	rcall	.+2274   	; 0x6128 <isspace>
    5846:	89 2b       	or	r24, r25
    5848:	b1 f7       	brne	.-20     	; 0x5836 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    584a:	21 97       	sbiw	r28, 0x01	; 1
    584c:	cc 0d       	add	r28, r12
    584e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    5850:	88 81       	ld	r24, Y
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	69 d4       	rcall	.+2258   	; 0x6128 <isspace>
    5856:	89 2b       	or	r24, r25
    5858:	89 f4       	brne	.+34     	; 0x587c <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    585a:	ae 01       	movw	r20, r28
    585c:	4f 5f       	subi	r20, 0xFF	; 255
    585e:	5f 4f       	sbci	r21, 0xFF	; 255
    5860:	4e 19       	sub	r20, r14
    5862:	5f 09       	sbc	r21, r15
    5864:	d8 01       	movw	r26, r16
    5866:	15 96       	adiw	r26, 0x05	; 5
    5868:	5c 93       	st	X, r21
    586a:	4e 93       	st	-X, r20
    586c:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    586e:	ce 14       	cp	r12, r14
    5870:	df 04       	cpc	r13, r15
    5872:	48 f4       	brcc	.+18     	; 0x5886 <_ZN6String4trimEv+0x82>
    5874:	b7 01       	movw	r22, r14
    5876:	c6 01       	movw	r24, r12
    5878:	77 d4       	rcall	.+2286   	; 0x6168 <memcpy>
    587a:	05 c0       	rjmp	.+10     	; 0x5886 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    587c:	ce 15       	cp	r28, r14
    587e:	df 05       	cpc	r29, r15
    5880:	60 f3       	brcs	.-40     	; 0x585a <_ZN6String4trimEv+0x56>
    5882:	21 97       	sbiw	r28, 0x01	; 1
    5884:	e5 cf       	rjmp	.-54     	; 0x5850 <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    5886:	d8 01       	movw	r26, r16
    5888:	ed 91       	ld	r30, X+
    588a:	fc 91       	ld	r31, X
    588c:	11 97       	sbiw	r26, 0x01	; 1
    588e:	14 96       	adiw	r26, 0x04	; 4
    5890:	8d 91       	ld	r24, X+
    5892:	9c 91       	ld	r25, X
    5894:	15 97       	sbiw	r26, 0x05	; 5
    5896:	e8 0f       	add	r30, r24
    5898:	f9 1f       	adc	r31, r25
    589a:	10 82       	st	Z, r1
}
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	ff 90       	pop	r15
    58a6:	ef 90       	pop	r14
    58a8:	df 90       	pop	r13
    58aa:	cf 90       	pop	r12
    58ac:	bf 90       	pop	r11
    58ae:	af 90       	pop	r10
    58b0:	08 95       	ret

000058b2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    58b2:	fc 01       	movw	r30, r24
    58b4:	80 81       	ld	r24, Z
    58b6:	91 81       	ldd	r25, Z+1	; 0x01
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	09 f0       	breq	.+2      	; 0x58be <_ZNK6String5toIntEv+0xc>
    58bc:	0f c4       	rjmp	.+2078   	; 0x60dc <atol>
	return 0;
}
    58be:	60 e0       	ldi	r22, 0x00	; 0
    58c0:	70 e0       	ldi	r23, 0x00	; 0
    58c2:	cb 01       	movw	r24, r22
    58c4:	08 95       	ret

000058c6 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    58c6:	fc 01       	movw	r30, r24
    58c8:	80 81       	ld	r24, Z
    58ca:	91 81       	ldd	r25, Z+1	; 0x01
    58cc:	00 97       	sbiw	r24, 0x00	; 0
    58ce:	09 f0       	breq	.+2      	; 0x58d2 <_ZNK6String7toFloatEv+0xc>
    58d0:	02 c4       	rjmp	.+2052   	; 0x60d6 <atof>
	return 0;
}
    58d2:	60 e0       	ldi	r22, 0x00	; 0
    58d4:	70 e0       	ldi	r23, 0x00	; 0
    58d6:	cb 01       	movw	r24, r22
    58d8:	08 95       	ret

000058da <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    58da:	08 95       	ret

000058dc <__udivmodsi4>:
    58dc:	a1 e2       	ldi	r26, 0x21	; 33
    58de:	1a 2e       	mov	r1, r26
    58e0:	aa 1b       	sub	r26, r26
    58e2:	bb 1b       	sub	r27, r27
    58e4:	fd 01       	movw	r30, r26
    58e6:	0d c0       	rjmp	.+26     	; 0x5902 <__udivmodsi4_ep>

000058e8 <__udivmodsi4_loop>:
    58e8:	aa 1f       	adc	r26, r26
    58ea:	bb 1f       	adc	r27, r27
    58ec:	ee 1f       	adc	r30, r30
    58ee:	ff 1f       	adc	r31, r31
    58f0:	a2 17       	cp	r26, r18
    58f2:	b3 07       	cpc	r27, r19
    58f4:	e4 07       	cpc	r30, r20
    58f6:	f5 07       	cpc	r31, r21
    58f8:	20 f0       	brcs	.+8      	; 0x5902 <__udivmodsi4_ep>
    58fa:	a2 1b       	sub	r26, r18
    58fc:	b3 0b       	sbc	r27, r19
    58fe:	e4 0b       	sbc	r30, r20
    5900:	f5 0b       	sbc	r31, r21

00005902 <__udivmodsi4_ep>:
    5902:	66 1f       	adc	r22, r22
    5904:	77 1f       	adc	r23, r23
    5906:	88 1f       	adc	r24, r24
    5908:	99 1f       	adc	r25, r25
    590a:	1a 94       	dec	r1
    590c:	69 f7       	brne	.-38     	; 0x58e8 <__udivmodsi4_loop>
    590e:	60 95       	com	r22
    5910:	70 95       	com	r23
    5912:	80 95       	com	r24
    5914:	90 95       	com	r25
    5916:	9b 01       	movw	r18, r22
    5918:	ac 01       	movw	r20, r24
    591a:	bd 01       	movw	r22, r26
    591c:	cf 01       	movw	r24, r30
    591e:	08 95       	ret

00005920 <__divmodsi4>:
    5920:	05 2e       	mov	r0, r21
    5922:	97 fb       	bst	r25, 7
    5924:	16 f4       	brtc	.+4      	; 0x592a <__divmodsi4+0xa>
    5926:	00 94       	com	r0
    5928:	0f d0       	rcall	.+30     	; 0x5948 <__negsi2>
    592a:	57 fd       	sbrc	r21, 7
    592c:	05 d0       	rcall	.+10     	; 0x5938 <__divmodsi4_neg2>
    592e:	d6 df       	rcall	.-84     	; 0x58dc <__udivmodsi4>
    5930:	07 fc       	sbrc	r0, 7
    5932:	02 d0       	rcall	.+4      	; 0x5938 <__divmodsi4_neg2>
    5934:	46 f4       	brtc	.+16     	; 0x5946 <__divmodsi4_exit>
    5936:	08 c0       	rjmp	.+16     	; 0x5948 <__negsi2>

00005938 <__divmodsi4_neg2>:
    5938:	50 95       	com	r21
    593a:	40 95       	com	r20
    593c:	30 95       	com	r19
    593e:	21 95       	neg	r18
    5940:	3f 4f       	sbci	r19, 0xFF	; 255
    5942:	4f 4f       	sbci	r20, 0xFF	; 255
    5944:	5f 4f       	sbci	r21, 0xFF	; 255

00005946 <__divmodsi4_exit>:
    5946:	08 95       	ret

00005948 <__negsi2>:
    5948:	90 95       	com	r25
    594a:	80 95       	com	r24
    594c:	70 95       	com	r23
    594e:	61 95       	neg	r22
    5950:	7f 4f       	sbci	r23, 0xFF	; 255
    5952:	8f 4f       	sbci	r24, 0xFF	; 255
    5954:	9f 4f       	sbci	r25, 0xFF	; 255
    5956:	08 95       	ret

00005958 <__tablejump2__>:
    5958:	ee 0f       	add	r30, r30
    595a:	ff 1f       	adc	r31, r31
    595c:	05 90       	lpm	r0, Z+
    595e:	f4 91       	lpm	r31, Z
    5960:	e0 2d       	mov	r30, r0
    5962:	09 94       	ijmp

00005964 <__muluhisi3>:
    5964:	40 d0       	rcall	.+128    	; 0x59e6 <__umulhisi3>
    5966:	a5 9f       	mul	r26, r21
    5968:	90 0d       	add	r25, r0
    596a:	b4 9f       	mul	r27, r20
    596c:	90 0d       	add	r25, r0
    596e:	a4 9f       	mul	r26, r20
    5970:	80 0d       	add	r24, r0
    5972:	91 1d       	adc	r25, r1
    5974:	11 24       	eor	r1, r1
    5976:	08 95       	ret

00005978 <__prologue_saves__>:
    5978:	2f 92       	push	r2
    597a:	3f 92       	push	r3
    597c:	4f 92       	push	r4
    597e:	5f 92       	push	r5
    5980:	6f 92       	push	r6
    5982:	7f 92       	push	r7
    5984:	8f 92       	push	r8
    5986:	9f 92       	push	r9
    5988:	af 92       	push	r10
    598a:	bf 92       	push	r11
    598c:	cf 92       	push	r12
    598e:	df 92       	push	r13
    5990:	ef 92       	push	r14
    5992:	ff 92       	push	r15
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	cf 93       	push	r28
    599a:	df 93       	push	r29
    599c:	cd b7       	in	r28, 0x3d	; 61
    599e:	de b7       	in	r29, 0x3e	; 62
    59a0:	ca 1b       	sub	r28, r26
    59a2:	db 0b       	sbc	r29, r27
    59a4:	0f b6       	in	r0, 0x3f	; 63
    59a6:	f8 94       	cli
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	cd bf       	out	0x3d, r28	; 61
    59ae:	09 94       	ijmp

000059b0 <__epilogue_restores__>:
    59b0:	2a 88       	ldd	r2, Y+18	; 0x12
    59b2:	39 88       	ldd	r3, Y+17	; 0x11
    59b4:	48 88       	ldd	r4, Y+16	; 0x10
    59b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    59b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    59ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    59bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    59be:	9b 84       	ldd	r9, Y+11	; 0x0b
    59c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    59c2:	b9 84       	ldd	r11, Y+9	; 0x09
    59c4:	c8 84       	ldd	r12, Y+8	; 0x08
    59c6:	df 80       	ldd	r13, Y+7	; 0x07
    59c8:	ee 80       	ldd	r14, Y+6	; 0x06
    59ca:	fd 80       	ldd	r15, Y+5	; 0x05
    59cc:	0c 81       	ldd	r16, Y+4	; 0x04
    59ce:	1b 81       	ldd	r17, Y+3	; 0x03
    59d0:	aa 81       	ldd	r26, Y+2	; 0x02
    59d2:	b9 81       	ldd	r27, Y+1	; 0x01
    59d4:	ce 0f       	add	r28, r30
    59d6:	d1 1d       	adc	r29, r1
    59d8:	0f b6       	in	r0, 0x3f	; 63
    59da:	f8 94       	cli
    59dc:	de bf       	out	0x3e, r29	; 62
    59de:	0f be       	out	0x3f, r0	; 63
    59e0:	cd bf       	out	0x3d, r28	; 61
    59e2:	ed 01       	movw	r28, r26
    59e4:	08 95       	ret

000059e6 <__umulhisi3>:
    59e6:	a2 9f       	mul	r26, r18
    59e8:	b0 01       	movw	r22, r0
    59ea:	b3 9f       	mul	r27, r19
    59ec:	c0 01       	movw	r24, r0
    59ee:	a3 9f       	mul	r26, r19
    59f0:	70 0d       	add	r23, r0
    59f2:	81 1d       	adc	r24, r1
    59f4:	11 24       	eor	r1, r1
    59f6:	91 1d       	adc	r25, r1
    59f8:	b2 9f       	mul	r27, r18
    59fa:	70 0d       	add	r23, r0
    59fc:	81 1d       	adc	r24, r1
    59fe:	11 24       	eor	r1, r1
    5a00:	91 1d       	adc	r25, r1
    5a02:	08 95       	ret

00005a04 <dtostrf>:
    5a04:	ef 92       	push	r14
    5a06:	0f 93       	push	r16
    5a08:	1f 93       	push	r17
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	e8 01       	movw	r28, r16
    5a10:	47 fd       	sbrc	r20, 7
    5a12:	02 c0       	rjmp	.+4      	; 0x5a18 <dtostrf+0x14>
    5a14:	34 e0       	ldi	r19, 0x04	; 4
    5a16:	01 c0       	rjmp	.+2      	; 0x5a1a <dtostrf+0x16>
    5a18:	34 e1       	ldi	r19, 0x14	; 20
    5a1a:	e4 2f       	mov	r30, r20
    5a1c:	44 0f       	add	r20, r20
    5a1e:	ff 0b       	sbc	r31, r31
    5a20:	f7 ff       	sbrs	r31, 7
    5a22:	03 c0       	rjmp	.+6      	; 0x5a2a <dtostrf+0x26>
    5a24:	f1 95       	neg	r31
    5a26:	e1 95       	neg	r30
    5a28:	f1 09       	sbc	r31, r1
    5a2a:	e3 2e       	mov	r14, r19
    5a2c:	02 2f       	mov	r16, r18
    5a2e:	2e 2f       	mov	r18, r30
    5a30:	ae 01       	movw	r20, r28
    5a32:	3c d4       	rcall	.+2168   	; 0x62ac <dtoa_prf>
    5a34:	ce 01       	movw	r24, r28
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	1f 91       	pop	r17
    5a3c:	0f 91       	pop	r16
    5a3e:	ef 90       	pop	r14
    5a40:	08 95       	ret

00005a42 <malloc>:
    5a42:	cf 93       	push	r28
    5a44:	df 93       	push	r29
    5a46:	82 30       	cpi	r24, 0x02	; 2
    5a48:	91 05       	cpc	r25, r1
    5a4a:	10 f4       	brcc	.+4      	; 0x5a50 <malloc+0xe>
    5a4c:	82 e0       	ldi	r24, 0x02	; 2
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <__flp>
    5a54:	f0 91 69 05 	lds	r31, 0x0569	; 0x800569 <__flp+0x1>
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	c0 e0       	ldi	r28, 0x00	; 0
    5a5e:	d0 e0       	ldi	r29, 0x00	; 0
    5a60:	30 97       	sbiw	r30, 0x00	; 0
    5a62:	11 f1       	breq	.+68     	; 0x5aa8 <malloc+0x66>
    5a64:	40 81       	ld	r20, Z
    5a66:	51 81       	ldd	r21, Z+1	; 0x01
    5a68:	48 17       	cp	r20, r24
    5a6a:	59 07       	cpc	r21, r25
    5a6c:	c0 f0       	brcs	.+48     	; 0x5a9e <malloc+0x5c>
    5a6e:	48 17       	cp	r20, r24
    5a70:	59 07       	cpc	r21, r25
    5a72:	61 f4       	brne	.+24     	; 0x5a8c <malloc+0x4a>
    5a74:	82 81       	ldd	r24, Z+2	; 0x02
    5a76:	93 81       	ldd	r25, Z+3	; 0x03
    5a78:	20 97       	sbiw	r28, 0x00	; 0
    5a7a:	19 f0       	breq	.+6      	; 0x5a82 <malloc+0x40>
    5a7c:	9b 83       	std	Y+3, r25	; 0x03
    5a7e:	8a 83       	std	Y+2, r24	; 0x02
    5a80:	2b c0       	rjmp	.+86     	; 0x5ad8 <malloc+0x96>
    5a82:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <__flp+0x1>
    5a86:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <__flp>
    5a8a:	26 c0       	rjmp	.+76     	; 0x5ad8 <malloc+0x96>
    5a8c:	21 15       	cp	r18, r1
    5a8e:	31 05       	cpc	r19, r1
    5a90:	19 f0       	breq	.+6      	; 0x5a98 <malloc+0x56>
    5a92:	42 17       	cp	r20, r18
    5a94:	53 07       	cpc	r21, r19
    5a96:	18 f4       	brcc	.+6      	; 0x5a9e <malloc+0x5c>
    5a98:	9a 01       	movw	r18, r20
    5a9a:	be 01       	movw	r22, r28
    5a9c:	df 01       	movw	r26, r30
    5a9e:	ef 01       	movw	r28, r30
    5aa0:	02 80       	ldd	r0, Z+2	; 0x02
    5aa2:	f3 81       	ldd	r31, Z+3	; 0x03
    5aa4:	e0 2d       	mov	r30, r0
    5aa6:	dc cf       	rjmp	.-72     	; 0x5a60 <malloc+0x1e>
    5aa8:	21 15       	cp	r18, r1
    5aaa:	31 05       	cpc	r19, r1
    5aac:	09 f1       	breq	.+66     	; 0x5af0 <malloc+0xae>
    5aae:	28 1b       	sub	r18, r24
    5ab0:	39 0b       	sbc	r19, r25
    5ab2:	24 30       	cpi	r18, 0x04	; 4
    5ab4:	31 05       	cpc	r19, r1
    5ab6:	90 f4       	brcc	.+36     	; 0x5adc <malloc+0x9a>
    5ab8:	12 96       	adiw	r26, 0x02	; 2
    5aba:	8d 91       	ld	r24, X+
    5abc:	9c 91       	ld	r25, X
    5abe:	13 97       	sbiw	r26, 0x03	; 3
    5ac0:	61 15       	cp	r22, r1
    5ac2:	71 05       	cpc	r23, r1
    5ac4:	21 f0       	breq	.+8      	; 0x5ace <malloc+0x8c>
    5ac6:	fb 01       	movw	r30, r22
    5ac8:	93 83       	std	Z+3, r25	; 0x03
    5aca:	82 83       	std	Z+2, r24	; 0x02
    5acc:	04 c0       	rjmp	.+8      	; 0x5ad6 <malloc+0x94>
    5ace:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <__flp+0x1>
    5ad2:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <__flp>
    5ad6:	fd 01       	movw	r30, r26
    5ad8:	32 96       	adiw	r30, 0x02	; 2
    5ada:	44 c0       	rjmp	.+136    	; 0x5b64 <malloc+0x122>
    5adc:	fd 01       	movw	r30, r26
    5ade:	e2 0f       	add	r30, r18
    5ae0:	f3 1f       	adc	r31, r19
    5ae2:	81 93       	st	Z+, r24
    5ae4:	91 93       	st	Z+, r25
    5ae6:	22 50       	subi	r18, 0x02	; 2
    5ae8:	31 09       	sbc	r19, r1
    5aea:	2d 93       	st	X+, r18
    5aec:	3c 93       	st	X, r19
    5aee:	3a c0       	rjmp	.+116    	; 0x5b64 <malloc+0x122>
    5af0:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    5af4:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    5af8:	23 2b       	or	r18, r19
    5afa:	41 f4       	brne	.+16     	; 0x5b0c <malloc+0xca>
    5afc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5b00:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5b04:	30 93 67 05 	sts	0x0567, r19	; 0x800567 <__brkval+0x1>
    5b08:	20 93 66 05 	sts	0x0566, r18	; 0x800566 <__brkval>
    5b0c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5b10:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5b14:	21 15       	cp	r18, r1
    5b16:	31 05       	cpc	r19, r1
    5b18:	41 f4       	brne	.+16     	; 0x5b2a <malloc+0xe8>
    5b1a:	2d b7       	in	r18, 0x3d	; 61
    5b1c:	3e b7       	in	r19, 0x3e	; 62
    5b1e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5b22:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5b26:	24 1b       	sub	r18, r20
    5b28:	35 0b       	sbc	r19, r21
    5b2a:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <__brkval>
    5b2e:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <__brkval+0x1>
    5b32:	e2 17       	cp	r30, r18
    5b34:	f3 07       	cpc	r31, r19
    5b36:	a0 f4       	brcc	.+40     	; 0x5b60 <malloc+0x11e>
    5b38:	2e 1b       	sub	r18, r30
    5b3a:	3f 0b       	sbc	r19, r31
    5b3c:	28 17       	cp	r18, r24
    5b3e:	39 07       	cpc	r19, r25
    5b40:	78 f0       	brcs	.+30     	; 0x5b60 <malloc+0x11e>
    5b42:	ac 01       	movw	r20, r24
    5b44:	4e 5f       	subi	r20, 0xFE	; 254
    5b46:	5f 4f       	sbci	r21, 0xFF	; 255
    5b48:	24 17       	cp	r18, r20
    5b4a:	35 07       	cpc	r19, r21
    5b4c:	48 f0       	brcs	.+18     	; 0x5b60 <malloc+0x11e>
    5b4e:	4e 0f       	add	r20, r30
    5b50:	5f 1f       	adc	r21, r31
    5b52:	50 93 67 05 	sts	0x0567, r21	; 0x800567 <__brkval+0x1>
    5b56:	40 93 66 05 	sts	0x0566, r20	; 0x800566 <__brkval>
    5b5a:	81 93       	st	Z+, r24
    5b5c:	91 93       	st	Z+, r25
    5b5e:	02 c0       	rjmp	.+4      	; 0x5b64 <malloc+0x122>
    5b60:	e0 e0       	ldi	r30, 0x00	; 0
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	cf 01       	movw	r24, r30
    5b66:	df 91       	pop	r29
    5b68:	cf 91       	pop	r28
    5b6a:	08 95       	ret

00005b6c <free>:
    5b6c:	0f 93       	push	r16
    5b6e:	1f 93       	push	r17
    5b70:	cf 93       	push	r28
    5b72:	df 93       	push	r29
    5b74:	00 97       	sbiw	r24, 0x00	; 0
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <free+0xe>
    5b78:	8c c0       	rjmp	.+280    	; 0x5c92 <free+0x126>
    5b7a:	fc 01       	movw	r30, r24
    5b7c:	32 97       	sbiw	r30, 0x02	; 2
    5b7e:	13 82       	std	Z+3, r1	; 0x03
    5b80:	12 82       	std	Z+2, r1	; 0x02
    5b82:	00 91 68 05 	lds	r16, 0x0568	; 0x800568 <__flp>
    5b86:	10 91 69 05 	lds	r17, 0x0569	; 0x800569 <__flp+0x1>
    5b8a:	01 15       	cp	r16, r1
    5b8c:	11 05       	cpc	r17, r1
    5b8e:	81 f4       	brne	.+32     	; 0x5bb0 <free+0x44>
    5b90:	20 81       	ld	r18, Z
    5b92:	31 81       	ldd	r19, Z+1	; 0x01
    5b94:	82 0f       	add	r24, r18
    5b96:	93 1f       	adc	r25, r19
    5b98:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    5b9c:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    5ba0:	28 17       	cp	r18, r24
    5ba2:	39 07       	cpc	r19, r25
    5ba4:	79 f5       	brne	.+94     	; 0x5c04 <free+0x98>
    5ba6:	f0 93 67 05 	sts	0x0567, r31	; 0x800567 <__brkval+0x1>
    5baa:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <__brkval>
    5bae:	71 c0       	rjmp	.+226    	; 0x5c92 <free+0x126>
    5bb0:	d8 01       	movw	r26, r16
    5bb2:	40 e0       	ldi	r20, 0x00	; 0
    5bb4:	50 e0       	ldi	r21, 0x00	; 0
    5bb6:	ae 17       	cp	r26, r30
    5bb8:	bf 07       	cpc	r27, r31
    5bba:	50 f4       	brcc	.+20     	; 0x5bd0 <free+0x64>
    5bbc:	12 96       	adiw	r26, 0x02	; 2
    5bbe:	2d 91       	ld	r18, X+
    5bc0:	3c 91       	ld	r19, X
    5bc2:	13 97       	sbiw	r26, 0x03	; 3
    5bc4:	ad 01       	movw	r20, r26
    5bc6:	21 15       	cp	r18, r1
    5bc8:	31 05       	cpc	r19, r1
    5bca:	09 f1       	breq	.+66     	; 0x5c0e <free+0xa2>
    5bcc:	d9 01       	movw	r26, r18
    5bce:	f3 cf       	rjmp	.-26     	; 0x5bb6 <free+0x4a>
    5bd0:	9d 01       	movw	r18, r26
    5bd2:	da 01       	movw	r26, r20
    5bd4:	33 83       	std	Z+3, r19	; 0x03
    5bd6:	22 83       	std	Z+2, r18	; 0x02
    5bd8:	60 81       	ld	r22, Z
    5bda:	71 81       	ldd	r23, Z+1	; 0x01
    5bdc:	86 0f       	add	r24, r22
    5bde:	97 1f       	adc	r25, r23
    5be0:	82 17       	cp	r24, r18
    5be2:	93 07       	cpc	r25, r19
    5be4:	69 f4       	brne	.+26     	; 0x5c00 <free+0x94>
    5be6:	ec 01       	movw	r28, r24
    5be8:	28 81       	ld	r18, Y
    5bea:	39 81       	ldd	r19, Y+1	; 0x01
    5bec:	26 0f       	add	r18, r22
    5bee:	37 1f       	adc	r19, r23
    5bf0:	2e 5f       	subi	r18, 0xFE	; 254
    5bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf4:	31 83       	std	Z+1, r19	; 0x01
    5bf6:	20 83       	st	Z, r18
    5bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    5bfc:	93 83       	std	Z+3, r25	; 0x03
    5bfe:	82 83       	std	Z+2, r24	; 0x02
    5c00:	45 2b       	or	r20, r21
    5c02:	29 f4       	brne	.+10     	; 0x5c0e <free+0xa2>
    5c04:	f0 93 69 05 	sts	0x0569, r31	; 0x800569 <__flp+0x1>
    5c08:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <__flp>
    5c0c:	42 c0       	rjmp	.+132    	; 0x5c92 <free+0x126>
    5c0e:	13 96       	adiw	r26, 0x03	; 3
    5c10:	fc 93       	st	X, r31
    5c12:	ee 93       	st	-X, r30
    5c14:	12 97       	sbiw	r26, 0x02	; 2
    5c16:	ed 01       	movw	r28, r26
    5c18:	49 91       	ld	r20, Y+
    5c1a:	59 91       	ld	r21, Y+
    5c1c:	9e 01       	movw	r18, r28
    5c1e:	24 0f       	add	r18, r20
    5c20:	35 1f       	adc	r19, r21
    5c22:	e2 17       	cp	r30, r18
    5c24:	f3 07       	cpc	r31, r19
    5c26:	71 f4       	brne	.+28     	; 0x5c44 <free+0xd8>
    5c28:	80 81       	ld	r24, Z
    5c2a:	91 81       	ldd	r25, Z+1	; 0x01
    5c2c:	84 0f       	add	r24, r20
    5c2e:	95 1f       	adc	r25, r21
    5c30:	02 96       	adiw	r24, 0x02	; 2
    5c32:	11 96       	adiw	r26, 0x01	; 1
    5c34:	9c 93       	st	X, r25
    5c36:	8e 93       	st	-X, r24
    5c38:	82 81       	ldd	r24, Z+2	; 0x02
    5c3a:	93 81       	ldd	r25, Z+3	; 0x03
    5c3c:	13 96       	adiw	r26, 0x03	; 3
    5c3e:	9c 93       	st	X, r25
    5c40:	8e 93       	st	-X, r24
    5c42:	12 97       	sbiw	r26, 0x02	; 2
    5c44:	e0 e0       	ldi	r30, 0x00	; 0
    5c46:	f0 e0       	ldi	r31, 0x00	; 0
    5c48:	d8 01       	movw	r26, r16
    5c4a:	12 96       	adiw	r26, 0x02	; 2
    5c4c:	8d 91       	ld	r24, X+
    5c4e:	9c 91       	ld	r25, X
    5c50:	13 97       	sbiw	r26, 0x03	; 3
    5c52:	00 97       	sbiw	r24, 0x00	; 0
    5c54:	19 f0       	breq	.+6      	; 0x5c5c <free+0xf0>
    5c56:	f8 01       	movw	r30, r16
    5c58:	8c 01       	movw	r16, r24
    5c5a:	f6 cf       	rjmp	.-20     	; 0x5c48 <free+0xdc>
    5c5c:	8d 91       	ld	r24, X+
    5c5e:	9c 91       	ld	r25, X
    5c60:	98 01       	movw	r18, r16
    5c62:	2e 5f       	subi	r18, 0xFE	; 254
    5c64:	3f 4f       	sbci	r19, 0xFF	; 255
    5c66:	82 0f       	add	r24, r18
    5c68:	93 1f       	adc	r25, r19
    5c6a:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    5c6e:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    5c72:	28 17       	cp	r18, r24
    5c74:	39 07       	cpc	r19, r25
    5c76:	69 f4       	brne	.+26     	; 0x5c92 <free+0x126>
    5c78:	30 97       	sbiw	r30, 0x00	; 0
    5c7a:	29 f4       	brne	.+10     	; 0x5c86 <free+0x11a>
    5c7c:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <__flp+0x1>
    5c80:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <__flp>
    5c84:	02 c0       	rjmp	.+4      	; 0x5c8a <free+0x11e>
    5c86:	13 82       	std	Z+3, r1	; 0x03
    5c88:	12 82       	std	Z+2, r1	; 0x02
    5c8a:	10 93 67 05 	sts	0x0567, r17	; 0x800567 <__brkval+0x1>
    5c8e:	00 93 66 05 	sts	0x0566, r16	; 0x800566 <__brkval>
    5c92:	df 91       	pop	r29
    5c94:	cf 91       	pop	r28
    5c96:	1f 91       	pop	r17
    5c98:	0f 91       	pop	r16
    5c9a:	08 95       	ret

00005c9c <realloc>:
    5c9c:	a0 e0       	ldi	r26, 0x00	; 0
    5c9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ca0:	e3 e5       	ldi	r30, 0x53	; 83
    5ca2:	fe e2       	ldi	r31, 0x2E	; 46
    5ca4:	6d ce       	rjmp	.-806    	; 0x5980 <__prologue_saves__+0x8>
    5ca6:	ec 01       	movw	r28, r24
    5ca8:	00 97       	sbiw	r24, 0x00	; 0
    5caa:	19 f4       	brne	.+6      	; 0x5cb2 <realloc+0x16>
    5cac:	cb 01       	movw	r24, r22
    5cae:	c9 de       	rcall	.-622    	; 0x5a42 <malloc>
    5cb0:	b4 c0       	rjmp	.+360    	; 0x5e1a <realloc+0x17e>
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	e6 0f       	add	r30, r22
    5cb6:	f7 1f       	adc	r31, r23
    5cb8:	9c 01       	movw	r18, r24
    5cba:	22 50       	subi	r18, 0x02	; 2
    5cbc:	31 09       	sbc	r19, r1
    5cbe:	e2 17       	cp	r30, r18
    5cc0:	f3 07       	cpc	r31, r19
    5cc2:	08 f4       	brcc	.+2      	; 0x5cc6 <realloc+0x2a>
    5cc4:	a8 c0       	rjmp	.+336    	; 0x5e16 <realloc+0x17a>
    5cc6:	d9 01       	movw	r26, r18
    5cc8:	0d 91       	ld	r16, X+
    5cca:	1c 91       	ld	r17, X
    5ccc:	11 97       	sbiw	r26, 0x01	; 1
    5cce:	06 17       	cp	r16, r22
    5cd0:	17 07       	cpc	r17, r23
    5cd2:	a8 f0       	brcs	.+42     	; 0x5cfe <realloc+0x62>
    5cd4:	05 30       	cpi	r16, 0x05	; 5
    5cd6:	11 05       	cpc	r17, r1
    5cd8:	08 f4       	brcc	.+2      	; 0x5cdc <realloc+0x40>
    5cda:	9b c0       	rjmp	.+310    	; 0x5e12 <realloc+0x176>
    5cdc:	c8 01       	movw	r24, r16
    5cde:	04 97       	sbiw	r24, 0x04	; 4
    5ce0:	86 17       	cp	r24, r22
    5ce2:	97 07       	cpc	r25, r23
    5ce4:	08 f4       	brcc	.+2      	; 0x5ce8 <realloc+0x4c>
    5ce6:	95 c0       	rjmp	.+298    	; 0x5e12 <realloc+0x176>
    5ce8:	02 50       	subi	r16, 0x02	; 2
    5cea:	11 09       	sbc	r17, r1
    5cec:	06 1b       	sub	r16, r22
    5cee:	17 0b       	sbc	r17, r23
    5cf0:	01 93       	st	Z+, r16
    5cf2:	11 93       	st	Z+, r17
    5cf4:	6d 93       	st	X+, r22
    5cf6:	7c 93       	st	X, r23
    5cf8:	cf 01       	movw	r24, r30
    5cfa:	38 df       	rcall	.-400    	; 0x5b6c <free>
    5cfc:	8a c0       	rjmp	.+276    	; 0x5e12 <realloc+0x176>
    5cfe:	5b 01       	movw	r10, r22
    5d00:	a0 1a       	sub	r10, r16
    5d02:	b1 0a       	sbc	r11, r17
    5d04:	4c 01       	movw	r8, r24
    5d06:	80 0e       	add	r8, r16
    5d08:	91 1e       	adc	r9, r17
    5d0a:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <__flp>
    5d0e:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <__flp+0x1>
    5d12:	40 e0       	ldi	r20, 0x00	; 0
    5d14:	50 e0       	ldi	r21, 0x00	; 0
    5d16:	e1 2c       	mov	r14, r1
    5d18:	f1 2c       	mov	r15, r1
    5d1a:	10 97       	sbiw	r26, 0x00	; 0
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <realloc+0x84>
    5d1e:	4a c0       	rjmp	.+148    	; 0x5db4 <realloc+0x118>
    5d20:	a8 15       	cp	r26, r8
    5d22:	b9 05       	cpc	r27, r9
    5d24:	d1 f5       	brne	.+116    	; 0x5d9a <realloc+0xfe>
    5d26:	6d 90       	ld	r6, X+
    5d28:	7c 90       	ld	r7, X
    5d2a:	11 97       	sbiw	r26, 0x01	; 1
    5d2c:	63 01       	movw	r12, r6
    5d2e:	82 e0       	ldi	r24, 0x02	; 2
    5d30:	c8 0e       	add	r12, r24
    5d32:	d1 1c       	adc	r13, r1
    5d34:	ca 14       	cp	r12, r10
    5d36:	db 04       	cpc	r13, r11
    5d38:	80 f1       	brcs	.+96     	; 0x5d9a <realloc+0xfe>
    5d3a:	a3 01       	movw	r20, r6
    5d3c:	4a 19       	sub	r20, r10
    5d3e:	5b 09       	sbc	r21, r11
    5d40:	6a 01       	movw	r12, r20
    5d42:	82 e0       	ldi	r24, 0x02	; 2
    5d44:	c8 0e       	add	r12, r24
    5d46:	d1 1c       	adc	r13, r1
    5d48:	12 96       	adiw	r26, 0x02	; 2
    5d4a:	bc 90       	ld	r11, X
    5d4c:	12 97       	sbiw	r26, 0x02	; 2
    5d4e:	13 96       	adiw	r26, 0x03	; 3
    5d50:	ac 91       	ld	r26, X
    5d52:	b5 e0       	ldi	r27, 0x05	; 5
    5d54:	cb 16       	cp	r12, r27
    5d56:	d1 04       	cpc	r13, r1
    5d58:	40 f0       	brcs	.+16     	; 0x5d6a <realloc+0xce>
    5d5a:	b2 82       	std	Z+2, r11	; 0x02
    5d5c:	a3 83       	std	Z+3, r26	; 0x03
    5d5e:	51 83       	std	Z+1, r21	; 0x01
    5d60:	40 83       	st	Z, r20
    5d62:	d9 01       	movw	r26, r18
    5d64:	6d 93       	st	X+, r22
    5d66:	7c 93       	st	X, r23
    5d68:	0a c0       	rjmp	.+20     	; 0x5d7e <realloc+0xe2>
    5d6a:	0e 5f       	subi	r16, 0xFE	; 254
    5d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d6e:	c3 01       	movw	r24, r6
    5d70:	80 0f       	add	r24, r16
    5d72:	91 1f       	adc	r25, r17
    5d74:	f9 01       	movw	r30, r18
    5d76:	91 83       	std	Z+1, r25	; 0x01
    5d78:	80 83       	st	Z, r24
    5d7a:	eb 2d       	mov	r30, r11
    5d7c:	fa 2f       	mov	r31, r26
    5d7e:	e1 14       	cp	r14, r1
    5d80:	f1 04       	cpc	r15, r1
    5d82:	31 f0       	breq	.+12     	; 0x5d90 <realloc+0xf4>
    5d84:	d7 01       	movw	r26, r14
    5d86:	13 96       	adiw	r26, 0x03	; 3
    5d88:	fc 93       	st	X, r31
    5d8a:	ee 93       	st	-X, r30
    5d8c:	12 97       	sbiw	r26, 0x02	; 2
    5d8e:	41 c0       	rjmp	.+130    	; 0x5e12 <realloc+0x176>
    5d90:	f0 93 69 05 	sts	0x0569, r31	; 0x800569 <__flp+0x1>
    5d94:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <__flp>
    5d98:	3c c0       	rjmp	.+120    	; 0x5e12 <realloc+0x176>
    5d9a:	8d 91       	ld	r24, X+
    5d9c:	9c 91       	ld	r25, X
    5d9e:	11 97       	sbiw	r26, 0x01	; 1
    5da0:	48 17       	cp	r20, r24
    5da2:	59 07       	cpc	r21, r25
    5da4:	08 f4       	brcc	.+2      	; 0x5da8 <realloc+0x10c>
    5da6:	ac 01       	movw	r20, r24
    5da8:	7d 01       	movw	r14, r26
    5daa:	12 96       	adiw	r26, 0x02	; 2
    5dac:	0d 90       	ld	r0, X+
    5dae:	bc 91       	ld	r27, X
    5db0:	a0 2d       	mov	r26, r0
    5db2:	b3 cf       	rjmp	.-154    	; 0x5d1a <realloc+0x7e>
    5db4:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <__brkval>
    5db8:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <__brkval+0x1>
    5dbc:	88 15       	cp	r24, r8
    5dbe:	99 05       	cpc	r25, r9
    5dc0:	e1 f4       	brne	.+56     	; 0x5dfa <realloc+0x15e>
    5dc2:	46 17       	cp	r20, r22
    5dc4:	57 07       	cpc	r21, r23
    5dc6:	c8 f4       	brcc	.+50     	; 0x5dfa <realloc+0x15e>
    5dc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5dcc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5dd0:	00 97       	sbiw	r24, 0x00	; 0
    5dd2:	41 f4       	brne	.+16     	; 0x5de4 <realloc+0x148>
    5dd4:	8d b7       	in	r24, 0x3d	; 61
    5dd6:	9e b7       	in	r25, 0x3e	; 62
    5dd8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5ddc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5de0:	84 1b       	sub	r24, r20
    5de2:	95 0b       	sbc	r25, r21
    5de4:	e8 17       	cp	r30, r24
    5de6:	f9 07       	cpc	r31, r25
    5de8:	b0 f4       	brcc	.+44     	; 0x5e16 <realloc+0x17a>
    5dea:	f0 93 67 05 	sts	0x0567, r31	; 0x800567 <__brkval+0x1>
    5dee:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <__brkval>
    5df2:	f9 01       	movw	r30, r18
    5df4:	71 83       	std	Z+1, r23	; 0x01
    5df6:	60 83       	st	Z, r22
    5df8:	0c c0       	rjmp	.+24     	; 0x5e12 <realloc+0x176>
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	22 de       	rcall	.-956    	; 0x5a42 <malloc>
    5dfe:	7c 01       	movw	r14, r24
    5e00:	00 97       	sbiw	r24, 0x00	; 0
    5e02:	49 f0       	breq	.+18     	; 0x5e16 <realloc+0x17a>
    5e04:	a8 01       	movw	r20, r16
    5e06:	be 01       	movw	r22, r28
    5e08:	af d1       	rcall	.+862    	; 0x6168 <memcpy>
    5e0a:	ce 01       	movw	r24, r28
    5e0c:	af de       	rcall	.-674    	; 0x5b6c <free>
    5e0e:	c7 01       	movw	r24, r14
    5e10:	04 c0       	rjmp	.+8      	; 0x5e1a <realloc+0x17e>
    5e12:	ce 01       	movw	r24, r28
    5e14:	02 c0       	rjmp	.+4      	; 0x5e1a <realloc+0x17e>
    5e16:	80 e0       	ldi	r24, 0x00	; 0
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	ee e0       	ldi	r30, 0x0E	; 14
    5e20:	cb cd       	rjmp	.-1130   	; 0x59b8 <__epilogue_restores__+0x8>

00005e22 <strtod>:
    5e22:	a0 e0       	ldi	r26, 0x00	; 0
    5e24:	b0 e0       	ldi	r27, 0x00	; 0
    5e26:	e6 e1       	ldi	r30, 0x16	; 22
    5e28:	ff e2       	ldi	r31, 0x2F	; 47
    5e2a:	aa cd       	rjmp	.-1196   	; 0x5980 <__prologue_saves__+0x8>
    5e2c:	ec 01       	movw	r28, r24
    5e2e:	7b 01       	movw	r14, r22
    5e30:	61 15       	cp	r22, r1
    5e32:	71 05       	cpc	r23, r1
    5e34:	19 f0       	breq	.+6      	; 0x5e3c <strtod+0x1a>
    5e36:	db 01       	movw	r26, r22
    5e38:	8d 93       	st	X+, r24
    5e3a:	9c 93       	st	X, r25
    5e3c:	8e 01       	movw	r16, r28
    5e3e:	0f 5f       	subi	r16, 0xFF	; 255
    5e40:	1f 4f       	sbci	r17, 0xFF	; 255
    5e42:	78 80       	ld	r7, Y
    5e44:	87 2d       	mov	r24, r7
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	6f d1       	rcall	.+734    	; 0x6128 <isspace>
    5e4a:	89 2b       	or	r24, r25
    5e4c:	11 f0       	breq	.+4      	; 0x5e52 <strtod+0x30>
    5e4e:	e8 01       	movw	r28, r16
    5e50:	f5 cf       	rjmp	.-22     	; 0x5e3c <strtod+0x1a>
    5e52:	bd e2       	ldi	r27, 0x2D	; 45
    5e54:	7b 12       	cpse	r7, r27
    5e56:	05 c0       	rjmp	.+10     	; 0x5e62 <strtod+0x40>
    5e58:	0f 5f       	subi	r16, 0xFF	; 255
    5e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e5c:	79 80       	ldd	r7, Y+1	; 0x01
    5e5e:	c1 e0       	ldi	r28, 0x01	; 1
    5e60:	08 c0       	rjmp	.+16     	; 0x5e72 <strtod+0x50>
    5e62:	eb e2       	ldi	r30, 0x2B	; 43
    5e64:	7e 12       	cpse	r7, r30
    5e66:	04 c0       	rjmp	.+8      	; 0x5e70 <strtod+0x4e>
    5e68:	8e 01       	movw	r16, r28
    5e6a:	0e 5f       	subi	r16, 0xFE	; 254
    5e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e6e:	79 80       	ldd	r7, Y+1	; 0x01
    5e70:	c0 e0       	ldi	r28, 0x00	; 0
    5e72:	68 01       	movw	r12, r16
    5e74:	f1 e0       	ldi	r31, 0x01	; 1
    5e76:	cf 1a       	sub	r12, r31
    5e78:	d1 08       	sbc	r13, r1
    5e7a:	43 e0       	ldi	r20, 0x03	; 3
    5e7c:	50 e0       	ldi	r21, 0x00	; 0
    5e7e:	62 e6       	ldi	r22, 0x62	; 98
    5e80:	72 e0       	ldi	r23, 0x02	; 2
    5e82:	c6 01       	movw	r24, r12
    5e84:	59 d1       	rcall	.+690    	; 0x6138 <strncasecmp_P>
    5e86:	89 2b       	or	r24, r25
    5e88:	e9 f4       	brne	.+58     	; 0x5ec4 <strtod+0xa2>
    5e8a:	68 01       	movw	r12, r16
    5e8c:	22 e0       	ldi	r18, 0x02	; 2
    5e8e:	c2 0e       	add	r12, r18
    5e90:	d1 1c       	adc	r13, r1
    5e92:	45 e0       	ldi	r20, 0x05	; 5
    5e94:	50 e0       	ldi	r21, 0x00	; 0
    5e96:	6d e5       	ldi	r22, 0x5D	; 93
    5e98:	72 e0       	ldi	r23, 0x02	; 2
    5e9a:	c6 01       	movw	r24, r12
    5e9c:	4d d1       	rcall	.+666    	; 0x6138 <strncasecmp_P>
    5e9e:	89 2b       	or	r24, r25
    5ea0:	21 f4       	brne	.+8      	; 0x5eaa <strtod+0x88>
    5ea2:	68 01       	movw	r12, r16
    5ea4:	87 e0       	ldi	r24, 0x07	; 7
    5ea6:	c8 0e       	add	r12, r24
    5ea8:	d1 1c       	adc	r13, r1
    5eaa:	e1 14       	cp	r14, r1
    5eac:	f1 04       	cpc	r15, r1
    5eae:	19 f0       	breq	.+6      	; 0x5eb6 <strtod+0x94>
    5eb0:	d7 01       	movw	r26, r14
    5eb2:	cd 92       	st	X+, r12
    5eb4:	dc 92       	st	X, r13
    5eb6:	c1 11       	cpse	r28, r1
    5eb8:	fd c0       	rjmp	.+506    	; 0x60b4 <strtod+0x292>
    5eba:	60 e0       	ldi	r22, 0x00	; 0
    5ebc:	70 e0       	ldi	r23, 0x00	; 0
    5ebe:	80 e8       	ldi	r24, 0x80	; 128
    5ec0:	9f e7       	ldi	r25, 0x7F	; 127
    5ec2:	01 c1       	rjmp	.+514    	; 0x60c6 <strtod+0x2a4>
    5ec4:	43 e0       	ldi	r20, 0x03	; 3
    5ec6:	50 e0       	ldi	r21, 0x00	; 0
    5ec8:	6a e5       	ldi	r22, 0x5A	; 90
    5eca:	72 e0       	ldi	r23, 0x02	; 2
    5ecc:	c6 01       	movw	r24, r12
    5ece:	34 d1       	rcall	.+616    	; 0x6138 <strncasecmp_P>
    5ed0:	89 2b       	or	r24, r25
    5ed2:	51 f4       	brne	.+20     	; 0x5ee8 <strtod+0xc6>
    5ed4:	e1 14       	cp	r14, r1
    5ed6:	f1 04       	cpc	r15, r1
    5ed8:	09 f4       	brne	.+2      	; 0x5edc <strtod+0xba>
    5eda:	f1 c0       	rjmp	.+482    	; 0x60be <strtod+0x29c>
    5edc:	0e 5f       	subi	r16, 0xFE	; 254
    5ede:	1f 4f       	sbci	r17, 0xFF	; 255
    5ee0:	f7 01       	movw	r30, r14
    5ee2:	11 83       	std	Z+1, r17	; 0x01
    5ee4:	00 83       	st	Z, r16
    5ee6:	eb c0       	rjmp	.+470    	; 0x60be <strtod+0x29c>
    5ee8:	68 01       	movw	r12, r16
    5eea:	60 e0       	ldi	r22, 0x00	; 0
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	cb 01       	movw	r24, r22
    5ef0:	00 e0       	ldi	r16, 0x00	; 0
    5ef2:	10 e0       	ldi	r17, 0x00	; 0
    5ef4:	f6 01       	movw	r30, r12
    5ef6:	d0 ed       	ldi	r29, 0xD0	; 208
    5ef8:	d7 0d       	add	r29, r7
    5efa:	da 30       	cpi	r29, 0x0A	; 10
    5efc:	50 f5       	brcc	.+84     	; 0x5f52 <strtod+0x130>
    5efe:	2c 2f       	mov	r18, r28
    5f00:	22 60       	ori	r18, 0x02	; 2
    5f02:	62 2e       	mov	r6, r18
    5f04:	2c 2f       	mov	r18, r28
    5f06:	28 70       	andi	r18, 0x08	; 8
    5f08:	c2 ff       	sbrs	r28, 2
    5f0a:	05 c0       	rjmp	.+10     	; 0x5f16 <strtod+0xf4>
    5f0c:	21 11       	cpse	r18, r1
    5f0e:	27 c0       	rjmp	.+78     	; 0x5f5e <strtod+0x13c>
    5f10:	0f 5f       	subi	r16, 0xFF	; 255
    5f12:	1f 4f       	sbci	r17, 0xFF	; 255
    5f14:	24 c0       	rjmp	.+72     	; 0x5f5e <strtod+0x13c>
    5f16:	22 23       	and	r18, r18
    5f18:	11 f0       	breq	.+4      	; 0x5f1e <strtod+0xfc>
    5f1a:	01 50       	subi	r16, 0x01	; 1
    5f1c:	11 09       	sbc	r17, r1
    5f1e:	a5 e0       	ldi	r26, 0x05	; 5
    5f20:	b0 e0       	ldi	r27, 0x00	; 0
    5f22:	9b 01       	movw	r18, r22
    5f24:	ac 01       	movw	r20, r24
    5f26:	1e dd       	rcall	.-1476   	; 0x5964 <__muluhisi3>
    5f28:	4b 01       	movw	r8, r22
    5f2a:	5c 01       	movw	r10, r24
    5f2c:	88 0c       	add	r8, r8
    5f2e:	99 1c       	adc	r9, r9
    5f30:	aa 1c       	adc	r10, r10
    5f32:	bb 1c       	adc	r11, r11
    5f34:	c5 01       	movw	r24, r10
    5f36:	b4 01       	movw	r22, r8
    5f38:	6d 0f       	add	r22, r29
    5f3a:	71 1d       	adc	r23, r1
    5f3c:	81 1d       	adc	r24, r1
    5f3e:	91 1d       	adc	r25, r1
    5f40:	68 39       	cpi	r22, 0x98	; 152
    5f42:	a9 e9       	ldi	r26, 0x99	; 153
    5f44:	7a 07       	cpc	r23, r26
    5f46:	8a 07       	cpc	r24, r26
    5f48:	a9 e1       	ldi	r26, 0x19	; 25
    5f4a:	9a 07       	cpc	r25, r26
    5f4c:	40 f0       	brcs	.+16     	; 0x5f5e <strtod+0x13c>
    5f4e:	c6 60       	ori	r28, 0x06	; 6
    5f50:	05 c0       	rjmp	.+10     	; 0x5f5c <strtod+0x13a>
    5f52:	de 3f       	cpi	r29, 0xFE	; 254
    5f54:	51 f4       	brne	.+20     	; 0x5f6a <strtod+0x148>
    5f56:	c3 fd       	sbrc	r28, 3
    5f58:	44 c0       	rjmp	.+136    	; 0x5fe2 <strtod+0x1c0>
    5f5a:	c8 60       	ori	r28, 0x08	; 8
    5f5c:	6c 2e       	mov	r6, r28
    5f5e:	bf ef       	ldi	r27, 0xFF	; 255
    5f60:	cb 1a       	sub	r12, r27
    5f62:	db 0a       	sbc	r13, r27
    5f64:	70 80       	ld	r7, Z
    5f66:	c6 2d       	mov	r28, r6
    5f68:	c5 cf       	rjmp	.-118    	; 0x5ef4 <strtod+0xd2>
    5f6a:	2d 2f       	mov	r18, r29
    5f6c:	2f 7d       	andi	r18, 0xDF	; 223
    5f6e:	25 31       	cpi	r18, 0x15	; 21
    5f70:	c1 f5       	brne	.+112    	; 0x5fe2 <strtod+0x1c0>
    5f72:	40 81       	ld	r20, Z
    5f74:	4d 32       	cpi	r20, 0x2D	; 45
    5f76:	11 f4       	brne	.+4      	; 0x5f7c <strtod+0x15a>
    5f78:	c0 61       	ori	r28, 0x10	; 16
    5f7a:	06 c0       	rjmp	.+12     	; 0x5f88 <strtod+0x166>
    5f7c:	4b 32       	cpi	r20, 0x2B	; 43
    5f7e:	21 f0       	breq	.+8      	; 0x5f88 <strtod+0x166>
    5f80:	31 96       	adiw	r30, 0x01	; 1
    5f82:	21 e0       	ldi	r18, 0x01	; 1
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	06 c0       	rjmp	.+12     	; 0x5f94 <strtod+0x172>
    5f88:	32 96       	adiw	r30, 0x02	; 2
    5f8a:	d6 01       	movw	r26, r12
    5f8c:	11 96       	adiw	r26, 0x01	; 1
    5f8e:	4c 91       	ld	r20, X
    5f90:	22 e0       	ldi	r18, 0x02	; 2
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	a0 ed       	ldi	r26, 0xD0	; 208
    5f96:	a4 0f       	add	r26, r20
    5f98:	aa 30       	cpi	r26, 0x0A	; 10
    5f9a:	18 f0       	brcs	.+6      	; 0x5fa2 <strtod+0x180>
    5f9c:	e2 1b       	sub	r30, r18
    5f9e:	f3 0b       	sbc	r31, r19
    5fa0:	20 c0       	rjmp	.+64     	; 0x5fe2 <strtod+0x1c0>
    5fa2:	40 e0       	ldi	r20, 0x00	; 0
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	40 38       	cpi	r20, 0x80	; 128
    5fa8:	bc e0       	ldi	r27, 0x0C	; 12
    5faa:	5b 07       	cpc	r21, r27
    5fac:	5c f4       	brge	.+22     	; 0x5fc4 <strtod+0x1a2>
    5fae:	9a 01       	movw	r18, r20
    5fb0:	22 0f       	add	r18, r18
    5fb2:	33 1f       	adc	r19, r19
    5fb4:	22 0f       	add	r18, r18
    5fb6:	33 1f       	adc	r19, r19
    5fb8:	42 0f       	add	r20, r18
    5fba:	53 1f       	adc	r21, r19
    5fbc:	44 0f       	add	r20, r20
    5fbe:	55 1f       	adc	r21, r21
    5fc0:	4a 0f       	add	r20, r26
    5fc2:	51 1d       	adc	r21, r1
    5fc4:	31 96       	adiw	r30, 0x01	; 1
    5fc6:	df 01       	movw	r26, r30
    5fc8:	11 97       	sbiw	r26, 0x01	; 1
    5fca:	2c 91       	ld	r18, X
    5fcc:	a0 ed       	ldi	r26, 0xD0	; 208
    5fce:	a2 0f       	add	r26, r18
    5fd0:	aa 30       	cpi	r26, 0x0A	; 10
    5fd2:	48 f3       	brcs	.-46     	; 0x5fa6 <strtod+0x184>
    5fd4:	c4 ff       	sbrs	r28, 4
    5fd6:	03 c0       	rjmp	.+6      	; 0x5fde <strtod+0x1bc>
    5fd8:	51 95       	neg	r21
    5fda:	41 95       	neg	r20
    5fdc:	51 09       	sbc	r21, r1
    5fde:	04 0f       	add	r16, r20
    5fe0:	15 1f       	adc	r17, r21
    5fe2:	c1 ff       	sbrs	r28, 1
    5fe4:	07 c0       	rjmp	.+14     	; 0x5ff4 <strtod+0x1d2>
    5fe6:	e1 14       	cp	r14, r1
    5fe8:	f1 04       	cpc	r15, r1
    5fea:	21 f0       	breq	.+8      	; 0x5ff4 <strtod+0x1d2>
    5fec:	31 97       	sbiw	r30, 0x01	; 1
    5fee:	d7 01       	movw	r26, r14
    5ff0:	ed 93       	st	X+, r30
    5ff2:	fc 93       	st	X, r31
    5ff4:	0e 94 72 23 	call	0x46e4	; 0x46e4 <__floatunsisf>
    5ff8:	c3 70       	andi	r28, 0x03	; 3
    5ffa:	c3 30       	cpi	r28, 0x03	; 3
    5ffc:	19 f0       	breq	.+6      	; 0x6004 <strtod+0x1e2>
    5ffe:	6b 01       	movw	r12, r22
    6000:	7c 01       	movw	r14, r24
    6002:	06 c0       	rjmp	.+12     	; 0x6010 <strtod+0x1ee>
    6004:	6b 01       	movw	r12, r22
    6006:	7c 01       	movw	r14, r24
    6008:	f7 fa       	bst	r15, 7
    600a:	f0 94       	com	r15
    600c:	f7 f8       	bld	r15, 7
    600e:	f0 94       	com	r15
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	a9 01       	movw	r20, r18
    6016:	c7 01       	movw	r24, r14
    6018:	b6 01       	movw	r22, r12
    601a:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__cmpsf2>
    601e:	88 23       	and	r24, r24
    6020:	09 f4       	brne	.+2      	; 0x6024 <strtod+0x202>
    6022:	45 c0       	rjmp	.+138    	; 0x60ae <strtod+0x28c>
    6024:	17 ff       	sbrs	r17, 7
    6026:	06 c0       	rjmp	.+12     	; 0x6034 <strtod+0x212>
    6028:	11 95       	neg	r17
    602a:	01 95       	neg	r16
    602c:	11 09       	sbc	r17, r1
    602e:	c9 e7       	ldi	r28, 0x79	; 121
    6030:	d2 e0       	ldi	r29, 0x02	; 2
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <strtod+0x216>
    6034:	c1 e9       	ldi	r28, 0x91	; 145
    6036:	d2 e0       	ldi	r29, 0x02	; 2
    6038:	5e 01       	movw	r10, r28
    603a:	b8 e1       	ldi	r27, 0x18	; 24
    603c:	ab 1a       	sub	r10, r27
    603e:	b1 08       	sbc	r11, r1
    6040:	46 01       	movw	r8, r12
    6042:	be 2d       	mov	r27, r14
    6044:	af 2d       	mov	r26, r15
    6046:	90 e2       	ldi	r25, 0x20	; 32
    6048:	e9 2e       	mov	r14, r25
    604a:	f1 2c       	mov	r15, r1
    604c:	0e 15       	cp	r16, r14
    604e:	1f 05       	cpc	r17, r15
    6050:	84 f0       	brlt	.+32     	; 0x6072 <strtod+0x250>
    6052:	fe 01       	movw	r30, r28
    6054:	25 91       	lpm	r18, Z+
    6056:	35 91       	lpm	r19, Z+
    6058:	45 91       	lpm	r20, Z+
    605a:	54 91       	lpm	r21, Z
    605c:	b4 01       	movw	r22, r8
    605e:	8b 2f       	mov	r24, r27
    6060:	9a 2f       	mov	r25, r26
    6062:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    6066:	4b 01       	movw	r8, r22
    6068:	b8 2f       	mov	r27, r24
    606a:	a9 2f       	mov	r26, r25
    606c:	0e 19       	sub	r16, r14
    606e:	1f 09       	sbc	r17, r15
    6070:	ed cf       	rjmp	.-38     	; 0x604c <strtod+0x22a>
    6072:	24 97       	sbiw	r28, 0x04	; 4
    6074:	f5 94       	asr	r15
    6076:	e7 94       	ror	r14
    6078:	ca 15       	cp	r28, r10
    607a:	db 05       	cpc	r29, r11
    607c:	39 f7       	brne	.-50     	; 0x604c <strtod+0x22a>
    607e:	64 01       	movw	r12, r8
    6080:	eb 2e       	mov	r14, r27
    6082:	fa 2e       	mov	r15, r26
    6084:	8e 2d       	mov	r24, r14
    6086:	88 0f       	add	r24, r24
    6088:	8f 2d       	mov	r24, r15
    608a:	88 1f       	adc	r24, r24
    608c:	8f 3f       	cpi	r24, 0xFF	; 255
    608e:	49 f0       	breq	.+18     	; 0x60a2 <strtod+0x280>
    6090:	20 e0       	ldi	r18, 0x00	; 0
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	a9 01       	movw	r20, r18
    6096:	c7 01       	movw	r24, r14
    6098:	b6 01       	movw	r22, r12
    609a:	0e 94 d5 22 	call	0x45aa	; 0x45aa <__cmpsf2>
    609e:	81 11       	cpse	r24, r1
    60a0:	06 c0       	rjmp	.+12     	; 0x60ae <strtod+0x28c>
    60a2:	82 e2       	ldi	r24, 0x22	; 34
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <errno+0x1>
    60aa:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <errno>
    60ae:	c7 01       	movw	r24, r14
    60b0:	b6 01       	movw	r22, r12
    60b2:	09 c0       	rjmp	.+18     	; 0x60c6 <strtod+0x2a4>
    60b4:	60 e0       	ldi	r22, 0x00	; 0
    60b6:	70 e0       	ldi	r23, 0x00	; 0
    60b8:	80 e8       	ldi	r24, 0x80	; 128
    60ba:	9f ef       	ldi	r25, 0xFF	; 255
    60bc:	04 c0       	rjmp	.+8      	; 0x60c6 <strtod+0x2a4>
    60be:	60 e0       	ldi	r22, 0x00	; 0
    60c0:	70 e0       	ldi	r23, 0x00	; 0
    60c2:	80 ec       	ldi	r24, 0xC0	; 192
    60c4:	9f e7       	ldi	r25, 0x7F	; 127
    60c6:	cd b7       	in	r28, 0x3d	; 61
    60c8:	de b7       	in	r29, 0x3e	; 62
    60ca:	ee e0       	ldi	r30, 0x0E	; 14
    60cc:	75 cc       	rjmp	.-1814   	; 0x59b8 <__epilogue_restores__+0x8>

000060ce <abort>:
    60ce:	81 e0       	ldi	r24, 0x01	; 1
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	f8 94       	cli
    60d4:	79 c3       	rjmp	.+1778   	; 0x67c8 <__do_global_dtors>

000060d6 <atof>:
    60d6:	66 27       	eor	r22, r22
    60d8:	77 27       	eor	r23, r23
    60da:	a3 ce       	rjmp	.-698    	; 0x5e22 <strtod>

000060dc <atol>:
    60dc:	1f 93       	push	r17
    60de:	fc 01       	movw	r30, r24
    60e0:	99 27       	eor	r25, r25
    60e2:	88 27       	eor	r24, r24
    60e4:	bc 01       	movw	r22, r24
    60e6:	e8 94       	clt
    60e8:	11 91       	ld	r17, Z+
    60ea:	10 32       	cpi	r17, 0x20	; 32
    60ec:	e9 f3       	breq	.-6      	; 0x60e8 <atol+0xc>
    60ee:	19 30       	cpi	r17, 0x09	; 9
    60f0:	10 f0       	brcs	.+4      	; 0x60f6 <atol+0x1a>
    60f2:	1e 30       	cpi	r17, 0x0E	; 14
    60f4:	c8 f3       	brcs	.-14     	; 0x60e8 <atol+0xc>
    60f6:	1b 32       	cpi	r17, 0x2B	; 43
    60f8:	49 f0       	breq	.+18     	; 0x610c <atol+0x30>
    60fa:	1d 32       	cpi	r17, 0x2D	; 45
    60fc:	41 f4       	brne	.+16     	; 0x610e <atol+0x32>
    60fe:	68 94       	set
    6100:	05 c0       	rjmp	.+10     	; 0x610c <atol+0x30>
    6102:	85 d0       	rcall	.+266    	; 0x620e <__mulsi_const_10>
    6104:	61 0f       	add	r22, r17
    6106:	71 1d       	adc	r23, r1
    6108:	81 1d       	adc	r24, r1
    610a:	91 1d       	adc	r25, r1
    610c:	11 91       	ld	r17, Z+
    610e:	10 53       	subi	r17, 0x30	; 48
    6110:	1a 30       	cpi	r17, 0x0A	; 10
    6112:	b8 f3       	brcs	.-18     	; 0x6102 <atol+0x26>
    6114:	3e f4       	brtc	.+14     	; 0x6124 <atol+0x48>
    6116:	90 95       	com	r25
    6118:	80 95       	com	r24
    611a:	70 95       	com	r23
    611c:	61 95       	neg	r22
    611e:	7f 4f       	sbci	r23, 0xFF	; 255
    6120:	8f 4f       	sbci	r24, 0xFF	; 255
    6122:	9f 4f       	sbci	r25, 0xFF	; 255
    6124:	1f 91       	pop	r17
    6126:	08 95       	ret

00006128 <isspace>:
    6128:	91 11       	cpse	r25, r1
    612a:	25 c3       	rjmp	.+1610   	; 0x6776 <__ctype_isfalse>
    612c:	80 32       	cpi	r24, 0x20	; 32
    612e:	19 f0       	breq	.+6      	; 0x6136 <isspace+0xe>
    6130:	89 50       	subi	r24, 0x09	; 9
    6132:	85 50       	subi	r24, 0x05	; 5
    6134:	d0 f7       	brcc	.-12     	; 0x612a <isspace+0x2>
    6136:	08 95       	ret

00006138 <strncasecmp_P>:
    6138:	fb 01       	movw	r30, r22
    613a:	dc 01       	movw	r26, r24
    613c:	41 50       	subi	r20, 0x01	; 1
    613e:	50 40       	sbci	r21, 0x00	; 0
    6140:	88 f0       	brcs	.+34     	; 0x6164 <strncasecmp_P+0x2c>
    6142:	8d 91       	ld	r24, X+
    6144:	81 34       	cpi	r24, 0x41	; 65
    6146:	1c f0       	brlt	.+6      	; 0x614e <strncasecmp_P+0x16>
    6148:	8b 35       	cpi	r24, 0x5B	; 91
    614a:	0c f4       	brge	.+2      	; 0x614e <strncasecmp_P+0x16>
    614c:	80 5e       	subi	r24, 0xE0	; 224
    614e:	65 91       	lpm	r22, Z+
    6150:	61 34       	cpi	r22, 0x41	; 65
    6152:	1c f0       	brlt	.+6      	; 0x615a <strncasecmp_P+0x22>
    6154:	6b 35       	cpi	r22, 0x5B	; 91
    6156:	0c f4       	brge	.+2      	; 0x615a <strncasecmp_P+0x22>
    6158:	60 5e       	subi	r22, 0xE0	; 224
    615a:	86 1b       	sub	r24, r22
    615c:	61 11       	cpse	r22, r1
    615e:	71 f3       	breq	.-36     	; 0x613c <strncasecmp_P+0x4>
    6160:	99 0b       	sbc	r25, r25
    6162:	08 95       	ret
    6164:	88 1b       	sub	r24, r24
    6166:	fc cf       	rjmp	.-8      	; 0x6160 <strncasecmp_P+0x28>

00006168 <memcpy>:
    6168:	fb 01       	movw	r30, r22
    616a:	dc 01       	movw	r26, r24
    616c:	02 c0       	rjmp	.+4      	; 0x6172 <memcpy+0xa>
    616e:	01 90       	ld	r0, Z+
    6170:	0d 92       	st	X+, r0
    6172:	41 50       	subi	r20, 0x01	; 1
    6174:	50 40       	sbci	r21, 0x00	; 0
    6176:	d8 f7       	brcc	.-10     	; 0x616e <memcpy+0x6>
    6178:	08 95       	ret

0000617a <strcmp>:
    617a:	fb 01       	movw	r30, r22
    617c:	dc 01       	movw	r26, r24
    617e:	8d 91       	ld	r24, X+
    6180:	01 90       	ld	r0, Z+
    6182:	80 19       	sub	r24, r0
    6184:	01 10       	cpse	r0, r1
    6186:	d9 f3       	breq	.-10     	; 0x617e <strcmp+0x4>
    6188:	99 0b       	sbc	r25, r25
    618a:	08 95       	ret

0000618c <strcpy>:
    618c:	fb 01       	movw	r30, r22
    618e:	dc 01       	movw	r26, r24
    6190:	01 90       	ld	r0, Z+
    6192:	0d 92       	st	X+, r0
    6194:	00 20       	and	r0, r0
    6196:	e1 f7       	brne	.-8      	; 0x6190 <strcpy+0x4>
    6198:	08 95       	ret

0000619a <strncmp>:
    619a:	fb 01       	movw	r30, r22
    619c:	dc 01       	movw	r26, r24
    619e:	41 50       	subi	r20, 0x01	; 1
    61a0:	50 40       	sbci	r21, 0x00	; 0
    61a2:	30 f0       	brcs	.+12     	; 0x61b0 <strncmp+0x16>
    61a4:	8d 91       	ld	r24, X+
    61a6:	01 90       	ld	r0, Z+
    61a8:	80 19       	sub	r24, r0
    61aa:	19 f4       	brne	.+6      	; 0x61b2 <strncmp+0x18>
    61ac:	00 20       	and	r0, r0
    61ae:	b9 f7       	brne	.-18     	; 0x619e <strncmp+0x4>
    61b0:	88 1b       	sub	r24, r24
    61b2:	99 0b       	sbc	r25, r25
    61b4:	08 95       	ret

000061b6 <itoa>:
    61b6:	45 32       	cpi	r20, 0x25	; 37
    61b8:	51 05       	cpc	r21, r1
    61ba:	18 f4       	brcc	.+6      	; 0x61c2 <itoa+0xc>
    61bc:	42 30       	cpi	r20, 0x02	; 2
    61be:	08 f0       	brcs	.+2      	; 0x61c2 <itoa+0xc>
    61c0:	04 c0       	rjmp	.+8      	; 0x61ca <__itoa_ncheck>
    61c2:	fb 01       	movw	r30, r22
    61c4:	10 82       	st	Z, r1
    61c6:	cb 01       	movw	r24, r22
    61c8:	08 95       	ret

000061ca <__itoa_ncheck>:
    61ca:	bb 27       	eor	r27, r27
    61cc:	4a 30       	cpi	r20, 0x0A	; 10
    61ce:	31 f4       	brne	.+12     	; 0x61dc <__itoa_ncheck+0x12>
    61d0:	99 23       	and	r25, r25
    61d2:	22 f4       	brpl	.+8      	; 0x61dc <__itoa_ncheck+0x12>
    61d4:	bd e2       	ldi	r27, 0x2D	; 45
    61d6:	90 95       	com	r25
    61d8:	81 95       	neg	r24
    61da:	9f 4f       	sbci	r25, 0xFF	; 255
    61dc:	4f c0       	rjmp	.+158    	; 0x627c <__utoa_common>

000061de <ltoa>:
    61de:	25 32       	cpi	r18, 0x25	; 37
    61e0:	31 05       	cpc	r19, r1
    61e2:	18 f4       	brcc	.+6      	; 0x61ea <ltoa+0xc>
    61e4:	22 30       	cpi	r18, 0x02	; 2
    61e6:	08 f0       	brcs	.+2      	; 0x61ea <ltoa+0xc>
    61e8:	04 c0       	rjmp	.+8      	; 0x61f2 <__ltoa_ncheck>
    61ea:	fa 01       	movw	r30, r20
    61ec:	10 82       	st	Z, r1
    61ee:	ca 01       	movw	r24, r20
    61f0:	08 95       	ret

000061f2 <__ltoa_ncheck>:
    61f2:	bb 27       	eor	r27, r27
    61f4:	2a 30       	cpi	r18, 0x0A	; 10
    61f6:	51 f4       	brne	.+20     	; 0x620c <__ltoa_ncheck+0x1a>
    61f8:	99 23       	and	r25, r25
    61fa:	42 f4       	brpl	.+16     	; 0x620c <__ltoa_ncheck+0x1a>
    61fc:	bd e2       	ldi	r27, 0x2D	; 45
    61fe:	90 95       	com	r25
    6200:	80 95       	com	r24
    6202:	70 95       	com	r23
    6204:	61 95       	neg	r22
    6206:	7f 4f       	sbci	r23, 0xFF	; 255
    6208:	8f 4f       	sbci	r24, 0xFF	; 255
    620a:	9f 4f       	sbci	r25, 0xFF	; 255
    620c:	16 c0       	rjmp	.+44     	; 0x623a <__ultoa_common>

0000620e <__mulsi_const_10>:
    620e:	59 2f       	mov	r21, r25
    6210:	48 2f       	mov	r20, r24
    6212:	37 2f       	mov	r19, r23
    6214:	26 2f       	mov	r18, r22
    6216:	66 0f       	add	r22, r22
    6218:	77 1f       	adc	r23, r23
    621a:	88 1f       	adc	r24, r24
    621c:	99 1f       	adc	r25, r25
    621e:	66 0f       	add	r22, r22
    6220:	77 1f       	adc	r23, r23
    6222:	88 1f       	adc	r24, r24
    6224:	99 1f       	adc	r25, r25
    6226:	62 0f       	add	r22, r18
    6228:	73 1f       	adc	r23, r19
    622a:	84 1f       	adc	r24, r20
    622c:	95 1f       	adc	r25, r21
    622e:	66 0f       	add	r22, r22
    6230:	77 1f       	adc	r23, r23
    6232:	88 1f       	adc	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	08 95       	ret

00006238 <__ultoa_ncheck>:
    6238:	bb 27       	eor	r27, r27

0000623a <__ultoa_common>:
    623a:	fa 01       	movw	r30, r20
    623c:	a6 2f       	mov	r26, r22
    623e:	62 17       	cp	r22, r18
    6240:	71 05       	cpc	r23, r1
    6242:	81 05       	cpc	r24, r1
    6244:	91 05       	cpc	r25, r1
    6246:	33 0b       	sbc	r19, r19
    6248:	30 fb       	bst	r19, 0
    624a:	66 f0       	brts	.+24     	; 0x6264 <__ultoa_common+0x2a>
    624c:	aa 27       	eor	r26, r26
    624e:	66 0f       	add	r22, r22
    6250:	77 1f       	adc	r23, r23
    6252:	88 1f       	adc	r24, r24
    6254:	99 1f       	adc	r25, r25
    6256:	aa 1f       	adc	r26, r26
    6258:	a2 17       	cp	r26, r18
    625a:	10 f0       	brcs	.+4      	; 0x6260 <__ultoa_common+0x26>
    625c:	a2 1b       	sub	r26, r18
    625e:	63 95       	inc	r22
    6260:	38 50       	subi	r19, 0x08	; 8
    6262:	a9 f7       	brne	.-22     	; 0x624e <__ultoa_common+0x14>
    6264:	a0 5d       	subi	r26, 0xD0	; 208
    6266:	aa 33       	cpi	r26, 0x3A	; 58
    6268:	08 f0       	brcs	.+2      	; 0x626c <__ultoa_common+0x32>
    626a:	a9 5d       	subi	r26, 0xD9	; 217
    626c:	a1 93       	st	Z+, r26
    626e:	36 f7       	brtc	.-52     	; 0x623c <__ultoa_common+0x2>
    6270:	b1 11       	cpse	r27, r1
    6272:	b1 93       	st	Z+, r27
    6274:	10 82       	st	Z, r1
    6276:	ca 01       	movw	r24, r20
    6278:	81 c2       	rjmp	.+1282   	; 0x677c <strrev>

0000627a <__utoa_ncheck>:
    627a:	bb 27       	eor	r27, r27

0000627c <__utoa_common>:
    627c:	fb 01       	movw	r30, r22
    627e:	55 27       	eor	r21, r21
    6280:	aa 27       	eor	r26, r26
    6282:	88 0f       	add	r24, r24
    6284:	99 1f       	adc	r25, r25
    6286:	aa 1f       	adc	r26, r26
    6288:	a4 17       	cp	r26, r20
    628a:	10 f0       	brcs	.+4      	; 0x6290 <__utoa_common+0x14>
    628c:	a4 1b       	sub	r26, r20
    628e:	83 95       	inc	r24
    6290:	50 51       	subi	r21, 0x10	; 16
    6292:	b9 f7       	brne	.-18     	; 0x6282 <__utoa_common+0x6>
    6294:	a0 5d       	subi	r26, 0xD0	; 208
    6296:	aa 33       	cpi	r26, 0x3A	; 58
    6298:	08 f0       	brcs	.+2      	; 0x629c <__utoa_common+0x20>
    629a:	a9 5d       	subi	r26, 0xD9	; 217
    629c:	a1 93       	st	Z+, r26
    629e:	00 97       	sbiw	r24, 0x00	; 0
    62a0:	79 f7       	brne	.-34     	; 0x6280 <__utoa_common+0x4>
    62a2:	b1 11       	cpse	r27, r1
    62a4:	b1 93       	st	Z+, r27
    62a6:	11 92       	st	Z+, r1
    62a8:	cb 01       	movw	r24, r22
    62aa:	68 c2       	rjmp	.+1232   	; 0x677c <strrev>

000062ac <dtoa_prf>:
    62ac:	4f 92       	push	r4
    62ae:	5f 92       	push	r5
    62b0:	6f 92       	push	r6
    62b2:	7f 92       	push	r7
    62b4:	9f 92       	push	r9
    62b6:	af 92       	push	r10
    62b8:	bf 92       	push	r11
    62ba:	cf 92       	push	r12
    62bc:	df 92       	push	r13
    62be:	ef 92       	push	r14
    62c0:	ff 92       	push	r15
    62c2:	0f 93       	push	r16
    62c4:	1f 93       	push	r17
    62c6:	cf 93       	push	r28
    62c8:	df 93       	push	r29
    62ca:	cd b7       	in	r28, 0x3d	; 61
    62cc:	de b7       	in	r29, 0x3e	; 62
    62ce:	29 97       	sbiw	r28, 0x09	; 9
    62d0:	0f b6       	in	r0, 0x3f	; 63
    62d2:	f8 94       	cli
    62d4:	de bf       	out	0x3e, r29	; 62
    62d6:	0f be       	out	0x3f, r0	; 63
    62d8:	cd bf       	out	0x3d, r28	; 61
    62da:	6a 01       	movw	r12, r20
    62dc:	12 2f       	mov	r17, r18
    62de:	b0 2e       	mov	r11, r16
    62e0:	2b e3       	ldi	r18, 0x3B	; 59
    62e2:	20 17       	cp	r18, r16
    62e4:	20 f0       	brcs	.+8      	; 0x62ee <dtoa_prf+0x42>
    62e6:	ff 24       	eor	r15, r15
    62e8:	f3 94       	inc	r15
    62ea:	f0 0e       	add	r15, r16
    62ec:	02 c0       	rjmp	.+4      	; 0x62f2 <dtoa_prf+0x46>
    62ee:	bc e3       	ldi	r27, 0x3C	; 60
    62f0:	fb 2e       	mov	r15, r27
    62f2:	0f 2d       	mov	r16, r15
    62f4:	27 e0       	ldi	r18, 0x07	; 7
    62f6:	ae 01       	movw	r20, r28
    62f8:	4f 5f       	subi	r20, 0xFF	; 255
    62fa:	5f 4f       	sbci	r21, 0xFF	; 255
    62fc:	64 d1       	rcall	.+712    	; 0x65c6 <__ftoa_engine>
    62fe:	ac 01       	movw	r20, r24
    6300:	89 81       	ldd	r24, Y+1	; 0x01
    6302:	98 2f       	mov	r25, r24
    6304:	99 70       	andi	r25, 0x09	; 9
    6306:	91 30       	cpi	r25, 0x01	; 1
    6308:	31 f0       	breq	.+12     	; 0x6316 <dtoa_prf+0x6a>
    630a:	e1 fc       	sbrc	r14, 1
    630c:	06 c0       	rjmp	.+12     	; 0x631a <dtoa_prf+0x6e>
    630e:	e0 fe       	sbrs	r14, 0
    6310:	06 c0       	rjmp	.+12     	; 0x631e <dtoa_prf+0x72>
    6312:	90 e2       	ldi	r25, 0x20	; 32
    6314:	05 c0       	rjmp	.+10     	; 0x6320 <dtoa_prf+0x74>
    6316:	9d e2       	ldi	r25, 0x2D	; 45
    6318:	03 c0       	rjmp	.+6      	; 0x6320 <dtoa_prf+0x74>
    631a:	9b e2       	ldi	r25, 0x2B	; 43
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <dtoa_prf+0x74>
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	ee 2d       	mov	r30, r14
    6322:	e0 71       	andi	r30, 0x10	; 16
    6324:	83 ff       	sbrs	r24, 3
    6326:	3c c0       	rjmp	.+120    	; 0x63a0 <dtoa_prf+0xf4>
    6328:	91 11       	cpse	r25, r1
    632a:	02 c0       	rjmp	.+4      	; 0x6330 <dtoa_prf+0x84>
    632c:	83 e0       	ldi	r24, 0x03	; 3
    632e:	01 c0       	rjmp	.+2      	; 0x6332 <dtoa_prf+0x86>
    6330:	84 e0       	ldi	r24, 0x04	; 4
    6332:	81 17       	cp	r24, r17
    6334:	18 f4       	brcc	.+6      	; 0x633c <dtoa_prf+0x90>
    6336:	21 2f       	mov	r18, r17
    6338:	28 1b       	sub	r18, r24
    633a:	01 c0       	rjmp	.+2      	; 0x633e <dtoa_prf+0x92>
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	e1 11       	cpse	r30, r1
    6340:	0b c0       	rjmp	.+22     	; 0x6358 <dtoa_prf+0xac>
    6342:	f6 01       	movw	r30, r12
    6344:	82 2f       	mov	r24, r18
    6346:	30 e2       	ldi	r19, 0x20	; 32
    6348:	88 23       	and	r24, r24
    634a:	19 f0       	breq	.+6      	; 0x6352 <dtoa_prf+0xa6>
    634c:	31 93       	st	Z+, r19
    634e:	81 50       	subi	r24, 0x01	; 1
    6350:	fb cf       	rjmp	.-10     	; 0x6348 <dtoa_prf+0x9c>
    6352:	c2 0e       	add	r12, r18
    6354:	d1 1c       	adc	r13, r1
    6356:	20 e0       	ldi	r18, 0x00	; 0
    6358:	99 23       	and	r25, r25
    635a:	29 f0       	breq	.+10     	; 0x6366 <dtoa_prf+0xba>
    635c:	d6 01       	movw	r26, r12
    635e:	9c 93       	st	X, r25
    6360:	f6 01       	movw	r30, r12
    6362:	31 96       	adiw	r30, 0x01	; 1
    6364:	6f 01       	movw	r12, r30
    6366:	c6 01       	movw	r24, r12
    6368:	03 96       	adiw	r24, 0x03	; 3
    636a:	e2 fe       	sbrs	r14, 2
    636c:	0a c0       	rjmp	.+20     	; 0x6382 <dtoa_prf+0xd6>
    636e:	3e e4       	ldi	r19, 0x4E	; 78
    6370:	d6 01       	movw	r26, r12
    6372:	3c 93       	st	X, r19
    6374:	41 e4       	ldi	r20, 0x41	; 65
    6376:	11 96       	adiw	r26, 0x01	; 1
    6378:	4c 93       	st	X, r20
    637a:	11 97       	sbiw	r26, 0x01	; 1
    637c:	12 96       	adiw	r26, 0x02	; 2
    637e:	3c 93       	st	X, r19
    6380:	06 c0       	rjmp	.+12     	; 0x638e <dtoa_prf+0xe2>
    6382:	3e e6       	ldi	r19, 0x6E	; 110
    6384:	f6 01       	movw	r30, r12
    6386:	30 83       	st	Z, r19
    6388:	41 e6       	ldi	r20, 0x61	; 97
    638a:	41 83       	std	Z+1, r20	; 0x01
    638c:	32 83       	std	Z+2, r19	; 0x02
    638e:	fc 01       	movw	r30, r24
    6390:	32 2f       	mov	r19, r18
    6392:	40 e2       	ldi	r20, 0x20	; 32
    6394:	33 23       	and	r19, r19
    6396:	09 f4       	brne	.+2      	; 0x639a <dtoa_prf+0xee>
    6398:	42 c0       	rjmp	.+132    	; 0x641e <dtoa_prf+0x172>
    639a:	41 93       	st	Z+, r20
    639c:	31 50       	subi	r19, 0x01	; 1
    639e:	fa cf       	rjmp	.-12     	; 0x6394 <dtoa_prf+0xe8>
    63a0:	82 ff       	sbrs	r24, 2
    63a2:	44 c0       	rjmp	.+136    	; 0x642c <dtoa_prf+0x180>
    63a4:	91 11       	cpse	r25, r1
    63a6:	02 c0       	rjmp	.+4      	; 0x63ac <dtoa_prf+0x100>
    63a8:	83 e0       	ldi	r24, 0x03	; 3
    63aa:	01 c0       	rjmp	.+2      	; 0x63ae <dtoa_prf+0x102>
    63ac:	84 e0       	ldi	r24, 0x04	; 4
    63ae:	81 17       	cp	r24, r17
    63b0:	18 f4       	brcc	.+6      	; 0x63b8 <dtoa_prf+0x10c>
    63b2:	21 2f       	mov	r18, r17
    63b4:	28 1b       	sub	r18, r24
    63b6:	01 c0       	rjmp	.+2      	; 0x63ba <dtoa_prf+0x10e>
    63b8:	20 e0       	ldi	r18, 0x00	; 0
    63ba:	e1 11       	cpse	r30, r1
    63bc:	0b c0       	rjmp	.+22     	; 0x63d4 <dtoa_prf+0x128>
    63be:	f6 01       	movw	r30, r12
    63c0:	82 2f       	mov	r24, r18
    63c2:	30 e2       	ldi	r19, 0x20	; 32
    63c4:	88 23       	and	r24, r24
    63c6:	19 f0       	breq	.+6      	; 0x63ce <dtoa_prf+0x122>
    63c8:	31 93       	st	Z+, r19
    63ca:	81 50       	subi	r24, 0x01	; 1
    63cc:	fb cf       	rjmp	.-10     	; 0x63c4 <dtoa_prf+0x118>
    63ce:	c2 0e       	add	r12, r18
    63d0:	d1 1c       	adc	r13, r1
    63d2:	20 e0       	ldi	r18, 0x00	; 0
    63d4:	99 23       	and	r25, r25
    63d6:	29 f0       	breq	.+10     	; 0x63e2 <dtoa_prf+0x136>
    63d8:	d6 01       	movw	r26, r12
    63da:	9c 93       	st	X, r25
    63dc:	f6 01       	movw	r30, r12
    63de:	31 96       	adiw	r30, 0x01	; 1
    63e0:	6f 01       	movw	r12, r30
    63e2:	c6 01       	movw	r24, r12
    63e4:	03 96       	adiw	r24, 0x03	; 3
    63e6:	e2 fe       	sbrs	r14, 2
    63e8:	0b c0       	rjmp	.+22     	; 0x6400 <dtoa_prf+0x154>
    63ea:	39 e4       	ldi	r19, 0x49	; 73
    63ec:	d6 01       	movw	r26, r12
    63ee:	3c 93       	st	X, r19
    63f0:	3e e4       	ldi	r19, 0x4E	; 78
    63f2:	11 96       	adiw	r26, 0x01	; 1
    63f4:	3c 93       	st	X, r19
    63f6:	11 97       	sbiw	r26, 0x01	; 1
    63f8:	36 e4       	ldi	r19, 0x46	; 70
    63fa:	12 96       	adiw	r26, 0x02	; 2
    63fc:	3c 93       	st	X, r19
    63fe:	07 c0       	rjmp	.+14     	; 0x640e <dtoa_prf+0x162>
    6400:	39 e6       	ldi	r19, 0x69	; 105
    6402:	f6 01       	movw	r30, r12
    6404:	30 83       	st	Z, r19
    6406:	3e e6       	ldi	r19, 0x6E	; 110
    6408:	31 83       	std	Z+1, r19	; 0x01
    640a:	36 e6       	ldi	r19, 0x66	; 102
    640c:	32 83       	std	Z+2, r19	; 0x02
    640e:	fc 01       	movw	r30, r24
    6410:	32 2f       	mov	r19, r18
    6412:	40 e2       	ldi	r20, 0x20	; 32
    6414:	33 23       	and	r19, r19
    6416:	19 f0       	breq	.+6      	; 0x641e <dtoa_prf+0x172>
    6418:	41 93       	st	Z+, r20
    641a:	31 50       	subi	r19, 0x01	; 1
    641c:	fb cf       	rjmp	.-10     	; 0x6414 <dtoa_prf+0x168>
    641e:	fc 01       	movw	r30, r24
    6420:	e2 0f       	add	r30, r18
    6422:	f1 1d       	adc	r31, r1
    6424:	10 82       	st	Z, r1
    6426:	8e ef       	ldi	r24, 0xFE	; 254
    6428:	9f ef       	ldi	r25, 0xFF	; 255
    642a:	b7 c0       	rjmp	.+366    	; 0x659a <dtoa_prf+0x2ee>
    642c:	f1 e0       	ldi	r31, 0x01	; 1
    642e:	91 11       	cpse	r25, r1
    6430:	01 c0       	rjmp	.+2      	; 0x6434 <dtoa_prf+0x188>
    6432:	f0 e0       	ldi	r31, 0x00	; 0
    6434:	6f 2f       	mov	r22, r31
    6436:	70 e0       	ldi	r23, 0x00	; 0
    6438:	14 16       	cp	r1, r20
    643a:	15 06       	cpc	r1, r21
    643c:	24 f4       	brge	.+8      	; 0x6446 <dtoa_prf+0x19a>
    643e:	9a 01       	movw	r18, r20
    6440:	2f 5f       	subi	r18, 0xFF	; 255
    6442:	3f 4f       	sbci	r19, 0xFF	; 255
    6444:	02 c0       	rjmp	.+4      	; 0x644a <dtoa_prf+0x19e>
    6446:	21 e0       	ldi	r18, 0x01	; 1
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	26 0f       	add	r18, r22
    644c:	37 1f       	adc	r19, r23
    644e:	bb 20       	and	r11, r11
    6450:	29 f0       	breq	.+10     	; 0x645c <dtoa_prf+0x1b0>
    6452:	6b 2d       	mov	r22, r11
    6454:	70 e0       	ldi	r23, 0x00	; 0
    6456:	6f 5f       	subi	r22, 0xFF	; 255
    6458:	7f 4f       	sbci	r23, 0xFF	; 255
    645a:	02 c0       	rjmp	.+4      	; 0x6460 <dtoa_prf+0x1b4>
    645c:	60 e0       	ldi	r22, 0x00	; 0
    645e:	70 e0       	ldi	r23, 0x00	; 0
    6460:	26 0f       	add	r18, r22
    6462:	37 1f       	adc	r19, r23
    6464:	61 2f       	mov	r22, r17
    6466:	70 e0       	ldi	r23, 0x00	; 0
    6468:	26 17       	cp	r18, r22
    646a:	37 07       	cpc	r19, r23
    646c:	1c f4       	brge	.+6      	; 0x6474 <dtoa_prf+0x1c8>
    646e:	12 1b       	sub	r17, r18
    6470:	21 2f       	mov	r18, r17
    6472:	01 c0       	rjmp	.+2      	; 0x6476 <dtoa_prf+0x1ca>
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	3e 2d       	mov	r19, r14
    6478:	38 71       	andi	r19, 0x18	; 24
    647a:	59 f4       	brne	.+22     	; 0x6492 <dtoa_prf+0x1e6>
    647c:	d6 01       	movw	r26, r12
    647e:	32 2f       	mov	r19, r18
    6480:	60 e2       	ldi	r22, 0x20	; 32
    6482:	33 23       	and	r19, r19
    6484:	19 f0       	breq	.+6      	; 0x648c <dtoa_prf+0x1e0>
    6486:	6d 93       	st	X+, r22
    6488:	31 50       	subi	r19, 0x01	; 1
    648a:	fb cf       	rjmp	.-10     	; 0x6482 <dtoa_prf+0x1d6>
    648c:	c2 0e       	add	r12, r18
    648e:	d1 1c       	adc	r13, r1
    6490:	20 e0       	ldi	r18, 0x00	; 0
    6492:	ff 23       	and	r31, r31
    6494:	31 f0       	breq	.+12     	; 0x64a2 <dtoa_prf+0x1f6>
    6496:	d6 01       	movw	r26, r12
    6498:	9c 93       	st	X, r25
    649a:	b6 01       	movw	r22, r12
    649c:	6f 5f       	subi	r22, 0xFF	; 255
    649e:	7f 4f       	sbci	r23, 0xFF	; 255
    64a0:	6b 01       	movw	r12, r22
    64a2:	e1 11       	cpse	r30, r1
    64a4:	0b c0       	rjmp	.+22     	; 0x64bc <dtoa_prf+0x210>
    64a6:	f6 01       	movw	r30, r12
    64a8:	92 2f       	mov	r25, r18
    64aa:	30 e3       	ldi	r19, 0x30	; 48
    64ac:	99 23       	and	r25, r25
    64ae:	19 f0       	breq	.+6      	; 0x64b6 <dtoa_prf+0x20a>
    64b0:	31 93       	st	Z+, r19
    64b2:	91 50       	subi	r25, 0x01	; 1
    64b4:	fb cf       	rjmp	.-10     	; 0x64ac <dtoa_prf+0x200>
    64b6:	c2 0e       	add	r12, r18
    64b8:	d1 1c       	adc	r13, r1
    64ba:	20 e0       	ldi	r18, 0x00	; 0
    64bc:	9f 2d       	mov	r25, r15
    64be:	94 0f       	add	r25, r20
    64c0:	3a 81       	ldd	r19, Y+2	; 0x02
    64c2:	78 2f       	mov	r23, r24
    64c4:	70 71       	andi	r23, 0x10	; 16
    64c6:	a7 2e       	mov	r10, r23
    64c8:	84 ff       	sbrs	r24, 4
    64ca:	03 c0       	rjmp	.+6      	; 0x64d2 <dtoa_prf+0x226>
    64cc:	31 33       	cpi	r19, 0x31	; 49
    64ce:	09 f4       	brne	.+2      	; 0x64d2 <dtoa_prf+0x226>
    64d0:	91 50       	subi	r25, 0x01	; 1
    64d2:	19 16       	cp	r1, r25
    64d4:	24 f4       	brge	.+8      	; 0x64de <dtoa_prf+0x232>
    64d6:	99 30       	cpi	r25, 0x09	; 9
    64d8:	18 f0       	brcs	.+6      	; 0x64e0 <dtoa_prf+0x234>
    64da:	98 e0       	ldi	r25, 0x08	; 8
    64dc:	01 c0       	rjmp	.+2      	; 0x64e0 <dtoa_prf+0x234>
    64de:	91 e0       	ldi	r25, 0x01	; 1
    64e0:	e4 2f       	mov	r30, r20
    64e2:	85 2f       	mov	r24, r21
    64e4:	57 ff       	sbrs	r21, 7
    64e6:	02 c0       	rjmp	.+4      	; 0x64ec <dtoa_prf+0x240>
    64e8:	e0 e0       	ldi	r30, 0x00	; 0
    64ea:	80 e0       	ldi	r24, 0x00	; 0
    64ec:	6e 2f       	mov	r22, r30
    64ee:	78 2f       	mov	r23, r24
    64f0:	e0 e0       	ldi	r30, 0x00	; 0
    64f2:	f0 e0       	ldi	r31, 0x00	; 0
    64f4:	ae e2       	ldi	r26, 0x2E	; 46
    64f6:	9a 2e       	mov	r9, r26
    64f8:	3a 01       	movw	r6, r20
    64fa:	69 1a       	sub	r6, r25
    64fc:	71 08       	sbc	r7, r1
    64fe:	2a 01       	movw	r4, r20
    6500:	46 1a       	sub	r4, r22
    6502:	57 0a       	sbc	r5, r23
    6504:	0b 2d       	mov	r16, r11
    6506:	10 e0       	ldi	r17, 0x00	; 0
    6508:	11 95       	neg	r17
    650a:	01 95       	neg	r16
    650c:	11 09       	sbc	r17, r1
    650e:	6f 3f       	cpi	r22, 0xFF	; 255
    6510:	8f ef       	ldi	r24, 0xFF	; 255
    6512:	78 07       	cpc	r23, r24
    6514:	29 f4       	brne	.+10     	; 0x6520 <dtoa_prf+0x274>
    6516:	d6 01       	movw	r26, r12
    6518:	9c 92       	st	X, r9
    651a:	c6 01       	movw	r24, r12
    651c:	01 96       	adiw	r24, 0x01	; 1
    651e:	6c 01       	movw	r12, r24
    6520:	46 17       	cp	r20, r22
    6522:	57 07       	cpc	r21, r23
    6524:	84 f0       	brlt	.+32     	; 0x6546 <dtoa_prf+0x29a>
    6526:	66 16       	cp	r6, r22
    6528:	77 06       	cpc	r7, r23
    652a:	6c f4       	brge	.+26     	; 0x6546 <dtoa_prf+0x29a>
    652c:	7f 01       	movw	r14, r30
    652e:	e4 0c       	add	r14, r4
    6530:	f5 1c       	adc	r15, r5
    6532:	a1 e0       	ldi	r26, 0x01	; 1
    6534:	b0 e0       	ldi	r27, 0x00	; 0
    6536:	ac 0f       	add	r26, r28
    6538:	bd 1f       	adc	r27, r29
    653a:	ea 0e       	add	r14, r26
    653c:	fb 1e       	adc	r15, r27
    653e:	d7 01       	movw	r26, r14
    6540:	11 96       	adiw	r26, 0x01	; 1
    6542:	bc 90       	ld	r11, X
    6544:	02 c0       	rjmp	.+4      	; 0x654a <dtoa_prf+0x29e>
    6546:	90 e3       	ldi	r25, 0x30	; 48
    6548:	b9 2e       	mov	r11, r25
    654a:	61 50       	subi	r22, 0x01	; 1
    654c:	71 09       	sbc	r23, r1
    654e:	31 96       	adiw	r30, 0x01	; 1
    6550:	c6 01       	movw	r24, r12
    6552:	01 96       	adiw	r24, 0x01	; 1
    6554:	7c 01       	movw	r14, r24
    6556:	60 17       	cp	r22, r16
    6558:	71 07       	cpc	r23, r17
    655a:	24 f0       	brlt	.+8      	; 0x6564 <dtoa_prf+0x2b8>
    655c:	d6 01       	movw	r26, r12
    655e:	bc 92       	st	X, r11
    6560:	6c 01       	movw	r12, r24
    6562:	d5 cf       	rjmp	.-86     	; 0x650e <dtoa_prf+0x262>
    6564:	64 17       	cp	r22, r20
    6566:	75 07       	cpc	r23, r21
    6568:	41 f4       	brne	.+16     	; 0x657a <dtoa_prf+0x2ce>
    656a:	36 33       	cpi	r19, 0x36	; 54
    656c:	20 f4       	brcc	.+8      	; 0x6576 <dtoa_prf+0x2ca>
    656e:	35 33       	cpi	r19, 0x35	; 53
    6570:	21 f4       	brne	.+8      	; 0x657a <dtoa_prf+0x2ce>
    6572:	a1 10       	cpse	r10, r1
    6574:	02 c0       	rjmp	.+4      	; 0x657a <dtoa_prf+0x2ce>
    6576:	81 e3       	ldi	r24, 0x31	; 49
    6578:	b8 2e       	mov	r11, r24
    657a:	f6 01       	movw	r30, r12
    657c:	b0 82       	st	Z, r11
    657e:	f7 01       	movw	r30, r14
    6580:	82 2f       	mov	r24, r18
    6582:	90 e2       	ldi	r25, 0x20	; 32
    6584:	88 23       	and	r24, r24
    6586:	19 f0       	breq	.+6      	; 0x658e <dtoa_prf+0x2e2>
    6588:	91 93       	st	Z+, r25
    658a:	81 50       	subi	r24, 0x01	; 1
    658c:	fb cf       	rjmp	.-10     	; 0x6584 <dtoa_prf+0x2d8>
    658e:	f7 01       	movw	r30, r14
    6590:	e2 0f       	add	r30, r18
    6592:	f1 1d       	adc	r31, r1
    6594:	10 82       	st	Z, r1
    6596:	80 e0       	ldi	r24, 0x00	; 0
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	29 96       	adiw	r28, 0x09	; 9
    659c:	0f b6       	in	r0, 0x3f	; 63
    659e:	f8 94       	cli
    65a0:	de bf       	out	0x3e, r29	; 62
    65a2:	0f be       	out	0x3f, r0	; 63
    65a4:	cd bf       	out	0x3d, r28	; 61
    65a6:	df 91       	pop	r29
    65a8:	cf 91       	pop	r28
    65aa:	1f 91       	pop	r17
    65ac:	0f 91       	pop	r16
    65ae:	ff 90       	pop	r15
    65b0:	ef 90       	pop	r14
    65b2:	df 90       	pop	r13
    65b4:	cf 90       	pop	r12
    65b6:	bf 90       	pop	r11
    65b8:	af 90       	pop	r10
    65ba:	9f 90       	pop	r9
    65bc:	7f 90       	pop	r7
    65be:	6f 90       	pop	r6
    65c0:	5f 90       	pop	r5
    65c2:	4f 90       	pop	r4
    65c4:	08 95       	ret

000065c6 <__ftoa_engine>:
    65c6:	28 30       	cpi	r18, 0x08	; 8
    65c8:	08 f0       	brcs	.+2      	; 0x65cc <__ftoa_engine+0x6>
    65ca:	27 e0       	ldi	r18, 0x07	; 7
    65cc:	33 27       	eor	r19, r19
    65ce:	da 01       	movw	r26, r20
    65d0:	99 0f       	add	r25, r25
    65d2:	31 1d       	adc	r19, r1
    65d4:	87 fd       	sbrc	r24, 7
    65d6:	91 60       	ori	r25, 0x01	; 1
    65d8:	00 96       	adiw	r24, 0x00	; 0
    65da:	61 05       	cpc	r22, r1
    65dc:	71 05       	cpc	r23, r1
    65de:	39 f4       	brne	.+14     	; 0x65ee <__ftoa_engine+0x28>
    65e0:	32 60       	ori	r19, 0x02	; 2
    65e2:	2e 5f       	subi	r18, 0xFE	; 254
    65e4:	3d 93       	st	X+, r19
    65e6:	30 e3       	ldi	r19, 0x30	; 48
    65e8:	2a 95       	dec	r18
    65ea:	e1 f7       	brne	.-8      	; 0x65e4 <__ftoa_engine+0x1e>
    65ec:	08 95       	ret
    65ee:	9f 3f       	cpi	r25, 0xFF	; 255
    65f0:	30 f0       	brcs	.+12     	; 0x65fe <__ftoa_engine+0x38>
    65f2:	80 38       	cpi	r24, 0x80	; 128
    65f4:	71 05       	cpc	r23, r1
    65f6:	61 05       	cpc	r22, r1
    65f8:	09 f0       	breq	.+2      	; 0x65fc <__ftoa_engine+0x36>
    65fa:	3c 5f       	subi	r19, 0xFC	; 252
    65fc:	3c 5f       	subi	r19, 0xFC	; 252
    65fe:	3d 93       	st	X+, r19
    6600:	91 30       	cpi	r25, 0x01	; 1
    6602:	08 f0       	brcs	.+2      	; 0x6606 <__ftoa_engine+0x40>
    6604:	80 68       	ori	r24, 0x80	; 128
    6606:	91 1d       	adc	r25, r1
    6608:	df 93       	push	r29
    660a:	cf 93       	push	r28
    660c:	1f 93       	push	r17
    660e:	0f 93       	push	r16
    6610:	ff 92       	push	r15
    6612:	ef 92       	push	r14
    6614:	19 2f       	mov	r17, r25
    6616:	98 7f       	andi	r25, 0xF8	; 248
    6618:	96 95       	lsr	r25
    661a:	e9 2f       	mov	r30, r25
    661c:	96 95       	lsr	r25
    661e:	96 95       	lsr	r25
    6620:	e9 0f       	add	r30, r25
    6622:	ff 27       	eor	r31, r31
    6624:	e1 51       	subi	r30, 0x11	; 17
    6626:	fd 4f       	sbci	r31, 0xFD	; 253
    6628:	99 27       	eor	r25, r25
    662a:	33 27       	eor	r19, r19
    662c:	ee 24       	eor	r14, r14
    662e:	ff 24       	eor	r15, r15
    6630:	a7 01       	movw	r20, r14
    6632:	e7 01       	movw	r28, r14
    6634:	05 90       	lpm	r0, Z+
    6636:	08 94       	sec
    6638:	07 94       	ror	r0
    663a:	28 f4       	brcc	.+10     	; 0x6646 <__ftoa_engine+0x80>
    663c:	36 0f       	add	r19, r22
    663e:	e7 1e       	adc	r14, r23
    6640:	f8 1e       	adc	r15, r24
    6642:	49 1f       	adc	r20, r25
    6644:	51 1d       	adc	r21, r1
    6646:	66 0f       	add	r22, r22
    6648:	77 1f       	adc	r23, r23
    664a:	88 1f       	adc	r24, r24
    664c:	99 1f       	adc	r25, r25
    664e:	06 94       	lsr	r0
    6650:	a1 f7       	brne	.-24     	; 0x663a <__ftoa_engine+0x74>
    6652:	05 90       	lpm	r0, Z+
    6654:	07 94       	ror	r0
    6656:	28 f4       	brcc	.+10     	; 0x6662 <__ftoa_engine+0x9c>
    6658:	e7 0e       	add	r14, r23
    665a:	f8 1e       	adc	r15, r24
    665c:	49 1f       	adc	r20, r25
    665e:	56 1f       	adc	r21, r22
    6660:	c1 1d       	adc	r28, r1
    6662:	77 0f       	add	r23, r23
    6664:	88 1f       	adc	r24, r24
    6666:	99 1f       	adc	r25, r25
    6668:	66 1f       	adc	r22, r22
    666a:	06 94       	lsr	r0
    666c:	a1 f7       	brne	.-24     	; 0x6656 <__ftoa_engine+0x90>
    666e:	05 90       	lpm	r0, Z+
    6670:	07 94       	ror	r0
    6672:	28 f4       	brcc	.+10     	; 0x667e <__ftoa_engine+0xb8>
    6674:	f8 0e       	add	r15, r24
    6676:	49 1f       	adc	r20, r25
    6678:	56 1f       	adc	r21, r22
    667a:	c7 1f       	adc	r28, r23
    667c:	d1 1d       	adc	r29, r1
    667e:	88 0f       	add	r24, r24
    6680:	99 1f       	adc	r25, r25
    6682:	66 1f       	adc	r22, r22
    6684:	77 1f       	adc	r23, r23
    6686:	06 94       	lsr	r0
    6688:	a1 f7       	brne	.-24     	; 0x6672 <__ftoa_engine+0xac>
    668a:	05 90       	lpm	r0, Z+
    668c:	07 94       	ror	r0
    668e:	20 f4       	brcc	.+8      	; 0x6698 <__ftoa_engine+0xd2>
    6690:	49 0f       	add	r20, r25
    6692:	56 1f       	adc	r21, r22
    6694:	c7 1f       	adc	r28, r23
    6696:	d8 1f       	adc	r29, r24
    6698:	99 0f       	add	r25, r25
    669a:	66 1f       	adc	r22, r22
    669c:	77 1f       	adc	r23, r23
    669e:	88 1f       	adc	r24, r24
    66a0:	06 94       	lsr	r0
    66a2:	a9 f7       	brne	.-22     	; 0x668e <__ftoa_engine+0xc8>
    66a4:	84 91       	lpm	r24, Z
    66a6:	10 95       	com	r17
    66a8:	17 70       	andi	r17, 0x07	; 7
    66aa:	41 f0       	breq	.+16     	; 0x66bc <__ftoa_engine+0xf6>
    66ac:	d6 95       	lsr	r29
    66ae:	c7 95       	ror	r28
    66b0:	57 95       	ror	r21
    66b2:	47 95       	ror	r20
    66b4:	f7 94       	ror	r15
    66b6:	e7 94       	ror	r14
    66b8:	1a 95       	dec	r17
    66ba:	c1 f7       	brne	.-16     	; 0x66ac <__ftoa_engine+0xe6>
    66bc:	e5 e9       	ldi	r30, 0x95	; 149
    66be:	f2 e0       	ldi	r31, 0x02	; 2
    66c0:	68 94       	set
    66c2:	15 90       	lpm	r1, Z+
    66c4:	15 91       	lpm	r17, Z+
    66c6:	35 91       	lpm	r19, Z+
    66c8:	65 91       	lpm	r22, Z+
    66ca:	95 91       	lpm	r25, Z+
    66cc:	05 90       	lpm	r0, Z+
    66ce:	7f e2       	ldi	r23, 0x2F	; 47
    66d0:	73 95       	inc	r23
    66d2:	e1 18       	sub	r14, r1
    66d4:	f1 0a       	sbc	r15, r17
    66d6:	43 0b       	sbc	r20, r19
    66d8:	56 0b       	sbc	r21, r22
    66da:	c9 0b       	sbc	r28, r25
    66dc:	d0 09       	sbc	r29, r0
    66de:	c0 f7       	brcc	.-16     	; 0x66d0 <__ftoa_engine+0x10a>
    66e0:	e1 0c       	add	r14, r1
    66e2:	f1 1e       	adc	r15, r17
    66e4:	43 1f       	adc	r20, r19
    66e6:	56 1f       	adc	r21, r22
    66e8:	c9 1f       	adc	r28, r25
    66ea:	d0 1d       	adc	r29, r0
    66ec:	7e f4       	brtc	.+30     	; 0x670c <__ftoa_engine+0x146>
    66ee:	70 33       	cpi	r23, 0x30	; 48
    66f0:	11 f4       	brne	.+4      	; 0x66f6 <__ftoa_engine+0x130>
    66f2:	8a 95       	dec	r24
    66f4:	e6 cf       	rjmp	.-52     	; 0x66c2 <__ftoa_engine+0xfc>
    66f6:	e8 94       	clt
    66f8:	01 50       	subi	r16, 0x01	; 1
    66fa:	30 f0       	brcs	.+12     	; 0x6708 <__ftoa_engine+0x142>
    66fc:	08 0f       	add	r16, r24
    66fe:	0a f4       	brpl	.+2      	; 0x6702 <__ftoa_engine+0x13c>
    6700:	00 27       	eor	r16, r16
    6702:	02 17       	cp	r16, r18
    6704:	08 f4       	brcc	.+2      	; 0x6708 <__ftoa_engine+0x142>
    6706:	20 2f       	mov	r18, r16
    6708:	23 95       	inc	r18
    670a:	02 2f       	mov	r16, r18
    670c:	7a 33       	cpi	r23, 0x3A	; 58
    670e:	28 f0       	brcs	.+10     	; 0x671a <__ftoa_engine+0x154>
    6710:	79 e3       	ldi	r23, 0x39	; 57
    6712:	7d 93       	st	X+, r23
    6714:	2a 95       	dec	r18
    6716:	e9 f7       	brne	.-6      	; 0x6712 <__ftoa_engine+0x14c>
    6718:	10 c0       	rjmp	.+32     	; 0x673a <__ftoa_engine+0x174>
    671a:	7d 93       	st	X+, r23
    671c:	2a 95       	dec	r18
    671e:	89 f6       	brne	.-94     	; 0x66c2 <__ftoa_engine+0xfc>
    6720:	06 94       	lsr	r0
    6722:	97 95       	ror	r25
    6724:	67 95       	ror	r22
    6726:	37 95       	ror	r19
    6728:	17 95       	ror	r17
    672a:	17 94       	ror	r1
    672c:	e1 18       	sub	r14, r1
    672e:	f1 0a       	sbc	r15, r17
    6730:	43 0b       	sbc	r20, r19
    6732:	56 0b       	sbc	r21, r22
    6734:	c9 0b       	sbc	r28, r25
    6736:	d0 09       	sbc	r29, r0
    6738:	98 f0       	brcs	.+38     	; 0x6760 <__ftoa_engine+0x19a>
    673a:	23 95       	inc	r18
    673c:	7e 91       	ld	r23, -X
    673e:	73 95       	inc	r23
    6740:	7a 33       	cpi	r23, 0x3A	; 58
    6742:	08 f0       	brcs	.+2      	; 0x6746 <__ftoa_engine+0x180>
    6744:	70 e3       	ldi	r23, 0x30	; 48
    6746:	7c 93       	st	X, r23
    6748:	20 13       	cpse	r18, r16
    674a:	b8 f7       	brcc	.-18     	; 0x673a <__ftoa_engine+0x174>
    674c:	7e 91       	ld	r23, -X
    674e:	70 61       	ori	r23, 0x10	; 16
    6750:	7d 93       	st	X+, r23
    6752:	30 f0       	brcs	.+12     	; 0x6760 <__ftoa_engine+0x19a>
    6754:	83 95       	inc	r24
    6756:	71 e3       	ldi	r23, 0x31	; 49
    6758:	7d 93       	st	X+, r23
    675a:	70 e3       	ldi	r23, 0x30	; 48
    675c:	2a 95       	dec	r18
    675e:	e1 f7       	brne	.-8      	; 0x6758 <__ftoa_engine+0x192>
    6760:	11 24       	eor	r1, r1
    6762:	ef 90       	pop	r14
    6764:	ff 90       	pop	r15
    6766:	0f 91       	pop	r16
    6768:	1f 91       	pop	r17
    676a:	cf 91       	pop	r28
    676c:	df 91       	pop	r29
    676e:	99 27       	eor	r25, r25
    6770:	87 fd       	sbrc	r24, 7
    6772:	90 95       	com	r25
    6774:	08 95       	ret

00006776 <__ctype_isfalse>:
    6776:	99 27       	eor	r25, r25
    6778:	88 27       	eor	r24, r24

0000677a <__ctype_istrue>:
    677a:	08 95       	ret

0000677c <strrev>:
    677c:	dc 01       	movw	r26, r24
    677e:	fc 01       	movw	r30, r24
    6780:	67 2f       	mov	r22, r23
    6782:	71 91       	ld	r23, Z+
    6784:	77 23       	and	r23, r23
    6786:	e1 f7       	brne	.-8      	; 0x6780 <strrev+0x4>
    6788:	32 97       	sbiw	r30, 0x02	; 2
    678a:	04 c0       	rjmp	.+8      	; 0x6794 <strrev+0x18>
    678c:	7c 91       	ld	r23, X
    678e:	6d 93       	st	X+, r22
    6790:	70 83       	st	Z, r23
    6792:	62 91       	ld	r22, -Z
    6794:	ae 17       	cp	r26, r30
    6796:	bf 07       	cpc	r27, r31
    6798:	c8 f3       	brcs	.-14     	; 0x678c <strrev+0x10>
    679a:	08 95       	ret

0000679c <eeprom_read_byte>:
    679c:	f9 99       	sbic	0x1f, 1	; 31
    679e:	fe cf       	rjmp	.-4      	; 0x679c <eeprom_read_byte>
    67a0:	92 bd       	out	0x22, r25	; 34
    67a2:	81 bd       	out	0x21, r24	; 33
    67a4:	f8 9a       	sbi	0x1f, 0	; 31
    67a6:	99 27       	eor	r25, r25
    67a8:	80 b5       	in	r24, 0x20	; 32
    67aa:	08 95       	ret

000067ac <eeprom_write_byte>:
    67ac:	26 2f       	mov	r18, r22

000067ae <eeprom_write_r18>:
    67ae:	f9 99       	sbic	0x1f, 1	; 31
    67b0:	fe cf       	rjmp	.-4      	; 0x67ae <eeprom_write_r18>
    67b2:	1f ba       	out	0x1f, r1	; 31
    67b4:	92 bd       	out	0x22, r25	; 34
    67b6:	81 bd       	out	0x21, r24	; 33
    67b8:	20 bd       	out	0x20, r18	; 32
    67ba:	0f b6       	in	r0, 0x3f	; 63
    67bc:	f8 94       	cli
    67be:	fa 9a       	sbi	0x1f, 2	; 31
    67c0:	f9 9a       	sbi	0x1f, 1	; 31
    67c2:	0f be       	out	0x3f, r0	; 63
    67c4:	01 96       	adiw	r24, 0x01	; 1
    67c6:	08 95       	ret

000067c8 <__do_global_dtors>:
    67c8:	12 e0       	ldi	r17, 0x02	; 2
    67ca:	c0 e6       	ldi	r28, 0x60	; 96
    67cc:	d2 e0       	ldi	r29, 0x02	; 2
    67ce:	03 c0       	rjmp	.+6      	; 0x67d6 <__do_global_dtors+0xe>
    67d0:	fe 01       	movw	r30, r28
    67d2:	c2 d8       	rcall	.-3708   	; 0x5958 <__tablejump2__>
    67d4:	21 96       	adiw	r28, 0x01	; 1
    67d6:	c2 36       	cpi	r28, 0x62	; 98
    67d8:	d1 07       	cpc	r29, r17
    67da:	d1 f7       	brne	.-12     	; 0x67d0 <__do_global_dtors+0x8>
    67dc:	f8 94       	cli

000067de <__stop_program>:
    67de:	ff cf       	rjmp	.-2      	; 0x67de <__stop_program>
