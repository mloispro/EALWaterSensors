
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000745e  00007512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000745e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000446  008001d2  008001d2  000075e4  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000075e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000075ea  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007648  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000010f0  00000000  00000000  00007688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002ae32  00000000  00000000  00008778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000052fa  00000000  00000000  000335aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000baf2  00000000  00000000  000388a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000033e8  00000000  00000000  00044398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000135ec  00000000  00000000  00047780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009e4c  00000000  00000000  0005ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001050  00000000  00000000  00064bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00010338  00000000  00000000  00065c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c2       	rjmp	.+1214   	; 0x4c0 <__dtors_end>
       2:	00 00       	nop
       4:	85 c2       	rjmp	.+1290   	; 0x510 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c2       	rjmp	.+1286   	; 0x510 <__bad_interrupt>
       a:	00 00       	nop
       c:	0b c7       	rjmp	.+3606   	; 0xe24 <__vector_3>
       e:	00 00       	nop
      10:	09 c7       	rjmp	.+3602   	; 0xe24 <__vector_3>
      12:	00 00       	nop
      14:	07 c7       	rjmp	.+3598   	; 0xe24 <__vector_3>
      16:	00 00       	nop
      18:	7b c2       	rjmp	.+1270   	; 0x510 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c2       	rjmp	.+1266   	; 0x510 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c2       	rjmp	.+1262   	; 0x510 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c2       	rjmp	.+1258   	; 0x510 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c2       	rjmp	.+1254   	; 0x510 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c2       	rjmp	.+1250   	; 0x510 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c2       	rjmp	.+1246   	; 0x510 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c2       	rjmp	.+1242   	; 0x510 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c2       	rjmp	.+1238   	; 0x510 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c2       	rjmp	.+1234   	; 0x510 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 59 2e 	jmp	0x5cb2	; 0x5cb2 <__vector_16>
      44:	65 c2       	rjmp	.+1226   	; 0x510 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_18>
      4c:	0c 94 a4 2b 	jmp	0x5748	; 0x5748 <__vector_19>
      50:	5f c2       	rjmp	.+1214   	; 0x510 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c2       	rjmp	.+1210   	; 0x510 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c2       	rjmp	.+1206   	; 0x510 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c2       	rjmp	.+1202   	; 0x510 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c3       	rjmp	.+1654   	; 0x6d8 <__vector_24>
      62:	00 00       	nop
      64:	55 c2       	rjmp	.+1194   	; 0x510 <__bad_interrupt>
      66:	00 00       	nop
      68:	99 04       	cpc	r9, r9
      6a:	9d 04       	cpc	r9, r13
      6c:	9d 04       	cpc	r9, r13
      6e:	9d 04       	cpc	r9, r13
      70:	9d 04       	cpc	r9, r13
      72:	9d 04       	cpc	r9, r13
      74:	9d 04       	cpc	r9, r13
      76:	9d 04       	cpc	r9, r13
      78:	9d 03       	fmulsu	r17, r21
      7a:	9d 04       	cpc	r9, r13
      7c:	9d 04       	cpc	r9, r13
      7e:	9d 04       	cpc	r9, r13
      80:	9d 04       	cpc	r9, r13
      82:	9d 04       	cpc	r9, r13
      84:	9d 04       	cpc	r9, r13
      86:	9d 04       	cpc	r9, r13
      88:	9d 03       	fmulsu	r17, r21
      8a:	9d 04       	cpc	r9, r13
      8c:	9d 04       	cpc	r9, r13
      8e:	9d 04       	cpc	r9, r13
      90:	9d 04       	cpc	r9, r13
      92:	9d 04       	cpc	r9, r13
      94:	9d 04       	cpc	r9, r13
      96:	9d 04       	cpc	r9, r13
      98:	a6 03       	fmuls	r18, r22
      9a:	9d 04       	cpc	r9, r13
      9c:	9d 04       	cpc	r9, r13
      9e:	9d 04       	cpc	r9, r13
      a0:	9d 04       	cpc	r9, r13
      a2:	9d 04       	cpc	r9, r13
      a4:	9d 04       	cpc	r9, r13
      a6:	9d 04       	cpc	r9, r13
      a8:	d1 03       	fmuls	r21, r17
      aa:	9d 04       	cpc	r9, r13
      ac:	9d 04       	cpc	r9, r13
      ae:	9d 04       	cpc	r9, r13
      b0:	9d 04       	cpc	r9, r13
      b2:	9d 04       	cpc	r9, r13
      b4:	9d 04       	cpc	r9, r13
      b6:	9d 04       	cpc	r9, r13
      b8:	a6 03       	fmuls	r18, r22
      ba:	9d 04       	cpc	r9, r13
      bc:	9d 04       	cpc	r9, r13
      be:	9d 04       	cpc	r9, r13
      c0:	9d 04       	cpc	r9, r13
      c2:	9d 04       	cpc	r9, r13
      c4:	9d 04       	cpc	r9, r13
      c6:	9d 04       	cpc	r9, r13
      c8:	d6 03       	fmuls	r21, r22
      ca:	9d 04       	cpc	r9, r13
      cc:	9d 04       	cpc	r9, r13
      ce:	9d 04       	cpc	r9, r13
      d0:	9d 04       	cpc	r9, r13
      d2:	9d 04       	cpc	r9, r13
      d4:	9d 04       	cpc	r9, r13
      d6:	9d 04       	cpc	r9, r13
      d8:	db 03       	fmulsu	r21, r19
      da:	9d 04       	cpc	r9, r13
      dc:	9d 04       	cpc	r9, r13
      de:	9d 04       	cpc	r9, r13
      e0:	9d 04       	cpc	r9, r13
      e2:	9d 04       	cpc	r9, r13
      e4:	9d 04       	cpc	r9, r13
      e6:	9d 04       	cpc	r9, r13
      e8:	f0 03       	fmuls	r23, r16
      ea:	9d 04       	cpc	r9, r13
      ec:	9d 04       	cpc	r9, r13
      ee:	9d 04       	cpc	r9, r13
      f0:	9d 04       	cpc	r9, r13
      f2:	9d 04       	cpc	r9, r13
      f4:	9d 04       	cpc	r9, r13
      f6:	9d 04       	cpc	r9, r13
      f8:	1d 04       	cpc	r1, r13
      fa:	9d 04       	cpc	r9, r13
      fc:	9d 04       	cpc	r9, r13
      fe:	9d 04       	cpc	r9, r13
     100:	9d 04       	cpc	r9, r13
     102:	9d 04       	cpc	r9, r13
     104:	9d 04       	cpc	r9, r13
     106:	9d 04       	cpc	r9, r13
     108:	e0 03       	fmuls	r22, r16
     10a:	9d 04       	cpc	r9, r13
     10c:	9d 04       	cpc	r9, r13
     10e:	9d 04       	cpc	r9, r13
     110:	9d 04       	cpc	r9, r13
     112:	9d 04       	cpc	r9, r13
     114:	9d 04       	cpc	r9, r13
     116:	9d 04       	cpc	r9, r13
     118:	fc 03       	fmulsu	r23, r20
     11a:	9d 04       	cpc	r9, r13
     11c:	9d 04       	cpc	r9, r13
     11e:	9d 04       	cpc	r9, r13
     120:	9d 04       	cpc	r9, r13
     122:	9d 04       	cpc	r9, r13
     124:	9d 04       	cpc	r9, r13
     126:	9d 04       	cpc	r9, r13
     128:	1f 04       	cpc	r1, r15
     12a:	9d 04       	cpc	r9, r13
     12c:	9d 04       	cpc	r9, r13
     12e:	9d 04       	cpc	r9, r13
     130:	9d 04       	cpc	r9, r13
     132:	9d 04       	cpc	r9, r13
     134:	9d 04       	cpc	r9, r13
     136:	9d 04       	cpc	r9, r13
     138:	1f 04       	cpc	r1, r15
     13a:	9d 04       	cpc	r9, r13
     13c:	9d 04       	cpc	r9, r13
     13e:	9d 04       	cpc	r9, r13
     140:	9d 04       	cpc	r9, r13
     142:	9d 04       	cpc	r9, r13
     144:	9d 04       	cpc	r9, r13
     146:	9d 04       	cpc	r9, r13
     148:	1f 04       	cpc	r1, r15
     14a:	9d 04       	cpc	r9, r13
     14c:	9d 04       	cpc	r9, r13
     14e:	9d 04       	cpc	r9, r13
     150:	9d 04       	cpc	r9, r13
     152:	9d 04       	cpc	r9, r13
     154:	9d 04       	cpc	r9, r13
     156:	9d 04       	cpc	r9, r13
     158:	1f 04       	cpc	r1, r15
     15a:	9d 04       	cpc	r9, r13
     15c:	9d 04       	cpc	r9, r13
     15e:	9d 04       	cpc	r9, r13
     160:	9d 04       	cpc	r9, r13
     162:	9d 04       	cpc	r9, r13
     164:	9d 04       	cpc	r9, r13
     166:	9d 04       	cpc	r9, r13
     168:	27 04       	cpc	r2, r7
     16a:	9d 04       	cpc	r9, r13
     16c:	9d 04       	cpc	r9, r13
     16e:	9d 04       	cpc	r9, r13
     170:	9d 04       	cpc	r9, r13
     172:	9d 04       	cpc	r9, r13
     174:	9d 04       	cpc	r9, r13
     176:	9d 04       	cpc	r9, r13
     178:	5f 04       	cpc	r5, r15
     17a:	9d 04       	cpc	r9, r13
     17c:	9d 04       	cpc	r9, r13
     17e:	9d 04       	cpc	r9, r13
     180:	9d 04       	cpc	r9, r13
     182:	9d 04       	cpc	r9, r13
     184:	9d 04       	cpc	r9, r13
     186:	9d 04       	cpc	r9, r13
     188:	27 04       	cpc	r2, r7
     18a:	9d 04       	cpc	r9, r13
     18c:	9d 04       	cpc	r9, r13
     18e:	9d 04       	cpc	r9, r13
     190:	9d 04       	cpc	r9, r13
     192:	9d 04       	cpc	r9, r13
     194:	9d 04       	cpc	r9, r13
     196:	9d 04       	cpc	r9, r13
     198:	5f 04       	cpc	r5, r15
     19a:	9d 04       	cpc	r9, r13
     19c:	9d 04       	cpc	r9, r13
     19e:	9d 04       	cpc	r9, r13
     1a0:	9d 04       	cpc	r9, r13
     1a2:	9d 04       	cpc	r9, r13
     1a4:	9d 04       	cpc	r9, r13
     1a6:	9d 04       	cpc	r9, r13
     1a8:	41 04       	cpc	r4, r1
     1aa:	9d 04       	cpc	r9, r13
     1ac:	9d 04       	cpc	r9, r13
     1ae:	9d 04       	cpc	r9, r13
     1b0:	9d 04       	cpc	r9, r13
     1b2:	9d 04       	cpc	r9, r13
     1b4:	9d 04       	cpc	r9, r13
     1b6:	9d 04       	cpc	r9, r13
     1b8:	62 04       	cpc	r6, r2
     1ba:	9d 04       	cpc	r9, r13
     1bc:	9d 04       	cpc	r9, r13
     1be:	9d 04       	cpc	r9, r13
     1c0:	9d 04       	cpc	r9, r13
     1c2:	9d 04       	cpc	r9, r13
     1c4:	9d 04       	cpc	r9, r13
     1c6:	9d 04       	cpc	r9, r13
     1c8:	62 04       	cpc	r6, r2
     1ca:	9d 04       	cpc	r9, r13
     1cc:	9d 04       	cpc	r9, r13
     1ce:	9d 04       	cpc	r9, r13
     1d0:	9d 04       	cpc	r9, r13
     1d2:	9d 04       	cpc	r9, r13
     1d4:	9d 04       	cpc	r9, r13
     1d6:	9d 04       	cpc	r9, r13
     1d8:	78 04       	cpc	r7, r8
     1da:	9d 04       	cpc	r9, r13
     1dc:	9d 04       	cpc	r9, r13
     1de:	9d 04       	cpc	r9, r13
     1e0:	9d 04       	cpc	r9, r13
     1e2:	9d 04       	cpc	r9, r13
     1e4:	9d 04       	cpc	r9, r13
     1e6:	9d 04       	cpc	r9, r13
     1e8:	94 04       	cpc	r9, r4
     1ea:	9d 04       	cpc	r9, r13
     1ec:	9d 04       	cpc	r9, r13
     1ee:	9d 04       	cpc	r9, r13
     1f0:	9d 04       	cpc	r9, r13
     1f2:	9d 04       	cpc	r9, r13
     1f4:	9d 04       	cpc	r9, r13
     1f6:	9d 04       	cpc	r9, r13
     1f8:	94 04       	cpc	r9, r4
     1fa:	9d 04       	cpc	r9, r13
     1fc:	9d 04       	cpc	r9, r13
     1fe:	9d 04       	cpc	r9, r13
     200:	9d 04       	cpc	r9, r13
     202:	9d 04       	cpc	r9, r13
     204:	9d 04       	cpc	r9, r13
     206:	9d 04       	cpc	r9, r13
     208:	9d 04       	cpc	r9, r13
     20a:	9d 04       	cpc	r9, r13
     20c:	9d 04       	cpc	r9, r13
     20e:	9d 04       	cpc	r9, r13
     210:	9d 04       	cpc	r9, r13
     212:	9d 04       	cpc	r9, r13
     214:	9d 04       	cpc	r9, r13
     216:	9d 04       	cpc	r9, r13
     218:	9d 04       	cpc	r9, r13
     21a:	9d 04       	cpc	r9, r13
     21c:	9d 04       	cpc	r9, r13
     21e:	9d 04       	cpc	r9, r13
     220:	9d 04       	cpc	r9, r13
     222:	9d 04       	cpc	r9, r13
     224:	9d 04       	cpc	r9, r13
     226:	9d 04       	cpc	r9, r13
     228:	9d 04       	cpc	r9, r13
     22a:	9d 04       	cpc	r9, r13
     22c:	9d 04       	cpc	r9, r13
     22e:	9d 04       	cpc	r9, r13
     230:	9d 04       	cpc	r9, r13
     232:	9d 04       	cpc	r9, r13
     234:	9d 04       	cpc	r9, r13
     236:	9d 04       	cpc	r9, r13
     238:	9d 04       	cpc	r9, r13
     23a:	9d 04       	cpc	r9, r13
     23c:	9d 04       	cpc	r9, r13
     23e:	9d 04       	cpc	r9, r13
     240:	9d 04       	cpc	r9, r13
     242:	9d 04       	cpc	r9, r13
     244:	9d 04       	cpc	r9, r13
     246:	9d 04       	cpc	r9, r13
     248:	9d 04       	cpc	r9, r13
     24a:	9d 04       	cpc	r9, r13
     24c:	9d 04       	cpc	r9, r13
     24e:	9d 04       	cpc	r9, r13
     250:	9d 04       	cpc	r9, r13
     252:	9d 04       	cpc	r9, r13
     254:	9d 04       	cpc	r9, r13
     256:	9d 04       	cpc	r9, r13
     258:	9d 04       	cpc	r9, r13

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     29d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2ad:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2bd:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2cd:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2dd:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2ed:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2fd:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     30d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     31d:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     32d:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     33d:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     34d:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     35d:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     36d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     37d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     38d:	3d 27                                               ='

0000038f <_ZZN7LCDBase9ClearLineEsE3__c>:
     38f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000003a0 <_ZZN7MathExt16CalculateAverageEPiiE3__c>:
     3a0:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3b0:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3c0:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003ca <_ZZN8PHSensor11CalculatePHEvE3__c>:
     3ca:	41 64 64 69 6e 67 20 70 68 56 61 6c 3a 20 00        Adding phVal: .

000003d9 <_ZZN8PHSensor11CalculatePHEvE3__c_0>:
     3d9:	53 65 74 74 69 6e 67 20 70 68 56 61 6c 3a 20 00     Setting phVal: .

000003e9 <_ZZN15WaterSensorWire5SetupEvE3__c>:
     3e9:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

000003f2 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     3f2:	63 6d 64 3a 20 00                                   cmd: .

000003f8 <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     3f8:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

00000402 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     402:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     412:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     422:	76 65 64 3a 20 00                                   ved: .

00000428 <_ZZN15WaterSensorWire7RequestEvE3__c>:
     428:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     438:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

00000443 <_ZZ11AsyncDoWorkvE3__c>:
     443:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     453:	64 00                                               d.

00000455 <digital_pin_to_timer_PGM>:
     455:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     465:	00 00 00 00                                         ....

00000469 <digital_pin_to_bit_mask_PGM>:
     469:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     479:	04 08 10 20                                         ... 

0000047d <digital_pin_to_port_PGM>:
     47d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     48d:	03 03 03 03                                         ....

00000491 <port_to_input_PGM>:
     491:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000049b <port_to_output_PGM>:
     49b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004a5 <port_to_mode_PGM>:
     4a5:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004b0 <__ctors_start>:
     4b0:	ca 06       	cpc	r12, r26
     4b2:	e5 0b       	sbc	r30, r21
     4b4:	0f 26       	eor	r0, r31
     4b6:	fd 26       	eor	r15, r29
     4b8:	1d 28       	or	r1, r13
     4ba:	d2 2b       	or	r29, r18

000004bc <__ctors_end>:
     4bc:	1d 26       	eor	r1, r29
     4be:	0b 27       	eor	r16, r27

000004c0 <__dtors_end>:
     4c0:	11 24       	eor	r1, r1
     4c2:	1f be       	out	0x3f, r1	; 63
     4c4:	cf ef       	ldi	r28, 0xFF	; 255
     4c6:	d8 e0       	ldi	r29, 0x08	; 8
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	cd bf       	out	0x3d, r28	; 61

000004cc <__do_copy_data>:
     4cc:	11 e0       	ldi	r17, 0x01	; 1
     4ce:	a0 e0       	ldi	r26, 0x00	; 0
     4d0:	b1 e0       	ldi	r27, 0x01	; 1
     4d2:	ee e5       	ldi	r30, 0x5E	; 94
     4d4:	f4 e7       	ldi	r31, 0x74	; 116
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__do_copy_data+0x10>
     4d8:	05 90       	lpm	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	a2 3d       	cpi	r26, 0xD2	; 210
     4de:	b1 07       	cpc	r27, r17
     4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__do_copy_data+0xc>

000004e2 <__do_clear_bss>:
     4e2:	26 e0       	ldi	r18, 0x06	; 6
     4e4:	a2 ed       	ldi	r26, 0xD2	; 210
     4e6:	b1 e0       	ldi	r27, 0x01	; 1
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <.do_clear_bss_start>

000004ea <.do_clear_bss_loop>:
     4ea:	1d 92       	st	X+, r1

000004ec <.do_clear_bss_start>:
     4ec:	a8 31       	cpi	r26, 0x18	; 24
     4ee:	b2 07       	cpc	r27, r18
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <.do_clear_bss_loop>

000004f2 <__do_global_ctors>:
     4f2:	12 e0       	ldi	r17, 0x02	; 2
     4f4:	ce e5       	ldi	r28, 0x5E	; 94
     4f6:	d2 e0       	ldi	r29, 0x02	; 2
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <__do_global_ctors+0x10>
     4fa:	21 97       	sbiw	r28, 0x01	; 1
     4fc:	fe 01       	movw	r30, r28
     4fe:	0e 94 24 33 	call	0x6648	; 0x6648 <__tablejump2__>
     502:	c8 35       	cpi	r28, 0x58	; 88
     504:	d1 07       	cpc	r29, r17
     506:	c9 f7       	brne	.-14     	; 0x4fa <__do_global_ctors+0x8>
     508:	0e 94 00 2c 	call	0x5800	; 0x5800 <main>
     50c:	0c 94 23 3a 	jmp	0x7446	; 0x7446 <__do_global_dtors>

00000510 <__bad_interrupt>:
     510:	77 cd       	rjmp	.-1298   	; 0x0 <__vectors>

00000512 <twi_init>:
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ef e8       	ldi	r30, 0x8F	; 143
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     51e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <twi_sendStop>
     528:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <twi_inRepStart>
     52c:	82 e1       	ldi	r24, 0x12	; 18
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
     534:	83 e1       	ldi	r24, 0x13	; 19
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
     53c:	89 eb       	ldi	r24, 0xB9	; 185
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	29 eb       	ldi	r18, 0xB9	; 185
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	2e 7f       	andi	r18, 0xFE	; 254
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
     54e:	89 eb       	ldi	r24, 0xB9	; 185
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	29 eb       	ldi	r18, 0xB9	; 185
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	2d 7f       	andi	r18, 0xFD	; 253
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	88 eb       	ldi	r24, 0xB8	; 184
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	28 e4       	ldi	r18, 0x48	; 72
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18
     56a:	8c eb       	ldi	r24, 0xBC	; 188
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	25 e4       	ldi	r18, 0x45	; 69
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
     574:	e2 e0       	ldi	r30, 0x02	; 2
     576:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000057a <twi_setAddress>:
     57a:	a1 e0       	ldi	r26, 0x01	; 1
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	e3 ec       	ldi	r30, 0xC3	; 195
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	8a eb       	ldi	r24, 0xBA	; 186
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	29 81       	ldd	r18, Y+1	; 0x01
     58e:	22 0f       	add	r18, r18
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
     594:	21 96       	adiw	r28, 0x01	; 1
     596:	e2 e0       	ldi	r30, 0x02	; 2
     598:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000059c <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     59c:	a4 e0       	ldi	r26, 0x04	; 4
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     5a8:	9b 83       	std	Y+3, r25	; 0x03
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     5ae:	8c 81       	ldd	r24, Y+4	; 0x04
     5b0:	81 32       	cpi	r24, 0x21	; 33
     5b2:	10 f0       	brcs	.+4      	; 0x5b8 <twi_transmit+0x1c>
    return 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	23 c0       	rjmp	.+70     	; 0x5fe <twi_transmit+0x62>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     5b8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	11 f0       	breq	.+4      	; 0x5c4 <twi_transmit+0x28>
    return 2;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	1d c0       	rjmp	.+58     	; 0x5fe <twi_transmit+0x62>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_txBufferLength>
  for(i = 0; i < length; ++i){
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <twi_transmit+0x58>
    twi_txBuffer[i] = data[i];
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	29 81       	ldd	r18, Y+1	; 0x01
     5d6:	22 2f       	mov	r18, r18
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a 81       	ldd	r20, Y+2	; 0x02
     5dc:	5b 81       	ldd	r21, Y+3	; 0x03
     5de:	24 0f       	add	r18, r20
     5e0:	35 1f       	adc	r19, r21
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	84 50       	subi	r24, 0x04	; 4
     5e8:	9e 4f       	sbci	r25, 0xFE	; 254
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	99 81       	ldd	r25, Y+1	; 0x01
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	98 17       	cp	r25, r24
     5fa:	48 f3       	brcs	.-46     	; 0x5ce <twi_transmit+0x32>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
}
     5fe:	24 96       	adiw	r28, 0x04	; 4
     600:	e2 e0       	ldi	r30, 0x02	; 2
     602:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000606 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
     606:	a2 e0       	ldi	r26, 0x02	; 2
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	e9 e0       	ldi	r30, 0x09	; 9
     60c:	f3 e0       	ldi	r31, 0x03	; 3
     60e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <twi_onSlaveReceive+0x1>
     61e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_onSlaveReceive>
}
     622:	22 96       	adiw	r28, 0x02	; 2
     624:	e2 e0       	ldi	r30, 0x02	; 2
     626:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000062a <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
     62a:	a2 e0       	ldi	r26, 0x02	; 2
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	eb e1       	ldi	r30, 0x1B	; 27
     630:	f3 e0       	ldi	r31, 0x03	; 3
     632:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <twi_onSlaveTransmit+0x1>
     642:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <twi_onSlaveTransmit>
}
     646:	22 96       	adiw	r28, 0x02	; 2
     648:	e2 e0       	ldi	r30, 0x02	; 2
     64a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000064e <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
     64e:	a1 e0       	ldi	r26, 0x01	; 1
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	ed e2       	ldi	r30, 0x2D	; 45
     654:	f3 e0       	ldi	r31, 0x03	; 3
     656:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     65a:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	88 23       	and	r24, r24
     660:	31 f0       	breq	.+12     	; 0x66e <twi_reply+0x20>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     662:	8c eb       	ldi	r24, 0xBC	; 188
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 ec       	ldi	r18, 0xC5	; 197
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
     66c:	05 c0       	rjmp	.+10     	; 0x678 <twi_reply+0x2a>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     66e:	8c eb       	ldi	r24, 0xBC	; 188
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	25 e8       	ldi	r18, 0x85	; 133
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
  }
}
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	e2 e0       	ldi	r30, 0x02	; 2
     67c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000680 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
     680:	a0 e0       	ldi	r26, 0x00	; 0
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e6 e4       	ldi	r30, 0x46	; 70
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     68c:	8c eb       	ldi	r24, 0xBC	; 188
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	25 ed       	ldi	r18, 0xD5	; 213
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     696:	01 c0       	rjmp	.+2      	; 0x69a <twi_stop+0x1a>
    continue;
     698:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     69a:	8c eb       	ldi	r24, 0xBC	; 188
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 71       	andi	r24, 0x10	; 16
     6a8:	99 27       	eor	r25, r25
     6aa:	89 2b       	or	r24, r25
     6ac:	a9 f7       	brne	.-22     	; 0x698 <twi_stop+0x18>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     6ae:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
}
     6b2:	e2 e0       	ldi	r30, 0x02	; 2
     6b4:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000006b8 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	e2 e6       	ldi	r30, 0x62	; 98
     6be:	f3 e0       	ldi	r31, 0x03	; 3
     6c0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     6c4:	8c eb       	ldi	r24, 0xBC	; 188
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	25 ec       	ldi	r18, 0xC5	; 197
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
     6ce:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
}
     6d2:	e2 e0       	ldi	r30, 0x02	; 2
     6d4:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000006d8 <__vector_24>:

ISR(TWI_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
     704:	89 eb       	ldi	r24, 0xB9	; 185
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	88 7f       	andi	r24, 0xF8	; 248
     712:	99 27       	eor	r25, r25
     714:	09 2e       	mov	r0, r25
     716:	00 0c       	add	r0, r0
     718:	aa 0b       	sbc	r26, r26
     71a:	bb 0b       	sbc	r27, r27
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	28 ef       	ldi	r18, 0xF8	; 248
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	84 1b       	sub	r24, r20
     726:	95 0b       	sbc	r25, r21
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	08 f4       	brcc	.+2      	; 0x730 <__vector_24+0x58>
     72e:	05 c1       	rjmp	.+522    	; 0x93a <__stack+0x3b>
     730:	8c 5c       	subi	r24, 0xCC	; 204
     732:	9f 4f       	sbci	r25, 0xFF	; 255
     734:	fc 01       	movw	r30, r24
     736:	0c 94 24 33 	jmp	0x6648	; 0x6648 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     73a:	8b eb       	ldi	r24, 0xBB	; 187
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <twi_slarw>
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
      twi_reply(1);
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	82 df       	rcall	.-252    	; 0x64e <twi_reply>
      break;
     74a:	f7 c0       	rjmp	.+494    	; 0x93a <__stack+0x3b>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     74c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <twi_masterBufferIndex>
     750:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <twi_masterBufferLength>
     754:	98 17       	cp	r25, r24
     756:	98 f4       	brcc	.+38     	; 0x77e <__vector_24+0xa6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     758:	8b eb       	ldi	r24, 0xBB	; 187
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <twi_masterBufferIndex>
     760:	31 e0       	ldi	r19, 0x01	; 1
     762:	32 0f       	add	r19, r18
     764:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <twi_masterBufferIndex>
     768:	22 2f       	mov	r18, r18
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	26 52       	subi	r18, 0x26	; 38
     76e:	3e 4f       	sbci	r19, 0xFE	; 254
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
        twi_reply(1);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	69 df       	rcall	.-302    	; 0x64e <twi_reply>
     77c:	11 c0       	rjmp	.+34     	; 0x7a0 <__vector_24+0xc8>
      }else{
	if (twi_sendStop)
     77e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi_sendStop>
     782:	88 23       	and	r24, r24
     784:	11 f0       	breq	.+4      	; 0x78a <__vector_24+0xb2>
          twi_stop();
     786:	7c df       	rcall	.-264    	; 0x680 <twi_stop>
     788:	0b c0       	rjmp	.+22     	; 0x7a0 <__vector_24+0xc8>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     790:	8c eb       	ldi	r24, 0xBC	; 188
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	24 ea       	ldi	r18, 0xA4	; 164
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     79a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
	}
      }
      break;
     79e:	cd c0       	rjmp	.+410    	; 0x93a <__stack+0x3b>
     7a0:	cc c0       	rjmp	.+408    	; 0x93a <__stack+0x3b>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     7a2:	80 e2       	ldi	r24, 0x20	; 32
     7a4:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_error>
      twi_stop();
     7a8:	6b df       	rcall	.-298    	; 0x680 <twi_stop>
      break;
     7aa:	c7 c0       	rjmp	.+398    	; 0x93a <__stack+0x3b>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_error>
      twi_stop();
     7b2:	66 df       	rcall	.-308    	; 0x680 <twi_stop>
      break;
     7b4:	c2 c0       	rjmp	.+388    	; 0x93a <__stack+0x3b>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     7b6:	88 e3       	ldi	r24, 0x38	; 56
     7b8:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_error>
      twi_releaseBus();
     7bc:	7d df       	rcall	.-262    	; 0x6b8 <twi_releaseBus>
      break;
     7be:	bd c0       	rjmp	.+378    	; 0x93a <__stack+0x3b>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7c0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_masterBufferIndex>
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	98 0f       	add	r25, r24
     7c8:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <twi_masterBufferIndex>
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2b eb       	ldi	r18, 0xBB	; 187
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	86 52       	subi	r24, 0x26	; 38
     7da:	9e 4f       	sbci	r25, 0xFE	; 254
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7e0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <twi_masterBufferIndex>
     7e4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <twi_masterBufferLength>
     7e8:	98 17       	cp	r25, r24
     7ea:	18 f4       	brcc	.+6      	; 0x7f2 <__vector_24+0x11a>
        twi_reply(1);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	2f df       	rcall	.-418    	; 0x64e <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     7f0:	a4 c0       	rjmp	.+328    	; 0x93a <__stack+0x3b>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	2c df       	rcall	.-424    	; 0x64e <twi_reply>
      }
      break;
     7f6:	a1 c0       	rjmp	.+322    	; 0x93a <__stack+0x3b>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7f8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_masterBufferIndex>
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	98 0f       	add	r25, r24
     800:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <twi_masterBufferIndex>
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2b eb       	ldi	r18, 0xBB	; 187
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	86 52       	subi	r24, 0x26	; 38
     812:	9e 4f       	sbci	r25, 0xFE	; 254
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
	if (twi_sendStop)
     818:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi_sendStop>
     81c:	88 23       	and	r24, r24
     81e:	11 f0       	breq	.+4      	; 0x824 <__vector_24+0x14c>
          twi_stop();
     820:	2f df       	rcall	.-418    	; 0x680 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
     822:	8b c0       	rjmp	.+278    	; 0x93a <__stack+0x3b>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     82a:	8c eb       	ldi	r24, 0xBC	; 188
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	24 ea       	ldi	r18, 0xA4	; 164
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     834:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
	}    
	break;
     838:	80 c0       	rjmp	.+256    	; 0x93a <__stack+0x3b>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     83a:	22 df       	rcall	.-444    	; 0x680 <twi_stop>
      break;
     83c:	7e c0       	rjmp	.+252    	; 0x93a <__stack+0x3b>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     844:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <twi_rxBufferIndex>
      twi_reply(1);
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	01 df       	rcall	.-510    	; 0x64e <twi_reply>
      break;
     84c:	76 c0       	rjmp	.+236    	; 0x93a <__stack+0x3b>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     84e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <twi_rxBufferIndex>
     852:	80 32       	cpi	r24, 0x20	; 32
     854:	98 f4       	brcc	.+38     	; 0x87c <__vector_24+0x1a4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     856:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <twi_rxBufferIndex>
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	98 0f       	add	r25, r24
     85e:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <twi_rxBufferIndex>
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	2b eb       	ldi	r18, 0xBB	; 187
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	f9 01       	movw	r30, r18
     86c:	20 81       	ld	r18, Z
     86e:	82 5e       	subi	r24, 0xE2	; 226
     870:	9d 4f       	sbci	r25, 0xFD	; 253
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
        twi_reply(1);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	ea de       	rcall	.-556    	; 0x64e <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
     87a:	5f c0       	rjmp	.+190    	; 0x93a <__stack+0x3b>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	e7 de       	rcall	.-562    	; 0x64e <twi_reply>
      }
      break;
     880:	5c c0       	rjmp	.+184    	; 0x93a <__stack+0x3b>
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     882:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <twi_rxBufferIndex>
     886:	80 32       	cpi	r24, 0x20	; 32
     888:	40 f4       	brcc	.+16     	; 0x89a <__vector_24+0x1c2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     88a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <twi_rxBufferIndex>
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	82 5e       	subi	r24, 0xE2	; 226
     894:	9d 4f       	sbci	r25, 0xFD	; 253
     896:	fc 01       	movw	r30, r24
     898:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     89a:	f2 de       	rcall	.-540    	; 0x680 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     89c:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <twi_onSlaveReceive>
     8a0:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <twi_onSlaveReceive+0x1>
     8a4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <twi_rxBufferIndex>
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	bc 01       	movw	r22, r24
     8ae:	8e e1       	ldi	r24, 0x1E	; 30
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	f9 01       	movw	r30, r18
     8b4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     8b6:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     8ba:	fe de       	rcall	.-516    	; 0x6b8 <twi_releaseBus>
      break;
     8bc:	3e c0       	rjmp	.+124    	; 0x93a <__stack+0x3b>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	c6 de       	rcall	.-628    	; 0x64e <twi_reply>
      break;
     8c2:	3b c0       	rjmp	.+118    	; 0x93a <__stack+0x3b>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     8ca:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     8ce:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     8d2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <twi_onSlaveTransmit>
     8d6:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <twi_onSlaveTransmit+0x1>
     8da:	fc 01       	movw	r30, r24
     8dc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     8de:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_txBufferLength>
     8e2:	88 23       	and	r24, r24
     8e4:	29 f4       	brne	.+10     	; 0x8f0 <__vector_24+0x218>
        twi_txBufferLength = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     8ec:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     8f0:	8b eb       	ldi	r24, 0xBB	; 187
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <twi_txBufferIndex>
     8f8:	31 e0       	ldi	r19, 0x01	; 1
     8fa:	32 0f       	add	r19, r18
     8fc:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <twi_txBufferIndex>
     900:	22 2f       	mov	r18, r18
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	24 50       	subi	r18, 0x04	; 4
     906:	3e 4f       	sbci	r19, 0xFE	; 254
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     910:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <twi_txBufferIndex>
     914:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_txBufferLength>
     918:	98 17       	cp	r25, r24
     91a:	18 f4       	brcc	.+6      	; 0x922 <__stack+0x23>
        twi_reply(1);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	97 de       	rcall	.-722    	; 0x64e <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     920:	0c c0       	rjmp	.+24     	; 0x93a <__stack+0x3b>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	94 de       	rcall	.-728    	; 0x64e <twi_reply>
      }
      break;
     926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0x3b>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	91 de       	rcall	.-734    	; 0x64e <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     92c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
      break;
     930:	04 c0       	rjmp	.+8      	; 0x93a <__stack+0x3b>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     932:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <twi_error>
      twi_stop();
     936:	a4 de       	rcall	.-696    	; 0x680 <twi_stop>
      break;
     938:	00 00       	nop
  }
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     962:	a4 e0       	ldi	r26, 0x04	; 4
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e7 eb       	ldi	r30, 0xB7	; 183
     968:	f4 e0       	ldi	r31, 0x04	; 4
     96a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     96e:	9a 83       	std	Y+2, r25	; 0x02
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	7c 83       	std	Y+4, r23	; 0x04
     974:	6b 83       	std	Y+3, r22	; 0x03
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	2b 81       	ldd	r18, Y+3	; 0x03
     97c:	3c 81       	ldd	r19, Y+4	; 0x04
     97e:	fc 01       	movw	r30, r24
     980:	33 83       	std	Z+3, r19	; 0x03
     982:	22 83       	std	Z+2, r18	; 0x02
     984:	24 96       	adiw	r28, 0x04	; 4
     986:	e2 e0       	ldi	r30, 0x02	; 2
     988:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000098c <_ZN5PrintC1Ev>:
     98c:	a2 e0       	ldi	r26, 0x02	; 2
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	ec ec       	ldi	r30, 0xCC	; 204
     992:	f4 e0       	ldi	r31, 0x04	; 4
     994:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	2d ec       	ldi	r18, 0xCD	; 205
     9a2:	31 e0       	ldi	r19, 0x01	; 1
     9a4:	fc 01       	movw	r30, r24
     9a6:	31 83       	std	Z+1, r19	; 0x01
     9a8:	20 83       	st	Z, r18
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	fc 01       	movw	r30, r24
     9b0:	13 82       	std	Z+3, r1	; 0x03
     9b2:	12 82       	std	Z+2, r1	; 0x02
     9b4:	22 96       	adiw	r28, 0x02	; 2
     9b6:	e2 e0       	ldi	r30, 0x02	; 2
     9b8:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000009bc <_ZN6StreamC1Ev>:
     9bc:	a2 e0       	ldi	r26, 0x02	; 2
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e4 ee       	ldi	r30, 0xE4	; 228
     9c2:	f4 e0       	ldi	r31, 0x04	; 4
     9c4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	dd df       	rcall	.-70     	; 0x98c <_ZN5PrintC1Ev>
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	2e e6       	ldi	r18, 0x6E	; 110
     9d8:	31 e0       	ldi	r19, 0x01	; 1
     9da:	fc 01       	movw	r30, r24
     9dc:	31 83       	std	Z+1, r19	; 0x01
     9de:	20 83       	st	Z, r18
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	88 ee       	ldi	r24, 0xE8	; 232
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	a0 e0       	ldi	r26, 0x00	; 0
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	84 83       	std	Z+4, r24	; 0x04
     9f0:	95 83       	std	Z+5, r25	; 0x05
     9f2:	a6 83       	std	Z+6, r26	; 0x06
     9f4:	b7 83       	std	Z+7, r27	; 0x07
     9f6:	22 96       	adiw	r28, 0x02	; 2
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000009fe <_ZN7TwoWireC1Ev>:
     9fe:	a2 e0       	ldi	r26, 0x02	; 2
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	d4 df       	rcall	.-88     	; 0x9bc <_ZN6StreamC1Ev>
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	2e e5       	ldi	r18, 0x5E	; 94
     a1a:	31 e0       	ldi	r19, 0x01	; 1
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	22 96       	adiw	r28, 0x02	; 2
     a24:	e2 e0       	ldi	r30, 0x02	; 2
     a26:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000a2a <_ZN7TwoWire5beginEv>:
     a2a:	a2 e0       	ldi	r26, 0x02	; 2
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	eb e1       	ldi	r30, 0x1B	; 27
     a30:	f5 e0       	ldi	r31, 0x05	; 5
     a32:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     a36:	9a 83       	std	Y+2, r25	; 0x02
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     a3e:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
     a42:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
     a46:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_ZN7TwoWire14txBufferLengthE>
     a4a:	63 dd       	rcall	.-1338   	; 0x512 <twi_init>
     a4c:	22 96       	adiw	r28, 0x02	; 2
     a4e:	e2 e0       	ldi	r30, 0x02	; 2
     a50:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000a54 <_ZN7TwoWire5beginEh>:
     a54:	a3 e0       	ldi	r26, 0x03	; 3
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e0 e3       	ldi	r30, 0x30	; 48
     a5a:	f5 e0       	ldi	r31, 0x05	; 5
     a5c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	6b 83       	std	Y+3, r22	; 0x03
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	88 dd       	rcall	.-1264   	; 0x57a <twi_setAddress>
     a6a:	8f e6       	ldi	r24, 0x6F	; 111
     a6c:	96 e0       	ldi	r25, 0x06	; 6
     a6e:	dd dd       	rcall	.-1094   	; 0x62a <twi_attachSlaveTxEvent>
     a70:	89 e2       	ldi	r24, 0x29	; 41
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	c8 dd       	rcall	.-1136   	; 0x606 <twi_attachSlaveRxEvent>
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	d7 df       	rcall	.-82     	; 0xa2a <_ZN7TwoWire5beginEv>
     a7c:	23 96       	adiw	r28, 0x03	; 3
     a7e:	e2 e0       	ldi	r30, 0x02	; 2
     a80:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000a84 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a84:	a3 e0       	ldi	r26, 0x03	; 3
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	e8 e4       	ldi	r30, 0x48	; 72
     a8a:	f5 e0       	ldi	r31, 0x05	; 5
     a8c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     a96:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN7TwoWire12transmittingE>
     a9a:	88 23       	and	r24, r24
     a9c:	f9 f0       	breq	.+62     	; 0xadc <_ZN7TwoWire5writeEh+0x58>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     a9e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN7TwoWire14txBufferLengthE>
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	40 f0       	brcs	.+16     	; 0xab6 <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	59 df       	rcall	.-334    	; 0x962 <_ZN5Print13setWriteErrorEi>
      return 0;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	19 c0       	rjmp	.+50     	; 0xae8 <_ZN7TwoWire5writeEh+0x64>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     ab6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	2b 81       	ldd	r18, Y+3	; 0x03
     ac0:	8e 59       	subi	r24, 0x9E	; 158
     ac2:	9d 4f       	sbci	r25, 0xFD	; 253
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
    ++txBufferIndex;
     ac8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     ad2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
     ad6:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <_ZN7TwoWire14txBufferLengthE>
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <_ZN7TwoWire5writeEh+0x60>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     adc:	ce 01       	movw	r24, r28
     ade:	03 96       	adiw	r24, 0x03	; 3
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	5c dd       	rcall	.-1352   	; 0x59c <twi_transmit>
  }
  return 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
}
     ae8:	23 96       	adiw	r28, 0x03	; 3
     aea:	e2 e0       	ldi	r30, 0x02	; 2
     aec:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000af0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     af0:	a8 e0       	ldi	r26, 0x08	; 8
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     afc:	9c 83       	std	Y+4, r25	; 0x04
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	7e 83       	std	Y+6, r23	; 0x06
     b02:	6d 83       	std	Y+5, r22	; 0x05
     b04:	58 87       	std	Y+8, r21	; 0x08
     b06:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     b08:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN7TwoWire12transmittingE>
     b0c:	88 23       	and	r24, r24
     b0e:	29 f1       	breq	.+74     	; 0xb5a <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b10:	1a 82       	std	Y+2, r1	; 0x02
     b12:	19 82       	std	Y+1, r1	; 0x01
     b14:	1a c0       	rjmp	.+52     	; 0xb4a <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	fc 01       	movw	r30, r24
     b22:	20 81       	ld	r18, Z
     b24:	31 81       	ldd	r19, Z+1	; 0x01
     b26:	4d 81       	ldd	r20, Y+5	; 0x05
     b28:	5e 81       	ldd	r21, Y+6	; 0x06
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	84 0f       	add	r24, r20
     b30:	95 1f       	adc	r25, r21
     b32:	fc 01       	movw	r30, r24
     b34:	40 81       	ld	r20, Z
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	64 2f       	mov	r22, r20
     b3c:	f9 01       	movw	r30, r18
     b3e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	29 81       	ldd	r18, Y+1	; 0x01
     b4c:	3a 81       	ldd	r19, Y+2	; 0x02
     b4e:	8f 81       	ldd	r24, Y+7	; 0x07
     b50:	98 85       	ldd	r25, Y+8	; 0x08
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	f8 f2       	brcs	.-66     	; 0xb16 <_ZN7TwoWire5writeEPKhj+0x26>
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     b5a:	2f 81       	ldd	r18, Y+7	; 0x07
     b5c:	8d 81       	ldd	r24, Y+5	; 0x05
     b5e:	9e 81       	ldd	r25, Y+6	; 0x06
     b60:	62 2f       	mov	r22, r18
     b62:	1c dd       	rcall	.-1480   	; 0x59c <twi_transmit>
  }
  return quantity;
     b64:	8f 81       	ldd	r24, Y+7	; 0x07
     b66:	98 85       	ldd	r25, Y+8	; 0x08
}
     b68:	28 96       	adiw	r28, 0x08	; 8
     b6a:	e2 e0       	ldi	r30, 0x02	; 2
     b6c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000b70 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     b70:	a2 e0       	ldi	r26, 0x02	; 2
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ee eb       	ldi	r30, 0xBE	; 190
     b76:	f5 e0       	ldi	r31, 0x05	; 5
     b78:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     b80:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	48 1b       	sub	r20, r24
     b94:	59 0b       	sbc	r21, r25
     b96:	ca 01       	movw	r24, r20
}
     b98:	22 96       	adiw	r28, 0x02	; 2
     b9a:	e2 e0       	ldi	r30, 0x02	; 2
     b9c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000ba0 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     ba0:	a4 e0       	ldi	r26, 0x04	; 4
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 ed       	ldi	r30, 0xD6	; 214
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     bb8:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     bbc:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
     bc0:	98 17       	cp	r25, r24
     bc2:	88 f4       	brcc	.+34     	; 0xbe6 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     bc4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 5c       	subi	r24, 0xC0	; 192
     bce:	9d 4f       	sbci	r25, 0xFD	; 253
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     bdc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bea:	24 96       	adiw	r28, 0x04	; 4
     bec:	e2 e0       	ldi	r30, 0x02	; 2
     bee:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000bf2 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     bf2:	a4 e0       	ldi	r26, 0x04	; 4
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ef ef       	ldi	r30, 0xFF	; 255
     bf8:	f5 e0       	ldi	r31, 0x05	; 5
     bfa:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	9f ef       	ldi	r25, 0xFF	; 255
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     c0a:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     c0e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
     c12:	98 17       	cp	r25, r24
     c14:	60 f4       	brcc	.+24     	; 0xc2e <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     c16:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	80 5c       	subi	r24, 0xC0	; 192
     c20:	9d 4f       	sbci	r25, 0xFD	; 253
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c32:	24 96       	adiw	r28, 0x04	; 4
     c34:	e2 e0       	ldi	r30, 0x02	; 2
     c36:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000c3a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     c3a:	a2 e0       	ldi	r26, 0x02	; 2
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e2       	ldi	r30, 0x23	; 35
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     c4a:	22 96       	adiw	r28, 0x02	; 2
     c4c:	e2 e0       	ldi	r30, 0x02	; 2
     c4e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000c52 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     c52:	a5 e0       	ldi	r26, 0x05	; 5
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ef e2       	ldi	r30, 0x2F	; 47
     c58:	f6 e0       	ldi	r31, 0x06	; 6
     c5a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     c5e:	9b 83       	std	Y+3, r25	; 0x03
     c60:	8a 83       	std	Y+2, r24	; 0x02
     c62:	7d 83       	std	Y+5, r23	; 0x05
     c64:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     c66:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN7TwoWire14user_onReceiveE>
     c6a:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <_ZN7TwoWire14user_onReceiveE+0x1>
     c6e:	89 2b       	or	r24, r25
     c70:	09 f4       	brne	.+2      	; 0xc74 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     c72:	31 c0       	rjmp	.+98     	; 0xcd6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     c74:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
     c78:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
     c7c:	98 17       	cp	r25, r24
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     c80:	2a c0       	rjmp	.+84     	; 0xcd6 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	13 c0       	rjmp	.+38     	; 0xcac <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	29 81       	ldd	r18, Y+1	; 0x01
     c8e:	22 2f       	mov	r18, r18
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	4a 81       	ldd	r20, Y+2	; 0x02
     c94:	5b 81       	ldd	r21, Y+3	; 0x03
     c96:	24 0f       	add	r18, r20
     c98:	35 1f       	adc	r19, r21
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	80 5c       	subi	r24, 0xC0	; 192
     ca0:	9d 4f       	sbci	r25, 0xFD	; 253
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	2c f3       	brlt	.-54     	; 0xc86 <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     cbc:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     cc6:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_ZN7TwoWire14user_onReceiveE>
     cca:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <_ZN7TwoWire14user_onReceiveE+0x1>
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	9d 81       	ldd	r25, Y+5	; 0x05
     cd2:	f9 01       	movw	r30, r18
     cd4:	09 95       	icall
}
     cd6:	25 96       	adiw	r28, 0x05	; 5
     cd8:	e2 e0       	ldi	r30, 0x02	; 2
     cda:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000cde <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e5 e7       	ldi	r30, 0x75	; 117
     ce4:	f6 e0       	ldi	r31, 0x06	; 6
     ce6:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     cea:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN7TwoWire14user_onRequestE>
     cee:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <_ZN7TwoWire14user_onRequestE+0x1>
     cf2:	89 2b       	or	r24, r25
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     cf6:	0a c0       	rjmp	.+20     	; 0xd0c <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     cf8:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     cfc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     d00:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN7TwoWire14user_onRequestE>
     d04:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <_ZN7TwoWire14user_onRequestE+0x1>
     d08:	fc 01       	movw	r30, r24
     d0a:	09 95       	icall
}
     d0c:	e2 e0       	ldi	r30, 0x02	; 2
     d0e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000d12 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     d12:	a4 e0       	ldi	r26, 0x04	; 4
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ef e8       	ldi	r30, 0x8F	; 143
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	7c 83       	std	Y+4, r23	; 0x04
     d24:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <_ZN7TwoWire14user_onReceiveE+0x1>
     d2e:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <_ZN7TwoWire14user_onReceiveE>
}
     d32:	24 96       	adiw	r28, 0x04	; 4
     d34:	e2 e0       	ldi	r30, 0x02	; 2
     d36:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000d3a <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     d3a:	a4 e0       	ldi	r26, 0x04	; 4
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 ea       	ldi	r30, 0xA3	; 163
     d40:	f6 e0       	ldi	r31, 0x06	; 6
     d42:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	7c 83       	std	Y+4, r23	; 0x04
     d4c:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <_ZN7TwoWire14user_onRequestE+0x1>
     d56:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <_ZN7TwoWire14user_onRequestE>
}
     d5a:	24 96       	adiw	r28, 0x04	; 4
     d5c:	e2 e0       	ldi	r30, 0x02	; 2
     d5e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000d62 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     d62:	a4 e0       	ldi	r26, 0x04	; 4
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	7c 83       	std	Y+4, r23	; 0x04
     d74:	6b 83       	std	Y+3, r22	; 0x03
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	39 f4       	brne	.+14     	; 0xd8c <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	19 f4       	brne	.+6      	; 0xd8c <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d86:	89 e8       	ldi	r24, 0x89	; 137
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	39 de       	rcall	.-910    	; 0x9fe <_ZN7TwoWireC1Ev>
     d8c:	24 96       	adiw	r28, 0x04	; 4
     d8e:	e2 e0       	ldi	r30, 0x02	; 2
     d90:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000d94 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 ed       	ldi	r30, 0xD0	; 208
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     da0:	6f ef       	ldi	r22, 0xFF	; 255
     da2:	7f ef       	ldi	r23, 0xFF	; 255
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	dc df       	rcall	.-72     	; 0xd62 <_Z41__static_initialization_and_destruction_0ii>
     daa:	e2 e0       	ldi	r30, 0x02	; 2
     dac:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000db0 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     db0:	a2 e0       	ldi	r26, 0x02	; 2
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ee ed       	ldi	r30, 0xDE	; 222
     db6:	f6 e0       	ldi	r31, 0x06	; 6
     db8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6a 83       	std	Y+2, r22	; 0x02
     dc0:	22 96       	adiw	r28, 0x02	; 2
     dc2:	e2 e0       	ldi	r30, 0x02	; 2
     dc4:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000dc8 <_ZN14SoftwareSerial10tunedDelayEj>:
     dc8:	a4 e0       	ldi	r26, 0x04	; 4
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea ee       	ldi	r30, 0xEA	; 234
     dce:	f6 e0       	ldi	r31, 0x06	; 6
     dd0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	24 96       	adiw	r28, 0x04	; 4
     dee:	e2 e0       	ldi	r30, 0x02	; 2
     df0:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000df4 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     df4:	a2 e0       	ldi	r26, 0x02	; 2
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f7 e0       	ldi	r31, 0x07	; 7
     dfc:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	fc 01       	movw	r30, r24
     e0a:	86 85       	ldd	r24, Z+14	; 0x0e
     e0c:	97 85       	ldd	r25, Z+15	; 0x0f
     e0e:	fc 01       	movw	r30, r24
     e10:	20 81       	ld	r18, Z
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	fc 01       	movw	r30, r24
     e18:	85 85       	ldd	r24, Z+13	; 0x0d
     e1a:	82 23       	and	r24, r18
}
     e1c:	22 96       	adiw	r28, 0x02	; 2
     e1e:	e2 e0       	ldi	r30, 0x02	; 2
     e20:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00000e24 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	2b 97       	sbiw	r28, 0x0b	; 11
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     e56:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <_ZN14SoftwareSerial13active_objectE>
     e5a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <_ZN14SoftwareSerial13active_objectE+0x1>
     e5e:	89 2b       	or	r24, r25
     e60:	09 f4       	brne	.+2      	; 0xe64 <__vector_3+0x40>
     e62:	f4 c0       	rjmp	.+488    	; 0x104c <__vector_3+0x228>
  {
    active_object->recv();
     e64:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <_ZN14SoftwareSerial13active_objectE>
     e68:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <_ZN14SoftwareSerial13active_objectE+0x1>
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     e70:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	86 8d       	ldd	r24, Z+30	; 0x1e
     e7a:	82 70       	andi	r24, 0x02	; 2
     e7c:	88 23       	and	r24, r24
     e7e:	49 f0       	breq	.+18     	; 0xe92 <__vector_3+0x6e>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	b7 df       	rcall	.-146    	; 0xdf4 <_ZN14SoftwareSerial11rx_pin_readEv>
     e86:	98 2f       	mov	r25, r24
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	99 23       	and	r25, r25
     e8c:	51 f4       	brne	.+20     	; 0xea2 <__vector_3+0x7e>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <__vector_3+0x7e>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	ae df       	rcall	.-164    	; 0xdf4 <_ZN14SoftwareSerial11rx_pin_readEv>
     e98:	98 2f       	mov	r25, r24
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	99 23       	and	r25, r25
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_3+0x7e>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <__vector_3+0x84>
     ea6:	d2 c0       	rjmp	.+420    	; 0x104c <__vector_3+0x228>
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	9d 83       	std	Y+5, r25	; 0x05
     eae:	8c 83       	std	Y+4, r24	; 0x04
     eb0:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	88 23       	and	r24, r24
     eb6:	a1 f0       	breq	.+40     	; 0xee0 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	fc 01       	movw	r30, r24
     ebe:	83 89       	ldd	r24, Z+19	; 0x13
     ec0:	94 89       	ldd	r25, Z+20	; 0x14
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	f9 01       	movw	r30, r18
     ec8:	23 89       	ldd	r18, Z+19	; 0x13
     eca:	34 89       	ldd	r19, Z+20	; 0x14
     ecc:	f9 01       	movw	r30, r18
     ece:	40 81       	ld	r20, Z
     ed0:	2c 81       	ldd	r18, Y+4	; 0x04
     ed2:	3d 81       	ldd	r19, Y+5	; 0x05
     ed4:	f9 01       	movw	r30, r18
     ed6:	25 89       	ldd	r18, Z+21	; 0x15
     ed8:	24 2b       	or	r18, r20
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
     ede:	15 c0       	rjmp	.+42     	; 0xf0a <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	fc 01       	movw	r30, r24
     ee6:	83 89       	ldd	r24, Z+19	; 0x13
     ee8:	94 89       	ldd	r25, Z+20	; 0x14
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	f9 01       	movw	r30, r18
     ef0:	23 89       	ldd	r18, Z+19	; 0x13
     ef2:	34 89       	ldd	r19, Z+20	; 0x14
     ef4:	f9 01       	movw	r30, r18
     ef6:	20 81       	ld	r18, Z
     ef8:	42 2f       	mov	r20, r18
     efa:	2c 81       	ldd	r18, Y+4	; 0x04
     efc:	3d 81       	ldd	r19, Y+5	; 0x05
     efe:	f9 01       	movw	r30, r18
     f00:	25 89       	ldd	r18, Z+21	; 0x15
     f02:	20 95       	com	r18
     f04:	24 23       	and	r18, r20
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	fc 01       	movw	r30, r24
     f10:	86 89       	ldd	r24, Z+22	; 0x16
     f12:	97 89       	ldd	r25, Z+23	; 0x17
     f14:	59 df       	rcall	.-334    	; 0xdc8 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	8d e0       	ldi	r24, 0x0D	; 13
     f1a:	4a df       	rcall	.-364    	; 0xdb0 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	8f 83       	std	Y+7, r24	; 0x07
     f20:	1f c0       	rjmp	.+62     	; 0xf60 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	fc 01       	movw	r30, r24
     f28:	80 8d       	ldd	r24, Z+24	; 0x18
     f2a:	91 8d       	ldd	r25, Z+25	; 0x19
     f2c:	4d df       	rcall	.-358    	; 0xdc8 <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	95 95       	asr	r25
     f36:	87 95       	ror	r24
     f38:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	8d e0       	ldi	r24, 0x0D	; 13
     f3e:	38 df       	rcall	.-400    	; 0xdb0 <_Z10DebugPulsehh>
      if (rx_pin_read())
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	57 df       	rcall	.-338    	; 0xdf4 <_ZN14SoftwareSerial11rx_pin_readEv>
     f46:	98 2f       	mov	r25, r24
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	99 23       	and	r25, r25
     f4c:	09 f4       	brne	.+2      	; 0xf50 <__vector_3+0x12c>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	88 23       	and	r24, r24
     f52:	19 f0       	breq	.+6      	; 0xf5a <__vector_3+0x136>
        d |= 0x80;
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f5a:	8f 81       	ldd	r24, Y+7	; 0x07
     f5c:	81 50       	subi	r24, 0x01	; 1
     f5e:	8f 83       	std	Y+7, r24	; 0x07
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	88 23       	and	r24, r24
     f64:	f1 f6       	brne	.-68     	; 0xf22 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	fc 01       	movw	r30, r24
     f6c:	86 8d       	ldd	r24, Z+30	; 0x1e
     f6e:	82 70       	andi	r24, 0x02	; 2
     f70:	88 23       	and	r24, r24
     f72:	19 f0       	breq	.+6      	; 0xf7a <__vector_3+0x156>
      d = ~d;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	80 95       	com	r24
     f78:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     f7a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	8f 73       	andi	r24, 0x3F	; 63
     f86:	90 78       	andi	r25, 0x80	; 128
     f88:	99 23       	and	r25, r25
     f8a:	24 f4       	brge	.+8      	; 0xf94 <__vector_3+0x170>
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	80 6c       	ori	r24, 0xC0	; 192
     f90:	9f 6f       	ori	r25, 0xFF	; 255
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     f96:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <_ZN14SoftwareSerial20_receive_buffer_headE>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	28 85       	ldd	r18, Y+8	; 0x08
     f9e:	29 17       	cp	r18, r25
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__vector_3+0x180>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	88 23       	and	r24, r24
     fa6:	69 f0       	breq	.+26     	; 0xfc2 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     fa8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	89 56       	subi	r24, 0x69	; 105
     fb2:	9d 4f       	sbci	r25, 0xFD	; 253
     fb4:	2b 81       	ldd	r18, Y+3	; 0x03
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     fba:	88 85       	ldd	r24, Y+8	; 0x08
     fbc:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     fc0:	0a c0       	rjmp	.+20     	; 0xfd6 <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	8b e0       	ldi	r24, 0x0B	; 11
     fc6:	f4 de       	rcall	.-536    	; 0xdb0 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	fc 01       	movw	r30, r24
     fce:	26 8d       	ldd	r18, Z+30	; 0x1e
     fd0:	21 60       	ori	r18, 0x01	; 1
     fd2:	fc 01       	movw	r30, r24
     fd4:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	fc 01       	movw	r30, r24
     fdc:	82 8d       	ldd	r24, Z+26	; 0x1a
     fde:	93 8d       	ldd	r25, Z+27	; 0x1b
     fe0:	f3 de       	rcall	.-538    	; 0xdc8 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	8b e0       	ldi	r24, 0x0B	; 11
     fe6:	e4 de       	rcall	.-568    	; 0xdb0 <_Z10DebugPulsehh>
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	9a 87       	std	Y+10, r25	; 0x0a
     fee:	89 87       	std	Y+9, r24	; 0x09
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff6:	88 23       	and	r24, r24
     ff8:	a1 f0       	breq	.+40     	; 0x1022 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	fc 01       	movw	r30, r24
    1000:	83 89       	ldd	r24, Z+19	; 0x13
    1002:	94 89       	ldd	r25, Z+20	; 0x14
    1004:	29 85       	ldd	r18, Y+9	; 0x09
    1006:	3a 85       	ldd	r19, Y+10	; 0x0a
    1008:	f9 01       	movw	r30, r18
    100a:	23 89       	ldd	r18, Z+19	; 0x13
    100c:	34 89       	ldd	r19, Z+20	; 0x14
    100e:	f9 01       	movw	r30, r18
    1010:	40 81       	ld	r20, Z
    1012:	29 85       	ldd	r18, Y+9	; 0x09
    1014:	3a 85       	ldd	r19, Y+10	; 0x0a
    1016:	f9 01       	movw	r30, r18
    1018:	25 89       	ldd	r18, Z+21	; 0x15
    101a:	24 2b       	or	r18, r20
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	15 c0       	rjmp	.+42     	; 0x104c <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	fc 01       	movw	r30, r24
    1028:	83 89       	ldd	r24, Z+19	; 0x13
    102a:	94 89       	ldd	r25, Z+20	; 0x14
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	f9 01       	movw	r30, r18
    1032:	23 89       	ldd	r18, Z+19	; 0x13
    1034:	34 89       	ldd	r19, Z+20	; 0x14
    1036:	f9 01       	movw	r30, r18
    1038:	20 81       	ld	r18, Z
    103a:	42 2f       	mov	r20, r18
    103c:	29 85       	ldd	r18, Y+9	; 0x09
    103e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1040:	f9 01       	movw	r30, r18
    1042:	25 89       	ldd	r18, Z+21	; 0x15
    1044:	20 95       	com	r18
    1046:	24 23       	and	r18, r20
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    104c:	2b 96       	adiw	r28, 0x0b	; 11
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1080:	8f 92       	push	r8
    1082:	af 92       	push	r10
    1084:	cf 92       	push	r12
    1086:	ef 92       	push	r14
    1088:	0f 93       	push	r16
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	28 97       	sbiw	r28, 0x08	; 8
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6b 83       	std	Y+3, r22	; 0x03
    10a4:	4c 83       	std	Y+4, r20	; 0x04
    10a6:	2d 83       	std	Y+5, r18	; 0x05
    10a8:	0e 83       	std	Y+6, r16	; 0x06
    10aa:	ef 82       	std	Y+7, r14	; 0x07
    10ac:	c8 86       	std	Y+8, r12	; 0x08
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	6c dc       	rcall	.-1832   	; 0x98c <_ZN5PrintC1Ev>
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	2e e7       	ldi	r18, 0x7E	; 126
    10ba:	31 e0       	ldi	r19, 0x01	; 1
    10bc:	fc 01       	movw	r30, r24
    10be:	31 83       	std	Z+1, r19	; 0x01
    10c0:	20 83       	st	Z, r18
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	1f 92       	push	r1
    10c8:	1f 92       	push	r1
    10ca:	1f 92       	push	r1
    10cc:	1f 92       	push	r1
    10ce:	88 84       	ldd	r8, Y+8	; 0x08
    10d0:	af 80       	ldd	r10, Y+7	; 0x07
    10d2:	ce 80       	ldd	r12, Y+6	; 0x06
    10d4:	ed 80       	ldd	r14, Y+5	; 0x05
    10d6:	0c 81       	ldd	r16, Y+4	; 0x04
    10d8:	2f ef       	ldi	r18, 0xFF	; 255
    10da:	4b 81       	ldd	r20, Y+3	; 0x03
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	12 d0       	rcall	.+36     	; 0x1104 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	28 96       	adiw	r28, 0x08	; 8
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	0f 91       	pop	r16
    10fa:	ef 90       	pop	r14
    10fc:	cf 90       	pop	r12
    10fe:	af 90       	pop	r10
    1100:	8f 90       	pop	r8
    1102:	08 95       	ret

00001104 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    1104:	8f 92       	push	r8
    1106:	af 92       	push	r10
    1108:	cf 92       	push	r12
    110a:	ef 92       	push	r14
    110c:	0f 93       	push	r16
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2a 97       	sbiw	r28, 0x0a	; 10
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6b 83       	std	Y+3, r22	; 0x03
    1128:	4c 83       	std	Y+4, r20	; 0x04
    112a:	2d 83       	std	Y+5, r18	; 0x05
    112c:	0e 83       	std	Y+6, r16	; 0x06
    112e:	ef 82       	std	Y+7, r14	; 0x07
    1130:	c8 86       	std	Y+8, r12	; 0x08
    1132:	a9 86       	std	Y+9, r10	; 0x09
    1134:	8a 86       	std	Y+10, r8	; 0x0a
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	fc 01       	movw	r30, r24
    113e:	24 83       	std	Z+4, r18	; 0x04
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	fc 01       	movw	r30, r24
    1148:	25 83       	std	Z+5, r18	; 0x05
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	2e 81       	ldd	r18, Y+6	; 0x06
    1150:	fc 01       	movw	r30, r24
    1152:	26 83       	std	Z+6, r18	; 0x06
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	2f 81       	ldd	r18, Y+7	; 0x07
    115a:	fc 01       	movw	r30, r24
    115c:	27 83       	std	Z+7, r18	; 0x07
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	28 85       	ldd	r18, Y+8	; 0x08
    1164:	fc 01       	movw	r30, r24
    1166:	20 87       	std	Z+8, r18	; 0x08
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	29 85       	ldd	r18, Y+9	; 0x09
    116e:	fc 01       	movw	r30, r24
    1170:	21 87       	std	Z+9, r18	; 0x09
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	2a 85       	ldd	r18, Y+10	; 0x0a
    1178:	fc 01       	movw	r30, r24
    117a:	22 87       	std	Z+10, r18	; 0x0a
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	2c 89       	ldd	r18, Y+20	; 0x14
    1182:	fc 01       	movw	r30, r24
    1184:	23 87       	std	Z+11, r18	; 0x0b
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	2d 89       	ldd	r18, Y+21	; 0x15
    118c:	fc 01       	movw	r30, r24
    118e:	24 87       	std	Z+12, r18	; 0x0c
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	2e 89       	ldd	r18, Y+22	; 0x16
    1196:	fc 01       	movw	r30, r24
    1198:	25 87       	std	Z+13, r18	; 0x0d
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	2f 89       	ldd	r18, Y+23	; 0x17
    11a0:	fc 01       	movw	r30, r24
    11a2:	26 87       	std	Z+14, r18	; 0x0e
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	fc 01       	movw	r30, r24
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	fc 01       	movw	r30, r24
    11b8:	85 81       	ldd	r24, Z+5	; 0x05
    11ba:	8f 3f       	cpi	r24, 0xFF	; 255
    11bc:	39 f0       	breq	.+14     	; 0x11cc <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	fc 01       	movw	r30, r24
    11c4:	85 81       	ldd	r24, Z+5	; 0x05
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	fc 01       	movw	r30, r24
    11d2:	86 81       	ldd	r24, Z+6	; 0x06
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 23       	and	r24, r24
    11de:	29 f0       	breq	.+10     	; 0x11ea <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	fc 01       	movw	r30, r24
    11e6:	17 86       	std	Z+15, r1	; 0x0f
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	fc 01       	movw	r30, r24
    11f2:	27 87       	std	Z+15, r18	; 0x0f
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	60 e1       	ldi	r22, 0x10	; 16
    11fe:	0e d0       	rcall	.+28     	; 0x121c <_ZN13LiquidCrystal5beginEhhh>
    1200:	2a 96       	adiw	r28, 0x0a	; 10
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	0f 91       	pop	r16
    1212:	ef 90       	pop	r14
    1214:	cf 90       	pop	r12
    1216:	af 90       	pop	r10
    1218:	8f 90       	pop	r8
    121a:	08 95       	ret

0000121c <_ZN13LiquidCrystal5beginEhhh>:
    121c:	a5 e0       	ldi	r26, 0x05	; 5
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e4 e1       	ldi	r30, 0x14	; 20
    1222:	f9 e0       	ldi	r31, 0x09	; 9
    1224:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	4c 83       	std	Y+4, r20	; 0x04
    1230:	2d 83       	std	Y+5, r18	; 0x05
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	50 f0       	brcs	.+20     	; 0x124c <_ZN13LiquidCrystal5beginEhhh+0x30>
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	fc 01       	movw	r30, r24
    123e:	87 85       	ldd	r24, Z+15	; 0x0f
    1240:	28 2f       	mov	r18, r24
    1242:	28 60       	ori	r18, 0x08	; 8
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	fc 01       	movw	r30, r24
    124a:	27 87       	std	Z+15, r18	; 0x0f
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	fc 01       	movw	r30, r24
    1254:	23 8b       	std	Z+19, r18	; 0x13
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	ac 01       	movw	r20, r24
    125e:	40 5c       	subi	r20, 0xC0	; 192
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	8a 01       	movw	r16, r20
    126e:	40 e4       	ldi	r20, 0x40	; 64
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	a4 d0       	rcall	.+328    	; 0x13c0 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	88 23       	and	r24, r24
    127c:	69 f0       	breq	.+26     	; 0x1298 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	51 f4       	brne	.+20     	; 0x1298 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	fc 01       	movw	r30, r24
    128a:	87 85       	ldd	r24, Z+15	; 0x0f
    128c:	28 2f       	mov	r18, r24
    128e:	24 60       	ori	r18, 0x04	; 4
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	fc 01       	movw	r30, r24
    1296:	27 87       	std	Z+15, r18	; 0x0f
    1298:	80 e5       	ldi	r24, 0x50	; 80
    129a:	93 ec       	ldi	r25, 0xC3	; 195
    129c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	84 81       	ldd	r24, Z+4	; 0x04
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	fc 01       	movw	r30, r24
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	fc 01       	movw	r30, r24
    12c2:	85 81       	ldd	r24, Z+5	; 0x05
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <_ZN13LiquidCrystal5beginEhhh+0xba>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	fc 01       	movw	r30, r24
    12ce:	85 81       	ldd	r24, Z+5	; 0x05
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	fc 01       	movw	r30, r24
    12dc:	87 85       	ldd	r24, Z+15	; 0x0f
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	80 71       	andi	r24, 0x10	; 16
    12e4:	99 27       	eor	r25, r25
    12e6:	89 2b       	or	r24, r25
    12e8:	e9 f4       	brne	.+58     	; 0x1324 <_ZN13LiquidCrystal5beginEhhh+0x108>
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	63 e0       	ldi	r22, 0x03	; 3
    12f0:	91 d1       	rcall	.+802    	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
    12f2:	84 e9       	ldi	r24, 0x94	; 148
    12f4:	91 e1       	ldi	r25, 0x11	; 17
    12f6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	63 e0       	ldi	r22, 0x03	; 3
    1300:	89 d1       	rcall	.+786    	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
    1302:	84 e9       	ldi	r24, 0x94	; 148
    1304:	91 e1       	ldi	r25, 0x11	; 17
    1306:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	81 d1       	rcall	.+770    	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
    1312:	86 e9       	ldi	r24, 0x96	; 150
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	79 d1       	rcall	.+754    	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
    1322:	26 c0       	rjmp	.+76     	; 0x1370 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	fc 01       	movw	r30, r24
    132a:	87 85       	ldd	r24, Z+15	; 0x0f
    132c:	28 2f       	mov	r18, r24
    132e:	20 62       	ori	r18, 0x20	; 32
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	62 2f       	mov	r22, r18
    1336:	d6 d0       	rcall	.+428    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    1338:	84 e9       	ldi	r24, 0x94	; 148
    133a:	91 e1       	ldi	r25, 0x11	; 17
    133c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	fc 01       	movw	r30, r24
    1346:	87 85       	ldd	r24, Z+15	; 0x0f
    1348:	28 2f       	mov	r18, r24
    134a:	20 62       	ori	r18, 0x20	; 32
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	62 2f       	mov	r22, r18
    1352:	c8 d0       	rcall	.+400    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    1354:	86 e9       	ldi	r24, 0x96	; 150
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	fc 01       	movw	r30, r24
    1362:	87 85       	ldd	r24, Z+15	; 0x0f
    1364:	28 2f       	mov	r18, r24
    1366:	20 62       	ori	r18, 0x20	; 32
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	62 2f       	mov	r22, r18
    136e:	ba d0       	rcall	.+372    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	fc 01       	movw	r30, r24
    1376:	87 85       	ldd	r24, Z+15	; 0x0f
    1378:	28 2f       	mov	r18, r24
    137a:	20 62       	ori	r18, 0x20	; 32
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	9a 81       	ldd	r25, Y+2	; 0x02
    1380:	62 2f       	mov	r22, r18
    1382:	b0 d0       	rcall	.+352    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	24 e0       	ldi	r18, 0x04	; 4
    138a:	fc 01       	movw	r30, r24
    138c:	20 8b       	std	Z+16, r18	; 0x10
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	88 d0       	rcall	.+272    	; 0x14a4 <_ZN13LiquidCrystal7displayEv>
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	3b d0       	rcall	.+118    	; 0x1410 <_ZN13LiquidCrystal5clearEv>
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	22 e0       	ldi	r18, 0x02	; 2
    13a0:	fc 01       	movw	r30, r24
    13a2:	21 8b       	std	Z+17, r18	; 0x11
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	fc 01       	movw	r30, r24
    13aa:	81 89       	ldd	r24, Z+17	; 0x11
    13ac:	28 2f       	mov	r18, r24
    13ae:	24 60       	ori	r18, 0x04	; 4
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	62 2f       	mov	r22, r18
    13b6:	96 d0       	rcall	.+300    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    13b8:	25 96       	adiw	r28, 0x05	; 5
    13ba:	e4 e0       	ldi	r30, 0x04	; 4
    13bc:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

000013c0 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    13c0:	aa e0       	ldi	r26, 0x0A	; 10
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e6 ee       	ldi	r30, 0xE6	; 230
    13c6:	f9 e0       	ldi	r31, 0x09	; 9
    13c8:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	7c 83       	std	Y+4, r23	; 0x04
    13d2:	6b 83       	std	Y+3, r22	; 0x03
    13d4:	5e 83       	std	Y+6, r21	; 0x06
    13d6:	4d 83       	std	Y+5, r20	; 0x05
    13d8:	38 87       	std	Y+8, r19	; 0x08
    13da:	2f 83       	std	Y+7, r18	; 0x07
    13dc:	1a 87       	std	Y+10, r17	; 0x0a
    13de:	09 87       	std	Y+9, r16	; 0x09
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	fc 01       	movw	r30, r24
    13e8:	24 8b       	std	Z+20, r18	; 0x14
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	fc 01       	movw	r30, r24
    13f2:	25 8b       	std	Z+21, r18	; 0x15
    13f4:	2f 81       	ldd	r18, Y+7	; 0x07
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	fc 01       	movw	r30, r24
    13fc:	26 8b       	std	Z+22, r18	; 0x16
    13fe:	29 85       	ldd	r18, Y+9	; 0x09
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	fc 01       	movw	r30, r24
    1406:	27 8b       	std	Z+23, r18	; 0x17
    1408:	2a 96       	adiw	r28, 0x0a	; 10
    140a:	e4 e0       	ldi	r30, 0x04	; 4
    140c:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

00001410 <_ZN13LiquidCrystal5clearEv>:
    1410:	a2 e0       	ldi	r26, 0x02	; 2
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e0       	ldi	r30, 0x0E	; 14
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	5e d0       	rcall	.+188    	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    1428:	80 ed       	ldi	r24, 0xD0	; 208
    142a:	97 e0       	ldi	r25, 0x07	; 7
    142c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
    1430:	22 96       	adiw	r28, 0x02	; 2
    1432:	e2 e0       	ldi	r30, 0x02	; 2
    1434:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001438 <_ZN13LiquidCrystal9setCursorEhh>:
    1438:	a6 e0       	ldi	r26, 0x06	; 6
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e2       	ldi	r30, 0x22	; 34
    143e:	fa e0       	ldi	r31, 0x0A	; 10
    1440:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	6d 83       	std	Y+5, r22	; 0x05
    144a:	4e 83       	std	Y+6, r20	; 0x06
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	8e 81       	ldd	r24, Y+6	; 0x06
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	10 f0       	brcs	.+4      	; 0x145e <_ZN13LiquidCrystal9setCursorEhh+0x26>
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	8e 83       	std	Y+6, r24	; 0x06
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	fc 01       	movw	r30, r24
    1464:	93 89       	ldd	r25, Z+19	; 0x13
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	89 17       	cp	r24, r25
    146a:	30 f0       	brcs	.+12     	; 0x1478 <_ZN13LiquidCrystal9setCursorEhh+0x40>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	fc 01       	movw	r30, r24
    1472:	83 89       	ldd	r24, Z+19	; 0x13
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	8e 83       	std	Y+6, r24	; 0x06
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	44 96       	adiw	r24, 0x14	; 20
    1488:	fc 01       	movw	r30, r24
    148a:	90 81       	ld	r25, Z
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	89 0f       	add	r24, r25
    1490:	80 68       	ori	r24, 0x80	; 128
    1492:	28 2f       	mov	r18, r24
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	62 2f       	mov	r22, r18
    149a:	24 d0       	rcall	.+72     	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    149c:	26 96       	adiw	r28, 0x06	; 6
    149e:	e2 e0       	ldi	r30, 0x02	; 2
    14a0:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000014a4 <_ZN13LiquidCrystal7displayEv>:
    14a4:	a2 e0       	ldi	r26, 0x02	; 2
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 e5       	ldi	r30, 0x58	; 88
    14aa:	fa e0       	ldi	r31, 0x0A	; 10
    14ac:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 89       	ldd	r24, Z+16	; 0x10
    14bc:	28 2f       	mov	r18, r24
    14be:	24 60       	ori	r18, 0x04	; 4
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 8b       	std	Z+16, r18	; 0x10
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 89       	ldd	r24, Z+16	; 0x10
    14d0:	28 2f       	mov	r18, r24
    14d2:	28 60       	ori	r18, 0x08	; 8
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	62 2f       	mov	r22, r18
    14da:	04 d0       	rcall	.+8      	; 0x14e4 <_ZN13LiquidCrystal7commandEh>
    14dc:	22 96       	adiw	r28, 0x02	; 2
    14de:	e2 e0       	ldi	r30, 0x02	; 2
    14e0:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000014e4 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    14e4:	a3 e0       	ldi	r26, 0x03	; 3
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e7       	ldi	r30, 0x78	; 120
    14ea:	fa e0       	ldi	r31, 0x0A	; 10
    14ec:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	6b 81       	ldd	r22, Y+3	; 0x03
    14fe:	18 d0       	rcall	.+48     	; 0x1530 <_ZN13LiquidCrystal4sendEhh>
}
    1500:	23 96       	adiw	r28, 0x03	; 3
    1502:	e2 e0       	ldi	r30, 0x02	; 2
    1504:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001508 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    1508:	a3 e0       	ldi	r26, 0x03	; 3
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ea e8       	ldi	r30, 0x8A	; 138
    150e:	fa e0       	ldi	r31, 0x0A	; 10
    1510:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	6b 81       	ldd	r22, Y+3	; 0x03
    1522:	06 d0       	rcall	.+12     	; 0x1530 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
}
    1528:	23 96       	adiw	r28, 0x03	; 3
    152a:	e2 e0       	ldi	r30, 0x02	; 2
    152c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001530 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1530:	a4 e0       	ldi	r26, 0x04	; 4
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e9       	ldi	r30, 0x9E	; 158
    1536:	fa e0       	ldi	r31, 0x0A	; 10
    1538:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	6b 83       	std	Y+3, r22	; 0x03
    1542:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	fc 01       	movw	r30, r24
    154a:	84 81       	ldd	r24, Z+4	; 0x04
    154c:	6c 81       	ldd	r22, Y+4	; 0x04
    154e:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	fc 01       	movw	r30, r24
    1558:	85 81       	ldd	r24, Z+5	; 0x05
    155a:	8f 3f       	cpi	r24, 0xFF	; 255
    155c:	39 f0       	breq	.+14     	; 0x156c <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	fc 01       	movw	r30, r24
    1564:	85 81       	ldd	r24, Z+5	; 0x05
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	fc 01       	movw	r30, r24
    1572:	87 85       	ldd	r24, Z+15	; 0x0f
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	80 71       	andi	r24, 0x10	; 16
    157a:	99 27       	eor	r25, r25
    157c:	89 2b       	or	r24, r25
    157e:	29 f0       	breq	.+10     	; 0x158a <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	6b 81       	ldd	r22, Y+3	; 0x03
    1586:	85 d0       	rcall	.+266    	; 0x1692 <_ZN13LiquidCrystal10write8bitsEh>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	95 95       	asr	r25
    1592:	87 95       	ror	r24
    1594:	95 95       	asr	r25
    1596:	87 95       	ror	r24
    1598:	95 95       	asr	r25
    159a:	87 95       	ror	r24
    159c:	95 95       	asr	r25
    159e:	87 95       	ror	r24
    15a0:	28 2f       	mov	r18, r24
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	62 2f       	mov	r22, r18
    15a8:	35 d0       	rcall	.+106    	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	9a 81       	ldd	r25, Y+2	; 0x02
    15ae:	6b 81       	ldd	r22, Y+3	; 0x03
    15b0:	31 d0       	rcall	.+98     	; 0x1614 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    15b2:	24 96       	adiw	r28, 0x04	; 4
    15b4:	e2 e0       	ldi	r30, 0x02	; 2
    15b6:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000015ba <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    15ba:	a2 e0       	ldi	r26, 0x02	; 2
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 ee       	ldi	r30, 0xE3	; 227
    15c0:	fa e0       	ldi	r31, 0x0A	; 10
    15c2:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	fc 01       	movw	r30, r24
    15d0:	86 81       	ldd	r24, Z+6	; 0x06
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
  delayMicroseconds(1);    
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	fc 01       	movw	r30, r24
    15e6:	86 81       	ldd	r24, Z+6	; 0x06
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	fc 01       	movw	r30, r24
    15fc:	86 81       	ldd	r24, Z+6	; 0x06
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1604:	84 e6       	ldi	r24, 0x64	; 100
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <delayMicroseconds>
}
    160c:	22 96       	adiw	r28, 0x02	; 2
    160e:	e2 e0       	ldi	r30, 0x02	; 2
    1610:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001614 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1614:	a5 e0       	ldi	r26, 0x05	; 5
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e0 e1       	ldi	r30, 0x10	; 16
    161a:	fb e0       	ldi	r31, 0x0B	; 11
    161c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    1626:	1a 82       	std	Y+2, r1	; 0x02
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	28 c0       	rjmp	.+80     	; 0x167c <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	07 96       	adiw	r24, 0x07	; 7
    163a:	fc 01       	movw	r30, r24
    163c:	80 81       	ld	r24, Z
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	09 80       	ldd	r0, Y+1	; 0x01
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    1656:	48 2f       	mov	r20, r24
    1658:	41 70       	andi	r20, 0x01	; 1
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	07 96       	adiw	r24, 0x07	; 7
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	64 2f       	mov	r22, r20
    166e:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	04 97       	sbiw	r24, 0x04	; 4
    1682:	a4 f2       	brlt	.-88     	; 0x162c <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	98 df       	rcall	.-208    	; 0x15ba <_ZN13LiquidCrystal11pulseEnableEv>
}
    168a:	25 96       	adiw	r28, 0x05	; 5
    168c:	e2 e0       	ldi	r30, 0x02	; 2
    168e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001692 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    1692:	a5 e0       	ldi	r26, 0x05	; 5
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    16a4:	1a 82       	std	Y+2, r1	; 0x02
    16a6:	19 82       	std	Y+1, r1	; 0x01
    16a8:	28 c0       	rjmp	.+80     	; 0x16fa <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	07 96       	adiw	r24, 0x07	; 7
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	09 80       	ldd	r0, Y+1	; 0x01
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    16cc:	95 95       	asr	r25
    16ce:	87 95       	ror	r24
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    16d4:	48 2f       	mov	r20, r24
    16d6:	41 70       	andi	r20, 0x01	; 1
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	07 96       	adiw	r24, 0x07	; 7
    16e6:	fc 01       	movw	r30, r24
    16e8:	80 81       	ld	r24, Z
    16ea:	64 2f       	mov	r22, r20
    16ec:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	08 97       	sbiw	r24, 0x08	; 8
    1700:	a4 f2       	brlt	.-88     	; 0x16aa <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	59 df       	rcall	.-334    	; 0x15ba <_ZN13LiquidCrystal11pulseEnableEv>
}
    1708:	25 96       	adiw	r28, 0x05	; 5
    170a:	e2 e0       	ldi	r30, 0x02	; 2
    170c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001710 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e8       	ldi	r30, 0x8E	; 142
    1716:	fb e0       	ldi	r31, 0x0B	; 11
    1718:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    171c:	89 ed       	ldi	r24, 0xD9	; 217
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	fc 01       	movw	r30, r24
    1722:	80 81       	ld	r24, Z
    1724:	88 23       	and	r24, r24
    1726:	51 f4       	brne	.+20     	; 0x173c <_ZN4erom6Access8instanceEv+0x2c>
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	83 ee       	ldi	r24, 0xE3	; 227
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0a d0       	rcall	.+20     	; 0x1746 <_ZN4erom6AccessC1Ej>
    1732:	89 ed       	ldi	r24, 0xD9	; 217
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
    173c:	83 ee       	ldi	r24, 0xE3	; 227
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	e2 e0       	ldi	r30, 0x02	; 2
    1742:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001746 <_ZN4erom6AccessC1Ej>:
    1746:	a4 e0       	ldi	r26, 0x04	; 4
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e9 ea       	ldi	r30, 0xA9	; 169
    174c:	fb e0       	ldi	r31, 0x0B	; 11
    174e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	7c 83       	std	Y+4, r23	; 0x04
    1758:	6b 83       	std	Y+3, r22	; 0x03
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	fc 01       	movw	r30, r24
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	20 83       	st	Z, r18
    1768:	0a d0       	rcall	.+20     	; 0x177e <_ZN4erom6Access18device_memory_sizeEv>
    176a:	9c 01       	movw	r18, r24
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	fc 01       	movw	r30, r24
    1772:	33 83       	std	Z+3, r19	; 0x03
    1774:	22 83       	std	Z+2, r18	; 0x02
    1776:	24 96       	adiw	r28, 0x04	; 4
    1778:	e2 e0       	ldi	r30, 0x02	; 2
    177a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000177e <_ZN4erom6Access18device_memory_sizeEv>:
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 ec       	ldi	r30, 0xC5	; 197
    1784:	fb e0       	ldi	r31, 0x0B	; 11
    1786:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	94 e0       	ldi	r25, 0x04	; 4
    178e:	e2 e0       	ldi	r30, 0x02	; 2
    1790:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001794 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1794:	a4 e0       	ldi	r26, 0x04	; 4
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	7c 83       	std	Y+4, r23	; 0x04
    17a6:	6b 83       	std	Y+3, r22	; 0x03
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	49 f4       	brne	.+18     	; 0x17c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    17b8:	ab df       	rcall	.-170    	; 0x1710 <_ZN4erom6Access8instanceEv>
    17ba:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <_ZN4erom6accessE+0x1>
    17be:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    17c2:	24 96       	adiw	r28, 0x04	; 4
    17c4:	e2 e0       	ldi	r30, 0x02	; 2
    17c6:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000017ca <_GLOBAL__sub_I__ZN4erom6accessE>:
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb ee       	ldi	r30, 0xEB	; 235
    17d0:	fb e0       	ldi	r31, 0x0B	; 11
    17d2:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    17d6:	6f ef       	ldi	r22, 0xFF	; 255
    17d8:	7f ef       	ldi	r23, 0xFF	; 255
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	da df       	rcall	.-76     	; 0x1794 <_Z41__static_initialization_and_destruction_0ii>
    17e0:	e2 e0       	ldi	r30, 0x02	; 2
    17e2:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000017e6 <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e9 ef       	ldi	r30, 0xF9	; 249
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    17f2:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	e2 e0       	ldi	r30, 0x02	; 2
    1800:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001804 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1804:	a8 e0       	ldi	r26, 0x08	; 8
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e8 e0       	ldi	r30, 0x08	; 8
    180a:	fc e0       	ldi	r31, 0x0C	; 12
    180c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1810:	98 87       	std	Y+8, r25	; 0x08
    1812:	8f 83       	std	Y+7, r24	; 0x07
    1814:	8f 81       	ldd	r24, Y+7	; 0x07
    1816:	98 85       	ldd	r25, Y+8	; 0x08
    1818:	26 e8       	ldi	r18, 0x86	; 134
    181a:	31 e0       	ldi	r19, 0x01	; 1
    181c:	fc 01       	movw	r30, r24
    181e:	31 83       	std	Z+1, r19	; 0x01
    1820:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1822:	e1 df       	rcall	.-62     	; 0x17e6 <_ZL7elapsedv>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8b 83       	std	Y+3, r24	; 0x03
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	ad 83       	std	Y+5, r26	; 0x05
    182e:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1830:	1a 82       	std	Y+2, r1	; 0x02
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	3d c0       	rjmp	.+122    	; 0x18b0 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    1836:	2f 81       	ldd	r18, Y+7	; 0x07
    1838:	38 85       	ldd	r19, Y+8	; 0x08
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	82 0f       	add	r24, r18
    1840:	93 1f       	adc	r25, r19
    1842:	82 57       	subi	r24, 0x72	; 114
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    184a:	2f 81       	ldd	r18, Y+7	; 0x07
    184c:	38 85       	ldd	r19, Y+8	; 0x08
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	45 96       	adiw	r24, 0x15	; 21
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	fc 01       	movw	r30, r24
    185e:	11 82       	std	Z+1, r1	; 0x01
    1860:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    1862:	2f 81       	ldd	r18, Y+7	; 0x07
    1864:	38 85       	ldd	r19, Y+8	; 0x08
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	82 0f       	add	r24, r18
    1874:	93 1f       	adc	r25, r19
    1876:	9c 01       	movw	r18, r24
    1878:	2e 5f       	subi	r18, 0xFE	; 254
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	ad 81       	ldd	r26, Y+5	; 0x05
    1882:	be 81       	ldd	r27, Y+6	; 0x06
    1884:	f9 01       	movw	r30, r18
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    188e:	2f 81       	ldd	r18, Y+7	; 0x07
    1890:	38 85       	ldd	r19, Y+8	; 0x08
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	cd 96       	adiw	r24, 0x3d	; 61
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	fc 01       	movw	r30, r24
    18a2:	11 82       	std	Z+1, r1	; 0x01
    18a4:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	0a 97       	sbiw	r24, 0x0a	; 10
    18b6:	0c f4       	brge	.+2      	; 0x18ba <_ZN11SimpleTimerC1Ev+0xb6>
    18b8:	be cf       	rjmp	.-132    	; 0x1836 <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	84 55       	subi	r24, 0x54	; 84
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	fc 01       	movw	r30, r24
    18c4:	11 82       	std	Z+1, r1	; 0x01
    18c6:	10 82       	st	Z, r1
}
    18c8:	28 96       	adiw	r28, 0x08	; 8
    18ca:	e2 e0       	ldi	r30, 0x02	; 2
    18cc:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000018d0 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    18d0:	a8 e0       	ldi	r26, 0x08	; 8
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ee e6       	ldi	r30, 0x6E	; 110
    18d6:	fc e0       	ldi	r31, 0x0C	; 12
    18d8:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    18dc:	98 87       	std	Y+8, r25	; 0x08
    18de:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    18e0:	82 df       	rcall	.-252    	; 0x17e6 <_ZL7elapsedv>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	8b 83       	std	Y+3, r24	; 0x03
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	ad 83       	std	Y+5, r26	; 0x05
    18ec:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    18ee:	1a 82       	std	Y+2, r1	; 0x02
    18f0:	19 82       	std	Y+1, r1	; 0x01
    18f2:	25 c1       	rjmp	.+586    	; 0x1b3e <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    18f4:	2f 81       	ldd	r18, Y+7	; 0x07
    18f6:	38 85       	ldd	r19, Y+8	; 0x08
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	84 5b       	subi	r24, 0xB4	; 180
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	82 0f       	add	r24, r18
    1906:	93 1f       	adc	r25, r19
    1908:	fc 01       	movw	r30, r24
    190a:	11 82       	std	Z+1, r1	; 0x01
    190c:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    190e:	2f 81       	ldd	r18, Y+7	; 0x07
    1910:	38 85       	ldd	r19, Y+8	; 0x08
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	45 96       	adiw	r24, 0x15	; 21
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	82 0f       	add	r24, r18
    191e:	93 1f       	adc	r25, r19
    1920:	fc 01       	movw	r30, r24
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	89 2b       	or	r24, r25
    1928:	09 f4       	brne	.+2      	; 0x192c <_ZN11SimpleTimer3runEv+0x5c>
    192a:	04 c1       	rjmp	.+520    	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    192c:	2f 81       	ldd	r18, Y+7	; 0x07
    192e:	38 85       	ldd	r19, Y+8	; 0x08
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	82 0f       	add	r24, r18
    193e:	93 1f       	adc	r25, r19
    1940:	02 96       	adiw	r24, 0x02	; 2
    1942:	fc 01       	movw	r30, r24
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	a2 81       	ldd	r26, Z+2	; 0x02
    194a:	b3 81       	ldd	r27, Z+3	; 0x03
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	4d 81       	ldd	r20, Y+5	; 0x05
    1952:	5e 81       	ldd	r21, Y+6	; 0x06
    1954:	79 01       	movw	r14, r18
    1956:	8a 01       	movw	r16, r20
    1958:	e8 1a       	sub	r14, r24
    195a:	f9 0a       	sbc	r15, r25
    195c:	0a 0b       	sbc	r16, r26
    195e:	1b 0b       	sbc	r17, r27
    1960:	d8 01       	movw	r26, r16
    1962:	c7 01       	movw	r24, r14
    1964:	4f 81       	ldd	r20, Y+7	; 0x07
    1966:	58 85       	ldd	r21, Y+8	; 0x08
    1968:	29 81       	ldd	r18, Y+1	; 0x01
    196a:	3a 81       	ldd	r19, Y+2	; 0x02
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	24 0f       	add	r18, r20
    1976:	35 1f       	adc	r19, r21
    1978:	22 5c       	subi	r18, 0xC2	; 194
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	42 81       	ldd	r20, Z+2	; 0x02
    1984:	53 81       	ldd	r21, Z+3	; 0x03
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	a4 07       	cpc	r26, r20
    198c:	b5 07       	cpc	r27, r21
    198e:	08 f4       	brcc	.+2      	; 0x1992 <_ZN11SimpleTimer3runEv+0xc2>
    1990:	d1 c0       	rjmp	.+418    	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	02 96       	adiw	r24, 0x02	; 2
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	a2 81       	ldd	r26, Z+2	; 0x02
    19b0:	b3 81       	ldd	r27, Z+3	; 0x03
    19b2:	4f 81       	ldd	r20, Y+7	; 0x07
    19b4:	58 85       	ldd	r21, Y+8	; 0x08
    19b6:	29 81       	ldd	r18, Y+1	; 0x01
    19b8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ba:	22 0f       	add	r18, r18
    19bc:	33 1f       	adc	r19, r19
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	24 0f       	add	r18, r20
    19c4:	35 1f       	adc	r19, r21
    19c6:	22 5c       	subi	r18, 0xC2	; 194
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	f9 01       	movw	r30, r18
    19cc:	20 81       	ld	r18, Z
    19ce:	31 81       	ldd	r19, Z+1	; 0x01
    19d0:	42 81       	ldd	r20, Z+2	; 0x02
    19d2:	53 81       	ldd	r21, Z+3	; 0x03
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	a4 1f       	adc	r26, r20
    19da:	b5 1f       	adc	r27, r21
    19dc:	4f 81       	ldd	r20, Y+7	; 0x07
    19de:	58 85       	ldd	r21, Y+8	; 0x08
    19e0:	29 81       	ldd	r18, Y+1	; 0x01
    19e2:	3a 81       	ldd	r19, Y+2	; 0x02
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	24 0f       	add	r18, r20
    19ee:	35 1f       	adc	r19, r21
    19f0:	2e 5f       	subi	r18, 0xFE	; 254
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	f9 01       	movw	r30, r18
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	a2 83       	std	Z+2, r26	; 0x02
    19fc:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    19fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1a00:	38 85       	ldd	r19, Y+8	; 0x08
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	82 57       	subi	r24, 0x72	; 114
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	fc 01       	movw	r30, r24
    1a10:	80 81       	ld	r24, Z
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <_ZN11SimpleTimer3runEv+0x148>
    1a16:	8e c0       	rjmp	.+284    	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1a18:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1a:	38 85       	ldd	r19, Y+8	; 0x08
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	c3 96       	adiw	r24, 0x33	; 51
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	89 2b       	or	r24, r25
    1a32:	81 f4       	brne	.+32     	; 0x1a54 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a34:	2f 81       	ldd	r18, Y+7	; 0x07
    1a36:	38 85       	ldd	r19, Y+8	; 0x08
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	84 5b       	subi	r24, 0xB4	; 180
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	31 83       	std	Z+1, r19	; 0x01
    1a50:	20 83       	st	Z, r18
    1a52:	70 c0       	rjmp	.+224    	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1a54:	2f 81       	ldd	r18, Y+7	; 0x07
    1a56:	38 85       	ldd	r19, Y+8	; 0x08
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	cd 96       	adiw	r24, 0x3d	; 61
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	82 0f       	add	r24, r18
    1a64:	93 1f       	adc	r25, r19
    1a66:	fc 01       	movw	r30, r24
    1a68:	20 81       	ld	r18, Z
    1a6a:	31 81       	ldd	r19, Z+1	; 0x01
    1a6c:	4f 81       	ldd	r20, Y+7	; 0x07
    1a6e:	58 85       	ldd	r21, Y+8	; 0x08
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	c3 96       	adiw	r24, 0x33	; 51
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	84 0f       	add	r24, r20
    1a7c:	95 1f       	adc	r25, r21
    1a7e:	fc 01       	movw	r30, r24
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <_ZN11SimpleTimer3runEv+0x1bc>
    1a8a:	54 c0       	rjmp	.+168    	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1a8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a8e:	38 85       	ldd	r19, Y+8	; 0x08
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	84 5b       	subi	r24, 0xB4	; 180
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	82 0f       	add	r24, r18
    1a9e:	93 1f       	adc	r25, r19
    1aa0:	21 e0       	ldi	r18, 0x01	; 1
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	31 83       	std	Z+1, r19	; 0x01
    1aa8:	20 83       	st	Z, r18
                        numRuns[i]++;
    1aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    1aac:	38 85       	ldd	r19, Y+8	; 0x08
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	cd 96       	adiw	r24, 0x3d	; 61
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	82 0f       	add	r24, r18
    1aba:	93 1f       	adc	r25, r19
    1abc:	fc 01       	movw	r30, r24
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
    1ac2:	9c 01       	movw	r18, r24
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	4f 81       	ldd	r20, Y+7	; 0x07
    1aca:	58 85       	ldd	r21, Y+8	; 0x08
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	cd 96       	adiw	r24, 0x3d	; 61
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	84 0f       	add	r24, r20
    1ad8:	95 1f       	adc	r25, r21
    1ada:	fc 01       	movw	r30, r24
    1adc:	31 83       	std	Z+1, r19	; 0x01
    1ade:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1ae0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae2:	38 85       	ldd	r19, Y+8	; 0x08
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	cd 96       	adiw	r24, 0x3d	; 61
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	82 0f       	add	r24, r18
    1af0:	93 1f       	adc	r25, r19
    1af2:	fc 01       	movw	r30, r24
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	4f 81       	ldd	r20, Y+7	; 0x07
    1afa:	58 85       	ldd	r21, Y+8	; 0x08
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	c3 96       	adiw	r24, 0x33	; 51
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	84 0f       	add	r24, r20
    1b08:	95 1f       	adc	r25, r21
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	7c f0       	brlt	.+30     	; 0x1b34 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1b16:	2f 81       	ldd	r18, Y+7	; 0x07
    1b18:	38 85       	ldd	r19, Y+8	; 0x08
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	84 5b       	subi	r24, 0xB4	; 180
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	82 0f       	add	r24, r18
    1b28:	93 1f       	adc	r25, r19
    1b2a:	22 e0       	ldi	r18, 0x02	; 2
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	fc 01       	movw	r30, r24
    1b30:	31 83       	std	Z+1, r19	; 0x01
    1b32:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	0a 97       	sbiw	r24, 0x0a	; 10
    1b44:	0c f4       	brge	.+2      	; 0x1b48 <_ZN11SimpleTimer3runEv+0x278>
    1b46:	d6 ce       	rjmp	.-596    	; 0x18f4 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1b48:	1a 82       	std	Y+2, r1	; 0x02
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	46 c0       	rjmp	.+140    	; 0x1bda <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1b4e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b50:	38 85       	ldd	r19, Y+8	; 0x08
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	84 5b       	subi	r24, 0xB4	; 180
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <_ZN11SimpleTimer3runEv+0x2a4>
    1b6e:	02 97       	sbiw	r24, 0x02	; 2
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1b72:	2e c0       	rjmp	.+92     	; 0x1bd0 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1b74:	2f 81       	ldd	r18, Y+7	; 0x07
    1b76:	38 85       	ldd	r19, Y+8	; 0x08
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	45 96       	adiw	r24, 0x15	; 21
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	82 0f       	add	r24, r18
    1b84:	93 1f       	adc	r25, r19
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	09 95       	icall
                break;
    1b90:	1f c0       	rjmp	.+62     	; 0x1bd0 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	45 96       	adiw	r24, 0x15	; 21
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	fc 01       	movw	r30, r24
    1bac:	09 95       	icall
                deleteTimer(i);
    1bae:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb0:	98 85       	ldd	r25, Y+8	; 0x08
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	08 96       	adiw	r24, 0x08	; 8
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 81       	ld	r18, Z
    1bbe:	31 81       	ldd	r19, Z+1	; 0x01
    1bc0:	49 81       	ldd	r20, Y+1	; 0x01
    1bc2:	5a 81       	ldd	r21, Y+2	; 0x02
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	98 85       	ldd	r25, Y+8	; 0x08
    1bc8:	ba 01       	movw	r22, r20
    1bca:	f9 01       	movw	r30, r18
    1bcc:	09 95       	icall
                break;
    1bce:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	0a 97       	sbiw	r24, 0x0a	; 10
    1be0:	0c f4       	brge	.+2      	; 0x1be4 <_ZN11SimpleTimer3runEv+0x314>
    1be2:	b5 cf       	rjmp	.-150    	; 0x1b4e <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1be4:	28 96       	adiw	r28, 0x08	; 8
    1be6:	e6 e0       	ldi	r30, 0x06	; 6
    1be8:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00001bec <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1bec:	a4 e0       	ldi	r26, 0x04	; 4
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ec ef       	ldi	r30, 0xFC	; 252
    1bf2:	fd e0       	ldi	r31, 0x0D	; 13
    1bf4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	84 55       	subi	r24, 0x54	; 84
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c0c:	1c f0       	brlt	.+6      	; 0x1c14 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	1f c0       	rjmp	.+62     	; 0x1c52 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	16 c0       	rjmp	.+44     	; 0x1c46 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	45 96       	adiw	r24, 0x15	; 21
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	80 81       	ld	r24, Z
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	89 2b       	or	r24, r25
    1c34:	19 f4       	brne	.+6      	; 0x1c3c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	0b c0       	rjmp	.+22     	; 0x1c52 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c4c:	34 f3       	brlt	.-52     	; 0x1c1a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
}
    1c52:	24 96       	adiw	r28, 0x04	; 4
    1c54:	e2 e0       	ldi	r30, 0x02	; 2
    1c56:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001c5a <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1c5a:	ac e0       	ldi	r26, 0x0C	; 12
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e3 e3       	ldi	r30, 0x33	; 51
    1c60:	fe e0       	ldi	r31, 0x0E	; 14
    1c62:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	4d 83       	std	Y+5, r20	; 0x05
    1c6c:	5e 83       	std	Y+6, r21	; 0x06
    1c6e:	6f 83       	std	Y+7, r22	; 0x07
    1c70:	78 87       	std	Y+8, r23	; 0x08
    1c72:	3a 87       	std	Y+10, r19	; 0x0a
    1c74:	29 87       	std	Y+9, r18	; 0x09
    1c76:	1c 87       	std	Y+12, r17	; 0x0c
    1c78:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	b6 df       	rcall	.-148    	; 0x1bec <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	99 23       	and	r25, r25
    1c8a:	1c f4       	brge	.+6      	; 0x1c92 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	9f ef       	ldi	r25, 0xFF	; 255
    1c90:	6b c0       	rjmp	.+214    	; 0x1d68 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	89 2b       	or	r24, r25
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1c9a:	8f ef       	ldi	r24, 0xFF	; 255
    1c9c:	9f ef       	ldi	r25, 0xFF	; 255
    1c9e:	64 c0       	rjmp	.+200    	; 0x1d68 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	82 0f       	add	r24, r18
    1cb2:	93 1f       	adc	r25, r19
    1cb4:	9c 01       	movw	r18, r24
    1cb6:	22 5c       	subi	r18, 0xC2	; 194
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	af 81       	ldd	r26, Y+7	; 0x07
    1cc0:	b8 85       	ldd	r27, Y+8	; 0x08
    1cc2:	f9 01       	movw	r30, r18
    1cc4:	80 83       	st	Z, r24
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	a2 83       	std	Z+2, r26	; 0x02
    1cca:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	45 96       	adiw	r24, 0x15	; 21
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	82 0f       	add	r24, r18
    1cdc:	93 1f       	adc	r25, r19
    1cde:	29 85       	ldd	r18, Y+9	; 0x09
    1ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	31 83       	std	Z+1, r19	; 0x01
    1ce6:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cea:	3c 81       	ldd	r19, Y+4	; 0x04
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	c3 96       	adiw	r24, 0x33	; 51
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	82 0f       	add	r24, r18
    1cf8:	93 1f       	adc	r25, r19
    1cfa:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cfc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cfe:	fc 01       	movw	r30, r24
    1d00:	31 83       	std	Z+1, r19	; 0x01
    1d02:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	82 0f       	add	r24, r18
    1d0e:	93 1f       	adc	r25, r19
    1d10:	82 57       	subi	r24, 0x72	; 114
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	21 e0       	ldi	r18, 0x01	; 1
    1d16:	fc 01       	movw	r30, r24
    1d18:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1d1a:	65 dd       	rcall	.-1334   	; 0x17e6 <_ZL7elapsedv>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	4b 81       	ldd	r20, Y+3	; 0x03
    1d22:	5c 81       	ldd	r21, Y+4	; 0x04
    1d24:	29 81       	ldd	r18, Y+1	; 0x01
    1d26:	3a 81       	ldd	r19, Y+2	; 0x02
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	24 0f       	add	r18, r20
    1d32:	35 1f       	adc	r19, r21
    1d34:	2e 5f       	subi	r18, 0xFE	; 254
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
    1d38:	f9 01       	movw	r30, r18
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	a2 83       	std	Z+2, r26	; 0x02
    1d40:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	84 55       	subi	r24, 0x54	; 84
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	9c 01       	movw	r18, r24
    1d52:	2f 5f       	subi	r18, 0xFF	; 255
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	84 55       	subi	r24, 0x54	; 84
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	fc 01       	movw	r30, r24
    1d60:	31 83       	std	Z+1, r19	; 0x01
    1d62:	20 83       	st	Z, r18

    return freeTimer;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d68:	2c 96       	adiw	r28, 0x0c	; 12
    1d6a:	e4 e0       	ldi	r30, 0x04	; 4
    1d6c:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

00001d70 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1d70:	a8 e0       	ldi	r26, 0x08	; 8
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ee eb       	ldi	r30, 0xBE	; 190
    1d76:	fe e0       	ldi	r31, 0x0E	; 14
    1d78:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	4b 83       	std	Y+3, r20	; 0x03
    1d82:	5c 83       	std	Y+4, r21	; 0x04
    1d84:	6d 83       	std	Y+5, r22	; 0x05
    1d86:	7e 83       	std	Y+6, r23	; 0x06
    1d88:	38 87       	std	Y+8, r19	; 0x08
    1d8a:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	dc 01       	movw	r26, r24
    1d92:	8d 91       	ld	r24, X+
    1d94:	9c 91       	ld	r25, X
    1d96:	06 96       	adiw	r24, 0x06	; 6
    1d98:	dc 01       	movw	r26, r24
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1da0:	38 85       	ldd	r19, Y+8	; 0x08
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	ad 81       	ldd	r26, Y+5	; 0x05
    1da8:	be 81       	ldd	r27, Y+6	; 0x06
    1daa:	e9 80       	ldd	r14, Y+1	; 0x01
    1dac:	fa 80       	ldd	r15, Y+2	; 0x02
    1dae:	00 e0       	ldi	r16, 0x00	; 0
    1db0:	10 e0       	ldi	r17, 0x00	; 0
    1db2:	ac 01       	movw	r20, r24
    1db4:	bd 01       	movw	r22, r26
    1db6:	c7 01       	movw	r24, r14
    1db8:	09 95       	icall
}
    1dba:	28 96       	adiw	r28, 0x08	; 8
    1dbc:	e6 e0       	ldi	r30, 0x06	; 6
    1dbe:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00001dc2 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1dc2:	a8 e0       	ldi	r26, 0x08	; 8
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e7 ee       	ldi	r30, 0xE7	; 231
    1dc8:	fe e0       	ldi	r31, 0x0E	; 14
    1dca:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	4b 83       	std	Y+3, r20	; 0x03
    1dd4:	5c 83       	std	Y+4, r21	; 0x04
    1dd6:	6d 83       	std	Y+5, r22	; 0x05
    1dd8:	7e 83       	std	Y+6, r23	; 0x06
    1dda:	38 87       	std	Y+8, r19	; 0x08
    1ddc:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	dc 01       	movw	r26, r24
    1de4:	8d 91       	ld	r24, X+
    1de6:	9c 91       	ld	r25, X
    1de8:	06 96       	adiw	r24, 0x06	; 6
    1dea:	dc 01       	movw	r26, r24
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
    1df0:	2f 81       	ldd	r18, Y+7	; 0x07
    1df2:	38 85       	ldd	r19, Y+8	; 0x08
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	ad 81       	ldd	r26, Y+5	; 0x05
    1dfa:	be 81       	ldd	r27, Y+6	; 0x06
    1dfc:	e9 80       	ldd	r14, Y+1	; 0x01
    1dfe:	fa 80       	ldd	r15, Y+2	; 0x02
    1e00:	01 e0       	ldi	r16, 0x01	; 1
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	ac 01       	movw	r20, r24
    1e06:	bd 01       	movw	r22, r26
    1e08:	c7 01       	movw	r24, r14
    1e0a:	09 95       	icall
}
    1e0c:	28 96       	adiw	r28, 0x08	; 8
    1e0e:	e6 e0       	ldi	r30, 0x06	; 6
    1e10:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00001e14 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1e14:	a4 e0       	ldi	r26, 0x04	; 4
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e1       	ldi	r30, 0x10	; 16
    1e1a:	ff e0       	ldi	r31, 0x0F	; 15
    1e1c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	7c 83       	std	Y+4, r23	; 0x04
    1e26:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	0a 97       	sbiw	r24, 0x0a	; 10
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1e30:	69 c0       	rjmp	.+210    	; 0x1f04 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	84 55       	subi	r24, 0x54	; 84
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	89 2b       	or	r24, r25
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1e44:	5f c0       	rjmp	.+190    	; 0x1f04 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1e46:	29 81       	ldd	r18, Y+1	; 0x01
    1e48:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	45 96       	adiw	r24, 0x15	; 21
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	fc 01       	movw	r30, r24
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	89 2b       	or	r24, r25
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1e62:	50 c0       	rjmp	.+160    	; 0x1f04 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1e64:	29 81       	ldd	r18, Y+1	; 0x01
    1e66:	3a 81       	ldd	r19, Y+2	; 0x02
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	45 96       	adiw	r24, 0x15	; 21
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	fc 01       	movw	r30, r24
    1e78:	11 82       	std	Z+1, r1	; 0x01
    1e7a:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1e7c:	29 81       	ldd	r18, Y+1	; 0x01
    1e7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	82 57       	subi	r24, 0x72	; 114
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1e90:	29 81       	ldd	r18, Y+1	; 0x01
    1e92:	3a 81       	ldd	r19, Y+2	; 0x02
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	84 5b       	subi	r24, 0xB4	; 180
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	82 0f       	add	r24, r18
    1ea2:	93 1f       	adc	r25, r19
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	11 82       	std	Z+1, r1	; 0x01
    1ea8:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1eaa:	29 81       	ldd	r18, Y+1	; 0x01
    1eac:	3a 81       	ldd	r19, Y+2	; 0x02
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	82 0f       	add	r24, r18
    1ebc:	93 1f       	adc	r25, r19
    1ebe:	ce 96       	adiw	r24, 0x3e	; 62
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	10 82       	st	Z, r1
    1ec4:	11 82       	std	Z+1, r1	; 0x01
    1ec6:	12 82       	std	Z+2, r1	; 0x02
    1ec8:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1eca:	29 81       	ldd	r18, Y+1	; 0x01
    1ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	cd 96       	adiw	r24, 0x3d	; 61
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	fc 01       	movw	r30, r24
    1ede:	11 82       	std	Z+1, r1	; 0x01
    1ee0:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	84 55       	subi	r24, 0x54	; 84
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	fc 01       	movw	r30, r24
    1eec:	80 81       	ld	r24, Z
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	21 50       	subi	r18, 0x01	; 1
    1ef4:	31 09       	sbc	r19, r1
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	84 55       	subi	r24, 0x54	; 84
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	fc 01       	movw	r30, r24
    1f00:	31 83       	std	Z+1, r19	; 0x01
    1f02:	20 83       	st	Z, r18
    }
}
    1f04:	24 96       	adiw	r28, 0x04	; 4
    1f06:	e2 e0       	ldi	r30, 0x02	; 2
    1f08:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001f0c <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1f0c:	a4 e0       	ldi	r26, 0x04	; 4
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	ec e8       	ldi	r30, 0x8C	; 140
    1f12:	ff e0       	ldi	r31, 0x0F	; 15
    1f14:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	7c 83       	std	Y+4, r23	; 0x04
    1f1e:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	0a 97       	sbiw	r24, 0x0a	; 10
    1f26:	0c f0       	brlt	.+2      	; 0x1f2a <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1f2a:	5d dc       	rcall	.-1862   	; 0x17e6 <_ZL7elapsedv>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	49 81       	ldd	r20, Y+1	; 0x01
    1f32:	5a 81       	ldd	r21, Y+2	; 0x02
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	24 0f       	add	r18, r20
    1f42:	35 1f       	adc	r19, r21
    1f44:	2e 5f       	subi	r18, 0xFE	; 254
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	f9 01       	movw	r30, r18
    1f4a:	80 83       	st	Z, r24
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	a2 83       	std	Z+2, r26	; 0x02
    1f50:	b3 83       	std	Z+3, r27	; 0x03
}
    1f52:	24 96       	adiw	r28, 0x04	; 4
    1f54:	e2 e0       	ldi	r30, 0x02	; 2
    1f56:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001f5a <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1f5a:	a4 e0       	ldi	r26, 0x04	; 4
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e3 eb       	ldi	r30, 0xB3	; 179
    1f60:	ff e0       	ldi	r31, 0x0F	; 15
    1f62:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	7c 83       	std	Y+4, r23	; 0x04
    1f6c:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	0a 97       	sbiw	r24, 0x0a	; 10
    1f74:	14 f0       	brlt	.+4      	; 0x1f7a <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	0a c0       	rjmp	.+20     	; 0x1f8e <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1f7a:	29 81       	ldd	r18, Y+1	; 0x01
    1f7c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	82 57       	subi	r24, 0x72	; 114
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	80 81       	ld	r24, Z
}
    1f8e:	24 96       	adiw	r28, 0x04	; 4
    1f90:	e2 e0       	ldi	r30, 0x02	; 2
    1f92:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001f96 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1f96:	a4 e0       	ldi	r26, 0x04	; 4
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1f9c:	ff e0       	ldi	r31, 0x0F	; 15
    1f9e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	7c 83       	std	Y+4, r23	; 0x04
    1fa8:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	0a 97       	sbiw	r24, 0x0a	; 10
    1fb0:	0c f0       	brlt	.+2      	; 0x1fb4 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1fb2:	0b c0       	rjmp	.+22     	; 0x1fca <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1fb4:	29 81       	ldd	r18, Y+1	; 0x01
    1fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	82 0f       	add	r24, r18
    1fbe:	93 1f       	adc	r25, r19
    1fc0:	82 57       	subi	r24, 0x72	; 114
    1fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc4:	21 e0       	ldi	r18, 0x01	; 1
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
}
    1fca:	24 96       	adiw	r28, 0x04	; 4
    1fcc:	e2 e0       	ldi	r30, 0x02	; 2
    1fce:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00001fd2 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1fd2:	a4 e0       	ldi	r26, 0x04	; 4
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ef ee       	ldi	r30, 0xEF	; 239
    1fd8:	ff e0       	ldi	r31, 0x0F	; 15
    1fda:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	7c 83       	std	Y+4, r23	; 0x04
    1fe4:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	0a 97       	sbiw	r24, 0x0a	; 10
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1fee:	0a c0       	rjmp	.+20     	; 0x2004 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    1ff0:	29 81       	ldd	r18, Y+1	; 0x01
    1ff2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	82 0f       	add	r24, r18
    1ffa:	93 1f       	adc	r25, r19
    1ffc:	82 57       	subi	r24, 0x72	; 114
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	fc 01       	movw	r30, r24
    2002:	10 82       	st	Z, r1
}
    2004:	24 96       	adiw	r28, 0x04	; 4
    2006:	e2 e0       	ldi	r30, 0x02	; 2
    2008:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000200c <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    200c:	cf 92       	push	r12
    200e:	ef 92       	push	r14
    2010:	0f 93       	push	r16
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	00 d0       	rcall	.+0      	; 0x2018 <_ZN7LCDBaseC1Ev+0xc>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	0f 2e       	mov	r0, r31
    2026:	f7 e0       	ldi	r31, 0x07	; 7
    2028:	cf 2e       	mov	r12, r31
    202a:	f0 2d       	mov	r31, r0
    202c:	0f 2e       	mov	r0, r31
    202e:	f6 e0       	ldi	r31, 0x06	; 6
    2030:	ef 2e       	mov	r14, r31
    2032:	f0 2d       	mov	r31, r0
    2034:	05 e0       	ldi	r16, 0x05	; 5
    2036:	24 e0       	ldi	r18, 0x04	; 4
    2038:	49 e0       	ldi	r20, 0x09	; 9
    203a:	68 e0       	ldi	r22, 0x08	; 8
    203c:	21 d8       	rcall	.-4030   	; 0x1080 <_ZN13LiquidCrystalC1Ehhhhhh>
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	2c e9       	ldi	r18, 0x9C	; 156
    2044:	31 e0       	ldi	r19, 0x01	; 1
    2046:	fc 01       	movw	r30, r24
    2048:	31 83       	std	Z+1, r19	; 0x01
    204a:	20 83       	st	Z, r18
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	e5 e1       	ldi	r30, 0x15	; 21
    2054:	f1 e0       	ldi	r31, 0x01	; 1
    2056:	dc 01       	movw	r26, r24
    2058:	58 96       	adiw	r26, 0x18	; 24
    205a:	01 90       	ld	r0, Z+
    205c:	0d 92       	st	X+, r0
    205e:	2a 95       	dec	r18
    2060:	e1 f7       	brne	.-8      	; 0x205a <_ZN7LCDBaseC1Ev+0x4e>
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	25 e0       	ldi	r18, 0x05	; 5
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	fc 01       	movw	r30, r24
    206c:	33 a3       	std	Z+35, r19	; 0x23
    206e:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	08 d0       	rcall	.+16     	; 0x2086 <_ZN7LCDBase4InitEv>
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	0f 91       	pop	r16
    2080:	ef 90       	pop	r14
    2082:	cf 90       	pop	r12
    2084:	08 95       	ret

00002086 <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    2086:	a2 e0       	ldi	r26, 0x02	; 2
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 e4       	ldi	r30, 0x49	; 73
    208c:	f0 e1       	ldi	r31, 0x10	; 16
    208e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	42 e0       	ldi	r20, 0x02	; 2
    209e:	60 e1       	ldi	r22, 0x10	; 16
    20a0:	bd d8       	rcall	.-3718   	; 0x121c <_ZN13LiquidCrystal5beginEhhh>
    clear();
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	b4 d9       	rcall	.-3224   	; 0x1410 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	c3 d9       	rcall	.-3194   	; 0x1438 <_ZN13LiquidCrystal9setCursorEhh>

}
    20b2:	22 96       	adiw	r28, 0x02	; 2
    20b4:	e2 e0       	ldi	r30, 0x02	; 2
    20b6:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000020ba <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    20ba:	a4 e0       	ldi	r26, 0x04	; 4
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e3 e6       	ldi	r30, 0x63	; 99
    20c0:	f0 e1       	ldi	r31, 0x10	; 16
    20c2:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	7c 83       	std	Y+4, r23	; 0x04
    20cc:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    20ce:	2b 81       	ldd	r18, Y+3	; 0x03
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	42 2f       	mov	r20, r18
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	af d9       	rcall	.-3234   	; 0x1438 <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    20da:	2f e8       	ldi	r18, 0x8F	; 143
    20dc:	33 e0       	ldi	r19, 0x03	; 3
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	b9 01       	movw	r22, r18
    20e4:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
}
    20e8:	24 96       	adiw	r28, 0x04	; 4
    20ea:	e2 e0       	ldi	r30, 0x02	; 2
    20ec:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000020f0 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    20f0:	a6 e0       	ldi	r26, 0x06	; 6
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e7       	ldi	r30, 0x7E	; 126
    20f6:	f0 e1       	ldi	r31, 0x10	; 16
    20f8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	7c 83       	std	Y+4, r23	; 0x04
    2102:	6b 83       	std	Y+3, r22	; 0x03
    2104:	5e 83       	std	Y+6, r21	; 0x06
    2106:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	b9 01       	movw	r22, r18
    2112:	d3 df       	rcall	.-90     	; 0x20ba <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	42 2f       	mov	r20, r18
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	8c d9       	rcall	.-3304   	; 0x1438 <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	2d 81       	ldd	r18, Y+5	; 0x05
    2126:	3e 81       	ldd	r19, Y+6	; 0x06
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <_ZN5Print5printERK6String>
}
    212e:	26 96       	adiw	r28, 0x06	; 6
    2130:	e2 e0       	ldi	r30, 0x02	; 2
    2132:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002136 <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    2136:	a4 e0       	ldi	r26, 0x04	; 4
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e1 ea       	ldi	r30, 0xA1	; 161
    213c:	f0 e1       	ldi	r31, 0x10	; 16
    213e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2142:	9c 83       	std	Y+4, r25	; 0x04
    2144:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	69 d0       	rcall	.+210    	; 0x221e <_ZN7LCDBase6getKeyEv>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	91 05       	cpc	r25, r1
    2158:	91 f0       	breq	.+36     	; 0x217e <_ZN7LCDBase14DetectKeyPressEv+0x48>
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	91 05       	cpc	r25, r1
    215e:	2c f4       	brge	.+10     	; 0x216a <_ZN7LCDBase14DetectKeyPressEv+0x34>
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	49 f0       	breq	.+18     	; 0x2176 <_ZN7LCDBase14DetectKeyPressEv+0x40>
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	49 f0       	breq	.+18     	; 0x217a <_ZN7LCDBase14DetectKeyPressEv+0x44>
    2168:	10 c0       	rjmp	.+32     	; 0x218a <_ZN7LCDBase14DetectKeyPressEv+0x54>
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	91 05       	cpc	r25, r1
    216e:	49 f0       	breq	.+18     	; 0x2182 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    2170:	04 97       	sbiw	r24, 0x04	; 4
    2172:	49 f0       	breq	.+18     	; 0x2186 <_ZN7LCDBase14DetectKeyPressEv+0x50>
    2174:	0a c0       	rjmp	.+20     	; 0x218a <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	09 c0       	rjmp	.+18     	; 0x218c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	07 c0       	rjmp	.+14     	; 0x218c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	05 c0       	rjmp	.+10     	; 0x218c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	03 c0       	rjmp	.+6      	; 0x218c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	01 c0       	rjmp	.+2      	; 0x218c <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    218a:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    218c:	24 96       	adiw	r28, 0x04	; 4
    218e:	e2 e0       	ldi	r30, 0x02	; 2
    2190:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002194 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    2194:	a6 e0       	ldi	r26, 0x06	; 6
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e0 ed       	ldi	r30, 0xD0	; 208
    219a:	f0 e1       	ldi	r31, 0x10	; 16
    219c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
    21a4:	7e 83       	std	Y+6, r23	; 0x06
    21a6:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21a8:	1a 82       	std	Y+2, r1	; 0x02
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	1a c0       	rjmp	.+52     	; 0x21e2 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	0c 96       	adiw	r24, 0x0c	; 12
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	82 0f       	add	r24, r18
    21be:	93 1f       	adc	r25, r19
    21c0:	fc 01       	movw	r30, r24
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	9c 01       	movw	r18, r24
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	82 17       	cp	r24, r18
    21ce:	93 07       	cpc	r25, r19
    21d0:	18 f4       	brcc	.+6      	; 0x21d8 <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	fc 01       	movw	r30, r24
    21e8:	22 a1       	ldd	r18, Z+34	; 0x22
    21ea:	33 a1       	ldd	r19, Z+35	; 0x23
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	e4 f2       	brlt	.-72     	; 0x21ae <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	fc 01       	movw	r30, r24
    21fc:	22 a1       	ldd	r18, Z+34	; 0x22
    21fe:	33 a1       	ldd	r19, Z+35	; 0x23
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	82 17       	cp	r24, r18
    2206:	93 07       	cpc	r25, r19
    2208:	24 f0       	brlt	.+8      	; 0x2212 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	9f ef       	ldi	r25, 0xFF	; 255
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2216:	26 96       	adiw	r28, 0x06	; 6
    2218:	e2 e0       	ldi	r30, 0x02	; 2
    221a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000221e <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    221e:	a6 e0       	ldi	r26, 0x06	; 6
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e1       	ldi	r30, 0x15	; 21
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <analogRead>
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    2238:	29 81       	ldd	r18, Y+1	; 0x01
    223a:	3a 81       	ldd	r19, Y+2	; 0x02
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	b9 01       	movw	r22, r18
    2242:	a8 df       	rcall	.-176    	; 0x2194 <_ZN7LCDBase13getKeyFromValEj>
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    224c:	26 96       	adiw	r28, 0x06	; 6
    224e:	e2 e0       	ldi	r30, 0x02	; 2
    2250:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002254 <_ZnwjPv>:
		typename Operation::second_argument_type value;
	public:
		binder2nd(const Operation& x, const typename Operation::second_argument_type& y) : op(x), value(y) {  }
		typename Operation::result_type operator()(const typename Operation::first_argument_type& x) const{
			return op(x,value);
		}
    2254:	a4 e0       	ldi	r26, 0x04	; 4
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e0 e3       	ldi	r30, 0x30	; 48
    225a:	f1 e1       	ldi	r31, 0x11	; 17
    225c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	7c 83       	std	Y+4, r23	; 0x04
    2266:	6b 83       	std	Y+3, r22	; 0x03
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	24 96       	adiw	r28, 0x04	; 4
    226e:	e2 e0       	ldi	r30, 0x02	; 2
    2270:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002274 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>:
    2274:	aa e0       	ldi	r26, 0x0A	; 10
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    2280:	9a 87       	std	Y+10, r25	; 0x0a
    2282:	89 87       	std	Y+9, r24	; 0x09
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	a4 d1       	rcall	.+840    	; 0x25d2 <_ZNSt6vectorIdSaIdEE3endEv>
    228a:	8c 01       	movw	r16, r24
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	8f d1       	rcall	.+798    	; 0x25b0 <_ZNSt6vectorIdSaIdEE5beginEv>
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	a9 01       	movw	r20, r18
    2298:	b8 01       	movw	r22, r16
    229a:	b7 d1       	rcall	.+878    	; 0x260a <_ZSt10accumulateIPddET0_T_S2_S1_>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	ab 83       	std	Y+3, r26	; 0x03
    22a6:	bc 83       	std	Y+4, r27	; 0x04
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	e8 d1       	rcall	.+976    	; 0x267e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    22ae:	cc 01       	movw	r24, r24
    22b0:	a0 e0       	ldi	r26, 0x00	; 0
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 2d 29 	call	0x525a	; 0x525a <__floatunsisf>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9c 01       	movw	r18, r24
    22c2:	ad 01       	movw	r20, r26
    22c4:	69 81       	ldd	r22, Y+1	; 0x01
    22c6:	7a 81       	ldd	r23, Y+2	; 0x02
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	0e 94 94 28 	call	0x5128	; 0x5128 <__divsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	af 83       	std	Y+7, r26	; 0x07
    22da:	b8 87       	std	Y+8, r27	; 0x08
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	af 81       	ldd	r26, Y+7	; 0x07
    22e2:	b8 85       	ldd	r27, Y+8	; 0x08
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	2a 96       	adiw	r28, 0x0a	; 10
    22ea:	e4 e0       	ldi	r30, 0x04	; 4
    22ec:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

000022f0 <_ZN7MathExt16CalculateAverageEPii>:
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	66 97       	sbiw	r28, 0x16	; 22
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	98 8b       	std	Y+16, r25	; 0x10
    230e:	8f 87       	std	Y+15, r24	; 0x0f
    2310:	7a 8b       	std	Y+18, r23	; 0x12
    2312:	69 8b       	std	Y+17, r22	; 0x11
    2314:	1f 82       	std	Y+7, r1	; 0x07
    2316:	18 86       	std	Y+8, r1	; 0x08
    2318:	19 86       	std	Y+9, r1	; 0x09
    231a:	1a 86       	std	Y+10, r1	; 0x0a
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	9a 89       	ldd	r25, Y+18	; 0x12
    2320:	18 16       	cp	r1, r24
    2322:	19 06       	cpc	r1, r25
    2324:	5c f0       	brlt	.+22     	; 0x233c <_ZN7MathExt16CalculateAverageEPii+0x4c>
    2326:	80 ea       	ldi	r24, 0xA0	; 160
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	bc 01       	movw	r22, r24
    232c:	8c e6       	ldi	r24, 0x6C	; 108
    232e:	95 e0       	ldi	r25, 0x05	; 5
    2330:	0e 94 89 2c 	call	0x5912	; 0x5912 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	dc 01       	movw	r26, r24
    233a:	2b c1       	rjmp	.+598    	; 0x2592 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    233c:	89 89       	ldd	r24, Y+17	; 0x11
    233e:	9a 89       	ldd	r25, Y+18	; 0x12
    2340:	05 97       	sbiw	r24, 0x05	; 5
    2342:	0c f0       	brlt	.+2      	; 0x2346 <_ZN7MathExt16CalculateAverageEPii+0x56>
    2344:	49 c0       	rjmp	.+146    	; 0x23d8 <_ZN7MathExt16CalculateAverageEPii+0xe8>
    2346:	1a 82       	std	Y+2, r1	; 0x02
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	20 c0       	rjmp	.+64     	; 0x238c <_ZN7MathExt16CalculateAverageEPii+0x9c>
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	2f 85       	ldd	r18, Y+15	; 0x0f
    2356:	38 89       	ldd	r19, Y+16	; 0x10
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	fc 01       	movw	r30, r24
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	09 2e       	mov	r0, r25
    2364:	00 0c       	add	r0, r0
    2366:	aa 0b       	sbc	r26, r26
    2368:	bb 0b       	sbc	r27, r27
    236a:	2f 81       	ldd	r18, Y+7	; 0x07
    236c:	38 85       	ldd	r19, Y+8	; 0x08
    236e:	49 85       	ldd	r20, Y+9	; 0x09
    2370:	5a 85       	ldd	r21, Y+10	; 0x0a
    2372:	82 0f       	add	r24, r18
    2374:	93 1f       	adc	r25, r19
    2376:	a4 1f       	adc	r26, r20
    2378:	b5 1f       	adc	r27, r21
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	29 81       	ldd	r18, Y+1	; 0x01
    238e:	3a 81       	ldd	r19, Y+2	; 0x02
    2390:	89 89       	ldd	r24, Y+17	; 0x11
    2392:	9a 89       	ldd	r25, Y+18	; 0x12
    2394:	28 17       	cp	r18, r24
    2396:	39 07       	cpc	r19, r25
    2398:	cc f2       	brlt	.-78     	; 0x234c <_ZN7MathExt16CalculateAverageEPii+0x5c>
    239a:	89 89       	ldd	r24, Y+17	; 0x11
    239c:	9a 89       	ldd	r25, Y+18	; 0x12
    239e:	9c 01       	movw	r18, r24
    23a0:	99 0f       	add	r25, r25
    23a2:	44 0b       	sbc	r20, r20
    23a4:	55 0b       	sbc	r21, r21
    23a6:	8f 81       	ldd	r24, Y+7	; 0x07
    23a8:	98 85       	ldd	r25, Y+8	; 0x08
    23aa:	a9 85       	ldd	r26, Y+9	; 0x09
    23ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 08 33 	call	0x6610	; 0x6610 <__divmodsi4>
    23b6:	da 01       	movw	r26, r20
    23b8:	c9 01       	movw	r24, r18
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 2f 29 	call	0x525e	; 0x525e <__floatsisf>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8b 87       	std	Y+11, r24	; 0x0b
    23c8:	9c 87       	std	Y+12, r25	; 0x0c
    23ca:	ad 87       	std	Y+13, r26	; 0x0d
    23cc:	be 87       	std	Y+14, r27	; 0x0e
    23ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d2:	ad 85       	ldd	r26, Y+13	; 0x0d
    23d4:	be 85       	ldd	r27, Y+14	; 0x0e
    23d6:	dd c0       	rjmp	.+442    	; 0x2592 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    23d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23da:	98 89       	ldd	r25, Y+16	; 0x10
    23dc:	fc 01       	movw	r30, r24
    23de:	20 81       	ld	r18, Z
    23e0:	31 81       	ldd	r19, Z+1	; 0x01
    23e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e4:	98 89       	ldd	r25, Y+16	; 0x10
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	28 17       	cp	r18, r24
    23f0:	39 07       	cpc	r19, r25
    23f2:	7c f4       	brge	.+30     	; 0x2412 <_ZN7MathExt16CalculateAverageEPii+0x122>
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	98 89       	ldd	r25, Y+16	; 0x10
    23f8:	fc 01       	movw	r30, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	8f 85       	ldd	r24, Y+15	; 0x0f
    2404:	98 89       	ldd	r25, Y+16	; 0x10
    2406:	fc 01       	movw	r30, r24
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	0e c0       	rjmp	.+28     	; 0x242e <_ZN7MathExt16CalculateAverageEPii+0x13e>
    2412:	8f 85       	ldd	r24, Y+15	; 0x0f
    2414:	98 89       	ldd	r25, Y+16	; 0x10
    2416:	fc 01       	movw	r30, r24
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
    2420:	8f 85       	ldd	r24, Y+15	; 0x0f
    2422:	98 89       	ldd	r25, Y+16	; 0x10
    2424:	fc 01       	movw	r30, r24
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	80 c0       	rjmp	.+256    	; 0x2538 <_ZN7MathExt16CalculateAverageEPii+0x248>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	2f 85       	ldd	r18, Y+15	; 0x0f
    2442:	38 89       	ldd	r19, Y+16	; 0x10
    2444:	82 0f       	add	r24, r18
    2446:	93 1f       	adc	r25, r19
    2448:	fc 01       	movw	r30, r24
    244a:	20 81       	ld	r18, Z
    244c:	31 81       	ldd	r19, Z+1	; 0x01
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	28 17       	cp	r18, r24
    2454:	39 07       	cpc	r19, r25
    2456:	04 f5       	brge	.+64     	; 0x2498 <_ZN7MathExt16CalculateAverageEPii+0x1a8>
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	09 2e       	mov	r0, r25
    245e:	00 0c       	add	r0, r0
    2460:	aa 0b       	sbc	r26, r26
    2462:	bb 0b       	sbc	r27, r27
    2464:	2f 81       	ldd	r18, Y+7	; 0x07
    2466:	38 85       	ldd	r19, Y+8	; 0x08
    2468:	49 85       	ldd	r20, Y+9	; 0x09
    246a:	5a 85       	ldd	r21, Y+10	; 0x0a
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	a4 1f       	adc	r26, r20
    2472:	b5 1f       	adc	r27, r21
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	98 87       	std	Y+8, r25	; 0x08
    2478:	a9 87       	std	Y+9, r26	; 0x09
    247a:	ba 87       	std	Y+10, r27	; 0x0a
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	2f 85       	ldd	r18, Y+15	; 0x0f
    2486:	38 89       	ldd	r19, Y+16	; 0x10
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	fc 01       	movw	r30, r24
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	4b c0       	rjmp	.+150    	; 0x252e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    24a2:	38 89       	ldd	r19, Y+16	; 0x10
    24a4:	82 0f       	add	r24, r18
    24a6:	93 1f       	adc	r25, r19
    24a8:	fc 01       	movw	r30, r24
    24aa:	20 81       	ld	r18, Z
    24ac:	31 81       	ldd	r19, Z+1	; 0x01
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	82 17       	cp	r24, r18
    24b4:	93 07       	cpc	r25, r19
    24b6:	04 f5       	brge	.+64     	; 0x24f8 <_ZN7MathExt16CalculateAverageEPii+0x208>
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	09 2e       	mov	r0, r25
    24be:	00 0c       	add	r0, r0
    24c0:	aa 0b       	sbc	r26, r26
    24c2:	bb 0b       	sbc	r27, r27
    24c4:	2f 81       	ldd	r18, Y+7	; 0x07
    24c6:	38 85       	ldd	r19, Y+8	; 0x08
    24c8:	49 85       	ldd	r20, Y+9	; 0x09
    24ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	a4 1f       	adc	r26, r20
    24d2:	b5 1f       	adc	r27, r21
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    24e6:	38 89       	ldd	r19, Y+16	; 0x10
    24e8:	82 0f       	add	r24, r18
    24ea:	93 1f       	adc	r25, r19
    24ec:	fc 01       	movw	r30, r24
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	1b c0       	rjmp	.+54     	; 0x252e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	2f 85       	ldd	r18, Y+15	; 0x0f
    2502:	38 89       	ldd	r19, Y+16	; 0x10
    2504:	82 0f       	add	r24, r18
    2506:	93 1f       	adc	r25, r19
    2508:	fc 01       	movw	r30, r24
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	09 2e       	mov	r0, r25
    2510:	00 0c       	add	r0, r0
    2512:	aa 0b       	sbc	r26, r26
    2514:	bb 0b       	sbc	r27, r27
    2516:	2f 81       	ldd	r18, Y+7	; 0x07
    2518:	38 85       	ldd	r19, Y+8	; 0x08
    251a:	49 85       	ldd	r20, Y+9	; 0x09
    251c:	5a 85       	ldd	r21, Y+10	; 0x0a
    251e:	82 0f       	add	r24, r18
    2520:	93 1f       	adc	r25, r19
    2522:	a4 1f       	adc	r26, r20
    2524:	b5 1f       	adc	r27, r21
    2526:	8f 83       	std	Y+7, r24	; 0x07
    2528:	98 87       	std	Y+8, r25	; 0x08
    252a:	a9 87       	std	Y+9, r26	; 0x09
    252c:	ba 87       	std	Y+10, r27	; 0x0a
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	29 81       	ldd	r18, Y+1	; 0x01
    253a:	3a 81       	ldd	r19, Y+2	; 0x02
    253c:	89 89       	ldd	r24, Y+17	; 0x11
    253e:	9a 89       	ldd	r25, Y+18	; 0x12
    2540:	28 17       	cp	r18, r24
    2542:	39 07       	cpc	r19, r25
    2544:	0c f4       	brge	.+2      	; 0x2548 <_ZN7MathExt16CalculateAverageEPii+0x258>
    2546:	78 cf       	rjmp	.-272    	; 0x2438 <_ZN7MathExt16CalculateAverageEPii+0x148>
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	0e 94 2f 29 	call	0x525e	; 0x525e <__floatsisf>
    2554:	6b 01       	movw	r12, r22
    2556:	7c 01       	movw	r14, r24
    2558:	89 89       	ldd	r24, Y+17	; 0x11
    255a:	9a 89       	ldd	r25, Y+18	; 0x12
    255c:	02 97       	sbiw	r24, 0x02	; 2
    255e:	09 2e       	mov	r0, r25
    2560:	00 0c       	add	r0, r0
    2562:	aa 0b       	sbc	r26, r26
    2564:	bb 0b       	sbc	r27, r27
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 2f 29 	call	0x525e	; 0x525e <__floatsisf>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9c 01       	movw	r18, r24
    2574:	ad 01       	movw	r20, r26
    2576:	c7 01       	movw	r24, r14
    2578:	b6 01       	movw	r22, r12
    257a:	0e 94 94 28 	call	0x5128	; 0x5128 <__divsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8b 87       	std	Y+11, r24	; 0x0b
    2584:	9c 87       	std	Y+12, r25	; 0x0c
    2586:	ad 87       	std	Y+13, r26	; 0x0d
    2588:	be 87       	std	Y+14, r27	; 0x0e
    258a:	8b 85       	ldd	r24, Y+11	; 0x0b
    258c:	9c 85       	ldd	r25, Y+12	; 0x0c
    258e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2590:	be 85       	ldd	r27, Y+14	; 0x0e
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	66 96       	adiw	r28, 0x16	; 22
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	08 95       	ret

000025b0 <_ZNSt6vectorIdSaIdEE5beginEv>:
    25b0:	a2 e0       	ldi	r26, 0x02	; 2
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	ee ed       	ldi	r30, 0xDE	; 222
    25b6:	f2 e1       	ldi	r31, 0x12	; 18
    25b8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	fc 01       	movw	r30, r24
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	22 96       	adiw	r28, 0x02	; 2
    25cc:	e2 e0       	ldi	r30, 0x02	; 2
    25ce:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000025d2 <_ZNSt6vectorIdSaIdEE3endEv>:
    25d2:	a2 e0       	ldi	r26, 0x02	; 2
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	ef ee       	ldi	r30, 0xEF	; 239
    25d8:	f2 e1       	ldi	r31, 0x12	; 18
    25da:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 81       	ld	r18, Z
    25ea:	31 81       	ldd	r19, Z+1	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	fc 01       	movw	r30, r24
    25f2:	84 81       	ldd	r24, Z+4	; 0x04
    25f4:	95 81       	ldd	r25, Z+5	; 0x05
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	82 0f       	add	r24, r18
    2600:	93 1f       	adc	r25, r19
    2602:	22 96       	adiw	r28, 0x02	; 2
    2604:	e2 e0       	ldi	r30, 0x02	; 2
    2606:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000260a <_ZSt10accumulateIPddET0_T_S2_S1_>:
    260a:	a8 e0       	ldi	r26, 0x08	; 8
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	eb e0       	ldi	r30, 0x0B	; 11
    2610:	f3 e1       	ldi	r31, 0x13	; 19
    2612:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	7c 83       	std	Y+4, r23	; 0x04
    261c:	6b 83       	std	Y+3, r22	; 0x03
    261e:	2d 83       	std	Y+5, r18	; 0x05
    2620:	3e 83       	std	Y+6, r19	; 0x06
    2622:	4f 83       	std	Y+7, r20	; 0x07
    2624:	58 87       	std	Y+8, r21	; 0x08
    2626:	1a c0       	rjmp	.+52     	; 0x265c <_ZSt10accumulateIPddET0_T_S2_S1_+0x52>
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	fc 01       	movw	r30, r24
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	a2 81       	ldd	r26, Z+2	; 0x02
    2634:	b3 81       	ldd	r27, Z+3	; 0x03
    2636:	9c 01       	movw	r18, r24
    2638:	ad 01       	movw	r20, r26
    263a:	6d 81       	ldd	r22, Y+5	; 0x05
    263c:	7e 81       	ldd	r23, Y+6	; 0x06
    263e:	8f 81       	ldd	r24, Y+7	; 0x07
    2640:	98 85       	ldd	r25, Y+8	; 0x08
    2642:	0e 94 2c 28 	call	0x5058	; 0x5058 <__addsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	af 83       	std	Y+7, r26	; 0x07
    2650:	b8 87       	std	Y+8, r27	; 0x08
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	04 96       	adiw	r24, 0x04	; 4
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	29 81       	ldd	r18, Y+1	; 0x01
    265e:	3a 81       	ldd	r19, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	28 17       	cp	r18, r24
    2666:	39 07       	cpc	r19, r25
    2668:	f9 f6       	brne	.-66     	; 0x2628 <_ZSt10accumulateIPddET0_T_S2_S1_+0x1e>
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	af 81       	ldd	r26, Y+7	; 0x07
    2670:	b8 85       	ldd	r27, Y+8	; 0x08
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	28 96       	adiw	r28, 0x08	; 8
    2678:	e2 e0       	ldi	r30, 0x02	; 2
    267a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000267e <_ZNKSt6vectorIdSaIdEE4sizeEv>:
    267e:	a2 e0       	ldi	r26, 0x02	; 2
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e5 e4       	ldi	r30, 0x45	; 69
    2684:	f3 e1       	ldi	r31, 0x13	; 19
    2686:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	fc 01       	movw	r30, r24
    2694:	84 81       	ldd	r24, Z+4	; 0x04
    2696:	95 81       	ldd	r25, Z+5	; 0x05
    2698:	22 96       	adiw	r28, 0x02	; 2
    269a:	e2 e0       	ldi	r30, 0x02	; 2
    269c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000026a0 <_ZNSaIdEC1Ev>:
    26a0:	a2 e0       	ldi	r26, 0x02	; 2
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e6 e5       	ldi	r30, 0x56	; 86
    26a6:	f3 e1       	ldi	r31, 0x13	; 19
    26a8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	22 96       	adiw	r28, 0x02	; 2
    26b2:	e2 e0       	ldi	r30, 0x02	; 2
    26b4:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000026b8 <_ZNSaIdED1Ev>:
    26b8:	a2 e0       	ldi	r26, 0x02	; 2
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e2 e6       	ldi	r30, 0x62	; 98
    26be:	f3 e1       	ldi	r31, 0x13	; 19
    26c0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	22 96       	adiw	r28, 0x02	; 2
    26ca:	e2 e0       	ldi	r30, 0x02	; 2
    26cc:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000026d0 <_ZNSt6vectorIdSaIdEED1Ev>:
    26d0:	a4 e0       	ldi	r26, 0x04	; 4
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ee e6       	ldi	r30, 0x6E	; 110
    26d6:	f3 e1       	ldi	r31, 0x13	; 19
    26d8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	1a 82       	std	Y+2, r1	; 0x02
    26e2:	19 82       	std	Y+1, r1	; 0x01
    26e4:	17 c0       	rjmp	.+46     	; 0x2714 <_ZNSt6vectorIdSaIdEED1Ev+0x44>
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	fc 01       	movw	r30, r24
    26ec:	20 81       	ld	r18, Z
    26ee:	31 81       	ldd	r19, Z+1	; 0x01
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	28 0f       	add	r18, r24
    26fe:	39 1f       	adc	r19, r25
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	06 96       	adiw	r24, 0x06	; 6
    2706:	b9 01       	movw	r22, r18
    2708:	a2 d0       	rcall	.+324    	; 0x284e <_ZNSaIdE7destroyEPd>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	fc 01       	movw	r30, r24
    271a:	24 81       	ldd	r18, Z+4	; 0x04
    271c:	35 81       	ldd	r19, Z+5	; 0x05
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	82 17       	cp	r24, r18
    2724:	93 07       	cpc	r25, r19
    2726:	f8 f2       	brcs	.-66     	; 0x26e6 <_ZNSt6vectorIdSaIdEED1Ev+0x16>
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	fc 01       	movw	r30, r24
    272e:	42 81       	ldd	r20, Z+2	; 0x02
    2730:	53 81       	ldd	r21, Z+3	; 0x03
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	fc 01       	movw	r30, r24
    2738:	20 81       	ld	r18, Z
    273a:	31 81       	ldd	r19, Z+1	; 0x01
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	06 96       	adiw	r24, 0x06	; 6
    2742:	b9 01       	movw	r22, r18
    2744:	92 d0       	rcall	.+292    	; 0x286a <_ZNSaIdE10deallocateEPdj>
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	06 96       	adiw	r24, 0x06	; 6
    274c:	b5 df       	rcall	.-150    	; 0x26b8 <_ZNSaIdED1Ev>
    274e:	24 96       	adiw	r28, 0x04	; 4
    2750:	e2 e0       	ldi	r30, 0x02	; 2
    2752:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002756 <_ZNSaIdE8allocateEjPKv>:
    2756:	a6 e0       	ldi	r26, 0x06	; 6
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 eb       	ldi	r30, 0xB1	; 177
    275c:	f3 e1       	ldi	r31, 0x13	; 19
    275e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2762:	9a 83       	std	Y+2, r25	; 0x02
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	7c 83       	std	Y+4, r23	; 0x04
    2768:	6b 83       	std	Y+3, r22	; 0x03
    276a:	5e 83       	std	Y+6, r21	; 0x06
    276c:	4d 83       	std	Y+5, r20	; 0x05
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_Znwj>
    277e:	26 96       	adiw	r28, 0x06	; 6
    2780:	e2 e0       	ldi	r30, 0x02	; 2
    2782:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002786 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
    2786:	a8 e0       	ldi	r26, 0x08	; 8
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e9 ec       	ldi	r30, 0xC9	; 201
    278c:	f3 e1       	ldi	r31, 0x13	; 19
    278e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	7e 83       	std	Y+6, r23	; 0x06
    2798:	6d 83       	std	Y+5, r22	; 0x05
    279a:	58 87       	std	Y+8, r21	; 0x08
    279c:	4f 83       	std	Y+7, r20	; 0x07
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	fc 01       	movw	r30, r24
    27a4:	24 81       	ldd	r18, Z+4	; 0x04
    27a6:	35 81       	ldd	r19, Z+5	; 0x05
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	28 17       	cp	r18, r24
    27ae:	39 07       	cpc	r19, r25
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x2e>
    27b2:	43 c0       	rjmp	.+134    	; 0x283a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xb4>
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	fc 01       	movw	r30, r24
    27ba:	22 81       	ldd	r18, Z+2	; 0x02
    27bc:	33 81       	ldd	r19, Z+3	; 0x03
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	48 f4       	brcc	.+18     	; 0x27da <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x54>
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	9c 01       	movw	r18, r24
    27ce:	28 5f       	subi	r18, 0xF8	; 248
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	b9 01       	movw	r22, r18
    27d8:	5c d0       	rcall	.+184    	; 0x2892 <_ZNSt6vectorIdSaIdEE7reserveEj>
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	fc 01       	movw	r30, r24
    27e0:	84 81       	ldd	r24, Z+4	; 0x04
    27e2:	95 81       	ldd	r25, Z+5	; 0x05
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	19 c0       	rjmp	.+50     	; 0x281c <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x96>
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	fc 01       	movw	r30, r24
    27f0:	20 81       	ld	r18, Z
    27f2:	31 81       	ldd	r19, Z+1	; 0x01
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	28 0f       	add	r18, r24
    2802:	39 1f       	adc	r19, r25
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	06 96       	adiw	r24, 0x06	; 6
    280a:	4f 81       	ldd	r20, Y+7	; 0x07
    280c:	58 85       	ldd	r21, Y+8	; 0x08
    280e:	b9 01       	movw	r22, r18
    2810:	c7 d0       	rcall	.+398    	; 0x29a0 <_ZNSaIdE9constructEPdRKd>
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	29 81       	ldd	r18, Y+1	; 0x01
    281e:	3a 81       	ldd	r19, Y+2	; 0x02
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	28 17       	cp	r18, r24
    2826:	39 07       	cpc	r19, r25
    2828:	00 f3       	brcs	.-64     	; 0x27ea <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x64>
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	2d 81       	ldd	r18, Y+5	; 0x05
    2830:	3e 81       	ldd	r19, Y+6	; 0x06
    2832:	fc 01       	movw	r30, r24
    2834:	35 83       	std	Z+5, r19	; 0x05
    2836:	24 83       	std	Z+4, r18	; 0x04
    2838:	06 c0       	rjmp	.+12     	; 0x2846 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xc0>
    283a:	2d 81       	ldd	r18, Y+5	; 0x05
    283c:	3e 81       	ldd	r19, Y+6	; 0x06
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	b9 01       	movw	r22, r18
    2844:	d3 d0       	rcall	.+422    	; 0x29ec <_ZNSt6vectorIdSaIdEE8downsizeEj>
    2846:	28 96       	adiw	r28, 0x08	; 8
    2848:	e2 e0       	ldi	r30, 0x02	; 2
    284a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000284e <_ZNSaIdE7destroyEPd>:
    284e:	a4 e0       	ldi	r26, 0x04	; 4
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	ed e2       	ldi	r30, 0x2D	; 45
    2854:	f4 e1       	ldi	r31, 0x14	; 20
    2856:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	7c 83       	std	Y+4, r23	; 0x04
    2860:	6b 83       	std	Y+3, r22	; 0x03
    2862:	24 96       	adiw	r28, 0x04	; 4
    2864:	e2 e0       	ldi	r30, 0x02	; 2
    2866:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000286a <_ZNSaIdE10deallocateEPdj>:
    286a:	a6 e0       	ldi	r26, 0x06	; 6
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	eb e3       	ldi	r30, 0x3B	; 59
    2870:	f4 e1       	ldi	r31, 0x14	; 20
    2872:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	7c 83       	std	Y+4, r23	; 0x04
    287c:	6b 83       	std	Y+3, r22	; 0x03
    287e:	5e 83       	std	Y+6, r21	; 0x06
    2880:	4d 83       	std	Y+5, r20	; 0x05
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZdlPv>
    288a:	26 96       	adiw	r28, 0x06	; 6
    288c:	e2 e0       	ldi	r30, 0x02	; 2
    288e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002892 <_ZNSt6vectorIdSaIdEE7reserveEj>:
		}
		a.deallocate(data, data_size);
	}


	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::reserve(size_type n){
    2892:	aa e0       	ldi	r26, 0x0A	; 10
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	ef e4       	ldi	r30, 0x4F	; 79
    2898:	f4 e1       	ldi	r31, 0x14	; 20
    289a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    289e:	98 87       	std	Y+8, r25	; 0x08
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	7a 87       	std	Y+10, r23	; 0x0a
    28a4:	69 87       	std	Y+9, r22	; 0x09
		if(n > data_size){              //We never shrink...
    28a6:	8f 81       	ldd	r24, Y+7	; 0x07
    28a8:	98 85       	ldd	r25, Y+8	; 0x08
    28aa:	fc 01       	movw	r30, r24
    28ac:	22 81       	ldd	r18, Z+2	; 0x02
    28ae:	33 81       	ldd	r19, Z+3	; 0x03
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	08 f0       	brcs	.+2      	; 0x28bc <_ZNSt6vectorIdSaIdEE7reserveEj+0x2a>
    28ba:	6e c0       	rjmp	.+220    	; 0x2998 <_ZNSt6vectorIdSaIdEE7reserveEj+0x106>
			T * temp_ptr = data;
    28bc:	8f 81       	ldd	r24, Y+7	; 0x07
    28be:	98 85       	ldd	r25, Y+8	; 0x08
    28c0:	fc 01       	movw	r30, r24
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
			size_type temp_size = data_size;
    28ca:	8f 81       	ldd	r24, Y+7	; 0x07
    28cc:	98 85       	ldd	r25, Y+8	; 0x08
    28ce:	fc 01       	movw	r30, r24
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05

			data_size = n;
    28d8:	8f 81       	ldd	r24, Y+7	; 0x07
    28da:	98 85       	ldd	r25, Y+8	; 0x08
    28dc:	29 85       	ldd	r18, Y+9	; 0x09
    28de:	3a 85       	ldd	r19, Y+10	; 0x0a
    28e0:	fc 01       	movw	r30, r24
    28e2:	33 83       	std	Z+3, r19	; 0x03
    28e4:	22 83       	std	Z+2, r18	; 0x02
			data = a.allocate(data_size);
    28e6:	8f 81       	ldd	r24, Y+7	; 0x07
    28e8:	98 85       	ldd	r25, Y+8	; 0x08
    28ea:	fc 01       	movw	r30, r24
    28ec:	22 81       	ldd	r18, Z+2	; 0x02
    28ee:	33 81       	ldd	r19, Z+3	; 0x03
    28f0:	8f 81       	ldd	r24, Y+7	; 0x07
    28f2:	98 85       	ldd	r25, Y+8	; 0x08
    28f4:	06 96       	adiw	r24, 0x06	; 6
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	b9 01       	movw	r22, r18
    28fc:	2c df       	rcall	.-424    	; 0x2756 <_ZNSaIdE8allocateEjPKv>
    28fe:	9c 01       	movw	r18, r24
    2900:	8f 81       	ldd	r24, Y+7	; 0x07
    2902:	98 85       	ldd	r25, Y+8	; 0x08
    2904:	fc 01       	movw	r30, r24
    2906:	31 83       	std	Z+1, r19	; 0x01
    2908:	20 83       	st	Z, r18

			for(size_type i = 0; i<elements; ++i){
    290a:	1a 82       	std	Y+2, r1	; 0x02
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	31 c0       	rjmp	.+98     	; 0x2972 <_ZNSt6vectorIdSaIdEE7reserveEj+0xe0>
				a.construct(data+i, temp_ptr[i]);
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	2b 81       	ldd	r18, Y+3	; 0x03
    291e:	3c 81       	ldd	r19, Y+4	; 0x04
    2920:	a9 01       	movw	r20, r18
    2922:	48 0f       	add	r20, r24
    2924:	59 1f       	adc	r21, r25
    2926:	8f 81       	ldd	r24, Y+7	; 0x07
    2928:	98 85       	ldd	r25, Y+8	; 0x08
    292a:	fc 01       	movw	r30, r24
    292c:	20 81       	ld	r18, Z
    292e:	31 81       	ldd	r19, Z+1	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	28 0f       	add	r18, r24
    293e:	39 1f       	adc	r19, r25
    2940:	8f 81       	ldd	r24, Y+7	; 0x07
    2942:	98 85       	ldd	r25, Y+8	; 0x08
    2944:	06 96       	adiw	r24, 0x06	; 6
    2946:	b9 01       	movw	r22, r18
    2948:	2b d0       	rcall	.+86     	; 0x29a0 <_ZNSaIdE9constructEPdRKd>
				a.destroy(temp_ptr+i);
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	9a 81       	ldd	r25, Y+2	; 0x02
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	2b 81       	ldd	r18, Y+3	; 0x03
    2958:	3c 81       	ldd	r19, Y+4	; 0x04
    295a:	28 0f       	add	r18, r24
    295c:	39 1f       	adc	r19, r25
    295e:	8f 81       	ldd	r24, Y+7	; 0x07
    2960:	98 85       	ldd	r25, Y+8	; 0x08
    2962:	06 96       	adiw	r24, 0x06	; 6
    2964:	b9 01       	movw	r22, r18
    2966:	73 df       	rcall	.-282    	; 0x284e <_ZNSaIdE7destroyEPd>
			size_type temp_size = data_size;

			data_size = n;
			data = a.allocate(data_size);

			for(size_type i = 0; i<elements; ++i){
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	8f 81       	ldd	r24, Y+7	; 0x07
    2974:	98 85       	ldd	r25, Y+8	; 0x08
    2976:	fc 01       	movw	r30, r24
    2978:	24 81       	ldd	r18, Z+4	; 0x04
    297a:	35 81       	ldd	r19, Z+5	; 0x05
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	82 17       	cp	r24, r18
    2982:	93 07       	cpc	r25, r19
    2984:	28 f2       	brcs	.-118    	; 0x2910 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7e>
				a.construct(data+i, temp_ptr[i]);
				a.destroy(temp_ptr+i);
			}
			a.deallocate(temp_ptr, temp_size);
    2986:	8f 81       	ldd	r24, Y+7	; 0x07
    2988:	98 85       	ldd	r25, Y+8	; 0x08
    298a:	06 96       	adiw	r24, 0x06	; 6
    298c:	4d 81       	ldd	r20, Y+5	; 0x05
    298e:	5e 81       	ldd	r21, Y+6	; 0x06
    2990:	2b 81       	ldd	r18, Y+3	; 0x03
    2992:	3c 81       	ldd	r19, Y+4	; 0x04
    2994:	b9 01       	movw	r22, r18
    2996:	69 df       	rcall	.-302    	; 0x286a <_ZNSaIdE10deallocateEPdj>
		}
	}
    2998:	2a 96       	adiw	r28, 0x0a	; 10
    299a:	e2 e0       	ldi	r30, 0x02	; 2
    299c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000029a0 <_ZNSaIdE9constructEPdRKd>:
	void deallocate(pointer p, size_type){
		::operator delete(p);
	}

	//Use placement new to engage the constructor
	void construct(pointer p, const T& val) { new((void*)p) T(val); }
    29a0:	a6 e0       	ldi	r26, 0x06	; 6
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e6 ed       	ldi	r30, 0xD6	; 214
    29a6:	f4 e1       	ldi	r31, 0x14	; 20
    29a8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	7c 83       	std	Y+4, r23	; 0x04
    29b2:	6b 83       	std	Y+3, r22	; 0x03
    29b4:	5e 83       	std	Y+6, r21	; 0x06
    29b6:	4d 83       	std	Y+5, r20	; 0x05
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	bc 01       	movw	r22, r24
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	48 dc       	rcall	.-1904   	; 0x2254 <_ZnwjPv>
    29c4:	9c 01       	movw	r18, r24
    29c6:	21 15       	cp	r18, r1
    29c8:	31 05       	cpc	r19, r1
    29ca:	61 f0       	breq	.+24     	; 0x29e4 <_ZNSaIdE9constructEPdRKd+0x44>
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	fc 01       	movw	r30, r24
    29d2:	80 81       	ld	r24, Z
    29d4:	91 81       	ldd	r25, Z+1	; 0x01
    29d6:	a2 81       	ldd	r26, Z+2	; 0x02
    29d8:	b3 81       	ldd	r27, Z+3	; 0x03
    29da:	f9 01       	movw	r30, r18
    29dc:	80 83       	st	Z, r24
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	a2 83       	std	Z+2, r26	; 0x02
    29e2:	b3 83       	std	Z+3, r27	; 0x03
    29e4:	26 96       	adiw	r28, 0x06	; 6
    29e6:	e2 e0       	ldi	r30, 0x02	; 2
    29e8:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000029ec <_ZNSt6vectorIdSaIdEE8downsizeEj>:
		}else{
			downsize(sz);
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
    29ec:	a6 e0       	ldi	r26, 0x06	; 6
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ec ef       	ldi	r30, 0xFC	; 252
    29f2:	f4 e1       	ldi	r31, 0x14	; 20
    29f4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    29f8:	9c 83       	std	Y+4, r25	; 0x04
    29fa:	8b 83       	std	Y+3, r24	; 0x03
    29fc:	7e 83       	std	Y+6, r23	; 0x06
    29fe:	6d 83       	std	Y+5, r22	; 0x05
		if(sz < elements){      //Actually are downsizing
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	fc 01       	movw	r30, r24
    2a06:	24 81       	ldd	r18, Z+4	; 0x04
    2a08:	35 81       	ldd	r19, Z+5	; 0x05
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	82 17       	cp	r24, r18
    2a10:	93 07       	cpc	r25, r19
    2a12:	68 f5       	brcc	.+90     	; 0x2a6e <_ZNSt6vectorIdSaIdEE8downsizeEj+0x82>
			for(size_t i = sz; i< elements; ++i){
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	17 c0       	rjmp	.+46     	; 0x2a4c <_ZNSt6vectorIdSaIdEE8downsizeEj+0x60>
				a.destroy(data+i);
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	fc 01       	movw	r30, r24
    2a24:	20 81       	ld	r18, Z
    2a26:	31 81       	ldd	r19, Z+1	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	28 0f       	add	r18, r24
    2a36:	39 1f       	adc	r19, r25
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	06 96       	adiw	r24, 0x06	; 6
    2a3e:	b9 01       	movw	r22, r18
    2a40:	06 df       	rcall	.-500    	; 0x284e <_ZNSaIdE7destroyEPd>
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
		if(sz < elements){      //Actually are downsizing
			for(size_t i = sz; i< elements; ++i){
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	fc 01       	movw	r30, r24
    2a52:	24 81       	ldd	r18, Z+4	; 0x04
    2a54:	35 81       	ldd	r19, Z+5	; 0x05
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	82 17       	cp	r24, r18
    2a5c:	93 07       	cpc	r25, r19
    2a5e:	f8 f2       	brcs	.-66     	; 0x2a1e <_ZNSt6vectorIdSaIdEE8downsizeEj+0x32>
				a.destroy(data+i);
			}
			elements = sz;
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	2d 81       	ldd	r18, Y+5	; 0x05
    2a66:	3e 81       	ldd	r19, Y+6	; 0x06
    2a68:	fc 01       	movw	r30, r24
    2a6a:	35 83       	std	Z+5, r19	; 0x05
    2a6c:	24 83       	std	Z+4, r18	; 0x04
		}
	}
    2a6e:	26 96       	adiw	r28, 0x06	; 6
    2a70:	e2 e0       	ldi	r30, 0x02	; 2
    2a72:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002a76 <_ZNK6String5c_strEv>:
    2a76:	a2 e0       	ldi	r26, 0x02	; 2
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e1 e4       	ldi	r30, 0x41	; 65
    2a7c:	f5 e1       	ldi	r31, 0x15	; 21
    2a7e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	22 96       	adiw	r28, 0x02	; 2
    2a92:	e2 e0       	ldi	r30, 0x02	; 2
    2a94:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002a98 <_ZN15StringSumHelperC1EPKc>:
    2a98:	a4 e0       	ldi	r26, 0x04	; 4
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e2 e5       	ldi	r30, 0x52	; 82
    2a9e:	f5 e1       	ldi	r31, 0x15	; 21
    2aa0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	7c 83       	std	Y+4, r23	; 0x04
    2aaa:	6b 83       	std	Y+3, r22	; 0x03
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab4:	b9 01       	movw	r22, r18
    2ab6:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    2aba:	24 96       	adiw	r28, 0x04	; 4
    2abc:	e2 e0       	ldi	r30, 0x02	; 2
    2abe:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002ac2 <_ZN5EERefC1Ei>:
    2ac2:	a4 e0       	ldi	r26, 0x04	; 4
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e7 e6       	ldi	r30, 0x67	; 103
    2ac8:	f5 e1       	ldi	r31, 0x15	; 21
    2aca:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	7c 83       	std	Y+4, r23	; 0x04
    2ad4:	6b 83       	std	Y+3, r22	; 0x03
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	2b 81       	ldd	r18, Y+3	; 0x03
    2adc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ade:	fc 01       	movw	r30, r24
    2ae0:	31 83       	std	Z+1, r19	; 0x01
    2ae2:	20 83       	st	Z, r18
    2ae4:	24 96       	adiw	r28, 0x04	; 4
    2ae6:	e2 e0       	ldi	r30, 0x02	; 2
    2ae8:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002aec <_ZNK5EERefdeEv>:
    2aec:	a2 e0       	ldi	r26, 0x02	; 2
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ec e7       	ldi	r30, 0x7C	; 124
    2af2:	f5 e1       	ldi	r31, 0x15	; 21
    2af4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	fc 01       	movw	r30, r24
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	0e 94 0d 3a 	call	0x741a	; 0x741a <eeprom_read_byte>
    2b0a:	22 96       	adiw	r28, 0x02	; 2
    2b0c:	e2 e0       	ldi	r30, 0x02	; 2
    2b0e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002b12 <_ZNK5EERefcvKhEv>:
    2b12:	a2 e0       	ldi	r26, 0x02	; 2
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ef e8       	ldi	r30, 0x8F	; 143
    2b18:	f5 e1       	ldi	r31, 0x15	; 21
    2b1a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	e2 df       	rcall	.-60     	; 0x2aec <_ZNK5EERefdeEv>
    2b28:	22 96       	adiw	r28, 0x02	; 2
    2b2a:	e2 e0       	ldi	r30, 0x02	; 2
    2b2c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002b30 <_ZN5EERefaSEh>:
    2b30:	a3 e0       	ldi	r26, 0x03	; 3
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ee e9       	ldi	r30, 0x9E	; 158
    2b36:	f5 e1       	ldi	r31, 0x15	; 21
    2b38:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	6b 83       	std	Y+3, r22	; 0x03
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	fc 01       	movw	r30, r24
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	6b 81       	ldd	r22, Y+3	; 0x03
    2b4e:	0e 94 15 3a 	call	0x742a	; 0x742a <eeprom_write_byte>
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	23 96       	adiw	r28, 0x03	; 3
    2b58:	e2 e0       	ldi	r30, 0x02	; 2
    2b5a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002b5e <_ZN5EERef6updateEh>:
    2b5e:	a3 e0       	ldi	r26, 0x03	; 3
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e5 eb       	ldi	r30, 0xB5	; 181
    2b64:	f5 e1       	ldi	r31, 0x15	; 21
    2b66:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	6b 83       	std	Y+3, r22	; 0x03
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	ce df       	rcall	.-100    	; 0x2b12 <_ZNK5EERefcvKhEv>
    2b76:	98 2f       	mov	r25, r24
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	98 17       	cp	r25, r24
    2b7c:	29 f0       	breq	.+10     	; 0x2b88 <_ZN5EERef6updateEh+0x2a>
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	6b 81       	ldd	r22, Y+3	; 0x03
    2b84:	d5 df       	rcall	.-86     	; 0x2b30 <_ZN5EERefaSEh>
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <_ZN5EERef6updateEh+0x2e>
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	23 96       	adiw	r28, 0x03	; 3
    2b8e:	e2 e0       	ldi	r30, 0x02	; 2
    2b90:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002b94 <_ZN11EEPROMClassixEi>:
    2b94:	a6 e0       	ldi	r26, 0x06	; 6
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e0 ed       	ldi	r30, 0xD0	; 208
    2b9a:	f5 e1       	ldi	r31, 0x15	; 21
    2b9c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
    2ba4:	7e 83       	std	Y+6, r23	; 0x06
    2ba6:	6d 83       	std	Y+5, r22	; 0x05
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	bc 01       	movw	r22, r24
    2bae:	ce 01       	movw	r24, r28
    2bb0:	01 96       	adiw	r24, 0x01	; 1
    2bb2:	87 df       	rcall	.-242    	; 0x2ac2 <_ZN5EERefC1Ei>
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	26 96       	adiw	r28, 0x06	; 6
    2bba:	e2 e0       	ldi	r30, 0x02	; 2
    2bbc:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002bc0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    2bc0:	aa e0       	ldi	r26, 0x0A	; 10
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    2bc6:	f5 e1       	ldi	r31, 0x15	; 21
    2bc8:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    2bcc:	9e 83       	std	Y+6, r25	; 0x06
    2bce:	8d 83       	std	Y+5, r24	; 0x05
    2bd0:	78 87       	std	Y+8, r23	; 0x08
    2bd2:	6f 83       	std	Y+7, r22	; 0x07
    2bd4:	5a 87       	std	Y+10, r21	; 0x0a
    2bd6:	49 87       	std	Y+9, r20	; 0x09
    2bd8:	1a 82       	std	Y+2, r1	; 0x02
    2bda:	19 82       	std	Y+1, r1	; 0x01
    2bdc:	1d c0       	rjmp	.+58     	; 0x2c18 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    2bde:	0d 81       	ldd	r16, Y+5	; 0x05
    2be0:	1e 81       	ldd	r17, Y+6	; 0x06
    2be2:	c8 01       	movw	r24, r16
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	8f 81       	ldd	r24, Y+7	; 0x07
    2bec:	98 85       	ldd	r25, Y+8	; 0x08
    2bee:	9c 01       	movw	r18, r24
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	38 87       	std	Y+8, r19	; 0x08
    2bf6:	2f 83       	std	Y+7, r18	; 0x07
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	87 ee       	ldi	r24, 0xE7	; 231
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	ca df       	rcall	.-108    	; 0x2b94 <_ZN11EEPROMClassixEi>
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	ce 01       	movw	r24, r28
    2c06:	03 96       	adiw	r24, 0x03	; 3
    2c08:	84 df       	rcall	.-248    	; 0x2b12 <_ZNK5EERefcvKhEv>
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 83       	st	Z, r24
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	29 81       	ldd	r18, Y+1	; 0x01
    2c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	28 17       	cp	r18, r24
    2c22:	39 07       	cpc	r19, r25
    2c24:	e0 f2       	brcs	.-72     	; 0x2bde <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2c26:	2a 96       	adiw	r28, 0x0a	; 10
    2c28:	e4 e0       	ldi	r30, 0x04	; 4
    2c2a:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

00002c2e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2c2e:	ab e0       	ldi	r26, 0x0B	; 11
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ed e1       	ldi	r30, 0x1D	; 29
    2c34:	f6 e1       	ldi	r31, 0x16	; 22
    2c36:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2c3a:	9f 83       	std	Y+7, r25	; 0x07
    2c3c:	8e 83       	std	Y+6, r24	; 0x06
    2c3e:	79 87       	std	Y+9, r23	; 0x09
    2c40:	68 87       	std	Y+8, r22	; 0x08
    2c42:	5b 87       	std	Y+11, r21	; 0x0b
    2c44:	4a 87       	std	Y+10, r20	; 0x0a
    2c46:	1a 82       	std	Y+2, r1	; 0x02
    2c48:	19 82       	std	Y+1, r1	; 0x01
    2c4a:	20 c0       	rjmp	.+64     	; 0x2c8c <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    2c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c50:	fc 01       	movw	r30, r24
    2c52:	80 81       	ld	r24, Z
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	88 85       	ldd	r24, Y+8	; 0x08
    2c58:	99 85       	ldd	r25, Y+9	; 0x09
    2c5a:	9c 01       	movw	r18, r24
    2c5c:	2f 5f       	subi	r18, 0xFF	; 255
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	39 87       	std	Y+9, r19	; 0x09
    2c62:	28 87       	std	Y+8, r18	; 0x08
    2c64:	bc 01       	movw	r22, r24
    2c66:	87 ee       	ldi	r24, 0xE7	; 231
    2c68:	92 e0       	ldi	r25, 0x02	; 2
    2c6a:	94 df       	rcall	.-216    	; 0x2b94 <_ZN11EEPROMClassixEi>
    2c6c:	9d 83       	std	Y+5, r25	; 0x05
    2c6e:	8c 83       	std	Y+4, r24	; 0x04
    2c70:	ce 01       	movw	r24, r28
    2c72:	04 96       	adiw	r24, 0x04	; 4
    2c74:	6b 81       	ldd	r22, Y+3	; 0x03
    2c76:	73 df       	rcall	.-282    	; 0x2b5e <_ZN5EERef6updateEh>
    2c78:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	9f 83       	std	Y+7, r25	; 0x07
    2c80:	8e 83       	std	Y+6, r24	; 0x06
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	29 81       	ldd	r18, Y+1	; 0x01
    2c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c94:	28 17       	cp	r18, r24
    2c96:	39 07       	cpc	r19, r25
    2c98:	c8 f2       	brcs	.-78     	; 0x2c4c <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    2c9a:	2b 96       	adiw	r28, 0x0b	; 11
    2c9c:	e2 e0       	ldi	r30, 0x02	; 2
    2c9e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002ca2 <_ZN5PrintC1ERKS_>:
    2ca2:	a4 e0       	ldi	r26, 0x04	; 4
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e7 e5       	ldi	r30, 0x57	; 87
    2ca8:	f6 e1       	ldi	r31, 0x16	; 22
    2caa:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	7c 83       	std	Y+4, r23	; 0x04
    2cb4:	6b 83       	std	Y+3, r22	; 0x03
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	2d ec       	ldi	r18, 0xCD	; 205
    2cbc:	31 e0       	ldi	r19, 0x01	; 1
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	31 83       	std	Z+1, r19	; 0x01
    2cc2:	20 83       	st	Z, r18
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	fc 01       	movw	r30, r24
    2cca:	22 81       	ldd	r18, Z+2	; 0x02
    2ccc:	33 81       	ldd	r19, Z+3	; 0x03
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	33 83       	std	Z+3, r19	; 0x03
    2cd6:	22 83       	std	Z+2, r18	; 0x02
    2cd8:	24 96       	adiw	r28, 0x04	; 4
    2cda:	e2 e0       	ldi	r30, 0x02	; 2
    2cdc:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002ce0 <_ZN13LiquidCrystalC1ERKS_>:
    2ce0:	a4 e0       	ldi	r26, 0x04	; 4
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e7       	ldi	r30, 0x76	; 118
    2ce6:	f6 e1       	ldi	r31, 0x16	; 22
    2ce8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	7c 83       	std	Y+4, r23	; 0x04
    2cf2:	6b 83       	std	Y+3, r22	; 0x03
    2cf4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfc:	b9 01       	movw	r22, r18
    2cfe:	d1 df       	rcall	.-94     	; 0x2ca2 <_ZN5PrintC1ERKS_>
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	2e e7       	ldi	r18, 0x7E	; 126
    2d06:	31 e0       	ldi	r19, 0x01	; 1
    2d08:	fc 01       	movw	r30, r24
    2d0a:	31 83       	std	Z+1, r19	; 0x01
    2d0c:	20 83       	st	Z, r18
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	fc 01       	movw	r30, r24
    2d14:	24 81       	ldd	r18, Z+4	; 0x04
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	24 83       	std	Z+4, r18	; 0x04
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	fc 01       	movw	r30, r24
    2d24:	25 81       	ldd	r18, Z+5	; 0x05
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	25 83       	std	Z+5, r18	; 0x05
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	fc 01       	movw	r30, r24
    2d34:	26 81       	ldd	r18, Z+6	; 0x06
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	26 83       	std	Z+6, r18	; 0x06
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	2b 81       	ldd	r18, Y+3	; 0x03
    2d44:	3c 81       	ldd	r19, Y+4	; 0x04
    2d46:	48 e0       	ldi	r20, 0x08	; 8
    2d48:	f9 01       	movw	r30, r18
    2d4a:	37 96       	adiw	r30, 0x07	; 7
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	17 96       	adiw	r26, 0x07	; 7
    2d50:	01 90       	ld	r0, Z+
    2d52:	0d 92       	st	X+, r0
    2d54:	4a 95       	dec	r20
    2d56:	e1 f7       	brne	.-8      	; 0x2d50 <_ZN13LiquidCrystalC1ERKS_+0x70>
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	27 85       	ldd	r18, Z+15	; 0x0f
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	fc 01       	movw	r30, r24
    2d66:	27 87       	std	Z+15, r18	; 0x0f
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	20 89       	ldd	r18, Z+16	; 0x10
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	fc 01       	movw	r30, r24
    2d76:	20 8b       	std	Z+16, r18	; 0x10
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	21 89       	ldd	r18, Z+17	; 0x11
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	fc 01       	movw	r30, r24
    2d86:	21 8b       	std	Z+17, r18	; 0x11
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	22 89       	ldd	r18, Z+18	; 0x12
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	fc 01       	movw	r30, r24
    2d96:	22 8b       	std	Z+18, r18	; 0x12
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	23 89       	ldd	r18, Z+19	; 0x13
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	fc 01       	movw	r30, r24
    2da6:	23 8b       	std	Z+19, r18	; 0x13
    2da8:	29 81       	ldd	r18, Y+1	; 0x01
    2daa:	3a 81       	ldd	r19, Y+2	; 0x02
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	fc 01       	movw	r30, r24
    2db2:	84 89       	ldd	r24, Z+20	; 0x14
    2db4:	95 89       	ldd	r25, Z+21	; 0x15
    2db6:	a6 89       	ldd	r26, Z+22	; 0x16
    2db8:	b7 89       	ldd	r27, Z+23	; 0x17
    2dba:	f9 01       	movw	r30, r18
    2dbc:	84 8b       	std	Z+20, r24	; 0x14
    2dbe:	95 8b       	std	Z+21, r25	; 0x15
    2dc0:	a6 8b       	std	Z+22, r26	; 0x16
    2dc2:	b7 8b       	std	Z+23, r27	; 0x17
    2dc4:	24 96       	adiw	r28, 0x04	; 4
    2dc6:	e2 e0       	ldi	r30, 0x02	; 2
    2dc8:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002dcc <_ZN7LCDBaseC1ERKS_>:
    2dcc:	a4 e0       	ldi	r26, 0x04	; 4
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	ec ee       	ldi	r30, 0xEC	; 236
    2dd2:	f6 e1       	ldi	r31, 0x16	; 22
    2dd4:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	7c 83       	std	Y+4, r23	; 0x04
    2dde:	6b 83       	std	Y+3, r22	; 0x03
    2de0:	2b 81       	ldd	r18, Y+3	; 0x03
    2de2:	3c 81       	ldd	r19, Y+4	; 0x04
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	b9 01       	movw	r22, r18
    2dea:	7a df       	rcall	.-268    	; 0x2ce0 <_ZN13LiquidCrystalC1ERKS_>
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	2c e9       	ldi	r18, 0x9C	; 156
    2df2:	31 e0       	ldi	r19, 0x01	; 1
    2df4:	fc 01       	movw	r30, r24
    2df6:	31 83       	std	Z+1, r19	; 0x01
    2df8:	20 83       	st	Z, r18
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2e00:	3c 81       	ldd	r19, Y+4	; 0x04
    2e02:	4a e0       	ldi	r20, 0x0A	; 10
    2e04:	f9 01       	movw	r30, r18
    2e06:	78 96       	adiw	r30, 0x18	; 24
    2e08:	dc 01       	movw	r26, r24
    2e0a:	58 96       	adiw	r26, 0x18	; 24
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	0d 92       	st	X+, r0
    2e10:	4a 95       	dec	r20
    2e12:	e1 f7       	brne	.-8      	; 0x2e0c <_ZN7LCDBaseC1ERKS_+0x40>
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	9c 81       	ldd	r25, Y+4	; 0x04
    2e18:	fc 01       	movw	r30, r24
    2e1a:	22 a1       	ldd	r18, Z+34	; 0x22
    2e1c:	33 a1       	ldd	r19, Z+35	; 0x23
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	fc 01       	movw	r30, r24
    2e24:	33 a3       	std	Z+35, r19	; 0x23
    2e26:	22 a3       	std	Z+34, r18	; 0x22
    2e28:	24 96       	adiw	r28, 0x04	; 4
    2e2a:	e2 e0       	ldi	r30, 0x02	; 2
    2e2c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002e30 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2e30:	ac e0       	ldi	r26, 0x0C	; 12
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ee e1       	ldi	r30, 0x1E	; 30
    2e36:	f7 e1       	ldi	r31, 0x17	; 23
    2e38:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    2e3c:	9b 83       	std	Y+3, r25	; 0x03
    2e3e:	8a 83       	std	Y+2, r24	; 0x02
    2e40:	7d 83       	std	Y+5, r23	; 0x05
    2e42:	6c 83       	std	Y+4, r22	; 0x04
    2e44:	5f 83       	std	Y+7, r21	; 0x07
    2e46:	4e 83       	std	Y+6, r20	; 0x06
    2e48:	28 87       	std	Y+8, r18	; 0x08
    2e4a:	1a 87       	std	Y+10, r17	; 0x0a
    2e4c:	09 87       	std	Y+9, r16	; 0x09
    2e4e:	fc 86       	std	Y+12, r15	; 0x0c
    2e50:	eb 86       	std	Y+11, r14	; 0x0b
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	9b 81       	ldd	r25, Y+3	; 0x03
    2e56:	2c 81       	ldd	r18, Y+4	; 0x04
    2e58:	3d 81       	ldd	r19, Y+5	; 0x05
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	31 83       	std	Z+1, r19	; 0x01
    2e5e:	20 83       	st	Z, r18
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	9b 81       	ldd	r25, Y+3	; 0x03
    2e64:	8e 5a       	subi	r24, 0xAE	; 174
    2e66:	9f 4f       	sbci	r25, 0xFF	; 255
    2e68:	fc 01       	movw	r30, r24
    2e6a:	11 82       	std	Z+1, r1	; 0x01
    2e6c:	10 82       	st	Z, r1
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	8c 5a       	subi	r24, 0xAC	; 172
    2e74:	9f 4f       	sbci	r25, 0xFF	; 255
    2e76:	2e 81       	ldd	r18, Y+6	; 0x06
    2e78:	3f 81       	ldd	r19, Y+7	; 0x07
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	31 83       	std	Z+1, r19	; 0x01
    2e7e:	20 83       	st	Z, r18
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0d dc       	rcall	.-2022   	; 0x26a0 <_ZNSaIdEC1Ev>
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	8a 5a       	subi	r24, 0xAA	; 170
    2e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8e:	9e 01       	movw	r18, r28
    2e90:	2f 5f       	subi	r18, 0xFF	; 255
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	b9 01       	movw	r22, r18
    2e96:	4e d5       	rcall	.+2716   	; 0x3934 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
    2e98:	ce 01       	movw	r24, r28
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	0d dc       	rcall	.-2022   	; 0x26b8 <_ZNSaIdED1Ev>
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	83 5a       	subi	r24, 0xA3	; 163
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	11 82       	std	Z+1, r1	; 0x01
    2eaa:	10 82       	st	Z, r1
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb0:	85 59       	subi	r24, 0x95	; 149
    2eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb4:	28 85       	ldd	r18, Y+8	; 0x08
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	20 83       	st	Z, r18
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebe:	84 59       	subi	r24, 0x94	; 148
    2ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ec4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	31 83       	std	Z+1, r19	; 0x01
    2eca:	20 83       	st	Z, r18
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed0:	81 59       	subi	r24, 0x91	; 145
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	11 82       	std	Z+1, r1	; 0x01
    2ed8:	10 82       	st	Z, r1
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	8f 58       	subi	r24, 0x8F	; 143
    2ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee2:	29 85       	ldd	r18, Y+9	; 0x09
    2ee4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ee6:	b9 01       	movw	r22, r18
    2ee8:	71 df       	rcall	.-286    	; 0x2dcc <_ZN7LCDBaseC1ERKS_>
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	8b 56       	subi	r24, 0x6B	; 107
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	6f e1       	ldi	r22, 0x1F	; 31
    2ef4:	71 e0       	ldi	r23, 0x01	; 1
    2ef6:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
    2efe:	85 56       	subi	r24, 0x65	; 101
    2f00:	9f 4f       	sbci	r25, 0xFF	; 255
    2f02:	6f e1       	ldi	r22, 0x1F	; 31
    2f04:	71 e0       	ldi	r23, 0x01	; 1
    2f06:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0e:	9c 01       	movw	r18, r24
    2f10:	2f 55       	subi	r18, 0x5F	; 95
    2f12:	3f 4f       	sbci	r19, 0xFF	; 255
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a0 e4       	ldi	r26, 0x40	; 64
    2f1a:	b0 e4       	ldi	r27, 0x40	; 64
    2f1c:	f9 01       	movw	r30, r18
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	04 d0       	rcall	.+8      	; 0x2f34 <_ZN8PHSensor4initEv>
    2f2c:	2c 96       	adiw	r28, 0x0c	; 12
    2f2e:	e6 e0       	ldi	r30, 0x06	; 6
    2f30:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00002f34 <_ZN8PHSensor4initEv>:
    2f34:	a6 e0       	ldi	r26, 0x06	; 6
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e0 ea       	ldi	r30, 0xA0	; 160
    2f3a:	f7 e1       	ldi	r31, 0x17	; 23
    2f3c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	8d e0       	ldi	r24, 0x0D	; 13
    2f48:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	84 59       	subi	r24, 0x94	; 148
    2f52:	9f 4f       	sbci	r25, 0xFF	; 255
    2f54:	fc 01       	movw	r30, r24
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
    2f5c:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    2f60:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN6Memory13TheSensorsMemE>
    2f64:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN6Memory13TheSensorsMemE+0x1>
    2f68:	17 d5       	rcall	.+2606   	; 0x3998 <_ZN6EEWrapIfEcvKfEv>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	ab 83       	std	Y+3, r26	; 0x03
    2f74:	bc 83       	std	Y+4, r27	; 0x04
    2f76:	29 81       	ldd	r18, Y+1	; 0x01
    2f78:	3a 81       	ldd	r19, Y+2	; 0x02
    2f7a:	4b 81       	ldd	r20, Y+3	; 0x03
    2f7c:	5c 81       	ldd	r21, Y+4	; 0x04
    2f7e:	69 81       	ldd	r22, Y+1	; 0x01
    2f80:	7a 81       	ldd	r23, Y+2	; 0x02
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	0e 94 46 2a 	call	0x548c	; 0x548c <__unordsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	71 f4       	brne	.+28     	; 0x2faa <_ZN8PHSensor4initEv+0x76>
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	9c 01       	movw	r18, r24
    2f94:	2f 55       	subi	r18, 0x5F	; 95
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f9e:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
    2faa:	26 96       	adiw	r28, 0x06	; 6
    2fac:	e2 e0       	ldi	r30, 0x02	; 2
    2fae:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00002fb2 <_ZN8PHSensor6UpdateEd>:
    2fb2:	aa e0       	ldi	r26, 0x0A	; 10
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	ef ed       	ldi	r30, 0xDF	; 223
    2fb8:	f7 e1       	ldi	r31, 0x17	; 23
    2fba:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	4f 83       	std	Y+7, r20	; 0x07
    2fc4:	58 87       	std	Y+8, r21	; 0x08
    2fc6:	69 87       	std	Y+9, r22	; 0x09
    2fc8:	7a 87       	std	Y+10, r23	; 0x0a
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	9c 01       	movw	r18, r24
    2fd0:	2f 55       	subi	r18, 0x5F	; 95
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd6:	98 85       	ldd	r25, Y+8	; 0x08
    2fd8:	a9 85       	ldd	r26, Y+9	; 0x09
    2fda:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fdc:	f9 01       	movw	r30, r18
    2fde:	80 83       	st	Z, r24
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	a2 83       	std	Z+2, r26	; 0x02
    2fe4:	b3 83       	std	Z+3, r27	; 0x03
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	8f 55       	subi	r24, 0x5F	; 95
    2fec:	9f 4f       	sbci	r25, 0xFF	; 255
    2fee:	fc 01       	movw	r30, r24
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ff6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	ab 83       	std	Y+3, r26	; 0x03
    2ffe:	bc 83       	std	Y+4, r27	; 0x04
    3000:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN6Memory13TheSensorsMemE>
    3004:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN6Memory13TheSensorsMemE+0x1>
    3008:	9c 01       	movw	r18, r24
    300a:	ce 01       	movw	r24, r28
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	bc 01       	movw	r22, r24
    3010:	c9 01       	movw	r24, r18
    3012:	d5 d4       	rcall	.+2474   	; 0x39be <_ZN6EEWrapIfEaSERKf>
    3014:	2a 96       	adiw	r28, 0x0a	; 10
    3016:	e2 e0       	ldi	r30, 0x02	; 2
    3018:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000301c <_ZN8PHSensor5GetPHEv>:
    301c:	ae e0       	ldi	r26, 0x0E	; 14
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e4 e1       	ldi	r30, 0x14	; 20
    3022:	f8 e1       	ldi	r31, 0x18	; 24
    3024:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3028:	9e 87       	std	Y+14, r25	; 0x0e
    302a:	8d 87       	std	Y+13, r24	; 0x0d
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	81 5a       	subi	r24, 0xA1	; 161
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	fc 01       	movw	r30, r24
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	a2 81       	ldd	r26, Z+2	; 0x02
    303c:	b3 81       	ldd	r27, Z+3	; 0x03
    303e:	fe 01       	movw	r30, r28
    3040:	37 96       	adiw	r30, 0x07	; 7
    3042:	22 e0       	ldi	r18, 0x02	; 2
    3044:	ac 01       	movw	r20, r24
    3046:	bd 01       	movw	r22, r26
    3048:	cf 01       	movw	r24, r30
    304a:	0e 94 03 31 	call	0x6206	; 0x6206 <_ZN6StringC1Efh>
    304e:	ce 01       	movw	r24, r28
    3050:	07 96       	adiw	r24, 0x07	; 7
    3052:	11 dd       	rcall	.-1502   	; 0x2a76 <_ZNK6String5c_strEv>
    3054:	9c 01       	movw	r18, r24
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	8b 56       	subi	r24, 0x6B	; 107
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	b9 01       	movw	r22, r18
    3060:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    3064:	ce 01       	movw	r24, r28
    3066:	07 96       	adiw	r24, 0x07	; 7
    3068:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	8d 59       	subi	r24, 0x9D	; 157
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	fc 01       	movw	r30, r24
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	a2 81       	ldd	r26, Z+2	; 0x02
    307c:	b3 81       	ldd	r27, Z+3	; 0x03
    307e:	22 e0       	ldi	r18, 0x02	; 2
    3080:	ac 01       	movw	r20, r24
    3082:	bd 01       	movw	r22, r26
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	0e 94 03 31 	call	0x6206	; 0x6206 <_ZN6StringC1Efh>
    308c:	ce 01       	movw	r24, r28
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	f2 dc       	rcall	.-1564   	; 0x2a76 <_ZNK6String5c_strEv>
    3092:	9c 01       	movw	r18, r24
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	85 56       	subi	r24, 0x65	; 101
    309a:	9f 4f       	sbci	r25, 0xFF	; 255
    309c:	b9 01       	movw	r22, r18
    309e:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    30a2:	ce 01       	movw	r24, r28
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    30aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ae:	81 5a       	subi	r24, 0xA1	; 161
    30b0:	9f 4f       	sbci	r25, 0xFF	; 255
    30b2:	fc 01       	movw	r30, r24
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	a2 81       	ldd	r26, Z+2	; 0x02
    30ba:	b3 81       	ldd	r27, Z+3	; 0x03
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	2e 96       	adiw	r28, 0x0e	; 14
    30c2:	e2 e0       	ldi	r30, 0x02	; 2
    30c4:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000030c8 <_ZN8PHSensor11CalculatePHEv>:
    30c8:	ac e2       	ldi	r26, 0x2C	; 44
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ea e6       	ldi	r30, 0x6A	; 106
    30ce:	f8 e1       	ldi	r31, 0x18	; 24
    30d0:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    30d4:	9c a7       	std	Y+44, r25	; 0x2c
    30d6:	8b a7       	std	Y+43, r24	; 0x2b
    30d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30da:	9c a5       	ldd	r25, Y+44	; 0x2c
    30dc:	82 59       	subi	r24, 0x92	; 146
    30de:	9f 4f       	sbci	r25, 0xFF	; 255
    30e0:	fc 01       	movw	r30, r24
    30e2:	90 81       	ld	r25, Z
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	89 27       	eor	r24, r25
    30e8:	88 23       	and	r24, r24
    30ea:	09 f0       	breq	.+2      	; 0x30ee <_ZN8PHSensor11CalculatePHEv+0x26>
    30ec:	a4 c1       	rjmp	.+840    	; 0x3436 <_ZN8PHSensor11CalculatePHEv+0x36e>
    30ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    30f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30f2:	a5 d1       	rcall	.+842    	; 0x343e <_ZN8PHSensor10getPHValueEv>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	2b a5       	ldd	r18, Y+43	; 0x2b
    30fa:	3c a5       	ldd	r19, Y+44	; 0x2c
    30fc:	21 5a       	subi	r18, 0xA1	; 161
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	f9 01       	movw	r30, r18
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
    310a:	88 ee       	ldi	r24, 0xE8	; 232
    310c:	92 e0       	ldi	r25, 0x02	; 2
    310e:	fc 01       	movw	r30, r24
    3110:	80 81       	ld	r24, Z
    3112:	88 23       	and	r24, r24
    3114:	89 f4       	brne	.+34     	; 0x3138 <_ZN8PHSensor11CalculatePHEv+0x70>
    3116:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    3122:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    3126:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    312a:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    312e:	88 ee       	ldi	r24, 0xE8	; 232
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	21 e0       	ldi	r18, 0x01	; 1
    3134:	fc 01       	movw	r30, r24
    3136:	20 83       	st	Z, r18
    3138:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    313c:	9b 01       	movw	r18, r22
    313e:	ac 01       	movw	r20, r24
    3140:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    3144:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    3148:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    314c:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    3150:	79 01       	movw	r14, r18
    3152:	8a 01       	movw	r16, r20
    3154:	e8 1a       	sub	r14, r24
    3156:	f9 0a       	sbc	r15, r25
    3158:	0a 0b       	sbc	r16, r26
    315a:	1b 0b       	sbc	r17, r27
    315c:	d8 01       	movw	r26, r16
    315e:	c7 01       	movw	r24, r14
    3160:	21 e0       	ldi	r18, 0x01	; 1
    3162:	81 36       	cpi	r24, 0x61	; 97
    3164:	9a 4e       	sbci	r25, 0xEA	; 234
    3166:	a1 05       	cpc	r26, r1
    3168:	b1 05       	cpc	r27, r1
    316a:	08 f4       	brcc	.+2      	; 0x316e <_ZN8PHSensor11CalculatePHEv+0xa6>
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	22 23       	and	r18, r18
    3170:	09 f4       	brne	.+2      	; 0x3174 <_ZN8PHSensor11CalculatePHEv+0xac>
    3172:	61 c1       	rjmp	.+706    	; 0x3436 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3174:	19 82       	std	Y+1, r1	; 0x01
    3176:	1a 82       	std	Y+2, r1	; 0x02
    3178:	1b 82       	std	Y+3, r1	; 0x03
    317a:	1c 82       	std	Y+4, r1	; 0x04
    317c:	8b a5       	ldd	r24, Y+43	; 0x2b
    317e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3180:	8a 5a       	subi	r24, 0xAA	; 170
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	7c da       	rcall	.-2824   	; 0x267e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	05 97       	sbiw	r24, 0x05	; 5
    318a:	08 f0       	brcs	.+2      	; 0x318e <_ZN8PHSensor11CalculatePHEv+0xc6>
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	22 23       	and	r18, r18
    3190:	d1 f1       	breq	.+116    	; 0x3206 <_ZN8PHSensor11CalculatePHEv+0x13e>
    3192:	8b a5       	ldd	r24, Y+43	; 0x2b
    3194:	9c a5       	ldd	r25, Y+44	; 0x2c
    3196:	81 5a       	subi	r24, 0xA1	; 161
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	fc 01       	movw	r30, r24
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	a2 81       	ldd	r26, Z+2	; 0x02
    31a2:	b3 81       	ldd	r27, Z+3	; 0x03
    31a4:	8b a3       	std	Y+35, r24	; 0x23
    31a6:	9c a3       	std	Y+36, r25	; 0x24
    31a8:	ad a3       	std	Y+37, r26	; 0x25
    31aa:	be a3       	std	Y+38, r27	; 0x26
    31ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    31b0:	8a 5a       	subi	r24, 0xAA	; 170
    31b2:	9f 4f       	sbci	r25, 0xFF	; 255
    31b4:	9e 01       	movw	r18, r28
    31b6:	2d 5d       	subi	r18, 0xDD	; 221
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	b9 01       	movw	r22, r18
    31bc:	14 d4       	rcall	.+2088   	; 0x39e6 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    31be:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31c2:	9c 01       	movw	r18, r24
    31c4:	2a 5a       	subi	r18, 0xAA	; 170
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	ce 01       	movw	r24, r28
    31ca:	4c 96       	adiw	r24, 0x1c	; 28
    31cc:	b9 01       	movw	r22, r18
    31ce:	27 d4       	rcall	.+2126   	; 0x3a1e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    31d0:	ce 01       	movw	r24, r28
    31d2:	4c 96       	adiw	r24, 0x1c	; 28
    31d4:	4f d8       	rcall	.-3938   	; 0x2274 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	ab 83       	std	Y+3, r26	; 0x03
    31e0:	bc 83       	std	Y+4, r27	; 0x04
    31e2:	ce 01       	movw	r24, r28
    31e4:	4c 96       	adiw	r24, 0x1c	; 28
    31e6:	74 da       	rcall	.-2840   	; 0x26d0 <_ZNSt6vectorIdSaIdEED1Ev>
    31e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ec:	9c 01       	movw	r18, r24
    31ee:	2d 59       	subi	r18, 0x9D	; 157
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	ab 81       	ldd	r26, Y+3	; 0x03
    31f8:	bc 81       	ldd	r27, Y+4	; 0x04
    31fa:	f9 01       	movw	r30, r18
    31fc:	80 83       	st	Z, r24
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	a2 83       	std	Z+2, r26	; 0x02
    3202:	b3 83       	std	Z+3, r27	; 0x03
    3204:	18 c1       	rjmp	.+560    	; 0x3436 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3206:	8b a5       	ldd	r24, Y+43	; 0x2b
    3208:	9c a5       	ldd	r25, Y+44	; 0x2c
    320a:	9c 01       	movw	r18, r24
    320c:	2a 5a       	subi	r18, 0xAA	; 170
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	ce 01       	movw	r24, r28
    3212:	45 96       	adiw	r24, 0x15	; 21
    3214:	b9 01       	movw	r22, r18
    3216:	03 d4       	rcall	.+2054   	; 0x3a1e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    3218:	ce 01       	movw	r24, r28
    321a:	45 96       	adiw	r24, 0x15	; 21
    321c:	2b d8       	rcall	.-4010   	; 0x2274 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	ab 83       	std	Y+3, r26	; 0x03
    3228:	bc 83       	std	Y+4, r27	; 0x04
    322a:	ce 01       	movw	r24, r28
    322c:	45 96       	adiw	r24, 0x15	; 21
    322e:	50 da       	rcall	.-2912   	; 0x26d0 <_ZNSt6vectorIdSaIdEED1Ev>
    3230:	8b a5       	ldd	r24, Y+43	; 0x2b
    3232:	9c a5       	ldd	r25, Y+44	; 0x2c
    3234:	81 5a       	subi	r24, 0xA1	; 161
    3236:	9f 4f       	sbci	r25, 0xFF	; 255
    3238:	fc 01       	movw	r30, r24
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	a2 81       	ldd	r26, Z+2	; 0x02
    3240:	b3 81       	ldd	r27, Z+3	; 0x03
    3242:	29 81       	ldd	r18, Y+1	; 0x01
    3244:	3a 81       	ldd	r19, Y+2	; 0x02
    3246:	4b 81       	ldd	r20, Y+3	; 0x03
    3248:	5c 81       	ldd	r21, Y+4	; 0x04
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 2c 28 	call	0x5058	; 0x5058 <__addsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	50 e4       	ldi	r21, 0x40	; 64
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 94 28 	call	0x5128	; 0x5128 <__divsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8f a3       	std	Y+39, r24	; 0x27
    326c:	98 a7       	std	Y+40, r25	; 0x28
    326e:	a9 a7       	std	Y+41, r26	; 0x29
    3270:	ba a7       	std	Y+42, r27	; 0x2a
    3272:	2f a1       	ldd	r18, Y+39	; 0x27
    3274:	38 a5       	ldd	r19, Y+40	; 0x28
    3276:	49 a5       	ldd	r20, Y+41	; 0x29
    3278:	5a a5       	ldd	r21, Y+42	; 0x2a
    327a:	8b a5       	ldd	r24, Y+43	; 0x2b
    327c:	9c a5       	ldd	r25, Y+44	; 0x2c
    327e:	81 5a       	subi	r24, 0xA1	; 161
    3280:	9f 4f       	sbci	r25, 0xFF	; 255
    3282:	fc 01       	movw	r30, r24
    3284:	80 81       	ld	r24, Z
    3286:	91 81       	ldd	r25, Z+1	; 0x01
    3288:	a2 81       	ldd	r26, Z+2	; 0x02
    328a:	b3 81       	ldd	r27, Z+3	; 0x03
    328c:	eb a5       	ldd	r30, Y+43	; 0x2b
    328e:	fc a5       	ldd	r31, Y+44	; 0x2c
    3290:	89 01       	movw	r16, r18
    3292:	9a 01       	movw	r18, r20
    3294:	ac 01       	movw	r20, r24
    3296:	bd 01       	movw	r22, r26
    3298:	cf 01       	movw	r24, r30
    329a:	f3 d2       	rcall	.+1510   	; 0x3882 <_ZN8PHSensor9isOutlierEdd>
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	88 23       	and	r24, r24
    32a2:	d9 f0       	breq	.+54     	; 0x32da <_ZN8PHSensor11CalculatePHEv+0x212>
    32a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    32a8:	81 59       	subi	r24, 0x91	; 145
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	fc 01       	movw	r30, r24
    32ae:	80 81       	ld	r24, Z
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	0a 97       	sbiw	r24, 0x0a	; 10
    32b4:	94 f4       	brge	.+36     	; 0x32da <_ZN8PHSensor11CalculatePHEv+0x212>
    32b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ba:	81 59       	subi	r24, 0x91	; 145
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	fc 01       	movw	r30, r24
    32c0:	80 81       	ld	r24, Z
    32c2:	91 81       	ldd	r25, Z+1	; 0x01
    32c4:	9c 01       	movw	r18, r24
    32c6:	2f 5f       	subi	r18, 0xFF	; 255
    32c8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    32cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ce:	81 59       	subi	r24, 0x91	; 145
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	fc 01       	movw	r30, r24
    32d4:	31 83       	std	Z+1, r19	; 0x01
    32d6:	20 83       	st	Z, r18
    32d8:	ae c0       	rjmp	.+348    	; 0x3436 <_ZN8PHSensor11CalculatePHEv+0x36e>
    32da:	8b a5       	ldd	r24, Y+43	; 0x2b
    32dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32de:	81 59       	subi	r24, 0x91	; 145
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	fc 01       	movw	r30, r24
    32e4:	11 82       	std	Z+1, r1	; 0x01
    32e6:	10 82       	st	Z, r1
    32e8:	88 e2       	ldi	r24, 0x28	; 40
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9f 83       	std	Y+7, r25	; 0x07
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32f4:	8a 5a       	subi	r24, 0xAA	; 170
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	c2 d9       	rcall	.-3196   	; 0x267e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    32fa:	99 87       	std	Y+9, r25	; 0x09
    32fc:	88 87       	std	Y+8, r24	; 0x08
    32fe:	28 85       	ldd	r18, Y+8	; 0x08
    3300:	39 85       	ldd	r19, Y+9	; 0x09
    3302:	8e 81       	ldd	r24, Y+6	; 0x06
    3304:	9f 81       	ldd	r25, Y+7	; 0x07
    3306:	28 17       	cp	r18, r24
    3308:	39 07       	cpc	r19, r25
    330a:	ec f4       	brge	.+58     	; 0x3346 <_ZN8PHSensor11CalculatePHEv+0x27e>
    330c:	8a ec       	ldi	r24, 0xCA	; 202
    330e:	93 e0       	ldi	r25, 0x03	; 3
    3310:	bc 01       	movw	r22, r24
    3312:	8c e6       	ldi	r24, 0x6C	; 108
    3314:	95 e0       	ldi	r25, 0x05	; 5
    3316:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    331a:	8f a1       	ldd	r24, Y+39	; 0x27
    331c:	98 a5       	ldd	r25, Y+40	; 0x28
    331e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3320:	ba a5       	ldd	r27, Y+42	; 0x2a
    3322:	22 e0       	ldi	r18, 0x02	; 2
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	ac 01       	movw	r20, r24
    3328:	bd 01       	movw	r22, r26
    332a:	8c e6       	ldi	r24, 0x6C	; 108
    332c:	95 e0       	ldi	r25, 0x05	; 5
    332e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <_ZN5Print7printlnEdi>
    3332:	8b a5       	ldd	r24, Y+43	; 0x2b
    3334:	9c a5       	ldd	r25, Y+44	; 0x2c
    3336:	8a 5a       	subi	r24, 0xAA	; 170
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	9e 01       	movw	r18, r28
    333c:	29 5d       	subi	r18, 0xD9	; 217
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	b9 01       	movw	r22, r18
    3342:	51 d3       	rcall	.+1698   	; 0x39e6 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    3344:	35 c0       	rjmp	.+106    	; 0x33b0 <_ZN8PHSensor11CalculatePHEv+0x2e8>
    3346:	89 ed       	ldi	r24, 0xD9	; 217
    3348:	93 e0       	ldi	r25, 0x03	; 3
    334a:	bc 01       	movw	r22, r24
    334c:	8c e6       	ldi	r24, 0x6C	; 108
    334e:	95 e0       	ldi	r25, 0x05	; 5
    3350:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    3354:	8f a1       	ldd	r24, Y+39	; 0x27
    3356:	98 a5       	ldd	r25, Y+40	; 0x28
    3358:	a9 a5       	ldd	r26, Y+41	; 0x29
    335a:	ba a5       	ldd	r27, Y+42	; 0x2a
    335c:	22 e0       	ldi	r18, 0x02	; 2
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	ac 01       	movw	r20, r24
    3362:	bd 01       	movw	r22, r26
    3364:	8c e6       	ldi	r24, 0x6C	; 108
    3366:	95 e0       	ldi	r25, 0x05	; 5
    3368:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <_ZN5Print7printlnEdi>
    336c:	8b a5       	ldd	r24, Y+43	; 0x2b
    336e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3370:	83 5a       	subi	r24, 0xA3	; 163
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	fc 01       	movw	r30, r24
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	ac 01       	movw	r20, r24
    337c:	4f 5f       	subi	r20, 0xFF	; 255
    337e:	5f 4f       	sbci	r21, 0xFF	; 255
    3380:	2b a5       	ldd	r18, Y+43	; 0x2b
    3382:	3c a5       	ldd	r19, Y+44	; 0x2c
    3384:	23 5a       	subi	r18, 0xA3	; 163
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	f9 01       	movw	r30, r18
    338a:	51 83       	std	Z+1, r21	; 0x01
    338c:	40 83       	st	Z, r20
    338e:	9c 01       	movw	r18, r24
    3390:	8b a5       	ldd	r24, Y+43	; 0x2b
    3392:	9c a5       	ldd	r25, Y+44	; 0x2c
    3394:	8a 5a       	subi	r24, 0xAA	; 170
    3396:	9f 4f       	sbci	r25, 0xFF	; 255
    3398:	b9 01       	movw	r22, r18
    339a:	b1 d3       	rcall	.+1890   	; 0x3afe <_ZNSt6vectorIdSaIdEEixEj>
    339c:	9c 01       	movw	r18, r24
    339e:	8f a1       	ldd	r24, Y+39	; 0x27
    33a0:	98 a5       	ldd	r25, Y+40	; 0x28
    33a2:	a9 a5       	ldd	r26, Y+41	; 0x29
    33a4:	ba a5       	ldd	r27, Y+42	; 0x2a
    33a6:	f9 01       	movw	r30, r18
    33a8:	80 83       	st	Z, r24
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	a2 83       	std	Z+2, r26	; 0x02
    33ae:	b3 83       	std	Z+3, r27	; 0x03
    33b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    33b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    33b4:	83 5a       	subi	r24, 0xA3	; 163
    33b6:	9f 4f       	sbci	r25, 0xFF	; 255
    33b8:	fc 01       	movw	r30, r24
    33ba:	20 81       	ld	r18, Z
    33bc:	31 81       	ldd	r19, Z+1	; 0x01
    33be:	8e 81       	ldd	r24, Y+6	; 0x06
    33c0:	9f 81       	ldd	r25, Y+7	; 0x07
    33c2:	28 17       	cp	r18, r24
    33c4:	39 07       	cpc	r19, r25
    33c6:	39 f4       	brne	.+14     	; 0x33d6 <_ZN8PHSensor11CalculatePHEv+0x30e>
    33c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    33ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    33cc:	83 5a       	subi	r24, 0xA3	; 163
    33ce:	9f 4f       	sbci	r25, 0xFF	; 255
    33d0:	fc 01       	movw	r30, r24
    33d2:	11 82       	std	Z+1, r1	; 0x01
    33d4:	10 82       	st	Z, r1
    33d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    33da:	9c 01       	movw	r18, r24
    33dc:	2a 5a       	subi	r18, 0xAA	; 170
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	ce 01       	movw	r24, r28
    33e2:	0e 96       	adiw	r24, 0x0e	; 14
    33e4:	b9 01       	movw	r22, r18
    33e6:	1b d3       	rcall	.+1590   	; 0x3a1e <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 96       	adiw	r24, 0x0e	; 14
    33ec:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8a 87       	std	Y+10, r24	; 0x0a
    33f6:	9b 87       	std	Y+11, r25	; 0x0b
    33f8:	ac 87       	std	Y+12, r26	; 0x0c
    33fa:	bd 87       	std	Y+13, r27	; 0x0d
    33fc:	ce 01       	movw	r24, r28
    33fe:	0e 96       	adiw	r24, 0x0e	; 14
    3400:	67 d9       	rcall	.-3378   	; 0x26d0 <_ZNSt6vectorIdSaIdEED1Ev>
    3402:	8b a5       	ldd	r24, Y+43	; 0x2b
    3404:	9c a5       	ldd	r25, Y+44	; 0x2c
    3406:	9c 01       	movw	r18, r24
    3408:	2d 59       	subi	r18, 0x9D	; 157
    340a:	3f 4f       	sbci	r19, 0xFF	; 255
    340c:	8a 85       	ldd	r24, Y+10	; 0x0a
    340e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3410:	ac 85       	ldd	r26, Y+12	; 0x0c
    3412:	bd 85       	ldd	r27, Y+13	; 0x0d
    3414:	f9 01       	movw	r30, r18
    3416:	80 83       	st	Z, r24
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	a2 83       	std	Z+2, r26	; 0x02
    341c:	b3 83       	std	Z+3, r27	; 0x03
    341e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    342a:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    342e:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    3432:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    3436:	ac 96       	adiw	r28, 0x2c	; 44
    3438:	e6 e0       	ldi	r30, 0x06	; 6
    343a:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

0000343e <_ZN8PHSensor10getPHValueEv>:
    343e:	ac e0       	ldi	r26, 0x0C	; 12
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	e5 e2       	ldi	r30, 0x25	; 37
    3444:	fa e1       	ldi	r31, 0x1A	; 26
    3446:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    344a:	9c 87       	std	Y+12, r25	; 0x0c
    344c:	8b 87       	std	Y+11, r24	; 0x0b
    344e:	80 ef       	ldi	r24, 0xF0	; 240
    3450:	92 e0       	ldi	r25, 0x02	; 2
    3452:	fc 01       	movw	r30, r24
    3454:	80 81       	ld	r24, Z
    3456:	88 23       	and	r24, r24
    3458:	89 f4       	brne	.+34     	; 0x347c <_ZN8PHSensor10getPHValueEv+0x3e>
    345a:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    3466:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    346a:	a0 93 06 03 	sts	0x0306, r26	; 0x800306 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    346e:	b0 93 07 03 	sts	0x0307, r27	; 0x800307 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    3472:	80 ef       	ldi	r24, 0xF0	; 240
    3474:	92 e0       	ldi	r25, 0x02	; 2
    3476:	21 e0       	ldi	r18, 0x01	; 1
    3478:	fc 01       	movw	r30, r24
    347a:	20 83       	st	Z, r18
    347c:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
    3484:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    3488:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    348c:	a0 91 06 03 	lds	r26, 0x0306	; 0x800306 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    3490:	b0 91 07 03 	lds	r27, 0x0307	; 0x800307 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    3494:	79 01       	movw	r14, r18
    3496:	8a 01       	movw	r16, r20
    3498:	e8 1a       	sub	r14, r24
    349a:	f9 0a       	sbc	r15, r25
    349c:	0a 0b       	sbc	r16, r26
    349e:	1b 0b       	sbc	r17, r27
    34a0:	d8 01       	movw	r26, r16
    34a2:	c7 01       	movw	r24, r14
    34a4:	21 e0       	ldi	r18, 0x01	; 1
    34a6:	89 3e       	cpi	r24, 0xE9	; 233
    34a8:	93 40       	sbci	r25, 0x03	; 3
    34aa:	a1 05       	cpc	r26, r1
    34ac:	b1 05       	cpc	r27, r1
    34ae:	08 f4       	brcc	.+2      	; 0x34b2 <_ZN8PHSensor10getPHValueEv+0x74>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	22 23       	and	r18, r18
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <_ZN8PHSensor10getPHValueEv+0x7a>
    34b6:	c6 c0       	rjmp	.+396    	; 0x3644 <_ZN8PHSensor10getPHValueEv+0x206>
    34b8:	88 e2       	ldi	r24, 0x28	; 40
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    34c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    34c4:	8e 5a       	subi	r24, 0xAE	; 174
    34c6:	9f 4f       	sbci	r25, 0xFF	; 255
    34c8:	fc 01       	movw	r30, r24
    34ca:	00 81       	ld	r16, Z
    34cc:	11 81       	ldd	r17, Z+1	; 0x01
    34ce:	98 01       	movw	r18, r16
    34d0:	2f 5f       	subi	r18, 0xFF	; 255
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    34d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    34d8:	8e 5a       	subi	r24, 0xAE	; 174
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	fc 01       	movw	r30, r24
    34de:	31 83       	std	Z+1, r19	; 0x01
    34e0:	20 83       	st	Z, r18
    34e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    34e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    34e6:	fc 01       	movw	r30, r24
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <analogRead>
    34f0:	ac 01       	movw	r20, r24
    34f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    34f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    34f6:	c8 01       	movw	r24, r16
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	82 0f       	add	r24, r18
    3500:	93 1f       	adc	r25, r19
    3502:	fc 01       	movw	r30, r24
    3504:	51 83       	std	Z+1, r21	; 0x01
    3506:	40 83       	st	Z, r20
    3508:	8b 85       	ldd	r24, Y+11	; 0x0b
    350a:	9c 85       	ldd	r25, Y+12	; 0x0c
    350c:	8e 5a       	subi	r24, 0xAE	; 174
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	fc 01       	movw	r30, r24
    3512:	20 81       	ld	r18, Z
    3514:	31 81       	ldd	r19, Z+1	; 0x01
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	28 17       	cp	r18, r24
    351c:	39 07       	cpc	r19, r25
    351e:	39 f4       	brne	.+14     	; 0x352e <_ZN8PHSensor10getPHValueEv+0xf0>
    3520:	8b 85       	ldd	r24, Y+11	; 0x0b
    3522:	9c 85       	ldd	r25, Y+12	; 0x0c
    3524:	8e 5a       	subi	r24, 0xAE	; 174
    3526:	9f 4f       	sbci	r25, 0xFF	; 255
    3528:	fc 01       	movw	r30, r24
    352a:	11 82       	std	Z+1, r1	; 0x01
    352c:	10 82       	st	Z, r1
    352e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3530:	9c 85       	ldd	r25, Y+12	; 0x0c
    3532:	02 96       	adiw	r24, 0x02	; 2
    3534:	2d 81       	ldd	r18, Y+5	; 0x05
    3536:	3e 81       	ldd	r19, Y+6	; 0x06
    3538:	b9 01       	movw	r22, r18
    353a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN7MathExt16CalculateAverageEPii>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8f 83       	std	Y+7, r24	; 0x07
    3544:	98 87       	std	Y+8, r25	; 0x08
    3546:	a9 87       	std	Y+9, r26	; 0x09
    3548:	ba 87       	std	Y+10, r27	; 0x0a
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 ea       	ldi	r20, 0xA0	; 160
    3550:	50 e4       	ldi	r21, 0x40	; 64
    3552:	6f 81       	ldd	r22, Y+7	; 0x07
    3554:	78 85       	ldd	r23, Y+8	; 0x08
    3556:	89 85       	ldd	r24, Y+9	; 0x09
    3558:	9a 85       	ldd	r25, Y+10	; 0x0a
    355a:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	54 e4       	ldi	r21, 0x44	; 68
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 94 28 	call	0x5128	; 0x5128 <__divsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	2b 85       	ldd	r18, Y+11	; 0x0b
    3578:	3c 85       	ldd	r19, Y+12	; 0x0c
    357a:	29 59       	subi	r18, 0x99	; 153
    357c:	3f 4f       	sbci	r19, 0xFF	; 255
    357e:	f9 01       	movw	r30, r18
    3580:	80 83       	st	Z, r24
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	a2 83       	std	Z+2, r26	; 0x02
    3586:	b3 83       	std	Z+3, r27	; 0x03
    3588:	8b 85       	ldd	r24, Y+11	; 0x0b
    358a:	9c 85       	ldd	r25, Y+12	; 0x0c
    358c:	89 59       	subi	r24, 0x99	; 153
    358e:	9f 4f       	sbci	r25, 0xFF	; 255
    3590:	fc 01       	movw	r30, r24
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	a2 81       	ldd	r26, Z+2	; 0x02
    3598:	b3 81       	ldd	r27, Z+3	; 0x03
    359a:	9c 01       	movw	r18, r24
    359c:	ad 01       	movw	r20, r26
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	80 e2       	ldi	r24, 0x20	; 32
    35a4:	90 e4       	ldi	r25, 0x40	; 64
    35a6:	0e 94 2b 28 	call	0x5056	; 0x5056 <__subsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	2c ee       	ldi	r18, 0xEC	; 236
    35b0:	31 e5       	ldi	r19, 0x51	; 81
    35b2:	48 e3       	ldi	r20, 0x38	; 56
    35b4:	5e e3       	ldi	r21, 0x3E	; 62
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 94 28 	call	0x5128	; 0x5128 <__divsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 ee       	ldi	r20, 0xE0	; 224
    35c8:	50 e4       	ldi	r21, 0x40	; 64
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 2c 28 	call	0x5058	; 0x5058 <__addsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	7c 01       	movw	r14, r24
    35d8:	8d 01       	movw	r16, r26
    35da:	8b 85       	ldd	r24, Y+11	; 0x0b
    35dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    35de:	8f 55       	subi	r24, 0x5F	; 95
    35e0:	9f 4f       	sbci	r25, 0xFF	; 255
    35e2:	fc 01       	movw	r30, r24
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	a2 81       	ldd	r26, Z+2	; 0x02
    35ea:	b3 81       	ldd	r27, Z+3	; 0x03
    35ec:	9c 01       	movw	r18, r24
    35ee:	ad 01       	movw	r20, r26
    35f0:	c8 01       	movw	r24, r16
    35f2:	b7 01       	movw	r22, r14
    35f4:	0e 94 2c 28 	call	0x5058	; 0x5058 <__addsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	ab 83       	std	Y+3, r26	; 0x03
    3602:	bc 83       	std	Y+4, r27	; 0x04
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	a9 01       	movw	r20, r18
    360a:	69 81       	ldd	r22, Y+1	; 0x01
    360c:	7a 81       	ldd	r23, Y+2	; 0x02
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	0e 94 90 28 	call	0x5120	; 0x5120 <__cmpsf2>
    3616:	88 23       	and	r24, r24
    3618:	24 f4       	brge	.+8      	; 0x3622 <_ZN8PHSensor10getPHValueEv+0x1e4>
    361a:	19 82       	std	Y+1, r1	; 0x01
    361c:	1a 82       	std	Y+2, r1	; 0x02
    361e:	1b 82       	std	Y+3, r1	; 0x03
    3620:	1c 82       	std	Y+4, r1	; 0x04
    3622:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    362e:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    3632:	a0 93 06 03 	sts	0x0306, r26	; 0x800306 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    3636:	b0 93 07 03 	sts	0x0307, r27	; 0x800307 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	ab 81       	ldd	r26, Y+3	; 0x03
    3640:	bc 81       	ldd	r27, Y+4	; 0x04
    3642:	09 c0       	rjmp	.+18     	; 0x3656 <_ZN8PHSensor10getPHValueEv+0x218>
    3644:	8b 85       	ldd	r24, Y+11	; 0x0b
    3646:	9c 85       	ldd	r25, Y+12	; 0x0c
    3648:	81 5a       	subi	r24, 0xA1	; 161
    364a:	9f 4f       	sbci	r25, 0xFF	; 255
    364c:	fc 01       	movw	r30, r24
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	a2 81       	ldd	r26, Z+2	; 0x02
    3654:	b3 81       	ldd	r27, Z+3	; 0x03
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	2c 96       	adiw	r28, 0x0c	; 12
    365c:	e6 e0       	ldi	r30, 0x06	; 6
    365e:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00003662 <_ZN15StringSumHelperD1Ev>:
    3662:	a2 e0       	ldi	r26, 0x02	; 2
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	e7 e3       	ldi	r30, 0x37	; 55
    3668:	fb e1       	ldi	r31, 0x1B	; 27
    366a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    367a:	22 96       	adiw	r28, 0x02	; 2
    367c:	e2 e0       	ldi	r30, 0x02	; 2
    367e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003682 <_ZN8PHSensor12PrintPHToLCDEv>:
    3682:	aa e1       	ldi	r26, 0x1A	; 26
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e7 e4       	ldi	r30, 0x47	; 71
    3688:	fb e1       	ldi	r31, 0x1B	; 27
    368a:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    368e:	9a 8f       	std	Y+26, r25	; 0x1a
    3690:	89 8f       	std	Y+25, r24	; 0x19
    3692:	89 8d       	ldd	r24, Y+25	; 0x19
    3694:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3696:	c2 dc       	rcall	.-1660   	; 0x301c <_ZN8PHSensor5GetPHEv>
    3698:	88 ef       	ldi	r24, 0xF8	; 248
    369a:	92 e0       	ldi	r25, 0x02	; 2
    369c:	fc 01       	movw	r30, r24
    369e:	80 81       	ld	r24, Z
    36a0:	88 23       	and	r24, r24
    36a2:	89 f4       	brne	.+34     	; 0x36c6 <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    36a4:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    36b0:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    36b4:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    36b8:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    36bc:	88 ef       	ldi	r24, 0xF8	; 248
    36be:	92 e0       	ldi	r25, 0x02	; 2
    36c0:	21 e0       	ldi	r18, 0x01	; 1
    36c2:	fc 01       	movw	r30, r24
    36c4:	20 83       	st	Z, r18
    36c6:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    36ca:	9b 01       	movw	r18, r22
    36cc:	ac 01       	movw	r20, r24
    36ce:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    36d2:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    36d6:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    36da:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    36de:	28 1b       	sub	r18, r24
    36e0:	39 0b       	sbc	r19, r25
    36e2:	4a 0b       	sbc	r20, r26
    36e4:	5b 0b       	sbc	r21, r27
    36e6:	89 8d       	ldd	r24, Y+25	; 0x19
    36e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36ea:	8c 5a       	subi	r24, 0xAC	; 172
    36ec:	9f 4f       	sbci	r25, 0xFF	; 255
    36ee:	fc 01       	movw	r30, r24
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	80 57       	subi	r24, 0x70	; 112
    36f6:	9e 4f       	sbci	r25, 0xFE	; 254
    36f8:	09 2e       	mov	r0, r25
    36fa:	00 0c       	add	r0, r0
    36fc:	aa 0b       	sbc	r26, r26
    36fe:	bb 0b       	sbc	r27, r27
    3700:	61 e0       	ldi	r22, 0x01	; 1
    3702:	82 17       	cp	r24, r18
    3704:	93 07       	cpc	r25, r19
    3706:	a4 07       	cpc	r26, r20
    3708:	b5 07       	cpc	r27, r21
    370a:	08 f0       	brcs	.+2      	; 0x370e <_ZN8PHSensor12PrintPHToLCDEv+0x8c>
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	66 23       	and	r22, r22
    3710:	09 f4       	brne	.+2      	; 0x3714 <_ZN8PHSensor12PrintPHToLCDEv+0x92>
    3712:	74 c0       	rjmp	.+232    	; 0x37fc <_ZN8PHSensor12PrintPHToLCDEv+0x17a>
    3714:	89 8d       	ldd	r24, Y+25	; 0x19
    3716:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3718:	85 59       	subi	r24, 0x95	; 149
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	fc 01       	movw	r30, r24
    371e:	80 81       	ld	r24, Z
    3720:	88 23       	and	r24, r24
    3722:	09 f4       	brne	.+2      	; 0x3726 <_ZN8PHSensor12PrintPHToLCDEv+0xa4>
    3724:	5f c0       	rjmp	.+190    	; 0x37e4 <_ZN8PHSensor12PrintPHToLCDEv+0x162>
    3726:	ce 01       	movw	r24, r28
    3728:	0d 96       	adiw	r24, 0x0d	; 13
    372a:	6f e1       	ldi	r22, 0x1F	; 31
    372c:	71 e0       	ldi	r23, 0x01	; 1
    372e:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    3732:	89 8d       	ldd	r24, Y+25	; 0x19
    3734:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3736:	82 59       	subi	r24, 0x92	; 146
    3738:	9f 4f       	sbci	r25, 0xFF	; 255
    373a:	fc 01       	movw	r30, r24
    373c:	80 81       	ld	r24, Z
    373e:	88 23       	and	r24, r24
    3740:	31 f0       	breq	.+12     	; 0x374e <_ZN8PHSensor12PrintPHToLCDEv+0xcc>
    3742:	ce 01       	movw	r24, r28
    3744:	0d 96       	adiw	r24, 0x0d	; 13
    3746:	60 e2       	ldi	r22, 0x20	; 32
    3748:	71 e0       	ldi	r23, 0x01	; 1
    374a:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    374e:	89 8d       	ldd	r24, Y+25	; 0x19
    3750:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3752:	8c 01       	movw	r16, r24
    3754:	0b 56       	subi	r16, 0x6B	; 107
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	89 8d       	ldd	r24, Y+25	; 0x19
    375a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    375c:	7c 01       	movw	r14, r24
    375e:	fb e9       	ldi	r31, 0x9B	; 155
    3760:	ef 0e       	add	r14, r31
    3762:	f1 1c       	adc	r15, r1
    3764:	ce 01       	movw	r24, r28
    3766:	07 96       	adiw	r24, 0x07	; 7
    3768:	62 e2       	ldi	r22, 0x22	; 34
    376a:	71 e0       	ldi	r23, 0x01	; 1
    376c:	95 d9       	rcall	.-3286   	; 0x2a98 <_ZN15StringSumHelperC1EPKc>
    376e:	ce 01       	movw	r24, r28
    3770:	07 96       	adiw	r24, 0x07	; 7
    3772:	b7 01       	movw	r22, r14
    3774:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3778:	67 e2       	ldi	r22, 0x27	; 39
    377a:	71 e0       	ldi	r23, 0x01	; 1
    377c:	0e 94 bc 31 	call	0x6378	; 0x6378 <_ZplRK15StringSumHelperPKc>
    3780:	b8 01       	movw	r22, r16
    3782:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3786:	9c 01       	movw	r18, r24
    3788:	ce 01       	movw	r24, r28
    378a:	0d 96       	adiw	r24, 0x0d	; 13
    378c:	bc 01       	movw	r22, r24
    378e:	c9 01       	movw	r24, r18
    3790:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3794:	9c 01       	movw	r18, r24
    3796:	ce 01       	movw	r24, r28
    3798:	43 96       	adiw	r24, 0x13	; 19
    379a:	b9 01       	movw	r22, r18
    379c:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    37a0:	ce 01       	movw	r24, r28
    37a2:	07 96       	adiw	r24, 0x07	; 7
    37a4:	5e df       	rcall	.-324    	; 0x3662 <_ZN15StringSumHelperD1Ev>
    37a6:	ce 01       	movw	r24, r28
    37a8:	43 96       	adiw	r24, 0x13	; 19
    37aa:	bc 01       	movw	r22, r24
    37ac:	ce 01       	movw	r24, r28
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    37b4:	89 8d       	ldd	r24, Y+25	; 0x19
    37b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37b8:	8f 58       	subi	r24, 0x8F	; 143
    37ba:	9f 4f       	sbci	r25, 0xFF	; 255
    37bc:	9e 01       	movw	r18, r28
    37be:	2f 5f       	subi	r18, 0xFF	; 255
    37c0:	3f 4f       	sbci	r19, 0xFF	; 255
    37c2:	a9 01       	movw	r20, r18
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN7LCDBase9PrintLineEs6String>
    37cc:	ce 01       	movw	r24, r28
    37ce:	01 96       	adiw	r24, 0x01	; 1
    37d0:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    37d4:	ce 01       	movw	r24, r28
    37d6:	43 96       	adiw	r24, 0x13	; 19
    37d8:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    37dc:	ce 01       	movw	r24, r28
    37de:	0d 96       	adiw	r24, 0x0d	; 13
    37e0:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    37e4:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    37f0:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    37f4:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    37f8:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    37fc:	6a 96       	adiw	r28, 0x1a	; 26
    37fe:	e6 e0       	ldi	r30, 0x06	; 6
    3800:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00003804 <_ZN8PHSensor6TurnOnEv>:
    3804:	a2 e0       	ldi	r26, 0x02	; 2
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	e8 e0       	ldi	r30, 0x08	; 8
    380a:	fc e1       	ldi	r31, 0x1C	; 28
    380c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3810:	9a 83       	std	Y+2, r25	; 0x02
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	9a 81       	ldd	r25, Y+2	; 0x02
    3818:	82 59       	subi	r24, 0x92	; 146
    381a:	9f 4f       	sbci	r25, 0xFF	; 255
    381c:	21 e0       	ldi	r18, 0x01	; 1
    381e:	fc 01       	movw	r30, r24
    3820:	20 83       	st	Z, r18
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	84 59       	subi	r24, 0x94	; 148
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	fc 01       	movw	r30, r24
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	61 e0       	ldi	r22, 0x01	; 1
    3832:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    3836:	22 96       	adiw	r28, 0x02	; 2
    3838:	e2 e0       	ldi	r30, 0x02	; 2
    383a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000383e <_ZN8PHSensor7TurnOffEv>:
    383e:	a2 e0       	ldi	r26, 0x02	; 2
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	e5 e2       	ldi	r30, 0x25	; 37
    3844:	fc e1       	ldi	r31, 0x1C	; 28
    3846:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	9a 81       	ldd	r25, Y+2	; 0x02
    3852:	82 59       	subi	r24, 0x92	; 146
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	fc 01       	movw	r30, r24
    3858:	10 82       	st	Z, r1
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	84 59       	subi	r24, 0x94	; 148
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	fc 01       	movw	r30, r24
    3864:	80 81       	ld	r24, Z
    3866:	91 81       	ldd	r25, Z+1	; 0x01
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    386e:	68 ee       	ldi	r22, 0xE8	; 232
    3870:	73 e0       	ldi	r23, 0x03	; 3
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <delay>
    387a:	22 96       	adiw	r28, 0x02	; 2
    387c:	e2 e0       	ldi	r30, 0x02	; 2
    387e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003882 <_ZN8PHSensor9isOutlierEdd>:
    3882:	a1 e1       	ldi	r26, 0x11	; 17
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	e7 e4       	ldi	r30, 0x47	; 71
    3888:	fc e1       	ldi	r31, 0x1C	; 28
    388a:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    388e:	99 87       	std	Y+9, r25	; 0x09
    3890:	88 87       	std	Y+8, r24	; 0x08
    3892:	4a 87       	std	Y+10, r20	; 0x0a
    3894:	5b 87       	std	Y+11, r21	; 0x0b
    3896:	6c 87       	std	Y+12, r22	; 0x0c
    3898:	7d 87       	std	Y+13, r23	; 0x0d
    389a:	0e 87       	std	Y+14, r16	; 0x0e
    389c:	1f 87       	std	Y+15, r17	; 0x0f
    389e:	28 8b       	std	Y+16, r18	; 0x10
    38a0:	39 8b       	std	Y+17, r19	; 0x11
    38a2:	8d ec       	ldi	r24, 0xCD	; 205
    38a4:	9c ec       	ldi	r25, 0xCC	; 204
    38a6:	ac e4       	ldi	r26, 0x4C	; 76
    38a8:	be e3       	ldi	r27, 0x3E	; 62
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	ab 83       	std	Y+3, r26	; 0x03
    38b0:	bc 83       	std	Y+4, r27	; 0x04
    38b2:	29 81       	ldd	r18, Y+1	; 0x01
    38b4:	3a 81       	ldd	r19, Y+2	; 0x02
    38b6:	4b 81       	ldd	r20, Y+3	; 0x03
    38b8:	5c 81       	ldd	r21, Y+4	; 0x04
    38ba:	6e 85       	ldd	r22, Y+14	; 0x0e
    38bc:	7f 85       	ldd	r23, Y+15	; 0x0f
    38be:	88 89       	ldd	r24, Y+16	; 0x10
    38c0:	99 89       	ldd	r25, Y+17	; 0x11
    38c2:	0e 94 2b 28 	call	0x5056	; 0x5056 <__subsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	11 e0       	ldi	r17, 0x01	; 1
    38cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    38ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    38d0:	4c 85       	ldd	r20, Y+12	; 0x0c
    38d2:	5d 85       	ldd	r21, Y+13	; 0x0d
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	0e 94 df 29 	call	0x53be	; 0x53be <__gesf2>
    38dc:	18 16       	cp	r1, r24
    38de:	0c f0       	brlt	.+2      	; 0x38e2 <_ZN8PHSensor9isOutlierEdd+0x60>
    38e0:	10 e0       	ldi	r17, 0x00	; 0
    38e2:	1d 83       	std	Y+5, r17	; 0x05
    38e4:	29 81       	ldd	r18, Y+1	; 0x01
    38e6:	3a 81       	ldd	r19, Y+2	; 0x02
    38e8:	4b 81       	ldd	r20, Y+3	; 0x03
    38ea:	5c 81       	ldd	r21, Y+4	; 0x04
    38ec:	6e 85       	ldd	r22, Y+14	; 0x0e
    38ee:	7f 85       	ldd	r23, Y+15	; 0x0f
    38f0:	88 89       	ldd	r24, Y+16	; 0x10
    38f2:	99 89       	ldd	r25, Y+17	; 0x11
    38f4:	0e 94 2c 28 	call	0x5058	; 0x5058 <__addsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	11 e0       	ldi	r17, 0x01	; 1
    38fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3900:	3b 85       	ldd	r19, Y+11	; 0x0b
    3902:	4c 85       	ldd	r20, Y+12	; 0x0c
    3904:	5d 85       	ldd	r21, Y+13	; 0x0d
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 90 28 	call	0x5120	; 0x5120 <__cmpsf2>
    390e:	88 23       	and	r24, r24
    3910:	0c f0       	brlt	.+2      	; 0x3914 <_ZN8PHSensor9isOutlierEdd+0x92>
    3912:	10 e0       	ldi	r17, 0x00	; 0
    3914:	1e 83       	std	Y+6, r17	; 0x06
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	88 23       	and	r24, r24
    391a:	19 f4       	brne	.+6      	; 0x3922 <_ZN8PHSensor9isOutlierEdd+0xa0>
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	88 23       	and	r24, r24
    3920:	11 f0       	breq	.+4      	; 0x3926 <_ZN8PHSensor9isOutlierEdd+0xa4>
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	01 c0       	rjmp	.+2      	; 0x3928 <_ZN8PHSensor9isOutlierEdd+0xa6>
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	8f 83       	std	Y+7, r24	; 0x07
    392a:	8f 81       	ldd	r24, Y+7	; 0x07
    392c:	61 96       	adiw	r28, 0x11	; 17
    392e:	e4 e0       	ldi	r30, 0x04	; 4
    3930:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

00003934 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
    3934:	a4 e0       	ldi	r26, 0x04	; 4
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	e0 ea       	ldi	r30, 0xA0	; 160
    393a:	fc e1       	ldi	r31, 0x1C	; 28
    393c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3940:	9a 83       	std	Y+2, r25	; 0x02
    3942:	89 83       	std	Y+1, r24	; 0x01
    3944:	7c 83       	std	Y+4, r23	; 0x04
    3946:	6b 83       	std	Y+3, r22	; 0x03
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	9a 81       	ldd	r25, Y+2	; 0x02
    394c:	fc 01       	movw	r30, r24
    394e:	11 82       	std	Z+1, r1	; 0x01
    3950:	10 82       	st	Z, r1
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	28 e0       	ldi	r18, 0x08	; 8
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	fc 01       	movw	r30, r24
    395c:	33 83       	std	Z+3, r19	; 0x03
    395e:	22 83       	std	Z+2, r18	; 0x02
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	fc 01       	movw	r30, r24
    3966:	15 82       	std	Z+5, r1	; 0x05
    3968:	14 82       	std	Z+4, r1	; 0x04
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	fc 01       	movw	r30, r24
    3970:	22 81       	ldd	r18, Z+2	; 0x02
    3972:	33 81       	ldd	r19, Z+3	; 0x03
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	9a 81       	ldd	r25, Y+2	; 0x02
    3978:	06 96       	adiw	r24, 0x06	; 6
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	b9 01       	movw	r22, r18
    3980:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZNSaIdE8allocateEjPKv>
    3984:	9c 01       	movw	r18, r24
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	fc 01       	movw	r30, r24
    398c:	31 83       	std	Z+1, r19	; 0x01
    398e:	20 83       	st	Z, r18
    3990:	24 96       	adiw	r28, 0x04	; 4
    3992:	e2 e0       	ldi	r30, 0x02	; 2
    3994:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003998 <_ZN6EEWrapIfEcvKfEv>:
    3998:	a2 e0       	ldi	r26, 0x02	; 2
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e2 ed       	ldi	r30, 0xD2	; 210
    399e:	fc e1       	ldi	r31, 0x1C	; 28
    39a0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	c3 d0       	rcall	.+390    	; 0x3b34 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	22 96       	adiw	r28, 0x02	; 2
    39b8:	e2 e0       	ldi	r30, 0x02	; 2
    39ba:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000039be <_ZN6EEWrapIfEaSERKf>:
    39be:	a4 e0       	ldi	r26, 0x04	; 4
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	e5 ee       	ldi	r30, 0xE5	; 229
    39c4:	fc e1       	ldi	r31, 0x1C	; 28
    39c6:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	7c 83       	std	Y+4, r23	; 0x04
    39d0:	6b 83       	std	Y+3, r22	; 0x03
    39d2:	2b 81       	ldd	r18, Y+3	; 0x03
    39d4:	3c 81       	ldd	r19, Y+4	; 0x04
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	b9 01       	movw	r22, r18
    39dc:	cb d0       	rcall	.+406    	; 0x3b74 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    39de:	24 96       	adiw	r28, 0x04	; 4
    39e0:	e2 e0       	ldi	r30, 0x02	; 2
    39e2:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000039e6 <_ZNSt6vectorIdSaIdEE9push_backERKd>:
    39e6:	a4 e0       	ldi	r26, 0x04	; 4
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e9 ef       	ldi	r30, 0xF9	; 249
    39ec:	fc e1       	ldi	r31, 0x1C	; 28
    39ee:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    39f2:	9a 83       	std	Y+2, r25	; 0x02
    39f4:	89 83       	std	Y+1, r24	; 0x01
    39f6:	7c 83       	std	Y+4, r23	; 0x04
    39f8:	6b 83       	std	Y+3, r22	; 0x03
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	9a 81       	ldd	r25, Y+2	; 0x02
    39fe:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3a02:	9c 01       	movw	r18, r24
    3a04:	2f 5f       	subi	r18, 0xFF	; 255
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	4b 81       	ldd	r20, Y+3	; 0x03
    3a0a:	5c 81       	ldd	r21, Y+4	; 0x04
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a10:	b9 01       	movw	r22, r18
    3a12:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
    3a16:	24 96       	adiw	r28, 0x04	; 4
    3a18:	e2 e0       	ldi	r30, 0x02	; 2
    3a1a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003a1e <_ZNSt6vectorIdSaIdEEC1ERKS1_>:
    3a1e:	a6 e0       	ldi	r26, 0x06	; 6
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e5 e1       	ldi	r30, 0x15	; 21
    3a24:	fd e1       	ldi	r31, 0x1D	; 29
    3a26:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3a2a:	9c 83       	std	Y+4, r25	; 0x04
    3a2c:	8b 83       	std	Y+3, r24	; 0x03
    3a2e:	7e 83       	std	Y+6, r23	; 0x06
    3a30:	6d 83       	std	Y+5, r22	; 0x05
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	06 96       	adiw	r24, 0x06	; 6
    3a38:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZNSaIdEC1Ev>
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	fc 01       	movw	r30, r24
    3a42:	24 81       	ldd	r18, Z+4	; 0x04
    3a44:	35 81       	ldd	r19, Z+5	; 0x05
    3a46:	8b 81       	ldd	r24, Y+3	; 0x03
    3a48:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	35 83       	std	Z+5, r19	; 0x05
    3a4e:	24 83       	std	Z+4, r18	; 0x04
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	9c 81       	ldd	r25, Y+4	; 0x04
    3a54:	fc 01       	movw	r30, r24
    3a56:	84 81       	ldd	r24, Z+4	; 0x04
    3a58:	95 81       	ldd	r25, Z+5	; 0x05
    3a5a:	9c 01       	movw	r18, r24
    3a5c:	28 5f       	subi	r18, 0xF8	; 248
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	fc 01       	movw	r30, r24
    3a66:	33 83       	std	Z+3, r19	; 0x03
    3a68:	22 83       	std	Z+2, r18	; 0x02
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	fc 01       	movw	r30, r24
    3a70:	22 81       	ldd	r18, Z+2	; 0x02
    3a72:	33 81       	ldd	r19, Z+3	; 0x03
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	9c 81       	ldd	r25, Y+4	; 0x04
    3a78:	06 96       	adiw	r24, 0x06	; 6
    3a7a:	40 e0       	ldi	r20, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	b9 01       	movw	r22, r18
    3a80:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZNSaIdE8allocateEjPKv>
    3a84:	9c 01       	movw	r18, r24
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	31 83       	std	Z+1, r19	; 0x01
    3a8e:	20 83       	st	Z, r18
    3a90:	1a 82       	std	Y+2, r1	; 0x02
    3a92:	19 82       	std	Y+1, r1	; 0x01
    3a94:	26 c0       	rjmp	.+76     	; 0x3ae2 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0xc4>
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	20 81       	ld	r18, Z
    3a9e:	31 81       	ldd	r19, Z+1	; 0x01
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	88 0f       	add	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	a9 01       	movw	r20, r18
    3aae:	48 0f       	add	r20, r24
    3ab0:	59 1f       	adc	r21, r25
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	20 81       	ld	r18, Z
    3aba:	31 81       	ldd	r19, Z+1	; 0x01
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	28 0f       	add	r18, r24
    3aca:	39 1f       	adc	r19, r25
    3acc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ace:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad0:	06 96       	adiw	r24, 0x06	; 6
    3ad2:	b9 01       	movw	r22, r18
    3ad4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZNSaIdE9constructEPdRKd>
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	9a 81       	ldd	r25, Y+2	; 0x02
    3adc:	01 96       	adiw	r24, 0x01	; 1
    3ade:	9a 83       	std	Y+2, r25	; 0x02
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	24 81       	ldd	r18, Z+4	; 0x04
    3aea:	35 81       	ldd	r19, Z+5	; 0x05
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	82 17       	cp	r24, r18
    3af2:	93 07       	cpc	r25, r19
    3af4:	80 f2       	brcs	.-96     	; 0x3a96 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0x78>
    3af6:	26 96       	adiw	r28, 0x06	; 6
    3af8:	e2 e0       	ldi	r30, 0x02	; 2
    3afa:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003afe <_ZNSt6vectorIdSaIdEEixEj>:
    3afe:	a4 e0       	ldi	r26, 0x04	; 4
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	e5 e8       	ldi	r30, 0x85	; 133
    3b04:	fd e1       	ldi	r31, 0x1D	; 29
    3b06:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	7c 83       	std	Y+4, r23	; 0x04
    3b10:	6b 83       	std	Y+3, r22	; 0x03
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	9a 81       	ldd	r25, Y+2	; 0x02
    3b16:	fc 01       	movw	r30, r24
    3b18:	20 81       	ld	r18, Z
    3b1a:	31 81       	ldd	r19, Z+1	; 0x01
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b20:	88 0f       	add	r24, r24
    3b22:	99 1f       	adc	r25, r25
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	24 96       	adiw	r28, 0x04	; 4
    3b2e:	e2 e0       	ldi	r30, 0x02	; 2
    3b30:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003b34 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:
    3b34:	a6 e0       	ldi	r26, 0x06	; 6
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	e0 ea       	ldi	r30, 0xA0	; 160
    3b3a:	fd e1       	ldi	r31, 0x1D	; 29
    3b3c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3b40:	9e 83       	std	Y+6, r25	; 0x06
    3b42:	8d 83       	std	Y+5, r24	; 0x05
    3b44:	8d 81       	ldd	r24, Y+5	; 0x05
    3b46:	9e 81       	ldd	r25, Y+6	; 0x06
    3b48:	33 d0       	rcall	.+102    	; 0x3bb0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	83 e0       	ldi	r24, 0x03	; 3
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	9e 01       	movw	r18, r28
    3b52:	2f 5f       	subi	r18, 0xFF	; 255
    3b54:	3f 4f       	sbci	r19, 0xFF	; 255
    3b56:	82 0f       	add	r24, r18
    3b58:	93 1f       	adc	r25, r19
    3b5a:	44 e0       	ldi	r20, 0x04	; 4
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	30 d8       	rcall	.-4000   	; 0x2bc0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	ab 81       	ldd	r26, Y+3	; 0x03
    3b66:	bc 81       	ldd	r27, Y+4	; 0x04
    3b68:	bc 01       	movw	r22, r24
    3b6a:	cd 01       	movw	r24, r26
    3b6c:	26 96       	adiw	r28, 0x06	; 6
    3b6e:	e2 e0       	ldi	r30, 0x02	; 2
    3b70:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003b74 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:
    3b74:	a4 e0       	ldi	r26, 0x04	; 4
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	e0 ec       	ldi	r30, 0xC0	; 192
    3b7a:	fd e1       	ldi	r31, 0x1D	; 29
    3b7c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3b80:	9a 83       	std	Y+2, r25	; 0x02
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	7c 83       	std	Y+4, r23	; 0x04
    3b86:	6b 83       	std	Y+3, r22	; 0x03
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	11 d0       	rcall	.+34     	; 0x3bb0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3b8e:	bc 01       	movw	r22, r24
    3b90:	83 e0       	ldi	r24, 0x03	; 3
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	2b 81       	ldd	r18, Y+3	; 0x03
    3b96:	3c 81       	ldd	r19, Y+4	; 0x04
    3b98:	82 0f       	add	r24, r18
    3b9a:	93 1f       	adc	r25, r19
    3b9c:	44 e0       	ldi	r20, 0x04	; 4
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	46 d8       	rcall	.-3956   	; 0x2c2e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	04 d0       	rcall	.+8      	; 0x3bb0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3ba8:	24 96       	adiw	r28, 0x04	; 4
    3baa:	e2 e0       	ldi	r30, 0x02	; 2
    3bac:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003bb0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:

        D &EEWrite( const T& v ){
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return self();
        }
        protected: STATIC_ACCESS
    3bb0:	a2 e0       	ldi	r26, 0x02	; 2
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	ee ed       	ldi	r30, 0xDE	; 222
    3bb6:	fd e1       	ldi	r31, 0x1D	; 29
    3bb8:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3bbc:	9a 83       	std	Y+2, r25	; 0x02
    3bbe:	89 83       	std	Y+1, r24	; 0x01
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	22 96       	adiw	r28, 0x02	; 2
    3bc6:	e2 e0       	ldi	r30, 0x02	; 2
    3bc8:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003bcc <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    3bcc:	ab e0       	ldi	r26, 0x0B	; 11
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	ec ee       	ldi	r30, 0xEC	; 236
    3bd2:	fd e1       	ldi	r31, 0x1D	; 29
    3bd4:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	89 83       	std	Y+1, r24	; 0x01
    3bdc:	7c 83       	std	Y+4, r23	; 0x04
    3bde:	6b 83       	std	Y+3, r22	; 0x03
    3be0:	5e 83       	std	Y+6, r21	; 0x06
    3be2:	4d 83       	std	Y+5, r20	; 0x05
    3be4:	2f 83       	std	Y+7, r18	; 0x07
    3be6:	19 87       	std	Y+9, r17	; 0x09
    3be8:	08 87       	std	Y+8, r16	; 0x08
    3bea:	fb 86       	std	Y+11, r15	; 0x0b
    3bec:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	31 83       	std	Z+1, r19	; 0x01
    3bfa:	20 83       	st	Z, r18
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	8e 5a       	subi	r24, 0xAE	; 174
    3c02:	9f 4f       	sbci	r25, 0xFF	; 255
    3c04:	fc 01       	movw	r30, r24
    3c06:	11 82       	std	Z+1, r1	; 0x01
    3c08:	10 82       	st	Z, r1
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	8c 5a       	subi	r24, 0xAC	; 172
    3c10:	9f 4f       	sbci	r25, 0xFF	; 255
    3c12:	2d 81       	ldd	r18, Y+5	; 0x05
    3c14:	3e 81       	ldd	r19, Y+6	; 0x06
    3c16:	fc 01       	movw	r30, r24
    3c18:	31 83       	std	Z+1, r19	; 0x01
    3c1a:	20 83       	st	Z, r18
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	8e 59       	subi	r24, 0x9E	; 158
    3c22:	9f 4f       	sbci	r25, 0xFF	; 255
    3c24:	2f 81       	ldd	r18, Y+7	; 0x07
    3c26:	fc 01       	movw	r30, r24
    3c28:	20 83       	st	Z, r18
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	8d 59       	subi	r24, 0x9D	; 157
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c34:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c36:	fc 01       	movw	r30, r24
    3c38:	31 83       	std	Z+1, r19	; 0x01
    3c3a:	20 83       	st	Z, r18
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c40:	8a 59       	subi	r24, 0x9A	; 154
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	fc 01       	movw	r30, r24
    3c46:	11 82       	std	Z+1, r1	; 0x01
    3c48:	10 82       	st	Z, r1
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4e:	88 59       	subi	r24, 0x98	; 152
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	28 85       	ldd	r18, Y+8	; 0x08
    3c54:	39 85       	ldd	r19, Y+9	; 0x09
    3c56:	b9 01       	movw	r22, r18
    3c58:	b9 d8       	rcall	.-3726   	; 0x2dcc <_ZN7LCDBaseC1ERKS_>
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5e:	84 57       	subi	r24, 0x74	; 116
    3c60:	9f 4f       	sbci	r25, 0xFF	; 255
    3c62:	6a e2       	ldi	r22, 0x2A	; 42
    3c64:	71 e0       	ldi	r23, 0x01	; 1
    3c66:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6e:	8e 56       	subi	r24, 0x6E	; 110
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	6a e2       	ldi	r22, 0x2A	; 42
    3c74:	71 e0       	ldi	r23, 0x01	; 1
    3c76:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7e:	88 56       	subi	r24, 0x68	; 104
    3c80:	9f 4f       	sbci	r25, 0xFF	; 255
    3c82:	2a eb       	ldi	r18, 0xBA	; 186
    3c84:	34 e0       	ldi	r19, 0x04	; 4
    3c86:	fc 01       	movw	r30, r24
    3c88:	31 83       	std	Z+1, r19	; 0x01
    3c8a:	20 83       	st	Z, r18
    init();
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	04 d0       	rcall	.+8      	; 0x3c9a <_ZN9TDSSensor4initEv>
}
    3c92:	2b 96       	adiw	r28, 0x0b	; 11
    3c94:	e6 e0       	ldi	r30, 0x06	; 6
    3c96:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00003c9a <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    3c9a:	a6 e0       	ldi	r26, 0x06	; 6
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	e3 e5       	ldi	r30, 0x53	; 83
    3ca0:	fe e1       	ldi	r31, 0x1E	; 30
    3ca2:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
    //led to show board working
    pinMode(13, OUTPUT);
    3caa:	61 e0       	ldi	r22, 0x01	; 1
    3cac:	8d e0       	ldi	r24, 0x0D	; 13
    3cae:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    pinMode(_relayPin, OUTPUT);
    3cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb6:	8d 59       	subi	r24, 0x9D	; 157
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	61 e0       	ldi	r22, 0x01	; 1
    3cc2:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    3cc6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN6Memory13TheSensorsMemE>
    3cca:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN6Memory13TheSensorsMemE+0x1>
    3cce:	04 96       	adiw	r24, 0x04	; 4
    3cd0:	aa d3       	rcall	.+1876   	; 0x4426 <_ZN6EEWrapIiEcvKiEv>
    3cd2:	09 2e       	mov	r0, r25
    3cd4:	00 0c       	add	r0, r0
    3cd6:	aa 0b       	sbc	r26, r26
    3cd8:	bb 0b       	sbc	r27, r27
    3cda:	bc 01       	movw	r22, r24
    3cdc:	cd 01       	movw	r24, r26
    3cde:	0e 94 2f 29 	call	0x525e	; 0x525e <__floatsisf>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	89 83       	std	Y+1, r24	; 0x01
    3ce8:	9a 83       	std	Y+2, r25	; 0x02
    3cea:	ab 83       	std	Y+3, r26	; 0x03
    3cec:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    3cee:	29 81       	ldd	r18, Y+1	; 0x01
    3cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    3cf2:	4b 81       	ldd	r20, Y+3	; 0x03
    3cf4:	5c 81       	ldd	r21, Y+4	; 0x04
    3cf6:	69 81       	ldd	r22, Y+1	; 0x01
    3cf8:	7a 81       	ldd	r23, Y+2	; 0x02
    3cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfe:	0e 94 46 2a 	call	0x548c	; 0x548c <__unordsf2>
    3d02:	88 23       	and	r24, r24
    3d04:	81 f4       	brne	.+32     	; 0x3d26 <_ZN9TDSSensor4initEv+0x8c>
        Offset = offset;
    3d06:	69 81       	ldd	r22, Y+1	; 0x01
    3d08:	7a 81       	ldd	r23, Y+2	; 0x02
    3d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0e:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <__fixsfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9c 01       	movw	r18, r24
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	88 56       	subi	r24, 0x68	; 104
    3d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d20:	fc 01       	movw	r30, r24
    3d22:	31 83       	std	Z+1, r19	; 0x01
    3d24:	20 83       	st	Z, r18
    }
}
    3d26:	26 96       	adiw	r28, 0x06	; 6
    3d28:	e2 e0       	ldi	r30, 0x02	; 2
    3d2a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003d2e <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    3d2e:	a4 e0       	ldi	r26, 0x04	; 4
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	ed e9       	ldi	r30, 0x9D	; 157
    3d34:	fe e1       	ldi	r31, 0x1E	; 30
    3d36:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	7c 83       	std	Y+4, r23	; 0x04
    3d40:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	9a 81       	ldd	r25, Y+2	; 0x02
    3d46:	88 56       	subi	r24, 0x68	; 104
    3d48:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d4e:	fc 01       	movw	r30, r24
    3d50:	31 83       	std	Z+1, r19	; 0x01
    3d52:	20 83       	st	Z, r18
    TheSensorsMem.TdsOffset = Offset;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	9c 01       	movw	r18, r24
    3d5a:	28 56       	subi	r18, 0x68	; 104
    3d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN6Memory13TheSensorsMemE>
    3d62:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN6Memory13TheSensorsMemE+0x1>
    3d66:	04 96       	adiw	r24, 0x04	; 4
    3d68:	b9 01       	movw	r22, r18
    3d6a:	6c d3       	rcall	.+1752   	; 0x4444 <_ZN6EEWrapIiEaSERKi>
}
    3d6c:	24 96       	adiw	r28, 0x04	; 4
    3d6e:	e2 e0       	ldi	r30, 0x02	; 2
    3d70:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003d74 <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    3d74:	ae e0       	ldi	r26, 0x0E	; 14
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	e0 ec       	ldi	r30, 0xC0	; 192
    3d7a:	fe e1       	ldi	r31, 0x1E	; 30
    3d7c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    3d80:	9e 87       	std	Y+14, r25	; 0x0e
    3d82:	8d 87       	std	Y+13, r24	; 0x0d
    //// change the analog out value:
    //analogWrite(9, outputValue);
    //double sensorVal2 = analogRead(_pin);//analogRead(1);


    TdsString = String(_tdsValue, 0).c_str();
    3d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d88:	8a 5a       	subi	r24, 0xAA	; 170
    3d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	80 81       	ld	r24, Z
    3d90:	91 81       	ldd	r25, Z+1	; 0x01
    3d92:	a2 81       	ldd	r26, Z+2	; 0x02
    3d94:	b3 81       	ldd	r27, Z+3	; 0x03
    3d96:	fe 01       	movw	r30, r28
    3d98:	37 96       	adiw	r30, 0x07	; 7
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	ac 01       	movw	r20, r24
    3d9e:	bd 01       	movw	r22, r26
    3da0:	cf 01       	movw	r24, r30
    3da2:	0e 94 03 31 	call	0x6206	; 0x6206 <_ZN6StringC1Efh>
    3da6:	ce 01       	movw	r24, r28
    3da8:	07 96       	adiw	r24, 0x07	; 7
    3daa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZNK6String5c_strEv>
    3dae:	9c 01       	movw	r18, r24
    3db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db4:	84 57       	subi	r24, 0x74	; 116
    3db6:	9f 4f       	sbci	r25, 0xFF	; 255
    3db8:	b9 01       	movw	r22, r18
    3dba:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	07 96       	adiw	r24, 0x07	; 7
    3dc2:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    TdsAvgString = String(_tdsValueAverage, 0).c_str();
    3dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dca:	86 5a       	subi	r24, 0xA6	; 166
    3dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dce:	fc 01       	movw	r30, r24
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	a2 81       	ldd	r26, Z+2	; 0x02
    3dd6:	b3 81       	ldd	r27, Z+3	; 0x03
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	ac 01       	movw	r20, r24
    3ddc:	bd 01       	movw	r22, r26
    3dde:	ce 01       	movw	r24, r28
    3de0:	01 96       	adiw	r24, 0x01	; 1
    3de2:	0e 94 03 31 	call	0x6206	; 0x6206 <_ZN6StringC1Efh>
    3de6:	ce 01       	movw	r24, r28
    3de8:	01 96       	adiw	r24, 0x01	; 1
    3dea:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZNK6String5c_strEv>
    3dee:	9c 01       	movw	r18, r24
    3df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3df4:	8e 56       	subi	r24, 0x6E	; 110
    3df6:	9f 4f       	sbci	r25, 0xFF	; 255
    3df8:	b9 01       	movw	r22, r18
    3dfa:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    3dfe:	ce 01       	movw	r24, r28
    3e00:	01 96       	adiw	r24, 0x01	; 1
    3e02:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    return _tdsValue;
    3e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0a:	8a 5a       	subi	r24, 0xAA	; 170
    3e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0e:	fc 01       	movw	r30, r24
    3e10:	80 81       	ld	r24, Z
    3e12:	91 81       	ldd	r25, Z+1	; 0x01
    3e14:	a2 81       	ldd	r26, Z+2	; 0x02
    3e16:	b3 81       	ldd	r27, Z+3	; 0x03

}
    3e18:	bc 01       	movw	r22, r24
    3e1a:	cd 01       	movw	r24, r26
    3e1c:	2e 96       	adiw	r28, 0x0e	; 14
    3e1e:	e2 e0       	ldi	r30, 0x02	; 2
    3e20:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00003e24 <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    3e24:	aa e1       	ldi	r26, 0x1A	; 26
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	e8 e1       	ldi	r30, 0x18	; 24
    3e2a:	ff e1       	ldi	r31, 0x1F	; 31
    3e2c:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    3e30:	9a 8f       	std	Y+26, r25	; 0x1a
    3e32:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    3e34:	89 8d       	ldd	r24, Y+25	; 0x19
    3e36:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e38:	9d df       	rcall	.-198    	; 0x3d74 <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    3e3a:	8c e0       	ldi	r24, 0x0C	; 12
    3e3c:	93 e0       	ldi	r25, 0x03	; 3
    3e3e:	fc 01       	movw	r30, r24
    3e40:	80 81       	ld	r24, Z
    3e42:	88 23       	and	r24, r24
    3e44:	89 f4       	brne	.+34     	; 0x3e68 <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    3e46:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3e52:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3e56:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3e5a:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3e5e:	8c e0       	ldi	r24, 0x0C	; 12
    3e60:	93 e0       	ldi	r25, 0x03	; 3
    3e62:	21 e0       	ldi	r18, 0x01	; 1
    3e64:	fc 01       	movw	r30, r24
    3e66:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    3e68:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3e6c:	9b 01       	movw	r18, r22
    3e6e:	ac 01       	movw	r20, r24
    3e70:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3e74:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3e78:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3e7c:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3e80:	28 1b       	sub	r18, r24
    3e82:	39 0b       	sbc	r19, r25
    3e84:	4a 0b       	sbc	r20, r26
    3e86:	5b 0b       	sbc	r21, r27
    3e88:	89 8d       	ldd	r24, Y+25	; 0x19
    3e8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e8c:	8c 5a       	subi	r24, 0xAC	; 172
    3e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e90:	fc 01       	movw	r30, r24
    3e92:	80 81       	ld	r24, Z
    3e94:	91 81       	ldd	r25, Z+1	; 0x01
    3e96:	80 57       	subi	r24, 0x70	; 112
    3e98:	9e 4f       	sbci	r25, 0xFE	; 254
    3e9a:	09 2e       	mov	r0, r25
    3e9c:	00 0c       	add	r0, r0
    3e9e:	aa 0b       	sbc	r26, r26
    3ea0:	bb 0b       	sbc	r27, r27
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	82 17       	cp	r24, r18
    3ea6:	93 07       	cpc	r25, r19
    3ea8:	a4 07       	cpc	r26, r20
    3eaa:	b5 07       	cpc	r27, r21
    3eac:	08 f0       	brcs	.+2      	; 0x3eb0 <_ZN9TDSSensor13PrintTDSToLCDEv+0x8c>
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	66 23       	and	r22, r22
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <_ZN9TDSSensor13PrintTDSToLCDEv+0x92>
    3eb4:	7f c0       	rjmp	.+254    	; 0x3fb4 <_ZN9TDSSensor13PrintTDSToLCDEv+0x190>
        if(_printToLCD) {
    3eb6:	89 8d       	ldd	r24, Y+25	; 0x19
    3eb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3eba:	8e 59       	subi	r24, 0x9E	; 158
    3ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	80 81       	ld	r24, Z
    3ec2:	88 23       	and	r24, r24
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <_ZN9TDSSensor13PrintTDSToLCDEv+0xa4>
    3ec6:	60 c0       	rjmp	.+192    	; 0x3f88 <_ZN9TDSSensor13PrintTDSToLCDEv+0x164>
            String enabled = "";
    3ec8:	ce 01       	movw	r24, r28
    3eca:	0d 96       	adiw	r24, 0x0d	; 13
    3ecc:	6a e2       	ldi	r22, 0x2A	; 42
    3ece:	71 e0       	ldi	r23, 0x01	; 1
    3ed0:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
            if(_enabled) {
    3ed4:	89 8d       	ldd	r24, Y+25	; 0x19
    3ed6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ed8:	8b 59       	subi	r24, 0x9B	; 155
    3eda:	9f 4f       	sbci	r25, 0xFF	; 255
    3edc:	fc 01       	movw	r30, r24
    3ede:	80 81       	ld	r24, Z
    3ee0:	88 23       	and	r24, r24
    3ee2:	31 f0       	breq	.+12     	; 0x3ef0 <_ZN9TDSSensor13PrintTDSToLCDEv+0xcc>
                enabled = "<";
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	0d 96       	adiw	r24, 0x0d	; 13
    3ee8:	6b e2       	ldi	r22, 0x2B	; 43
    3eea:	71 e0       	ldi	r23, 0x01	; 1
    3eec:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3ef0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ef2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ef4:	8c 01       	movw	r16, r24
    3ef6:	04 57       	subi	r16, 0x74	; 116
    3ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    3efa:	89 8d       	ldd	r24, Y+25	; 0x19
    3efc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3efe:	7c 01       	movw	r14, r24
    3f00:	f2 e9       	ldi	r31, 0x92	; 146
    3f02:	ef 0e       	add	r14, r31
    3f04:	f1 1c       	adc	r15, r1
    3f06:	ce 01       	movw	r24, r28
    3f08:	07 96       	adiw	r24, 0x07	; 7
    3f0a:	6d e2       	ldi	r22, 0x2D	; 45
    3f0c:	71 e0       	ldi	r23, 0x01	; 1
    3f0e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN15StringSumHelperC1EPKc>
    3f12:	ce 01       	movw	r24, r28
    3f14:	07 96       	adiw	r24, 0x07	; 7
    3f16:	b7 01       	movw	r22, r14
    3f18:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3f1c:	63 e3       	ldi	r22, 0x33	; 51
    3f1e:	71 e0       	ldi	r23, 0x01	; 1
    3f20:	0e 94 bc 31 	call	0x6378	; 0x6378 <_ZplRK15StringSumHelperPKc>
    3f24:	b8 01       	movw	r22, r16
    3f26:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3f2a:	9c 01       	movw	r18, r24
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	0d 96       	adiw	r24, 0x0d	; 13
    3f30:	bc 01       	movw	r22, r24
    3f32:	c9 01       	movw	r24, r18
    3f34:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZplRK15StringSumHelperRK6String>
    3f38:	9c 01       	movw	r18, r24
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	43 96       	adiw	r24, 0x13	; 19
    3f3e:	b9 01       	movw	r22, r18
    3f40:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    3f44:	ce 01       	movw	r24, r28
    3f46:	07 96       	adiw	r24, 0x07	; 7
    3f48:	8c db       	rcall	.-2280   	; 0x3662 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	43 96       	adiw	r24, 0x13	; 19
    3f4e:	bc 01       	movw	r22, r24
    3f50:	ce 01       	movw	r24, r28
    3f52:	01 96       	adiw	r24, 0x01	; 1
    3f54:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    3f58:	89 8d       	ldd	r24, Y+25	; 0x19
    3f5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f5c:	88 59       	subi	r24, 0x98	; 152
    3f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f60:	9e 01       	movw	r18, r28
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	a9 01       	movw	r20, r18
    3f68:	61 e0       	ldi	r22, 0x01	; 1
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN7LCDBase9PrintLineEs6String>
    3f70:	ce 01       	movw	r24, r28
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3f78:	ce 01       	movw	r24, r28
    3f7a:	43 96       	adiw	r24, 0x13	; 19
    3f7c:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3f80:	ce 01       	movw	r24, r28
    3f82:	0d 96       	adiw	r24, 0x0d	; 13
    3f84:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    3f88:	8d e0       	ldi	r24, 0x0D	; 13
    3f8a:	0e 94 04 30 	call	0x6008	; 0x6008 <digitalRead>
    3f8e:	98 2f       	mov	r25, r24
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	89 27       	eor	r24, r25
    3f94:	68 2f       	mov	r22, r24
    3f96:	8d e0       	ldi	r24, 0x0D	; 13
    3f98:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
        printTime = millis();
    3f9c:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3fa8:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3fac:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3fb0:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    3fb4:	6a 96       	adiw	r28, 0x1a	; 26
    3fb6:	e6 e0       	ldi	r30, 0x06	; 6
    3fb8:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00003fbc <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    3fbc:	a2 e0       	ldi	r26, 0x02	; 2
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    3fc2:	ff e1       	ldi	r31, 0x1F	; 31
    3fc4:	0c 94 3e 33 	jmp	0x667c	; 0x667c <__prologue_saves__+0x14>
    3fc8:	9a 83       	std	Y+2, r25	; 0x02
    3fca:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
    3fce:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd0:	8b 59       	subi	r24, 0x9B	; 155
    3fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	90 81       	ld	r25, Z
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	89 27       	eor	r24, r25
    3fdc:	88 23       	and	r24, r24
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <_ZN9TDSSensor12CalculateTDSEv+0x26>
        return;
    3fe0:	17 c1       	rjmp	.+558    	; 0x4210 <_ZN9TDSSensor12CalculateTDSEv+0x254>
    }

    _tdsValue = getTDSValue();
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe6:	18 d1       	rcall	.+560    	; 0x4218 <_ZN9TDSSensor11getTDSValueEv>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	29 81       	ldd	r18, Y+1	; 0x01
    3fee:	3a 81       	ldd	r19, Y+2	; 0x02
    3ff0:	2a 5a       	subi	r18, 0xAA	; 170
    3ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff4:	f9 01       	movw	r30, r18
    3ff6:	80 83       	st	Z, r24
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	a2 83       	std	Z+2, r26	; 0x02
    3ffc:	b3 83       	std	Z+3, r27	; 0x03

    if(_numOfSamples <= 1) {
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	9a 81       	ldd	r25, Y+2	; 0x02
    4002:	8a 59       	subi	r24, 0x9A	; 154
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	fc 01       	movw	r30, r24
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
    400c:	02 97       	sbiw	r24, 0x02	; 2
    400e:	dc f4       	brge	.+54     	; 0x4046 <_ZN9TDSSensor12CalculateTDSEv+0x8a>
        _numOfSamples = 1;
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	8a 59       	subi	r24, 0x9A	; 154
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	21 e0       	ldi	r18, 0x01	; 1
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	fc 01       	movw	r30, r24
    401e:	31 83       	std	Z+1, r19	; 0x01
    4020:	20 83       	st	Z, r18
        _tdsTotal = _tdsValue;
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	8a 5a       	subi	r24, 0xAA	; 170
    4028:	9f 4f       	sbci	r25, 0xFF	; 255
    402a:	fc 01       	movw	r30, r24
    402c:	80 81       	ld	r24, Z
    402e:	91 81       	ldd	r25, Z+1	; 0x01
    4030:	a2 81       	ldd	r26, Z+2	; 0x02
    4032:	b3 81       	ldd	r27, Z+3	; 0x03
    4034:	29 81       	ldd	r18, Y+1	; 0x01
    4036:	3a 81       	ldd	r19, Y+2	; 0x02
    4038:	22 5a       	subi	r18, 0xA2	; 162
    403a:	3f 4f       	sbci	r19, 0xFF	; 255
    403c:	f9 01       	movw	r30, r18
    403e:	80 83       	st	Z, r24
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	a2 83       	std	Z+2, r26	; 0x02
    4044:	b3 83       	std	Z+3, r27	; 0x03
    }

    //_tdsTotal = getTDSValue();

    static unsigned long samplingTime = millis();
    4046:	84 e1       	ldi	r24, 0x14	; 20
    4048:	93 e0       	ldi	r25, 0x03	; 3
    404a:	fc 01       	movw	r30, r24
    404c:	80 81       	ld	r24, Z
    404e:	88 23       	and	r24, r24
    4050:	89 f4       	brne	.+34     	; 0x4074 <_ZN9TDSSensor12CalculateTDSEv+0xb8>
    4052:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    405e:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    4062:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    4066:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    406a:	84 e1       	ldi	r24, 0x14	; 20
    406c:	93 e0       	ldi	r25, 0x03	; 3
    406e:	21 e0       	ldi	r18, 0x01	; 1
    4070:	fc 01       	movw	r30, r24
    4072:	20 83       	st	Z, r18
    if(millis() - samplingTime > 60000) { //wait 1 min inbetween readings
    4074:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    4078:	9b 01       	movw	r18, r22
    407a:	ac 01       	movw	r20, r24
    407c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    4080:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    4084:	a0 91 2a 03 	lds	r26, 0x032A	; 0x80032a <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    4088:	b0 91 2b 03 	lds	r27, 0x032B	; 0x80032b <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    408c:	79 01       	movw	r14, r18
    408e:	8a 01       	movw	r16, r20
    4090:	e8 1a       	sub	r14, r24
    4092:	f9 0a       	sbc	r15, r25
    4094:	0a 0b       	sbc	r16, r26
    4096:	1b 0b       	sbc	r17, r27
    4098:	d8 01       	movw	r26, r16
    409a:	c7 01       	movw	r24, r14
    409c:	21 e0       	ldi	r18, 0x01	; 1
    409e:	81 36       	cpi	r24, 0x61	; 97
    40a0:	9a 4e       	sbci	r25, 0xEA	; 234
    40a2:	a1 05       	cpc	r26, r1
    40a4:	b1 05       	cpc	r27, r1
    40a6:	08 f4       	brcc	.+2      	; 0x40aa <_ZN9TDSSensor12CalculateTDSEv+0xee>
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	22 23       	and	r18, r18
    40ac:	09 f4       	brne	.+2      	; 0x40b0 <_ZN9TDSSensor12CalculateTDSEv+0xf4>
    40ae:	4b c0       	rjmp	.+150    	; 0x4146 <_ZN9TDSSensor12CalculateTDSEv+0x18a>

        _tdsValue = getTDSValue();
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	9a 81       	ldd	r25, Y+2	; 0x02
    40b4:	b1 d0       	rcall	.+354    	; 0x4218 <_ZN9TDSSensor11getTDSValueEv>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	29 81       	ldd	r18, Y+1	; 0x01
    40bc:	3a 81       	ldd	r19, Y+2	; 0x02
    40be:	2a 5a       	subi	r18, 0xAA	; 170
    40c0:	3f 4f       	sbci	r19, 0xFF	; 255
    40c2:	f9 01       	movw	r30, r18
    40c4:	80 83       	st	Z, r24
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	a2 83       	std	Z+2, r26	; 0x02
    40ca:	b3 83       	std	Z+3, r27	; 0x03
        _tdsTotal += _tdsValue;
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	82 5a       	subi	r24, 0xA2	; 162
    40d2:	9f 4f       	sbci	r25, 0xFF	; 255
    40d4:	fc 01       	movw	r30, r24
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	a2 81       	ldd	r26, Z+2	; 0x02
    40dc:	b3 81       	ldd	r27, Z+3	; 0x03
    40de:	29 81       	ldd	r18, Y+1	; 0x01
    40e0:	3a 81       	ldd	r19, Y+2	; 0x02
    40e2:	2a 5a       	subi	r18, 0xAA	; 170
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	f9 01       	movw	r30, r18
    40e8:	20 81       	ld	r18, Z
    40ea:	31 81       	ldd	r19, Z+1	; 0x01
    40ec:	42 81       	ldd	r20, Z+2	; 0x02
    40ee:	53 81       	ldd	r21, Z+3	; 0x03
    40f0:	bc 01       	movw	r22, r24
    40f2:	cd 01       	movw	r24, r26
    40f4:	b1 d7       	rcall	.+3938   	; 0x5058 <__addsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	29 81       	ldd	r18, Y+1	; 0x01
    40fc:	3a 81       	ldd	r19, Y+2	; 0x02
    40fe:	22 5a       	subi	r18, 0xA2	; 162
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	f9 01       	movw	r30, r18
    4104:	80 83       	st	Z, r24
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	a2 83       	std	Z+2, r26	; 0x02
    410a:	b3 83       	std	Z+3, r27	; 0x03
        _numOfSamples++;
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	8a 59       	subi	r24, 0x9A	; 154
    4112:	9f 4f       	sbci	r25, 0xFF	; 255
    4114:	fc 01       	movw	r30, r24
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	9c 01       	movw	r18, r24
    411c:	2f 5f       	subi	r18, 0xFF	; 255
    411e:	3f 4f       	sbci	r19, 0xFF	; 255
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	8a 59       	subi	r24, 0x9A	; 154
    4126:	9f 4f       	sbci	r25, 0xFF	; 255
    4128:	fc 01       	movw	r30, r24
    412a:	31 83       	std	Z+1, r19	; 0x01
    412c:	20 83       	st	Z, r18

        samplingTime = millis();
    412e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    413a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    413e:	a0 93 2a 03 	sts	0x032A, r26	; 0x80032a <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    4142:	b0 93 2b 03 	sts	0x032B, r27	; 0x80032b <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    }

    _tdsValueAverage = _tdsTotal / _numOfSamples;
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	9a 81       	ldd	r25, Y+2	; 0x02
    414a:	82 5a       	subi	r24, 0xA2	; 162
    414c:	9f 4f       	sbci	r25, 0xFF	; 255
    414e:	fc 01       	movw	r30, r24
    4150:	c0 80       	ld	r12, Z
    4152:	d1 80       	ldd	r13, Z+1	; 0x01
    4154:	e2 80       	ldd	r14, Z+2	; 0x02
    4156:	f3 80       	ldd	r15, Z+3	; 0x03
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	9a 81       	ldd	r25, Y+2	; 0x02
    415c:	8a 59       	subi	r24, 0x9A	; 154
    415e:	9f 4f       	sbci	r25, 0xFF	; 255
    4160:	fc 01       	movw	r30, r24
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	09 2e       	mov	r0, r25
    4168:	00 0c       	add	r0, r0
    416a:	aa 0b       	sbc	r26, r26
    416c:	bb 0b       	sbc	r27, r27
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	0e 94 2f 29 	call	0x525e	; 0x525e <__floatsisf>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9c 01       	movw	r18, r24
    417c:	ad 01       	movw	r20, r26
    417e:	c7 01       	movw	r24, r14
    4180:	b6 01       	movw	r22, r12
    4182:	d2 d7       	rcall	.+4004   	; 0x5128 <__divsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	29 81       	ldd	r18, Y+1	; 0x01
    418a:	3a 81       	ldd	r19, Y+2	; 0x02
    418c:	26 5a       	subi	r18, 0xA6	; 166
    418e:	3f 4f       	sbci	r19, 0xFF	; 255
    4190:	f9 01       	movw	r30, r18
    4192:	80 83       	st	Z, r24
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	a2 83       	std	Z+2, r26	; 0x02
    4198:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.println(_numOfSamples);
    //Serial.print(F("_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    //soften
    _tdsValueAverage = (_tdsValueAverage + _tdsValue) / 2;
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	86 5a       	subi	r24, 0xA6	; 166
    41a0:	9f 4f       	sbci	r25, 0xFF	; 255
    41a2:	fc 01       	movw	r30, r24
    41a4:	80 81       	ld	r24, Z
    41a6:	91 81       	ldd	r25, Z+1	; 0x01
    41a8:	a2 81       	ldd	r26, Z+2	; 0x02
    41aa:	b3 81       	ldd	r27, Z+3	; 0x03
    41ac:	29 81       	ldd	r18, Y+1	; 0x01
    41ae:	3a 81       	ldd	r19, Y+2	; 0x02
    41b0:	2a 5a       	subi	r18, 0xAA	; 170
    41b2:	3f 4f       	sbci	r19, 0xFF	; 255
    41b4:	f9 01       	movw	r30, r18
    41b6:	20 81       	ld	r18, Z
    41b8:	31 81       	ldd	r19, Z+1	; 0x01
    41ba:	42 81       	ldd	r20, Z+2	; 0x02
    41bc:	53 81       	ldd	r21, Z+3	; 0x03
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	4a d7       	rcall	.+3732   	; 0x5058 <__addsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	50 e4       	ldi	r21, 0x40	; 64
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	a9 d7       	rcall	.+3922   	; 0x5128 <__divsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	29 81       	ldd	r18, Y+1	; 0x01
    41dc:	3a 81       	ldd	r19, Y+2	; 0x02
    41de:	26 5a       	subi	r18, 0xA6	; 166
    41e0:	3f 4f       	sbci	r19, 0xFF	; 255
    41e2:	f9 01       	movw	r30, r18
    41e4:	80 83       	st	Z, r24
    41e6:	91 83       	std	Z+1, r25	; 0x01
    41e8:	a2 83       	std	Z+2, r26	; 0x02
    41ea:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.print(F("sft_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    if(_numOfSamples > 10) {
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	9a 81       	ldd	r25, Y+2	; 0x02
    41f0:	8a 59       	subi	r24, 0x9A	; 154
    41f2:	9f 4f       	sbci	r25, 0xFF	; 255
    41f4:	fc 01       	movw	r30, r24
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
    41fa:	0b 97       	sbiw	r24, 0x0b	; 11
    41fc:	4c f0       	brlt	.+18     	; 0x4210 <_ZN9TDSSensor12CalculateTDSEv+0x254>
        _numOfSamples = 1;
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02
    4202:	8a 59       	subi	r24, 0x9A	; 154
    4204:	9f 4f       	sbci	r25, 0xFF	; 255
    4206:	21 e0       	ldi	r18, 0x01	; 1
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	fc 01       	movw	r30, r24
    420c:	31 83       	std	Z+1, r19	; 0x01
    420e:	20 83       	st	Z, r18
    }

}
    4210:	22 96       	adiw	r28, 0x02	; 2
    4212:	e8 e0       	ldi	r30, 0x08	; 8
    4214:	0c 94 5a 33 	jmp	0x66b4	; 0x66b4 <__epilogue_restores__+0x14>

00004218 <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    4218:	a0 e1       	ldi	r26, 0x10	; 16
    421a:	b0 e0       	ldi	r27, 0x00	; 0
    421c:	e2 e1       	ldi	r30, 0x12	; 18
    421e:	f1 e2       	ldi	r31, 0x21	; 33
    4220:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    4224:	98 8b       	std	Y+16, r25	; 0x10
    4226:	8f 87       	std	Y+15, r24	; 0x0f
    static unsigned long samplingTime = millis();
    4228:	8c e1       	ldi	r24, 0x1C	; 28
    422a:	93 e0       	ldi	r25, 0x03	; 3
    422c:	fc 01       	movw	r30, r24
    422e:	80 81       	ld	r24, Z
    4230:	88 23       	and	r24, r24
    4232:	89 f4       	brne	.+34     	; 0x4256 <_ZN9TDSSensor11getTDSValueEv+0x3e>
    4234:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4240:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    4244:	a0 93 2e 03 	sts	0x032E, r26	; 0x80032e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    4248:	b0 93 2f 03 	sts	0x032F, r27	; 0x80032f <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    424c:	8c e1       	ldi	r24, 0x1C	; 28
    424e:	93 e0       	ldi	r25, 0x03	; 3
    4250:	21 e0       	ldi	r18, 0x01	; 1
    4252:	fc 01       	movw	r30, r24
    4254:	20 83       	st	Z, r18
    if(millis() - samplingTime > 500) {//wait .5 sec between readings, according to spec
    4256:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <millis>
    425a:	9b 01       	movw	r18, r22
    425c:	ac 01       	movw	r20, r24
    425e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4262:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    4266:	a0 91 2e 03 	lds	r26, 0x032E	; 0x80032e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    426a:	b0 91 2f 03 	lds	r27, 0x032F	; 0x80032f <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    426e:	79 01       	movw	r14, r18
    4270:	8a 01       	movw	r16, r20
    4272:	e8 1a       	sub	r14, r24
    4274:	f9 0a       	sbc	r15, r25
    4276:	0a 0b       	sbc	r16, r26
    4278:	1b 0b       	sbc	r17, r27
    427a:	d8 01       	movw	r26, r16
    427c:	c7 01       	movw	r24, r14
    427e:	21 e0       	ldi	r18, 0x01	; 1
    4280:	85 3f       	cpi	r24, 0xF5	; 245
    4282:	91 40       	sbci	r25, 0x01	; 1
    4284:	a1 05       	cpc	r26, r1
    4286:	b1 05       	cpc	r27, r1
    4288:	08 f4       	brcc	.+2      	; 0x428c <_ZN9TDSSensor11getTDSValueEv+0x74>
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	22 23       	and	r18, r18
    428e:	09 f4       	brne	.+2      	; 0x4292 <_ZN9TDSSensor11getTDSValueEv+0x7a>
    4290:	7c c0       	rjmp	.+248    	; 0x438a <_ZN9TDSSensor11getTDSValueEv+0x172>
        int numOfSamples = 40;
    4292:	88 e2       	ldi	r24, 0x28	; 40
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9a 83       	std	Y+2, r25	; 0x02
    4298:	89 83       	std	Y+1, r24	; 0x01
        _tdsAverage[_tdsArrayIndex++] = analogRead(_pin);
    429a:	8f 85       	ldd	r24, Y+15	; 0x0f
    429c:	98 89       	ldd	r25, Y+16	; 0x10
    429e:	8e 5a       	subi	r24, 0xAE	; 174
    42a0:	9f 4f       	sbci	r25, 0xFF	; 255
    42a2:	fc 01       	movw	r30, r24
    42a4:	00 81       	ld	r16, Z
    42a6:	11 81       	ldd	r17, Z+1	; 0x01
    42a8:	98 01       	movw	r18, r16
    42aa:	2f 5f       	subi	r18, 0xFF	; 255
    42ac:	3f 4f       	sbci	r19, 0xFF	; 255
    42ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b0:	98 89       	ldd	r25, Y+16	; 0x10
    42b2:	8e 5a       	subi	r24, 0xAE	; 174
    42b4:	9f 4f       	sbci	r25, 0xFF	; 255
    42b6:	fc 01       	movw	r30, r24
    42b8:	31 83       	std	Z+1, r19	; 0x01
    42ba:	20 83       	st	Z, r18
    42bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42be:	98 89       	ldd	r25, Y+16	; 0x10
    42c0:	fc 01       	movw	r30, r24
    42c2:	80 81       	ld	r24, Z
    42c4:	91 81       	ldd	r25, Z+1	; 0x01
    42c6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <analogRead>
    42ca:	ac 01       	movw	r20, r24
    42cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    42ce:	38 89       	ldd	r19, Y+16	; 0x10
    42d0:	c8 01       	movw	r24, r16
    42d2:	01 96       	adiw	r24, 0x01	; 1
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	82 0f       	add	r24, r18
    42da:	93 1f       	adc	r25, r19
    42dc:	fc 01       	movw	r30, r24
    42de:	51 83       	std	Z+1, r21	; 0x01
    42e0:	40 83       	st	Z, r20
        if(_tdsArrayIndex == numOfSamples) {
    42e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e4:	98 89       	ldd	r25, Y+16	; 0x10
    42e6:	8e 5a       	subi	r24, 0xAE	; 174
    42e8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ea:	fc 01       	movw	r30, r24
    42ec:	20 81       	ld	r18, Z
    42ee:	31 81       	ldd	r19, Z+1	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	28 17       	cp	r18, r24
    42f6:	39 07       	cpc	r19, r25
    42f8:	39 f4       	brne	.+14     	; 0x4308 <_ZN9TDSSensor11getTDSValueEv+0xf0>
            _tdsArrayIndex = 0;
    42fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fc:	98 89       	ldd	r25, Y+16	; 0x10
    42fe:	8e 5a       	subi	r24, 0xAE	; 174
    4300:	9f 4f       	sbci	r25, 0xFF	; 255
    4302:	fc 01       	movw	r30, r24
    4304:	11 82       	std	Z+1, r1	; 0x01
    4306:	10 82       	st	Z, r1
        }
        double tdsAvg = MathExt::CalculateAverage(_tdsAverage, numOfSamples);
    4308:	8f 85       	ldd	r24, Y+15	; 0x0f
    430a:	98 89       	ldd	r25, Y+16	; 0x10
    430c:	02 96       	adiw	r24, 0x02	; 2
    430e:	29 81       	ldd	r18, Y+1	; 0x01
    4310:	3a 81       	ldd	r19, Y+2	; 0x02
    4312:	b9 01       	movw	r22, r18
    4314:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN7MathExt16CalculateAverageEPii>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	8b 83       	std	Y+3, r24	; 0x03
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	ad 83       	std	Y+5, r26	; 0x05
    4322:	be 83       	std	Y+6, r27	; 0x06
        double voltage = tdsAvg * (5.0 / 1024);
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 ea       	ldi	r20, 0xA0	; 160
    432a:	5b e3       	ldi	r21, 0x3B	; 59
    432c:	6b 81       	ldd	r22, Y+3	; 0x03
    432e:	7c 81       	ldd	r23, Y+4	; 0x04
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	9e 81       	ldd	r25, Y+6	; 0x06
    4334:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	8f 83       	std	Y+7, r24	; 0x07
    433e:	98 87       	std	Y+8, r25	; 0x08
    4340:	a9 87       	std	Y+9, r26	; 0x09
    4342:	ba 87       	std	Y+10, r27	; 0x0a
        double tankTDS = voltage * Offset;
    4344:	8f 85       	ldd	r24, Y+15	; 0x0f
    4346:	98 89       	ldd	r25, Y+16	; 0x10
    4348:	88 56       	subi	r24, 0x68	; 104
    434a:	9f 4f       	sbci	r25, 0xFF	; 255
    434c:	fc 01       	movw	r30, r24
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	09 2e       	mov	r0, r25
    4354:	00 0c       	add	r0, r0
    4356:	aa 0b       	sbc	r26, r26
    4358:	bb 0b       	sbc	r27, r27
    435a:	bc 01       	movw	r22, r24
    435c:	cd 01       	movw	r24, r26
    435e:	7f d7       	rcall	.+3838   	; 0x525e <__floatsisf>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	2f 81       	ldd	r18, Y+7	; 0x07
    4366:	38 85       	ldd	r19, Y+8	; 0x08
    4368:	49 85       	ldd	r20, Y+9	; 0x09
    436a:	5a 85       	ldd	r21, Y+10	; 0x0a
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__mulsf3>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	8b 87       	std	Y+11, r24	; 0x0b
    437a:	9c 87       	std	Y+12, r25	; 0x0c
    437c:	ad 87       	std	Y+13, r26	; 0x0d
    437e:	be 87       	std	Y+14, r27	; 0x0e

        return tankTDS;
    4380:	8b 85       	ldd	r24, Y+11	; 0x0b
    4382:	9c 85       	ldd	r25, Y+12	; 0x0c
    4384:	ad 85       	ldd	r26, Y+13	; 0x0d
    4386:	be 85       	ldd	r27, Y+14	; 0x0e
    4388:	09 c0       	rjmp	.+18     	; 0x439c <_ZN9TDSSensor11getTDSValueEv+0x184>
        samplingTime = millis();
    }
    return _tdsValue;
    438a:	8f 85       	ldd	r24, Y+15	; 0x0f
    438c:	98 89       	ldd	r25, Y+16	; 0x10
    438e:	8a 5a       	subi	r24, 0xAA	; 170
    4390:	9f 4f       	sbci	r25, 0xFF	; 255
    4392:	fc 01       	movw	r30, r24
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	a2 81       	ldd	r26, Z+2	; 0x02
    439a:	b3 81       	ldd	r27, Z+3	; 0x03

}
    439c:	bc 01       	movw	r22, r24
    439e:	cd 01       	movw	r24, r26
    43a0:	60 96       	adiw	r28, 0x10	; 16
    43a2:	e6 e0       	ldi	r30, 0x06	; 6
    43a4:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

000043a8 <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    43a8:	a2 e0       	ldi	r26, 0x02	; 2
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	ea ed       	ldi	r30, 0xDA	; 218
    43ae:	f1 e2       	ldi	r31, 0x21	; 33
    43b0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    43b4:	9a 83       	std	Y+2, r25	; 0x02
    43b6:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	9a 81       	ldd	r25, Y+2	; 0x02
    43bc:	8b 59       	subi	r24, 0x9B	; 155
    43be:	9f 4f       	sbci	r25, 0xFF	; 255
    43c0:	21 e0       	ldi	r18, 0x01	; 1
    43c2:	fc 01       	movw	r30, r24
    43c4:	20 83       	st	Z, r18
    digitalWrite(_relayPin, HIGH);
    43c6:	89 81       	ldd	r24, Y+1	; 0x01
    43c8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ca:	8d 59       	subi	r24, 0x9D	; 157
    43cc:	9f 4f       	sbci	r25, 0xFF	; 255
    43ce:	fc 01       	movw	r30, r24
    43d0:	80 81       	ld	r24, Z
    43d2:	91 81       	ldd	r25, Z+1	; 0x01
    43d4:	61 e0       	ldi	r22, 0x01	; 1
    43d6:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
}
    43da:	22 96       	adiw	r28, 0x02	; 2
    43dc:	e2 e0       	ldi	r30, 0x02	; 2
    43de:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000043e2 <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    43e2:	a2 e0       	ldi	r26, 0x02	; 2
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	e7 ef       	ldi	r30, 0xF7	; 247
    43e8:	f1 e2       	ldi	r31, 0x21	; 33
    43ea:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    43f2:	89 81       	ldd	r24, Y+1	; 0x01
    43f4:	9a 81       	ldd	r25, Y+2	; 0x02
    43f6:	8b 59       	subi	r24, 0x9B	; 155
    43f8:	9f 4f       	sbci	r25, 0xFF	; 255
    43fa:	fc 01       	movw	r30, r24
    43fc:	10 82       	st	Z, r1
    digitalWrite(_relayPin, LOW);
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	9a 81       	ldd	r25, Y+2	; 0x02
    4402:	8d 59       	subi	r24, 0x9D	; 157
    4404:	9f 4f       	sbci	r25, 0xFF	; 255
    4406:	fc 01       	movw	r30, r24
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	60 e0       	ldi	r22, 0x00	; 0
    440e:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <digitalWrite>
    delay(1000);
    4412:	68 ee       	ldi	r22, 0xE8	; 232
    4414:	73 e0       	ldi	r23, 0x03	; 3
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <delay>

}
    441e:	22 96       	adiw	r28, 0x02	; 2
    4420:	e2 e0       	ldi	r30, 0x02	; 2
    4422:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004426 <_ZN6EEWrapIiEcvKiEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    4426:	a2 e0       	ldi	r26, 0x02	; 2
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	e9 e1       	ldi	r30, 0x19	; 25
    442c:	f2 e2       	ldi	r31, 0x22	; 34
    442e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4432:	9a 83       	std	Y+2, r25	; 0x02
    4434:	89 83       	std	Y+1, r24	; 0x01
    4436:	89 81       	ldd	r24, Y+1	; 0x01
    4438:	9a 81       	ldd	r25, Y+2	; 0x02
    443a:	18 d0       	rcall	.+48     	; 0x446c <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    443c:	22 96       	adiw	r28, 0x02	; 2
    443e:	e2 e0       	ldi	r30, 0x02	; 2
    4440:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004444 <_ZN6EEWrapIiEaSERKi>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    4444:	a4 e0       	ldi	r26, 0x04	; 4
    4446:	b0 e0       	ldi	r27, 0x00	; 0
    4448:	e8 e2       	ldi	r30, 0x28	; 40
    444a:	f2 e2       	ldi	r31, 0x22	; 34
    444c:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4450:	9a 83       	std	Y+2, r25	; 0x02
    4452:	89 83       	std	Y+1, r24	; 0x01
    4454:	7c 83       	std	Y+4, r23	; 0x04
    4456:	6b 83       	std	Y+3, r22	; 0x03
    4458:	2b 81       	ldd	r18, Y+3	; 0x03
    445a:	3c 81       	ldd	r19, Y+4	; 0x04
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	9a 81       	ldd	r25, Y+2	; 0x02
    4460:	b9 01       	movw	r22, r18
    4462:	21 d0       	rcall	.+66     	; 0x44a6 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    4464:	24 96       	adiw	r28, 0x04	; 4
    4466:	e2 e0       	ldi	r30, 0x02	; 2
    4468:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000446c <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    446c:	a4 e0       	ldi	r26, 0x04	; 4
    446e:	b0 e0       	ldi	r27, 0x00	; 0
    4470:	ec e3       	ldi	r30, 0x3C	; 60
    4472:	f2 e2       	ldi	r31, 0x22	; 34
    4474:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4478:	9c 83       	std	Y+4, r25	; 0x04
    447a:	8b 83       	std	Y+3, r24	; 0x03
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	31 d0       	rcall	.+98     	; 0x44e4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    4482:	bc 01       	movw	r22, r24
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	9e 01       	movw	r18, r28
    448a:	2f 5f       	subi	r18, 0xFF	; 255
    448c:	3f 4f       	sbci	r19, 0xFF	; 255
    448e:	82 0f       	add	r24, r18
    4490:	93 1f       	adc	r25, r19
    4492:	42 e0       	ldi	r20, 0x02	; 2
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
        }
    449e:	24 96       	adiw	r28, 0x04	; 4
    44a0:	e2 e0       	ldi	r30, 0x02	; 2
    44a2:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000044a6 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:

        D &EEWrite( const T& v ){
    44a6:	a4 e0       	ldi	r26, 0x04	; 4
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e9 e5       	ldi	r30, 0x59	; 89
    44ac:	f2 e2       	ldi	r31, 0x22	; 34
    44ae:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    44b2:	9a 83       	std	Y+2, r25	; 0x02
    44b4:	89 83       	std	Y+1, r24	; 0x01
    44b6:	7c 83       	std	Y+4, r23	; 0x04
    44b8:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    44ba:	89 81       	ldd	r24, Y+1	; 0x01
    44bc:	9a 81       	ldd	r25, Y+2	; 0x02
    44be:	12 d0       	rcall	.+36     	; 0x44e4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    44c0:	bc 01       	movw	r22, r24
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	2b 81       	ldd	r18, Y+3	; 0x03
    44c8:	3c 81       	ldd	r19, Y+4	; 0x04
    44ca:	82 0f       	add	r24, r18
    44cc:	93 1f       	adc	r25, r19
    44ce:	42 e0       	ldi	r20, 0x02	; 2
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	9a 81       	ldd	r25, Y+2	; 0x02
    44da:	04 d0       	rcall	.+8      	; 0x44e4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    44dc:	24 96       	adiw	r28, 0x04	; 4
    44de:	e2 e0       	ldi	r30, 0x02	; 2
    44e0:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000044e4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:
        protected: STATIC_ACCESS
    44e4:	a2 e0       	ldi	r26, 0x02	; 2
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	e8 e7       	ldi	r30, 0x78	; 120
    44ea:	f2 e2       	ldi	r31, 0x22	; 34
    44ec:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    44f0:	9a 83       	std	Y+2, r25	; 0x02
    44f2:	89 83       	std	Y+1, r24	; 0x01
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	9a 81       	ldd	r25, Y+2	; 0x02
    44f8:	22 96       	adiw	r28, 0x02	; 2
    44fa:	e2 e0       	ldi	r30, 0x02	; 2
    44fc:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004500 <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4500:	a2 e0       	ldi	r26, 0x02	; 2
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	e6 e8       	ldi	r30, 0x86	; 134
    4506:	f2 e2       	ldi	r31, 0x22	; 34
    4508:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	fc 01       	movw	r30, r24
    4516:	84 81       	ldd	r24, Z+4	; 0x04
    4518:	95 81       	ldd	r25, Z+5	; 0x05
    451a:	22 96       	adiw	r28, 0x02	; 2
    451c:	e2 e0       	ldi	r30, 0x02	; 2
    451e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004522 <_ZN6StringpLEPKc>:
    4522:	a4 e0       	ldi	r26, 0x04	; 4
    4524:	b0 e0       	ldi	r27, 0x00	; 0
    4526:	e7 e9       	ldi	r30, 0x97	; 151
    4528:	f2 e2       	ldi	r31, 0x22	; 34
    452a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    452e:	9a 83       	std	Y+2, r25	; 0x02
    4530:	89 83       	std	Y+1, r24	; 0x01
    4532:	7c 83       	std	Y+4, r23	; 0x04
    4534:	6b 83       	std	Y+3, r22	; 0x03
    4536:	2b 81       	ldd	r18, Y+3	; 0x03
    4538:	3c 81       	ldd	r19, Y+4	; 0x04
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	9a 81       	ldd	r25, Y+2	; 0x02
    453e:	b9 01       	movw	r22, r18
    4540:	0e 94 8b 31 	call	0x6316	; 0x6316 <_ZN6String6concatEPKc>
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	9a 81       	ldd	r25, Y+2	; 0x02
    4548:	24 96       	adiw	r28, 0x04	; 4
    454a:	e2 e0       	ldi	r30, 0x02	; 2
    454c:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004550 <_ZNK6StringeqEPKc>:
    4550:	a4 e0       	ldi	r26, 0x04	; 4
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	ee ea       	ldi	r30, 0xAE	; 174
    4556:	f2 e2       	ldi	r31, 0x22	; 34
    4558:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    455c:	9a 83       	std	Y+2, r25	; 0x02
    455e:	89 83       	std	Y+1, r24	; 0x01
    4560:	7c 83       	std	Y+4, r23	; 0x04
    4562:	6b 83       	std	Y+3, r22	; 0x03
    4564:	2b 81       	ldd	r18, Y+3	; 0x03
    4566:	3c 81       	ldd	r19, Y+4	; 0x04
    4568:	89 81       	ldd	r24, Y+1	; 0x01
    456a:	9a 81       	ldd	r25, Y+2	; 0x02
    456c:	b9 01       	movw	r22, r18
    456e:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <_ZNK6String6equalsEPKc>
    4572:	24 96       	adiw	r28, 0x04	; 4
    4574:	e2 e0       	ldi	r30, 0x02	; 2
    4576:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000457a <_ZN15WaterSensorWire5SetupEv>:
    457a:	a0 e0       	ldi	r26, 0x00	; 0
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	e3 ec       	ldi	r30, 0xC3	; 195
    4580:	f2 e2       	ldi	r31, 0x22	; 34
    4582:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4586:	89 ee       	ldi	r24, 0xE9	; 233
    4588:	93 e0       	ldi	r25, 0x03	; 3
    458a:	bc 01       	movw	r22, r24
    458c:	8c e6       	ldi	r24, 0x6C	; 108
    458e:	95 e0       	ldi	r25, 0x05	; 5
    4590:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    4594:	4a e0       	ldi	r20, 0x0A	; 10
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	68 e0       	ldi	r22, 0x08	; 8
    459a:	8c e6       	ldi	r24, 0x6C	; 108
    459c:	95 e0       	ldi	r25, 0x05	; 5
    459e:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <_ZN5Print7printlnEhi>
    45a2:	68 e0       	ldi	r22, 0x08	; 8
    45a4:	89 e8       	ldi	r24, 0x89	; 137
    45a6:	92 e0       	ldi	r25, 0x02	; 2
    45a8:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN7TwoWire5beginEh>
    45ac:	6f ed       	ldi	r22, 0xDF	; 223
    45ae:	73 e2       	ldi	r23, 0x23	; 35
    45b0:	89 e8       	ldi	r24, 0x89	; 137
    45b2:	92 e0       	ldi	r25, 0x02	; 2
    45b4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN7TwoWire9onRequestEPFvvE>
    45b8:	65 ee       	ldi	r22, 0xE5	; 229
    45ba:	72 e2       	ldi	r23, 0x22	; 34
    45bc:	89 e8       	ldi	r24, 0x89	; 137
    45be:	92 e0       	ldi	r25, 0x02	; 2
    45c0:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7TwoWire9onReceiveEPFviE>
    45c4:	e2 e0       	ldi	r30, 0x02	; 2
    45c6:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

000045ca <_ZN15WaterSensorWire7ReceiveEi>:
    45ca:	a7 e2       	ldi	r26, 0x27	; 39
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	eb ee       	ldi	r30, 0xEB	; 235
    45d0:	f2 e2       	ldi	r31, 0x22	; 34
    45d2:	0c 94 43 33 	jmp	0x6686	; 0x6686 <__prologue_saves__+0x1e>
    45d6:	9f a3       	std	Y+39, r25	; 0x27
    45d8:	8e a3       	std	Y+38, r24	; 0x26
    45da:	66 e3       	ldi	r22, 0x36	; 54
    45dc:	71 e0       	ldi	r23, 0x01	; 1
    45de:	80 e3       	ldi	r24, 0x30	; 48
    45e0:	93 e0       	ldi	r25, 0x03	; 3
    45e2:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    45e6:	66 e3       	ldi	r22, 0x36	; 54
    45e8:	71 e0       	ldi	r23, 0x01	; 1
    45ea:	8c e3       	ldi	r24, 0x3C	; 60
    45ec:	93 e0       	ldi	r25, 0x03	; 3
    45ee:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    45f2:	66 e3       	ldi	r22, 0x36	; 54
    45f4:	71 e0       	ldi	r23, 0x01	; 1
    45f6:	82 e4       	ldi	r24, 0x42	; 66
    45f8:	93 e0       	ldi	r25, 0x03	; 3
    45fa:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    45fe:	8e a1       	ldd	r24, Y+38	; 0x26
    4600:	9f a1       	ldd	r25, Y+39	; 0x27
    4602:	44 97       	sbiw	r24, 0x14	; 20
    4604:	09 f0       	breq	.+2      	; 0x4608 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    4606:	c7 c0       	rjmp	.+398    	; 0x4796 <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    4608:	0a c0       	rjmp	.+20     	; 0x461e <_ZN15WaterSensorWire7ReceiveEi+0x54>
    460a:	89 e8       	ldi	r24, 0x89	; 137
    460c:	92 e0       	ldi	r25, 0x02	; 2
    460e:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN7TwoWire4readEv>
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	69 81       	ldd	r22, Y+1	; 0x01
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	93 e0       	ldi	r25, 0x03	; 3
    461a:	0e 94 99 31 	call	0x6332	; 0x6332 <_ZN6String6concatEc>
    461e:	89 e8       	ldi	r24, 0x89	; 137
    4620:	92 e0       	ldi	r25, 0x02	; 2
    4622:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN7TwoWire9availableEv>
    4626:	21 e0       	ldi	r18, 0x01	; 1
    4628:	18 16       	cp	r1, r24
    462a:	19 06       	cpc	r1, r25
    462c:	0c f0       	brlt	.+2      	; 0x4630 <_ZN15WaterSensorWire7ReceiveEi+0x66>
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	22 23       	and	r18, r18
    4632:	59 f7       	brne	.-42     	; 0x460a <_ZN15WaterSensorWire7ReceiveEi+0x40>
    4634:	80 e3       	ldi	r24, 0x30	; 48
    4636:	93 e0       	ldi	r25, 0x03	; 3
    4638:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <_ZN6String4trimEv>
    463c:	ce 01       	movw	r24, r28
    463e:	44 96       	adiw	r24, 0x14	; 20
    4640:	67 e3       	ldi	r22, 0x37	; 55
    4642:	71 e0       	ldi	r23, 0x01	; 1
    4644:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    4648:	ce 01       	movw	r24, r28
    464a:	44 96       	adiw	r24, 0x14	; 20
    464c:	bc 01       	movw	r22, r24
    464e:	80 e3       	ldi	r24, 0x30	; 48
    4650:	93 e0       	ldi	r25, 0x03	; 3
    4652:	0e 94 16 32 	call	0x642c	; 0x642c <_ZNK6String10startsWithERKS_>
    4656:	11 e0       	ldi	r17, 0x01	; 1
    4658:	88 23       	and	r24, r24
    465a:	09 f4       	brne	.+2      	; 0x465e <_ZN15WaterSensorWire7ReceiveEi+0x94>
    465c:	10 e0       	ldi	r17, 0x00	; 0
    465e:	ce 01       	movw	r24, r28
    4660:	44 96       	adiw	r24, 0x14	; 20
    4662:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4666:	11 23       	and	r17, r17
    4668:	a1 f0       	breq	.+40     	; 0x4692 <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    466a:	60 e3       	ldi	r22, 0x30	; 48
    466c:	73 e0       	ldi	r23, 0x03	; 3
    466e:	8c e3       	ldi	r24, 0x3C	; 60
    4670:	93 e0       	ldi	r25, 0x03	; 3
    4672:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    4676:	82 ef       	ldi	r24, 0xF2	; 242
    4678:	93 e0       	ldi	r25, 0x03	; 3
    467a:	bc 01       	movw	r22, r24
    467c:	8c e6       	ldi	r24, 0x6C	; 108
    467e:	95 e0       	ldi	r25, 0x05	; 5
    4680:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    4684:	6c e3       	ldi	r22, 0x3C	; 60
    4686:	73 e0       	ldi	r23, 0x03	; 3
    4688:	8c e6       	ldi	r24, 0x6C	; 108
    468a:	95 e0       	ldi	r25, 0x05	; 5
    468c:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN5Print7printlnERK6String>
    4690:	92 c0       	rjmp	.+292    	; 0x47b6 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    4692:	60 e3       	ldi	r22, 0x30	; 48
    4694:	73 e0       	ldi	r23, 0x03	; 3
    4696:	82 e4       	ldi	r24, 0x42	; 66
    4698:	93 e0       	ldi	r25, 0x03	; 3
    469a:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    469e:	88 ef       	ldi	r24, 0xF8	; 248
    46a0:	93 e0       	ldi	r25, 0x03	; 3
    46a2:	bc 01       	movw	r22, r24
    46a4:	8c e6       	ldi	r24, 0x6C	; 108
    46a6:	95 e0       	ldi	r25, 0x05	; 5
    46a8:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    46ac:	62 e4       	ldi	r22, 0x42	; 66
    46ae:	73 e0       	ldi	r23, 0x03	; 3
    46b0:	8c e6       	ldi	r24, 0x6C	; 108
    46b2:	95 e0       	ldi	r25, 0x05	; 5
    46b4:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN5Print7printlnERK6String>
    46b8:	ce 01       	movw	r24, r28
    46ba:	0e 96       	adiw	r24, 0x0e	; 14
    46bc:	62 e4       	ldi	r22, 0x42	; 66
    46be:	73 e0       	ldi	r23, 0x03	; 3
    46c0:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    46c4:	ce 01       	movw	r24, r28
    46c6:	4a 96       	adiw	r24, 0x1a	; 26
    46c8:	be 01       	movw	r22, r28
    46ca:	62 5f       	subi	r22, 0xF2	; 242
    46cc:	7f 4f       	sbci	r23, 0xFF	; 255
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	4d e3       	ldi	r20, 0x3D	; 61
    46d4:	d1 d1       	rcall	.+930    	; 0x4a78 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    46d6:	ce 01       	movw	r24, r28
    46d8:	0e 96       	adiw	r24, 0x0e	; 14
    46da:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    46de:	ce 01       	movw	r24, r28
    46e0:	08 96       	adiw	r24, 0x08	; 8
    46e2:	62 e4       	ldi	r22, 0x42	; 66
    46e4:	73 e0       	ldi	r23, 0x03	; 3
    46e6:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    46ea:	ce 01       	movw	r24, r28
    46ec:	80 96       	adiw	r24, 0x20	; 32
    46ee:	be 01       	movw	r22, r28
    46f0:	68 5f       	subi	r22, 0xF8	; 248
    46f2:	7f 4f       	sbci	r23, 0xFF	; 255
    46f4:	21 e0       	ldi	r18, 0x01	; 1
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	4d e3       	ldi	r20, 0x3D	; 61
    46fa:	be d1       	rcall	.+892    	; 0x4a78 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    46fc:	ce 01       	movw	r24, r28
    46fe:	08 96       	adiw	r24, 0x08	; 8
    4700:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4704:	ce 01       	movw	r24, r28
    4706:	4a 96       	adiw	r24, 0x1a	; 26
    4708:	69 e3       	ldi	r22, 0x39	; 57
    470a:	71 e0       	ldi	r23, 0x01	; 1
    470c:	21 df       	rcall	.-446    	; 0x4550 <_ZNK6StringeqEPKc>
    470e:	98 2f       	mov	r25, r24
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	99 23       	and	r25, r25
    4714:	09 f4       	brne	.+2      	; 0x4718 <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	88 23       	and	r24, r24
    471a:	89 f0       	breq	.+34     	; 0x473e <_ZN15WaterSensorWire7ReceiveEi+0x174>
    471c:	ce 01       	movw	r24, r28
    471e:	80 96       	adiw	r24, 0x20	; 32
    4720:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <_ZNK6String5toIntEv>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	9b 83       	std	Y+3, r25	; 0x03
    472a:	8a 83       	std	Y+2, r24	; 0x02
    472c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    4730:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    4734:	2a 81       	ldd	r18, Y+2	; 0x02
    4736:	3b 81       	ldd	r19, Y+3	; 0x03
    4738:	b9 01       	movw	r22, r18
    473a:	f9 da       	rcall	.-2574   	; 0x3d2e <_ZN9TDSSensor6UpdateEi>
    473c:	23 c0       	rjmp	.+70     	; 0x4784 <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    473e:	ce 01       	movw	r24, r28
    4740:	4a 96       	adiw	r24, 0x1a	; 26
    4742:	63 e4       	ldi	r22, 0x43	; 67
    4744:	71 e0       	ldi	r23, 0x01	; 1
    4746:	04 df       	rcall	.-504    	; 0x4550 <_ZNK6StringeqEPKc>
    4748:	98 2f       	mov	r25, r24
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	99 23       	and	r25, r25
    474e:	09 f4       	brne	.+2      	; 0x4752 <_ZN15WaterSensorWire7ReceiveEi+0x188>
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	88 23       	and	r24, r24
    4754:	b9 f0       	breq	.+46     	; 0x4784 <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    4756:	ce 01       	movw	r24, r28
    4758:	80 96       	adiw	r24, 0x20	; 32
    475a:	0e 94 db 32 	call	0x65b6	; 0x65b6 <_ZNK6String7toFloatEv>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	8c 83       	std	Y+4, r24	; 0x04
    4764:	9d 83       	std	Y+5, r25	; 0x05
    4766:	ae 83       	std	Y+6, r26	; 0x06
    4768:	bf 83       	std	Y+7, r27	; 0x07
    476a:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    476e:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    4772:	8c 81       	ldd	r24, Y+4	; 0x04
    4774:	9d 81       	ldd	r25, Y+5	; 0x05
    4776:	ae 81       	ldd	r26, Y+6	; 0x06
    4778:	bf 81       	ldd	r27, Y+7	; 0x07
    477a:	ac 01       	movw	r20, r24
    477c:	bd 01       	movw	r22, r26
    477e:	c9 01       	movw	r24, r18
    4780:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <_ZN8PHSensor6UpdateEd>
    4784:	ce 01       	movw	r24, r28
    4786:	80 96       	adiw	r24, 0x20	; 32
    4788:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    478c:	ce 01       	movw	r24, r28
    478e:	4a 96       	adiw	r24, 0x1a	; 26
    4790:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4794:	10 c0       	rjmp	.+32     	; 0x47b6 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    4796:	82 e0       	ldi	r24, 0x02	; 2
    4798:	94 e0       	ldi	r25, 0x04	; 4
    479a:	bc 01       	movw	r22, r24
    479c:	8c e6       	ldi	r24, 0x6C	; 108
    479e:	95 e0       	ldi	r25, 0x05	; 5
    47a0:	0e 94 4d 2c 	call	0x589a	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    47a4:	8e a1       	ldd	r24, Y+38	; 0x26
    47a6:	9f a1       	ldd	r25, Y+39	; 0x27
    47a8:	4a e0       	ldi	r20, 0x0A	; 10
    47aa:	50 e0       	ldi	r21, 0x00	; 0
    47ac:	bc 01       	movw	r22, r24
    47ae:	8c e6       	ldi	r24, 0x6C	; 108
    47b0:	95 e0       	ldi	r25, 0x05	; 5
    47b2:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <_ZN5Print7printlnEii>
    47b6:	a7 96       	adiw	r28, 0x27	; 39
    47b8:	e3 e0       	ldi	r30, 0x03	; 3
    47ba:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__epilogue_restores__+0x1e>

000047be <_ZN15WaterSensorWire7RequestEv>:
    47be:	ae e1       	ldi	r26, 0x1E	; 30
    47c0:	b0 e0       	ldi	r27, 0x00	; 0
    47c2:	e5 ee       	ldi	r30, 0xE5	; 229
    47c4:	f3 e2       	ldi	r31, 0x23	; 35
    47c6:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__prologue_saves__+0x1c>
    47ca:	ce 01       	movw	r24, r28
    47cc:	49 96       	adiw	r24, 0x19	; 25
    47ce:	66 e3       	ldi	r22, 0x36	; 54
    47d0:	71 e0       	ldi	r23, 0x01	; 1
    47d2:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    47d6:	67 e3       	ldi	r22, 0x37	; 55
    47d8:	71 e0       	ldi	r23, 0x01	; 1
    47da:	8c e3       	ldi	r24, 0x3C	; 60
    47dc:	93 e0       	ldi	r25, 0x03	; 3
    47de:	b8 de       	rcall	.-656    	; 0x4550 <_ZNK6StringeqEPKc>
    47e0:	98 2f       	mov	r25, r24
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	99 23       	and	r25, r25
    47e6:	09 f4       	brne	.+2      	; 0x47ea <_ZN15WaterSensorWire7RequestEv+0x2c>
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	88 23       	and	r24, r24
    47ec:	c1 f0       	breq	.+48     	; 0x481e <_ZN15WaterSensorWire7RequestEv+0x60>
    47ee:	ce 01       	movw	r24, r28
    47f0:	49 96       	adiw	r24, 0x19	; 25
    47f2:	6c e4       	ldi	r22, 0x4C	; 76
    47f4:	71 e0       	ldi	r23, 0x01	; 1
    47f6:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    47fa:	9e 01       	movw	r18, r28
    47fc:	27 5e       	subi	r18, 0xE7	; 231
    47fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4800:	ce 01       	movw	r24, r28
    4802:	43 96       	adiw	r24, 0x13	; 19
    4804:	b9 01       	movw	r22, r18
    4806:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    480a:	ce 01       	movw	r24, r28
    480c:	43 96       	adiw	r24, 0x13	; 19
    480e:	e4 d0       	rcall	.+456    	; 0x49d8 <_ZN15WaterSensorWire8TransmitE6String>
    4810:	ce 01       	movw	r24, r28
    4812:	43 96       	adiw	r24, 0x13	; 19
    4814:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4818:	00 e0       	ldi	r16, 0x00	; 0
    481a:	10 e0       	ldi	r17, 0x00	; 0
    481c:	d1 c0       	rjmp	.+418    	; 0x49c0 <_ZN15WaterSensorWire7RequestEv+0x202>
    481e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4822:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4826:	01 96       	adiw	r24, 0x01	; 1
    4828:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    482c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4830:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4834:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4838:	89 2b       	or	r24, r25
    483a:	69 f4       	brne	.+26     	; 0x4856 <_ZN15WaterSensorWire7RequestEv+0x98>
    483c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    4840:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    4844:	9c 01       	movw	r18, r24
    4846:	2b 56       	subi	r18, 0x6B	; 107
    4848:	3f 4f       	sbci	r19, 0xFF	; 255
    484a:	ce 01       	movw	r24, r28
    484c:	49 96       	adiw	r24, 0x19	; 25
    484e:	b9 01       	movw	r22, r18
    4850:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    4854:	a5 c0       	rjmp	.+330    	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    4856:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    485a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	69 f4       	brne	.+26     	; 0x487c <_ZN15WaterSensorWire7RequestEv+0xbe>
    4862:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    4866:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    486a:	9c 01       	movw	r18, r24
    486c:	25 56       	subi	r18, 0x65	; 101
    486e:	3f 4f       	sbci	r19, 0xFF	; 255
    4870:	ce 01       	movw	r24, r28
    4872:	49 96       	adiw	r24, 0x19	; 25
    4874:	b9 01       	movw	r22, r18
    4876:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    487a:	92 c0       	rjmp	.+292    	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    487c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4880:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4884:	02 97       	sbiw	r24, 0x02	; 2
    4886:	69 f4       	brne	.+26     	; 0x48a2 <_ZN15WaterSensorWire7RequestEv+0xe4>
    4888:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    488c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    4890:	9c 01       	movw	r18, r24
    4892:	24 57       	subi	r18, 0x74	; 116
    4894:	3f 4f       	sbci	r19, 0xFF	; 255
    4896:	ce 01       	movw	r24, r28
    4898:	49 96       	adiw	r24, 0x19	; 25
    489a:	b9 01       	movw	r22, r18
    489c:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    48a0:	7f c0       	rjmp	.+254    	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    48a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    48a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    48aa:	03 97       	sbiw	r24, 0x03	; 3
    48ac:	69 f4       	brne	.+26     	; 0x48c8 <_ZN15WaterSensorWire7RequestEv+0x10a>
    48ae:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    48b2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    48b6:	9c 01       	movw	r18, r24
    48b8:	2e 56       	subi	r18, 0x6E	; 110
    48ba:	3f 4f       	sbci	r19, 0xFF	; 255
    48bc:	ce 01       	movw	r24, r28
    48be:	49 96       	adiw	r24, 0x19	; 25
    48c0:	b9 01       	movw	r22, r18
    48c2:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN6StringaSERKS_>
    48c6:	6c c0       	rjmp	.+216    	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    48c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    48cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    48d0:	04 97       	sbiw	r24, 0x04	; 4
    48d2:	11 f5       	brne	.+68     	; 0x4918 <_ZN15WaterSensorWire7RequestEv+0x15a>
    48d4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    48d8:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    48dc:	8f 55       	subi	r24, 0x5F	; 95
    48de:	9f 4f       	sbci	r25, 0xFF	; 255
    48e0:	fc 01       	movw	r30, r24
    48e2:	80 81       	ld	r24, Z
    48e4:	91 81       	ldd	r25, Z+1	; 0x01
    48e6:	a2 81       	ldd	r26, Z+2	; 0x02
    48e8:	b3 81       	ldd	r27, Z+3	; 0x03
    48ea:	fe 01       	movw	r30, r28
    48ec:	3d 96       	adiw	r30, 0x0d	; 13
    48ee:	22 e0       	ldi	r18, 0x02	; 2
    48f0:	ac 01       	movw	r20, r24
    48f2:	bd 01       	movw	r22, r26
    48f4:	cf 01       	movw	r24, r30
    48f6:	0e 94 31 31 	call	0x6262	; 0x6262 <_ZN6StringC1Edh>
    48fa:	ce 01       	movw	r24, r28
    48fc:	0d 96       	adiw	r24, 0x0d	; 13
    48fe:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZNK6String5c_strEv>
    4902:	9c 01       	movw	r18, r24
    4904:	ce 01       	movw	r24, r28
    4906:	49 96       	adiw	r24, 0x19	; 25
    4908:	b9 01       	movw	r22, r18
    490a:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    490e:	ce 01       	movw	r24, r28
    4910:	0d 96       	adiw	r24, 0x0d	; 13
    4912:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4916:	44 c0       	rjmp	.+136    	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    4918:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    491c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4920:	05 97       	sbiw	r24, 0x05	; 5
    4922:	21 f5       	brne	.+72     	; 0x496c <_ZN15WaterSensorWire7RequestEv+0x1ae>
    4924:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    4928:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    492c:	88 56       	subi	r24, 0x68	; 104
    492e:	9f 4f       	sbci	r25, 0xFF	; 255
    4930:	fc 01       	movw	r30, r24
    4932:	20 81       	ld	r18, Z
    4934:	31 81       	ldd	r19, Z+1	; 0x01
    4936:	ce 01       	movw	r24, r28
    4938:	07 96       	adiw	r24, 0x07	; 7
    493a:	4a e0       	ldi	r20, 0x0A	; 10
    493c:	b9 01       	movw	r22, r18
    493e:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <_ZN6StringC1Eih>
    4942:	ce 01       	movw	r24, r28
    4944:	07 96       	adiw	r24, 0x07	; 7
    4946:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZNK6String5c_strEv>
    494a:	9c 01       	movw	r18, r24
    494c:	ce 01       	movw	r24, r28
    494e:	49 96       	adiw	r24, 0x19	; 25
    4950:	b9 01       	movw	r22, r18
    4952:	0e 94 c4 30 	call	0x6188	; 0x6188 <_ZN6StringaSEPKc>
    4956:	ce 01       	movw	r24, r28
    4958:	07 96       	adiw	r24, 0x07	; 7
    495a:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    495e:	8f ef       	ldi	r24, 0xFF	; 255
    4960:	9f ef       	ldi	r25, 0xFF	; 255
    4962:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4966:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    496a:	1a c0       	rjmp	.+52     	; 0x49a0 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    496c:	88 e2       	ldi	r24, 0x28	; 40
    496e:	94 e0       	ldi	r25, 0x04	; 4
    4970:	bc 01       	movw	r22, r24
    4972:	8c e6       	ldi	r24, 0x6C	; 108
    4974:	95 e0       	ldi	r25, 0x05	; 5
    4976:	91 d7       	rcall	.+3874   	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    4978:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    497c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4980:	4a e0       	ldi	r20, 0x0A	; 10
    4982:	50 e0       	ldi	r21, 0x00	; 0
    4984:	bc 01       	movw	r22, r24
    4986:	8c e6       	ldi	r24, 0x6C	; 108
    4988:	95 e0       	ldi	r25, 0x05	; 5
    498a:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <_ZN5Print7printlnEii>
    498e:	8f ef       	ldi	r24, 0xFF	; 255
    4990:	9f ef       	ldi	r25, 0xFF	; 255
    4992:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4996:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    499a:	00 e0       	ldi	r16, 0x00	; 0
    499c:	10 e0       	ldi	r17, 0x00	; 0
    499e:	10 c0       	rjmp	.+32     	; 0x49c0 <_ZN15WaterSensorWire7RequestEv+0x202>
    49a0:	ce 01       	movw	r24, r28
    49a2:	49 96       	adiw	r24, 0x19	; 25
    49a4:	bc 01       	movw	r22, r24
    49a6:	ce 01       	movw	r24, r28
    49a8:	01 96       	adiw	r24, 0x01	; 1
    49aa:	0e 94 bc 30 	call	0x6178	; 0x6178 <_ZN6StringC1ERKS_>
    49ae:	ce 01       	movw	r24, r28
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	12 d0       	rcall	.+36     	; 0x49d8 <_ZN15WaterSensorWire8TransmitE6String>
    49b4:	ce 01       	movw	r24, r28
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    49bc:	01 e0       	ldi	r16, 0x01	; 1
    49be:	10 e0       	ldi	r17, 0x00	; 0
    49c0:	ce 01       	movw	r24, r28
    49c2:	49 96       	adiw	r24, 0x19	; 25
    49c4:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    49c8:	01 30       	cpi	r16, 0x01	; 1
    49ca:	11 05       	cpc	r17, r1
    49cc:	09 f4       	brne	.+2      	; 0x49d0 <_ZN15WaterSensorWire7RequestEv+0x212>
    49ce:	00 00       	nop
    49d0:	6e 96       	adiw	r28, 0x1e	; 30
    49d2:	e4 e0       	ldi	r30, 0x04	; 4
    49d4:	0c 94 5e 33 	jmp	0x66bc	; 0x66bc <__epilogue_restores__+0x1c>

000049d8 <_ZN15WaterSensorWire8TransmitE6String>:
    49d8:	a2 e1       	ldi	r26, 0x12	; 18
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	e2 ef       	ldi	r30, 0xF2	; 242
    49de:	f4 e2       	ldi	r31, 0x24	; 36
    49e0:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    49e4:	9a 8b       	std	Y+18, r25	; 0x12
    49e6:	89 8b       	std	Y+17, r24	; 0x11
    49e8:	89 89       	ldd	r24, Y+17	; 0x11
    49ea:	9a 89       	ldd	r25, Y+18	; 0x12
    49ec:	89 dd       	rcall	.-1262   	; 0x4500 <_ZNK6String6lengthEv>
    49ee:	9c 01       	movw	r18, r24
    49f0:	8a e0       	ldi	r24, 0x0A	; 10
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	82 1b       	sub	r24, r18
    49f6:	93 0b       	sbc	r25, r19
    49f8:	9e 83       	std	Y+6, r25	; 0x06
    49fa:	8d 83       	std	Y+5, r24	; 0x05
    49fc:	1a 82       	std	Y+2, r1	; 0x02
    49fe:	19 82       	std	Y+1, r1	; 0x01
    4a00:	0a c0       	rjmp	.+20     	; 0x4a16 <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    4a02:	89 89       	ldd	r24, Y+17	; 0x11
    4a04:	9a 89       	ldd	r25, Y+18	; 0x12
    4a06:	62 e5       	ldi	r22, 0x52	; 82
    4a08:	71 e0       	ldi	r23, 0x01	; 1
    4a0a:	8b dd       	rcall	.-1258   	; 0x4522 <_ZN6StringpLEPKc>
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	9a 83       	std	Y+2, r25	; 0x02
    4a14:	89 83       	std	Y+1, r24	; 0x01
    4a16:	29 81       	ldd	r18, Y+1	; 0x01
    4a18:	3a 81       	ldd	r19, Y+2	; 0x02
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1e:	28 17       	cp	r18, r24
    4a20:	39 07       	cpc	r19, r25
    4a22:	7c f3       	brlt	.-34     	; 0x4a02 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    4a24:	1c 82       	std	Y+4, r1	; 0x04
    4a26:	1b 82       	std	Y+3, r1	; 0x03
    4a28:	16 c0       	rjmp	.+44     	; 0x4a56 <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    4a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    4a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    4a2e:	89 89       	ldd	r24, Y+17	; 0x11
    4a30:	9a 89       	ldd	r25, Y+18	; 0x12
    4a32:	b9 01       	movw	r22, r18
    4a34:	0e 94 35 32 	call	0x646a	; 0x646a <_ZNK6String6charAtEj>
    4a38:	48 2f       	mov	r20, r24
    4a3a:	9e 01       	movw	r18, r28
    4a3c:	29 5f       	subi	r18, 0xF9	; 249
    4a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	9c 81       	ldd	r25, Y+4	; 0x04
    4a44:	82 0f       	add	r24, r18
    4a46:	93 1f       	adc	r25, r19
    4a48:	fc 01       	movw	r30, r24
    4a4a:	40 83       	st	Z, r20
    4a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a50:	01 96       	adiw	r24, 0x01	; 1
    4a52:	9c 83       	std	Y+4, r25	; 0x04
    4a54:	8b 83       	std	Y+3, r24	; 0x03
    4a56:	8b 81       	ldd	r24, Y+3	; 0x03
    4a58:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5a:	0a 97       	sbiw	r24, 0x0a	; 10
    4a5c:	34 f3       	brlt	.-52     	; 0x4a2a <_ZN15WaterSensorWire8TransmitE6String+0x52>
    4a5e:	ce 01       	movw	r24, r28
    4a60:	07 96       	adiw	r24, 0x07	; 7
    4a62:	4a e0       	ldi	r20, 0x0A	; 10
    4a64:	50 e0       	ldi	r21, 0x00	; 0
    4a66:	bc 01       	movw	r22, r24
    4a68:	89 e8       	ldi	r24, 0x89	; 137
    4a6a:	92 e0       	ldi	r25, 0x02	; 2
    4a6c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN7TwoWire5writeEPKhj>
    4a70:	62 96       	adiw	r28, 0x12	; 18
    4a72:	e2 e0       	ldi	r30, 0x02	; 2
    4a74:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004a78 <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    4a78:	a1 e1       	ldi	r26, 0x11	; 17
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	e2 e4       	ldi	r30, 0x42	; 66
    4a7e:	f5 e2       	ldi	r31, 0x25	; 37
    4a80:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4a84:	9c 87       	std	Y+12, r25	; 0x0c
    4a86:	8b 87       	std	Y+11, r24	; 0x0b
    4a88:	7e 87       	std	Y+14, r23	; 0x0e
    4a8a:	6d 87       	std	Y+13, r22	; 0x0d
    4a8c:	4f 87       	std	Y+15, r20	; 0x0f
    4a8e:	39 8b       	std	Y+17, r19	; 0x11
    4a90:	28 8b       	std	Y+16, r18	; 0x10
    4a92:	1a 82       	std	Y+2, r1	; 0x02
    4a94:	19 82       	std	Y+1, r1	; 0x01
    4a96:	18 86       	std	Y+8, r1	; 0x08
    4a98:	1f 82       	std	Y+7, r1	; 0x07
    4a9a:	8f ef       	ldi	r24, 0xFF	; 255
    4a9c:	9f ef       	ldi	r25, 0xFF	; 255
    4a9e:	9a 87       	std	Y+10, r25	; 0x0a
    4aa0:	89 87       	std	Y+9, r24	; 0x09
    4aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa6:	2c dd       	rcall	.-1448   	; 0x4500 <_ZNK6String6lengthEv>
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	9e 83       	std	Y+6, r25	; 0x06
    4aac:	8d 83       	std	Y+5, r24	; 0x05
    4aae:	1c 82       	std	Y+4, r1	; 0x04
    4ab0:	1b 82       	std	Y+3, r1	; 0x03
    4ab2:	35 c0       	rjmp	.+106    	; 0x4b1e <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    4ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    4abc:	b9 01       	movw	r22, r18
    4abe:	0e 94 35 32 	call	0x646a	; 0x646a <_ZNK6String6charAtEj>
    4ac2:	98 2f       	mov	r25, r24
    4ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ac6:	98 17       	cp	r25, r24
    4ac8:	39 f0       	breq	.+14     	; 0x4ad8 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    4aca:	2b 81       	ldd	r18, Y+3	; 0x03
    4acc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ace:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad2:	28 17       	cp	r18, r24
    4ad4:	39 07       	cpc	r19, r25
    4ad6:	11 f4       	brne	.+4      	; 0x4adc <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	01 c0       	rjmp	.+2      	; 0x4ade <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	88 23       	and	r24, r24
    4ae0:	c9 f0       	breq	.+50     	; 0x4b14 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae6:	01 96       	adiw	r24, 0x01	; 1
    4ae8:	9a 83       	std	Y+2, r25	; 0x02
    4aea:	89 83       	std	Y+1, r24	; 0x01
    4aec:	89 85       	ldd	r24, Y+9	; 0x09
    4aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af0:	01 96       	adiw	r24, 0x01	; 1
    4af2:	98 87       	std	Y+8, r25	; 0x08
    4af4:	8f 83       	std	Y+7, r24	; 0x07
    4af6:	2b 81       	ldd	r18, Y+3	; 0x03
    4af8:	3c 81       	ldd	r19, Y+4	; 0x04
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	28 17       	cp	r18, r24
    4b00:	39 07       	cpc	r19, r25
    4b02:	21 f4       	brne	.+8      	; 0x4b0c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    4b04:	8b 81       	ldd	r24, Y+3	; 0x03
    4b06:	9c 81       	ldd	r25, Y+4	; 0x04
    4b08:	01 96       	adiw	r24, 0x01	; 1
    4b0a:	02 c0       	rjmp	.+4      	; 0x4b10 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    4b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b10:	9a 87       	std	Y+10, r25	; 0x0a
    4b12:	89 87       	std	Y+9, r24	; 0x09
    4b14:	8b 81       	ldd	r24, Y+3	; 0x03
    4b16:	9c 81       	ldd	r25, Y+4	; 0x04
    4b18:	01 96       	adiw	r24, 0x01	; 1
    4b1a:	9c 83       	std	Y+4, r25	; 0x04
    4b1c:	8b 83       	std	Y+3, r24	; 0x03
    4b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    4b20:	3c 81       	ldd	r19, Y+4	; 0x04
    4b22:	8d 81       	ldd	r24, Y+5	; 0x05
    4b24:	9e 81       	ldd	r25, Y+6	; 0x06
    4b26:	82 17       	cp	r24, r18
    4b28:	93 07       	cpc	r25, r19
    4b2a:	44 f0       	brlt	.+16     	; 0x4b3c <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4b2c:	29 81       	ldd	r18, Y+1	; 0x01
    4b2e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b30:	88 89       	ldd	r24, Y+16	; 0x10
    4b32:	99 89       	ldd	r25, Y+17	; 0x11
    4b34:	82 17       	cp	r24, r18
    4b36:	93 07       	cpc	r25, r19
    4b38:	0c f0       	brlt	.+2      	; 0x4b3c <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4b3a:	bc cf       	rjmp	.-136    	; 0x4ab4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    4b3c:	29 81       	ldd	r18, Y+1	; 0x01
    4b3e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b40:	88 89       	ldd	r24, Y+16	; 0x10
    4b42:	99 89       	ldd	r25, Y+17	; 0x11
    4b44:	82 17       	cp	r24, r18
    4b46:	93 07       	cpc	r25, r19
    4b48:	6c f4       	brge	.+26     	; 0x4b64 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    4b4a:	89 85       	ldd	r24, Y+9	; 0x09
    4b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b4e:	9c 01       	movw	r18, r24
    4b50:	8f 81       	ldd	r24, Y+7	; 0x07
    4b52:	98 85       	ldd	r25, Y+8	; 0x08
    4b54:	ac 01       	movw	r20, r24
    4b56:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b58:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b5e:	0e 94 36 32 	call	0x646c	; 0x646c <_ZNK6String9substringEjj>
    4b62:	06 c0       	rjmp	.+12     	; 0x4b70 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    4b64:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b66:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b68:	66 e3       	ldi	r22, 0x36	; 54
    4b6a:	71 e0       	ldi	r23, 0x01	; 1
    4b6c:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    4b70:	00 00       	nop
    4b72:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b74:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b76:	61 96       	adiw	r28, 0x11	; 17
    4b78:	e2 e0       	ldi	r30, 0x02	; 2
    4b7a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004b7e <_Z41__static_initialization_and_destruction_0ii>:
    4b7e:	a4 e0       	ldi	r26, 0x04	; 4
    4b80:	b0 e0       	ldi	r27, 0x00	; 0
    4b82:	e5 ec       	ldi	r30, 0xC5	; 197
    4b84:	f5 e2       	ldi	r31, 0x25	; 37
    4b86:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4b8a:	9a 83       	std	Y+2, r25	; 0x02
    4b8c:	89 83       	std	Y+1, r24	; 0x01
    4b8e:	7c 83       	std	Y+4, r23	; 0x04
    4b90:	6b 83       	std	Y+3, r22	; 0x03
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	9a 81       	ldd	r25, Y+2	; 0x02
    4b96:	01 97       	sbiw	r24, 0x01	; 1
    4b98:	11 f5       	brne	.+68     	; 0x4bde <_Z41__static_initialization_and_destruction_0ii+0x60>
    4b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9e:	01 96       	adiw	r24, 0x01	; 1
    4ba0:	f1 f4       	brne	.+60     	; 0x4bde <_Z41__static_initialization_and_destruction_0ii+0x60>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4ba2:	66 e3       	ldi	r22, 0x36	; 54
    4ba4:	71 e0       	ldi	r23, 0x01	; 1
    4ba6:	80 e3       	ldi	r24, 0x30	; 48
    4ba8:	93 e0       	ldi	r25, 0x03	; 3
    4baa:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    4bae:	66 e3       	ldi	r22, 0x36	; 54
    4bb0:	71 e0       	ldi	r23, 0x01	; 1
    4bb2:	86 e3       	ldi	r24, 0x36	; 54
    4bb4:	93 e0       	ldi	r25, 0x03	; 3
    4bb6:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    4bba:	66 e3       	ldi	r22, 0x36	; 54
    4bbc:	71 e0       	ldi	r23, 0x01	; 1
    4bbe:	8c e3       	ldi	r24, 0x3C	; 60
    4bc0:	93 e0       	ldi	r25, 0x03	; 3
    4bc2:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
static String _cmdData = "";
    4bc6:	66 e3       	ldi	r22, 0x36	; 54
    4bc8:	71 e0       	ldi	r23, 0x01	; 1
    4bca:	82 e4       	ldi	r24, 0x42	; 66
    4bcc:	93 e0       	ldi	r25, 0x03	; 3
    4bce:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
static String _response = "";
    4bd2:	66 e3       	ldi	r22, 0x36	; 54
    4bd4:	71 e0       	ldi	r23, 0x01	; 1
    4bd6:	88 e4       	ldi	r24, 0x48	; 72
    4bd8:	93 e0       	ldi	r25, 0x03	; 3
    4bda:	0e 94 93 30 	call	0x6126	; 0x6126 <_ZN6StringC1EPKc>
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	89 2b       	or	r24, r25
    4be4:	c1 f4       	brne	.+48     	; 0x4c16 <_Z41__static_initialization_and_destruction_0ii+0x98>
    4be6:	8b 81       	ldd	r24, Y+3	; 0x03
    4be8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bea:	01 96       	adiw	r24, 0x01	; 1
    4bec:	a1 f4       	brne	.+40     	; 0x4c16 <_Z41__static_initialization_and_destruction_0ii+0x98>
    4bee:	88 e4       	ldi	r24, 0x48	; 72
    4bf0:	93 e0       	ldi	r25, 0x03	; 3
    4bf2:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    4bf6:	82 e4       	ldi	r24, 0x42	; 66
    4bf8:	93 e0       	ldi	r25, 0x03	; 3
    4bfa:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    4bfe:	8c e3       	ldi	r24, 0x3C	; 60
    4c00:	93 e0       	ldi	r25, 0x03	; 3
    4c02:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    4c06:	86 e3       	ldi	r24, 0x36	; 54
    4c08:	93 e0       	ldi	r25, 0x03	; 3
    4c0a:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4c0e:	80 e3       	ldi	r24, 0x30	; 48
    4c10:	93 e0       	ldi	r25, 0x03	; 3
    4c12:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4c16:	24 96       	adiw	r28, 0x04	; 4
    4c18:	e2 e0       	ldi	r30, 0x02	; 2
    4c1a:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004c1e <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    4c1e:	a0 e0       	ldi	r26, 0x00	; 0
    4c20:	b0 e0       	ldi	r27, 0x00	; 0
    4c22:	e5 e1       	ldi	r30, 0x15	; 21
    4c24:	f6 e2       	ldi	r31, 0x26	; 38
    4c26:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4c2a:	6f ef       	ldi	r22, 0xFF	; 255
    4c2c:	7f ef       	ldi	r23, 0xFF	; 255
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a5 df       	rcall	.-182    	; 0x4b7e <_Z41__static_initialization_and_destruction_0ii>
    4c34:	e2 e0       	ldi	r30, 0x02	; 2
    4c36:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004c3a <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    4c3a:	a0 e0       	ldi	r26, 0x00	; 0
    4c3c:	b0 e0       	ldi	r27, 0x00	; 0
    4c3e:	e3 e2       	ldi	r30, 0x23	; 35
    4c40:	f6 e2       	ldi	r31, 0x26	; 38
    4c42:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4c46:	6f ef       	ldi	r22, 0xFF	; 255
    4c48:	7f ef       	ldi	r23, 0xFF	; 255
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	97 df       	rcall	.-210    	; 0x4b7e <_Z41__static_initialization_and_destruction_0ii>
    4c50:	e2 e0       	ldi	r30, 0x02	; 2
    4c52:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004c56 <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    4c56:	a2 e0       	ldi	r26, 0x02	; 2
    4c58:	b0 e0       	ldi	r27, 0x00	; 0
    4c5a:	e1 e3       	ldi	r30, 0x31	; 49
    4c5c:	f6 e2       	ldi	r31, 0x26	; 38
    4c5e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4c62:	9a 83       	std	Y+2, r25	; 0x02
    4c64:	89 83       	std	Y+1, r24	; 0x01
    4c66:	89 81       	ldd	r24, Y+1	; 0x01
    4c68:	9a 81       	ldd	r25, Y+2	; 0x02
    4c6a:	85 56       	subi	r24, 0x65	; 101
    4c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6e:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	9a 81       	ldd	r25, Y+2	; 0x02
    4c76:	8b 56       	subi	r24, 0x6B	; 107
    4c78:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7a:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	9a 81       	ldd	r25, Y+2	; 0x02
    4c82:	8a 5a       	subi	r24, 0xAA	; 170
    4c84:	9f 4f       	sbci	r25, 0xFF	; 255
    4c86:	0e 94 68 13 	call	0x26d0	; 0x26d0 <_ZNSt6vectorIdSaIdEED1Ev>
    4c8a:	22 96       	adiw	r28, 0x02	; 2
    4c8c:	e2 e0       	ldi	r30, 0x02	; 2
    4c8e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004c92 <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    4c92:	a2 e0       	ldi	r26, 0x02	; 2
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	ef e4       	ldi	r30, 0x4F	; 79
    4c98:	f6 e2       	ldi	r31, 0x26	; 38
    4c9a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4c9e:	9a 83       	std	Y+2, r25	; 0x02
    4ca0:	89 83       	std	Y+1, r24	; 0x01
    4ca2:	89 81       	ldd	r24, Y+1	; 0x01
    4ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca6:	8e 56       	subi	r24, 0x6E	; 110
    4ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    4caa:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb2:	84 57       	subi	r24, 0x74	; 116
    4cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb6:	0e 94 2c 30 	call	0x6058	; 0x6058 <_ZN6StringD1Ev>
    4cba:	22 96       	adiw	r28, 0x02	; 2
    4cbc:	e2 e0       	ldi	r30, 0x02	; 2
    4cbe:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004cc2 <_ZN7Globals13SwitchSensorsEv>:

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

    void SwitchSensors() {
    4cc2:	a0 e0       	ldi	r26, 0x00	; 0
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	e7 e6       	ldi	r30, 0x67	; 103
    4cc8:	f6 e2       	ldi	r31, 0x26	; 38
    4cca:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    4cce:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <_ZN7Globals10ReadingTDSE>
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	89 27       	eor	r24, r25
    4cd6:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    4cda:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_ZN7Globals10ReadingTDSE>
    4cde:	88 23       	and	r24, r24
    4ce0:	41 f0       	breq	.+16     	; 0x4cf2 <_ZN7Globals13SwitchSensorsEv+0x30>
            ThePHSensor.TurnOff();
    4ce2:	83 e7       	ldi	r24, 0x73	; 115
    4ce4:	93 e0       	ldi	r25, 0x03	; 3
    4ce6:	0e 94 1f 1c 	call	0x383e	; 0x383e <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    4cea:	88 e1       	ldi	r24, 0x18	; 24
    4cec:	94 e0       	ldi	r25, 0x04	; 4
    4cee:	5c db       	rcall	.-2376   	; 0x43a8 <_ZN9TDSSensor6TurnOnEv>
    4cf0:	07 c0       	rjmp	.+14     	; 0x4d00 <_ZN7Globals13SwitchSensorsEv+0x3e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    4cf2:	88 e1       	ldi	r24, 0x18	; 24
    4cf4:	94 e0       	ldi	r25, 0x04	; 4
    4cf6:	75 db       	rcall	.-2326   	; 0x43e2 <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    4cf8:	83 e7       	ldi	r24, 0x73	; 115
    4cfa:	93 e0       	ldi	r25, 0x03	; 3
    4cfc:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN8PHSensor6TurnOnEv>
        }
    }
    4d00:	e2 e0       	ldi	r30, 0x02	; 2
    4d02:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004d06 <_Z41__static_initialization_and_destruction_0ii>:

}
    4d06:	ac e4       	ldi	r26, 0x4C	; 76
    4d08:	b0 e0       	ldi	r27, 0x00	; 0
    4d0a:	e9 e8       	ldi	r30, 0x89	; 137
    4d0c:	f6 e2       	ldi	r31, 0x26	; 38
    4d0e:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>
    4d12:	9e 01       	movw	r18, r28
    4d14:	27 5b       	subi	r18, 0xB7	; 183
    4d16:	3f 4f       	sbci	r19, 0xFF	; 255
    4d18:	f9 01       	movw	r30, r18
    4d1a:	91 83       	std	Z+1, r25	; 0x01
    4d1c:	80 83       	st	Z, r24
    4d1e:	ce 01       	movw	r24, r28
    4d20:	85 5b       	subi	r24, 0xB5	; 181
    4d22:	9f 4f       	sbci	r25, 0xFF	; 255
    4d24:	fc 01       	movw	r30, r24
    4d26:	71 83       	std	Z+1, r23	; 0x01
    4d28:	60 83       	st	Z, r22
    4d2a:	ce 01       	movw	r24, r28
    4d2c:	87 5b       	subi	r24, 0xB7	; 183
    4d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d30:	fc 01       	movw	r30, r24
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	09 f0       	breq	.+2      	; 0x4d3c <_Z41__static_initialization_and_destruction_0ii+0x36>
    4d3a:	44 c0       	rjmp	.+136    	; 0x4dc4 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	85 5b       	subi	r24, 0xB5	; 181
    4d40:	9f 4f       	sbci	r25, 0xFF	; 255
    4d42:	fc 01       	movw	r30, r24
    4d44:	80 81       	ld	r24, Z
    4d46:	91 81       	ldd	r25, Z+1	; 0x01
    4d48:	01 96       	adiw	r24, 0x01	; 1
    4d4a:	e1 f5       	brne	.+120    	; 0x4dc4 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _phRelayPin = 3;
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor

    static LCDBase _theLCD = LCDBase();
    4d4c:	8f e4       	ldi	r24, 0x4F	; 79
    4d4e:	93 e0       	ldi	r25, 0x03	; 3
    4d50:	0e 94 06 10 	call	0x200c	; 0x200c <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4d54:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN7Globals11_phRelayPinE>
    4d58:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN7Globals11_phRelayPinE+0x1>
    4d5c:	2f e4       	ldi	r18, 0x4F	; 79
    4d5e:	33 e0       	ldi	r19, 0x03	; 3
    4d60:	ce 01       	movw	r24, r28
    4d62:	85 96       	adiw	r24, 0x25	; 37
    4d64:	b9 01       	movw	r22, r18
    4d66:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN7LCDBaseC1ERKS_>
    4d6a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    4d6e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    4d72:	9e 01       	movw	r18, r28
    4d74:	2b 5d       	subi	r18, 0xDB	; 219
    4d76:	3f 4f       	sbci	r19, 0xFF	; 255
    4d78:	78 01       	movw	r14, r16
    4d7a:	89 01       	movw	r16, r18
    4d7c:	21 e0       	ldi	r18, 0x01	; 1
    4d7e:	40 ed       	ldi	r20, 0xD0	; 208
    4d80:	57 e0       	ldi	r21, 0x07	; 7
    4d82:	bc 01       	movw	r22, r24
    4d84:	83 e7       	ldi	r24, 0x73	; 115
    4d86:	93 e0       	ldi	r25, 0x03	; 3
    4d88:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    4d8c:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN7Globals12_tdsRelayPinE>
    4d90:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN7Globals12_tdsRelayPinE+0x1>
    4d94:	8f e4       	ldi	r24, 0x4F	; 79
    4d96:	93 e0       	ldi	r25, 0x03	; 3
    4d98:	bc 01       	movw	r22, r24
    4d9a:	ce 01       	movw	r24, r28
    4d9c:	01 96       	adiw	r24, 0x01	; 1
    4d9e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN7LCDBaseC1ERKS_>
    4da2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    4da6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    4daa:	78 01       	movw	r14, r16
    4dac:	9e 01       	movw	r18, r28
    4dae:	2f 5f       	subi	r18, 0xFF	; 255
    4db0:	3f 4f       	sbci	r19, 0xFF	; 255
    4db2:	89 01       	movw	r16, r18
    4db4:	21 e0       	ldi	r18, 0x01	; 1
    4db6:	48 ee       	ldi	r20, 0xE8	; 232
    4db8:	53 e0       	ldi	r21, 0x03	; 3
    4dba:	bc 01       	movw	r22, r24
    4dbc:	88 e1       	ldi	r24, 0x18	; 24
    4dbe:	94 e0       	ldi	r25, 0x04	; 4
    4dc0:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <_ZN9TDSSensorC1Eiib7LCDBasei>
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	87 5b       	subi	r24, 0xB7	; 183
    4dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dca:	fc 01       	movw	r30, r24
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	89 2b       	or	r24, r25
    4dd2:	71 f4       	brne	.+28     	; 0x4df0 <_Z41__static_initialization_and_destruction_0ii+0xea>
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	85 5b       	subi	r24, 0xB5	; 181
    4dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dda:	fc 01       	movw	r30, r24
    4ddc:	80 81       	ld	r24, Z
    4dde:	91 81       	ldd	r25, Z+1	; 0x01
    4de0:	01 96       	adiw	r24, 0x01	; 1
    4de2:	31 f4       	brne	.+12     	; 0x4df0 <_Z41__static_initialization_and_destruction_0ii+0xea>
    4de4:	88 e1       	ldi	r24, 0x18	; 24
    4de6:	94 e0       	ldi	r25, 0x04	; 4
    4de8:	54 df       	rcall	.-344    	; 0x4c92 <_ZN9TDSSensorD1Ev>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4dea:	83 e7       	ldi	r24, 0x73	; 115
    4dec:	93 e0       	ldi	r25, 0x03	; 3
    4dee:	33 df       	rcall	.-410    	; 0x4c56 <_ZN8PHSensorD1Ev>
            TheTDSSensor.TurnOff();//signal mofset
            ThePHSensor.TurnOn();
        }
    }

}
    4df0:	c4 5b       	subi	r28, 0xB4	; 180
    4df2:	df 4f       	sbci	r29, 0xFF	; 255
    4df4:	e6 e0       	ldi	r30, 0x06	; 6
    4df6:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00004dfa <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    4dfa:	a0 e0       	ldi	r26, 0x00	; 0
    4dfc:	b0 e0       	ldi	r27, 0x00	; 0
    4dfe:	e3 e0       	ldi	r30, 0x03	; 3
    4e00:	f7 e2       	ldi	r31, 0x27	; 39
    4e02:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4e06:	6f ef       	ldi	r22, 0xFF	; 255
    4e08:	7f ef       	ldi	r23, 0xFF	; 255
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	7b df       	rcall	.-266    	; 0x4d06 <_Z41__static_initialization_and_destruction_0ii>
    4e10:	e2 e0       	ldi	r30, 0x02	; 2
    4e12:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004e16 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    4e16:	a0 e0       	ldi	r26, 0x00	; 0
    4e18:	b0 e0       	ldi	r27, 0x00	; 0
    4e1a:	e1 e1       	ldi	r30, 0x11	; 17
    4e1c:	f7 e2       	ldi	r31, 0x27	; 39
    4e1e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4e22:	6f ef       	ldi	r22, 0xFF	; 255
    4e24:	7f ef       	ldi	r23, 0xFF	; 255
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	6d df       	rcall	.-294    	; 0x4d06 <_Z41__static_initialization_and_destruction_0ii>
    4e2c:	e2 e0       	ldi	r30, 0x02	; 2
    4e2e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004e32 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4e32:	a6 e0       	ldi	r26, 0x06	; 6
    4e34:	b0 e0       	ldi	r27, 0x00	; 0
    4e36:	ef e1       	ldi	r30, 0x1F	; 31
    4e38:	f7 e2       	ldi	r31, 0x27	; 39
    4e3a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4e3e:	9a 83       	std	Y+2, r25	; 0x02
    4e40:	89 83       	std	Y+1, r24	; 0x01
    4e42:	4b 83       	std	Y+3, r20	; 0x03
    4e44:	5c 83       	std	Y+4, r21	; 0x04
    4e46:	6d 83       	std	Y+5, r22	; 0x05
    4e48:	7e 83       	std	Y+6, r23	; 0x06
    4e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4e:	ad 81       	ldd	r26, Y+5	; 0x05
    4e50:	be 81       	ldd	r27, Y+6	; 0x06
    4e52:	e9 81       	ldd	r30, Y+1	; 0x01
    4e54:	fa 81       	ldd	r31, Y+2	; 0x02
    4e56:	26 e0       	ldi	r18, 0x06	; 6
    4e58:	ac 01       	movw	r20, r24
    4e5a:	bd 01       	movw	r22, r26
    4e5c:	cf 01       	movw	r24, r30
    4e5e:	df d3       	rcall	.+1982   	; 0x561e <_ZN14HardwareSerial5beginEmh>
    4e60:	26 96       	adiw	r28, 0x06	; 6
    4e62:	e2 e0       	ldi	r30, 0x02	; 2
    4e64:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004e68 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    4e68:	a2 e0       	ldi	r26, 0x02	; 2
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
    4e6c:	ea e3       	ldi	r30, 0x3A	; 58
    4e6e:	f7 e2       	ldi	r31, 0x27	; 39
    4e70:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    4e74:	9a 83       	std	Y+2, r25	; 0x02
    4e76:	89 83       	std	Y+1, r24	; 0x01
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	22 96       	adiw	r28, 0x02	; 2
    4e7c:	e2 e0       	ldi	r30, 0x02	; 2
    4e7e:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004e82 <setup>:
SimpleTimer _asyncTimer;


void AsyncDoWork();

void setup(void) {
    4e82:	a0 e0       	ldi	r26, 0x00	; 0
    4e84:	b0 e0       	ldi	r27, 0x00	; 0
    4e86:	e7 e4       	ldi	r30, 0x47	; 71
    4e88:	f7 e2       	ldi	r31, 0x27	; 39
    4e8a:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    4e8e:	40 e0       	ldi	r20, 0x00	; 0
    4e90:	51 ee       	ldi	r21, 0xE1	; 225
    4e92:	60 e0       	ldi	r22, 0x00	; 0
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	8c e6       	ldi	r24, 0x6C	; 108
    4e98:	95 e0       	ldi	r25, 0x05	; 5
    4e9a:	cb df       	rcall	.-106    	; 0x4e32 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4e9c:	00 00       	nop
    4e9e:	8c e6       	ldi	r24, 0x6C	; 108
    4ea0:	95 e0       	ldi	r25, 0x05	; 5
    4ea2:	e2 df       	rcall	.-60     	; 0x4e68 <_ZN14HardwareSerialcvbEv>
    4ea4:	98 2f       	mov	r25, r24
    4ea6:	81 e0       	ldi	r24, 0x01	; 1
    4ea8:	89 27       	eor	r24, r25
    4eaa:	88 23       	and	r24, r24
    4eac:	c1 f7       	brne	.-16     	; 0x4e9e <setup+0x1c>

    WaterSensorWire::Setup();
    4eae:	65 db       	rcall	.-2358   	; 0x457a <_ZN15WaterSensorWire5SetupEv>
    ThePHSensor.TurnOn();
    4eb0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    4eb4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    4eb8:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN8PHSensor6TurnOnEv>

    _asyncTimer.setInterval(1000, AsyncDoWork); //todo: set to 1000;
    4ebc:	24 e8       	ldi	r18, 0x84	; 132
    4ebe:	37 e2       	ldi	r19, 0x27	; 39
    4ec0:	48 ee       	ldi	r20, 0xE8	; 232
    4ec2:	53 e0       	ldi	r21, 0x03	; 3
    4ec4:	60 e0       	ldi	r22, 0x00	; 0
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	82 eb       	ldi	r24, 0xB2	; 178
    4eca:	94 e0       	ldi	r25, 0x04	; 4
    4ecc:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    4ed0:	e2 e0       	ldi	r30, 0x02	; 2
    4ed2:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004ed6 <loop>:

//String _request;
//String _response;
void loop(void) {
    4ed6:	a0 e0       	ldi	r26, 0x00	; 0
    4ed8:	b0 e0       	ldi	r27, 0x00	; 0
    4eda:	e1 e7       	ldi	r30, 0x71	; 113
    4edc:	f7 e2       	ldi	r31, 0x27	; 39
    4ede:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>

    _asyncTimer.run();
    4ee2:	82 eb       	ldi	r24, 0xB2	; 178
    4ee4:	94 e0       	ldi	r25, 0x04	; 4
    4ee6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN11SimpleTimer3runEv>

    ThePHSensor.PrintPHToLCD();
    4eea:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    4eee:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    4ef2:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN8PHSensor12PrintPHToLCDEv>
    TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    4ef6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    4efa:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    4efe:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    4f02:	e2 e0       	ldi	r30, 0x02	; 2
    4f04:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00004f08 <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4f08:	a0 e0       	ldi	r26, 0x00	; 0
    4f0a:	b0 e0       	ldi	r27, 0x00	; 0
    4f0c:	ea e8       	ldi	r30, 0x8A	; 138
    4f0e:	f7 e2       	ldi	r31, 0x27	; 39
    4f10:	0c 94 40 33 	jmp	0x6680	; 0x6680 <__prologue_saves__+0x18>

    static unsigned long lastSensorReadTime = millis();
    4f14:	80 e6       	ldi	r24, 0x60	; 96
    4f16:	95 e0       	ldi	r25, 0x05	; 5
    4f18:	fc 01       	movw	r30, r24
    4f1a:	80 81       	ld	r24, Z
    4f1c:	88 23       	and	r24, r24
    4f1e:	81 f4       	brne	.+32     	; 0x4f40 <_Z11AsyncDoWorkv+0x38>
    4f20:	12 d7       	rcall	.+3620   	; 0x5d46 <millis>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4f2a:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4f2e:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4f32:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    4f36:	80 e6       	ldi	r24, 0x60	; 96
    4f38:	95 e0       	ldi	r25, 0x05	; 5
    4f3a:	21 e0       	ldi	r18, 0x01	; 1
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	20 83       	st	Z, r18

    if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    4f40:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZN7Globals6TheLCDE>
    4f44:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_ZN7Globals6TheLCDE+0x1>
    4f48:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN7LCDBase14DetectKeyPressEv>
    4f4c:	98 2f       	mov	r25, r24
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	94 30       	cpi	r25, 0x04	; 4
    4f52:	09 f0       	breq	.+2      	; 0x4f56 <_Z11AsyncDoWorkv+0x4e>
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	88 23       	and	r24, r24
    4f58:	91 f0       	breq	.+36     	; 0x4f7e <_Z11AsyncDoWorkv+0x76>
        Serial.println(F("[Selelct] Pressed"));
    4f5a:	83 e4       	ldi	r24, 0x43	; 67
    4f5c:	94 e0       	ldi	r25, 0x04	; 4
    4f5e:	bc 01       	movw	r22, r24
    4f60:	8c e6       	ldi	r24, 0x6C	; 108
    4f62:	95 e0       	ldi	r25, 0x05	; 5
    4f64:	d6 d4       	rcall	.+2476   	; 0x5912 <_ZN5Print7printlnEPK19__FlashStringHelper>
        SwitchSensors();
    4f66:	ad de       	rcall	.-678    	; 0x4cc2 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    4f68:	ee d6       	rcall	.+3548   	; 0x5d46 <millis>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4f72:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4f76:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4f7a:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }

    if(millis() - lastSensorReadTime > SensorReadInterval) {
    4f7e:	e3 d6       	rcall	.+3526   	; 0x5d46 <millis>
    4f80:	9b 01       	movw	r18, r22
    4f82:	ac 01       	movw	r20, r24
    4f84:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4f88:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4f8c:	a0 91 6a 05 	lds	r26, 0x056A	; 0x80056a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4f90:	b0 91 6b 05 	lds	r27, 0x056B	; 0x80056b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    4f94:	79 01       	movw	r14, r18
    4f96:	8a 01       	movw	r16, r20
    4f98:	e8 1a       	sub	r14, r24
    4f9a:	f9 0a       	sbc	r15, r25
    4f9c:	0a 0b       	sbc	r16, r26
    4f9e:	1b 0b       	sbc	r17, r27
    4fa0:	d8 01       	movw	r26, r16
    4fa2:	c7 01       	movw	r24, r14
    4fa4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    4fa8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    4fac:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    4fb0:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    4fb4:	61 e0       	ldi	r22, 0x01	; 1
    4fb6:	28 17       	cp	r18, r24
    4fb8:	39 07       	cpc	r19, r25
    4fba:	4a 07       	cpc	r20, r26
    4fbc:	5b 07       	cpc	r21, r27
    4fbe:	08 f0       	brcs	.+2      	; 0x4fc2 <_Z11AsyncDoWorkv+0xba>
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	66 23       	and	r22, r22
    4fc4:	61 f0       	breq	.+24     	; 0x4fde <_Z11AsyncDoWorkv+0xd6>

        SwitchSensors();
    4fc6:	7d de       	rcall	.-774    	; 0x4cc2 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    4fc8:	be d6       	rcall	.+3452   	; 0x5d46 <millis>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4fd2:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4fd6:	a0 93 6a 05 	sts	0x056A, r26	; 0x80056a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4fda:	b0 93 6b 05 	sts	0x056B, r27	; 0x80056b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    if(ReadingTDS) {
    4fde:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_ZN7Globals10ReadingTDSE>
    4fe2:	88 23       	and	r24, r24
    4fe4:	39 f0       	breq	.+14     	; 0x4ff4 <_Z11AsyncDoWorkv+0xec>
        TheTDSSensor.CalculateTDS();
    4fe6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN7Globals12TheTDSSensorE>
    4fea:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <_ZN7Globals12TheTDSSensorE+0x1>
    4fee:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <_ZN9TDSSensor12CalculateTDSEv>
    4ff2:	06 c0       	rjmp	.+12     	; 0x5000 <_Z11AsyncDoWorkv+0xf8>
    }
    else {
        ThePHSensor.CalculatePH();
    4ff4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN7Globals11ThePHSensorE>
    4ff8:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN7Globals11ThePHSensorE+0x1>
    4ffc:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN8PHSensor11CalculatePHEv>
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    5000:	e6 e0       	ldi	r30, 0x06	; 6
    5002:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__epilogue_restores__+0x18>

00005006 <_Z41__static_initialization_and_destruction_0ii>:
    5006:	a4 e0       	ldi	r26, 0x04	; 4
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	e9 e0       	ldi	r30, 0x09	; 9
    500c:	f8 e2       	ldi	r31, 0x28	; 40
    500e:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    5012:	9a 83       	std	Y+2, r25	; 0x02
    5014:	89 83       	std	Y+1, r24	; 0x01
    5016:	7c 83       	std	Y+4, r23	; 0x04
    5018:	6b 83       	std	Y+3, r22	; 0x03
    501a:	89 81       	ldd	r24, Y+1	; 0x01
    501c:	9a 81       	ldd	r25, Y+2	; 0x02
    501e:	01 97       	sbiw	r24, 0x01	; 1
    5020:	41 f4       	brne	.+16     	; 0x5032 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    5022:	8b 81       	ldd	r24, Y+3	; 0x03
    5024:	9c 81       	ldd	r25, Y+4	; 0x04
    5026:	01 96       	adiw	r24, 0x01	; 1
    5028:	21 f4       	brne	.+8      	; 0x5032 <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    502a:	82 eb       	ldi	r24, 0xB2	; 178
    502c:	94 e0       	ldi	r25, 0x04	; 4
    502e:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN11SimpleTimerC1Ev>
        ThePHSensor.CalculatePH();
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    5032:	24 96       	adiw	r28, 0x04	; 4
    5034:	e2 e0       	ldi	r30, 0x02	; 2
    5036:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

0000503a <_GLOBAL__sub_I__asyncTimer>:
    503a:	a0 e0       	ldi	r26, 0x00	; 0
    503c:	b0 e0       	ldi	r27, 0x00	; 0
    503e:	e3 e2       	ldi	r30, 0x23	; 35
    5040:	f8 e2       	ldi	r31, 0x28	; 40
    5042:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__prologue_saves__+0x20>
    5046:	6f ef       	ldi	r22, 0xFF	; 255
    5048:	7f ef       	ldi	r23, 0xFF	; 255
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	db df       	rcall	.-74     	; 0x5006 <_Z41__static_initialization_and_destruction_0ii>
    5050:	e2 e0       	ldi	r30, 0x02	; 2
    5052:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__epilogue_restores__+0x20>

00005056 <__subsf3>:
    5056:	50 58       	subi	r21, 0x80	; 128

00005058 <__addsf3>:
    5058:	bb 27       	eor	r27, r27
    505a:	aa 27       	eor	r26, r26
    505c:	0e d0       	rcall	.+28     	; 0x507a <__addsf3x>
    505e:	75 c1       	rjmp	.+746    	; 0x534a <__fp_round>
    5060:	66 d1       	rcall	.+716    	; 0x532e <__fp_pscA>
    5062:	30 f0       	brcs	.+12     	; 0x5070 <__addsf3+0x18>
    5064:	6b d1       	rcall	.+726    	; 0x533c <__fp_pscB>
    5066:	20 f0       	brcs	.+8      	; 0x5070 <__addsf3+0x18>
    5068:	31 f4       	brne	.+12     	; 0x5076 <__addsf3+0x1e>
    506a:	9f 3f       	cpi	r25, 0xFF	; 255
    506c:	11 f4       	brne	.+4      	; 0x5072 <__addsf3+0x1a>
    506e:	1e f4       	brtc	.+6      	; 0x5076 <__addsf3+0x1e>
    5070:	5b c1       	rjmp	.+694    	; 0x5328 <__fp_nan>
    5072:	0e f4       	brtc	.+2      	; 0x5076 <__addsf3+0x1e>
    5074:	e0 95       	com	r30
    5076:	e7 fb       	bst	r30, 7
    5078:	51 c1       	rjmp	.+674    	; 0x531c <__fp_inf>

0000507a <__addsf3x>:
    507a:	e9 2f       	mov	r30, r25
    507c:	77 d1       	rcall	.+750    	; 0x536c <__fp_split3>
    507e:	80 f3       	brcs	.-32     	; 0x5060 <__addsf3+0x8>
    5080:	ba 17       	cp	r27, r26
    5082:	62 07       	cpc	r22, r18
    5084:	73 07       	cpc	r23, r19
    5086:	84 07       	cpc	r24, r20
    5088:	95 07       	cpc	r25, r21
    508a:	18 f0       	brcs	.+6      	; 0x5092 <__addsf3x+0x18>
    508c:	71 f4       	brne	.+28     	; 0x50aa <__addsf3x+0x30>
    508e:	9e f5       	brtc	.+102    	; 0x50f6 <__addsf3x+0x7c>
    5090:	8f c1       	rjmp	.+798    	; 0x53b0 <__fp_zero>
    5092:	0e f4       	brtc	.+2      	; 0x5096 <__addsf3x+0x1c>
    5094:	e0 95       	com	r30
    5096:	0b 2e       	mov	r0, r27
    5098:	ba 2f       	mov	r27, r26
    509a:	a0 2d       	mov	r26, r0
    509c:	0b 01       	movw	r0, r22
    509e:	b9 01       	movw	r22, r18
    50a0:	90 01       	movw	r18, r0
    50a2:	0c 01       	movw	r0, r24
    50a4:	ca 01       	movw	r24, r20
    50a6:	a0 01       	movw	r20, r0
    50a8:	11 24       	eor	r1, r1
    50aa:	ff 27       	eor	r31, r31
    50ac:	59 1b       	sub	r21, r25
    50ae:	99 f0       	breq	.+38     	; 0x50d6 <__addsf3x+0x5c>
    50b0:	59 3f       	cpi	r21, 0xF9	; 249
    50b2:	50 f4       	brcc	.+20     	; 0x50c8 <__addsf3x+0x4e>
    50b4:	50 3e       	cpi	r21, 0xE0	; 224
    50b6:	68 f1       	brcs	.+90     	; 0x5112 <__addsf3x+0x98>
    50b8:	1a 16       	cp	r1, r26
    50ba:	f0 40       	sbci	r31, 0x00	; 0
    50bc:	a2 2f       	mov	r26, r18
    50be:	23 2f       	mov	r18, r19
    50c0:	34 2f       	mov	r19, r20
    50c2:	44 27       	eor	r20, r20
    50c4:	58 5f       	subi	r21, 0xF8	; 248
    50c6:	f3 cf       	rjmp	.-26     	; 0x50ae <__addsf3x+0x34>
    50c8:	46 95       	lsr	r20
    50ca:	37 95       	ror	r19
    50cc:	27 95       	ror	r18
    50ce:	a7 95       	ror	r26
    50d0:	f0 40       	sbci	r31, 0x00	; 0
    50d2:	53 95       	inc	r21
    50d4:	c9 f7       	brne	.-14     	; 0x50c8 <__addsf3x+0x4e>
    50d6:	7e f4       	brtc	.+30     	; 0x50f6 <__addsf3x+0x7c>
    50d8:	1f 16       	cp	r1, r31
    50da:	ba 0b       	sbc	r27, r26
    50dc:	62 0b       	sbc	r22, r18
    50de:	73 0b       	sbc	r23, r19
    50e0:	84 0b       	sbc	r24, r20
    50e2:	ba f0       	brmi	.+46     	; 0x5112 <__addsf3x+0x98>
    50e4:	91 50       	subi	r25, 0x01	; 1
    50e6:	a1 f0       	breq	.+40     	; 0x5110 <__addsf3x+0x96>
    50e8:	ff 0f       	add	r31, r31
    50ea:	bb 1f       	adc	r27, r27
    50ec:	66 1f       	adc	r22, r22
    50ee:	77 1f       	adc	r23, r23
    50f0:	88 1f       	adc	r24, r24
    50f2:	c2 f7       	brpl	.-16     	; 0x50e4 <__addsf3x+0x6a>
    50f4:	0e c0       	rjmp	.+28     	; 0x5112 <__addsf3x+0x98>
    50f6:	ba 0f       	add	r27, r26
    50f8:	62 1f       	adc	r22, r18
    50fa:	73 1f       	adc	r23, r19
    50fc:	84 1f       	adc	r24, r20
    50fe:	48 f4       	brcc	.+18     	; 0x5112 <__addsf3x+0x98>
    5100:	87 95       	ror	r24
    5102:	77 95       	ror	r23
    5104:	67 95       	ror	r22
    5106:	b7 95       	ror	r27
    5108:	f7 95       	ror	r31
    510a:	9e 3f       	cpi	r25, 0xFE	; 254
    510c:	08 f0       	brcs	.+2      	; 0x5110 <__addsf3x+0x96>
    510e:	b3 cf       	rjmp	.-154    	; 0x5076 <__addsf3+0x1e>
    5110:	93 95       	inc	r25
    5112:	88 0f       	add	r24, r24
    5114:	08 f0       	brcs	.+2      	; 0x5118 <__addsf3x+0x9e>
    5116:	99 27       	eor	r25, r25
    5118:	ee 0f       	add	r30, r30
    511a:	97 95       	ror	r25
    511c:	87 95       	ror	r24
    511e:	08 95       	ret

00005120 <__cmpsf2>:
    5120:	d9 d0       	rcall	.+434    	; 0x52d4 <__fp_cmp>
    5122:	08 f4       	brcc	.+2      	; 0x5126 <__cmpsf2+0x6>
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	08 95       	ret

00005128 <__divsf3>:
    5128:	0c d0       	rcall	.+24     	; 0x5142 <__divsf3x>
    512a:	0f c1       	rjmp	.+542    	; 0x534a <__fp_round>
    512c:	07 d1       	rcall	.+526    	; 0x533c <__fp_pscB>
    512e:	40 f0       	brcs	.+16     	; 0x5140 <__divsf3+0x18>
    5130:	fe d0       	rcall	.+508    	; 0x532e <__fp_pscA>
    5132:	30 f0       	brcs	.+12     	; 0x5140 <__divsf3+0x18>
    5134:	21 f4       	brne	.+8      	; 0x513e <__divsf3+0x16>
    5136:	5f 3f       	cpi	r21, 0xFF	; 255
    5138:	19 f0       	breq	.+6      	; 0x5140 <__divsf3+0x18>
    513a:	f0 c0       	rjmp	.+480    	; 0x531c <__fp_inf>
    513c:	51 11       	cpse	r21, r1
    513e:	39 c1       	rjmp	.+626    	; 0x53b2 <__fp_szero>
    5140:	f3 c0       	rjmp	.+486    	; 0x5328 <__fp_nan>

00005142 <__divsf3x>:
    5142:	14 d1       	rcall	.+552    	; 0x536c <__fp_split3>
    5144:	98 f3       	brcs	.-26     	; 0x512c <__divsf3+0x4>

00005146 <__divsf3_pse>:
    5146:	99 23       	and	r25, r25
    5148:	c9 f3       	breq	.-14     	; 0x513c <__divsf3+0x14>
    514a:	55 23       	and	r21, r21
    514c:	b1 f3       	breq	.-20     	; 0x513a <__divsf3+0x12>
    514e:	95 1b       	sub	r25, r21
    5150:	55 0b       	sbc	r21, r21
    5152:	bb 27       	eor	r27, r27
    5154:	aa 27       	eor	r26, r26
    5156:	62 17       	cp	r22, r18
    5158:	73 07       	cpc	r23, r19
    515a:	84 07       	cpc	r24, r20
    515c:	38 f0       	brcs	.+14     	; 0x516c <__divsf3_pse+0x26>
    515e:	9f 5f       	subi	r25, 0xFF	; 255
    5160:	5f 4f       	sbci	r21, 0xFF	; 255
    5162:	22 0f       	add	r18, r18
    5164:	33 1f       	adc	r19, r19
    5166:	44 1f       	adc	r20, r20
    5168:	aa 1f       	adc	r26, r26
    516a:	a9 f3       	breq	.-22     	; 0x5156 <__divsf3_pse+0x10>
    516c:	33 d0       	rcall	.+102    	; 0x51d4 <__divsf3_pse+0x8e>
    516e:	0e 2e       	mov	r0, r30
    5170:	3a f0       	brmi	.+14     	; 0x5180 <__divsf3_pse+0x3a>
    5172:	e0 e8       	ldi	r30, 0x80	; 128
    5174:	30 d0       	rcall	.+96     	; 0x51d6 <__divsf3_pse+0x90>
    5176:	91 50       	subi	r25, 0x01	; 1
    5178:	50 40       	sbci	r21, 0x00	; 0
    517a:	e6 95       	lsr	r30
    517c:	00 1c       	adc	r0, r0
    517e:	ca f7       	brpl	.-14     	; 0x5172 <__divsf3_pse+0x2c>
    5180:	29 d0       	rcall	.+82     	; 0x51d4 <__divsf3_pse+0x8e>
    5182:	fe 2f       	mov	r31, r30
    5184:	27 d0       	rcall	.+78     	; 0x51d4 <__divsf3_pse+0x8e>
    5186:	66 0f       	add	r22, r22
    5188:	77 1f       	adc	r23, r23
    518a:	88 1f       	adc	r24, r24
    518c:	bb 1f       	adc	r27, r27
    518e:	26 17       	cp	r18, r22
    5190:	37 07       	cpc	r19, r23
    5192:	48 07       	cpc	r20, r24
    5194:	ab 07       	cpc	r26, r27
    5196:	b0 e8       	ldi	r27, 0x80	; 128
    5198:	09 f0       	breq	.+2      	; 0x519c <__divsf3_pse+0x56>
    519a:	bb 0b       	sbc	r27, r27
    519c:	80 2d       	mov	r24, r0
    519e:	bf 01       	movw	r22, r30
    51a0:	ff 27       	eor	r31, r31
    51a2:	93 58       	subi	r25, 0x83	; 131
    51a4:	5f 4f       	sbci	r21, 0xFF	; 255
    51a6:	2a f0       	brmi	.+10     	; 0x51b2 <__divsf3_pse+0x6c>
    51a8:	9e 3f       	cpi	r25, 0xFE	; 254
    51aa:	51 05       	cpc	r21, r1
    51ac:	68 f0       	brcs	.+26     	; 0x51c8 <__divsf3_pse+0x82>
    51ae:	b6 c0       	rjmp	.+364    	; 0x531c <__fp_inf>
    51b0:	00 c1       	rjmp	.+512    	; 0x53b2 <__fp_szero>
    51b2:	5f 3f       	cpi	r21, 0xFF	; 255
    51b4:	ec f3       	brlt	.-6      	; 0x51b0 <__divsf3_pse+0x6a>
    51b6:	98 3e       	cpi	r25, 0xE8	; 232
    51b8:	dc f3       	brlt	.-10     	; 0x51b0 <__divsf3_pse+0x6a>
    51ba:	86 95       	lsr	r24
    51bc:	77 95       	ror	r23
    51be:	67 95       	ror	r22
    51c0:	b7 95       	ror	r27
    51c2:	f7 95       	ror	r31
    51c4:	9f 5f       	subi	r25, 0xFF	; 255
    51c6:	c9 f7       	brne	.-14     	; 0x51ba <__divsf3_pse+0x74>
    51c8:	88 0f       	add	r24, r24
    51ca:	91 1d       	adc	r25, r1
    51cc:	96 95       	lsr	r25
    51ce:	87 95       	ror	r24
    51d0:	97 f9       	bld	r25, 7
    51d2:	08 95       	ret
    51d4:	e1 e0       	ldi	r30, 0x01	; 1
    51d6:	66 0f       	add	r22, r22
    51d8:	77 1f       	adc	r23, r23
    51da:	88 1f       	adc	r24, r24
    51dc:	bb 1f       	adc	r27, r27
    51de:	62 17       	cp	r22, r18
    51e0:	73 07       	cpc	r23, r19
    51e2:	84 07       	cpc	r24, r20
    51e4:	ba 07       	cpc	r27, r26
    51e6:	20 f0       	brcs	.+8      	; 0x51f0 <__divsf3_pse+0xaa>
    51e8:	62 1b       	sub	r22, r18
    51ea:	73 0b       	sbc	r23, r19
    51ec:	84 0b       	sbc	r24, r20
    51ee:	ba 0b       	sbc	r27, r26
    51f0:	ee 1f       	adc	r30, r30
    51f2:	88 f7       	brcc	.-30     	; 0x51d6 <__divsf3_pse+0x90>
    51f4:	e0 95       	com	r30
    51f6:	08 95       	ret

000051f8 <__fixsfsi>:
    51f8:	04 d0       	rcall	.+8      	; 0x5202 <__fixunssfsi>
    51fa:	68 94       	set
    51fc:	b1 11       	cpse	r27, r1
    51fe:	d9 c0       	rjmp	.+434    	; 0x53b2 <__fp_szero>
    5200:	08 95       	ret

00005202 <__fixunssfsi>:
    5202:	bc d0       	rcall	.+376    	; 0x537c <__fp_splitA>
    5204:	88 f0       	brcs	.+34     	; 0x5228 <__fixunssfsi+0x26>
    5206:	9f 57       	subi	r25, 0x7F	; 127
    5208:	90 f0       	brcs	.+36     	; 0x522e <__fixunssfsi+0x2c>
    520a:	b9 2f       	mov	r27, r25
    520c:	99 27       	eor	r25, r25
    520e:	b7 51       	subi	r27, 0x17	; 23
    5210:	a0 f0       	brcs	.+40     	; 0x523a <__fixunssfsi+0x38>
    5212:	d1 f0       	breq	.+52     	; 0x5248 <__fixunssfsi+0x46>
    5214:	66 0f       	add	r22, r22
    5216:	77 1f       	adc	r23, r23
    5218:	88 1f       	adc	r24, r24
    521a:	99 1f       	adc	r25, r25
    521c:	1a f0       	brmi	.+6      	; 0x5224 <__fixunssfsi+0x22>
    521e:	ba 95       	dec	r27
    5220:	c9 f7       	brne	.-14     	; 0x5214 <__fixunssfsi+0x12>
    5222:	12 c0       	rjmp	.+36     	; 0x5248 <__fixunssfsi+0x46>
    5224:	b1 30       	cpi	r27, 0x01	; 1
    5226:	81 f0       	breq	.+32     	; 0x5248 <__fixunssfsi+0x46>
    5228:	c3 d0       	rcall	.+390    	; 0x53b0 <__fp_zero>
    522a:	b1 e0       	ldi	r27, 0x01	; 1
    522c:	08 95       	ret
    522e:	c0 c0       	rjmp	.+384    	; 0x53b0 <__fp_zero>
    5230:	67 2f       	mov	r22, r23
    5232:	78 2f       	mov	r23, r24
    5234:	88 27       	eor	r24, r24
    5236:	b8 5f       	subi	r27, 0xF8	; 248
    5238:	39 f0       	breq	.+14     	; 0x5248 <__fixunssfsi+0x46>
    523a:	b9 3f       	cpi	r27, 0xF9	; 249
    523c:	cc f3       	brlt	.-14     	; 0x5230 <__fixunssfsi+0x2e>
    523e:	86 95       	lsr	r24
    5240:	77 95       	ror	r23
    5242:	67 95       	ror	r22
    5244:	b3 95       	inc	r27
    5246:	d9 f7       	brne	.-10     	; 0x523e <__fixunssfsi+0x3c>
    5248:	3e f4       	brtc	.+14     	; 0x5258 <__fixunssfsi+0x56>
    524a:	90 95       	com	r25
    524c:	80 95       	com	r24
    524e:	70 95       	com	r23
    5250:	61 95       	neg	r22
    5252:	7f 4f       	sbci	r23, 0xFF	; 255
    5254:	8f 4f       	sbci	r24, 0xFF	; 255
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	08 95       	ret

0000525a <__floatunsisf>:
    525a:	e8 94       	clt
    525c:	09 c0       	rjmp	.+18     	; 0x5270 <__floatsisf+0x12>

0000525e <__floatsisf>:
    525e:	97 fb       	bst	r25, 7
    5260:	3e f4       	brtc	.+14     	; 0x5270 <__floatsisf+0x12>
    5262:	90 95       	com	r25
    5264:	80 95       	com	r24
    5266:	70 95       	com	r23
    5268:	61 95       	neg	r22
    526a:	7f 4f       	sbci	r23, 0xFF	; 255
    526c:	8f 4f       	sbci	r24, 0xFF	; 255
    526e:	9f 4f       	sbci	r25, 0xFF	; 255
    5270:	99 23       	and	r25, r25
    5272:	a9 f0       	breq	.+42     	; 0x529e <__floatsisf+0x40>
    5274:	f9 2f       	mov	r31, r25
    5276:	96 e9       	ldi	r25, 0x96	; 150
    5278:	bb 27       	eor	r27, r27
    527a:	93 95       	inc	r25
    527c:	f6 95       	lsr	r31
    527e:	87 95       	ror	r24
    5280:	77 95       	ror	r23
    5282:	67 95       	ror	r22
    5284:	b7 95       	ror	r27
    5286:	f1 11       	cpse	r31, r1
    5288:	f8 cf       	rjmp	.-16     	; 0x527a <__floatsisf+0x1c>
    528a:	fa f4       	brpl	.+62     	; 0x52ca <__floatsisf+0x6c>
    528c:	bb 0f       	add	r27, r27
    528e:	11 f4       	brne	.+4      	; 0x5294 <__floatsisf+0x36>
    5290:	60 ff       	sbrs	r22, 0
    5292:	1b c0       	rjmp	.+54     	; 0x52ca <__floatsisf+0x6c>
    5294:	6f 5f       	subi	r22, 0xFF	; 255
    5296:	7f 4f       	sbci	r23, 0xFF	; 255
    5298:	8f 4f       	sbci	r24, 0xFF	; 255
    529a:	9f 4f       	sbci	r25, 0xFF	; 255
    529c:	16 c0       	rjmp	.+44     	; 0x52ca <__floatsisf+0x6c>
    529e:	88 23       	and	r24, r24
    52a0:	11 f0       	breq	.+4      	; 0x52a6 <__floatsisf+0x48>
    52a2:	96 e9       	ldi	r25, 0x96	; 150
    52a4:	11 c0       	rjmp	.+34     	; 0x52c8 <__floatsisf+0x6a>
    52a6:	77 23       	and	r23, r23
    52a8:	21 f0       	breq	.+8      	; 0x52b2 <__floatsisf+0x54>
    52aa:	9e e8       	ldi	r25, 0x8E	; 142
    52ac:	87 2f       	mov	r24, r23
    52ae:	76 2f       	mov	r23, r22
    52b0:	05 c0       	rjmp	.+10     	; 0x52bc <__floatsisf+0x5e>
    52b2:	66 23       	and	r22, r22
    52b4:	71 f0       	breq	.+28     	; 0x52d2 <__floatsisf+0x74>
    52b6:	96 e8       	ldi	r25, 0x86	; 134
    52b8:	86 2f       	mov	r24, r22
    52ba:	70 e0       	ldi	r23, 0x00	; 0
    52bc:	60 e0       	ldi	r22, 0x00	; 0
    52be:	2a f0       	brmi	.+10     	; 0x52ca <__floatsisf+0x6c>
    52c0:	9a 95       	dec	r25
    52c2:	66 0f       	add	r22, r22
    52c4:	77 1f       	adc	r23, r23
    52c6:	88 1f       	adc	r24, r24
    52c8:	da f7       	brpl	.-10     	; 0x52c0 <__floatsisf+0x62>
    52ca:	88 0f       	add	r24, r24
    52cc:	96 95       	lsr	r25
    52ce:	87 95       	ror	r24
    52d0:	97 f9       	bld	r25, 7
    52d2:	08 95       	ret

000052d4 <__fp_cmp>:
    52d4:	99 0f       	add	r25, r25
    52d6:	00 08       	sbc	r0, r0
    52d8:	55 0f       	add	r21, r21
    52da:	aa 0b       	sbc	r26, r26
    52dc:	e0 e8       	ldi	r30, 0x80	; 128
    52de:	fe ef       	ldi	r31, 0xFE	; 254
    52e0:	16 16       	cp	r1, r22
    52e2:	17 06       	cpc	r1, r23
    52e4:	e8 07       	cpc	r30, r24
    52e6:	f9 07       	cpc	r31, r25
    52e8:	c0 f0       	brcs	.+48     	; 0x531a <__fp_cmp+0x46>
    52ea:	12 16       	cp	r1, r18
    52ec:	13 06       	cpc	r1, r19
    52ee:	e4 07       	cpc	r30, r20
    52f0:	f5 07       	cpc	r31, r21
    52f2:	98 f0       	brcs	.+38     	; 0x531a <__fp_cmp+0x46>
    52f4:	62 1b       	sub	r22, r18
    52f6:	73 0b       	sbc	r23, r19
    52f8:	84 0b       	sbc	r24, r20
    52fa:	95 0b       	sbc	r25, r21
    52fc:	39 f4       	brne	.+14     	; 0x530c <__fp_cmp+0x38>
    52fe:	0a 26       	eor	r0, r26
    5300:	61 f0       	breq	.+24     	; 0x531a <__fp_cmp+0x46>
    5302:	23 2b       	or	r18, r19
    5304:	24 2b       	or	r18, r20
    5306:	25 2b       	or	r18, r21
    5308:	21 f4       	brne	.+8      	; 0x5312 <__fp_cmp+0x3e>
    530a:	08 95       	ret
    530c:	0a 26       	eor	r0, r26
    530e:	09 f4       	brne	.+2      	; 0x5312 <__fp_cmp+0x3e>
    5310:	a1 40       	sbci	r26, 0x01	; 1
    5312:	a6 95       	lsr	r26
    5314:	8f ef       	ldi	r24, 0xFF	; 255
    5316:	81 1d       	adc	r24, r1
    5318:	81 1d       	adc	r24, r1
    531a:	08 95       	ret

0000531c <__fp_inf>:
    531c:	97 f9       	bld	r25, 7
    531e:	9f 67       	ori	r25, 0x7F	; 127
    5320:	80 e8       	ldi	r24, 0x80	; 128
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	60 e0       	ldi	r22, 0x00	; 0
    5326:	08 95       	ret

00005328 <__fp_nan>:
    5328:	9f ef       	ldi	r25, 0xFF	; 255
    532a:	80 ec       	ldi	r24, 0xC0	; 192
    532c:	08 95       	ret

0000532e <__fp_pscA>:
    532e:	00 24       	eor	r0, r0
    5330:	0a 94       	dec	r0
    5332:	16 16       	cp	r1, r22
    5334:	17 06       	cpc	r1, r23
    5336:	18 06       	cpc	r1, r24
    5338:	09 06       	cpc	r0, r25
    533a:	08 95       	ret

0000533c <__fp_pscB>:
    533c:	00 24       	eor	r0, r0
    533e:	0a 94       	dec	r0
    5340:	12 16       	cp	r1, r18
    5342:	13 06       	cpc	r1, r19
    5344:	14 06       	cpc	r1, r20
    5346:	05 06       	cpc	r0, r21
    5348:	08 95       	ret

0000534a <__fp_round>:
    534a:	09 2e       	mov	r0, r25
    534c:	03 94       	inc	r0
    534e:	00 0c       	add	r0, r0
    5350:	11 f4       	brne	.+4      	; 0x5356 <__fp_round+0xc>
    5352:	88 23       	and	r24, r24
    5354:	52 f0       	brmi	.+20     	; 0x536a <__fp_round+0x20>
    5356:	bb 0f       	add	r27, r27
    5358:	40 f4       	brcc	.+16     	; 0x536a <__fp_round+0x20>
    535a:	bf 2b       	or	r27, r31
    535c:	11 f4       	brne	.+4      	; 0x5362 <__fp_round+0x18>
    535e:	60 ff       	sbrs	r22, 0
    5360:	04 c0       	rjmp	.+8      	; 0x536a <__fp_round+0x20>
    5362:	6f 5f       	subi	r22, 0xFF	; 255
    5364:	7f 4f       	sbci	r23, 0xFF	; 255
    5366:	8f 4f       	sbci	r24, 0xFF	; 255
    5368:	9f 4f       	sbci	r25, 0xFF	; 255
    536a:	08 95       	ret

0000536c <__fp_split3>:
    536c:	57 fd       	sbrc	r21, 7
    536e:	90 58       	subi	r25, 0x80	; 128
    5370:	44 0f       	add	r20, r20
    5372:	55 1f       	adc	r21, r21
    5374:	59 f0       	breq	.+22     	; 0x538c <__fp_splitA+0x10>
    5376:	5f 3f       	cpi	r21, 0xFF	; 255
    5378:	71 f0       	breq	.+28     	; 0x5396 <__fp_splitA+0x1a>
    537a:	47 95       	ror	r20

0000537c <__fp_splitA>:
    537c:	88 0f       	add	r24, r24
    537e:	97 fb       	bst	r25, 7
    5380:	99 1f       	adc	r25, r25
    5382:	61 f0       	breq	.+24     	; 0x539c <__fp_splitA+0x20>
    5384:	9f 3f       	cpi	r25, 0xFF	; 255
    5386:	79 f0       	breq	.+30     	; 0x53a6 <__fp_splitA+0x2a>
    5388:	87 95       	ror	r24
    538a:	08 95       	ret
    538c:	12 16       	cp	r1, r18
    538e:	13 06       	cpc	r1, r19
    5390:	14 06       	cpc	r1, r20
    5392:	55 1f       	adc	r21, r21
    5394:	f2 cf       	rjmp	.-28     	; 0x537a <__fp_split3+0xe>
    5396:	46 95       	lsr	r20
    5398:	f1 df       	rcall	.-30     	; 0x537c <__fp_splitA>
    539a:	08 c0       	rjmp	.+16     	; 0x53ac <__fp_splitA+0x30>
    539c:	16 16       	cp	r1, r22
    539e:	17 06       	cpc	r1, r23
    53a0:	18 06       	cpc	r1, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	f1 cf       	rjmp	.-30     	; 0x5388 <__fp_splitA+0xc>
    53a6:	86 95       	lsr	r24
    53a8:	71 05       	cpc	r23, r1
    53aa:	61 05       	cpc	r22, r1
    53ac:	08 94       	sec
    53ae:	08 95       	ret

000053b0 <__fp_zero>:
    53b0:	e8 94       	clt

000053b2 <__fp_szero>:
    53b2:	bb 27       	eor	r27, r27
    53b4:	66 27       	eor	r22, r22
    53b6:	77 27       	eor	r23, r23
    53b8:	cb 01       	movw	r24, r22
    53ba:	97 f9       	bld	r25, 7
    53bc:	08 95       	ret

000053be <__gesf2>:
    53be:	8a df       	rcall	.-236    	; 0x52d4 <__fp_cmp>
    53c0:	08 f4       	brcc	.+2      	; 0x53c4 <__gesf2+0x6>
    53c2:	8f ef       	ldi	r24, 0xFF	; 255
    53c4:	08 95       	ret

000053c6 <__mulsf3>:
    53c6:	0b d0       	rcall	.+22     	; 0x53de <__mulsf3x>
    53c8:	c0 cf       	rjmp	.-128    	; 0x534a <__fp_round>
    53ca:	b1 df       	rcall	.-158    	; 0x532e <__fp_pscA>
    53cc:	28 f0       	brcs	.+10     	; 0x53d8 <__mulsf3+0x12>
    53ce:	b6 df       	rcall	.-148    	; 0x533c <__fp_pscB>
    53d0:	18 f0       	brcs	.+6      	; 0x53d8 <__mulsf3+0x12>
    53d2:	95 23       	and	r25, r21
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <__mulsf3+0x12>
    53d6:	a2 cf       	rjmp	.-188    	; 0x531c <__fp_inf>
    53d8:	a7 cf       	rjmp	.-178    	; 0x5328 <__fp_nan>
    53da:	11 24       	eor	r1, r1
    53dc:	ea cf       	rjmp	.-44     	; 0x53b2 <__fp_szero>

000053de <__mulsf3x>:
    53de:	c6 df       	rcall	.-116    	; 0x536c <__fp_split3>
    53e0:	a0 f3       	brcs	.-24     	; 0x53ca <__mulsf3+0x4>

000053e2 <__mulsf3_pse>:
    53e2:	95 9f       	mul	r25, r21
    53e4:	d1 f3       	breq	.-12     	; 0x53da <__mulsf3+0x14>
    53e6:	95 0f       	add	r25, r21
    53e8:	50 e0       	ldi	r21, 0x00	; 0
    53ea:	55 1f       	adc	r21, r21
    53ec:	62 9f       	mul	r22, r18
    53ee:	f0 01       	movw	r30, r0
    53f0:	72 9f       	mul	r23, r18
    53f2:	bb 27       	eor	r27, r27
    53f4:	f0 0d       	add	r31, r0
    53f6:	b1 1d       	adc	r27, r1
    53f8:	63 9f       	mul	r22, r19
    53fa:	aa 27       	eor	r26, r26
    53fc:	f0 0d       	add	r31, r0
    53fe:	b1 1d       	adc	r27, r1
    5400:	aa 1f       	adc	r26, r26
    5402:	64 9f       	mul	r22, r20
    5404:	66 27       	eor	r22, r22
    5406:	b0 0d       	add	r27, r0
    5408:	a1 1d       	adc	r26, r1
    540a:	66 1f       	adc	r22, r22
    540c:	82 9f       	mul	r24, r18
    540e:	22 27       	eor	r18, r18
    5410:	b0 0d       	add	r27, r0
    5412:	a1 1d       	adc	r26, r1
    5414:	62 1f       	adc	r22, r18
    5416:	73 9f       	mul	r23, r19
    5418:	b0 0d       	add	r27, r0
    541a:	a1 1d       	adc	r26, r1
    541c:	62 1f       	adc	r22, r18
    541e:	83 9f       	mul	r24, r19
    5420:	a0 0d       	add	r26, r0
    5422:	61 1d       	adc	r22, r1
    5424:	22 1f       	adc	r18, r18
    5426:	74 9f       	mul	r23, r20
    5428:	33 27       	eor	r19, r19
    542a:	a0 0d       	add	r26, r0
    542c:	61 1d       	adc	r22, r1
    542e:	23 1f       	adc	r18, r19
    5430:	84 9f       	mul	r24, r20
    5432:	60 0d       	add	r22, r0
    5434:	21 1d       	adc	r18, r1
    5436:	82 2f       	mov	r24, r18
    5438:	76 2f       	mov	r23, r22
    543a:	6a 2f       	mov	r22, r26
    543c:	11 24       	eor	r1, r1
    543e:	9f 57       	subi	r25, 0x7F	; 127
    5440:	50 40       	sbci	r21, 0x00	; 0
    5442:	8a f0       	brmi	.+34     	; 0x5466 <__mulsf3_pse+0x84>
    5444:	e1 f0       	breq	.+56     	; 0x547e <__mulsf3_pse+0x9c>
    5446:	88 23       	and	r24, r24
    5448:	4a f0       	brmi	.+18     	; 0x545c <__mulsf3_pse+0x7a>
    544a:	ee 0f       	add	r30, r30
    544c:	ff 1f       	adc	r31, r31
    544e:	bb 1f       	adc	r27, r27
    5450:	66 1f       	adc	r22, r22
    5452:	77 1f       	adc	r23, r23
    5454:	88 1f       	adc	r24, r24
    5456:	91 50       	subi	r25, 0x01	; 1
    5458:	50 40       	sbci	r21, 0x00	; 0
    545a:	a9 f7       	brne	.-22     	; 0x5446 <__mulsf3_pse+0x64>
    545c:	9e 3f       	cpi	r25, 0xFE	; 254
    545e:	51 05       	cpc	r21, r1
    5460:	70 f0       	brcs	.+28     	; 0x547e <__mulsf3_pse+0x9c>
    5462:	5c cf       	rjmp	.-328    	; 0x531c <__fp_inf>
    5464:	a6 cf       	rjmp	.-180    	; 0x53b2 <__fp_szero>
    5466:	5f 3f       	cpi	r21, 0xFF	; 255
    5468:	ec f3       	brlt	.-6      	; 0x5464 <__mulsf3_pse+0x82>
    546a:	98 3e       	cpi	r25, 0xE8	; 232
    546c:	dc f3       	brlt	.-10     	; 0x5464 <__mulsf3_pse+0x82>
    546e:	86 95       	lsr	r24
    5470:	77 95       	ror	r23
    5472:	67 95       	ror	r22
    5474:	b7 95       	ror	r27
    5476:	f7 95       	ror	r31
    5478:	e7 95       	ror	r30
    547a:	9f 5f       	subi	r25, 0xFF	; 255
    547c:	c1 f7       	brne	.-16     	; 0x546e <__mulsf3_pse+0x8c>
    547e:	fe 2b       	or	r31, r30
    5480:	88 0f       	add	r24, r24
    5482:	91 1d       	adc	r25, r1
    5484:	96 95       	lsr	r25
    5486:	87 95       	ror	r24
    5488:	97 f9       	bld	r25, 7
    548a:	08 95       	ret

0000548c <__unordsf2>:
    548c:	23 df       	rcall	.-442    	; 0x52d4 <__fp_cmp>
    548e:	88 0b       	sbc	r24, r24
    5490:	99 0b       	sbc	r25, r25
    5492:	08 95       	ret

00005494 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    5494:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <abort>

00005498 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5498:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    549a:	91 8d       	ldd	r25, Z+25	; 0x19
    549c:	22 8d       	ldd	r18, Z+26	; 0x1a
    549e:	89 2f       	mov	r24, r25
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	80 5c       	subi	r24, 0xC0	; 192
    54a4:	9f 4f       	sbci	r25, 0xFF	; 255
    54a6:	82 1b       	sub	r24, r18
    54a8:	91 09       	sbc	r25, r1
}
    54aa:	8f 73       	andi	r24, 0x3F	; 63
    54ac:	99 27       	eor	r25, r25
    54ae:	08 95       	ret

000054b0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    54b0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    54b2:	91 8d       	ldd	r25, Z+25	; 0x19
    54b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    54b6:	98 17       	cp	r25, r24
    54b8:	31 f0       	breq	.+12     	; 0x54c6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    54ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    54bc:	e8 0f       	add	r30, r24
    54be:	f1 1d       	adc	r31, r1
    54c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    54c6:	8f ef       	ldi	r24, 0xFF	; 255
    54c8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    54ca:	08 95       	ret

000054cc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    54cc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    54ce:	91 8d       	ldd	r25, Z+25	; 0x19
    54d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    54d2:	98 17       	cp	r25, r24
    54d4:	61 f0       	breq	.+24     	; 0x54ee <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    54d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    54d8:	df 01       	movw	r26, r30
    54da:	a8 0f       	add	r26, r24
    54dc:	b1 1d       	adc	r27, r1
    54de:	5d 96       	adiw	r26, 0x1d	; 29
    54e0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    54e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    54e4:	9f 5f       	subi	r25, 0xFF	; 255
    54e6:	9f 73       	andi	r25, 0x3F	; 63
    54e8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    54f2:	08 95       	ret

000054f4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    54f4:	89 ec       	ldi	r24, 0xC9	; 201
    54f6:	9b e2       	ldi	r25, 0x2B	; 43
    54f8:	89 2b       	or	r24, r25
    54fa:	41 f0       	breq	.+16     	; 0x550c <_Z14serialEventRunv+0x18>
    54fc:	80 e0       	ldi	r24, 0x00	; 0
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	89 2b       	or	r24, r25
    5502:	21 f0       	breq	.+8      	; 0x550c <_Z14serialEventRunv+0x18>
    5504:	46 d1       	rcall	.+652    	; 0x5792 <_Z17Serial0_availablev>
    5506:	81 11       	cpse	r24, r1
    5508:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    550c:	08 95       	ret

0000550e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    550e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5510:	84 8d       	ldd	r24, Z+28	; 0x1c
    5512:	df 01       	movw	r26, r30
    5514:	a8 0f       	add	r26, r24
    5516:	b1 1d       	adc	r27, r1
    5518:	a3 5a       	subi	r26, 0xA3	; 163
    551a:	bf 4f       	sbci	r27, 0xFF	; 255
    551c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    551e:	84 8d       	ldd	r24, Z+28	; 0x1c
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	01 96       	adiw	r24, 0x01	; 1
    5524:	8f 73       	andi	r24, 0x3F	; 63
    5526:	99 27       	eor	r25, r25
    5528:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    552a:	a6 89       	ldd	r26, Z+22	; 0x16
    552c:	b7 89       	ldd	r27, Z+23	; 0x17
    552e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5530:	a0 89       	ldd	r26, Z+16	; 0x10
    5532:	b1 89       	ldd	r27, Z+17	; 0x11
    5534:	8c 91       	ld	r24, X
    5536:	80 64       	ori	r24, 0x40	; 64
    5538:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    553a:	93 8d       	ldd	r25, Z+27	; 0x1b
    553c:	84 8d       	ldd	r24, Z+28	; 0x1c
    553e:	98 13       	cpse	r25, r24
    5540:	06 c0       	rjmp	.+12     	; 0x554e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5542:	02 88       	ldd	r0, Z+18	; 0x12
    5544:	f3 89       	ldd	r31, Z+19	; 0x13
    5546:	e0 2d       	mov	r30, r0
    5548:	80 81       	ld	r24, Z
    554a:	8f 7d       	andi	r24, 0xDF	; 223
    554c:	80 83       	st	Z, r24
    554e:	08 95       	ret

00005550 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5550:	cf 93       	push	r28
    5552:	df 93       	push	r29
    5554:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5556:	88 8d       	ldd	r24, Y+24	; 0x18
    5558:	88 23       	and	r24, r24
    555a:	c1 f0       	breq	.+48     	; 0x558c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    555c:	ea 89       	ldd	r30, Y+18	; 0x12
    555e:	fb 89       	ldd	r31, Y+19	; 0x13
    5560:	80 81       	ld	r24, Z
    5562:	85 fd       	sbrc	r24, 5
    5564:	05 c0       	rjmp	.+10     	; 0x5570 <_ZN14HardwareSerial5flushEv+0x20>
    5566:	a8 89       	ldd	r26, Y+16	; 0x10
    5568:	b9 89       	ldd	r27, Y+17	; 0x11
    556a:	8c 91       	ld	r24, X
    556c:	86 fd       	sbrc	r24, 6
    556e:	0e c0       	rjmp	.+28     	; 0x558c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5570:	0f b6       	in	r0, 0x3f	; 63
    5572:	07 fc       	sbrc	r0, 7
    5574:	f5 cf       	rjmp	.-22     	; 0x5560 <_ZN14HardwareSerial5flushEv+0x10>
    5576:	80 81       	ld	r24, Z
    5578:	85 ff       	sbrs	r24, 5
    557a:	f2 cf       	rjmp	.-28     	; 0x5560 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    557c:	a8 89       	ldd	r26, Y+16	; 0x10
    557e:	b9 89       	ldd	r27, Y+17	; 0x11
    5580:	8c 91       	ld	r24, X
    5582:	85 ff       	sbrs	r24, 5
    5584:	ed cf       	rjmp	.-38     	; 0x5560 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5586:	ce 01       	movw	r24, r28
    5588:	c2 df       	rcall	.-124    	; 0x550e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    558a:	e8 cf       	rjmp	.-48     	; 0x555c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	08 95       	ret

00005592 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    5592:	ef 92       	push	r14
    5594:	ff 92       	push	r15
    5596:	0f 93       	push	r16
    5598:	1f 93       	push	r17
    559a:	cf 93       	push	r28
    559c:	df 93       	push	r29
    559e:	ec 01       	movw	r28, r24
  _written = true;
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    55a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    55a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55a8:	98 13       	cpse	r25, r24
    55aa:	05 c0       	rjmp	.+10     	; 0x55b6 <_ZN14HardwareSerial5writeEh+0x24>
    55ac:	e8 89       	ldd	r30, Y+16	; 0x10
    55ae:	f9 89       	ldd	r31, Y+17	; 0x11
    55b0:	80 81       	ld	r24, Z
    55b2:	85 fd       	sbrc	r24, 5
    55b4:	23 c0       	rjmp	.+70     	; 0x55fc <_ZN14HardwareSerial5writeEh+0x6a>
    55b6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    55b8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    55ba:	10 e0       	ldi	r17, 0x00	; 0
    55bc:	0f 5f       	subi	r16, 0xFF	; 255
    55be:	1f 4f       	sbci	r17, 0xFF	; 255
    55c0:	0f 73       	andi	r16, 0x3F	; 63
    55c2:	11 27       	eor	r17, r17
    55c4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    55c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55c8:	e8 12       	cpse	r14, r24
    55ca:	0b c0       	rjmp	.+22     	; 0x55e2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    55cc:	0f b6       	in	r0, 0x3f	; 63
    55ce:	07 fc       	sbrc	r0, 7
    55d0:	fa cf       	rjmp	.-12     	; 0x55c6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    55d2:	e8 89       	ldd	r30, Y+16	; 0x10
    55d4:	f9 89       	ldd	r31, Y+17	; 0x11
    55d6:	80 81       	ld	r24, Z
    55d8:	85 ff       	sbrs	r24, 5
    55da:	f5 cf       	rjmp	.-22     	; 0x55c6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    55dc:	ce 01       	movw	r24, r28
    55de:	97 df       	rcall	.-210    	; 0x550e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    55e0:	f2 cf       	rjmp	.-28     	; 0x55c6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    55e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55e4:	fe 01       	movw	r30, r28
    55e6:	e8 0f       	add	r30, r24
    55e8:	f1 1d       	adc	r31, r1
    55ea:	e3 5a       	subi	r30, 0xA3	; 163
    55ec:	ff 4f       	sbci	r31, 0xFF	; 255
    55ee:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    55f0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    55f2:	ea 89       	ldd	r30, Y+18	; 0x12
    55f4:	fb 89       	ldd	r31, Y+19	; 0x13
    55f6:	80 81       	ld	r24, Z
    55f8:	80 62       	ori	r24, 0x20	; 32
    55fa:	07 c0       	rjmp	.+14     	; 0x560a <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    55fc:	ee 89       	ldd	r30, Y+22	; 0x16
    55fe:	ff 89       	ldd	r31, Y+23	; 0x17
    5600:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    5602:	e8 89       	ldd	r30, Y+16	; 0x10
    5604:	f9 89       	ldd	r31, Y+17	; 0x11
    5606:	80 81       	ld	r24, Z
    5608:	80 64       	ori	r24, 0x40	; 64
    560a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	ff 90       	pop	r15
    561a:	ef 90       	pop	r14
    561c:	08 95       	ret

0000561e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    561e:	cf 92       	push	r12
    5620:	df 92       	push	r13
    5622:	ef 92       	push	r14
    5624:	ff 92       	push	r15
    5626:	1f 93       	push	r17
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
    562c:	ec 01       	movw	r28, r24
    562e:	6a 01       	movw	r12, r20
    5630:	7b 01       	movw	r14, r22
    5632:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5634:	e8 89       	ldd	r30, Y+16	; 0x10
    5636:	f9 89       	ldd	r31, Y+17	; 0x11
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    563c:	41 15       	cp	r20, r1
    563e:	51 4e       	sbci	r21, 0xE1	; 225
    5640:	61 05       	cpc	r22, r1
    5642:	71 05       	cpc	r23, r1
    5644:	a9 f0       	breq	.+42     	; 0x5670 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5646:	60 e0       	ldi	r22, 0x00	; 0
    5648:	79 e0       	ldi	r23, 0x09	; 9
    564a:	8d e3       	ldi	r24, 0x3D	; 61
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	a7 01       	movw	r20, r14
    5650:	96 01       	movw	r18, r12
    5652:	bc d7       	rcall	.+3960   	; 0x65cc <__udivmodsi4>
    5654:	da 01       	movw	r26, r20
    5656:	c9 01       	movw	r24, r18
    5658:	01 97       	sbiw	r24, 0x01	; 1
    565a:	a1 09       	sbc	r26, r1
    565c:	b1 09       	sbc	r27, r1
    565e:	b6 95       	lsr	r27
    5660:	a7 95       	ror	r26
    5662:	97 95       	ror	r25
    5664:	87 95       	ror	r24
    5666:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5668:	41 15       	cp	r20, r1
    566a:	80 e1       	ldi	r24, 0x10	; 16
    566c:	58 07       	cpc	r21, r24
    566e:	a0 f0       	brcs	.+40     	; 0x5698 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5670:	e8 89       	ldd	r30, Y+16	; 0x10
    5672:	f9 89       	ldd	r31, Y+17	; 0x11
    5674:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5676:	60 e8       	ldi	r22, 0x80	; 128
    5678:	74 e8       	ldi	r23, 0x84	; 132
    567a:	8e e1       	ldi	r24, 0x1E	; 30
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	a7 01       	movw	r20, r14
    5680:	96 01       	movw	r18, r12
    5682:	a4 d7       	rcall	.+3912   	; 0x65cc <__udivmodsi4>
    5684:	ba 01       	movw	r22, r20
    5686:	a9 01       	movw	r20, r18
    5688:	41 50       	subi	r20, 0x01	; 1
    568a:	51 09       	sbc	r21, r1
    568c:	61 09       	sbc	r22, r1
    568e:	71 09       	sbc	r23, r1
    5690:	76 95       	lsr	r23
    5692:	67 95       	ror	r22
    5694:	57 95       	ror	r21
    5696:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5698:	ec 85       	ldd	r30, Y+12	; 0x0c
    569a:	fd 85       	ldd	r31, Y+13	; 0x0d
    569c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    569e:	ee 85       	ldd	r30, Y+14	; 0x0e
    56a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    56a2:	40 83       	st	Z, r20

  _written = false;
    56a4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    56a6:	ec 89       	ldd	r30, Y+20	; 0x14
    56a8:	fd 89       	ldd	r31, Y+21	; 0x15
    56aa:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    56ac:	ea 89       	ldd	r30, Y+18	; 0x12
    56ae:	fb 89       	ldd	r31, Y+19	; 0x13
    56b0:	80 81       	ld	r24, Z
    56b2:	80 61       	ori	r24, 0x10	; 16
    56b4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    56b6:	ea 89       	ldd	r30, Y+18	; 0x12
    56b8:	fb 89       	ldd	r31, Y+19	; 0x13
    56ba:	80 81       	ld	r24, Z
    56bc:	88 60       	ori	r24, 0x08	; 8
    56be:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    56c0:	ea 89       	ldd	r30, Y+18	; 0x12
    56c2:	fb 89       	ldd	r31, Y+19	; 0x13
    56c4:	80 81       	ld	r24, Z
    56c6:	80 68       	ori	r24, 0x80	; 128
    56c8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    56ca:	ea 89       	ldd	r30, Y+18	; 0x12
    56cc:	fb 89       	ldd	r31, Y+19	; 0x13
    56ce:	80 81       	ld	r24, Z
    56d0:	8f 7d       	andi	r24, 0xDF	; 223
    56d2:	80 83       	st	Z, r24
}
    56d4:	df 91       	pop	r29
    56d6:	cf 91       	pop	r28
    56d8:	1f 91       	pop	r17
    56da:	ff 90       	pop	r15
    56dc:	ef 90       	pop	r14
    56de:	df 90       	pop	r13
    56e0:	cf 90       	pop	r12
    56e2:	08 95       	ret

000056e4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	2f 93       	push	r18
    56f0:	8f 93       	push	r24
    56f2:	9f 93       	push	r25
    56f4:	ef 93       	push	r30
    56f6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    56f8:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <Serial+0x10>
    56fc:	f0 91 7d 05 	lds	r31, 0x057D	; 0x80057d <Serial+0x11>
    5700:	80 81       	ld	r24, Z
    5702:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <Serial+0x16>
    5706:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <Serial+0x17>
    570a:	82 fd       	sbrc	r24, 2
    570c:	12 c0       	rjmp	.+36     	; 0x5732 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    570e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5710:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <Serial+0x19>
    5714:	8f 5f       	subi	r24, 0xFF	; 255
    5716:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5718:	20 91 86 05 	lds	r18, 0x0586	; 0x800586 <Serial+0x1a>
    571c:	82 17       	cp	r24, r18
    571e:	51 f0       	breq	.+20     	; 0x5734 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5720:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <Serial+0x19>
    5724:	f0 e0       	ldi	r31, 0x00	; 0
    5726:	e4 59       	subi	r30, 0x94	; 148
    5728:	fa 4f       	sbci	r31, 0xFA	; 250
    572a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    572c:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <Serial+0x19>
    5730:	01 c0       	rjmp	.+2      	; 0x5734 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5732:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5734:	ff 91       	pop	r31
    5736:	ef 91       	pop	r30
    5738:	9f 91       	pop	r25
    573a:	8f 91       	pop	r24
    573c:	2f 91       	pop	r18
    573e:	0f 90       	pop	r0
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	0f 90       	pop	r0
    5744:	1f 90       	pop	r1
    5746:	18 95       	reti

00005748 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5748:	1f 92       	push	r1
    574a:	0f 92       	push	r0
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	0f 92       	push	r0
    5750:	11 24       	eor	r1, r1
    5752:	2f 93       	push	r18
    5754:	3f 93       	push	r19
    5756:	4f 93       	push	r20
    5758:	5f 93       	push	r21
    575a:	6f 93       	push	r22
    575c:	7f 93       	push	r23
    575e:	8f 93       	push	r24
    5760:	9f 93       	push	r25
    5762:	af 93       	push	r26
    5764:	bf 93       	push	r27
    5766:	ef 93       	push	r30
    5768:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    576a:	8c e6       	ldi	r24, 0x6C	; 108
    576c:	95 e0       	ldi	r25, 0x05	; 5
    576e:	cf de       	rcall	.-610    	; 0x550e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5770:	ff 91       	pop	r31
    5772:	ef 91       	pop	r30
    5774:	bf 91       	pop	r27
    5776:	af 91       	pop	r26
    5778:	9f 91       	pop	r25
    577a:	8f 91       	pop	r24
    577c:	7f 91       	pop	r23
    577e:	6f 91       	pop	r22
    5780:	5f 91       	pop	r21
    5782:	4f 91       	pop	r20
    5784:	3f 91       	pop	r19
    5786:	2f 91       	pop	r18
    5788:	0f 90       	pop	r0
    578a:	0f be       	out	0x3f, r0	; 63
    578c:	0f 90       	pop	r0
    578e:	1f 90       	pop	r1
    5790:	18 95       	reti

00005792 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5792:	8c e6       	ldi	r24, 0x6C	; 108
    5794:	95 e0       	ldi	r25, 0x05	; 5
    5796:	80 de       	rcall	.-768    	; 0x5498 <_ZN14HardwareSerial9availableEv>
    5798:	21 e0       	ldi	r18, 0x01	; 1
    579a:	89 2b       	or	r24, r25
    579c:	09 f4       	brne	.+2      	; 0x57a0 <_Z17Serial0_availablev+0xe>
    579e:	20 e0       	ldi	r18, 0x00	; 0
}
    57a0:	82 2f       	mov	r24, r18
    57a2:	08 95       	ret

000057a4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    57a4:	ec e6       	ldi	r30, 0x6C	; 108
    57a6:	f5 e0       	ldi	r31, 0x05	; 5
    57a8:	13 82       	std	Z+3, r1	; 0x03
    57aa:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    57ac:	88 ee       	ldi	r24, 0xE8	; 232
    57ae:	93 e0       	ldi	r25, 0x03	; 3
    57b0:	a0 e0       	ldi	r26, 0x00	; 0
    57b2:	b0 e0       	ldi	r27, 0x00	; 0
    57b4:	84 83       	std	Z+4, r24	; 0x04
    57b6:	95 83       	std	Z+5, r25	; 0x05
    57b8:	a6 83       	std	Z+6, r26	; 0x06
    57ba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    57bc:	8c ea       	ldi	r24, 0xAC	; 172
    57be:	91 e0       	ldi	r25, 0x01	; 1
    57c0:	91 83       	std	Z+1, r25	; 0x01
    57c2:	80 83       	st	Z, r24
    57c4:	85 ec       	ldi	r24, 0xC5	; 197
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	95 87       	std	Z+13, r25	; 0x0d
    57ca:	84 87       	std	Z+12, r24	; 0x0c
    57cc:	84 ec       	ldi	r24, 0xC4	; 196
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	97 87       	std	Z+15, r25	; 0x0f
    57d2:	86 87       	std	Z+14, r24	; 0x0e
    57d4:	80 ec       	ldi	r24, 0xC0	; 192
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	91 8b       	std	Z+17, r25	; 0x11
    57da:	80 8b       	std	Z+16, r24	; 0x10
    57dc:	81 ec       	ldi	r24, 0xC1	; 193
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	93 8b       	std	Z+19, r25	; 0x13
    57e2:	82 8b       	std	Z+18, r24	; 0x12
    57e4:	82 ec       	ldi	r24, 0xC2	; 194
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	95 8b       	std	Z+21, r25	; 0x15
    57ea:	84 8b       	std	Z+20, r24	; 0x14
    57ec:	86 ec       	ldi	r24, 0xC6	; 198
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	97 8b       	std	Z+23, r25	; 0x17
    57f2:	86 8b       	std	Z+22, r24	; 0x16
    57f4:	11 8e       	std	Z+25, r1	; 0x19
    57f6:	12 8e       	std	Z+26, r1	; 0x1a
    57f8:	13 8e       	std	Z+27, r1	; 0x1b
    57fa:	14 8e       	std	Z+28, r1	; 0x1c
    57fc:	08 95       	ret

000057fe <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    57fe:	08 95       	ret

00005800 <main>:

int main(void)
{
	init();
    5800:	17 d3       	rcall	.+1582   	; 0x5e30 <init>

	initVariant();
    5802:	fd df       	rcall	.-6      	; 0x57fe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5804:	3e db       	rcall	.-2436   	; 0x4e82 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5806:	ca e7       	ldi	r28, 0x7A	; 122
    5808:	da e2       	ldi	r29, 0x2A	; 42
#endif
	
	setup();
    
	for (;;) {
		loop();
    580a:	65 db       	rcall	.-2358   	; 0x4ed6 <loop>
		if (serialEventRun) serialEventRun();
    580c:	20 97       	sbiw	r28, 0x00	; 0
    580e:	e9 f3       	breq	.-6      	; 0x580a <main+0xa>
    5810:	71 de       	rcall	.-798    	; 0x54f4 <_Z14serialEventRunv>
    5812:	fb cf       	rjmp	.-10     	; 0x580a <main+0xa>

00005814 <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    5814:	8e c7       	rjmp	.+3868   	; 0x6732 <malloc>

00005816 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    5816:	0c 94 2e 34 	jmp	0x685c	; 0x685c <free>

0000581a <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    581a:	cf 92       	push	r12
    581c:	df 92       	push	r13
    581e:	ef 92       	push	r14
    5820:	ff 92       	push	r15
    5822:	0f 93       	push	r16
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	6c 01       	movw	r12, r24
    582c:	7a 01       	movw	r14, r20
    582e:	8b 01       	movw	r16, r22
    5830:	c0 e0       	ldi	r28, 0x00	; 0
    5832:	d0 e0       	ldi	r29, 0x00	; 0
    5834:	ce 15       	cp	r28, r14
    5836:	df 05       	cpc	r29, r15
    5838:	89 f0       	breq	.+34     	; 0x585c <_ZN5Print5writeEPKhj+0x42>
    583a:	d8 01       	movw	r26, r16
    583c:	6d 91       	ld	r22, X+
    583e:	8d 01       	movw	r16, r26
    5840:	d6 01       	movw	r26, r12
    5842:	ed 91       	ld	r30, X+
    5844:	fc 91       	ld	r31, X
    5846:	01 90       	ld	r0, Z+
    5848:	f0 81       	ld	r31, Z
    584a:	e0 2d       	mov	r30, r0
    584c:	c6 01       	movw	r24, r12
    584e:	09 95       	icall
    5850:	89 2b       	or	r24, r25
    5852:	11 f4       	brne	.+4      	; 0x5858 <_ZN5Print5writeEPKhj+0x3e>
    5854:	7e 01       	movw	r14, r28
    5856:	02 c0       	rjmp	.+4      	; 0x585c <_ZN5Print5writeEPKhj+0x42>
    5858:	21 96       	adiw	r28, 0x01	; 1
    585a:	ec cf       	rjmp	.-40     	; 0x5834 <_ZN5Print5writeEPKhj+0x1a>
    585c:	c7 01       	movw	r24, r14
    585e:	df 91       	pop	r29
    5860:	cf 91       	pop	r28
    5862:	1f 91       	pop	r17
    5864:	0f 91       	pop	r16
    5866:	ff 90       	pop	r15
    5868:	ef 90       	pop	r14
    586a:	df 90       	pop	r13
    586c:	cf 90       	pop	r12
    586e:	08 95       	ret

00005870 <_ZN5Print5writeEPKc>:
    5870:	61 15       	cp	r22, r1
    5872:	71 05       	cpc	r23, r1
    5874:	79 f0       	breq	.+30     	; 0x5894 <_ZN5Print5writeEPKc+0x24>
    5876:	fb 01       	movw	r30, r22
    5878:	01 90       	ld	r0, Z+
    587a:	00 20       	and	r0, r0
    587c:	e9 f7       	brne	.-6      	; 0x5878 <_ZN5Print5writeEPKc+0x8>
    587e:	31 97       	sbiw	r30, 0x01	; 1
    5880:	af 01       	movw	r20, r30
    5882:	46 1b       	sub	r20, r22
    5884:	57 0b       	sbc	r21, r23
    5886:	dc 01       	movw	r26, r24
    5888:	ed 91       	ld	r30, X+
    588a:	fc 91       	ld	r31, X
    588c:	02 80       	ldd	r0, Z+2	; 0x02
    588e:	f3 81       	ldd	r31, Z+3	; 0x03
    5890:	e0 2d       	mov	r30, r0
    5892:	09 94       	ijmp
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	08 95       	ret

0000589a <_ZN5Print5printEPK19__FlashStringHelper>:
    589a:	ef 92       	push	r14
    589c:	ff 92       	push	r15
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	8c 01       	movw	r16, r24
    58a8:	7b 01       	movw	r14, r22
    58aa:	c0 e0       	ldi	r28, 0x00	; 0
    58ac:	d0 e0       	ldi	r29, 0x00	; 0
    58ae:	f7 01       	movw	r30, r14
    58b0:	ec 0f       	add	r30, r28
    58b2:	fd 1f       	adc	r31, r29
    58b4:	64 91       	lpm	r22, Z
    58b6:	66 23       	and	r22, r22
    58b8:	61 f0       	breq	.+24     	; 0x58d2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    58ba:	d8 01       	movw	r26, r16
    58bc:	ed 91       	ld	r30, X+
    58be:	fc 91       	ld	r31, X
    58c0:	01 90       	ld	r0, Z+
    58c2:	f0 81       	ld	r31, Z
    58c4:	e0 2d       	mov	r30, r0
    58c6:	c8 01       	movw	r24, r16
    58c8:	09 95       	icall
    58ca:	89 2b       	or	r24, r25
    58cc:	11 f0       	breq	.+4      	; 0x58d2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    58ce:	21 96       	adiw	r28, 0x01	; 1
    58d0:	ee cf       	rjmp	.-36     	; 0x58ae <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    58d2:	ce 01       	movw	r24, r28
    58d4:	df 91       	pop	r29
    58d6:	cf 91       	pop	r28
    58d8:	1f 91       	pop	r17
    58da:	0f 91       	pop	r16
    58dc:	ff 90       	pop	r15
    58de:	ef 90       	pop	r14
    58e0:	08 95       	ret

000058e2 <_ZN5Print5printERK6String>:
    58e2:	dc 01       	movw	r26, r24
    58e4:	ed 91       	ld	r30, X+
    58e6:	fc 91       	ld	r31, X
    58e8:	db 01       	movw	r26, r22
    58ea:	14 96       	adiw	r26, 0x04	; 4
    58ec:	4d 91       	ld	r20, X+
    58ee:	5c 91       	ld	r21, X
    58f0:	15 97       	sbiw	r26, 0x05	; 5
    58f2:	6d 91       	ld	r22, X+
    58f4:	7c 91       	ld	r23, X
    58f6:	02 80       	ldd	r0, Z+2	; 0x02
    58f8:	f3 81       	ldd	r31, Z+3	; 0x03
    58fa:	e0 2d       	mov	r30, r0
    58fc:	09 94       	ijmp

000058fe <_ZN5Print5printEc>:
    58fe:	dc 01       	movw	r26, r24
    5900:	ed 91       	ld	r30, X+
    5902:	fc 91       	ld	r31, X
    5904:	01 90       	ld	r0, Z+
    5906:	f0 81       	ld	r31, Z
    5908:	e0 2d       	mov	r30, r0
    590a:	09 94       	ijmp

0000590c <_ZN5Print7printlnEv>:
    590c:	68 eb       	ldi	r22, 0xB8	; 184
    590e:	71 e0       	ldi	r23, 0x01	; 1
    5910:	af cf       	rjmp	.-162    	; 0x5870 <_ZN5Print5writeEPKc>

00005912 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5912:	0f 93       	push	r16
    5914:	1f 93       	push	r17
    5916:	cf 93       	push	r28
    5918:	df 93       	push	r29
    591a:	ec 01       	movw	r28, r24
    591c:	be df       	rcall	.-132    	; 0x589a <_ZN5Print5printEPK19__FlashStringHelper>
    591e:	8c 01       	movw	r16, r24
    5920:	ce 01       	movw	r24, r28
    5922:	f4 df       	rcall	.-24     	; 0x590c <_ZN5Print7printlnEv>
    5924:	80 0f       	add	r24, r16
    5926:	91 1f       	adc	r25, r17
    5928:	df 91       	pop	r29
    592a:	cf 91       	pop	r28
    592c:	1f 91       	pop	r17
    592e:	0f 91       	pop	r16
    5930:	08 95       	ret

00005932 <_ZN5Print7printlnERK6String>:
    5932:	0f 93       	push	r16
    5934:	1f 93       	push	r17
    5936:	cf 93       	push	r28
    5938:	df 93       	push	r29
    593a:	ec 01       	movw	r28, r24
    593c:	d2 df       	rcall	.-92     	; 0x58e2 <_ZN5Print5printERK6String>
    593e:	8c 01       	movw	r16, r24
    5940:	ce 01       	movw	r24, r28
    5942:	e4 df       	rcall	.-56     	; 0x590c <_ZN5Print7printlnEv>
    5944:	80 0f       	add	r24, r16
    5946:	91 1f       	adc	r25, r17
    5948:	df 91       	pop	r29
    594a:	cf 91       	pop	r28
    594c:	1f 91       	pop	r17
    594e:	0f 91       	pop	r16
    5950:	08 95       	ret

00005952 <_ZN5Print11printNumberEmh>:
    5952:	8f 92       	push	r8
    5954:	9f 92       	push	r9
    5956:	af 92       	push	r10
    5958:	bf 92       	push	r11
    595a:	cf 92       	push	r12
    595c:	df 92       	push	r13
    595e:	ef 92       	push	r14
    5960:	ff 92       	push	r15
    5962:	0f 93       	push	r16
    5964:	1f 93       	push	r17
    5966:	cf 93       	push	r28
    5968:	df 93       	push	r29
    596a:	cd b7       	in	r28, 0x3d	; 61
    596c:	de b7       	in	r29, 0x3e	; 62
    596e:	a1 97       	sbiw	r28, 0x21	; 33
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	f8 94       	cli
    5974:	de bf       	out	0x3e, r29	; 62
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	cd bf       	out	0x3d, r28	; 61
    597a:	7c 01       	movw	r14, r24
    597c:	d4 2e       	mov	r13, r20
    597e:	c5 2e       	mov	r12, r21
    5980:	db 01       	movw	r26, r22
    5982:	19 a2       	std	Y+33, r1	; 0x21
    5984:	22 30       	cpi	r18, 0x02	; 2
    5986:	08 f4       	brcc	.+2      	; 0x598a <_ZN5Print11printNumberEmh+0x38>
    5988:	2a e0       	ldi	r18, 0x0A	; 10
    598a:	8e 01       	movw	r16, r28
    598c:	0f 5d       	subi	r16, 0xDF	; 223
    598e:	1f 4f       	sbci	r17, 0xFF	; 255
    5990:	82 2e       	mov	r8, r18
    5992:	91 2c       	mov	r9, r1
    5994:	a1 2c       	mov	r10, r1
    5996:	b1 2c       	mov	r11, r1
    5998:	6d 2d       	mov	r22, r13
    599a:	7c 2d       	mov	r23, r12
    599c:	cd 01       	movw	r24, r26
    599e:	a5 01       	movw	r20, r10
    59a0:	94 01       	movw	r18, r8
    59a2:	14 d6       	rcall	.+3112   	; 0x65cc <__udivmodsi4>
    59a4:	d2 2e       	mov	r13, r18
    59a6:	c3 2e       	mov	r12, r19
    59a8:	da 01       	movw	r26, r20
    59aa:	01 50       	subi	r16, 0x01	; 1
    59ac:	11 09       	sbc	r17, r1
    59ae:	6a 30       	cpi	r22, 0x0A	; 10
    59b0:	71 05       	cpc	r23, r1
    59b2:	81 05       	cpc	r24, r1
    59b4:	91 05       	cpc	r25, r1
    59b6:	10 f4       	brcc	.+4      	; 0x59bc <_ZN5Print11printNumberEmh+0x6a>
    59b8:	60 5d       	subi	r22, 0xD0	; 208
    59ba:	01 c0       	rjmp	.+2      	; 0x59be <_ZN5Print11printNumberEmh+0x6c>
    59bc:	69 5c       	subi	r22, 0xC9	; 201
    59be:	f8 01       	movw	r30, r16
    59c0:	60 83       	st	Z, r22
    59c2:	23 2b       	or	r18, r19
    59c4:	24 2b       	or	r18, r20
    59c6:	25 2b       	or	r18, r21
    59c8:	39 f7       	brne	.-50     	; 0x5998 <_ZN5Print11printNumberEmh+0x46>
    59ca:	b8 01       	movw	r22, r16
    59cc:	c7 01       	movw	r24, r14
    59ce:	50 df       	rcall	.-352    	; 0x5870 <_ZN5Print5writeEPKc>
    59d0:	a1 96       	adiw	r28, 0x21	; 33
    59d2:	0f b6       	in	r0, 0x3f	; 63
    59d4:	f8 94       	cli
    59d6:	de bf       	out	0x3e, r29	; 62
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	cd bf       	out	0x3d, r28	; 61
    59dc:	df 91       	pop	r29
    59de:	cf 91       	pop	r28
    59e0:	1f 91       	pop	r17
    59e2:	0f 91       	pop	r16
    59e4:	ff 90       	pop	r15
    59e6:	ef 90       	pop	r14
    59e8:	df 90       	pop	r13
    59ea:	cf 90       	pop	r12
    59ec:	bf 90       	pop	r11
    59ee:	af 90       	pop	r10
    59f0:	9f 90       	pop	r9
    59f2:	8f 90       	pop	r8
    59f4:	08 95       	ret

000059f6 <_ZN5Print5printEli>:
    59f6:	cf 92       	push	r12
    59f8:	df 92       	push	r13
    59fa:	ef 92       	push	r14
    59fc:	ff 92       	push	r15
    59fe:	0f 93       	push	r16
    5a00:	1f 93       	push	r17
    5a02:	cf 93       	push	r28
    5a04:	df 93       	push	r29
    5a06:	ec 01       	movw	r28, r24
    5a08:	6a 01       	movw	r12, r20
    5a0a:	7b 01       	movw	r14, r22
    5a0c:	21 15       	cp	r18, r1
    5a0e:	31 05       	cpc	r19, r1
    5a10:	79 f4       	brne	.+30     	; 0x5a30 <_ZN5Print5printEli+0x3a>
    5a12:	e8 81       	ld	r30, Y
    5a14:	f9 81       	ldd	r31, Y+1	; 0x01
    5a16:	01 90       	ld	r0, Z+
    5a18:	f0 81       	ld	r31, Z
    5a1a:	e0 2d       	mov	r30, r0
    5a1c:	64 2f       	mov	r22, r20
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	1f 91       	pop	r17
    5a24:	0f 91       	pop	r16
    5a26:	ff 90       	pop	r15
    5a28:	ef 90       	pop	r14
    5a2a:	df 90       	pop	r13
    5a2c:	cf 90       	pop	r12
    5a2e:	09 94       	ijmp
    5a30:	2a 30       	cpi	r18, 0x0A	; 10
    5a32:	31 05       	cpc	r19, r1
    5a34:	d9 f4       	brne	.+54     	; 0x5a6c <_ZN5Print5printEli+0x76>
    5a36:	77 ff       	sbrs	r23, 7
    5a38:	18 c0       	rjmp	.+48     	; 0x5a6a <_ZN5Print5printEli+0x74>
    5a3a:	6d e2       	ldi	r22, 0x2D	; 45
    5a3c:	60 df       	rcall	.-320    	; 0x58fe <_ZN5Print5printEc>
    5a3e:	8c 01       	movw	r16, r24
    5a40:	44 27       	eor	r20, r20
    5a42:	55 27       	eor	r21, r21
    5a44:	ba 01       	movw	r22, r20
    5a46:	4c 19       	sub	r20, r12
    5a48:	5d 09       	sbc	r21, r13
    5a4a:	6e 09       	sbc	r22, r14
    5a4c:	7f 09       	sbc	r23, r15
    5a4e:	2a e0       	ldi	r18, 0x0A	; 10
    5a50:	ce 01       	movw	r24, r28
    5a52:	7f df       	rcall	.-258    	; 0x5952 <_ZN5Print11printNumberEmh>
    5a54:	80 0f       	add	r24, r16
    5a56:	91 1f       	adc	r25, r17
    5a58:	df 91       	pop	r29
    5a5a:	cf 91       	pop	r28
    5a5c:	1f 91       	pop	r17
    5a5e:	0f 91       	pop	r16
    5a60:	ff 90       	pop	r15
    5a62:	ef 90       	pop	r14
    5a64:	df 90       	pop	r13
    5a66:	cf 90       	pop	r12
    5a68:	08 95       	ret
    5a6a:	2a e0       	ldi	r18, 0x0A	; 10
    5a6c:	b7 01       	movw	r22, r14
    5a6e:	a6 01       	movw	r20, r12
    5a70:	ce 01       	movw	r24, r28
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	1f 91       	pop	r17
    5a78:	0f 91       	pop	r16
    5a7a:	ff 90       	pop	r15
    5a7c:	ef 90       	pop	r14
    5a7e:	df 90       	pop	r13
    5a80:	cf 90       	pop	r12
    5a82:	67 cf       	rjmp	.-306    	; 0x5952 <_ZN5Print11printNumberEmh>

00005a84 <_ZN5Print7printlnEii>:
    5a84:	0f 93       	push	r16
    5a86:	1f 93       	push	r17
    5a88:	cf 93       	push	r28
    5a8a:	df 93       	push	r29
    5a8c:	ec 01       	movw	r28, r24
    5a8e:	9a 01       	movw	r18, r20
    5a90:	ab 01       	movw	r20, r22
    5a92:	77 0f       	add	r23, r23
    5a94:	66 0b       	sbc	r22, r22
    5a96:	77 0b       	sbc	r23, r23
    5a98:	ae df       	rcall	.-164    	; 0x59f6 <_ZN5Print5printEli>
    5a9a:	8c 01       	movw	r16, r24
    5a9c:	ce 01       	movw	r24, r28
    5a9e:	36 df       	rcall	.-404    	; 0x590c <_ZN5Print7printlnEv>
    5aa0:	80 0f       	add	r24, r16
    5aa2:	91 1f       	adc	r25, r17
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	08 95       	ret

00005aae <_ZN5Print5printEmi>:
    5aae:	21 15       	cp	r18, r1
    5ab0:	31 05       	cpc	r19, r1
    5ab2:	41 f4       	brne	.+16     	; 0x5ac4 <_ZN5Print5printEmi+0x16>
    5ab4:	dc 01       	movw	r26, r24
    5ab6:	ed 91       	ld	r30, X+
    5ab8:	fc 91       	ld	r31, X
    5aba:	01 90       	ld	r0, Z+
    5abc:	f0 81       	ld	r31, Z
    5abe:	e0 2d       	mov	r30, r0
    5ac0:	64 2f       	mov	r22, r20
    5ac2:	09 94       	ijmp
    5ac4:	46 cf       	rjmp	.-372    	; 0x5952 <_ZN5Print11printNumberEmh>

00005ac6 <_ZN5Print7printlnEhi>:
    5ac6:	0f 93       	push	r16
    5ac8:	1f 93       	push	r17
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	ec 01       	movw	r28, r24
    5ad0:	9a 01       	movw	r18, r20
    5ad2:	46 2f       	mov	r20, r22
    5ad4:	50 e0       	ldi	r21, 0x00	; 0
    5ad6:	60 e0       	ldi	r22, 0x00	; 0
    5ad8:	70 e0       	ldi	r23, 0x00	; 0
    5ada:	e9 df       	rcall	.-46     	; 0x5aae <_ZN5Print5printEmi>
    5adc:	8c 01       	movw	r16, r24
    5ade:	ce 01       	movw	r24, r28
    5ae0:	15 df       	rcall	.-470    	; 0x590c <_ZN5Print7printlnEv>
    5ae2:	80 0f       	add	r24, r16
    5ae4:	91 1f       	adc	r25, r17
    5ae6:	df 91       	pop	r29
    5ae8:	cf 91       	pop	r28
    5aea:	1f 91       	pop	r17
    5aec:	0f 91       	pop	r16
    5aee:	08 95       	ret

00005af0 <_ZN5Print10printFloatEdh>:
    5af0:	4f 92       	push	r4
    5af2:	5f 92       	push	r5
    5af4:	6f 92       	push	r6
    5af6:	7f 92       	push	r7
    5af8:	8f 92       	push	r8
    5afa:	9f 92       	push	r9
    5afc:	af 92       	push	r10
    5afe:	bf 92       	push	r11
    5b00:	cf 92       	push	r12
    5b02:	df 92       	push	r13
    5b04:	ef 92       	push	r14
    5b06:	ff 92       	push	r15
    5b08:	cf 93       	push	r28
    5b0a:	df 93       	push	r29
    5b0c:	ec 01       	movw	r28, r24
    5b0e:	6a 01       	movw	r12, r20
    5b10:	7b 01       	movw	r14, r22
    5b12:	b2 2e       	mov	r11, r18
    5b14:	9a 01       	movw	r18, r20
    5b16:	ab 01       	movw	r20, r22
    5b18:	c7 01       	movw	r24, r14
    5b1a:	b6 01       	movw	r22, r12
    5b1c:	b7 dc       	rcall	.-1682   	; 0x548c <__unordsf2>
    5b1e:	88 23       	and	r24, r24
    5b20:	19 f0       	breq	.+6      	; 0x5b28 <_ZN5Print10printFloatEdh+0x38>
    5b22:	6b eb       	ldi	r22, 0xBB	; 187
    5b24:	71 e0       	ldi	r23, 0x01	; 1
    5b26:	24 c0       	rjmp	.+72     	; 0x5b70 <_ZN5Print10printFloatEdh+0x80>
    5b28:	26 01       	movw	r4, r12
    5b2a:	37 01       	movw	r6, r14
    5b2c:	e8 94       	clt
    5b2e:	77 f8       	bld	r7, 7
    5b30:	2f ef       	ldi	r18, 0xFF	; 255
    5b32:	3f ef       	ldi	r19, 0xFF	; 255
    5b34:	4f e7       	ldi	r20, 0x7F	; 127
    5b36:	5f e7       	ldi	r21, 0x7F	; 127
    5b38:	c3 01       	movw	r24, r6
    5b3a:	b2 01       	movw	r22, r4
    5b3c:	a7 dc       	rcall	.-1714   	; 0x548c <__unordsf2>
    5b3e:	81 11       	cpse	r24, r1
    5b40:	0c c0       	rjmp	.+24     	; 0x5b5a <_ZN5Print10printFloatEdh+0x6a>
    5b42:	2f ef       	ldi	r18, 0xFF	; 255
    5b44:	3f ef       	ldi	r19, 0xFF	; 255
    5b46:	4f e7       	ldi	r20, 0x7F	; 127
    5b48:	5f e7       	ldi	r21, 0x7F	; 127
    5b4a:	c3 01       	movw	r24, r6
    5b4c:	b2 01       	movw	r22, r4
    5b4e:	e8 da       	rcall	.-2608   	; 0x5120 <__cmpsf2>
    5b50:	18 16       	cp	r1, r24
    5b52:	1c f4       	brge	.+6      	; 0x5b5a <_ZN5Print10printFloatEdh+0x6a>
    5b54:	6f eb       	ldi	r22, 0xBF	; 191
    5b56:	71 e0       	ldi	r23, 0x01	; 1
    5b58:	0b c0       	rjmp	.+22     	; 0x5b70 <_ZN5Print10printFloatEdh+0x80>
    5b5a:	2f ef       	ldi	r18, 0xFF	; 255
    5b5c:	3f ef       	ldi	r19, 0xFF	; 255
    5b5e:	4f e7       	ldi	r20, 0x7F	; 127
    5b60:	5f e4       	ldi	r21, 0x4F	; 79
    5b62:	c7 01       	movw	r24, r14
    5b64:	b6 01       	movw	r22, r12
    5b66:	2b dc       	rcall	.-1962   	; 0x53be <__gesf2>
    5b68:	18 16       	cp	r1, r24
    5b6a:	94 f4       	brge	.+36     	; 0x5b90 <_ZN5Print10printFloatEdh+0xa0>
    5b6c:	63 ec       	ldi	r22, 0xC3	; 195
    5b6e:	71 e0       	ldi	r23, 0x01	; 1
    5b70:	ce 01       	movw	r24, r28
    5b72:	df 91       	pop	r29
    5b74:	cf 91       	pop	r28
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	bf 90       	pop	r11
    5b80:	af 90       	pop	r10
    5b82:	9f 90       	pop	r9
    5b84:	8f 90       	pop	r8
    5b86:	7f 90       	pop	r7
    5b88:	6f 90       	pop	r6
    5b8a:	5f 90       	pop	r5
    5b8c:	4f 90       	pop	r4
    5b8e:	70 ce       	rjmp	.-800    	; 0x5870 <_ZN5Print5writeEPKc>
    5b90:	2f ef       	ldi	r18, 0xFF	; 255
    5b92:	3f ef       	ldi	r19, 0xFF	; 255
    5b94:	4f e7       	ldi	r20, 0x7F	; 127
    5b96:	5f ec       	ldi	r21, 0xCF	; 207
    5b98:	c7 01       	movw	r24, r14
    5b9a:	b6 01       	movw	r22, r12
    5b9c:	c1 da       	rcall	.-2686   	; 0x5120 <__cmpsf2>
    5b9e:	87 fd       	sbrc	r24, 7
    5ba0:	e5 cf       	rjmp	.-54     	; 0x5b6c <_ZN5Print10printFloatEdh+0x7c>
    5ba2:	20 e0       	ldi	r18, 0x00	; 0
    5ba4:	30 e0       	ldi	r19, 0x00	; 0
    5ba6:	a9 01       	movw	r20, r18
    5ba8:	c7 01       	movw	r24, r14
    5baa:	b6 01       	movw	r22, r12
    5bac:	b9 da       	rcall	.-2702   	; 0x5120 <__cmpsf2>
    5bae:	87 ff       	sbrs	r24, 7
    5bb0:	09 c0       	rjmp	.+18     	; 0x5bc4 <_ZN5Print10printFloatEdh+0xd4>
    5bb2:	6d e2       	ldi	r22, 0x2D	; 45
    5bb4:	ce 01       	movw	r24, r28
    5bb6:	a3 de       	rcall	.-698    	; 0x58fe <_ZN5Print5printEc>
    5bb8:	4c 01       	movw	r8, r24
    5bba:	f7 fa       	bst	r15, 7
    5bbc:	f0 94       	com	r15
    5bbe:	f7 f8       	bld	r15, 7
    5bc0:	f0 94       	com	r15
    5bc2:	02 c0       	rjmp	.+4      	; 0x5bc8 <_ZN5Print10printFloatEdh+0xd8>
    5bc4:	81 2c       	mov	r8, r1
    5bc6:	91 2c       	mov	r9, r1
    5bc8:	a1 2c       	mov	r10, r1
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	70 e0       	ldi	r23, 0x00	; 0
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	9f e3       	ldi	r25, 0x3F	; 63
    5bd2:	ab 14       	cp	r10, r11
    5bd4:	39 f0       	breq	.+14     	; 0x5be4 <_ZN5Print10printFloatEdh+0xf4>
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	40 e2       	ldi	r20, 0x20	; 32
    5bdc:	51 e4       	ldi	r21, 0x41	; 65
    5bde:	a4 da       	rcall	.-2744   	; 0x5128 <__divsf3>
    5be0:	a3 94       	inc	r10
    5be2:	f7 cf       	rjmp	.-18     	; 0x5bd2 <_ZN5Print10printFloatEdh+0xe2>
    5be4:	9b 01       	movw	r18, r22
    5be6:	ac 01       	movw	r20, r24
    5be8:	c7 01       	movw	r24, r14
    5bea:	b6 01       	movw	r22, r12
    5bec:	35 da       	rcall	.-2966   	; 0x5058 <__addsf3>
    5bee:	2b 01       	movw	r4, r22
    5bf0:	3c 01       	movw	r6, r24
    5bf2:	07 db       	rcall	.-2546   	; 0x5202 <__fixunssfsi>
    5bf4:	6b 01       	movw	r12, r22
    5bf6:	7c 01       	movw	r14, r24
    5bf8:	30 db       	rcall	.-2464   	; 0x525a <__floatunsisf>
    5bfa:	9b 01       	movw	r18, r22
    5bfc:	ac 01       	movw	r20, r24
    5bfe:	c3 01       	movw	r24, r6
    5c00:	b2 01       	movw	r22, r4
    5c02:	29 da       	rcall	.-2990   	; 0x5056 <__subsf3>
    5c04:	2b 01       	movw	r4, r22
    5c06:	3c 01       	movw	r6, r24
    5c08:	2a e0       	ldi	r18, 0x0A	; 10
    5c0a:	b7 01       	movw	r22, r14
    5c0c:	a6 01       	movw	r20, r12
    5c0e:	ce 01       	movw	r24, r28
    5c10:	a0 de       	rcall	.-704    	; 0x5952 <_ZN5Print11printNumberEmh>
    5c12:	7c 01       	movw	r14, r24
    5c14:	e8 0c       	add	r14, r8
    5c16:	f9 1c       	adc	r15, r9
    5c18:	bb 20       	and	r11, r11
    5c1a:	31 f0       	breq	.+12     	; 0x5c28 <_ZN5Print10printFloatEdh+0x138>
    5c1c:	67 ec       	ldi	r22, 0xC7	; 199
    5c1e:	71 e0       	ldi	r23, 0x01	; 1
    5c20:	ce 01       	movw	r24, r28
    5c22:	26 de       	rcall	.-948    	; 0x5870 <_ZN5Print5writeEPKc>
    5c24:	e8 0e       	add	r14, r24
    5c26:	f9 1e       	adc	r15, r25
    5c28:	db 2c       	mov	r13, r11
    5c2a:	dd 20       	and	r13, r13
    5c2c:	11 f1       	breq	.+68     	; 0x5c72 <_ZN5Print10printFloatEdh+0x182>
    5c2e:	20 e0       	ldi	r18, 0x00	; 0
    5c30:	30 e0       	ldi	r19, 0x00	; 0
    5c32:	40 e2       	ldi	r20, 0x20	; 32
    5c34:	51 e4       	ldi	r21, 0x41	; 65
    5c36:	c3 01       	movw	r24, r6
    5c38:	b2 01       	movw	r22, r4
    5c3a:	c5 db       	rcall	.-2166   	; 0x53c6 <__mulsf3>
    5c3c:	2b 01       	movw	r4, r22
    5c3e:	3c 01       	movw	r6, r24
    5c40:	db da       	rcall	.-2634   	; 0x51f8 <__fixsfsi>
    5c42:	4b 01       	movw	r8, r22
    5c44:	77 0f       	add	r23, r23
    5c46:	aa 08       	sbc	r10, r10
    5c48:	bb 08       	sbc	r11, r11
    5c4a:	2a e0       	ldi	r18, 0x0A	; 10
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	b5 01       	movw	r22, r10
    5c50:	a4 01       	movw	r20, r8
    5c52:	ce 01       	movw	r24, r28
    5c54:	d0 de       	rcall	.-608    	; 0x59f6 <_ZN5Print5printEli>
    5c56:	e8 0e       	add	r14, r24
    5c58:	f9 1e       	adc	r15, r25
    5c5a:	c5 01       	movw	r24, r10
    5c5c:	b4 01       	movw	r22, r8
    5c5e:	ff da       	rcall	.-2562   	; 0x525e <__floatsisf>
    5c60:	9b 01       	movw	r18, r22
    5c62:	ac 01       	movw	r20, r24
    5c64:	c3 01       	movw	r24, r6
    5c66:	b2 01       	movw	r22, r4
    5c68:	f6 d9       	rcall	.-3092   	; 0x5056 <__subsf3>
    5c6a:	2b 01       	movw	r4, r22
    5c6c:	3c 01       	movw	r6, r24
    5c6e:	da 94       	dec	r13
    5c70:	dc cf       	rjmp	.-72     	; 0x5c2a <_ZN5Print10printFloatEdh+0x13a>
    5c72:	c7 01       	movw	r24, r14
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	ff 90       	pop	r15
    5c7a:	ef 90       	pop	r14
    5c7c:	df 90       	pop	r13
    5c7e:	cf 90       	pop	r12
    5c80:	bf 90       	pop	r11
    5c82:	af 90       	pop	r10
    5c84:	9f 90       	pop	r9
    5c86:	8f 90       	pop	r8
    5c88:	7f 90       	pop	r7
    5c8a:	6f 90       	pop	r6
    5c8c:	5f 90       	pop	r5
    5c8e:	4f 90       	pop	r4
    5c90:	08 95       	ret

00005c92 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    5c92:	0f 93       	push	r16
    5c94:	1f 93       	push	r17
    5c96:	cf 93       	push	r28
    5c98:	df 93       	push	r29
    5c9a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    5c9c:	29 df       	rcall	.-430    	; 0x5af0 <_ZN5Print10printFloatEdh>
    5c9e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    5ca0:	ce 01       	movw	r24, r28
    5ca2:	34 de       	rcall	.-920    	; 0x590c <_ZN5Print7printlnEv>
  return n;
}
    5ca4:	80 0f       	add	r24, r16
    5ca6:	91 1f       	adc	r25, r17
    5ca8:	df 91       	pop	r29
    5caa:	cf 91       	pop	r28
    5cac:	1f 91       	pop	r17
    5cae:	0f 91       	pop	r16
    5cb0:	08 95       	ret

00005cb2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5cb2:	1f 92       	push	r1
    5cb4:	0f 92       	push	r0
    5cb6:	0f b6       	in	r0, 0x3f	; 63
    5cb8:	0f 92       	push	r0
    5cba:	11 24       	eor	r1, r1
    5cbc:	2f 93       	push	r18
    5cbe:	3f 93       	push	r19
    5cc0:	8f 93       	push	r24
    5cc2:	9f 93       	push	r25
    5cc4:	af 93       	push	r26
    5cc6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5cc8:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <timer0_millis>
    5ccc:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <timer0_millis+0x1>
    5cd0:	a0 91 0c 06 	lds	r26, 0x060C	; 0x80060c <timer0_millis+0x2>
    5cd4:	b0 91 0d 06 	lds	r27, 0x060D	; 0x80060d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5cd8:	30 91 09 06 	lds	r19, 0x0609	; 0x800609 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5cdc:	23 e0       	ldi	r18, 0x03	; 3
    5cde:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5ce0:	2d 37       	cpi	r18, 0x7D	; 125
    5ce2:	20 f4       	brcc	.+8      	; 0x5cec <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5ce4:	01 96       	adiw	r24, 0x01	; 1
    5ce6:	a1 1d       	adc	r26, r1
    5ce8:	b1 1d       	adc	r27, r1
    5cea:	05 c0       	rjmp	.+10     	; 0x5cf6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5cec:	26 e8       	ldi	r18, 0x86	; 134
    5cee:	23 0f       	add	r18, r19
		m += 1;
    5cf0:	02 96       	adiw	r24, 0x02	; 2
    5cf2:	a1 1d       	adc	r26, r1
    5cf4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5cf6:	20 93 09 06 	sts	0x0609, r18	; 0x800609 <timer0_fract>
	timer0_millis = m;
    5cfa:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <timer0_millis>
    5cfe:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <timer0_millis+0x1>
    5d02:	a0 93 0c 06 	sts	0x060C, r26	; 0x80060c <timer0_millis+0x2>
    5d06:	b0 93 0d 06 	sts	0x060D, r27	; 0x80060d <timer0_millis+0x3>
	timer0_overflow_count++;
    5d0a:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <timer0_overflow_count>
    5d0e:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <timer0_overflow_count+0x1>
    5d12:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <timer0_overflow_count+0x2>
    5d16:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <timer0_overflow_count+0x3>
    5d1a:	01 96       	adiw	r24, 0x01	; 1
    5d1c:	a1 1d       	adc	r26, r1
    5d1e:	b1 1d       	adc	r27, r1
    5d20:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <timer0_overflow_count>
    5d24:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <timer0_overflow_count+0x1>
    5d28:	a0 93 10 06 	sts	0x0610, r26	; 0x800610 <timer0_overflow_count+0x2>
    5d2c:	b0 93 11 06 	sts	0x0611, r27	; 0x800611 <timer0_overflow_count+0x3>
}
    5d30:	bf 91       	pop	r27
    5d32:	af 91       	pop	r26
    5d34:	9f 91       	pop	r25
    5d36:	8f 91       	pop	r24
    5d38:	3f 91       	pop	r19
    5d3a:	2f 91       	pop	r18
    5d3c:	0f 90       	pop	r0
    5d3e:	0f be       	out	0x3f, r0	; 63
    5d40:	0f 90       	pop	r0
    5d42:	1f 90       	pop	r1
    5d44:	18 95       	reti

00005d46 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5d46:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5d48:	f8 94       	cli
	m = timer0_millis;
    5d4a:	60 91 0a 06 	lds	r22, 0x060A	; 0x80060a <timer0_millis>
    5d4e:	70 91 0b 06 	lds	r23, 0x060B	; 0x80060b <timer0_millis+0x1>
    5d52:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <timer0_millis+0x2>
    5d56:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <timer0_millis+0x3>
	SREG = oldSREG;
    5d5a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5d5c:	08 95       	ret

00005d5e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5d5e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5d60:	f8 94       	cli
	m = timer0_overflow_count;
    5d62:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <timer0_overflow_count>
    5d66:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <timer0_overflow_count+0x1>
    5d6a:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <timer0_overflow_count+0x2>
    5d6e:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5d72:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5d74:	a8 9b       	sbis	0x15, 0	; 21
    5d76:	05 c0       	rjmp	.+10     	; 0x5d82 <micros+0x24>
    5d78:	2f 3f       	cpi	r18, 0xFF	; 255
    5d7a:	19 f0       	breq	.+6      	; 0x5d82 <micros+0x24>
		m++;
    5d7c:	01 96       	adiw	r24, 0x01	; 1
    5d7e:	a1 1d       	adc	r26, r1
    5d80:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5d82:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5d84:	ba 2f       	mov	r27, r26
    5d86:	a9 2f       	mov	r26, r25
    5d88:	98 2f       	mov	r25, r24
    5d8a:	88 27       	eor	r24, r24
    5d8c:	82 0f       	add	r24, r18
    5d8e:	91 1d       	adc	r25, r1
    5d90:	a1 1d       	adc	r26, r1
    5d92:	b1 1d       	adc	r27, r1
    5d94:	bc 01       	movw	r22, r24
    5d96:	cd 01       	movw	r24, r26
    5d98:	42 e0       	ldi	r20, 0x02	; 2
    5d9a:	66 0f       	add	r22, r22
    5d9c:	77 1f       	adc	r23, r23
    5d9e:	88 1f       	adc	r24, r24
    5da0:	99 1f       	adc	r25, r25
    5da2:	4a 95       	dec	r20
    5da4:	d1 f7       	brne	.-12     	; 0x5d9a <micros+0x3c>
}
    5da6:	08 95       	ret

00005da8 <delay>:

void delay(unsigned long ms)
{
    5da8:	8f 92       	push	r8
    5daa:	9f 92       	push	r9
    5dac:	af 92       	push	r10
    5dae:	bf 92       	push	r11
    5db0:	cf 92       	push	r12
    5db2:	df 92       	push	r13
    5db4:	ef 92       	push	r14
    5db6:	ff 92       	push	r15
    5db8:	6b 01       	movw	r12, r22
    5dba:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5dbc:	d0 df       	rcall	.-96     	; 0x5d5e <micros>
    5dbe:	4b 01       	movw	r8, r22
    5dc0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5dc2:	c1 14       	cp	r12, r1
    5dc4:	d1 04       	cpc	r13, r1
    5dc6:	e1 04       	cpc	r14, r1
    5dc8:	f1 04       	cpc	r15, r1
    5dca:	f1 f0       	breq	.+60     	; 0x5e08 <delay+0x60>
		yield();
    5dcc:	fe d3       	rcall	.+2044   	; 0x65ca <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5dce:	c7 df       	rcall	.-114    	; 0x5d5e <micros>
    5dd0:	dc 01       	movw	r26, r24
    5dd2:	cb 01       	movw	r24, r22
    5dd4:	88 19       	sub	r24, r8
    5dd6:	99 09       	sbc	r25, r9
    5dd8:	aa 09       	sbc	r26, r10
    5dda:	bb 09       	sbc	r27, r11
    5ddc:	88 3e       	cpi	r24, 0xE8	; 232
    5dde:	93 40       	sbci	r25, 0x03	; 3
    5de0:	a1 05       	cpc	r26, r1
    5de2:	b1 05       	cpc	r27, r1
    5de4:	70 f3       	brcs	.-36     	; 0x5dc2 <delay+0x1a>
			ms--;
    5de6:	21 e0       	ldi	r18, 0x01	; 1
    5de8:	c2 1a       	sub	r12, r18
    5dea:	d1 08       	sbc	r13, r1
    5dec:	e1 08       	sbc	r14, r1
    5dee:	f1 08       	sbc	r15, r1
			start += 1000;
    5df0:	88 ee       	ldi	r24, 0xE8	; 232
    5df2:	88 0e       	add	r8, r24
    5df4:	83 e0       	ldi	r24, 0x03	; 3
    5df6:	98 1e       	adc	r9, r24
    5df8:	a1 1c       	adc	r10, r1
    5dfa:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5dfc:	c1 14       	cp	r12, r1
    5dfe:	d1 04       	cpc	r13, r1
    5e00:	e1 04       	cpc	r14, r1
    5e02:	f1 04       	cpc	r15, r1
    5e04:	21 f7       	brne	.-56     	; 0x5dce <delay+0x26>
    5e06:	dd cf       	rjmp	.-70     	; 0x5dc2 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5e08:	ff 90       	pop	r15
    5e0a:	ef 90       	pop	r14
    5e0c:	df 90       	pop	r13
    5e0e:	cf 90       	pop	r12
    5e10:	bf 90       	pop	r11
    5e12:	af 90       	pop	r10
    5e14:	9f 90       	pop	r9
    5e16:	8f 90       	pop	r8
    5e18:	08 95       	ret

00005e1a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5e1a:	82 30       	cpi	r24, 0x02	; 2
    5e1c:	91 05       	cpc	r25, r1
    5e1e:	38 f0       	brcs	.+14     	; 0x5e2e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5e20:	88 0f       	add	r24, r24
    5e22:	99 1f       	adc	r25, r25
    5e24:	88 0f       	add	r24, r24
    5e26:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5e28:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5e2a:	01 97       	sbiw	r24, 0x01	; 1
    5e2c:	f1 f7       	brne	.-4      	; 0x5e2a <delayMicroseconds+0x10>
    5e2e:	08 95       	ret

00005e30 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5e30:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5e32:	84 b5       	in	r24, 0x24	; 36
    5e34:	82 60       	ori	r24, 0x02	; 2
    5e36:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5e38:	84 b5       	in	r24, 0x24	; 36
    5e3a:	81 60       	ori	r24, 0x01	; 1
    5e3c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5e3e:	85 b5       	in	r24, 0x25	; 37
    5e40:	82 60       	ori	r24, 0x02	; 2
    5e42:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5e44:	85 b5       	in	r24, 0x25	; 37
    5e46:	81 60       	ori	r24, 0x01	; 1
    5e48:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5e4a:	ee e6       	ldi	r30, 0x6E	; 110
    5e4c:	f0 e0       	ldi	r31, 0x00	; 0
    5e4e:	80 81       	ld	r24, Z
    5e50:	81 60       	ori	r24, 0x01	; 1
    5e52:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5e54:	e1 e8       	ldi	r30, 0x81	; 129
    5e56:	f0 e0       	ldi	r31, 0x00	; 0
    5e58:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5e5a:	80 81       	ld	r24, Z
    5e5c:	82 60       	ori	r24, 0x02	; 2
    5e5e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5e60:	80 81       	ld	r24, Z
    5e62:	81 60       	ori	r24, 0x01	; 1
    5e64:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5e66:	e0 e8       	ldi	r30, 0x80	; 128
    5e68:	f0 e0       	ldi	r31, 0x00	; 0
    5e6a:	80 81       	ld	r24, Z
    5e6c:	81 60       	ori	r24, 0x01	; 1
    5e6e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5e70:	e1 eb       	ldi	r30, 0xB1	; 177
    5e72:	f0 e0       	ldi	r31, 0x00	; 0
    5e74:	80 81       	ld	r24, Z
    5e76:	84 60       	ori	r24, 0x04	; 4
    5e78:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5e7a:	e0 eb       	ldi	r30, 0xB0	; 176
    5e7c:	f0 e0       	ldi	r31, 0x00	; 0
    5e7e:	80 81       	ld	r24, Z
    5e80:	81 60       	ori	r24, 0x01	; 1
    5e82:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5e84:	ea e7       	ldi	r30, 0x7A	; 122
    5e86:	f0 e0       	ldi	r31, 0x00	; 0
    5e88:	80 81       	ld	r24, Z
    5e8a:	84 60       	ori	r24, 0x04	; 4
    5e8c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5e8e:	80 81       	ld	r24, Z
    5e90:	82 60       	ori	r24, 0x02	; 2
    5e92:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5e94:	80 81       	ld	r24, Z
    5e96:	81 60       	ori	r24, 0x01	; 1
    5e98:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5e9a:	80 81       	ld	r24, Z
    5e9c:	80 68       	ori	r24, 0x80	; 128
    5e9e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5ea0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5ea4:	08 95       	ret

00005ea6 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5ea6:	8e 30       	cpi	r24, 0x0E	; 14
    5ea8:	08 f0       	brcs	.+2      	; 0x5eac <analogRead+0x6>
    5eaa:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5eac:	87 70       	andi	r24, 0x07	; 7
    5eae:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    5eb2:	90 e4       	ldi	r25, 0x40	; 64
    5eb4:	29 9f       	mul	r18, r25
    5eb6:	90 01       	movw	r18, r0
    5eb8:	11 24       	eor	r1, r1
    5eba:	82 2b       	or	r24, r18
    5ebc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5ec0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5ec4:	80 64       	ori	r24, 0x40	; 64
    5ec6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5eca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5ece:	86 fd       	sbrc	r24, 6
    5ed0:	fc cf       	rjmp	.-8      	; 0x5eca <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5ed2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    5ed6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5eda:	90 e0       	ldi	r25, 0x00	; 0
}
    5edc:	92 2b       	or	r25, r18
    5ede:	08 95       	ret

00005ee0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5ee0:	83 30       	cpi	r24, 0x03	; 3
    5ee2:	81 f0       	breq	.+32     	; 0x5f04 <turnOffPWM+0x24>
    5ee4:	28 f4       	brcc	.+10     	; 0x5ef0 <turnOffPWM+0x10>
    5ee6:	81 30       	cpi	r24, 0x01	; 1
    5ee8:	99 f0       	breq	.+38     	; 0x5f10 <turnOffPWM+0x30>
    5eea:	82 30       	cpi	r24, 0x02	; 2
    5eec:	a1 f0       	breq	.+40     	; 0x5f16 <turnOffPWM+0x36>
    5eee:	08 95       	ret
    5ef0:	87 30       	cpi	r24, 0x07	; 7
    5ef2:	a9 f0       	breq	.+42     	; 0x5f1e <turnOffPWM+0x3e>
    5ef4:	88 30       	cpi	r24, 0x08	; 8
    5ef6:	b9 f0       	breq	.+46     	; 0x5f26 <turnOffPWM+0x46>
    5ef8:	84 30       	cpi	r24, 0x04	; 4
    5efa:	d1 f4       	brne	.+52     	; 0x5f30 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5efc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5f00:	8f 7d       	andi	r24, 0xDF	; 223
    5f02:	03 c0       	rjmp	.+6      	; 0x5f0a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5f04:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5f08:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5f0a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5f0e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5f10:	84 b5       	in	r24, 0x24	; 36
    5f12:	8f 77       	andi	r24, 0x7F	; 127
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5f16:	84 b5       	in	r24, 0x24	; 36
    5f18:	8f 7d       	andi	r24, 0xDF	; 223
    5f1a:	84 bd       	out	0x24, r24	; 36
    5f1c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5f1e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5f22:	8f 77       	andi	r24, 0x7F	; 127
    5f24:	03 c0       	rjmp	.+6      	; 0x5f2c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5f26:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5f2a:	8f 7d       	andi	r24, 0xDF	; 223
    5f2c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5f30:	08 95       	ret

00005f32 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5f32:	cf 93       	push	r28
    5f34:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	fc 01       	movw	r30, r24
    5f3a:	e7 59       	subi	r30, 0x97	; 151
    5f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    5f3e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5f40:	fc 01       	movw	r30, r24
    5f42:	e3 58       	subi	r30, 0x83	; 131
    5f44:	fb 4f       	sbci	r31, 0xFB	; 251
    5f46:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5f48:	88 23       	and	r24, r24
    5f4a:	61 f1       	breq	.+88     	; 0x5fa4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	88 0f       	add	r24, r24
    5f50:	99 1f       	adc	r25, r25
    5f52:	fc 01       	movw	r30, r24
    5f54:	eb 55       	subi	r30, 0x5B	; 91
    5f56:	fb 4f       	sbci	r31, 0xFB	; 251
    5f58:	c5 91       	lpm	r28, Z+
    5f5a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	e5 56       	subi	r30, 0x65	; 101
    5f60:	fb 4f       	sbci	r31, 0xFB	; 251
    5f62:	a5 91       	lpm	r26, Z+
    5f64:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5f66:	61 11       	cpse	r22, r1
    5f68:	09 c0       	rjmp	.+18     	; 0x5f7c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5f6a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5f6c:	f8 94       	cli
		*reg &= ~bit;
    5f6e:	88 81       	ld	r24, Y
    5f70:	20 95       	com	r18
    5f72:	82 23       	and	r24, r18
    5f74:	88 83       	st	Y, r24
		*out &= ~bit;
    5f76:	ec 91       	ld	r30, X
    5f78:	2e 23       	and	r18, r30
    5f7a:	0b c0       	rjmp	.+22     	; 0x5f92 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5f7c:	62 30       	cpi	r22, 0x02	; 2
    5f7e:	61 f4       	brne	.+24     	; 0x5f98 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5f80:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5f82:	f8 94       	cli
		*reg &= ~bit;
    5f84:	38 81       	ld	r19, Y
    5f86:	82 2f       	mov	r24, r18
    5f88:	80 95       	com	r24
    5f8a:	83 23       	and	r24, r19
    5f8c:	88 83       	st	Y, r24
		*out |= bit;
    5f8e:	ec 91       	ld	r30, X
    5f90:	2e 2b       	or	r18, r30
    5f92:	2c 93       	st	X, r18
		SREG = oldSREG;
    5f94:	9f bf       	out	0x3f, r25	; 63
    5f96:	06 c0       	rjmp	.+12     	; 0x5fa4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5f98:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5f9a:	f8 94       	cli
		*reg |= bit;
    5f9c:	e8 81       	ld	r30, Y
    5f9e:	2e 2b       	or	r18, r30
    5fa0:	28 83       	st	Y, r18
		SREG = oldSREG;
    5fa2:	8f bf       	out	0x3f, r24	; 63
	}
}
    5fa4:	df 91       	pop	r29
    5fa6:	cf 91       	pop	r28
    5fa8:	08 95       	ret

00005faa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5fb0:	28 2f       	mov	r18, r24
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	f9 01       	movw	r30, r18
    5fb6:	eb 5a       	subi	r30, 0xAB	; 171
    5fb8:	fb 4f       	sbci	r31, 0xFB	; 251
    5fba:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5fbc:	f9 01       	movw	r30, r18
    5fbe:	e7 59       	subi	r30, 0x97	; 151
    5fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    5fc2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5fc4:	f9 01       	movw	r30, r18
    5fc6:	e3 58       	subi	r30, 0x83	; 131
    5fc8:	fb 4f       	sbci	r31, 0xFB	; 251
    5fca:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5fcc:	cc 23       	and	r28, r28
    5fce:	c1 f0       	breq	.+48     	; 0x6000 <digitalWrite+0x56>
    5fd0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5fd2:	81 11       	cpse	r24, r1
    5fd4:	85 df       	rcall	.-246    	; 0x5ee0 <turnOffPWM>

	out = portOutputRegister(port);
    5fd6:	ec 2f       	mov	r30, r28
    5fd8:	f0 e0       	ldi	r31, 0x00	; 0
    5fda:	ee 0f       	add	r30, r30
    5fdc:	ff 1f       	adc	r31, r31
    5fde:	e5 56       	subi	r30, 0x65	; 101
    5fe0:	fb 4f       	sbci	r31, 0xFB	; 251
    5fe2:	a5 91       	lpm	r26, Z+
    5fe4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5fe6:	8f b7       	in	r24, 0x3f	; 63
	cli();
    5fe8:	f8 94       	cli

	if (val == LOW) {
    5fea:	11 11       	cpse	r17, r1
    5fec:	05 c0       	rjmp	.+10     	; 0x5ff8 <digitalWrite+0x4e>
		*out &= ~bit;
    5fee:	9c 91       	ld	r25, X
    5ff0:	ed 2f       	mov	r30, r29
    5ff2:	e0 95       	com	r30
    5ff4:	e9 23       	and	r30, r25
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <digitalWrite+0x52>
	} else {
		*out |= bit;
    5ff8:	ec 91       	ld	r30, X
    5ffa:	ed 2b       	or	r30, r29
    5ffc:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    5ffe:	8f bf       	out	0x3f, r24	; 63
}
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	1f 91       	pop	r17
    6006:	08 95       	ret

00006008 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    600c:	28 2f       	mov	r18, r24
    600e:	30 e0       	ldi	r19, 0x00	; 0
    6010:	f9 01       	movw	r30, r18
    6012:	eb 5a       	subi	r30, 0xAB	; 171
    6014:	fb 4f       	sbci	r31, 0xFB	; 251
    6016:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6018:	f9 01       	movw	r30, r18
    601a:	e7 59       	subi	r30, 0x97	; 151
    601c:	fb 4f       	sbci	r31, 0xFB	; 251
    601e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6020:	f9 01       	movw	r30, r18
    6022:	e3 58       	subi	r30, 0x83	; 131
    6024:	fb 4f       	sbci	r31, 0xFB	; 251
    6026:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6028:	cc 23       	and	r28, r28
    602a:	89 f0       	breq	.+34     	; 0x604e <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    602c:	81 11       	cpse	r24, r1
    602e:	58 df       	rcall	.-336    	; 0x5ee0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6030:	ec 2f       	mov	r30, r28
    6032:	f0 e0       	ldi	r31, 0x00	; 0
    6034:	ee 0f       	add	r30, r30
    6036:	ff 1f       	adc	r31, r31
    6038:	ef 56       	subi	r30, 0x6F	; 111
    603a:	fb 4f       	sbci	r31, 0xFB	; 251
    603c:	a5 91       	lpm	r26, Z+
    603e:	b4 91       	lpm	r27, Z
    6040:	ec 91       	ld	r30, X
    6042:	ed 23       	and	r30, r29
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	21 f4       	brne	.+8      	; 0x6052 <digitalRead+0x4a>
    604a:	80 e0       	ldi	r24, 0x00	; 0
    604c:	02 c0       	rjmp	.+4      	; 0x6052 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    604e:	80 e0       	ldi	r24, 0x00	; 0
    6050:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	08 95       	ret

00006058 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    6058:	fc 01       	movw	r30, r24
    605a:	80 81       	ld	r24, Z
    605c:	91 81       	ldd	r25, Z+1	; 0x01
    605e:	fe c3       	rjmp	.+2044   	; 0x685c <free>

00006060 <_ZN6String10invalidateEv>:
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	ec 01       	movw	r28, r24
    6066:	88 81       	ld	r24, Y
    6068:	99 81       	ldd	r25, Y+1	; 0x01
    606a:	00 97       	sbiw	r24, 0x00	; 0
    606c:	09 f0       	breq	.+2      	; 0x6070 <_ZN6String10invalidateEv+0x10>
    606e:	f6 d3       	rcall	.+2028   	; 0x685c <free>
    6070:	19 82       	std	Y+1, r1	; 0x01
    6072:	18 82       	st	Y, r1
    6074:	1d 82       	std	Y+5, r1	; 0x05
    6076:	1c 82       	std	Y+4, r1	; 0x04
    6078:	1b 82       	std	Y+3, r1	; 0x03
    607a:	1a 82       	std	Y+2, r1	; 0x02
    607c:	df 91       	pop	r29
    607e:	cf 91       	pop	r28
    6080:	08 95       	ret

00006082 <_ZN6String12changeBufferEj>:
    6082:	0f 93       	push	r16
    6084:	1f 93       	push	r17
    6086:	cf 93       	push	r28
    6088:	df 93       	push	r29
    608a:	ec 01       	movw	r28, r24
    608c:	8b 01       	movw	r16, r22
    608e:	6f 5f       	subi	r22, 0xFF	; 255
    6090:	7f 4f       	sbci	r23, 0xFF	; 255
    6092:	88 81       	ld	r24, Y
    6094:	99 81       	ldd	r25, Y+1	; 0x01
    6096:	7a d4       	rcall	.+2292   	; 0x698c <realloc>
    6098:	00 97       	sbiw	r24, 0x00	; 0
    609a:	31 f0       	breq	.+12     	; 0x60a8 <_ZN6String12changeBufferEj+0x26>
    609c:	99 83       	std	Y+1, r25	; 0x01
    609e:	88 83       	st	Y, r24
    60a0:	1b 83       	std	Y+3, r17	; 0x03
    60a2:	0a 83       	std	Y+2, r16	; 0x02
    60a4:	81 e0       	ldi	r24, 0x01	; 1
    60a6:	01 c0       	rjmp	.+2      	; 0x60aa <_ZN6String12changeBufferEj+0x28>
    60a8:	80 e0       	ldi	r24, 0x00	; 0
    60aa:	df 91       	pop	r29
    60ac:	cf 91       	pop	r28
    60ae:	1f 91       	pop	r17
    60b0:	0f 91       	pop	r16
    60b2:	08 95       	ret

000060b4 <_ZN6String7reserveEj>:
    60b4:	cf 93       	push	r28
    60b6:	df 93       	push	r29
    60b8:	ec 01       	movw	r28, r24
    60ba:	88 81       	ld	r24, Y
    60bc:	99 81       	ldd	r25, Y+1	; 0x01
    60be:	89 2b       	or	r24, r25
    60c0:	29 f0       	breq	.+10     	; 0x60cc <_ZN6String7reserveEj+0x18>
    60c2:	8a 81       	ldd	r24, Y+2	; 0x02
    60c4:	9b 81       	ldd	r25, Y+3	; 0x03
    60c6:	86 17       	cp	r24, r22
    60c8:	97 07       	cpc	r25, r23
    60ca:	58 f4       	brcc	.+22     	; 0x60e2 <_ZN6String7reserveEj+0x2e>
    60cc:	ce 01       	movw	r24, r28
    60ce:	d9 df       	rcall	.-78     	; 0x6082 <_ZN6String12changeBufferEj>
    60d0:	88 23       	and	r24, r24
    60d2:	41 f0       	breq	.+16     	; 0x60e4 <_ZN6String7reserveEj+0x30>
    60d4:	8c 81       	ldd	r24, Y+4	; 0x04
    60d6:	9d 81       	ldd	r25, Y+5	; 0x05
    60d8:	89 2b       	or	r24, r25
    60da:	19 f4       	brne	.+6      	; 0x60e2 <_ZN6String7reserveEj+0x2e>
    60dc:	e8 81       	ld	r30, Y
    60de:	f9 81       	ldd	r31, Y+1	; 0x01
    60e0:	10 82       	st	Z, r1
    60e2:	81 e0       	ldi	r24, 0x01	; 1
    60e4:	df 91       	pop	r29
    60e6:	cf 91       	pop	r28
    60e8:	08 95       	ret

000060ea <_ZN6String4copyEPKcj>:
    60ea:	ef 92       	push	r14
    60ec:	ff 92       	push	r15
    60ee:	0f 93       	push	r16
    60f0:	1f 93       	push	r17
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
    60f6:	ec 01       	movw	r28, r24
    60f8:	7b 01       	movw	r14, r22
    60fa:	8a 01       	movw	r16, r20
    60fc:	ba 01       	movw	r22, r20
    60fe:	da df       	rcall	.-76     	; 0x60b4 <_ZN6String7reserveEj>
    6100:	81 11       	cpse	r24, r1
    6102:	03 c0       	rjmp	.+6      	; 0x610a <_ZN6String4copyEPKcj+0x20>
    6104:	ce 01       	movw	r24, r28
    6106:	ac df       	rcall	.-168    	; 0x6060 <_ZN6String10invalidateEv>
    6108:	06 c0       	rjmp	.+12     	; 0x6116 <_ZN6String4copyEPKcj+0x2c>
    610a:	1d 83       	std	Y+5, r17	; 0x05
    610c:	0c 83       	std	Y+4, r16	; 0x04
    610e:	b7 01       	movw	r22, r14
    6110:	88 81       	ld	r24, Y
    6112:	99 81       	ldd	r25, Y+1	; 0x01
    6114:	b3 d6       	rcall	.+3430   	; 0x6e7c <strcpy>
    6116:	ce 01       	movw	r24, r28
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	1f 91       	pop	r17
    611e:	0f 91       	pop	r16
    6120:	ff 90       	pop	r15
    6122:	ef 90       	pop	r14
    6124:	08 95       	ret

00006126 <_ZN6StringC1EPKc>:
    6126:	fc 01       	movw	r30, r24
    6128:	11 82       	std	Z+1, r1	; 0x01
    612a:	10 82       	st	Z, r1
    612c:	13 82       	std	Z+3, r1	; 0x03
    612e:	12 82       	std	Z+2, r1	; 0x02
    6130:	15 82       	std	Z+5, r1	; 0x05
    6132:	14 82       	std	Z+4, r1	; 0x04
    6134:	61 15       	cp	r22, r1
    6136:	71 05       	cpc	r23, r1
    6138:	49 f0       	breq	.+18     	; 0x614c <_ZN6StringC1EPKc+0x26>
    613a:	fb 01       	movw	r30, r22
    613c:	01 90       	ld	r0, Z+
    613e:	00 20       	and	r0, r0
    6140:	e9 f7       	brne	.-6      	; 0x613c <_ZN6StringC1EPKc+0x16>
    6142:	31 97       	sbiw	r30, 0x01	; 1
    6144:	af 01       	movw	r20, r30
    6146:	46 1b       	sub	r20, r22
    6148:	57 0b       	sbc	r21, r23
    614a:	cf cf       	rjmp	.-98     	; 0x60ea <_ZN6String4copyEPKcj>
    614c:	08 95       	ret

0000614e <_ZN6StringaSERKS_>:
    614e:	cf 93       	push	r28
    6150:	df 93       	push	r29
    6152:	ec 01       	movw	r28, r24
    6154:	fb 01       	movw	r30, r22
    6156:	86 17       	cp	r24, r22
    6158:	97 07       	cpc	r25, r23
    615a:	51 f0       	breq	.+20     	; 0x6170 <_ZN6StringaSERKS_+0x22>
    615c:	60 81       	ld	r22, Z
    615e:	71 81       	ldd	r23, Z+1	; 0x01
    6160:	61 15       	cp	r22, r1
    6162:	71 05       	cpc	r23, r1
    6164:	21 f0       	breq	.+8      	; 0x616e <_ZN6StringaSERKS_+0x20>
    6166:	44 81       	ldd	r20, Z+4	; 0x04
    6168:	55 81       	ldd	r21, Z+5	; 0x05
    616a:	bf df       	rcall	.-130    	; 0x60ea <_ZN6String4copyEPKcj>
    616c:	01 c0       	rjmp	.+2      	; 0x6170 <_ZN6StringaSERKS_+0x22>
    616e:	78 df       	rcall	.-272    	; 0x6060 <_ZN6String10invalidateEv>
    6170:	ce 01       	movw	r24, r28
    6172:	df 91       	pop	r29
    6174:	cf 91       	pop	r28
    6176:	08 95       	ret

00006178 <_ZN6StringC1ERKS_>:
    6178:	fc 01       	movw	r30, r24
    617a:	11 82       	std	Z+1, r1	; 0x01
    617c:	10 82       	st	Z, r1
    617e:	13 82       	std	Z+3, r1	; 0x03
    6180:	12 82       	std	Z+2, r1	; 0x02
    6182:	15 82       	std	Z+5, r1	; 0x05
    6184:	14 82       	std	Z+4, r1	; 0x04
    6186:	e3 cf       	rjmp	.-58     	; 0x614e <_ZN6StringaSERKS_>

00006188 <_ZN6StringaSEPKc>:
    6188:	cf 93       	push	r28
    618a:	df 93       	push	r29
    618c:	ec 01       	movw	r28, r24
    618e:	61 15       	cp	r22, r1
    6190:	71 05       	cpc	r23, r1
    6192:	51 f0       	breq	.+20     	; 0x61a8 <_ZN6StringaSEPKc+0x20>
    6194:	fb 01       	movw	r30, r22
    6196:	01 90       	ld	r0, Z+
    6198:	00 20       	and	r0, r0
    619a:	e9 f7       	brne	.-6      	; 0x6196 <_ZN6StringaSEPKc+0xe>
    619c:	31 97       	sbiw	r30, 0x01	; 1
    619e:	af 01       	movw	r20, r30
    61a0:	46 1b       	sub	r20, r22
    61a2:	57 0b       	sbc	r21, r23
    61a4:	a2 df       	rcall	.-188    	; 0x60ea <_ZN6String4copyEPKcj>
    61a6:	01 c0       	rjmp	.+2      	; 0x61aa <_ZN6StringaSEPKc+0x22>
    61a8:	5b df       	rcall	.-330    	; 0x6060 <_ZN6String10invalidateEv>
    61aa:	ce 01       	movw	r24, r28
    61ac:	df 91       	pop	r29
    61ae:	cf 91       	pop	r28
    61b0:	08 95       	ret

000061b2 <_ZN6StringC1Eih>:
    61b2:	0f 93       	push	r16
    61b4:	1f 93       	push	r17
    61b6:	cf 93       	push	r28
    61b8:	df 93       	push	r29
    61ba:	cd b7       	in	r28, 0x3d	; 61
    61bc:	de b7       	in	r29, 0x3e	; 62
    61be:	62 97       	sbiw	r28, 0x12	; 18
    61c0:	0f b6       	in	r0, 0x3f	; 63
    61c2:	f8 94       	cli
    61c4:	de bf       	out	0x3e, r29	; 62
    61c6:	0f be       	out	0x3f, r0	; 63
    61c8:	cd bf       	out	0x3d, r28	; 61
    61ca:	8c 01       	movw	r16, r24
    61cc:	cb 01       	movw	r24, r22
    61ce:	f8 01       	movw	r30, r16
    61d0:	11 82       	std	Z+1, r1	; 0x01
    61d2:	10 82       	st	Z, r1
    61d4:	13 82       	std	Z+3, r1	; 0x03
    61d6:	12 82       	std	Z+2, r1	; 0x02
    61d8:	15 82       	std	Z+5, r1	; 0x05
    61da:	14 82       	std	Z+4, r1	; 0x04
    61dc:	50 e0       	ldi	r21, 0x00	; 0
    61de:	be 01       	movw	r22, r28
    61e0:	6f 5f       	subi	r22, 0xFF	; 255
    61e2:	7f 4f       	sbci	r23, 0xFF	; 255
    61e4:	60 d6       	rcall	.+3264   	; 0x6ea6 <itoa>
    61e6:	be 01       	movw	r22, r28
    61e8:	6f 5f       	subi	r22, 0xFF	; 255
    61ea:	7f 4f       	sbci	r23, 0xFF	; 255
    61ec:	c8 01       	movw	r24, r16
    61ee:	cc df       	rcall	.-104    	; 0x6188 <_ZN6StringaSEPKc>
    61f0:	62 96       	adiw	r28, 0x12	; 18
    61f2:	0f b6       	in	r0, 0x3f	; 63
    61f4:	f8 94       	cli
    61f6:	de bf       	out	0x3e, r29	; 62
    61f8:	0f be       	out	0x3f, r0	; 63
    61fa:	cd bf       	out	0x3d, r28	; 61
    61fc:	df 91       	pop	r29
    61fe:	cf 91       	pop	r28
    6200:	1f 91       	pop	r17
    6202:	0f 91       	pop	r16
    6204:	08 95       	ret

00006206 <_ZN6StringC1Efh>:
    6206:	ef 92       	push	r14
    6208:	ff 92       	push	r15
    620a:	0f 93       	push	r16
    620c:	1f 93       	push	r17
    620e:	cf 93       	push	r28
    6210:	df 93       	push	r29
    6212:	cd b7       	in	r28, 0x3d	; 61
    6214:	de b7       	in	r29, 0x3e	; 62
    6216:	a1 97       	sbiw	r28, 0x21	; 33
    6218:	0f b6       	in	r0, 0x3f	; 63
    621a:	f8 94       	cli
    621c:	de bf       	out	0x3e, r29	; 62
    621e:	0f be       	out	0x3f, r0	; 63
    6220:	cd bf       	out	0x3d, r28	; 61
    6222:	7c 01       	movw	r14, r24
    6224:	cb 01       	movw	r24, r22
    6226:	ba 01       	movw	r22, r20
    6228:	f7 01       	movw	r30, r14
    622a:	11 82       	std	Z+1, r1	; 0x01
    622c:	10 82       	st	Z, r1
    622e:	13 82       	std	Z+3, r1	; 0x03
    6230:	12 82       	std	Z+2, r1	; 0x02
    6232:	15 82       	std	Z+5, r1	; 0x05
    6234:	14 82       	std	Z+4, r1	; 0x04
    6236:	42 e0       	ldi	r20, 0x02	; 2
    6238:	42 0f       	add	r20, r18
    623a:	8e 01       	movw	r16, r28
    623c:	0f 5f       	subi	r16, 0xFF	; 255
    623e:	1f 4f       	sbci	r17, 0xFF	; 255
    6240:	59 d2       	rcall	.+1202   	; 0x66f4 <dtostrf>
    6242:	bc 01       	movw	r22, r24
    6244:	c7 01       	movw	r24, r14
    6246:	a0 df       	rcall	.-192    	; 0x6188 <_ZN6StringaSEPKc>
    6248:	a1 96       	adiw	r28, 0x21	; 33
    624a:	0f b6       	in	r0, 0x3f	; 63
    624c:	f8 94       	cli
    624e:	de bf       	out	0x3e, r29	; 62
    6250:	0f be       	out	0x3f, r0	; 63
    6252:	cd bf       	out	0x3d, r28	; 61
    6254:	df 91       	pop	r29
    6256:	cf 91       	pop	r28
    6258:	1f 91       	pop	r17
    625a:	0f 91       	pop	r16
    625c:	ff 90       	pop	r15
    625e:	ef 90       	pop	r14
    6260:	08 95       	ret

00006262 <_ZN6StringC1Edh>:
    6262:	ef 92       	push	r14
    6264:	ff 92       	push	r15
    6266:	0f 93       	push	r16
    6268:	1f 93       	push	r17
    626a:	cf 93       	push	r28
    626c:	df 93       	push	r29
    626e:	cd b7       	in	r28, 0x3d	; 61
    6270:	de b7       	in	r29, 0x3e	; 62
    6272:	a1 97       	sbiw	r28, 0x21	; 33
    6274:	0f b6       	in	r0, 0x3f	; 63
    6276:	f8 94       	cli
    6278:	de bf       	out	0x3e, r29	; 62
    627a:	0f be       	out	0x3f, r0	; 63
    627c:	cd bf       	out	0x3d, r28	; 61
    627e:	7c 01       	movw	r14, r24
    6280:	cb 01       	movw	r24, r22
    6282:	ba 01       	movw	r22, r20
    6284:	f7 01       	movw	r30, r14
    6286:	11 82       	std	Z+1, r1	; 0x01
    6288:	10 82       	st	Z, r1
    628a:	13 82       	std	Z+3, r1	; 0x03
    628c:	12 82       	std	Z+2, r1	; 0x02
    628e:	15 82       	std	Z+5, r1	; 0x05
    6290:	14 82       	std	Z+4, r1	; 0x04
    6292:	42 e0       	ldi	r20, 0x02	; 2
    6294:	42 0f       	add	r20, r18
    6296:	8e 01       	movw	r16, r28
    6298:	0f 5f       	subi	r16, 0xFF	; 255
    629a:	1f 4f       	sbci	r17, 0xFF	; 255
    629c:	2b d2       	rcall	.+1110   	; 0x66f4 <dtostrf>
    629e:	bc 01       	movw	r22, r24
    62a0:	c7 01       	movw	r24, r14
    62a2:	72 df       	rcall	.-284    	; 0x6188 <_ZN6StringaSEPKc>
    62a4:	a1 96       	adiw	r28, 0x21	; 33
    62a6:	0f b6       	in	r0, 0x3f	; 63
    62a8:	f8 94       	cli
    62aa:	de bf       	out	0x3e, r29	; 62
    62ac:	0f be       	out	0x3f, r0	; 63
    62ae:	cd bf       	out	0x3d, r28	; 61
    62b0:	df 91       	pop	r29
    62b2:	cf 91       	pop	r28
    62b4:	1f 91       	pop	r17
    62b6:	0f 91       	pop	r16
    62b8:	ff 90       	pop	r15
    62ba:	ef 90       	pop	r14
    62bc:	08 95       	ret

000062be <_ZN6String6concatEPKcj>:
    62be:	ef 92       	push	r14
    62c0:	ff 92       	push	r15
    62c2:	0f 93       	push	r16
    62c4:	1f 93       	push	r17
    62c6:	cf 93       	push	r28
    62c8:	df 93       	push	r29
    62ca:	fc 01       	movw	r30, r24
    62cc:	24 81       	ldd	r18, Z+4	; 0x04
    62ce:	35 81       	ldd	r19, Z+5	; 0x05
    62d0:	61 15       	cp	r22, r1
    62d2:	71 05       	cpc	r23, r1
    62d4:	11 f4       	brne	.+4      	; 0x62da <_ZN6String6concatEPKcj+0x1c>
    62d6:	80 e0       	ldi	r24, 0x00	; 0
    62d8:	17 c0       	rjmp	.+46     	; 0x6308 <_ZN6String6concatEPKcj+0x4a>
    62da:	41 15       	cp	r20, r1
    62dc:	51 05       	cpc	r21, r1
    62de:	99 f0       	breq	.+38     	; 0x6306 <_ZN6String6concatEPKcj+0x48>
    62e0:	7b 01       	movw	r14, r22
    62e2:	ec 01       	movw	r28, r24
    62e4:	8a 01       	movw	r16, r20
    62e6:	02 0f       	add	r16, r18
    62e8:	13 1f       	adc	r17, r19
    62ea:	b8 01       	movw	r22, r16
    62ec:	e3 de       	rcall	.-570    	; 0x60b4 <_ZN6String7reserveEj>
    62ee:	88 23       	and	r24, r24
    62f0:	91 f3       	breq	.-28     	; 0x62d6 <_ZN6String6concatEPKcj+0x18>
    62f2:	28 81       	ld	r18, Y
    62f4:	39 81       	ldd	r19, Y+1	; 0x01
    62f6:	8c 81       	ldd	r24, Y+4	; 0x04
    62f8:	9d 81       	ldd	r25, Y+5	; 0x05
    62fa:	b7 01       	movw	r22, r14
    62fc:	82 0f       	add	r24, r18
    62fe:	93 1f       	adc	r25, r19
    6300:	bd d5       	rcall	.+2938   	; 0x6e7c <strcpy>
    6302:	1d 83       	std	Y+5, r17	; 0x05
    6304:	0c 83       	std	Y+4, r16	; 0x04
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	df 91       	pop	r29
    630a:	cf 91       	pop	r28
    630c:	1f 91       	pop	r17
    630e:	0f 91       	pop	r16
    6310:	ff 90       	pop	r15
    6312:	ef 90       	pop	r14
    6314:	08 95       	ret

00006316 <_ZN6String6concatEPKc>:
    6316:	61 15       	cp	r22, r1
    6318:	71 05       	cpc	r23, r1
    631a:	49 f0       	breq	.+18     	; 0x632e <_ZN6String6concatEPKc+0x18>
    631c:	fb 01       	movw	r30, r22
    631e:	01 90       	ld	r0, Z+
    6320:	00 20       	and	r0, r0
    6322:	e9 f7       	brne	.-6      	; 0x631e <_ZN6String6concatEPKc+0x8>
    6324:	31 97       	sbiw	r30, 0x01	; 1
    6326:	af 01       	movw	r20, r30
    6328:	46 1b       	sub	r20, r22
    632a:	57 0b       	sbc	r21, r23
    632c:	c8 cf       	rjmp	.-112    	; 0x62be <_ZN6String6concatEPKcj>
    632e:	80 e0       	ldi	r24, 0x00	; 0
    6330:	08 95       	ret

00006332 <_ZN6String6concatEc>:
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	00 d0       	rcall	.+0      	; 0x6338 <_ZN6String6concatEc+0x6>
    6338:	cd b7       	in	r28, 0x3d	; 61
    633a:	de b7       	in	r29, 0x3e	; 62
    633c:	69 83       	std	Y+1, r22	; 0x01
    633e:	1a 82       	std	Y+2, r1	; 0x02
    6340:	41 e0       	ldi	r20, 0x01	; 1
    6342:	50 e0       	ldi	r21, 0x00	; 0
    6344:	be 01       	movw	r22, r28
    6346:	6f 5f       	subi	r22, 0xFF	; 255
    6348:	7f 4f       	sbci	r23, 0xFF	; 255
    634a:	b9 df       	rcall	.-142    	; 0x62be <_ZN6String6concatEPKcj>
    634c:	0f 90       	pop	r0
    634e:	0f 90       	pop	r0
    6350:	df 91       	pop	r29
    6352:	cf 91       	pop	r28
    6354:	08 95       	ret

00006356 <_ZplRK15StringSumHelperRK6String>:
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	ec 01       	movw	r28, r24
    635c:	fb 01       	movw	r30, r22
    635e:	44 81       	ldd	r20, Z+4	; 0x04
    6360:	55 81       	ldd	r21, Z+5	; 0x05
    6362:	60 81       	ld	r22, Z
    6364:	71 81       	ldd	r23, Z+1	; 0x01
    6366:	ab df       	rcall	.-170    	; 0x62be <_ZN6String6concatEPKcj>
    6368:	81 11       	cpse	r24, r1
    636a:	02 c0       	rjmp	.+4      	; 0x6370 <_ZplRK15StringSumHelperRK6String+0x1a>
    636c:	ce 01       	movw	r24, r28
    636e:	78 de       	rcall	.-784    	; 0x6060 <_ZN6String10invalidateEv>
    6370:	ce 01       	movw	r24, r28
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	08 95       	ret

00006378 <_ZplRK15StringSumHelperPKc>:
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
    637c:	ec 01       	movw	r28, r24
    637e:	61 15       	cp	r22, r1
    6380:	71 05       	cpc	r23, r1
    6382:	59 f0       	breq	.+22     	; 0x639a <_ZplRK15StringSumHelperPKc+0x22>
    6384:	fb 01       	movw	r30, r22
    6386:	01 90       	ld	r0, Z+
    6388:	00 20       	and	r0, r0
    638a:	e9 f7       	brne	.-6      	; 0x6386 <_ZplRK15StringSumHelperPKc+0xe>
    638c:	31 97       	sbiw	r30, 0x01	; 1
    638e:	af 01       	movw	r20, r30
    6390:	46 1b       	sub	r20, r22
    6392:	57 0b       	sbc	r21, r23
    6394:	94 df       	rcall	.-216    	; 0x62be <_ZN6String6concatEPKcj>
    6396:	81 11       	cpse	r24, r1
    6398:	02 c0       	rjmp	.+4      	; 0x639e <_ZplRK15StringSumHelperPKc+0x26>
    639a:	ce 01       	movw	r24, r28
    639c:	61 de       	rcall	.-830    	; 0x6060 <_ZN6String10invalidateEv>
    639e:	ce 01       	movw	r24, r28
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	08 95       	ret

000063a6 <_ZNK6String6equalsEPKc>:
    63a6:	fc 01       	movw	r30, r24
    63a8:	24 81       	ldd	r18, Z+4	; 0x04
    63aa:	35 81       	ldd	r19, Z+5	; 0x05
    63ac:	23 2b       	or	r18, r19
    63ae:	31 f4       	brne	.+12     	; 0x63bc <_ZNK6String6equalsEPKc+0x16>
    63b0:	21 e0       	ldi	r18, 0x01	; 1
    63b2:	61 15       	cp	r22, r1
    63b4:	71 05       	cpc	r23, r1
    63b6:	99 f0       	breq	.+38     	; 0x63de <_ZNK6String6equalsEPKc+0x38>
    63b8:	fb 01       	movw	r30, r22
    63ba:	08 c0       	rjmp	.+16     	; 0x63cc <_ZNK6String6equalsEPKc+0x26>
    63bc:	fc 01       	movw	r30, r24
    63be:	80 81       	ld	r24, Z
    63c0:	91 81       	ldd	r25, Z+1	; 0x01
    63c2:	61 15       	cp	r22, r1
    63c4:	71 05       	cpc	r23, r1
    63c6:	31 f4       	brne	.+12     	; 0x63d4 <_ZNK6String6equalsEPKc+0x2e>
    63c8:	21 e0       	ldi	r18, 0x01	; 1
    63ca:	fc 01       	movw	r30, r24
    63cc:	80 81       	ld	r24, Z
    63ce:	88 23       	and	r24, r24
    63d0:	31 f0       	breq	.+12     	; 0x63de <_ZNK6String6equalsEPKc+0x38>
    63d2:	04 c0       	rjmp	.+8      	; 0x63dc <_ZNK6String6equalsEPKc+0x36>
    63d4:	4a d5       	rcall	.+2708   	; 0x6e6a <strcmp>
    63d6:	21 e0       	ldi	r18, 0x01	; 1
    63d8:	89 2b       	or	r24, r25
    63da:	09 f0       	breq	.+2      	; 0x63de <_ZNK6String6equalsEPKc+0x38>
    63dc:	20 e0       	ldi	r18, 0x00	; 0
    63de:	82 2f       	mov	r24, r18
    63e0:	08 95       	ret

000063e2 <_ZNK6String10startsWithERKS_j>:
    63e2:	db 01       	movw	r26, r22
    63e4:	14 96       	adiw	r26, 0x04	; 4
    63e6:	ed 91       	ld	r30, X+
    63e8:	fc 91       	ld	r31, X
    63ea:	15 97       	sbiw	r26, 0x05	; 5
    63ec:	dc 01       	movw	r26, r24
    63ee:	14 96       	adiw	r26, 0x04	; 4
    63f0:	2d 91       	ld	r18, X+
    63f2:	3c 91       	ld	r19, X
    63f4:	15 97       	sbiw	r26, 0x05	; 5
    63f6:	2e 1b       	sub	r18, r30
    63f8:	3f 0b       	sbc	r19, r31
    63fa:	24 17       	cp	r18, r20
    63fc:	35 07       	cpc	r19, r21
    63fe:	98 f0       	brcs	.+38     	; 0x6426 <_ZNK6String10startsWithERKS_j+0x44>
    6400:	2d 91       	ld	r18, X+
    6402:	3c 91       	ld	r19, X
    6404:	21 15       	cp	r18, r1
    6406:	31 05       	cpc	r19, r1
    6408:	71 f0       	breq	.+28     	; 0x6426 <_ZNK6String10startsWithERKS_j+0x44>
    640a:	db 01       	movw	r26, r22
    640c:	6d 91       	ld	r22, X+
    640e:	7c 91       	ld	r23, X
    6410:	61 15       	cp	r22, r1
    6412:	71 05       	cpc	r23, r1
    6414:	41 f0       	breq	.+16     	; 0x6426 <_ZNK6String10startsWithERKS_j+0x44>
    6416:	ca 01       	movw	r24, r20
    6418:	af 01       	movw	r20, r30
    641a:	82 0f       	add	r24, r18
    641c:	93 1f       	adc	r25, r19
    641e:	35 d5       	rcall	.+2666   	; 0x6e8a <strncmp>
    6420:	21 e0       	ldi	r18, 0x01	; 1
    6422:	89 2b       	or	r24, r25
    6424:	09 f0       	breq	.+2      	; 0x6428 <_ZNK6String10startsWithERKS_j+0x46>
    6426:	20 e0       	ldi	r18, 0x00	; 0
    6428:	82 2f       	mov	r24, r18
    642a:	08 95       	ret

0000642c <_ZNK6String10startsWithERKS_>:
    642c:	fc 01       	movw	r30, r24
    642e:	44 81       	ldd	r20, Z+4	; 0x04
    6430:	55 81       	ldd	r21, Z+5	; 0x05
    6432:	fb 01       	movw	r30, r22
    6434:	24 81       	ldd	r18, Z+4	; 0x04
    6436:	35 81       	ldd	r19, Z+5	; 0x05
    6438:	42 17       	cp	r20, r18
    643a:	53 07       	cpc	r21, r19
    643c:	18 f0       	brcs	.+6      	; 0x6444 <_ZNK6String10startsWithERKS_+0x18>
    643e:	40 e0       	ldi	r20, 0x00	; 0
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	cf cf       	rjmp	.-98     	; 0x63e2 <_ZNK6String10startsWithERKS_j>
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	08 95       	ret

00006448 <_ZNK6StringixEj>:
    6448:	fc 01       	movw	r30, r24
    644a:	24 81       	ldd	r18, Z+4	; 0x04
    644c:	35 81       	ldd	r19, Z+5	; 0x05
    644e:	62 17       	cp	r22, r18
    6450:	73 07       	cpc	r23, r19
    6452:	48 f4       	brcc	.+18     	; 0x6466 <_ZNK6StringixEj+0x1e>
    6454:	80 81       	ld	r24, Z
    6456:	91 81       	ldd	r25, Z+1	; 0x01
    6458:	00 97       	sbiw	r24, 0x00	; 0
    645a:	29 f0       	breq	.+10     	; 0x6466 <_ZNK6StringixEj+0x1e>
    645c:	fc 01       	movw	r30, r24
    645e:	e6 0f       	add	r30, r22
    6460:	f7 1f       	adc	r31, r23
    6462:	80 81       	ld	r24, Z
    6464:	08 95       	ret
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	08 95       	ret

0000646a <_ZNK6String6charAtEj>:
    646a:	ee cf       	rjmp	.-36     	; 0x6448 <_ZNK6StringixEj>

0000646c <_ZNK6String9substringEjj>:
    646c:	bf 92       	push	r11
    646e:	cf 92       	push	r12
    6470:	df 92       	push	r13
    6472:	ef 92       	push	r14
    6474:	ff 92       	push	r15
    6476:	0f 93       	push	r16
    6478:	1f 93       	push	r17
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	7c 01       	movw	r14, r24
    6480:	6b 01       	movw	r12, r22
    6482:	8a 01       	movw	r16, r20
    6484:	e9 01       	movw	r28, r18
    6486:	24 17       	cp	r18, r20
    6488:	35 07       	cpc	r19, r21
    648a:	20 f4       	brcc	.+8      	; 0x6494 <_ZNK6String9substringEjj+0x28>
    648c:	81 2f       	mov	r24, r17
    648e:	89 01       	movw	r16, r18
    6490:	c4 2f       	mov	r28, r20
    6492:	d8 2f       	mov	r29, r24
    6494:	6a eb       	ldi	r22, 0xBA	; 186
    6496:	71 e0       	ldi	r23, 0x01	; 1
    6498:	c7 01       	movw	r24, r14
    649a:	45 de       	rcall	.-886    	; 0x6126 <_ZN6StringC1EPKc>
    649c:	d6 01       	movw	r26, r12
    649e:	14 96       	adiw	r26, 0x04	; 4
    64a0:	8d 91       	ld	r24, X+
    64a2:	9c 91       	ld	r25, X
    64a4:	15 97       	sbiw	r26, 0x05	; 5
    64a6:	08 17       	cp	r16, r24
    64a8:	19 07       	cpc	r17, r25
    64aa:	c8 f4       	brcc	.+50     	; 0x64de <_ZNK6String9substringEjj+0x72>
    64ac:	8c 17       	cp	r24, r28
    64ae:	9d 07       	cpc	r25, r29
    64b0:	08 f4       	brcc	.+2      	; 0x64b4 <_ZNK6String9substringEjj+0x48>
    64b2:	ec 01       	movw	r28, r24
    64b4:	d6 01       	movw	r26, r12
    64b6:	ed 91       	ld	r30, X+
    64b8:	fc 91       	ld	r31, X
    64ba:	11 97       	sbiw	r26, 0x01	; 1
    64bc:	ec 0f       	add	r30, r28
    64be:	fd 1f       	adc	r31, r29
    64c0:	b0 80       	ld	r11, Z
    64c2:	10 82       	st	Z, r1
    64c4:	4d 91       	ld	r20, X+
    64c6:	5c 91       	ld	r21, X
    64c8:	ba 01       	movw	r22, r20
    64ca:	60 0f       	add	r22, r16
    64cc:	71 1f       	adc	r23, r17
    64ce:	c7 01       	movw	r24, r14
    64d0:	5b de       	rcall	.-842    	; 0x6188 <_ZN6StringaSEPKc>
    64d2:	d6 01       	movw	r26, r12
    64d4:	ed 91       	ld	r30, X+
    64d6:	fc 91       	ld	r31, X
    64d8:	ec 0f       	add	r30, r28
    64da:	fd 1f       	adc	r31, r29
    64dc:	b0 82       	st	Z, r11
    64de:	c7 01       	movw	r24, r14
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	1f 91       	pop	r17
    64e6:	0f 91       	pop	r16
    64e8:	ff 90       	pop	r15
    64ea:	ef 90       	pop	r14
    64ec:	df 90       	pop	r13
    64ee:	cf 90       	pop	r12
    64f0:	bf 90       	pop	r11
    64f2:	08 95       	ret

000064f4 <_ZN6String4trimEv>:

void String::trim(void)
{
    64f4:	af 92       	push	r10
    64f6:	bf 92       	push	r11
    64f8:	cf 92       	push	r12
    64fa:	df 92       	push	r13
    64fc:	ef 92       	push	r14
    64fe:	ff 92       	push	r15
    6500:	0f 93       	push	r16
    6502:	1f 93       	push	r17
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
	if (!buffer || len == 0) return;
    6508:	dc 01       	movw	r26, r24
    650a:	cd 90       	ld	r12, X+
    650c:	dc 90       	ld	r13, X
    650e:	11 97       	sbiw	r26, 0x01	; 1
    6510:	c1 14       	cp	r12, r1
    6512:	d1 04       	cpc	r13, r1
    6514:	d9 f1       	breq	.+118    	; 0x658c <_ZN6String4trimEv+0x98>
    6516:	14 96       	adiw	r26, 0x04	; 4
    6518:	cd 91       	ld	r28, X+
    651a:	dc 91       	ld	r29, X
    651c:	15 97       	sbiw	r26, 0x05	; 5
    651e:	20 97       	sbiw	r28, 0x00	; 0
    6520:	a9 f1       	breq	.+106    	; 0x658c <_ZN6String4trimEv+0x98>
    6522:	8c 01       	movw	r16, r24
    6524:	56 01       	movw	r10, r12
    6526:	75 01       	movw	r14, r10
    6528:	bf ef       	ldi	r27, 0xFF	; 255
    652a:	ab 1a       	sub	r10, r27
    652c:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    652e:	f7 01       	movw	r30, r14
    6530:	80 81       	ld	r24, Z
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	71 d4       	rcall	.+2274   	; 0x6e18 <isspace>
    6536:	89 2b       	or	r24, r25
    6538:	b1 f7       	brne	.-20     	; 0x6526 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    653a:	21 97       	sbiw	r28, 0x01	; 1
    653c:	cc 0d       	add	r28, r12
    653e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6540:	88 81       	ld	r24, Y
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	69 d4       	rcall	.+2258   	; 0x6e18 <isspace>
    6546:	89 2b       	or	r24, r25
    6548:	89 f4       	brne	.+34     	; 0x656c <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    654a:	ae 01       	movw	r20, r28
    654c:	4f 5f       	subi	r20, 0xFF	; 255
    654e:	5f 4f       	sbci	r21, 0xFF	; 255
    6550:	4e 19       	sub	r20, r14
    6552:	5f 09       	sbc	r21, r15
    6554:	d8 01       	movw	r26, r16
    6556:	15 96       	adiw	r26, 0x05	; 5
    6558:	5c 93       	st	X, r21
    655a:	4e 93       	st	-X, r20
    655c:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    655e:	ce 14       	cp	r12, r14
    6560:	df 04       	cpc	r13, r15
    6562:	48 f4       	brcc	.+18     	; 0x6576 <_ZN6String4trimEv+0x82>
    6564:	b7 01       	movw	r22, r14
    6566:	c6 01       	movw	r24, r12
    6568:	77 d4       	rcall	.+2286   	; 0x6e58 <memcpy>
    656a:	05 c0       	rjmp	.+10     	; 0x6576 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    656c:	ce 15       	cp	r28, r14
    656e:	df 05       	cpc	r29, r15
    6570:	60 f3       	brcs	.-40     	; 0x654a <_ZN6String4trimEv+0x56>
    6572:	21 97       	sbiw	r28, 0x01	; 1
    6574:	e5 cf       	rjmp	.-54     	; 0x6540 <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    6576:	d8 01       	movw	r26, r16
    6578:	ed 91       	ld	r30, X+
    657a:	fc 91       	ld	r31, X
    657c:	11 97       	sbiw	r26, 0x01	; 1
    657e:	14 96       	adiw	r26, 0x04	; 4
    6580:	8d 91       	ld	r24, X+
    6582:	9c 91       	ld	r25, X
    6584:	15 97       	sbiw	r26, 0x05	; 5
    6586:	e8 0f       	add	r30, r24
    6588:	f9 1f       	adc	r31, r25
    658a:	10 82       	st	Z, r1
}
    658c:	df 91       	pop	r29
    658e:	cf 91       	pop	r28
    6590:	1f 91       	pop	r17
    6592:	0f 91       	pop	r16
    6594:	ff 90       	pop	r15
    6596:	ef 90       	pop	r14
    6598:	df 90       	pop	r13
    659a:	cf 90       	pop	r12
    659c:	bf 90       	pop	r11
    659e:	af 90       	pop	r10
    65a0:	08 95       	ret

000065a2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    65a2:	fc 01       	movw	r30, r24
    65a4:	80 81       	ld	r24, Z
    65a6:	91 81       	ldd	r25, Z+1	; 0x01
    65a8:	00 97       	sbiw	r24, 0x00	; 0
    65aa:	09 f0       	breq	.+2      	; 0x65ae <_ZNK6String5toIntEv+0xc>
    65ac:	0f c4       	rjmp	.+2078   	; 0x6dcc <atol>
	return 0;
}
    65ae:	60 e0       	ldi	r22, 0x00	; 0
    65b0:	70 e0       	ldi	r23, 0x00	; 0
    65b2:	cb 01       	movw	r24, r22
    65b4:	08 95       	ret

000065b6 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    65b6:	fc 01       	movw	r30, r24
    65b8:	80 81       	ld	r24, Z
    65ba:	91 81       	ldd	r25, Z+1	; 0x01
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	09 f0       	breq	.+2      	; 0x65c2 <_ZNK6String7toFloatEv+0xc>
    65c0:	02 c4       	rjmp	.+2052   	; 0x6dc6 <atof>
	return 0;
}
    65c2:	60 e0       	ldi	r22, 0x00	; 0
    65c4:	70 e0       	ldi	r23, 0x00	; 0
    65c6:	cb 01       	movw	r24, r22
    65c8:	08 95       	ret

000065ca <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    65ca:	08 95       	ret

000065cc <__udivmodsi4>:
    65cc:	a1 e2       	ldi	r26, 0x21	; 33
    65ce:	1a 2e       	mov	r1, r26
    65d0:	aa 1b       	sub	r26, r26
    65d2:	bb 1b       	sub	r27, r27
    65d4:	fd 01       	movw	r30, r26
    65d6:	0d c0       	rjmp	.+26     	; 0x65f2 <__udivmodsi4_ep>

000065d8 <__udivmodsi4_loop>:
    65d8:	aa 1f       	adc	r26, r26
    65da:	bb 1f       	adc	r27, r27
    65dc:	ee 1f       	adc	r30, r30
    65de:	ff 1f       	adc	r31, r31
    65e0:	a2 17       	cp	r26, r18
    65e2:	b3 07       	cpc	r27, r19
    65e4:	e4 07       	cpc	r30, r20
    65e6:	f5 07       	cpc	r31, r21
    65e8:	20 f0       	brcs	.+8      	; 0x65f2 <__udivmodsi4_ep>
    65ea:	a2 1b       	sub	r26, r18
    65ec:	b3 0b       	sbc	r27, r19
    65ee:	e4 0b       	sbc	r30, r20
    65f0:	f5 0b       	sbc	r31, r21

000065f2 <__udivmodsi4_ep>:
    65f2:	66 1f       	adc	r22, r22
    65f4:	77 1f       	adc	r23, r23
    65f6:	88 1f       	adc	r24, r24
    65f8:	99 1f       	adc	r25, r25
    65fa:	1a 94       	dec	r1
    65fc:	69 f7       	brne	.-38     	; 0x65d8 <__udivmodsi4_loop>
    65fe:	60 95       	com	r22
    6600:	70 95       	com	r23
    6602:	80 95       	com	r24
    6604:	90 95       	com	r25
    6606:	9b 01       	movw	r18, r22
    6608:	ac 01       	movw	r20, r24
    660a:	bd 01       	movw	r22, r26
    660c:	cf 01       	movw	r24, r30
    660e:	08 95       	ret

00006610 <__divmodsi4>:
    6610:	05 2e       	mov	r0, r21
    6612:	97 fb       	bst	r25, 7
    6614:	16 f4       	brtc	.+4      	; 0x661a <__divmodsi4+0xa>
    6616:	00 94       	com	r0
    6618:	0f d0       	rcall	.+30     	; 0x6638 <__negsi2>
    661a:	57 fd       	sbrc	r21, 7
    661c:	05 d0       	rcall	.+10     	; 0x6628 <__divmodsi4_neg2>
    661e:	d6 df       	rcall	.-84     	; 0x65cc <__udivmodsi4>
    6620:	07 fc       	sbrc	r0, 7
    6622:	02 d0       	rcall	.+4      	; 0x6628 <__divmodsi4_neg2>
    6624:	46 f4       	brtc	.+16     	; 0x6636 <__divmodsi4_exit>
    6626:	08 c0       	rjmp	.+16     	; 0x6638 <__negsi2>

00006628 <__divmodsi4_neg2>:
    6628:	50 95       	com	r21
    662a:	40 95       	com	r20
    662c:	30 95       	com	r19
    662e:	21 95       	neg	r18
    6630:	3f 4f       	sbci	r19, 0xFF	; 255
    6632:	4f 4f       	sbci	r20, 0xFF	; 255
    6634:	5f 4f       	sbci	r21, 0xFF	; 255

00006636 <__divmodsi4_exit>:
    6636:	08 95       	ret

00006638 <__negsi2>:
    6638:	90 95       	com	r25
    663a:	80 95       	com	r24
    663c:	70 95       	com	r23
    663e:	61 95       	neg	r22
    6640:	7f 4f       	sbci	r23, 0xFF	; 255
    6642:	8f 4f       	sbci	r24, 0xFF	; 255
    6644:	9f 4f       	sbci	r25, 0xFF	; 255
    6646:	08 95       	ret

00006648 <__tablejump2__>:
    6648:	ee 0f       	add	r30, r30
    664a:	ff 1f       	adc	r31, r31
    664c:	05 90       	lpm	r0, Z+
    664e:	f4 91       	lpm	r31, Z
    6650:	e0 2d       	mov	r30, r0
    6652:	09 94       	ijmp

00006654 <__muluhisi3>:
    6654:	40 d0       	rcall	.+128    	; 0x66d6 <__umulhisi3>
    6656:	a5 9f       	mul	r26, r21
    6658:	90 0d       	add	r25, r0
    665a:	b4 9f       	mul	r27, r20
    665c:	90 0d       	add	r25, r0
    665e:	a4 9f       	mul	r26, r20
    6660:	80 0d       	add	r24, r0
    6662:	91 1d       	adc	r25, r1
    6664:	11 24       	eor	r1, r1
    6666:	08 95       	ret

00006668 <__prologue_saves__>:
    6668:	2f 92       	push	r2
    666a:	3f 92       	push	r3
    666c:	4f 92       	push	r4
    666e:	5f 92       	push	r5
    6670:	6f 92       	push	r6
    6672:	7f 92       	push	r7
    6674:	8f 92       	push	r8
    6676:	9f 92       	push	r9
    6678:	af 92       	push	r10
    667a:	bf 92       	push	r11
    667c:	cf 92       	push	r12
    667e:	df 92       	push	r13
    6680:	ef 92       	push	r14
    6682:	ff 92       	push	r15
    6684:	0f 93       	push	r16
    6686:	1f 93       	push	r17
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
    668c:	cd b7       	in	r28, 0x3d	; 61
    668e:	de b7       	in	r29, 0x3e	; 62
    6690:	ca 1b       	sub	r28, r26
    6692:	db 0b       	sbc	r29, r27
    6694:	0f b6       	in	r0, 0x3f	; 63
    6696:	f8 94       	cli
    6698:	de bf       	out	0x3e, r29	; 62
    669a:	0f be       	out	0x3f, r0	; 63
    669c:	cd bf       	out	0x3d, r28	; 61
    669e:	09 94       	ijmp

000066a0 <__epilogue_restores__>:
    66a0:	2a 88       	ldd	r2, Y+18	; 0x12
    66a2:	39 88       	ldd	r3, Y+17	; 0x11
    66a4:	48 88       	ldd	r4, Y+16	; 0x10
    66a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    66a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    66aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    66ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    66ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    66b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    66b2:	b9 84       	ldd	r11, Y+9	; 0x09
    66b4:	c8 84       	ldd	r12, Y+8	; 0x08
    66b6:	df 80       	ldd	r13, Y+7	; 0x07
    66b8:	ee 80       	ldd	r14, Y+6	; 0x06
    66ba:	fd 80       	ldd	r15, Y+5	; 0x05
    66bc:	0c 81       	ldd	r16, Y+4	; 0x04
    66be:	1b 81       	ldd	r17, Y+3	; 0x03
    66c0:	aa 81       	ldd	r26, Y+2	; 0x02
    66c2:	b9 81       	ldd	r27, Y+1	; 0x01
    66c4:	ce 0f       	add	r28, r30
    66c6:	d1 1d       	adc	r29, r1
    66c8:	0f b6       	in	r0, 0x3f	; 63
    66ca:	f8 94       	cli
    66cc:	de bf       	out	0x3e, r29	; 62
    66ce:	0f be       	out	0x3f, r0	; 63
    66d0:	cd bf       	out	0x3d, r28	; 61
    66d2:	ed 01       	movw	r28, r26
    66d4:	08 95       	ret

000066d6 <__umulhisi3>:
    66d6:	a2 9f       	mul	r26, r18
    66d8:	b0 01       	movw	r22, r0
    66da:	b3 9f       	mul	r27, r19
    66dc:	c0 01       	movw	r24, r0
    66de:	a3 9f       	mul	r26, r19
    66e0:	70 0d       	add	r23, r0
    66e2:	81 1d       	adc	r24, r1
    66e4:	11 24       	eor	r1, r1
    66e6:	91 1d       	adc	r25, r1
    66e8:	b2 9f       	mul	r27, r18
    66ea:	70 0d       	add	r23, r0
    66ec:	81 1d       	adc	r24, r1
    66ee:	11 24       	eor	r1, r1
    66f0:	91 1d       	adc	r25, r1
    66f2:	08 95       	ret

000066f4 <dtostrf>:
    66f4:	ef 92       	push	r14
    66f6:	0f 93       	push	r16
    66f8:	1f 93       	push	r17
    66fa:	cf 93       	push	r28
    66fc:	df 93       	push	r29
    66fe:	e8 01       	movw	r28, r16
    6700:	47 fd       	sbrc	r20, 7
    6702:	02 c0       	rjmp	.+4      	; 0x6708 <dtostrf+0x14>
    6704:	34 e0       	ldi	r19, 0x04	; 4
    6706:	01 c0       	rjmp	.+2      	; 0x670a <dtostrf+0x16>
    6708:	34 e1       	ldi	r19, 0x14	; 20
    670a:	e4 2f       	mov	r30, r20
    670c:	44 0f       	add	r20, r20
    670e:	ff 0b       	sbc	r31, r31
    6710:	f7 ff       	sbrs	r31, 7
    6712:	03 c0       	rjmp	.+6      	; 0x671a <dtostrf+0x26>
    6714:	f1 95       	neg	r31
    6716:	e1 95       	neg	r30
    6718:	f1 09       	sbc	r31, r1
    671a:	e3 2e       	mov	r14, r19
    671c:	02 2f       	mov	r16, r18
    671e:	2e 2f       	mov	r18, r30
    6720:	ae 01       	movw	r20, r28
    6722:	03 d4       	rcall	.+2054   	; 0x6f2a <dtoa_prf>
    6724:	ce 01       	movw	r24, r28
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	1f 91       	pop	r17
    672c:	0f 91       	pop	r16
    672e:	ef 90       	pop	r14
    6730:	08 95       	ret

00006732 <malloc>:
    6732:	cf 93       	push	r28
    6734:	df 93       	push	r29
    6736:	82 30       	cpi	r24, 0x02	; 2
    6738:	91 05       	cpc	r25, r1
    673a:	10 f4       	brcc	.+4      	; 0x6740 <malloc+0xe>
    673c:	82 e0       	ldi	r24, 0x02	; 2
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <__flp>
    6744:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <__flp+0x1>
    6748:	20 e0       	ldi	r18, 0x00	; 0
    674a:	30 e0       	ldi	r19, 0x00	; 0
    674c:	c0 e0       	ldi	r28, 0x00	; 0
    674e:	d0 e0       	ldi	r29, 0x00	; 0
    6750:	30 97       	sbiw	r30, 0x00	; 0
    6752:	11 f1       	breq	.+68     	; 0x6798 <malloc+0x66>
    6754:	40 81       	ld	r20, Z
    6756:	51 81       	ldd	r21, Z+1	; 0x01
    6758:	48 17       	cp	r20, r24
    675a:	59 07       	cpc	r21, r25
    675c:	c0 f0       	brcs	.+48     	; 0x678e <malloc+0x5c>
    675e:	48 17       	cp	r20, r24
    6760:	59 07       	cpc	r21, r25
    6762:	61 f4       	brne	.+24     	; 0x677c <malloc+0x4a>
    6764:	82 81       	ldd	r24, Z+2	; 0x02
    6766:	93 81       	ldd	r25, Z+3	; 0x03
    6768:	20 97       	sbiw	r28, 0x00	; 0
    676a:	19 f0       	breq	.+6      	; 0x6772 <malloc+0x40>
    676c:	9b 83       	std	Y+3, r25	; 0x03
    676e:	8a 83       	std	Y+2, r24	; 0x02
    6770:	2b c0       	rjmp	.+86     	; 0x67c8 <malloc+0x96>
    6772:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <__flp+0x1>
    6776:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__flp>
    677a:	26 c0       	rjmp	.+76     	; 0x67c8 <malloc+0x96>
    677c:	21 15       	cp	r18, r1
    677e:	31 05       	cpc	r19, r1
    6780:	19 f0       	breq	.+6      	; 0x6788 <malloc+0x56>
    6782:	42 17       	cp	r20, r18
    6784:	53 07       	cpc	r21, r19
    6786:	18 f4       	brcc	.+6      	; 0x678e <malloc+0x5c>
    6788:	9a 01       	movw	r18, r20
    678a:	be 01       	movw	r22, r28
    678c:	df 01       	movw	r26, r30
    678e:	ef 01       	movw	r28, r30
    6790:	02 80       	ldd	r0, Z+2	; 0x02
    6792:	f3 81       	ldd	r31, Z+3	; 0x03
    6794:	e0 2d       	mov	r30, r0
    6796:	dc cf       	rjmp	.-72     	; 0x6750 <malloc+0x1e>
    6798:	21 15       	cp	r18, r1
    679a:	31 05       	cpc	r19, r1
    679c:	09 f1       	breq	.+66     	; 0x67e0 <malloc+0xae>
    679e:	28 1b       	sub	r18, r24
    67a0:	39 0b       	sbc	r19, r25
    67a2:	24 30       	cpi	r18, 0x04	; 4
    67a4:	31 05       	cpc	r19, r1
    67a6:	90 f4       	brcc	.+36     	; 0x67cc <malloc+0x9a>
    67a8:	12 96       	adiw	r26, 0x02	; 2
    67aa:	8d 91       	ld	r24, X+
    67ac:	9c 91       	ld	r25, X
    67ae:	13 97       	sbiw	r26, 0x03	; 3
    67b0:	61 15       	cp	r22, r1
    67b2:	71 05       	cpc	r23, r1
    67b4:	21 f0       	breq	.+8      	; 0x67be <malloc+0x8c>
    67b6:	fb 01       	movw	r30, r22
    67b8:	93 83       	std	Z+3, r25	; 0x03
    67ba:	82 83       	std	Z+2, r24	; 0x02
    67bc:	04 c0       	rjmp	.+8      	; 0x67c6 <malloc+0x94>
    67be:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <__flp+0x1>
    67c2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__flp>
    67c6:	fd 01       	movw	r30, r26
    67c8:	32 96       	adiw	r30, 0x02	; 2
    67ca:	44 c0       	rjmp	.+136    	; 0x6854 <malloc+0x122>
    67cc:	fd 01       	movw	r30, r26
    67ce:	e2 0f       	add	r30, r18
    67d0:	f3 1f       	adc	r31, r19
    67d2:	81 93       	st	Z+, r24
    67d4:	91 93       	st	Z+, r25
    67d6:	22 50       	subi	r18, 0x02	; 2
    67d8:	31 09       	sbc	r19, r1
    67da:	2d 93       	st	X+, r18
    67dc:	3c 93       	st	X, r19
    67de:	3a c0       	rjmp	.+116    	; 0x6854 <malloc+0x122>
    67e0:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <__brkval>
    67e4:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <__brkval+0x1>
    67e8:	23 2b       	or	r18, r19
    67ea:	41 f4       	brne	.+16     	; 0x67fc <malloc+0xca>
    67ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    67f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    67f4:	30 93 13 06 	sts	0x0613, r19	; 0x800613 <__brkval+0x1>
    67f8:	20 93 12 06 	sts	0x0612, r18	; 0x800612 <__brkval>
    67fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6800:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6804:	21 15       	cp	r18, r1
    6806:	31 05       	cpc	r19, r1
    6808:	41 f4       	brne	.+16     	; 0x681a <malloc+0xe8>
    680a:	2d b7       	in	r18, 0x3d	; 61
    680c:	3e b7       	in	r19, 0x3e	; 62
    680e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6812:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6816:	24 1b       	sub	r18, r20
    6818:	35 0b       	sbc	r19, r21
    681a:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <__brkval>
    681e:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <__brkval+0x1>
    6822:	e2 17       	cp	r30, r18
    6824:	f3 07       	cpc	r31, r19
    6826:	a0 f4       	brcc	.+40     	; 0x6850 <malloc+0x11e>
    6828:	2e 1b       	sub	r18, r30
    682a:	3f 0b       	sbc	r19, r31
    682c:	28 17       	cp	r18, r24
    682e:	39 07       	cpc	r19, r25
    6830:	78 f0       	brcs	.+30     	; 0x6850 <malloc+0x11e>
    6832:	ac 01       	movw	r20, r24
    6834:	4e 5f       	subi	r20, 0xFE	; 254
    6836:	5f 4f       	sbci	r21, 0xFF	; 255
    6838:	24 17       	cp	r18, r20
    683a:	35 07       	cpc	r19, r21
    683c:	48 f0       	brcs	.+18     	; 0x6850 <malloc+0x11e>
    683e:	4e 0f       	add	r20, r30
    6840:	5f 1f       	adc	r21, r31
    6842:	50 93 13 06 	sts	0x0613, r21	; 0x800613 <__brkval+0x1>
    6846:	40 93 12 06 	sts	0x0612, r20	; 0x800612 <__brkval>
    684a:	81 93       	st	Z+, r24
    684c:	91 93       	st	Z+, r25
    684e:	02 c0       	rjmp	.+4      	; 0x6854 <malloc+0x122>
    6850:	e0 e0       	ldi	r30, 0x00	; 0
    6852:	f0 e0       	ldi	r31, 0x00	; 0
    6854:	cf 01       	movw	r24, r30
    6856:	df 91       	pop	r29
    6858:	cf 91       	pop	r28
    685a:	08 95       	ret

0000685c <free>:
    685c:	0f 93       	push	r16
    685e:	1f 93       	push	r17
    6860:	cf 93       	push	r28
    6862:	df 93       	push	r29
    6864:	00 97       	sbiw	r24, 0x00	; 0
    6866:	09 f4       	brne	.+2      	; 0x686a <free+0xe>
    6868:	8c c0       	rjmp	.+280    	; 0x6982 <free+0x126>
    686a:	fc 01       	movw	r30, r24
    686c:	32 97       	sbiw	r30, 0x02	; 2
    686e:	13 82       	std	Z+3, r1	; 0x03
    6870:	12 82       	std	Z+2, r1	; 0x02
    6872:	00 91 14 06 	lds	r16, 0x0614	; 0x800614 <__flp>
    6876:	10 91 15 06 	lds	r17, 0x0615	; 0x800615 <__flp+0x1>
    687a:	01 15       	cp	r16, r1
    687c:	11 05       	cpc	r17, r1
    687e:	81 f4       	brne	.+32     	; 0x68a0 <free+0x44>
    6880:	20 81       	ld	r18, Z
    6882:	31 81       	ldd	r19, Z+1	; 0x01
    6884:	82 0f       	add	r24, r18
    6886:	93 1f       	adc	r25, r19
    6888:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <__brkval>
    688c:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <__brkval+0x1>
    6890:	28 17       	cp	r18, r24
    6892:	39 07       	cpc	r19, r25
    6894:	79 f5       	brne	.+94     	; 0x68f4 <free+0x98>
    6896:	f0 93 13 06 	sts	0x0613, r31	; 0x800613 <__brkval+0x1>
    689a:	e0 93 12 06 	sts	0x0612, r30	; 0x800612 <__brkval>
    689e:	71 c0       	rjmp	.+226    	; 0x6982 <free+0x126>
    68a0:	d8 01       	movw	r26, r16
    68a2:	40 e0       	ldi	r20, 0x00	; 0
    68a4:	50 e0       	ldi	r21, 0x00	; 0
    68a6:	ae 17       	cp	r26, r30
    68a8:	bf 07       	cpc	r27, r31
    68aa:	50 f4       	brcc	.+20     	; 0x68c0 <free+0x64>
    68ac:	12 96       	adiw	r26, 0x02	; 2
    68ae:	2d 91       	ld	r18, X+
    68b0:	3c 91       	ld	r19, X
    68b2:	13 97       	sbiw	r26, 0x03	; 3
    68b4:	ad 01       	movw	r20, r26
    68b6:	21 15       	cp	r18, r1
    68b8:	31 05       	cpc	r19, r1
    68ba:	09 f1       	breq	.+66     	; 0x68fe <free+0xa2>
    68bc:	d9 01       	movw	r26, r18
    68be:	f3 cf       	rjmp	.-26     	; 0x68a6 <free+0x4a>
    68c0:	9d 01       	movw	r18, r26
    68c2:	da 01       	movw	r26, r20
    68c4:	33 83       	std	Z+3, r19	; 0x03
    68c6:	22 83       	std	Z+2, r18	; 0x02
    68c8:	60 81       	ld	r22, Z
    68ca:	71 81       	ldd	r23, Z+1	; 0x01
    68cc:	86 0f       	add	r24, r22
    68ce:	97 1f       	adc	r25, r23
    68d0:	82 17       	cp	r24, r18
    68d2:	93 07       	cpc	r25, r19
    68d4:	69 f4       	brne	.+26     	; 0x68f0 <free+0x94>
    68d6:	ec 01       	movw	r28, r24
    68d8:	28 81       	ld	r18, Y
    68da:	39 81       	ldd	r19, Y+1	; 0x01
    68dc:	26 0f       	add	r18, r22
    68de:	37 1f       	adc	r19, r23
    68e0:	2e 5f       	subi	r18, 0xFE	; 254
    68e2:	3f 4f       	sbci	r19, 0xFF	; 255
    68e4:	31 83       	std	Z+1, r19	; 0x01
    68e6:	20 83       	st	Z, r18
    68e8:	8a 81       	ldd	r24, Y+2	; 0x02
    68ea:	9b 81       	ldd	r25, Y+3	; 0x03
    68ec:	93 83       	std	Z+3, r25	; 0x03
    68ee:	82 83       	std	Z+2, r24	; 0x02
    68f0:	45 2b       	or	r20, r21
    68f2:	29 f4       	brne	.+10     	; 0x68fe <free+0xa2>
    68f4:	f0 93 15 06 	sts	0x0615, r31	; 0x800615 <__flp+0x1>
    68f8:	e0 93 14 06 	sts	0x0614, r30	; 0x800614 <__flp>
    68fc:	42 c0       	rjmp	.+132    	; 0x6982 <free+0x126>
    68fe:	13 96       	adiw	r26, 0x03	; 3
    6900:	fc 93       	st	X, r31
    6902:	ee 93       	st	-X, r30
    6904:	12 97       	sbiw	r26, 0x02	; 2
    6906:	ed 01       	movw	r28, r26
    6908:	49 91       	ld	r20, Y+
    690a:	59 91       	ld	r21, Y+
    690c:	9e 01       	movw	r18, r28
    690e:	24 0f       	add	r18, r20
    6910:	35 1f       	adc	r19, r21
    6912:	e2 17       	cp	r30, r18
    6914:	f3 07       	cpc	r31, r19
    6916:	71 f4       	brne	.+28     	; 0x6934 <free+0xd8>
    6918:	80 81       	ld	r24, Z
    691a:	91 81       	ldd	r25, Z+1	; 0x01
    691c:	84 0f       	add	r24, r20
    691e:	95 1f       	adc	r25, r21
    6920:	02 96       	adiw	r24, 0x02	; 2
    6922:	11 96       	adiw	r26, 0x01	; 1
    6924:	9c 93       	st	X, r25
    6926:	8e 93       	st	-X, r24
    6928:	82 81       	ldd	r24, Z+2	; 0x02
    692a:	93 81       	ldd	r25, Z+3	; 0x03
    692c:	13 96       	adiw	r26, 0x03	; 3
    692e:	9c 93       	st	X, r25
    6930:	8e 93       	st	-X, r24
    6932:	12 97       	sbiw	r26, 0x02	; 2
    6934:	e0 e0       	ldi	r30, 0x00	; 0
    6936:	f0 e0       	ldi	r31, 0x00	; 0
    6938:	d8 01       	movw	r26, r16
    693a:	12 96       	adiw	r26, 0x02	; 2
    693c:	8d 91       	ld	r24, X+
    693e:	9c 91       	ld	r25, X
    6940:	13 97       	sbiw	r26, 0x03	; 3
    6942:	00 97       	sbiw	r24, 0x00	; 0
    6944:	19 f0       	breq	.+6      	; 0x694c <free+0xf0>
    6946:	f8 01       	movw	r30, r16
    6948:	8c 01       	movw	r16, r24
    694a:	f6 cf       	rjmp	.-20     	; 0x6938 <free+0xdc>
    694c:	8d 91       	ld	r24, X+
    694e:	9c 91       	ld	r25, X
    6950:	98 01       	movw	r18, r16
    6952:	2e 5f       	subi	r18, 0xFE	; 254
    6954:	3f 4f       	sbci	r19, 0xFF	; 255
    6956:	82 0f       	add	r24, r18
    6958:	93 1f       	adc	r25, r19
    695a:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <__brkval>
    695e:	30 91 13 06 	lds	r19, 0x0613	; 0x800613 <__brkval+0x1>
    6962:	28 17       	cp	r18, r24
    6964:	39 07       	cpc	r19, r25
    6966:	69 f4       	brne	.+26     	; 0x6982 <free+0x126>
    6968:	30 97       	sbiw	r30, 0x00	; 0
    696a:	29 f4       	brne	.+10     	; 0x6976 <free+0x11a>
    696c:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <__flp+0x1>
    6970:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <__flp>
    6974:	02 c0       	rjmp	.+4      	; 0x697a <free+0x11e>
    6976:	13 82       	std	Z+3, r1	; 0x03
    6978:	12 82       	std	Z+2, r1	; 0x02
    697a:	10 93 13 06 	sts	0x0613, r17	; 0x800613 <__brkval+0x1>
    697e:	00 93 12 06 	sts	0x0612, r16	; 0x800612 <__brkval>
    6982:	df 91       	pop	r29
    6984:	cf 91       	pop	r28
    6986:	1f 91       	pop	r17
    6988:	0f 91       	pop	r16
    698a:	08 95       	ret

0000698c <realloc>:
    698c:	a0 e0       	ldi	r26, 0x00	; 0
    698e:	b0 e0       	ldi	r27, 0x00	; 0
    6990:	eb ec       	ldi	r30, 0xCB	; 203
    6992:	f4 e3       	ldi	r31, 0x34	; 52
    6994:	6d ce       	rjmp	.-806    	; 0x6670 <__prologue_saves__+0x8>
    6996:	ec 01       	movw	r28, r24
    6998:	00 97       	sbiw	r24, 0x00	; 0
    699a:	19 f4       	brne	.+6      	; 0x69a2 <realloc+0x16>
    699c:	cb 01       	movw	r24, r22
    699e:	c9 de       	rcall	.-622    	; 0x6732 <malloc>
    69a0:	b4 c0       	rjmp	.+360    	; 0x6b0a <realloc+0x17e>
    69a2:	fc 01       	movw	r30, r24
    69a4:	e6 0f       	add	r30, r22
    69a6:	f7 1f       	adc	r31, r23
    69a8:	9c 01       	movw	r18, r24
    69aa:	22 50       	subi	r18, 0x02	; 2
    69ac:	31 09       	sbc	r19, r1
    69ae:	e2 17       	cp	r30, r18
    69b0:	f3 07       	cpc	r31, r19
    69b2:	08 f4       	brcc	.+2      	; 0x69b6 <realloc+0x2a>
    69b4:	a8 c0       	rjmp	.+336    	; 0x6b06 <realloc+0x17a>
    69b6:	d9 01       	movw	r26, r18
    69b8:	0d 91       	ld	r16, X+
    69ba:	1c 91       	ld	r17, X
    69bc:	11 97       	sbiw	r26, 0x01	; 1
    69be:	06 17       	cp	r16, r22
    69c0:	17 07       	cpc	r17, r23
    69c2:	a8 f0       	brcs	.+42     	; 0x69ee <realloc+0x62>
    69c4:	05 30       	cpi	r16, 0x05	; 5
    69c6:	11 05       	cpc	r17, r1
    69c8:	08 f4       	brcc	.+2      	; 0x69cc <realloc+0x40>
    69ca:	9b c0       	rjmp	.+310    	; 0x6b02 <realloc+0x176>
    69cc:	c8 01       	movw	r24, r16
    69ce:	04 97       	sbiw	r24, 0x04	; 4
    69d0:	86 17       	cp	r24, r22
    69d2:	97 07       	cpc	r25, r23
    69d4:	08 f4       	brcc	.+2      	; 0x69d8 <realloc+0x4c>
    69d6:	95 c0       	rjmp	.+298    	; 0x6b02 <realloc+0x176>
    69d8:	02 50       	subi	r16, 0x02	; 2
    69da:	11 09       	sbc	r17, r1
    69dc:	06 1b       	sub	r16, r22
    69de:	17 0b       	sbc	r17, r23
    69e0:	01 93       	st	Z+, r16
    69e2:	11 93       	st	Z+, r17
    69e4:	6d 93       	st	X+, r22
    69e6:	7c 93       	st	X, r23
    69e8:	cf 01       	movw	r24, r30
    69ea:	38 df       	rcall	.-400    	; 0x685c <free>
    69ec:	8a c0       	rjmp	.+276    	; 0x6b02 <realloc+0x176>
    69ee:	5b 01       	movw	r10, r22
    69f0:	a0 1a       	sub	r10, r16
    69f2:	b1 0a       	sbc	r11, r17
    69f4:	4c 01       	movw	r8, r24
    69f6:	80 0e       	add	r8, r16
    69f8:	91 1e       	adc	r9, r17
    69fa:	a0 91 14 06 	lds	r26, 0x0614	; 0x800614 <__flp>
    69fe:	b0 91 15 06 	lds	r27, 0x0615	; 0x800615 <__flp+0x1>
    6a02:	40 e0       	ldi	r20, 0x00	; 0
    6a04:	50 e0       	ldi	r21, 0x00	; 0
    6a06:	e1 2c       	mov	r14, r1
    6a08:	f1 2c       	mov	r15, r1
    6a0a:	10 97       	sbiw	r26, 0x00	; 0
    6a0c:	09 f4       	brne	.+2      	; 0x6a10 <realloc+0x84>
    6a0e:	4a c0       	rjmp	.+148    	; 0x6aa4 <realloc+0x118>
    6a10:	a8 15       	cp	r26, r8
    6a12:	b9 05       	cpc	r27, r9
    6a14:	d1 f5       	brne	.+116    	; 0x6a8a <realloc+0xfe>
    6a16:	6d 90       	ld	r6, X+
    6a18:	7c 90       	ld	r7, X
    6a1a:	11 97       	sbiw	r26, 0x01	; 1
    6a1c:	63 01       	movw	r12, r6
    6a1e:	82 e0       	ldi	r24, 0x02	; 2
    6a20:	c8 0e       	add	r12, r24
    6a22:	d1 1c       	adc	r13, r1
    6a24:	ca 14       	cp	r12, r10
    6a26:	db 04       	cpc	r13, r11
    6a28:	80 f1       	brcs	.+96     	; 0x6a8a <realloc+0xfe>
    6a2a:	a3 01       	movw	r20, r6
    6a2c:	4a 19       	sub	r20, r10
    6a2e:	5b 09       	sbc	r21, r11
    6a30:	6a 01       	movw	r12, r20
    6a32:	82 e0       	ldi	r24, 0x02	; 2
    6a34:	c8 0e       	add	r12, r24
    6a36:	d1 1c       	adc	r13, r1
    6a38:	12 96       	adiw	r26, 0x02	; 2
    6a3a:	bc 90       	ld	r11, X
    6a3c:	12 97       	sbiw	r26, 0x02	; 2
    6a3e:	13 96       	adiw	r26, 0x03	; 3
    6a40:	ac 91       	ld	r26, X
    6a42:	b5 e0       	ldi	r27, 0x05	; 5
    6a44:	cb 16       	cp	r12, r27
    6a46:	d1 04       	cpc	r13, r1
    6a48:	40 f0       	brcs	.+16     	; 0x6a5a <realloc+0xce>
    6a4a:	b2 82       	std	Z+2, r11	; 0x02
    6a4c:	a3 83       	std	Z+3, r26	; 0x03
    6a4e:	51 83       	std	Z+1, r21	; 0x01
    6a50:	40 83       	st	Z, r20
    6a52:	d9 01       	movw	r26, r18
    6a54:	6d 93       	st	X+, r22
    6a56:	7c 93       	st	X, r23
    6a58:	0a c0       	rjmp	.+20     	; 0x6a6e <realloc+0xe2>
    6a5a:	0e 5f       	subi	r16, 0xFE	; 254
    6a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    6a5e:	c3 01       	movw	r24, r6
    6a60:	80 0f       	add	r24, r16
    6a62:	91 1f       	adc	r25, r17
    6a64:	f9 01       	movw	r30, r18
    6a66:	91 83       	std	Z+1, r25	; 0x01
    6a68:	80 83       	st	Z, r24
    6a6a:	eb 2d       	mov	r30, r11
    6a6c:	fa 2f       	mov	r31, r26
    6a6e:	e1 14       	cp	r14, r1
    6a70:	f1 04       	cpc	r15, r1
    6a72:	31 f0       	breq	.+12     	; 0x6a80 <realloc+0xf4>
    6a74:	d7 01       	movw	r26, r14
    6a76:	13 96       	adiw	r26, 0x03	; 3
    6a78:	fc 93       	st	X, r31
    6a7a:	ee 93       	st	-X, r30
    6a7c:	12 97       	sbiw	r26, 0x02	; 2
    6a7e:	41 c0       	rjmp	.+130    	; 0x6b02 <realloc+0x176>
    6a80:	f0 93 15 06 	sts	0x0615, r31	; 0x800615 <__flp+0x1>
    6a84:	e0 93 14 06 	sts	0x0614, r30	; 0x800614 <__flp>
    6a88:	3c c0       	rjmp	.+120    	; 0x6b02 <realloc+0x176>
    6a8a:	8d 91       	ld	r24, X+
    6a8c:	9c 91       	ld	r25, X
    6a8e:	11 97       	sbiw	r26, 0x01	; 1
    6a90:	48 17       	cp	r20, r24
    6a92:	59 07       	cpc	r21, r25
    6a94:	08 f4       	brcc	.+2      	; 0x6a98 <realloc+0x10c>
    6a96:	ac 01       	movw	r20, r24
    6a98:	7d 01       	movw	r14, r26
    6a9a:	12 96       	adiw	r26, 0x02	; 2
    6a9c:	0d 90       	ld	r0, X+
    6a9e:	bc 91       	ld	r27, X
    6aa0:	a0 2d       	mov	r26, r0
    6aa2:	b3 cf       	rjmp	.-154    	; 0x6a0a <realloc+0x7e>
    6aa4:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__brkval>
    6aa8:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__brkval+0x1>
    6aac:	88 15       	cp	r24, r8
    6aae:	99 05       	cpc	r25, r9
    6ab0:	e1 f4       	brne	.+56     	; 0x6aea <realloc+0x15e>
    6ab2:	46 17       	cp	r20, r22
    6ab4:	57 07       	cpc	r21, r23
    6ab6:	c8 f4       	brcc	.+50     	; 0x6aea <realloc+0x15e>
    6ab8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6abc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6ac0:	00 97       	sbiw	r24, 0x00	; 0
    6ac2:	41 f4       	brne	.+16     	; 0x6ad4 <realloc+0x148>
    6ac4:	8d b7       	in	r24, 0x3d	; 61
    6ac6:	9e b7       	in	r25, 0x3e	; 62
    6ac8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6acc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6ad0:	84 1b       	sub	r24, r20
    6ad2:	95 0b       	sbc	r25, r21
    6ad4:	e8 17       	cp	r30, r24
    6ad6:	f9 07       	cpc	r31, r25
    6ad8:	b0 f4       	brcc	.+44     	; 0x6b06 <realloc+0x17a>
    6ada:	f0 93 13 06 	sts	0x0613, r31	; 0x800613 <__brkval+0x1>
    6ade:	e0 93 12 06 	sts	0x0612, r30	; 0x800612 <__brkval>
    6ae2:	f9 01       	movw	r30, r18
    6ae4:	71 83       	std	Z+1, r23	; 0x01
    6ae6:	60 83       	st	Z, r22
    6ae8:	0c c0       	rjmp	.+24     	; 0x6b02 <realloc+0x176>
    6aea:	cb 01       	movw	r24, r22
    6aec:	22 de       	rcall	.-956    	; 0x6732 <malloc>
    6aee:	7c 01       	movw	r14, r24
    6af0:	00 97       	sbiw	r24, 0x00	; 0
    6af2:	49 f0       	breq	.+18     	; 0x6b06 <realloc+0x17a>
    6af4:	a8 01       	movw	r20, r16
    6af6:	be 01       	movw	r22, r28
    6af8:	af d1       	rcall	.+862    	; 0x6e58 <memcpy>
    6afa:	ce 01       	movw	r24, r28
    6afc:	af de       	rcall	.-674    	; 0x685c <free>
    6afe:	c7 01       	movw	r24, r14
    6b00:	04 c0       	rjmp	.+8      	; 0x6b0a <realloc+0x17e>
    6b02:	ce 01       	movw	r24, r28
    6b04:	02 c0       	rjmp	.+4      	; 0x6b0a <realloc+0x17e>
    6b06:	80 e0       	ldi	r24, 0x00	; 0
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	cd b7       	in	r28, 0x3d	; 61
    6b0c:	de b7       	in	r29, 0x3e	; 62
    6b0e:	ee e0       	ldi	r30, 0x0E	; 14
    6b10:	cb cd       	rjmp	.-1130   	; 0x66a8 <__epilogue_restores__+0x8>

00006b12 <strtod>:
    6b12:	a0 e0       	ldi	r26, 0x00	; 0
    6b14:	b0 e0       	ldi	r27, 0x00	; 0
    6b16:	ee e8       	ldi	r30, 0x8E	; 142
    6b18:	f5 e3       	ldi	r31, 0x35	; 53
    6b1a:	aa cd       	rjmp	.-1196   	; 0x6670 <__prologue_saves__+0x8>
    6b1c:	ec 01       	movw	r28, r24
    6b1e:	7b 01       	movw	r14, r22
    6b20:	61 15       	cp	r22, r1
    6b22:	71 05       	cpc	r23, r1
    6b24:	19 f0       	breq	.+6      	; 0x6b2c <strtod+0x1a>
    6b26:	db 01       	movw	r26, r22
    6b28:	8d 93       	st	X+, r24
    6b2a:	9c 93       	st	X, r25
    6b2c:	8e 01       	movw	r16, r28
    6b2e:	0f 5f       	subi	r16, 0xFF	; 255
    6b30:	1f 4f       	sbci	r17, 0xFF	; 255
    6b32:	78 80       	ld	r7, Y
    6b34:	87 2d       	mov	r24, r7
    6b36:	90 e0       	ldi	r25, 0x00	; 0
    6b38:	6f d1       	rcall	.+734    	; 0x6e18 <isspace>
    6b3a:	89 2b       	or	r24, r25
    6b3c:	11 f0       	breq	.+4      	; 0x6b42 <strtod+0x30>
    6b3e:	e8 01       	movw	r28, r16
    6b40:	f5 cf       	rjmp	.-22     	; 0x6b2c <strtod+0x1a>
    6b42:	bd e2       	ldi	r27, 0x2D	; 45
    6b44:	7b 12       	cpse	r7, r27
    6b46:	05 c0       	rjmp	.+10     	; 0x6b52 <strtod+0x40>
    6b48:	0f 5f       	subi	r16, 0xFF	; 255
    6b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b4c:	79 80       	ldd	r7, Y+1	; 0x01
    6b4e:	c1 e0       	ldi	r28, 0x01	; 1
    6b50:	08 c0       	rjmp	.+16     	; 0x6b62 <strtod+0x50>
    6b52:	eb e2       	ldi	r30, 0x2B	; 43
    6b54:	7e 12       	cpse	r7, r30
    6b56:	04 c0       	rjmp	.+8      	; 0x6b60 <strtod+0x4e>
    6b58:	8e 01       	movw	r16, r28
    6b5a:	0e 5f       	subi	r16, 0xFE	; 254
    6b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b5e:	79 80       	ldd	r7, Y+1	; 0x01
    6b60:	c0 e0       	ldi	r28, 0x00	; 0
    6b62:	68 01       	movw	r12, r16
    6b64:	f1 e0       	ldi	r31, 0x01	; 1
    6b66:	cf 1a       	sub	r12, r31
    6b68:	d1 08       	sbc	r13, r1
    6b6a:	43 e0       	ldi	r20, 0x03	; 3
    6b6c:	50 e0       	ldi	r21, 0x00	; 0
    6b6e:	62 e6       	ldi	r22, 0x62	; 98
    6b70:	72 e0       	ldi	r23, 0x02	; 2
    6b72:	c6 01       	movw	r24, r12
    6b74:	59 d1       	rcall	.+690    	; 0x6e28 <strncasecmp_P>
    6b76:	89 2b       	or	r24, r25
    6b78:	e9 f4       	brne	.+58     	; 0x6bb4 <strtod+0xa2>
    6b7a:	68 01       	movw	r12, r16
    6b7c:	22 e0       	ldi	r18, 0x02	; 2
    6b7e:	c2 0e       	add	r12, r18
    6b80:	d1 1c       	adc	r13, r1
    6b82:	45 e0       	ldi	r20, 0x05	; 5
    6b84:	50 e0       	ldi	r21, 0x00	; 0
    6b86:	6d e5       	ldi	r22, 0x5D	; 93
    6b88:	72 e0       	ldi	r23, 0x02	; 2
    6b8a:	c6 01       	movw	r24, r12
    6b8c:	4d d1       	rcall	.+666    	; 0x6e28 <strncasecmp_P>
    6b8e:	89 2b       	or	r24, r25
    6b90:	21 f4       	brne	.+8      	; 0x6b9a <strtod+0x88>
    6b92:	68 01       	movw	r12, r16
    6b94:	87 e0       	ldi	r24, 0x07	; 7
    6b96:	c8 0e       	add	r12, r24
    6b98:	d1 1c       	adc	r13, r1
    6b9a:	e1 14       	cp	r14, r1
    6b9c:	f1 04       	cpc	r15, r1
    6b9e:	19 f0       	breq	.+6      	; 0x6ba6 <strtod+0x94>
    6ba0:	d7 01       	movw	r26, r14
    6ba2:	cd 92       	st	X+, r12
    6ba4:	dc 92       	st	X, r13
    6ba6:	c1 11       	cpse	r28, r1
    6ba8:	fd c0       	rjmp	.+506    	; 0x6da4 <strtod+0x292>
    6baa:	60 e0       	ldi	r22, 0x00	; 0
    6bac:	70 e0       	ldi	r23, 0x00	; 0
    6bae:	80 e8       	ldi	r24, 0x80	; 128
    6bb0:	9f e7       	ldi	r25, 0x7F	; 127
    6bb2:	01 c1       	rjmp	.+514    	; 0x6db6 <strtod+0x2a4>
    6bb4:	43 e0       	ldi	r20, 0x03	; 3
    6bb6:	50 e0       	ldi	r21, 0x00	; 0
    6bb8:	6a e5       	ldi	r22, 0x5A	; 90
    6bba:	72 e0       	ldi	r23, 0x02	; 2
    6bbc:	c6 01       	movw	r24, r12
    6bbe:	34 d1       	rcall	.+616    	; 0x6e28 <strncasecmp_P>
    6bc0:	89 2b       	or	r24, r25
    6bc2:	51 f4       	brne	.+20     	; 0x6bd8 <strtod+0xc6>
    6bc4:	e1 14       	cp	r14, r1
    6bc6:	f1 04       	cpc	r15, r1
    6bc8:	09 f4       	brne	.+2      	; 0x6bcc <strtod+0xba>
    6bca:	f1 c0       	rjmp	.+482    	; 0x6dae <strtod+0x29c>
    6bcc:	0e 5f       	subi	r16, 0xFE	; 254
    6bce:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd0:	f7 01       	movw	r30, r14
    6bd2:	11 83       	std	Z+1, r17	; 0x01
    6bd4:	00 83       	st	Z, r16
    6bd6:	eb c0       	rjmp	.+470    	; 0x6dae <strtod+0x29c>
    6bd8:	68 01       	movw	r12, r16
    6bda:	60 e0       	ldi	r22, 0x00	; 0
    6bdc:	70 e0       	ldi	r23, 0x00	; 0
    6bde:	cb 01       	movw	r24, r22
    6be0:	00 e0       	ldi	r16, 0x00	; 0
    6be2:	10 e0       	ldi	r17, 0x00	; 0
    6be4:	f6 01       	movw	r30, r12
    6be6:	d0 ed       	ldi	r29, 0xD0	; 208
    6be8:	d7 0d       	add	r29, r7
    6bea:	da 30       	cpi	r29, 0x0A	; 10
    6bec:	50 f5       	brcc	.+84     	; 0x6c42 <strtod+0x130>
    6bee:	2c 2f       	mov	r18, r28
    6bf0:	22 60       	ori	r18, 0x02	; 2
    6bf2:	62 2e       	mov	r6, r18
    6bf4:	2c 2f       	mov	r18, r28
    6bf6:	28 70       	andi	r18, 0x08	; 8
    6bf8:	c2 ff       	sbrs	r28, 2
    6bfa:	05 c0       	rjmp	.+10     	; 0x6c06 <strtod+0xf4>
    6bfc:	21 11       	cpse	r18, r1
    6bfe:	27 c0       	rjmp	.+78     	; 0x6c4e <strtod+0x13c>
    6c00:	0f 5f       	subi	r16, 0xFF	; 255
    6c02:	1f 4f       	sbci	r17, 0xFF	; 255
    6c04:	24 c0       	rjmp	.+72     	; 0x6c4e <strtod+0x13c>
    6c06:	22 23       	and	r18, r18
    6c08:	11 f0       	breq	.+4      	; 0x6c0e <strtod+0xfc>
    6c0a:	01 50       	subi	r16, 0x01	; 1
    6c0c:	11 09       	sbc	r17, r1
    6c0e:	a5 e0       	ldi	r26, 0x05	; 5
    6c10:	b0 e0       	ldi	r27, 0x00	; 0
    6c12:	9b 01       	movw	r18, r22
    6c14:	ac 01       	movw	r20, r24
    6c16:	1e dd       	rcall	.-1476   	; 0x6654 <__muluhisi3>
    6c18:	4b 01       	movw	r8, r22
    6c1a:	5c 01       	movw	r10, r24
    6c1c:	88 0c       	add	r8, r8
    6c1e:	99 1c       	adc	r9, r9
    6c20:	aa 1c       	adc	r10, r10
    6c22:	bb 1c       	adc	r11, r11
    6c24:	c5 01       	movw	r24, r10
    6c26:	b4 01       	movw	r22, r8
    6c28:	6d 0f       	add	r22, r29
    6c2a:	71 1d       	adc	r23, r1
    6c2c:	81 1d       	adc	r24, r1
    6c2e:	91 1d       	adc	r25, r1
    6c30:	68 39       	cpi	r22, 0x98	; 152
    6c32:	a9 e9       	ldi	r26, 0x99	; 153
    6c34:	7a 07       	cpc	r23, r26
    6c36:	8a 07       	cpc	r24, r26
    6c38:	a9 e1       	ldi	r26, 0x19	; 25
    6c3a:	9a 07       	cpc	r25, r26
    6c3c:	40 f0       	brcs	.+16     	; 0x6c4e <strtod+0x13c>
    6c3e:	c6 60       	ori	r28, 0x06	; 6
    6c40:	05 c0       	rjmp	.+10     	; 0x6c4c <strtod+0x13a>
    6c42:	de 3f       	cpi	r29, 0xFE	; 254
    6c44:	51 f4       	brne	.+20     	; 0x6c5a <strtod+0x148>
    6c46:	c3 fd       	sbrc	r28, 3
    6c48:	44 c0       	rjmp	.+136    	; 0x6cd2 <strtod+0x1c0>
    6c4a:	c8 60       	ori	r28, 0x08	; 8
    6c4c:	6c 2e       	mov	r6, r28
    6c4e:	bf ef       	ldi	r27, 0xFF	; 255
    6c50:	cb 1a       	sub	r12, r27
    6c52:	db 0a       	sbc	r13, r27
    6c54:	70 80       	ld	r7, Z
    6c56:	c6 2d       	mov	r28, r6
    6c58:	c5 cf       	rjmp	.-118    	; 0x6be4 <strtod+0xd2>
    6c5a:	2d 2f       	mov	r18, r29
    6c5c:	2f 7d       	andi	r18, 0xDF	; 223
    6c5e:	25 31       	cpi	r18, 0x15	; 21
    6c60:	c1 f5       	brne	.+112    	; 0x6cd2 <strtod+0x1c0>
    6c62:	40 81       	ld	r20, Z
    6c64:	4d 32       	cpi	r20, 0x2D	; 45
    6c66:	11 f4       	brne	.+4      	; 0x6c6c <strtod+0x15a>
    6c68:	c0 61       	ori	r28, 0x10	; 16
    6c6a:	06 c0       	rjmp	.+12     	; 0x6c78 <strtod+0x166>
    6c6c:	4b 32       	cpi	r20, 0x2B	; 43
    6c6e:	21 f0       	breq	.+8      	; 0x6c78 <strtod+0x166>
    6c70:	31 96       	adiw	r30, 0x01	; 1
    6c72:	21 e0       	ldi	r18, 0x01	; 1
    6c74:	30 e0       	ldi	r19, 0x00	; 0
    6c76:	06 c0       	rjmp	.+12     	; 0x6c84 <strtod+0x172>
    6c78:	32 96       	adiw	r30, 0x02	; 2
    6c7a:	d6 01       	movw	r26, r12
    6c7c:	11 96       	adiw	r26, 0x01	; 1
    6c7e:	4c 91       	ld	r20, X
    6c80:	22 e0       	ldi	r18, 0x02	; 2
    6c82:	30 e0       	ldi	r19, 0x00	; 0
    6c84:	a0 ed       	ldi	r26, 0xD0	; 208
    6c86:	a4 0f       	add	r26, r20
    6c88:	aa 30       	cpi	r26, 0x0A	; 10
    6c8a:	18 f0       	brcs	.+6      	; 0x6c92 <strtod+0x180>
    6c8c:	e2 1b       	sub	r30, r18
    6c8e:	f3 0b       	sbc	r31, r19
    6c90:	20 c0       	rjmp	.+64     	; 0x6cd2 <strtod+0x1c0>
    6c92:	40 e0       	ldi	r20, 0x00	; 0
    6c94:	50 e0       	ldi	r21, 0x00	; 0
    6c96:	40 38       	cpi	r20, 0x80	; 128
    6c98:	bc e0       	ldi	r27, 0x0C	; 12
    6c9a:	5b 07       	cpc	r21, r27
    6c9c:	5c f4       	brge	.+22     	; 0x6cb4 <strtod+0x1a2>
    6c9e:	9a 01       	movw	r18, r20
    6ca0:	22 0f       	add	r18, r18
    6ca2:	33 1f       	adc	r19, r19
    6ca4:	22 0f       	add	r18, r18
    6ca6:	33 1f       	adc	r19, r19
    6ca8:	42 0f       	add	r20, r18
    6caa:	53 1f       	adc	r21, r19
    6cac:	44 0f       	add	r20, r20
    6cae:	55 1f       	adc	r21, r21
    6cb0:	4a 0f       	add	r20, r26
    6cb2:	51 1d       	adc	r21, r1
    6cb4:	31 96       	adiw	r30, 0x01	; 1
    6cb6:	df 01       	movw	r26, r30
    6cb8:	11 97       	sbiw	r26, 0x01	; 1
    6cba:	2c 91       	ld	r18, X
    6cbc:	a0 ed       	ldi	r26, 0xD0	; 208
    6cbe:	a2 0f       	add	r26, r18
    6cc0:	aa 30       	cpi	r26, 0x0A	; 10
    6cc2:	48 f3       	brcs	.-46     	; 0x6c96 <strtod+0x184>
    6cc4:	c4 ff       	sbrs	r28, 4
    6cc6:	03 c0       	rjmp	.+6      	; 0x6cce <strtod+0x1bc>
    6cc8:	51 95       	neg	r21
    6cca:	41 95       	neg	r20
    6ccc:	51 09       	sbc	r21, r1
    6cce:	04 0f       	add	r16, r20
    6cd0:	15 1f       	adc	r17, r21
    6cd2:	c1 ff       	sbrs	r28, 1
    6cd4:	07 c0       	rjmp	.+14     	; 0x6ce4 <strtod+0x1d2>
    6cd6:	e1 14       	cp	r14, r1
    6cd8:	f1 04       	cpc	r15, r1
    6cda:	21 f0       	breq	.+8      	; 0x6ce4 <strtod+0x1d2>
    6cdc:	31 97       	sbiw	r30, 0x01	; 1
    6cde:	d7 01       	movw	r26, r14
    6ce0:	ed 93       	st	X+, r30
    6ce2:	fc 93       	st	X, r31
    6ce4:	0e 94 2d 29 	call	0x525a	; 0x525a <__floatunsisf>
    6ce8:	c3 70       	andi	r28, 0x03	; 3
    6cea:	c3 30       	cpi	r28, 0x03	; 3
    6cec:	19 f0       	breq	.+6      	; 0x6cf4 <strtod+0x1e2>
    6cee:	6b 01       	movw	r12, r22
    6cf0:	7c 01       	movw	r14, r24
    6cf2:	06 c0       	rjmp	.+12     	; 0x6d00 <strtod+0x1ee>
    6cf4:	6b 01       	movw	r12, r22
    6cf6:	7c 01       	movw	r14, r24
    6cf8:	f7 fa       	bst	r15, 7
    6cfa:	f0 94       	com	r15
    6cfc:	f7 f8       	bld	r15, 7
    6cfe:	f0 94       	com	r15
    6d00:	20 e0       	ldi	r18, 0x00	; 0
    6d02:	30 e0       	ldi	r19, 0x00	; 0
    6d04:	a9 01       	movw	r20, r18
    6d06:	c7 01       	movw	r24, r14
    6d08:	b6 01       	movw	r22, r12
    6d0a:	0e 94 90 28 	call	0x5120	; 0x5120 <__cmpsf2>
    6d0e:	88 23       	and	r24, r24
    6d10:	09 f4       	brne	.+2      	; 0x6d14 <strtod+0x202>
    6d12:	45 c0       	rjmp	.+138    	; 0x6d9e <strtod+0x28c>
    6d14:	17 ff       	sbrs	r17, 7
    6d16:	06 c0       	rjmp	.+12     	; 0x6d24 <strtod+0x212>
    6d18:	11 95       	neg	r17
    6d1a:	01 95       	neg	r16
    6d1c:	11 09       	sbc	r17, r1
    6d1e:	c9 e7       	ldi	r28, 0x79	; 121
    6d20:	d2 e0       	ldi	r29, 0x02	; 2
    6d22:	02 c0       	rjmp	.+4      	; 0x6d28 <strtod+0x216>
    6d24:	c1 e9       	ldi	r28, 0x91	; 145
    6d26:	d2 e0       	ldi	r29, 0x02	; 2
    6d28:	5e 01       	movw	r10, r28
    6d2a:	b8 e1       	ldi	r27, 0x18	; 24
    6d2c:	ab 1a       	sub	r10, r27
    6d2e:	b1 08       	sbc	r11, r1
    6d30:	46 01       	movw	r8, r12
    6d32:	be 2d       	mov	r27, r14
    6d34:	af 2d       	mov	r26, r15
    6d36:	90 e2       	ldi	r25, 0x20	; 32
    6d38:	e9 2e       	mov	r14, r25
    6d3a:	f1 2c       	mov	r15, r1
    6d3c:	0e 15       	cp	r16, r14
    6d3e:	1f 05       	cpc	r17, r15
    6d40:	84 f0       	brlt	.+32     	; 0x6d62 <strtod+0x250>
    6d42:	fe 01       	movw	r30, r28
    6d44:	25 91       	lpm	r18, Z+
    6d46:	35 91       	lpm	r19, Z+
    6d48:	45 91       	lpm	r20, Z+
    6d4a:	54 91       	lpm	r21, Z
    6d4c:	b4 01       	movw	r22, r8
    6d4e:	8b 2f       	mov	r24, r27
    6d50:	9a 2f       	mov	r25, r26
    6d52:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__mulsf3>
    6d56:	4b 01       	movw	r8, r22
    6d58:	b8 2f       	mov	r27, r24
    6d5a:	a9 2f       	mov	r26, r25
    6d5c:	0e 19       	sub	r16, r14
    6d5e:	1f 09       	sbc	r17, r15
    6d60:	ed cf       	rjmp	.-38     	; 0x6d3c <strtod+0x22a>
    6d62:	24 97       	sbiw	r28, 0x04	; 4
    6d64:	f5 94       	asr	r15
    6d66:	e7 94       	ror	r14
    6d68:	ca 15       	cp	r28, r10
    6d6a:	db 05       	cpc	r29, r11
    6d6c:	39 f7       	brne	.-50     	; 0x6d3c <strtod+0x22a>
    6d6e:	64 01       	movw	r12, r8
    6d70:	eb 2e       	mov	r14, r27
    6d72:	fa 2e       	mov	r15, r26
    6d74:	8e 2d       	mov	r24, r14
    6d76:	88 0f       	add	r24, r24
    6d78:	8f 2d       	mov	r24, r15
    6d7a:	88 1f       	adc	r24, r24
    6d7c:	8f 3f       	cpi	r24, 0xFF	; 255
    6d7e:	49 f0       	breq	.+18     	; 0x6d92 <strtod+0x280>
    6d80:	20 e0       	ldi	r18, 0x00	; 0
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	a9 01       	movw	r20, r18
    6d86:	c7 01       	movw	r24, r14
    6d88:	b6 01       	movw	r22, r12
    6d8a:	0e 94 90 28 	call	0x5120	; 0x5120 <__cmpsf2>
    6d8e:	81 11       	cpse	r24, r1
    6d90:	06 c0       	rjmp	.+12     	; 0x6d9e <strtod+0x28c>
    6d92:	82 e2       	ldi	r24, 0x22	; 34
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <errno+0x1>
    6d9a:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <errno>
    6d9e:	c7 01       	movw	r24, r14
    6da0:	b6 01       	movw	r22, r12
    6da2:	09 c0       	rjmp	.+18     	; 0x6db6 <strtod+0x2a4>
    6da4:	60 e0       	ldi	r22, 0x00	; 0
    6da6:	70 e0       	ldi	r23, 0x00	; 0
    6da8:	80 e8       	ldi	r24, 0x80	; 128
    6daa:	9f ef       	ldi	r25, 0xFF	; 255
    6dac:	04 c0       	rjmp	.+8      	; 0x6db6 <strtod+0x2a4>
    6dae:	60 e0       	ldi	r22, 0x00	; 0
    6db0:	70 e0       	ldi	r23, 0x00	; 0
    6db2:	80 ec       	ldi	r24, 0xC0	; 192
    6db4:	9f e7       	ldi	r25, 0x7F	; 127
    6db6:	cd b7       	in	r28, 0x3d	; 61
    6db8:	de b7       	in	r29, 0x3e	; 62
    6dba:	ee e0       	ldi	r30, 0x0E	; 14
    6dbc:	75 cc       	rjmp	.-1814   	; 0x66a8 <__epilogue_restores__+0x8>

00006dbe <abort>:
    6dbe:	81 e0       	ldi	r24, 0x01	; 1
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	f8 94       	cli
    6dc4:	40 c3       	rjmp	.+1664   	; 0x7446 <__do_global_dtors>

00006dc6 <atof>:
    6dc6:	66 27       	eor	r22, r22
    6dc8:	77 27       	eor	r23, r23
    6dca:	a3 ce       	rjmp	.-698    	; 0x6b12 <strtod>

00006dcc <atol>:
    6dcc:	1f 93       	push	r17
    6dce:	fc 01       	movw	r30, r24
    6dd0:	99 27       	eor	r25, r25
    6dd2:	88 27       	eor	r24, r24
    6dd4:	bc 01       	movw	r22, r24
    6dd6:	e8 94       	clt
    6dd8:	11 91       	ld	r17, Z+
    6dda:	10 32       	cpi	r17, 0x20	; 32
    6ddc:	e9 f3       	breq	.-6      	; 0x6dd8 <atol+0xc>
    6dde:	19 30       	cpi	r17, 0x09	; 9
    6de0:	10 f0       	brcs	.+4      	; 0x6de6 <atol+0x1a>
    6de2:	1e 30       	cpi	r17, 0x0E	; 14
    6de4:	c8 f3       	brcs	.-14     	; 0x6dd8 <atol+0xc>
    6de6:	1b 32       	cpi	r17, 0x2B	; 43
    6de8:	49 f0       	breq	.+18     	; 0x6dfc <atol+0x30>
    6dea:	1d 32       	cpi	r17, 0x2D	; 45
    6dec:	41 f4       	brne	.+16     	; 0x6dfe <atol+0x32>
    6dee:	68 94       	set
    6df0:	05 c0       	rjmp	.+10     	; 0x6dfc <atol+0x30>
    6df2:	6d d0       	rcall	.+218    	; 0x6ece <__mulsi_const_10>
    6df4:	61 0f       	add	r22, r17
    6df6:	71 1d       	adc	r23, r1
    6df8:	81 1d       	adc	r24, r1
    6dfa:	91 1d       	adc	r25, r1
    6dfc:	11 91       	ld	r17, Z+
    6dfe:	10 53       	subi	r17, 0x30	; 48
    6e00:	1a 30       	cpi	r17, 0x0A	; 10
    6e02:	b8 f3       	brcs	.-18     	; 0x6df2 <atol+0x26>
    6e04:	3e f4       	brtc	.+14     	; 0x6e14 <atol+0x48>
    6e06:	90 95       	com	r25
    6e08:	80 95       	com	r24
    6e0a:	70 95       	com	r23
    6e0c:	61 95       	neg	r22
    6e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e10:	8f 4f       	sbci	r24, 0xFF	; 255
    6e12:	9f 4f       	sbci	r25, 0xFF	; 255
    6e14:	1f 91       	pop	r17
    6e16:	08 95       	ret

00006e18 <isspace>:
    6e18:	91 11       	cpse	r25, r1
    6e1a:	ec c2       	rjmp	.+1496   	; 0x73f4 <__ctype_isfalse>
    6e1c:	80 32       	cpi	r24, 0x20	; 32
    6e1e:	19 f0       	breq	.+6      	; 0x6e26 <isspace+0xe>
    6e20:	89 50       	subi	r24, 0x09	; 9
    6e22:	85 50       	subi	r24, 0x05	; 5
    6e24:	d0 f7       	brcc	.-12     	; 0x6e1a <isspace+0x2>
    6e26:	08 95       	ret

00006e28 <strncasecmp_P>:
    6e28:	fb 01       	movw	r30, r22
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	41 50       	subi	r20, 0x01	; 1
    6e2e:	50 40       	sbci	r21, 0x00	; 0
    6e30:	88 f0       	brcs	.+34     	; 0x6e54 <strncasecmp_P+0x2c>
    6e32:	8d 91       	ld	r24, X+
    6e34:	81 34       	cpi	r24, 0x41	; 65
    6e36:	1c f0       	brlt	.+6      	; 0x6e3e <strncasecmp_P+0x16>
    6e38:	8b 35       	cpi	r24, 0x5B	; 91
    6e3a:	0c f4       	brge	.+2      	; 0x6e3e <strncasecmp_P+0x16>
    6e3c:	80 5e       	subi	r24, 0xE0	; 224
    6e3e:	65 91       	lpm	r22, Z+
    6e40:	61 34       	cpi	r22, 0x41	; 65
    6e42:	1c f0       	brlt	.+6      	; 0x6e4a <strncasecmp_P+0x22>
    6e44:	6b 35       	cpi	r22, 0x5B	; 91
    6e46:	0c f4       	brge	.+2      	; 0x6e4a <strncasecmp_P+0x22>
    6e48:	60 5e       	subi	r22, 0xE0	; 224
    6e4a:	86 1b       	sub	r24, r22
    6e4c:	61 11       	cpse	r22, r1
    6e4e:	71 f3       	breq	.-36     	; 0x6e2c <strncasecmp_P+0x4>
    6e50:	99 0b       	sbc	r25, r25
    6e52:	08 95       	ret
    6e54:	88 1b       	sub	r24, r24
    6e56:	fc cf       	rjmp	.-8      	; 0x6e50 <strncasecmp_P+0x28>

00006e58 <memcpy>:
    6e58:	fb 01       	movw	r30, r22
    6e5a:	dc 01       	movw	r26, r24
    6e5c:	02 c0       	rjmp	.+4      	; 0x6e62 <memcpy+0xa>
    6e5e:	01 90       	ld	r0, Z+
    6e60:	0d 92       	st	X+, r0
    6e62:	41 50       	subi	r20, 0x01	; 1
    6e64:	50 40       	sbci	r21, 0x00	; 0
    6e66:	d8 f7       	brcc	.-10     	; 0x6e5e <memcpy+0x6>
    6e68:	08 95       	ret

00006e6a <strcmp>:
    6e6a:	fb 01       	movw	r30, r22
    6e6c:	dc 01       	movw	r26, r24
    6e6e:	8d 91       	ld	r24, X+
    6e70:	01 90       	ld	r0, Z+
    6e72:	80 19       	sub	r24, r0
    6e74:	01 10       	cpse	r0, r1
    6e76:	d9 f3       	breq	.-10     	; 0x6e6e <strcmp+0x4>
    6e78:	99 0b       	sbc	r25, r25
    6e7a:	08 95       	ret

00006e7c <strcpy>:
    6e7c:	fb 01       	movw	r30, r22
    6e7e:	dc 01       	movw	r26, r24
    6e80:	01 90       	ld	r0, Z+
    6e82:	0d 92       	st	X+, r0
    6e84:	00 20       	and	r0, r0
    6e86:	e1 f7       	brne	.-8      	; 0x6e80 <strcpy+0x4>
    6e88:	08 95       	ret

00006e8a <strncmp>:
    6e8a:	fb 01       	movw	r30, r22
    6e8c:	dc 01       	movw	r26, r24
    6e8e:	41 50       	subi	r20, 0x01	; 1
    6e90:	50 40       	sbci	r21, 0x00	; 0
    6e92:	30 f0       	brcs	.+12     	; 0x6ea0 <strncmp+0x16>
    6e94:	8d 91       	ld	r24, X+
    6e96:	01 90       	ld	r0, Z+
    6e98:	80 19       	sub	r24, r0
    6e9a:	19 f4       	brne	.+6      	; 0x6ea2 <strncmp+0x18>
    6e9c:	00 20       	and	r0, r0
    6e9e:	b9 f7       	brne	.-18     	; 0x6e8e <strncmp+0x4>
    6ea0:	88 1b       	sub	r24, r24
    6ea2:	99 0b       	sbc	r25, r25
    6ea4:	08 95       	ret

00006ea6 <itoa>:
    6ea6:	45 32       	cpi	r20, 0x25	; 37
    6ea8:	51 05       	cpc	r21, r1
    6eaa:	18 f4       	brcc	.+6      	; 0x6eb2 <itoa+0xc>
    6eac:	42 30       	cpi	r20, 0x02	; 2
    6eae:	08 f0       	brcs	.+2      	; 0x6eb2 <itoa+0xc>
    6eb0:	04 c0       	rjmp	.+8      	; 0x6eba <__itoa_ncheck>
    6eb2:	fb 01       	movw	r30, r22
    6eb4:	10 82       	st	Z, r1
    6eb6:	cb 01       	movw	r24, r22
    6eb8:	08 95       	ret

00006eba <__itoa_ncheck>:
    6eba:	bb 27       	eor	r27, r27
    6ebc:	4a 30       	cpi	r20, 0x0A	; 10
    6ebe:	31 f4       	brne	.+12     	; 0x6ecc <__itoa_ncheck+0x12>
    6ec0:	99 23       	and	r25, r25
    6ec2:	22 f4       	brpl	.+8      	; 0x6ecc <__itoa_ncheck+0x12>
    6ec4:	bd e2       	ldi	r27, 0x2D	; 45
    6ec6:	90 95       	com	r25
    6ec8:	81 95       	neg	r24
    6eca:	9f 4f       	sbci	r25, 0xFF	; 255
    6ecc:	16 c0       	rjmp	.+44     	; 0x6efa <__utoa_common>

00006ece <__mulsi_const_10>:
    6ece:	59 2f       	mov	r21, r25
    6ed0:	48 2f       	mov	r20, r24
    6ed2:	37 2f       	mov	r19, r23
    6ed4:	26 2f       	mov	r18, r22
    6ed6:	66 0f       	add	r22, r22
    6ed8:	77 1f       	adc	r23, r23
    6eda:	88 1f       	adc	r24, r24
    6edc:	99 1f       	adc	r25, r25
    6ede:	66 0f       	add	r22, r22
    6ee0:	77 1f       	adc	r23, r23
    6ee2:	88 1f       	adc	r24, r24
    6ee4:	99 1f       	adc	r25, r25
    6ee6:	62 0f       	add	r22, r18
    6ee8:	73 1f       	adc	r23, r19
    6eea:	84 1f       	adc	r24, r20
    6eec:	95 1f       	adc	r25, r21
    6eee:	66 0f       	add	r22, r22
    6ef0:	77 1f       	adc	r23, r23
    6ef2:	88 1f       	adc	r24, r24
    6ef4:	99 1f       	adc	r25, r25
    6ef6:	08 95       	ret

00006ef8 <__utoa_ncheck>:
    6ef8:	bb 27       	eor	r27, r27

00006efa <__utoa_common>:
    6efa:	fb 01       	movw	r30, r22
    6efc:	55 27       	eor	r21, r21
    6efe:	aa 27       	eor	r26, r26
    6f00:	88 0f       	add	r24, r24
    6f02:	99 1f       	adc	r25, r25
    6f04:	aa 1f       	adc	r26, r26
    6f06:	a4 17       	cp	r26, r20
    6f08:	10 f0       	brcs	.+4      	; 0x6f0e <__utoa_common+0x14>
    6f0a:	a4 1b       	sub	r26, r20
    6f0c:	83 95       	inc	r24
    6f0e:	50 51       	subi	r21, 0x10	; 16
    6f10:	b9 f7       	brne	.-18     	; 0x6f00 <__utoa_common+0x6>
    6f12:	a0 5d       	subi	r26, 0xD0	; 208
    6f14:	aa 33       	cpi	r26, 0x3A	; 58
    6f16:	08 f0       	brcs	.+2      	; 0x6f1a <__utoa_common+0x20>
    6f18:	a9 5d       	subi	r26, 0xD9	; 217
    6f1a:	a1 93       	st	Z+, r26
    6f1c:	00 97       	sbiw	r24, 0x00	; 0
    6f1e:	79 f7       	brne	.-34     	; 0x6efe <__utoa_common+0x4>
    6f20:	b1 11       	cpse	r27, r1
    6f22:	b1 93       	st	Z+, r27
    6f24:	11 92       	st	Z+, r1
    6f26:	cb 01       	movw	r24, r22
    6f28:	68 c2       	rjmp	.+1232   	; 0x73fa <strrev>

00006f2a <dtoa_prf>:
    6f2a:	4f 92       	push	r4
    6f2c:	5f 92       	push	r5
    6f2e:	6f 92       	push	r6
    6f30:	7f 92       	push	r7
    6f32:	9f 92       	push	r9
    6f34:	af 92       	push	r10
    6f36:	bf 92       	push	r11
    6f38:	cf 92       	push	r12
    6f3a:	df 92       	push	r13
    6f3c:	ef 92       	push	r14
    6f3e:	ff 92       	push	r15
    6f40:	0f 93       	push	r16
    6f42:	1f 93       	push	r17
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	cd b7       	in	r28, 0x3d	; 61
    6f4a:	de b7       	in	r29, 0x3e	; 62
    6f4c:	29 97       	sbiw	r28, 0x09	; 9
    6f4e:	0f b6       	in	r0, 0x3f	; 63
    6f50:	f8 94       	cli
    6f52:	de bf       	out	0x3e, r29	; 62
    6f54:	0f be       	out	0x3f, r0	; 63
    6f56:	cd bf       	out	0x3d, r28	; 61
    6f58:	6a 01       	movw	r12, r20
    6f5a:	12 2f       	mov	r17, r18
    6f5c:	b0 2e       	mov	r11, r16
    6f5e:	2b e3       	ldi	r18, 0x3B	; 59
    6f60:	20 17       	cp	r18, r16
    6f62:	20 f0       	brcs	.+8      	; 0x6f6c <dtoa_prf+0x42>
    6f64:	ff 24       	eor	r15, r15
    6f66:	f3 94       	inc	r15
    6f68:	f0 0e       	add	r15, r16
    6f6a:	02 c0       	rjmp	.+4      	; 0x6f70 <dtoa_prf+0x46>
    6f6c:	bc e3       	ldi	r27, 0x3C	; 60
    6f6e:	fb 2e       	mov	r15, r27
    6f70:	0f 2d       	mov	r16, r15
    6f72:	27 e0       	ldi	r18, 0x07	; 7
    6f74:	ae 01       	movw	r20, r28
    6f76:	4f 5f       	subi	r20, 0xFF	; 255
    6f78:	5f 4f       	sbci	r21, 0xFF	; 255
    6f7a:	64 d1       	rcall	.+712    	; 0x7244 <__ftoa_engine>
    6f7c:	ac 01       	movw	r20, r24
    6f7e:	89 81       	ldd	r24, Y+1	; 0x01
    6f80:	98 2f       	mov	r25, r24
    6f82:	99 70       	andi	r25, 0x09	; 9
    6f84:	91 30       	cpi	r25, 0x01	; 1
    6f86:	31 f0       	breq	.+12     	; 0x6f94 <dtoa_prf+0x6a>
    6f88:	e1 fc       	sbrc	r14, 1
    6f8a:	06 c0       	rjmp	.+12     	; 0x6f98 <dtoa_prf+0x6e>
    6f8c:	e0 fe       	sbrs	r14, 0
    6f8e:	06 c0       	rjmp	.+12     	; 0x6f9c <dtoa_prf+0x72>
    6f90:	90 e2       	ldi	r25, 0x20	; 32
    6f92:	05 c0       	rjmp	.+10     	; 0x6f9e <dtoa_prf+0x74>
    6f94:	9d e2       	ldi	r25, 0x2D	; 45
    6f96:	03 c0       	rjmp	.+6      	; 0x6f9e <dtoa_prf+0x74>
    6f98:	9b e2       	ldi	r25, 0x2B	; 43
    6f9a:	01 c0       	rjmp	.+2      	; 0x6f9e <dtoa_prf+0x74>
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	ee 2d       	mov	r30, r14
    6fa0:	e0 71       	andi	r30, 0x10	; 16
    6fa2:	83 ff       	sbrs	r24, 3
    6fa4:	3c c0       	rjmp	.+120    	; 0x701e <dtoa_prf+0xf4>
    6fa6:	91 11       	cpse	r25, r1
    6fa8:	02 c0       	rjmp	.+4      	; 0x6fae <dtoa_prf+0x84>
    6faa:	83 e0       	ldi	r24, 0x03	; 3
    6fac:	01 c0       	rjmp	.+2      	; 0x6fb0 <dtoa_prf+0x86>
    6fae:	84 e0       	ldi	r24, 0x04	; 4
    6fb0:	81 17       	cp	r24, r17
    6fb2:	18 f4       	brcc	.+6      	; 0x6fba <dtoa_prf+0x90>
    6fb4:	21 2f       	mov	r18, r17
    6fb6:	28 1b       	sub	r18, r24
    6fb8:	01 c0       	rjmp	.+2      	; 0x6fbc <dtoa_prf+0x92>
    6fba:	20 e0       	ldi	r18, 0x00	; 0
    6fbc:	e1 11       	cpse	r30, r1
    6fbe:	0b c0       	rjmp	.+22     	; 0x6fd6 <dtoa_prf+0xac>
    6fc0:	f6 01       	movw	r30, r12
    6fc2:	82 2f       	mov	r24, r18
    6fc4:	30 e2       	ldi	r19, 0x20	; 32
    6fc6:	88 23       	and	r24, r24
    6fc8:	19 f0       	breq	.+6      	; 0x6fd0 <dtoa_prf+0xa6>
    6fca:	31 93       	st	Z+, r19
    6fcc:	81 50       	subi	r24, 0x01	; 1
    6fce:	fb cf       	rjmp	.-10     	; 0x6fc6 <dtoa_prf+0x9c>
    6fd0:	c2 0e       	add	r12, r18
    6fd2:	d1 1c       	adc	r13, r1
    6fd4:	20 e0       	ldi	r18, 0x00	; 0
    6fd6:	99 23       	and	r25, r25
    6fd8:	29 f0       	breq	.+10     	; 0x6fe4 <dtoa_prf+0xba>
    6fda:	d6 01       	movw	r26, r12
    6fdc:	9c 93       	st	X, r25
    6fde:	f6 01       	movw	r30, r12
    6fe0:	31 96       	adiw	r30, 0x01	; 1
    6fe2:	6f 01       	movw	r12, r30
    6fe4:	c6 01       	movw	r24, r12
    6fe6:	03 96       	adiw	r24, 0x03	; 3
    6fe8:	e2 fe       	sbrs	r14, 2
    6fea:	0a c0       	rjmp	.+20     	; 0x7000 <dtoa_prf+0xd6>
    6fec:	3e e4       	ldi	r19, 0x4E	; 78
    6fee:	d6 01       	movw	r26, r12
    6ff0:	3c 93       	st	X, r19
    6ff2:	41 e4       	ldi	r20, 0x41	; 65
    6ff4:	11 96       	adiw	r26, 0x01	; 1
    6ff6:	4c 93       	st	X, r20
    6ff8:	11 97       	sbiw	r26, 0x01	; 1
    6ffa:	12 96       	adiw	r26, 0x02	; 2
    6ffc:	3c 93       	st	X, r19
    6ffe:	06 c0       	rjmp	.+12     	; 0x700c <dtoa_prf+0xe2>
    7000:	3e e6       	ldi	r19, 0x6E	; 110
    7002:	f6 01       	movw	r30, r12
    7004:	30 83       	st	Z, r19
    7006:	41 e6       	ldi	r20, 0x61	; 97
    7008:	41 83       	std	Z+1, r20	; 0x01
    700a:	32 83       	std	Z+2, r19	; 0x02
    700c:	fc 01       	movw	r30, r24
    700e:	32 2f       	mov	r19, r18
    7010:	40 e2       	ldi	r20, 0x20	; 32
    7012:	33 23       	and	r19, r19
    7014:	09 f4       	brne	.+2      	; 0x7018 <dtoa_prf+0xee>
    7016:	42 c0       	rjmp	.+132    	; 0x709c <dtoa_prf+0x172>
    7018:	41 93       	st	Z+, r20
    701a:	31 50       	subi	r19, 0x01	; 1
    701c:	fa cf       	rjmp	.-12     	; 0x7012 <dtoa_prf+0xe8>
    701e:	82 ff       	sbrs	r24, 2
    7020:	44 c0       	rjmp	.+136    	; 0x70aa <dtoa_prf+0x180>
    7022:	91 11       	cpse	r25, r1
    7024:	02 c0       	rjmp	.+4      	; 0x702a <dtoa_prf+0x100>
    7026:	83 e0       	ldi	r24, 0x03	; 3
    7028:	01 c0       	rjmp	.+2      	; 0x702c <dtoa_prf+0x102>
    702a:	84 e0       	ldi	r24, 0x04	; 4
    702c:	81 17       	cp	r24, r17
    702e:	18 f4       	brcc	.+6      	; 0x7036 <dtoa_prf+0x10c>
    7030:	21 2f       	mov	r18, r17
    7032:	28 1b       	sub	r18, r24
    7034:	01 c0       	rjmp	.+2      	; 0x7038 <dtoa_prf+0x10e>
    7036:	20 e0       	ldi	r18, 0x00	; 0
    7038:	e1 11       	cpse	r30, r1
    703a:	0b c0       	rjmp	.+22     	; 0x7052 <dtoa_prf+0x128>
    703c:	f6 01       	movw	r30, r12
    703e:	82 2f       	mov	r24, r18
    7040:	30 e2       	ldi	r19, 0x20	; 32
    7042:	88 23       	and	r24, r24
    7044:	19 f0       	breq	.+6      	; 0x704c <dtoa_prf+0x122>
    7046:	31 93       	st	Z+, r19
    7048:	81 50       	subi	r24, 0x01	; 1
    704a:	fb cf       	rjmp	.-10     	; 0x7042 <dtoa_prf+0x118>
    704c:	c2 0e       	add	r12, r18
    704e:	d1 1c       	adc	r13, r1
    7050:	20 e0       	ldi	r18, 0x00	; 0
    7052:	99 23       	and	r25, r25
    7054:	29 f0       	breq	.+10     	; 0x7060 <dtoa_prf+0x136>
    7056:	d6 01       	movw	r26, r12
    7058:	9c 93       	st	X, r25
    705a:	f6 01       	movw	r30, r12
    705c:	31 96       	adiw	r30, 0x01	; 1
    705e:	6f 01       	movw	r12, r30
    7060:	c6 01       	movw	r24, r12
    7062:	03 96       	adiw	r24, 0x03	; 3
    7064:	e2 fe       	sbrs	r14, 2
    7066:	0b c0       	rjmp	.+22     	; 0x707e <dtoa_prf+0x154>
    7068:	39 e4       	ldi	r19, 0x49	; 73
    706a:	d6 01       	movw	r26, r12
    706c:	3c 93       	st	X, r19
    706e:	3e e4       	ldi	r19, 0x4E	; 78
    7070:	11 96       	adiw	r26, 0x01	; 1
    7072:	3c 93       	st	X, r19
    7074:	11 97       	sbiw	r26, 0x01	; 1
    7076:	36 e4       	ldi	r19, 0x46	; 70
    7078:	12 96       	adiw	r26, 0x02	; 2
    707a:	3c 93       	st	X, r19
    707c:	07 c0       	rjmp	.+14     	; 0x708c <dtoa_prf+0x162>
    707e:	39 e6       	ldi	r19, 0x69	; 105
    7080:	f6 01       	movw	r30, r12
    7082:	30 83       	st	Z, r19
    7084:	3e e6       	ldi	r19, 0x6E	; 110
    7086:	31 83       	std	Z+1, r19	; 0x01
    7088:	36 e6       	ldi	r19, 0x66	; 102
    708a:	32 83       	std	Z+2, r19	; 0x02
    708c:	fc 01       	movw	r30, r24
    708e:	32 2f       	mov	r19, r18
    7090:	40 e2       	ldi	r20, 0x20	; 32
    7092:	33 23       	and	r19, r19
    7094:	19 f0       	breq	.+6      	; 0x709c <dtoa_prf+0x172>
    7096:	41 93       	st	Z+, r20
    7098:	31 50       	subi	r19, 0x01	; 1
    709a:	fb cf       	rjmp	.-10     	; 0x7092 <dtoa_prf+0x168>
    709c:	fc 01       	movw	r30, r24
    709e:	e2 0f       	add	r30, r18
    70a0:	f1 1d       	adc	r31, r1
    70a2:	10 82       	st	Z, r1
    70a4:	8e ef       	ldi	r24, 0xFE	; 254
    70a6:	9f ef       	ldi	r25, 0xFF	; 255
    70a8:	b7 c0       	rjmp	.+366    	; 0x7218 <dtoa_prf+0x2ee>
    70aa:	f1 e0       	ldi	r31, 0x01	; 1
    70ac:	91 11       	cpse	r25, r1
    70ae:	01 c0       	rjmp	.+2      	; 0x70b2 <dtoa_prf+0x188>
    70b0:	f0 e0       	ldi	r31, 0x00	; 0
    70b2:	6f 2f       	mov	r22, r31
    70b4:	70 e0       	ldi	r23, 0x00	; 0
    70b6:	14 16       	cp	r1, r20
    70b8:	15 06       	cpc	r1, r21
    70ba:	24 f4       	brge	.+8      	; 0x70c4 <dtoa_prf+0x19a>
    70bc:	9a 01       	movw	r18, r20
    70be:	2f 5f       	subi	r18, 0xFF	; 255
    70c0:	3f 4f       	sbci	r19, 0xFF	; 255
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <dtoa_prf+0x19e>
    70c4:	21 e0       	ldi	r18, 0x01	; 1
    70c6:	30 e0       	ldi	r19, 0x00	; 0
    70c8:	26 0f       	add	r18, r22
    70ca:	37 1f       	adc	r19, r23
    70cc:	bb 20       	and	r11, r11
    70ce:	29 f0       	breq	.+10     	; 0x70da <dtoa_prf+0x1b0>
    70d0:	6b 2d       	mov	r22, r11
    70d2:	70 e0       	ldi	r23, 0x00	; 0
    70d4:	6f 5f       	subi	r22, 0xFF	; 255
    70d6:	7f 4f       	sbci	r23, 0xFF	; 255
    70d8:	02 c0       	rjmp	.+4      	; 0x70de <dtoa_prf+0x1b4>
    70da:	60 e0       	ldi	r22, 0x00	; 0
    70dc:	70 e0       	ldi	r23, 0x00	; 0
    70de:	26 0f       	add	r18, r22
    70e0:	37 1f       	adc	r19, r23
    70e2:	61 2f       	mov	r22, r17
    70e4:	70 e0       	ldi	r23, 0x00	; 0
    70e6:	26 17       	cp	r18, r22
    70e8:	37 07       	cpc	r19, r23
    70ea:	1c f4       	brge	.+6      	; 0x70f2 <dtoa_prf+0x1c8>
    70ec:	12 1b       	sub	r17, r18
    70ee:	21 2f       	mov	r18, r17
    70f0:	01 c0       	rjmp	.+2      	; 0x70f4 <dtoa_prf+0x1ca>
    70f2:	20 e0       	ldi	r18, 0x00	; 0
    70f4:	3e 2d       	mov	r19, r14
    70f6:	38 71       	andi	r19, 0x18	; 24
    70f8:	59 f4       	brne	.+22     	; 0x7110 <dtoa_prf+0x1e6>
    70fa:	d6 01       	movw	r26, r12
    70fc:	32 2f       	mov	r19, r18
    70fe:	60 e2       	ldi	r22, 0x20	; 32
    7100:	33 23       	and	r19, r19
    7102:	19 f0       	breq	.+6      	; 0x710a <dtoa_prf+0x1e0>
    7104:	6d 93       	st	X+, r22
    7106:	31 50       	subi	r19, 0x01	; 1
    7108:	fb cf       	rjmp	.-10     	; 0x7100 <dtoa_prf+0x1d6>
    710a:	c2 0e       	add	r12, r18
    710c:	d1 1c       	adc	r13, r1
    710e:	20 e0       	ldi	r18, 0x00	; 0
    7110:	ff 23       	and	r31, r31
    7112:	31 f0       	breq	.+12     	; 0x7120 <dtoa_prf+0x1f6>
    7114:	d6 01       	movw	r26, r12
    7116:	9c 93       	st	X, r25
    7118:	b6 01       	movw	r22, r12
    711a:	6f 5f       	subi	r22, 0xFF	; 255
    711c:	7f 4f       	sbci	r23, 0xFF	; 255
    711e:	6b 01       	movw	r12, r22
    7120:	e1 11       	cpse	r30, r1
    7122:	0b c0       	rjmp	.+22     	; 0x713a <dtoa_prf+0x210>
    7124:	f6 01       	movw	r30, r12
    7126:	92 2f       	mov	r25, r18
    7128:	30 e3       	ldi	r19, 0x30	; 48
    712a:	99 23       	and	r25, r25
    712c:	19 f0       	breq	.+6      	; 0x7134 <dtoa_prf+0x20a>
    712e:	31 93       	st	Z+, r19
    7130:	91 50       	subi	r25, 0x01	; 1
    7132:	fb cf       	rjmp	.-10     	; 0x712a <dtoa_prf+0x200>
    7134:	c2 0e       	add	r12, r18
    7136:	d1 1c       	adc	r13, r1
    7138:	20 e0       	ldi	r18, 0x00	; 0
    713a:	9f 2d       	mov	r25, r15
    713c:	94 0f       	add	r25, r20
    713e:	3a 81       	ldd	r19, Y+2	; 0x02
    7140:	78 2f       	mov	r23, r24
    7142:	70 71       	andi	r23, 0x10	; 16
    7144:	a7 2e       	mov	r10, r23
    7146:	84 ff       	sbrs	r24, 4
    7148:	03 c0       	rjmp	.+6      	; 0x7150 <dtoa_prf+0x226>
    714a:	31 33       	cpi	r19, 0x31	; 49
    714c:	09 f4       	brne	.+2      	; 0x7150 <dtoa_prf+0x226>
    714e:	91 50       	subi	r25, 0x01	; 1
    7150:	19 16       	cp	r1, r25
    7152:	24 f4       	brge	.+8      	; 0x715c <dtoa_prf+0x232>
    7154:	99 30       	cpi	r25, 0x09	; 9
    7156:	18 f0       	brcs	.+6      	; 0x715e <dtoa_prf+0x234>
    7158:	98 e0       	ldi	r25, 0x08	; 8
    715a:	01 c0       	rjmp	.+2      	; 0x715e <dtoa_prf+0x234>
    715c:	91 e0       	ldi	r25, 0x01	; 1
    715e:	e4 2f       	mov	r30, r20
    7160:	85 2f       	mov	r24, r21
    7162:	57 ff       	sbrs	r21, 7
    7164:	02 c0       	rjmp	.+4      	; 0x716a <dtoa_prf+0x240>
    7166:	e0 e0       	ldi	r30, 0x00	; 0
    7168:	80 e0       	ldi	r24, 0x00	; 0
    716a:	6e 2f       	mov	r22, r30
    716c:	78 2f       	mov	r23, r24
    716e:	e0 e0       	ldi	r30, 0x00	; 0
    7170:	f0 e0       	ldi	r31, 0x00	; 0
    7172:	ae e2       	ldi	r26, 0x2E	; 46
    7174:	9a 2e       	mov	r9, r26
    7176:	3a 01       	movw	r6, r20
    7178:	69 1a       	sub	r6, r25
    717a:	71 08       	sbc	r7, r1
    717c:	2a 01       	movw	r4, r20
    717e:	46 1a       	sub	r4, r22
    7180:	57 0a       	sbc	r5, r23
    7182:	0b 2d       	mov	r16, r11
    7184:	10 e0       	ldi	r17, 0x00	; 0
    7186:	11 95       	neg	r17
    7188:	01 95       	neg	r16
    718a:	11 09       	sbc	r17, r1
    718c:	6f 3f       	cpi	r22, 0xFF	; 255
    718e:	8f ef       	ldi	r24, 0xFF	; 255
    7190:	78 07       	cpc	r23, r24
    7192:	29 f4       	brne	.+10     	; 0x719e <dtoa_prf+0x274>
    7194:	d6 01       	movw	r26, r12
    7196:	9c 92       	st	X, r9
    7198:	c6 01       	movw	r24, r12
    719a:	01 96       	adiw	r24, 0x01	; 1
    719c:	6c 01       	movw	r12, r24
    719e:	46 17       	cp	r20, r22
    71a0:	57 07       	cpc	r21, r23
    71a2:	84 f0       	brlt	.+32     	; 0x71c4 <dtoa_prf+0x29a>
    71a4:	66 16       	cp	r6, r22
    71a6:	77 06       	cpc	r7, r23
    71a8:	6c f4       	brge	.+26     	; 0x71c4 <dtoa_prf+0x29a>
    71aa:	7f 01       	movw	r14, r30
    71ac:	e4 0c       	add	r14, r4
    71ae:	f5 1c       	adc	r15, r5
    71b0:	a1 e0       	ldi	r26, 0x01	; 1
    71b2:	b0 e0       	ldi	r27, 0x00	; 0
    71b4:	ac 0f       	add	r26, r28
    71b6:	bd 1f       	adc	r27, r29
    71b8:	ea 0e       	add	r14, r26
    71ba:	fb 1e       	adc	r15, r27
    71bc:	d7 01       	movw	r26, r14
    71be:	11 96       	adiw	r26, 0x01	; 1
    71c0:	bc 90       	ld	r11, X
    71c2:	02 c0       	rjmp	.+4      	; 0x71c8 <dtoa_prf+0x29e>
    71c4:	90 e3       	ldi	r25, 0x30	; 48
    71c6:	b9 2e       	mov	r11, r25
    71c8:	61 50       	subi	r22, 0x01	; 1
    71ca:	71 09       	sbc	r23, r1
    71cc:	31 96       	adiw	r30, 0x01	; 1
    71ce:	c6 01       	movw	r24, r12
    71d0:	01 96       	adiw	r24, 0x01	; 1
    71d2:	7c 01       	movw	r14, r24
    71d4:	60 17       	cp	r22, r16
    71d6:	71 07       	cpc	r23, r17
    71d8:	24 f0       	brlt	.+8      	; 0x71e2 <dtoa_prf+0x2b8>
    71da:	d6 01       	movw	r26, r12
    71dc:	bc 92       	st	X, r11
    71de:	6c 01       	movw	r12, r24
    71e0:	d5 cf       	rjmp	.-86     	; 0x718c <dtoa_prf+0x262>
    71e2:	64 17       	cp	r22, r20
    71e4:	75 07       	cpc	r23, r21
    71e6:	41 f4       	brne	.+16     	; 0x71f8 <dtoa_prf+0x2ce>
    71e8:	36 33       	cpi	r19, 0x36	; 54
    71ea:	20 f4       	brcc	.+8      	; 0x71f4 <dtoa_prf+0x2ca>
    71ec:	35 33       	cpi	r19, 0x35	; 53
    71ee:	21 f4       	brne	.+8      	; 0x71f8 <dtoa_prf+0x2ce>
    71f0:	a1 10       	cpse	r10, r1
    71f2:	02 c0       	rjmp	.+4      	; 0x71f8 <dtoa_prf+0x2ce>
    71f4:	81 e3       	ldi	r24, 0x31	; 49
    71f6:	b8 2e       	mov	r11, r24
    71f8:	f6 01       	movw	r30, r12
    71fa:	b0 82       	st	Z, r11
    71fc:	f7 01       	movw	r30, r14
    71fe:	82 2f       	mov	r24, r18
    7200:	90 e2       	ldi	r25, 0x20	; 32
    7202:	88 23       	and	r24, r24
    7204:	19 f0       	breq	.+6      	; 0x720c <dtoa_prf+0x2e2>
    7206:	91 93       	st	Z+, r25
    7208:	81 50       	subi	r24, 0x01	; 1
    720a:	fb cf       	rjmp	.-10     	; 0x7202 <dtoa_prf+0x2d8>
    720c:	f7 01       	movw	r30, r14
    720e:	e2 0f       	add	r30, r18
    7210:	f1 1d       	adc	r31, r1
    7212:	10 82       	st	Z, r1
    7214:	80 e0       	ldi	r24, 0x00	; 0
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	29 96       	adiw	r28, 0x09	; 9
    721a:	0f b6       	in	r0, 0x3f	; 63
    721c:	f8 94       	cli
    721e:	de bf       	out	0x3e, r29	; 62
    7220:	0f be       	out	0x3f, r0	; 63
    7222:	cd bf       	out	0x3d, r28	; 61
    7224:	df 91       	pop	r29
    7226:	cf 91       	pop	r28
    7228:	1f 91       	pop	r17
    722a:	0f 91       	pop	r16
    722c:	ff 90       	pop	r15
    722e:	ef 90       	pop	r14
    7230:	df 90       	pop	r13
    7232:	cf 90       	pop	r12
    7234:	bf 90       	pop	r11
    7236:	af 90       	pop	r10
    7238:	9f 90       	pop	r9
    723a:	7f 90       	pop	r7
    723c:	6f 90       	pop	r6
    723e:	5f 90       	pop	r5
    7240:	4f 90       	pop	r4
    7242:	08 95       	ret

00007244 <__ftoa_engine>:
    7244:	28 30       	cpi	r18, 0x08	; 8
    7246:	08 f0       	brcs	.+2      	; 0x724a <__ftoa_engine+0x6>
    7248:	27 e0       	ldi	r18, 0x07	; 7
    724a:	33 27       	eor	r19, r19
    724c:	da 01       	movw	r26, r20
    724e:	99 0f       	add	r25, r25
    7250:	31 1d       	adc	r19, r1
    7252:	87 fd       	sbrc	r24, 7
    7254:	91 60       	ori	r25, 0x01	; 1
    7256:	00 96       	adiw	r24, 0x00	; 0
    7258:	61 05       	cpc	r22, r1
    725a:	71 05       	cpc	r23, r1
    725c:	39 f4       	brne	.+14     	; 0x726c <__ftoa_engine+0x28>
    725e:	32 60       	ori	r19, 0x02	; 2
    7260:	2e 5f       	subi	r18, 0xFE	; 254
    7262:	3d 93       	st	X+, r19
    7264:	30 e3       	ldi	r19, 0x30	; 48
    7266:	2a 95       	dec	r18
    7268:	e1 f7       	brne	.-8      	; 0x7262 <__ftoa_engine+0x1e>
    726a:	08 95       	ret
    726c:	9f 3f       	cpi	r25, 0xFF	; 255
    726e:	30 f0       	brcs	.+12     	; 0x727c <__ftoa_engine+0x38>
    7270:	80 38       	cpi	r24, 0x80	; 128
    7272:	71 05       	cpc	r23, r1
    7274:	61 05       	cpc	r22, r1
    7276:	09 f0       	breq	.+2      	; 0x727a <__ftoa_engine+0x36>
    7278:	3c 5f       	subi	r19, 0xFC	; 252
    727a:	3c 5f       	subi	r19, 0xFC	; 252
    727c:	3d 93       	st	X+, r19
    727e:	91 30       	cpi	r25, 0x01	; 1
    7280:	08 f0       	brcs	.+2      	; 0x7284 <__ftoa_engine+0x40>
    7282:	80 68       	ori	r24, 0x80	; 128
    7284:	91 1d       	adc	r25, r1
    7286:	df 93       	push	r29
    7288:	cf 93       	push	r28
    728a:	1f 93       	push	r17
    728c:	0f 93       	push	r16
    728e:	ff 92       	push	r15
    7290:	ef 92       	push	r14
    7292:	19 2f       	mov	r17, r25
    7294:	98 7f       	andi	r25, 0xF8	; 248
    7296:	96 95       	lsr	r25
    7298:	e9 2f       	mov	r30, r25
    729a:	96 95       	lsr	r25
    729c:	96 95       	lsr	r25
    729e:	e9 0f       	add	r30, r25
    72a0:	ff 27       	eor	r31, r31
    72a2:	e1 51       	subi	r30, 0x11	; 17
    72a4:	fd 4f       	sbci	r31, 0xFD	; 253
    72a6:	99 27       	eor	r25, r25
    72a8:	33 27       	eor	r19, r19
    72aa:	ee 24       	eor	r14, r14
    72ac:	ff 24       	eor	r15, r15
    72ae:	a7 01       	movw	r20, r14
    72b0:	e7 01       	movw	r28, r14
    72b2:	05 90       	lpm	r0, Z+
    72b4:	08 94       	sec
    72b6:	07 94       	ror	r0
    72b8:	28 f4       	brcc	.+10     	; 0x72c4 <__ftoa_engine+0x80>
    72ba:	36 0f       	add	r19, r22
    72bc:	e7 1e       	adc	r14, r23
    72be:	f8 1e       	adc	r15, r24
    72c0:	49 1f       	adc	r20, r25
    72c2:	51 1d       	adc	r21, r1
    72c4:	66 0f       	add	r22, r22
    72c6:	77 1f       	adc	r23, r23
    72c8:	88 1f       	adc	r24, r24
    72ca:	99 1f       	adc	r25, r25
    72cc:	06 94       	lsr	r0
    72ce:	a1 f7       	brne	.-24     	; 0x72b8 <__ftoa_engine+0x74>
    72d0:	05 90       	lpm	r0, Z+
    72d2:	07 94       	ror	r0
    72d4:	28 f4       	brcc	.+10     	; 0x72e0 <__ftoa_engine+0x9c>
    72d6:	e7 0e       	add	r14, r23
    72d8:	f8 1e       	adc	r15, r24
    72da:	49 1f       	adc	r20, r25
    72dc:	56 1f       	adc	r21, r22
    72de:	c1 1d       	adc	r28, r1
    72e0:	77 0f       	add	r23, r23
    72e2:	88 1f       	adc	r24, r24
    72e4:	99 1f       	adc	r25, r25
    72e6:	66 1f       	adc	r22, r22
    72e8:	06 94       	lsr	r0
    72ea:	a1 f7       	brne	.-24     	; 0x72d4 <__ftoa_engine+0x90>
    72ec:	05 90       	lpm	r0, Z+
    72ee:	07 94       	ror	r0
    72f0:	28 f4       	brcc	.+10     	; 0x72fc <__ftoa_engine+0xb8>
    72f2:	f8 0e       	add	r15, r24
    72f4:	49 1f       	adc	r20, r25
    72f6:	56 1f       	adc	r21, r22
    72f8:	c7 1f       	adc	r28, r23
    72fa:	d1 1d       	adc	r29, r1
    72fc:	88 0f       	add	r24, r24
    72fe:	99 1f       	adc	r25, r25
    7300:	66 1f       	adc	r22, r22
    7302:	77 1f       	adc	r23, r23
    7304:	06 94       	lsr	r0
    7306:	a1 f7       	brne	.-24     	; 0x72f0 <__ftoa_engine+0xac>
    7308:	05 90       	lpm	r0, Z+
    730a:	07 94       	ror	r0
    730c:	20 f4       	brcc	.+8      	; 0x7316 <__ftoa_engine+0xd2>
    730e:	49 0f       	add	r20, r25
    7310:	56 1f       	adc	r21, r22
    7312:	c7 1f       	adc	r28, r23
    7314:	d8 1f       	adc	r29, r24
    7316:	99 0f       	add	r25, r25
    7318:	66 1f       	adc	r22, r22
    731a:	77 1f       	adc	r23, r23
    731c:	88 1f       	adc	r24, r24
    731e:	06 94       	lsr	r0
    7320:	a9 f7       	brne	.-22     	; 0x730c <__ftoa_engine+0xc8>
    7322:	84 91       	lpm	r24, Z
    7324:	10 95       	com	r17
    7326:	17 70       	andi	r17, 0x07	; 7
    7328:	41 f0       	breq	.+16     	; 0x733a <__ftoa_engine+0xf6>
    732a:	d6 95       	lsr	r29
    732c:	c7 95       	ror	r28
    732e:	57 95       	ror	r21
    7330:	47 95       	ror	r20
    7332:	f7 94       	ror	r15
    7334:	e7 94       	ror	r14
    7336:	1a 95       	dec	r17
    7338:	c1 f7       	brne	.-16     	; 0x732a <__ftoa_engine+0xe6>
    733a:	e5 e9       	ldi	r30, 0x95	; 149
    733c:	f2 e0       	ldi	r31, 0x02	; 2
    733e:	68 94       	set
    7340:	15 90       	lpm	r1, Z+
    7342:	15 91       	lpm	r17, Z+
    7344:	35 91       	lpm	r19, Z+
    7346:	65 91       	lpm	r22, Z+
    7348:	95 91       	lpm	r25, Z+
    734a:	05 90       	lpm	r0, Z+
    734c:	7f e2       	ldi	r23, 0x2F	; 47
    734e:	73 95       	inc	r23
    7350:	e1 18       	sub	r14, r1
    7352:	f1 0a       	sbc	r15, r17
    7354:	43 0b       	sbc	r20, r19
    7356:	56 0b       	sbc	r21, r22
    7358:	c9 0b       	sbc	r28, r25
    735a:	d0 09       	sbc	r29, r0
    735c:	c0 f7       	brcc	.-16     	; 0x734e <__ftoa_engine+0x10a>
    735e:	e1 0c       	add	r14, r1
    7360:	f1 1e       	adc	r15, r17
    7362:	43 1f       	adc	r20, r19
    7364:	56 1f       	adc	r21, r22
    7366:	c9 1f       	adc	r28, r25
    7368:	d0 1d       	adc	r29, r0
    736a:	7e f4       	brtc	.+30     	; 0x738a <__ftoa_engine+0x146>
    736c:	70 33       	cpi	r23, 0x30	; 48
    736e:	11 f4       	brne	.+4      	; 0x7374 <__ftoa_engine+0x130>
    7370:	8a 95       	dec	r24
    7372:	e6 cf       	rjmp	.-52     	; 0x7340 <__ftoa_engine+0xfc>
    7374:	e8 94       	clt
    7376:	01 50       	subi	r16, 0x01	; 1
    7378:	30 f0       	brcs	.+12     	; 0x7386 <__ftoa_engine+0x142>
    737a:	08 0f       	add	r16, r24
    737c:	0a f4       	brpl	.+2      	; 0x7380 <__ftoa_engine+0x13c>
    737e:	00 27       	eor	r16, r16
    7380:	02 17       	cp	r16, r18
    7382:	08 f4       	brcc	.+2      	; 0x7386 <__ftoa_engine+0x142>
    7384:	20 2f       	mov	r18, r16
    7386:	23 95       	inc	r18
    7388:	02 2f       	mov	r16, r18
    738a:	7a 33       	cpi	r23, 0x3A	; 58
    738c:	28 f0       	brcs	.+10     	; 0x7398 <__ftoa_engine+0x154>
    738e:	79 e3       	ldi	r23, 0x39	; 57
    7390:	7d 93       	st	X+, r23
    7392:	2a 95       	dec	r18
    7394:	e9 f7       	brne	.-6      	; 0x7390 <__ftoa_engine+0x14c>
    7396:	10 c0       	rjmp	.+32     	; 0x73b8 <__ftoa_engine+0x174>
    7398:	7d 93       	st	X+, r23
    739a:	2a 95       	dec	r18
    739c:	89 f6       	brne	.-94     	; 0x7340 <__ftoa_engine+0xfc>
    739e:	06 94       	lsr	r0
    73a0:	97 95       	ror	r25
    73a2:	67 95       	ror	r22
    73a4:	37 95       	ror	r19
    73a6:	17 95       	ror	r17
    73a8:	17 94       	ror	r1
    73aa:	e1 18       	sub	r14, r1
    73ac:	f1 0a       	sbc	r15, r17
    73ae:	43 0b       	sbc	r20, r19
    73b0:	56 0b       	sbc	r21, r22
    73b2:	c9 0b       	sbc	r28, r25
    73b4:	d0 09       	sbc	r29, r0
    73b6:	98 f0       	brcs	.+38     	; 0x73de <__ftoa_engine+0x19a>
    73b8:	23 95       	inc	r18
    73ba:	7e 91       	ld	r23, -X
    73bc:	73 95       	inc	r23
    73be:	7a 33       	cpi	r23, 0x3A	; 58
    73c0:	08 f0       	brcs	.+2      	; 0x73c4 <__ftoa_engine+0x180>
    73c2:	70 e3       	ldi	r23, 0x30	; 48
    73c4:	7c 93       	st	X, r23
    73c6:	20 13       	cpse	r18, r16
    73c8:	b8 f7       	brcc	.-18     	; 0x73b8 <__ftoa_engine+0x174>
    73ca:	7e 91       	ld	r23, -X
    73cc:	70 61       	ori	r23, 0x10	; 16
    73ce:	7d 93       	st	X+, r23
    73d0:	30 f0       	brcs	.+12     	; 0x73de <__ftoa_engine+0x19a>
    73d2:	83 95       	inc	r24
    73d4:	71 e3       	ldi	r23, 0x31	; 49
    73d6:	7d 93       	st	X+, r23
    73d8:	70 e3       	ldi	r23, 0x30	; 48
    73da:	2a 95       	dec	r18
    73dc:	e1 f7       	brne	.-8      	; 0x73d6 <__ftoa_engine+0x192>
    73de:	11 24       	eor	r1, r1
    73e0:	ef 90       	pop	r14
    73e2:	ff 90       	pop	r15
    73e4:	0f 91       	pop	r16
    73e6:	1f 91       	pop	r17
    73e8:	cf 91       	pop	r28
    73ea:	df 91       	pop	r29
    73ec:	99 27       	eor	r25, r25
    73ee:	87 fd       	sbrc	r24, 7
    73f0:	90 95       	com	r25
    73f2:	08 95       	ret

000073f4 <__ctype_isfalse>:
    73f4:	99 27       	eor	r25, r25
    73f6:	88 27       	eor	r24, r24

000073f8 <__ctype_istrue>:
    73f8:	08 95       	ret

000073fa <strrev>:
    73fa:	dc 01       	movw	r26, r24
    73fc:	fc 01       	movw	r30, r24
    73fe:	67 2f       	mov	r22, r23
    7400:	71 91       	ld	r23, Z+
    7402:	77 23       	and	r23, r23
    7404:	e1 f7       	brne	.-8      	; 0x73fe <strrev+0x4>
    7406:	32 97       	sbiw	r30, 0x02	; 2
    7408:	04 c0       	rjmp	.+8      	; 0x7412 <strrev+0x18>
    740a:	7c 91       	ld	r23, X
    740c:	6d 93       	st	X+, r22
    740e:	70 83       	st	Z, r23
    7410:	62 91       	ld	r22, -Z
    7412:	ae 17       	cp	r26, r30
    7414:	bf 07       	cpc	r27, r31
    7416:	c8 f3       	brcs	.-14     	; 0x740a <strrev+0x10>
    7418:	08 95       	ret

0000741a <eeprom_read_byte>:
    741a:	f9 99       	sbic	0x1f, 1	; 31
    741c:	fe cf       	rjmp	.-4      	; 0x741a <eeprom_read_byte>
    741e:	92 bd       	out	0x22, r25	; 34
    7420:	81 bd       	out	0x21, r24	; 33
    7422:	f8 9a       	sbi	0x1f, 0	; 31
    7424:	99 27       	eor	r25, r25
    7426:	80 b5       	in	r24, 0x20	; 32
    7428:	08 95       	ret

0000742a <eeprom_write_byte>:
    742a:	26 2f       	mov	r18, r22

0000742c <eeprom_write_r18>:
    742c:	f9 99       	sbic	0x1f, 1	; 31
    742e:	fe cf       	rjmp	.-4      	; 0x742c <eeprom_write_r18>
    7430:	1f ba       	out	0x1f, r1	; 31
    7432:	92 bd       	out	0x22, r25	; 34
    7434:	81 bd       	out	0x21, r24	; 33
    7436:	20 bd       	out	0x20, r18	; 32
    7438:	0f b6       	in	r0, 0x3f	; 63
    743a:	f8 94       	cli
    743c:	fa 9a       	sbi	0x1f, 2	; 31
    743e:	f9 9a       	sbi	0x1f, 1	; 31
    7440:	0f be       	out	0x3f, r0	; 63
    7442:	01 96       	adiw	r24, 0x01	; 1
    7444:	08 95       	ret

00007446 <__do_global_dtors>:
    7446:	12 e0       	ldi	r17, 0x02	; 2
    7448:	ce e5       	ldi	r28, 0x5E	; 94
    744a:	d2 e0       	ldi	r29, 0x02	; 2
    744c:	03 c0       	rjmp	.+6      	; 0x7454 <__do_global_dtors+0xe>
    744e:	fe 01       	movw	r30, r28
    7450:	fb d8       	rcall	.-3594   	; 0x6648 <__tablejump2__>
    7452:	21 96       	adiw	r28, 0x01	; 1
    7454:	c0 36       	cpi	r28, 0x60	; 96
    7456:	d1 07       	cpc	r29, r17
    7458:	d1 f7       	brne	.-12     	; 0x744e <__do_global_dtors+0x8>
    745a:	f8 94       	cli

0000745c <__stop_program>:
    745c:	ff cf       	rjmp	.-2      	; 0x745c <__stop_program>
