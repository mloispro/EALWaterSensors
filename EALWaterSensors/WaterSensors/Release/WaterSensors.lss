
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00003f12  00003fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005d6  0080018e  0080018e  00004034  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa0  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e93e  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000479d  00000000  00000000  000234ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075e8  00000000  00000000  00027c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fe8  00000000  00000000  0002f234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011e38  00000000  00000000  0003121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c7e5  00000000  00000000  00043054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  0004f839  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007c12  00000000  00000000  000504f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	02 c1       	rjmp	.+516    	; 0x206 <__dtors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	10 c3       	rjmp	.+1568   	; 0x62e <__vector_3>
       e:	00 00       	nop
      10:	0e c3       	rjmp	.+1564   	; 0x62e <__vector_3>
      12:	00 00       	nop
      14:	0c c3       	rjmp	.+1560   	; 0x62e <__vector_3>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	16 c1       	rjmp	.+556    	; 0x256 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	14 c1       	rjmp	.+552    	; 0x256 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__vector_16>
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_18>
      4c:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_19>
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c1       	rjmp	.+584    	; 0x2aa <__vector_24>
      62:	00 00       	nop
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <_ZN13LiquidCrystal5beginEhhh+0x2e>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240

000000ea <__trampolines_end>:
      ea:	4e 41       	sbci	r20, 0x1E	; 30
      ec:	4e 49       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <pstr_inity>:
      ed:	49 4e 49 54 59                                      INITY

000000f2 <pstr_inf>:
      f2:	49 4e 46                                            INF

000000f5 <pwr_m10>:
      f5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     105:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000010d <pwr_p10>:
     10d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     11d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000125 <_ZZN8PHSensor16CalculateAverageEPiiE3__c>:
     125:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     135:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     145:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

0000014f <_ZZN8PHSensor12ClearLCDLineEsE3__c>:
     14f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000160 <_ZZN8PHSensor12PrintPHToLCDEvE3__c>:
     160:	50 48 3a 20 00                                      PH: .

00000165 <_ZZN15CmdMessengerExt14OnStartLoggingEvE3__c>:
     165:	53 74 61 72 74 20 4c 6f 67 67 69 6e 67 00           Start Logging.

00000173 <_ZZN15CmdMessengerExt16OnUnknownCommandEvE3__c>:
     173:	43 6f 6d 6d 61 6e 64 20 77 69 74 68 6f 75 74 20     Command without 
     183:	61 74 74 61 63 68 65 64 20 63 61 6c 6c 62 61 63     attached callbac
     193:	6b 00                                               k.

00000195 <_ZZN15CmdMessengerExt17OnIdentifyRequestEvE3__c>:
     195:	57 61 74 65 72 53 65 6e 73 6f 72 73 00              WaterSensors.

000001a2 <digital_pin_to_timer_PGM>:
     1a2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     1b2:	00 00 00 00                                         ....

000001b6 <digital_pin_to_bit_mask_PGM>:
     1b6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1c6:	04 08 10 20                                         ... 

000001ca <digital_pin_to_port_PGM>:
     1ca:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1da:	03 03 03 03                                         ....

000001de <port_to_input_PGM>:
     1de:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001e8 <port_to_output_PGM>:
     1e8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001f2 <port_to_mode_PGM>:
     1f2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001fc <__ctors_start>:
     1fc:	13 03       	mulsu	r17, r19
     1fe:	57 09       	sbc	r21, r7
     200:	c8 0f       	add	r28, r24
     202:	0d 15       	cp	r16, r13

00000204 <__ctors_end>:
     204:	e1 0f       	add	r30, r17

00000206 <__dtors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d8 e0       	ldi	r29, 0x08	; 8
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_copy_data>:
     212:	11 e0       	ldi	r17, 0x01	; 1
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	e2 e1       	ldi	r30, 0x12	; 18
     21a:	ff e3       	ldi	r31, 0x3F	; 63
     21c:	02 c0       	rjmp	.+4      	; 0x222 <__do_copy_data+0x10>
     21e:	05 90       	lpm	r0, Z+
     220:	0d 92       	st	X+, r0
     222:	ae 38       	cpi	r26, 0x8E	; 142
     224:	b1 07       	cpc	r27, r17
     226:	d9 f7       	brne	.-10     	; 0x21e <__do_copy_data+0xc>

00000228 <__do_clear_bss>:
     228:	27 e0       	ldi	r18, 0x07	; 7
     22a:	ae e8       	ldi	r26, 0x8E	; 142
     22c:	b1 e0       	ldi	r27, 0x01	; 1
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a4 36       	cpi	r26, 0x64	; 100
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>

00000238 <__do_global_ctors>:
     238:	10 e0       	ldi	r17, 0x00	; 0
     23a:	c2 e0       	ldi	r28, 0x02	; 2
     23c:	d1 e0       	ldi	r29, 0x01	; 1
     23e:	04 c0       	rjmp	.+8      	; 0x248 <__do_global_ctors+0x10>
     240:	21 97       	sbiw	r28, 0x01	; 1
     242:	fe 01       	movw	r30, r28
     244:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__tablejump2__>
     248:	ce 3f       	cpi	r28, 0xFE	; 254
     24a:	d1 07       	cpc	r29, r17
     24c:	c9 f7       	brne	.-14     	; 0x240 <__do_global_ctors+0x8>
     24e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <main>
     252:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__do_global_dtors>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     258:	61 32       	cpi	r22, 0x21	; 33
     25a:	98 f4       	brcc	.+38     	; 0x282 <twi_transmit+0x2a>
     25c:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <twi_state>
     260:	24 30       	cpi	r18, 0x04	; 4
     262:	89 f4       	brne	.+34     	; 0x286 <twi_transmit+0x2e>
     264:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <twi_txBufferLength>
     268:	fc 01       	movw	r30, r24
     26a:	22 eb       	ldi	r18, 0xB2	; 178
     26c:	31 e0       	ldi	r19, 0x01	; 1
     26e:	d9 01       	movw	r26, r18
     270:	8a 2f       	mov	r24, r26
     272:	82 1b       	sub	r24, r18
     274:	86 17       	cp	r24, r22
     276:	18 f4       	brcc	.+6      	; 0x27e <twi_transmit+0x26>
     278:	81 91       	ld	r24, Z+
     27a:	8d 93       	st	X+, r24
     27c:	f9 cf       	rjmp	.-14     	; 0x270 <twi_transmit+0x18>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	08 95       	ret
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	08 95       	ret

0000028a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     28a:	85 ed       	ldi	r24, 0xD5	; 213
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     290:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     294:	84 fd       	sbrc	r24, 4
     296:	fc cf       	rjmp	.-8      	; 0x290 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     298:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_state>
     29c:	08 95       	ret

0000029e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     29e:	85 ec       	ldi	r24, 0xC5	; 197
     2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     2a4:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_state>
     2a8:	08 95       	ret

000002aa <__vector_24>:
}

ISR(TWI_vect)
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	2f 93       	push	r18
     2b6:	3f 93       	push	r19
     2b8:	4f 93       	push	r20
     2ba:	5f 93       	push	r21
     2bc:	6f 93       	push	r22
     2be:	7f 93       	push	r23
     2c0:	8f 93       	push	r24
     2c2:	9f 93       	push	r25
     2c4:	af 93       	push	r26
     2c6:	bf 93       	push	r27
     2c8:	ef 93       	push	r30
     2ca:	ff 93       	push	r31
  switch(TW_STATUS){
     2cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     2d0:	88 7f       	andi	r24, 0xF8	; 248
     2d2:	80 36       	cpi	r24, 0x60	; 96
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <__vector_24+0x2e>
     2d6:	9d c0       	rjmp	.+314    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     2d8:	70 f5       	brcc	.+92     	; 0x336 <__vector_24+0x8c>
     2da:	88 32       	cpi	r24, 0x28	; 40
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <__vector_24+0x36>
     2de:	5c c0       	rjmp	.+184    	; 0x398 <__vector_24+0xee>
     2e0:	90 f4       	brcc	.+36     	; 0x306 <__vector_24+0x5c>
     2e2:	80 31       	cpi	r24, 0x10	; 16
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_24+0x3e>
     2e6:	55 c0       	rjmp	.+170    	; 0x392 <__vector_24+0xe8>
     2e8:	38 f4       	brcc	.+14     	; 0x2f8 <__vector_24+0x4e>
     2ea:	88 23       	and	r24, r24
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <__vector_24+0x46>
     2ee:	f3 c0       	rjmp	.+486    	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
     2f0:	88 30       	cpi	r24, 0x08	; 8
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_24+0x4c>
     2f4:	4e c0       	rjmp	.+156    	; 0x392 <__vector_24+0xe8>
     2f6:	f2 c0       	rjmp	.+484    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     2f8:	88 31       	cpi	r24, 0x18	; 24
     2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_24+0x54>
     2fc:	4d c0       	rjmp	.+154    	; 0x398 <__vector_24+0xee>
     2fe:	80 32       	cpi	r24, 0x20	; 32
     300:	09 f4       	brne	.+2      	; 0x304 <__vector_24+0x5a>
     302:	5e c0       	rjmp	.+188    	; 0x3c0 <__vector_24+0x116>
     304:	eb c0       	rjmp	.+470    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     306:	80 34       	cpi	r24, 0x40	; 64
     308:	09 f4       	brne	.+2      	; 0x30c <__vector_24+0x62>
     30a:	69 c0       	rjmp	.+210    	; 0x3de <__vector_24+0x134>
     30c:	50 f4       	brcc	.+20     	; 0x322 <__vector_24+0x78>
     30e:	80 33       	cpi	r24, 0x30	; 48
     310:	09 f4       	brne	.+2      	; 0x314 <__vector_24+0x6a>
     312:	56 c0       	rjmp	.+172    	; 0x3c0 <__vector_24+0x116>
     314:	88 33       	cpi	r24, 0x38	; 56
     316:	09 f0       	breq	.+2      	; 0x31a <__vector_24+0x70>
     318:	e1 c0       	rjmp	.+450    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     31a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
      twi_releaseBus();
     31e:	bf df       	rcall	.-130    	; 0x29e <twi_releaseBus>
      break;
     320:	dd c0       	rjmp	.+442    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     322:	80 35       	cpi	r24, 0x50	; 80
     324:	09 f4       	brne	.+2      	; 0x328 <__vector_24+0x7e>
     326:	4f c0       	rjmp	.+158    	; 0x3c6 <__vector_24+0x11c>
     328:	88 35       	cpi	r24, 0x58	; 88
     32a:	09 f4       	brne	.+2      	; 0x32e <__vector_24+0x84>
     32c:	5d c0       	rjmp	.+186    	; 0x3e8 <__vector_24+0x13e>
     32e:	88 34       	cpi	r24, 0x48	; 72
     330:	09 f0       	breq	.+2      	; 0x334 <__vector_24+0x8a>
     332:	d4 c0       	rjmp	.+424    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     334:	d2 c0       	rjmp	.+420    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
     336:	88 39       	cpi	r24, 0x98	; 152
     338:	09 f4       	brne	.+2      	; 0x33c <__vector_24+0x92>
     33a:	c3 c0       	rjmp	.+390    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
     33c:	a8 f4       	brcc	.+42     	; 0x368 <__vector_24+0xbe>
     33e:	88 37       	cpi	r24, 0x78	; 120
     340:	09 f4       	brne	.+2      	; 0x344 <__vector_24+0x9a>
     342:	67 c0       	rjmp	.+206    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     344:	38 f4       	brcc	.+14     	; 0x354 <__vector_24+0xaa>
     346:	88 36       	cpi	r24, 0x68	; 104
     348:	09 f4       	brne	.+2      	; 0x34c <__vector_24+0xa2>
     34a:	63 c0       	rjmp	.+198    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     34c:	80 37       	cpi	r24, 0x70	; 112
     34e:	09 f4       	brne	.+2      	; 0x352 <__vector_24+0xa8>
     350:	60 c0       	rjmp	.+192    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     352:	c4 c0       	rjmp	.+392    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     354:	88 38       	cpi	r24, 0x88	; 136
     356:	09 f4       	brne	.+2      	; 0x35a <__vector_24+0xb0>
     358:	b4 c0       	rjmp	.+360    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
     35a:	80 39       	cpi	r24, 0x90	; 144
     35c:	09 f4       	brne	.+2      	; 0x360 <__vector_24+0xb6>
     35e:	5f c0       	rjmp	.+190    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     360:	80 38       	cpi	r24, 0x80	; 128
     362:	09 f0       	breq	.+2      	; 0x366 <__vector_24+0xbc>
     364:	bb c0       	rjmp	.+374    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     366:	5b c0       	rjmp	.+182    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     368:	80 3b       	cpi	r24, 0xB0	; 176
     36a:	09 f4       	brne	.+2      	; 0x36e <__vector_24+0xc4>
     36c:	82 c0       	rjmp	.+260    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     36e:	38 f4       	brcc	.+14     	; 0x37e <__vector_24+0xd4>
     370:	80 3a       	cpi	r24, 0xA0	; 160
     372:	09 f4       	brne	.+2      	; 0x376 <__vector_24+0xcc>
     374:	66 c0       	rjmp	.+204    	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     376:	88 3a       	cpi	r24, 0xA8	; 168
     378:	09 f4       	brne	.+2      	; 0x37c <__vector_24+0xd2>
     37a:	7b c0       	rjmp	.+246    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     37c:	af c0       	rjmp	.+350    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     37e:	80 3c       	cpi	r24, 0xC0	; 192
     380:	09 f4       	brne	.+2      	; 0x384 <__vector_24+0xda>
     382:	a3 c0       	rjmp	.+326    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
     384:	88 3c       	cpi	r24, 0xC8	; 200
     386:	09 f4       	brne	.+2      	; 0x38a <__vector_24+0xe0>
     388:	a0 c0       	rjmp	.+320    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
     38a:	88 3b       	cpi	r24, 0xB8	; 184
     38c:	09 f4       	brne	.+2      	; 0x390 <__vector_24+0xe6>
     38e:	86 c0       	rjmp	.+268    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
     390:	a5 c0       	rjmp	.+330    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     392:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_slarw>
     396:	10 c0       	rjmp	.+32     	; 0x3b8 <__vector_24+0x10e>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     398:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <twi_masterBufferIndex>
     39c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <twi_masterBufferLength>
     3a0:	98 17       	cp	r25, r24
     3a2:	70 f5       	brcc	.+92     	; 0x400 <__FUSE_REGION_LENGTH__>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     3a4:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <twi_masterBufferIndex>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	8e 0f       	add	r24, r30
     3ac:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_masterBufferIndex>
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	ec 52       	subi	r30, 0x2C	; 44
     3b4:	fe 4f       	sbci	r31, 0xFE	; 254
     3b6:	80 81       	ld	r24, Z
     3b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     3bc:	85 ec       	ldi	r24, 0xC5	; 197
     3be:	82 c0       	rjmp	.+260    	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     3c0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
     3c4:	8a c0       	rjmp	.+276    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     3c6:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <twi_masterBufferIndex>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	8e 0f       	add	r24, r30
     3ce:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_masterBufferIndex>
     3d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	ec 52       	subi	r30, 0x2C	; 44
     3da:	fe 4f       	sbci	r31, 0xFE	; 254
     3dc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     3de:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <twi_masterBufferIndex>
     3e2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <twi_masterBufferLength>
     3e6:	6a c0       	rjmp	.+212    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     3e8:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <twi_masterBufferIndex>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	8e 0f       	add	r24, r30
     3f0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <twi_masterBufferIndex>
     3f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ec 52       	subi	r30, 0x2C	; 44
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	80 83       	st	Z, r24
	if (twi_sendStop)
     400:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <twi_sendStop>
     404:	81 11       	cpse	r24, r1
     406:	69 c0       	rjmp	.+210    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     40e:	84 ea       	ldi	r24, 0xA4	; 164
     410:	5d c0       	rjmp	.+186    	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     418:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_rxBufferIndex>
     41c:	cf cf       	rjmp	.-98     	; 0x3bc <__vector_24+0x112>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     41e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <twi_rxBufferIndex>
     422:	80 32       	cpi	r24, 0x20	; 32
     424:	08 f0       	brcs	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     426:	4d c0       	rjmp	.+154    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     428:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <twi_rxBufferIndex>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	8e 0f       	add	r24, r30
     430:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <twi_rxBufferIndex>
     434:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	e0 57       	subi	r30, 0x70	; 112
     43c:	fe 4f       	sbci	r31, 0xFE	; 254
     43e:	80 83       	st	Z, r24
     440:	bd cf       	rjmp	.-134    	; 0x3bc <__vector_24+0x112>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     442:	2d df       	rcall	.-422    	; 0x29e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     444:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <twi_rxBufferIndex>
     448:	80 32       	cpi	r24, 0x20	; 32
     44a:	30 f4       	brcc	.+12     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     44c:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <twi_rxBufferIndex>
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	e0 57       	subi	r30, 0x70	; 112
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     458:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <twi_rxBufferIndex>
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_onSlaveReceive>
     462:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_onSlaveReceive+0x1>
     466:	80 e9       	ldi	r24, 0x90	; 144
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     46c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <twi_rxBufferIndex>
      break;
     470:	35 c0       	rjmp	.+106    	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     478:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     47c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     480:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <twi_onSlaveTransmit>
     484:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <twi_onSlaveTransmit+0x1>
     488:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     48a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <twi_txBufferLength>
     48e:	81 11       	cpse	r24, r1
     490:	05 c0       	rjmp	.+10     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
        twi_txBufferLength = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     498:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     49c:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <twi_txBufferIndex>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	8e 0f       	add	r24, r30
     4a4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <twi_txBufferIndex>
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ee 54       	subi	r30, 0x4E	; 78
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	80 81       	ld	r24, Z
     4b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     4b4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <twi_txBufferIndex>
     4b8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <twi_txBufferLength>
     4bc:	98 17       	cp	r25, r24
     4be:	08 f4       	brcc	.+2      	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
     4c0:	7d cf       	rjmp	.-262    	; 0x3bc <__vector_24+0x112>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4c2:	85 e8       	ldi	r24, 0x85	; 133
     4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4c8:	09 c0       	rjmp	.+18     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     4ca:	85 ec       	ldi	r24, 0xC5	; 197
     4cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     4d0:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_state>
      break;
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     4d6:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
      twi_stop();
     4da:	d7 de       	rcall	.-594    	; 0x28a <twi_stop>
      break;
  }
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     4fe:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZN7TwoWire14rxBufferLengthE>
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <_ZN7TwoWire13rxBufferIndexE>
     508:	82 1b       	sub	r24, r18
     50a:	91 09       	sbc	r25, r1
     50c:	08 95       	ret

0000050e <_ZN7TwoWire4readEv>:
     50e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <_ZN7TwoWire13rxBufferIndexE>
     512:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZN7TwoWire14rxBufferLengthE>
     516:	98 17       	cp	r25, r24
     518:	50 f4       	brcc	.+20     	; 0x52e <_ZN7TwoWire4readEv+0x20>
     51a:	e9 2f       	mov	r30, r25
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	e3 5d       	subi	r30, 0xD3	; 211
     520:	fd 4f       	sbci	r31, 0xFD	; 253
     522:	20 81       	ld	r18, Z
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	9f 5f       	subi	r25, 0xFF	; 255
     528:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <_ZN7TwoWire13rxBufferIndexE>
     52c:	02 c0       	rjmp	.+4      	; 0x532 <_ZN7TwoWire4readEv+0x24>
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	3f ef       	ldi	r19, 0xFF	; 255
     532:	c9 01       	movw	r24, r18
     534:	08 95       	ret

00000536 <_ZN7TwoWire4peekEv>:
     536:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <_ZN7TwoWire13rxBufferIndexE>
     53a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZN7TwoWire14rxBufferLengthE>
     53e:	e8 17       	cp	r30, r24
     540:	30 f4       	brcc	.+12     	; 0x54e <_ZN7TwoWire4peekEv+0x18>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	e3 5d       	subi	r30, 0xD3	; 211
     546:	fd 4f       	sbci	r31, 0xFD	; 253
     548:	80 81       	ld	r24, Z
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	08 95       	ret
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	9f ef       	ldi	r25, 0xFF	; 255
     552:	08 95       	ret

00000554 <_ZN7TwoWire5flushEv>:
     554:	08 95       	ret

00000556 <_ZN7TwoWire5writeEPKhj>:
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	e1 eb       	ldi	r30, 0xB1	; 177
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x14>
     562:	7c 01       	movw	r14, r24
     564:	26 2f       	mov	r18, r22
     566:	97 2f       	mov	r25, r23
     568:	8a 01       	movw	r16, r20
     56a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZN7TwoWire12transmittingE>
     56e:	88 23       	and	r24, r24
     570:	91 f0       	breq	.+36     	; 0x596 <_ZN7TwoWire5writeEPKhj+0x40>
     572:	c6 2f       	mov	r28, r22
     574:	d7 2f       	mov	r29, r23
     576:	6e 01       	movw	r12, r28
     578:	c4 0e       	add	r12, r20
     57a:	d5 1e       	adc	r13, r21
     57c:	cc 15       	cp	r28, r12
     57e:	dd 05       	cpc	r29, r13
     580:	69 f0       	breq	.+26     	; 0x59c <_ZN7TwoWire5writeEPKhj+0x46>
     582:	69 91       	ld	r22, Y+
     584:	d7 01       	movw	r26, r14
     586:	ed 91       	ld	r30, X+
     588:	fc 91       	ld	r31, X
     58a:	01 90       	ld	r0, Z+
     58c:	f0 81       	ld	r31, Z
     58e:	e0 2d       	mov	r30, r0
     590:	c7 01       	movw	r24, r14
     592:	09 95       	icall
     594:	f3 cf       	rjmp	.-26     	; 0x57c <_ZN7TwoWire5writeEPKhj+0x26>
     596:	64 2f       	mov	r22, r20
     598:	82 2f       	mov	r24, r18
     59a:	5e de       	rcall	.-836    	; 0x258 <twi_transmit>
     59c:	c8 01       	movw	r24, r16
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	e8 e0       	ldi	r30, 0x08	; 8
     5a4:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x14>

000005a8 <_ZN7TwoWire5writeEh>:
     5a8:	a1 e0       	ldi	r26, 0x01	; 1
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	ea ed       	ldi	r30, 0xDA	; 218
     5ae:	f2 e0       	ldi	r31, 0x02	; 2
     5b0:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x20>
     5b4:	69 83       	std	Y+1, r22	; 0x01
     5b6:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZN7TwoWire12transmittingE>
     5ba:	22 23       	and	r18, r18
     5bc:	d1 f0       	breq	.+52     	; 0x5f2 <_ZN7TwoWire5writeEh+0x4a>
     5be:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <_ZN7TwoWire14txBufferLengthE>
     5c2:	20 32       	cpi	r18, 0x20	; 32
     5c4:	40 f0       	brcs	.+16     	; 0x5d6 <_ZN7TwoWire5writeEh+0x2e>
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	33 83       	std	Z+3, r19	; 0x03
     5ce:	22 83       	std	Z+2, r18	; 0x02
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	14 c0       	rjmp	.+40     	; 0x5fe <_ZN7TwoWire5writeEh+0x56>
     5d6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZN7TwoWire13txBufferIndexE>
     5da:	e8 2f       	mov	r30, r24
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e5 5f       	subi	r30, 0xF5	; 245
     5e0:	fd 4f       	sbci	r31, 0xFD	; 253
     5e2:	99 81       	ldd	r25, Y+1	; 0x01
     5e4:	90 83       	st	Z, r25
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZN7TwoWire13txBufferIndexE>
     5ec:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_ZN7TwoWire14txBufferLengthE>
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <_ZN7TwoWire5writeEh+0x52>
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	2f de       	rcall	.-930    	; 0x258 <twi_transmit>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	21 96       	adiw	r28, 0x01	; 1
     600:	e2 e0       	ldi	r30, 0x02	; 2
     602:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x20>

00000606 <_ZN7TwoWireC1Ev>:
     606:	fc 01       	movw	r30, r24
     608:	13 82       	std	Z+3, r1	; 0x03
     60a:	12 82       	std	Z+2, r1	; 0x02
     60c:	88 ee       	ldi	r24, 0xE8	; 232
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	91 83       	std	Z+1, r25	; 0x01
     622:	80 83       	st	Z, r24
     624:	08 95       	ret

00000626 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     626:	8c ef       	ldi	r24, 0xFC	; 252
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	ed cf       	rjmp	.-38     	; 0x606 <_ZN7TwoWireC1Ev>
     62c:	08 95       	ret

0000062e <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     650:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <_ZN14SoftwareSerial13active_objectE>
     654:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <_ZN14SoftwareSerial13active_objectE+0x1>
     658:	30 97       	sbiw	r30, 0x00	; 0
     65a:	09 f4       	brne	.+2      	; 0x65e <__vector_3+0x30>
     65c:	51 c0       	rjmp	.+162    	; 0x700 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     65e:	96 8d       	ldd	r25, Z+30	; 0x1e
     660:	a6 85       	ldd	r26, Z+14	; 0x0e
     662:	b7 85       	ldd	r27, Z+15	; 0x0f
     664:	85 85       	ldd	r24, Z+13	; 0x0d
     666:	91 ff       	sbrs	r25, 1
     668:	04 c0       	rjmp	.+8      	; 0x672 <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     66a:	9c 91       	ld	r25, X
     66c:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     66e:	29 f4       	brne	.+10     	; 0x67a <__vector_3+0x4c>
     670:	47 c0       	rjmp	.+142    	; 0x700 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     672:	9c 91       	ld	r25, X
     674:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     676:	09 f0       	breq	.+2      	; 0x67a <__vector_3+0x4c>
     678:	43 c0       	rjmp	.+134    	; 0x700 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     67a:	a3 89       	ldd	r26, Z+19	; 0x13
     67c:	b4 89       	ldd	r27, Z+20	; 0x14
     67e:	9c 91       	ld	r25, X
     680:	85 89       	ldd	r24, Z+21	; 0x15
     682:	80 95       	com	r24
     684:	89 23       	and	r24, r25
     686:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     688:	86 89       	ldd	r24, Z+22	; 0x16
     68a:	97 89       	ldd	r25, Z+23	; 0x17
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     690:	60 8d       	ldd	r22, Z+24	; 0x18
     692:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     694:	a6 85       	ldd	r26, Z+14	; 0x0e
     696:	b7 85       	ldd	r27, Z+15	; 0x0f
     698:	55 85       	ldd	r21, Z+13	; 0x0d
     69a:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	cb 01       	movw	r24, r22
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     6a4:	82 2f       	mov	r24, r18
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	95 95       	asr	r25
     6aa:	87 95       	ror	r24
     6ac:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     6ae:	4c 91       	ld	r20, X
     6b0:	45 23       	and	r20, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_3+0x88>
        d |= 0x80;
     6b4:	20 68       	ori	r18, 0x80	; 128
     6b6:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     6b8:	91 f7       	brne	.-28     	; 0x69e <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     6ba:	86 8d       	ldd	r24, Z+30	; 0x1e
     6bc:	81 fd       	sbrc	r24, 1
      d = ~d;
     6be:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     6c0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	8f 73       	andi	r24, 0x3F	; 63
     6ca:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
     6cc:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <_ZN14SoftwareSerial20_receive_buffer_headE>
     6d0:	38 17       	cp	r19, r24
     6d2:	49 f0       	breq	.+18     	; 0x6e6 <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     6d4:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	a1 5b       	subi	r26, 0xB1	; 177
     6dc:	bd 4f       	sbci	r27, 0xFD	; 253
     6de:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
     6e0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     6e6:	86 8d       	ldd	r24, Z+30	; 0x1e
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	86 8f       	std	Z+30, r24	; 0x1e
     6ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ee:	93 8d       	ldd	r25, Z+27	; 0x1b
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     6f4:	a3 89       	ldd	r26, Z+19	; 0x13
     6f6:	b4 89       	ldd	r27, Z+20	; 0x14
     6f8:	9c 91       	ld	r25, X
     6fa:	85 89       	ldd	r24, Z+21	; 0x15
     6fc:	89 2b       	or	r24, r25
     6fe:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	bf 91       	pop	r27
     706:	af 91       	pop	r26
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	7f 91       	pop	r23
     70e:	6f 91       	pop	r22
     710:	5f 91       	pop	r21
     712:	4f 91       	pop	r20
     714:	3f 91       	pop	r19
     716:	2f 91       	pop	r18
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	8e 81       	ldd	r24, Y+6	; 0x06
     72c:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	8e 81       	ldd	r24, Y+6	; 0x06
     73c:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	8e 81       	ldd	r24, Y+6	; 0x06
     74c:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     750:	84 e6       	ldi	r24, 0x64	; 100
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <_ZN13LiquidCrystal10write4bitsEh>:
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e5 eb       	ldi	r30, 0xB5	; 181
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x14>
     76a:	7c 01       	movw	r14, r24
     76c:	6c 01       	movw	r12, r24
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	c8 0e       	add	r12, r24
     772:	d1 1c       	adc	r13, r1
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
     778:	06 2f       	mov	r16, r22
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	b8 01       	movw	r22, r16
     77e:	0c 2e       	mov	r0, r28
     780:	02 c0       	rjmp	.+4      	; 0x786 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     782:	75 95       	asr	r23
     784:	67 95       	ror	r22
     786:	0a 94       	dec	r0
     788:	e2 f7       	brpl	.-8      	; 0x782 <_ZN13LiquidCrystal10write4bitsEh+0x24>
     78a:	61 70       	andi	r22, 0x01	; 1
     78c:	f6 01       	movw	r30, r12
     78e:	81 91       	ld	r24, Z+
     790:	6f 01       	movw	r12, r30
     792:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     796:	21 96       	adiw	r28, 0x01	; 1
     798:	c4 30       	cpi	r28, 0x04	; 4
     79a:	d1 05       	cpc	r29, r1
     79c:	79 f7       	brne	.-34     	; 0x77c <_ZN13LiquidCrystal10write4bitsEh+0x1e>
     79e:	c7 01       	movw	r24, r14
     7a0:	c0 df       	rcall	.-128    	; 0x722 <_ZN13LiquidCrystal11pulseEnableEv>
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	e8 e0       	ldi	r30, 0x08	; 8
     7a8:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x14>

000007ac <_ZN13LiquidCrystal10write8bitsEh>:
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ec ed       	ldi	r30, 0xDC	; 220
     7b2:	f3 e0       	ldi	r31, 0x03	; 3
     7b4:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x14>
     7b8:	7c 01       	movw	r14, r24
     7ba:	6c 01       	movw	r12, r24
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	c8 0e       	add	r12, r24
     7c0:	d1 1c       	adc	r13, r1
     7c2:	c0 e0       	ldi	r28, 0x00	; 0
     7c4:	d0 e0       	ldi	r29, 0x00	; 0
     7c6:	06 2f       	mov	r16, r22
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	b8 01       	movw	r22, r16
     7cc:	0c 2e       	mov	r0, r28
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     7d0:	75 95       	asr	r23
     7d2:	67 95       	ror	r22
     7d4:	0a 94       	dec	r0
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <_ZN13LiquidCrystal10write8bitsEh+0x24>
     7d8:	61 70       	andi	r22, 0x01	; 1
     7da:	f6 01       	movw	r30, r12
     7dc:	81 91       	ld	r24, Z+
     7de:	6f 01       	movw	r12, r30
     7e0:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     7e4:	21 96       	adiw	r28, 0x01	; 1
     7e6:	c8 30       	cpi	r28, 0x08	; 8
     7e8:	d1 05       	cpc	r29, r1
     7ea:	79 f7       	brne	.-34     	; 0x7ca <_ZN13LiquidCrystal10write8bitsEh+0x1e>
     7ec:	c7 01       	movw	r24, r14
     7ee:	99 df       	rcall	.-206    	; 0x722 <_ZN13LiquidCrystal11pulseEnableEv>
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	e8 e0       	ldi	r30, 0x08	; 8
     7f6:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x14>

000007fa <_ZN13LiquidCrystal4sendEhh>:
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
     802:	16 2f       	mov	r17, r22
     804:	64 2f       	mov	r22, r20
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	8f 3f       	cpi	r24, 0xFF	; 255
     810:	19 f0       	breq	.+6      	; 0x818 <_ZN13LiquidCrystal4sendEhh+0x1e>
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     818:	8f 85       	ldd	r24, Y+15	; 0x0f
     81a:	61 2f       	mov	r22, r17
     81c:	84 ff       	sbrs	r24, 4
     81e:	03 c0       	rjmp	.+6      	; 0x826 <_ZN13LiquidCrystal4sendEhh+0x2c>
     820:	ce 01       	movw	r24, r28
     822:	c4 df       	rcall	.-120    	; 0x7ac <_ZN13LiquidCrystal10write8bitsEh>
     824:	0b c0       	rjmp	.+22     	; 0x83c <_ZN13LiquidCrystal4sendEhh+0x42>
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	75 95       	asr	r23
     82c:	67 95       	ror	r22
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <_ZN13LiquidCrystal4sendEhh+0x30>
     832:	ce 01       	movw	r24, r28
     834:	94 df       	rcall	.-216    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     836:	61 2f       	mov	r22, r17
     838:	ce 01       	movw	r24, r28
     83a:	91 df       	rcall	.-222    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	08 95       	ret

00000844 <_ZN13LiquidCrystal7commandEh>:
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	d9 cf       	rjmp	.-78     	; 0x7fa <_ZN13LiquidCrystal4sendEhh>
     848:	08 95       	ret

0000084a <_ZN13LiquidCrystal5clearEv>:
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	fb df       	rcall	.-10     	; 0x844 <_ZN13LiquidCrystal7commandEh>
     84e:	80 ed       	ldi	r24, 0xD0	; 208
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	0c 94 49 18 	jmp	0x3092	; 0x3092 <delayMicroseconds>
     856:	08 95       	ret

00000858 <_ZN13LiquidCrystal9setCursorEhh>:
     858:	fc 01       	movw	r30, r24
     85a:	44 30       	cpi	r20, 0x04	; 4
     85c:	08 f0       	brcs	.+2      	; 0x860 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     85e:	43 e0       	ldi	r20, 0x03	; 3
     860:	83 89       	ldd	r24, Z+19	; 0x13
     862:	48 17       	cp	r20, r24
     864:	10 f0       	brcs	.+4      	; 0x86a <_ZN13LiquidCrystal9setCursorEhh+0x12>
     866:	4f ef       	ldi	r20, 0xFF	; 255
     868:	48 0f       	add	r20, r24
     86a:	df 01       	movw	r26, r30
     86c:	a4 0f       	add	r26, r20
     86e:	b1 1d       	adc	r27, r1
     870:	54 96       	adiw	r26, 0x14	; 20
     872:	9c 91       	ld	r25, X
     874:	69 0f       	add	r22, r25
     876:	60 68       	ori	r22, 0x80	; 128
     878:	cf 01       	movw	r24, r30
     87a:	e4 cf       	rjmp	.-56     	; 0x844 <_ZN13LiquidCrystal7commandEh>
     87c:	08 95       	ret

0000087e <_ZN13LiquidCrystal7displayEv>:
     87e:	fc 01       	movw	r30, r24
     880:	60 89       	ldd	r22, Z+16	; 0x10
     882:	26 2f       	mov	r18, r22
     884:	24 60       	ori	r18, 0x04	; 4
     886:	20 8b       	std	Z+16, r18	; 0x10
     888:	6c 60       	ori	r22, 0x0C	; 12
     88a:	dc cf       	rjmp	.-72     	; 0x844 <_ZN13LiquidCrystal7commandEh>
     88c:	08 95       	ret

0000088e <_ZN13LiquidCrystal5beginEhhh>:
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	ec 01       	movw	r28, r24
     89c:	42 30       	cpi	r20, 0x02	; 2
     89e:	18 f0       	brcs	.+6      	; 0x8a6 <_ZN13LiquidCrystal5beginEhhh+0x18>
     8a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a2:	88 60       	ori	r24, 0x08	; 8
     8a4:	8f 87       	std	Y+15, r24	; 0x0f
     8a6:	4b 8b       	std	Y+19, r20	; 0x13
     8a8:	1c 8a       	std	Y+20, r1	; 0x14
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	8d 8b       	std	Y+21, r24	; 0x15
     8ae:	6e 8b       	std	Y+22, r22	; 0x16
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	60 5c       	subi	r22, 0xC0	; 192
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	6f 8b       	std	Y+23, r22	; 0x17
     8b8:	22 23       	and	r18, r18
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <_ZN13LiquidCrystal5beginEhhh+0x38>
     8bc:	41 30       	cpi	r20, 0x01	; 1
     8be:	19 f4       	brne	.+6      	; 0x8c6 <_ZN13LiquidCrystal5beginEhhh+0x38>
     8c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c2:	84 60       	ori	r24, 0x04	; 4
     8c4:	8f 87       	std	Y+15, r24	; 0x0f
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	0e 94 d5 18 	call	0x31aa	; 0x31aa <pinMode>
     8ce:	8d 81       	ldd	r24, Y+5	; 0x05
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	19 f0       	breq	.+6      	; 0x8da <_ZN13LiquidCrystal5beginEhhh+0x4c>
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <pinMode>
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	8e 81       	ldd	r24, Y+6	; 0x06
     8de:	0e 94 d5 18 	call	0x31aa	; 0x31aa <pinMode>
     8e2:	7e 01       	movw	r14, r28
     8e4:	87 e0       	ldi	r24, 0x07	; 7
     8e6:	e8 0e       	add	r14, r24
     8e8:	f1 1c       	adc	r15, r1
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f0:	84 fd       	sbrc	r24, 4
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <_ZN13LiquidCrystal5beginEhhh+0x6c>
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <_ZN13LiquidCrystal5beginEhhh+0x70>
     8fa:	88 e0       	ldi	r24, 0x08	; 8
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	08 17       	cp	r16, r24
     900:	19 07       	cpc	r17, r25
     902:	4c f4       	brge	.+18     	; 0x916 <__stack+0x17>
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	f7 01       	movw	r30, r14
     908:	81 91       	ld	r24, Z+
     90a:	7f 01       	movw	r14, r30
     90c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <pinMode>
     910:	0f 5f       	subi	r16, 0xFF	; 255
     912:	1f 4f       	sbci	r17, 0xFF	; 255
     914:	ec cf       	rjmp	.-40     	; 0x8ee <_ZN13LiquidCrystal5beginEhhh+0x60>
     916:	80 e5       	ldi	r24, 0x50	; 80
     918:	93 ec       	ldi	r25, 0xC3	; 195
     91a:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	8c 81       	ldd	r24, Y+4	; 0x04
     922:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	8e 81       	ldd	r24, Y+6	; 0x06
     92a:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	19 f0       	breq	.+6      	; 0x93a <__stack+0x3b>
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
     93a:	6f 85       	ldd	r22, Y+15	; 0x0f
     93c:	64 fd       	sbrc	r22, 4
     93e:	19 c0       	rjmp	.+50     	; 0x972 <__stack+0x73>
     940:	63 e0       	ldi	r22, 0x03	; 3
     942:	ce 01       	movw	r24, r28
     944:	0c df       	rcall	.-488    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     946:	84 e9       	ldi	r24, 0x94	; 148
     948:	91 e1       	ldi	r25, 0x11	; 17
     94a:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     94e:	63 e0       	ldi	r22, 0x03	; 3
     950:	ce 01       	movw	r24, r28
     952:	05 df       	rcall	.-502    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     954:	84 e9       	ldi	r24, 0x94	; 148
     956:	91 e1       	ldi	r25, 0x11	; 17
     958:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     95c:	63 e0       	ldi	r22, 0x03	; 3
     95e:	ce 01       	movw	r24, r28
     960:	fe de       	rcall	.-516    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     962:	86 e9       	ldi	r24, 0x96	; 150
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	ce 01       	movw	r24, r28
     96e:	f7 de       	rcall	.-530    	; 0x75e <_ZN13LiquidCrystal10write4bitsEh>
     970:	13 c0       	rjmp	.+38     	; 0x998 <__stack+0x99>
     972:	60 62       	ori	r22, 0x20	; 32
     974:	ce 01       	movw	r24, r28
     976:	66 df       	rcall	.-308    	; 0x844 <_ZN13LiquidCrystal7commandEh>
     978:	84 e9       	ldi	r24, 0x94	; 148
     97a:	91 e1       	ldi	r25, 0x11	; 17
     97c:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     980:	6f 85       	ldd	r22, Y+15	; 0x0f
     982:	60 62       	ori	r22, 0x20	; 32
     984:	ce 01       	movw	r24, r28
     986:	5e df       	rcall	.-324    	; 0x844 <_ZN13LiquidCrystal7commandEh>
     988:	86 e9       	ldi	r24, 0x96	; 150
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 49 18 	call	0x3092	; 0x3092 <delayMicroseconds>
     990:	6f 85       	ldd	r22, Y+15	; 0x0f
     992:	60 62       	ori	r22, 0x20	; 32
     994:	ce 01       	movw	r24, r28
     996:	56 df       	rcall	.-340    	; 0x844 <_ZN13LiquidCrystal7commandEh>
     998:	6f 85       	ldd	r22, Y+15	; 0x0f
     99a:	60 62       	ori	r22, 0x20	; 32
     99c:	ce 01       	movw	r24, r28
     99e:	52 df       	rcall	.-348    	; 0x844 <_ZN13LiquidCrystal7commandEh>
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	88 8b       	std	Y+16, r24	; 0x10
     9a4:	ce 01       	movw	r24, r28
     9a6:	6b df       	rcall	.-298    	; 0x87e <_ZN13LiquidCrystal7displayEv>
     9a8:	ce 01       	movw	r24, r28
     9aa:	4f df       	rcall	.-354    	; 0x84a <_ZN13LiquidCrystal5clearEv>
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	89 8b       	std	Y+17, r24	; 0x11
     9b0:	66 e0       	ldi	r22, 0x06	; 6
     9b2:	ce 01       	movw	r24, r28
     9b4:	47 df       	rcall	.-370    	; 0x844 <_ZN13LiquidCrystal7commandEh>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	e6 e0       	ldi	r30, 0x06	; 6
     9bc:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__+0x18>

000009c0 <_ZN13LiquidCrystalC1Ehhhhhh>:
     9c0:	cf 92       	push	r12
     9c2:	ef 92       	push	r14
     9c4:	0f 93       	push	r16
     9c6:	fc 01       	movw	r30, r24
     9c8:	13 82       	std	Z+3, r1	; 0x03
     9ca:	12 82       	std	Z+2, r1	; 0x02
     9cc:	8d e1       	ldi	r24, 0x1D	; 29
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
     9d4:	64 83       	std	Z+4, r22	; 0x04
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	85 83       	std	Z+5, r24	; 0x05
     9da:	46 83       	std	Z+6, r20	; 0x06
     9dc:	27 83       	std	Z+7, r18	; 0x07
     9de:	00 87       	std	Z+8, r16	; 0x08
     9e0:	e1 86       	std	Z+9, r14	; 0x09
     9e2:	c2 86       	std	Z+10, r12	; 0x0a
     9e4:	13 86       	std	Z+11, r1	; 0x0b
     9e6:	14 86       	std	Z+12, r1	; 0x0c
     9e8:	15 86       	std	Z+13, r1	; 0x0d
     9ea:	16 86       	std	Z+14, r1	; 0x0e
     9ec:	17 86       	std	Z+15, r1	; 0x0f
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	60 e1       	ldi	r22, 0x10	; 16
     9f4:	cf 01       	movw	r24, r30
     9f6:	4b df       	rcall	.-362    	; 0x88e <_ZN13LiquidCrystal5beginEhhh>
     9f8:	0f 91       	pop	r16
     9fa:	ef 90       	pop	r14
     9fc:	cf 90       	pop	r12
     9fe:	08 95       	ret

00000a00 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	fb de       	rcall	.-522    	; 0x7fa <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	08 95       	ret

00000a0a <_ZN12CmdMessenger4initER6Streamccc>:
{
	if (startCommand) {
		comms->print(field_separator);
		printEsc(arg);
	}
}
     a0a:	0f 93       	push	r16
     a0c:	fc 01       	movw	r30, r24
     a0e:	dc 01       	movw	r26, r24
     a10:	aa 5a       	subi	r26, 0xAA	; 170
     a12:	bd 4f       	sbci	r27, 0xFD	; 253
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	1c 92       	st	X, r1
     a18:	1e 92       	st	-X, r1
     a1a:	15 97       	sbiw	r26, 0x05	; 5
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	7c 93       	st	X, r23
     a20:	6e 93       	st	-X, r22
     a22:	10 86       	std	Z+8, r1	; 0x08
     a24:	13 96       	adiw	r26, 0x03	; 3
     a26:	4c 93       	st	X, r20
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	2c 93       	st	X, r18
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	0c 93       	st	X, r16
     a30:	80 e4       	ldi	r24, 0x40	; 64
     a32:	83 83       	std	Z+3, r24	; 0x03
     a34:	8f e3       	ldi	r24, 0x3F	; 63
     a36:	84 83       	std	Z+4, r24	; 0x04
     a38:	12 82       	std	Z+2, r1	; 0x02
     a3a:	19 97       	sbiw	r26, 0x09	; 9
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	1c 92       	st	X, r1
     a40:	1e 92       	st	-X, r1
     a42:	12 96       	adiw	r26, 0x02	; 2
     a44:	11 96       	adiw	r26, 0x01	; 1
     a46:	1c 92       	st	X, r1
     a48:	1e 92       	st	-X, r1
     a4a:	14 97       	sbiw	r26, 0x04	; 4
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	1e 96       	adiw	r26, 0x0e	; 14
     a52:	cf 01       	movw	r24, r30
     a54:	84 54       	subi	r24, 0x44	; 68
     a56:	9d 4f       	sbci	r25, 0xFD	; 253
     a58:	1d 92       	st	X+, r1
     a5a:	1d 92       	st	X+, r1
     a5c:	a8 17       	cp	r26, r24
     a5e:	b9 07       	cpc	r27, r25
     a60:	d9 f7       	brne	.-10     	; 0xa58 <_ZN12CmdMessenger4initER6Streamccc+0x4e>
     a62:	17 82       	std	Z+7, r1	; 0x07
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <_ZN12CmdMessengerC1ER6Streamccc>:
     a68:	0f 93       	push	r16
     a6a:	cf df       	rcall	.-98     	; 0xa0a <_ZN12CmdMessenger4initER6Streamccc>
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <_ZN12CmdMessenger6attachEPFvvE>:
     a70:	fc 01       	movw	r30, r24
     a72:	ea 5a       	subi	r30, 0xAA	; 170
     a74:	fd 4f       	sbci	r31, 0xFD	; 253
     a76:	71 83       	std	Z+1, r23	; 0x01
     a78:	60 83       	st	Z, r22
     a7a:	08 95       	ret

00000a7c <_ZN12CmdMessenger6attachEhPFvvE>:
     a7c:	62 33       	cpi	r22, 0x32	; 50
     a7e:	50 f4       	brcc	.+20     	; 0xa94 <_ZN12CmdMessenger6attachEhPFvvE+0x18>
     a80:	9c 01       	movw	r18, r24
     a82:	26 0f       	add	r18, r22
     a84:	31 1d       	adc	r19, r1
     a86:	26 0f       	add	r18, r22
     a88:	31 1d       	adc	r19, r1
     a8a:	f9 01       	movw	r30, r18
     a8c:	e8 5a       	subi	r30, 0xA8	; 168
     a8e:	fd 4f       	sbci	r31, 0xFD	; 253
     a90:	51 83       	std	Z+1, r21	; 0x01
     a92:	40 83       	st	Z, r20
     a94:	08 95       	ret

00000a96 <_ZN12CmdMessenger12sendCmdStartEh>:
     a96:	fc 01       	movw	r30, r24
     a98:	20 81       	ld	r18, Z
     a9a:	21 11       	cpse	r18, r1
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <_ZN12CmdMessenger12sendCmdStartEh+0x1e>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 83       	st	Z, r24
     aa2:	87 83       	std	Z+7, r24	; 0x07
     aa4:	ef 5a       	subi	r30, 0xAF	; 175
     aa6:	fd 4f       	sbci	r31, 0xFD	; 253
     aa8:	4a e0       	ldi	r20, 0x0A	; 10
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <_ZN5Print5printEhi>
     ab4:	08 95       	ret

00000ab6 <_ZN12CmdMessenger9isEscapedEPccS0_>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	dc 01       	movw	r26, r24
     abc:	f9 01       	movw	r30, r18
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	80 81       	ld	r24, Z
     ac2:	84 13       	cpse	r24, r20
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	eb 01       	movw	r28, r22
     ac8:	88 81       	ld	r24, Y
     aca:	80 83       	st	Z, r24
     acc:	ab 5a       	subi	r26, 0xAB	; 171
     ace:	bd 4f       	sbci	r27, 0xFD	; 253
     ad0:	2c 91       	ld	r18, X
     ad2:	82 13       	cpse	r24, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <_ZN12CmdMessenger9isEscapedEPccS0_+0x24>
     ad6:	91 11       	cpse	r25, r1
     ad8:	10 82       	st	Z, r1
     ada:	89 2f       	mov	r24, r25
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <_ZN12CmdMessenger8findNextEPcc>:
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__prologue_saves__+0x8>
     aee:	ec 01       	movw	r28, r24
     af0:	7b 01       	movw	r14, r22
     af2:	1d 82       	std	Y+5, r1	; 0x05
     af4:	8b 01       	movw	r16, r22
     af6:	3c 01       	movw	r6, r24
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	68 0e       	add	r6, r24
     afc:	71 1c       	adc	r7, r1
     afe:	5e 01       	movw	r10, r28
     b00:	eb ea       	ldi	r30, 0xAB	; 171
     b02:	ae 1a       	sub	r10, r30
     b04:	ed ef       	ldi	r30, 0xFD	; 253
     b06:	be 0a       	sbc	r11, r30
     b08:	4e 01       	movw	r8, r28
     b0a:	fc ea       	ldi	r31, 0xAC	; 172
     b0c:	8f 1a       	sub	r8, r31
     b0e:	fd ef       	ldi	r31, 0xFD	; 253
     b10:	9f 0a       	sbc	r9, r31
     b12:	68 01       	movw	r12, r16
     b14:	ce 18       	sub	r12, r14
     b16:	df 08       	sbc	r13, r15
     b18:	93 01       	movw	r18, r6
     b1a:	f5 01       	movw	r30, r10
     b1c:	40 81       	ld	r20, Z
     b1e:	b8 01       	movw	r22, r16
     b20:	ce 01       	movw	r24, r28
     b22:	c9 df       	rcall	.-110    	; 0xab6 <_ZN12CmdMessenger9isEscapedEPccS0_>
     b24:	f8 01       	movw	r30, r16
     b26:	91 91       	ld	r25, Z+
     b28:	8f 01       	movw	r16, r30
     b2a:	91 11       	cpse	r25, r1
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <_ZN12CmdMessenger8findNextEPcc+0x50>
     b2e:	88 23       	and	r24, r24
     b30:	31 f0       	breq	.+12     	; 0xb3e <_ZN12CmdMessenger8findNextEPcc+0x5c>
     b32:	f4 01       	movw	r30, r8
     b34:	20 81       	ld	r18, Z
     b36:	92 13       	cpse	r25, r18
     b38:	ec cf       	rjmp	.-40     	; 0xb12 <_ZN12CmdMessenger8findNextEPcc+0x30>
     b3a:	81 11       	cpse	r24, r1
     b3c:	ea cf       	rjmp	.-44     	; 0xb12 <_ZN12CmdMessenger8findNextEPcc+0x30>
     b3e:	c6 01       	movw	r24, r12
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	ee e0       	ldi	r30, 0x0E	; 14
     b46:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__epilogue_restores__+0x8>

00000b4a <_ZN12CmdMessenger7split_rEPccPS0_>:
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	eb ea       	ldi	r30, 0xAB	; 171
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__+0x12>
     b56:	7c 01       	movw	r14, r24
     b58:	b4 2e       	mov	r11, r20
     b5a:	69 01       	movw	r12, r18
     b5c:	61 15       	cp	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	19 f4       	brne	.+6      	; 0xb68 <_ZN12CmdMessenger7split_rEPccPS0_+0x1e>
     b62:	d9 01       	movw	r26, r18
     b64:	6d 91       	ld	r22, X+
     b66:	7c 91       	ld	r23, X
     b68:	eb 01       	movw	r28, r22
     b6a:	8e 01       	movw	r16, r28
     b6c:	4b 2d       	mov	r20, r11
     b6e:	be 01       	movw	r22, r28
     b70:	c7 01       	movw	r24, r14
     b72:	b7 df       	rcall	.-146    	; 0xae2 <_ZN12CmdMessenger8findNextEPcc>
     b74:	89 2b       	or	r24, r25
     b76:	29 f4       	brne	.+10     	; 0xb82 <_ZN12CmdMessenger7split_rEPccPS0_+0x38>
     b78:	21 96       	adiw	r28, 0x01	; 1
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 81       	ld	r24, Z
     b7e:	81 11       	cpse	r24, r1
     b80:	f4 cf       	rjmp	.-24     	; 0xb6a <_ZN12CmdMessenger7split_rEPccPS0_+0x20>
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	88 23       	and	r24, r24
     b88:	89 f0       	breq	.+34     	; 0xbac <_ZN12CmdMessenger7split_rEPccPS0_+0x62>
     b8a:	4b 2d       	mov	r20, r11
     b8c:	b8 01       	movw	r22, r16
     b8e:	c7 01       	movw	r24, r14
     b90:	a8 df       	rcall	.-176    	; 0xae2 <_ZN12CmdMessenger8findNextEPcc>
     b92:	f8 01       	movw	r30, r16
     b94:	e8 0f       	add	r30, r24
     b96:	f9 1f       	adc	r31, r25
     b98:	80 81       	ld	r24, Z
     b9a:	88 23       	and	r24, r24
     b9c:	11 f0       	breq	.+4      	; 0xba2 <_ZN12CmdMessenger7split_rEPccPS0_+0x58>
     b9e:	10 82       	st	Z, r1
     ba0:	31 96       	adiw	r30, 0x01	; 1
     ba2:	d6 01       	movw	r26, r12
     ba4:	ed 93       	st	X+, r30
     ba6:	fc 93       	st	X, r31
     ba8:	c8 01       	movw	r24, r16
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_ZN12CmdMessenger7split_rEPccPS0_+0x66>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	e9 e0       	ldi	r30, 0x09	; 9
     bb6:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__+0x12>

00000bba <_ZN12CmdMessenger4nextEv>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	fc 01       	movw	r30, r24
     bc4:	e7 5b       	subi	r30, 0xB7	; 183
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	20 81       	ld	r18, Z
     bca:	22 23       	and	r18, r18
     bcc:	31 f1       	breq	.+76     	; 0xc1a <_ZN12CmdMessenger4nextEv+0x60>
     bce:	21 30       	cpi	r18, 0x01	; 1
     bd0:	31 f4       	brne	.+12     	; 0xbde <_ZN12CmdMessenger4nextEv+0x24>
     bd2:	bc 01       	movw	r22, r24
     bd4:	67 5f       	subi	r22, 0xF7	; 247
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	20 83       	st	Z, r18
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <_ZN12CmdMessenger4nextEv+0x28>
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	ec 01       	movw	r28, r24
     be4:	c6 5b       	subi	r28, 0xB6	; 182
     be6:	dd 4f       	sbci	r29, 0xFD	; 253
     be8:	28 81       	ld	r18, Y
     bea:	8c 01       	movw	r16, r24
     bec:	04 5b       	subi	r16, 0xB4	; 180
     bee:	1d 4f       	sbci	r17, 0xFD	; 253
     bf0:	22 23       	and	r18, r18
     bf2:	59 f0       	breq	.+22     	; 0xc0a <_ZN12CmdMessenger4nextEv+0x50>
     bf4:	9c 01       	movw	r18, r24
     bf6:	22 5b       	subi	r18, 0xB2	; 178
     bf8:	3d 4f       	sbci	r19, 0xFD	; 253
     bfa:	fc 01       	movw	r30, r24
     bfc:	ec 5a       	subi	r30, 0xAC	; 172
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	40 81       	ld	r20, Z
     c02:	a3 df       	rcall	.-186    	; 0xb4a <_ZN12CmdMessenger7split_rEPccPS0_>
     c04:	f8 01       	movw	r30, r16
     c06:	91 83       	std	Z+1, r25	; 0x01
     c08:	80 83       	st	Z, r24
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	89 2b       	or	r24, r25
     c12:	19 f0       	breq	.+6      	; 0xc1a <_ZN12CmdMessenger4nextEv+0x60>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	88 83       	st	Y, r24
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <_ZN12CmdMessenger4nextEv+0x62>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <_ZN12CmdMessenger12readInt16ArgEv>:
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	c6 df       	rcall	.-116    	; 0xbba <_ZN12CmdMessenger4nextEv>
     c2e:	fe 01       	movw	r30, r28
     c30:	e5 5b       	subi	r30, 0xB5	; 181
     c32:	fd 4f       	sbci	r31, 0xFD	; 253
     c34:	88 23       	and	r24, r24
     c36:	69 f0       	breq	.+26     	; 0xc52 <_ZN12CmdMessenger12readInt16ArgEv+0x2c>
     c38:	de 01       	movw	r26, r28
     c3a:	a6 5b       	subi	r26, 0xB6	; 182
     c3c:	bd 4f       	sbci	r27, 0xFD	; 253
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	8c 93       	st	X, r24
     c42:	80 83       	st	Z, r24
     c44:	c4 5b       	subi	r28, 0xB4	; 180
     c46:	dd 4f       	sbci	r29, 0xFD	; 253
     c48:	88 81       	ld	r24, Y
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	0e 94 80 1c 	call	0x3900	; 0x3900 <atoi>
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <_ZN12CmdMessenger12readInt16ArgEv+0x32>
     c52:	10 82       	st	Z, r1
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <_ZN12CmdMessenger16feedinSerialDataEv>:
     c5e:	ad e0       	ldi	r26, 0x0D	; 13
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__>
     c6a:	8c 01       	movw	r16, r24
     c6c:	7c 01       	movw	r14, r24
     c6e:	2f ea       	ldi	r18, 0xAF	; 175
     c70:	e2 1a       	sub	r14, r18
     c72:	2d ef       	ldi	r18, 0xFD	; 253
     c74:	f2 0a       	sbc	r15, r18
     c76:	5c 01       	movw	r10, r24
     c78:	87 eb       	ldi	r24, 0xB7	; 183
     c7a:	a8 1a       	sub	r10, r24
     c7c:	8d ef       	ldi	r24, 0xFD	; 253
     c7e:	b8 0a       	sbc	r11, r24
     c80:	18 01       	movw	r2, r16
     c82:	9b ea       	ldi	r25, 0xAB	; 171
     c84:	29 1a       	sub	r2, r25
     c86:	9d ef       	ldi	r25, 0xFD	; 253
     c88:	39 0a       	sbc	r3, r25
     c8a:	d8 01       	movw	r26, r16
     c8c:	ad 5a       	subi	r26, 0xAD	; 173
     c8e:	bd 4f       	sbci	r27, 0xFD	; 253
     c90:	b9 87       	std	Y+9, r27	; 0x09
     c92:	a8 87       	std	Y+8, r26	; 0x08
     c94:	f8 01       	movw	r30, r16
     c96:	ea 5a       	subi	r30, 0xAA	; 170
     c98:	fd 4f       	sbci	r31, 0xFD	; 253
     c9a:	fb 87       	std	Y+11, r31	; 0x0b
     c9c:	ea 87       	std	Y+10, r30	; 0x0a
     c9e:	c8 01       	movw	r24, r16
     ca0:	85 5b       	subi	r24, 0xB5	; 181
     ca2:	9d 4f       	sbci	r25, 0xFD	; 253
     ca4:	9d 87       	std	Y+13, r25	; 0x0d
     ca6:	8c 87       	std	Y+12, r24	; 0x0c
     ca8:	f8 01       	movw	r30, r16
     caa:	87 81       	ldd	r24, Z+7	; 0x07
     cac:	81 11       	cpse	r24, r1
     cae:	b4 c0       	rjmp	.+360    	; 0xe18 <_ZN12CmdMessenger16feedinSerialDataEv+0x1ba>
     cb0:	d7 01       	movw	r26, r14
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	dc 01       	movw	r26, r24
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	04 80       	ldd	r0, Z+4	; 0x04
     cbe:	f5 81       	ldd	r31, Z+5	; 0x05
     cc0:	e0 2d       	mov	r30, r0
     cc2:	09 95       	icall
     cc4:	89 2b       	or	r24, r25
     cc6:	09 f4       	brne	.+2      	; 0xcca <_ZN12CmdMessenger16feedinSerialDataEv+0x6c>
     cc8:	a7 c0       	rjmp	.+334    	; 0xe18 <_ZN12CmdMessenger16feedinSerialDataEv+0x1ba>
     cca:	f7 01       	movw	r30, r14
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	dc 01       	movw	r26, r24
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	04 80       	ldd	r0, Z+4	; 0x04
     cd8:	f5 81       	ldd	r31, Z+5	; 0x05
     cda:	e0 2d       	mov	r30, r0
     cdc:	09 95       	icall
     cde:	81 15       	cp	r24, r1
     ce0:	92 40       	sbci	r25, 0x02	; 2
     ce2:	0c f0       	brlt	.+2      	; 0xce6 <_ZN12CmdMessenger16feedinSerialDataEv+0x88>
     ce4:	95 c0       	rjmp	.+298    	; 0xe10 <_ZN12CmdMessenger16feedinSerialDataEv+0x1b2>
     ce6:	d7 01       	movw	r26, r14
     ce8:	8d 91       	ld	r24, X+
     cea:	9c 91       	ld	r25, X
     cec:	dc 01       	movw	r26, r24
     cee:	ed 91       	ld	r30, X+
     cf0:	fc 91       	ld	r31, X
     cf2:	04 80       	ldd	r0, Z+4	; 0x04
     cf4:	f5 81       	ldd	r31, Z+5	; 0x05
     cf6:	e0 2d       	mov	r30, r0
     cf8:	09 95       	icall
     cfa:	6c 01       	movw	r12, r24
     cfc:	a6 01       	movw	r20, r12
     cfe:	28 01       	movw	r4, r16
     d00:	b9 e4       	ldi	r27, 0x49	; 73
     d02:	4b 0e       	add	r4, r27
     d04:	51 1c       	adc	r5, r1
     d06:	b2 01       	movw	r22, r4
     d08:	f7 01       	movw	r30, r14
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <_ZN6Stream9readBytesEPcj>
     d12:	81 2c       	mov	r8, r1
     d14:	91 2c       	mov	r9, r1
     d16:	38 01       	movw	r6, r16
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	6f 0e       	add	r6, r31
     d1c:	71 1c       	adc	r7, r1
     d1e:	c8 01       	movw	r24, r16
     d20:	84 5b       	subi	r24, 0xB4	; 180
     d22:	9d 4f       	sbci	r25, 0xFD	; 253
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	d8 01       	movw	r26, r16
     d2a:	a2 5b       	subi	r26, 0xB2	; 178
     d2c:	bd 4f       	sbci	r27, 0xFD	; 253
     d2e:	bd 83       	std	Y+5, r27	; 0x05
     d30:	ac 83       	std	Y+4, r26	; 0x04
     d32:	f8 01       	movw	r30, r16
     d34:	e6 5b       	subi	r30, 0xB6	; 182
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	ff 83       	std	Y+7, r31	; 0x07
     d3a:	ee 83       	std	Y+6, r30	; 0x06
     d3c:	8c 14       	cp	r8, r12
     d3e:	9d 04       	cpc	r9, r13
     d40:	09 f4       	brne	.+2      	; 0xd44 <_ZN12CmdMessenger16feedinSerialDataEv+0xe6>
     d42:	b2 cf       	rjmp	.-156    	; 0xca8 <_ZN12CmdMessenger16feedinSerialDataEv+0x4a>
     d44:	d2 01       	movw	r26, r4
     d46:	8d 91       	ld	r24, X+
     d48:	2d 01       	movw	r4, r26
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	f5 01       	movw	r30, r10
     d4e:	10 82       	st	Z, r1
     d50:	93 01       	movw	r18, r6
     d52:	d1 01       	movw	r26, r2
     d54:	4c 91       	ld	r20, X
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	c8 01       	movw	r24, r16
     d5e:	ab de       	rcall	.-682    	; 0xab6 <_ZN12CmdMessenger9isEscapedEPccS0_>
     d60:	29 81       	ldd	r18, Y+1	; 0x01
     d62:	e8 85       	ldd	r30, Y+8	; 0x08
     d64:	f9 85       	ldd	r31, Y+9	; 0x09
     d66:	30 81       	ld	r19, Z
     d68:	d8 01       	movw	r26, r16
     d6a:	12 96       	adiw	r26, 0x02	; 2
     d6c:	9c 91       	ld	r25, X
     d6e:	12 97       	sbiw	r26, 0x02	; 2
     d70:	f8 01       	movw	r30, r16
     d72:	e9 0f       	add	r30, r25
     d74:	f1 1d       	adc	r31, r1
     d76:	23 13       	cpse	r18, r19
     d78:	19 c0       	rjmp	.+50     	; 0xdac <_ZN12CmdMessenger16feedinSerialDataEv+0x14e>
     d7a:	81 11       	cpse	r24, r1
     d7c:	17 c0       	rjmp	.+46     	; 0xdac <_ZN12CmdMessenger16feedinSerialDataEv+0x14e>
     d7e:	11 86       	std	Z+9, r1	; 0x09
     d80:	99 23       	and	r25, r25
     d82:	29 f0       	breq	.+10     	; 0xd8e <_ZN12CmdMessenger16feedinSerialDataEv+0x130>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	f5 01       	movw	r30, r10
     d88:	20 83       	st	Z, r18
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	1c 92       	st	X, r1
     d8e:	f8 01       	movw	r30, r16
     d90:	12 82       	std	Z+2, r1	; 0x02
     d92:	aa 81       	ldd	r26, Y+2	; 0x02
     d94:	bb 81       	ldd	r27, Y+3	; 0x03
     d96:	1d 92       	st	X+, r1
     d98:	1c 92       	st	X, r1
     d9a:	ec 81       	ldd	r30, Y+4	; 0x04
     d9c:	fd 81       	ldd	r31, Y+5	; 0x05
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	ae 81       	ldd	r26, Y+6	; 0x06
     da6:	bf 81       	ldd	r27, Y+7	; 0x07
     da8:	ec 93       	st	X, r30
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <_ZN12CmdMessenger16feedinSerialDataEv+0x162>
     dac:	21 87       	std	Z+9, r18	; 0x09
     dae:	9f 5f       	subi	r25, 0xFF	; 255
     db0:	d8 01       	movw	r26, r16
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	9c 93       	st	X, r25
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	14 96       	adiw	r26, 0x04	; 4
     dba:	8c 91       	ld	r24, X
     dbc:	98 17       	cp	r25, r24
     dbe:	38 f7       	brcc	.-50     	; 0xd8e <_ZN12CmdMessenger16feedinSerialDataEv+0x130>
     dc0:	f5 01       	movw	r30, r10
     dc2:	80 81       	ld	r24, Z
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	01 f5       	brne	.+64     	; 0xe08 <_ZN12CmdMessenger16feedinSerialDataEv+0x1aa>
     dc8:	c8 01       	movw	r24, r16
     dca:	2d df       	rcall	.-422    	; 0xc26 <_ZN12CmdMessenger12readInt16ArgEv>
     dcc:	d8 01       	movw	r26, r16
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	8c 93       	st	X, r24
     dd2:	82 33       	cpi	r24, 0x32	; 50
     dd4:	90 f4       	brcc	.+36     	; 0xdfa <_ZN12CmdMessenger16feedinSerialDataEv+0x19c>
     dd6:	ec 85       	ldd	r30, Y+12	; 0x0c
     dd8:	fd 85       	ldd	r31, Y+13	; 0x0d
     dda:	20 81       	ld	r18, Z
     ddc:	22 23       	and	r18, r18
     dde:	69 f0       	breq	.+26     	; 0xdfa <_ZN12CmdMessenger16feedinSerialDataEv+0x19c>
     de0:	99 27       	eor	r25, r25
     de2:	fc 01       	movw	r30, r24
     de4:	e4 5d       	subi	r30, 0xD4	; 212
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e0 0f       	add	r30, r16
     dee:	f1 1f       	adc	r31, r17
     df0:	01 90       	ld	r0, Z+
     df2:	f0 81       	ld	r31, Z
     df4:	e0 2d       	mov	r30, r0
     df6:	30 97       	sbiw	r30, 0x00	; 0
     df8:	31 f4       	brne	.+12     	; 0xe06 <_ZN12CmdMessenger16feedinSerialDataEv+0x1a8>
     dfa:	aa 85       	ldd	r26, Y+10	; 0x0a
     dfc:	bb 85       	ldd	r27, Y+11	; 0x0b
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	30 97       	sbiw	r30, 0x00	; 0
     e04:	09 f0       	breq	.+2      	; 0xe08 <_ZN12CmdMessenger16feedinSerialDataEv+0x1aa>
     e06:	09 95       	icall
     e08:	bf ef       	ldi	r27, 0xFF	; 255
     e0a:	8b 1a       	sub	r8, r27
     e0c:	9b 0a       	sbc	r9, r27
     e0e:	96 cf       	rjmp	.-212    	; 0xd3c <_ZN12CmdMessenger16feedinSerialDataEv+0xde>
     e10:	c1 2c       	mov	r12, r1
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	d8 2e       	mov	r13, r24
     e16:	72 cf       	rjmp	.-284    	; 0xcfc <_ZN12CmdMessenger16feedinSerialDataEv+0x9e>
     e18:	2d 96       	adiw	r28, 0x0d	; 13
     e1a:	e2 e1       	ldi	r30, 0x12	; 18
     e1c:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__>

00000e20 <_ZN12CmdMessenger10sendCmdEndEbhj>:
     e20:	a5 e1       	ldi	r26, 0x15	; 21
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e1       	ldi	r30, 0x16	; 22
     e26:	f7 e0       	ldi	r31, 0x07	; 7
     e28:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__>
     e2c:	8c 01       	movw	r16, r24
     e2e:	f6 2e       	mov	r15, r22
     e30:	e4 2e       	mov	r14, r20
     e32:	69 01       	movw	r12, r18
     e34:	dc 01       	movw	r26, r24
     e36:	8c 91       	ld	r24, X
     e38:	81 11       	cpse	r24, r1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <_ZN12CmdMessenger10sendCmdEndEbhj+0x20>
     e3c:	f1 2c       	mov	r15, r1
     e3e:	c4 c0       	rjmp	.+392    	; 0xfc8 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1a8>
     e40:	f8 01       	movw	r30, r16
     e42:	ed 5a       	subi	r30, 0xAD	; 173
     e44:	fd 4f       	sbci	r31, 0xFD	; 253
     e46:	fb 83       	std	Y+3, r31	; 0x03
     e48:	ea 83       	std	Y+2, r30	; 0x02
     e4a:	18 01       	movw	r2, r16
     e4c:	ff ea       	ldi	r31, 0xAF	; 175
     e4e:	2f 1a       	sub	r2, r31
     e50:	fd ef       	ldi	r31, 0xFD	; 253
     e52:	3f 0a       	sbc	r3, r31
     e54:	aa 81       	ldd	r26, Y+2	; 0x02
     e56:	bb 81       	ldd	r27, Y+3	; 0x03
     e58:	6c 91       	ld	r22, X
     e5a:	f1 01       	movw	r30, r2
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5printEc>
     e64:	d8 01       	movw	r26, r16
     e66:	18 96       	adiw	r26, 0x08	; 8
     e68:	8c 91       	ld	r24, X
     e6a:	88 23       	and	r24, r24
     e6c:	29 f0       	breq	.+10     	; 0xe78 <_ZN12CmdMessenger10sendCmdEndEbhj+0x58>
     e6e:	f1 01       	movw	r30, r2
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN5Print7printlnEv>
     e78:	ff 20       	and	r15, r15
     e7a:	01 f3       	breq	.-64     	; 0xe3c <_ZN12CmdMessenger10sendCmdEndEbhj+0x1c>
     e7c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     e80:	2b 01       	movw	r4, r22
     e82:	3c 01       	movw	r6, r24
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24
     e88:	f1 2c       	mov	r15, r1
     e8a:	c6 01       	movw	r24, r12
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	8c 83       	std	Y+4, r24	; 0x04
     e92:	9d 83       	std	Y+5, r25	; 0x05
     e94:	ae 83       	std	Y+6, r26	; 0x06
     e96:	bf 83       	std	Y+7, r27	; 0x07
     e98:	68 01       	movw	r12, r16
     e9a:	97 eb       	ldi	r25, 0xB7	; 183
     e9c:	c9 1a       	sub	r12, r25
     e9e:	9d ef       	ldi	r25, 0xFD	; 253
     ea0:	d9 0a       	sbc	r13, r25
     ea2:	d8 01       	movw	r26, r16
     ea4:	16 96       	adiw	r26, 0x06	; 6
     ea6:	b9 87       	std	Y+9, r27	; 0x09
     ea8:	a8 87       	std	Y+8, r26	; 0x08
     eaa:	f8 01       	movw	r30, r16
     eac:	eb 5a       	subi	r30, 0xAB	; 171
     eae:	fd 4f       	sbci	r31, 0xFD	; 253
     eb0:	fb 87       	std	Y+11, r31	; 0x0b
     eb2:	ea 87       	std	Y+10, r30	; 0x0a
     eb4:	2e 2d       	mov	r18, r14
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3d 87       	std	Y+13, r19	; 0x0d
     eba:	2c 87       	std	Y+12, r18	; 0x0c
     ebc:	c8 01       	movw	r24, r16
     ebe:	85 5b       	subi	r24, 0xB5	; 181
     ec0:	9d 4f       	sbci	r25, 0xFD	; 253
     ec2:	9f 87       	std	Y+15, r25	; 0x0f
     ec4:	8e 87       	std	Y+14, r24	; 0x0e
     ec6:	aa 5b       	subi	r26, 0xBA	; 186
     ec8:	bd 4f       	sbci	r27, 0xFD	; 253
     eca:	b9 8b       	std	Y+17, r27	; 0x11
     ecc:	a8 8b       	std	Y+16, r26	; 0x10
     ece:	37 97       	sbiw	r30, 0x07	; 7
     ed0:	fb 8b       	std	Y+19, r31	; 0x13
     ed2:	ea 8b       	std	Y+18, r30	; 0x12
     ed4:	98 01       	movw	r18, r16
     ed6:	26 5b       	subi	r18, 0xB6	; 182
     ed8:	3d 4f       	sbci	r19, 0xFD	; 253
     eda:	3d 8b       	std	Y+21, r19	; 0x15
     edc:	2c 8b       	std	Y+20, r18	; 0x14
     ede:	ee 24       	eor	r14, r14
     ee0:	e3 94       	inc	r14
     ee2:	84 18       	sub	r8, r4
     ee4:	95 08       	sbc	r9, r5
     ee6:	a6 08       	sbc	r10, r6
     ee8:	b7 08       	sbc	r11, r7
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	ae 81       	ldd	r26, Y+6	; 0x06
     ef0:	bf 81       	ldd	r27, Y+7	; 0x07
     ef2:	88 16       	cp	r8, r24
     ef4:	99 06       	cpc	r9, r25
     ef6:	aa 06       	cpc	r10, r26
     ef8:	bb 06       	cpc	r11, r27
     efa:	08 f0       	brcs	.+2      	; 0xefe <_ZN12CmdMessenger10sendCmdEndEbhj+0xde>
     efc:	65 c0       	rjmp	.+202    	; 0xfc8 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1a8>
     efe:	f1 10       	cpse	r15, r1
     f00:	63 c0       	rjmp	.+198    	; 0xfc8 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1a8>
     f02:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     f06:	4b 01       	movw	r8, r22
     f08:	5c 01       	movw	r10, r24
     f0a:	d1 01       	movw	r26, r2
     f0c:	8d 91       	ld	r24, X+
     f0e:	9c 91       	ld	r25, X
     f10:	dc 01       	movw	r26, r24
     f12:	ed 91       	ld	r30, X+
     f14:	fc 91       	ld	r31, X
     f16:	04 80       	ldd	r0, Z+4	; 0x04
     f18:	f5 81       	ldd	r31, Z+5	; 0x05
     f1a:	e0 2d       	mov	r30, r0
     f1c:	09 95       	icall
     f1e:	89 2b       	or	r24, r25
     f20:	01 f3       	breq	.-64     	; 0xee2 <_ZN12CmdMessenger10sendCmdEndEbhj+0xc2>
     f22:	f1 01       	movw	r30, r2
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	06 80       	ldd	r0, Z+6	; 0x06
     f30:	f7 81       	ldd	r31, Z+7	; 0x07
     f32:	e0 2d       	mov	r30, r0
     f34:	09 95       	icall
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	f6 01       	movw	r30, r12
     f3a:	10 82       	st	Z, r1
     f3c:	28 85       	ldd	r18, Y+8	; 0x08
     f3e:	39 85       	ldd	r19, Y+9	; 0x09
     f40:	aa 85       	ldd	r26, Y+10	; 0x0a
     f42:	bb 85       	ldd	r27, Y+11	; 0x0b
     f44:	4c 91       	ld	r20, X
     f46:	be 01       	movw	r22, r28
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	c8 01       	movw	r24, r16
     f4e:	b3 dd       	rcall	.-1178   	; 0xab6 <_ZN12CmdMessenger9isEscapedEPccS0_>
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	30 81       	ld	r19, Z
     f58:	d8 01       	movw	r26, r16
     f5a:	12 96       	adiw	r26, 0x02	; 2
     f5c:	9c 91       	ld	r25, X
     f5e:	12 97       	sbiw	r26, 0x02	; 2
     f60:	f8 01       	movw	r30, r16
     f62:	e9 0f       	add	r30, r25
     f64:	f1 1d       	adc	r31, r1
     f66:	23 13       	cpse	r18, r19
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <_ZN12CmdMessenger10sendCmdEndEbhj+0x178>
     f6a:	81 11       	cpse	r24, r1
     f6c:	15 c0       	rjmp	.+42     	; 0xf98 <_ZN12CmdMessenger10sendCmdEndEbhj+0x178>
     f6e:	11 86       	std	Z+9, r1	; 0x09
     f70:	99 23       	and	r25, r25
     f72:	21 f0       	breq	.+8      	; 0xf7c <_ZN12CmdMessenger10sendCmdEndEbhj+0x15c>
     f74:	f6 01       	movw	r30, r12
     f76:	e0 82       	st	Z, r14
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	1c 92       	st	X, r1
     f7c:	f8 01       	movw	r30, r16
     f7e:	12 82       	std	Z+2, r1	; 0x02
     f80:	a8 89       	ldd	r26, Y+16	; 0x10
     f82:	b9 89       	ldd	r27, Y+17	; 0x11
     f84:	1d 92       	st	X+, r1
     f86:	1c 92       	st	X, r1
     f88:	ea 89       	ldd	r30, Y+18	; 0x12
     f8a:	fb 89       	ldd	r31, Y+19	; 0x13
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	10 82       	st	Z, r1
     f90:	ac 89       	ldd	r26, Y+20	; 0x14
     f92:	bd 89       	ldd	r27, Y+21	; 0x15
     f94:	ec 92       	st	X, r14
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <_ZN12CmdMessenger10sendCmdEndEbhj+0x186>
     f98:	21 87       	std	Z+9, r18	; 0x09
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	f8 01       	movw	r30, r16
     f9e:	92 83       	std	Z+2, r25	; 0x02
     fa0:	84 81       	ldd	r24, Z+4	; 0x04
     fa2:	98 17       	cp	r25, r24
     fa4:	58 f7       	brcc	.-42     	; 0xf7c <_ZN12CmdMessenger10sendCmdEndEbhj+0x15c>
     fa6:	d6 01       	movw	r26, r12
     fa8:	8c 91       	ld	r24, X
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	09 f0       	breq	.+2      	; 0xfb0 <_ZN12CmdMessenger10sendCmdEndEbhj+0x190>
     fae:	99 cf       	rjmp	.-206    	; 0xee2 <_ZN12CmdMessenger10sendCmdEndEbhj+0xc2>
     fb0:	c8 01       	movw	r24, r16
     fb2:	39 de       	rcall	.-910    	; 0xc26 <_ZN12CmdMessenger12readInt16ArgEv>
     fb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     fb6:	fd 85       	ldd	r31, Y+13	; 0x0d
     fb8:	e8 17       	cp	r30, r24
     fba:	f9 07       	cpc	r31, r25
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1a0>
     fbe:	91 cf       	rjmp	.-222    	; 0xee2 <_ZN12CmdMessenger10sendCmdEndEbhj+0xc2>
     fc0:	ae 85       	ldd	r26, Y+14	; 0x0e
     fc2:	bf 85       	ldd	r27, Y+15	; 0x0f
     fc4:	fc 90       	ld	r15, X
     fc6:	8d cf       	rjmp	.-230    	; 0xee2 <_ZN12CmdMessenger10sendCmdEndEbhj+0xc2>
     fc8:	d8 01       	movw	r26, r16
     fca:	17 96       	adiw	r26, 0x07	; 7
     fcc:	1c 92       	st	X, r1
     fce:	17 97       	sbiw	r26, 0x07	; 7
     fd0:	1c 92       	st	X, r1
     fd2:	8f 2d       	mov	r24, r15
     fd4:	65 96       	adiw	r28, 0x15	; 21
     fd6:	e2 e1       	ldi	r30, 0x12	; 18
     fd8:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__>

00000fdc <_ZN12CmdMessenger12readFloatArgEv>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	eb dd       	rcall	.-1066   	; 0xbba <_ZN12CmdMessenger4nextEv>
     fe4:	fe 01       	movw	r30, r28
     fe6:	e5 5b       	subi	r30, 0xB5	; 181
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	88 23       	and	r24, r24
     fec:	79 f0       	breq	.+30     	; 0x100c <_ZN12CmdMessenger12readFloatArgEv+0x30>
     fee:	de 01       	movw	r26, r28
     ff0:	a6 5b       	subi	r26, 0xB6	; 182
     ff2:	bd 4f       	sbci	r27, 0xFD	; 253
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8c 93       	st	X, r24
     ff8:	80 83       	st	Z, r24
     ffa:	c4 5b       	subi	r28, 0xB4	; 180
     ffc:	dd 4f       	sbci	r29, 0xFD	; 253
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	88 81       	ld	r24, Y
    1004:	99 81       	ldd	r25, Y+1	; 0x01
    1006:	0e 94 2a 1b 	call	0x3654	; 0x3654 <strtod>
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <_ZN12CmdMessenger12readFloatArgEv+0x38>
    100c:	10 82       	st	Z, r1
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	cb 01       	movw	r24, r22
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN12CmdMessenger8printSciEdj>:

/**
 * Print float and double in scientific format
 */
void CmdMessenger::printSci(double f, unsigned int digits)
{
    101a:	a2 e2       	ldi	r26, 0x22	; 34
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e1       	ldi	r30, 0x13	; 19
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__>
    1026:	9a a3       	std	Y+34, r25	; 0x22
    1028:	89 a3       	std	Y+33, r24	; 0x21
    102a:	6a 01       	movw	r12, r20
    102c:	7b 01       	movw	r14, r22
    102e:	89 01       	movw	r16, r18
	// handle sign
	if (f < 0.0)
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__cmpsf2>
    103e:	87 ff       	sbrs	r24, 7
    1040:	09 c0       	rjmp	.+18     	; 0x1054 <_ZN12CmdMessenger8printSciEdj+0x3a>
	{
		Serial.print('-');
    1042:	6d e2       	ldi	r22, 0x2D	; 45
    1044:	88 eb       	ldi	r24, 0xB8	; 184
    1046:	96 e0       	ldi	r25, 0x06	; 6
    1048:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5printEc>
		f = -f;
    104c:	f7 fa       	bst	r15, 7
    104e:	f0 94       	com	r15
    1050:	f7 f8       	bld	r15, 7
    1052:	f0 94       	com	r15
	}

	// handle infinite values
	if (isinf(f))
    1054:	46 01       	movw	r8, r12
    1056:	57 01       	movw	r10, r14
    1058:	e8 94       	clt
    105a:	b7 f8       	bld	r11, 7
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	3f ef       	ldi	r19, 0xFF	; 255
    1060:	4f e7       	ldi	r20, 0x7F	; 127
    1062:	5f e7       	ldi	r21, 0x7F	; 127
    1064:	c5 01       	movw	r24, r10
    1066:	b4 01       	movw	r22, r8
    1068:	0e 94 af 12 	call	0x255e	; 0x255e <__unordsf2>
    106c:	81 11       	cpse	r24, r1
    106e:	0d c0       	rjmp	.+26     	; 0x108a <_ZN12CmdMessenger8printSciEdj+0x70>
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	5f e7       	ldi	r21, 0x7F	; 127
    1078:	c5 01       	movw	r24, r10
    107a:	b4 01       	movw	r22, r8
    107c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__cmpsf2>
    1080:	18 16       	cp	r1, r24
    1082:	1c f4       	brge	.+6      	; 0x108a <_ZN12CmdMessenger8printSciEdj+0x70>
	{
		Serial.print("INF");
    1084:	61 e2       	ldi	r22, 0x21	; 33
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	0a c0       	rjmp	.+20     	; 0x109e <_ZN12CmdMessenger8printSciEdj+0x84>
		return;
	}
	// handle Not a Number
	if (isnan(f))
    108a:	a7 01       	movw	r20, r14
    108c:	96 01       	movw	r18, r12
    108e:	c7 01       	movw	r24, r14
    1090:	b6 01       	movw	r22, r12
    1092:	0e 94 af 12 	call	0x255e	; 0x255e <__unordsf2>
    1096:	88 23       	and	r24, r24
    1098:	39 f0       	breq	.+14     	; 0x10a8 <_ZN12CmdMessenger8printSciEdj+0x8e>
	{
		Serial.print("NaN");
    109a:	65 e2       	ldi	r22, 0x25	; 37
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	88 eb       	ldi	r24, 0xB8	; 184
    10a0:	96 e0       	ldi	r25, 0x06	; 6
    10a2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN5Print5printEPKc>
		return;
    10a6:	ce c0       	rjmp	.+412    	; 0x1244 <_ZN12CmdMessenger8printSciEdj+0x22a>
    10a8:	18 01       	movw	r2, r16
    10aa:	07 30       	cpi	r16, 0x07	; 7
    10ac:	11 05       	cpc	r17, r1
    10ae:	18 f0       	brcs	.+6      	; 0x10b6 <_ZN12CmdMessenger8printSciEdj+0x9c>
    10b0:	86 e0       	ldi	r24, 0x06	; 6
    10b2:	28 2e       	mov	r2, r24
    10b4:	31 2c       	mov	r3, r1
	}

	// max digits
	if (digits > 6) digits = 6;
	long multiplier = pow(10, digits);     // fix int => long
    10b6:	b1 01       	movw	r22, r2
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__floatunsisf>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	91 e4       	ldi	r25, 0x41	; 65
    10cc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <pow>
    10d0:	0e 94 ce 10 	call	0x219c	; 0x219c <__fixsfsi>
    10d4:	2b 01       	movw	r4, r22
    10d6:	3c 01       	movw	r6, r24

	int exponent;
	if (abs(f) < 10.0) {
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	c7 01       	movw	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	0e 94 b1 11 	call	0x2362	; 0x2362 <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	54 f4       	brge	.+20     	; 0x10fe <_ZN12CmdMessenger8printSciEdj+0xe4>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	e6 d7       	rcall	.+4044   	; 0x20c4 <__cmpsf2>
    10f8:	87 ff       	sbrs	r24, 7
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <_ZN12CmdMessenger8printSciEdj+0xf8>
    10fc:	12 c0       	rjmp	.+36     	; 0x1122 <_ZN12CmdMessenger8printSciEdj+0x108>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	51 ec       	ldi	r21, 0xC1	; 193
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 b1 11 	call	0x2362	; 0x2362 <__gesf2>
    110e:	18 16       	cp	r1, r24
    1110:	44 f0       	brlt	.+16     	; 0x1122 <_ZN12CmdMessenger8printSciEdj+0x108>
		exponent = 0;
	}
	else {
		exponent = int(log10(f));
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	0e 94 b5 11 	call	0x236a	; 0x236a <log10>
    111a:	0e 94 ce 10 	call	0x219c	; 0x219c <__fixsfsi>
    111e:	8b 01       	movw	r16, r22
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <_ZN12CmdMessenger8printSciEdj+0x10c>
	if (digits > 6) digits = 6;
	long multiplier = pow(10, digits);     // fix int => long

	int exponent;
	if (abs(f) < 10.0) {
		exponent = 0;
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
	}
	else {
		exponent = int(log10(f));
	}
	float g = f / pow(10, exponent);
    1126:	b8 01       	movw	r22, r16
    1128:	01 2e       	mov	r0, r17
    112a:	00 0c       	add	r0, r0
    112c:	88 0b       	sbc	r24, r24
    112e:	99 0b       	sbc	r25, r25
    1130:	0e 94 01 11 	call	0x2202	; 0x2202 <__floatsisf>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	91 e4       	ldi	r25, 0x41	; 65
    1140:	0e 94 63 12 	call	0x24c6	; 0x24c6 <pow>
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	c7 01       	movw	r24, r14
    114a:	b6 01       	movw	r22, r12
    114c:	bf d7       	rcall	.+3966   	; 0x20cc <__divsf3>
    114e:	4b 01       	movw	r8, r22
    1150:	5c 01       	movw	r10, r24
	if ((g < 1.0) && (g != 0.0))
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	b4 d7       	rcall	.+3944   	; 0x20c4 <__cmpsf2>
    115c:	87 ff       	sbrs	r24, 7
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <_ZN12CmdMessenger8printSciEdj+0x16e>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	c5 01       	movw	r24, r10
    1168:	b4 01       	movw	r22, r8
    116a:	ac d7       	rcall	.+3928   	; 0x20c4 <__cmpsf2>
    116c:	88 23       	and	r24, r24
    116e:	61 f0       	breq	.+24     	; 0x1188 <_ZN12CmdMessenger8printSciEdj+0x16e>
	{
		g *= 10;
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	c5 01       	movw	r24, r10
    117a:	b4 01       	movw	r22, r8
    117c:	0e 94 00 12 	call	0x2400	; 0x2400 <__mulsf3>
    1180:	4b 01       	movw	r8, r22
    1182:	5c 01       	movw	r10, r24
		exponent--;
    1184:	01 50       	subi	r16, 0x01	; 1
    1186:	11 09       	sbc	r17, r1
	}

	long whole = long(g);                     // single digit
    1188:	c5 01       	movw	r24, r10
    118a:	b4 01       	movw	r22, r8
    118c:	0e 94 ce 10 	call	0x219c	; 0x219c <__fixsfsi>
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
	long part = long((g - whole)*multiplier + 0.5);  // # digits
    1194:	0e 94 01 11 	call	0x2202	; 0x2202 <__floatsisf>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	c5 01       	movw	r24, r10
    119e:	b4 01       	movw	r22, r8
    11a0:	2c d7       	rcall	.+3672   	; 0x1ffa <__subsf3>
    11a2:	4b 01       	movw	r8, r22
    11a4:	5c 01       	movw	r10, r24
    11a6:	c3 01       	movw	r24, r6
    11a8:	b2 01       	movw	r22, r4
    11aa:	0e 94 01 11 	call	0x2202	; 0x2202 <__floatsisf>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	c5 01       	movw	r24, r10
    11b4:	b4 01       	movw	r22, r8
    11b6:	0e 94 00 12 	call	0x2400	; 0x2400 <__mulsf3>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	5f e3       	ldi	r21, 0x3F	; 63
    11c2:	1c d7       	rcall	.+3640   	; 0x1ffc <__addsf3>
    11c4:	eb d7       	rcall	.+4054   	; 0x219c <__fixsfsi>
    11c6:	2b 01       	movw	r4, r22
    11c8:	3c 01       	movw	r6, r24
	// Check for rounding above .99:
	if (part == 100) {
    11ca:	94 e6       	ldi	r25, 0x64	; 100
    11cc:	49 16       	cp	r4, r25
    11ce:	51 04       	cpc	r5, r1
    11d0:	61 04       	cpc	r6, r1
    11d2:	71 04       	cpc	r7, r1
    11d4:	41 f4       	brne	.+16     	; 0x11e6 <_ZN12CmdMessenger8printSciEdj+0x1cc>
		whole++;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	c8 1a       	sub	r12, r24
    11da:	d8 0a       	sbc	r13, r24
    11dc:	e8 0a       	sbc	r14, r24
    11de:	f8 0a       	sbc	r15, r24
		part = 0;
    11e0:	41 2c       	mov	r4, r1
    11e2:	51 2c       	mov	r5, r1
    11e4:	32 01       	movw	r6, r4
	}
	char format[16];
	sprintf(format, "%%ld.%%0%dldE%%+d", digits);
    11e6:	3f 92       	push	r3
    11e8:	2f 92       	push	r2
    11ea:	89 e2       	ldi	r24, 0x29	; 41
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	9f 93       	push	r25
    11f0:	8f 93       	push	r24
    11f2:	5e 01       	movw	r10, r28
    11f4:	91 e1       	ldi	r25, 0x11	; 17
    11f6:	a9 0e       	add	r10, r25
    11f8:	b1 1c       	adc	r11, r1
    11fa:	bf 92       	push	r11
    11fc:	af 92       	push	r10
    11fe:	0e 94 c5 1c 	call	0x398a	; 0x398a <sprintf>
	char output[16];
	sprintf(output, format, whole, part, exponent);
    1202:	1f 93       	push	r17
    1204:	0f 93       	push	r16
    1206:	7f 92       	push	r7
    1208:	6f 92       	push	r6
    120a:	5f 92       	push	r5
    120c:	4f 92       	push	r4
    120e:	ff 92       	push	r15
    1210:	ef 92       	push	r14
    1212:	df 92       	push	r13
    1214:	cf 92       	push	r12
    1216:	bf 92       	push	r11
    1218:	af 92       	push	r10
    121a:	8e 01       	movw	r16, r28
    121c:	0f 5f       	subi	r16, 0xFF	; 255
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	1f 93       	push	r17
    1222:	0f 93       	push	r16
    1224:	0e 94 c5 1c 	call	0x398a	; 0x398a <sprintf>
	comms->print(output);
    1228:	e9 a1       	ldd	r30, Y+33	; 0x21
    122a:	fa a1       	ldd	r31, Y+34	; 0x22
    122c:	ef 5a       	subi	r30, 0xAF	; 175
    122e:	fd 4f       	sbci	r31, 0xFD	; 253
    1230:	b8 01       	movw	r22, r16
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN5Print5printEPKc>
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	a2 96       	adiw	r28, 0x22	; 34
    1246:	e2 e1       	ldi	r30, 0x12	; 18
    1248:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__>

0000124c <_ZN12CmdMessenger13sendCmdSciArgEdj>:
/**
 * Send double argument in scientific format.
 *  This will overcome the boundary of normal float sending which is limited to abs(f) <= MAXLONG
 */
void CmdMessenger::sendCmdSciArg(double arg, unsigned int n)
{
    124c:	a0 e0       	ldi	r26, 0x00	; 0
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ec e2       	ldi	r30, 0x2C	; 44
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x14>
	if (startCommand)
    1258:	dc 01       	movw	r26, r24
    125a:	ec 91       	ld	r30, X
    125c:	ee 23       	and	r30, r30
    125e:	99 f0       	breq	.+38     	; 0x1286 <_ZN12CmdMessenger13sendCmdSciArgEdj+0x3a>
    1260:	89 01       	movw	r16, r18
    1262:	6a 01       	movw	r12, r20
    1264:	7b 01       	movw	r14, r22
    1266:	ec 01       	movw	r28, r24
	{
		comms->print(field_separator);
    1268:	ac 5a       	subi	r26, 0xAC	; 172
    126a:	bd 4f       	sbci	r27, 0xFD	; 253
    126c:	fc 01       	movw	r30, r24
    126e:	ef 5a       	subi	r30, 0xAF	; 175
    1270:	fd 4f       	sbci	r31, 0xFD	; 253
    1272:	6c 91       	ld	r22, X
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5printEc>
		printSci(arg, n);
    127c:	98 01       	movw	r18, r16
    127e:	b7 01       	movw	r22, r14
    1280:	a6 01       	movw	r20, r12
    1282:	ce 01       	movw	r24, r28
    1284:	ca de       	rcall	.-620    	; 0x101a <_ZN12CmdMessenger8printSciEdj>
	}
}
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	e8 e0       	ldi	r30, 0x08	; 8
    128c:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x14>

00001290 <_ZN4erom7Storage6OnLoadEv>:
  _app_id(aAppID), _version(aVersion),
  _header(issue<uint32_t>()),
  _stored_app_id(issue<uint16_t>()),
  _stored_version(issue<uint16_t>())
{
}
    1290:	08 95       	ret

00001292 <_ZN4erom7Storage6OnSaveEv>:
    1292:	08 95       	ret

00001294 <_ZN4erom7Storage7OnClearEv>:
    1294:	08 95       	ret

00001296 <_ZN4erom7StorageD1Ev>:
    1296:	08 95       	ret

00001298 <_ZN4erom7StorageD0Ev>:
    1298:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <_ZdlPv>
    129c:	08 95       	ret

0000129e <_ZN4erom6AccessC1Ej>:
    129e:	fc 01       	movw	r30, r24
    12a0:	71 83       	std	Z+1, r23	; 0x01
    12a2:	60 83       	st	Z, r22
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	34 e0       	ldi	r19, 0x04	; 4
    12a8:	33 83       	std	Z+3, r19	; 0x03
    12aa:	22 83       	std	Z+2, r18	; 0x02
    12ac:	08 95       	ret

000012ae <_GLOBAL__sub_I__ZN4erom6accessE>:

public:
  // Chip's EEPROM actual size
  static size_t device_memory_size();
  // Ready-to-use access instance
  static Access& instance() { static Access access; return access; }
    12ae:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZGVZN4erom6Access8instanceEvE6access>
    12b2:	81 11       	cpse	r24, r1
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <_GLOBAL__sub_I__ZN4erom6accessE+0x22>

erom::Access &access = Access::instance();

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

Access::Access(size_t aBase) : _base(aBase), _memory_size(device_memory_size()) { /* Do Nothing */ }
    12b6:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZZN4erom6Access8instanceEvE6access+0x1>
    12ba:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZZN4erom6Access8instanceEvE6access>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	94 e0       	ldi	r25, 0x04	; 4
    12c2:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <_ZZN4erom6Access8instanceEvE6access+0x3>
    12c6:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_ZZN4erom6Access8instanceEvE6access+0x2>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_ZGVZN4erom6Access8instanceEvE6access>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    12d0:	81 e9       	ldi	r24, 0x91	; 145
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <_ZN4erom6accessE+0x1>
    12d8:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <_ZN4erom6accessE>
    12dc:	08 95       	ret

000012de <_ZN11SimpleTimer11setIntervalElPFvvE>:

    return freeTimer;
}


int SimpleTimer::setInterval(long d, timer_callback f) {
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    return setTimer(d, f, RUN_FOREVER);
    12e2:	dc 01       	movw	r26, r24
    12e4:	ed 91       	ld	r30, X+
    12e6:	fc 91       	ld	r31, X
    12e8:	06 80       	ldd	r0, Z+6	; 0x06
    12ea:	f7 81       	ldd	r31, Z+7	; 0x07
    12ec:	e0 2d       	mov	r30, r0
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	09 95       	icall
}
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    return setTimer(d, f, RUN_ONCE);
    12fe:	dc 01       	movw	r26, r24
    1300:	ed 91       	ld	r30, X+
    1302:	fc 91       	ld	r31, X
    1304:	06 80       	ldd	r0, Z+6	; 0x06
    1306:	f7 81       	ldd	r31, Z+7	; 0x07
    1308:	e0 2d       	mov	r30, r0
    130a:	01 e0       	ldi	r16, 0x01	; 1
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	09 95       	icall
}
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <_ZN11SimpleTimer9isEnabledEi>:
    prev_millis[numTimer] = elapsed();
}


boolean SimpleTimer::isEnabled(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    1316:	6a 30       	cpi	r22, 0x0A	; 10
    1318:	71 05       	cpc	r23, r1
    131a:	3c f4       	brge	.+14     	; 0x132a <_ZN11SimpleTimer9isEnabledEi+0x14>
        return false;
    }

    return enabled[numTimer];
    131c:	68 0f       	add	r22, r24
    131e:	79 1f       	adc	r23, r25
    1320:	fb 01       	movw	r30, r22
    1322:	e2 57       	subi	r30, 0x72	; 114
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 81       	ld	r24, Z
    1328:	08 95       	ret
}


boolean SimpleTimer::isEnabled(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
        return false;
    132a:	80 e0       	ldi	r24, 0x00	; 0
    }

    return enabled[numTimer];
}
    132c:	08 95       	ret

0000132e <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    132e:	6a 30       	cpi	r22, 0x0A	; 10
    1330:	71 05       	cpc	r23, r1
    1332:	3c f4       	brge	.+14     	; 0x1342 <_ZN11SimpleTimer6enableEi+0x14>
        return;
    }

    enabled[numTimer] = true;
    1334:	68 0f       	add	r22, r24
    1336:	79 1f       	adc	r23, r25
    1338:	fb 01       	movw	r30, r22
    133a:	e2 57       	subi	r30, 0x72	; 114
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
    1342:	08 95       	ret

00001344 <_ZN11SimpleTimer7disableEi>:
}


void SimpleTimer::disable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    1344:	6a 30       	cpi	r22, 0x0A	; 10
    1346:	71 05       	cpc	r23, r1
    1348:	34 f4       	brge	.+12     	; 0x1356 <_ZN11SimpleTimer7disableEi+0x12>
        return;
    }

    enabled[numTimer] = false;
    134a:	68 0f       	add	r22, r24
    134c:	79 1f       	adc	r23, r25
    134e:	fb 01       	movw	r30, r22
    1350:	e2 57       	subi	r30, 0x72	; 114
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	10 82       	st	Z, r1
    1356:	08 95       	ret

00001358 <_ZN11SimpleTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
    1358:	a6 e0       	ldi	r26, 0x06	; 6
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 eb       	ldi	r30, 0xB2	; 178
    135e:	f9 e0       	ldi	r31, 0x09	; 9
    1360:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__>
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1368:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    136c:	6b 01       	movw	r12, r22
    136e:	7c 01       	movw	r14, r24
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	86 58       	subi	r24, 0x86	; 134
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	9c 83       	std	Y+4, r25	; 0x04
    137a:	8b 83       	std	Y+3, r24	; 0x03
    137c:	ad 81       	ldd	r26, Y+5	; 0x05
    137e:	be 81       	ldd	r27, Y+6	; 0x06
    1380:	ba 83       	std	Y+2, r27	; 0x02
    1382:	a9 83       	std	Y+1, r26	; 0x01
    1384:	1d 01       	movw	r2, r26
    1386:	be e8       	ldi	r27, 0x8E	; 142
    1388:	2b 0e       	add	r2, r27
    138a:	31 1c       	adc	r3, r1
    138c:	91 01       	movw	r18, r2
                    if (maxNumRuns[i] == RUN_FOREVER) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
    138e:	01 e0       	ldi	r16, 0x01	; 1
    1390:	10 e0       	ldi	r17, 0x00	; 0
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        toBeCalled[i] = DEFCALL_DONTRUN;
    1392:	eb 81       	ldd	r30, Y+3	; 0x03
    1394:	fc 81       	ldd	r31, Y+4	; 0x04
    1396:	17 8e       	std	Z+31, r1	; 0x1f
    1398:	16 8e       	std	Z+30, r1	; 0x1e
    139a:	cf 01       	movw	r24, r30
    139c:	80 55       	subi	r24, 0x50	; 80
    139e:	91 09       	sbc	r25, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    13a0:	dc 01       	movw	r26, r24
    13a2:	8d 91       	ld	r24, X+
    13a4:	9c 91       	ld	r25, X
    13a6:	89 2b       	or	r24, r25
    13a8:	09 f4       	brne	.+2      	; 0x13ac <_ZN11SimpleTimer3runEv+0x54>
    13aa:	47 c0       	rjmp	.+142    	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	42 81       	ldd	r20, Z+2	; 0x02
    13b2:	53 81       	ldd	r21, Z+3	; 0x03
    13b4:	64 81       	ldd	r22, Z+4	; 0x04
    13b6:	75 81       	ldd	r23, Z+5	; 0x05
    13b8:	cf 01       	movw	r24, r30
    13ba:	ce 96       	adiw	r24, 0x3e	; 62
    13bc:	dc 01       	movw	r26, r24
    13be:	8d 90       	ld	r8, X+
    13c0:	9d 90       	ld	r9, X+
    13c2:	ad 90       	ld	r10, X+
    13c4:	bc 90       	ld	r11, X
    13c6:	26 01       	movw	r4, r12
    13c8:	37 01       	movw	r6, r14
    13ca:	44 1a       	sub	r4, r20
    13cc:	55 0a       	sbc	r5, r21
    13ce:	66 0a       	sbc	r6, r22
    13d0:	77 0a       	sbc	r7, r23
    13d2:	48 14       	cp	r4, r8
    13d4:	59 04       	cpc	r5, r9
    13d6:	6a 04       	cpc	r6, r10
    13d8:	7b 04       	cpc	r7, r11
    13da:	78 f1       	brcs	.+94     	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    13dc:	48 0d       	add	r20, r8
    13de:	59 1d       	adc	r21, r9
    13e0:	6a 1d       	adc	r22, r10
    13e2:	7b 1d       	adc	r23, r11
    13e4:	42 83       	std	Z+2, r20	; 0x02
    13e6:	53 83       	std	Z+3, r21	; 0x03
    13e8:	64 83       	std	Z+4, r22	; 0x04
    13ea:	75 83       	std	Z+5, r23	; 0x05

                // check if the timer callback has to be executed
                if (enabled[i]) {
    13ec:	d9 01       	movw	r26, r18
    13ee:	8c 91       	ld	r24, X
    13f0:	88 23       	and	r24, r24
    13f2:	19 f1       	breq	.+70     	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	44 97       	sbiw	r24, 0x14	; 20

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    13fa:	fc 01       	movw	r30, r24
    13fc:	40 81       	ld	r20, Z
    13fe:	51 81       	ldd	r21, Z+1	; 0x01
    1400:	41 15       	cp	r20, r1
    1402:	51 05       	cpc	r21, r1
    1404:	39 f4       	brne	.+14     	; 0x1414 <_ZN11SimpleTimer3runEv+0xbc>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1406:	ab 81       	ldd	r26, Y+3	; 0x03
    1408:	bc 81       	ldd	r27, Y+4	; 0x04
    140a:	5f 96       	adiw	r26, 0x1f	; 31
    140c:	1c 93       	st	X, r17
    140e:	0e 93       	st	-X, r16
    1410:	5e 97       	sbiw	r26, 0x1e	; 30
    1412:	13 c0       	rjmp	.+38     	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	84 17       	cp	r24, r20
    141e:	95 07       	cpc	r25, r21
    1420:	64 f4       	brge	.+24     	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1422:	17 8f       	std	Z+31, r17	; 0x1f
    1424:	06 8f       	std	Z+30, r16	; 0x1e
                        numRuns[i]++;
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	80 83       	st	Z, r24

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    142c:	84 17       	cp	r24, r20
    142e:	95 07       	cpc	r25, r21
    1430:	24 f0       	brlt	.+8      	; 0x143a <_ZN11SimpleTimer3runEv+0xe2>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	97 8f       	std	Z+31, r25	; 0x1f
    1438:	86 8f       	std	Z+30, r24	; 0x1e
    143a:	ab 81       	ldd	r26, Y+3	; 0x03
    143c:	bc 81       	ldd	r27, Y+4	; 0x04
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	bc 83       	std	Y+4, r27	; 0x04
    1442:	ab 83       	std	Y+3, r26	; 0x03
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	34 96       	adiw	r30, 0x04	; 4
    144a:	fa 83       	std	Y+2, r31	; 0x02
    144c:	e9 83       	std	Y+1, r30	; 0x01
    144e:	2f 5f       	subi	r18, 0xFF	; 255
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1452:	a2 15       	cp	r26, r2
    1454:	b3 05       	cpc	r27, r3
    1456:	09 f0       	breq	.+2      	; 0x145a <_ZN11SimpleTimer3runEv+0x102>
    1458:	9c cf       	rjmp	.-200    	; 0x1392 <_ZN11SimpleTimer3runEv+0x3a>
    145a:	ed 80       	ldd	r14, Y+5	; 0x05
    145c:	fe 80       	ldd	r15, Y+6	; 0x06
    145e:	f8 e9       	ldi	r31, 0x98	; 152
    1460:	ef 0e       	add	r14, r31
    1462:	f1 1c       	adc	r15, r1
    1464:	00 e0       	ldi	r16, 0x00	; 0
    1466:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        switch(toBeCalled[i]) {
    1468:	d7 01       	movw	r26, r14
    146a:	8d 91       	ld	r24, X+
    146c:	9d 91       	ld	r25, X+
    146e:	7d 01       	movw	r14, r26
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	a9 f0       	breq	.+42     	; 0x14a0 <_ZN11SimpleTimer3runEv+0x148>
    1476:	02 97       	sbiw	r24, 0x02	; 2
    1478:	d1 f4       	brne	.+52     	; 0x14ae <_ZN11SimpleTimer3runEv+0x156>
    147a:	fd 01       	movw	r30, r26
    147c:	e0 57       	subi	r30, 0x70	; 112
    147e:	f1 09       	sbc	r31, r1
            case DEFCALL_RUNONLY:
                (*callbacks[i])();
                break;

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1480:	01 90       	ld	r0, Z+
    1482:	f0 81       	ld	r31, Z
    1484:	e0 2d       	mov	r30, r0
    1486:	09 95       	icall
                deleteTimer(i);
    1488:	ad 81       	ldd	r26, Y+5	; 0x05
    148a:	be 81       	ldd	r27, Y+6	; 0x06
    148c:	ed 91       	ld	r30, X+
    148e:	fc 91       	ld	r31, X
    1490:	11 97       	sbiw	r26, 0x01	; 1
    1492:	00 84       	ldd	r0, Z+8	; 0x08
    1494:	f1 85       	ldd	r31, Z+9	; 0x09
    1496:	e0 2d       	mov	r30, r0
    1498:	b8 01       	movw	r22, r16
    149a:	cd 01       	movw	r24, r26
    149c:	09 95       	icall
                break;
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <_ZN11SimpleTimer3runEv+0x156>
    14a0:	fd 01       	movw	r30, r26
    14a2:	e0 57       	subi	r30, 0x70	; 112
    14a4:	f1 09       	sbc	r31, r1
        switch(toBeCalled[i]) {
            case DEFCALL_DONTRUN:
                break;

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	09 95       	icall
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    14ae:	0f 5f       	subi	r16, 0xFF	; 255
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	0a 30       	cpi	r16, 0x0A	; 10
    14b4:	11 05       	cpc	r17, r1
    14b6:	c1 f6       	brne	.-80     	; 0x1468 <_ZN11SimpleTimer3runEv+0x110>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    14b8:	26 96       	adiw	r28, 0x06	; 6
    14ba:	e2 e1       	ldi	r30, 0x12	; 18
    14bc:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__>

000014c0 <_ZN11SimpleTimer12restartTimerEi>:
    }
}


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    if (numTimer >= MAX_TIMERS) {
    14c8:	6a 30       	cpi	r22, 0x0A	; 10
    14ca:	71 05       	cpc	r23, r1
    14cc:	74 f4       	brge	.+28     	; 0x14ea <_ZN11SimpleTimer12restartTimerEi+0x2a>
    14ce:	eb 01       	movw	r28, r22
    14d0:	8c 01       	movw	r16, r24
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    14d2:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
void SimpleTimer::restartTimer(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
        return;
    }

    prev_millis[numTimer] = elapsed();
    14d6:	cc 0f       	add	r28, r28
    14d8:	dd 1f       	adc	r29, r29
    14da:	cc 0f       	add	r28, r28
    14dc:	dd 1f       	adc	r29, r29
    14de:	c0 0f       	add	r28, r16
    14e0:	d1 1f       	adc	r29, r17
    14e2:	6a 83       	std	Y+2, r22	; 0x02
    14e4:	7b 83       	std	Y+3, r23	; 0x03
    14e6:	8c 83       	std	Y+4, r24	; 0x04
    14e8:	9d 83       	std	Y+5, r25	; 0x05
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <_ZN11SimpleTimer11deleteTimerEi>:
int SimpleTimer::setTimeout(long d, timer_callback f) {
    return setTimer(d, f, RUN_ONCE);
}


void SimpleTimer::deleteTimer(int timerId) {
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    if (timerId >= MAX_TIMERS) {
    14f8:	6a 30       	cpi	r22, 0x0A	; 10
    14fa:	71 05       	cpc	r23, r1
    14fc:	b4 f5       	brge	.+108    	; 0x156a <_ZN11SimpleTimer11deleteTimerEi+0x76>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    14fe:	ec 01       	movw	r28, r24
    1500:	c4 55       	subi	r28, 0x54	; 84
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	28 81       	ld	r18, Y
    1506:	39 81       	ldd	r19, Y+1	; 0x01
    1508:	21 15       	cp	r18, r1
    150a:	31 05       	cpc	r19, r1
    150c:	71 f1       	breq	.+92     	; 0x156a <_ZN11SimpleTimer11deleteTimerEi+0x76>
    150e:	db 01       	movw	r26, r22
    1510:	aa 0f       	add	r26, r26
    1512:	bb 1f       	adc	r27, r27
    1514:	a8 0f       	add	r26, r24
    1516:	b9 1f       	adc	r27, r25
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1518:	9a 96       	adiw	r26, 0x2a	; 42
    151a:	4d 91       	ld	r20, X+
    151c:	5c 91       	ld	r21, X
    151e:	9b 97       	sbiw	r26, 0x2b	; 43
    1520:	45 2b       	or	r20, r21
    1522:	19 f1       	breq	.+70     	; 0x156a <_ZN11SimpleTimer11deleteTimerEi+0x76>
        callbacks[timerId] = 0;
    1524:	9b 96       	adiw	r26, 0x2b	; 43
    1526:	1c 92       	st	X, r1
    1528:	1e 92       	st	-X, r1
    152a:	9a 97       	sbiw	r26, 0x2a	; 42
        enabled[timerId] = false;
    152c:	fc 01       	movw	r30, r24
    152e:	e6 0f       	add	r30, r22
    1530:	f7 1f       	adc	r31, r23
    1532:	e2 57       	subi	r30, 0x72	; 114
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1538:	fd 01       	movw	r30, r26
    153a:	e8 56       	subi	r30, 0x68	; 104
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	11 82       	std	Z+1, r1	; 0x01
    1540:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	fc 01       	movw	r30, r24
    154c:	e6 0f       	add	r30, r22
    154e:	f7 1f       	adc	r31, r23
    1550:	fe 96       	adiw	r30, 0x3e	; 62
    1552:	10 82       	st	Z, r1
    1554:	11 82       	std	Z+1, r1	; 0x01
    1556:	12 82       	std	Z+2, r1	; 0x02
    1558:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    155a:	a6 58       	subi	r26, 0x86	; 134
    155c:	bf 4f       	sbci	r27, 0xFF	; 255
    155e:	1d 92       	st	X+, r1
    1560:	1c 92       	st	X, r1

        // update number of timers
        numTimers--;
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	31 09       	sbc	r19, r1
    1566:	39 83       	std	Y+1, r19	; 0x01
    1568:	28 83       	st	Y, r18
    }
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <_ZN11SimpleTimerC1Ev>:
// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }


SimpleTimer::SimpleTimer() {
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	ec 01       	movw	r28, r24
    157e:	8d e4       	ldi	r24, 0x4D	; 77
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	99 83       	std	Y+1, r25	; 0x01
    1584:	88 83       	st	Y, r24
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1586:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    158a:	7e 01       	movw	r14, r28
    158c:	2e e8       	ldi	r18, 0x8E	; 142
    158e:	e2 0e       	add	r14, r18
    1590:	f1 1c       	adc	r15, r1
    1592:	fe 01       	movw	r30, r28
    1594:	ba 96       	adiw	r30, 0x2a	; 42
    1596:	6e 01       	movw	r12, r28
    1598:	a2 e0       	ldi	r26, 0x02	; 2
    159a:	ca 0e       	add	r12, r26
    159c:	d1 1c       	adc	r13, r1
    159e:	9e 01       	movw	r18, r28
    15a0:	22 5c       	subi	r18, 0xC2	; 194
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255

SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        enabled[i] = false;
    15a4:	d7 01       	movw	r26, r14
    15a6:	1d 92       	st	X+, r1
    15a8:	7d 01       	movw	r14, r26
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    15aa:	11 92       	st	Z+, r1
    15ac:	11 92       	st	Z+, r1
        prev_millis[i] = current_millis;
    15ae:	d6 01       	movw	r26, r12
    15b0:	6d 93       	st	X+, r22
    15b2:	7d 93       	st	X+, r23
    15b4:	8d 93       	st	X+, r24
    15b6:	9d 93       	st	X+, r25
    15b8:	6d 01       	movw	r12, r26
    15ba:	af 01       	movw	r20, r30
    15bc:	42 5b       	subi	r20, 0xB2	; 178
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
        numRuns[i] = 0;
    15c0:	da 01       	movw	r26, r20
    15c2:	1d 92       	st	X+, r1
    15c4:	1c 92       	st	X, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    15c6:	e2 17       	cp	r30, r18
    15c8:	f3 07       	cpc	r31, r19
    15ca:	61 f7       	brne	.-40     	; 0x15a4 <_ZN11SimpleTimerC1Ev+0x34>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    15cc:	c4 55       	subi	r28, 0x54	; 84
    15ce:	df 4f       	sbci	r29, 0xFF	; 255
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	18 82       	st	Y, r1
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	08 95       	ret

000015e2 <_ZN11SimpleTimer17findFirstFreeSlotEv>:
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    15e2:	fc 01       	movw	r30, r24
    15e4:	e4 55       	subi	r30, 0x54	; 84
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	20 81       	ld	r18, Z
    15ea:	31 81       	ldd	r19, Z+1	; 0x01
    15ec:	2a 30       	cpi	r18, 0x0A	; 10
    15ee:	31 05       	cpc	r19, r1
    15f0:	6c f4       	brge	.+26     	; 0x160c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2a>
    15f2:	e2 58       	subi	r30, 0x82	; 130
    15f4:	f1 09       	sbc	r31, r1
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
        if (callbacks[i] == 0) {
    15fa:	81 91       	ld	r24, Z+
    15fc:	91 91       	ld	r25, Z+
    15fe:	89 2b       	or	r24, r25
    1600:	41 f0       	breq	.+16     	; 0x1612 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x30>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1602:	2f 5f       	subi	r18, 0xFF	; 255
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	2a 30       	cpi	r18, 0x0A	; 10
    1608:	31 05       	cpc	r19, r1
    160a:	b9 f7       	brne	.-18     	; 0x15fa <_ZN11SimpleTimer17findFirstFreeSlotEv+0x18>
int SimpleTimer::findFirstFreeSlot() {
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	9f ef       	ldi	r25, 0xFF	; 255
    1610:	08 95       	ret
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
        if (callbacks[i] == 0) {
            return i;
    1612:	c9 01       	movw	r24, r18
        }
    }

    // no free slots found
    return -1;
}
    1614:	08 95       	ret

00001616 <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1616:	a4 e0       	ldi	r26, 0x04	; 4
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e1       	ldi	r30, 0x11	; 17
    161c:	fb e0       	ldi	r31, 0x0B	; 11
    161e:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__prologue_saves__+0xc>
    1622:	4c 01       	movw	r8, r24
    1624:	59 01       	movw	r10, r18
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1626:	49 83       	std	Y+1, r20	; 0x01
    1628:	5a 83       	std	Y+2, r21	; 0x02
    162a:	6b 83       	std	Y+3, r22	; 0x03
    162c:	7c 83       	std	Y+4, r23	; 0x04
    162e:	d9 df       	rcall	.-78     	; 0x15e2 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1630:	7c 01       	movw	r14, r24
    if (freeTimer < 0) {
    1632:	49 81       	ldd	r20, Y+1	; 0x01
    1634:	5a 81       	ldd	r21, Y+2	; 0x02
    1636:	6b 81       	ldd	r22, Y+3	; 0x03
    1638:	7c 81       	ldd	r23, Y+4	; 0x04
    163a:	97 fd       	sbrc	r25, 7
    163c:	33 c0       	rjmp	.+102    	; 0x16a4 <_ZN11SimpleTimer8setTimerElPFvvEi+0x8e>
        return -1;
    }

    if (f == NULL) {
    163e:	a1 14       	cp	r10, r1
    1640:	b1 04       	cpc	r11, r1
    1642:	81 f1       	breq	.+96     	; 0x16a4 <_ZN11SimpleTimer8setTimerElPFvvEi+0x8e>
        return -1;
    }

    delays[freeTimer] = d;
    1644:	6c 01       	movw	r12, r24
    1646:	cc 0c       	add	r12, r12
    1648:	dd 1c       	adc	r13, r13
    164a:	cc 0c       	add	r12, r12
    164c:	dd 1c       	adc	r13, r13
    164e:	c8 0c       	add	r12, r8
    1650:	d9 1c       	adc	r13, r9
    1652:	f6 01       	movw	r30, r12
    1654:	fe 96       	adiw	r30, 0x3e	; 62
    1656:	40 83       	st	Z, r20
    1658:	51 83       	std	Z+1, r21	; 0x01
    165a:	62 83       	std	Z+2, r22	; 0x02
    165c:	73 83       	std	Z+3, r23	; 0x03
    165e:	f7 01       	movw	r30, r14
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	e8 0d       	add	r30, r8
    1666:	f9 1d       	adc	r31, r9
    callbacks[freeTimer] = f;
    1668:	b3 a6       	std	Z+43, r11	; 0x2b
    166a:	a2 a6       	std	Z+42, r10	; 0x2a
    maxNumRuns[freeTimer] = n;
    166c:	ea 59       	subi	r30, 0x9A	; 154
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	11 83       	std	Z+1, r17	; 0x01
    1672:	00 83       	st	Z, r16
    enabled[freeTimer] = true;
    1674:	f4 01       	movw	r30, r8
    1676:	ee 0d       	add	r30, r14
    1678:	ff 1d       	adc	r31, r15
    167a:	e2 57       	subi	r30, 0x72	; 114
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 83       	st	Z, r24
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1682:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>

    delays[freeTimer] = d;
    callbacks[freeTimer] = f;
    maxNumRuns[freeTimer] = n;
    enabled[freeTimer] = true;
    prev_millis[freeTimer] = elapsed();
    1686:	f6 01       	movw	r30, r12
    1688:	62 83       	std	Z+2, r22	; 0x02
    168a:	73 83       	std	Z+3, r23	; 0x03
    168c:	84 83       	std	Z+4, r24	; 0x04
    168e:	95 83       	std	Z+5, r25	; 0x05

    numTimers++;
    1690:	f4 01       	movw	r30, r8
    1692:	e4 55       	subi	r30, 0x54	; 84
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24

    return freeTimer;
    16a0:	c7 01       	movw	r24, r14
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <_ZN11SimpleTimer8setTimerElPFvvEi+0x92>
int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    prev_millis[freeTimer] = elapsed();

    numTimers++;

    return freeTimer;
}
    16a8:	24 96       	adiw	r28, 0x04	; 4
    16aa:	ec e0       	ldi	r30, 0x0C	; 12
    16ac:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__epilogue_restores__+0xc>

000016b0 <_ZN15PHSensorStorageD1Ev>:
        Serial.println(_pHValue, 2);
        //}
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}
    16b0:	08 95       	ret

000016b2 <_ZN15PHSensorStorageD0Ev>:
    16b2:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <_ZdlPv>
    16b6:	08 95       	ret

000016b8 <_ZN15PHSensorStorage6OnLoadEv>:
    16b8:	dc 01       	movw	r26, r24
    16ba:	1b 96       	adiw	r26, 0x0b	; 11
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	1c 97       	sbiw	r26, 0x0c	; 12
    16c2:	30 97       	sbiw	r30, 0x00	; 0
    16c4:	c1 f0       	breq	.+48     	; 0x16f6 <_ZN15PHSensorStorage6OnLoadEv+0x3e>
    16c6:	1d 96       	adiw	r26, 0x0d	; 13
    16c8:	6d 91       	ld	r22, X+
    16ca:	7c 91       	ld	r23, X
    16cc:	1e 97       	sbiw	r26, 0x0e	; 14
    16ce:	20 81       	ld	r18, Z
    16d0:	31 81       	ldd	r19, Z+1	; 0x01
    16d2:	a9 01       	movw	r20, r18
    16d4:	4c 5f       	subi	r20, 0xFC	; 252
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	46 0f       	add	r20, r22
    16da:	57 1f       	adc	r21, r23
    16dc:	02 80       	ldd	r0, Z+2	; 0x02
    16de:	f3 81       	ldd	r31, Z+3	; 0x03
    16e0:	e0 2d       	mov	r30, r0
    16e2:	4e 17       	cp	r20, r30
    16e4:	5f 07       	cpc	r21, r31
    16e6:	38 f4       	brcc	.+14     	; 0x16f6 <_ZN15PHSensorStorage6OnLoadEv+0x3e>
    16e8:	62 0f       	add	r22, r18
    16ea:	73 1f       	adc	r23, r19
    16ec:	44 e0       	ldi	r20, 0x04	; 4
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	0f 96       	adiw	r24, 0x0f	; 15
    16f2:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <eeprom_read_block>
    16f6:	08 95       	ret

000016f8 <_ZN15PHSensorStorage6OnSaveEv>:
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e2 e8       	ldi	r30, 0x82	; 130
    16fe:	fb e0       	ldi	r31, 0x0B	; 11
    1700:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__prologue_saves__+0x4>
    1704:	fc 01       	movw	r30, r24
    1706:	e3 84       	ldd	r14, Z+11	; 0x0b
    1708:	f4 84       	ldd	r15, Z+12	; 0x0c
    170a:	e1 14       	cp	r14, r1
    170c:	f1 04       	cpc	r15, r1
    170e:	f1 f1       	breq	.+124    	; 0x178c <_ZN15PHSensorStorage6OnSaveEv+0x94>
    1710:	05 85       	ldd	r16, Z+13	; 0x0d
    1712:	16 85       	ldd	r17, Z+14	; 0x0e
    1714:	d7 01       	movw	r26, r14
    1716:	8d 91       	ld	r24, X+
    1718:	9c 91       	ld	r25, X
    171a:	11 97       	sbiw	r26, 0x01	; 1
    171c:	04 96       	adiw	r24, 0x04	; 4
    171e:	80 0f       	add	r24, r16
    1720:	91 1f       	adc	r25, r17
    1722:	12 96       	adiw	r26, 0x02	; 2
    1724:	2d 91       	ld	r18, X+
    1726:	3c 91       	ld	r19, X
    1728:	13 97       	sbiw	r26, 0x03	; 3
    172a:	82 17       	cp	r24, r18
    172c:	93 07       	cpc	r25, r19
    172e:	70 f5       	brcc	.+92     	; 0x178c <_ZN15PHSensorStorage6OnSaveEv+0x94>
    1730:	ef 01       	movw	r28, r30
    1732:	2f 96       	adiw	r28, 0x0f	; 15
    1734:	48 01       	movw	r8, r16
    1736:	b4 e0       	ldi	r27, 0x04	; 4
    1738:	8b 0e       	add	r8, r27
    173a:	91 1c       	adc	r9, r1
    173c:	58 01       	movw	r10, r16
    173e:	ef ef       	ldi	r30, 0xFF	; 255
    1740:	ae 1a       	sub	r10, r30
    1742:	be 0a       	sbc	r11, r30
    1744:	d7 01       	movw	r26, r14
    1746:	cd 90       	ld	r12, X+
    1748:	dc 90       	ld	r13, X
    174a:	11 97       	sbiw	r26, 0x01	; 1
    174c:	25 01       	movw	r4, r10
    174e:	4c 0c       	add	r4, r12
    1750:	5d 1c       	adc	r5, r13
    1752:	12 96       	adiw	r26, 0x02	; 2
    1754:	6d 90       	ld	r6, X+
    1756:	7c 90       	ld	r7, X
    1758:	13 97       	sbiw	r26, 0x03	; 3
    175a:	46 14       	cp	r4, r6
    175c:	57 04       	cpc	r5, r7
    175e:	30 f4       	brcc	.+12     	; 0x176c <_ZN15PHSensorStorage6OnSaveEv+0x74>
    1760:	c8 01       	movw	r24, r16
    1762:	8c 0d       	add	r24, r12
    1764:	9d 1d       	adc	r25, r13
    1766:	0e 94 67 1f 	call	0x3ece	; 0x3ece <eeprom_read_byte>
    176a:	01 c0       	rjmp	.+2      	; 0x176e <_ZN15PHSensorStorage6OnSaveEv+0x76>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	69 91       	ld	r22, Y+
    1770:	86 17       	cp	r24, r22
    1772:	41 f0       	breq	.+16     	; 0x1784 <_ZN15PHSensorStorage6OnSaveEv+0x8c>
    1774:	46 14       	cp	r4, r6
    1776:	57 04       	cpc	r5, r7
    1778:	28 f4       	brcc	.+10     	; 0x1784 <_ZN15PHSensorStorage6OnSaveEv+0x8c>
    177a:	c8 01       	movw	r24, r16
    177c:	8c 0d       	add	r24, r12
    177e:	9d 1d       	adc	r25, r13
    1780:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <eeprom_write_byte>
    1784:	85 01       	movw	r16, r10
    1786:	a8 14       	cp	r10, r8
    1788:	b9 04       	cpc	r11, r9
    178a:	c1 f6       	brne	.-80     	; 0x173c <_ZN15PHSensorStorage6OnSaveEv+0x44>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	e0 e1       	ldi	r30, 0x10	; 16
    1792:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__epilogue_restores__+0x4>

00001796 <_ZN8PHSensor4InitEv>:
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	8d e0       	ldi	r24, 0x0D	; 13
    17a4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <pinMode>
    17a8:	fe 01       	movw	r30, r28
    17aa:	e2 5a       	subi	r30, 0xA2	; 162
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	88 23       	and	r24, r24
    17b2:	71 f0       	breq	.+28     	; 0x17d0 <_ZN8PHSensor4InitEv+0x3a>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	42 e0       	ldi	r20, 0x02	; 2
    17b8:	60 e1       	ldi	r22, 0x10	; 16
    17ba:	8e 01       	movw	r16, r28
    17bc:	0a 58       	subi	r16, 0x8A	; 138
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	c8 01       	movw	r24, r16
    17c2:	65 d8       	rcall	.-3894   	; 0x88e <_ZN13LiquidCrystal5beginEhhh>
    17c4:	c8 01       	movw	r24, r16
    17c6:	41 d8       	rcall	.-3966   	; 0x84a <_ZN13LiquidCrystal5clearEv>
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	c8 01       	movw	r24, r16
    17ce:	44 d8       	rcall	.-3960   	; 0x858 <_ZN13LiquidCrystal9setCursorEhh>
    17d0:	ce 01       	movw	r24, r28
    17d2:	81 5a       	subi	r24, 0xA1	; 161
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	70 df       	rcall	.-288    	; 0x16b8 <_ZN15PHSensorStorage6OnLoadEv>
    17d8:	fe 01       	movw	r30, r28
    17da:	e2 59       	subi	r30, 0x92	; 146
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	ce 58       	subi	r28, 0x8E	; 142
    17e8:	df 4f       	sbci	r29, 0xFF	; 255
    17ea:	68 83       	st	Y, r22
    17ec:	79 83       	std	Y+1, r23	; 0x01
    17ee:	8a 83       	std	Y+2, r24	; 0x02
    17f0:	9b 83       	std	Y+3, r25	; 0x03
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	b3 d6       	rcall	.+3430   	; 0x255e <__unordsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	21 f0       	breq	.+8      	; 0x1804 <_ZN8PHSensor4InitEv+0x6e>
    17fc:	18 82       	st	Y, r1
    17fe:	19 82       	std	Y+1, r1	; 0x01
    1800:	1a 82       	std	Y+2, r1	; 0x02
    1802:	1b 82       	std	Y+3, r1	; 0x03
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <_ZN8PHSensorC1Eiib>:
    180e:	cf 92       	push	r12
    1810:	ef 92       	push	r14
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
    181c:	79 83       	std	Y+1, r23	; 0x01
    181e:	68 83       	st	Y, r22
    1820:	5b 83       	std	Y+3, r21	; 0x03
    1822:	4a 83       	std	Y+2, r20	; 0x02
    1824:	fc 01       	movw	r30, r24
    1826:	ec 5a       	subi	r30, 0xAC	; 172
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	11 82       	std	Z+1, r1	; 0x01
    182c:	10 82       	st	Z, r1
    182e:	3a 96       	adiw	r30, 0x0a	; 10
    1830:	20 83       	st	Z, r18
    1832:	8c 01       	movw	r16, r24
    1834:	01 5a       	subi	r16, 0xA1	; 161
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	8f e3       	ldi	r24, 0x3F	; 63
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	f8 01       	movw	r30, r16
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
    1842:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZGVZN4erom6Access8instanceEvE6access>
    1846:	81 11       	cpse	r24, r1
    1848:	08 c0       	rjmp	.+16     	; 0x185a <_ZN8PHSensorC1Eiib+0x4c>
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	81 e9       	ldi	r24, 0x91	; 145
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	25 dd       	rcall	.-1462   	; 0x129e <_ZN4erom6AccessC1Ej>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_ZGVZN4erom6Access8instanceEvE6access>
    185a:	81 e9       	ldi	r24, 0x91	; 145
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	f8 01       	movw	r30, r16
    1860:	93 83       	std	Z+3, r25	; 0x03
    1862:	82 83       	std	Z+2, r24	; 0x02
    1864:	15 82       	std	Z+5, r1	; 0x05
    1866:	14 82       	std	Z+4, r1	; 0x04
    1868:	23 e6       	ldi	r18, 0x63	; 99
    186a:	31 e0       	ldi	r19, 0x01	; 1
    186c:	31 83       	std	Z+1, r19	; 0x01
    186e:	20 83       	st	Z, r18
    1870:	fe 01       	movw	r30, r28
    1872:	e6 59       	subi	r30, 0x96	; 150
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    187a:	32 96       	adiw	r30, 0x02	; 2
    187c:	11 82       	std	Z+1, r1	; 0x01
    187e:	10 82       	st	Z, r1
    1880:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_ZZN4erom6Access8instanceEvE6access+0x2>
    1884:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_ZZN4erom6Access8instanceEvE6access+0x3>
    1888:	89 2b       	or	r24, r25
    188a:	29 f0       	breq	.+10     	; 0x1896 <_ZN8PHSensorC1Eiib+0x88>
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	f8 01       	movw	r30, r16
    1892:	95 83       	std	Z+5, r25	; 0x05
    1894:	84 83       	std	Z+4, r24	; 0x04
    1896:	fe 01       	movw	r30, r28
    1898:	ee 58       	subi	r30, 0x8E	; 142
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	10 82       	st	Z, r1
    189e:	11 82       	std	Z+1, r1	; 0x01
    18a0:	12 82       	std	Z+2, r1	; 0x02
    18a2:	13 82       	std	Z+3, r1	; 0x03
    18a4:	87 e0       	ldi	r24, 0x07	; 7
    18a6:	c8 2e       	mov	r12, r24
    18a8:	96 e0       	ldi	r25, 0x06	; 6
    18aa:	e9 2e       	mov	r14, r25
    18ac:	05 e0       	ldi	r16, 0x05	; 5
    18ae:	24 e0       	ldi	r18, 0x04	; 4
    18b0:	49 e0       	ldi	r20, 0x09	; 9
    18b2:	68 e0       	ldi	r22, 0x08	; 8
    18b4:	ce 01       	movw	r24, r28
    18b6:	8a 58       	subi	r24, 0x8A	; 138
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	82 d8       	rcall	.-3836   	; 0x9c0 <_ZN13LiquidCrystalC1Ehhhhhh>
    18bc:	ce 01       	movw	r24, r28
    18be:	6b df       	rcall	.-298    	; 0x1796 <_ZN8PHSensor4InitEv>
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ef 90       	pop	r14
    18ca:	cf 90       	pop	r12
    18cc:	08 95       	ret

000018ce <_ZN8PHSensor6UpdateEd>:
    18ce:	fc 01       	movw	r30, r24
    18d0:	ee 58       	subi	r30, 0x8E	; 142
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	40 83       	st	Z, r20
    18d6:	51 83       	std	Z+1, r21	; 0x01
    18d8:	62 83       	std	Z+2, r22	; 0x02
    18da:	73 83       	std	Z+3, r23	; 0x03
    18dc:	38 97       	sbiw	r30, 0x08	; 8
    18de:	44 83       	std	Z+4, r20	; 0x04
    18e0:	55 83       	std	Z+5, r21	; 0x05
    18e2:	66 83       	std	Z+6, r22	; 0x06
    18e4:	77 83       	std	Z+7, r23	; 0x07
    18e6:	81 5a       	subi	r24, 0xA1	; 161
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	06 cf       	rjmp	.-500    	; 0x16f8 <_ZN15PHSensorStorage6OnSaveEv>
    18ec:	08 95       	ret

000018ee <_ZN8PHSensor5GetPHEv>:
    18ee:	fc 01       	movw	r30, r24
    18f0:	ea 5a       	subi	r30, 0xAA	; 170
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	08 95       	ret

000018fe <_ZN8PHSensor10GetVoltageEv>:
    18fe:	fc 01       	movw	r30, r24
    1900:	e6 5a       	subi	r30, 0xA6	; 166
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	08 95       	ret

0000190e <_ZN8PHSensor12ClearLCDLineEs>:
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}

void PHSensor::ClearLCDLine(short lineNum) {
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	46 2f       	mov	r20, r22
    _lcd.setCursor(0, lineNum);
    1914:	ec 01       	movw	r28, r24
    1916:	ca 58       	subi	r28, 0x8A	; 138
    1918:	df 4f       	sbci	r29, 0xFF	; 255
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN13LiquidCrystal9setCursorEhh>
    _lcd.print(F("                "));
    1922:	6f e4       	ldi	r22, 0x4F	; 79
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN5Print5printEPK19__FlashStringHelper>
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <_ZN8PHSensor12PrintPHToLCDEv>:
        //}
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}
void PHSensor::PrintPHToLCD() {
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    GetPH();
    static unsigned long printTime = millis();
    193c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <_ZGVZN8PHSensor12PrintPHToLCDEvE9printTime>
    1940:	81 11       	cpse	r24, r1
    1942:	0d c0       	rjmp	.+26     	; 0x195e <_ZN8PHSensor12PrintPHToLCDEv+0x2c>
    1944:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1948:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    194c:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    1950:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    1954:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <_ZGVZN8PHSensor12PrintPHToLCDEvE9printTime>
    if(millis() - printTime > _printPHEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    195e:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1962:	00 91 9f 02 	lds	r16, 0x029F	; 0x80029f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    1966:	10 91 a0 02 	lds	r17, 0x02A0	; 0x8002a0 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    196a:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    196e:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    1972:	ab 01       	movw	r20, r22
    1974:	bc 01       	movw	r22, r24
    1976:	40 1b       	sub	r20, r16
    1978:	51 0b       	sbc	r21, r17
    197a:	62 0b       	sbc	r22, r18
    197c:	73 0b       	sbc	r23, r19
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	80 57       	subi	r24, 0x70	; 112
    1984:	9e 4f       	sbci	r25, 0xFE	; 254
    1986:	09 2e       	mov	r0, r25
    1988:	00 0c       	add	r0, r0
    198a:	aa 0b       	sbc	r26, r26
    198c:	bb 0b       	sbc	r27, r27
    198e:	84 17       	cp	r24, r20
    1990:	95 07       	cpc	r25, r21
    1992:	a6 07       	cpc	r26, r22
    1994:	b7 07       	cpc	r27, r23
    1996:	a0 f5       	brcc	.+104    	; 0x1a00 <_ZN8PHSensor12PrintPHToLCDEv+0xce>
        if(_printToLCD) {
    1998:	fe 01       	movw	r30, r28
    199a:	e2 5a       	subi	r30, 0xA2	; 162
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 81       	ld	r24, Z
    19a0:	88 23       	and	r24, r24
    19a2:	e1 f0       	breq	.+56     	; 0x19dc <_ZN8PHSensor12PrintPHToLCDEv+0xaa>

            ClearLCDLine(0);
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	ce 01       	movw	r24, r28
    19aa:	b1 df       	rcall	.-158    	; 0x190e <_ZN8PHSensor12ClearLCDLineEs>
            _lcd.setCursor(0, 0);
    19ac:	8e 01       	movw	r16, r28
    19ae:	0a 58       	subi	r16, 0x8A	; 138
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	c8 01       	movw	r24, r16
    19b8:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN13LiquidCrystal9setCursorEhh>
            _lcd.print(F("PH: "));
    19bc:	60 e6       	ldi	r22, 0x60	; 96
    19be:	71 e0       	ldi	r23, 0x01	; 1
    19c0:	c8 01       	movw	r24, r16
    19c2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN5Print5printEPK19__FlashStringHelper>
            _lcd.print(_pHValue, 2);
    19c6:	ca 5a       	subi	r28, 0xAA	; 170
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	48 81       	ld	r20, Y
    19cc:	59 81       	ldd	r21, Y+1	; 0x01
    19ce:	6a 81       	ldd	r22, Y+2	; 0x02
    19d0:	7b 81       	ldd	r23, Y+3	; 0x03
    19d2:	22 e0       	ldi	r18, 0x02	; 2
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	c8 01       	movw	r24, r16
    19d8:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_ZN5Print5printEdi>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    19dc:	8d e0       	ldi	r24, 0x0D	; 13
    19de:	0e 94 40 19 	call	0x3280	; 0x3280 <digitalRead>
    19e2:	61 e0       	ldi	r22, 0x01	; 1
    19e4:	68 27       	eor	r22, r24
    19e6:	8d e0       	ldi	r24, 0x0D	; 13
    19e8:	0e 94 11 19 	call	0x3222	; 0x3222 <digitalWrite>
        printTime = millis();
    19ec:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    19f0:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    19f4:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    19f8:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    19fc:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    }
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <_ZN8PHSensor16CalculateAverageEPii>:

void PHSensor::ClearLCDLine(short lineNum) {
    _lcd.setCursor(0, lineNum);
    _lcd.print(F("                "));
}
double PHSensor::CalculateAverage(int* arr, int number) {
    1a0a:	a0 e0       	ldi	r26, 0x00	; 0
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	eb e0       	ldi	r30, 0x0B	; 11
    1a10:	fd e0       	ldi	r31, 0x0D	; 13
    1a12:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__prologue_saves__+0xc>
    1a16:	fb 01       	movw	r30, r22
    int i;
    int max, min;
    double avg;
    long amount = 0;
    if(number <= 0) {
    1a18:	14 16       	cp	r1, r20
    1a1a:	15 06       	cpc	r1, r21
    1a1c:	54 f0       	brlt	.+20     	; 0x1a32 <_ZN8PHSensor16CalculateAverageEPii+0x28>
        Serial.println(F("Error number for the array to avraging!/n"));
    1a1e:	65 e2       	ldi	r22, 0x25	; 37
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	88 eb       	ldi	r24, 0xB8	; 184
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	cb 01       	movw	r24, r22
    1a30:	6a c0       	rjmp	.+212    	; 0x1b06 <_ZN8PHSensor16CalculateAverageEPii+0xfc>
        return 0;
    }
    if(number < 5) { //less than 5, calculated directly statistics
    1a32:	45 30       	cpi	r20, 0x05	; 5
    1a34:	51 05       	cpc	r21, r1
    1a36:	f4 f4       	brge	.+60     	; 0x1a74 <_ZN8PHSensor16CalculateAverageEPii+0x6a>
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
        for(i = 0; i < number; i++) {
            amount += arr[i];
    1a42:	c1 90       	ld	r12, Z+
    1a44:	d1 90       	ld	r13, Z+
    1a46:	0d 2c       	mov	r0, r13
    1a48:	00 0c       	add	r0, r0
    1a4a:	ee 08       	sbc	r14, r14
    1a4c:	ff 08       	sbc	r15, r15
    1a4e:	6c 0d       	add	r22, r12
    1a50:	7d 1d       	adc	r23, r13
    1a52:	8e 1d       	adc	r24, r14
    1a54:	9f 1d       	adc	r25, r15
    if(number <= 0) {
        Serial.println(F("Error number for the array to avraging!/n"));
        return 0;
    }
    if(number < 5) { //less than 5, calculated directly statistics
        for(i = 0; i < number; i++) {
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	24 17       	cp	r18, r20
    1a5c:	35 07       	cpc	r19, r21
    1a5e:	89 f7       	brne	.-30     	; 0x1a42 <_ZN8PHSensor16CalculateAverageEPii+0x38>
            amount += arr[i];
        }
        avg = amount / number;
    1a60:	03 2e       	mov	r0, r19
    1a62:	00 0c       	add	r0, r0
    1a64:	44 0b       	sbc	r20, r20
    1a66:	55 0b       	sbc	r21, r21
    1a68:	0e 94 8b 19 	call	0x3316	; 0x3316 <__divmodsi4>
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	b9 01       	movw	r22, r18
    1a70:	c8 d3       	rcall	.+1936   	; 0x2202 <__floatsisf>
        return avg;
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <_ZN8PHSensor16CalculateAverageEPii+0xfc>
    }
    else {
        if(arr[0] < arr[1]) {
    1a74:	a0 81       	ld	r26, Z
    1a76:	b1 81       	ldd	r27, Z+1	; 0x01
    1a78:	22 81       	ldd	r18, Z+2	; 0x02
    1a7a:	33 81       	ldd	r19, Z+3	; 0x03
    1a7c:	a2 17       	cp	r26, r18
    1a7e:	b3 07       	cpc	r27, r19
    1a80:	2c f0       	brlt	.+10     	; 0x1a8c <_ZN8PHSensor16CalculateAverageEPii+0x82>
    1a82:	72 2f       	mov	r23, r18
    1a84:	63 2f       	mov	r22, r19
    1a86:	9d 01       	movw	r18, r26
    1a88:	a7 2f       	mov	r26, r23
    1a8a:	b6 2f       	mov	r27, r22
    1a8c:	34 96       	adiw	r30, 0x04	; 4
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	cb 01       	movw	r24, r22
    1a94:	c2 e0       	ldi	r28, 0x02	; 2
    1a96:	d0 e0       	ldi	r29, 0x00	; 0
        else {
            min = arr[1];
            max = arr[0];
        }
        for(i = 2; i < number; i++) {
            if(arr[i] < min) {
    1a98:	81 90       	ld	r8, Z+
    1a9a:	91 90       	ld	r9, Z+
    1a9c:	8a 16       	cp	r8, r26
    1a9e:	9b 06       	cpc	r9, r27
    1aa0:	54 f4       	brge	.+20     	; 0x1ab6 <_ZN8PHSensor16CalculateAverageEPii+0xac>
                amount += min;      //arr<min
    1aa2:	6d 01       	movw	r12, r26
    1aa4:	bb 0f       	add	r27, r27
    1aa6:	ee 08       	sbc	r14, r14
    1aa8:	ff 08       	sbc	r15, r15
    1aaa:	6c 0d       	add	r22, r12
    1aac:	7d 1d       	adc	r23, r13
    1aae:	8e 1d       	adc	r24, r14
    1ab0:	9f 1d       	adc	r25, r15
    1ab2:	d4 01       	movw	r26, r8
    1ab4:	15 c0       	rjmp	.+42     	; 0x1ae0 <_ZN8PHSensor16CalculateAverageEPii+0xd6>
                min = arr[i];
            }
            else {
                if(arr[i] > max) {
    1ab6:	28 15       	cp	r18, r8
    1ab8:	39 05       	cpc	r19, r9
    1aba:	54 f4       	brge	.+20     	; 0x1ad0 <_ZN8PHSensor16CalculateAverageEPii+0xc6>
                    amount += max;  //arr>max
    1abc:	89 01       	movw	r16, r18
    1abe:	33 0f       	add	r19, r19
    1ac0:	22 0b       	sbc	r18, r18
    1ac2:	33 0b       	sbc	r19, r19
    1ac4:	60 0f       	add	r22, r16
    1ac6:	71 1f       	adc	r23, r17
    1ac8:	82 1f       	adc	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	94 01       	movw	r18, r8
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <_ZN8PHSensor16CalculateAverageEPii+0xd6>
                    max = arr[i];
                }
                else {
                    amount += arr[i]; //min<=arr<=max
    1ad0:	09 2c       	mov	r0, r9
    1ad2:	00 0c       	add	r0, r0
    1ad4:	aa 08       	sbc	r10, r10
    1ad6:	bb 08       	sbc	r11, r11
    1ad8:	68 0d       	add	r22, r8
    1ada:	79 1d       	adc	r23, r9
    1adc:	8a 1d       	adc	r24, r10
    1ade:	9b 1d       	adc	r25, r11
        }
        else {
            min = arr[1];
            max = arr[0];
        }
        for(i = 2; i < number; i++) {
    1ae0:	21 96       	adiw	r28, 0x01	; 1
    1ae2:	c4 17       	cp	r28, r20
    1ae4:	d5 07       	cpc	r29, r21
    1ae6:	c1 f6       	brne	.-80     	; 0x1a98 <_ZN8PHSensor16CalculateAverageEPii+0x8e>
                else {
                    amount += arr[i]; //min<=arr<=max
                }
            }//if
        }//for
        avg = (double)amount / (number - 2);
    1ae8:	8c d3       	rcall	.+1816   	; 0x2202 <__floatsisf>
    1aea:	6b 01       	movw	r12, r22
    1aec:	7c 01       	movw	r14, r24
    1aee:	ce 01       	movw	r24, r28
    1af0:	02 97       	sbiw	r24, 0x02	; 2
    1af2:	bc 01       	movw	r22, r24
    1af4:	99 0f       	add	r25, r25
    1af6:	88 0b       	sbc	r24, r24
    1af8:	99 0b       	sbc	r25, r25
    1afa:	83 d3       	rcall	.+1798   	; 0x2202 <__floatsisf>
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	c7 01       	movw	r24, r14
    1b02:	b6 01       	movw	r22, r12
    1b04:	e3 d2       	rcall	.+1478   	; 0x20cc <__divsf3>
    }//if
    return avg;
}
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	ec e0       	ldi	r30, 0x0C	; 12
    1b0c:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__epilogue_restores__+0xc>

00001b10 <_ZN8PHSensor10GetPHValueEv>:
    float phAverage = phTotal / numOfSamples;
    _pHValue = phAverage;

}

double PHSensor::GetPHValue() {
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    static unsigned long samplingTime = millis();
    1b1e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZGVZN8PHSensor10GetPHValueEvE12samplingTime>
    1b22:	81 11       	cpse	r24, r1
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <_ZN8PHSensor10GetPHValueEv+0x30>
    1b26:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1b2a:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    1b2e:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    1b32:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    1b36:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZGVZN8PHSensor10GetPHValueEvE12samplingTime>
    if(millis() - samplingTime > 60) {
    1b40:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1b44:	00 91 a3 02 	lds	r16, 0x02A3	; 0x8002a3 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    1b48:	10 91 a4 02 	lds	r17, 0x02A4	; 0x8002a4 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    1b4c:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    1b50:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	80 1b       	sub	r24, r16
    1b5a:	91 0b       	sbc	r25, r17
    1b5c:	a2 0b       	sbc	r26, r18
    1b5e:	b3 0b       	sbc	r27, r19
    1b60:	cd 97       	sbiw	r24, 0x3d	; 61
    1b62:	a1 05       	cpc	r26, r1
    1b64:	b1 05       	cpc	r27, r1
    1b66:	08 f4       	brcc	.+2      	; 0x1b6a <_ZN8PHSensor10GetPHValueEv+0x5a>
    1b68:	42 c0       	rjmp	.+132    	; 0x1bee <_ZN8PHSensor10GetPHValueEv+0xde>
        _pHAverage[_pHArrayIndex++] = analogRead(_pin);
    1b6a:	7e 01       	movw	r14, r28
    1b6c:	84 e5       	ldi	r24, 0x54	; 84
    1b6e:	e8 0e       	add	r14, r24
    1b70:	f1 1c       	adc	r15, r1
    1b72:	f7 01       	movw	r30, r14
    1b74:	00 81       	ld	r16, Z
    1b76:	11 81       	ldd	r17, Z+1	; 0x01
    1b78:	c8 01       	movw	r24, r16
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	88 81       	ld	r24, Y
    1b82:	0e 94 8f 18 	call	0x311e	; 0x311e <analogRead>
    1b86:	f8 01       	movw	r30, r16
    1b88:	32 96       	adiw	r30, 0x02	; 2
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	ec 0f       	add	r30, r28
    1b90:	fd 1f       	adc	r31, r29
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
        if(_pHArrayIndex == 40) {
    1b96:	f7 01       	movw	r30, r14
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	88 97       	sbiw	r24, 0x28	; 40
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <_ZN8PHSensor10GetPHValueEv+0x94>
            _pHArrayIndex = 0;
    1ba0:	11 82       	std	Z+1, r1	; 0x01
    1ba2:	10 82       	st	Z, r1
        }
        _voltage = CalculateAverage(_pHAverage, 40) * 5.0 / 1024;
    1ba4:	be 01       	movw	r22, r28
    1ba6:	6c 5f       	subi	r22, 0xFC	; 252
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	48 e2       	ldi	r20, 0x28	; 40
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	ce 01       	movw	r24, r28
    1bb0:	2c df       	rcall	.-424    	; 0x1a0a <_ZN8PHSensor16CalculateAverageEPii>
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 ea       	ldi	r20, 0xA0	; 160
    1bb8:	50 e4       	ldi	r21, 0x40	; 64
    1bba:	22 d4       	rcall	.+2116   	; 0x2400 <__mulsf3>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5a e3       	ldi	r21, 0x3A	; 58
    1bc4:	1d d4       	rcall	.+2106   	; 0x2400 <__mulsf3>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e6 5a       	subi	r30, 0xA6	; 166
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 83       	st	Z, r22
    1bce:	71 83       	std	Z+1, r23	; 0x01
    1bd0:	82 83       	std	Z+2, r24	; 0x02
    1bd2:	93 83       	std	Z+3, r25	; 0x03
        float pHVal = 1.5 * _voltage + _offset;
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 ec       	ldi	r20, 0xC0	; 192
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	11 d4       	rcall	.+2082   	; 0x2400 <__mulsf3>
    1bde:	ce 58       	subi	r28, 0x8E	; 142
    1be0:	df 4f       	sbci	r29, 0xFF	; 255
    1be2:	28 81       	ld	r18, Y
    1be4:	39 81       	ldd	r19, Y+1	; 0x01
    1be6:	4a 81       	ldd	r20, Y+2	; 0x02
    1be8:	5b 81       	ldd	r21, Y+3	; 0x03
    1bea:	08 d2       	rcall	.+1040   	; 0x1ffc <__addsf3>
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <_ZN8PHSensor10GetPHValueEv+0xea>
        return pHVal;
        samplingTime = millis();
    }
    return _pHValue;
    1bee:	ca 5a       	subi	r28, 0xAA	; 170
    1bf0:	df 4f       	sbci	r29, 0xFF	; 255
    1bf2:	68 81       	ld	r22, Y
    1bf4:	79 81       	ldd	r23, Y+1	; 0x01
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	e6 e0       	ldi	r30, 0x06	; 6
    1c00:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__+0x18>

00001c04 <_ZN8PHSensor11CalculatePHEv>:

    return _pHValue;

}

void PHSensor::CalculatePH() {
    1c04:	8f 92       	push	r8
    1c06:	9f 92       	push	r9
    1c08:	af 92       	push	r10
    1c0a:	bf 92       	push	r11
    1c0c:	cf 92       	push	r12
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	ec 01       	movw	r28, r24
    float phTotal = GetPHValue();
    1c1a:	7a df       	rcall	.-268    	; 0x1b10 <_ZN8PHSensor10GetPHValueEv>
    1c1c:	4b 01       	movw	r8, r22
    1c1e:	5c 01       	movw	r10, r24
    1c20:	84 e6       	ldi	r24, 0x64	; 100
    1c22:	c8 2e       	mov	r12, r24
    1c24:	d1 2c       	mov	r13, r1
    1c26:	e1 2c       	mov	r14, r1
    1c28:	f1 2c       	mov	r15, r1
    int numOfSamples = 1;

    for(int i = 0; i <= 20; i++) {
        int wait = i + 100;
        delay(wait);
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
        float phVal = GetPHValue();
    1c32:	ce 01       	movw	r24, r28
    1c34:	6d df       	rcall	.-294    	; 0x1b10 <_ZN8PHSensor10GetPHValueEv>
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
        phTotal += phVal;
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	b4 01       	movw	r22, r8
    1c3e:	de d1       	rcall	.+956    	; 0x1ffc <__addsf3>
    1c40:	4b 01       	movw	r8, r22
    1c42:	5c 01       	movw	r10, r24
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	c8 1a       	sub	r12, r24
    1c48:	d8 0a       	sbc	r13, r24
    1c4a:	e8 0a       	sbc	r14, r24
    1c4c:	f8 0a       	sbc	r15, r24

void PHSensor::CalculatePH() {
    float phTotal = GetPHValue();
    int numOfSamples = 1;

    for(int i = 0; i <= 20; i++) {
    1c4e:	89 e7       	ldi	r24, 0x79	; 121
    1c50:	c8 16       	cp	r12, r24
    1c52:	d1 04       	cpc	r13, r1
    1c54:	e1 04       	cpc	r14, r1
    1c56:	f1 04       	cpc	r15, r1
    1c58:	41 f7       	brne	.-48     	; 0x1c2a <_ZN8PHSensor11CalculatePHEv+0x26>
        float phVal = GetPHValue();
        phTotal += phVal;
        numOfSamples++;
    }
    float phAverage = phTotal / numOfSamples;
    _pHValue = phAverage;
    1c5a:	ca 5a       	subi	r28, 0xAA	; 170
    1c5c:	df 4f       	sbci	r29, 0xFF	; 255
        delay(wait);
        float phVal = GetPHValue();
        phTotal += phVal;
        numOfSamples++;
    }
    float phAverage = phTotal / numOfSamples;
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 eb       	ldi	r20, 0xB0	; 176
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	c5 01       	movw	r24, r10
    1c68:	b4 01       	movw	r22, r8
    1c6a:	30 d2       	rcall	.+1120   	; 0x20cc <__divsf3>
    _pHValue = phAverage;
    1c6c:	68 83       	st	Y, r22
    1c6e:	79 83       	std	Y+1, r23	; 0x01
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	9b 83       	std	Y+3, r25	; 0x03

}
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	9f 90       	pop	r9
    1c86:	8f 90       	pop	r8
    1c88:	08 95       	ret

00001c8a <_Z11AsyncDoWorkv>:
    }

    // Callback function that responds that Arduino is ready (has booted up)
    void OnArduinoReady() {
        _cmdMessenger.sendCmd(kAcknowledge, F("Arduino ready"));
    }
    1c8a:	8a e2       	ldi	r24, 0x2A	; 42
    1c8c:	96 e0       	ldi	r25, 0x06	; 6
    1c8e:	ba cf       	rjmp	.-140    	; 0x1c04 <_ZN8PHSensor11CalculatePHEv>
    1c90:	08 95       	ret

00001c92 <_ZN15CmdMessengerExt13OnSetPHOffsetEv>:
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	8e e6       	ldi	r24, 0x6E	; 110
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	9e d9       	rcall	.-3268   	; 0xfdc <_ZN12CmdMessenger12readFloatArgEv>
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	ab 01       	movw	r20, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	8a e2       	ldi	r24, 0x2A	; 42
    1caa:	96 e0       	ldi	r25, 0x06	; 6
    1cac:	10 de       	rcall	.-992    	; 0x18ce <_ZN8PHSensor6UpdateEd>
    1cae:	65 e0       	ldi	r22, 0x05	; 5
    1cb0:	8e e6       	ldi	r24, 0x6E	; 110
    1cb2:	93 e0       	ldi	r25, 0x03	; 3
    1cb4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN12CmdMessenger12sendCmdStartEh>
    1cb8:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN15CmdMessengerExt13_cmdMessengerE>
    1cbc:	88 23       	and	r24, r24
    1cbe:	89 f0       	breq	.+34     	; 0x1ce2 <_ZN15CmdMessengerExt13OnSetPHOffsetEv+0x50>
    1cc0:	60 91 c2 05 	lds	r22, 0x05C2	; 0x8005c2 <_ZN15CmdMessengerExt13_cmdMessengerE+0x254>
    1cc4:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN15CmdMessengerExt13_cmdMessengerE+0x251>
    1cc8:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <_ZN15CmdMessengerExt13_cmdMessengerE+0x252>
    1ccc:	44 d7       	rcall	.+3720   	; 0x2b56 <_ZN5Print5printEc>
    1cce:	22 e0       	ldi	r18, 0x02	; 2
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	a6 01       	movw	r20, r12
    1cd6:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN15CmdMessengerExt13_cmdMessengerE+0x251>
    1cda:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <_ZN15CmdMessengerExt13_cmdMessengerE+0x252>
    1cde:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_ZN5Print5printEdi>
    1ce2:	28 e8       	ldi	r18, 0x88	; 136
    1ce4:	33 e1       	ldi	r19, 0x13	; 19
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	8e e6       	ldi	r24, 0x6E	; 110
    1cec:	93 e0       	ldi	r25, 0x03	; 3
    1cee:	98 d8       	rcall	.-3792   	; 0xe20 <_ZN12CmdMessenger10sendCmdEndEbhj>
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	cf 90       	pop	r12
    1cf8:	08 95       	ret

00001cfa <_ZN15CmdMessengerExt22AttachCommandCallbacksEv>:
    1cfa:	65 e9       	ldi	r22, 0x95	; 149
    1cfc:	7f e0       	ldi	r23, 0x0F	; 15
    1cfe:	8e e6       	ldi	r24, 0x6E	; 110
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN12CmdMessenger6attachEPFvvE>
    1d06:	48 ea       	ldi	r20, 0xA8	; 168
    1d08:	5f e0       	ldi	r21, 0x0F	; 15
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	8e e6       	ldi	r24, 0x6E	; 110
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN12CmdMessenger6attachEhPFvvE>
    1d14:	49 e4       	ldi	r20, 0x49	; 73
    1d16:	5e e0       	ldi	r21, 0x0E	; 14
    1d18:	64 e0       	ldi	r22, 0x04	; 4
    1d1a:	8e e6       	ldi	r24, 0x6E	; 110
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN12CmdMessenger6attachEhPFvvE>
    1d22:	42 e8       	ldi	r20, 0x82	; 130
    1d24:	5f e0       	ldi	r21, 0x0F	; 15
    1d26:	66 e0       	ldi	r22, 0x06	; 6
    1d28:	8e e6       	ldi	r24, 0x6E	; 110
    1d2a:	93 e0       	ldi	r25, 0x03	; 3
    1d2c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_ZN12CmdMessenger6attachEhPFvvE>
    1d30:	08 95       	ret

00001d32 <_ZN15CmdMessengerExt6SendPHEv>:
    1d32:	4f 92       	push	r4
    1d34:	5f 92       	push	r5
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	8f 92       	push	r8
    1d3c:	9f 92       	push	r9
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <_ZN15CmdMessengerExt6SendPHEv+0x1e>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <_ZN15CmdMessengerExt6SendPHEv+0x20>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	8a e2       	ldi	r24, 0x2A	; 42
    1d58:	96 e0       	ldi	r25, 0x06	; 6
    1d5a:	c9 dd       	rcall	.-1134   	; 0x18ee <_ZN8PHSensor5GetPHEv>
    1d5c:	2b 01       	movw	r4, r22
    1d5e:	3c 01       	movw	r6, r24
    1d60:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1d64:	6b 01       	movw	r12, r22
    1d66:	7c 01       	movw	r14, r24
    1d68:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <_ZN15CmdMessengerExt15_startAcqMillisE>
    1d6c:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <_ZN15CmdMessengerExt15_startAcqMillisE+0x1>
    1d70:	40 91 67 03 	lds	r20, 0x0367	; 0x800367 <_ZN15CmdMessengerExt15_startAcqMillisE+0x2>
    1d74:	50 91 68 03 	lds	r21, 0x0368	; 0x800368 <_ZN15CmdMessengerExt15_startAcqMillisE+0x3>
    1d78:	29 83       	std	Y+1, r18	; 0x01
    1d7a:	3a 83       	std	Y+2, r19	; 0x02
    1d7c:	4b 83       	std	Y+3, r20	; 0x03
    1d7e:	5c 83       	std	Y+4, r21	; 0x04
    1d80:	8a e2       	ldi	r24, 0x2A	; 42
    1d82:	96 e0       	ldi	r25, 0x06	; 6
    1d84:	bc dd       	rcall	.-1160   	; 0x18fe <_ZN8PHSensor10GetVoltageEv>
    1d86:	4b 01       	movw	r8, r22
    1d88:	5c 01       	movw	r10, r24
    1d8a:	63 e0       	ldi	r22, 0x03	; 3
    1d8c:	8e e6       	ldi	r24, 0x6E	; 110
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN12CmdMessenger12sendCmdStartEh>
    1d94:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN15CmdMessengerExt13_cmdMessengerE>
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f1       	breq	.+66     	; 0x1dde <_ZN15CmdMessengerExt6SendPHEv+0xac>
    1d9c:	60 91 c2 05 	lds	r22, 0x05C2	; 0x8005c2 <_ZN15CmdMessengerExt13_cmdMessengerE+0x254>
    1da0:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN15CmdMessengerExt13_cmdMessengerE+0x251>
    1da4:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <_ZN15CmdMessengerExt13_cmdMessengerE+0x252>
    1da8:	d6 d6       	rcall	.+3500   	; 0x2b56 <_ZN5Print5printEc>
    1daa:	c7 01       	movw	r24, r14
    1dac:	b6 01       	movw	r22, r12
    1dae:	29 81       	ldd	r18, Y+1	; 0x01
    1db0:	3a 81       	ldd	r19, Y+2	; 0x02
    1db2:	4b 81       	ldd	r20, Y+3	; 0x03
    1db4:	5c 81       	ldd	r21, Y+4	; 0x04
    1db6:	62 1b       	sub	r22, r18
    1db8:	73 0b       	sbc	r23, r19
    1dba:	84 0b       	sbc	r24, r20
    1dbc:	95 0b       	sbc	r25, r21
    1dbe:	1f d2       	rcall	.+1086   	; 0x21fe <__floatunsisf>
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	81 d1       	rcall	.+770    	; 0x20cc <__divsf3>
    1dca:	ab 01       	movw	r20, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	24 e0       	ldi	r18, 0x04	; 4
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN15CmdMessengerExt13_cmdMessengerE+0x251>
    1dd6:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <_ZN15CmdMessengerExt13_cmdMessengerE+0x252>
    1dda:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_ZN5Print5printEdi>
    1dde:	22 e0       	ldi	r18, 0x02	; 2
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	b3 01       	movw	r22, r6
    1de4:	a2 01       	movw	r20, r4
    1de6:	8e e6       	ldi	r24, 0x6E	; 110
    1de8:	93 e0       	ldi	r25, 0x03	; 3
    1dea:	30 da       	rcall	.-2976   	; 0x124c <_ZN12CmdMessenger13sendCmdSciArgEdj>
    1dec:	22 e0       	ldi	r18, 0x02	; 2
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	b5 01       	movw	r22, r10
    1df2:	a4 01       	movw	r20, r8
    1df4:	8e e6       	ldi	r24, 0x6E	; 110
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	29 da       	rcall	.-2990   	; 0x124c <_ZN12CmdMessenger13sendCmdSciArgEdj>
    1dfa:	28 e8       	ldi	r18, 0x88	; 136
    1dfc:	33 e1       	ldi	r19, 0x13	; 19
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	8e e6       	ldi	r24, 0x6E	; 110
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0c d8       	rcall	.-4072   	; 0xe20 <_ZN12CmdMessenger10sendCmdEndEbhj>
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	9f 90       	pop	r9
    1e22:	8f 90       	pop	r8
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	08 95       	ret

00001e2e <_ZN15CmdMessengerExt10HasExpiredERmm>:
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ed e1       	ldi	r30, 0x1D	; 29
    1e34:	ff e0       	ldi	r31, 0x0F	; 15
    1e36:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__+0x14>
    1e3a:	ec 01       	movw	r28, r24
    1e3c:	6a 01       	movw	r12, r20
    1e3e:	7b 01       	movw	r14, r22
    1e40:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1e44:	08 81       	ld	r16, Y
    1e46:	19 81       	ldd	r17, Y+1	; 0x01
    1e48:	2a 81       	ldd	r18, Y+2	; 0x02
    1e4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	80 1b       	sub	r24, r16
    1e52:	91 0b       	sbc	r25, r17
    1e54:	a2 0b       	sbc	r26, r18
    1e56:	b3 0b       	sbc	r27, r19
    1e58:	c8 16       	cp	r12, r24
    1e5a:	d9 06       	cpc	r13, r25
    1e5c:	ea 06       	cpc	r14, r26
    1e5e:	fb 06       	cpc	r15, r27
    1e60:	40 f4       	brcc	.+16     	; 0x1e72 <_ZN15CmdMessengerExt10HasExpiredERmm+0x44>
    1e62:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1e66:	68 83       	st	Y, r22
    1e68:	79 83       	std	Y+1, r23	; 0x01
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	9b 83       	std	Y+3, r25	; 0x03
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <_ZN15CmdMessengerExt10HasExpiredERmm+0x46>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	e8 e0       	ldi	r30, 0x08	; 8
    1e7a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__+0x14>

00001e7e <_ZN15CmdMessengerExt4LoopEv>:
    1e7e:	8e e6       	ldi	r24, 0x6E	; 110
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN12CmdMessenger16feedinSerialDataEv>
    1e86:	48 ee       	ldi	r20, 0xE8	; 232
    1e88:	53 e0       	ldi	r21, 0x03	; 3
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	89 e6       	ldi	r24, 0x69	; 105
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	cd df       	rcall	.-102    	; 0x1e2e <_ZN15CmdMessengerExt10HasExpiredERmm>
    1e94:	88 23       	and	r24, r24
    1e96:	21 f0       	breq	.+8      	; 0x1ea0 <_ZN15CmdMessengerExt4LoopEv+0x22>
    1e98:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ZN15CmdMessengerExt12_acquireDataE>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	49 cf       	rjmp	.-366    	; 0x1d32 <_ZN15CmdMessengerExt6SendPHEv>
    1ea0:	08 95       	ret

00001ea2 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>:
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e7 e5       	ldi	r30, 0x57	; 87
    1ea8:	ff e0       	ldi	r31, 0x0F	; 15
    1eaa:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__prologue_saves__+0x10>
    1eae:	fc 01       	movw	r30, r24
    1eb0:	30 81       	ld	r19, Z
    1eb2:	31 11       	cpse	r19, r1
    1eb4:	21 c0       	rjmp	.+66     	; 0x1ef8 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj+0x56>
    1eb6:	12 2f       	mov	r17, r18
    1eb8:	5a 01       	movw	r10, r20
    1eba:	ec 01       	movw	r28, r24
    1ebc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN12CmdMessenger12sendCmdStartEh>
    1ec0:	88 81       	ld	r24, Y
    1ec2:	88 23       	and	r24, r24
    1ec4:	91 f0       	breq	.+36     	; 0x1eea <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj+0x48>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ec 5a       	subi	r30, 0xAC	; 172
    1eca:	fd 4f       	sbci	r31, 0xFD	; 253
    1ecc:	60 81       	ld	r22, Z
    1ece:	6e 01       	movw	r12, r28
    1ed0:	ff ea       	ldi	r31, 0xAF	; 175
    1ed2:	cf 1a       	sub	r12, r31
    1ed4:	fd ef       	ldi	r31, 0xFD	; 253
    1ed6:	df 0a       	sbc	r13, r31
    1ed8:	f6 01       	movw	r30, r12
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	3b d6       	rcall	.+3190   	; 0x2b56 <_ZN5Print5printEc>
    1ee0:	b5 01       	movw	r22, r10
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	11 d6       	rcall	.+3106   	; 0x2b0c <_ZN5Print5printEPK19__FlashStringHelper>
    1eea:	97 01       	movw	r18, r14
    1eec:	40 2f       	mov	r20, r16
    1eee:	61 2f       	mov	r22, r17
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZN12CmdMessenger10sendCmdEndEbhj>
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj+0x58>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	ea e0       	ldi	r30, 0x0A	; 10
    1f00:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <__epilogue_restores__+0x10>

00001f04 <_ZN15CmdMessengerExt17OnIdentifyRequestEv>:
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	88 e8       	ldi	r24, 0x88	; 136
    1f0c:	e8 2e       	mov	r14, r24
    1f0e:	83 e1       	ldi	r24, 0x13	; 19
    1f10:	f8 2e       	mov	r15, r24
    1f12:	01 e0       	ldi	r16, 0x01	; 1
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	45 e9       	ldi	r20, 0x95	; 149
    1f18:	51 e0       	ldi	r21, 0x01	; 1
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	8e e6       	ldi	r24, 0x6E	; 110
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	c0 df       	rcall	.-128    	; 0x1ea2 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	08 95       	ret

00001f2a <_ZN15CmdMessengerExt16OnUnknownCommandEv>:
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	88 e8       	ldi	r24, 0x88	; 136
    1f32:	e8 2e       	mov	r14, r24
    1f34:	83 e1       	ldi	r24, 0x13	; 19
    1f36:	f8 2e       	mov	r15, r24
    1f38:	01 e0       	ldi	r16, 0x01	; 1
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	43 e7       	ldi	r20, 0x73	; 115
    1f3e:	51 e0       	ldi	r21, 0x01	; 1
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	8e e6       	ldi	r24, 0x6E	; 110
    1f44:	93 e0       	ldi	r25, 0x03	; 3
    1f46:	ad df       	rcall	.-166    	; 0x1ea2 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	08 95       	ret

00001f50 <_ZN15CmdMessengerExt14OnStartLoggingEv>:

    // Callback function calculates the sum of the two received float values
    void OnStartLogging() {
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
        // Start data acquisition
        _startAcqMillis = millis();
    1f56:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
    1f5a:	60 93 65 03 	sts	0x0365, r22	; 0x800365 <_ZN15CmdMessengerExt15_startAcqMillisE>
    1f5e:	70 93 66 03 	sts	0x0366, r23	; 0x800366 <_ZN15CmdMessengerExt15_startAcqMillisE+0x1>
    1f62:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <_ZN15CmdMessengerExt15_startAcqMillisE+0x2>
    1f66:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <_ZN15CmdMessengerExt15_startAcqMillisE+0x3>
        _acquireData    = true;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <_ZN15CmdMessengerExt12_acquireDataE>
        _cmdMessenger.sendCmd(kAcknowledge, F("Start Logging"));
    1f70:	88 e8       	ldi	r24, 0x88	; 136
    1f72:	e8 2e       	mov	r14, r24
    1f74:	83 e1       	ldi	r24, 0x13	; 19
    1f76:	f8 2e       	mov	r15, r24
    1f78:	01 e0       	ldi	r16, 0x01	; 1
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	45 e6       	ldi	r20, 0x65	; 101
    1f7e:	51 e0       	ldi	r21, 0x01	; 1
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	8e e6       	ldi	r24, 0x6E	; 110
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	8d df       	rcall	.-230    	; 0x1ea2 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    }
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	08 95       	ret

00001f90 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    CmdMessengerExt::Loop();
}

void AsyncDoWork() {
    ThePHSensor.CalculatePH();
}
    1f90:	0f 93       	push	r16


namespace Globals {
    int _phSensorPin = A5;//A15;

    PHSensor ThePHSensor(_phSensorPin, 2000, true);
    1f92:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZN7Globals12_phSensorPinE>
    1f96:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZN7Globals12_phSensorPinE+0x1>
    1f9a:	21 e0       	ldi	r18, 0x01	; 1
    1f9c:	40 ed       	ldi	r20, 0xD0	; 208
    1f9e:	57 e0       	ldi	r21, 0x07	; 7
    1fa0:	8a e2       	ldi	r24, 0x2A	; 42
    1fa2:	96 e0       	ldi	r25, 0x06	; 6
    1fa4:	34 dc       	rcall	.-1944   	; 0x180e <_ZN8PHSensorC1Eiib>

////remeber: dependant functions must be defined first in namespace.
///**Better to use template functions.
namespace CmdMessengerExt {

    CmdMessenger _cmdMessenger = CmdMessenger(Serial);
    1fa6:	0f e2       	ldi	r16, 0x2F	; 47
    1fa8:	2b e3       	ldi	r18, 0x3B	; 59
    1faa:	4c e2       	ldi	r20, 0x2C	; 44
    1fac:	68 eb       	ldi	r22, 0xB8	; 184
    1fae:	76 e0       	ldi	r23, 0x06	; 6
    1fb0:	8e e6       	ldi	r24, 0x6E	; 110
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN12CmdMessengerC1ER6Streamccc>

#include "_globalsWaterSensors.h"
#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    1fb8:	87 eb       	ldi	r24, 0xB7	; 183
    1fba:	92 e0       	ldi	r25, 0x02	; 2
    1fbc:	d9 da       	rcall	.-2638   	; 0x1570 <_ZN11SimpleTimerC1Ev>
    CmdMessengerExt::Loop();
}

void AsyncDoWork() {
    ThePHSensor.CalculatePH();
}
    1fbe:	0f 91       	pop	r16
    1fc0:	08 95       	ret

00001fc2 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    1fc2:	08 95       	ret

00001fc4 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1fc4:	26 e0       	ldi	r18, 0x06	; 6
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	55 e2       	ldi	r21, 0x25	; 37
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	88 eb       	ldi	r24, 0xB8	; 184
    1fd0:	96 e0       	ldi	r25, 0x06	; 6
    1fd2:	60 d4       	rcall	.+2240   	; 0x2894 <_ZN14HardwareSerial5beginEmh>

void setup(void) {
    // Listen on serial connection for messages from the pc
    Serial.begin(9600);
    while(!Serial);
    _asyncTimer.setInterval(1000, AsyncDoWork);
    1fd4:	25 e4       	ldi	r18, 0x45	; 69
    1fd6:	3e e0       	ldi	r19, 0x0E	; 14
    1fd8:	48 ee       	ldi	r20, 0xE8	; 232
    1fda:	53 e0       	ldi	r21, 0x03	; 3
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	87 eb       	ldi	r24, 0xB7	; 183
    1fe2:	92 e0       	ldi	r25, 0x02	; 2
    1fe4:	7c d9       	rcall	.-3336   	; 0x12de <_ZN11SimpleTimer11setIntervalElPFvvE>

        // Adds newline to every command
        //_cmdMessenger.printLfCr();

        // Attach my application's user-defined callback methods
        AttachCommandCallbacks();
    1fe6:	89 ce       	rjmp	.-750    	; 0x1cfa <_ZN15CmdMessengerExt22AttachCommandCallbacksEv>
    1fe8:	08 95       	ret

00001fea <loop>:

    CmdMessengerExt::Init();
}

void loop(void) {
    _asyncTimer.run();
    1fea:	87 eb       	ldi	r24, 0xB7	; 183
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	b4 d9       	rcall	.-3224   	; 0x1358 <_ZN11SimpleTimer3runEv>

    //_phSensor.PrintPHToSerial();
    ThePHSensor.PrintPHToLCD();
    1ff0:	8a e2       	ldi	r24, 0x2A	; 42
    1ff2:	96 e0       	ldi	r25, 0x06	; 6
    1ff4:	9e dc       	rcall	.-1732   	; 0x1932 <_ZN8PHSensor12PrintPHToLCDEv>

    CmdMessengerExt::Loop();
    1ff6:	43 cf       	rjmp	.-378    	; 0x1e7e <_ZN15CmdMessengerExt4LoopEv>
    1ff8:	08 95       	ret

00001ffa <__subsf3>:
    1ffa:	50 58       	subi	r21, 0x80	; 128

00001ffc <__addsf3>:
    1ffc:	bb 27       	eor	r27, r27
    1ffe:	aa 27       	eor	r26, r26
    2000:	0e d0       	rcall	.+28     	; 0x201e <__addsf3x>
    2002:	75 c1       	rjmp	.+746    	; 0x22ee <__fp_round>
    2004:	66 d1       	rcall	.+716    	; 0x22d2 <__fp_pscA>
    2006:	30 f0       	brcs	.+12     	; 0x2014 <__addsf3+0x18>
    2008:	6b d1       	rcall	.+726    	; 0x22e0 <__fp_pscB>
    200a:	20 f0       	brcs	.+8      	; 0x2014 <__addsf3+0x18>
    200c:	31 f4       	brne	.+12     	; 0x201a <__addsf3+0x1e>
    200e:	9f 3f       	cpi	r25, 0xFF	; 255
    2010:	11 f4       	brne	.+4      	; 0x2016 <__addsf3+0x1a>
    2012:	1e f4       	brtc	.+6      	; 0x201a <__addsf3+0x1e>
    2014:	5b c1       	rjmp	.+694    	; 0x22cc <__fp_nan>
    2016:	0e f4       	brtc	.+2      	; 0x201a <__addsf3+0x1e>
    2018:	e0 95       	com	r30
    201a:	e7 fb       	bst	r30, 7
    201c:	51 c1       	rjmp	.+674    	; 0x22c0 <__fp_inf>

0000201e <__addsf3x>:
    201e:	e9 2f       	mov	r30, r25
    2020:	77 d1       	rcall	.+750    	; 0x2310 <__fp_split3>
    2022:	80 f3       	brcs	.-32     	; 0x2004 <__addsf3+0x8>
    2024:	ba 17       	cp	r27, r26
    2026:	62 07       	cpc	r22, r18
    2028:	73 07       	cpc	r23, r19
    202a:	84 07       	cpc	r24, r20
    202c:	95 07       	cpc	r25, r21
    202e:	18 f0       	brcs	.+6      	; 0x2036 <__addsf3x+0x18>
    2030:	71 f4       	brne	.+28     	; 0x204e <__addsf3x+0x30>
    2032:	9e f5       	brtc	.+102    	; 0x209a <__addsf3x+0x7c>
    2034:	8f c1       	rjmp	.+798    	; 0x2354 <__fp_zero>
    2036:	0e f4       	brtc	.+2      	; 0x203a <__addsf3x+0x1c>
    2038:	e0 95       	com	r30
    203a:	0b 2e       	mov	r0, r27
    203c:	ba 2f       	mov	r27, r26
    203e:	a0 2d       	mov	r26, r0
    2040:	0b 01       	movw	r0, r22
    2042:	b9 01       	movw	r22, r18
    2044:	90 01       	movw	r18, r0
    2046:	0c 01       	movw	r0, r24
    2048:	ca 01       	movw	r24, r20
    204a:	a0 01       	movw	r20, r0
    204c:	11 24       	eor	r1, r1
    204e:	ff 27       	eor	r31, r31
    2050:	59 1b       	sub	r21, r25
    2052:	99 f0       	breq	.+38     	; 0x207a <__addsf3x+0x5c>
    2054:	59 3f       	cpi	r21, 0xF9	; 249
    2056:	50 f4       	brcc	.+20     	; 0x206c <__addsf3x+0x4e>
    2058:	50 3e       	cpi	r21, 0xE0	; 224
    205a:	68 f1       	brcs	.+90     	; 0x20b6 <__addsf3x+0x98>
    205c:	1a 16       	cp	r1, r26
    205e:	f0 40       	sbci	r31, 0x00	; 0
    2060:	a2 2f       	mov	r26, r18
    2062:	23 2f       	mov	r18, r19
    2064:	34 2f       	mov	r19, r20
    2066:	44 27       	eor	r20, r20
    2068:	58 5f       	subi	r21, 0xF8	; 248
    206a:	f3 cf       	rjmp	.-26     	; 0x2052 <__addsf3x+0x34>
    206c:	46 95       	lsr	r20
    206e:	37 95       	ror	r19
    2070:	27 95       	ror	r18
    2072:	a7 95       	ror	r26
    2074:	f0 40       	sbci	r31, 0x00	; 0
    2076:	53 95       	inc	r21
    2078:	c9 f7       	brne	.-14     	; 0x206c <__addsf3x+0x4e>
    207a:	7e f4       	brtc	.+30     	; 0x209a <__addsf3x+0x7c>
    207c:	1f 16       	cp	r1, r31
    207e:	ba 0b       	sbc	r27, r26
    2080:	62 0b       	sbc	r22, r18
    2082:	73 0b       	sbc	r23, r19
    2084:	84 0b       	sbc	r24, r20
    2086:	ba f0       	brmi	.+46     	; 0x20b6 <__addsf3x+0x98>
    2088:	91 50       	subi	r25, 0x01	; 1
    208a:	a1 f0       	breq	.+40     	; 0x20b4 <__addsf3x+0x96>
    208c:	ff 0f       	add	r31, r31
    208e:	bb 1f       	adc	r27, r27
    2090:	66 1f       	adc	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	c2 f7       	brpl	.-16     	; 0x2088 <__addsf3x+0x6a>
    2098:	0e c0       	rjmp	.+28     	; 0x20b6 <__addsf3x+0x98>
    209a:	ba 0f       	add	r27, r26
    209c:	62 1f       	adc	r22, r18
    209e:	73 1f       	adc	r23, r19
    20a0:	84 1f       	adc	r24, r20
    20a2:	48 f4       	brcc	.+18     	; 0x20b6 <__addsf3x+0x98>
    20a4:	87 95       	ror	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	b7 95       	ror	r27
    20ac:	f7 95       	ror	r31
    20ae:	9e 3f       	cpi	r25, 0xFE	; 254
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <__addsf3x+0x96>
    20b2:	b3 cf       	rjmp	.-154    	; 0x201a <__addsf3+0x1e>
    20b4:	93 95       	inc	r25
    20b6:	88 0f       	add	r24, r24
    20b8:	08 f0       	brcs	.+2      	; 0x20bc <__addsf3x+0x9e>
    20ba:	99 27       	eor	r25, r25
    20bc:	ee 0f       	add	r30, r30
    20be:	97 95       	ror	r25
    20c0:	87 95       	ror	r24
    20c2:	08 95       	ret

000020c4 <__cmpsf2>:
    20c4:	d9 d0       	rcall	.+434    	; 0x2278 <__fp_cmp>
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <__cmpsf2+0x6>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	08 95       	ret

000020cc <__divsf3>:
    20cc:	0c d0       	rcall	.+24     	; 0x20e6 <__divsf3x>
    20ce:	0f c1       	rjmp	.+542    	; 0x22ee <__fp_round>
    20d0:	07 d1       	rcall	.+526    	; 0x22e0 <__fp_pscB>
    20d2:	40 f0       	brcs	.+16     	; 0x20e4 <__divsf3+0x18>
    20d4:	fe d0       	rcall	.+508    	; 0x22d2 <__fp_pscA>
    20d6:	30 f0       	brcs	.+12     	; 0x20e4 <__divsf3+0x18>
    20d8:	21 f4       	brne	.+8      	; 0x20e2 <__divsf3+0x16>
    20da:	5f 3f       	cpi	r21, 0xFF	; 255
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <__divsf3+0x18>
    20de:	f0 c0       	rjmp	.+480    	; 0x22c0 <__fp_inf>
    20e0:	51 11       	cpse	r21, r1
    20e2:	39 c1       	rjmp	.+626    	; 0x2356 <__fp_szero>
    20e4:	f3 c0       	rjmp	.+486    	; 0x22cc <__fp_nan>

000020e6 <__divsf3x>:
    20e6:	14 d1       	rcall	.+552    	; 0x2310 <__fp_split3>
    20e8:	98 f3       	brcs	.-26     	; 0x20d0 <__divsf3+0x4>

000020ea <__divsf3_pse>:
    20ea:	99 23       	and	r25, r25
    20ec:	c9 f3       	breq	.-14     	; 0x20e0 <__divsf3+0x14>
    20ee:	55 23       	and	r21, r21
    20f0:	b1 f3       	breq	.-20     	; 0x20de <__divsf3+0x12>
    20f2:	95 1b       	sub	r25, r21
    20f4:	55 0b       	sbc	r21, r21
    20f6:	bb 27       	eor	r27, r27
    20f8:	aa 27       	eor	r26, r26
    20fa:	62 17       	cp	r22, r18
    20fc:	73 07       	cpc	r23, r19
    20fe:	84 07       	cpc	r24, r20
    2100:	38 f0       	brcs	.+14     	; 0x2110 <__divsf3_pse+0x26>
    2102:	9f 5f       	subi	r25, 0xFF	; 255
    2104:	5f 4f       	sbci	r21, 0xFF	; 255
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	44 1f       	adc	r20, r20
    210c:	aa 1f       	adc	r26, r26
    210e:	a9 f3       	breq	.-22     	; 0x20fa <__divsf3_pse+0x10>
    2110:	33 d0       	rcall	.+102    	; 0x2178 <__divsf3_pse+0x8e>
    2112:	0e 2e       	mov	r0, r30
    2114:	3a f0       	brmi	.+14     	; 0x2124 <__divsf3_pse+0x3a>
    2116:	e0 e8       	ldi	r30, 0x80	; 128
    2118:	30 d0       	rcall	.+96     	; 0x217a <__divsf3_pse+0x90>
    211a:	91 50       	subi	r25, 0x01	; 1
    211c:	50 40       	sbci	r21, 0x00	; 0
    211e:	e6 95       	lsr	r30
    2120:	00 1c       	adc	r0, r0
    2122:	ca f7       	brpl	.-14     	; 0x2116 <__divsf3_pse+0x2c>
    2124:	29 d0       	rcall	.+82     	; 0x2178 <__divsf3_pse+0x8e>
    2126:	fe 2f       	mov	r31, r30
    2128:	27 d0       	rcall	.+78     	; 0x2178 <__divsf3_pse+0x8e>
    212a:	66 0f       	add	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	bb 1f       	adc	r27, r27
    2132:	26 17       	cp	r18, r22
    2134:	37 07       	cpc	r19, r23
    2136:	48 07       	cpc	r20, r24
    2138:	ab 07       	cpc	r26, r27
    213a:	b0 e8       	ldi	r27, 0x80	; 128
    213c:	09 f0       	breq	.+2      	; 0x2140 <__divsf3_pse+0x56>
    213e:	bb 0b       	sbc	r27, r27
    2140:	80 2d       	mov	r24, r0
    2142:	bf 01       	movw	r22, r30
    2144:	ff 27       	eor	r31, r31
    2146:	93 58       	subi	r25, 0x83	; 131
    2148:	5f 4f       	sbci	r21, 0xFF	; 255
    214a:	2a f0       	brmi	.+10     	; 0x2156 <__divsf3_pse+0x6c>
    214c:	9e 3f       	cpi	r25, 0xFE	; 254
    214e:	51 05       	cpc	r21, r1
    2150:	68 f0       	brcs	.+26     	; 0x216c <__divsf3_pse+0x82>
    2152:	b6 c0       	rjmp	.+364    	; 0x22c0 <__fp_inf>
    2154:	00 c1       	rjmp	.+512    	; 0x2356 <__fp_szero>
    2156:	5f 3f       	cpi	r21, 0xFF	; 255
    2158:	ec f3       	brlt	.-6      	; 0x2154 <__divsf3_pse+0x6a>
    215a:	98 3e       	cpi	r25, 0xE8	; 232
    215c:	dc f3       	brlt	.-10     	; 0x2154 <__divsf3_pse+0x6a>
    215e:	86 95       	lsr	r24
    2160:	77 95       	ror	r23
    2162:	67 95       	ror	r22
    2164:	b7 95       	ror	r27
    2166:	f7 95       	ror	r31
    2168:	9f 5f       	subi	r25, 0xFF	; 255
    216a:	c9 f7       	brne	.-14     	; 0x215e <__divsf3_pse+0x74>
    216c:	88 0f       	add	r24, r24
    216e:	91 1d       	adc	r25, r1
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	97 f9       	bld	r25, 7
    2176:	08 95       	ret
    2178:	e1 e0       	ldi	r30, 0x01	; 1
    217a:	66 0f       	add	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	88 1f       	adc	r24, r24
    2180:	bb 1f       	adc	r27, r27
    2182:	62 17       	cp	r22, r18
    2184:	73 07       	cpc	r23, r19
    2186:	84 07       	cpc	r24, r20
    2188:	ba 07       	cpc	r27, r26
    218a:	20 f0       	brcs	.+8      	; 0x2194 <__divsf3_pse+0xaa>
    218c:	62 1b       	sub	r22, r18
    218e:	73 0b       	sbc	r23, r19
    2190:	84 0b       	sbc	r24, r20
    2192:	ba 0b       	sbc	r27, r26
    2194:	ee 1f       	adc	r30, r30
    2196:	88 f7       	brcc	.-30     	; 0x217a <__divsf3_pse+0x90>
    2198:	e0 95       	com	r30
    219a:	08 95       	ret

0000219c <__fixsfsi>:
    219c:	04 d0       	rcall	.+8      	; 0x21a6 <__fixunssfsi>
    219e:	68 94       	set
    21a0:	b1 11       	cpse	r27, r1
    21a2:	d9 c0       	rjmp	.+434    	; 0x2356 <__fp_szero>
    21a4:	08 95       	ret

000021a6 <__fixunssfsi>:
    21a6:	bc d0       	rcall	.+376    	; 0x2320 <__fp_splitA>
    21a8:	88 f0       	brcs	.+34     	; 0x21cc <__fixunssfsi+0x26>
    21aa:	9f 57       	subi	r25, 0x7F	; 127
    21ac:	90 f0       	brcs	.+36     	; 0x21d2 <__fixunssfsi+0x2c>
    21ae:	b9 2f       	mov	r27, r25
    21b0:	99 27       	eor	r25, r25
    21b2:	b7 51       	subi	r27, 0x17	; 23
    21b4:	a0 f0       	brcs	.+40     	; 0x21de <__fixunssfsi+0x38>
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <__fixunssfsi+0x46>
    21b8:	66 0f       	add	r22, r22
    21ba:	77 1f       	adc	r23, r23
    21bc:	88 1f       	adc	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	1a f0       	brmi	.+6      	; 0x21c8 <__fixunssfsi+0x22>
    21c2:	ba 95       	dec	r27
    21c4:	c9 f7       	brne	.-14     	; 0x21b8 <__fixunssfsi+0x12>
    21c6:	12 c0       	rjmp	.+36     	; 0x21ec <__fixunssfsi+0x46>
    21c8:	b1 30       	cpi	r27, 0x01	; 1
    21ca:	81 f0       	breq	.+32     	; 0x21ec <__fixunssfsi+0x46>
    21cc:	c3 d0       	rcall	.+390    	; 0x2354 <__fp_zero>
    21ce:	b1 e0       	ldi	r27, 0x01	; 1
    21d0:	08 95       	ret
    21d2:	c0 c0       	rjmp	.+384    	; 0x2354 <__fp_zero>
    21d4:	67 2f       	mov	r22, r23
    21d6:	78 2f       	mov	r23, r24
    21d8:	88 27       	eor	r24, r24
    21da:	b8 5f       	subi	r27, 0xF8	; 248
    21dc:	39 f0       	breq	.+14     	; 0x21ec <__fixunssfsi+0x46>
    21de:	b9 3f       	cpi	r27, 0xF9	; 249
    21e0:	cc f3       	brlt	.-14     	; 0x21d4 <__fixunssfsi+0x2e>
    21e2:	86 95       	lsr	r24
    21e4:	77 95       	ror	r23
    21e6:	67 95       	ror	r22
    21e8:	b3 95       	inc	r27
    21ea:	d9 f7       	brne	.-10     	; 0x21e2 <__fixunssfsi+0x3c>
    21ec:	3e f4       	brtc	.+14     	; 0x21fc <__fixunssfsi+0x56>
    21ee:	90 95       	com	r25
    21f0:	80 95       	com	r24
    21f2:	70 95       	com	r23
    21f4:	61 95       	neg	r22
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	8f 4f       	sbci	r24, 0xFF	; 255
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	08 95       	ret

000021fe <__floatunsisf>:
    21fe:	e8 94       	clt
    2200:	09 c0       	rjmp	.+18     	; 0x2214 <__floatsisf+0x12>

00002202 <__floatsisf>:
    2202:	97 fb       	bst	r25, 7
    2204:	3e f4       	brtc	.+14     	; 0x2214 <__floatsisf+0x12>
    2206:	90 95       	com	r25
    2208:	80 95       	com	r24
    220a:	70 95       	com	r23
    220c:	61 95       	neg	r22
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	99 23       	and	r25, r25
    2216:	a9 f0       	breq	.+42     	; 0x2242 <__floatsisf+0x40>
    2218:	f9 2f       	mov	r31, r25
    221a:	96 e9       	ldi	r25, 0x96	; 150
    221c:	bb 27       	eor	r27, r27
    221e:	93 95       	inc	r25
    2220:	f6 95       	lsr	r31
    2222:	87 95       	ror	r24
    2224:	77 95       	ror	r23
    2226:	67 95       	ror	r22
    2228:	b7 95       	ror	r27
    222a:	f1 11       	cpse	r31, r1
    222c:	f8 cf       	rjmp	.-16     	; 0x221e <__floatsisf+0x1c>
    222e:	fa f4       	brpl	.+62     	; 0x226e <__floatsisf+0x6c>
    2230:	bb 0f       	add	r27, r27
    2232:	11 f4       	brne	.+4      	; 0x2238 <__floatsisf+0x36>
    2234:	60 ff       	sbrs	r22, 0
    2236:	1b c0       	rjmp	.+54     	; 0x226e <__floatsisf+0x6c>
    2238:	6f 5f       	subi	r22, 0xFF	; 255
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
    223c:	8f 4f       	sbci	r24, 0xFF	; 255
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	16 c0       	rjmp	.+44     	; 0x226e <__floatsisf+0x6c>
    2242:	88 23       	and	r24, r24
    2244:	11 f0       	breq	.+4      	; 0x224a <__floatsisf+0x48>
    2246:	96 e9       	ldi	r25, 0x96	; 150
    2248:	11 c0       	rjmp	.+34     	; 0x226c <__floatsisf+0x6a>
    224a:	77 23       	and	r23, r23
    224c:	21 f0       	breq	.+8      	; 0x2256 <__floatsisf+0x54>
    224e:	9e e8       	ldi	r25, 0x8E	; 142
    2250:	87 2f       	mov	r24, r23
    2252:	76 2f       	mov	r23, r22
    2254:	05 c0       	rjmp	.+10     	; 0x2260 <__floatsisf+0x5e>
    2256:	66 23       	and	r22, r22
    2258:	71 f0       	breq	.+28     	; 0x2276 <__floatsisf+0x74>
    225a:	96 e8       	ldi	r25, 0x86	; 134
    225c:	86 2f       	mov	r24, r22
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	2a f0       	brmi	.+10     	; 0x226e <__floatsisf+0x6c>
    2264:	9a 95       	dec	r25
    2266:	66 0f       	add	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	da f7       	brpl	.-10     	; 0x2264 <__floatsisf+0x62>
    226e:	88 0f       	add	r24, r24
    2270:	96 95       	lsr	r25
    2272:	87 95       	ror	r24
    2274:	97 f9       	bld	r25, 7
    2276:	08 95       	ret

00002278 <__fp_cmp>:
    2278:	99 0f       	add	r25, r25
    227a:	00 08       	sbc	r0, r0
    227c:	55 0f       	add	r21, r21
    227e:	aa 0b       	sbc	r26, r26
    2280:	e0 e8       	ldi	r30, 0x80	; 128
    2282:	fe ef       	ldi	r31, 0xFE	; 254
    2284:	16 16       	cp	r1, r22
    2286:	17 06       	cpc	r1, r23
    2288:	e8 07       	cpc	r30, r24
    228a:	f9 07       	cpc	r31, r25
    228c:	c0 f0       	brcs	.+48     	; 0x22be <__fp_cmp+0x46>
    228e:	12 16       	cp	r1, r18
    2290:	13 06       	cpc	r1, r19
    2292:	e4 07       	cpc	r30, r20
    2294:	f5 07       	cpc	r31, r21
    2296:	98 f0       	brcs	.+38     	; 0x22be <__fp_cmp+0x46>
    2298:	62 1b       	sub	r22, r18
    229a:	73 0b       	sbc	r23, r19
    229c:	84 0b       	sbc	r24, r20
    229e:	95 0b       	sbc	r25, r21
    22a0:	39 f4       	brne	.+14     	; 0x22b0 <__fp_cmp+0x38>
    22a2:	0a 26       	eor	r0, r26
    22a4:	61 f0       	breq	.+24     	; 0x22be <__fp_cmp+0x46>
    22a6:	23 2b       	or	r18, r19
    22a8:	24 2b       	or	r18, r20
    22aa:	25 2b       	or	r18, r21
    22ac:	21 f4       	brne	.+8      	; 0x22b6 <__fp_cmp+0x3e>
    22ae:	08 95       	ret
    22b0:	0a 26       	eor	r0, r26
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__fp_cmp+0x3e>
    22b4:	a1 40       	sbci	r26, 0x01	; 1
    22b6:	a6 95       	lsr	r26
    22b8:	8f ef       	ldi	r24, 0xFF	; 255
    22ba:	81 1d       	adc	r24, r1
    22bc:	81 1d       	adc	r24, r1
    22be:	08 95       	ret

000022c0 <__fp_inf>:
    22c0:	97 f9       	bld	r25, 7
    22c2:	9f 67       	ori	r25, 0x7F	; 127
    22c4:	80 e8       	ldi	r24, 0x80	; 128
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	08 95       	ret

000022cc <__fp_nan>:
    22cc:	9f ef       	ldi	r25, 0xFF	; 255
    22ce:	80 ec       	ldi	r24, 0xC0	; 192
    22d0:	08 95       	ret

000022d2 <__fp_pscA>:
    22d2:	00 24       	eor	r0, r0
    22d4:	0a 94       	dec	r0
    22d6:	16 16       	cp	r1, r22
    22d8:	17 06       	cpc	r1, r23
    22da:	18 06       	cpc	r1, r24
    22dc:	09 06       	cpc	r0, r25
    22de:	08 95       	ret

000022e0 <__fp_pscB>:
    22e0:	00 24       	eor	r0, r0
    22e2:	0a 94       	dec	r0
    22e4:	12 16       	cp	r1, r18
    22e6:	13 06       	cpc	r1, r19
    22e8:	14 06       	cpc	r1, r20
    22ea:	05 06       	cpc	r0, r21
    22ec:	08 95       	ret

000022ee <__fp_round>:
    22ee:	09 2e       	mov	r0, r25
    22f0:	03 94       	inc	r0
    22f2:	00 0c       	add	r0, r0
    22f4:	11 f4       	brne	.+4      	; 0x22fa <__fp_round+0xc>
    22f6:	88 23       	and	r24, r24
    22f8:	52 f0       	brmi	.+20     	; 0x230e <__fp_round+0x20>
    22fa:	bb 0f       	add	r27, r27
    22fc:	40 f4       	brcc	.+16     	; 0x230e <__fp_round+0x20>
    22fe:	bf 2b       	or	r27, r31
    2300:	11 f4       	brne	.+4      	; 0x2306 <__fp_round+0x18>
    2302:	60 ff       	sbrs	r22, 0
    2304:	04 c0       	rjmp	.+8      	; 0x230e <__fp_round+0x20>
    2306:	6f 5f       	subi	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	08 95       	ret

00002310 <__fp_split3>:
    2310:	57 fd       	sbrc	r21, 7
    2312:	90 58       	subi	r25, 0x80	; 128
    2314:	44 0f       	add	r20, r20
    2316:	55 1f       	adc	r21, r21
    2318:	59 f0       	breq	.+22     	; 0x2330 <__fp_splitA+0x10>
    231a:	5f 3f       	cpi	r21, 0xFF	; 255
    231c:	71 f0       	breq	.+28     	; 0x233a <__fp_splitA+0x1a>
    231e:	47 95       	ror	r20

00002320 <__fp_splitA>:
    2320:	88 0f       	add	r24, r24
    2322:	97 fb       	bst	r25, 7
    2324:	99 1f       	adc	r25, r25
    2326:	61 f0       	breq	.+24     	; 0x2340 <__fp_splitA+0x20>
    2328:	9f 3f       	cpi	r25, 0xFF	; 255
    232a:	79 f0       	breq	.+30     	; 0x234a <__fp_splitA+0x2a>
    232c:	87 95       	ror	r24
    232e:	08 95       	ret
    2330:	12 16       	cp	r1, r18
    2332:	13 06       	cpc	r1, r19
    2334:	14 06       	cpc	r1, r20
    2336:	55 1f       	adc	r21, r21
    2338:	f2 cf       	rjmp	.-28     	; 0x231e <__fp_split3+0xe>
    233a:	46 95       	lsr	r20
    233c:	f1 df       	rcall	.-30     	; 0x2320 <__fp_splitA>
    233e:	08 c0       	rjmp	.+16     	; 0x2350 <__fp_splitA+0x30>
    2340:	16 16       	cp	r1, r22
    2342:	17 06       	cpc	r1, r23
    2344:	18 06       	cpc	r1, r24
    2346:	99 1f       	adc	r25, r25
    2348:	f1 cf       	rjmp	.-30     	; 0x232c <__fp_splitA+0xc>
    234a:	86 95       	lsr	r24
    234c:	71 05       	cpc	r23, r1
    234e:	61 05       	cpc	r22, r1
    2350:	08 94       	sec
    2352:	08 95       	ret

00002354 <__fp_zero>:
    2354:	e8 94       	clt

00002356 <__fp_szero>:
    2356:	bb 27       	eor	r27, r27
    2358:	66 27       	eor	r22, r22
    235a:	77 27       	eor	r23, r23
    235c:	cb 01       	movw	r24, r22
    235e:	97 f9       	bld	r25, 7
    2360:	08 95       	ret

00002362 <__gesf2>:
    2362:	8a df       	rcall	.-236    	; 0x2278 <__fp_cmp>
    2364:	08 f4       	brcc	.+2      	; 0x2368 <__gesf2+0x6>
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	08 95       	ret

0000236a <log10>:
    236a:	0a d0       	rcall	.+20     	; 0x2380 <log>
    236c:	29 ed       	ldi	r18, 0xD9	; 217
    236e:	3b e5       	ldi	r19, 0x5B	; 91
    2370:	4e ed       	ldi	r20, 0xDE	; 222
    2372:	5e e3       	ldi	r21, 0x3E	; 62
    2374:	45 c0       	rjmp	.+138    	; 0x2400 <__mulsf3>
    2376:	0e f0       	brts	.+2      	; 0x237a <log10+0x10>
    2378:	27 c1       	rjmp	.+590    	; 0x25c8 <__fp_mpack>
    237a:	a8 cf       	rjmp	.-176    	; 0x22cc <__fp_nan>
    237c:	68 94       	set
    237e:	a0 cf       	rjmp	.-192    	; 0x22c0 <__fp_inf>

00002380 <log>:
    2380:	cf df       	rcall	.-98     	; 0x2320 <__fp_splitA>
    2382:	c8 f3       	brcs	.-14     	; 0x2376 <log10+0xc>
    2384:	99 23       	and	r25, r25
    2386:	d1 f3       	breq	.-12     	; 0x237c <log10+0x12>
    2388:	c6 f3       	brts	.-16     	; 0x237a <log10+0x10>
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	1f 93       	push	r17
    2390:	0f 93       	push	r16
    2392:	ff 92       	push	r15
    2394:	c9 2f       	mov	r28, r25
    2396:	dd 27       	eor	r29, r29
    2398:	88 23       	and	r24, r24
    239a:	2a f0       	brmi	.+10     	; 0x23a6 <log+0x26>
    239c:	21 97       	sbiw	r28, 0x01	; 1
    239e:	66 0f       	add	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 1f       	adc	r24, r24
    23a4:	da f7       	brpl	.-10     	; 0x239c <log+0x1c>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f eb       	ldi	r21, 0xBF	; 191
    23ae:	9f e3       	ldi	r25, 0x3F	; 63
    23b0:	88 39       	cpi	r24, 0x98	; 152
    23b2:	20 f0       	brcs	.+8      	; 0x23bc <log+0x3c>
    23b4:	80 3e       	cpi	r24, 0xE0	; 224
    23b6:	30 f0       	brcs	.+12     	; 0x23c4 <log+0x44>
    23b8:	21 96       	adiw	r28, 0x01	; 1
    23ba:	8f 77       	andi	r24, 0x7F	; 127
    23bc:	1f de       	rcall	.-962    	; 0x1ffc <__addsf3>
    23be:	e8 e6       	ldi	r30, 0x68	; 104
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <log+0x4a>
    23c4:	1b de       	rcall	.-970    	; 0x1ffc <__addsf3>
    23c6:	e5 e9       	ldi	r30, 0x95	; 149
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	0c d1       	rcall	.+536    	; 0x25e4 <__fp_powser>
    23cc:	8b 01       	movw	r16, r22
    23ce:	be 01       	movw	r22, r28
    23d0:	ec 01       	movw	r28, r24
    23d2:	fb 2e       	mov	r15, r27
    23d4:	6f 57       	subi	r22, 0x7F	; 127
    23d6:	71 09       	sbc	r23, r1
    23d8:	75 95       	asr	r23
    23da:	77 1f       	adc	r23, r23
    23dc:	88 0b       	sbc	r24, r24
    23de:	99 0b       	sbc	r25, r25
    23e0:	10 df       	rcall	.-480    	; 0x2202 <__floatsisf>
    23e2:	28 e1       	ldi	r18, 0x18	; 24
    23e4:	32 e7       	ldi	r19, 0x72	; 114
    23e6:	41 e3       	ldi	r20, 0x31	; 49
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	16 d0       	rcall	.+44     	; 0x2418 <__mulsf3x>
    23ec:	af 2d       	mov	r26, r15
    23ee:	98 01       	movw	r18, r16
    23f0:	ae 01       	movw	r20, r28
    23f2:	ff 90       	pop	r15
    23f4:	0f 91       	pop	r16
    23f6:	1f 91       	pop	r17
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	10 de       	rcall	.-992    	; 0x201e <__addsf3x>
    23fe:	77 cf       	rjmp	.-274    	; 0x22ee <__fp_round>

00002400 <__mulsf3>:
    2400:	0b d0       	rcall	.+22     	; 0x2418 <__mulsf3x>
    2402:	75 cf       	rjmp	.-278    	; 0x22ee <__fp_round>
    2404:	66 df       	rcall	.-308    	; 0x22d2 <__fp_pscA>
    2406:	28 f0       	brcs	.+10     	; 0x2412 <__mulsf3+0x12>
    2408:	6b df       	rcall	.-298    	; 0x22e0 <__fp_pscB>
    240a:	18 f0       	brcs	.+6      	; 0x2412 <__mulsf3+0x12>
    240c:	95 23       	and	r25, r21
    240e:	09 f0       	breq	.+2      	; 0x2412 <__mulsf3+0x12>
    2410:	57 cf       	rjmp	.-338    	; 0x22c0 <__fp_inf>
    2412:	5c cf       	rjmp	.-328    	; 0x22cc <__fp_nan>
    2414:	11 24       	eor	r1, r1
    2416:	9f cf       	rjmp	.-194    	; 0x2356 <__fp_szero>

00002418 <__mulsf3x>:
    2418:	7b df       	rcall	.-266    	; 0x2310 <__fp_split3>
    241a:	a0 f3       	brcs	.-24     	; 0x2404 <__mulsf3+0x4>

0000241c <__mulsf3_pse>:
    241c:	95 9f       	mul	r25, r21
    241e:	d1 f3       	breq	.-12     	; 0x2414 <__mulsf3+0x14>
    2420:	95 0f       	add	r25, r21
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	55 1f       	adc	r21, r21
    2426:	62 9f       	mul	r22, r18
    2428:	f0 01       	movw	r30, r0
    242a:	72 9f       	mul	r23, r18
    242c:	bb 27       	eor	r27, r27
    242e:	f0 0d       	add	r31, r0
    2430:	b1 1d       	adc	r27, r1
    2432:	63 9f       	mul	r22, r19
    2434:	aa 27       	eor	r26, r26
    2436:	f0 0d       	add	r31, r0
    2438:	b1 1d       	adc	r27, r1
    243a:	aa 1f       	adc	r26, r26
    243c:	64 9f       	mul	r22, r20
    243e:	66 27       	eor	r22, r22
    2440:	b0 0d       	add	r27, r0
    2442:	a1 1d       	adc	r26, r1
    2444:	66 1f       	adc	r22, r22
    2446:	82 9f       	mul	r24, r18
    2448:	22 27       	eor	r18, r18
    244a:	b0 0d       	add	r27, r0
    244c:	a1 1d       	adc	r26, r1
    244e:	62 1f       	adc	r22, r18
    2450:	73 9f       	mul	r23, r19
    2452:	b0 0d       	add	r27, r0
    2454:	a1 1d       	adc	r26, r1
    2456:	62 1f       	adc	r22, r18
    2458:	83 9f       	mul	r24, r19
    245a:	a0 0d       	add	r26, r0
    245c:	61 1d       	adc	r22, r1
    245e:	22 1f       	adc	r18, r18
    2460:	74 9f       	mul	r23, r20
    2462:	33 27       	eor	r19, r19
    2464:	a0 0d       	add	r26, r0
    2466:	61 1d       	adc	r22, r1
    2468:	23 1f       	adc	r18, r19
    246a:	84 9f       	mul	r24, r20
    246c:	60 0d       	add	r22, r0
    246e:	21 1d       	adc	r18, r1
    2470:	82 2f       	mov	r24, r18
    2472:	76 2f       	mov	r23, r22
    2474:	6a 2f       	mov	r22, r26
    2476:	11 24       	eor	r1, r1
    2478:	9f 57       	subi	r25, 0x7F	; 127
    247a:	50 40       	sbci	r21, 0x00	; 0
    247c:	8a f0       	brmi	.+34     	; 0x24a0 <__mulsf3_pse+0x84>
    247e:	e1 f0       	breq	.+56     	; 0x24b8 <__mulsf3_pse+0x9c>
    2480:	88 23       	and	r24, r24
    2482:	4a f0       	brmi	.+18     	; 0x2496 <__mulsf3_pse+0x7a>
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	bb 1f       	adc	r27, r27
    248a:	66 1f       	adc	r22, r22
    248c:	77 1f       	adc	r23, r23
    248e:	88 1f       	adc	r24, r24
    2490:	91 50       	subi	r25, 0x01	; 1
    2492:	50 40       	sbci	r21, 0x00	; 0
    2494:	a9 f7       	brne	.-22     	; 0x2480 <__mulsf3_pse+0x64>
    2496:	9e 3f       	cpi	r25, 0xFE	; 254
    2498:	51 05       	cpc	r21, r1
    249a:	70 f0       	brcs	.+28     	; 0x24b8 <__mulsf3_pse+0x9c>
    249c:	11 cf       	rjmp	.-478    	; 0x22c0 <__fp_inf>
    249e:	5b cf       	rjmp	.-330    	; 0x2356 <__fp_szero>
    24a0:	5f 3f       	cpi	r21, 0xFF	; 255
    24a2:	ec f3       	brlt	.-6      	; 0x249e <__mulsf3_pse+0x82>
    24a4:	98 3e       	cpi	r25, 0xE8	; 232
    24a6:	dc f3       	brlt	.-10     	; 0x249e <__mulsf3_pse+0x82>
    24a8:	86 95       	lsr	r24
    24aa:	77 95       	ror	r23
    24ac:	67 95       	ror	r22
    24ae:	b7 95       	ror	r27
    24b0:	f7 95       	ror	r31
    24b2:	e7 95       	ror	r30
    24b4:	9f 5f       	subi	r25, 0xFF	; 255
    24b6:	c1 f7       	brne	.-16     	; 0x24a8 <__mulsf3_pse+0x8c>
    24b8:	fe 2b       	or	r31, r30
    24ba:	88 0f       	add	r24, r24
    24bc:	91 1d       	adc	r25, r1
    24be:	96 95       	lsr	r25
    24c0:	87 95       	ror	r24
    24c2:	97 f9       	bld	r25, 7
    24c4:	08 95       	ret

000024c6 <pow>:
    24c6:	fa 01       	movw	r30, r20
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	30 96       	adiw	r30, 0x00	; 0
    24ce:	21 05       	cpc	r18, r1
    24d0:	31 05       	cpc	r19, r1
    24d2:	99 f1       	breq	.+102    	; 0x253a <pow+0x74>
    24d4:	61 15       	cp	r22, r1
    24d6:	71 05       	cpc	r23, r1
    24d8:	61 f4       	brne	.+24     	; 0x24f2 <pow+0x2c>
    24da:	80 38       	cpi	r24, 0x80	; 128
    24dc:	bf e3       	ldi	r27, 0x3F	; 63
    24de:	9b 07       	cpc	r25, r27
    24e0:	49 f1       	breq	.+82     	; 0x2534 <pow+0x6e>
    24e2:	68 94       	set
    24e4:	90 38       	cpi	r25, 0x80	; 128
    24e6:	81 05       	cpc	r24, r1
    24e8:	61 f0       	breq	.+24     	; 0x2502 <pow+0x3c>
    24ea:	80 38       	cpi	r24, 0x80	; 128
    24ec:	bf ef       	ldi	r27, 0xFF	; 255
    24ee:	9b 07       	cpc	r25, r27
    24f0:	41 f0       	breq	.+16     	; 0x2502 <pow+0x3c>
    24f2:	99 23       	and	r25, r25
    24f4:	42 f5       	brpl	.+80     	; 0x2546 <pow+0x80>
    24f6:	ff 3f       	cpi	r31, 0xFF	; 255
    24f8:	e1 05       	cpc	r30, r1
    24fa:	31 05       	cpc	r19, r1
    24fc:	21 05       	cpc	r18, r1
    24fe:	11 f1       	breq	.+68     	; 0x2544 <pow+0x7e>
    2500:	e8 94       	clt
    2502:	08 94       	sec
    2504:	e7 95       	ror	r30
    2506:	d9 01       	movw	r26, r18
    2508:	aa 23       	and	r26, r26
    250a:	29 f4       	brne	.+10     	; 0x2516 <pow+0x50>
    250c:	ab 2f       	mov	r26, r27
    250e:	be 2f       	mov	r27, r30
    2510:	f8 5f       	subi	r31, 0xF8	; 248
    2512:	d0 f3       	brcs	.-12     	; 0x2508 <pow+0x42>
    2514:	10 c0       	rjmp	.+32     	; 0x2536 <pow+0x70>
    2516:	ff 5f       	subi	r31, 0xFF	; 255
    2518:	70 f4       	brcc	.+28     	; 0x2536 <pow+0x70>
    251a:	a6 95       	lsr	r26
    251c:	e0 f7       	brcc	.-8      	; 0x2516 <pow+0x50>
    251e:	f7 39       	cpi	r31, 0x97	; 151
    2520:	50 f0       	brcs	.+20     	; 0x2536 <pow+0x70>
    2522:	19 f0       	breq	.+6      	; 0x252a <pow+0x64>
    2524:	ff 3a       	cpi	r31, 0xAF	; 175
    2526:	38 f4       	brcc	.+14     	; 0x2536 <pow+0x70>
    2528:	9f 77       	andi	r25, 0x7F	; 127
    252a:	9f 93       	push	r25
    252c:	0c d0       	rcall	.+24     	; 0x2546 <pow+0x80>
    252e:	0f 90       	pop	r0
    2530:	07 fc       	sbrc	r0, 7
    2532:	90 58       	subi	r25, 0x80	; 128
    2534:	08 95       	ret
    2536:	3e f0       	brts	.+14     	; 0x2546 <pow+0x80>
    2538:	c9 ce       	rjmp	.-622    	; 0x22cc <__fp_nan>
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	80 e8       	ldi	r24, 0x80	; 128
    2540:	9f e3       	ldi	r25, 0x3F	; 63
    2542:	08 95       	ret
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	9f 77       	andi	r25, 0x7F	; 127
    2548:	5f 93       	push	r21
    254a:	4f 93       	push	r20
    254c:	3f 93       	push	r19
    254e:	2f 93       	push	r18
    2550:	17 df       	rcall	.-466    	; 0x2380 <log>
    2552:	2f 91       	pop	r18
    2554:	3f 91       	pop	r19
    2556:	4f 91       	pop	r20
    2558:	5f 91       	pop	r21
    255a:	52 df       	rcall	.-348    	; 0x2400 <__mulsf3>
    255c:	09 c0       	rjmp	.+18     	; 0x2570 <exp>

0000255e <__unordsf2>:
    255e:	8c de       	rcall	.-744    	; 0x2278 <__fp_cmp>
    2560:	88 0b       	sbc	r24, r24
    2562:	99 0b       	sbc	r25, r25
    2564:	08 95       	ret
    2566:	19 f4       	brne	.+6      	; 0x256e <__unordsf2+0x10>
    2568:	0e f0       	brts	.+2      	; 0x256c <__unordsf2+0xe>
    256a:	aa ce       	rjmp	.-684    	; 0x22c0 <__fp_inf>
    256c:	f3 ce       	rjmp	.-538    	; 0x2354 <__fp_zero>
    256e:	ae ce       	rjmp	.-676    	; 0x22cc <__fp_nan>

00002570 <exp>:
    2570:	d7 de       	rcall	.-594    	; 0x2320 <__fp_splitA>
    2572:	c8 f3       	brcs	.-14     	; 0x2566 <__unordsf2+0x8>
    2574:	96 38       	cpi	r25, 0x86	; 134
    2576:	c0 f7       	brcc	.-16     	; 0x2568 <__unordsf2+0xa>
    2578:	07 f8       	bld	r0, 7
    257a:	0f 92       	push	r0
    257c:	e8 94       	clt
    257e:	2b e3       	ldi	r18, 0x3B	; 59
    2580:	3a ea       	ldi	r19, 0xAA	; 170
    2582:	48 eb       	ldi	r20, 0xB8	; 184
    2584:	5f e7       	ldi	r21, 0x7F	; 127
    2586:	4a df       	rcall	.-364    	; 0x241c <__mulsf3_pse>
    2588:	0f 92       	push	r0
    258a:	0f 92       	push	r0
    258c:	0f 92       	push	r0
    258e:	4d b7       	in	r20, 0x3d	; 61
    2590:	5e b7       	in	r21, 0x3e	; 62
    2592:	0f 92       	push	r0
    2594:	89 d0       	rcall	.+274    	; 0x26a8 <modf>
    2596:	e2 ec       	ldi	r30, 0xC2	; 194
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	24 d0       	rcall	.+72     	; 0x25e4 <__fp_powser>
    259c:	4f 91       	pop	r20
    259e:	5f 91       	pop	r21
    25a0:	ef 91       	pop	r30
    25a2:	ff 91       	pop	r31
    25a4:	e5 95       	asr	r30
    25a6:	ee 1f       	adc	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	49 f0       	breq	.+18     	; 0x25be <exp+0x4e>
    25ac:	fe 57       	subi	r31, 0x7E	; 126
    25ae:	e0 68       	ori	r30, 0x80	; 128
    25b0:	44 27       	eor	r20, r20
    25b2:	ee 0f       	add	r30, r30
    25b4:	44 1f       	adc	r20, r20
    25b6:	fa 95       	dec	r31
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <exp+0x42>
    25ba:	41 95       	neg	r20
    25bc:	55 0b       	sbc	r21, r21
    25be:	40 d0       	rcall	.+128    	; 0x2640 <ldexp>
    25c0:	0f 90       	pop	r0
    25c2:	07 fe       	sbrs	r0, 7
    25c4:	34 c0       	rjmp	.+104    	; 0x262e <inverse>
    25c6:	08 95       	ret

000025c8 <__fp_mpack>:
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	31 f0       	breq	.+12     	; 0x25d8 <__fp_mpack_finite+0xc>

000025cc <__fp_mpack_finite>:
    25cc:	91 50       	subi	r25, 0x01	; 1
    25ce:	20 f4       	brcc	.+8      	; 0x25d8 <__fp_mpack_finite+0xc>
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b7 95       	ror	r27
    25d8:	88 0f       	add	r24, r24
    25da:	91 1d       	adc	r25, r1
    25dc:	96 95       	lsr	r25
    25de:	87 95       	ror	r24
    25e0:	97 f9       	bld	r25, 7
    25e2:	08 95       	ret

000025e4 <__fp_powser>:
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	1f 93       	push	r17
    25ea:	0f 93       	push	r16
    25ec:	ff 92       	push	r15
    25ee:	ef 92       	push	r14
    25f0:	df 92       	push	r13
    25f2:	7b 01       	movw	r14, r22
    25f4:	8c 01       	movw	r16, r24
    25f6:	68 94       	set
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <__fp_powser+0x20>
    25fa:	da 2e       	mov	r13, r26
    25fc:	ef 01       	movw	r28, r30
    25fe:	0c df       	rcall	.-488    	; 0x2418 <__mulsf3x>
    2600:	fe 01       	movw	r30, r28
    2602:	e8 94       	clt
    2604:	a5 91       	lpm	r26, Z+
    2606:	25 91       	lpm	r18, Z+
    2608:	35 91       	lpm	r19, Z+
    260a:	45 91       	lpm	r20, Z+
    260c:	55 91       	lpm	r21, Z+
    260e:	ae f3       	brts	.-22     	; 0x25fa <__fp_powser+0x16>
    2610:	ef 01       	movw	r28, r30
    2612:	05 dd       	rcall	.-1526   	; 0x201e <__addsf3x>
    2614:	fe 01       	movw	r30, r28
    2616:	97 01       	movw	r18, r14
    2618:	a8 01       	movw	r20, r16
    261a:	da 94       	dec	r13
    261c:	79 f7       	brne	.-34     	; 0x25fc <__fp_powser+0x18>
    261e:	df 90       	pop	r13
    2620:	ef 90       	pop	r14
    2622:	ff 90       	pop	r15
    2624:	0f 91       	pop	r16
    2626:	1f 91       	pop	r17
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <inverse>:
    262e:	9b 01       	movw	r18, r22
    2630:	ac 01       	movw	r20, r24
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	80 e8       	ldi	r24, 0x80	; 128
    2638:	9f e3       	ldi	r25, 0x3F	; 63
    263a:	48 cd       	rjmp	.-1392   	; 0x20cc <__divsf3>
    263c:	41 ce       	rjmp	.-894    	; 0x22c0 <__fp_inf>
    263e:	c4 cf       	rjmp	.-120    	; 0x25c8 <__fp_mpack>

00002640 <ldexp>:
    2640:	6f de       	rcall	.-802    	; 0x2320 <__fp_splitA>
    2642:	e8 f3       	brcs	.-6      	; 0x263e <inverse+0x10>
    2644:	99 23       	and	r25, r25
    2646:	d9 f3       	breq	.-10     	; 0x263e <inverse+0x10>
    2648:	94 0f       	add	r25, r20
    264a:	51 1d       	adc	r21, r1
    264c:	bb f3       	brvs	.-18     	; 0x263c <inverse+0xe>
    264e:	91 50       	subi	r25, 0x01	; 1
    2650:	50 40       	sbci	r21, 0x00	; 0
    2652:	94 f0       	brlt	.+36     	; 0x2678 <ldexp+0x38>
    2654:	59 f0       	breq	.+22     	; 0x266c <ldexp+0x2c>
    2656:	88 23       	and	r24, r24
    2658:	32 f0       	brmi	.+12     	; 0x2666 <ldexp+0x26>
    265a:	66 0f       	add	r22, r22
    265c:	77 1f       	adc	r23, r23
    265e:	88 1f       	adc	r24, r24
    2660:	91 50       	subi	r25, 0x01	; 1
    2662:	50 40       	sbci	r21, 0x00	; 0
    2664:	c1 f7       	brne	.-16     	; 0x2656 <ldexp+0x16>
    2666:	9e 3f       	cpi	r25, 0xFE	; 254
    2668:	51 05       	cpc	r21, r1
    266a:	44 f7       	brge	.-48     	; 0x263c <inverse+0xe>
    266c:	88 0f       	add	r24, r24
    266e:	91 1d       	adc	r25, r1
    2670:	96 95       	lsr	r25
    2672:	87 95       	ror	r24
    2674:	97 f9       	bld	r25, 7
    2676:	08 95       	ret
    2678:	5f 3f       	cpi	r21, 0xFF	; 255
    267a:	ac f0       	brlt	.+42     	; 0x26a6 <ldexp+0x66>
    267c:	98 3e       	cpi	r25, 0xE8	; 232
    267e:	9c f0       	brlt	.+38     	; 0x26a6 <ldexp+0x66>
    2680:	bb 27       	eor	r27, r27
    2682:	86 95       	lsr	r24
    2684:	77 95       	ror	r23
    2686:	67 95       	ror	r22
    2688:	b7 95       	ror	r27
    268a:	08 f4       	brcc	.+2      	; 0x268e <ldexp+0x4e>
    268c:	b1 60       	ori	r27, 0x01	; 1
    268e:	93 95       	inc	r25
    2690:	c1 f7       	brne	.-16     	; 0x2682 <ldexp+0x42>
    2692:	bb 0f       	add	r27, r27
    2694:	58 f7       	brcc	.-42     	; 0x266c <ldexp+0x2c>
    2696:	11 f4       	brne	.+4      	; 0x269c <ldexp+0x5c>
    2698:	60 ff       	sbrs	r22, 0
    269a:	e8 cf       	rjmp	.-48     	; 0x266c <ldexp+0x2c>
    269c:	6f 5f       	subi	r22, 0xFF	; 255
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	8f 4f       	sbci	r24, 0xFF	; 255
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	e3 cf       	rjmp	.-58     	; 0x266c <ldexp+0x2c>
    26a6:	57 ce       	rjmp	.-850    	; 0x2356 <__fp_szero>

000026a8 <modf>:
    26a8:	fa 01       	movw	r30, r20
    26aa:	dc 01       	movw	r26, r24
    26ac:	aa 0f       	add	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	9b 01       	movw	r18, r22
    26b2:	ac 01       	movw	r20, r24
    26b4:	bf 57       	subi	r27, 0x7F	; 127
    26b6:	28 f4       	brcc	.+10     	; 0x26c2 <modf+0x1a>
    26b8:	22 27       	eor	r18, r18
    26ba:	33 27       	eor	r19, r19
    26bc:	44 27       	eor	r20, r20
    26be:	50 78       	andi	r21, 0x80	; 128
    26c0:	1f c0       	rjmp	.+62     	; 0x2700 <modf+0x58>
    26c2:	b7 51       	subi	r27, 0x17	; 23
    26c4:	88 f4       	brcc	.+34     	; 0x26e8 <modf+0x40>
    26c6:	ab 2f       	mov	r26, r27
    26c8:	00 24       	eor	r0, r0
    26ca:	46 95       	lsr	r20
    26cc:	37 95       	ror	r19
    26ce:	27 95       	ror	r18
    26d0:	01 1c       	adc	r0, r1
    26d2:	a3 95       	inc	r26
    26d4:	d2 f3       	brmi	.-12     	; 0x26ca <modf+0x22>
    26d6:	00 20       	and	r0, r0
    26d8:	69 f0       	breq	.+26     	; 0x26f4 <modf+0x4c>
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	44 1f       	adc	r20, r20
    26e0:	b3 95       	inc	r27
    26e2:	da f3       	brmi	.-10     	; 0x26da <modf+0x32>
    26e4:	0d d0       	rcall	.+26     	; 0x2700 <modf+0x58>
    26e6:	89 cc       	rjmp	.-1774   	; 0x1ffa <__subsf3>
    26e8:	61 30       	cpi	r22, 0x01	; 1
    26ea:	71 05       	cpc	r23, r1
    26ec:	a0 e8       	ldi	r26, 0x80	; 128
    26ee:	8a 07       	cpc	r24, r26
    26f0:	b9 46       	sbci	r27, 0x69	; 105
    26f2:	30 f4       	brcc	.+12     	; 0x2700 <modf+0x58>
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	66 27       	eor	r22, r22
    26fa:	77 27       	eor	r23, r23
    26fc:	88 27       	eor	r24, r24
    26fe:	90 78       	andi	r25, 0x80	; 128
    2700:	30 96       	adiw	r30, 0x00	; 0
    2702:	21 f0       	breq	.+8      	; 0x270c <modf+0x64>
    2704:	20 83       	st	Z, r18
    2706:	31 83       	std	Z+1, r19	; 0x01
    2708:	42 83       	std	Z+2, r20	; 0x02
    270a:	53 83       	std	Z+3, r21	; 0x03
    270c:	08 95       	ret

0000270e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    270e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2710:	91 8d       	ldd	r25, Z+25	; 0x19
    2712:	22 8d       	ldd	r18, Z+26	; 0x1a
    2714:	89 2f       	mov	r24, r25
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	80 5c       	subi	r24, 0xC0	; 192
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	82 1b       	sub	r24, r18
    271e:	91 09       	sbc	r25, r1
}
    2720:	8f 73       	andi	r24, 0x3F	; 63
    2722:	99 27       	eor	r25, r25
    2724:	08 95       	ret

00002726 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2726:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2728:	91 8d       	ldd	r25, Z+25	; 0x19
    272a:	82 8d       	ldd	r24, Z+26	; 0x1a
    272c:	98 17       	cp	r25, r24
    272e:	31 f0       	breq	.+12     	; 0x273c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2730:	82 8d       	ldd	r24, Z+26	; 0x1a
    2732:	e8 0f       	add	r30, r24
    2734:	f1 1d       	adc	r31, r1
    2736:	85 8d       	ldd	r24, Z+29	; 0x1d
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2740:	08 95       	ret

00002742 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2742:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2744:	91 8d       	ldd	r25, Z+25	; 0x19
    2746:	82 8d       	ldd	r24, Z+26	; 0x1a
    2748:	98 17       	cp	r25, r24
    274a:	61 f0       	breq	.+24     	; 0x2764 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    274c:	82 8d       	ldd	r24, Z+26	; 0x1a
    274e:	df 01       	movw	r26, r30
    2750:	a8 0f       	add	r26, r24
    2752:	b1 1d       	adc	r27, r1
    2754:	5d 96       	adiw	r26, 0x1d	; 29
    2756:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2758:	92 8d       	ldd	r25, Z+26	; 0x1a
    275a:	9f 5f       	subi	r25, 0xFF	; 255
    275c:	9f 73       	andi	r25, 0x3F	; 63
    275e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2764:	8f ef       	ldi	r24, 0xFF	; 255
    2766:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2768:	08 95       	ret

0000276a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	95 e1       	ldi	r25, 0x15	; 21
    276e:	89 2b       	or	r24, r25
    2770:	41 f0       	breq	.+16     	; 0x2782 <_Z14serialEventRunv+0x18>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	89 2b       	or	r24, r25
    2778:	21 f0       	breq	.+8      	; 0x2782 <_Z14serialEventRunv+0x18>
    277a:	46 d1       	rcall	.+652    	; 0x2a08 <_Z17Serial0_availablev>
    277c:	81 11       	cpse	r24, r1
    277e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2782:	08 95       	ret

00002784 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2784:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2786:	84 8d       	ldd	r24, Z+28	; 0x1c
    2788:	df 01       	movw	r26, r30
    278a:	a8 0f       	add	r26, r24
    278c:	b1 1d       	adc	r27, r1
    278e:	a3 5a       	subi	r26, 0xA3	; 163
    2790:	bf 4f       	sbci	r27, 0xFF	; 255
    2792:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2794:	84 8d       	ldd	r24, Z+28	; 0x1c
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	8f 73       	andi	r24, 0x3F	; 63
    279c:	99 27       	eor	r25, r25
    279e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    27a0:	a6 89       	ldd	r26, Z+22	; 0x16
    27a2:	b7 89       	ldd	r27, Z+23	; 0x17
    27a4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    27a6:	a0 89       	ldd	r26, Z+16	; 0x10
    27a8:	b1 89       	ldd	r27, Z+17	; 0x11
    27aa:	8c 91       	ld	r24, X
    27ac:	80 64       	ori	r24, 0x40	; 64
    27ae:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    27b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    27b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    27b4:	98 13       	cpse	r25, r24
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    27b8:	02 88       	ldd	r0, Z+18	; 0x12
    27ba:	f3 89       	ldd	r31, Z+19	; 0x13
    27bc:	e0 2d       	mov	r30, r0
    27be:	80 81       	ld	r24, Z
    27c0:	8f 7d       	andi	r24, 0xDF	; 223
    27c2:	80 83       	st	Z, r24
    27c4:	08 95       	ret

000027c6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    27cc:	88 8d       	ldd	r24, Y+24	; 0x18
    27ce:	88 23       	and	r24, r24
    27d0:	c1 f0       	breq	.+48     	; 0x2802 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    27d2:	ea 89       	ldd	r30, Y+18	; 0x12
    27d4:	fb 89       	ldd	r31, Y+19	; 0x13
    27d6:	80 81       	ld	r24, Z
    27d8:	85 fd       	sbrc	r24, 5
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <_ZN14HardwareSerial5flushEv+0x20>
    27dc:	a8 89       	ldd	r26, Y+16	; 0x10
    27de:	b9 89       	ldd	r27, Y+17	; 0x11
    27e0:	8c 91       	ld	r24, X
    27e2:	86 fd       	sbrc	r24, 6
    27e4:	0e c0       	rjmp	.+28     	; 0x2802 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	07 fc       	sbrc	r0, 7
    27ea:	f5 cf       	rjmp	.-22     	; 0x27d6 <_ZN14HardwareSerial5flushEv+0x10>
    27ec:	80 81       	ld	r24, Z
    27ee:	85 ff       	sbrs	r24, 5
    27f0:	f2 cf       	rjmp	.-28     	; 0x27d6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    27f2:	a8 89       	ldd	r26, Y+16	; 0x10
    27f4:	b9 89       	ldd	r27, Y+17	; 0x11
    27f6:	8c 91       	ld	r24, X
    27f8:	85 ff       	sbrs	r24, 5
    27fa:	ed cf       	rjmp	.-38     	; 0x27d6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    27fc:	ce 01       	movw	r24, r28
    27fe:	c2 df       	rcall	.-124    	; 0x2784 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2800:	e8 cf       	rjmp	.-48     	; 0x27d2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	ec 01       	movw	r28, r24
  _written = true;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    281a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    281c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    281e:	98 13       	cpse	r25, r24
    2820:	05 c0       	rjmp	.+10     	; 0x282c <_ZN14HardwareSerial5writeEh+0x24>
    2822:	e8 89       	ldd	r30, Y+16	; 0x10
    2824:	f9 89       	ldd	r31, Y+17	; 0x11
    2826:	80 81       	ld	r24, Z
    2828:	85 fd       	sbrc	r24, 5
    282a:	23 c0       	rjmp	.+70     	; 0x2872 <_ZN14HardwareSerial5writeEh+0x6a>
    282c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    282e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2830:	10 e0       	ldi	r17, 0x00	; 0
    2832:	0f 5f       	subi	r16, 0xFF	; 255
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	0f 73       	andi	r16, 0x3F	; 63
    2838:	11 27       	eor	r17, r17
    283a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    283c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    283e:	e8 12       	cpse	r14, r24
    2840:	0b c0       	rjmp	.+22     	; 0x2858 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	07 fc       	sbrc	r0, 7
    2846:	fa cf       	rjmp	.-12     	; 0x283c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2848:	e8 89       	ldd	r30, Y+16	; 0x10
    284a:	f9 89       	ldd	r31, Y+17	; 0x11
    284c:	80 81       	ld	r24, Z
    284e:	85 ff       	sbrs	r24, 5
    2850:	f5 cf       	rjmp	.-22     	; 0x283c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2852:	ce 01       	movw	r24, r28
    2854:	97 df       	rcall	.-210    	; 0x2784 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2856:	f2 cf       	rjmp	.-28     	; 0x283c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285a:	fe 01       	movw	r30, r28
    285c:	e8 0f       	add	r30, r24
    285e:	f1 1d       	adc	r31, r1
    2860:	e3 5a       	subi	r30, 0xA3	; 163
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2866:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2868:	ea 89       	ldd	r30, Y+18	; 0x12
    286a:	fb 89       	ldd	r31, Y+19	; 0x13
    286c:	80 81       	ld	r24, Z
    286e:	80 62       	ori	r24, 0x20	; 32
    2870:	07 c0       	rjmp	.+14     	; 0x2880 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2872:	ee 89       	ldd	r30, Y+22	; 0x16
    2874:	ff 89       	ldd	r31, Y+23	; 0x17
    2876:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2878:	e8 89       	ldd	r30, Y+16	; 0x10
    287a:	f9 89       	ldd	r31, Y+17	; 0x11
    287c:	80 81       	ld	r24, Z
    287e:	80 64       	ori	r24, 0x40	; 64
    2880:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	08 95       	ret

00002894 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	ec 01       	movw	r28, r24
    28a4:	6a 01       	movw	r12, r20
    28a6:	7b 01       	movw	r14, r22
    28a8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    28aa:	e8 89       	ldd	r30, Y+16	; 0x10
    28ac:	f9 89       	ldd	r31, Y+17	; 0x11
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28b2:	41 15       	cp	r20, r1
    28b4:	51 4e       	sbci	r21, 0xE1	; 225
    28b6:	61 05       	cpc	r22, r1
    28b8:	71 05       	cpc	r23, r1
    28ba:	a9 f0       	breq	.+42     	; 0x28e6 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	79 e0       	ldi	r23, 0x09	; 9
    28c0:	8d e3       	ldi	r24, 0x3D	; 61
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a7 01       	movw	r20, r14
    28c6:	96 01       	movw	r18, r12
    28c8:	04 d5       	rcall	.+2568   	; 0x32d2 <__udivmodsi4>
    28ca:	da 01       	movw	r26, r20
    28cc:	c9 01       	movw	r24, r18
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	a1 09       	sbc	r26, r1
    28d2:	b1 09       	sbc	r27, r1
    28d4:	b6 95       	lsr	r27
    28d6:	a7 95       	ror	r26
    28d8:	97 95       	ror	r25
    28da:	87 95       	ror	r24
    28dc:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28de:	41 15       	cp	r20, r1
    28e0:	80 e1       	ldi	r24, 0x10	; 16
    28e2:	58 07       	cpc	r21, r24
    28e4:	a0 f0       	brcs	.+40     	; 0x290e <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    28e6:	e8 89       	ldd	r30, Y+16	; 0x10
    28e8:	f9 89       	ldd	r31, Y+17	; 0x11
    28ea:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    28ec:	60 e8       	ldi	r22, 0x80	; 128
    28ee:	74 e8       	ldi	r23, 0x84	; 132
    28f0:	8e e1       	ldi	r24, 0x1E	; 30
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a7 01       	movw	r20, r14
    28f6:	96 01       	movw	r18, r12
    28f8:	ec d4       	rcall	.+2520   	; 0x32d2 <__udivmodsi4>
    28fa:	ba 01       	movw	r22, r20
    28fc:	a9 01       	movw	r20, r18
    28fe:	41 50       	subi	r20, 0x01	; 1
    2900:	51 09       	sbc	r21, r1
    2902:	61 09       	sbc	r22, r1
    2904:	71 09       	sbc	r23, r1
    2906:	76 95       	lsr	r23
    2908:	67 95       	ror	r22
    290a:	57 95       	ror	r21
    290c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    290e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2910:	fd 85       	ldd	r31, Y+13	; 0x0d
    2912:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    2914:	ee 85       	ldd	r30, Y+14	; 0x0e
    2916:	ff 85       	ldd	r31, Y+15	; 0x0f
    2918:	40 83       	st	Z, r20

  _written = false;
    291a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    291c:	ec 89       	ldd	r30, Y+20	; 0x14
    291e:	fd 89       	ldd	r31, Y+21	; 0x15
    2920:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2922:	ea 89       	ldd	r30, Y+18	; 0x12
    2924:	fb 89       	ldd	r31, Y+19	; 0x13
    2926:	80 81       	ld	r24, Z
    2928:	80 61       	ori	r24, 0x10	; 16
    292a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    292c:	ea 89       	ldd	r30, Y+18	; 0x12
    292e:	fb 89       	ldd	r31, Y+19	; 0x13
    2930:	80 81       	ld	r24, Z
    2932:	88 60       	ori	r24, 0x08	; 8
    2934:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2936:	ea 89       	ldd	r30, Y+18	; 0x12
    2938:	fb 89       	ldd	r31, Y+19	; 0x13
    293a:	80 81       	ld	r24, Z
    293c:	80 68       	ori	r24, 0x80	; 128
    293e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2940:	ea 89       	ldd	r30, Y+18	; 0x12
    2942:	fb 89       	ldd	r31, Y+19	; 0x13
    2944:	80 81       	ld	r24, Z
    2946:	8f 7d       	andi	r24, 0xDF	; 223
    2948:	80 83       	st	Z, r24
}
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	08 95       	ret

0000295a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	8f 93       	push	r24
    2968:	9f 93       	push	r25
    296a:	ef 93       	push	r30
    296c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    296e:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <Serial+0x10>
    2972:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <Serial+0x11>
    2976:	80 81       	ld	r24, Z
    2978:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <Serial+0x16>
    297c:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <Serial+0x17>
    2980:	82 fd       	sbrc	r24, 2
    2982:	12 c0       	rjmp	.+36     	; 0x29a8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2984:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2986:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <Serial+0x19>
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    298e:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <Serial+0x1a>
    2992:	82 17       	cp	r24, r18
    2994:	51 f0       	breq	.+20     	; 0x29aa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2996:	e0 91 d1 06 	lds	r30, 0x06D1	; 0x8006d1 <Serial+0x19>
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	e8 54       	subi	r30, 0x48	; 72
    299e:	f9 4f       	sbci	r31, 0xF9	; 249
    29a0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    29a2:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <Serial+0x19>
    29a6:	01 c0       	rjmp	.+2      	; 0x29aa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    29a8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    29aa:	ff 91       	pop	r31
    29ac:	ef 91       	pop	r30
    29ae:	9f 91       	pop	r25
    29b0:	8f 91       	pop	r24
    29b2:	2f 91       	pop	r18
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti

000029be <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    29e0:	88 eb       	ldi	r24, 0xB8	; 184
    29e2:	96 e0       	ldi	r25, 0x06	; 6
    29e4:	cf de       	rcall	.-610    	; 0x2784 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    29e6:	ff 91       	pop	r31
    29e8:	ef 91       	pop	r30
    29ea:	bf 91       	pop	r27
    29ec:	af 91       	pop	r26
    29ee:	9f 91       	pop	r25
    29f0:	8f 91       	pop	r24
    29f2:	7f 91       	pop	r23
    29f4:	6f 91       	pop	r22
    29f6:	5f 91       	pop	r21
    29f8:	4f 91       	pop	r20
    29fa:	3f 91       	pop	r19
    29fc:	2f 91       	pop	r18
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	0f 90       	pop	r0
    2a04:	1f 90       	pop	r1
    2a06:	18 95       	reti

00002a08 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2a08:	88 eb       	ldi	r24, 0xB8	; 184
    2a0a:	96 e0       	ldi	r25, 0x06	; 6
    2a0c:	80 de       	rcall	.-768    	; 0x270e <_ZN14HardwareSerial9availableEv>
    2a0e:	21 e0       	ldi	r18, 0x01	; 1
    2a10:	89 2b       	or	r24, r25
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <_Z17Serial0_availablev+0xe>
    2a14:	20 e0       	ldi	r18, 0x00	; 0
}
    2a16:	82 2f       	mov	r24, r18
    2a18:	08 95       	ret

00002a1a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2a1a:	e8 eb       	ldi	r30, 0xB8	; 184
    2a1c:	f6 e0       	ldi	r31, 0x06	; 6
    2a1e:	13 82       	std	Z+3, r1	; 0x03
    2a20:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2a22:	88 ee       	ldi	r24, 0xE8	; 232
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	84 83       	std	Z+4, r24	; 0x04
    2a2c:	95 83       	std	Z+5, r25	; 0x05
    2a2e:	a6 83       	std	Z+6, r26	; 0x06
    2a30:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2a32:	81 e7       	ldi	r24, 0x71	; 113
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	85 ec       	ldi	r24, 0xC5	; 197
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	95 87       	std	Z+13, r25	; 0x0d
    2a40:	84 87       	std	Z+12, r24	; 0x0c
    2a42:	84 ec       	ldi	r24, 0xC4	; 196
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	97 87       	std	Z+15, r25	; 0x0f
    2a48:	86 87       	std	Z+14, r24	; 0x0e
    2a4a:	80 ec       	ldi	r24, 0xC0	; 192
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 8b       	std	Z+17, r25	; 0x11
    2a50:	80 8b       	std	Z+16, r24	; 0x10
    2a52:	81 ec       	ldi	r24, 0xC1	; 193
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	93 8b       	std	Z+19, r25	; 0x13
    2a58:	82 8b       	std	Z+18, r24	; 0x12
    2a5a:	82 ec       	ldi	r24, 0xC2	; 194
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	95 8b       	std	Z+21, r25	; 0x15
    2a60:	84 8b       	std	Z+20, r24	; 0x14
    2a62:	86 ec       	ldi	r24, 0xC6	; 198
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	97 8b       	std	Z+23, r25	; 0x17
    2a68:	86 8b       	std	Z+22, r24	; 0x16
    2a6a:	11 8e       	std	Z+25, r1	; 0x19
    2a6c:	12 8e       	std	Z+26, r1	; 0x1a
    2a6e:	13 8e       	std	Z+27, r1	; 0x1b
    2a70:	14 8e       	std	Z+28, r1	; 0x1c
    2a72:	08 95       	ret

00002a74 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    2a74:	08 95       	ret

00002a76 <main>:

int main(void)
{
	init();
    2a76:	18 d3       	rcall	.+1584   	; 0x30a8 <init>

	initVariant();
    2a78:	fd df       	rcall	.-6      	; 0x2a74 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2a7a:	a4 da       	rcall	.-2744   	; 0x1fc4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2a7c:	c5 eb       	ldi	r28, 0xB5	; 181
    2a7e:	d3 e1       	ldi	r29, 0x13	; 19
#endif
	
	setup();
    
	for (;;) {
		loop();
    2a80:	b4 da       	rcall	.-2712   	; 0x1fea <loop>
		if (serialEventRun) serialEventRun();
    2a82:	20 97       	sbiw	r28, 0x00	; 0
    2a84:	e9 f3       	breq	.-6      	; 0x2a80 <main+0xa>
    2a86:	71 de       	rcall	.-798    	; 0x276a <_Z14serialEventRunv>
    2a88:	fb cf       	rjmp	.-10     	; 0x2a80 <main+0xa>

00002a8a <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2a8a:	4c c5       	rjmp	.+2712   	; 0x3524 <free>

00002a8c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	6c 01       	movw	r12, r24
    2a9e:	7a 01       	movw	r14, r20
    2aa0:	8b 01       	movw	r16, r22
    2aa2:	c0 e0       	ldi	r28, 0x00	; 0
    2aa4:	d0 e0       	ldi	r29, 0x00	; 0
    2aa6:	ce 15       	cp	r28, r14
    2aa8:	df 05       	cpc	r29, r15
    2aaa:	89 f0       	breq	.+34     	; 0x2ace <_ZN5Print5writeEPKhj+0x42>
    2aac:	d8 01       	movw	r26, r16
    2aae:	6d 91       	ld	r22, X+
    2ab0:	8d 01       	movw	r16, r26
    2ab2:	d6 01       	movw	r26, r12
    2ab4:	ed 91       	ld	r30, X+
    2ab6:	fc 91       	ld	r31, X
    2ab8:	01 90       	ld	r0, Z+
    2aba:	f0 81       	ld	r31, Z
    2abc:	e0 2d       	mov	r30, r0
    2abe:	c6 01       	movw	r24, r12
    2ac0:	09 95       	icall
    2ac2:	89 2b       	or	r24, r25
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <_ZN5Print5writeEPKhj+0x3e>
    2ac6:	7e 01       	movw	r14, r28
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <_ZN5Print5writeEPKhj+0x42>
    2aca:	21 96       	adiw	r28, 0x01	; 1
    2acc:	ec cf       	rjmp	.-40     	; 0x2aa6 <_ZN5Print5writeEPKhj+0x1a>
    2ace:	c7 01       	movw	r24, r14
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
    2ae0:	08 95       	ret

00002ae2 <_ZN5Print5writeEPKc>:
    2ae2:	61 15       	cp	r22, r1
    2ae4:	71 05       	cpc	r23, r1
    2ae6:	79 f0       	breq	.+30     	; 0x2b06 <_ZN5Print5writeEPKc+0x24>
    2ae8:	fb 01       	movw	r30, r22
    2aea:	01 90       	ld	r0, Z+
    2aec:	00 20       	and	r0, r0
    2aee:	e9 f7       	brne	.-6      	; 0x2aea <_ZN5Print5writeEPKc+0x8>
    2af0:	31 97       	sbiw	r30, 0x01	; 1
    2af2:	af 01       	movw	r20, r30
    2af4:	46 1b       	sub	r20, r22
    2af6:	57 0b       	sbc	r21, r23
    2af8:	dc 01       	movw	r26, r24
    2afa:	ed 91       	ld	r30, X+
    2afc:	fc 91       	ld	r31, X
    2afe:	02 80       	ldd	r0, Z+2	; 0x02
    2b00:	f3 81       	ldd	r31, Z+3	; 0x03
    2b02:	e0 2d       	mov	r30, r0
    2b04:	09 94       	ijmp
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	08 95       	ret

00002b0c <_ZN5Print5printEPK19__FlashStringHelper>:
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	8c 01       	movw	r16, r24
    2b1a:	7b 01       	movw	r14, r22
    2b1c:	c0 e0       	ldi	r28, 0x00	; 0
    2b1e:	d0 e0       	ldi	r29, 0x00	; 0
    2b20:	f7 01       	movw	r30, r14
    2b22:	ec 0f       	add	r30, r28
    2b24:	fd 1f       	adc	r31, r29
    2b26:	64 91       	lpm	r22, Z
    2b28:	66 23       	and	r22, r22
    2b2a:	61 f0       	breq	.+24     	; 0x2b44 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2b2c:	d8 01       	movw	r26, r16
    2b2e:	ed 91       	ld	r30, X+
    2b30:	fc 91       	ld	r31, X
    2b32:	01 90       	ld	r0, Z+
    2b34:	f0 81       	ld	r31, Z
    2b36:	e0 2d       	mov	r30, r0
    2b38:	c8 01       	movw	r24, r16
    2b3a:	09 95       	icall
    2b3c:	89 2b       	or	r24, r25
    2b3e:	11 f0       	breq	.+4      	; 0x2b44 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2b40:	21 96       	adiw	r28, 0x01	; 1
    2b42:	ee cf       	rjmp	.-36     	; 0x2b20 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2b44:	ce 01       	movw	r24, r28
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	08 95       	ret

00002b54 <_ZN5Print5printEPKc>:
    2b54:	c6 cf       	rjmp	.-116    	; 0x2ae2 <_ZN5Print5writeEPKc>

00002b56 <_ZN5Print5printEc>:
    2b56:	dc 01       	movw	r26, r24
    2b58:	ed 91       	ld	r30, X+
    2b5a:	fc 91       	ld	r31, X
    2b5c:	01 90       	ld	r0, Z+
    2b5e:	f0 81       	ld	r31, Z
    2b60:	e0 2d       	mov	r30, r0
    2b62:	09 94       	ijmp

00002b64 <_ZN5Print7printlnEv>:
    2b64:	6d e7       	ldi	r22, 0x7D	; 125
    2b66:	71 e0       	ldi	r23, 0x01	; 1
    2b68:	bc cf       	rjmp	.-136    	; 0x2ae2 <_ZN5Print5writeEPKc>

00002b6a <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	ec 01       	movw	r28, r24
    2b74:	cb df       	rcall	.-106    	; 0x2b0c <_ZN5Print5printEPK19__FlashStringHelper>
    2b76:	8c 01       	movw	r16, r24
    2b78:	ce 01       	movw	r24, r28
    2b7a:	f4 df       	rcall	.-24     	; 0x2b64 <_ZN5Print7printlnEv>
    2b7c:	80 0f       	add	r24, r16
    2b7e:	91 1f       	adc	r25, r17
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	08 95       	ret

00002b8a <_ZN5Print11printNumberEmh>:
    2b8a:	8f 92       	push	r8
    2b8c:	9f 92       	push	r9
    2b8e:	af 92       	push	r10
    2b90:	bf 92       	push	r11
    2b92:	cf 92       	push	r12
    2b94:	df 92       	push	r13
    2b96:	ef 92       	push	r14
    2b98:	ff 92       	push	r15
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	a1 97       	sbiw	r28, 0x21	; 33
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	7c 01       	movw	r14, r24
    2bb4:	d4 2e       	mov	r13, r20
    2bb6:	c5 2e       	mov	r12, r21
    2bb8:	db 01       	movw	r26, r22
    2bba:	19 a2       	std	Y+33, r1	; 0x21
    2bbc:	22 30       	cpi	r18, 0x02	; 2
    2bbe:	08 f4       	brcc	.+2      	; 0x2bc2 <_ZN5Print11printNumberEmh+0x38>
    2bc0:	2a e0       	ldi	r18, 0x0A	; 10
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	0f 5d       	subi	r16, 0xDF	; 223
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	82 2e       	mov	r8, r18
    2bca:	91 2c       	mov	r9, r1
    2bcc:	a1 2c       	mov	r10, r1
    2bce:	b1 2c       	mov	r11, r1
    2bd0:	6d 2d       	mov	r22, r13
    2bd2:	7c 2d       	mov	r23, r12
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	a5 01       	movw	r20, r10
    2bd8:	94 01       	movw	r18, r8
    2bda:	7b d3       	rcall	.+1782   	; 0x32d2 <__udivmodsi4>
    2bdc:	d2 2e       	mov	r13, r18
    2bde:	c3 2e       	mov	r12, r19
    2be0:	da 01       	movw	r26, r20
    2be2:	01 50       	subi	r16, 0x01	; 1
    2be4:	11 09       	sbc	r17, r1
    2be6:	6a 30       	cpi	r22, 0x0A	; 10
    2be8:	71 05       	cpc	r23, r1
    2bea:	81 05       	cpc	r24, r1
    2bec:	91 05       	cpc	r25, r1
    2bee:	10 f4       	brcc	.+4      	; 0x2bf4 <_ZN5Print11printNumberEmh+0x6a>
    2bf0:	60 5d       	subi	r22, 0xD0	; 208
    2bf2:	01 c0       	rjmp	.+2      	; 0x2bf6 <_ZN5Print11printNumberEmh+0x6c>
    2bf4:	69 5c       	subi	r22, 0xC9	; 201
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	60 83       	st	Z, r22
    2bfa:	23 2b       	or	r18, r19
    2bfc:	24 2b       	or	r18, r20
    2bfe:	25 2b       	or	r18, r21
    2c00:	39 f7       	brne	.-50     	; 0x2bd0 <_ZN5Print11printNumberEmh+0x46>
    2c02:	b8 01       	movw	r22, r16
    2c04:	c7 01       	movw	r24, r14
    2c06:	6d df       	rcall	.-294    	; 0x2ae2 <_ZN5Print5writeEPKc>
    2c08:	a1 96       	adiw	r28, 0x21	; 33
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	9f 90       	pop	r9
    2c2a:	8f 90       	pop	r8
    2c2c:	08 95       	ret

00002c2e <_ZN5Print5printEli>:
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	ec 01       	movw	r28, r24
    2c40:	6a 01       	movw	r12, r20
    2c42:	7b 01       	movw	r14, r22
    2c44:	21 15       	cp	r18, r1
    2c46:	31 05       	cpc	r19, r1
    2c48:	79 f4       	brne	.+30     	; 0x2c68 <_ZN5Print5printEli+0x3a>
    2c4a:	e8 81       	ld	r30, Y
    2c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c4e:	01 90       	ld	r0, Z+
    2c50:	f0 81       	ld	r31, Z
    2c52:	e0 2d       	mov	r30, r0
    2c54:	64 2f       	mov	r22, r20
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	ff 90       	pop	r15
    2c60:	ef 90       	pop	r14
    2c62:	df 90       	pop	r13
    2c64:	cf 90       	pop	r12
    2c66:	09 94       	ijmp
    2c68:	2a 30       	cpi	r18, 0x0A	; 10
    2c6a:	31 05       	cpc	r19, r1
    2c6c:	d9 f4       	brne	.+54     	; 0x2ca4 <_ZN5Print5printEli+0x76>
    2c6e:	77 ff       	sbrs	r23, 7
    2c70:	18 c0       	rjmp	.+48     	; 0x2ca2 <_ZN5Print5printEli+0x74>
    2c72:	6d e2       	ldi	r22, 0x2D	; 45
    2c74:	70 df       	rcall	.-288    	; 0x2b56 <_ZN5Print5printEc>
    2c76:	8c 01       	movw	r16, r24
    2c78:	44 27       	eor	r20, r20
    2c7a:	55 27       	eor	r21, r21
    2c7c:	ba 01       	movw	r22, r20
    2c7e:	4c 19       	sub	r20, r12
    2c80:	5d 09       	sbc	r21, r13
    2c82:	6e 09       	sbc	r22, r14
    2c84:	7f 09       	sbc	r23, r15
    2c86:	2a e0       	ldi	r18, 0x0A	; 10
    2c88:	ce 01       	movw	r24, r28
    2c8a:	7f df       	rcall	.-258    	; 0x2b8a <_ZN5Print11printNumberEmh>
    2c8c:	80 0f       	add	r24, r16
    2c8e:	91 1f       	adc	r25, r17
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	ff 90       	pop	r15
    2c9a:	ef 90       	pop	r14
    2c9c:	df 90       	pop	r13
    2c9e:	cf 90       	pop	r12
    2ca0:	08 95       	ret
    2ca2:	2a e0       	ldi	r18, 0x0A	; 10
    2ca4:	b7 01       	movw	r22, r14
    2ca6:	a6 01       	movw	r20, r12
    2ca8:	ce 01       	movw	r24, r28
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	ff 90       	pop	r15
    2cb4:	ef 90       	pop	r14
    2cb6:	df 90       	pop	r13
    2cb8:	cf 90       	pop	r12
    2cba:	67 cf       	rjmp	.-306    	; 0x2b8a <_ZN5Print11printNumberEmh>

00002cbc <_ZN5Print5printEmi>:
    2cbc:	21 15       	cp	r18, r1
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	41 f4       	brne	.+16     	; 0x2cd2 <_ZN5Print5printEmi+0x16>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	ed 91       	ld	r30, X+
    2cc6:	fc 91       	ld	r31, X
    2cc8:	01 90       	ld	r0, Z+
    2cca:	f0 81       	ld	r31, Z
    2ccc:	e0 2d       	mov	r30, r0
    2cce:	64 2f       	mov	r22, r20
    2cd0:	09 94       	ijmp
    2cd2:	5b cf       	rjmp	.-330    	; 0x2b8a <_ZN5Print11printNumberEmh>

00002cd4 <_ZN5Print5printEhi>:
    2cd4:	9a 01       	movw	r18, r20
    2cd6:	46 2f       	mov	r20, r22
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	ee cf       	rjmp	.-36     	; 0x2cbc <_ZN5Print5printEmi>

00002ce0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2ce0:	4f 92       	push	r4
    2ce2:	5f 92       	push	r5
    2ce4:	6f 92       	push	r6
    2ce6:	7f 92       	push	r7
    2ce8:	8f 92       	push	r8
    2cea:	9f 92       	push	r9
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	ec 01       	movw	r28, r24
    2cfe:	6a 01       	movw	r12, r20
    2d00:	7b 01       	movw	r14, r22
    2d02:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2d04:	9a 01       	movw	r18, r20
    2d06:	ab 01       	movw	r20, r22
    2d08:	c7 01       	movw	r24, r14
    2d0a:	b6 01       	movw	r22, r12
    2d0c:	28 dc       	rcall	.-1968   	; 0x255e <__unordsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2d12:	60 e8       	ldi	r22, 0x80	; 128
    2d14:	71 e0       	ldi	r23, 0x01	; 1
    2d16:	24 c0       	rjmp	.+72     	; 0x2d60 <_ZN5Print10printFloatEdh+0x80>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2d18:	26 01       	movw	r4, r12
    2d1a:	37 01       	movw	r6, r14
    2d1c:	e8 94       	clt
    2d1e:	77 f8       	bld	r7, 7
    2d20:	2f ef       	ldi	r18, 0xFF	; 255
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	5f e7       	ldi	r21, 0x7F	; 127
    2d28:	c3 01       	movw	r24, r6
    2d2a:	b2 01       	movw	r22, r4
    2d2c:	18 dc       	rcall	.-2000   	; 0x255e <__unordsf2>
    2d2e:	81 11       	cpse	r24, r1
    2d30:	0c c0       	rjmp	.+24     	; 0x2d4a <_ZN5Print10printFloatEdh+0x6a>
    2d32:	2f ef       	ldi	r18, 0xFF	; 255
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	4f e7       	ldi	r20, 0x7F	; 127
    2d38:	5f e7       	ldi	r21, 0x7F	; 127
    2d3a:	c3 01       	movw	r24, r6
    2d3c:	b2 01       	movw	r22, r4
    2d3e:	c2 d9       	rcall	.-3196   	; 0x20c4 <__cmpsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	1c f4       	brge	.+6      	; 0x2d4a <_ZN5Print10printFloatEdh+0x6a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2d44:	64 e8       	ldi	r22, 0x84	; 132
    2d46:	71 e0       	ldi	r23, 0x01	; 1
    2d48:	0b c0       	rjmp	.+22     	; 0x2d60 <_ZN5Print10printFloatEdh+0x80>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2d4a:	2f ef       	ldi	r18, 0xFF	; 255
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	5f e4       	ldi	r21, 0x4F	; 79
    2d52:	c7 01       	movw	r24, r14
    2d54:	b6 01       	movw	r22, r12
    2d56:	05 db       	rcall	.-2550   	; 0x2362 <__gesf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	94 f4       	brge	.+36     	; 0x2d80 <_ZN5Print10printFloatEdh+0xa0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2d5c:	68 e8       	ldi	r22, 0x88	; 136
    2d5e:	71 e0       	ldi	r23, 0x01	; 1
    2d60:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	df 90       	pop	r13
    2d6c:	cf 90       	pop	r12
    2d6e:	bf 90       	pop	r11
    2d70:	af 90       	pop	r10
    2d72:	9f 90       	pop	r9
    2d74:	8f 90       	pop	r8
    2d76:	7f 90       	pop	r7
    2d78:	6f 90       	pop	r6
    2d7a:	5f 90       	pop	r5
    2d7c:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2d7e:	b1 ce       	rjmp	.-670    	; 0x2ae2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2d80:	2f ef       	ldi	r18, 0xFF	; 255
    2d82:	3f ef       	ldi	r19, 0xFF	; 255
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	5f ec       	ldi	r21, 0xCF	; 207
    2d88:	c7 01       	movw	r24, r14
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	9b d9       	rcall	.-3274   	; 0x20c4 <__cmpsf2>
    2d8e:	87 fd       	sbrc	r24, 7
    2d90:	e5 cf       	rjmp	.-54     	; 0x2d5c <_ZN5Print10printFloatEdh+0x7c>
  
  // Handle negative numbers
  if (number < 0.0)
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	a9 01       	movw	r20, r18
    2d98:	c7 01       	movw	r24, r14
    2d9a:	b6 01       	movw	r22, r12
    2d9c:	93 d9       	rcall	.-3290   	; 0x20c4 <__cmpsf2>
    2d9e:	87 ff       	sbrs	r24, 7
    2da0:	09 c0       	rjmp	.+18     	; 0x2db4 <_ZN5Print10printFloatEdh+0xd4>
  {
     n += print('-');
    2da2:	6d e2       	ldi	r22, 0x2D	; 45
    2da4:	ce 01       	movw	r24, r28
    2da6:	d7 de       	rcall	.-594    	; 0x2b56 <_ZN5Print5printEc>
    2da8:	4c 01       	movw	r8, r24
     number = -number;
    2daa:	f7 fa       	bst	r15, 7
    2dac:	f0 94       	com	r15
    2dae:	f7 f8       	bld	r15, 7
    2db0:	f0 94       	com	r15
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <_ZN5Print10printFloatEdh+0xd8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2db4:	81 2c       	mov	r8, r1
    2db6:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2db8:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2dc2:	ab 14       	cp	r10, r11
    2dc4:	39 f0       	breq	.+14     	; 0x2dd4 <_ZN5Print10printFloatEdh+0xf4>
    rounding /= 10.0;
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	7e d9       	rcall	.-3332   	; 0x20cc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2dd0:	a3 94       	inc	r10
    2dd2:	f7 cf       	rjmp	.-18     	; 0x2dc2 <_ZN5Print10printFloatEdh+0xe2>
    rounding /= 10.0;
  
  number += rounding;
    2dd4:	9b 01       	movw	r18, r22
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	c7 01       	movw	r24, r14
    2dda:	b6 01       	movw	r22, r12
    2ddc:	0f d9       	rcall	.-3554   	; 0x1ffc <__addsf3>
    2dde:	2b 01       	movw	r4, r22
    2de0:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2de2:	e1 d9       	rcall	.-3134   	; 0x21a6 <__fixunssfsi>
    2de4:	6b 01       	movw	r12, r22
    2de6:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    2de8:	0a da       	rcall	.-3052   	; 0x21fe <__floatunsisf>
    2dea:	9b 01       	movw	r18, r22
    2dec:	ac 01       	movw	r20, r24
    2dee:	c3 01       	movw	r24, r6
    2df0:	b2 01       	movw	r22, r4
    2df2:	03 d9       	rcall	.-3578   	; 0x1ffa <__subsf3>
    2df4:	2b 01       	movw	r4, r22
    2df6:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2df8:	2a e0       	ldi	r18, 0x0A	; 10
    2dfa:	b7 01       	movw	r22, r14
    2dfc:	a6 01       	movw	r20, r12
    2dfe:	ce 01       	movw	r24, r28
    2e00:	c4 de       	rcall	.-632    	; 0x2b8a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2e02:	7c 01       	movw	r14, r24
    2e04:	e8 0c       	add	r14, r8
    2e06:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2e08:	bb 20       	and	r11, r11
    2e0a:	31 f0       	breq	.+12     	; 0x2e18 <_ZN5Print10printFloatEdh+0x138>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2e0c:	6c e8       	ldi	r22, 0x8C	; 140
    2e0e:	71 e0       	ldi	r23, 0x01	; 1
    2e10:	ce 01       	movw	r24, r28
    2e12:	67 de       	rcall	.-818    	; 0x2ae2 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2e14:	e8 0e       	add	r14, r24
    2e16:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2e18:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2e1a:	dd 20       	and	r13, r13
    2e1c:	11 f1       	breq	.+68     	; 0x2e62 <_ZN5Print10printFloatEdh+0x182>
  {
    remainder *= 10.0;
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	c3 01       	movw	r24, r6
    2e28:	b2 01       	movw	r22, r4
    2e2a:	ea da       	rcall	.-2604   	; 0x2400 <__mulsf3>
    2e2c:	2b 01       	movw	r4, r22
    2e2e:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    2e30:	b5 d9       	rcall	.-3222   	; 0x219c <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    2e32:	4b 01       	movw	r8, r22
    2e34:	77 0f       	add	r23, r23
    2e36:	aa 08       	sbc	r10, r10
    2e38:	bb 08       	sbc	r11, r11
    2e3a:	2a e0       	ldi	r18, 0x0A	; 10
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	b5 01       	movw	r22, r10
    2e40:	a4 01       	movw	r20, r8
    2e42:	ce 01       	movw	r24, r28
    2e44:	f4 de       	rcall	.-536    	; 0x2c2e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    2e46:	e8 0e       	add	r14, r24
    2e48:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    2e4a:	c5 01       	movw	r24, r10
    2e4c:	b4 01       	movw	r22, r8
    2e4e:	d9 d9       	rcall	.-3150   	; 0x2202 <__floatsisf>
    2e50:	9b 01       	movw	r18, r22
    2e52:	ac 01       	movw	r20, r24
    2e54:	c3 01       	movw	r24, r6
    2e56:	b2 01       	movw	r22, r4
    2e58:	d0 d8       	rcall	.-3680   	; 0x1ffa <__subsf3>
    2e5a:	2b 01       	movw	r4, r22
    2e5c:	3c 01       	movw	r6, r24
    2e5e:	da 94       	dec	r13
    2e60:	dc cf       	rjmp	.-72     	; 0x2e1a <_ZN5Print10printFloatEdh+0x13a>
  } 
  
  return n;
}
    2e62:	c7 01       	movw	r24, r14
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	ff 90       	pop	r15
    2e6a:	ef 90       	pop	r14
    2e6c:	df 90       	pop	r13
    2e6e:	cf 90       	pop	r12
    2e70:	bf 90       	pop	r11
    2e72:	af 90       	pop	r10
    2e74:	9f 90       	pop	r9
    2e76:	8f 90       	pop	r8
    2e78:	7f 90       	pop	r7
    2e7a:	6f 90       	pop	r6
    2e7c:	5f 90       	pop	r5
    2e7e:	4f 90       	pop	r4
    2e80:	08 95       	ret

00002e82 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2e82:	2e cf       	rjmp	.-420    	; 0x2ce0 <_ZN5Print10printFloatEdh>

00002e84 <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	ec 01       	movw	r28, r24
    2e8e:	97 d0       	rcall	.+302    	; 0x2fbe <millis>
    2e90:	68 87       	std	Y+8, r22	; 0x08
    2e92:	79 87       	std	Y+9, r23	; 0x09
    2e94:	8a 87       	std	Y+10, r24	; 0x0a
    2e96:	9b 87       	std	Y+11, r25	; 0x0b
    2e98:	e8 81       	ld	r30, Y
    2e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e9c:	06 80       	ldd	r0, Z+6	; 0x06
    2e9e:	f7 81       	ldd	r31, Z+7	; 0x07
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	09 95       	icall
    2ea6:	97 ff       	sbrs	r25, 7
    2ea8:	16 c0       	rjmp	.+44     	; 0x2ed6 <_ZN6Stream9timedReadEv+0x52>
    2eaa:	89 d0       	rcall	.+274    	; 0x2fbe <millis>
    2eac:	08 85       	ldd	r16, Y+8	; 0x08
    2eae:	19 85       	ldd	r17, Y+9	; 0x09
    2eb0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2eb2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	80 1b       	sub	r24, r16
    2eba:	91 0b       	sbc	r25, r17
    2ebc:	a2 0b       	sbc	r26, r18
    2ebe:	b3 0b       	sbc	r27, r19
    2ec0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec2:	1d 81       	ldd	r17, Y+5	; 0x05
    2ec4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ec6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ec8:	80 17       	cp	r24, r16
    2eca:	91 07       	cpc	r25, r17
    2ecc:	a2 07       	cpc	r26, r18
    2ece:	b3 07       	cpc	r27, r19
    2ed0:	18 f3       	brcs	.-58     	; 0x2e98 <_ZN6Stream9timedReadEv+0x14>
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

00002ee0 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	6c 01       	movw	r12, r24
    2ef2:	7a 01       	movw	r14, r20
    2ef4:	8b 01       	movw	r16, r22
  size_t count = 0;
    2ef6:	c0 e0       	ldi	r28, 0x00	; 0
    2ef8:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    2efa:	ce 15       	cp	r28, r14
    2efc:	df 05       	cpc	r29, r15
    2efe:	59 f0       	breq	.+22     	; 0x2f16 <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    2f00:	c6 01       	movw	r24, r12
    2f02:	c0 df       	rcall	.-128    	; 0x2e84 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    2f04:	97 ff       	sbrs	r25, 7
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <_ZN6Stream9readBytesEPcj+0x2c>
    2f08:	7e 01       	movw	r14, r28
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <_ZN6Stream9readBytesEPcj+0x36>
    *buffer++ = (char)c;
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	81 93       	st	Z+, r24
    2f10:	8f 01       	movw	r16, r30
    count++;
    2f12:	21 96       	adiw	r28, 0x01	; 1
    2f14:	f2 cf       	rjmp	.-28     	; 0x2efa <_ZN6Stream9readBytesEPcj+0x1a>
  }
  return count;
}
    2f16:	c7 01       	movw	r24, r14
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	df 90       	pop	r13
    2f26:	cf 90       	pop	r12
    2f28:	08 95       	ret

00002f2a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	8f 93       	push	r24
    2f3a:	9f 93       	push	r25
    2f3c:	af 93       	push	r26
    2f3e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2f40:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <timer0_millis>
    2f44:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <timer0_millis+0x1>
    2f48:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <timer0_millis+0x2>
    2f4c:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2f50:	30 91 55 07 	lds	r19, 0x0755	; 0x800755 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2f54:	23 e0       	ldi	r18, 0x03	; 3
    2f56:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2f58:	2d 37       	cpi	r18, 0x7D	; 125
    2f5a:	20 f4       	brcc	.+8      	; 0x2f64 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	a1 1d       	adc	r26, r1
    2f60:	b1 1d       	adc	r27, r1
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2f64:	26 e8       	ldi	r18, 0x86	; 134
    2f66:	23 0f       	add	r18, r19
		m += 1;
    2f68:	02 96       	adiw	r24, 0x02	; 2
    2f6a:	a1 1d       	adc	r26, r1
    2f6c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f6e:	20 93 55 07 	sts	0x0755, r18	; 0x800755 <timer0_fract>
	timer0_millis = m;
    2f72:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <timer0_millis>
    2f76:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <timer0_millis+0x1>
    2f7a:	a0 93 58 07 	sts	0x0758, r26	; 0x800758 <timer0_millis+0x2>
    2f7e:	b0 93 59 07 	sts	0x0759, r27	; 0x800759 <timer0_millis+0x3>
	timer0_overflow_count++;
    2f82:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <timer0_overflow_count>
    2f86:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <timer0_overflow_count+0x1>
    2f8a:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <timer0_overflow_count+0x2>
    2f8e:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <timer0_overflow_count+0x3>
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	a1 1d       	adc	r26, r1
    2f96:	b1 1d       	adc	r27, r1
    2f98:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <timer0_overflow_count>
    2f9c:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <timer0_overflow_count+0x1>
    2fa0:	a0 93 5c 07 	sts	0x075C, r26	; 0x80075c <timer0_overflow_count+0x2>
    2fa4:	b0 93 5d 07 	sts	0x075D, r27	; 0x80075d <timer0_overflow_count+0x3>
}
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti

00002fbe <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2fbe:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2fc0:	f8 94       	cli
	m = timer0_millis;
    2fc2:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <timer0_millis>
    2fc6:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <timer0_millis+0x1>
    2fca:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <timer0_millis+0x2>
    2fce:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <timer0_millis+0x3>
	SREG = oldSREG;
    2fd2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2fd4:	08 95       	ret

00002fd6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2fd6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2fd8:	f8 94       	cli
	m = timer0_overflow_count;
    2fda:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <timer0_overflow_count>
    2fde:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <timer0_overflow_count+0x1>
    2fe2:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <timer0_overflow_count+0x2>
    2fe6:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2fea:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2fec:	a8 9b       	sbis	0x15, 0	; 21
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <micros+0x24>
    2ff0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ff2:	19 f0       	breq	.+6      	; 0x2ffa <micros+0x24>
		m++;
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	a1 1d       	adc	r26, r1
    2ff8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2ffa:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2ffc:	ba 2f       	mov	r27, r26
    2ffe:	a9 2f       	mov	r26, r25
    3000:	98 2f       	mov	r25, r24
    3002:	88 27       	eor	r24, r24
    3004:	82 0f       	add	r24, r18
    3006:	91 1d       	adc	r25, r1
    3008:	a1 1d       	adc	r26, r1
    300a:	b1 1d       	adc	r27, r1
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	42 e0       	ldi	r20, 0x02	; 2
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	88 1f       	adc	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	4a 95       	dec	r20
    301c:	d1 f7       	brne	.-12     	; 0x3012 <micros+0x3c>
}
    301e:	08 95       	ret

00003020 <delay>:

void delay(unsigned long ms)
{
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	6b 01       	movw	r12, r22
    3032:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3034:	d0 df       	rcall	.-96     	; 0x2fd6 <micros>
    3036:	4b 01       	movw	r8, r22
    3038:	5c 01       	movw	r10, r24

	while (ms > 0) {
    303a:	c1 14       	cp	r12, r1
    303c:	d1 04       	cpc	r13, r1
    303e:	e1 04       	cpc	r14, r1
    3040:	f1 04       	cpc	r15, r1
    3042:	f1 f0       	breq	.+60     	; 0x3080 <delay+0x60>
		yield();
    3044:	45 d1       	rcall	.+650    	; 0x32d0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3046:	c7 df       	rcall	.-114    	; 0x2fd6 <micros>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	88 19       	sub	r24, r8
    304e:	99 09       	sbc	r25, r9
    3050:	aa 09       	sbc	r26, r10
    3052:	bb 09       	sbc	r27, r11
    3054:	88 3e       	cpi	r24, 0xE8	; 232
    3056:	93 40       	sbci	r25, 0x03	; 3
    3058:	a1 05       	cpc	r26, r1
    305a:	b1 05       	cpc	r27, r1
    305c:	70 f3       	brcs	.-36     	; 0x303a <delay+0x1a>
			ms--;
    305e:	21 e0       	ldi	r18, 0x01	; 1
    3060:	c2 1a       	sub	r12, r18
    3062:	d1 08       	sbc	r13, r1
    3064:	e1 08       	sbc	r14, r1
    3066:	f1 08       	sbc	r15, r1
			start += 1000;
    3068:	88 ee       	ldi	r24, 0xE8	; 232
    306a:	88 0e       	add	r8, r24
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	98 1e       	adc	r9, r24
    3070:	a1 1c       	adc	r10, r1
    3072:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3074:	c1 14       	cp	r12, r1
    3076:	d1 04       	cpc	r13, r1
    3078:	e1 04       	cpc	r14, r1
    307a:	f1 04       	cpc	r15, r1
    307c:	21 f7       	brne	.-56     	; 0x3046 <delay+0x26>
    307e:	dd cf       	rjmp	.-70     	; 0x303a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	cf 90       	pop	r12
    3088:	bf 90       	pop	r11
    308a:	af 90       	pop	r10
    308c:	9f 90       	pop	r9
    308e:	8f 90       	pop	r8
    3090:	08 95       	ret

00003092 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3092:	82 30       	cpi	r24, 0x02	; 2
    3094:	91 05       	cpc	r25, r1
    3096:	38 f0       	brcs	.+14     	; 0x30a6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    30a0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <delayMicroseconds+0x10>
    30a6:	08 95       	ret

000030a8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    30a8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    30aa:	84 b5       	in	r24, 0x24	; 36
    30ac:	82 60       	ori	r24, 0x02	; 2
    30ae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    30b0:	84 b5       	in	r24, 0x24	; 36
    30b2:	81 60       	ori	r24, 0x01	; 1
    30b4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    30b6:	85 b5       	in	r24, 0x25	; 37
    30b8:	82 60       	ori	r24, 0x02	; 2
    30ba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    30bc:	85 b5       	in	r24, 0x25	; 37
    30be:	81 60       	ori	r24, 0x01	; 1
    30c0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    30c2:	ee e6       	ldi	r30, 0x6E	; 110
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	81 60       	ori	r24, 0x01	; 1
    30ca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    30cc:	e1 e8       	ldi	r30, 0x81	; 129
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    30d2:	80 81       	ld	r24, Z
    30d4:	82 60       	ori	r24, 0x02	; 2
    30d6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    30d8:	80 81       	ld	r24, Z
    30da:	81 60       	ori	r24, 0x01	; 1
    30dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    30de:	e0 e8       	ldi	r30, 0x80	; 128
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	81 60       	ori	r24, 0x01	; 1
    30e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    30e8:	e1 eb       	ldi	r30, 0xB1	; 177
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	84 60       	ori	r24, 0x04	; 4
    30f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    30f2:	e0 eb       	ldi	r30, 0xB0	; 176
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	81 60       	ori	r24, 0x01	; 1
    30fa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    30fc:	ea e7       	ldi	r30, 0x7A	; 122
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	84 60       	ori	r24, 0x04	; 4
    3104:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3106:	80 81       	ld	r24, Z
    3108:	82 60       	ori	r24, 0x02	; 2
    310a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    310c:	80 81       	ld	r24, Z
    310e:	81 60       	ori	r24, 0x01	; 1
    3110:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3112:	80 81       	ld	r24, Z
    3114:	80 68       	ori	r24, 0x80	; 128
    3116:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3118:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    311c:	08 95       	ret

0000311e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    311e:	8e 30       	cpi	r24, 0x0E	; 14
    3120:	08 f0       	brcs	.+2      	; 0x3124 <analogRead+0x6>
    3122:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3124:	87 70       	andi	r24, 0x07	; 7
    3126:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    312a:	90 e4       	ldi	r25, 0x40	; 64
    312c:	29 9f       	mul	r18, r25
    312e:	90 01       	movw	r18, r0
    3130:	11 24       	eor	r1, r1
    3132:	82 2b       	or	r24, r18
    3134:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3138:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    313c:	80 64       	ori	r24, 0x40	; 64
    313e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3142:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3146:	86 fd       	sbrc	r24, 6
    3148:	fc cf       	rjmp	.-8      	; 0x3142 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    314a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    314e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3152:	90 e0       	ldi	r25, 0x00	; 0
}
    3154:	92 2b       	or	r25, r18
    3156:	08 95       	ret

00003158 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3158:	83 30       	cpi	r24, 0x03	; 3
    315a:	81 f0       	breq	.+32     	; 0x317c <turnOffPWM+0x24>
    315c:	28 f4       	brcc	.+10     	; 0x3168 <turnOffPWM+0x10>
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	99 f0       	breq	.+38     	; 0x3188 <turnOffPWM+0x30>
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	a1 f0       	breq	.+40     	; 0x318e <turnOffPWM+0x36>
    3166:	08 95       	ret
    3168:	87 30       	cpi	r24, 0x07	; 7
    316a:	a9 f0       	breq	.+42     	; 0x3196 <turnOffPWM+0x3e>
    316c:	88 30       	cpi	r24, 0x08	; 8
    316e:	b9 f0       	breq	.+46     	; 0x319e <turnOffPWM+0x46>
    3170:	84 30       	cpi	r24, 0x04	; 4
    3172:	d1 f4       	brne	.+52     	; 0x31a8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3174:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3178:	8f 7d       	andi	r24, 0xDF	; 223
    317a:	03 c0       	rjmp	.+6      	; 0x3182 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    317c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3180:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3182:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3186:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3188:	84 b5       	in	r24, 0x24	; 36
    318a:	8f 77       	andi	r24, 0x7F	; 127
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    318e:	84 b5       	in	r24, 0x24	; 36
    3190:	8f 7d       	andi	r24, 0xDF	; 223
    3192:	84 bd       	out	0x24, r24	; 36
    3194:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3196:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    319a:	8f 77       	andi	r24, 0x7F	; 127
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    319e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    31a2:	8f 7d       	andi	r24, 0xDF	; 223
    31a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    31a8:	08 95       	ret

000031aa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	fc 01       	movw	r30, r24
    31b2:	ea 54       	subi	r30, 0x4A	; 74
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    31b8:	fc 01       	movw	r30, r24
    31ba:	e6 53       	subi	r30, 0x36	; 54
    31bc:	fe 4f       	sbci	r31, 0xFE	; 254
    31be:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    31c0:	88 23       	and	r24, r24
    31c2:	61 f1       	breq	.+88     	; 0x321c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	fc 01       	movw	r30, r24
    31cc:	ee 50       	subi	r30, 0x0E	; 14
    31ce:	fe 4f       	sbci	r31, 0xFE	; 254
    31d0:	c5 91       	lpm	r28, Z+
    31d2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    31d4:	fc 01       	movw	r30, r24
    31d6:	e8 51       	subi	r30, 0x18	; 24
    31d8:	fe 4f       	sbci	r31, 0xFE	; 254
    31da:	a5 91       	lpm	r26, Z+
    31dc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    31de:	61 11       	cpse	r22, r1
    31e0:	09 c0       	rjmp	.+18     	; 0x31f4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    31e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31e4:	f8 94       	cli
		*reg &= ~bit;
    31e6:	88 81       	ld	r24, Y
    31e8:	20 95       	com	r18
    31ea:	82 23       	and	r24, r18
    31ec:	88 83       	st	Y, r24
		*out &= ~bit;
    31ee:	ec 91       	ld	r30, X
    31f0:	2e 23       	and	r18, r30
    31f2:	0b c0       	rjmp	.+22     	; 0x320a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    31f4:	62 30       	cpi	r22, 0x02	; 2
    31f6:	61 f4       	brne	.+24     	; 0x3210 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    31f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31fa:	f8 94       	cli
		*reg &= ~bit;
    31fc:	38 81       	ld	r19, Y
    31fe:	82 2f       	mov	r24, r18
    3200:	80 95       	com	r24
    3202:	83 23       	and	r24, r19
    3204:	88 83       	st	Y, r24
		*out |= bit;
    3206:	ec 91       	ld	r30, X
    3208:	2e 2b       	or	r18, r30
    320a:	2c 93       	st	X, r18
		SREG = oldSREG;
    320c:	9f bf       	out	0x3f, r25	; 63
    320e:	06 c0       	rjmp	.+12     	; 0x321c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3210:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3212:	f8 94       	cli
		*reg |= bit;
    3214:	e8 81       	ld	r30, Y
    3216:	2e 2b       	or	r18, r30
    3218:	28 83       	st	Y, r18
		SREG = oldSREG;
    321a:	8f bf       	out	0x3f, r24	; 63
	}
}
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	f9 01       	movw	r30, r18
    322e:	ee 55       	subi	r30, 0x5E	; 94
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3234:	f9 01       	movw	r30, r18
    3236:	ea 54       	subi	r30, 0x4A	; 74
    3238:	fe 4f       	sbci	r31, 0xFE	; 254
    323a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    323c:	f9 01       	movw	r30, r18
    323e:	e6 53       	subi	r30, 0x36	; 54
    3240:	fe 4f       	sbci	r31, 0xFE	; 254
    3242:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3244:	cc 23       	and	r28, r28
    3246:	c1 f0       	breq	.+48     	; 0x3278 <digitalWrite+0x56>
    3248:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    324a:	81 11       	cpse	r24, r1
    324c:	85 df       	rcall	.-246    	; 0x3158 <turnOffPWM>

	out = portOutputRegister(port);
    324e:	ec 2f       	mov	r30, r28
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	ee 0f       	add	r30, r30
    3254:	ff 1f       	adc	r31, r31
    3256:	e8 51       	subi	r30, 0x18	; 24
    3258:	fe 4f       	sbci	r31, 0xFE	; 254
    325a:	a5 91       	lpm	r26, Z+
    325c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    325e:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3260:	f8 94       	cli

	if (val == LOW) {
    3262:	11 11       	cpse	r17, r1
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <digitalWrite+0x4e>
		*out &= ~bit;
    3266:	9c 91       	ld	r25, X
    3268:	ed 2f       	mov	r30, r29
    326a:	e0 95       	com	r30
    326c:	e9 23       	and	r30, r25
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3270:	ec 91       	ld	r30, X
    3272:	ed 2b       	or	r30, r29
    3274:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    3276:	8f bf       	out	0x3f, r24	; 63
}
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	1f 91       	pop	r17
    327e:	08 95       	ret

00003280 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	f9 01       	movw	r30, r18
    328a:	ee 55       	subi	r30, 0x5E	; 94
    328c:	fe 4f       	sbci	r31, 0xFE	; 254
    328e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3290:	f9 01       	movw	r30, r18
    3292:	ea 54       	subi	r30, 0x4A	; 74
    3294:	fe 4f       	sbci	r31, 0xFE	; 254
    3296:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3298:	f9 01       	movw	r30, r18
    329a:	e6 53       	subi	r30, 0x36	; 54
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    32a0:	cc 23       	and	r28, r28
    32a2:	89 f0       	breq	.+34     	; 0x32c6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    32a4:	81 11       	cpse	r24, r1
    32a6:	58 df       	rcall	.-336    	; 0x3158 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    32a8:	ec 2f       	mov	r30, r28
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	e2 52       	subi	r30, 0x22	; 34
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	a5 91       	lpm	r26, Z+
    32b6:	b4 91       	lpm	r27, Z
    32b8:	ec 91       	ld	r30, X
    32ba:	ed 23       	and	r30, r29
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	21 f4       	brne	.+8      	; 0x32ca <digitalRead+0x4a>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    32d0:	08 95       	ret

000032d2 <__udivmodsi4>:
    32d2:	a1 e2       	ldi	r26, 0x21	; 33
    32d4:	1a 2e       	mov	r1, r26
    32d6:	aa 1b       	sub	r26, r26
    32d8:	bb 1b       	sub	r27, r27
    32da:	fd 01       	movw	r30, r26
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <__udivmodsi4_ep>

000032de <__udivmodsi4_loop>:
    32de:	aa 1f       	adc	r26, r26
    32e0:	bb 1f       	adc	r27, r27
    32e2:	ee 1f       	adc	r30, r30
    32e4:	ff 1f       	adc	r31, r31
    32e6:	a2 17       	cp	r26, r18
    32e8:	b3 07       	cpc	r27, r19
    32ea:	e4 07       	cpc	r30, r20
    32ec:	f5 07       	cpc	r31, r21
    32ee:	20 f0       	brcs	.+8      	; 0x32f8 <__udivmodsi4_ep>
    32f0:	a2 1b       	sub	r26, r18
    32f2:	b3 0b       	sbc	r27, r19
    32f4:	e4 0b       	sbc	r30, r20
    32f6:	f5 0b       	sbc	r31, r21

000032f8 <__udivmodsi4_ep>:
    32f8:	66 1f       	adc	r22, r22
    32fa:	77 1f       	adc	r23, r23
    32fc:	88 1f       	adc	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	1a 94       	dec	r1
    3302:	69 f7       	brne	.-38     	; 0x32de <__udivmodsi4_loop>
    3304:	60 95       	com	r22
    3306:	70 95       	com	r23
    3308:	80 95       	com	r24
    330a:	90 95       	com	r25
    330c:	9b 01       	movw	r18, r22
    330e:	ac 01       	movw	r20, r24
    3310:	bd 01       	movw	r22, r26
    3312:	cf 01       	movw	r24, r30
    3314:	08 95       	ret

00003316 <__divmodsi4>:
    3316:	05 2e       	mov	r0, r21
    3318:	97 fb       	bst	r25, 7
    331a:	16 f4       	brtc	.+4      	; 0x3320 <__divmodsi4+0xa>
    331c:	00 94       	com	r0
    331e:	0f d0       	rcall	.+30     	; 0x333e <__negsi2>
    3320:	57 fd       	sbrc	r21, 7
    3322:	05 d0       	rcall	.+10     	; 0x332e <__divmodsi4_neg2>
    3324:	d6 df       	rcall	.-84     	; 0x32d2 <__udivmodsi4>
    3326:	07 fc       	sbrc	r0, 7
    3328:	02 d0       	rcall	.+4      	; 0x332e <__divmodsi4_neg2>
    332a:	46 f4       	brtc	.+16     	; 0x333c <__divmodsi4_exit>
    332c:	08 c0       	rjmp	.+16     	; 0x333e <__negsi2>

0000332e <__divmodsi4_neg2>:
    332e:	50 95       	com	r21
    3330:	40 95       	com	r20
    3332:	30 95       	com	r19
    3334:	21 95       	neg	r18
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	4f 4f       	sbci	r20, 0xFF	; 255
    333a:	5f 4f       	sbci	r21, 0xFF	; 255

0000333c <__divmodsi4_exit>:
    333c:	08 95       	ret

0000333e <__negsi2>:
    333e:	90 95       	com	r25
    3340:	80 95       	com	r24
    3342:	70 95       	com	r23
    3344:	61 95       	neg	r22
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	8f 4f       	sbci	r24, 0xFF	; 255
    334a:	9f 4f       	sbci	r25, 0xFF	; 255
    334c:	08 95       	ret

0000334e <__muluhisi3>:
    334e:	46 d0       	rcall	.+140    	; 0x33dc <__umulhisi3>
    3350:	a5 9f       	mul	r26, r21
    3352:	90 0d       	add	r25, r0
    3354:	b4 9f       	mul	r27, r20
    3356:	90 0d       	add	r25, r0
    3358:	a4 9f       	mul	r26, r20
    335a:	80 0d       	add	r24, r0
    335c:	91 1d       	adc	r25, r1
    335e:	11 24       	eor	r1, r1
    3360:	08 95       	ret

00003362 <__prologue_saves__>:
    3362:	2f 92       	push	r2
    3364:	3f 92       	push	r3
    3366:	4f 92       	push	r4
    3368:	5f 92       	push	r5
    336a:	6f 92       	push	r6
    336c:	7f 92       	push	r7
    336e:	8f 92       	push	r8
    3370:	9f 92       	push	r9
    3372:	af 92       	push	r10
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	ca 1b       	sub	r28, r26
    338c:	db 0b       	sbc	r29, r27
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	09 94       	ijmp

0000339a <__epilogue_restores__>:
    339a:	2a 88       	ldd	r2, Y+18	; 0x12
    339c:	39 88       	ldd	r3, Y+17	; 0x11
    339e:	48 88       	ldd	r4, Y+16	; 0x10
    33a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    33a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    33a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    33a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    33a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    33aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ac:	b9 84       	ldd	r11, Y+9	; 0x09
    33ae:	c8 84       	ldd	r12, Y+8	; 0x08
    33b0:	df 80       	ldd	r13, Y+7	; 0x07
    33b2:	ee 80       	ldd	r14, Y+6	; 0x06
    33b4:	fd 80       	ldd	r15, Y+5	; 0x05
    33b6:	0c 81       	ldd	r16, Y+4	; 0x04
    33b8:	1b 81       	ldd	r17, Y+3	; 0x03
    33ba:	aa 81       	ldd	r26, Y+2	; 0x02
    33bc:	b9 81       	ldd	r27, Y+1	; 0x01
    33be:	ce 0f       	add	r28, r30
    33c0:	d1 1d       	adc	r29, r1
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	ed 01       	movw	r28, r26
    33ce:	08 95       	ret

000033d0 <__tablejump2__>:
    33d0:	ee 0f       	add	r30, r30
    33d2:	ff 1f       	adc	r31, r31
    33d4:	05 90       	lpm	r0, Z+
    33d6:	f4 91       	lpm	r31, Z
    33d8:	e0 2d       	mov	r30, r0
    33da:	09 94       	ijmp

000033dc <__umulhisi3>:
    33dc:	a2 9f       	mul	r26, r18
    33de:	b0 01       	movw	r22, r0
    33e0:	b3 9f       	mul	r27, r19
    33e2:	c0 01       	movw	r24, r0
    33e4:	a3 9f       	mul	r26, r19
    33e6:	70 0d       	add	r23, r0
    33e8:	81 1d       	adc	r24, r1
    33ea:	11 24       	eor	r1, r1
    33ec:	91 1d       	adc	r25, r1
    33ee:	b2 9f       	mul	r27, r18
    33f0:	70 0d       	add	r23, r0
    33f2:	81 1d       	adc	r24, r1
    33f4:	11 24       	eor	r1, r1
    33f6:	91 1d       	adc	r25, r1
    33f8:	08 95       	ret

000033fa <malloc>:
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	82 30       	cpi	r24, 0x02	; 2
    3400:	91 05       	cpc	r25, r1
    3402:	10 f4       	brcc	.+4      	; 0x3408 <malloc+0xe>
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <__flp>
    340c:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <__flp+0x1>
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	c0 e0       	ldi	r28, 0x00	; 0
    3416:	d0 e0       	ldi	r29, 0x00	; 0
    3418:	30 97       	sbiw	r30, 0x00	; 0
    341a:	11 f1       	breq	.+68     	; 0x3460 <malloc+0x66>
    341c:	40 81       	ld	r20, Z
    341e:	51 81       	ldd	r21, Z+1	; 0x01
    3420:	48 17       	cp	r20, r24
    3422:	59 07       	cpc	r21, r25
    3424:	c0 f0       	brcs	.+48     	; 0x3456 <malloc+0x5c>
    3426:	48 17       	cp	r20, r24
    3428:	59 07       	cpc	r21, r25
    342a:	61 f4       	brne	.+24     	; 0x3444 <malloc+0x4a>
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	93 81       	ldd	r25, Z+3	; 0x03
    3430:	20 97       	sbiw	r28, 0x00	; 0
    3432:	19 f0       	breq	.+6      	; 0x343a <malloc+0x40>
    3434:	9b 83       	std	Y+3, r25	; 0x03
    3436:	8a 83       	std	Y+2, r24	; 0x02
    3438:	2b c0       	rjmp	.+86     	; 0x3490 <malloc+0x96>
    343a:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <__flp+0x1>
    343e:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <__flp>
    3442:	26 c0       	rjmp	.+76     	; 0x3490 <malloc+0x96>
    3444:	21 15       	cp	r18, r1
    3446:	31 05       	cpc	r19, r1
    3448:	19 f0       	breq	.+6      	; 0x3450 <malloc+0x56>
    344a:	42 17       	cp	r20, r18
    344c:	53 07       	cpc	r21, r19
    344e:	18 f4       	brcc	.+6      	; 0x3456 <malloc+0x5c>
    3450:	9a 01       	movw	r18, r20
    3452:	be 01       	movw	r22, r28
    3454:	df 01       	movw	r26, r30
    3456:	ef 01       	movw	r28, r30
    3458:	02 80       	ldd	r0, Z+2	; 0x02
    345a:	f3 81       	ldd	r31, Z+3	; 0x03
    345c:	e0 2d       	mov	r30, r0
    345e:	dc cf       	rjmp	.-72     	; 0x3418 <malloc+0x1e>
    3460:	21 15       	cp	r18, r1
    3462:	31 05       	cpc	r19, r1
    3464:	09 f1       	breq	.+66     	; 0x34a8 <malloc+0xae>
    3466:	28 1b       	sub	r18, r24
    3468:	39 0b       	sbc	r19, r25
    346a:	24 30       	cpi	r18, 0x04	; 4
    346c:	31 05       	cpc	r19, r1
    346e:	90 f4       	brcc	.+36     	; 0x3494 <malloc+0x9a>
    3470:	12 96       	adiw	r26, 0x02	; 2
    3472:	8d 91       	ld	r24, X+
    3474:	9c 91       	ld	r25, X
    3476:	13 97       	sbiw	r26, 0x03	; 3
    3478:	61 15       	cp	r22, r1
    347a:	71 05       	cpc	r23, r1
    347c:	21 f0       	breq	.+8      	; 0x3486 <malloc+0x8c>
    347e:	fb 01       	movw	r30, r22
    3480:	93 83       	std	Z+3, r25	; 0x03
    3482:	82 83       	std	Z+2, r24	; 0x02
    3484:	04 c0       	rjmp	.+8      	; 0x348e <malloc+0x94>
    3486:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <__flp+0x1>
    348a:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <__flp>
    348e:	fd 01       	movw	r30, r26
    3490:	32 96       	adiw	r30, 0x02	; 2
    3492:	44 c0       	rjmp	.+136    	; 0x351c <malloc+0x122>
    3494:	fd 01       	movw	r30, r26
    3496:	e2 0f       	add	r30, r18
    3498:	f3 1f       	adc	r31, r19
    349a:	81 93       	st	Z+, r24
    349c:	91 93       	st	Z+, r25
    349e:	22 50       	subi	r18, 0x02	; 2
    34a0:	31 09       	sbc	r19, r1
    34a2:	2d 93       	st	X+, r18
    34a4:	3c 93       	st	X, r19
    34a6:	3a c0       	rjmp	.+116    	; 0x351c <malloc+0x122>
    34a8:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <__brkval>
    34ac:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <__brkval+0x1>
    34b0:	23 2b       	or	r18, r19
    34b2:	41 f4       	brne	.+16     	; 0x34c4 <malloc+0xca>
    34b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    34b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    34bc:	30 93 5f 07 	sts	0x075F, r19	; 0x80075f <__brkval+0x1>
    34c0:	20 93 5e 07 	sts	0x075E, r18	; 0x80075e <__brkval>
    34c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    34c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    34cc:	21 15       	cp	r18, r1
    34ce:	31 05       	cpc	r19, r1
    34d0:	41 f4       	brne	.+16     	; 0x34e2 <malloc+0xe8>
    34d2:	2d b7       	in	r18, 0x3d	; 61
    34d4:	3e b7       	in	r19, 0x3e	; 62
    34d6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    34da:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    34de:	24 1b       	sub	r18, r20
    34e0:	35 0b       	sbc	r19, r21
    34e2:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <__brkval>
    34e6:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <__brkval+0x1>
    34ea:	e2 17       	cp	r30, r18
    34ec:	f3 07       	cpc	r31, r19
    34ee:	a0 f4       	brcc	.+40     	; 0x3518 <malloc+0x11e>
    34f0:	2e 1b       	sub	r18, r30
    34f2:	3f 0b       	sbc	r19, r31
    34f4:	28 17       	cp	r18, r24
    34f6:	39 07       	cpc	r19, r25
    34f8:	78 f0       	brcs	.+30     	; 0x3518 <malloc+0x11e>
    34fa:	ac 01       	movw	r20, r24
    34fc:	4e 5f       	subi	r20, 0xFE	; 254
    34fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3500:	24 17       	cp	r18, r20
    3502:	35 07       	cpc	r19, r21
    3504:	48 f0       	brcs	.+18     	; 0x3518 <malloc+0x11e>
    3506:	4e 0f       	add	r20, r30
    3508:	5f 1f       	adc	r21, r31
    350a:	50 93 5f 07 	sts	0x075F, r21	; 0x80075f <__brkval+0x1>
    350e:	40 93 5e 07 	sts	0x075E, r20	; 0x80075e <__brkval>
    3512:	81 93       	st	Z+, r24
    3514:	91 93       	st	Z+, r25
    3516:	02 c0       	rjmp	.+4      	; 0x351c <malloc+0x122>
    3518:	e0 e0       	ldi	r30, 0x00	; 0
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	cf 01       	movw	r24, r30
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <free>:
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	09 f4       	brne	.+2      	; 0x3532 <free+0xe>
    3530:	8c c0       	rjmp	.+280    	; 0x364a <free+0x126>
    3532:	fc 01       	movw	r30, r24
    3534:	32 97       	sbiw	r30, 0x02	; 2
    3536:	13 82       	std	Z+3, r1	; 0x03
    3538:	12 82       	std	Z+2, r1	; 0x02
    353a:	00 91 60 07 	lds	r16, 0x0760	; 0x800760 <__flp>
    353e:	10 91 61 07 	lds	r17, 0x0761	; 0x800761 <__flp+0x1>
    3542:	01 15       	cp	r16, r1
    3544:	11 05       	cpc	r17, r1
    3546:	81 f4       	brne	.+32     	; 0x3568 <free+0x44>
    3548:	20 81       	ld	r18, Z
    354a:	31 81       	ldd	r19, Z+1	; 0x01
    354c:	82 0f       	add	r24, r18
    354e:	93 1f       	adc	r25, r19
    3550:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <__brkval>
    3554:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <__brkval+0x1>
    3558:	28 17       	cp	r18, r24
    355a:	39 07       	cpc	r19, r25
    355c:	79 f5       	brne	.+94     	; 0x35bc <free+0x98>
    355e:	f0 93 5f 07 	sts	0x075F, r31	; 0x80075f <__brkval+0x1>
    3562:	e0 93 5e 07 	sts	0x075E, r30	; 0x80075e <__brkval>
    3566:	71 c0       	rjmp	.+226    	; 0x364a <free+0x126>
    3568:	d8 01       	movw	r26, r16
    356a:	40 e0       	ldi	r20, 0x00	; 0
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	ae 17       	cp	r26, r30
    3570:	bf 07       	cpc	r27, r31
    3572:	50 f4       	brcc	.+20     	; 0x3588 <free+0x64>
    3574:	12 96       	adiw	r26, 0x02	; 2
    3576:	2d 91       	ld	r18, X+
    3578:	3c 91       	ld	r19, X
    357a:	13 97       	sbiw	r26, 0x03	; 3
    357c:	ad 01       	movw	r20, r26
    357e:	21 15       	cp	r18, r1
    3580:	31 05       	cpc	r19, r1
    3582:	09 f1       	breq	.+66     	; 0x35c6 <free+0xa2>
    3584:	d9 01       	movw	r26, r18
    3586:	f3 cf       	rjmp	.-26     	; 0x356e <free+0x4a>
    3588:	9d 01       	movw	r18, r26
    358a:	da 01       	movw	r26, r20
    358c:	33 83       	std	Z+3, r19	; 0x03
    358e:	22 83       	std	Z+2, r18	; 0x02
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	86 0f       	add	r24, r22
    3596:	97 1f       	adc	r25, r23
    3598:	82 17       	cp	r24, r18
    359a:	93 07       	cpc	r25, r19
    359c:	69 f4       	brne	.+26     	; 0x35b8 <free+0x94>
    359e:	ec 01       	movw	r28, r24
    35a0:	28 81       	ld	r18, Y
    35a2:	39 81       	ldd	r19, Y+1	; 0x01
    35a4:	26 0f       	add	r18, r22
    35a6:	37 1f       	adc	r19, r23
    35a8:	2e 5f       	subi	r18, 0xFE	; 254
    35aa:	3f 4f       	sbci	r19, 0xFF	; 255
    35ac:	31 83       	std	Z+1, r19	; 0x01
    35ae:	20 83       	st	Z, r18
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	93 83       	std	Z+3, r25	; 0x03
    35b6:	82 83       	std	Z+2, r24	; 0x02
    35b8:	45 2b       	or	r20, r21
    35ba:	29 f4       	brne	.+10     	; 0x35c6 <free+0xa2>
    35bc:	f0 93 61 07 	sts	0x0761, r31	; 0x800761 <__flp+0x1>
    35c0:	e0 93 60 07 	sts	0x0760, r30	; 0x800760 <__flp>
    35c4:	42 c0       	rjmp	.+132    	; 0x364a <free+0x126>
    35c6:	13 96       	adiw	r26, 0x03	; 3
    35c8:	fc 93       	st	X, r31
    35ca:	ee 93       	st	-X, r30
    35cc:	12 97       	sbiw	r26, 0x02	; 2
    35ce:	ed 01       	movw	r28, r26
    35d0:	49 91       	ld	r20, Y+
    35d2:	59 91       	ld	r21, Y+
    35d4:	9e 01       	movw	r18, r28
    35d6:	24 0f       	add	r18, r20
    35d8:	35 1f       	adc	r19, r21
    35da:	e2 17       	cp	r30, r18
    35dc:	f3 07       	cpc	r31, r19
    35de:	71 f4       	brne	.+28     	; 0x35fc <free+0xd8>
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	84 0f       	add	r24, r20
    35e6:	95 1f       	adc	r25, r21
    35e8:	02 96       	adiw	r24, 0x02	; 2
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	9c 93       	st	X, r25
    35ee:	8e 93       	st	-X, r24
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	13 96       	adiw	r26, 0x03	; 3
    35f6:	9c 93       	st	X, r25
    35f8:	8e 93       	st	-X, r24
    35fa:	12 97       	sbiw	r26, 0x02	; 2
    35fc:	e0 e0       	ldi	r30, 0x00	; 0
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	d8 01       	movw	r26, r16
    3602:	12 96       	adiw	r26, 0x02	; 2
    3604:	8d 91       	ld	r24, X+
    3606:	9c 91       	ld	r25, X
    3608:	13 97       	sbiw	r26, 0x03	; 3
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	19 f0       	breq	.+6      	; 0x3614 <free+0xf0>
    360e:	f8 01       	movw	r30, r16
    3610:	8c 01       	movw	r16, r24
    3612:	f6 cf       	rjmp	.-20     	; 0x3600 <free+0xdc>
    3614:	8d 91       	ld	r24, X+
    3616:	9c 91       	ld	r25, X
    3618:	98 01       	movw	r18, r16
    361a:	2e 5f       	subi	r18, 0xFE	; 254
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	82 0f       	add	r24, r18
    3620:	93 1f       	adc	r25, r19
    3622:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <__brkval>
    3626:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <__brkval+0x1>
    362a:	28 17       	cp	r18, r24
    362c:	39 07       	cpc	r19, r25
    362e:	69 f4       	brne	.+26     	; 0x364a <free+0x126>
    3630:	30 97       	sbiw	r30, 0x00	; 0
    3632:	29 f4       	brne	.+10     	; 0x363e <free+0x11a>
    3634:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <__flp+0x1>
    3638:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <__flp>
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <free+0x11e>
    363e:	13 82       	std	Z+3, r1	; 0x03
    3640:	12 82       	std	Z+2, r1	; 0x02
    3642:	10 93 5f 07 	sts	0x075F, r17	; 0x80075f <__brkval+0x1>
    3646:	00 93 5e 07 	sts	0x075E, r16	; 0x80075e <__brkval>
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	08 95       	ret

00003654 <strtod>:
    3654:	a0 e0       	ldi	r26, 0x00	; 0
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	ef e2       	ldi	r30, 0x2F	; 47
    365a:	fb e1       	ldi	r31, 0x1B	; 27
    365c:	86 ce       	rjmp	.-756    	; 0x336a <__prologue_saves__+0x8>
    365e:	ec 01       	movw	r28, r24
    3660:	7b 01       	movw	r14, r22
    3662:	61 15       	cp	r22, r1
    3664:	71 05       	cpc	r23, r1
    3666:	19 f0       	breq	.+6      	; 0x366e <strtod+0x1a>
    3668:	db 01       	movw	r26, r22
    366a:	8d 93       	st	X+, r24
    366c:	9c 93       	st	X, r25
    366e:	8e 01       	movw	r16, r28
    3670:	0f 5f       	subi	r16, 0xFF	; 255
    3672:	1f 4f       	sbci	r17, 0xFF	; 255
    3674:	78 80       	ld	r7, Y
    3676:	87 2d       	mov	r24, r7
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	5f d1       	rcall	.+702    	; 0x393a <isspace>
    367c:	89 2b       	or	r24, r25
    367e:	11 f0       	breq	.+4      	; 0x3684 <strtod+0x30>
    3680:	e8 01       	movw	r28, r16
    3682:	f5 cf       	rjmp	.-22     	; 0x366e <strtod+0x1a>
    3684:	bd e2       	ldi	r27, 0x2D	; 45
    3686:	7b 12       	cpse	r7, r27
    3688:	05 c0       	rjmp	.+10     	; 0x3694 <strtod+0x40>
    368a:	0f 5f       	subi	r16, 0xFF	; 255
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	79 80       	ldd	r7, Y+1	; 0x01
    3690:	c1 e0       	ldi	r28, 0x01	; 1
    3692:	08 c0       	rjmp	.+16     	; 0x36a4 <strtod+0x50>
    3694:	eb e2       	ldi	r30, 0x2B	; 43
    3696:	7e 12       	cpse	r7, r30
    3698:	04 c0       	rjmp	.+8      	; 0x36a2 <strtod+0x4e>
    369a:	8e 01       	movw	r16, r28
    369c:	0e 5f       	subi	r16, 0xFE	; 254
    369e:	1f 4f       	sbci	r17, 0xFF	; 255
    36a0:	79 80       	ldd	r7, Y+1	; 0x01
    36a2:	c0 e0       	ldi	r28, 0x00	; 0
    36a4:	68 01       	movw	r12, r16
    36a6:	f1 e0       	ldi	r31, 0x01	; 1
    36a8:	cf 1a       	sub	r12, r31
    36aa:	d1 08       	sbc	r13, r1
    36ac:	43 e0       	ldi	r20, 0x03	; 3
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	62 ef       	ldi	r22, 0xF2	; 242
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	c6 01       	movw	r24, r12
    36b6:	49 d1       	rcall	.+658    	; 0x394a <strncasecmp_P>
    36b8:	89 2b       	or	r24, r25
    36ba:	e9 f4       	brne	.+58     	; 0x36f6 <strtod+0xa2>
    36bc:	68 01       	movw	r12, r16
    36be:	22 e0       	ldi	r18, 0x02	; 2
    36c0:	c2 0e       	add	r12, r18
    36c2:	d1 1c       	adc	r13, r1
    36c4:	45 e0       	ldi	r20, 0x05	; 5
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	6d ee       	ldi	r22, 0xED	; 237
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	c6 01       	movw	r24, r12
    36ce:	3d d1       	rcall	.+634    	; 0x394a <strncasecmp_P>
    36d0:	89 2b       	or	r24, r25
    36d2:	21 f4       	brne	.+8      	; 0x36dc <strtod+0x88>
    36d4:	68 01       	movw	r12, r16
    36d6:	87 e0       	ldi	r24, 0x07	; 7
    36d8:	c8 0e       	add	r12, r24
    36da:	d1 1c       	adc	r13, r1
    36dc:	e1 14       	cp	r14, r1
    36de:	f1 04       	cpc	r15, r1
    36e0:	19 f0       	breq	.+6      	; 0x36e8 <strtod+0x94>
    36e2:	d7 01       	movw	r26, r14
    36e4:	cd 92       	st	X+, r12
    36e6:	dc 92       	st	X, r13
    36e8:	c1 11       	cpse	r28, r1
    36ea:	fd c0       	rjmp	.+506    	; 0x38e6 <strtod+0x292>
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	80 e8       	ldi	r24, 0x80	; 128
    36f2:	9f e7       	ldi	r25, 0x7F	; 127
    36f4:	01 c1       	rjmp	.+514    	; 0x38f8 <strtod+0x2a4>
    36f6:	43 e0       	ldi	r20, 0x03	; 3
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	6a ee       	ldi	r22, 0xEA	; 234
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	c6 01       	movw	r24, r12
    3700:	24 d1       	rcall	.+584    	; 0x394a <strncasecmp_P>
    3702:	89 2b       	or	r24, r25
    3704:	51 f4       	brne	.+20     	; 0x371a <strtod+0xc6>
    3706:	e1 14       	cp	r14, r1
    3708:	f1 04       	cpc	r15, r1
    370a:	09 f4       	brne	.+2      	; 0x370e <strtod+0xba>
    370c:	f1 c0       	rjmp	.+482    	; 0x38f0 <strtod+0x29c>
    370e:	0e 5f       	subi	r16, 0xFE	; 254
    3710:	1f 4f       	sbci	r17, 0xFF	; 255
    3712:	f7 01       	movw	r30, r14
    3714:	11 83       	std	Z+1, r17	; 0x01
    3716:	00 83       	st	Z, r16
    3718:	eb c0       	rjmp	.+470    	; 0x38f0 <strtod+0x29c>
    371a:	68 01       	movw	r12, r16
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	70 e0       	ldi	r23, 0x00	; 0
    3720:	cb 01       	movw	r24, r22
    3722:	00 e0       	ldi	r16, 0x00	; 0
    3724:	10 e0       	ldi	r17, 0x00	; 0
    3726:	f6 01       	movw	r30, r12
    3728:	d0 ed       	ldi	r29, 0xD0	; 208
    372a:	d7 0d       	add	r29, r7
    372c:	da 30       	cpi	r29, 0x0A	; 10
    372e:	50 f5       	brcc	.+84     	; 0x3784 <strtod+0x130>
    3730:	2c 2f       	mov	r18, r28
    3732:	22 60       	ori	r18, 0x02	; 2
    3734:	62 2e       	mov	r6, r18
    3736:	2c 2f       	mov	r18, r28
    3738:	28 70       	andi	r18, 0x08	; 8
    373a:	c2 ff       	sbrs	r28, 2
    373c:	05 c0       	rjmp	.+10     	; 0x3748 <strtod+0xf4>
    373e:	21 11       	cpse	r18, r1
    3740:	27 c0       	rjmp	.+78     	; 0x3790 <strtod+0x13c>
    3742:	0f 5f       	subi	r16, 0xFF	; 255
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	24 c0       	rjmp	.+72     	; 0x3790 <strtod+0x13c>
    3748:	22 23       	and	r18, r18
    374a:	11 f0       	breq	.+4      	; 0x3750 <strtod+0xfc>
    374c:	01 50       	subi	r16, 0x01	; 1
    374e:	11 09       	sbc	r17, r1
    3750:	a5 e0       	ldi	r26, 0x05	; 5
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	9b 01       	movw	r18, r22
    3756:	ac 01       	movw	r20, r24
    3758:	fa dd       	rcall	.-1036   	; 0x334e <__muluhisi3>
    375a:	4b 01       	movw	r8, r22
    375c:	5c 01       	movw	r10, r24
    375e:	88 0c       	add	r8, r8
    3760:	99 1c       	adc	r9, r9
    3762:	aa 1c       	adc	r10, r10
    3764:	bb 1c       	adc	r11, r11
    3766:	c5 01       	movw	r24, r10
    3768:	b4 01       	movw	r22, r8
    376a:	6d 0f       	add	r22, r29
    376c:	71 1d       	adc	r23, r1
    376e:	81 1d       	adc	r24, r1
    3770:	91 1d       	adc	r25, r1
    3772:	68 39       	cpi	r22, 0x98	; 152
    3774:	a9 e9       	ldi	r26, 0x99	; 153
    3776:	7a 07       	cpc	r23, r26
    3778:	8a 07       	cpc	r24, r26
    377a:	a9 e1       	ldi	r26, 0x19	; 25
    377c:	9a 07       	cpc	r25, r26
    377e:	40 f0       	brcs	.+16     	; 0x3790 <strtod+0x13c>
    3780:	c6 60       	ori	r28, 0x06	; 6
    3782:	05 c0       	rjmp	.+10     	; 0x378e <strtod+0x13a>
    3784:	de 3f       	cpi	r29, 0xFE	; 254
    3786:	51 f4       	brne	.+20     	; 0x379c <strtod+0x148>
    3788:	c3 fd       	sbrc	r28, 3
    378a:	44 c0       	rjmp	.+136    	; 0x3814 <strtod+0x1c0>
    378c:	c8 60       	ori	r28, 0x08	; 8
    378e:	6c 2e       	mov	r6, r28
    3790:	bf ef       	ldi	r27, 0xFF	; 255
    3792:	cb 1a       	sub	r12, r27
    3794:	db 0a       	sbc	r13, r27
    3796:	70 80       	ld	r7, Z
    3798:	c6 2d       	mov	r28, r6
    379a:	c5 cf       	rjmp	.-118    	; 0x3726 <strtod+0xd2>
    379c:	2d 2f       	mov	r18, r29
    379e:	2f 7d       	andi	r18, 0xDF	; 223
    37a0:	25 31       	cpi	r18, 0x15	; 21
    37a2:	c1 f5       	brne	.+112    	; 0x3814 <strtod+0x1c0>
    37a4:	40 81       	ld	r20, Z
    37a6:	4d 32       	cpi	r20, 0x2D	; 45
    37a8:	11 f4       	brne	.+4      	; 0x37ae <strtod+0x15a>
    37aa:	c0 61       	ori	r28, 0x10	; 16
    37ac:	06 c0       	rjmp	.+12     	; 0x37ba <strtod+0x166>
    37ae:	4b 32       	cpi	r20, 0x2B	; 43
    37b0:	21 f0       	breq	.+8      	; 0x37ba <strtod+0x166>
    37b2:	31 96       	adiw	r30, 0x01	; 1
    37b4:	21 e0       	ldi	r18, 0x01	; 1
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	06 c0       	rjmp	.+12     	; 0x37c6 <strtod+0x172>
    37ba:	32 96       	adiw	r30, 0x02	; 2
    37bc:	d6 01       	movw	r26, r12
    37be:	11 96       	adiw	r26, 0x01	; 1
    37c0:	4c 91       	ld	r20, X
    37c2:	22 e0       	ldi	r18, 0x02	; 2
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	a0 ed       	ldi	r26, 0xD0	; 208
    37c8:	a4 0f       	add	r26, r20
    37ca:	aa 30       	cpi	r26, 0x0A	; 10
    37cc:	18 f0       	brcs	.+6      	; 0x37d4 <strtod+0x180>
    37ce:	e2 1b       	sub	r30, r18
    37d0:	f3 0b       	sbc	r31, r19
    37d2:	20 c0       	rjmp	.+64     	; 0x3814 <strtod+0x1c0>
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	50 e0       	ldi	r21, 0x00	; 0
    37d8:	40 38       	cpi	r20, 0x80	; 128
    37da:	bc e0       	ldi	r27, 0x0C	; 12
    37dc:	5b 07       	cpc	r21, r27
    37de:	5c f4       	brge	.+22     	; 0x37f6 <strtod+0x1a2>
    37e0:	9a 01       	movw	r18, r20
    37e2:	22 0f       	add	r18, r18
    37e4:	33 1f       	adc	r19, r19
    37e6:	22 0f       	add	r18, r18
    37e8:	33 1f       	adc	r19, r19
    37ea:	42 0f       	add	r20, r18
    37ec:	53 1f       	adc	r21, r19
    37ee:	44 0f       	add	r20, r20
    37f0:	55 1f       	adc	r21, r21
    37f2:	4a 0f       	add	r20, r26
    37f4:	51 1d       	adc	r21, r1
    37f6:	31 96       	adiw	r30, 0x01	; 1
    37f8:	df 01       	movw	r26, r30
    37fa:	11 97       	sbiw	r26, 0x01	; 1
    37fc:	2c 91       	ld	r18, X
    37fe:	a0 ed       	ldi	r26, 0xD0	; 208
    3800:	a2 0f       	add	r26, r18
    3802:	aa 30       	cpi	r26, 0x0A	; 10
    3804:	48 f3       	brcs	.-46     	; 0x37d8 <strtod+0x184>
    3806:	c4 ff       	sbrs	r28, 4
    3808:	03 c0       	rjmp	.+6      	; 0x3810 <strtod+0x1bc>
    380a:	51 95       	neg	r21
    380c:	41 95       	neg	r20
    380e:	51 09       	sbc	r21, r1
    3810:	04 0f       	add	r16, r20
    3812:	15 1f       	adc	r17, r21
    3814:	c1 ff       	sbrs	r28, 1
    3816:	07 c0       	rjmp	.+14     	; 0x3826 <strtod+0x1d2>
    3818:	e1 14       	cp	r14, r1
    381a:	f1 04       	cpc	r15, r1
    381c:	21 f0       	breq	.+8      	; 0x3826 <strtod+0x1d2>
    381e:	31 97       	sbiw	r30, 0x01	; 1
    3820:	d7 01       	movw	r26, r14
    3822:	ed 93       	st	X+, r30
    3824:	fc 93       	st	X, r31
    3826:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__floatunsisf>
    382a:	c3 70       	andi	r28, 0x03	; 3
    382c:	c3 30       	cpi	r28, 0x03	; 3
    382e:	19 f0       	breq	.+6      	; 0x3836 <strtod+0x1e2>
    3830:	6b 01       	movw	r12, r22
    3832:	7c 01       	movw	r14, r24
    3834:	06 c0       	rjmp	.+12     	; 0x3842 <strtod+0x1ee>
    3836:	6b 01       	movw	r12, r22
    3838:	7c 01       	movw	r14, r24
    383a:	f7 fa       	bst	r15, 7
    383c:	f0 94       	com	r15
    383e:	f7 f8       	bld	r15, 7
    3840:	f0 94       	com	r15
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	a9 01       	movw	r20, r18
    3848:	c7 01       	movw	r24, r14
    384a:	b6 01       	movw	r22, r12
    384c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__cmpsf2>
    3850:	88 23       	and	r24, r24
    3852:	09 f4       	brne	.+2      	; 0x3856 <strtod+0x202>
    3854:	45 c0       	rjmp	.+138    	; 0x38e0 <strtod+0x28c>
    3856:	17 ff       	sbrs	r17, 7
    3858:	06 c0       	rjmp	.+12     	; 0x3866 <strtod+0x212>
    385a:	11 95       	neg	r17
    385c:	01 95       	neg	r16
    385e:	11 09       	sbc	r17, r1
    3860:	c9 e0       	ldi	r28, 0x09	; 9
    3862:	d1 e0       	ldi	r29, 0x01	; 1
    3864:	02 c0       	rjmp	.+4      	; 0x386a <strtod+0x216>
    3866:	c1 e2       	ldi	r28, 0x21	; 33
    3868:	d1 e0       	ldi	r29, 0x01	; 1
    386a:	5e 01       	movw	r10, r28
    386c:	b8 e1       	ldi	r27, 0x18	; 24
    386e:	ab 1a       	sub	r10, r27
    3870:	b1 08       	sbc	r11, r1
    3872:	46 01       	movw	r8, r12
    3874:	be 2d       	mov	r27, r14
    3876:	af 2d       	mov	r26, r15
    3878:	90 e2       	ldi	r25, 0x20	; 32
    387a:	e9 2e       	mov	r14, r25
    387c:	f1 2c       	mov	r15, r1
    387e:	0e 15       	cp	r16, r14
    3880:	1f 05       	cpc	r17, r15
    3882:	84 f0       	brlt	.+32     	; 0x38a4 <strtod+0x250>
    3884:	fe 01       	movw	r30, r28
    3886:	25 91       	lpm	r18, Z+
    3888:	35 91       	lpm	r19, Z+
    388a:	45 91       	lpm	r20, Z+
    388c:	54 91       	lpm	r21, Z
    388e:	b4 01       	movw	r22, r8
    3890:	8b 2f       	mov	r24, r27
    3892:	9a 2f       	mov	r25, r26
    3894:	0e 94 00 12 	call	0x2400	; 0x2400 <__mulsf3>
    3898:	4b 01       	movw	r8, r22
    389a:	b8 2f       	mov	r27, r24
    389c:	a9 2f       	mov	r26, r25
    389e:	0e 19       	sub	r16, r14
    38a0:	1f 09       	sbc	r17, r15
    38a2:	ed cf       	rjmp	.-38     	; 0x387e <strtod+0x22a>
    38a4:	24 97       	sbiw	r28, 0x04	; 4
    38a6:	f5 94       	asr	r15
    38a8:	e7 94       	ror	r14
    38aa:	ca 15       	cp	r28, r10
    38ac:	db 05       	cpc	r29, r11
    38ae:	39 f7       	brne	.-50     	; 0x387e <strtod+0x22a>
    38b0:	64 01       	movw	r12, r8
    38b2:	eb 2e       	mov	r14, r27
    38b4:	fa 2e       	mov	r15, r26
    38b6:	8e 2d       	mov	r24, r14
    38b8:	88 0f       	add	r24, r24
    38ba:	8f 2d       	mov	r24, r15
    38bc:	88 1f       	adc	r24, r24
    38be:	8f 3f       	cpi	r24, 0xFF	; 255
    38c0:	49 f0       	breq	.+18     	; 0x38d4 <strtod+0x280>
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	a9 01       	movw	r20, r18
    38c8:	c7 01       	movw	r24, r14
    38ca:	b6 01       	movw	r22, r12
    38cc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__cmpsf2>
    38d0:	81 11       	cpse	r24, r1
    38d2:	06 c0       	rjmp	.+12     	; 0x38e0 <strtod+0x28c>
    38d4:	82 e2       	ldi	r24, 0x22	; 34
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <errno+0x1>
    38dc:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <errno>
    38e0:	c7 01       	movw	r24, r14
    38e2:	b6 01       	movw	r22, r12
    38e4:	09 c0       	rjmp	.+18     	; 0x38f8 <strtod+0x2a4>
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	80 e8       	ldi	r24, 0x80	; 128
    38ec:	9f ef       	ldi	r25, 0xFF	; 255
    38ee:	04 c0       	rjmp	.+8      	; 0x38f8 <strtod+0x2a4>
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	80 ec       	ldi	r24, 0xC0	; 192
    38f6:	9f e7       	ldi	r25, 0x7F	; 127
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	ee e0       	ldi	r30, 0x0E	; 14
    38fe:	51 cd       	rjmp	.-1374   	; 0x33a2 <__epilogue_restores__+0x8>

00003900 <atoi>:
    3900:	fc 01       	movw	r30, r24
    3902:	88 27       	eor	r24, r24
    3904:	99 27       	eor	r25, r25
    3906:	e8 94       	clt
    3908:	21 91       	ld	r18, Z+
    390a:	20 32       	cpi	r18, 0x20	; 32
    390c:	e9 f3       	breq	.-6      	; 0x3908 <atoi+0x8>
    390e:	29 30       	cpi	r18, 0x09	; 9
    3910:	10 f0       	brcs	.+4      	; 0x3916 <atoi+0x16>
    3912:	2e 30       	cpi	r18, 0x0E	; 14
    3914:	c8 f3       	brcs	.-14     	; 0x3908 <atoi+0x8>
    3916:	2b 32       	cpi	r18, 0x2B	; 43
    3918:	39 f0       	breq	.+14     	; 0x3928 <atoi+0x28>
    391a:	2d 32       	cpi	r18, 0x2D	; 45
    391c:	31 f4       	brne	.+12     	; 0x392a <atoi+0x2a>
    391e:	68 94       	set
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <atoi+0x28>
    3922:	2b d0       	rcall	.+86     	; 0x397a <__mulhi_const_10>
    3924:	82 0f       	add	r24, r18
    3926:	91 1d       	adc	r25, r1
    3928:	21 91       	ld	r18, Z+
    392a:	20 53       	subi	r18, 0x30	; 48
    392c:	2a 30       	cpi	r18, 0x0A	; 10
    392e:	c8 f3       	brcs	.-14     	; 0x3922 <atoi+0x22>
    3930:	1e f4       	brtc	.+6      	; 0x3938 <atoi+0x38>
    3932:	90 95       	com	r25
    3934:	81 95       	neg	r24
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	08 95       	ret

0000393a <isspace>:
    393a:	91 11       	cpse	r25, r1
    393c:	09 c2       	rjmp	.+1042   	; 0x3d50 <__ctype_isfalse>
    393e:	80 32       	cpi	r24, 0x20	; 32
    3940:	19 f0       	breq	.+6      	; 0x3948 <isspace+0xe>
    3942:	89 50       	subi	r24, 0x09	; 9
    3944:	85 50       	subi	r24, 0x05	; 5
    3946:	d0 f7       	brcc	.-12     	; 0x393c <isspace+0x2>
    3948:	08 95       	ret

0000394a <strncasecmp_P>:
    394a:	fb 01       	movw	r30, r22
    394c:	dc 01       	movw	r26, r24
    394e:	41 50       	subi	r20, 0x01	; 1
    3950:	50 40       	sbci	r21, 0x00	; 0
    3952:	88 f0       	brcs	.+34     	; 0x3976 <strncasecmp_P+0x2c>
    3954:	8d 91       	ld	r24, X+
    3956:	81 34       	cpi	r24, 0x41	; 65
    3958:	1c f0       	brlt	.+6      	; 0x3960 <strncasecmp_P+0x16>
    395a:	8b 35       	cpi	r24, 0x5B	; 91
    395c:	0c f4       	brge	.+2      	; 0x3960 <strncasecmp_P+0x16>
    395e:	80 5e       	subi	r24, 0xE0	; 224
    3960:	65 91       	lpm	r22, Z+
    3962:	61 34       	cpi	r22, 0x41	; 65
    3964:	1c f0       	brlt	.+6      	; 0x396c <strncasecmp_P+0x22>
    3966:	6b 35       	cpi	r22, 0x5B	; 91
    3968:	0c f4       	brge	.+2      	; 0x396c <strncasecmp_P+0x22>
    396a:	60 5e       	subi	r22, 0xE0	; 224
    396c:	86 1b       	sub	r24, r22
    396e:	61 11       	cpse	r22, r1
    3970:	71 f3       	breq	.-36     	; 0x394e <strncasecmp_P+0x4>
    3972:	99 0b       	sbc	r25, r25
    3974:	08 95       	ret
    3976:	88 1b       	sub	r24, r24
    3978:	fc cf       	rjmp	.-8      	; 0x3972 <strncasecmp_P+0x28>

0000397a <__mulhi_const_10>:
    397a:	7a e0       	ldi	r23, 0x0A	; 10
    397c:	97 9f       	mul	r25, r23
    397e:	90 2d       	mov	r25, r0
    3980:	87 9f       	mul	r24, r23
    3982:	80 2d       	mov	r24, r0
    3984:	91 0d       	add	r25, r1
    3986:	11 24       	eor	r1, r1
    3988:	08 95       	ret

0000398a <sprintf>:
    398a:	ae e0       	ldi	r26, 0x0E	; 14
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	ea ec       	ldi	r30, 0xCA	; 202
    3990:	fc e1       	ldi	r31, 0x1C	; 28
    3992:	f5 cc       	rjmp	.-1558   	; 0x337e <__prologue_saves__+0x1c>
    3994:	0d 89       	ldd	r16, Y+21	; 0x15
    3996:	1e 89       	ldd	r17, Y+22	; 0x16
    3998:	86 e0       	ldi	r24, 0x06	; 6
    399a:	8c 83       	std	Y+4, r24	; 0x04
    399c:	1a 83       	std	Y+2, r17	; 0x02
    399e:	09 83       	std	Y+1, r16	; 0x01
    39a0:	8f ef       	ldi	r24, 0xFF	; 255
    39a2:	9f e7       	ldi	r25, 0x7F	; 127
    39a4:	9e 83       	std	Y+6, r25	; 0x06
    39a6:	8d 83       	std	Y+5, r24	; 0x05
    39a8:	ae 01       	movw	r20, r28
    39aa:	47 5e       	subi	r20, 0xE7	; 231
    39ac:	5f 4f       	sbci	r21, 0xFF	; 255
    39ae:	6f 89       	ldd	r22, Y+23	; 0x17
    39b0:	78 8d       	ldd	r23, Y+24	; 0x18
    39b2:	ce 01       	movw	r24, r28
    39b4:	01 96       	adiw	r24, 0x01	; 1
    39b6:	09 d0       	rcall	.+18     	; 0x39ca <vfprintf>
    39b8:	2f 81       	ldd	r18, Y+7	; 0x07
    39ba:	38 85       	ldd	r19, Y+8	; 0x08
    39bc:	f8 01       	movw	r30, r16
    39be:	e2 0f       	add	r30, r18
    39c0:	f3 1f       	adc	r31, r19
    39c2:	10 82       	st	Z, r1
    39c4:	2e 96       	adiw	r28, 0x0e	; 14
    39c6:	e4 e0       	ldi	r30, 0x04	; 4
    39c8:	f6 cc       	rjmp	.-1556   	; 0x33b6 <__epilogue_restores__+0x1c>

000039ca <vfprintf>:
    39ca:	ac e0       	ldi	r26, 0x0C	; 12
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	ea ee       	ldi	r30, 0xEA	; 234
    39d0:	fc e1       	ldi	r31, 0x1C	; 28
    39d2:	c7 cc       	rjmp	.-1650   	; 0x3362 <__prologue_saves__>
    39d4:	7c 01       	movw	r14, r24
    39d6:	6b 01       	movw	r12, r22
    39d8:	8a 01       	movw	r16, r20
    39da:	fc 01       	movw	r30, r24
    39dc:	17 82       	std	Z+7, r1	; 0x07
    39de:	16 82       	std	Z+6, r1	; 0x06
    39e0:	83 81       	ldd	r24, Z+3	; 0x03
    39e2:	81 ff       	sbrs	r24, 1
    39e4:	b0 c1       	rjmp	.+864    	; 0x3d46 <vfprintf+0x37c>
    39e6:	ce 01       	movw	r24, r28
    39e8:	01 96       	adiw	r24, 0x01	; 1
    39ea:	4c 01       	movw	r8, r24
    39ec:	f7 01       	movw	r30, r14
    39ee:	93 81       	ldd	r25, Z+3	; 0x03
    39f0:	f6 01       	movw	r30, r12
    39f2:	93 fd       	sbrc	r25, 3
    39f4:	85 91       	lpm	r24, Z+
    39f6:	93 ff       	sbrs	r25, 3
    39f8:	81 91       	ld	r24, Z+
    39fa:	6f 01       	movw	r12, r30
    39fc:	88 23       	and	r24, r24
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <vfprintf+0x38>
    3a00:	9e c1       	rjmp	.+828    	; 0x3d3e <vfprintf+0x374>
    3a02:	85 32       	cpi	r24, 0x25	; 37
    3a04:	39 f4       	brne	.+14     	; 0x3a14 <vfprintf+0x4a>
    3a06:	93 fd       	sbrc	r25, 3
    3a08:	85 91       	lpm	r24, Z+
    3a0a:	93 ff       	sbrs	r25, 3
    3a0c:	81 91       	ld	r24, Z+
    3a0e:	6f 01       	movw	r12, r30
    3a10:	85 32       	cpi	r24, 0x25	; 37
    3a12:	21 f4       	brne	.+8      	; 0x3a1c <vfprintf+0x52>
    3a14:	b7 01       	movw	r22, r14
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	b4 d1       	rcall	.+872    	; 0x3d82 <fputc>
    3a1a:	e8 cf       	rjmp	.-48     	; 0x39ec <vfprintf+0x22>
    3a1c:	51 2c       	mov	r5, r1
    3a1e:	31 2c       	mov	r3, r1
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	20 32       	cpi	r18, 0x20	; 32
    3a24:	a0 f4       	brcc	.+40     	; 0x3a4e <vfprintf+0x84>
    3a26:	8b 32       	cpi	r24, 0x2B	; 43
    3a28:	69 f0       	breq	.+26     	; 0x3a44 <vfprintf+0x7a>
    3a2a:	30 f4       	brcc	.+12     	; 0x3a38 <vfprintf+0x6e>
    3a2c:	80 32       	cpi	r24, 0x20	; 32
    3a2e:	59 f0       	breq	.+22     	; 0x3a46 <vfprintf+0x7c>
    3a30:	83 32       	cpi	r24, 0x23	; 35
    3a32:	69 f4       	brne	.+26     	; 0x3a4e <vfprintf+0x84>
    3a34:	20 61       	ori	r18, 0x10	; 16
    3a36:	2c c0       	rjmp	.+88     	; 0x3a90 <vfprintf+0xc6>
    3a38:	8d 32       	cpi	r24, 0x2D	; 45
    3a3a:	39 f0       	breq	.+14     	; 0x3a4a <vfprintf+0x80>
    3a3c:	80 33       	cpi	r24, 0x30	; 48
    3a3e:	39 f4       	brne	.+14     	; 0x3a4e <vfprintf+0x84>
    3a40:	21 60       	ori	r18, 0x01	; 1
    3a42:	26 c0       	rjmp	.+76     	; 0x3a90 <vfprintf+0xc6>
    3a44:	22 60       	ori	r18, 0x02	; 2
    3a46:	24 60       	ori	r18, 0x04	; 4
    3a48:	23 c0       	rjmp	.+70     	; 0x3a90 <vfprintf+0xc6>
    3a4a:	28 60       	ori	r18, 0x08	; 8
    3a4c:	21 c0       	rjmp	.+66     	; 0x3a90 <vfprintf+0xc6>
    3a4e:	27 fd       	sbrc	r18, 7
    3a50:	27 c0       	rjmp	.+78     	; 0x3aa0 <vfprintf+0xd6>
    3a52:	30 ed       	ldi	r19, 0xD0	; 208
    3a54:	38 0f       	add	r19, r24
    3a56:	3a 30       	cpi	r19, 0x0A	; 10
    3a58:	78 f4       	brcc	.+30     	; 0x3a78 <vfprintf+0xae>
    3a5a:	26 ff       	sbrs	r18, 6
    3a5c:	06 c0       	rjmp	.+12     	; 0x3a6a <vfprintf+0xa0>
    3a5e:	fa e0       	ldi	r31, 0x0A	; 10
    3a60:	5f 9e       	mul	r5, r31
    3a62:	30 0d       	add	r19, r0
    3a64:	11 24       	eor	r1, r1
    3a66:	53 2e       	mov	r5, r19
    3a68:	13 c0       	rjmp	.+38     	; 0x3a90 <vfprintf+0xc6>
    3a6a:	8a e0       	ldi	r24, 0x0A	; 10
    3a6c:	38 9e       	mul	r3, r24
    3a6e:	30 0d       	add	r19, r0
    3a70:	11 24       	eor	r1, r1
    3a72:	33 2e       	mov	r3, r19
    3a74:	20 62       	ori	r18, 0x20	; 32
    3a76:	0c c0       	rjmp	.+24     	; 0x3a90 <vfprintf+0xc6>
    3a78:	8e 32       	cpi	r24, 0x2E	; 46
    3a7a:	21 f4       	brne	.+8      	; 0x3a84 <vfprintf+0xba>
    3a7c:	26 fd       	sbrc	r18, 6
    3a7e:	5f c1       	rjmp	.+702    	; 0x3d3e <vfprintf+0x374>
    3a80:	20 64       	ori	r18, 0x40	; 64
    3a82:	06 c0       	rjmp	.+12     	; 0x3a90 <vfprintf+0xc6>
    3a84:	8c 36       	cpi	r24, 0x6C	; 108
    3a86:	11 f4       	brne	.+4      	; 0x3a8c <vfprintf+0xc2>
    3a88:	20 68       	ori	r18, 0x80	; 128
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <vfprintf+0xc6>
    3a8c:	88 36       	cpi	r24, 0x68	; 104
    3a8e:	41 f4       	brne	.+16     	; 0x3aa0 <vfprintf+0xd6>
    3a90:	f6 01       	movw	r30, r12
    3a92:	93 fd       	sbrc	r25, 3
    3a94:	85 91       	lpm	r24, Z+
    3a96:	93 ff       	sbrs	r25, 3
    3a98:	81 91       	ld	r24, Z+
    3a9a:	6f 01       	movw	r12, r30
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	c1 cf       	rjmp	.-126    	; 0x3a22 <vfprintf+0x58>
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	9f 7d       	andi	r25, 0xDF	; 223
    3aa4:	95 54       	subi	r25, 0x45	; 69
    3aa6:	93 30       	cpi	r25, 0x03	; 3
    3aa8:	28 f4       	brcc	.+10     	; 0x3ab4 <vfprintf+0xea>
    3aaa:	0c 5f       	subi	r16, 0xFC	; 252
    3aac:	1f 4f       	sbci	r17, 0xFF	; 255
    3aae:	ff e3       	ldi	r31, 0x3F	; 63
    3ab0:	f9 83       	std	Y+1, r31	; 0x01
    3ab2:	0d c0       	rjmp	.+26     	; 0x3ace <vfprintf+0x104>
    3ab4:	83 36       	cpi	r24, 0x63	; 99
    3ab6:	31 f0       	breq	.+12     	; 0x3ac4 <vfprintf+0xfa>
    3ab8:	83 37       	cpi	r24, 0x73	; 115
    3aba:	71 f0       	breq	.+28     	; 0x3ad8 <vfprintf+0x10e>
    3abc:	83 35       	cpi	r24, 0x53	; 83
    3abe:	09 f0       	breq	.+2      	; 0x3ac2 <vfprintf+0xf8>
    3ac0:	57 c0       	rjmp	.+174    	; 0x3b70 <vfprintf+0x1a6>
    3ac2:	21 c0       	rjmp	.+66     	; 0x3b06 <vfprintf+0x13c>
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	80 81       	ld	r24, Z
    3ac8:	89 83       	std	Y+1, r24	; 0x01
    3aca:	0e 5f       	subi	r16, 0xFE	; 254
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	44 24       	eor	r4, r4
    3ad0:	43 94       	inc	r4
    3ad2:	51 2c       	mov	r5, r1
    3ad4:	54 01       	movw	r10, r8
    3ad6:	14 c0       	rjmp	.+40     	; 0x3b00 <vfprintf+0x136>
    3ad8:	38 01       	movw	r6, r16
    3ada:	f2 e0       	ldi	r31, 0x02	; 2
    3adc:	6f 0e       	add	r6, r31
    3ade:	71 1c       	adc	r7, r1
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	a0 80       	ld	r10, Z
    3ae4:	b1 80       	ldd	r11, Z+1	; 0x01
    3ae6:	26 ff       	sbrs	r18, 6
    3ae8:	03 c0       	rjmp	.+6      	; 0x3af0 <vfprintf+0x126>
    3aea:	65 2d       	mov	r22, r5
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <vfprintf+0x12a>
    3af0:	6f ef       	ldi	r22, 0xFF	; 255
    3af2:	7f ef       	ldi	r23, 0xFF	; 255
    3af4:	c5 01       	movw	r24, r10
    3af6:	2c 87       	std	Y+12, r18	; 0x0c
    3af8:	39 d1       	rcall	.+626    	; 0x3d6c <strnlen>
    3afa:	2c 01       	movw	r4, r24
    3afc:	83 01       	movw	r16, r6
    3afe:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b00:	2f 77       	andi	r18, 0x7F	; 127
    3b02:	22 2e       	mov	r2, r18
    3b04:	16 c0       	rjmp	.+44     	; 0x3b32 <vfprintf+0x168>
    3b06:	38 01       	movw	r6, r16
    3b08:	f2 e0       	ldi	r31, 0x02	; 2
    3b0a:	6f 0e       	add	r6, r31
    3b0c:	71 1c       	adc	r7, r1
    3b0e:	f8 01       	movw	r30, r16
    3b10:	a0 80       	ld	r10, Z
    3b12:	b1 80       	ldd	r11, Z+1	; 0x01
    3b14:	26 ff       	sbrs	r18, 6
    3b16:	03 c0       	rjmp	.+6      	; 0x3b1e <vfprintf+0x154>
    3b18:	65 2d       	mov	r22, r5
    3b1a:	70 e0       	ldi	r23, 0x00	; 0
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <vfprintf+0x158>
    3b1e:	6f ef       	ldi	r22, 0xFF	; 255
    3b20:	7f ef       	ldi	r23, 0xFF	; 255
    3b22:	c5 01       	movw	r24, r10
    3b24:	2c 87       	std	Y+12, r18	; 0x0c
    3b26:	17 d1       	rcall	.+558    	; 0x3d56 <strnlen_P>
    3b28:	2c 01       	movw	r4, r24
    3b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b2c:	20 68       	ori	r18, 0x80	; 128
    3b2e:	22 2e       	mov	r2, r18
    3b30:	83 01       	movw	r16, r6
    3b32:	23 fc       	sbrc	r2, 3
    3b34:	19 c0       	rjmp	.+50     	; 0x3b68 <vfprintf+0x19e>
    3b36:	83 2d       	mov	r24, r3
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	48 16       	cp	r4, r24
    3b3c:	59 06       	cpc	r5, r25
    3b3e:	a0 f4       	brcc	.+40     	; 0x3b68 <vfprintf+0x19e>
    3b40:	b7 01       	movw	r22, r14
    3b42:	80 e2       	ldi	r24, 0x20	; 32
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	1d d1       	rcall	.+570    	; 0x3d82 <fputc>
    3b48:	3a 94       	dec	r3
    3b4a:	f5 cf       	rjmp	.-22     	; 0x3b36 <vfprintf+0x16c>
    3b4c:	f5 01       	movw	r30, r10
    3b4e:	27 fc       	sbrc	r2, 7
    3b50:	85 91       	lpm	r24, Z+
    3b52:	27 fe       	sbrs	r2, 7
    3b54:	81 91       	ld	r24, Z+
    3b56:	5f 01       	movw	r10, r30
    3b58:	b7 01       	movw	r22, r14
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	12 d1       	rcall	.+548    	; 0x3d82 <fputc>
    3b5e:	31 10       	cpse	r3, r1
    3b60:	3a 94       	dec	r3
    3b62:	f1 e0       	ldi	r31, 0x01	; 1
    3b64:	4f 1a       	sub	r4, r31
    3b66:	51 08       	sbc	r5, r1
    3b68:	41 14       	cp	r4, r1
    3b6a:	51 04       	cpc	r5, r1
    3b6c:	79 f7       	brne	.-34     	; 0x3b4c <vfprintf+0x182>
    3b6e:	de c0       	rjmp	.+444    	; 0x3d2c <vfprintf+0x362>
    3b70:	84 36       	cpi	r24, 0x64	; 100
    3b72:	11 f0       	breq	.+4      	; 0x3b78 <vfprintf+0x1ae>
    3b74:	89 36       	cpi	r24, 0x69	; 105
    3b76:	31 f5       	brne	.+76     	; 0x3bc4 <vfprintf+0x1fa>
    3b78:	f8 01       	movw	r30, r16
    3b7a:	27 ff       	sbrs	r18, 7
    3b7c:	07 c0       	rjmp	.+14     	; 0x3b8c <vfprintf+0x1c2>
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	82 81       	ldd	r24, Z+2	; 0x02
    3b84:	93 81       	ldd	r25, Z+3	; 0x03
    3b86:	0c 5f       	subi	r16, 0xFC	; 252
    3b88:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8a:	08 c0       	rjmp	.+16     	; 0x3b9c <vfprintf+0x1d2>
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	07 2e       	mov	r0, r23
    3b92:	00 0c       	add	r0, r0
    3b94:	88 0b       	sbc	r24, r24
    3b96:	99 0b       	sbc	r25, r25
    3b98:	0e 5f       	subi	r16, 0xFE	; 254
    3b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9c:	2f 76       	andi	r18, 0x6F	; 111
    3b9e:	72 2e       	mov	r7, r18
    3ba0:	97 ff       	sbrs	r25, 7
    3ba2:	09 c0       	rjmp	.+18     	; 0x3bb6 <vfprintf+0x1ec>
    3ba4:	90 95       	com	r25
    3ba6:	80 95       	com	r24
    3ba8:	70 95       	com	r23
    3baa:	61 95       	neg	r22
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb2:	20 68       	ori	r18, 0x80	; 128
    3bb4:	72 2e       	mov	r7, r18
    3bb6:	2a e0       	ldi	r18, 0x0A	; 10
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	a4 01       	movw	r20, r8
    3bbc:	1a d1       	rcall	.+564    	; 0x3df2 <__ultoa_invert>
    3bbe:	a8 2e       	mov	r10, r24
    3bc0:	a8 18       	sub	r10, r8
    3bc2:	43 c0       	rjmp	.+134    	; 0x3c4a <vfprintf+0x280>
    3bc4:	85 37       	cpi	r24, 0x75	; 117
    3bc6:	29 f4       	brne	.+10     	; 0x3bd2 <vfprintf+0x208>
    3bc8:	2f 7e       	andi	r18, 0xEF	; 239
    3bca:	b2 2e       	mov	r11, r18
    3bcc:	2a e0       	ldi	r18, 0x0A	; 10
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	25 c0       	rjmp	.+74     	; 0x3c1c <vfprintf+0x252>
    3bd2:	f2 2f       	mov	r31, r18
    3bd4:	f9 7f       	andi	r31, 0xF9	; 249
    3bd6:	bf 2e       	mov	r11, r31
    3bd8:	8f 36       	cpi	r24, 0x6F	; 111
    3bda:	c1 f0       	breq	.+48     	; 0x3c0c <vfprintf+0x242>
    3bdc:	18 f4       	brcc	.+6      	; 0x3be4 <vfprintf+0x21a>
    3bde:	88 35       	cpi	r24, 0x58	; 88
    3be0:	79 f0       	breq	.+30     	; 0x3c00 <vfprintf+0x236>
    3be2:	ad c0       	rjmp	.+346    	; 0x3d3e <vfprintf+0x374>
    3be4:	80 37       	cpi	r24, 0x70	; 112
    3be6:	19 f0       	breq	.+6      	; 0x3bee <vfprintf+0x224>
    3be8:	88 37       	cpi	r24, 0x78	; 120
    3bea:	21 f0       	breq	.+8      	; 0x3bf4 <vfprintf+0x22a>
    3bec:	a8 c0       	rjmp	.+336    	; 0x3d3e <vfprintf+0x374>
    3bee:	2f 2f       	mov	r18, r31
    3bf0:	20 61       	ori	r18, 0x10	; 16
    3bf2:	b2 2e       	mov	r11, r18
    3bf4:	b4 fe       	sbrs	r11, 4
    3bf6:	0d c0       	rjmp	.+26     	; 0x3c12 <vfprintf+0x248>
    3bf8:	8b 2d       	mov	r24, r11
    3bfa:	84 60       	ori	r24, 0x04	; 4
    3bfc:	b8 2e       	mov	r11, r24
    3bfe:	09 c0       	rjmp	.+18     	; 0x3c12 <vfprintf+0x248>
    3c00:	24 ff       	sbrs	r18, 4
    3c02:	0a c0       	rjmp	.+20     	; 0x3c18 <vfprintf+0x24e>
    3c04:	9f 2f       	mov	r25, r31
    3c06:	96 60       	ori	r25, 0x06	; 6
    3c08:	b9 2e       	mov	r11, r25
    3c0a:	06 c0       	rjmp	.+12     	; 0x3c18 <vfprintf+0x24e>
    3c0c:	28 e0       	ldi	r18, 0x08	; 8
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	05 c0       	rjmp	.+10     	; 0x3c1c <vfprintf+0x252>
    3c12:	20 e1       	ldi	r18, 0x10	; 16
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <vfprintf+0x252>
    3c18:	20 e1       	ldi	r18, 0x10	; 16
    3c1a:	32 e0       	ldi	r19, 0x02	; 2
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	b7 fe       	sbrs	r11, 7
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <vfprintf+0x266>
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0c 5f       	subi	r16, 0xFC	; 252
    3c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2e:	06 c0       	rjmp	.+12     	; 0x3c3c <vfprintf+0x272>
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	0e 5f       	subi	r16, 0xFE	; 254
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3c:	a4 01       	movw	r20, r8
    3c3e:	d9 d0       	rcall	.+434    	; 0x3df2 <__ultoa_invert>
    3c40:	a8 2e       	mov	r10, r24
    3c42:	a8 18       	sub	r10, r8
    3c44:	fb 2d       	mov	r31, r11
    3c46:	ff 77       	andi	r31, 0x7F	; 127
    3c48:	7f 2e       	mov	r7, r31
    3c4a:	76 fe       	sbrs	r7, 6
    3c4c:	0b c0       	rjmp	.+22     	; 0x3c64 <vfprintf+0x29a>
    3c4e:	37 2d       	mov	r19, r7
    3c50:	3e 7f       	andi	r19, 0xFE	; 254
    3c52:	a5 14       	cp	r10, r5
    3c54:	50 f4       	brcc	.+20     	; 0x3c6a <vfprintf+0x2a0>
    3c56:	74 fe       	sbrs	r7, 4
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <vfprintf+0x2a4>
    3c5a:	72 fc       	sbrc	r7, 2
    3c5c:	08 c0       	rjmp	.+16     	; 0x3c6e <vfprintf+0x2a4>
    3c5e:	37 2d       	mov	r19, r7
    3c60:	3e 7e       	andi	r19, 0xEE	; 238
    3c62:	05 c0       	rjmp	.+10     	; 0x3c6e <vfprintf+0x2a4>
    3c64:	ba 2c       	mov	r11, r10
    3c66:	37 2d       	mov	r19, r7
    3c68:	03 c0       	rjmp	.+6      	; 0x3c70 <vfprintf+0x2a6>
    3c6a:	ba 2c       	mov	r11, r10
    3c6c:	01 c0       	rjmp	.+2      	; 0x3c70 <vfprintf+0x2a6>
    3c6e:	b5 2c       	mov	r11, r5
    3c70:	34 ff       	sbrs	r19, 4
    3c72:	0d c0       	rjmp	.+26     	; 0x3c8e <vfprintf+0x2c4>
    3c74:	fe 01       	movw	r30, r28
    3c76:	ea 0d       	add	r30, r10
    3c78:	f1 1d       	adc	r31, r1
    3c7a:	80 81       	ld	r24, Z
    3c7c:	80 33       	cpi	r24, 0x30	; 48
    3c7e:	11 f4       	brne	.+4      	; 0x3c84 <vfprintf+0x2ba>
    3c80:	39 7e       	andi	r19, 0xE9	; 233
    3c82:	09 c0       	rjmp	.+18     	; 0x3c96 <vfprintf+0x2cc>
    3c84:	32 ff       	sbrs	r19, 2
    3c86:	06 c0       	rjmp	.+12     	; 0x3c94 <vfprintf+0x2ca>
    3c88:	b3 94       	inc	r11
    3c8a:	b3 94       	inc	r11
    3c8c:	04 c0       	rjmp	.+8      	; 0x3c96 <vfprintf+0x2cc>
    3c8e:	83 2f       	mov	r24, r19
    3c90:	86 78       	andi	r24, 0x86	; 134
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <vfprintf+0x2cc>
    3c94:	b3 94       	inc	r11
    3c96:	33 fd       	sbrc	r19, 3
    3c98:	12 c0       	rjmp	.+36     	; 0x3cbe <vfprintf+0x2f4>
    3c9a:	30 ff       	sbrs	r19, 0
    3c9c:	06 c0       	rjmp	.+12     	; 0x3caa <vfprintf+0x2e0>
    3c9e:	5a 2c       	mov	r5, r10
    3ca0:	b3 14       	cp	r11, r3
    3ca2:	18 f4       	brcc	.+6      	; 0x3caa <vfprintf+0x2e0>
    3ca4:	53 0c       	add	r5, r3
    3ca6:	5b 18       	sub	r5, r11
    3ca8:	b3 2c       	mov	r11, r3
    3caa:	b3 14       	cp	r11, r3
    3cac:	60 f4       	brcc	.+24     	; 0x3cc6 <vfprintf+0x2fc>
    3cae:	b7 01       	movw	r22, r14
    3cb0:	80 e2       	ldi	r24, 0x20	; 32
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	3c 87       	std	Y+12, r19	; 0x0c
    3cb6:	65 d0       	rcall	.+202    	; 0x3d82 <fputc>
    3cb8:	b3 94       	inc	r11
    3cba:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cbc:	f6 cf       	rjmp	.-20     	; 0x3caa <vfprintf+0x2e0>
    3cbe:	b3 14       	cp	r11, r3
    3cc0:	10 f4       	brcc	.+4      	; 0x3cc6 <vfprintf+0x2fc>
    3cc2:	3b 18       	sub	r3, r11
    3cc4:	01 c0       	rjmp	.+2      	; 0x3cc8 <vfprintf+0x2fe>
    3cc6:	31 2c       	mov	r3, r1
    3cc8:	34 ff       	sbrs	r19, 4
    3cca:	11 c0       	rjmp	.+34     	; 0x3cee <vfprintf+0x324>
    3ccc:	b7 01       	movw	r22, r14
    3cce:	80 e3       	ldi	r24, 0x30	; 48
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	3c 87       	std	Y+12, r19	; 0x0c
    3cd4:	56 d0       	rcall	.+172    	; 0x3d82 <fputc>
    3cd6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cd8:	32 ff       	sbrs	r19, 2
    3cda:	16 c0       	rjmp	.+44     	; 0x3d08 <vfprintf+0x33e>
    3cdc:	31 fd       	sbrc	r19, 1
    3cde:	03 c0       	rjmp	.+6      	; 0x3ce6 <vfprintf+0x31c>
    3ce0:	88 e7       	ldi	r24, 0x78	; 120
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	02 c0       	rjmp	.+4      	; 0x3cea <vfprintf+0x320>
    3ce6:	88 e5       	ldi	r24, 0x58	; 88
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	b7 01       	movw	r22, r14
    3cec:	0c c0       	rjmp	.+24     	; 0x3d06 <vfprintf+0x33c>
    3cee:	83 2f       	mov	r24, r19
    3cf0:	86 78       	andi	r24, 0x86	; 134
    3cf2:	51 f0       	breq	.+20     	; 0x3d08 <vfprintf+0x33e>
    3cf4:	31 ff       	sbrs	r19, 1
    3cf6:	02 c0       	rjmp	.+4      	; 0x3cfc <vfprintf+0x332>
    3cf8:	8b e2       	ldi	r24, 0x2B	; 43
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <vfprintf+0x334>
    3cfc:	80 e2       	ldi	r24, 0x20	; 32
    3cfe:	37 fd       	sbrc	r19, 7
    3d00:	8d e2       	ldi	r24, 0x2D	; 45
    3d02:	b7 01       	movw	r22, r14
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	3d d0       	rcall	.+122    	; 0x3d82 <fputc>
    3d08:	a5 14       	cp	r10, r5
    3d0a:	30 f4       	brcc	.+12     	; 0x3d18 <vfprintf+0x34e>
    3d0c:	b7 01       	movw	r22, r14
    3d0e:	80 e3       	ldi	r24, 0x30	; 48
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	37 d0       	rcall	.+110    	; 0x3d82 <fputc>
    3d14:	5a 94       	dec	r5
    3d16:	f8 cf       	rjmp	.-16     	; 0x3d08 <vfprintf+0x33e>
    3d18:	aa 94       	dec	r10
    3d1a:	f4 01       	movw	r30, r8
    3d1c:	ea 0d       	add	r30, r10
    3d1e:	f1 1d       	adc	r31, r1
    3d20:	80 81       	ld	r24, Z
    3d22:	b7 01       	movw	r22, r14
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	2d d0       	rcall	.+90     	; 0x3d82 <fputc>
    3d28:	a1 10       	cpse	r10, r1
    3d2a:	f6 cf       	rjmp	.-20     	; 0x3d18 <vfprintf+0x34e>
    3d2c:	33 20       	and	r3, r3
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <vfprintf+0x368>
    3d30:	5d ce       	rjmp	.-838    	; 0x39ec <vfprintf+0x22>
    3d32:	b7 01       	movw	r22, r14
    3d34:	80 e2       	ldi	r24, 0x20	; 32
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	24 d0       	rcall	.+72     	; 0x3d82 <fputc>
    3d3a:	3a 94       	dec	r3
    3d3c:	f7 cf       	rjmp	.-18     	; 0x3d2c <vfprintf+0x362>
    3d3e:	f7 01       	movw	r30, r14
    3d40:	86 81       	ldd	r24, Z+6	; 0x06
    3d42:	97 81       	ldd	r25, Z+7	; 0x07
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <vfprintf+0x380>
    3d46:	8f ef       	ldi	r24, 0xFF	; 255
    3d48:	9f ef       	ldi	r25, 0xFF	; 255
    3d4a:	2c 96       	adiw	r28, 0x0c	; 12
    3d4c:	e2 e1       	ldi	r30, 0x12	; 18
    3d4e:	25 cb       	rjmp	.-2486   	; 0x339a <__epilogue_restores__>

00003d50 <__ctype_isfalse>:
    3d50:	99 27       	eor	r25, r25
    3d52:	88 27       	eor	r24, r24

00003d54 <__ctype_istrue>:
    3d54:	08 95       	ret

00003d56 <strnlen_P>:
    3d56:	fc 01       	movw	r30, r24
    3d58:	05 90       	lpm	r0, Z+
    3d5a:	61 50       	subi	r22, 0x01	; 1
    3d5c:	70 40       	sbci	r23, 0x00	; 0
    3d5e:	01 10       	cpse	r0, r1
    3d60:	d8 f7       	brcc	.-10     	; 0x3d58 <strnlen_P+0x2>
    3d62:	80 95       	com	r24
    3d64:	90 95       	com	r25
    3d66:	8e 0f       	add	r24, r30
    3d68:	9f 1f       	adc	r25, r31
    3d6a:	08 95       	ret

00003d6c <strnlen>:
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	61 50       	subi	r22, 0x01	; 1
    3d70:	70 40       	sbci	r23, 0x00	; 0
    3d72:	01 90       	ld	r0, Z+
    3d74:	01 10       	cpse	r0, r1
    3d76:	d8 f7       	brcc	.-10     	; 0x3d6e <strnlen+0x2>
    3d78:	80 95       	com	r24
    3d7a:	90 95       	com	r25
    3d7c:	8e 0f       	add	r24, r30
    3d7e:	9f 1f       	adc	r25, r31
    3d80:	08 95       	ret

00003d82 <fputc>:
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	fb 01       	movw	r30, r22
    3d8c:	23 81       	ldd	r18, Z+3	; 0x03
    3d8e:	21 fd       	sbrc	r18, 1
    3d90:	03 c0       	rjmp	.+6      	; 0x3d98 <fputc+0x16>
    3d92:	8f ef       	ldi	r24, 0xFF	; 255
    3d94:	9f ef       	ldi	r25, 0xFF	; 255
    3d96:	28 c0       	rjmp	.+80     	; 0x3de8 <fputc+0x66>
    3d98:	22 ff       	sbrs	r18, 2
    3d9a:	16 c0       	rjmp	.+44     	; 0x3dc8 <fputc+0x46>
    3d9c:	46 81       	ldd	r20, Z+6	; 0x06
    3d9e:	57 81       	ldd	r21, Z+7	; 0x07
    3da0:	24 81       	ldd	r18, Z+4	; 0x04
    3da2:	35 81       	ldd	r19, Z+5	; 0x05
    3da4:	42 17       	cp	r20, r18
    3da6:	53 07       	cpc	r21, r19
    3da8:	44 f4       	brge	.+16     	; 0x3dba <fputc+0x38>
    3daa:	a0 81       	ld	r26, Z
    3dac:	b1 81       	ldd	r27, Z+1	; 0x01
    3dae:	9d 01       	movw	r18, r26
    3db0:	2f 5f       	subi	r18, 0xFF	; 255
    3db2:	3f 4f       	sbci	r19, 0xFF	; 255
    3db4:	31 83       	std	Z+1, r19	; 0x01
    3db6:	20 83       	st	Z, r18
    3db8:	8c 93       	st	X, r24
    3dba:	26 81       	ldd	r18, Z+6	; 0x06
    3dbc:	37 81       	ldd	r19, Z+7	; 0x07
    3dbe:	2f 5f       	subi	r18, 0xFF	; 255
    3dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc2:	37 83       	std	Z+7, r19	; 0x07
    3dc4:	26 83       	std	Z+6, r18	; 0x06
    3dc6:	10 c0       	rjmp	.+32     	; 0x3de8 <fputc+0x66>
    3dc8:	eb 01       	movw	r28, r22
    3dca:	09 2f       	mov	r16, r25
    3dcc:	18 2f       	mov	r17, r24
    3dce:	00 84       	ldd	r0, Z+8	; 0x08
    3dd0:	f1 85       	ldd	r31, Z+9	; 0x09
    3dd2:	e0 2d       	mov	r30, r0
    3dd4:	09 95       	icall
    3dd6:	89 2b       	or	r24, r25
    3dd8:	e1 f6       	brne	.-72     	; 0x3d92 <fputc+0x10>
    3dda:	8e 81       	ldd	r24, Y+6	; 0x06
    3ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	9f 83       	std	Y+7, r25	; 0x07
    3de2:	8e 83       	std	Y+6, r24	; 0x06
    3de4:	81 2f       	mov	r24, r17
    3de6:	90 2f       	mov	r25, r16
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	1f 91       	pop	r17
    3dee:	0f 91       	pop	r16
    3df0:	08 95       	ret

00003df2 <__ultoa_invert>:
    3df2:	fa 01       	movw	r30, r20
    3df4:	aa 27       	eor	r26, r26
    3df6:	28 30       	cpi	r18, 0x08	; 8
    3df8:	51 f1       	breq	.+84     	; 0x3e4e <__ultoa_invert+0x5c>
    3dfa:	20 31       	cpi	r18, 0x10	; 16
    3dfc:	81 f1       	breq	.+96     	; 0x3e5e <__ultoa_invert+0x6c>
    3dfe:	e8 94       	clt
    3e00:	6f 93       	push	r22
    3e02:	6e 7f       	andi	r22, 0xFE	; 254
    3e04:	6e 5f       	subi	r22, 0xFE	; 254
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	8f 4f       	sbci	r24, 0xFF	; 255
    3e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0c:	af 4f       	sbci	r26, 0xFF	; 255
    3e0e:	b1 e0       	ldi	r27, 0x01	; 1
    3e10:	3e d0       	rcall	.+124    	; 0x3e8e <__ultoa_invert+0x9c>
    3e12:	b4 e0       	ldi	r27, 0x04	; 4
    3e14:	3c d0       	rcall	.+120    	; 0x3e8e <__ultoa_invert+0x9c>
    3e16:	67 0f       	add	r22, r23
    3e18:	78 1f       	adc	r23, r24
    3e1a:	89 1f       	adc	r24, r25
    3e1c:	9a 1f       	adc	r25, r26
    3e1e:	a1 1d       	adc	r26, r1
    3e20:	68 0f       	add	r22, r24
    3e22:	79 1f       	adc	r23, r25
    3e24:	8a 1f       	adc	r24, r26
    3e26:	91 1d       	adc	r25, r1
    3e28:	a1 1d       	adc	r26, r1
    3e2a:	6a 0f       	add	r22, r26
    3e2c:	71 1d       	adc	r23, r1
    3e2e:	81 1d       	adc	r24, r1
    3e30:	91 1d       	adc	r25, r1
    3e32:	a1 1d       	adc	r26, r1
    3e34:	20 d0       	rcall	.+64     	; 0x3e76 <__ultoa_invert+0x84>
    3e36:	09 f4       	brne	.+2      	; 0x3e3a <__ultoa_invert+0x48>
    3e38:	68 94       	set
    3e3a:	3f 91       	pop	r19
    3e3c:	2a e0       	ldi	r18, 0x0A	; 10
    3e3e:	26 9f       	mul	r18, r22
    3e40:	11 24       	eor	r1, r1
    3e42:	30 19       	sub	r19, r0
    3e44:	30 5d       	subi	r19, 0xD0	; 208
    3e46:	31 93       	st	Z+, r19
    3e48:	de f6       	brtc	.-74     	; 0x3e00 <__ultoa_invert+0xe>
    3e4a:	cf 01       	movw	r24, r30
    3e4c:	08 95       	ret
    3e4e:	46 2f       	mov	r20, r22
    3e50:	47 70       	andi	r20, 0x07	; 7
    3e52:	40 5d       	subi	r20, 0xD0	; 208
    3e54:	41 93       	st	Z+, r20
    3e56:	b3 e0       	ldi	r27, 0x03	; 3
    3e58:	0f d0       	rcall	.+30     	; 0x3e78 <__ultoa_invert+0x86>
    3e5a:	c9 f7       	brne	.-14     	; 0x3e4e <__ultoa_invert+0x5c>
    3e5c:	f6 cf       	rjmp	.-20     	; 0x3e4a <__ultoa_invert+0x58>
    3e5e:	46 2f       	mov	r20, r22
    3e60:	4f 70       	andi	r20, 0x0F	; 15
    3e62:	40 5d       	subi	r20, 0xD0	; 208
    3e64:	4a 33       	cpi	r20, 0x3A	; 58
    3e66:	18 f0       	brcs	.+6      	; 0x3e6e <__ultoa_invert+0x7c>
    3e68:	49 5d       	subi	r20, 0xD9	; 217
    3e6a:	31 fd       	sbrc	r19, 1
    3e6c:	40 52       	subi	r20, 0x20	; 32
    3e6e:	41 93       	st	Z+, r20
    3e70:	02 d0       	rcall	.+4      	; 0x3e76 <__ultoa_invert+0x84>
    3e72:	a9 f7       	brne	.-22     	; 0x3e5e <__ultoa_invert+0x6c>
    3e74:	ea cf       	rjmp	.-44     	; 0x3e4a <__ultoa_invert+0x58>
    3e76:	b4 e0       	ldi	r27, 0x04	; 4
    3e78:	a6 95       	lsr	r26
    3e7a:	97 95       	ror	r25
    3e7c:	87 95       	ror	r24
    3e7e:	77 95       	ror	r23
    3e80:	67 95       	ror	r22
    3e82:	ba 95       	dec	r27
    3e84:	c9 f7       	brne	.-14     	; 0x3e78 <__ultoa_invert+0x86>
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	61 05       	cpc	r22, r1
    3e8a:	71 05       	cpc	r23, r1
    3e8c:	08 95       	ret
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	0a 2e       	mov	r0, r26
    3e94:	06 94       	lsr	r0
    3e96:	57 95       	ror	r21
    3e98:	47 95       	ror	r20
    3e9a:	37 95       	ror	r19
    3e9c:	27 95       	ror	r18
    3e9e:	ba 95       	dec	r27
    3ea0:	c9 f7       	brne	.-14     	; 0x3e94 <__ultoa_invert+0xa2>
    3ea2:	62 0f       	add	r22, r18
    3ea4:	73 1f       	adc	r23, r19
    3ea6:	84 1f       	adc	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	a0 1d       	adc	r26, r0
    3eac:	08 95       	ret

00003eae <eeprom_read_block>:
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22

00003eb2 <eeprom_read_blraw>:
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	f9 99       	sbic	0x1f, 1	; 31
    3eb6:	fe cf       	rjmp	.-4      	; 0x3eb4 <eeprom_read_blraw+0x2>
    3eb8:	06 c0       	rjmp	.+12     	; 0x3ec6 <eeprom_read_blraw+0x14>
    3eba:	f2 bd       	out	0x22, r31	; 34
    3ebc:	e1 bd       	out	0x21, r30	; 33
    3ebe:	f8 9a       	sbi	0x1f, 0	; 31
    3ec0:	31 96       	adiw	r30, 0x01	; 1
    3ec2:	00 b4       	in	r0, 0x20	; 32
    3ec4:	0d 92       	st	X+, r0
    3ec6:	41 50       	subi	r20, 0x01	; 1
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	b8 f7       	brcc	.-18     	; 0x3eba <eeprom_read_blraw+0x8>
    3ecc:	08 95       	ret

00003ece <eeprom_read_byte>:
    3ece:	f9 99       	sbic	0x1f, 1	; 31
    3ed0:	fe cf       	rjmp	.-4      	; 0x3ece <eeprom_read_byte>
    3ed2:	92 bd       	out	0x22, r25	; 34
    3ed4:	81 bd       	out	0x21, r24	; 33
    3ed6:	f8 9a       	sbi	0x1f, 0	; 31
    3ed8:	99 27       	eor	r25, r25
    3eda:	80 b5       	in	r24, 0x20	; 32
    3edc:	08 95       	ret

00003ede <eeprom_write_byte>:
    3ede:	26 2f       	mov	r18, r22

00003ee0 <eeprom_write_r18>:
    3ee0:	f9 99       	sbic	0x1f, 1	; 31
    3ee2:	fe cf       	rjmp	.-4      	; 0x3ee0 <eeprom_write_r18>
    3ee4:	1f ba       	out	0x1f, r1	; 31
    3ee6:	92 bd       	out	0x22, r25	; 34
    3ee8:	81 bd       	out	0x21, r24	; 33
    3eea:	20 bd       	out	0x20, r18	; 32
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	f8 94       	cli
    3ef0:	fa 9a       	sbi	0x1f, 2	; 31
    3ef2:	f9 9a       	sbi	0x1f, 1	; 31
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	01 96       	adiw	r24, 0x01	; 1
    3ef8:	08 95       	ret

00003efa <__do_global_dtors>:
    3efa:	11 e0       	ldi	r17, 0x01	; 1
    3efc:	c2 e0       	ldi	r28, 0x02	; 2
    3efe:	d1 e0       	ldi	r29, 0x01	; 1
    3f00:	03 c0       	rjmp	.+6      	; 0x3f08 <__do_global_dtors+0xe>
    3f02:	fe 01       	movw	r30, r28
    3f04:	65 da       	rcall	.-2870   	; 0x33d0 <__tablejump2__>
    3f06:	21 96       	adiw	r28, 0x01	; 1
    3f08:	c3 30       	cpi	r28, 0x03	; 3
    3f0a:	d1 07       	cpc	r29, r17
    3f0c:	d1 f7       	brne	.-12     	; 0x3f02 <__do_global_dtors+0x8>
    3f0e:	f8 94       	cli

00003f10 <__stop_program>:
    3f10:	ff cf       	rjmp	.-2      	; 0x3f10 <__stop_program>
