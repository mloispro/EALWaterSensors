
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  00006c1c  00006cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041a  008001f4  008001f4  00006da4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000010d8  00000000  00000000  00006e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000238da  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004979  00000000  00000000  0002b7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000aa9b  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003420  00000000  00000000  0003ac08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012332  00000000  00000000  0003e028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009fbd  00000000  00000000  0005035a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001030  00000000  00000000  0005a317  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b990  00000000  00000000  0005b347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	41 c2       	rjmp	.+1154   	; 0x484 <__dtors_end>
       2:	00 00       	nop
       4:	67 c2       	rjmp	.+1230   	; 0x4d4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c2       	rjmp	.+1226   	; 0x4d4 <__bad_interrupt>
       a:	00 00       	nop
       c:	ec c6       	rjmp	.+3544   	; 0xde6 <__vector_3>
       e:	00 00       	nop
      10:	ea c6       	rjmp	.+3540   	; 0xde6 <__vector_3>
      12:	00 00       	nop
      14:	e8 c6       	rjmp	.+3536   	; 0xde6 <__vector_3>
      16:	00 00       	nop
      18:	5d c2       	rjmp	.+1210   	; 0x4d4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c2       	rjmp	.+1206   	; 0x4d4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c2       	rjmp	.+1202   	; 0x4d4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c2       	rjmp	.+1198   	; 0x4d4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c2       	rjmp	.+1194   	; 0x4d4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c2       	rjmp	.+1190   	; 0x4d4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c2       	rjmp	.+1186   	; 0x4d4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c2       	rjmp	.+1182   	; 0x4d4 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c2       	rjmp	.+1178   	; 0x4d4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c2       	rjmp	.+1174   	; 0x4d4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 e2 2a 	jmp	0x55c4	; 0x55c4 <__vector_16>
      44:	47 c2       	rjmp	.+1166   	; 0x4d4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__vector_18>
      4c:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_19>
      50:	41 c2       	rjmp	.+1154   	; 0x4d4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c2       	rjmp	.+1150   	; 0x4d4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c2       	rjmp	.+1146   	; 0x4d4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c2       	rjmp	.+1142   	; 0x4d4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1d c3       	rjmp	.+1594   	; 0x69c <__vector_24>
      62:	00 00       	nop
      64:	37 c2       	rjmp	.+1134   	; 0x4d4 <__bad_interrupt>
      66:	00 00       	nop
      68:	7a 04       	cpc	r7, r10
      6a:	7e 04       	cpc	r7, r14
      6c:	7e 04       	cpc	r7, r14
      6e:	7e 04       	cpc	r7, r14
      70:	7e 04       	cpc	r7, r14
      72:	7e 04       	cpc	r7, r14
      74:	7e 04       	cpc	r7, r14
      76:	7e 04       	cpc	r7, r14
      78:	7f 03       	fmul	r23, r23
      7a:	7e 04       	cpc	r7, r14
      7c:	7e 04       	cpc	r7, r14
      7e:	7e 04       	cpc	r7, r14
      80:	7e 04       	cpc	r7, r14
      82:	7e 04       	cpc	r7, r14
      84:	7e 04       	cpc	r7, r14
      86:	7e 04       	cpc	r7, r14
      88:	7f 03       	fmul	r23, r23
      8a:	7e 04       	cpc	r7, r14
      8c:	7e 04       	cpc	r7, r14
      8e:	7e 04       	cpc	r7, r14
      90:	7e 04       	cpc	r7, r14
      92:	7e 04       	cpc	r7, r14
      94:	7e 04       	cpc	r7, r14
      96:	7e 04       	cpc	r7, r14
      98:	88 03       	fmulsu	r16, r16
      9a:	7e 04       	cpc	r7, r14
      9c:	7e 04       	cpc	r7, r14
      9e:	7e 04       	cpc	r7, r14
      a0:	7e 04       	cpc	r7, r14
      a2:	7e 04       	cpc	r7, r14
      a4:	7e 04       	cpc	r7, r14
      a6:	7e 04       	cpc	r7, r14
      a8:	b3 03       	fmuls	r19, r19
      aa:	7e 04       	cpc	r7, r14
      ac:	7e 04       	cpc	r7, r14
      ae:	7e 04       	cpc	r7, r14
      b0:	7e 04       	cpc	r7, r14
      b2:	7e 04       	cpc	r7, r14
      b4:	7e 04       	cpc	r7, r14
      b6:	7e 04       	cpc	r7, r14
      b8:	88 03       	fmulsu	r16, r16
      ba:	7e 04       	cpc	r7, r14
      bc:	7e 04       	cpc	r7, r14
      be:	7e 04       	cpc	r7, r14
      c0:	7e 04       	cpc	r7, r14
      c2:	7e 04       	cpc	r7, r14
      c4:	7e 04       	cpc	r7, r14
      c6:	7e 04       	cpc	r7, r14
      c8:	b8 03       	fmulsu	r19, r16
      ca:	7e 04       	cpc	r7, r14
      cc:	7e 04       	cpc	r7, r14
      ce:	7e 04       	cpc	r7, r14
      d0:	7e 04       	cpc	r7, r14
      d2:	7e 04       	cpc	r7, r14
      d4:	7e 04       	cpc	r7, r14
      d6:	7e 04       	cpc	r7, r14
      d8:	bd 03       	fmulsu	r19, r21
      da:	7e 04       	cpc	r7, r14
      dc:	7e 04       	cpc	r7, r14
      de:	7e 04       	cpc	r7, r14
      e0:	7e 04       	cpc	r7, r14
      e2:	7e 04       	cpc	r7, r14
      e4:	7e 04       	cpc	r7, r14
      e6:	7e 04       	cpc	r7, r14
      e8:	d2 03       	fmuls	r21, r18
      ea:	7e 04       	cpc	r7, r14
      ec:	7e 04       	cpc	r7, r14
      ee:	7e 04       	cpc	r7, r14
      f0:	7e 04       	cpc	r7, r14
      f2:	7e 04       	cpc	r7, r14
      f4:	7e 04       	cpc	r7, r14
      f6:	7e 04       	cpc	r7, r14
      f8:	ff 03       	fmulsu	r23, r23
      fa:	7e 04       	cpc	r7, r14
      fc:	7e 04       	cpc	r7, r14
      fe:	7e 04       	cpc	r7, r14
     100:	7e 04       	cpc	r7, r14
     102:	7e 04       	cpc	r7, r14
     104:	7e 04       	cpc	r7, r14
     106:	7e 04       	cpc	r7, r14
     108:	c2 03       	fmuls	r20, r18
     10a:	7e 04       	cpc	r7, r14
     10c:	7e 04       	cpc	r7, r14
     10e:	7e 04       	cpc	r7, r14
     110:	7e 04       	cpc	r7, r14
     112:	7e 04       	cpc	r7, r14
     114:	7e 04       	cpc	r7, r14
     116:	7e 04       	cpc	r7, r14
     118:	de 03       	fmulsu	r21, r22
     11a:	7e 04       	cpc	r7, r14
     11c:	7e 04       	cpc	r7, r14
     11e:	7e 04       	cpc	r7, r14
     120:	7e 04       	cpc	r7, r14
     122:	7e 04       	cpc	r7, r14
     124:	7e 04       	cpc	r7, r14
     126:	7e 04       	cpc	r7, r14
     128:	01 04       	cpc	r0, r1
     12a:	7e 04       	cpc	r7, r14
     12c:	7e 04       	cpc	r7, r14
     12e:	7e 04       	cpc	r7, r14
     130:	7e 04       	cpc	r7, r14
     132:	7e 04       	cpc	r7, r14
     134:	7e 04       	cpc	r7, r14
     136:	7e 04       	cpc	r7, r14
     138:	01 04       	cpc	r0, r1
     13a:	7e 04       	cpc	r7, r14
     13c:	7e 04       	cpc	r7, r14
     13e:	7e 04       	cpc	r7, r14
     140:	7e 04       	cpc	r7, r14
     142:	7e 04       	cpc	r7, r14
     144:	7e 04       	cpc	r7, r14
     146:	7e 04       	cpc	r7, r14
     148:	01 04       	cpc	r0, r1
     14a:	7e 04       	cpc	r7, r14
     14c:	7e 04       	cpc	r7, r14
     14e:	7e 04       	cpc	r7, r14
     150:	7e 04       	cpc	r7, r14
     152:	7e 04       	cpc	r7, r14
     154:	7e 04       	cpc	r7, r14
     156:	7e 04       	cpc	r7, r14
     158:	01 04       	cpc	r0, r1
     15a:	7e 04       	cpc	r7, r14
     15c:	7e 04       	cpc	r7, r14
     15e:	7e 04       	cpc	r7, r14
     160:	7e 04       	cpc	r7, r14
     162:	7e 04       	cpc	r7, r14
     164:	7e 04       	cpc	r7, r14
     166:	7e 04       	cpc	r7, r14
     168:	09 04       	cpc	r0, r9
     16a:	7e 04       	cpc	r7, r14
     16c:	7e 04       	cpc	r7, r14
     16e:	7e 04       	cpc	r7, r14
     170:	7e 04       	cpc	r7, r14
     172:	7e 04       	cpc	r7, r14
     174:	7e 04       	cpc	r7, r14
     176:	7e 04       	cpc	r7, r14
     178:	40 04       	cpc	r4, r0
     17a:	7e 04       	cpc	r7, r14
     17c:	7e 04       	cpc	r7, r14
     17e:	7e 04       	cpc	r7, r14
     180:	7e 04       	cpc	r7, r14
     182:	7e 04       	cpc	r7, r14
     184:	7e 04       	cpc	r7, r14
     186:	7e 04       	cpc	r7, r14
     188:	09 04       	cpc	r0, r9
     18a:	7e 04       	cpc	r7, r14
     18c:	7e 04       	cpc	r7, r14
     18e:	7e 04       	cpc	r7, r14
     190:	7e 04       	cpc	r7, r14
     192:	7e 04       	cpc	r7, r14
     194:	7e 04       	cpc	r7, r14
     196:	7e 04       	cpc	r7, r14
     198:	40 04       	cpc	r4, r0
     19a:	7e 04       	cpc	r7, r14
     19c:	7e 04       	cpc	r7, r14
     19e:	7e 04       	cpc	r7, r14
     1a0:	7e 04       	cpc	r7, r14
     1a2:	7e 04       	cpc	r7, r14
     1a4:	7e 04       	cpc	r7, r14
     1a6:	7e 04       	cpc	r7, r14
     1a8:	23 04       	cpc	r2, r3
     1aa:	7e 04       	cpc	r7, r14
     1ac:	7e 04       	cpc	r7, r14
     1ae:	7e 04       	cpc	r7, r14
     1b0:	7e 04       	cpc	r7, r14
     1b2:	7e 04       	cpc	r7, r14
     1b4:	7e 04       	cpc	r7, r14
     1b6:	7e 04       	cpc	r7, r14
     1b8:	43 04       	cpc	r4, r3
     1ba:	7e 04       	cpc	r7, r14
     1bc:	7e 04       	cpc	r7, r14
     1be:	7e 04       	cpc	r7, r14
     1c0:	7e 04       	cpc	r7, r14
     1c2:	7e 04       	cpc	r7, r14
     1c4:	7e 04       	cpc	r7, r14
     1c6:	7e 04       	cpc	r7, r14
     1c8:	43 04       	cpc	r4, r3
     1ca:	7e 04       	cpc	r7, r14
     1cc:	7e 04       	cpc	r7, r14
     1ce:	7e 04       	cpc	r7, r14
     1d0:	7e 04       	cpc	r7, r14
     1d2:	7e 04       	cpc	r7, r14
     1d4:	7e 04       	cpc	r7, r14
     1d6:	7e 04       	cpc	r7, r14
     1d8:	59 04       	cpc	r5, r9
     1da:	7e 04       	cpc	r7, r14
     1dc:	7e 04       	cpc	r7, r14
     1de:	7e 04       	cpc	r7, r14
     1e0:	7e 04       	cpc	r7, r14
     1e2:	7e 04       	cpc	r7, r14
     1e4:	7e 04       	cpc	r7, r14
     1e6:	7e 04       	cpc	r7, r14
     1e8:	75 04       	cpc	r7, r5
     1ea:	7e 04       	cpc	r7, r14
     1ec:	7e 04       	cpc	r7, r14
     1ee:	7e 04       	cpc	r7, r14
     1f0:	7e 04       	cpc	r7, r14
     1f2:	7e 04       	cpc	r7, r14
     1f4:	7e 04       	cpc	r7, r14
     1f6:	7e 04       	cpc	r7, r14
     1f8:	75 04       	cpc	r7, r5
     1fa:	7e 04       	cpc	r7, r14
     1fc:	7e 04       	cpc	r7, r14
     1fe:	7e 04       	cpc	r7, r14
     200:	7e 04       	cpc	r7, r14
     202:	7e 04       	cpc	r7, r14
     204:	7e 04       	cpc	r7, r14
     206:	7e 04       	cpc	r7, r14
     208:	7e 04       	cpc	r7, r14
     20a:	7e 04       	cpc	r7, r14
     20c:	7e 04       	cpc	r7, r14
     20e:	7e 04       	cpc	r7, r14
     210:	7e 04       	cpc	r7, r14
     212:	7e 04       	cpc	r7, r14
     214:	7e 04       	cpc	r7, r14
     216:	7e 04       	cpc	r7, r14
     218:	7e 04       	cpc	r7, r14
     21a:	7e 04       	cpc	r7, r14
     21c:	7e 04       	cpc	r7, r14
     21e:	7e 04       	cpc	r7, r14
     220:	7e 04       	cpc	r7, r14
     222:	7e 04       	cpc	r7, r14
     224:	7e 04       	cpc	r7, r14
     226:	7e 04       	cpc	r7, r14
     228:	7e 04       	cpc	r7, r14
     22a:	7e 04       	cpc	r7, r14
     22c:	7e 04       	cpc	r7, r14
     22e:	7e 04       	cpc	r7, r14
     230:	7e 04       	cpc	r7, r14
     232:	7e 04       	cpc	r7, r14
     234:	7e 04       	cpc	r7, r14
     236:	7e 04       	cpc	r7, r14
     238:	7e 04       	cpc	r7, r14
     23a:	7e 04       	cpc	r7, r14
     23c:	7e 04       	cpc	r7, r14
     23e:	7e 04       	cpc	r7, r14
     240:	7e 04       	cpc	r7, r14
     242:	7e 04       	cpc	r7, r14
     244:	7e 04       	cpc	r7, r14
     246:	7e 04       	cpc	r7, r14
     248:	7e 04       	cpc	r7, r14
     24a:	7e 04       	cpc	r7, r14
     24c:	7e 04       	cpc	r7, r14
     24e:	7e 04       	cpc	r7, r14
     250:	7e 04       	cpc	r7, r14
     252:	7e 04       	cpc	r7, r14
     254:	7e 04       	cpc	r7, r14
     256:	7e 04       	cpc	r7, r14
     258:	7e 04       	cpc	r7, r14

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     29d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     2ad:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     2bd:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     2cd:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     2dd:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     2ed:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     2fd:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     30d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     31d:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     32d:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     33d:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     34d:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     35d:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     36d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     37d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     38d:	3d 27                                               ='

0000038f <_ZZN7LCDBase9ClearLineEsE3__c>:
     38f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000003a0 <_ZZN8PHSensor16CalculateAverageEPiiE3__c>:
     3a0:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3b0:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3c0:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003ca <_ZZN9TDSSensor16CalculateAverageEPiiE3__c>:
     3ca:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3da:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3ea:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003f4 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     3f4:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     404:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     414:	76 65 64 3a 20 00                                   ved: .

0000041a <digital_pin_to_timer_PGM>:
     41a:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     42a:	00 00 00 00                                         ....

0000042e <digital_pin_to_bit_mask_PGM>:
     42e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     43e:	04 08 10 20                                         ... 

00000442 <digital_pin_to_port_PGM>:
     442:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     452:	03 03 03 03                                         ....

00000456 <port_to_input_PGM>:
     456:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000460 <port_to_output_PGM>:
     460:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000046a <port_to_mode_PGM>:
     46a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000474 <__ctors_start>:
     474:	ab 06       	cpc	r10, r27
     476:	49 0d       	add	r20, r9
     478:	ad 24       	eor	r10, r13
     47a:	1e 25       	eor	r17, r14
     47c:	cc 25       	eor	r28, r12
     47e:	4c 29       	or	r20, r12

00000480 <__ctors_end>:
     480:	bb 24       	eor	r11, r11
     482:	2c 25       	eor	r18, r12

00000484 <__dtors_end>:
     484:	11 24       	eor	r1, r1
     486:	1f be       	out	0x3f, r1	; 63
     488:	cf ef       	ldi	r28, 0xFF	; 255
     48a:	d8 e0       	ldi	r29, 0x08	; 8
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	cd bf       	out	0x3d, r28	; 61

00000490 <__do_copy_data>:
     490:	11 e0       	ldi	r17, 0x01	; 1
     492:	a0 e0       	ldi	r26, 0x00	; 0
     494:	b1 e0       	ldi	r27, 0x01	; 1
     496:	ec e1       	ldi	r30, 0x1C	; 28
     498:	fc e6       	ldi	r31, 0x6C	; 108
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__do_copy_data+0x10>
     49c:	05 90       	lpm	r0, Z+
     49e:	0d 92       	st	X+, r0
     4a0:	a4 3f       	cpi	r26, 0xF4	; 244
     4a2:	b1 07       	cpc	r27, r17
     4a4:	d9 f7       	brne	.-10     	; 0x49c <__do_copy_data+0xc>

000004a6 <__do_clear_bss>:
     4a6:	26 e0       	ldi	r18, 0x06	; 6
     4a8:	a4 ef       	ldi	r26, 0xF4	; 244
     4aa:	b1 e0       	ldi	r27, 0x01	; 1
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <.do_clear_bss_start>

000004ae <.do_clear_bss_loop>:
     4ae:	1d 92       	st	X+, r1

000004b0 <.do_clear_bss_start>:
     4b0:	ae 30       	cpi	r26, 0x0E	; 14
     4b2:	b2 07       	cpc	r27, r18
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <.do_clear_bss_loop>

000004b6 <__do_global_ctors>:
     4b6:	12 e0       	ldi	r17, 0x02	; 2
     4b8:	c0 e4       	ldi	r28, 0x40	; 64
     4ba:	d2 e0       	ldi	r29, 0x02	; 2
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__do_global_ctors+0x10>
     4be:	21 97       	sbiw	r28, 0x01	; 1
     4c0:	fe 01       	movw	r30, r28
     4c2:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <__tablejump2__>
     4c6:	ca 33       	cpi	r28, 0x3A	; 58
     4c8:	d1 07       	cpc	r29, r17
     4ca:	c9 f7       	brne	.-14     	; 0x4be <__do_global_ctors+0x8>
     4cc:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <main>
     4d0:	0c 94 02 36 	jmp	0x6c04	; 0x6c04 <__do_global_dtors>

000004d4 <__bad_interrupt>:
     4d4:	95 cd       	rjmp	.-1238   	; 0x0 <__vectors>

000004d6 <twi_init>:
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     4d6:	a0 e0       	ldi	r26, 0x00	; 0
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e1 e7       	ldi	r30, 0x71	; 113
     4dc:	f2 e0       	ldi	r31, 0x02	; 2
     4de:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     4e2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <twi_sendStop>
     4ec:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <twi_inRepStart>
     4f0:	82 e1       	ldi	r24, 0x12	; 18
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
     4f8:	83 e1       	ldi	r24, 0x13	; 19
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
     500:	89 eb       	ldi	r24, 0xB9	; 185
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	29 eb       	ldi	r18, 0xB9	; 185
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	20 81       	ld	r18, Z
     50c:	2e 7f       	andi	r18, 0xFE	; 254
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
     512:	89 eb       	ldi	r24, 0xB9	; 185
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	29 eb       	ldi	r18, 0xB9	; 185
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	f9 01       	movw	r30, r18
     51c:	20 81       	ld	r18, Z
     51e:	2d 7f       	andi	r18, 0xFD	; 253
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18
     524:	88 eb       	ldi	r24, 0xB8	; 184
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	28 e4       	ldi	r18, 0x48	; 72
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	25 e4       	ldi	r18, 0x45	; 69
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
     538:	e2 e0       	ldi	r30, 0x02	; 2
     53a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000053e <twi_setAddress>:
     53e:	a1 e0       	ldi	r26, 0x01	; 1
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	e5 ea       	ldi	r30, 0xA5	; 165
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	8a eb       	ldi	r24, 0xBA	; 186
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	29 81       	ldd	r18, Y+1	; 0x01
     552:	22 0f       	add	r18, r18
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
     558:	21 96       	adiw	r28, 0x01	; 1
     55a:	e2 e0       	ldi	r30, 0x02	; 2
     55c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000560 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     560:	a4 e0       	ldi	r26, 0x04	; 4
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	e6 eb       	ldi	r30, 0xB6	; 182
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     56c:	9b 83       	std	Y+3, r25	; 0x03
     56e:	8a 83       	std	Y+2, r24	; 0x02
     570:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	81 32       	cpi	r24, 0x21	; 33
     576:	10 f0       	brcs	.+4      	; 0x57c <twi_transmit+0x1c>
    return 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	23 c0       	rjmp	.+70     	; 0x5c2 <twi_transmit+0x62>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     57c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <__data_end>
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	11 f0       	breq	.+4      	; 0x588 <twi_transmit+0x28>
    return 2;
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	1d c0       	rjmp	.+58     	; 0x5c2 <twi_transmit+0x62>
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     588:	8c 81       	ldd	r24, Y+4	; 0x04
     58a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_txBufferLength>
  for(i = 0; i < length; ++i){
     58e:	19 82       	std	Y+1, r1	; 0x01
     590:	13 c0       	rjmp	.+38     	; 0x5b8 <twi_transmit+0x58>
    twi_txBuffer[i] = data[i];
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	22 2f       	mov	r18, r18
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4a 81       	ldd	r20, Y+2	; 0x02
     5a0:	5b 81       	ldd	r21, Y+3	; 0x03
     5a2:	24 0f       	add	r18, r20
     5a4:	35 1f       	adc	r19, r21
     5a6:	f9 01       	movw	r30, r18
     5a8:	20 81       	ld	r18, Z
     5aa:	82 5e       	subi	r24, 0xE2	; 226
     5ac:	9d 4f       	sbci	r25, 0xFD	; 253
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	99 81       	ldd	r25, Y+1	; 0x01
     5ba:	8c 81       	ldd	r24, Y+4	; 0x04
     5bc:	98 17       	cp	r25, r24
     5be:	48 f3       	brcs	.-46     	; 0x592 <twi_transmit+0x32>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
}
     5c2:	24 96       	adiw	r28, 0x04	; 4
     5c4:	e2 e0       	ldi	r30, 0x02	; 2
     5c6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000005ca <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
     5ca:	a2 e0       	ldi	r26, 0x02	; 2
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	eb ee       	ldi	r30, 0xEB	; 235
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <twi_onSlaveReceive+0x1>
     5e2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <twi_onSlaveReceive>
}
     5e6:	22 96       	adiw	r28, 0x02	; 2
     5e8:	e2 e0       	ldi	r30, 0x02	; 2
     5ea:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000005ee <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
     5ee:	a2 e0       	ldi	r26, 0x02	; 2
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	ed ef       	ldi	r30, 0xFD	; 253
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <twi_onSlaveTransmit+0x1>
     606:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <twi_onSlaveTransmit>
}
     60a:	22 96       	adiw	r28, 0x02	; 2
     60c:	e2 e0       	ldi	r30, 0x02	; 2
     60e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000612 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
     612:	a1 e0       	ldi	r26, 0x01	; 1
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ef e0       	ldi	r30, 0x0F	; 15
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     61e:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	88 23       	and	r24, r24
     624:	31 f0       	breq	.+12     	; 0x632 <twi_reply+0x20>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     626:	8c eb       	ldi	r24, 0xBC	; 188
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	25 ec       	ldi	r18, 0xC5	; 197
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
     630:	05 c0       	rjmp	.+10     	; 0x63c <twi_reply+0x2a>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     632:	8c eb       	ldi	r24, 0xBC	; 188
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	25 e8       	ldi	r18, 0x85	; 133
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
  }
}
     63c:	21 96       	adiw	r28, 0x01	; 1
     63e:	e2 e0       	ldi	r30, 0x02	; 2
     640:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000644 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
     644:	a0 e0       	ldi	r26, 0x00	; 0
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	e8 e2       	ldi	r30, 0x28	; 40
     64a:	f3 e0       	ldi	r31, 0x03	; 3
     64c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     650:	8c eb       	ldi	r24, 0xBC	; 188
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	25 ed       	ldi	r18, 0xD5	; 213
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     65a:	01 c0       	rjmp	.+2      	; 0x65e <twi_stop+0x1a>
    continue;
     65c:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     65e:	8c eb       	ldi	r24, 0xBC	; 188
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	80 71       	andi	r24, 0x10	; 16
     66c:	99 27       	eor	r25, r25
     66e:	89 2b       	or	r24, r25
     670:	a9 f7       	brne	.-22     	; 0x65c <twi_stop+0x18>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     672:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
}
     676:	e2 e0       	ldi	r30, 0x02	; 2
     678:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000067c <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	e4 e4       	ldi	r30, 0x44	; 68
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     688:	8c eb       	ldi	r24, 0xBC	; 188
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	25 ec       	ldi	r18, 0xC5	; 197
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
     692:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
}
     696:	e2 e0       	ldi	r30, 0x02	; 2
     698:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000069c <__vector_24>:

ISR(TWI_vect)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	2f 93       	push	r18
     6aa:	3f 93       	push	r19
     6ac:	4f 93       	push	r20
     6ae:	5f 93       	push	r21
     6b0:	6f 93       	push	r22
     6b2:	7f 93       	push	r23
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	ff 93       	push	r31
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
     6c8:	89 eb       	ldi	r24, 0xB9	; 185
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	88 7f       	andi	r24, 0xF8	; 248
     6d6:	99 27       	eor	r25, r25
     6d8:	09 2e       	mov	r0, r25
     6da:	00 0c       	add	r0, r0
     6dc:	aa 0b       	sbc	r26, r26
     6de:	bb 0b       	sbc	r27, r27
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	28 ef       	ldi	r18, 0xF8	; 248
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	84 1b       	sub	r24, r20
     6ea:	95 0b       	sbc	r25, r21
     6ec:	28 17       	cp	r18, r24
     6ee:	39 07       	cpc	r19, r25
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <__vector_24+0x58>
     6f2:	04 c1       	rjmp	.+520    	; 0x8fc <__vector_24+0x260>
     6f4:	8c 5c       	subi	r24, 0xCC	; 204
     6f6:	9f 4f       	sbci	r25, 0xFF	; 255
     6f8:	fc 01       	movw	r30, r24
     6fa:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     6fe:	8b eb       	ldi	r24, 0xBB	; 187
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <twi_slarw>
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
      twi_reply(1);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	82 df       	rcall	.-252    	; 0x612 <twi_reply>
      break;
     70e:	f6 c0       	rjmp	.+492    	; 0x8fc <__vector_24+0x260>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     710:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <twi_masterBufferIndex>
     714:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_masterBufferLength>
     718:	98 17       	cp	r25, r24
     71a:	98 f4       	brcc	.+38     	; 0x742 <__vector_24+0xa6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     71c:	8b eb       	ldi	r24, 0xBB	; 187
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <twi_masterBufferIndex>
     724:	31 e0       	ldi	r19, 0x01	; 1
     726:	32 0f       	add	r19, r18
     728:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <twi_masterBufferIndex>
     72c:	22 2f       	mov	r18, r18
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	24 50       	subi	r18, 0x04	; 4
     732:	3e 4f       	sbci	r19, 0xFE	; 254
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
        twi_reply(1);
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	69 df       	rcall	.-302    	; 0x612 <twi_reply>
     740:	11 c0       	rjmp	.+34     	; 0x764 <__vector_24+0xc8>
      }else{
	if (twi_sendStop)
     742:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi_sendStop>
     746:	88 23       	and	r24, r24
     748:	11 f0       	breq	.+4      	; 0x74e <__vector_24+0xb2>
          twi_stop();
     74a:	7c df       	rcall	.-264    	; 0x644 <twi_stop>
     74c:	0b c0       	rjmp	.+22     	; 0x764 <__vector_24+0xc8>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     754:	8c eb       	ldi	r24, 0xBC	; 188
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	24 ea       	ldi	r18, 0xA4	; 164
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     75e:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
	}
      }
      break;
     762:	cc c0       	rjmp	.+408    	; 0x8fc <__vector_24+0x260>
     764:	cb c0       	rjmp	.+406    	; 0x8fc <__vector_24+0x260>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_error>
      twi_stop();
     76c:	6b df       	rcall	.-298    	; 0x644 <twi_stop>
      break;
     76e:	c6 c0       	rjmp	.+396    	; 0x8fc <__vector_24+0x260>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     770:	80 e3       	ldi	r24, 0x30	; 48
     772:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_error>
      twi_stop();
     776:	66 df       	rcall	.-308    	; 0x644 <twi_stop>
      break;
     778:	c1 c0       	rjmp	.+386    	; 0x8fc <__vector_24+0x260>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     77a:	88 e3       	ldi	r24, 0x38	; 56
     77c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_error>
      twi_releaseBus();
     780:	7d df       	rcall	.-262    	; 0x67c <twi_releaseBus>
      break;
     782:	bc c0       	rjmp	.+376    	; 0x8fc <__vector_24+0x260>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     784:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferIndex>
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	98 0f       	add	r25, r24
     78c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <twi_masterBufferIndex>
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	2b eb       	ldi	r18, 0xBB	; 187
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	20 81       	ld	r18, Z
     79c:	84 50       	subi	r24, 0x04	; 4
     79e:	9e 4f       	sbci	r25, 0xFE	; 254
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7a4:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <twi_masterBufferIndex>
     7a8:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_masterBufferLength>
     7ac:	98 17       	cp	r25, r24
     7ae:	18 f4       	brcc	.+6      	; 0x7b6 <__vector_24+0x11a>
        twi_reply(1);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	2f df       	rcall	.-418    	; 0x612 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     7b4:	a3 c0       	rjmp	.+326    	; 0x8fc <__vector_24+0x260>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	2c df       	rcall	.-424    	; 0x612 <twi_reply>
      }
      break;
     7ba:	a0 c0       	rjmp	.+320    	; 0x8fc <__vector_24+0x260>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7bc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferIndex>
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	98 0f       	add	r25, r24
     7c4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <twi_masterBufferIndex>
     7c8:	88 2f       	mov	r24, r24
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	2b eb       	ldi	r18, 0xBB	; 187
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	84 50       	subi	r24, 0x04	; 4
     7d6:	9e 4f       	sbci	r25, 0xFE	; 254
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
	if (twi_sendStop)
     7dc:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi_sendStop>
     7e0:	88 23       	and	r24, r24
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <__vector_24+0x14c>
          twi_stop();
     7e4:	2f df       	rcall	.-418    	; 0x644 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
     7e6:	8a c0       	rjmp	.+276    	; 0x8fc <__vector_24+0x260>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     7ee:	8c eb       	ldi	r24, 0xBC	; 188
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	24 ea       	ldi	r18, 0xA4	; 164
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
     7f8:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
	}    
	break;
     7fc:	7f c0       	rjmp	.+254    	; 0x8fc <__vector_24+0x260>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     7fe:	22 df       	rcall	.-444    	; 0x644 <twi_stop>
      break;
     800:	7d c0       	rjmp	.+250    	; 0x8fc <__vector_24+0x260>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__data_end>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     808:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi_rxBufferIndex>
      twi_reply(1);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	01 df       	rcall	.-510    	; 0x612 <twi_reply>
      break;
     810:	75 c0       	rjmp	.+234    	; 0x8fc <__vector_24+0x260>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     812:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_rxBufferIndex>
     816:	80 32       	cpi	r24, 0x20	; 32
     818:	98 f4       	brcc	.+38     	; 0x840 <__vector_24+0x1a4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     81a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_rxBufferIndex>
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	98 0f       	add	r25, r24
     822:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <twi_rxBufferIndex>
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	2b eb       	ldi	r18, 0xBB	; 187
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	80 5c       	subi	r24, 0xC0	; 192
     834:	9d 4f       	sbci	r25, 0xFD	; 253
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
        twi_reply(1);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	ea de       	rcall	.-556    	; 0x612 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
     83e:	5e c0       	rjmp	.+188    	; 0x8fc <__vector_24+0x260>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	e7 de       	rcall	.-562    	; 0x612 <twi_reply>
      }
      break;
     844:	5b c0       	rjmp	.+182    	; 0x8fc <__vector_24+0x260>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     846:	1a df       	rcall	.-460    	; 0x67c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     848:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_rxBufferIndex>
     84c:	80 32       	cpi	r24, 0x20	; 32
     84e:	40 f4       	brcc	.+16     	; 0x860 <__vector_24+0x1c4>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     850:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_rxBufferIndex>
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	80 5c       	subi	r24, 0xC0	; 192
     85a:	9d 4f       	sbci	r25, 0xFD	; 253
     85c:	fc 01       	movw	r30, r24
     85e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     860:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <twi_onSlaveReceive>
     864:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <twi_onSlaveReceive+0x1>
     868:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_rxBufferIndex>
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	bc 01       	movw	r22, r24
     872:	80 e4       	ldi	r24, 0x40	; 64
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	f9 01       	movw	r30, r18
     878:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     87a:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi_rxBufferIndex>
      break;
     87e:	3e c0       	rjmp	.+124    	; 0x8fc <__vector_24+0x260>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	c7 de       	rcall	.-626    	; 0x612 <twi_reply>
      break;
     884:	3b c0       	rjmp	.+118    	; 0x8fc <__vector_24+0x260>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__data_end>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     88c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     890:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     894:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <twi_onSlaveTransmit>
     898:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <twi_onSlaveTransmit+0x1>
     89c:	fc 01       	movw	r30, r24
     89e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     8a0:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <twi_txBufferLength>
     8a4:	88 23       	and	r24, r24
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <__vector_24+0x216>
        twi_txBufferLength = 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     8ae:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     8b2:	8b eb       	ldi	r24, 0xBB	; 187
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <twi_txBufferIndex>
     8ba:	31 e0       	ldi	r19, 0x01	; 1
     8bc:	32 0f       	add	r19, r18
     8be:	30 93 3e 02 	sts	0x023E, r19	; 0x80023e <twi_txBufferIndex>
     8c2:	22 2f       	mov	r18, r18
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	22 5e       	subi	r18, 0xE2	; 226
     8c8:	3d 4f       	sbci	r19, 0xFD	; 253
     8ca:	f9 01       	movw	r30, r18
     8cc:	20 81       	ld	r18, Z
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     8d2:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <twi_txBufferIndex>
     8d6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <twi_txBufferLength>
     8da:	98 17       	cp	r25, r24
     8dc:	18 f4       	brcc	.+6      	; 0x8e4 <__vector_24+0x248>
        twi_reply(1);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	98 de       	rcall	.-720    	; 0x612 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <__vector_24+0x260>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	95 de       	rcall	.-726    	; 0x612 <twi_reply>
      }
      break;
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__vector_24+0x260>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	92 de       	rcall	.-732    	; 0x612 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     8ee:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
      break;
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__vector_24+0x260>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     8f4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_error>
      twi_stop();
     8f8:	a5 de       	rcall	.-694    	; 0x644 <twi_stop>
      break;
     8fa:	00 00       	nop
  }
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     924:	a4 e0       	ldi	r26, 0x04	; 4
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 e9       	ldi	r30, 0x98	; 152
     92a:	f4 e0       	ldi	r31, 0x04	; 4
     92c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	7c 83       	std	Y+4, r23	; 0x04
     936:	6b 83       	std	Y+3, r22	; 0x03
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	9a 81       	ldd	r25, Y+2	; 0x02
     93c:	2b 81       	ldd	r18, Y+3	; 0x03
     93e:	3c 81       	ldd	r19, Y+4	; 0x04
     940:	fc 01       	movw	r30, r24
     942:	33 83       	std	Z+3, r19	; 0x03
     944:	22 83       	std	Z+2, r18	; 0x02
     946:	24 96       	adiw	r28, 0x04	; 4
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000094e <_ZN5PrintC1Ev>:
     94e:	a2 e0       	ldi	r26, 0x02	; 2
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	2f ee       	ldi	r18, 0xEF	; 239
     964:	31 e0       	ldi	r19, 0x01	; 1
     966:	fc 01       	movw	r30, r24
     968:	31 83       	std	Z+1, r19	; 0x01
     96a:	20 83       	st	Z, r18
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	fc 01       	movw	r30, r24
     972:	13 82       	std	Z+3, r1	; 0x03
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	22 96       	adiw	r28, 0x02	; 2
     978:	e2 e0       	ldi	r30, 0x02	; 2
     97a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000097e <_ZN6StreamC1Ev>:
     97e:	a2 e0       	ldi	r26, 0x02	; 2
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e5 ec       	ldi	r30, 0xC5	; 197
     984:	f4 e0       	ldi	r31, 0x04	; 4
     986:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	dd df       	rcall	.-70     	; 0x94e <_ZN5PrintC1Ev>
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	2a e6       	ldi	r18, 0x6A	; 106
     99a:	31 e0       	ldi	r19, 0x01	; 1
     99c:	fc 01       	movw	r30, r24
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	20 83       	st	Z, r18
     9a2:	29 81       	ldd	r18, Y+1	; 0x01
     9a4:	3a 81       	ldd	r19, Y+2	; 0x02
     9a6:	88 ee       	ldi	r24, 0xE8	; 232
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	f9 01       	movw	r30, r18
     9b0:	84 83       	std	Z+4, r24	; 0x04
     9b2:	95 83       	std	Z+5, r25	; 0x05
     9b4:	a6 83       	std	Z+6, r26	; 0x06
     9b6:	b7 83       	std	Z+7, r27	; 0x07
     9b8:	22 96       	adiw	r28, 0x02	; 2
     9ba:	e2 e0       	ldi	r30, 0x02	; 2
     9bc:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000009c0 <_ZN7TwoWireC1Ev>:
     9c0:	a2 e0       	ldi	r26, 0x02	; 2
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e6 ee       	ldi	r30, 0xE6	; 230
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	d4 df       	rcall	.-88     	; 0x97e <_ZN6StreamC1Ev>
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	2a e5       	ldi	r18, 0x5A	; 90
     9dc:	31 e0       	ldi	r19, 0x01	; 1
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	22 96       	adiw	r28, 0x02	; 2
     9e6:	e2 e0       	ldi	r30, 0x02	; 2
     9e8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000009ec <_ZN7TwoWire5beginEv>:
     9ec:	a2 e0       	ldi	r26, 0x02	; 2
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	ec ef       	ldi	r30, 0xFC	; 252
     9f2:	f4 e0       	ldi	r31, 0x04	; 4
     9f4:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     a00:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
     a04:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
     a08:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire14txBufferLengthE>
     a0c:	64 dd       	rcall	.-1336   	; 0x4d6 <twi_init>
     a0e:	22 96       	adiw	r28, 0x02	; 2
     a10:	e2 e0       	ldi	r30, 0x02	; 2
     a12:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000a16 <_ZN7TwoWire5beginEh>:
     a16:	a3 e0       	ldi	r26, 0x03	; 3
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	89 83       	std	Y+1, r24	; 0x01
     a26:	6b 83       	std	Y+3, r22	; 0x03
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	89 dd       	rcall	.-1262   	; 0x53e <twi_setAddress>
     a2c:	80 e5       	ldi	r24, 0x50	; 80
     a2e:	96 e0       	ldi	r25, 0x06	; 6
     a30:	de dd       	rcall	.-1092   	; 0x5ee <twi_attachSlaveTxEvent>
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	96 e0       	ldi	r25, 0x06	; 6
     a36:	c9 dd       	rcall	.-1134   	; 0x5ca <twi_attachSlaveRxEvent>
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	d7 df       	rcall	.-82     	; 0x9ec <_ZN7TwoWire5beginEv>
     a3e:	23 96       	adiw	r28, 0x03	; 3
     a40:	e2 e0       	ldi	r30, 0x02	; 2
     a42:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000a46 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     a46:	a3 e0       	ldi	r26, 0x03	; 3
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     a58:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZN7TwoWire12transmittingE>
     a5c:	88 23       	and	r24, r24
     a5e:	f9 f0       	breq	.+62     	; 0xa9e <_ZN7TwoWire5writeEh+0x58>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     a60:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <_ZN7TwoWire14txBufferLengthE>
     a64:	80 32       	cpi	r24, 0x20	; 32
     a66:	40 f0       	brcs	.+16     	; 0xa78 <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	9a 81       	ldd	r25, Y+2	; 0x02
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	59 df       	rcall	.-334    	; 0x924 <_ZN5Print13setWriteErrorEi>
      return 0;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	19 c0       	rjmp	.+50     	; 0xaaa <_ZN7TwoWire5writeEh+0x64>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     a78:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2b 81       	ldd	r18, Y+3	; 0x03
     a82:	8c 57       	subi	r24, 0x7C	; 124
     a84:	9d 4f       	sbci	r25, 0xFD	; 253
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
    ++txBufferIndex;
     a8a:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     a94:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
     a98:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_ZN7TwoWire14txBufferLengthE>
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <_ZN7TwoWire5writeEh+0x60>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     a9e:	ce 01       	movw	r24, r28
     aa0:	03 96       	adiw	r24, 0x03	; 3
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	5d dd       	rcall	.-1350   	; 0x560 <twi_transmit>
  }
  return 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
}
     aaa:	23 96       	adiw	r28, 0x03	; 3
     aac:	e2 e0       	ldi	r30, 0x02	; 2
     aae:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000ab2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     ab2:	a8 e0       	ldi	r26, 0x08	; 8
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	ef e5       	ldi	r30, 0x5F	; 95
     ab8:	f5 e0       	ldi	r31, 0x05	; 5
     aba:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	8b 83       	std	Y+3, r24	; 0x03
     ac2:	7e 83       	std	Y+6, r23	; 0x06
     ac4:	6d 83       	std	Y+5, r22	; 0x05
     ac6:	58 87       	std	Y+8, r21	; 0x08
     ac8:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     aca:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZN7TwoWire12transmittingE>
     ace:	88 23       	and	r24, r24
     ad0:	29 f1       	breq	.+74     	; 0xb1c <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     ad2:	1a 82       	std	Y+2, r1	; 0x02
     ad4:	19 82       	std	Y+1, r1	; 0x01
     ad6:	1a c0       	rjmp	.+52     	; 0xb0c <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	fc 01       	movw	r30, r24
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 81       	ld	r18, Z
     ae6:	31 81       	ldd	r19, Z+1	; 0x01
     ae8:	4d 81       	ldd	r20, Y+5	; 0x05
     aea:	5e 81       	ldd	r21, Y+6	; 0x06
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	84 0f       	add	r24, r20
     af2:	95 1f       	adc	r25, r21
     af4:	fc 01       	movw	r30, r24
     af6:	40 81       	ld	r20, Z
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	64 2f       	mov	r22, r20
     afe:	f9 01       	movw	r30, r18
     b00:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	29 81       	ldd	r18, Y+1	; 0x01
     b0e:	3a 81       	ldd	r19, Y+2	; 0x02
     b10:	8f 81       	ldd	r24, Y+7	; 0x07
     b12:	98 85       	ldd	r25, Y+8	; 0x08
     b14:	28 17       	cp	r18, r24
     b16:	39 07       	cpc	r19, r25
     b18:	f8 f2       	brcs	.-66     	; 0xad8 <_ZN7TwoWire5writeEPKhj+0x26>
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     b1c:	2f 81       	ldd	r18, Y+7	; 0x07
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	9e 81       	ldd	r25, Y+6	; 0x06
     b22:	62 2f       	mov	r22, r18
     b24:	1d dd       	rcall	.-1478   	; 0x560 <twi_transmit>
  }
  return quantity;
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	98 85       	ldd	r25, Y+8	; 0x08
}
     b2a:	28 96       	adiw	r28, 0x08	; 8
     b2c:	e2 e0       	ldi	r30, 0x02	; 2
     b2e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000b32 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     b32:	a2 e0       	ldi	r26, 0x02	; 2
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     b42:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a9 01       	movw	r20, r18
     b54:	48 1b       	sub	r20, r24
     b56:	59 0b       	sbc	r21, r25
     b58:	ca 01       	movw	r24, r20
}
     b5a:	22 96       	adiw	r28, 0x02	; 2
     b5c:	e2 e0       	ldi	r30, 0x02	; 2
     b5e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000b62 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     b62:	a4 e0       	ldi	r26, 0x04	; 4
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e7 eb       	ldi	r30, 0xB7	; 183
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	9f ef       	ldi	r25, 0xFF	; 255
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     b7a:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     b7e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
     b82:	98 17       	cp	r25, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     b86:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	8e 59       	subi	r24, 0x9E	; 158
     b90:	9d 4f       	sbci	r25, 0xFD	; 253
     b92:	fc 01       	movw	r30, r24
     b94:	80 81       	ld	r24, Z
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     b9e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bac:	24 96       	adiw	r28, 0x04	; 4
     bae:	e2 e0       	ldi	r30, 0x02	; 2
     bb0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000bb4 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     bb4:	a4 e0       	ldi	r26, 0x04	; 4
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 ee       	ldi	r30, 0xE0	; 224
     bba:	f5 e0       	ldi	r31, 0x05	; 5
     bbc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	9a 83       	std	Y+2, r25	; 0x02
     bca:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     bcc:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     bd0:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
     bd4:	98 17       	cp	r25, r24
     bd6:	60 f4       	brcc	.+24     	; 0xbf0 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     bd8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	8e 59       	subi	r24, 0x9E	; 158
     be2:	9d 4f       	sbci	r25, 0xFD	; 253
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bf4:	24 96       	adiw	r28, 0x04	; 4
     bf6:	e2 e0       	ldi	r30, 0x02	; 2
     bf8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000bfc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     bfc:	a2 e0       	ldi	r26, 0x02	; 2
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e0       	ldi	r30, 0x04	; 4
     c02:	f6 e0       	ldi	r31, 0x06	; 6
     c04:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     c0c:	22 96       	adiw	r28, 0x02	; 2
     c0e:	e2 e0       	ldi	r30, 0x02	; 2
     c10:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000c14 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     c14:	a5 e0       	ldi	r26, 0x05	; 5
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e1       	ldi	r30, 0x10	; 16
     c1a:	f6 e0       	ldi	r31, 0x06	; 6
     c1c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     c20:	9b 83       	std	Y+3, r25	; 0x03
     c22:	8a 83       	std	Y+2, r24	; 0x02
     c24:	7d 83       	std	Y+5, r23	; 0x05
     c26:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     c28:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZN7TwoWire14user_onReceiveE>
     c2c:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_ZN7TwoWire14user_onReceiveE+0x1>
     c30:	89 2b       	or	r24, r25
     c32:	09 f4       	brne	.+2      	; 0xc36 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     c34:	31 c0       	rjmp	.+98     	; 0xc98 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     c36:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
     c3a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
     c3e:	98 17       	cp	r25, r24
     c40:	08 f4       	brcc	.+2      	; 0xc44 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     c44:	19 82       	std	Y+1, r1	; 0x01
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	22 2f       	mov	r18, r18
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4a 81       	ldd	r20, Y+2	; 0x02
     c56:	5b 81       	ldd	r21, Y+3	; 0x03
     c58:	24 0f       	add	r18, r20
     c5a:	35 1f       	adc	r19, r21
     c5c:	f9 01       	movw	r30, r18
     c5e:	20 81       	ld	r18, Z
     c60:	8e 59       	subi	r24, 0x9E	; 158
     c62:	9d 4f       	sbci	r25, 0xFD	; 253
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	8f 5f       	subi	r24, 0xFF	; 255
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	9d 81       	ldd	r25, Y+5	; 0x05
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	2c f3       	brlt	.-54     	; 0xc48 <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     c7e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     c88:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <_ZN7TwoWire14user_onReceiveE>
     c8c:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <_ZN7TwoWire14user_onReceiveE+0x1>
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	f9 01       	movw	r30, r18
     c96:	09 95       	icall
}
     c98:	25 96       	adiw	r28, 0x05	; 5
     c9a:	e2 e0       	ldi	r30, 0x02	; 2
     c9c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000ca0 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e6 e5       	ldi	r30, 0x56	; 86
     ca6:	f6 e0       	ldi	r31, 0x06	; 6
     ca8:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     cac:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <_ZN7TwoWire14user_onRequestE>
     cb0:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <_ZN7TwoWire14user_onRequestE+0x1>
     cb4:	89 2b       	or	r24, r25
     cb6:	09 f4       	brne	.+2      	; 0xcba <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     cba:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     cbe:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     cc2:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <_ZN7TwoWire14user_onRequestE>
     cc6:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <_ZN7TwoWire14user_onRequestE+0x1>
     cca:	fc 01       	movw	r30, r24
     ccc:	09 95       	icall
}
     cce:	e2 e0       	ldi	r30, 0x02	; 2
     cd0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000cd4 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     cd4:	a4 e0       	ldi	r26, 0x04	; 4
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e0 e7       	ldi	r30, 0x70	; 112
     cda:	f6 e0       	ldi	r31, 0x06	; 6
     cdc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	7c 83       	std	Y+4, r23	; 0x04
     ce6:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <_ZN7TwoWire14user_onReceiveE+0x1>
     cf0:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <_ZN7TwoWire14user_onReceiveE>
}
     cf4:	24 96       	adiw	r28, 0x04	; 4
     cf6:	e2 e0       	ldi	r30, 0x02	; 2
     cf8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000cfc <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     cfc:	a4 e0       	ldi	r26, 0x04	; 4
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e4 e8       	ldi	r30, 0x84	; 132
     d02:	f6 e0       	ldi	r31, 0x06	; 6
     d04:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	7c 83       	std	Y+4, r23	; 0x04
     d0e:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <_ZN7TwoWire14user_onRequestE+0x1>
     d18:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <_ZN7TwoWire14user_onRequestE>
}
     d1c:	24 96       	adiw	r28, 0x04	; 4
     d1e:	e2 e0       	ldi	r30, 0x02	; 2
     d20:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000d24 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     d24:	a4 e0       	ldi	r26, 0x04	; 4
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e9       	ldi	r30, 0x98	; 152
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	7c 83       	std	Y+4, r23	; 0x04
     d36:	6b 83       	std	Y+3, r22	; 0x03
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	39 f4       	brne	.+14     	; 0xd4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	19 f4       	brne	.+6      	; 0xd4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d48:	8b ea       	ldi	r24, 0xAB	; 171
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	39 de       	rcall	.-910    	; 0x9c0 <_ZN7TwoWireC1Ev>
     d4e:	24 96       	adiw	r28, 0x04	; 4
     d50:	e2 e0       	ldi	r30, 0x02	; 2
     d52:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000d56 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 eb       	ldi	r30, 0xB1	; 177
     d5c:	f6 e0       	ldi	r31, 0x06	; 6
     d5e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     d62:	6f ef       	ldi	r22, 0xFF	; 255
     d64:	7f ef       	ldi	r23, 0xFF	; 255
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	dc df       	rcall	.-72     	; 0xd24 <_Z41__static_initialization_and_destruction_0ii>
     d6c:	e2 e0       	ldi	r30, 0x02	; 2
     d6e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000d72 <_Z10DebugPulsehh>:
    setRxIntMsk(false);
    active_object = NULL;
    return true;
  }
  return false;
}
     d72:	a2 e0       	ldi	r26, 0x02	; 2
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ef eb       	ldi	r30, 0xBF	; 191
     d78:	f6 e0       	ldi	r31, 0x06	; 6
     d7a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6a 83       	std	Y+2, r22	; 0x02
     d82:	22 96       	adiw	r28, 0x02	; 2
     d84:	e2 e0       	ldi	r30, 0x02	; 2
     d86:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000d8a <_ZN14SoftwareSerial10tunedDelayEj>:
     d8a:	a4 e0       	ldi	r26, 0x04	; 4
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb ec       	ldi	r30, 0xCB	; 203
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	24 96       	adiw	r28, 0x04	; 4
     db0:	e2 e0       	ldi	r30, 0x02	; 2
     db2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000db6 <_ZN14SoftwareSerial11rx_pin_readEv>:
    ::);
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
     db6:	a2 e0       	ldi	r26, 0x02	; 2
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e1 ee       	ldi	r30, 0xE1	; 225
     dbc:	f6 e0       	ldi	r31, 0x06	; 6
     dbe:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	fc 01       	movw	r30, r24
     dcc:	86 85       	ldd	r24, Z+14	; 0x0e
     dce:	97 85       	ldd	r25, Z+15	; 0x0f
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 81       	ld	r18, Z
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	85 85       	ldd	r24, Z+13	; 0x0d
     ddc:	82 23       	and	r24, r18
}
     dde:	22 96       	adiw	r28, 0x02	; 2
     de0:	e2 e0       	ldi	r30, 0x02	; 2
     de2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00000de6 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	2b 97       	sbiw	r28, 0x0b	; 11
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     e18:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <_ZN14SoftwareSerial13active_objectE>
     e1c:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <_ZN14SoftwareSerial13active_objectE+0x1>
     e20:	89 2b       	or	r24, r25
     e22:	09 f4       	brne	.+2      	; 0xe26 <__vector_3+0x40>
     e24:	f4 c0       	rjmp	.+488    	; 0x100e <__vector_3+0x228>
  {
    active_object->recv();
     e26:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <_ZN14SoftwareSerial13active_objectE>
     e2a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <_ZN14SoftwareSerial13active_objectE+0x1>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     e32:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	fc 01       	movw	r30, r24
     e3a:	86 8d       	ldd	r24, Z+30	; 0x1e
     e3c:	82 70       	andi	r24, 0x02	; 2
     e3e:	88 23       	and	r24, r24
     e40:	49 f0       	breq	.+18     	; 0xe54 <__vector_3+0x6e>
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	b7 df       	rcall	.-146    	; 0xdb6 <_ZN14SoftwareSerial11rx_pin_readEv>
     e48:	98 2f       	mov	r25, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	99 23       	and	r25, r25
     e4e:	51 f4       	brne	.+20     	; 0xe64 <__vector_3+0x7e>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <__vector_3+0x7e>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	ae df       	rcall	.-164    	; 0xdb6 <_ZN14SoftwareSerial11rx_pin_readEv>
     e5a:	98 2f       	mov	r25, r24
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	99 23       	and	r25, r25
     e60:	09 f0       	breq	.+2      	; 0xe64 <__vector_3+0x7e>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_3+0x84>
     e68:	d2 c0       	rjmp	.+420    	; 0x100e <__vector_3+0x228>
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	9d 83       	std	Y+5, r25	; 0x05
     e70:	8c 83       	std	Y+4, r24	; 0x04
     e72:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	88 23       	and	r24, r24
     e78:	a1 f0       	breq	.+40     	; 0xea2 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	fc 01       	movw	r30, r24
     e80:	83 89       	ldd	r24, Z+19	; 0x13
     e82:	94 89       	ldd	r25, Z+20	; 0x14
     e84:	2c 81       	ldd	r18, Y+4	; 0x04
     e86:	3d 81       	ldd	r19, Y+5	; 0x05
     e88:	f9 01       	movw	r30, r18
     e8a:	23 89       	ldd	r18, Z+19	; 0x13
     e8c:	34 89       	ldd	r19, Z+20	; 0x14
     e8e:	f9 01       	movw	r30, r18
     e90:	40 81       	ld	r20, Z
     e92:	2c 81       	ldd	r18, Y+4	; 0x04
     e94:	3d 81       	ldd	r19, Y+5	; 0x05
     e96:	f9 01       	movw	r30, r18
     e98:	25 89       	ldd	r18, Z+21	; 0x15
     e9a:	24 2b       	or	r18, r20
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
     ea0:	15 c0       	rjmp	.+42     	; 0xecc <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	fc 01       	movw	r30, r24
     ea8:	83 89       	ldd	r24, Z+19	; 0x13
     eaa:	94 89       	ldd	r25, Z+20	; 0x14
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	f9 01       	movw	r30, r18
     eb2:	23 89       	ldd	r18, Z+19	; 0x13
     eb4:	34 89       	ldd	r19, Z+20	; 0x14
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	42 2f       	mov	r20, r18
     ebc:	2c 81       	ldd	r18, Y+4	; 0x04
     ebe:	3d 81       	ldd	r19, Y+5	; 0x05
     ec0:	f9 01       	movw	r30, r18
     ec2:	25 89       	ldd	r18, Z+21	; 0x15
     ec4:	20 95       	com	r18
     ec6:	24 23       	and	r18, r20
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	fc 01       	movw	r30, r24
     ed2:	86 89       	ldd	r24, Z+22	; 0x16
     ed4:	97 89       	ldd	r25, Z+23	; 0x17
     ed6:	59 df       	rcall	.-334    	; 0xd8a <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	8d e0       	ldi	r24, 0x0D	; 13
     edc:	4a df       	rcall	.-364    	; 0xd72 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     ede:	88 e0       	ldi	r24, 0x08	; 8
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	1f c0       	rjmp	.+62     	; 0xf22 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	fc 01       	movw	r30, r24
     eea:	80 8d       	ldd	r24, Z+24	; 0x18
     eec:	91 8d       	ldd	r25, Z+25	; 0x19
     eee:	4d df       	rcall	.-358    	; 0xd8a <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	95 95       	asr	r25
     ef8:	87 95       	ror	r24
     efa:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	8d e0       	ldi	r24, 0x0D	; 13
     f00:	38 df       	rcall	.-400    	; 0xd72 <_Z10DebugPulsehh>
      if (rx_pin_read())
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	57 df       	rcall	.-338    	; 0xdb6 <_ZN14SoftwareSerial11rx_pin_readEv>
     f08:	98 2f       	mov	r25, r24
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	99 23       	and	r25, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_3+0x12c>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	88 23       	and	r24, r24
     f14:	19 f0       	breq	.+6      	; 0xf1c <__vector_3+0x136>
        d |= 0x80;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	8f 83       	std	Y+7, r24	; 0x07
     f22:	8f 81       	ldd	r24, Y+7	; 0x07
     f24:	88 23       	and	r24, r24
     f26:	f1 f6       	brne	.-68     	; 0xee4 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	86 8d       	ldd	r24, Z+30	; 0x1e
     f30:	82 70       	andi	r24, 0x02	; 2
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <__vector_3+0x156>
      d = ~d;
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	80 95       	com	r24
     f3a:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     f3c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	8f 73       	andi	r24, 0x3F	; 63
     f48:	90 78       	andi	r25, 0x80	; 128
     f4a:	99 23       	and	r25, r25
     f4c:	24 f4       	brge	.+8      	; 0xf56 <__vector_3+0x170>
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	80 6c       	ori	r24, 0xC0	; 192
     f52:	9f 6f       	ori	r25, 0xFF	; 255
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     f58:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <_ZN14SoftwareSerial20_receive_buffer_headE>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	28 85       	ldd	r18, Y+8	; 0x08
     f60:	29 17       	cp	r18, r25
     f62:	09 f4       	brne	.+2      	; 0xf66 <__vector_3+0x180>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	88 23       	and	r24, r24
     f68:	69 f0       	breq	.+26     	; 0xf84 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     f6a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	87 54       	subi	r24, 0x47	; 71
     f74:	9d 4f       	sbci	r25, 0xFD	; 253
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	8b e0       	ldi	r24, 0x0B	; 11
     f88:	f4 de       	rcall	.-536    	; 0xd72 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	fc 01       	movw	r30, r24
     f90:	26 8d       	ldd	r18, Z+30	; 0x1e
     f92:	21 60       	ori	r18, 0x01	; 1
     f94:	fc 01       	movw	r30, r24
     f96:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	fc 01       	movw	r30, r24
     f9e:	82 8d       	ldd	r24, Z+26	; 0x1a
     fa0:	93 8d       	ldd	r25, Z+27	; 0x1b
     fa2:	f3 de       	rcall	.-538    	; 0xd8a <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8b e0       	ldi	r24, 0x0B	; 11
     fa8:	e4 de       	rcall	.-568    	; 0xd72 <_Z10DebugPulsehh>
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	9a 87       	std	Y+10, r25	; 0x0a
     fb0:	89 87       	std	Y+9, r24	; 0x09
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb8:	88 23       	and	r24, r24
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	fc 01       	movw	r30, r24
     fc2:	83 89       	ldd	r24, Z+19	; 0x13
     fc4:	94 89       	ldd	r25, Z+20	; 0x14
     fc6:	29 85       	ldd	r18, Y+9	; 0x09
     fc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fca:	f9 01       	movw	r30, r18
     fcc:	23 89       	ldd	r18, Z+19	; 0x13
     fce:	34 89       	ldd	r19, Z+20	; 0x14
     fd0:	f9 01       	movw	r30, r18
     fd2:	40 81       	ld	r20, Z
     fd4:	29 85       	ldd	r18, Y+9	; 0x09
     fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd8:	f9 01       	movw	r30, r18
     fda:	25 89       	ldd	r18, Z+21	; 0x15
     fdc:	24 2b       	or	r18, r20
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	15 c0       	rjmp	.+42     	; 0x100e <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	fc 01       	movw	r30, r24
     fea:	83 89       	ldd	r24, Z+19	; 0x13
     fec:	94 89       	ldd	r25, Z+20	; 0x14
     fee:	29 85       	ldd	r18, Y+9	; 0x09
     ff0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ff2:	f9 01       	movw	r30, r18
     ff4:	23 89       	ldd	r18, Z+19	; 0x13
     ff6:	34 89       	ldd	r19, Z+20	; 0x14
     ff8:	f9 01       	movw	r30, r18
     ffa:	20 81       	ld	r18, Z
     ffc:	42 2f       	mov	r20, r18
     ffe:	29 85       	ldd	r18, Y+9	; 0x09
    1000:	3a 85       	ldd	r19, Y+10	; 0x0a
    1002:	f9 01       	movw	r30, r18
    1004:	25 89       	ldd	r18, Z+21	; 0x15
    1006:	20 95       	com	r18
    1008:	24 23       	and	r18, r20
    100a:	fc 01       	movw	r30, r24
    100c:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    100e:	2b 96       	adiw	r28, 0x0b	; 11
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1042:	8f 92       	push	r8
    1044:	af 92       	push	r10
    1046:	cf 92       	push	r12
    1048:	ef 92       	push	r14
    104a:	0f 93       	push	r16
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	28 97       	sbiw	r28, 0x08	; 8
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6b 83       	std	Y+3, r22	; 0x03
    1066:	4c 83       	std	Y+4, r20	; 0x04
    1068:	2d 83       	std	Y+5, r18	; 0x05
    106a:	0e 83       	std	Y+6, r16	; 0x06
    106c:	ef 82       	std	Y+7, r14	; 0x07
    106e:	c8 86       	std	Y+8, r12	; 0x08
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	6c dc       	rcall	.-1832   	; 0x94e <_ZN5PrintC1Ev>
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	2a e7       	ldi	r18, 0x7A	; 122
    107c:	31 e0       	ldi	r19, 0x01	; 1
    107e:	fc 01       	movw	r30, r24
    1080:	31 83       	std	Z+1, r19	; 0x01
    1082:	20 83       	st	Z, r18
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	1f 92       	push	r1
    108a:	1f 92       	push	r1
    108c:	1f 92       	push	r1
    108e:	1f 92       	push	r1
    1090:	88 84       	ldd	r8, Y+8	; 0x08
    1092:	af 80       	ldd	r10, Y+7	; 0x07
    1094:	ce 80       	ldd	r12, Y+6	; 0x06
    1096:	ed 80       	ldd	r14, Y+5	; 0x05
    1098:	0c 81       	ldd	r16, Y+4	; 0x04
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	4b 81       	ldd	r20, Y+3	; 0x03
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	12 d0       	rcall	.+36     	; 0x10c6 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	0f 91       	pop	r16
    10bc:	ef 90       	pop	r14
    10be:	cf 90       	pop	r12
    10c0:	af 90       	pop	r10
    10c2:	8f 90       	pop	r8
    10c4:	08 95       	ret

000010c6 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    10c6:	8f 92       	push	r8
    10c8:	af 92       	push	r10
    10ca:	cf 92       	push	r12
    10cc:	ef 92       	push	r14
    10ce:	0f 93       	push	r16
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	2a 97       	sbiw	r28, 0x0a	; 10
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6b 83       	std	Y+3, r22	; 0x03
    10ea:	4c 83       	std	Y+4, r20	; 0x04
    10ec:	2d 83       	std	Y+5, r18	; 0x05
    10ee:	0e 83       	std	Y+6, r16	; 0x06
    10f0:	ef 82       	std	Y+7, r14	; 0x07
    10f2:	c8 86       	std	Y+8, r12	; 0x08
    10f4:	a9 86       	std	Y+9, r10	; 0x09
    10f6:	8a 86       	std	Y+10, r8	; 0x0a
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	fc 01       	movw	r30, r24
    1100:	24 83       	std	Z+4, r18	; 0x04
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	2d 81       	ldd	r18, Y+5	; 0x05
    1108:	fc 01       	movw	r30, r24
    110a:	25 83       	std	Z+5, r18	; 0x05
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	fc 01       	movw	r30, r24
    1114:	26 83       	std	Z+6, r18	; 0x06
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	2f 81       	ldd	r18, Y+7	; 0x07
    111c:	fc 01       	movw	r30, r24
    111e:	27 83       	std	Z+7, r18	; 0x07
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	28 85       	ldd	r18, Y+8	; 0x08
    1126:	fc 01       	movw	r30, r24
    1128:	20 87       	std	Z+8, r18	; 0x08
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	29 85       	ldd	r18, Y+9	; 0x09
    1130:	fc 01       	movw	r30, r24
    1132:	21 87       	std	Z+9, r18	; 0x09
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	2a 85       	ldd	r18, Y+10	; 0x0a
    113a:	fc 01       	movw	r30, r24
    113c:	22 87       	std	Z+10, r18	; 0x0a
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	2c 89       	ldd	r18, Y+20	; 0x14
    1144:	fc 01       	movw	r30, r24
    1146:	23 87       	std	Z+11, r18	; 0x0b
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	2d 89       	ldd	r18, Y+21	; 0x15
    114e:	fc 01       	movw	r30, r24
    1150:	24 87       	std	Z+12, r18	; 0x0c
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	2e 89       	ldd	r18, Y+22	; 0x16
    1158:	fc 01       	movw	r30, r24
    115a:	25 87       	std	Z+13, r18	; 0x0d
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	2f 89       	ldd	r18, Y+23	; 0x17
    1162:	fc 01       	movw	r30, r24
    1164:	26 87       	std	Z+14, r18	; 0x0e
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 23       	and	r24, r24
    116a:	29 f0       	breq	.+10     	; 0x1176 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	fc 01       	movw	r30, r24
    1172:	17 86       	std	Z+15, r1	; 0x0f
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	20 e1       	ldi	r18, 0x10	; 16
    117c:	fc 01       	movw	r30, r24
    117e:	27 87       	std	Z+15, r18	; 0x0f
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	60 e1       	ldi	r22, 0x10	; 16
    118a:	0e d0       	rcall	.+28     	; 0x11a8 <_ZN13LiquidCrystal5beginEhhh>
    118c:	2a 96       	adiw	r28, 0x0a	; 10
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	0f 91       	pop	r16
    119e:	ef 90       	pop	r14
    11a0:	cf 90       	pop	r12
    11a2:	af 90       	pop	r10
    11a4:	8f 90       	pop	r8
    11a6:	08 95       	ret

000011a8 <_ZN13LiquidCrystal5beginEhhh>:
    11a8:	a7 e0       	ldi	r26, 0x07	; 7
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea ed       	ldi	r30, 0xDA	; 218
    11ae:	f8 e0       	ldi	r31, 0x08	; 8
    11b0:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	6d 83       	std	Y+5, r22	; 0x05
    11ba:	4e 83       	std	Y+6, r20	; 0x06
    11bc:	2f 83       	std	Y+7, r18	; 0x07
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	50 f0       	brcs	.+20     	; 0x11d8 <_ZN13LiquidCrystal5beginEhhh+0x30>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	fc 01       	movw	r30, r24
    11ca:	87 85       	ldd	r24, Z+15	; 0x0f
    11cc:	28 2f       	mov	r18, r24
    11ce:	28 60       	ori	r18, 0x08	; 8
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	fc 01       	movw	r30, r24
    11d6:	27 87       	std	Z+15, r18	; 0x0f
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	2e 81       	ldd	r18, Y+6	; 0x06
    11de:	fc 01       	movw	r30, r24
    11e0:	23 8b       	std	Z+19, r18	; 0x13
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	ac 01       	movw	r20, r24
    11ea:	40 5c       	subi	r20, 0xC0	; 192
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	8a 01       	movw	r16, r20
    11fa:	40 e4       	ldi	r20, 0x40	; 64
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	e7 d0       	rcall	.+462    	; 0x13d2 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    1204:	8f 81       	ldd	r24, Y+7	; 0x07
    1206:	88 23       	and	r24, r24
    1208:	69 f0       	breq	.+26     	; 0x1224 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	51 f4       	brne	.+20     	; 0x1224 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	fc 01       	movw	r30, r24
    1216:	87 85       	ldd	r24, Z+15	; 0x0f
    1218:	28 2f       	mov	r18, r24
    121a:	24 60       	ori	r18, 0x04	; 4
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	fc 01       	movw	r30, r24
    1222:	27 87       	std	Z+15, r18	; 0x0f
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	fc 01       	movw	r30, r24
    122a:	84 81       	ldd	r24, Z+4	; 0x04
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	fc 01       	movw	r30, r24
    1238:	85 81       	ldd	r24, Z+5	; 0x05
    123a:	8f 3f       	cpi	r24, 0xFF	; 255
    123c:	39 f0       	breq	.+14     	; 0x124c <_ZN13LiquidCrystal5beginEhhh+0xa4>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	fc 01       	movw	r30, r24
    1244:	85 81       	ldd	r24, Z+5	; 0x05
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	fc 01       	movw	r30, r24
    1252:	86 81       	ldd	r24, Z+6	; 0x06
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    125a:	1a 82       	std	Y+2, r1	; 0x02
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	11 c0       	rjmp	.+34     	; 0x1282 <_ZN13LiquidCrystal5beginEhhh+0xda>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	07 96       	adiw	r24, 0x07	; 7
    126e:	fc 01       	movw	r30, r24
    1270:	80 81       	ld	r24, Z
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	fc 01       	movw	r30, r24
    1288:	87 85       	ldd	r24, Z+15	; 0x0f
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	80 71       	andi	r24, 0x10	; 16
    1290:	99 27       	eor	r25, r25
    1292:	89 2b       	or	r24, r25
    1294:	19 f0       	breq	.+6      	; 0x129c <_ZN13LiquidCrystal5beginEhhh+0xf4>
    1296:	88 e0       	ldi	r24, 0x08	; 8
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <_ZN13LiquidCrystal5beginEhhh+0xf8>
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	29 81       	ldd	r18, Y+1	; 0x01
    12a2:	3a 81       	ldd	r19, Y+2	; 0x02
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	dc f2       	brlt	.-74     	; 0x1260 <_ZN13LiquidCrystal5beginEhhh+0xb8>
    12aa:	80 e5       	ldi	r24, 0x50	; 80
    12ac:	93 ec       	ldi	r25, 0xC3	; 195
    12ae:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	fc 01       	movw	r30, r24
    12b8:	84 81       	ldd	r24, Z+4	; 0x04
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	fc 01       	movw	r30, r24
    12c6:	86 81       	ldd	r24, Z+6	; 0x06
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	fc 01       	movw	r30, r24
    12d4:	85 81       	ldd	r24, Z+5	; 0x05
    12d6:	8f 3f       	cpi	r24, 0xFF	; 255
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <_ZN13LiquidCrystal5beginEhhh+0x140>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	fc 01       	movw	r30, r24
    12e0:	85 81       	ldd	r24, Z+5	; 0x05
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	fc 01       	movw	r30, r24
    12ee:	87 85       	ldd	r24, Z+15	; 0x0f
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	80 71       	andi	r24, 0x10	; 16
    12f6:	99 27       	eor	r25, r25
    12f8:	89 2b       	or	r24, r25
    12fa:	e9 f4       	brne	.+58     	; 0x1336 <_ZN13LiquidCrystal5beginEhhh+0x18e>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	91 d1       	rcall	.+802    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1304:	84 e9       	ldi	r24, 0x94	; 148
    1306:	91 e1       	ldi	r25, 0x11	; 17
    1308:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	89 d1       	rcall	.+786    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1314:	84 e9       	ldi	r24, 0x94	; 148
    1316:	91 e1       	ldi	r25, 0x11	; 17
    1318:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	63 e0       	ldi	r22, 0x03	; 3
    1322:	81 d1       	rcall	.+770    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1324:	86 e9       	ldi	r24, 0x96	; 150
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	79 d1       	rcall	.+754    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1334:	26 c0       	rjmp	.+76     	; 0x1382 <_ZN13LiquidCrystal5beginEhhh+0x1da>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	fc 01       	movw	r30, r24
    133c:	87 85       	ldd	r24, Z+15	; 0x0f
    133e:	28 2f       	mov	r18, r24
    1340:	20 62       	ori	r18, 0x20	; 32
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	62 2f       	mov	r22, r18
    1348:	d6 d0       	rcall	.+428    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    134a:	84 e9       	ldi	r24, 0x94	; 148
    134c:	91 e1       	ldi	r25, 0x11	; 17
    134e:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	fc 01       	movw	r30, r24
    1358:	87 85       	ldd	r24, Z+15	; 0x0f
    135a:	28 2f       	mov	r18, r24
    135c:	20 62       	ori	r18, 0x20	; 32
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	62 2f       	mov	r22, r18
    1364:	c8 d0       	rcall	.+400    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    1366:	86 e9       	ldi	r24, 0x96	; 150
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	fc 01       	movw	r30, r24
    1374:	87 85       	ldd	r24, Z+15	; 0x0f
    1376:	28 2f       	mov	r18, r24
    1378:	20 62       	ori	r18, 0x20	; 32
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	62 2f       	mov	r22, r18
    1380:	ba d0       	rcall	.+372    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	fc 01       	movw	r30, r24
    1388:	87 85       	ldd	r24, Z+15	; 0x0f
    138a:	28 2f       	mov	r18, r24
    138c:	20 62       	ori	r18, 0x20	; 32
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	62 2f       	mov	r22, r18
    1394:	b0 d0       	rcall	.+352    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	24 e0       	ldi	r18, 0x04	; 4
    139c:	fc 01       	movw	r30, r24
    139e:	20 8b       	std	Z+16, r18	; 0x10
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	88 d0       	rcall	.+272    	; 0x14b6 <_ZN13LiquidCrystal7displayEv>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	3b d0       	rcall	.+118    	; 0x1422 <_ZN13LiquidCrystal5clearEv>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	22 e0       	ldi	r18, 0x02	; 2
    13b2:	fc 01       	movw	r30, r24
    13b4:	21 8b       	std	Z+17, r18	; 0x11
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	fc 01       	movw	r30, r24
    13bc:	81 89       	ldd	r24, Z+17	; 0x11
    13be:	28 2f       	mov	r18, r24
    13c0:	24 60       	ori	r18, 0x04	; 4
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	62 2f       	mov	r22, r18
    13c8:	96 d0       	rcall	.+300    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    13ca:	27 96       	adiw	r28, 0x07	; 7
    13cc:	e4 e0       	ldi	r30, 0x04	; 4
    13ce:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

000013d2 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    13d2:	aa e0       	ldi	r26, 0x0A	; 10
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	7c 83       	std	Y+4, r23	; 0x04
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	5e 83       	std	Y+6, r21	; 0x06
    13e8:	4d 83       	std	Y+5, r20	; 0x05
    13ea:	38 87       	std	Y+8, r19	; 0x08
    13ec:	2f 83       	std	Y+7, r18	; 0x07
    13ee:	1a 87       	std	Y+10, r17	; 0x0a
    13f0:	09 87       	std	Y+9, r16	; 0x09
    13f2:	2b 81       	ldd	r18, Y+3	; 0x03
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	fc 01       	movw	r30, r24
    13fa:	24 8b       	std	Z+20, r18	; 0x14
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	fc 01       	movw	r30, r24
    1404:	25 8b       	std	Z+21, r18	; 0x15
    1406:	2f 81       	ldd	r18, Y+7	; 0x07
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	fc 01       	movw	r30, r24
    140e:	26 8b       	std	Z+22, r18	; 0x16
    1410:	29 85       	ldd	r18, Y+9	; 0x09
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	fc 01       	movw	r30, r24
    1418:	27 8b       	std	Z+23, r18	; 0x17
    141a:	2a 96       	adiw	r28, 0x0a	; 10
    141c:	e4 e0       	ldi	r30, 0x04	; 4
    141e:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00001422 <_ZN13LiquidCrystal5clearEv>:
    1422:	a2 e0       	ldi	r26, 0x02	; 2
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e7 e1       	ldi	r30, 0x17	; 23
    1428:	fa e0       	ldi	r31, 0x0A	; 10
    142a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	5e d0       	rcall	.+188    	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    143a:	80 ed       	ldi	r24, 0xD0	; 208
    143c:	97 e0       	ldi	r25, 0x07	; 7
    143e:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
    1442:	22 96       	adiw	r28, 0x02	; 2
    1444:	e2 e0       	ldi	r30, 0x02	; 2
    1446:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000144a <_ZN13LiquidCrystal9setCursorEhh>:
    144a:	a6 e0       	ldi	r26, 0x06	; 6
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e2       	ldi	r30, 0x2B	; 43
    1450:	fa e0       	ldi	r31, 0x0A	; 10
    1452:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    145a:	6d 83       	std	Y+5, r22	; 0x05
    145c:	4e 83       	std	Y+6, r20	; 0x06
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	10 f0       	brcs	.+4      	; 0x1470 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	8e 83       	std	Y+6, r24	; 0x06
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	fc 01       	movw	r30, r24
    1476:	93 89       	ldd	r25, Z+19	; 0x13
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	89 17       	cp	r24, r25
    147c:	30 f0       	brcs	.+12     	; 0x148a <_ZN13LiquidCrystal9setCursorEhh+0x40>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	fc 01       	movw	r30, r24
    1484:	83 89       	ldd	r24, Z+19	; 0x13
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	8e 83       	std	Y+6, r24	; 0x06
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	2b 81       	ldd	r18, Y+3	; 0x03
    1492:	3c 81       	ldd	r19, Y+4	; 0x04
    1494:	82 0f       	add	r24, r18
    1496:	93 1f       	adc	r25, r19
    1498:	44 96       	adiw	r24, 0x14	; 20
    149a:	fc 01       	movw	r30, r24
    149c:	90 81       	ld	r25, Z
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	89 0f       	add	r24, r25
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	28 2f       	mov	r18, r24
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	62 2f       	mov	r22, r18
    14ac:	24 d0       	rcall	.+72     	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    14ae:	26 96       	adiw	r28, 0x06	; 6
    14b0:	e2 e0       	ldi	r30, 0x02	; 2
    14b2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000014b6 <_ZN13LiquidCrystal7displayEv>:
    14b6:	a2 e0       	ldi	r26, 0x02	; 2
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 89       	ldd	r24, Z+16	; 0x10
    14ce:	28 2f       	mov	r18, r24
    14d0:	24 60       	ori	r18, 0x04	; 4
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 8b       	std	Z+16, r18	; 0x10
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	fc 01       	movw	r30, r24
    14e0:	80 89       	ldd	r24, Z+16	; 0x10
    14e2:	28 2f       	mov	r18, r24
    14e4:	28 60       	ori	r18, 0x08	; 8
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	62 2f       	mov	r22, r18
    14ec:	04 d0       	rcall	.+8      	; 0x14f6 <_ZN13LiquidCrystal7commandEh>
    14ee:	22 96       	adiw	r28, 0x02	; 2
    14f0:	e2 e0       	ldi	r30, 0x02	; 2
    14f2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000014f6 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    14f6:	a3 e0       	ldi	r26, 0x03	; 3
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	6b 81       	ldd	r22, Y+3	; 0x03
    1510:	18 d0       	rcall	.+48     	; 0x1542 <_ZN13LiquidCrystal4sendEhh>
}
    1512:	23 96       	adiw	r28, 0x03	; 3
    1514:	e2 e0       	ldi	r30, 0x02	; 2
    1516:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000151a <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    151a:	a3 e0       	ldi	r26, 0x03	; 3
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e3 e9       	ldi	r30, 0x93	; 147
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	6b 81       	ldd	r22, Y+3	; 0x03
    1534:	06 d0       	rcall	.+12     	; 0x1542 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
}
    153a:	23 96       	adiw	r28, 0x03	; 3
    153c:	e2 e0       	ldi	r30, 0x02	; 2
    153e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001542 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1542:	a4 e0       	ldi	r26, 0x04	; 4
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	6b 83       	std	Y+3, r22	; 0x03
    1554:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	84 81       	ldd	r24, Z+4	; 0x04
    155e:	6c 81       	ldd	r22, Y+4	; 0x04
    1560:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	fc 01       	movw	r30, r24
    156a:	85 81       	ldd	r24, Z+5	; 0x05
    156c:	8f 3f       	cpi	r24, 0xFF	; 255
    156e:	39 f0       	breq	.+14     	; 0x157e <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	85 81       	ldd	r24, Z+5	; 0x05
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	fc 01       	movw	r30, r24
    1584:	87 85       	ldd	r24, Z+15	; 0x0f
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	80 71       	andi	r24, 0x10	; 16
    158c:	99 27       	eor	r25, r25
    158e:	89 2b       	or	r24, r25
    1590:	29 f0       	breq	.+10     	; 0x159c <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	6b 81       	ldd	r22, Y+3	; 0x03
    1598:	79 d0       	rcall	.+242    	; 0x168c <_ZN13LiquidCrystal10write8bitsEh>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	95 95       	asr	r25
    15a4:	87 95       	ror	r24
    15a6:	95 95       	asr	r25
    15a8:	87 95       	ror	r24
    15aa:	95 95       	asr	r25
    15ac:	87 95       	ror	r24
    15ae:	95 95       	asr	r25
    15b0:	87 95       	ror	r24
    15b2:	28 2f       	mov	r18, r24
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	62 2f       	mov	r22, r18
    15ba:	35 d0       	rcall	.+106    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	6b 81       	ldd	r22, Y+3	; 0x03
    15c2:	31 d0       	rcall	.+98     	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    15c4:	24 96       	adiw	r28, 0x04	; 4
    15c6:	e2 e0       	ldi	r30, 0x02	; 2
    15c8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000015cc <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    15cc:	a2 e0       	ldi	r26, 0x02	; 2
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ec ee       	ldi	r30, 0xEC	; 236
    15d2:	fa e0       	ldi	r31, 0x0A	; 10
    15d4:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	fc 01       	movw	r30, r24
    15e2:	86 81       	ldd	r24, Z+6	; 0x06
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
  delayMicroseconds(1);    
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	fc 01       	movw	r30, r24
    15f8:	86 81       	ldd	r24, Z+6	; 0x06
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	fc 01       	movw	r30, r24
    160e:	86 81       	ldd	r24, Z+6	; 0x06
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1616:	84 e6       	ldi	r24, 0x64	; 100
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 96 2b 	call	0x572c	; 0x572c <delayMicroseconds>
}
    161e:	22 96       	adiw	r28, 0x02	; 2
    1620:	e2 e0       	ldi	r30, 0x02	; 2
    1622:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001626 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1626:	a5 e0       	ldi	r26, 0x05	; 5
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e9 e1       	ldi	r30, 0x19	; 25
    162c:	fb e0       	ldi	r31, 0x0B	; 11
    162e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
    1636:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    1638:	1a 82       	std	Y+2, r1	; 0x02
    163a:	19 82       	std	Y+1, r1	; 0x01
    163c:	1c c0       	rjmp	.+56     	; 0x1676 <_ZN13LiquidCrystal10write4bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	09 80       	ldd	r0, Y+1	; 0x01
    1646:	02 c0       	rjmp	.+4      	; 0x164c <_ZN13LiquidCrystal10write4bitsEh+0x26>
    1648:	95 95       	asr	r25
    164a:	87 95       	ror	r24
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1650:	48 2f       	mov	r20, r24
    1652:	41 70       	andi	r20, 0x01	; 1
    1654:	2b 81       	ldd	r18, Y+3	; 0x03
    1656:	3c 81       	ldd	r19, Y+4	; 0x04
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	82 0f       	add	r24, r18
    165e:	93 1f       	adc	r25, r19
    1660:	07 96       	adiw	r24, 0x07	; 7
    1662:	fc 01       	movw	r30, r24
    1664:	80 81       	ld	r24, Z
    1666:	64 2f       	mov	r22, r20
    1668:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	04 97       	sbiw	r24, 0x04	; 4
    167c:	04 f3       	brlt	.-64     	; 0x163e <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	a4 df       	rcall	.-184    	; 0x15cc <_ZN13LiquidCrystal11pulseEnableEv>
}
    1684:	25 96       	adiw	r28, 0x05	; 5
    1686:	e2 e0       	ldi	r30, 0x02	; 2
    1688:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000168c <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    168c:	a5 e0       	ldi	r26, 0x05	; 5
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ec e4       	ldi	r30, 0x4C	; 76
    1692:	fb e0       	ldi	r31, 0x0B	; 11
    1694:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	19 82       	std	Y+1, r1	; 0x01
    16a2:	1c c0       	rjmp	.+56     	; 0x16dc <_ZN13LiquidCrystal10write8bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	09 80       	ldd	r0, Y+1	; 0x01
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <_ZN13LiquidCrystal10write8bitsEh+0x26>
    16ae:	95 95       	asr	r25
    16b0:	87 95       	ror	r24
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <_ZN13LiquidCrystal10write8bitsEh+0x22>
    16b6:	48 2f       	mov	r20, r24
    16b8:	41 70       	andi	r20, 0x01	; 1
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	07 96       	adiw	r24, 0x07	; 7
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	64 2f       	mov	r22, r20
    16ce:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	08 97       	sbiw	r24, 0x08	; 8
    16e2:	04 f3       	brlt	.-64     	; 0x16a4 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	71 df       	rcall	.-286    	; 0x15cc <_ZN13LiquidCrystal11pulseEnableEv>
}
    16ea:	25 96       	adiw	r28, 0x05	; 5
    16ec:	e2 e0       	ldi	r30, 0x02	; 2
    16ee:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000016f2 <_ZNK4erom6Access4readEj>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    16f2:	a4 e0       	ldi	r26, 0x04	; 4
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ef e7       	ldi	r30, 0x7F	; 127
    16f8:	fb e0       	ldi	r31, 0x0B	; 11
    16fa:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	7c 83       	std	Y+4, r23	; 0x04
    1704:	6b 83       	std	Y+3, r22	; 0x03
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	b9 01       	movw	r22, r18
    1710:	04 d0       	rcall	.+8      	; 0x171a <_ZNK4erom6Access9read_byteEj>
    1712:	24 96       	adiw	r28, 0x04	; 4
    1714:	e2 e0       	ldi	r30, 0x02	; 2
    1716:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000171a <_ZNK4erom6Access9read_byteEj>:
    171a:	a4 e0       	ldi	r26, 0x04	; 4
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e3 e9       	ldi	r30, 0x93	; 147
    1720:	fb e0       	ldi	r31, 0x0B	; 11
    1722:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	7c 83       	std	Y+4, r23	; 0x04
    172c:	6b 83       	std	Y+3, r22	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	9c 01       	movw	r18, r24
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	b9 01       	movw	r22, r18
    173e:	50 d0       	rcall	.+160    	; 0x17e0 <_ZNK4erom6Access8in_rangeEj>
    1740:	88 23       	and	r24, r24
    1742:	59 f0       	breq	.+22     	; 0x175a <_ZNK4erom6Access9read_byteEj+0x40>
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	6b d0       	rcall	.+214    	; 0x1820 <_ZNK4erom6Access4baseEv>
    174a:	9c 01       	movw	r18, r24
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <eeprom_read_byte>
    1758:	01 c0       	rjmp	.+2      	; 0x175c <_ZNK4erom6Access9read_byteEj+0x42>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	24 96       	adiw	r28, 0x04	; 4
    175e:	e2 e0       	ldi	r30, 0x02	; 2
    1760:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001764 <_ZNK4erom6Access5writeEjh>:
    1764:	a5 e0       	ldi	r26, 0x05	; 5
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e8 eb       	ldi	r30, 0xB8	; 184
    176a:	fb e0       	ldi	r31, 0x0B	; 11
    176c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	7c 83       	std	Y+4, r23	; 0x04
    1776:	6b 83       	std	Y+3, r22	; 0x03
    1778:	4d 83       	std	Y+5, r20	; 0x05
    177a:	2b 81       	ldd	r18, Y+3	; 0x03
    177c:	3c 81       	ldd	r19, Y+4	; 0x04
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	4d 81       	ldd	r20, Y+5	; 0x05
    1784:	b9 01       	movw	r22, r18
    1786:	04 d0       	rcall	.+8      	; 0x1790 <_ZNK4erom6Access10write_byteEjh>
    1788:	25 96       	adiw	r28, 0x05	; 5
    178a:	e2 e0       	ldi	r30, 0x02	; 2
    178c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001790 <_ZNK4erom6Access10write_byteEjh>:
    1790:	a5 e0       	ldi	r26, 0x05	; 5
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee ec       	ldi	r30, 0xCE	; 206
    1796:	fb e0       	ldi	r31, 0x0B	; 11
    1798:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	7c 83       	std	Y+4, r23	; 0x04
    17a2:	6b 83       	std	Y+3, r22	; 0x03
    17a4:	4d 83       	std	Y+5, r20	; 0x05
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	9c 01       	movw	r18, r24
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	b9 01       	movw	r22, r18
    17b6:	14 d0       	rcall	.+40     	; 0x17e0 <_ZNK4erom6Access8in_rangeEj>
    17b8:	88 23       	and	r24, r24
    17ba:	69 f0       	breq	.+26     	; 0x17d6 <_ZNK4erom6Access10write_byteEjh+0x46>
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	2f d0       	rcall	.+94     	; 0x1820 <_ZNK4erom6Access4baseEv>
    17c2:	9c 01       	movw	r18, r24
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	6d 81       	ldd	r22, Y+5	; 0x05
    17ce:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <eeprom_write_byte>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <_ZNK4erom6Access10write_byteEjh+0x48>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	25 96       	adiw	r28, 0x05	; 5
    17da:	e2 e0       	ldi	r30, 0x02	; 2
    17dc:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000017e0 <_ZNK4erom6Access8in_rangeEj>:
    17e0:	a4 e0       	ldi	r26, 0x04	; 4
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e6 ef       	ldi	r30, 0xF6	; 246
    17e6:	fb e0       	ldi	r31, 0x0B	; 11
    17e8:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	7c 83       	std	Y+4, r23	; 0x04
    17f2:	6b 83       	std	Y+3, r22	; 0x03
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	13 d0       	rcall	.+38     	; 0x1820 <_ZNK4erom6Access4baseEv>
    17fa:	9c 01       	movw	r18, r24
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	89 01       	movw	r16, r18
    1802:	08 0f       	add	r16, r24
    1804:	19 1f       	adc	r17, r25
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	1b d0       	rcall	.+54     	; 0x1842 <_ZNK4erom6Access11memory_sizeEv>
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	08 17       	cp	r16, r24
    1810:	19 07       	cpc	r17, r25
    1812:	08 f0       	brcs	.+2      	; 0x1816 <_ZNK4erom6Access8in_rangeEj+0x36>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	82 2f       	mov	r24, r18
    1818:	24 96       	adiw	r28, 0x04	; 4
    181a:	e4 e0       	ldi	r30, 0x04	; 4
    181c:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00001820 <_ZNK4erom6Access4baseEv>:
    1820:	a2 e0       	ldi	r26, 0x02	; 2
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e6 e1       	ldi	r30, 0x16	; 22
    1826:	fc e0       	ldi	r31, 0x0C	; 12
    1828:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	22 96       	adiw	r28, 0x02	; 2
    183c:	e2 e0       	ldi	r30, 0x02	; 2
    183e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001842 <_ZNK4erom6Access11memory_sizeEv>:
    1842:	a2 e0       	ldi	r26, 0x02	; 2
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e7 e2       	ldi	r30, 0x27	; 39
    1848:	fc e0       	ldi	r31, 0x0C	; 12
    184a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	fc 01       	movw	r30, r24
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	22 96       	adiw	r28, 0x02	; 2
    185e:	e2 e0       	ldi	r30, 0x02	; 2
    1860:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001864 <_ZN4erom6Access8instanceEv>:
    1864:	a0 e0       	ldi	r26, 0x00	; 0
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e8 e3       	ldi	r30, 0x38	; 56
    186a:	fc e0       	ldi	r31, 0x0C	; 12
    186c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1870:	8b ef       	ldi	r24, 0xFB	; 251
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	88 23       	and	r24, r24
    187a:	51 f4       	brne	.+20     	; 0x1890 <_ZN4erom6Access8instanceEv+0x2c>
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	7b d0       	rcall	.+246    	; 0x197c <_ZN4erom6AccessC1Ej>
    1886:	8b ef       	ldi	r24, 0xFB	; 251
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    1890:	85 e0       	ldi	r24, 0x05	; 5
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	e2 e0       	ldi	r30, 0x02	; 2
    1896:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000189a <_ZN4erom7Storage6OnLoadEv>:
    189a:	a2 e0       	ldi	r26, 0x02	; 2
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e3 e5       	ldi	r30, 0x53	; 83
    18a0:	fc e0       	ldi	r31, 0x0C	; 12
    18a2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	22 96       	adiw	r28, 0x02	; 2
    18ac:	e2 e0       	ldi	r30, 0x02	; 2
    18ae:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000018b2 <_ZN4erom7Storage6OnSaveEv>:
    18b2:	a2 e0       	ldi	r26, 0x02	; 2
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ef e5       	ldi	r30, 0x5F	; 95
    18b8:	fc e0       	ldi	r31, 0x0C	; 12
    18ba:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	22 96       	adiw	r28, 0x02	; 2
    18c4:	e2 e0       	ldi	r30, 0x02	; 2
    18c6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000018ca <_ZN4erom7Storage7OnClearEv>:
    18ca:	a2 e0       	ldi	r26, 0x02	; 2
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e6       	ldi	r30, 0x6B	; 107
    18d0:	fc e0       	ldi	r31, 0x0C	; 12
    18d2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	22 96       	adiw	r28, 0x02	; 2
    18dc:	e2 e0       	ldi	r30, 0x02	; 2
    18de:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000018e2 <_ZN4erom7StorageC1Ev>:
    18e2:	a2 e0       	ldi	r26, 0x02	; 2
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e7 e7       	ldi	r30, 0x77	; 119
    18e8:	fc e0       	ldi	r31, 0x0C	; 12
    18ea:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	22 e8       	ldi	r18, 0x82	; 130
    18f8:	31 e0       	ldi	r19, 0x01	; 1
    18fa:	fc 01       	movw	r30, r24
    18fc:	31 83       	std	Z+1, r19	; 0x01
    18fe:	20 83       	st	Z, r18
    1900:	b1 df       	rcall	.-158    	; 0x1864 <_ZN4erom6Access8instanceEv>
    1902:	9c 01       	movw	r18, r24
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	fc 01       	movw	r30, r24
    190a:	33 83       	std	Z+3, r19	; 0x03
    190c:	22 83       	std	Z+2, r18	; 0x02
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	fc 01       	movw	r30, r24
    1914:	15 82       	std	Z+5, r1	; 0x05
    1916:	14 82       	std	Z+4, r1	; 0x04
    1918:	22 96       	adiw	r28, 0x02	; 2
    191a:	e2 e0       	ldi	r30, 0x02	; 2
    191c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001920 <_ZN4erom7StorageD1Ev>:
    1920:	a2 e0       	ldi	r26, 0x02	; 2
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e9       	ldi	r30, 0x96	; 150
    1926:	fc e0       	ldi	r31, 0x0C	; 12
    1928:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	22 e8       	ldi	r18, 0x82	; 130
    1936:	31 e0       	ldi	r19, 0x01	; 1
    1938:	fc 01       	movw	r30, r24
    193a:	31 83       	std	Z+1, r19	; 0x01
    193c:	20 83       	st	Z, r18
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	89 2b       	or	r24, r25
    1944:	21 f0       	breq	.+8      	; 0x194e <_ZN4erom7StorageD1Ev+0x2e>
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    194e:	22 96       	adiw	r28, 0x02	; 2
    1950:	e2 e0       	ldi	r30, 0x02	; 2
    1952:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001956 <_ZN4erom7StorageD0Ev>:
    1956:	a2 e0       	ldi	r26, 0x02	; 2
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	da df       	rcall	.-76     	; 0x1920 <_ZN4erom7StorageD1Ev>
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    1974:	22 96       	adiw	r28, 0x02	; 2
    1976:	e2 e0       	ldi	r30, 0x02	; 2
    1978:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000197c <_ZN4erom6AccessC1Ej>:
    197c:	a4 e0       	ldi	r26, 0x04	; 4
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e4 ec       	ldi	r30, 0xC4	; 196
    1982:	fc e0       	ldi	r31, 0x0C	; 12
    1984:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	7c 83       	std	Y+4, r23	; 0x04
    198e:	6b 83       	std	Y+3, r22	; 0x03
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	fc 01       	movw	r30, r24
    199a:	31 83       	std	Z+1, r19	; 0x01
    199c:	20 83       	st	Z, r18
    199e:	0a d0       	rcall	.+20     	; 0x19b4 <_ZN4erom6Access18device_memory_sizeEv>
    19a0:	9c 01       	movw	r18, r24
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	fc 01       	movw	r30, r24
    19a8:	33 83       	std	Z+3, r19	; 0x03
    19aa:	22 83       	std	Z+2, r18	; 0x02
    19ac:	24 96       	adiw	r28, 0x04	; 4
    19ae:	e2 e0       	ldi	r30, 0x02	; 2
    19b0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000019b4 <_ZN4erom6Access18device_memory_sizeEv>:
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e0 ee       	ldi	r30, 0xE0	; 224
    19ba:	fc e0       	ldi	r31, 0x0C	; 12
    19bc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	94 e0       	ldi	r25, 0x04	; 4
    19c4:	e2 e0       	ldi	r30, 0x02	; 2
    19c6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000019ca <_ZNK4erom6Access10read_blockIdEEbjRT_>:
    19ca:	a6 e0       	ldi	r26, 0x06	; 6
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb ee       	ldi	r30, 0xEB	; 235
    19d0:	fc e0       	ldi	r31, 0x0C	; 12
    19d2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	7c 83       	std	Y+4, r23	; 0x04
    19dc:	6b 83       	std	Y+3, r22	; 0x03
    19de:	5e 83       	std	Y+6, r21	; 0x06
    19e0:	4d 83       	std	Y+5, r20	; 0x05
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	9c 01       	movw	r18, r24
    19e8:	2c 5f       	subi	r18, 0xFC	; 252
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	b9 01       	movw	r22, r18
    19f2:	f6 de       	rcall	.-532    	; 0x17e0 <_ZNK4erom6Access8in_rangeEj>
    19f4:	98 2f       	mov	r25, r24
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 27       	eor	r24, r25
    19fa:	88 23       	and	r24, r24
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x38>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x4a>
    1a02:	4d 81       	ldd	r20, Y+5	; 0x05
    1a04:	5e 81       	ldd	r21, Y+6	; 0x06
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	b9 01       	movw	r22, r18
    1a10:	05 d0       	rcall	.+10     	; 0x1a1c <_ZNK4erom6Access11_read_blockIdEEvjRT_>
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	26 96       	adiw	r28, 0x06	; 6
    1a16:	e2 e0       	ldi	r30, 0x02	; 2
    1a18:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001a1c <_ZNK4erom6Access11_read_blockIdEEvjRT_>:
    1a1c:	a6 e0       	ldi	r26, 0x06	; 6
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e4 e1       	ldi	r30, 0x14	; 20
    1a22:	fd e0       	ldi	r31, 0x0D	; 13
    1a24:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	7c 83       	std	Y+4, r23	; 0x04
    1a2e:	6b 83       	std	Y+3, r22	; 0x03
    1a30:	5e 83       	std	Y+6, r21	; 0x06
    1a32:	4d 83       	std	Y+5, r20	; 0x05
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	f3 de       	rcall	.-538    	; 0x1820 <_ZNK4erom6Access4baseEv>
    1a3a:	9c 01       	movw	r18, r24
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	82 0f       	add	r24, r18
    1a42:	93 1f       	adc	r25, r19
    1a44:	9c 01       	movw	r18, r24
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	44 e0       	ldi	r20, 0x04	; 4
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	b9 01       	movw	r22, r18
    1a50:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <eeprom_read_block>
    1a54:	26 96       	adiw	r28, 0x06	; 6
    1a56:	e2 e0       	ldi	r30, 0x02	; 2
    1a58:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001a5c <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1a5c:	a4 e0       	ldi	r26, 0x04	; 4
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	fd e0       	ldi	r31, 0x0D	; 13
    1a64:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	7c 83       	std	Y+4, r23	; 0x04
    1a6e:	6b 83       	std	Y+3, r22	; 0x03
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	49 f4       	brne	.+18     	; 0x1a8a <_Z41__static_initialization_and_destruction_0ii+0x2e>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    1a80:	f1 de       	rcall	.-542    	; 0x1864 <_ZN4erom6Access8instanceEv>
    1a82:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_ZN4erom6accessE+0x1>
    1a86:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1a8a:	24 96       	adiw	r28, 0x04	; 4
    1a8c:	e2 e0       	ldi	r30, 0x02	; 2
    1a8e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001a92 <_GLOBAL__sub_I__ZN4erom6accessE>:
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	fd e0       	ldi	r31, 0x0D	; 13
    1a9a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1a9e:	6f ef       	ldi	r22, 0xFF	; 255
    1aa0:	7f ef       	ldi	r23, 0xFF	; 255
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	da df       	rcall	.-76     	; 0x1a5c <_Z41__static_initialization_and_destruction_0ii>
    1aa8:	e2 e0       	ldi	r30, 0x02	; 2
    1aaa:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001aae <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ed e5       	ldi	r30, 0x5D	; 93
    1ab4:	fd e0       	ldi	r31, 0x0D	; 13
    1ab6:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1aba:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	e2 e0       	ldi	r30, 0x02	; 2
    1ac8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001acc <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1acc:	a8 e0       	ldi	r26, 0x08	; 8
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ec e6       	ldi	r30, 0x6C	; 108
    1ad2:	fd e0       	ldi	r31, 0x0D	; 13
    1ad4:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1ad8:	98 87       	std	Y+8, r25	; 0x08
    1ada:	8f 83       	std	Y+7, r24	; 0x07
    1adc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ade:	98 85       	ldd	r25, Y+8	; 0x08
    1ae0:	20 e9       	ldi	r18, 0x90	; 144
    1ae2:	31 e0       	ldi	r19, 0x01	; 1
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	31 83       	std	Z+1, r19	; 0x01
    1ae8:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1aea:	e1 df       	rcall	.-62     	; 0x1aae <_ZL7elapsedv>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	ad 83       	std	Y+5, r26	; 0x05
    1af6:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1af8:	1a 82       	std	Y+2, r1	; 0x02
    1afa:	19 82       	std	Y+1, r1	; 0x01
    1afc:	3d c0       	rjmp	.+122    	; 0x1b78 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    1afe:	2f 81       	ldd	r18, Y+7	; 0x07
    1b00:	38 85       	ldd	r19, Y+8	; 0x08
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	82 0f       	add	r24, r18
    1b08:	93 1f       	adc	r25, r19
    1b0a:	82 57       	subi	r24, 0x72	; 114
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	fc 01       	movw	r30, r24
    1b10:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    1b12:	2f 81       	ldd	r18, Y+7	; 0x07
    1b14:	38 85       	ldd	r19, Y+8	; 0x08
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	45 96       	adiw	r24, 0x15	; 21
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	82 0f       	add	r24, r18
    1b22:	93 1f       	adc	r25, r19
    1b24:	fc 01       	movw	r30, r24
    1b26:	11 82       	std	Z+1, r1	; 0x01
    1b28:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    1b2a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b2c:	38 85       	ldd	r19, Y+8	; 0x08
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	9c 01       	movw	r18, r24
    1b40:	2e 5f       	subi	r18, 0xFE	; 254
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	ad 81       	ldd	r26, Y+5	; 0x05
    1b4a:	be 81       	ldd	r27, Y+6	; 0x06
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    1b56:	2f 81       	ldd	r18, Y+7	; 0x07
    1b58:	38 85       	ldd	r19, Y+8	; 0x08
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	cd 96       	adiw	r24, 0x3d	; 61
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	fc 01       	movw	r30, r24
    1b6a:	11 82       	std	Z+1, r1	; 0x01
    1b6c:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	0a 97       	sbiw	r24, 0x0a	; 10
    1b7e:	0c f4       	brge	.+2      	; 0x1b82 <_ZN11SimpleTimerC1Ev+0xb6>
    1b80:	be cf       	rjmp	.-132    	; 0x1afe <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
    1b84:	98 85       	ldd	r25, Y+8	; 0x08
    1b86:	84 55       	subi	r24, 0x54	; 84
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	11 82       	std	Z+1, r1	; 0x01
    1b8e:	10 82       	st	Z, r1
}
    1b90:	28 96       	adiw	r28, 0x08	; 8
    1b92:	e2 e0       	ldi	r30, 0x02	; 2
    1b94:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001b98 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    1b98:	a8 e0       	ldi	r26, 0x08	; 8
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1b9e:	fd e0       	ldi	r31, 0x0D	; 13
    1ba0:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x18>
    1ba4:	98 87       	std	Y+8, r25	; 0x08
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    1ba8:	82 df       	rcall	.-252    	; 0x1aae <_ZL7elapsedv>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	ad 83       	std	Y+5, r26	; 0x05
    1bb4:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    1bb6:	1a 82       	std	Y+2, r1	; 0x02
    1bb8:	19 82       	std	Y+1, r1	; 0x01
    1bba:	25 c1       	rjmp	.+586    	; 0x1e06 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1bbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1bbe:	38 85       	ldd	r19, Y+8	; 0x08
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	84 5b       	subi	r24, 0xB4	; 180
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	11 82       	std	Z+1, r1	; 0x01
    1bd4:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1bd6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bd8:	38 85       	ldd	r19, Y+8	; 0x08
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	45 96       	adiw	r24, 0x15	; 21
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	82 0f       	add	r24, r18
    1be6:	93 1f       	adc	r25, r19
    1be8:	fc 01       	movw	r30, r24
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	89 2b       	or	r24, r25
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <_ZN11SimpleTimer3runEv+0x5c>
    1bf2:	04 c1       	rjmp	.+520    	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1bf4:	2f 81       	ldd	r18, Y+7	; 0x07
    1bf6:	38 85       	ldd	r19, Y+8	; 0x08
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	02 96       	adiw	r24, 0x02	; 2
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	80 81       	ld	r24, Z
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	a2 81       	ldd	r26, Z+2	; 0x02
    1c12:	b3 81       	ldd	r27, Z+3	; 0x03
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	3c 81       	ldd	r19, Y+4	; 0x04
    1c18:	4d 81       	ldd	r20, Y+5	; 0x05
    1c1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1c1c:	79 01       	movw	r14, r18
    1c1e:	8a 01       	movw	r16, r20
    1c20:	e8 1a       	sub	r14, r24
    1c22:	f9 0a       	sbc	r15, r25
    1c24:	0a 0b       	sbc	r16, r26
    1c26:	1b 0b       	sbc	r17, r27
    1c28:	d8 01       	movw	r26, r16
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	4f 81       	ldd	r20, Y+7	; 0x07
    1c2e:	58 85       	ldd	r21, Y+8	; 0x08
    1c30:	29 81       	ldd	r18, Y+1	; 0x01
    1c32:	3a 81       	ldd	r19, Y+2	; 0x02
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	22 0f       	add	r18, r18
    1c3a:	33 1f       	adc	r19, r19
    1c3c:	24 0f       	add	r18, r20
    1c3e:	35 1f       	adc	r19, r21
    1c40:	22 5c       	subi	r18, 0xC2	; 194
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	f9 01       	movw	r30, r18
    1c46:	20 81       	ld	r18, Z
    1c48:	31 81       	ldd	r19, Z+1	; 0x01
    1c4a:	42 81       	ldd	r20, Z+2	; 0x02
    1c4c:	53 81       	ldd	r21, Z+3	; 0x03
    1c4e:	82 17       	cp	r24, r18
    1c50:	93 07       	cpc	r25, r19
    1c52:	a4 07       	cpc	r26, r20
    1c54:	b5 07       	cpc	r27, r21
    1c56:	08 f4       	brcc	.+2      	; 0x1c5a <_ZN11SimpleTimer3runEv+0xc2>
    1c58:	d1 c0       	rjmp	.+418    	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    1c5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c5c:	38 85       	ldd	r19, Y+8	; 0x08
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	82 0f       	add	r24, r18
    1c6c:	93 1f       	adc	r25, r19
    1c6e:	02 96       	adiw	r24, 0x02	; 2
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	a2 81       	ldd	r26, Z+2	; 0x02
    1c78:	b3 81       	ldd	r27, Z+3	; 0x03
    1c7a:	4f 81       	ldd	r20, Y+7	; 0x07
    1c7c:	58 85       	ldd	r21, Y+8	; 0x08
    1c7e:	29 81       	ldd	r18, Y+1	; 0x01
    1c80:	3a 81       	ldd	r19, Y+2	; 0x02
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	24 0f       	add	r18, r20
    1c8c:	35 1f       	adc	r19, r21
    1c8e:	22 5c       	subi	r18, 0xC2	; 194
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	f9 01       	movw	r30, r18
    1c94:	20 81       	ld	r18, Z
    1c96:	31 81       	ldd	r19, Z+1	; 0x01
    1c98:	42 81       	ldd	r20, Z+2	; 0x02
    1c9a:	53 81       	ldd	r21, Z+3	; 0x03
    1c9c:	82 0f       	add	r24, r18
    1c9e:	93 1f       	adc	r25, r19
    1ca0:	a4 1f       	adc	r26, r20
    1ca2:	b5 1f       	adc	r27, r21
    1ca4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ca6:	58 85       	ldd	r21, Y+8	; 0x08
    1ca8:	29 81       	ldd	r18, Y+1	; 0x01
    1caa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	24 0f       	add	r18, r20
    1cb6:	35 1f       	adc	r19, r21
    1cb8:	2e 5f       	subi	r18, 0xFE	; 254
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1cc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc8:	38 85       	ldd	r19, Y+8	; 0x08
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	82 0f       	add	r24, r18
    1cd0:	93 1f       	adc	r25, r19
    1cd2:	82 57       	subi	r24, 0x72	; 114
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <_ZN11SimpleTimer3runEv+0x148>
    1cde:	8e c0       	rjmp	.+284    	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1ce0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ce2:	38 85       	ldd	r19, Y+8	; 0x08
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	c3 96       	adiw	r24, 0x33	; 51
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	89 2b       	or	r24, r25
    1cfa:	81 f4       	brne	.+32     	; 0x1d1c <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cfe:	38 85       	ldd	r19, Y+8	; 0x08
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	84 5b       	subi	r24, 0xB4	; 180
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	82 0f       	add	r24, r18
    1d0e:	93 1f       	adc	r25, r19
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	31 83       	std	Z+1, r19	; 0x01
    1d18:	20 83       	st	Z, r18
    1d1a:	70 c0       	rjmp	.+224    	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1d1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d1e:	38 85       	ldd	r19, Y+8	; 0x08
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	cd 96       	adiw	r24, 0x3d	; 61
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	82 0f       	add	r24, r18
    1d2c:	93 1f       	adc	r25, r19
    1d2e:	fc 01       	movw	r30, r24
    1d30:	20 81       	ld	r18, Z
    1d32:	31 81       	ldd	r19, Z+1	; 0x01
    1d34:	4f 81       	ldd	r20, Y+7	; 0x07
    1d36:	58 85       	ldd	r21, Y+8	; 0x08
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	c3 96       	adiw	r24, 0x33	; 51
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	84 0f       	add	r24, r20
    1d44:	95 1f       	adc	r25, r21
    1d46:	fc 01       	movw	r30, r24
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	28 17       	cp	r18, r24
    1d4e:	39 07       	cpc	r19, r25
    1d50:	0c f0       	brlt	.+2      	; 0x1d54 <_ZN11SimpleTimer3runEv+0x1bc>
    1d52:	54 c0       	rjmp	.+168    	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1d54:	2f 81       	ldd	r18, Y+7	; 0x07
    1d56:	38 85       	ldd	r19, Y+8	; 0x08
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	84 5b       	subi	r24, 0xB4	; 180
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	82 0f       	add	r24, r18
    1d66:	93 1f       	adc	r25, r19
    1d68:	21 e0       	ldi	r18, 0x01	; 1
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	31 83       	std	Z+1, r19	; 0x01
    1d70:	20 83       	st	Z, r18
                        numRuns[i]++;
    1d72:	2f 81       	ldd	r18, Y+7	; 0x07
    1d74:	38 85       	ldd	r19, Y+8	; 0x08
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	cd 96       	adiw	r24, 0x3d	; 61
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	fc 01       	movw	r30, r24
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	4f 81       	ldd	r20, Y+7	; 0x07
    1d92:	58 85       	ldd	r21, Y+8	; 0x08
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	cd 96       	adiw	r24, 0x3d	; 61
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	84 0f       	add	r24, r20
    1da0:	95 1f       	adc	r25, r21
    1da2:	fc 01       	movw	r30, r24
    1da4:	31 83       	std	Z+1, r19	; 0x01
    1da6:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1da8:	2f 81       	ldd	r18, Y+7	; 0x07
    1daa:	38 85       	ldd	r19, Y+8	; 0x08
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	cd 96       	adiw	r24, 0x3d	; 61
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	fc 01       	movw	r30, r24
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
    1dc0:	4f 81       	ldd	r20, Y+7	; 0x07
    1dc2:	58 85       	ldd	r21, Y+8	; 0x08
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	c3 96       	adiw	r24, 0x33	; 51
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	84 0f       	add	r24, r20
    1dd0:	95 1f       	adc	r25, r21
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	28 17       	cp	r18, r24
    1dda:	39 07       	cpc	r19, r25
    1ddc:	7c f0       	brlt	.+30     	; 0x1dfc <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1dde:	2f 81       	ldd	r18, Y+7	; 0x07
    1de0:	38 85       	ldd	r19, Y+8	; 0x08
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	84 5b       	subi	r24, 0xB4	; 180
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	22 e0       	ldi	r18, 0x02	; 2
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	fc 01       	movw	r30, r24
    1df8:	31 83       	std	Z+1, r19	; 0x01
    1dfa:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	0a 97       	sbiw	r24, 0x0a	; 10
    1e0c:	0c f4       	brge	.+2      	; 0x1e10 <_ZN11SimpleTimer3runEv+0x278>
    1e0e:	d6 ce       	rjmp	.-596    	; 0x1bbc <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1e10:	1a 82       	std	Y+2, r1	; 0x02
    1e12:	19 82       	std	Y+1, r1	; 0x01
    1e14:	46 c0       	rjmp	.+140    	; 0x1ea2 <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1e16:	2f 81       	ldd	r18, Y+7	; 0x07
    1e18:	38 85       	ldd	r19, Y+8	; 0x08
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	84 5b       	subi	r24, 0xB4	; 180
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	91 05       	cpc	r25, r1
    1e34:	19 f0       	breq	.+6      	; 0x1e3c <_ZN11SimpleTimer3runEv+0x2a4>
    1e36:	02 97       	sbiw	r24, 0x02	; 2
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1e3a:	2e c0       	rjmp	.+92     	; 0x1e98 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1e3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e3e:	38 85       	ldd	r19, Y+8	; 0x08
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	45 96       	adiw	r24, 0x15	; 21
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	82 0f       	add	r24, r18
    1e4c:	93 1f       	adc	r25, r19
    1e4e:	fc 01       	movw	r30, r24
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	fc 01       	movw	r30, r24
    1e56:	09 95       	icall
                break;
    1e58:	1f c0       	rjmp	.+62     	; 0x1e98 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1e5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5c:	38 85       	ldd	r19, Y+8	; 0x08
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	45 96       	adiw	r24, 0x15	; 21
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	82 0f       	add	r24, r18
    1e6a:	93 1f       	adc	r25, r19
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	fc 01       	movw	r30, r24
    1e74:	09 95       	icall
                deleteTimer(i);
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	98 85       	ldd	r25, Y+8	; 0x08
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	08 96       	adiw	r24, 0x08	; 8
    1e82:	fc 01       	movw	r30, r24
    1e84:	20 81       	ld	r18, Z
    1e86:	31 81       	ldd	r19, Z+1	; 0x01
    1e88:	49 81       	ldd	r20, Y+1	; 0x01
    1e8a:	5a 81       	ldd	r21, Y+2	; 0x02
    1e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8e:	98 85       	ldd	r25, Y+8	; 0x08
    1e90:	ba 01       	movw	r22, r20
    1e92:	f9 01       	movw	r30, r18
    1e94:	09 95       	icall
                break;
    1e96:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea6:	0a 97       	sbiw	r24, 0x0a	; 10
    1ea8:	0c f4       	brge	.+2      	; 0x1eac <_ZN11SimpleTimer3runEv+0x314>
    1eaa:	b5 cf       	rjmp	.-150    	; 0x1e16 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1eac:	28 96       	adiw	r28, 0x08	; 8
    1eae:	e6 e0       	ldi	r30, 0x06	; 6
    1eb0:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x18>

00001eb4 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1eb4:	a4 e0       	ldi	r26, 0x04	; 4
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e0 e6       	ldi	r30, 0x60	; 96
    1eba:	ff e0       	ldi	r31, 0x0F	; 15
    1ebc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    1ec0:	9c 83       	std	Y+4, r25	; 0x04
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	84 55       	subi	r24, 0x54	; 84
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	0a 97       	sbiw	r24, 0x0a	; 10
    1ed4:	1c f0       	brlt	.+6      	; 0x1edc <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	16 c0       	rjmp	.+44     	; 0x1f0e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	45 96       	adiw	r24, 0x15	; 21
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	82 0f       	add	r24, r18
    1ef2:	93 1f       	adc	r25, r19
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	89 2b       	or	r24, r25
    1efc:	19 f4       	brne	.+6      	; 0x1f04 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	0b c0       	rjmp	.+22     	; 0x1f1a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	0a 97       	sbiw	r24, 0x0a	; 10
    1f14:	34 f3       	brlt	.-52     	; 0x1ee2 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
}
    1f1a:	24 96       	adiw	r28, 0x04	; 4
    1f1c:	e2 e0       	ldi	r30, 0x02	; 2
    1f1e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00001f22 <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1f22:	ac e0       	ldi	r26, 0x0C	; 12
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e7 e9       	ldi	r30, 0x97	; 151
    1f28:	ff e0       	ldi	r31, 0x0F	; 15
    1f2a:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	4d 83       	std	Y+5, r20	; 0x05
    1f34:	5e 83       	std	Y+6, r21	; 0x06
    1f36:	6f 83       	std	Y+7, r22	; 0x07
    1f38:	78 87       	std	Y+8, r23	; 0x08
    1f3a:	3a 87       	std	Y+10, r19	; 0x0a
    1f3c:	29 87       	std	Y+9, r18	; 0x09
    1f3e:	1c 87       	std	Y+12, r17	; 0x0c
    1f40:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	b6 df       	rcall	.-148    	; 0x1eb4 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	99 23       	and	r25, r25
    1f52:	1c f4       	brge	.+6      	; 0x1f5a <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	9f ef       	ldi	r25, 0xFF	; 255
    1f58:	6b c0       	rjmp	.+214    	; 0x2030 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	89 2b       	or	r24, r25
    1f60:	19 f4       	brne	.+6      	; 0x1f68 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	64 c0       	rjmp	.+200    	; 0x2030 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	82 0f       	add	r24, r18
    1f7a:	93 1f       	adc	r25, r19
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	22 5c       	subi	r18, 0xC2	; 194
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	af 81       	ldd	r26, Y+7	; 0x07
    1f88:	b8 85       	ldd	r27, Y+8	; 0x08
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	80 83       	st	Z, r24
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	a2 83       	std	Z+2, r26	; 0x02
    1f92:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	45 96       	adiw	r24, 0x15	; 21
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	29 85       	ldd	r18, Y+9	; 0x09
    1fa8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1faa:	fc 01       	movw	r30, r24
    1fac:	31 83       	std	Z+1, r19	; 0x01
    1fae:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	c3 96       	adiw	r24, 0x33	; 51
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	82 0f       	add	r24, r18
    1fc0:	93 1f       	adc	r25, r19
    1fc2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fc4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	31 83       	std	Z+1, r19	; 0x01
    1fca:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	82 0f       	add	r24, r18
    1fd6:	93 1f       	adc	r25, r19
    1fd8:	82 57       	subi	r24, 0x72	; 114
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1fe2:	65 dd       	rcall	.-1334   	; 0x1aae <_ZL7elapsedv>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	4b 81       	ldd	r20, Y+3	; 0x03
    1fea:	5c 81       	ldd	r21, Y+4	; 0x04
    1fec:	29 81       	ldd	r18, Y+1	; 0x01
    1fee:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff0:	22 0f       	add	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	24 0f       	add	r18, r20
    1ffa:	35 1f       	adc	r19, r21
    1ffc:	2e 5f       	subi	r18, 0xFE	; 254
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	f9 01       	movw	r30, r18
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	84 55       	subi	r24, 0x54	; 84
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	fc 01       	movw	r30, r24
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	9c 01       	movw	r18, r24
    201a:	2f 5f       	subi	r18, 0xFF	; 255
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	84 55       	subi	r24, 0x54	; 84
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	fc 01       	movw	r30, r24
    2028:	31 83       	std	Z+1, r19	; 0x01
    202a:	20 83       	st	Z, r18

    return freeTimer;
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2030:	2c 96       	adiw	r28, 0x0c	; 12
    2032:	e4 e0       	ldi	r30, 0x04	; 4
    2034:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00002038 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    2038:	a8 e0       	ldi	r26, 0x08	; 8
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e2       	ldi	r30, 0x22	; 34
    203e:	f0 e1       	ldi	r31, 0x10	; 16
    2040:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x18>
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	4b 83       	std	Y+3, r20	; 0x03
    204a:	5c 83       	std	Y+4, r21	; 0x04
    204c:	6d 83       	std	Y+5, r22	; 0x05
    204e:	7e 83       	std	Y+6, r23	; 0x06
    2050:	38 87       	std	Y+8, r19	; 0x08
    2052:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	dc 01       	movw	r26, r24
    205a:	8d 91       	ld	r24, X+
    205c:	9c 91       	ld	r25, X
    205e:	06 96       	adiw	r24, 0x06	; 6
    2060:	dc 01       	movw	r26, r24
    2062:	ed 91       	ld	r30, X+
    2064:	fc 91       	ld	r31, X
    2066:	2f 81       	ldd	r18, Y+7	; 0x07
    2068:	38 85       	ldd	r19, Y+8	; 0x08
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	ad 81       	ldd	r26, Y+5	; 0x05
    2070:	be 81       	ldd	r27, Y+6	; 0x06
    2072:	e9 80       	ldd	r14, Y+1	; 0x01
    2074:	fa 80       	ldd	r15, Y+2	; 0x02
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	ac 01       	movw	r20, r24
    207c:	bd 01       	movw	r22, r26
    207e:	c7 01       	movw	r24, r14
    2080:	09 95       	icall
}
    2082:	28 96       	adiw	r28, 0x08	; 8
    2084:	e6 e0       	ldi	r30, 0x06	; 6
    2086:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x18>

0000208a <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    208a:	a8 e0       	ldi	r26, 0x08	; 8
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e4       	ldi	r30, 0x4B	; 75
    2090:	f0 e1       	ldi	r31, 0x10	; 16
    2092:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x18>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	4b 83       	std	Y+3, r20	; 0x03
    209c:	5c 83       	std	Y+4, r21	; 0x04
    209e:	6d 83       	std	Y+5, r22	; 0x05
    20a0:	7e 83       	std	Y+6, r23	; 0x06
    20a2:	38 87       	std	Y+8, r19	; 0x08
    20a4:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	dc 01       	movw	r26, r24
    20ac:	8d 91       	ld	r24, X+
    20ae:	9c 91       	ld	r25, X
    20b0:	06 96       	adiw	r24, 0x06	; 6
    20b2:	dc 01       	movw	r26, r24
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	2f 81       	ldd	r18, Y+7	; 0x07
    20ba:	38 85       	ldd	r19, Y+8	; 0x08
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	ad 81       	ldd	r26, Y+5	; 0x05
    20c2:	be 81       	ldd	r27, Y+6	; 0x06
    20c4:	e9 80       	ldd	r14, Y+1	; 0x01
    20c6:	fa 80       	ldd	r15, Y+2	; 0x02
    20c8:	01 e0       	ldi	r16, 0x01	; 1
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	ac 01       	movw	r20, r24
    20ce:	bd 01       	movw	r22, r26
    20d0:	c7 01       	movw	r24, r14
    20d2:	09 95       	icall
}
    20d4:	28 96       	adiw	r28, 0x08	; 8
    20d6:	e6 e0       	ldi	r30, 0x06	; 6
    20d8:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x18>

000020dc <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    20dc:	a4 e0       	ldi	r26, 0x04	; 4
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e4 e7       	ldi	r30, 0x74	; 116
    20e2:	f0 e1       	ldi	r31, 0x10	; 16
    20e4:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	7c 83       	std	Y+4, r23	; 0x04
    20ee:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	0a 97       	sbiw	r24, 0x0a	; 10
    20f6:	0c f0       	brlt	.+2      	; 0x20fa <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    20f8:	69 c0       	rjmp	.+210    	; 0x21cc <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	84 55       	subi	r24, 0x54	; 84
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	fc 01       	movw	r30, r24
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	89 2b       	or	r24, r25
    210a:	09 f4       	brne	.+2      	; 0x210e <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    210c:	5f c0       	rjmp	.+190    	; 0x21cc <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    210e:	29 81       	ldd	r18, Y+1	; 0x01
    2110:	3a 81       	ldd	r19, Y+2	; 0x02
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	45 96       	adiw	r24, 0x15	; 21
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	fc 01       	movw	r30, r24
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	89 2b       	or	r24, r25
    2128:	09 f4       	brne	.+2      	; 0x212c <_ZN11SimpleTimer11deleteTimerEi+0x50>
    212a:	50 c0       	rjmp	.+160    	; 0x21cc <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    212c:	29 81       	ldd	r18, Y+1	; 0x01
    212e:	3a 81       	ldd	r19, Y+2	; 0x02
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	45 96       	adiw	r24, 0x15	; 21
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	fc 01       	movw	r30, r24
    2140:	11 82       	std	Z+1, r1	; 0x01
    2142:	10 82       	st	Z, r1
        enabled[timerId] = false;
    2144:	29 81       	ldd	r18, Y+1	; 0x01
    2146:	3a 81       	ldd	r19, Y+2	; 0x02
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	82 0f       	add	r24, r18
    214e:	93 1f       	adc	r25, r19
    2150:	82 57       	subi	r24, 0x72	; 114
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	fc 01       	movw	r30, r24
    2156:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    2158:	29 81       	ldd	r18, Y+1	; 0x01
    215a:	3a 81       	ldd	r19, Y+2	; 0x02
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	84 5b       	subi	r24, 0xB4	; 180
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
    216c:	fc 01       	movw	r30, r24
    216e:	11 82       	std	Z+1, r1	; 0x01
    2170:	10 82       	st	Z, r1
        delays[timerId] = 0;
    2172:	29 81       	ldd	r18, Y+1	; 0x01
    2174:	3a 81       	ldd	r19, Y+2	; 0x02
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	ce 96       	adiw	r24, 0x3e	; 62
    2188:	fc 01       	movw	r30, r24
    218a:	10 82       	st	Z, r1
    218c:	11 82       	std	Z+1, r1	; 0x01
    218e:	12 82       	std	Z+2, r1	; 0x02
    2190:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    2192:	29 81       	ldd	r18, Y+1	; 0x01
    2194:	3a 81       	ldd	r19, Y+2	; 0x02
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	cd 96       	adiw	r24, 0x3d	; 61
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	82 0f       	add	r24, r18
    21a2:	93 1f       	adc	r25, r19
    21a4:	fc 01       	movw	r30, r24
    21a6:	11 82       	std	Z+1, r1	; 0x01
    21a8:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	84 55       	subi	r24, 0x54	; 84
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	fc 01       	movw	r30, r24
    21b4:	80 81       	ld	r24, Z
    21b6:	91 81       	ldd	r25, Z+1	; 0x01
    21b8:	9c 01       	movw	r18, r24
    21ba:	21 50       	subi	r18, 0x01	; 1
    21bc:	31 09       	sbc	r19, r1
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	84 55       	subi	r24, 0x54	; 84
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	fc 01       	movw	r30, r24
    21c8:	31 83       	std	Z+1, r19	; 0x01
    21ca:	20 83       	st	Z, r18
    }
}
    21cc:	24 96       	adiw	r28, 0x04	; 4
    21ce:	e2 e0       	ldi	r30, 0x02	; 2
    21d0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000021d4 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    21d4:	a4 e0       	ldi	r26, 0x04	; 4
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e0 ef       	ldi	r30, 0xF0	; 240
    21da:	f0 e1       	ldi	r31, 0x10	; 16
    21dc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	7c 83       	std	Y+4, r23	; 0x04
    21e6:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	0a 97       	sbiw	r24, 0x0a	; 10
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    21f2:	5d dc       	rcall	.-1862   	; 0x1aae <_ZL7elapsedv>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	49 81       	ldd	r20, Y+1	; 0x01
    21fa:	5a 81       	ldd	r21, Y+2	; 0x02
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	22 0f       	add	r18, r18
    2206:	33 1f       	adc	r19, r19
    2208:	24 0f       	add	r18, r20
    220a:	35 1f       	adc	r19, r21
    220c:	2e 5f       	subi	r18, 0xFE	; 254
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	f9 01       	movw	r30, r18
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
}
    221a:	24 96       	adiw	r28, 0x04	; 4
    221c:	e2 e0       	ldi	r30, 0x02	; 2
    221e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002222 <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    2222:	a4 e0       	ldi	r26, 0x04	; 4
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e7 e1       	ldi	r30, 0x17	; 23
    2228:	f1 e1       	ldi	r31, 0x11	; 17
    222a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	7c 83       	std	Y+4, r23	; 0x04
    2234:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	0a 97       	sbiw	r24, 0x0a	; 10
    223c:	14 f0       	brlt	.+4      	; 0x2242 <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	0a c0       	rjmp	.+20     	; 0x2256 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    2242:	29 81       	ldd	r18, Y+1	; 0x01
    2244:	3a 81       	ldd	r19, Y+2	; 0x02
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	82 57       	subi	r24, 0x72	; 114
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	fc 01       	movw	r30, r24
    2254:	80 81       	ld	r24, Z
}
    2256:	24 96       	adiw	r28, 0x04	; 4
    2258:	e2 e0       	ldi	r30, 0x02	; 2
    225a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000225e <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    225e:	a4 e0       	ldi	r26, 0x04	; 4
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e3       	ldi	r30, 0x35	; 53
    2264:	f1 e1       	ldi	r31, 0x11	; 17
    2266:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	7c 83       	std	Y+4, r23	; 0x04
    2270:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	0a 97       	sbiw	r24, 0x0a	; 10
    2278:	0c f0       	brlt	.+2      	; 0x227c <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    227a:	0b c0       	rjmp	.+22     	; 0x2292 <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    227c:	29 81       	ldd	r18, Y+1	; 0x01
    227e:	3a 81       	ldd	r19, Y+2	; 0x02
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	82 57       	subi	r24, 0x72	; 114
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	21 e0       	ldi	r18, 0x01	; 1
    228e:	fc 01       	movw	r30, r24
    2290:	20 83       	st	Z, r18
}
    2292:	24 96       	adiw	r28, 0x04	; 4
    2294:	e2 e0       	ldi	r30, 0x02	; 2
    2296:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000229a <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    229a:	a4 e0       	ldi	r26, 0x04	; 4
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f1 e1       	ldi	r31, 0x11	; 17
    22a2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	7c 83       	std	Y+4, r23	; 0x04
    22ac:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	0a 97       	sbiw	r24, 0x0a	; 10
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    22b6:	0a c0       	rjmp	.+20     	; 0x22cc <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    22b8:	29 81       	ldd	r18, Y+1	; 0x01
    22ba:	3a 81       	ldd	r19, Y+2	; 0x02
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	82 0f       	add	r24, r18
    22c2:	93 1f       	adc	r25, r19
    22c4:	82 57       	subi	r24, 0x72	; 114
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	fc 01       	movw	r30, r24
    22ca:	10 82       	st	Z, r1
}
    22cc:	24 96       	adiw	r28, 0x04	; 4
    22ce:	e2 e0       	ldi	r30, 0x02	; 2
    22d0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000022d4 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    22d4:	cf 92       	push	r12
    22d6:	ef 92       	push	r14
    22d8:	0f 93       	push	r16
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <_ZN7LCDBaseC1Ev+0xc>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	0f 2e       	mov	r0, r31
    22ee:	f7 e0       	ldi	r31, 0x07	; 7
    22f0:	cf 2e       	mov	r12, r31
    22f2:	f0 2d       	mov	r31, r0
    22f4:	0f 2e       	mov	r0, r31
    22f6:	f6 e0       	ldi	r31, 0x06	; 6
    22f8:	ef 2e       	mov	r14, r31
    22fa:	f0 2d       	mov	r31, r0
    22fc:	05 e0       	ldi	r16, 0x05	; 5
    22fe:	24 e0       	ldi	r18, 0x04	; 4
    2300:	49 e0       	ldi	r20, 0x09	; 9
    2302:	68 e0       	ldi	r22, 0x08	; 8
    2304:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN13LiquidCrystalC1Ehhhhhh>
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	26 ea       	ldi	r18, 0xA6	; 166
    230e:	31 e0       	ldi	r19, 0x01	; 1
    2310:	fc 01       	movw	r30, r24
    2312:	31 83       	std	Z+1, r19	; 0x01
    2314:	20 83       	st	Z, r18
    Init();
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	08 d0       	rcall	.+16     	; 0x232c <_ZN7LCDBase4InitEv>
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	0f 91       	pop	r16
    2326:	ef 90       	pop	r14
    2328:	cf 90       	pop	r12
    232a:	08 95       	ret

0000232c <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    232c:	a2 e0       	ldi	r26, 0x02	; 2
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ec e9       	ldi	r30, 0x9C	; 156
    2332:	f1 e1       	ldi	r31, 0x11	; 17
    2334:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	42 e0       	ldi	r20, 0x02	; 2
    2344:	60 e1       	ldi	r22, 0x10	; 16
    2346:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN13LiquidCrystal5beginEhhh>
    clear();
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	69 d8       	rcall	.-3886   	; 0x1422 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	78 d8       	rcall	.-3856   	; 0x144a <_ZN13LiquidCrystal9setCursorEhh>

}
    235a:	22 96       	adiw	r28, 0x02	; 2
    235c:	e2 e0       	ldi	r30, 0x02	; 2
    235e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002362 <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    2362:	a4 e0       	ldi	r26, 0x04	; 4
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e7 eb       	ldi	r30, 0xB7	; 183
    2368:	f1 e1       	ldi	r31, 0x11	; 17
    236a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	7c 83       	std	Y+4, r23	; 0x04
    2374:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    2376:	2b 81       	ldd	r18, Y+3	; 0x03
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	42 2f       	mov	r20, r18
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	64 d8       	rcall	.-3896   	; 0x144a <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    2382:	2f e8       	ldi	r18, 0x8F	; 143
    2384:	33 e0       	ldi	r19, 0x03	; 3
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	b9 01       	movw	r22, r18
    238c:	0e 94 c6 29 	call	0x538c	; 0x538c <_ZN5Print5printEPK19__FlashStringHelper>
}
    2390:	24 96       	adiw	r28, 0x04	; 4
    2392:	e2 e0       	ldi	r30, 0x02	; 2
    2394:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002398 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    2398:	a6 e0       	ldi	r26, 0x06	; 6
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e2 ed       	ldi	r30, 0xD2	; 210
    239e:	f1 e1       	ldi	r31, 0x11	; 17
    23a0:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	7c 83       	std	Y+4, r23	; 0x04
    23aa:	6b 83       	std	Y+3, r22	; 0x03
    23ac:	5e 83       	std	Y+6, r21	; 0x06
    23ae:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    23b0:	2b 81       	ldd	r18, Y+3	; 0x03
    23b2:	3c 81       	ldd	r19, Y+4	; 0x04
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	b9 01       	movw	r22, r18
    23ba:	d3 df       	rcall	.-90     	; 0x2362 <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	42 2f       	mov	r20, r18
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	41 d8       	rcall	.-3966   	; 0x144a <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	2d 81       	ldd	r18, Y+5	; 0x05
    23ce:	3e 81       	ldd	r19, Y+6	; 0x06
    23d0:	b9 01       	movw	r22, r18
    23d2:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <_ZN5Print5printERK6String>
}
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	e2 e0       	ldi	r30, 0x02	; 2
    23da:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000023de <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
    23de:	a2 e0       	ldi	r26, 0x02	; 2
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 ef       	ldi	r30, 0xF5	; 245
    23e4:	f1 e1       	ldi	r31, 0x11	; 17
    23e6:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	fc 01       	movw	r30, r24
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	22 96       	adiw	r28, 0x02	; 2
    23fa:	e2 e0       	ldi	r30, 0x02	; 2
    23fc:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002400 <_ZN15StringSumHelperC1EPKc>:
private:
  size_t _base, _memory_size;

  template<class T> inline void  _read_block(size_t aAddress, T &aValue) const {
    eeprom_read_block((void*)&aValue, reinterpret_cast<const void*>(aAddress + base()), sizeof(aValue));
  }
    2400:	a4 e0       	ldi	r26, 0x04	; 4
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e6 e0       	ldi	r30, 0x06	; 6
    2406:	f2 e1       	ldi	r31, 0x12	; 18
    2408:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	7c 83       	std	Y+4, r23	; 0x04
    2412:	6b 83       	std	Y+3, r22	; 0x03
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	2b 81       	ldd	r18, Y+3	; 0x03
    241a:	3c 81       	ldd	r19, Y+4	; 0x04
    241c:	b9 01       	movw	r22, r18
    241e:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    2422:	24 96       	adiw	r28, 0x04	; 4
    2424:	e2 e0       	ldi	r30, 0x02	; 2
    2426:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000242a <_ZnwjPv>:
    242a:	a4 e0       	ldi	r26, 0x04	; 4
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	eb e1       	ldi	r30, 0x1B	; 27
    2430:	f2 e1       	ldi	r31, 0x12	; 18
    2432:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	7c 83       	std	Y+4, r23	; 0x04
    243c:	6b 83       	std	Y+3, r22	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	24 96       	adiw	r28, 0x04	; 4
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000244a <_ZN5PrintC1ERKS_>:
    244a:	a4 e0       	ldi	r26, 0x04	; 4
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f2 e1       	ldi	r31, 0x12	; 18
    2452:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	7c 83       	std	Y+4, r23	; 0x04
    245c:	6b 83       	std	Y+3, r22	; 0x03
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	2f ee       	ldi	r18, 0xEF	; 239
    2464:	31 e0       	ldi	r19, 0x01	; 1
    2466:	fc 01       	movw	r30, r24
    2468:	31 83       	std	Z+1, r19	; 0x01
    246a:	20 83       	st	Z, r18
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	fc 01       	movw	r30, r24
    2472:	22 81       	ldd	r18, Z+2	; 0x02
    2474:	33 81       	ldd	r19, Z+3	; 0x03
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	fc 01       	movw	r30, r24
    247c:	33 83       	std	Z+3, r19	; 0x03
    247e:	22 83       	std	Z+2, r18	; 0x02
    2480:	24 96       	adiw	r28, 0x04	; 4
    2482:	e2 e0       	ldi	r30, 0x02	; 2
    2484:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002488 <_ZN13LiquidCrystalC1ERKS_>:
    2488:	a4 e0       	ldi	r26, 0x04	; 4
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ea e4       	ldi	r30, 0x4A	; 74
    248e:	f2 e1       	ldi	r31, 0x12	; 18
    2490:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	7c 83       	std	Y+4, r23	; 0x04
    249a:	6b 83       	std	Y+3, r22	; 0x03
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	b9 01       	movw	r22, r18
    24a6:	d1 df       	rcall	.-94     	; 0x244a <_ZN5PrintC1ERKS_>
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	2a e7       	ldi	r18, 0x7A	; 122
    24ae:	31 e0       	ldi	r19, 0x01	; 1
    24b0:	fc 01       	movw	r30, r24
    24b2:	31 83       	std	Z+1, r19	; 0x01
    24b4:	20 83       	st	Z, r18
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	fc 01       	movw	r30, r24
    24bc:	24 81       	ldd	r18, Z+4	; 0x04
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	fc 01       	movw	r30, r24
    24c4:	24 83       	std	Z+4, r18	; 0x04
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	fc 01       	movw	r30, r24
    24cc:	25 81       	ldd	r18, Z+5	; 0x05
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	fc 01       	movw	r30, r24
    24d4:	25 83       	std	Z+5, r18	; 0x05
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	fc 01       	movw	r30, r24
    24dc:	26 81       	ldd	r18, Z+6	; 0x06
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	fc 01       	movw	r30, r24
    24e4:	26 83       	std	Z+6, r18	; 0x06
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	48 e0       	ldi	r20, 0x08	; 8
    24f0:	f9 01       	movw	r30, r18
    24f2:	37 96       	adiw	r30, 0x07	; 7
    24f4:	dc 01       	movw	r26, r24
    24f6:	17 96       	adiw	r26, 0x07	; 7
    24f8:	01 90       	ld	r0, Z+
    24fa:	0d 92       	st	X+, r0
    24fc:	4a 95       	dec	r20
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <_ZN13LiquidCrystalC1ERKS_+0x70>
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	fc 01       	movw	r30, r24
    2506:	27 85       	ldd	r18, Z+15	; 0x0f
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	fc 01       	movw	r30, r24
    250e:	27 87       	std	Z+15, r18	; 0x0f
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	fc 01       	movw	r30, r24
    2516:	20 89       	ldd	r18, Z+16	; 0x10
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	fc 01       	movw	r30, r24
    251e:	20 8b       	std	Z+16, r18	; 0x10
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	fc 01       	movw	r30, r24
    2526:	21 89       	ldd	r18, Z+17	; 0x11
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	fc 01       	movw	r30, r24
    252e:	21 8b       	std	Z+17, r18	; 0x11
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	fc 01       	movw	r30, r24
    2536:	22 89       	ldd	r18, Z+18	; 0x12
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	fc 01       	movw	r30, r24
    253e:	22 8b       	std	Z+18, r18	; 0x12
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	fc 01       	movw	r30, r24
    2546:	23 89       	ldd	r18, Z+19	; 0x13
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	fc 01       	movw	r30, r24
    254e:	23 8b       	std	Z+19, r18	; 0x13
    2550:	29 81       	ldd	r18, Y+1	; 0x01
    2552:	3a 81       	ldd	r19, Y+2	; 0x02
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	fc 01       	movw	r30, r24
    255a:	84 89       	ldd	r24, Z+20	; 0x14
    255c:	95 89       	ldd	r25, Z+21	; 0x15
    255e:	a6 89       	ldd	r26, Z+22	; 0x16
    2560:	b7 89       	ldd	r27, Z+23	; 0x17
    2562:	f9 01       	movw	r30, r18
    2564:	84 8b       	std	Z+20, r24	; 0x14
    2566:	95 8b       	std	Z+21, r25	; 0x15
    2568:	a6 8b       	std	Z+22, r26	; 0x16
    256a:	b7 8b       	std	Z+23, r27	; 0x17
    256c:	24 96       	adiw	r28, 0x04	; 4
    256e:	e2 e0       	ldi	r30, 0x02	; 2
    2570:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002574 <_ZN7LCDBaseC1ERKS_>:
    2574:	a4 e0       	ldi	r26, 0x04	; 4
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e0 ec       	ldi	r30, 0xC0	; 192
    257a:	f2 e1       	ldi	r31, 0x12	; 18
    257c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	7c 83       	std	Y+4, r23	; 0x04
    2586:	6b 83       	std	Y+3, r22	; 0x03
    2588:	2b 81       	ldd	r18, Y+3	; 0x03
    258a:	3c 81       	ldd	r19, Y+4	; 0x04
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	b9 01       	movw	r22, r18
    2592:	7a df       	rcall	.-268    	; 0x2488 <_ZN13LiquidCrystalC1ERKS_>
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	26 ea       	ldi	r18, 0xA6	; 166
    259a:	31 e0       	ldi	r19, 0x01	; 1
    259c:	fc 01       	movw	r30, r24
    259e:	31 83       	std	Z+1, r19	; 0x01
    25a0:	20 83       	st	Z, r18
    25a2:	24 96       	adiw	r28, 0x04	; 4
    25a4:	e2 e0       	ldi	r30, 0x02	; 2
    25a6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000025aa <_ZN8PHSensorC1Eiib7LCDBase>:
    25aa:	aa e0       	ldi	r26, 0x0A	; 10
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb ed       	ldi	r30, 0xDB	; 219
    25b0:	f2 e1       	ldi	r31, 0x12	; 18
    25b2:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    25b6:	9b 83       	std	Y+3, r25	; 0x03
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    25ba:	7d 83       	std	Y+5, r23	; 0x05
    25bc:	6c 83       	std	Y+4, r22	; 0x04
    25be:	5f 83       	std	Y+7, r21	; 0x07
    25c0:	4e 83       	std	Y+6, r20	; 0x06
    25c2:	28 87       	std	Y+8, r18	; 0x08
    25c4:	1a 87       	std	Y+10, r17	; 0x0a
    25c6:	09 87       	std	Y+9, r16	; 0x09
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	8a d9       	rcall	.-3308   	; 0x18e2 <_ZN4erom7StorageC1Ev>
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	2e ea       	ldi	r18, 0xAE	; 174
    25d4:	31 e0       	ldi	r19, 0x01	; 1
    25d6:	fc 01       	movw	r30, r24
    25d8:	31 83       	std	Z+1, r19	; 0x01
    25da:	20 83       	st	Z, r18
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	2c 81       	ldd	r18, Y+4	; 0x04
    25e2:	3d 81       	ldd	r19, Y+5	; 0x05
    25e4:	fc 01       	movw	r30, r24
    25e6:	34 87       	std	Z+12, r19	; 0x0c
    25e8:	23 87       	std	Z+11, r18	; 0x0b
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	83 5a       	subi	r24, 0xA3	; 163
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	fc 01       	movw	r30, r24
    25f4:	11 82       	std	Z+1, r1	; 0x01
    25f6:	10 82       	st	Z, r1
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	81 5a       	subi	r24, 0xA1	; 161
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	2e 81       	ldd	r18, Y+6	; 0x06
    2602:	3f 81       	ldd	r19, Y+7	; 0x07
    2604:	fc 01       	movw	r30, r24
    2606:	31 83       	std	Z+1, r19	; 0x01
    2608:	20 83       	st	Z, r18
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	96 d5       	rcall	.+2860   	; 0x313c <_ZNSaIdEC1Ev>
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	8f 59       	subi	r24, 0x9F	; 159
    2616:	9f 4f       	sbci	r25, 0xFF	; 255
    2618:	9e 01       	movw	r18, r28
    261a:	2f 5f       	subi	r18, 0xFF	; 255
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	b9 01       	movw	r22, r18
    2620:	a5 d5       	rcall	.+2890   	; 0x316c <_ZNSt6vectorIdSaIdEEC1ERKS0_>
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	96 d5       	rcall	.+2860   	; 0x3154 <_ZNSaIdED1Ev>
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	88 59       	subi	r24, 0x98	; 152
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	fc 01       	movw	r30, r24
    2632:	11 82       	std	Z+1, r1	; 0x01
    2634:	10 82       	st	Z, r1
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	8a 58       	subi	r24, 0x8A	; 138
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	28 85       	ldd	r18, Y+8	; 0x08
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	89 58       	subi	r24, 0x89	; 137
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	29 85       	ldd	r18, Y+9	; 0x09
    264e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2650:	b9 01       	movw	r22, r18
    2652:	90 df       	rcall	.-224    	; 0x2574 <_ZN7LCDBaseC1ERKS_>
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	81 57       	subi	r24, 0x71	; 113
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	6d e0       	ldi	r22, 0x0D	; 13
    265e:	71 e0       	ldi	r23, 0x01	; 1
    2660:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	8b 56       	subi	r24, 0x6B	; 107
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	6d e0       	ldi	r22, 0x0D	; 13
    266e:	71 e0       	ldi	r23, 0x01	; 1
    2670:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	9b 81       	ldd	r25, Y+3	; 0x03
    2678:	85 56       	subi	r24, 0x65	; 101
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	3d d5       	rcall	.+2682   	; 0x30fc <_ZN4erom5EntryIdEC1Ej>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	04 d0       	rcall	.+8      	; 0x2690 <_ZN8PHSensor4InitEv>
    2688:	2a 96       	adiw	r28, 0x0a	; 10
    268a:	e4 e0       	ldi	r30, 0x04	; 4
    268c:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00002690 <_ZN8PHSensor4InitEv>:
    2690:	a6 e0       	ldi	r26, 0x06	; 6
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f3 e1       	ldi	r31, 0x13	; 19
    2698:	0c 94 81 2f 	jmp	0x5f02	; 0x5f02 <__prologue_saves__+0x1e>
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	8d e0       	ldi	r24, 0x0D	; 13
    26a4:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	85 56       	subi	r24, 0x65	; 101
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	d1 d5       	rcall	.+2978   	; 0x3254 <_ZN4erom5EntryIdE4loadEv>
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	85 56       	subi	r24, 0x65	; 101
    26b8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ba:	f1 d5       	rcall	.+3042   	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    26bc:	fc 01       	movw	r30, r24
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	a2 81       	ldd	r26, Z+2	; 0x02
    26c4:	b3 81       	ldd	r27, Z+3	; 0x03
    26c6:	11 e0       	ldi	r17, 0x01	; 1
    26c8:	9c 01       	movw	r18, r24
    26ca:	ad 01       	movw	r20, r26
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__unordsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	09 f4       	brne	.+2      	; 0x26da <_ZN8PHSensor4InitEv+0x4a>
    26d8:	10 e0       	ldi	r17, 0x00	; 0
    26da:	11 23       	and	r17, r17
    26dc:	89 f0       	breq	.+34     	; 0x2700 <_ZN8PHSensor4InitEv+0x70>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e4       	ldi	r26, 0x40	; 64
    26e4:	b0 e4       	ldi	r27, 0x40	; 64
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	ab 83       	std	Y+3, r26	; 0x03
    26ec:	bc 83       	std	Y+4, r27	; 0x04
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	85 56       	subi	r24, 0x65	; 101
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	9e 01       	movw	r18, r28
    26f8:	2f 5f       	subi	r18, 0xFF	; 255
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	b9 01       	movw	r22, r18
    26fe:	de d5       	rcall	.+3004   	; 0x32bc <_ZN4erom5EntryIdEaSERKd>
    2700:	26 96       	adiw	r28, 0x06	; 6
    2702:	e3 e0       	ldi	r30, 0x03	; 3
    2704:	0c 94 9d 2f 	jmp	0x5f3a	; 0x5f3a <__epilogue_restores__+0x1e>

00002708 <_ZN8PHSensor6UpdateEd>:
    2708:	a6 e0       	ldi	r26, 0x06	; 6
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e8       	ldi	r30, 0x8A	; 138
    270e:	f3 e1       	ldi	r31, 0x13	; 19
    2710:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	4b 83       	std	Y+3, r20	; 0x03
    271a:	5c 83       	std	Y+4, r21	; 0x04
    271c:	6d 83       	std	Y+5, r22	; 0x05
    271e:	7e 83       	std	Y+6, r23	; 0x06
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	85 56       	subi	r24, 0x65	; 101
    2726:	9f 4f       	sbci	r25, 0xFF	; 255
    2728:	9e 01       	movw	r18, r28
    272a:	2d 5f       	subi	r18, 0xFD	; 253
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	b9 01       	movw	r22, r18
    2730:	c5 d5       	rcall	.+2954   	; 0x32bc <_ZN4erom5EntryIdEaSERKd>
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	85 56       	subi	r24, 0x65	; 101
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	dd d5       	rcall	.+3002   	; 0x32f8 <_ZNK4erom5EntryIdE4saveEb>
    273e:	26 96       	adiw	r28, 0x06	; 6
    2740:	e2 e0       	ldi	r30, 0x02	; 2
    2742:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002746 <_ZN8PHSensor5GetPHEv>:
    2746:	ae e0       	ldi	r26, 0x0E	; 14
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e9 ea       	ldi	r30, 0xA9	; 169
    274c:	f3 e1       	ldi	r31, 0x13	; 19
    274e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2752:	9e 87       	std	Y+14, r25	; 0x0e
    2754:	8d 87       	std	Y+13, r24	; 0x0d
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	9e 85       	ldd	r25, Y+14	; 0x0e
    275a:	86 59       	subi	r24, 0x96	; 150
    275c:	9f 4f       	sbci	r25, 0xFF	; 255
    275e:	fc 01       	movw	r30, r24
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	a2 81       	ldd	r26, Z+2	; 0x02
    2766:	b3 81       	ldd	r27, Z+3	; 0x03
    2768:	fe 01       	movw	r30, r28
    276a:	37 96       	adiw	r30, 0x07	; 7
    276c:	22 e0       	ldi	r18, 0x02	; 2
    276e:	ac 01       	movw	r20, r24
    2770:	bd 01       	movw	r22, r26
    2772:	cf 01       	movw	r24, r30
    2774:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN6StringC1Efh>
    2778:	ce 01       	movw	r24, r28
    277a:	07 96       	adiw	r24, 0x07	; 7
    277c:	30 de       	rcall	.-928    	; 0x23de <_ZNK6String5c_strEv>
    277e:	9c 01       	movw	r18, r24
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	81 57       	subi	r24, 0x71	; 113
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	b9 01       	movw	r22, r18
    278a:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    278e:	ce 01       	movw	r24, r28
    2790:	07 96       	adiw	r24, 0x07	; 7
    2792:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	9e 85       	ldd	r25, Y+14	; 0x0e
    279a:	82 59       	subi	r24, 0x92	; 146
    279c:	9f 4f       	sbci	r25, 0xFF	; 255
    279e:	fc 01       	movw	r30, r24
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	a2 81       	ldd	r26, Z+2	; 0x02
    27a6:	b3 81       	ldd	r27, Z+3	; 0x03
    27a8:	22 e0       	ldi	r18, 0x02	; 2
    27aa:	ac 01       	movw	r20, r24
    27ac:	bd 01       	movw	r22, r26
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN6StringC1Efh>
    27b6:	ce 01       	movw	r24, r28
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	11 de       	rcall	.-990    	; 0x23de <_ZNK6String5c_strEv>
    27bc:	9c 01       	movw	r18, r24
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	8b 56       	subi	r24, 0x6B	; 107
    27c4:	9f 4f       	sbci	r25, 0xFF	; 255
    27c6:	b9 01       	movw	r22, r18
    27c8:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	86 59       	subi	r24, 0x96	; 150
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	fc 01       	movw	r30, r24
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	a2 81       	ldd	r26, Z+2	; 0x02
    27e4:	b3 81       	ldd	r27, Z+3	; 0x03
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	2e 96       	adiw	r28, 0x0e	; 14
    27ec:	e2 e0       	ldi	r30, 0x02	; 2
    27ee:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000027f2 <_ZN8PHSensor11CalculatePHEv>:
    27f2:	a1 e1       	ldi	r26, 0x11	; 17
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	ef ef       	ldi	r30, 0xFF	; 255
    27f8:	f3 e1       	ldi	r31, 0x13	; 19
    27fa:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x18>
    27fe:	99 8b       	std	Y+17, r25	; 0x11
    2800:	88 8b       	std	Y+16, r24	; 0x10
    2802:	88 89       	ldd	r24, Y+16	; 0x10
    2804:	99 89       	ldd	r25, Y+17	; 0x11
    2806:	d1 d0       	rcall	.+418    	; 0x29aa <_ZN8PHSensor10GetPHValueEv>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	28 89       	ldd	r18, Y+16	; 0x10
    280e:	39 89       	ldd	r19, Y+17	; 0x11
    2810:	26 59       	subi	r18, 0x96	; 150
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	f9 01       	movw	r30, r18
    2816:	80 83       	st	Z, r24
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	a2 83       	std	Z+2, r26	; 0x02
    281c:	b3 83       	std	Z+3, r27	; 0x03
    281e:	89 e0       	ldi	r24, 0x09	; 9
    2820:	93 e0       	ldi	r25, 0x03	; 3
    2822:	fc 01       	movw	r30, r24
    2824:	80 81       	ld	r24, Z
    2826:	88 23       	and	r24, r24
    2828:	89 f4       	brne	.+34     	; 0x284c <_ZN8PHSensor11CalculatePHEv+0x5a>
    282a:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2836:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    283a:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    283e:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2842:	89 e0       	ldi	r24, 0x09	; 9
    2844:	93 e0       	ldi	r25, 0x03	; 3
    2846:	21 e0       	ldi	r18, 0x01	; 1
    2848:	fc 01       	movw	r30, r24
    284a:	20 83       	st	Z, r18
    284c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2858:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    285c:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    2860:	b0 91 24 03 	lds	r27, 0x0324	; 0x800324 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2864:	79 01       	movw	r14, r18
    2866:	8a 01       	movw	r16, r20
    2868:	e8 1a       	sub	r14, r24
    286a:	f9 0a       	sbc	r15, r25
    286c:	0a 0b       	sbc	r16, r26
    286e:	1b 0b       	sbc	r17, r27
    2870:	d8 01       	movw	r26, r16
    2872:	c7 01       	movw	r24, r14
    2874:	21 e0       	ldi	r18, 0x01	; 1
    2876:	81 36       	cpi	r24, 0x61	; 97
    2878:	9a 4e       	sbci	r25, 0xEA	; 234
    287a:	a1 05       	cpc	r26, r1
    287c:	b1 05       	cpc	r27, r1
    287e:	08 f4       	brcc	.+2      	; 0x2882 <_ZN8PHSensor11CalculatePHEv+0x90>
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	22 23       	and	r18, r18
    2884:	09 f4       	brne	.+2      	; 0x2888 <_ZN8PHSensor11CalculatePHEv+0x96>
    2886:	8d c0       	rjmp	.+282    	; 0x29a2 <_ZN8PHSensor11CalculatePHEv+0x1b0>
    2888:	8c e3       	ldi	r24, 0x3C	; 60
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	88 89       	ldd	r24, Y+16	; 0x10
    2892:	99 89       	ldd	r25, Y+17	; 0x11
    2894:	8f 59       	subi	r24, 0x9F	; 159
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	69 d5       	rcall	.+2770   	; 0x336c <_ZNKSt6vectorIdSaIdEE4sizeEv>
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	2b 81       	ldd	r18, Y+3	; 0x03
    28a0:	3c 81       	ldd	r19, Y+4	; 0x04
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	82 17       	cp	r24, r18
    28a8:	93 07       	cpc	r25, r19
    28aa:	bc f0       	brlt	.+46     	; 0x28da <_ZN8PHSensor11CalculatePHEv+0xe8>
    28ac:	88 89       	ldd	r24, Y+16	; 0x10
    28ae:	99 89       	ldd	r25, Y+17	; 0x11
    28b0:	86 59       	subi	r24, 0x96	; 150
    28b2:	9f 4f       	sbci	r25, 0xFF	; 255
    28b4:	fc 01       	movw	r30, r24
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	a2 81       	ldd	r26, Z+2	; 0x02
    28bc:	b3 81       	ldd	r27, Z+3	; 0x03
    28be:	8c 87       	std	Y+12, r24	; 0x0c
    28c0:	9d 87       	std	Y+13, r25	; 0x0d
    28c2:	ae 87       	std	Y+14, r26	; 0x0e
    28c4:	bf 87       	std	Y+15, r27	; 0x0f
    28c6:	88 89       	ldd	r24, Y+16	; 0x10
    28c8:	99 89       	ldd	r25, Y+17	; 0x11
    28ca:	8f 59       	subi	r24, 0x9F	; 159
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	9e 01       	movw	r18, r28
    28d0:	24 5f       	subi	r18, 0xF4	; 244
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	b9 01       	movw	r22, r18
    28d6:	5b d5       	rcall	.+2742   	; 0x338e <_ZNSt6vectorIdSaIdEE9push_backERKd>
    28d8:	27 c0       	rjmp	.+78     	; 0x2928 <_ZN8PHSensor11CalculatePHEv+0x136>
    28da:	88 89       	ldd	r24, Y+16	; 0x10
    28dc:	99 89       	ldd	r25, Y+17	; 0x11
    28de:	88 59       	subi	r24, 0x98	; 152
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	fc 01       	movw	r30, r24
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	ac 01       	movw	r20, r24
    28ea:	4f 5f       	subi	r20, 0xFF	; 255
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	28 89       	ldd	r18, Y+16	; 0x10
    28f0:	39 89       	ldd	r19, Y+17	; 0x11
    28f2:	28 59       	subi	r18, 0x98	; 152
    28f4:	3f 4f       	sbci	r19, 0xFF	; 255
    28f6:	f9 01       	movw	r30, r18
    28f8:	51 83       	std	Z+1, r21	; 0x01
    28fa:	40 83       	st	Z, r20
    28fc:	9c 01       	movw	r18, r24
    28fe:	88 89       	ldd	r24, Y+16	; 0x10
    2900:	99 89       	ldd	r25, Y+17	; 0x11
    2902:	8f 59       	subi	r24, 0x9F	; 159
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	b9 01       	movw	r22, r18
    2908:	5c d5       	rcall	.+2744   	; 0x33c2 <_ZNSt6vectorIdSaIdEEixEj>
    290a:	9c 01       	movw	r18, r24
    290c:	88 89       	ldd	r24, Y+16	; 0x10
    290e:	99 89       	ldd	r25, Y+17	; 0x11
    2910:	86 59       	subi	r24, 0x96	; 150
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	fc 01       	movw	r30, r24
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	a2 81       	ldd	r26, Z+2	; 0x02
    291c:	b3 81       	ldd	r27, Z+3	; 0x03
    291e:	f9 01       	movw	r30, r18
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
    2928:	88 89       	ldd	r24, Y+16	; 0x10
    292a:	99 89       	ldd	r25, Y+17	; 0x11
    292c:	88 59       	subi	r24, 0x98	; 152
    292e:	9f 4f       	sbci	r25, 0xFF	; 255
    2930:	fc 01       	movw	r30, r24
    2932:	20 81       	ld	r18, Z
    2934:	31 81       	ldd	r19, Z+1	; 0x01
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	28 17       	cp	r18, r24
    293c:	39 07       	cpc	r19, r25
    293e:	39 f4       	brne	.+14     	; 0x294e <_ZN8PHSensor11CalculatePHEv+0x15c>
    2940:	88 89       	ldd	r24, Y+16	; 0x10
    2942:	99 89       	ldd	r25, Y+17	; 0x11
    2944:	88 59       	subi	r24, 0x98	; 152
    2946:	9f 4f       	sbci	r25, 0xFF	; 255
    2948:	fc 01       	movw	r30, r24
    294a:	11 82       	std	Z+1, r1	; 0x01
    294c:	10 82       	st	Z, r1
    294e:	88 89       	ldd	r24, Y+16	; 0x10
    2950:	99 89       	ldd	r25, Y+17	; 0x11
    2952:	9c 01       	movw	r18, r24
    2954:	2f 59       	subi	r18, 0x9F	; 159
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	ce 01       	movw	r24, r28
    295a:	05 96       	adiw	r24, 0x05	; 5
    295c:	b9 01       	movw	r22, r18
    295e:	4c d5       	rcall	.+2712   	; 0x33f8 <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    2960:	9e 01       	movw	r18, r28
    2962:	2b 5f       	subi	r18, 0xFB	; 251
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	88 89       	ldd	r24, Y+16	; 0x10
    2968:	99 89       	ldd	r25, Y+17	; 0x11
    296a:	b9 01       	movw	r22, r18
    296c:	dc d1       	rcall	.+952    	; 0x2d26 <_ZN8PHSensor16CalculateAverageESt6vectorIdSaIdEE>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	28 89       	ldd	r18, Y+16	; 0x10
    2974:	39 89       	ldd	r19, Y+17	; 0x11
    2976:	22 59       	subi	r18, 0x92	; 146
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	f9 01       	movw	r30, r18
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
    2984:	ce 01       	movw	r24, r28
    2986:	05 96       	adiw	r24, 0x05	; 5
    2988:	22 d4       	rcall	.+2116   	; 0x31ce <_ZNSt6vectorIdSaIdEED1Ev>
    298a:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2996:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    299a:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    299e:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    29a2:	61 96       	adiw	r28, 0x11	; 17
    29a4:	e6 e0       	ldi	r30, 0x06	; 6
    29a6:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x18>

000029aa <_ZN8PHSensor10GetPHValueEv>:
    29aa:	ac e0       	ldi	r26, 0x0C	; 12
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	eb ed       	ldi	r30, 0xDB	; 219
    29b0:	f4 e1       	ldi	r31, 0x14	; 20
    29b2:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__prologue_saves__+0x14>
    29b6:	9c 87       	std	Y+12, r25	; 0x0c
    29b8:	8b 87       	std	Y+11, r24	; 0x0b
    29ba:	81 e1       	ldi	r24, 0x11	; 17
    29bc:	93 e0       	ldi	r25, 0x03	; 3
    29be:	fc 01       	movw	r30, r24
    29c0:	80 81       	ld	r24, Z
    29c2:	88 23       	and	r24, r24
    29c4:	89 f4       	brne	.+34     	; 0x29e8 <_ZN8PHSensor10GetPHValueEv+0x3e>
    29c6:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    29d2:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    29d6:	a0 93 27 03 	sts	0x0327, r26	; 0x800327 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    29da:	b0 93 28 03 	sts	0x0328, r27	; 0x800328 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    29de:	81 e1       	ldi	r24, 0x11	; 17
    29e0:	93 e0       	ldi	r25, 0x03	; 3
    29e2:	21 e0       	ldi	r18, 0x01	; 1
    29e4:	fc 01       	movw	r30, r24
    29e6:	20 83       	st	Z, r18
    29e8:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    29ec:	9b 01       	movw	r18, r22
    29ee:	ac 01       	movw	r20, r24
    29f0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    29f4:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    29f8:	a0 91 27 03 	lds	r26, 0x0327	; 0x800327 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    29fc:	b0 91 28 03 	lds	r27, 0x0328	; 0x800328 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    2a00:	79 01       	movw	r14, r18
    2a02:	8a 01       	movw	r16, r20
    2a04:	e8 1a       	sub	r14, r24
    2a06:	f9 0a       	sbc	r15, r25
    2a08:	0a 0b       	sbc	r16, r26
    2a0a:	1b 0b       	sbc	r17, r27
    2a0c:	d8 01       	movw	r26, r16
    2a0e:	c7 01       	movw	r24, r14
    2a10:	21 e0       	ldi	r18, 0x01	; 1
    2a12:	89 3e       	cpi	r24, 0xE9	; 233
    2a14:	93 40       	sbci	r25, 0x03	; 3
    2a16:	a1 05       	cpc	r26, r1
    2a18:	b1 05       	cpc	r27, r1
    2a1a:	08 f4       	brcc	.+2      	; 0x2a1e <_ZN8PHSensor10GetPHValueEv+0x74>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	22 23       	and	r18, r18
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <_ZN8PHSensor10GetPHValueEv+0x7a>
    2a22:	af c0       	rjmp	.+350    	; 0x2b82 <_ZN8PHSensor10GetPHValueEv+0x1d8>
    2a24:	88 e2       	ldi	r24, 0x28	; 40
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a30:	83 5a       	subi	r24, 0xA3	; 163
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	fc 01       	movw	r30, r24
    2a36:	00 81       	ld	r16, Z
    2a38:	11 81       	ldd	r17, Z+1	; 0x01
    2a3a:	98 01       	movw	r18, r16
    2a3c:	2f 5f       	subi	r18, 0xFF	; 255
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a42:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a44:	83 5a       	subi	r24, 0xA3	; 163
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	fc 01       	movw	r30, r24
    2a4a:	31 83       	std	Z+1, r19	; 0x01
    2a4c:	20 83       	st	Z, r18
    2a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a50:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a52:	fc 01       	movw	r30, r24
    2a54:	83 85       	ldd	r24, Z+11	; 0x0b
    2a56:	94 85       	ldd	r25, Z+12	; 0x0c
    2a58:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <analogRead>
    2a5c:	ac 01       	movw	r20, r24
    2a5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a60:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a62:	c8 01       	movw	r24, r16
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	82 0f       	add	r24, r18
    2a6a:	93 1f       	adc	r25, r19
    2a6c:	0d 96       	adiw	r24, 0x0d	; 13
    2a6e:	fc 01       	movw	r30, r24
    2a70:	51 83       	std	Z+1, r21	; 0x01
    2a72:	40 83       	st	Z, r20
    2a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a78:	83 5a       	subi	r24, 0xA3	; 163
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	20 81       	ld	r18, Z
    2a80:	31 81       	ldd	r19, Z+1	; 0x01
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	28 17       	cp	r18, r24
    2a88:	39 07       	cpc	r19, r25
    2a8a:	39 f4       	brne	.+14     	; 0x2a9a <_ZN8PHSensor10GetPHValueEv+0xf0>
    2a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a90:	83 5a       	subi	r24, 0xA3	; 163
    2a92:	9f 4f       	sbci	r25, 0xFF	; 255
    2a94:	fc 01       	movw	r30, r24
    2a96:	11 82       	std	Z+1, r1	; 0x01
    2a98:	10 82       	st	Z, r1
    2a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a9e:	9c 01       	movw	r18, r24
    2aa0:	23 5f       	subi	r18, 0xF3	; 243
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	49 81       	ldd	r20, Y+1	; 0x01
    2aa6:	5a 81       	ldd	r21, Y+2	; 0x02
    2aa8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aaa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aac:	b9 01       	movw	r22, r18
    2aae:	9a d1       	rcall	.+820    	; 0x2de4 <_ZN8PHSensor16CalculateAverageEPii>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	ad 83       	std	Y+5, r26	; 0x05
    2aba:	be 83       	std	Y+6, r27	; 0x06
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 ea       	ldi	r20, 0xA0	; 160
    2ac2:	50 e4       	ldi	r21, 0x40	; 64
    2ac4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ac6:	7c 81       	ldd	r23, Y+4	; 0x04
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__divsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aec:	2e 58       	subi	r18, 0x8E	; 142
    2aee:	3f 4f       	sbci	r19, 0xFF	; 255
    2af0:	f9 01       	movw	r30, r18
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
    2afa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2afc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2afe:	8e 58       	subi	r24, 0x8E	; 142
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	fc 01       	movw	r30, r24
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	a2 81       	ldd	r26, Z+2	; 0x02
    2b0a:	b3 81       	ldd	r27, Z+3	; 0x03
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	ad 01       	movw	r20, r26
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	90 e4       	ldi	r25, 0x40	; 64
    2b18:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__subsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	2c ee       	ldi	r18, 0xEC	; 236
    2b22:	31 e5       	ldi	r19, 0x51	; 81
    2b24:	48 e3       	ldi	r20, 0x38	; 56
    2b26:	5e e3       	ldi	r21, 0x3E	; 62
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__divsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 ee       	ldi	r20, 0xE0	; 224
    2b3a:	50 e4       	ldi	r21, 0x40	; 64
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__addsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	6c 01       	movw	r12, r24
    2b4a:	7d 01       	movw	r14, r26
    2b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b50:	85 56       	subi	r24, 0x65	; 101
    2b52:	9f 4f       	sbci	r25, 0xFF	; 255
    2b54:	a4 d3       	rcall	.+1864   	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    2b56:	fc 01       	movw	r30, r24
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b5e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b60:	9c 01       	movw	r18, r24
    2b62:	ad 01       	movw	r20, r26
    2b64:	c7 01       	movw	r24, r14
    2b66:	b6 01       	movw	r22, r12
    2b68:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__addsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8f 83       	std	Y+7, r24	; 0x07
    2b72:	98 87       	std	Y+8, r25	; 0x08
    2b74:	a9 87       	std	Y+9, r26	; 0x09
    2b76:	ba 87       	std	Y+10, r27	; 0x0a
    2b78:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7a:	98 85       	ldd	r25, Y+8	; 0x08
    2b7c:	a9 85       	ldd	r26, Y+9	; 0x09
    2b7e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b80:	09 c0       	rjmp	.+18     	; 0x2b94 <_ZN8PHSensor10GetPHValueEv+0x1ea>
    2b82:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b84:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b86:	86 59       	subi	r24, 0x96	; 150
    2b88:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	a2 81       	ldd	r26, Z+2	; 0x02
    2b92:	b3 81       	ldd	r27, Z+3	; 0x03
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	2c 96       	adiw	r28, 0x0c	; 12
    2b9a:	e8 e0       	ldi	r30, 0x08	; 8
    2b9c:	0c 94 98 2f 	jmp	0x5f30	; 0x5f30 <__epilogue_restores__+0x14>

00002ba0 <_ZN15StringSumHelperD1Ev>:
    2ba0:	a2 e0       	ldi	r26, 0x02	; 2
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    2ba6:	f5 e1       	ldi	r31, 0x15	; 21
    2ba8:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    2bb8:	22 96       	adiw	r28, 0x02	; 2
    2bba:	e2 e0       	ldi	r30, 0x02	; 2
    2bbc:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002bc0 <_ZN8PHSensor12PrintPHToLCDEv>:
    2bc0:	ae e1       	ldi	r26, 0x1E	; 30
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    2bc6:	f5 e1       	ldi	r31, 0x15	; 21
    2bc8:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    2bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bce:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd4:	b8 dd       	rcall	.-1168   	; 0x2746 <_ZN8PHSensor5GetPHEv>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	ab 83       	std	Y+3, r26	; 0x03
    2be0:	bc 83       	std	Y+4, r27	; 0x04
    2be2:	89 e1       	ldi	r24, 0x19	; 25
    2be4:	93 e0       	ldi	r25, 0x03	; 3
    2be6:	fc 01       	movw	r30, r24
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	89 f4       	brne	.+34     	; 0x2c10 <_ZN8PHSensor12PrintPHToLCDEv+0x50>
    2bee:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2bfa:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2bfe:	a0 93 2b 03 	sts	0x032B, r26	; 0x80032b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2c02:	b0 93 2c 03 	sts	0x032C, r27	; 0x80032c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2c06:	89 e1       	ldi	r24, 0x19	; 25
    2c08:	93 e0       	ldi	r25, 0x03	; 3
    2c0a:	21 e0       	ldi	r18, 0x01	; 1
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	20 83       	st	Z, r18
    2c10:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    2c14:	9b 01       	movw	r18, r22
    2c16:	ac 01       	movw	r20, r24
    2c18:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2c1c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2c20:	a0 91 2b 03 	lds	r26, 0x032B	; 0x80032b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2c24:	b0 91 2c 03 	lds	r27, 0x032C	; 0x80032c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2c28:	28 1b       	sub	r18, r24
    2c2a:	39 0b       	sbc	r19, r25
    2c2c:	4a 0b       	sbc	r20, r26
    2c2e:	5b 0b       	sbc	r21, r27
    2c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c34:	81 5a       	subi	r24, 0xA1	; 161
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	fc 01       	movw	r30, r24
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	80 57       	subi	r24, 0x70	; 112
    2c40:	9e 4f       	sbci	r25, 0xFE	; 254
    2c42:	09 2e       	mov	r0, r25
    2c44:	00 0c       	add	r0, r0
    2c46:	aa 0b       	sbc	r26, r26
    2c48:	bb 0b       	sbc	r27, r27
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	82 17       	cp	r24, r18
    2c4e:	93 07       	cpc	r25, r19
    2c50:	a4 07       	cpc	r26, r20
    2c52:	b5 07       	cpc	r27, r21
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <_ZN8PHSensor12PrintPHToLCDEv+0x98>
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	66 23       	and	r22, r22
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <_ZN8PHSensor12PrintPHToLCDEv+0x9e>
    2c5c:	60 c0       	rjmp	.+192    	; 0x2d1e <_ZN8PHSensor12PrintPHToLCDEv+0x15e>
    2c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c62:	8a 58       	subi	r24, 0x8A	; 138
    2c64:	9f 4f       	sbci	r25, 0xFF	; 255
    2c66:	fc 01       	movw	r30, r24
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 23       	and	r24, r24
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <_ZN8PHSensor12PrintPHToLCDEv+0xb0>
    2c6e:	41 c0       	rjmp	.+130    	; 0x2cf2 <_ZN8PHSensor12PrintPHToLCDEv+0x132>
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	ab 81       	ldd	r26, Y+3	; 0x03
    2c76:	bc 81       	ldd	r27, Y+4	; 0x04
    2c78:	fe 01       	movw	r30, r28
    2c7a:	71 96       	adiw	r30, 0x11	; 17
    2c7c:	22 e0       	ldi	r18, 0x02	; 2
    2c7e:	ac 01       	movw	r20, r24
    2c80:	bd 01       	movw	r22, r26
    2c82:	cf 01       	movw	r24, r30
    2c84:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <_ZN6StringC1Edh>
    2c88:	ce 01       	movw	r24, r28
    2c8a:	0b 96       	adiw	r24, 0x0b	; 11
    2c8c:	6e e0       	ldi	r22, 0x0E	; 14
    2c8e:	71 e0       	ldi	r23, 0x01	; 1
    2c90:	b7 db       	rcall	.-2194   	; 0x2400 <_ZN15StringSumHelperC1EPKc>
    2c92:	9e 01       	movw	r18, r28
    2c94:	2f 5e       	subi	r18, 0xEF	; 239
    2c96:	3f 4f       	sbci	r19, 0xFF	; 255
    2c98:	ce 01       	movw	r24, r28
    2c9a:	0b 96       	adiw	r24, 0x0b	; 11
    2c9c:	b9 01       	movw	r22, r18
    2c9e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <_ZplRK15StringSumHelperRK6String>
    2ca2:	9c 01       	movw	r18, r24
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	47 96       	adiw	r24, 0x17	; 23
    2ca8:	b9 01       	movw	r22, r18
    2caa:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    2cae:	ce 01       	movw	r24, r28
    2cb0:	0b 96       	adiw	r24, 0x0b	; 11
    2cb2:	76 df       	rcall	.-276    	; 0x2ba0 <_ZN15StringSumHelperD1Ev>
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	41 96       	adiw	r24, 0x11	; 17
    2cb8:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    2cbc:	9e 01       	movw	r18, r28
    2cbe:	29 5e       	subi	r18, 0xE9	; 233
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	05 96       	adiw	r24, 0x05	; 5
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    2ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd0:	89 58       	subi	r24, 0x89	; 137
    2cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd4:	9e 01       	movw	r18, r28
    2cd6:	2b 5f       	subi	r18, 0xFB	; 251
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	a9 01       	movw	r20, r18
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	5b db       	rcall	.-2378   	; 0x2398 <_ZN7LCDBase9PrintLineEs6String>
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	05 96       	adiw	r24, 0x05	; 5
    2ce6:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    2cea:	ce 01       	movw	r24, r28
    2cec:	47 96       	adiw	r24, 0x17	; 23
    2cee:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    2cf2:	8d e0       	ldi	r24, 0x0D	; 13
    2cf4:	0e 94 8d 2c 	call	0x591a	; 0x591a <digitalRead>
    2cf8:	98 2f       	mov	r25, r24
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	89 27       	eor	r24, r25
    2cfe:	68 2f       	mov	r22, r24
    2d00:	8d e0       	ldi	r24, 0x0D	; 13
    2d02:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
    2d06:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2d12:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2d16:	a0 93 2b 03 	sts	0x032B, r26	; 0x80032b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2d1a:	b0 93 2c 03 	sts	0x032C, r27	; 0x80032c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2d1e:	6e 96       	adiw	r28, 0x1e	; 30
    2d20:	e2 e0       	ldi	r30, 0x02	; 2
    2d22:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00002d26 <_ZN8PHSensor16CalculateAverageESt6vectorIdSaIdEE>:
    2d26:	ae e0       	ldi	r26, 0x0E	; 14
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e9 e9       	ldi	r30, 0x99	; 153
    2d2c:	f6 e1       	ldi	r31, 0x16	; 22
    2d2e:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	8b 87       	std	Y+11, r24	; 0x0b
    2d36:	7e 87       	std	Y+14, r23	; 0x0e
    2d38:	6d 87       	std	Y+13, r22	; 0x0d
    2d3a:	19 82       	std	Y+1, r1	; 0x01
    2d3c:	1a 82       	std	Y+2, r1	; 0x02
    2d3e:	1b 82       	std	Y+3, r1	; 0x03
    2d40:	1c 82       	std	Y+4, r1	; 0x04
    2d42:	1e 82       	std	Y+6, r1	; 0x06
    2d44:	1d 82       	std	Y+5, r1	; 0x05
    2d46:	1e c0       	rjmp	.+60     	; 0x2d84 <_ZN8PHSensor16CalculateAverageESt6vectorIdSaIdEE+0x5e>
    2d48:	2d 81       	ldd	r18, Y+5	; 0x05
    2d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	b9 01       	movw	r22, r18
    2d52:	37 d3       	rcall	.+1646   	; 0x33c2 <_ZNSt6vectorIdSaIdEEixEj>
    2d54:	fc 01       	movw	r30, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	a2 81       	ldd	r26, Z+2	; 0x02
    2d5c:	b3 81       	ldd	r27, Z+3	; 0x03
    2d5e:	9c 01       	movw	r18, r24
    2d60:	ad 01       	movw	r20, r26
    2d62:	69 81       	ldd	r22, Y+1	; 0x01
    2d64:	7a 81       	ldd	r23, Y+2	; 0x02
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__addsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	ab 83       	std	Y+3, r26	; 0x03
    2d78:	bc 83       	std	Y+4, r27	; 0x04
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	0d 81       	ldd	r16, Y+5	; 0x05
    2d86:	1e 81       	ldd	r17, Y+6	; 0x06
    2d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	ef d2       	rcall	.+1502   	; 0x336c <_ZNKSt6vectorIdSaIdEE4sizeEv>
    2d8e:	21 e0       	ldi	r18, 0x01	; 1
    2d90:	08 17       	cp	r16, r24
    2d92:	19 07       	cpc	r17, r25
    2d94:	08 f0       	brcs	.+2      	; 0x2d98 <_ZN8PHSensor16CalculateAverageESt6vectorIdSaIdEE+0x72>
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	22 23       	and	r18, r18
    2d9a:	b1 f6       	brne	.-84     	; 0x2d48 <_ZN8PHSensor16CalculateAverageESt6vectorIdSaIdEE+0x22>
    2d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da0:	e5 d2       	rcall	.+1482   	; 0x336c <_ZNKSt6vectorIdSaIdEE4sizeEv>
    2da2:	cc 01       	movw	r24, r24
    2da4:	a0 e0       	ldi	r26, 0x00	; 0
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatunsisf>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9c 01       	movw	r18, r24
    2db6:	ad 01       	movw	r20, r26
    2db8:	69 81       	ldd	r22, Y+1	; 0x01
    2dba:	7a 81       	ldd	r23, Y+2	; 0x02
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__divsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	8f 83       	std	Y+7, r24	; 0x07
    2dca:	98 87       	std	Y+8, r25	; 0x08
    2dcc:	a9 87       	std	Y+9, r26	; 0x09
    2dce:	ba 87       	std	Y+10, r27	; 0x0a
    2dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd2:	98 85       	ldd	r25, Y+8	; 0x08
    2dd4:	a9 85       	ldd	r26, Y+9	; 0x09
    2dd6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	2e 96       	adiw	r28, 0x0e	; 14
    2dde:	e4 e0       	ldi	r30, 0x04	; 4
    2de0:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00002de4 <_ZN8PHSensor16CalculateAverageEPii>:
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	68 97       	sbiw	r28, 0x18	; 24
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	8f 87       	std	Y+15, r24	; 0x0f
    2e04:	7a 8b       	std	Y+18, r23	; 0x12
    2e06:	69 8b       	std	Y+17, r22	; 0x11
    2e08:	5c 8b       	std	Y+20, r21	; 0x14
    2e0a:	4b 8b       	std	Y+19, r20	; 0x13
    2e0c:	1f 82       	std	Y+7, r1	; 0x07
    2e0e:	18 86       	std	Y+8, r1	; 0x08
    2e10:	19 86       	std	Y+9, r1	; 0x09
    2e12:	1a 86       	std	Y+10, r1	; 0x0a
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	18 16       	cp	r1, r24
    2e1a:	19 06       	cpc	r1, r25
    2e1c:	5c f0       	brlt	.+22     	; 0x2e34 <_ZN8PHSensor16CalculateAverageEPii+0x50>
    2e1e:	80 ea       	ldi	r24, 0xA0	; 160
    2e20:	93 e0       	ldi	r25, 0x03	; 3
    2e22:	bc 01       	movw	r22, r24
    2e24:	82 e6       	ldi	r24, 0x62	; 98
    2e26:	95 e0       	ldi	r25, 0x05	; 5
    2e28:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	dc 01       	movw	r26, r24
    2e32:	2b c1       	rjmp	.+598    	; 0x308a <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	05 97       	sbiw	r24, 0x05	; 5
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <_ZN8PHSensor16CalculateAverageEPii+0x5a>
    2e3c:	49 c0       	rjmp	.+146    	; 0x2ed0 <_ZN8PHSensor16CalculateAverageEPii+0xec>
    2e3e:	1a 82       	std	Y+2, r1	; 0x02
    2e40:	19 82       	std	Y+1, r1	; 0x01
    2e42:	20 c0       	rjmp	.+64     	; 0x2e84 <_ZN8PHSensor16CalculateAverageEPii+0xa0>
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	29 89       	ldd	r18, Y+17	; 0x11
    2e4e:	3a 89       	ldd	r19, Y+18	; 0x12
    2e50:	82 0f       	add	r24, r18
    2e52:	93 1f       	adc	r25, r19
    2e54:	fc 01       	movw	r30, r24
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	09 2e       	mov	r0, r25
    2e5c:	00 0c       	add	r0, r0
    2e5e:	aa 0b       	sbc	r26, r26
    2e60:	bb 0b       	sbc	r27, r27
    2e62:	2f 81       	ldd	r18, Y+7	; 0x07
    2e64:	38 85       	ldd	r19, Y+8	; 0x08
    2e66:	49 85       	ldd	r20, Y+9	; 0x09
    2e68:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e6a:	82 0f       	add	r24, r18
    2e6c:	93 1f       	adc	r25, r19
    2e6e:	a4 1f       	adc	r26, r20
    2e70:	b5 1f       	adc	r27, r21
    2e72:	8f 83       	std	Y+7, r24	; 0x07
    2e74:	98 87       	std	Y+8, r25	; 0x08
    2e76:	a9 87       	std	Y+9, r26	; 0x09
    2e78:	ba 87       	std	Y+10, r27	; 0x0a
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	01 96       	adiw	r24, 0x01	; 1
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	3a 81       	ldd	r19, Y+2	; 0x02
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8c:	28 17       	cp	r18, r24
    2e8e:	39 07       	cpc	r19, r25
    2e90:	cc f2       	brlt	.-78     	; 0x2e44 <_ZN8PHSensor16CalculateAverageEPii+0x60>
    2e92:	8b 89       	ldd	r24, Y+19	; 0x13
    2e94:	9c 89       	ldd	r25, Y+20	; 0x14
    2e96:	9c 01       	movw	r18, r24
    2e98:	99 0f       	add	r25, r25
    2e9a:	44 0b       	sbc	r20, r20
    2e9c:	55 0b       	sbc	r21, r21
    2e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea0:	98 85       	ldd	r25, Y+8	; 0x08
    2ea2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ea4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divmodsi4>
    2eae:	da 01       	movw	r26, r20
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__floatsisf>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8b 87       	std	Y+11, r24	; 0x0b
    2ec0:	9c 87       	std	Y+12, r25	; 0x0c
    2ec2:	ad 87       	std	Y+13, r26	; 0x0d
    2ec4:	be 87       	std	Y+14, r27	; 0x0e
    2ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eca:	ad 85       	ldd	r26, Y+13	; 0x0d
    2ecc:	be 85       	ldd	r27, Y+14	; 0x0e
    2ece:	dd c0       	rjmp	.+442    	; 0x308a <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2ed0:	89 89       	ldd	r24, Y+17	; 0x11
    2ed2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	20 81       	ld	r18, Z
    2ed8:	31 81       	ldd	r19, Z+1	; 0x01
    2eda:	89 89       	ldd	r24, Y+17	; 0x11
    2edc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ede:	02 96       	adiw	r24, 0x02	; 2
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	28 17       	cp	r18, r24
    2ee8:	39 07       	cpc	r19, r25
    2eea:	7c f4       	brge	.+30     	; 0x2f0a <_ZN8PHSensor16CalculateAverageEPii+0x126>
    2eec:	89 89       	ldd	r24, Y+17	; 0x11
    2eee:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	89 89       	ldd	r24, Y+17	; 0x11
    2efc:	9a 89       	ldd	r25, Y+18	; 0x12
    2efe:	fc 01       	movw	r30, r24
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	0e c0       	rjmp	.+28     	; 0x2f26 <_ZN8PHSensor16CalculateAverageEPii+0x142>
    2f0a:	89 89       	ldd	r24, Y+17	; 0x11
    2f0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0e:	fc 01       	movw	r30, r24
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	89 89       	ldd	r24, Y+17	; 0x11
    2f1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	9a 83       	std	Y+2, r25	; 0x02
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	80 c0       	rjmp	.+256    	; 0x3030 <_ZN8PHSensor16CalculateAverageEPii+0x24c>
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	29 89       	ldd	r18, Y+17	; 0x11
    2f3a:	3a 89       	ldd	r19, Y+18	; 0x12
    2f3c:	82 0f       	add	r24, r18
    2f3e:	93 1f       	adc	r25, r19
    2f40:	fc 01       	movw	r30, r24
    2f42:	20 81       	ld	r18, Z
    2f44:	31 81       	ldd	r19, Z+1	; 0x01
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	04 f5       	brge	.+64     	; 0x2f90 <_ZN8PHSensor16CalculateAverageEPii+0x1ac>
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	09 2e       	mov	r0, r25
    2f56:	00 0c       	add	r0, r0
    2f58:	aa 0b       	sbc	r26, r26
    2f5a:	bb 0b       	sbc	r27, r27
    2f5c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f5e:	38 85       	ldd	r19, Y+8	; 0x08
    2f60:	49 85       	ldd	r20, Y+9	; 0x09
    2f62:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f64:	82 0f       	add	r24, r18
    2f66:	93 1f       	adc	r25, r19
    2f68:	a4 1f       	adc	r26, r20
    2f6a:	b5 1f       	adc	r27, r21
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
    2f6e:	98 87       	std	Y+8, r25	; 0x08
    2f70:	a9 87       	std	Y+9, r26	; 0x09
    2f72:	ba 87       	std	Y+10, r27	; 0x0a
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	29 89       	ldd	r18, Y+17	; 0x11
    2f7e:	3a 89       	ldd	r19, Y+18	; 0x12
    2f80:	82 0f       	add	r24, r18
    2f82:	93 1f       	adc	r25, r19
    2f84:	fc 01       	movw	r30, r24
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	4b c0       	rjmp	.+150    	; 0x3026 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	9a 81       	ldd	r25, Y+2	; 0x02
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	29 89       	ldd	r18, Y+17	; 0x11
    2f9a:	3a 89       	ldd	r19, Y+18	; 0x12
    2f9c:	82 0f       	add	r24, r18
    2f9e:	93 1f       	adc	r25, r19
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	20 81       	ld	r18, Z
    2fa4:	31 81       	ldd	r19, Z+1	; 0x01
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	82 17       	cp	r24, r18
    2fac:	93 07       	cpc	r25, r19
    2fae:	04 f5       	brge	.+64     	; 0x2ff0 <_ZN8PHSensor16CalculateAverageEPii+0x20c>
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb4:	09 2e       	mov	r0, r25
    2fb6:	00 0c       	add	r0, r0
    2fb8:	aa 0b       	sbc	r26, r26
    2fba:	bb 0b       	sbc	r27, r27
    2fbc:	2f 81       	ldd	r18, Y+7	; 0x07
    2fbe:	38 85       	ldd	r19, Y+8	; 0x08
    2fc0:	49 85       	ldd	r20, Y+9	; 0x09
    2fc2:	5a 85       	ldd	r21, Y+10	; 0x0a
    2fc4:	82 0f       	add	r24, r18
    2fc6:	93 1f       	adc	r25, r19
    2fc8:	a4 1f       	adc	r26, r20
    2fca:	b5 1f       	adc	r27, r21
    2fcc:	8f 83       	std	Y+7, r24	; 0x07
    2fce:	98 87       	std	Y+8, r25	; 0x08
    2fd0:	a9 87       	std	Y+9, r26	; 0x09
    2fd2:	ba 87       	std	Y+10, r27	; 0x0a
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	29 89       	ldd	r18, Y+17	; 0x11
    2fde:	3a 89       	ldd	r19, Y+18	; 0x12
    2fe0:	82 0f       	add	r24, r18
    2fe2:	93 1f       	adc	r25, r19
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	80 81       	ld	r24, Z
    2fe8:	91 81       	ldd	r25, Z+1	; 0x01
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	1b c0       	rjmp	.+54     	; 0x3026 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	29 89       	ldd	r18, Y+17	; 0x11
    2ffa:	3a 89       	ldd	r19, Y+18	; 0x12
    2ffc:	82 0f       	add	r24, r18
    2ffe:	93 1f       	adc	r25, r19
    3000:	fc 01       	movw	r30, r24
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	09 2e       	mov	r0, r25
    3008:	00 0c       	add	r0, r0
    300a:	aa 0b       	sbc	r26, r26
    300c:	bb 0b       	sbc	r27, r27
    300e:	2f 81       	ldd	r18, Y+7	; 0x07
    3010:	38 85       	ldd	r19, Y+8	; 0x08
    3012:	49 85       	ldd	r20, Y+9	; 0x09
    3014:	5a 85       	ldd	r21, Y+10	; 0x0a
    3016:	82 0f       	add	r24, r18
    3018:	93 1f       	adc	r25, r19
    301a:	a4 1f       	adc	r26, r20
    301c:	b5 1f       	adc	r27, r21
    301e:	8f 83       	std	Y+7, r24	; 0x07
    3020:	98 87       	std	Y+8, r25	; 0x08
    3022:	a9 87       	std	Y+9, r26	; 0x09
    3024:	ba 87       	std	Y+10, r27	; 0x0a
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	29 81       	ldd	r18, Y+1	; 0x01
    3032:	3a 81       	ldd	r19, Y+2	; 0x02
    3034:	8b 89       	ldd	r24, Y+19	; 0x13
    3036:	9c 89       	ldd	r25, Y+20	; 0x14
    3038:	28 17       	cp	r18, r24
    303a:	39 07       	cpc	r19, r25
    303c:	0c f4       	brge	.+2      	; 0x3040 <_ZN8PHSensor16CalculateAverageEPii+0x25c>
    303e:	78 cf       	rjmp	.-272    	; 0x2f30 <_ZN8PHSensor16CalculateAverageEPii+0x14c>
    3040:	6f 81       	ldd	r22, Y+7	; 0x07
    3042:	78 85       	ldd	r23, Y+8	; 0x08
    3044:	89 85       	ldd	r24, Y+9	; 0x09
    3046:	9a 85       	ldd	r25, Y+10	; 0x0a
    3048:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__floatsisf>
    304c:	6b 01       	movw	r12, r22
    304e:	7c 01       	movw	r14, r24
    3050:	8b 89       	ldd	r24, Y+19	; 0x13
    3052:	9c 89       	ldd	r25, Y+20	; 0x14
    3054:	02 97       	sbiw	r24, 0x02	; 2
    3056:	09 2e       	mov	r0, r25
    3058:	00 0c       	add	r0, r0
    305a:	aa 0b       	sbc	r26, r26
    305c:	bb 0b       	sbc	r27, r27
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__floatsisf>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9c 01       	movw	r18, r24
    306c:	ad 01       	movw	r20, r26
    306e:	c7 01       	movw	r24, r14
    3070:	b6 01       	movw	r22, r12
    3072:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__divsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	8b 87       	std	Y+11, r24	; 0x0b
    307c:	9c 87       	std	Y+12, r25	; 0x0c
    307e:	ad 87       	std	Y+13, r26	; 0x0d
    3080:	be 87       	std	Y+14, r27	; 0x0e
    3082:	8b 85       	ldd	r24, Y+11	; 0x0b
    3084:	9c 85       	ldd	r25, Y+12	; 0x0c
    3086:	ad 85       	ldd	r26, Y+13	; 0x0d
    3088:	be 85       	ldd	r27, Y+14	; 0x0e
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	68 96       	adiw	r28, 0x18	; 24
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	cf 90       	pop	r12
    30a6:	08 95       	ret

000030a8 <_ZNK4erom6Access11write_blockIdEEbjRKT_>:
    30a8:	a6 e0       	ldi	r26, 0x06	; 6
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	ea e5       	ldi	r30, 0x5A	; 90
    30ae:	f8 e1       	ldi	r31, 0x18	; 24
    30b0:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	7c 83       	std	Y+4, r23	; 0x04
    30ba:	6b 83       	std	Y+3, r22	; 0x03
    30bc:	5e 83       	std	Y+6, r21	; 0x06
    30be:	4d 83       	std	Y+5, r20	; 0x05
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	9c 01       	movw	r18, r24
    30c6:	2c 5f       	subi	r18, 0xFC	; 252
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	9a 81       	ldd	r25, Y+2	; 0x02
    30ce:	b9 01       	movw	r22, r18
    30d0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZNK4erom6Access8in_rangeEj>
    30d4:	98 2f       	mov	r25, r24
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	89 27       	eor	r24, r25
    30da:	88 23       	and	r24, r24
    30dc:	11 f0       	breq	.+4      	; 0x30e2 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x3a>
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	09 c0       	rjmp	.+18     	; 0x30f4 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x4c>
    30e2:	4d 81       	ldd	r20, Y+5	; 0x05
    30e4:	5e 81       	ldd	r21, Y+6	; 0x06
    30e6:	2b 81       	ldd	r18, Y+3	; 0x03
    30e8:	3c 81       	ldd	r19, Y+4	; 0x04
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	9a 81       	ldd	r25, Y+2	; 0x02
    30ee:	b9 01       	movw	r22, r18
    30f0:	f0 d1       	rcall	.+992    	; 0x34d2 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	26 96       	adiw	r28, 0x06	; 6
    30f6:	e2 e0       	ldi	r30, 0x02	; 2
    30f8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000030fc <_ZN4erom5EntryIdEC1Ej>:
    30fc:	a4 e0       	ldi	r26, 0x04	; 4
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e4 e8       	ldi	r30, 0x84	; 132
    3102:	f8 e1       	ldi	r31, 0x18	; 24
    3104:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	7c 83       	std	Y+4, r23	; 0x04
    310e:	6b 83       	std	Y+3, r22	; 0x03
    3110:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN4erom6Access8instanceEv>
    3114:	9c 01       	movw	r18, r24
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	fc 01       	movw	r30, r24
    311c:	31 83       	std	Z+1, r19	; 0x01
    311e:	20 83       	st	Z, r18
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	2b 81       	ldd	r18, Y+3	; 0x03
    3126:	3c 81       	ldd	r19, Y+4	; 0x04
    3128:	fc 01       	movw	r30, r24
    312a:	33 83       	std	Z+3, r19	; 0x03
    312c:	22 83       	std	Z+2, r18	; 0x02
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	90 d0       	rcall	.+288    	; 0x3254 <_ZN4erom5EntryIdE4loadEv>
    3134:	24 96       	adiw	r28, 0x04	; 4
    3136:	e2 e0       	ldi	r30, 0x02	; 2
    3138:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000313c <_ZNSaIdEC1Ev>:
    313c:	a2 e0       	ldi	r26, 0x02	; 2
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e4 ea       	ldi	r30, 0xA4	; 164
    3142:	f8 e1       	ldi	r31, 0x18	; 24
    3144:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	22 96       	adiw	r28, 0x02	; 2
    314e:	e2 e0       	ldi	r30, 0x02	; 2
    3150:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003154 <_ZNSaIdED1Ev>:
    3154:	a2 e0       	ldi	r26, 0x02	; 2
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e0 eb       	ldi	r30, 0xB0	; 176
    315a:	f8 e1       	ldi	r31, 0x18	; 24
    315c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3160:	9a 83       	std	Y+2, r25	; 0x02
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	22 96       	adiw	r28, 0x02	; 2
    3166:	e2 e0       	ldi	r30, 0x02	; 2
    3168:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000316c <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
    316c:	a4 e0       	ldi	r26, 0x04	; 4
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ec eb       	ldi	r30, 0xBC	; 188
    3172:	f8 e1       	ldi	r31, 0x18	; 24
    3174:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	7c 83       	std	Y+4, r23	; 0x04
    317e:	6b 83       	std	Y+3, r22	; 0x03
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	fc 01       	movw	r30, r24
    3186:	11 82       	std	Z+1, r1	; 0x01
    3188:	10 82       	st	Z, r1
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	28 e0       	ldi	r18, 0x08	; 8
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	fc 01       	movw	r30, r24
    3194:	33 83       	std	Z+3, r19	; 0x03
    3196:	22 83       	std	Z+2, r18	; 0x02
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	fc 01       	movw	r30, r24
    319e:	15 82       	std	Z+5, r1	; 0x05
    31a0:	14 82       	std	Z+4, r1	; 0x04
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	fc 01       	movw	r30, r24
    31a8:	22 81       	ldd	r18, Z+2	; 0x02
    31aa:	33 81       	ldd	r19, Z+3	; 0x03
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	06 96       	adiw	r24, 0x06	; 6
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	b9 01       	movw	r22, r18
    31b8:	ad d1       	rcall	.+858    	; 0x3514 <_ZNSaIdE8allocateEjPKv>
    31ba:	9c 01       	movw	r18, r24
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	fc 01       	movw	r30, r24
    31c2:	31 83       	std	Z+1, r19	; 0x01
    31c4:	20 83       	st	Z, r18
    31c6:	24 96       	adiw	r28, 0x04	; 4
    31c8:	e2 e0       	ldi	r30, 0x02	; 2
    31ca:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000031ce <_ZNSt6vectorIdSaIdEED1Ev>:
    31ce:	a4 e0       	ldi	r26, 0x04	; 4
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	ed ee       	ldi	r30, 0xED	; 237
    31d4:	f8 e1       	ldi	r31, 0x18	; 24
    31d6:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	1a 82       	std	Y+2, r1	; 0x02
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	17 c0       	rjmp	.+46     	; 0x3212 <_ZNSt6vectorIdSaIdEED1Ev+0x44>
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	fc 01       	movw	r30, r24
    31ea:	20 81       	ld	r18, Z
    31ec:	31 81       	ldd	r19, Z+1	; 0x01
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	28 0f       	add	r18, r24
    31fc:	39 1f       	adc	r19, r25
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	06 96       	adiw	r24, 0x06	; 6
    3204:	b9 01       	movw	r22, r18
    3206:	9e d1       	rcall	.+828    	; 0x3544 <_ZNSaIdE7destroyEPd>
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	fc 01       	movw	r30, r24
    3218:	24 81       	ldd	r18, Z+4	; 0x04
    321a:	35 81       	ldd	r19, Z+5	; 0x05
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	82 17       	cp	r24, r18
    3222:	93 07       	cpc	r25, r19
    3224:	f8 f2       	brcs	.-66     	; 0x31e4 <_ZNSt6vectorIdSaIdEED1Ev+0x16>
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	fc 01       	movw	r30, r24
    322c:	42 81       	ldd	r20, Z+2	; 0x02
    322e:	53 81       	ldd	r21, Z+3	; 0x03
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	fc 01       	movw	r30, r24
    3236:	20 81       	ld	r18, Z
    3238:	31 81       	ldd	r19, Z+1	; 0x01
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	9c 81       	ldd	r25, Y+4	; 0x04
    323e:	06 96       	adiw	r24, 0x06	; 6
    3240:	b9 01       	movw	r22, r18
    3242:	8e d1       	rcall	.+796    	; 0x3560 <_ZNSaIdE10deallocateEPdj>
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	06 96       	adiw	r24, 0x06	; 6
    324a:	84 df       	rcall	.-248    	; 0x3154 <_ZNSaIdED1Ev>
    324c:	24 96       	adiw	r28, 0x04	; 4
    324e:	e2 e0       	ldi	r30, 0x02	; 2
    3250:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003254 <_ZN4erom5EntryIdE4loadEv>:
    3254:	a2 e0       	ldi	r26, 0x02	; 2
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e0 e3       	ldi	r30, 0x30	; 48
    325a:	f9 e1       	ldi	r31, 0x19	; 25
    325c:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    3260:	9a 83       	std	Y+2, r25	; 0x02
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	9a 81       	ldd	r25, Y+2	; 0x02
    3268:	fc 01       	movw	r30, r24
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	89 2b       	or	r24, r25
    3270:	91 f0       	breq	.+36     	; 0x3296 <_ZN4erom5EntryIdE4loadEv+0x42>
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	9a 81       	ldd	r25, Y+2	; 0x02
    3276:	8c 01       	movw	r16, r24
    3278:	0c 5f       	subi	r16, 0xFC	; 252
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	83 d1       	rcall	.+774    	; 0x3588 <_ZNK4erom5EntryIdE7addressEv>
    3282:	9c 01       	movw	r18, r24
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	fc 01       	movw	r30, r24
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	a8 01       	movw	r20, r16
    3290:	b9 01       	movw	r22, r18
    3292:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZNK4erom6Access10read_blockIdEEbjRT_>
    3296:	22 96       	adiw	r28, 0x02	; 2
    3298:	e4 e0       	ldi	r30, 0x04	; 4
    329a:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

0000329e <_ZN4erom5EntryIdEcvRdEv>:
  //  v = 0;                // Set RAM value to '0'
  //  v.load();             // Load value from EEPROM
  //  if (v != 100) Serial.print("EEPROM write error!");
  inline operator type() const { return value; }
  inline operator const type&() const { return value; }
  inline operator type&() { return value; }
    329e:	a2 e0       	ldi	r26, 0x02	; 2
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e5 e5       	ldi	r30, 0x55	; 85
    32a4:	f9 e1       	ldi	r31, 0x19	; 25
    32a6:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	04 96       	adiw	r24, 0x04	; 4
    32b4:	22 96       	adiw	r28, 0x02	; 2
    32b6:	e2 e0       	ldi	r30, 0x02	; 2
    32b8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000032bc <_ZN4erom5EntryIdEaSERKd>:
    32bc:	a4 e0       	ldi	r26, 0x04	; 4
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e4 e6       	ldi	r30, 0x64	; 100
    32c2:	f9 e1       	ldi	r31, 0x19	; 25
    32c4:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	7c 83       	std	Y+4, r23	; 0x04
    32ce:	6b 83       	std	Y+3, r22	; 0x03
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	fc 01       	movw	r30, r24
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	a2 81       	ldd	r26, Z+2	; 0x02
    32dc:	b3 81       	ldd	r27, Z+3	; 0x03
    32de:	29 81       	ldd	r18, Y+1	; 0x01
    32e0:	3a 81       	ldd	r19, Y+2	; 0x02
    32e2:	f9 01       	movw	r30, r18
    32e4:	84 83       	std	Z+4, r24	; 0x04
    32e6:	95 83       	std	Z+5, r25	; 0x05
    32e8:	a6 83       	std	Z+6, r26	; 0x06
    32ea:	b7 83       	std	Z+7, r27	; 0x07
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	24 96       	adiw	r28, 0x04	; 4
    32f2:	e2 e0       	ldi	r30, 0x02	; 2
    32f4:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000032f8 <_ZNK4erom5EntryIdE4saveEb>:
    32f8:	a3 e0       	ldi	r26, 0x03	; 3
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e2 e8       	ldi	r30, 0x82	; 130
    32fe:	f9 e1       	ldi	r31, 0x19	; 25
    3300:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	6b 83       	std	Y+3, r22	; 0x03
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	fc 01       	movw	r30, r24
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	89 2b       	or	r24, r25
    3316:	31 f1       	breq	.+76     	; 0x3364 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	88 23       	and	r24, r24
    331c:	91 f0       	breq	.+36     	; 0x3342 <_ZNK4erom5EntryIdE4saveEb+0x4a>
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	8c 01       	movw	r16, r24
    3324:	0c 5f       	subi	r16, 0xFC	; 252
    3326:	1f 4f       	sbci	r17, 0xFF	; 255
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	2d d1       	rcall	.+602    	; 0x3588 <_ZNK4erom5EntryIdE7addressEv>
    332e:	9c 01       	movw	r18, r24
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	9a 81       	ldd	r25, Y+2	; 0x02
    3334:	fc 01       	movw	r30, r24
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	a8 01       	movw	r20, r16
    333c:	b9 01       	movw	r22, r18
    333e:	b4 de       	rcall	.-664    	; 0x30a8 <_ZNK4erom6Access11write_blockIdEEbjRKT_>
    3340:	11 c0       	rjmp	.+34     	; 0x3364 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	8c 01       	movw	r16, r24
    3348:	0c 5f       	subi	r16, 0xFC	; 252
    334a:	1f 4f       	sbci	r17, 0xFF	; 255
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	1b d1       	rcall	.+566    	; 0x3588 <_ZNK4erom5EntryIdE7addressEv>
    3352:	9c 01       	movw	r18, r24
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	fc 01       	movw	r30, r24
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	a8 01       	movw	r20, r16
    3360:	b9 01       	movw	r22, r18
    3362:	23 d1       	rcall	.+582    	; 0x35aa <_ZNK4erom6Access12update_blockIdEEjjRKT_>
    3364:	23 96       	adiw	r28, 0x03	; 3
    3366:	e4 e0       	ldi	r30, 0x04	; 4
    3368:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

0000336c <_ZNKSt6vectorIdSaIdEE4sizeEv>:
    336c:	a2 e0       	ldi	r26, 0x02	; 2
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	ec eb       	ldi	r30, 0xBC	; 188
    3372:	f9 e1       	ldi	r31, 0x19	; 25
    3374:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	fc 01       	movw	r30, r24
    3382:	84 81       	ldd	r24, Z+4	; 0x04
    3384:	95 81       	ldd	r25, Z+5	; 0x05
    3386:	22 96       	adiw	r28, 0x02	; 2
    3388:	e2 e0       	ldi	r30, 0x02	; 2
    338a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000338e <_ZNSt6vectorIdSaIdEE9push_backERKd>:
    338e:	a4 e0       	ldi	r26, 0x04	; 4
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ed ec       	ldi	r30, 0xCD	; 205
    3394:	f9 e1       	ldi	r31, 0x19	; 25
    3396:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	7c 83       	std	Y+4, r23	; 0x04
    33a0:	6b 83       	std	Y+3, r22	; 0x03
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	9a 81       	ldd	r25, Y+2	; 0x02
    33a6:	e2 df       	rcall	.-60     	; 0x336c <_ZNKSt6vectorIdSaIdEE4sizeEv>
    33a8:	9c 01       	movw	r18, r24
    33aa:	2f 5f       	subi	r18, 0xFF	; 255
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
    33ae:	4b 81       	ldd	r20, Y+3	; 0x03
    33b0:	5c 81       	ldd	r21, Y+4	; 0x04
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	b9 01       	movw	r22, r18
    33b8:	5a d1       	rcall	.+692    	; 0x366e <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
    33ba:	24 96       	adiw	r28, 0x04	; 4
    33bc:	e2 e0       	ldi	r30, 0x02	; 2
    33be:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000033c2 <_ZNSt6vectorIdSaIdEEixEj>:
    33c2:	a4 e0       	ldi	r26, 0x04	; 4
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e7 ee       	ldi	r30, 0xE7	; 231
    33c8:	f9 e1       	ldi	r31, 0x19	; 25
    33ca:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	7c 83       	std	Y+4, r23	; 0x04
    33d4:	6b 83       	std	Y+3, r22	; 0x03
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	fc 01       	movw	r30, r24
    33dc:	20 81       	ld	r18, Z
    33de:	31 81       	ldd	r19, Z+1	; 0x01
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	82 0f       	add	r24, r18
    33ee:	93 1f       	adc	r25, r19
    33f0:	24 96       	adiw	r28, 0x04	; 4
    33f2:	e2 e0       	ldi	r30, 0x02	; 2
    33f4:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000033f8 <_ZNSt6vectorIdSaIdEEC1ERKS1_>:
    33f8:	a6 e0       	ldi	r26, 0x06	; 6
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e2 e0       	ldi	r30, 0x02	; 2
    33fe:	fa e1       	ldi	r31, 0x1A	; 26
    3400:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3404:	9c 83       	std	Y+4, r25	; 0x04
    3406:	8b 83       	std	Y+3, r24	; 0x03
    3408:	7e 83       	std	Y+6, r23	; 0x06
    340a:	6d 83       	std	Y+5, r22	; 0x05
    340c:	8b 81       	ldd	r24, Y+3	; 0x03
    340e:	9c 81       	ldd	r25, Y+4	; 0x04
    3410:	06 96       	adiw	r24, 0x06	; 6
    3412:	94 de       	rcall	.-728    	; 0x313c <_ZNSaIdEC1Ev>
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	fc 01       	movw	r30, r24
    341a:	24 81       	ldd	r18, Z+4	; 0x04
    341c:	35 81       	ldd	r19, Z+5	; 0x05
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	9c 81       	ldd	r25, Y+4	; 0x04
    3422:	fc 01       	movw	r30, r24
    3424:	35 83       	std	Z+5, r19	; 0x05
    3426:	24 83       	std	Z+4, r18	; 0x04
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	9c 81       	ldd	r25, Y+4	; 0x04
    342c:	fc 01       	movw	r30, r24
    342e:	84 81       	ldd	r24, Z+4	; 0x04
    3430:	95 81       	ldd	r25, Z+5	; 0x05
    3432:	9c 01       	movw	r18, r24
    3434:	28 5f       	subi	r18, 0xF8	; 248
    3436:	3f 4f       	sbci	r19, 0xFF	; 255
    3438:	8b 81       	ldd	r24, Y+3	; 0x03
    343a:	9c 81       	ldd	r25, Y+4	; 0x04
    343c:	fc 01       	movw	r30, r24
    343e:	33 83       	std	Z+3, r19	; 0x03
    3440:	22 83       	std	Z+2, r18	; 0x02
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	fc 01       	movw	r30, r24
    3448:	22 81       	ldd	r18, Z+2	; 0x02
    344a:	33 81       	ldd	r19, Z+3	; 0x03
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	06 96       	adiw	r24, 0x06	; 6
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	b9 01       	movw	r22, r18
    3458:	5d d0       	rcall	.+186    	; 0x3514 <_ZNSaIdE8allocateEjPKv>
    345a:	9c 01       	movw	r18, r24
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	fc 01       	movw	r30, r24
    3462:	31 83       	std	Z+1, r19	; 0x01
    3464:	20 83       	st	Z, r18
    3466:	1a 82       	std	Y+2, r1	; 0x02
    3468:	19 82       	std	Y+1, r1	; 0x01
    346a:	25 c0       	rjmp	.+74     	; 0x34b6 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0xbe>
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	fc 01       	movw	r30, r24
    3472:	20 81       	ld	r18, Z
    3474:	31 81       	ldd	r19, Z+1	; 0x01
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	9a 81       	ldd	r25, Y+2	; 0x02
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	a9 01       	movw	r20, r18
    3484:	48 0f       	add	r20, r24
    3486:	59 1f       	adc	r21, r25
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	fc 01       	movw	r30, r24
    348e:	20 81       	ld	r18, Z
    3490:	31 81       	ldd	r19, Z+1	; 0x01
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	28 0f       	add	r18, r24
    34a0:	39 1f       	adc	r19, r25
    34a2:	8b 81       	ldd	r24, Y+3	; 0x03
    34a4:	9c 81       	ldd	r25, Y+4	; 0x04
    34a6:	06 96       	adiw	r24, 0x06	; 6
    34a8:	b9 01       	movw	r22, r18
    34aa:	45 d1       	rcall	.+650    	; 0x3736 <_ZNSaIdE9constructEPdRKd>
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	9a 81       	ldd	r25, Y+2	; 0x02
    34b0:	01 96       	adiw	r24, 0x01	; 1
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	fc 01       	movw	r30, r24
    34bc:	24 81       	ldd	r18, Z+4	; 0x04
    34be:	35 81       	ldd	r19, Z+5	; 0x05
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	82 17       	cp	r24, r18
    34c6:	93 07       	cpc	r25, r19
    34c8:	88 f2       	brcs	.-94     	; 0x346c <_ZNSt6vectorIdSaIdEEC1ERKS1_+0x74>
    34ca:	26 96       	adiw	r28, 0x06	; 6
    34cc:	e2 e0       	ldi	r30, 0x02	; 2
    34ce:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000034d2 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>:
    34d2:	a6 e0       	ldi	r26, 0x06	; 6
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ef e6       	ldi	r30, 0x6F	; 111
    34d8:	fa e1       	ldi	r31, 0x1A	; 26
    34da:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	7c 83       	std	Y+4, r23	; 0x04
    34e4:	6b 83       	std	Y+3, r22	; 0x03
    34e6:	5e 83       	std	Y+6, r21	; 0x06
    34e8:	4d 83       	std	Y+5, r20	; 0x05
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZNK4erom6Access4baseEv>
    34f2:	9c 01       	movw	r18, r24
    34f4:	8b 81       	ldd	r24, Y+3	; 0x03
    34f6:	9c 81       	ldd	r25, Y+4	; 0x04
    34f8:	82 0f       	add	r24, r18
    34fa:	93 1f       	adc	r25, r19
    34fc:	9c 01       	movw	r18, r24
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	44 e0       	ldi	r20, 0x04	; 4
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	b9 01       	movw	r22, r18
    3508:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <eeprom_write_block>
    350c:	26 96       	adiw	r28, 0x06	; 6
    350e:	e2 e0       	ldi	r30, 0x02	; 2
    3510:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003514 <_ZNSaIdE8allocateEjPKv>:
    3514:	a6 e0       	ldi	r26, 0x06	; 6
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e0 e9       	ldi	r30, 0x90	; 144
    351a:	fa e1       	ldi	r31, 0x1A	; 26
    351c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	7c 83       	std	Y+4, r23	; 0x04
    3526:	6b 83       	std	Y+3, r22	; 0x03
    3528:	5e 83       	std	Y+6, r21	; 0x06
    352a:	4d 83       	std	Y+5, r20	; 0x05
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	0e 94 84 29 	call	0x5308	; 0x5308 <_Znwj>
    353c:	26 96       	adiw	r28, 0x06	; 6
    353e:	e2 e0       	ldi	r30, 0x02	; 2
    3540:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003544 <_ZNSaIdE7destroyEPd>:
    3544:	a4 e0       	ldi	r26, 0x04	; 4
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e8 ea       	ldi	r30, 0xA8	; 168
    354a:	fa e1       	ldi	r31, 0x1A	; 26
    354c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	7c 83       	std	Y+4, r23	; 0x04
    3556:	6b 83       	std	Y+3, r22	; 0x03
    3558:	24 96       	adiw	r28, 0x04	; 4
    355a:	e2 e0       	ldi	r30, 0x02	; 2
    355c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003560 <_ZNSaIdE10deallocateEPdj>:
    3560:	a6 e0       	ldi	r26, 0x06	; 6
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e6 eb       	ldi	r30, 0xB6	; 182
    3566:	fa e1       	ldi	r31, 0x1A	; 26
    3568:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	7c 83       	std	Y+4, r23	; 0x04
    3572:	6b 83       	std	Y+3, r22	; 0x03
    3574:	5e 83       	std	Y+6, r21	; 0x06
    3576:	4d 83       	std	Y+5, r20	; 0x05
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    3580:	26 96       	adiw	r28, 0x06	; 6
    3582:	e2 e0       	ldi	r30, 0x02	; 2
    3584:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003588 <_ZNK4erom5EntryIdE7addressEv>:
    3588:	a2 e0       	ldi	r26, 0x02	; 2
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	ea ec       	ldi	r30, 0xCA	; 202
    358e:	fa e1       	ldi	r31, 0x1A	; 26
    3590:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	fc 01       	movw	r30, r24
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	22 96       	adiw	r28, 0x02	; 2
    35a4:	e2 e0       	ldi	r30, 0x02	; 2
    35a6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000035aa <_ZNK4erom6Access12update_blockIdEEjjRKT_>:
    35aa:	ac e0       	ldi	r26, 0x0C	; 12
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	eb ed       	ldi	r30, 0xDB	; 219
    35b0:	fa e1       	ldi	r31, 0x1A	; 26
    35b2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    35b6:	98 87       	std	Y+8, r25	; 0x08
    35b8:	8f 83       	std	Y+7, r24	; 0x07
    35ba:	7a 87       	std	Y+10, r23	; 0x0a
    35bc:	69 87       	std	Y+9, r22	; 0x09
    35be:	5c 87       	std	Y+12, r21	; 0x0c
    35c0:	4b 87       	std	Y+11, r20	; 0x0b
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	9c 01       	movw	r18, r24
    35c8:	2c 5f       	subi	r18, 0xFC	; 252
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	8f 81       	ldd	r24, Y+7	; 0x07
    35ce:	98 85       	ldd	r25, Y+8	; 0x08
    35d0:	b9 01       	movw	r22, r18
    35d2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZNK4erom6Access8in_rangeEj>
    35d6:	98 2f       	mov	r25, r24
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	89 27       	eor	r24, r25
    35dc:	88 23       	and	r24, r24
    35de:	19 f0       	breq	.+6      	; 0x35e6 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x3c>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	40 c0       	rjmp	.+128    	; 0x3666 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xbc>
    35e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    35e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	1c 82       	std	Y+4, r1	; 0x04
    35f0:	1b 82       	std	Y+3, r1	; 0x03
    35f2:	1e 82       	std	Y+6, r1	; 0x06
    35f4:	1d 82       	std	Y+5, r1	; 0x05
    35f6:	31 c0       	rjmp	.+98     	; 0x365a <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xb0>
    35f8:	29 85       	ldd	r18, Y+9	; 0x09
    35fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    35fc:	8f 81       	ldd	r24, Y+7	; 0x07
    35fe:	98 85       	ldd	r25, Y+8	; 0x08
    3600:	b9 01       	movw	r22, r18
    3602:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZNK4erom6Access4readEj>
    3606:	28 2f       	mov	r18, r24
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	fc 01       	movw	r30, r24
    360e:	90 81       	ld	r25, Z
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	29 17       	cp	r18, r25
    3614:	09 f4       	brne	.+2      	; 0x3618 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x6e>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	88 23       	and	r24, r24
    361a:	81 f0       	breq	.+32     	; 0x363c <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x92>
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	9a 81       	ldd	r25, Y+2	; 0x02
    3620:	fc 01       	movw	r30, r24
    3622:	40 81       	ld	r20, Z
    3624:	29 85       	ldd	r18, Y+9	; 0x09
    3626:	3a 85       	ldd	r19, Y+10	; 0x0a
    3628:	8f 81       	ldd	r24, Y+7	; 0x07
    362a:	98 85       	ldd	r25, Y+8	; 0x08
    362c:	b9 01       	movw	r22, r18
    362e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZNK4erom6Access5writeEjh>
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	9c 81       	ldd	r25, Y+4	; 0x04
    3636:	01 96       	adiw	r24, 0x01	; 1
    3638:	9c 83       	std	Y+4, r25	; 0x04
    363a:	8b 83       	std	Y+3, r24	; 0x03
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	9a 87       	std	Y+10, r25	; 0x0a
    3644:	89 87       	std	Y+9, r24	; 0x09
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	9a 81       	ldd	r25, Y+2	; 0x02
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	9e 81       	ldd	r25, Y+6	; 0x06
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	04 97       	sbiw	r24, 0x04	; 4
    3660:	58 f2       	brcs	.-106    	; 0x35f8 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x4e>
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	9c 81       	ldd	r25, Y+4	; 0x04
    3666:	2c 96       	adiw	r28, 0x0c	; 12
    3668:	e2 e0       	ldi	r30, 0x02	; 2
    366a:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000366e <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
    366e:	a8 e0       	ldi	r26, 0x08	; 8
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	ed e3       	ldi	r30, 0x3D	; 61
    3674:	fb e1       	ldi	r31, 0x1B	; 27
    3676:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    367a:	9c 83       	std	Y+4, r25	; 0x04
    367c:	8b 83       	std	Y+3, r24	; 0x03
    367e:	7e 83       	std	Y+6, r23	; 0x06
    3680:	6d 83       	std	Y+5, r22	; 0x05
    3682:	58 87       	std	Y+8, r21	; 0x08
    3684:	4f 83       	std	Y+7, r20	; 0x07
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	9c 81       	ldd	r25, Y+4	; 0x04
    368a:	fc 01       	movw	r30, r24
    368c:	24 81       	ldd	r18, Z+4	; 0x04
    368e:	35 81       	ldd	r19, Z+5	; 0x05
    3690:	8d 81       	ldd	r24, Y+5	; 0x05
    3692:	9e 81       	ldd	r25, Y+6	; 0x06
    3694:	28 17       	cp	r18, r24
    3696:	39 07       	cpc	r19, r25
    3698:	08 f0       	brcs	.+2      	; 0x369c <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x2e>
    369a:	43 c0       	rjmp	.+134    	; 0x3722 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xb4>
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	9c 81       	ldd	r25, Y+4	; 0x04
    36a0:	fc 01       	movw	r30, r24
    36a2:	22 81       	ldd	r18, Z+2	; 0x02
    36a4:	33 81       	ldd	r19, Z+3	; 0x03
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	9e 81       	ldd	r25, Y+6	; 0x06
    36aa:	28 17       	cp	r18, r24
    36ac:	39 07       	cpc	r19, r25
    36ae:	48 f4       	brcc	.+18     	; 0x36c2 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x54>
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	9c 01       	movw	r18, r24
    36b6:	28 5f       	subi	r18, 0xF8	; 248
    36b8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ba:	8b 81       	ldd	r24, Y+3	; 0x03
    36bc:	9c 81       	ldd	r25, Y+4	; 0x04
    36be:	b9 01       	movw	r22, r18
    36c0:	61 d0       	rcall	.+194    	; 0x3784 <_ZNSt6vectorIdSaIdEE7reserveEj>
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	9c 81       	ldd	r25, Y+4	; 0x04
    36c6:	fc 01       	movw	r30, r24
    36c8:	84 81       	ldd	r24, Z+4	; 0x04
    36ca:	95 81       	ldd	r25, Z+5	; 0x05
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	19 c0       	rjmp	.+50     	; 0x3704 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x96>
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	9c 81       	ldd	r25, Y+4	; 0x04
    36d6:	fc 01       	movw	r30, r24
    36d8:	20 81       	ld	r18, Z
    36da:	31 81       	ldd	r19, Z+1	; 0x01
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	28 0f       	add	r18, r24
    36ea:	39 1f       	adc	r19, r25
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	06 96       	adiw	r24, 0x06	; 6
    36f2:	4f 81       	ldd	r20, Y+7	; 0x07
    36f4:	58 85       	ldd	r21, Y+8	; 0x08
    36f6:	b9 01       	movw	r22, r18
    36f8:	1e d0       	rcall	.+60     	; 0x3736 <_ZNSaIdE9constructEPdRKd>
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	01 96       	adiw	r24, 0x01	; 1
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	29 81       	ldd	r18, Y+1	; 0x01
    3706:	3a 81       	ldd	r19, Y+2	; 0x02
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	9e 81       	ldd	r25, Y+6	; 0x06
    370c:	28 17       	cp	r18, r24
    370e:	39 07       	cpc	r19, r25
    3710:	00 f3       	brcs	.-64     	; 0x36d2 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x64>
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	9c 81       	ldd	r25, Y+4	; 0x04
    3716:	2d 81       	ldd	r18, Y+5	; 0x05
    3718:	3e 81       	ldd	r19, Y+6	; 0x06
    371a:	fc 01       	movw	r30, r24
    371c:	35 83       	std	Z+5, r19	; 0x05
    371e:	24 83       	std	Z+4, r18	; 0x04
    3720:	06 c0       	rjmp	.+12     	; 0x372e <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xc0>
    3722:	2d 81       	ldd	r18, Y+5	; 0x05
    3724:	3e 81       	ldd	r19, Y+6	; 0x06
    3726:	8b 81       	ldd	r24, Y+3	; 0x03
    3728:	9c 81       	ldd	r25, Y+4	; 0x04
    372a:	b9 01       	movw	r22, r18
    372c:	b2 d0       	rcall	.+356    	; 0x3892 <_ZNSt6vectorIdSaIdEE8downsizeEj>
    372e:	28 96       	adiw	r28, 0x08	; 8
    3730:	e2 e0       	ldi	r30, 0x02	; 2
    3732:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003736 <_ZNSaIdE9constructEPdRKd>:
    3736:	a6 e0       	ldi	r26, 0x06	; 6
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	e1 ea       	ldi	r30, 0xA1	; 161
    373c:	fb e1       	ldi	r31, 0x1B	; 27
    373e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	7c 83       	std	Y+4, r23	; 0x04
    3748:	6b 83       	std	Y+3, r22	; 0x03
    374a:	5e 83       	std	Y+6, r21	; 0x06
    374c:	4d 83       	std	Y+5, r20	; 0x05
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	9c 81       	ldd	r25, Y+4	; 0x04
    3752:	bc 01       	movw	r22, r24
    3754:	84 e0       	ldi	r24, 0x04	; 4
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e 94 15 12 	call	0x242a	; 0x242a <_ZnwjPv>
    375c:	9c 01       	movw	r18, r24
    375e:	21 15       	cp	r18, r1
    3760:	31 05       	cpc	r19, r1
    3762:	61 f0       	breq	.+24     	; 0x377c <_ZNSaIdE9constructEPdRKd+0x46>
    3764:	8d 81       	ldd	r24, Y+5	; 0x05
    3766:	9e 81       	ldd	r25, Y+6	; 0x06
    3768:	fc 01       	movw	r30, r24
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	a2 81       	ldd	r26, Z+2	; 0x02
    3770:	b3 81       	ldd	r27, Z+3	; 0x03
    3772:	f9 01       	movw	r30, r18
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
    377c:	26 96       	adiw	r28, 0x06	; 6
    377e:	e2 e0       	ldi	r30, 0x02	; 2
    3780:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003784 <_ZNSt6vectorIdSaIdEE7reserveEj>:
		}
		a.deallocate(data, data_size);
	}


	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::reserve(size_type n){
    3784:	aa e0       	ldi	r26, 0x0A	; 10
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e8 ec       	ldi	r30, 0xC8	; 200
    378a:	fb e1       	ldi	r31, 0x1B	; 27
    378c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3790:	98 87       	std	Y+8, r25	; 0x08
    3792:	8f 83       	std	Y+7, r24	; 0x07
    3794:	7a 87       	std	Y+10, r23	; 0x0a
    3796:	69 87       	std	Y+9, r22	; 0x09
		if(n > data_size){              //We never shrink...
    3798:	8f 81       	ldd	r24, Y+7	; 0x07
    379a:	98 85       	ldd	r25, Y+8	; 0x08
    379c:	fc 01       	movw	r30, r24
    379e:	22 81       	ldd	r18, Z+2	; 0x02
    37a0:	33 81       	ldd	r19, Z+3	; 0x03
    37a2:	89 85       	ldd	r24, Y+9	; 0x09
    37a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	08 f0       	brcs	.+2      	; 0x37ae <_ZNSt6vectorIdSaIdEE7reserveEj+0x2a>
    37ac:	6e c0       	rjmp	.+220    	; 0x388a <_ZNSt6vectorIdSaIdEE7reserveEj+0x106>
			T * temp_ptr = data;
    37ae:	8f 81       	ldd	r24, Y+7	; 0x07
    37b0:	98 85       	ldd	r25, Y+8	; 0x08
    37b2:	fc 01       	movw	r30, r24
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
			size_type temp_size = data_size;
    37bc:	8f 81       	ldd	r24, Y+7	; 0x07
    37be:	98 85       	ldd	r25, Y+8	; 0x08
    37c0:	fc 01       	movw	r30, r24
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05

			data_size = n;
    37ca:	8f 81       	ldd	r24, Y+7	; 0x07
    37cc:	98 85       	ldd	r25, Y+8	; 0x08
    37ce:	29 85       	ldd	r18, Y+9	; 0x09
    37d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    37d2:	fc 01       	movw	r30, r24
    37d4:	33 83       	std	Z+3, r19	; 0x03
    37d6:	22 83       	std	Z+2, r18	; 0x02
			data = a.allocate(data_size);
    37d8:	8f 81       	ldd	r24, Y+7	; 0x07
    37da:	98 85       	ldd	r25, Y+8	; 0x08
    37dc:	fc 01       	movw	r30, r24
    37de:	22 81       	ldd	r18, Z+2	; 0x02
    37e0:	33 81       	ldd	r19, Z+3	; 0x03
    37e2:	8f 81       	ldd	r24, Y+7	; 0x07
    37e4:	98 85       	ldd	r25, Y+8	; 0x08
    37e6:	06 96       	adiw	r24, 0x06	; 6
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	b9 01       	movw	r22, r18
    37ee:	92 de       	rcall	.-732    	; 0x3514 <_ZNSaIdE8allocateEjPKv>
    37f0:	9c 01       	movw	r18, r24
    37f2:	8f 81       	ldd	r24, Y+7	; 0x07
    37f4:	98 85       	ldd	r25, Y+8	; 0x08
    37f6:	fc 01       	movw	r30, r24
    37f8:	31 83       	std	Z+1, r19	; 0x01
    37fa:	20 83       	st	Z, r18

			for(size_type i = 0; i<elements; ++i){
    37fc:	1a 82       	std	Y+2, r1	; 0x02
    37fe:	19 82       	std	Y+1, r1	; 0x01
    3800:	31 c0       	rjmp	.+98     	; 0x3864 <_ZNSt6vectorIdSaIdEE7reserveEj+0xe0>
				a.construct(data+i, temp_ptr[i]);
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	2b 81       	ldd	r18, Y+3	; 0x03
    3810:	3c 81       	ldd	r19, Y+4	; 0x04
    3812:	a9 01       	movw	r20, r18
    3814:	48 0f       	add	r20, r24
    3816:	59 1f       	adc	r21, r25
    3818:	8f 81       	ldd	r24, Y+7	; 0x07
    381a:	98 85       	ldd	r25, Y+8	; 0x08
    381c:	fc 01       	movw	r30, r24
    381e:	20 81       	ld	r18, Z
    3820:	31 81       	ldd	r19, Z+1	; 0x01
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	28 0f       	add	r18, r24
    3830:	39 1f       	adc	r19, r25
    3832:	8f 81       	ldd	r24, Y+7	; 0x07
    3834:	98 85       	ldd	r25, Y+8	; 0x08
    3836:	06 96       	adiw	r24, 0x06	; 6
    3838:	b9 01       	movw	r22, r18
    383a:	7d df       	rcall	.-262    	; 0x3736 <_ZNSaIdE9constructEPdRKd>
				a.destroy(temp_ptr+i);
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	9a 81       	ldd	r25, Y+2	; 0x02
    3840:	88 0f       	add	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	2b 81       	ldd	r18, Y+3	; 0x03
    384a:	3c 81       	ldd	r19, Y+4	; 0x04
    384c:	28 0f       	add	r18, r24
    384e:	39 1f       	adc	r19, r25
    3850:	8f 81       	ldd	r24, Y+7	; 0x07
    3852:	98 85       	ldd	r25, Y+8	; 0x08
    3854:	06 96       	adiw	r24, 0x06	; 6
    3856:	b9 01       	movw	r22, r18
    3858:	75 de       	rcall	.-790    	; 0x3544 <_ZNSaIdE7destroyEPd>
			size_type temp_size = data_size;

			data_size = n;
			data = a.allocate(data_size);

			for(size_type i = 0; i<elements; ++i){
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	9a 81       	ldd	r25, Y+2	; 0x02
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	9a 83       	std	Y+2, r25	; 0x02
    3862:	89 83       	std	Y+1, r24	; 0x01
    3864:	8f 81       	ldd	r24, Y+7	; 0x07
    3866:	98 85       	ldd	r25, Y+8	; 0x08
    3868:	fc 01       	movw	r30, r24
    386a:	24 81       	ldd	r18, Z+4	; 0x04
    386c:	35 81       	ldd	r19, Z+5	; 0x05
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	82 17       	cp	r24, r18
    3874:	93 07       	cpc	r25, r19
    3876:	28 f2       	brcs	.-118    	; 0x3802 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7e>
				a.construct(data+i, temp_ptr[i]);
				a.destroy(temp_ptr+i);
			}
			a.deallocate(temp_ptr, temp_size);
    3878:	8f 81       	ldd	r24, Y+7	; 0x07
    387a:	98 85       	ldd	r25, Y+8	; 0x08
    387c:	06 96       	adiw	r24, 0x06	; 6
    387e:	4d 81       	ldd	r20, Y+5	; 0x05
    3880:	5e 81       	ldd	r21, Y+6	; 0x06
    3882:	2b 81       	ldd	r18, Y+3	; 0x03
    3884:	3c 81       	ldd	r19, Y+4	; 0x04
    3886:	b9 01       	movw	r22, r18
    3888:	6b de       	rcall	.-810    	; 0x3560 <_ZNSaIdE10deallocateEPdj>
		}
	}
    388a:	2a 96       	adiw	r28, 0x0a	; 10
    388c:	e2 e0       	ldi	r30, 0x02	; 2
    388e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003892 <_ZNSt6vectorIdSaIdEE8downsizeEj>:
		}else{
			downsize(sz);
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
    3892:	a6 e0       	ldi	r26, 0x06	; 6
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	ef e4       	ldi	r30, 0x4F	; 79
    3898:	fc e1       	ldi	r31, 0x1C	; 28
    389a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    389e:	9c 83       	std	Y+4, r25	; 0x04
    38a0:	8b 83       	std	Y+3, r24	; 0x03
    38a2:	7e 83       	std	Y+6, r23	; 0x06
    38a4:	6d 83       	std	Y+5, r22	; 0x05
		if(sz < elements){      //Actually are downsizing
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	9c 81       	ldd	r25, Y+4	; 0x04
    38aa:	fc 01       	movw	r30, r24
    38ac:	24 81       	ldd	r18, Z+4	; 0x04
    38ae:	35 81       	ldd	r19, Z+5	; 0x05
    38b0:	8d 81       	ldd	r24, Y+5	; 0x05
    38b2:	9e 81       	ldd	r25, Y+6	; 0x06
    38b4:	82 17       	cp	r24, r18
    38b6:	93 07       	cpc	r25, r19
    38b8:	68 f5       	brcc	.+90     	; 0x3914 <_ZNSt6vectorIdSaIdEE8downsizeEj+0x82>
			for(size_t i = sz; i< elements; ++i){
    38ba:	8d 81       	ldd	r24, Y+5	; 0x05
    38bc:	9e 81       	ldd	r25, Y+6	; 0x06
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	17 c0       	rjmp	.+46     	; 0x38f2 <_ZNSt6vectorIdSaIdEE8downsizeEj+0x60>
				a.destroy(data+i);
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	9c 81       	ldd	r25, Y+4	; 0x04
    38c8:	fc 01       	movw	r30, r24
    38ca:	20 81       	ld	r18, Z
    38cc:	31 81       	ldd	r19, Z+1	; 0x01
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	28 0f       	add	r18, r24
    38dc:	39 1f       	adc	r19, r25
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	9c 81       	ldd	r25, Y+4	; 0x04
    38e2:	06 96       	adiw	r24, 0x06	; 6
    38e4:	b9 01       	movw	r22, r18
    38e6:	2e de       	rcall	.-932    	; 0x3544 <_ZNSaIdE7destroyEPd>
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
		if(sz < elements){      //Actually are downsizing
			for(size_t i = sz; i< elements; ++i){
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	9a 81       	ldd	r25, Y+2	; 0x02
    38ec:	01 96       	adiw	r24, 0x01	; 1
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	9c 81       	ldd	r25, Y+4	; 0x04
    38f6:	fc 01       	movw	r30, r24
    38f8:	24 81       	ldd	r18, Z+4	; 0x04
    38fa:	35 81       	ldd	r19, Z+5	; 0x05
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3900:	82 17       	cp	r24, r18
    3902:	93 07       	cpc	r25, r19
    3904:	f8 f2       	brcs	.-66     	; 0x38c4 <_ZNSt6vectorIdSaIdEE8downsizeEj+0x32>
				a.destroy(data+i);
			}
			elements = sz;
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	2d 81       	ldd	r18, Y+5	; 0x05
    390c:	3e 81       	ldd	r19, Y+6	; 0x06
    390e:	fc 01       	movw	r30, r24
    3910:	35 83       	std	Z+5, r19	; 0x05
    3912:	24 83       	std	Z+4, r18	; 0x04
		}
	}
    3914:	26 96       	adiw	r28, 0x06	; 6
    3916:	e2 e0       	ldi	r30, 0x02	; 2
    3918:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000391c <_ZN8PHSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class PHSensor : public erom::Storage {
    391c:	a2 e0       	ldi	r26, 0x02	; 2
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e4 e9       	ldi	r30, 0x94	; 148
    3922:	fc e1       	ldi	r31, 0x1C	; 28
    3924:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	2e ea       	ldi	r18, 0xAE	; 174
    3932:	31 e0       	ldi	r19, 0x01	; 1
    3934:	fc 01       	movw	r30, r24
    3936:	31 83       	std	Z+1, r19	; 0x01
    3938:	20 83       	st	Z, r18
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	9a 81       	ldd	r25, Y+2	; 0x02
    393e:	8b 56       	subi	r24, 0x6B	; 107
    3940:	9f 4f       	sbci	r25, 0xFF	; 255
    3942:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	9a 81       	ldd	r25, Y+2	; 0x02
    394a:	81 57       	subi	r24, 0x71	; 113
    394c:	9f 4f       	sbci	r25, 0xFF	; 255
    394e:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	8f 59       	subi	r24, 0x9F	; 159
    3958:	9f 4f       	sbci	r25, 0xFF	; 255
    395a:	39 dc       	rcall	.-1934   	; 0x31ce <_ZNSt6vectorIdSaIdEED1Ev>
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	9a 81       	ldd	r25, Y+2	; 0x02
    3960:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN4erom7StorageD1Ev>
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	89 2b       	or	r24, r25
    396a:	21 f0       	breq	.+8      	; 0x3974 <_ZN8PHSensorD1Ev+0x58>
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    3974:	22 96       	adiw	r28, 0x02	; 2
    3976:	e2 e0       	ldi	r30, 0x02	; 2
    3978:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000397c <_ZN8PHSensorD0Ev>:
    397c:	a2 e0       	ldi	r26, 0x02	; 2
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e4 ec       	ldi	r30, 0xC4	; 196
    3982:	fc e1       	ldi	r31, 0x1C	; 28
    3984:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3988:	9a 83       	std	Y+2, r25	; 0x02
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	c5 df       	rcall	.-118    	; 0x391c <_ZN8PHSensorD1Ev>
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	9a 81       	ldd	r25, Y+2	; 0x02
    3996:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    399a:	22 96       	adiw	r28, 0x02	; 2
    399c:	e2 e0       	ldi	r30, 0x02	; 2
    399e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000039a2 <_ZN9TDSSensorC1Eiib7LCDBase>:
    39a2:	a9 e0       	ldi	r26, 0x09	; 9
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	e7 ed       	ldi	r30, 0xD7	; 215
    39a8:	fc e1       	ldi	r31, 0x1C	; 28
    39aa:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	7c 83       	std	Y+4, r23	; 0x04
    39b4:	6b 83       	std	Y+3, r22	; 0x03
    39b6:	5e 83       	std	Y+6, r21	; 0x06
    39b8:	4d 83       	std	Y+5, r20	; 0x05
    39ba:	2f 83       	std	Y+7, r18	; 0x07
    39bc:	19 87       	std	Y+9, r17	; 0x09
    39be:	08 87       	std	Y+8, r16	; 0x08
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	9a 81       	ldd	r25, Y+2	; 0x02
    39c4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN4erom7StorageC1Ev>
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	9a 81       	ldd	r25, Y+2	; 0x02
    39cc:	2c eb       	ldi	r18, 0xBC	; 188
    39ce:	31 e0       	ldi	r19, 0x01	; 1
    39d0:	fc 01       	movw	r30, r24
    39d2:	31 83       	std	Z+1, r19	; 0x01
    39d4:	20 83       	st	Z, r18
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	2b 81       	ldd	r18, Y+3	; 0x03
    39dc:	3c 81       	ldd	r19, Y+4	; 0x04
    39de:	fc 01       	movw	r30, r24
    39e0:	34 87       	std	Z+12, r19	; 0x0c
    39e2:	23 87       	std	Z+11, r18	; 0x0b
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	9a 81       	ldd	r25, Y+2	; 0x02
    39e8:	83 5a       	subi	r24, 0xA3	; 163
    39ea:	9f 4f       	sbci	r25, 0xFF	; 255
    39ec:	fc 01       	movw	r30, r24
    39ee:	11 82       	std	Z+1, r1	; 0x01
    39f0:	10 82       	st	Z, r1
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	81 5a       	subi	r24, 0xA1	; 161
    39f8:	9f 4f       	sbci	r25, 0xFF	; 255
    39fa:	2d 81       	ldd	r18, Y+5	; 0x05
    39fc:	3e 81       	ldd	r19, Y+6	; 0x06
    39fe:	fc 01       	movw	r30, r24
    3a00:	31 83       	std	Z+1, r19	; 0x01
    3a02:	20 83       	st	Z, r18
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	87 59       	subi	r24, 0x97	; 151
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a0e:	fc 01       	movw	r30, r24
    3a10:	20 83       	st	Z, r18
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	9a 81       	ldd	r25, Y+2	; 0x02
    3a16:	86 59       	subi	r24, 0x96	; 150
    3a18:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1a:	28 85       	ldd	r18, Y+8	; 0x08
    3a1c:	39 85       	ldd	r19, Y+9	; 0x09
    3a1e:	b9 01       	movw	r22, r18
    3a20:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN7LCDBaseC1ERKS_>
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a 81       	ldd	r25, Y+2	; 0x02
    3a28:	8e 57       	subi	r24, 0x7E	; 126
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	63 e1       	ldi	r22, 0x13	; 19
    3a2e:	71 e0       	ldi	r23, 0x01	; 1
    3a30:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	88 57       	subi	r24, 0x78	; 120
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	63 e1       	ldi	r22, 0x13	; 19
    3a3e:	71 e0       	ldi	r23, 0x01	; 1
    3a40:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	82 57       	subi	r24, 0x72	; 114
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	6a eb       	ldi	r22, 0xBA	; 186
    3a4e:	74 e0       	ldi	r23, 0x04	; 4
    3a50:	55 db       	rcall	.-2390   	; 0x30fc <_ZN4erom5EntryIdEC1Ej>
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	04 d0       	rcall	.+8      	; 0x3a60 <_ZN9TDSSensor4InitEv>
    3a58:	29 96       	adiw	r28, 0x09	; 9
    3a5a:	e4 e0       	ldi	r30, 0x04	; 4
    3a5c:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00003a60 <_ZN9TDSSensor4InitEv>:
    3a60:	a6 e0       	ldi	r26, 0x06	; 6
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	e6 e3       	ldi	r30, 0x36	; 54
    3a66:	fd e1       	ldi	r31, 0x1D	; 29
    3a68:	0c 94 81 2f 	jmp	0x5f02	; 0x5f02 <__prologue_saves__+0x1e>
    3a6c:	9e 83       	std	Y+6, r25	; 0x06
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
    3a70:	61 e0       	ldi	r22, 0x01	; 1
    3a72:	8d e0       	ldi	r24, 0x0D	; 13
    3a74:	0e 94 22 2c 	call	0x5844	; 0x5844 <pinMode>
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	82 57       	subi	r24, 0x72	; 114
    3a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a80:	e9 db       	rcall	.-2094   	; 0x3254 <_ZN4erom5EntryIdE4loadEv>
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	82 57       	subi	r24, 0x72	; 114
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	09 dc       	rcall	.-2030   	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	a2 81       	ldd	r26, Z+2	; 0x02
    3a94:	b3 81       	ldd	r27, Z+3	; 0x03
    3a96:	11 e0       	ldi	r17, 0x01	; 1
    3a98:	9c 01       	movw	r18, r24
    3a9a:	ad 01       	movw	r20, r26
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__unordsf2>
    3aa4:	88 23       	and	r24, r24
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <_ZN9TDSSensor4InitEv+0x4a>
    3aa8:	10 e0       	ldi	r17, 0x00	; 0
    3aaa:	11 23       	and	r17, r17
    3aac:	89 f0       	breq	.+34     	; 0x3ad0 <_ZN9TDSSensor4InitEv+0x70>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e4       	ldi	r25, 0x40	; 64
    3ab2:	a7 e9       	ldi	r26, 0x97	; 151
    3ab4:	b4 e4       	ldi	r27, 0x44	; 68
    3ab6:	89 83       	std	Y+1, r24	; 0x01
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	ab 83       	std	Y+3, r26	; 0x03
    3abc:	bc 83       	std	Y+4, r27	; 0x04
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	82 57       	subi	r24, 0x72	; 114
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	9e 01       	movw	r18, r28
    3ac8:	2f 5f       	subi	r18, 0xFF	; 255
    3aca:	3f 4f       	sbci	r19, 0xFF	; 255
    3acc:	b9 01       	movw	r22, r18
    3ace:	f6 db       	rcall	.-2068   	; 0x32bc <_ZN4erom5EntryIdEaSERKd>
    3ad0:	26 96       	adiw	r28, 0x06	; 6
    3ad2:	e3 e0       	ldi	r30, 0x03	; 3
    3ad4:	0c 94 9d 2f 	jmp	0x5f3a	; 0x5f3a <__epilogue_restores__+0x1e>

00003ad8 <_ZN9TDSSensor6UpdateEd>:
    3ad8:	a6 e0       	ldi	r26, 0x06	; 6
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e2 e7       	ldi	r30, 0x72	; 114
    3ade:	fd e1       	ldi	r31, 0x1D	; 29
    3ae0:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    3ae8:	4b 83       	std	Y+3, r20	; 0x03
    3aea:	5c 83       	std	Y+4, r21	; 0x04
    3aec:	6d 83       	std	Y+5, r22	; 0x05
    3aee:	7e 83       	std	Y+6, r23	; 0x06
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	9a 81       	ldd	r25, Y+2	; 0x02
    3af4:	82 57       	subi	r24, 0x72	; 114
    3af6:	9f 4f       	sbci	r25, 0xFF	; 255
    3af8:	9e 01       	movw	r18, r28
    3afa:	2d 5f       	subi	r18, 0xFD	; 253
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	b9 01       	movw	r22, r18
    3b00:	dd db       	rcall	.-2118   	; 0x32bc <_ZN4erom5EntryIdEaSERKd>
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	9a 81       	ldd	r25, Y+2	; 0x02
    3b06:	82 57       	subi	r24, 0x72	; 114
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	f5 db       	rcall	.-2070   	; 0x32f8 <_ZNK4erom5EntryIdE4saveEb>
    3b0e:	26 96       	adiw	r28, 0x06	; 6
    3b10:	e2 e0       	ldi	r30, 0x02	; 2
    3b12:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003b16 <_ZN9TDSSensor6GetTDSEv>:
    3b16:	ae e0       	ldi	r26, 0x0E	; 14
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e1 e9       	ldi	r30, 0x91	; 145
    3b1c:	fd e1       	ldi	r31, 0x1D	; 29
    3b1e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3b22:	9e 87       	std	Y+14, r25	; 0x0e
    3b24:	8d 87       	std	Y+13, r24	; 0x0d
    3b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2a:	8f 59       	subi	r24, 0x9F	; 159
    3b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2e:	fc 01       	movw	r30, r24
    3b30:	80 81       	ld	r24, Z
    3b32:	91 81       	ldd	r25, Z+1	; 0x01
    3b34:	a2 81       	ldd	r26, Z+2	; 0x02
    3b36:	b3 81       	ldd	r27, Z+3	; 0x03
    3b38:	fe 01       	movw	r30, r28
    3b3a:	37 96       	adiw	r30, 0x07	; 7
    3b3c:	22 e0       	ldi	r18, 0x02	; 2
    3b3e:	ac 01       	movw	r20, r24
    3b40:	bd 01       	movw	r22, r26
    3b42:	cf 01       	movw	r24, r30
    3b44:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN6StringC1Efh>
    3b48:	ce 01       	movw	r24, r28
    3b4a:	07 96       	adiw	r24, 0x07	; 7
    3b4c:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZNK6String5c_strEv>
    3b50:	9c 01       	movw	r18, r24
    3b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b56:	8e 57       	subi	r24, 0x7E	; 126
    3b58:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5a:	b9 01       	movw	r22, r18
    3b5c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    3b60:	ce 01       	movw	r24, r28
    3b62:	07 96       	adiw	r24, 0x07	; 7
    3b64:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6c:	8b 59       	subi	r24, 0x9B	; 155
    3b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b70:	fc 01       	movw	r30, r24
    3b72:	80 81       	ld	r24, Z
    3b74:	91 81       	ldd	r25, Z+1	; 0x01
    3b76:	a2 81       	ldd	r26, Z+2	; 0x02
    3b78:	b3 81       	ldd	r27, Z+3	; 0x03
    3b7a:	22 e0       	ldi	r18, 0x02	; 2
    3b7c:	ac 01       	movw	r20, r24
    3b7e:	bd 01       	movw	r22, r26
    3b80:	ce 01       	movw	r24, r28
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN6StringC1Efh>
    3b88:	ce 01       	movw	r24, r28
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZNK6String5c_strEv>
    3b90:	9c 01       	movw	r18, r24
    3b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b96:	88 57       	subi	r24, 0x78	; 120
    3b98:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9a:	b9 01       	movw	r22, r18
    3b9c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	01 96       	adiw	r24, 0x01	; 1
    3ba4:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bac:	8f 59       	subi	r24, 0x9F	; 159
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	a2 81       	ldd	r26, Z+2	; 0x02
    3bb8:	b3 81       	ldd	r27, Z+3	; 0x03
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	2e 96       	adiw	r28, 0x0e	; 14
    3bc0:	e2 e0       	ldi	r30, 0x02	; 2
    3bc2:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003bc6 <_ZN9TDSSensor13PrintTDSToLCDEv>:
    3bc6:	ae e1       	ldi	r26, 0x1E	; 30
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	e9 ee       	ldi	r30, 0xE9	; 233
    3bcc:	fd e1       	ldi	r31, 0x1D	; 29
    3bce:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    3bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    3bd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bda:	9d df       	rcall	.-198    	; 0x3b16 <_ZN9TDSSensor6GetTDSEv>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	ab 83       	std	Y+3, r26	; 0x03
    3be6:	bc 83       	std	Y+4, r27	; 0x04
    3be8:	8d e2       	ldi	r24, 0x2D	; 45
    3bea:	93 e0       	ldi	r25, 0x03	; 3
    3bec:	fc 01       	movw	r30, r24
    3bee:	80 81       	ld	r24, Z
    3bf0:	88 23       	and	r24, r24
    3bf2:	89 f4       	brne	.+34     	; 0x3c16 <_ZN9TDSSensor13PrintTDSToLCDEv+0x50>
    3bf4:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3c00:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3c04:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3c08:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3c0c:	8d e2       	ldi	r24, 0x2D	; 45
    3c0e:	93 e0       	ldi	r25, 0x03	; 3
    3c10:	21 e0       	ldi	r18, 0x01	; 1
    3c12:	fc 01       	movw	r30, r24
    3c14:	20 83       	st	Z, r18
    3c16:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    3c1a:	9b 01       	movw	r18, r22
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3c22:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3c26:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3c2a:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3c2e:	28 1b       	sub	r18, r24
    3c30:	39 0b       	sbc	r19, r25
    3c32:	4a 0b       	sbc	r20, r26
    3c34:	5b 0b       	sbc	r21, r27
    3c36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c3a:	81 5a       	subi	r24, 0xA1	; 161
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	fc 01       	movw	r30, r24
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	80 57       	subi	r24, 0x70	; 112
    3c46:	9e 4f       	sbci	r25, 0xFE	; 254
    3c48:	09 2e       	mov	r0, r25
    3c4a:	00 0c       	add	r0, r0
    3c4c:	aa 0b       	sbc	r26, r26
    3c4e:	bb 0b       	sbc	r27, r27
    3c50:	61 e0       	ldi	r22, 0x01	; 1
    3c52:	82 17       	cp	r24, r18
    3c54:	93 07       	cpc	r25, r19
    3c56:	a4 07       	cpc	r26, r20
    3c58:	b5 07       	cpc	r27, r21
    3c5a:	08 f0       	brcs	.+2      	; 0x3c5e <_ZN9TDSSensor13PrintTDSToLCDEv+0x98>
    3c5c:	60 e0       	ldi	r22, 0x00	; 0
    3c5e:	66 23       	and	r22, r22
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <_ZN9TDSSensor13PrintTDSToLCDEv+0x9e>
    3c62:	63 c0       	rjmp	.+198    	; 0x3d2a <_ZN9TDSSensor13PrintTDSToLCDEv+0x164>
    3c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c68:	87 59       	subi	r24, 0x97	; 151
    3c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	80 81       	ld	r24, Z
    3c70:	88 23       	and	r24, r24
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <_ZN9TDSSensor13PrintTDSToLCDEv+0xb0>
    3c74:	44 c0       	rjmp	.+136    	; 0x3cfe <_ZN9TDSSensor13PrintTDSToLCDEv+0x138>
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c7c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c7e:	fe 01       	movw	r30, r28
    3c80:	71 96       	adiw	r30, 0x11	; 17
    3c82:	22 e0       	ldi	r18, 0x02	; 2
    3c84:	ac 01       	movw	r20, r24
    3c86:	bd 01       	movw	r22, r26
    3c88:	cf 01       	movw	r24, r30
    3c8a:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <_ZN6StringC1Edh>
    3c8e:	ce 01       	movw	r24, r28
    3c90:	0b 96       	adiw	r24, 0x0b	; 11
    3c92:	64 e1       	ldi	r22, 0x14	; 20
    3c94:	71 e0       	ldi	r23, 0x01	; 1
    3c96:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN15StringSumHelperC1EPKc>
    3c9a:	9e 01       	movw	r18, r28
    3c9c:	2f 5e       	subi	r18, 0xEF	; 239
    3c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	0b 96       	adiw	r24, 0x0b	; 11
    3ca4:	b9 01       	movw	r22, r18
    3ca6:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <_ZplRK15StringSumHelperRK6String>
    3caa:	9c 01       	movw	r18, r24
    3cac:	ce 01       	movw	r24, r28
    3cae:	47 96       	adiw	r24, 0x17	; 23
    3cb0:	b9 01       	movw	r22, r18
    3cb2:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	0b 96       	adiw	r24, 0x0b	; 11
    3cba:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN15StringSumHelperD1Ev>
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	41 96       	adiw	r24, 0x11	; 17
    3cc2:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3cc6:	9e 01       	movw	r18, r28
    3cc8:	29 5e       	subi	r18, 0xE9	; 233
    3cca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ccc:	ce 01       	movw	r24, r28
    3cce:	05 96       	adiw	r24, 0x05	; 5
    3cd0:	b9 01       	movw	r22, r18
    3cd2:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    3cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cda:	86 59       	subi	r24, 0x96	; 150
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	9e 01       	movw	r18, r28
    3ce0:	2b 5f       	subi	r18, 0xFB	; 251
    3ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce4:	a9 01       	movw	r20, r18
    3ce6:	61 e0       	ldi	r22, 0x01	; 1
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN7LCDBase9PrintLineEs6String>
    3cee:	ce 01       	movw	r24, r28
    3cf0:	05 96       	adiw	r24, 0x05	; 5
    3cf2:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	47 96       	adiw	r24, 0x17	; 23
    3cfa:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    3cfe:	8d e0       	ldi	r24, 0x0D	; 13
    3d00:	0e 94 8d 2c 	call	0x591a	; 0x591a <digitalRead>
    3d04:	98 2f       	mov	r25, r24
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	89 27       	eor	r24, r25
    3d0a:	68 2f       	mov	r22, r24
    3d0c:	8d e0       	ldi	r24, 0x0D	; 13
    3d0e:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <digitalWrite>
    3d12:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3d1e:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3d22:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3d26:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3d2a:	6e 96       	adiw	r28, 0x1e	; 30
    3d2c:	e2 e0       	ldi	r30, 0x02	; 2
    3d2e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003d32 <_ZN9TDSSensor12CalculateTDSEv>:
    3d32:	a4 e1       	ldi	r26, 0x14	; 20
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	ef e9       	ldi	r30, 0x9F	; 159
    3d38:	fe e1       	ldi	r31, 0x1E	; 30
    3d3a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    3d3e:	9c 8b       	std	Y+20, r25	; 0x14
    3d40:	8b 8b       	std	Y+19, r24	; 0x13
    3d42:	8b 89       	ldd	r24, Y+19	; 0x13
    3d44:	9c 89       	ldd	r25, Y+20	; 0x14
    3d46:	6d d0       	rcall	.+218    	; 0x3e22 <_ZN9TDSSensor11GetTDSValueEv>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	ab 83       	std	Y+3, r26	; 0x03
    3d52:	bc 83       	std	Y+4, r27	; 0x04
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	18 86       	std	Y+8, r1	; 0x08
    3d5e:	1f 82       	std	Y+7, r1	; 0x07
    3d60:	32 c0       	rjmp	.+100    	; 0x3dc6 <_ZN9TDSSensor12CalculateTDSEv+0x94>
    3d62:	8f 81       	ldd	r24, Y+7	; 0x07
    3d64:	98 85       	ldd	r25, Y+8	; 0x08
    3d66:	8c 59       	subi	r24, 0x9C	; 156
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	9a 87       	std	Y+10, r25	; 0x0a
    3d6c:	89 87       	std	Y+9, r24	; 0x09
    3d6e:	89 85       	ldd	r24, Y+9	; 0x09
    3d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d72:	09 2e       	mov	r0, r25
    3d74:	00 0c       	add	r0, r0
    3d76:	aa 0b       	sbc	r26, r26
    3d78:	bb 0b       	sbc	r27, r27
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <delay>
    3d82:	8b 89       	ldd	r24, Y+19	; 0x13
    3d84:	9c 89       	ldd	r25, Y+20	; 0x14
    3d86:	4d d0       	rcall	.+154    	; 0x3e22 <_ZN9TDSSensor11GetTDSValueEv>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	8b 87       	std	Y+11, r24	; 0x0b
    3d8e:	9c 87       	std	Y+12, r25	; 0x0c
    3d90:	ad 87       	std	Y+13, r26	; 0x0d
    3d92:	be 87       	std	Y+14, r27	; 0x0e
    3d94:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d96:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d98:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d9a:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d9c:	69 81       	ldd	r22, Y+1	; 0x01
    3d9e:	7a 81       	ldd	r23, Y+2	; 0x02
    3da0:	8b 81       	ldd	r24, Y+3	; 0x03
    3da2:	9c 81       	ldd	r25, Y+4	; 0x04
    3da4:	08 d7       	rcall	.+3600   	; 0x4bb6 <__addsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	9a 83       	std	Y+2, r25	; 0x02
    3dae:	ab 83       	std	Y+3, r26	; 0x03
    3db0:	bc 83       	std	Y+4, r27	; 0x04
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
    3dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dbe:	98 85       	ldd	r25, Y+8	; 0x08
    3dc0:	01 96       	adiw	r24, 0x01	; 1
    3dc2:	98 87       	std	Y+8, r25	; 0x08
    3dc4:	8f 83       	std	Y+7, r24	; 0x07
    3dc6:	8f 81       	ldd	r24, Y+7	; 0x07
    3dc8:	98 85       	ldd	r25, Y+8	; 0x08
    3dca:	0b 97       	sbiw	r24, 0x0b	; 11
    3dcc:	54 f2       	brlt	.-108    	; 0x3d62 <_ZN9TDSSensor12CalculateTDSEv+0x30>
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	09 2e       	mov	r0, r25
    3dd4:	00 0c       	add	r0, r0
    3dd6:	aa 0b       	sbc	r26, r26
    3dd8:	bb 0b       	sbc	r27, r27
    3dda:	bc 01       	movw	r22, r24
    3ddc:	cd 01       	movw	r24, r26
    3dde:	bd d7       	rcall	.+3962   	; 0x4d5a <__floatsisf>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9c 01       	movw	r18, r24
    3de6:	ad 01       	movw	r20, r26
    3de8:	69 81       	ldd	r22, Y+1	; 0x01
    3dea:	7a 81       	ldd	r23, Y+2	; 0x02
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	4a d7       	rcall	.+3732   	; 0x4c86 <__divsf3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	8f 87       	std	Y+15, r24	; 0x0f
    3df8:	98 8b       	std	Y+16, r25	; 0x10
    3dfa:	a9 8b       	std	Y+17, r26	; 0x11
    3dfc:	ba 8b       	std	Y+18, r27	; 0x12
    3dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    3e00:	9c 89       	ldd	r25, Y+20	; 0x14
    3e02:	9c 01       	movw	r18, r24
    3e04:	2f 59       	subi	r18, 0x9F	; 159
    3e06:	3f 4f       	sbci	r19, 0xFF	; 255
    3e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e0a:	98 89       	ldd	r25, Y+16	; 0x10
    3e0c:	a9 89       	ldd	r26, Y+17	; 0x11
    3e0e:	ba 89       	ldd	r27, Y+18	; 0x12
    3e10:	f9 01       	movw	r30, r18
    3e12:	80 83       	st	Z, r24
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	a2 83       	std	Z+2, r26	; 0x02
    3e18:	b3 83       	std	Z+3, r27	; 0x03
    3e1a:	64 96       	adiw	r28, 0x14	; 20
    3e1c:	e2 e0       	ldi	r30, 0x02	; 2
    3e1e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00003e22 <_ZN9TDSSensor11GetTDSValueEv>:
    3e22:	a0 e1       	ldi	r26, 0x10	; 16
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	e7 e1       	ldi	r30, 0x17	; 23
    3e28:	ff e1       	ldi	r31, 0x1F	; 31
    3e2a:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x18>
    3e2e:	98 8b       	std	Y+16, r25	; 0x10
    3e30:	8f 87       	std	Y+15, r24	; 0x0f
    3e32:	85 e3       	ldi	r24, 0x35	; 53
    3e34:	93 e0       	ldi	r25, 0x03	; 3
    3e36:	fc 01       	movw	r30, r24
    3e38:	80 81       	ld	r24, Z
    3e3a:	88 23       	and	r24, r24
    3e3c:	89 f4       	brne	.+34     	; 0x3e60 <_ZN9TDSSensor11GetTDSValueEv+0x3e>
    3e3e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    3e4a:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    3e4e:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    3e52:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    3e56:	85 e3       	ldi	r24, 0x35	; 53
    3e58:	93 e0       	ldi	r25, 0x03	; 3
    3e5a:	21 e0       	ldi	r18, 0x01	; 1
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	20 83       	st	Z, r18
    3e60:	0e 94 2c 2b 	call	0x5658	; 0x5658 <millis>
    3e64:	9b 01       	movw	r18, r22
    3e66:	ac 01       	movw	r20, r24
    3e68:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    3e6c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    3e70:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    3e74:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    3e78:	79 01       	movw	r14, r18
    3e7a:	8a 01       	movw	r16, r20
    3e7c:	e8 1a       	sub	r14, r24
    3e7e:	f9 0a       	sbc	r15, r25
    3e80:	0a 0b       	sbc	r16, r26
    3e82:	1b 0b       	sbc	r17, r27
    3e84:	d8 01       	movw	r26, r16
    3e86:	c7 01       	movw	r24, r14
    3e88:	21 e0       	ldi	r18, 0x01	; 1
    3e8a:	8f 36       	cpi	r24, 0x6F	; 111
    3e8c:	91 05       	cpc	r25, r1
    3e8e:	a1 05       	cpc	r26, r1
    3e90:	b1 05       	cpc	r27, r1
    3e92:	08 f4       	brcc	.+2      	; 0x3e96 <_ZN9TDSSensor11GetTDSValueEv+0x74>
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	22 23       	and	r18, r18
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <_ZN9TDSSensor11GetTDSValueEv+0x7a>
    3e9a:	77 c0       	rjmp	.+238    	; 0x3f8a <_ZN9TDSSensor11GetTDSValueEv+0x168>
    3e9c:	88 e2       	ldi	r24, 0x28	; 40
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	9a 83       	std	Y+2, r25	; 0x02
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	98 89       	ldd	r25, Y+16	; 0x10
    3ea8:	83 5a       	subi	r24, 0xA3	; 163
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	fc 01       	movw	r30, r24
    3eae:	00 81       	ld	r16, Z
    3eb0:	11 81       	ldd	r17, Z+1	; 0x01
    3eb2:	98 01       	movw	r18, r16
    3eb4:	2f 5f       	subi	r18, 0xFF	; 255
    3eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eba:	98 89       	ldd	r25, Y+16	; 0x10
    3ebc:	83 5a       	subi	r24, 0xA3	; 163
    3ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	31 83       	std	Z+1, r19	; 0x01
    3ec4:	20 83       	st	Z, r18
    3ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec8:	98 89       	ldd	r25, Y+16	; 0x10
    3eca:	fc 01       	movw	r30, r24
    3ecc:	83 85       	ldd	r24, Z+11	; 0x0b
    3ece:	94 85       	ldd	r25, Z+12	; 0x0c
    3ed0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <analogRead>
    3ed4:	ac 01       	movw	r20, r24
    3ed6:	2f 85       	ldd	r18, Y+15	; 0x0f
    3ed8:	38 89       	ldd	r19, Y+16	; 0x10
    3eda:	c8 01       	movw	r24, r16
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	82 0f       	add	r24, r18
    3ee2:	93 1f       	adc	r25, r19
    3ee4:	0d 96       	adiw	r24, 0x0d	; 13
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	51 83       	std	Z+1, r21	; 0x01
    3eea:	40 83       	st	Z, r20
    3eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eee:	98 89       	ldd	r25, Y+16	; 0x10
    3ef0:	83 5a       	subi	r24, 0xA3	; 163
    3ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	20 81       	ld	r18, Z
    3ef8:	31 81       	ldd	r19, Z+1	; 0x01
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	9a 81       	ldd	r25, Y+2	; 0x02
    3efe:	28 17       	cp	r18, r24
    3f00:	39 07       	cpc	r19, r25
    3f02:	39 f4       	brne	.+14     	; 0x3f12 <_ZN9TDSSensor11GetTDSValueEv+0xf0>
    3f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f06:	98 89       	ldd	r25, Y+16	; 0x10
    3f08:	83 5a       	subi	r24, 0xA3	; 163
    3f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	11 82       	std	Z+1, r1	; 0x01
    3f10:	10 82       	st	Z, r1
    3f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f14:	98 89       	ldd	r25, Y+16	; 0x10
    3f16:	9c 01       	movw	r18, r24
    3f18:	23 5f       	subi	r18, 0xF3	; 243
    3f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1c:	49 81       	ldd	r20, Y+1	; 0x01
    3f1e:	5a 81       	ldd	r21, Y+2	; 0x02
    3f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f22:	98 89       	ldd	r25, Y+16	; 0x10
    3f24:	b9 01       	movw	r22, r18
    3f26:	40 d0       	rcall	.+128    	; 0x3fa8 <_ZN9TDSSensor16CalculateAverageEPii>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	8b 83       	std	Y+3, r24	; 0x03
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
    3f30:	ad 83       	std	Y+5, r26	; 0x05
    3f32:	be 83       	std	Y+6, r27	; 0x06
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	40 ea       	ldi	r20, 0xA0	; 160
    3f3a:	5b e3       	ldi	r21, 0x3B	; 59
    3f3c:	6b 81       	ldd	r22, Y+3	; 0x03
    3f3e:	7c 81       	ldd	r23, Y+4	; 0x04
    3f40:	8d 81       	ldd	r24, Y+5	; 0x05
    3f42:	9e 81       	ldd	r25, Y+6	; 0x06
    3f44:	ba d7       	rcall	.+3956   	; 0x4eba <__mulsf3>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	8f 83       	std	Y+7, r24	; 0x07
    3f4c:	98 87       	std	Y+8, r25	; 0x08
    3f4e:	a9 87       	std	Y+9, r26	; 0x09
    3f50:	ba 87       	std	Y+10, r27	; 0x0a
    3f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f54:	98 89       	ldd	r25, Y+16	; 0x10
    3f56:	82 57       	subi	r24, 0x72	; 114
    3f58:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5a:	a1 d9       	rcall	.-3262   	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	a2 81       	ldd	r26, Z+2	; 0x02
    3f64:	b3 81       	ldd	r27, Z+3	; 0x03
    3f66:	2f 81       	ldd	r18, Y+7	; 0x07
    3f68:	38 85       	ldd	r19, Y+8	; 0x08
    3f6a:	49 85       	ldd	r20, Y+9	; 0x09
    3f6c:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f6e:	bc 01       	movw	r22, r24
    3f70:	cd 01       	movw	r24, r26
    3f72:	a3 d7       	rcall	.+3910   	; 0x4eba <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	8b 87       	std	Y+11, r24	; 0x0b
    3f7a:	9c 87       	std	Y+12, r25	; 0x0c
    3f7c:	ad 87       	std	Y+13, r26	; 0x0d
    3f7e:	be 87       	std	Y+14, r27	; 0x0e
    3f80:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f82:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f84:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f86:	be 85       	ldd	r27, Y+14	; 0x0e
    3f88:	09 c0       	rjmp	.+18     	; 0x3f9c <_ZN9TDSSensor11GetTDSValueEv+0x17a>
    3f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8c:	98 89       	ldd	r25, Y+16	; 0x10
    3f8e:	8f 59       	subi	r24, 0x9F	; 159
    3f90:	9f 4f       	sbci	r25, 0xFF	; 255
    3f92:	fc 01       	movw	r30, r24
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	a2 81       	ldd	r26, Z+2	; 0x02
    3f9a:	b3 81       	ldd	r27, Z+3	; 0x03
    3f9c:	bc 01       	movw	r22, r24
    3f9e:	cd 01       	movw	r24, r26
    3fa0:	60 96       	adiw	r28, 0x10	; 16
    3fa2:	e6 e0       	ldi	r30, 0x06	; 6
    3fa4:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x18>

00003fa8 <_ZN9TDSSensor16CalculateAverageEPii>:
    3fa8:	cf 92       	push	r12
    3faa:	df 92       	push	r13
    3fac:	ef 92       	push	r14
    3fae:	ff 92       	push	r15
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	68 97       	sbiw	r28, 0x18	; 24
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	98 8b       	std	Y+16, r25	; 0x10
    3fc6:	8f 87       	std	Y+15, r24	; 0x0f
    3fc8:	7a 8b       	std	Y+18, r23	; 0x12
    3fca:	69 8b       	std	Y+17, r22	; 0x11
    3fcc:	5c 8b       	std	Y+20, r21	; 0x14
    3fce:	4b 8b       	std	Y+19, r20	; 0x13
    3fd0:	1f 82       	std	Y+7, r1	; 0x07
    3fd2:	18 86       	std	Y+8, r1	; 0x08
    3fd4:	19 86       	std	Y+9, r1	; 0x09
    3fd6:	1a 86       	std	Y+10, r1	; 0x0a
    3fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fda:	9c 89       	ldd	r25, Y+20	; 0x14
    3fdc:	18 16       	cp	r1, r24
    3fde:	19 06       	cpc	r1, r25
    3fe0:	5c f0       	brlt	.+22     	; 0x3ff8 <_ZN9TDSSensor16CalculateAverageEPii+0x50>
    3fe2:	8a ec       	ldi	r24, 0xCA	; 202
    3fe4:	93 e0       	ldi	r25, 0x03	; 3
    3fe6:	bc 01       	movw	r22, r24
    3fe8:	82 e6       	ldi	r24, 0x62	; 98
    3fea:	95 e0       	ldi	r25, 0x05	; 5
    3fec:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	27 c1       	rjmp	.+590    	; 0x4246 <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    3ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    3ffc:	05 97       	sbiw	r24, 0x05	; 5
    3ffe:	0c f0       	brlt	.+2      	; 0x4002 <_ZN9TDSSensor16CalculateAverageEPii+0x5a>
    4000:	48 c0       	rjmp	.+144    	; 0x4092 <_ZN9TDSSensor16CalculateAverageEPii+0xea>
    4002:	1a 82       	std	Y+2, r1	; 0x02
    4004:	19 82       	std	Y+1, r1	; 0x01
    4006:	20 c0       	rjmp	.+64     	; 0x4048 <_ZN9TDSSensor16CalculateAverageEPii+0xa0>
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	29 89       	ldd	r18, Y+17	; 0x11
    4012:	3a 89       	ldd	r19, Y+18	; 0x12
    4014:	82 0f       	add	r24, r18
    4016:	93 1f       	adc	r25, r19
    4018:	fc 01       	movw	r30, r24
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	09 2e       	mov	r0, r25
    4020:	00 0c       	add	r0, r0
    4022:	aa 0b       	sbc	r26, r26
    4024:	bb 0b       	sbc	r27, r27
    4026:	2f 81       	ldd	r18, Y+7	; 0x07
    4028:	38 85       	ldd	r19, Y+8	; 0x08
    402a:	49 85       	ldd	r20, Y+9	; 0x09
    402c:	5a 85       	ldd	r21, Y+10	; 0x0a
    402e:	82 0f       	add	r24, r18
    4030:	93 1f       	adc	r25, r19
    4032:	a4 1f       	adc	r26, r20
    4034:	b5 1f       	adc	r27, r21
    4036:	8f 83       	std	Y+7, r24	; 0x07
    4038:	98 87       	std	Y+8, r25	; 0x08
    403a:	a9 87       	std	Y+9, r26	; 0x09
    403c:	ba 87       	std	Y+10, r27	; 0x0a
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	01 96       	adiw	r24, 0x01	; 1
    4044:	9a 83       	std	Y+2, r25	; 0x02
    4046:	89 83       	std	Y+1, r24	; 0x01
    4048:	29 81       	ldd	r18, Y+1	; 0x01
    404a:	3a 81       	ldd	r19, Y+2	; 0x02
    404c:	8b 89       	ldd	r24, Y+19	; 0x13
    404e:	9c 89       	ldd	r25, Y+20	; 0x14
    4050:	28 17       	cp	r18, r24
    4052:	39 07       	cpc	r19, r25
    4054:	cc f2       	brlt	.-78     	; 0x4008 <_ZN9TDSSensor16CalculateAverageEPii+0x60>
    4056:	8b 89       	ldd	r24, Y+19	; 0x13
    4058:	9c 89       	ldd	r25, Y+20	; 0x14
    405a:	9c 01       	movw	r18, r24
    405c:	99 0f       	add	r25, r25
    405e:	44 0b       	sbc	r20, r20
    4060:	55 0b       	sbc	r21, r21
    4062:	8f 81       	ldd	r24, Y+7	; 0x07
    4064:	98 85       	ldd	r25, Y+8	; 0x08
    4066:	a9 85       	ldd	r26, Y+9	; 0x09
    4068:	ba 85       	ldd	r27, Y+10	; 0x0a
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <__divmodsi4>
    4072:	da 01       	movw	r26, r20
    4074:	c9 01       	movw	r24, r18
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	6f d6       	rcall	.+3294   	; 0x4d5a <__floatsisf>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	8b 87       	std	Y+11, r24	; 0x0b
    4082:	9c 87       	std	Y+12, r25	; 0x0c
    4084:	ad 87       	std	Y+13, r26	; 0x0d
    4086:	be 87       	std	Y+14, r27	; 0x0e
    4088:	8b 85       	ldd	r24, Y+11	; 0x0b
    408a:	9c 85       	ldd	r25, Y+12	; 0x0c
    408c:	ad 85       	ldd	r26, Y+13	; 0x0d
    408e:	be 85       	ldd	r27, Y+14	; 0x0e
    4090:	da c0       	rjmp	.+436    	; 0x4246 <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    4092:	89 89       	ldd	r24, Y+17	; 0x11
    4094:	9a 89       	ldd	r25, Y+18	; 0x12
    4096:	fc 01       	movw	r30, r24
    4098:	20 81       	ld	r18, Z
    409a:	31 81       	ldd	r19, Z+1	; 0x01
    409c:	89 89       	ldd	r24, Y+17	; 0x11
    409e:	9a 89       	ldd	r25, Y+18	; 0x12
    40a0:	02 96       	adiw	r24, 0x02	; 2
    40a2:	fc 01       	movw	r30, r24
    40a4:	80 81       	ld	r24, Z
    40a6:	91 81       	ldd	r25, Z+1	; 0x01
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	7c f4       	brge	.+30     	; 0x40cc <_ZN9TDSSensor16CalculateAverageEPii+0x124>
    40ae:	89 89       	ldd	r24, Y+17	; 0x11
    40b0:	9a 89       	ldd	r25, Y+18	; 0x12
    40b2:	fc 01       	movw	r30, r24
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	9e 83       	std	Y+6, r25	; 0x06
    40ba:	8d 83       	std	Y+5, r24	; 0x05
    40bc:	89 89       	ldd	r24, Y+17	; 0x11
    40be:	9a 89       	ldd	r25, Y+18	; 0x12
    40c0:	fc 01       	movw	r30, r24
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
    40ca:	0e c0       	rjmp	.+28     	; 0x40e8 <_ZN9TDSSensor16CalculateAverageEPii+0x140>
    40cc:	89 89       	ldd	r24, Y+17	; 0x11
    40ce:	9a 89       	ldd	r25, Y+18	; 0x12
    40d0:	fc 01       	movw	r30, r24
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
    40da:	89 89       	ldd	r24, Y+17	; 0x11
    40dc:	9a 89       	ldd	r25, Y+18	; 0x12
    40de:	fc 01       	movw	r30, r24
    40e0:	80 81       	ld	r24, Z
    40e2:	91 81       	ldd	r25, Z+1	; 0x01
    40e4:	9c 83       	std	Y+4, r25	; 0x04
    40e6:	8b 83       	std	Y+3, r24	; 0x03
    40e8:	82 e0       	ldi	r24, 0x02	; 2
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	9a 83       	std	Y+2, r25	; 0x02
    40ee:	89 83       	std	Y+1, r24	; 0x01
    40f0:	80 c0       	rjmp	.+256    	; 0x41f2 <_ZN9TDSSensor16CalculateAverageEPii+0x24a>
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	9a 81       	ldd	r25, Y+2	; 0x02
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	29 89       	ldd	r18, Y+17	; 0x11
    40fc:	3a 89       	ldd	r19, Y+18	; 0x12
    40fe:	82 0f       	add	r24, r18
    4100:	93 1f       	adc	r25, r19
    4102:	fc 01       	movw	r30, r24
    4104:	20 81       	ld	r18, Z
    4106:	31 81       	ldd	r19, Z+1	; 0x01
    4108:	8d 81       	ldd	r24, Y+5	; 0x05
    410a:	9e 81       	ldd	r25, Y+6	; 0x06
    410c:	28 17       	cp	r18, r24
    410e:	39 07       	cpc	r19, r25
    4110:	04 f5       	brge	.+64     	; 0x4152 <_ZN9TDSSensor16CalculateAverageEPii+0x1aa>
    4112:	8d 81       	ldd	r24, Y+5	; 0x05
    4114:	9e 81       	ldd	r25, Y+6	; 0x06
    4116:	09 2e       	mov	r0, r25
    4118:	00 0c       	add	r0, r0
    411a:	aa 0b       	sbc	r26, r26
    411c:	bb 0b       	sbc	r27, r27
    411e:	2f 81       	ldd	r18, Y+7	; 0x07
    4120:	38 85       	ldd	r19, Y+8	; 0x08
    4122:	49 85       	ldd	r20, Y+9	; 0x09
    4124:	5a 85       	ldd	r21, Y+10	; 0x0a
    4126:	82 0f       	add	r24, r18
    4128:	93 1f       	adc	r25, r19
    412a:	a4 1f       	adc	r26, r20
    412c:	b5 1f       	adc	r27, r21
    412e:	8f 83       	std	Y+7, r24	; 0x07
    4130:	98 87       	std	Y+8, r25	; 0x08
    4132:	a9 87       	std	Y+9, r26	; 0x09
    4134:	ba 87       	std	Y+10, r27	; 0x0a
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	88 0f       	add	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	29 89       	ldd	r18, Y+17	; 0x11
    4140:	3a 89       	ldd	r19, Y+18	; 0x12
    4142:	82 0f       	add	r24, r18
    4144:	93 1f       	adc	r25, r19
    4146:	fc 01       	movw	r30, r24
    4148:	80 81       	ld	r24, Z
    414a:	91 81       	ldd	r25, Z+1	; 0x01
    414c:	9e 83       	std	Y+6, r25	; 0x06
    414e:	8d 83       	std	Y+5, r24	; 0x05
    4150:	4b c0       	rjmp	.+150    	; 0x41e8 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	9a 81       	ldd	r25, Y+2	; 0x02
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	29 89       	ldd	r18, Y+17	; 0x11
    415c:	3a 89       	ldd	r19, Y+18	; 0x12
    415e:	82 0f       	add	r24, r18
    4160:	93 1f       	adc	r25, r19
    4162:	fc 01       	movw	r30, r24
    4164:	20 81       	ld	r18, Z
    4166:	31 81       	ldd	r19, Z+1	; 0x01
    4168:	8b 81       	ldd	r24, Y+3	; 0x03
    416a:	9c 81       	ldd	r25, Y+4	; 0x04
    416c:	82 17       	cp	r24, r18
    416e:	93 07       	cpc	r25, r19
    4170:	04 f5       	brge	.+64     	; 0x41b2 <_ZN9TDSSensor16CalculateAverageEPii+0x20a>
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	9c 81       	ldd	r25, Y+4	; 0x04
    4176:	09 2e       	mov	r0, r25
    4178:	00 0c       	add	r0, r0
    417a:	aa 0b       	sbc	r26, r26
    417c:	bb 0b       	sbc	r27, r27
    417e:	2f 81       	ldd	r18, Y+7	; 0x07
    4180:	38 85       	ldd	r19, Y+8	; 0x08
    4182:	49 85       	ldd	r20, Y+9	; 0x09
    4184:	5a 85       	ldd	r21, Y+10	; 0x0a
    4186:	82 0f       	add	r24, r18
    4188:	93 1f       	adc	r25, r19
    418a:	a4 1f       	adc	r26, r20
    418c:	b5 1f       	adc	r27, r21
    418e:	8f 83       	std	Y+7, r24	; 0x07
    4190:	98 87       	std	Y+8, r25	; 0x08
    4192:	a9 87       	std	Y+9, r26	; 0x09
    4194:	ba 87       	std	Y+10, r27	; 0x0a
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	9a 81       	ldd	r25, Y+2	; 0x02
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	29 89       	ldd	r18, Y+17	; 0x11
    41a0:	3a 89       	ldd	r19, Y+18	; 0x12
    41a2:	82 0f       	add	r24, r18
    41a4:	93 1f       	adc	r25, r19
    41a6:	fc 01       	movw	r30, r24
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	9c 83       	std	Y+4, r25	; 0x04
    41ae:	8b 83       	std	Y+3, r24	; 0x03
    41b0:	1b c0       	rjmp	.+54     	; 0x41e8 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	29 89       	ldd	r18, Y+17	; 0x11
    41bc:	3a 89       	ldd	r19, Y+18	; 0x12
    41be:	82 0f       	add	r24, r18
    41c0:	93 1f       	adc	r25, r19
    41c2:	fc 01       	movw	r30, r24
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	09 2e       	mov	r0, r25
    41ca:	00 0c       	add	r0, r0
    41cc:	aa 0b       	sbc	r26, r26
    41ce:	bb 0b       	sbc	r27, r27
    41d0:	2f 81       	ldd	r18, Y+7	; 0x07
    41d2:	38 85       	ldd	r19, Y+8	; 0x08
    41d4:	49 85       	ldd	r20, Y+9	; 0x09
    41d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    41d8:	82 0f       	add	r24, r18
    41da:	93 1f       	adc	r25, r19
    41dc:	a4 1f       	adc	r26, r20
    41de:	b5 1f       	adc	r27, r21
    41e0:	8f 83       	std	Y+7, r24	; 0x07
    41e2:	98 87       	std	Y+8, r25	; 0x08
    41e4:	a9 87       	std	Y+9, r26	; 0x09
    41e6:	ba 87       	std	Y+10, r27	; 0x0a
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	01 96       	adiw	r24, 0x01	; 1
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	29 81       	ldd	r18, Y+1	; 0x01
    41f4:	3a 81       	ldd	r19, Y+2	; 0x02
    41f6:	8b 89       	ldd	r24, Y+19	; 0x13
    41f8:	9c 89       	ldd	r25, Y+20	; 0x14
    41fa:	28 17       	cp	r18, r24
    41fc:	39 07       	cpc	r19, r25
    41fe:	0c f4       	brge	.+2      	; 0x4202 <_ZN9TDSSensor16CalculateAverageEPii+0x25a>
    4200:	78 cf       	rjmp	.-272    	; 0x40f2 <_ZN9TDSSensor16CalculateAverageEPii+0x14a>
    4202:	6f 81       	ldd	r22, Y+7	; 0x07
    4204:	78 85       	ldd	r23, Y+8	; 0x08
    4206:	89 85       	ldd	r24, Y+9	; 0x09
    4208:	9a 85       	ldd	r25, Y+10	; 0x0a
    420a:	a7 d5       	rcall	.+2894   	; 0x4d5a <__floatsisf>
    420c:	6b 01       	movw	r12, r22
    420e:	7c 01       	movw	r14, r24
    4210:	8b 89       	ldd	r24, Y+19	; 0x13
    4212:	9c 89       	ldd	r25, Y+20	; 0x14
    4214:	02 97       	sbiw	r24, 0x02	; 2
    4216:	09 2e       	mov	r0, r25
    4218:	00 0c       	add	r0, r0
    421a:	aa 0b       	sbc	r26, r26
    421c:	bb 0b       	sbc	r27, r27
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	9b d5       	rcall	.+2870   	; 0x4d5a <__floatsisf>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	9c 01       	movw	r18, r24
    422a:	ad 01       	movw	r20, r26
    422c:	c7 01       	movw	r24, r14
    422e:	b6 01       	movw	r22, r12
    4230:	2a d5       	rcall	.+2644   	; 0x4c86 <__divsf3>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	8b 87       	std	Y+11, r24	; 0x0b
    4238:	9c 87       	std	Y+12, r25	; 0x0c
    423a:	ad 87       	std	Y+13, r26	; 0x0d
    423c:	be 87       	std	Y+14, r27	; 0x0e
    423e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4240:	9c 85       	ldd	r25, Y+12	; 0x0c
    4242:	ad 85       	ldd	r26, Y+13	; 0x0d
    4244:	be 85       	ldd	r27, Y+14	; 0x0e
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	68 96       	adiw	r28, 0x18	; 24
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	f8 94       	cli
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	0f be       	out	0x3f, r0	; 63
    4254:	cd bf       	out	0x3d, r28	; 61
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	df 90       	pop	r13
    4260:	cf 90       	pop	r12
    4262:	08 95       	ret

00004264 <_ZN9TDSSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class TDSSensor : public erom::Storage {
    4264:	a2 e0       	ldi	r26, 0x02	; 2
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	e8 e3       	ldi	r30, 0x38	; 56
    426a:	f1 e2       	ldi	r31, 0x21	; 33
    426c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	2c eb       	ldi	r18, 0xBC	; 188
    427a:	31 e0       	ldi	r19, 0x01	; 1
    427c:	fc 01       	movw	r30, r24
    427e:	31 83       	std	Z+1, r19	; 0x01
    4280:	20 83       	st	Z, r18
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	9a 81       	ldd	r25, Y+2	; 0x02
    4286:	88 57       	subi	r24, 0x78	; 120
    4288:	9f 4f       	sbci	r25, 0xFF	; 255
    428a:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	8e 57       	subi	r24, 0x7E	; 126
    4294:	9f 4f       	sbci	r25, 0xFF	; 255
    4296:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	9a 81       	ldd	r25, Y+2	; 0x02
    429e:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN4erom7StorageD1Ev>
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	89 2b       	or	r24, r25
    42a8:	21 f0       	breq	.+8      	; 0x42b2 <_ZN9TDSSensorD1Ev+0x4e>
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	9a 81       	ldd	r25, Y+2	; 0x02
    42ae:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    42b2:	22 96       	adiw	r28, 0x02	; 2
    42b4:	e2 e0       	ldi	r30, 0x02	; 2
    42b6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000042ba <_ZN9TDSSensorD0Ev>:
    42ba:	a2 e0       	ldi	r26, 0x02	; 2
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	e3 e6       	ldi	r30, 0x63	; 99
    42c0:	f1 e2       	ldi	r31, 0x21	; 33
    42c2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	ca df       	rcall	.-108    	; 0x4264 <_ZN9TDSSensorD1Ev>
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	0e 94 85 29 	call	0x530a	; 0x530a <_ZdlPv>
    42d8:	22 96       	adiw	r28, 0x02	; 2
    42da:	e2 e0       	ldi	r30, 0x02	; 2
    42dc:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000042e0 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    42e0:	a2 e0       	ldi	r26, 0x02	; 2
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	e6 e7       	ldi	r30, 0x76	; 118
    42e6:	f1 e2       	ldi	r31, 0x21	; 33
    42e8:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	fc 01       	movw	r30, r24
    42f6:	84 81       	ldd	r24, Z+4	; 0x04
    42f8:	95 81       	ldd	r25, Z+5	; 0x05
    42fa:	22 96       	adiw	r28, 0x02	; 2
    42fc:	e2 e0       	ldi	r30, 0x02	; 2
    42fe:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004302 <_ZN6StringpLEPKc>:
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    4302:	a4 e0       	ldi	r26, 0x04	; 4
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	e7 e8       	ldi	r30, 0x87	; 135
    4308:	f1 e2       	ldi	r31, 0x21	; 33
    430a:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	7c 83       	std	Y+4, r23	; 0x04
    4314:	6b 83       	std	Y+3, r22	; 0x03
    4316:	2b 81       	ldd	r18, Y+3	; 0x03
    4318:	3c 81       	ldd	r19, Y+4	; 0x04
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	9a 81       	ldd	r25, Y+2	; 0x02
    431e:	b9 01       	movw	r22, r18
    4320:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN6String6concatEPKc>
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	9a 81       	ldd	r25, Y+2	; 0x02
    4328:	24 96       	adiw	r28, 0x04	; 4
    432a:	e2 e0       	ldi	r30, 0x02	; 2
    432c:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004330 <_ZNK6StringeqEPKc>:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    4330:	a4 e0       	ldi	r26, 0x04	; 4
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	ee e9       	ldi	r30, 0x9E	; 158
    4336:	f1 e2       	ldi	r31, 0x21	; 33
    4338:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    433c:	9a 83       	std	Y+2, r25	; 0x02
    433e:	89 83       	std	Y+1, r24	; 0x01
    4340:	7c 83       	std	Y+4, r23	; 0x04
    4342:	6b 83       	std	Y+3, r22	; 0x03
    4344:	2b 81       	ldd	r18, Y+3	; 0x03
    4346:	3c 81       	ldd	r19, Y+4	; 0x04
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	9a 81       	ldd	r25, Y+2	; 0x02
    434c:	b9 01       	movw	r22, r18
    434e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <_ZNK6String6equalsEPKc>
    4352:	24 96       	adiw	r28, 0x04	; 4
    4354:	e2 e0       	ldi	r30, 0x02	; 2
    4356:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000435a <_ZN15WaterSensorWire5SetupEv>:
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";

void WaterSensorWire::Setup() {
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	e3 eb       	ldi	r30, 0xB3	; 179
    4360:	f1 e2       	ldi	r31, 0x21	; 33
    4362:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    Serial.print("_slave: ");
    4366:	6a e1       	ldi	r22, 0x1A	; 26
    4368:	71 e0       	ldi	r23, 0x01	; 1
    436a:	82 e6       	ldi	r24, 0x62	; 98
    436c:	95 e0       	ldi	r25, 0x05	; 5
    436e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_ZN5Print5printEPKc>
    Serial.println(_slave);
    4372:	4a e0       	ldi	r20, 0x0A	; 10
    4374:	50 e0       	ldi	r21, 0x00	; 0
    4376:	68 e0       	ldi	r22, 0x08	; 8
    4378:	82 e6       	ldi	r24, 0x62	; 98
    437a:	95 e0       	ldi	r25, 0x05	; 5
    437c:	0e 94 cd 2a 	call	0x559a	; 0x559a <_ZN5Print7printlnEhi>

    Wire.begin(_slave); //attached to esp8266 wifi
    4380:	68 e0       	ldi	r22, 0x08	; 8
    4382:	8b ea       	ldi	r24, 0xAB	; 171
    4384:	92 e0       	ldi	r25, 0x02	; 2
    4386:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN7TwoWire5beginEh>
    Wire.onRequest(Request);
    438a:	68 eb       	ldi	r22, 0xB8	; 184
    438c:	72 e2       	ldi	r23, 0x22	; 34
    438e:	8b ea       	ldi	r24, 0xAB	; 171
    4390:	92 e0       	ldi	r25, 0x02	; 2
    4392:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZN7TwoWire9onRequestEPFvvE>
    Wire.onReceive(Receive);
    4396:	64 ed       	ldi	r22, 0xD4	; 212
    4398:	71 e2       	ldi	r23, 0x21	; 33
    439a:	8b ea       	ldi	r24, 0xAB	; 171
    439c:	92 e0       	ldi	r25, 0x02	; 2
    439e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN7TwoWire9onReceiveEPFviE>

}
    43a2:	e2 e0       	ldi	r30, 0x02	; 2
    43a4:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000043a8 <_ZN15WaterSensorWire7ReceiveEi>:
void WaterSensorWire::Receive(int bytes) {
    43a8:	a9 e2       	ldi	r26, 0x29	; 41
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	ea ed       	ldi	r30, 0xDA	; 218
    43ae:	f1 e2       	ldi	r31, 0x21	; 33
    43b0:	0c 94 81 2f 	jmp	0x5f02	; 0x5f02 <__prologue_saves__+0x1e>
    43b4:	99 a7       	std	Y+41, r25	; 0x29
    43b6:	88 a7       	std	Y+40, r24	; 0x28
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!

    _wireRequest = "";
    43b8:	63 e2       	ldi	r22, 0x23	; 35
    43ba:	71 e0       	ldi	r23, 0x01	; 1
    43bc:	85 e4       	ldi	r24, 0x45	; 69
    43be:	93 e0       	ldi	r25, 0x03	; 3
    43c0:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    _cmd = "";
    43c4:	63 e2       	ldi	r22, 0x23	; 35
    43c6:	71 e0       	ldi	r23, 0x01	; 1
    43c8:	81 e5       	ldi	r24, 0x51	; 81
    43ca:	93 e0       	ldi	r25, 0x03	; 3
    43cc:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    _cmdData = "";
    43d0:	63 e2       	ldi	r22, 0x23	; 35
    43d2:	71 e0       	ldi	r23, 0x01	; 1
    43d4:	87 e5       	ldi	r24, 0x57	; 87
    43d6:	93 e0       	ldi	r25, 0x03	; 3
    43d8:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    if(bytes == _wireReqLength) {
    43dc:	88 a5       	ldd	r24, Y+40	; 0x28
    43de:	99 a5       	ldd	r25, Y+41	; 0x29
    43e0:	44 97       	sbiw	r24, 0x14	; 20
    43e2:	09 f0       	breq	.+2      	; 0x43e6 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    43e4:	b3 c0       	rjmp	.+358    	; 0x454c <_ZN15WaterSensorWire7ReceiveEi+0x1a4>
        while (0 < Wire.available()) {
    43e6:	0a c0       	rjmp	.+20     	; 0x43fc <_ZN15WaterSensorWire7ReceiveEi+0x54>
            char c = Wire.read();
    43e8:	8b ea       	ldi	r24, 0xAB	; 171
    43ea:	92 e0       	ldi	r25, 0x02	; 2
    43ec:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN7TwoWire4readEv>
    43f0:	89 83       	std	Y+1, r24	; 0x01
            _wireRequest.concat(c);
    43f2:	69 81       	ldd	r22, Y+1	; 0x01
    43f4:	85 e4       	ldi	r24, 0x45	; 69
    43f6:	93 e0       	ldi	r25, 0x03	; 3
    43f8:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_ZN6String6concatEc>

    _wireRequest = "";
    _cmd = "";
    _cmdData = "";
    if(bytes == _wireReqLength) {
        while (0 < Wire.available()) {
    43fc:	8b ea       	ldi	r24, 0xAB	; 171
    43fe:	92 e0       	ldi	r25, 0x02	; 2
    4400:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN7TwoWire9availableEv>
    4404:	21 e0       	ldi	r18, 0x01	; 1
    4406:	18 16       	cp	r1, r24
    4408:	19 06       	cpc	r1, r25
    440a:	0c f0       	brlt	.+2      	; 0x440e <_ZN15WaterSensorWire7ReceiveEi+0x66>
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	22 23       	and	r18, r18
    4410:	59 f7       	brne	.-42     	; 0x43e8 <_ZN15WaterSensorWire7ReceiveEi+0x40>
            char c = Wire.read();
            _wireRequest.concat(c);
        }
        //Serial.println("Wire Request: " + _wireRequest);
        _wireRequest.trim();
    4412:	85 e4       	ldi	r24, 0x45	; 69
    4414:	93 e0       	ldi	r25, 0x03	; 3
    4416:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <_ZN6String4trimEv>
        if(_wireRequest.startsWith("/")) {
    441a:	ce 01       	movw	r24, r28
    441c:	46 96       	adiw	r24, 0x16	; 22
    441e:	64 e2       	ldi	r22, 0x24	; 36
    4420:	71 e0       	ldi	r23, 0x01	; 1
    4422:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    4426:	ce 01       	movw	r24, r28
    4428:	46 96       	adiw	r24, 0x16	; 22
    442a:	bc 01       	movw	r22, r24
    442c:	85 e4       	ldi	r24, 0x45	; 69
    442e:	93 e0       	ldi	r25, 0x03	; 3
    4430:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <_ZNK6String10startsWithERKS_>
    4434:	11 e0       	ldi	r17, 0x01	; 1
    4436:	88 23       	and	r24, r24
    4438:	09 f4       	brne	.+2      	; 0x443c <_ZN15WaterSensorWire7ReceiveEi+0x94>
    443a:	10 e0       	ldi	r17, 0x00	; 0
    443c:	ce 01       	movw	r24, r28
    443e:	46 96       	adiw	r24, 0x16	; 22
    4440:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    4444:	11 23       	and	r17, r17
    4446:	39 f0       	breq	.+14     	; 0x4456 <_ZN15WaterSensorWire7ReceiveEi+0xae>
            _cmd = _wireRequest;
    4448:	65 e4       	ldi	r22, 0x45	; 69
    444a:	73 e0       	ldi	r23, 0x03	; 3
    444c:	81 e5       	ldi	r24, 0x51	; 81
    444e:	93 e0       	ldi	r25, 0x03	; 3
    4450:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
    4454:	89 c0       	rjmp	.+274    	; 0x4568 <_ZN15WaterSensorWire7ReceiveEi+0x1c0>
            //Serial.println("cmd: " + _cmd);
        }
        else {
            _cmdData = _wireRequest;
    4456:	65 e4       	ldi	r22, 0x45	; 69
    4458:	73 e0       	ldi	r23, 0x03	; 3
    445a:	87 e5       	ldi	r24, 0x57	; 87
    445c:	93 e0       	ldi	r25, 0x03	; 3
    445e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
    4462:	ce 01       	movw	r24, r28
    4464:	40 96       	adiw	r24, 0x10	; 16
    4466:	67 e5       	ldi	r22, 0x57	; 87
    4468:	73 e0       	ldi	r23, 0x03	; 3
    446a:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    446e:	ce 01       	movw	r24, r28
    4470:	4c 96       	adiw	r24, 0x1c	; 28
    4472:	be 01       	movw	r22, r28
    4474:	60 5f       	subi	r22, 0xF0	; 240
    4476:	7f 4f       	sbci	r23, 0xFF	; 255
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	4d e3       	ldi	r20, 0x3D	; 61
    447e:	9a d1       	rcall	.+820    	; 0x47b4 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    4480:	ce 01       	movw	r24, r28
    4482:	40 96       	adiw	r24, 0x10	; 16
    4484:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
            String val = SplitString(_cmdData, '=', 1);
    4488:	ce 01       	movw	r24, r28
    448a:	0a 96       	adiw	r24, 0x0a	; 10
    448c:	67 e5       	ldi	r22, 0x57	; 87
    448e:	73 e0       	ldi	r23, 0x03	; 3
    4490:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN6StringC1ERKS_>
    4494:	ce 01       	movw	r24, r28
    4496:	82 96       	adiw	r24, 0x22	; 34
    4498:	be 01       	movw	r22, r28
    449a:	66 5f       	subi	r22, 0xF6	; 246
    449c:	7f 4f       	sbci	r23, 0xFF	; 255
    449e:	21 e0       	ldi	r18, 0x01	; 1
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	4d e3       	ldi	r20, 0x3D	; 61
    44a4:	87 d1       	rcall	.+782    	; 0x47b4 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    44a6:	ce 01       	movw	r24, r28
    44a8:	0a 96       	adiw	r24, 0x0a	; 10
    44aa:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
            if(var == "tdsoffset") {
    44ae:	ce 01       	movw	r24, r28
    44b0:	4c 96       	adiw	r24, 0x1c	; 28
    44b2:	66 e2       	ldi	r22, 0x26	; 38
    44b4:	71 e0       	ldi	r23, 0x01	; 1
    44b6:	3c df       	rcall	.-392    	; 0x4330 <_ZNK6StringeqEPKc>
    44b8:	98 2f       	mov	r25, r24
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	99 23       	and	r25, r25
    44be:	09 f4       	brne	.+2      	; 0x44c2 <_ZN15WaterSensorWire7ReceiveEi+0x11a>
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	88 23       	and	r24, r24
    44c4:	b9 f0       	breq	.+46     	; 0x44f4 <_ZN15WaterSensorWire7ReceiveEi+0x14c>
                double offset = val.toFloat();
    44c6:	ce 01       	movw	r24, r28
    44c8:	82 96       	adiw	r24, 0x22	; 34
    44ca:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZNK6String7toFloatEv>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	8a 83       	std	Y+2, r24	; 0x02
    44d4:	9b 83       	std	Y+3, r25	; 0x03
    44d6:	ac 83       	std	Y+4, r26	; 0x04
    44d8:	bd 83       	std	Y+5, r27	; 0x05
                TheTDSSensor.Update(offset);
    44da:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    44de:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    44e2:	8a 81       	ldd	r24, Y+2	; 0x02
    44e4:	9b 81       	ldd	r25, Y+3	; 0x03
    44e6:	ac 81       	ldd	r26, Y+4	; 0x04
    44e8:	bd 81       	ldd	r27, Y+5	; 0x05
    44ea:	ac 01       	movw	r20, r24
    44ec:	bd 01       	movw	r22, r26
    44ee:	c9 01       	movw	r24, r18
    44f0:	f3 da       	rcall	.-2586   	; 0x3ad8 <_ZN9TDSSensor6UpdateEd>
    44f2:	23 c0       	rjmp	.+70     	; 0x453a <_ZN15WaterSensorWire7ReceiveEi+0x192>
            }
            else if(var == "phoffset") {
    44f4:	ce 01       	movw	r24, r28
    44f6:	4c 96       	adiw	r24, 0x1c	; 28
    44f8:	60 e3       	ldi	r22, 0x30	; 48
    44fa:	71 e0       	ldi	r23, 0x01	; 1
    44fc:	19 df       	rcall	.-462    	; 0x4330 <_ZNK6StringeqEPKc>
    44fe:	98 2f       	mov	r25, r24
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	99 23       	and	r25, r25
    4504:	09 f4       	brne	.+2      	; 0x4508 <_ZN15WaterSensorWire7ReceiveEi+0x160>
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	88 23       	and	r24, r24
    450a:	b9 f0       	breq	.+46     	; 0x453a <_ZN15WaterSensorWire7ReceiveEi+0x192>
                double offset = val.toFloat();
    450c:	ce 01       	movw	r24, r28
    450e:	82 96       	adiw	r24, 0x22	; 34
    4510:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZNK6String7toFloatEv>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	8e 83       	std	Y+6, r24	; 0x06
    451a:	9f 83       	std	Y+7, r25	; 0x07
    451c:	a8 87       	std	Y+8, r26	; 0x08
    451e:	b9 87       	std	Y+9, r27	; 0x09
                ThePHSensor.Update(offset);
    4520:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    4524:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    4528:	8e 81       	ldd	r24, Y+6	; 0x06
    452a:	9f 81       	ldd	r25, Y+7	; 0x07
    452c:	a8 85       	ldd	r26, Y+8	; 0x08
    452e:	b9 85       	ldd	r27, Y+9	; 0x09
    4530:	ac 01       	movw	r20, r24
    4532:	bd 01       	movw	r22, r26
    4534:	c9 01       	movw	r24, r18
    4536:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN8PHSensor6UpdateEd>
        }
        else {
            _cmdData = _wireRequest;
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
            String val = SplitString(_cmdData, '=', 1);
    453a:	ce 01       	movw	r24, r28
    453c:	82 96       	adiw	r24, 0x22	; 34
    453e:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
                TheTDSSensor.Update(offset);
            }
            else if(var == "phoffset") {
                double offset = val.toFloat();
                ThePHSensor.Update(offset);
            }
    4542:	ce 01       	movw	r24, r28
    4544:	4c 96       	adiw	r24, 0x1c	; 28
    4546:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    454a:	0e c0       	rjmp	.+28     	; 0x4568 <_ZN15WaterSensorWire7ReceiveEi+0x1c0>
        }
    }
    else {
        Serial.print(F("Unexpected number of bytes received: "));
    454c:	84 ef       	ldi	r24, 0xF4	; 244
    454e:	93 e0       	ldi	r25, 0x03	; 3
    4550:	bc 01       	movw	r22, r24
    4552:	82 e6       	ldi	r24, 0x62	; 98
    4554:	95 e0       	ldi	r25, 0x05	; 5
    4556:	1a d7       	rcall	.+3636   	; 0x538c <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(bytes);
    4558:	88 a5       	ldd	r24, Y+40	; 0x28
    455a:	99 a5       	ldd	r25, Y+41	; 0x29
    455c:	4a e0       	ldi	r20, 0x0A	; 10
    455e:	50 e0       	ldi	r21, 0x00	; 0
    4560:	bc 01       	movw	r22, r24
    4562:	82 e6       	ldi	r24, 0x62	; 98
    4564:	95 e0       	ldi	r25, 0x05	; 5
    4566:	f8 d7       	rcall	.+4080   	; 0x5558 <_ZN5Print7printlnEii>
    }
}
    4568:	a9 96       	adiw	r28, 0x29	; 41
    456a:	e3 e0       	ldi	r30, 0x03	; 3
    456c:	0c 94 9d 2f 	jmp	0x5f3a	; 0x5f3a <__epilogue_restores__+0x1e>

00004570 <_ZN15WaterSensorWire7RequestEv>:
void WaterSensorWire::Request() {
    4570:	a1 e2       	ldi	r26, 0x21	; 33
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	ee eb       	ldi	r30, 0xBE	; 190
    4576:	f2 e2       	ldi	r31, 0x22	; 34
    4578:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!

    _responseIndex++;
    457c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4580:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4584:	01 96       	adiw	r24, 0x01	; 1
    4586:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    458a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    String partialResponse = "";
    458e:	ce 01       	movw	r24, r28
    4590:	42 96       	adiw	r24, 0x12	; 18
    4592:	63 e2       	ldi	r22, 0x23	; 35
    4594:	71 e0       	ldi	r23, 0x01	; 1
    4596:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    if(_responseIndex == 0) {
    459a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    459e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    45a2:	89 2b       	or	r24, r25
    45a4:	69 f4       	brne	.+26     	; 0x45c0 <_ZN15WaterSensorWire7RequestEv+0x50>
        partialResponse = ThePHSensor.PhString;
    45a6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    45aa:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    45ae:	9c 01       	movw	r18, r24
    45b0:	21 57       	subi	r18, 0x71	; 113
    45b2:	3f 4f       	sbci	r19, 0xFF	; 255
    45b4:	ce 01       	movw	r24, r28
    45b6:	42 96       	adiw	r24, 0x12	; 18
    45b8:	b9 01       	movw	r22, r18
    45ba:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
    45be:	ab c0       	rjmp	.+342    	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else if(_responseIndex == 1) {
    45c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    45c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	69 f4       	brne	.+26     	; 0x45e6 <_ZN15WaterSensorWire7RequestEv+0x76>
        partialResponse = ThePHSensor.PhAvgString;
    45cc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    45d0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    45d4:	9c 01       	movw	r18, r24
    45d6:	2b 56       	subi	r18, 0x6B	; 107
    45d8:	3f 4f       	sbci	r19, 0xFF	; 255
    45da:	ce 01       	movw	r24, r28
    45dc:	42 96       	adiw	r24, 0x12	; 18
    45de:	b9 01       	movw	r22, r18
    45e0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
    45e4:	98 c0       	rjmp	.+304    	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else if(_responseIndex == 2) {
    45e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    45ea:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    45ee:	02 97       	sbiw	r24, 0x02	; 2
    45f0:	69 f4       	brne	.+26     	; 0x460c <_ZN15WaterSensorWire7RequestEv+0x9c>
        partialResponse = TheTDSSensor.TdsString;
    45f2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    45f6:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    45fa:	9c 01       	movw	r18, r24
    45fc:	2e 57       	subi	r18, 0x7E	; 126
    45fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4600:	ce 01       	movw	r24, r28
    4602:	42 96       	adiw	r24, 0x12	; 18
    4604:	b9 01       	movw	r22, r18
    4606:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
    460a:	85 c0       	rjmp	.+266    	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else if(_responseIndex == 3) {
    460c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4610:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4614:	03 97       	sbiw	r24, 0x03	; 3
    4616:	69 f4       	brne	.+26     	; 0x4632 <_ZN15WaterSensorWire7RequestEv+0xc2>
        partialResponse = TheTDSSensor.TdsAvgString;
    4618:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    461c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    4620:	9c 01       	movw	r18, r24
    4622:	28 57       	subi	r18, 0x78	; 120
    4624:	3f 4f       	sbci	r19, 0xFF	; 255
    4626:	ce 01       	movw	r24, r28
    4628:	42 96       	adiw	r24, 0x12	; 18
    462a:	b9 01       	movw	r22, r18
    462c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <_ZN6StringaSERKS_>
    4630:	72 c0       	rjmp	.+228    	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else if(_responseIndex == 4) {
    4632:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4636:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    463a:	04 97       	sbiw	r24, 0x04	; 4
    463c:	21 f5       	brne	.+72     	; 0x4686 <_ZN15WaterSensorWire7RequestEv+0x116>
        partialResponse = String(ThePHSensor.Offset, 2).c_str();
    463e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    4642:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    4646:	85 56       	subi	r24, 0x65	; 101
    4648:	9f 4f       	sbci	r25, 0xFF	; 255
    464a:	0e 94 4f 19 	call	0x329e	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    464e:	fc 01       	movw	r30, r24
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	a2 81       	ldd	r26, Z+2	; 0x02
    4656:	b3 81       	ldd	r27, Z+3	; 0x03
    4658:	fe 01       	movw	r30, r28
    465a:	3c 96       	adiw	r30, 0x0c	; 12
    465c:	22 e0       	ldi	r18, 0x02	; 2
    465e:	ac 01       	movw	r20, r24
    4660:	bd 01       	movw	r22, r26
    4662:	cf 01       	movw	r24, r30
    4664:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <_ZN6StringC1Edh>
    4668:	ce 01       	movw	r24, r28
    466a:	0c 96       	adiw	r24, 0x0c	; 12
    466c:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZNK6String5c_strEv>
    4670:	9c 01       	movw	r18, r24
    4672:	ce 01       	movw	r24, r28
    4674:	42 96       	adiw	r24, 0x12	; 18
    4676:	b9 01       	movw	r22, r18
    4678:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    467c:	ce 01       	movw	r24, r28
    467e:	0c 96       	adiw	r24, 0x0c	; 12
    4680:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    4684:	48 c0       	rjmp	.+144    	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else if(_responseIndex == 5) {
    4686:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    468a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    468e:	05 97       	sbiw	r24, 0x05	; 5
    4690:	51 f5       	brne	.+84     	; 0x46e6 <_ZN15WaterSensorWire7RequestEv+0x176>
        partialResponse = String(TheTDSSensor.Offset, 2).c_str();
    4692:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    4696:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    469a:	82 57       	subi	r24, 0x72	; 114
    469c:	9f 4f       	sbci	r25, 0xFF	; 255
    469e:	0e 94 4f 19 	call	0x329e	; 0x329e <_ZN4erom5EntryIdEcvRdEv>
    46a2:	fc 01       	movw	r30, r24
    46a4:	80 81       	ld	r24, Z
    46a6:	91 81       	ldd	r25, Z+1	; 0x01
    46a8:	a2 81       	ldd	r26, Z+2	; 0x02
    46aa:	b3 81       	ldd	r27, Z+3	; 0x03
    46ac:	fe 01       	movw	r30, r28
    46ae:	36 96       	adiw	r30, 0x06	; 6
    46b0:	22 e0       	ldi	r18, 0x02	; 2
    46b2:	ac 01       	movw	r20, r24
    46b4:	bd 01       	movw	r22, r26
    46b6:	cf 01       	movw	r24, r30
    46b8:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <_ZN6StringC1Edh>
    46bc:	ce 01       	movw	r24, r28
    46be:	06 96       	adiw	r24, 0x06	; 6
    46c0:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZNK6String5c_strEv>
    46c4:	9c 01       	movw	r18, r24
    46c6:	ce 01       	movw	r24, r28
    46c8:	42 96       	adiw	r24, 0x12	; 18
    46ca:	b9 01       	movw	r22, r18
    46cc:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN6StringaSEPKc>
    46d0:	ce 01       	movw	r24, r28
    46d2:	06 96       	adiw	r24, 0x06	; 6
    46d4:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
        _responseIndex = -1; //need to keep this in last if always
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	9f ef       	ldi	r25, 0xFF	; 255
    46dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    46e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    46e4:	18 c0       	rjmp	.+48     	; 0x4716 <_ZN15WaterSensorWire7RequestEv+0x1a6>
    }
    else {
        Serial.print("~responseIndex not found: ");
    46e6:	69 e3       	ldi	r22, 0x39	; 57
    46e8:	71 e0       	ldi	r23, 0x01	; 1
    46ea:	82 e6       	ldi	r24, 0x62	; 98
    46ec:	95 e0       	ldi	r25, 0x05	; 5
    46ee:	80 d6       	rcall	.+3328   	; 0x53f0 <_ZN5Print5printEPKc>
        Serial.println(_responseIndex);
    46f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    46f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    46f8:	4a e0       	ldi	r20, 0x0A	; 10
    46fa:	50 e0       	ldi	r21, 0x00	; 0
    46fc:	bc 01       	movw	r22, r24
    46fe:	82 e6       	ldi	r24, 0x62	; 98
    4700:	95 e0       	ldi	r25, 0x05	; 5
    4702:	2a d7       	rcall	.+3668   	; 0x5558 <_ZN5Print7printlnEii>
        _responseIndex = -1;
    4704:	8f ef       	ldi	r24, 0xFF	; 255
    4706:	9f ef       	ldi	r25, 0xFF	; 255
    4708:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    470c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4710:	00 e0       	ldi	r16, 0x00	; 0
    4712:	10 e0       	ldi	r17, 0x00	; 0
        return;
    4714:	43 c0       	rjmp	.+134    	; 0x479c <_ZN15WaterSensorWire7RequestEv+0x22c>
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    4716:	ce 01       	movw	r24, r28
    4718:	42 96       	adiw	r24, 0x12	; 18
    471a:	e2 dd       	rcall	.-1084   	; 0x42e0 <_ZNK6String6lengthEv>
    471c:	9c 01       	movw	r18, r24
    471e:	8a e0       	ldi	r24, 0x0A	; 10
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	82 1b       	sub	r24, r18
    4724:	93 0b       	sbc	r25, r19
    4726:	9d 83       	std	Y+5, r25	; 0x05
    4728:	8c 83       	std	Y+4, r24	; 0x04
    for(int i = 0; i < diff; i++) {
    472a:	1a 82       	std	Y+2, r1	; 0x02
    472c:	19 82       	std	Y+1, r1	; 0x01
    472e:	0a c0       	rjmp	.+20     	; 0x4744 <_ZN15WaterSensorWire7RequestEv+0x1d4>
        partialResponse += " ";
    4730:	ce 01       	movw	r24, r28
    4732:	42 96       	adiw	r24, 0x12	; 18
    4734:	64 e5       	ldi	r22, 0x54	; 84
    4736:	71 e0       	ldi	r23, 0x01	; 1
    4738:	e4 dd       	rcall	.-1080   	; 0x4302 <_ZN6StringpLEPKc>
        return;
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	9a 81       	ldd	r25, Y+2	; 0x02
    473e:	01 96       	adiw	r24, 0x01	; 1
    4740:	9a 83       	std	Y+2, r25	; 0x02
    4742:	89 83       	std	Y+1, r24	; 0x01
    4744:	29 81       	ldd	r18, Y+1	; 0x01
    4746:	3a 81       	ldd	r19, Y+2	; 0x02
    4748:	8c 81       	ldd	r24, Y+4	; 0x04
    474a:	9d 81       	ldd	r25, Y+5	; 0x05
    474c:	28 17       	cp	r18, r24
    474e:	39 07       	cpc	r19, r25
    4750:	7c f3       	brlt	.-34     	; 0x4730 <_ZN15WaterSensorWire7RequestEv+0x1c0>
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    4752:	1b 82       	std	Y+3, r1	; 0x03
    4754:	15 c0       	rjmp	.+42     	; 0x4780 <_ZN15WaterSensorWire7RequestEv+0x210>
        response[i] = (byte)partialResponse.charAt(i);
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	08 2f       	mov	r16, r24
    475a:	10 e0       	ldi	r17, 0x00	; 0
    475c:	8b 81       	ldd	r24, Y+3	; 0x03
    475e:	28 2f       	mov	r18, r24
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	ce 01       	movw	r24, r28
    4764:	42 96       	adiw	r24, 0x12	; 18
    4766:	b9 01       	movw	r22, r18
    4768:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <_ZNK6String6charAtEj>
    476c:	28 2f       	mov	r18, r24
    476e:	ce 01       	movw	r24, r28
    4770:	48 96       	adiw	r24, 0x18	; 24
    4772:	80 0f       	add	r24, r16
    4774:	91 1f       	adc	r25, r17
    4776:	fc 01       	movw	r30, r24
    4778:	20 83       	st	Z, r18
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	8f 5f       	subi	r24, 0xFF	; 255
    477e:	8b 83       	std	Y+3, r24	; 0x03
    4780:	8b 81       	ldd	r24, Y+3	; 0x03
    4782:	8a 30       	cpi	r24, 0x0A	; 10
    4784:	40 f3       	brcs	.-48     	; 0x4756 <_ZN15WaterSensorWire7RequestEv+0x1e6>
        response[i] = (byte)partialResponse.charAt(i);
    }
    Wire.write(response, sizeof(response));
    4786:	ce 01       	movw	r24, r28
    4788:	48 96       	adiw	r24, 0x18	; 24
    478a:	4a e0       	ldi	r20, 0x0A	; 10
    478c:	50 e0       	ldi	r21, 0x00	; 0
    478e:	bc 01       	movw	r22, r24
    4790:	8b ea       	ldi	r24, 0xAB	; 171
    4792:	92 e0       	ldi	r25, 0x02	; 2
    4794:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN7TwoWire5writeEPKhj>
    4798:	01 e0       	ldi	r16, 0x01	; 1
    479a:	10 e0       	ldi	r17, 0x00	; 0
    479c:	ce 01       	movw	r24, r28
    479e:	42 96       	adiw	r24, 0x12	; 18
    47a0:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
    47a4:	01 30       	cpi	r16, 0x01	; 1
    47a6:	11 05       	cpc	r17, r1
    47a8:	09 f4       	brne	.+2      	; 0x47ac <_ZN15WaterSensorWire7RequestEv+0x23c>
    47aa:	00 00       	nop
}
    47ac:	a1 96       	adiw	r28, 0x21	; 33
    47ae:	e4 e0       	ldi	r30, 0x04	; 4
    47b0:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

000047b4 <_ZN15WaterSensorWire11SplitStringE6Stringci>:

String WaterSensorWire::SplitString(String data, char separator, int index) {
    47b4:	a1 e1       	ldi	r26, 0x11	; 17
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	e0 ee       	ldi	r30, 0xE0	; 224
    47ba:	f3 e2       	ldi	r31, 0x23	; 35
    47bc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    47c0:	9c 87       	std	Y+12, r25	; 0x0c
    47c2:	8b 87       	std	Y+11, r24	; 0x0b
    47c4:	7e 87       	std	Y+14, r23	; 0x0e
    47c6:	6d 87       	std	Y+13, r22	; 0x0d
    47c8:	4f 87       	std	Y+15, r20	; 0x0f
    47ca:	39 8b       	std	Y+17, r19	; 0x11
    47cc:	28 8b       	std	Y+16, r18	; 0x10
    int found = 0;
    47ce:	1a 82       	std	Y+2, r1	; 0x02
    47d0:	19 82       	std	Y+1, r1	; 0x01
    int strIndex[] = {0, -1};
    47d2:	18 86       	std	Y+8, r1	; 0x08
    47d4:	1f 82       	std	Y+7, r1	; 0x07
    47d6:	8f ef       	ldi	r24, 0xFF	; 255
    47d8:	9f ef       	ldi	r25, 0xFF	; 255
    47da:	9a 87       	std	Y+10, r25	; 0x0a
    47dc:	89 87       	std	Y+9, r24	; 0x09
    int maxIndex = data.length() - 1;
    47de:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e2:	7e dd       	rcall	.-1284   	; 0x42e0 <_ZNK6String6lengthEv>
    47e4:	01 97       	sbiw	r24, 0x01	; 1
    47e6:	9e 83       	std	Y+6, r25	; 0x06
    47e8:	8d 83       	std	Y+5, r24	; 0x05
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    47ea:	1c 82       	std	Y+4, r1	; 0x04
    47ec:	1b 82       	std	Y+3, r1	; 0x03
    47ee:	35 c0       	rjmp	.+106    	; 0x485a <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
        if(data.charAt(i) == separator || i == maxIndex) {
    47f0:	2b 81       	ldd	r18, Y+3	; 0x03
    47f2:	3c 81       	ldd	r19, Y+4	; 0x04
    47f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f8:	b9 01       	movw	r22, r18
    47fa:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <_ZNK6String6charAtEj>
    47fe:	98 2f       	mov	r25, r24
    4800:	8f 85       	ldd	r24, Y+15	; 0x0f
    4802:	98 17       	cp	r25, r24
    4804:	39 f0       	breq	.+14     	; 0x4814 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    4806:	2b 81       	ldd	r18, Y+3	; 0x03
    4808:	3c 81       	ldd	r19, Y+4	; 0x04
    480a:	8d 81       	ldd	r24, Y+5	; 0x05
    480c:	9e 81       	ldd	r25, Y+6	; 0x06
    480e:	28 17       	cp	r18, r24
    4810:	39 07       	cpc	r19, r25
    4812:	11 f4       	brne	.+4      	; 0x4818 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	01 c0       	rjmp	.+2      	; 0x481a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	88 23       	and	r24, r24
    481c:	c9 f0       	breq	.+50     	; 0x4850 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
            found++;
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	9a 83       	std	Y+2, r25	; 0x02
    4826:	89 83       	std	Y+1, r24	; 0x01
            strIndex[0] = strIndex[1] + 1;
    4828:	89 85       	ldd	r24, Y+9	; 0x09
    482a:	9a 85       	ldd	r25, Y+10	; 0x0a
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	98 87       	std	Y+8, r25	; 0x08
    4830:	8f 83       	std	Y+7, r24	; 0x07
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
    4832:	2b 81       	ldd	r18, Y+3	; 0x03
    4834:	3c 81       	ldd	r19, Y+4	; 0x04
    4836:	8d 81       	ldd	r24, Y+5	; 0x05
    4838:	9e 81       	ldd	r25, Y+6	; 0x06
    483a:	28 17       	cp	r18, r24
    483c:	39 07       	cpc	r19, r25
    483e:	21 f4       	brne	.+8      	; 0x4848 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    4840:	8b 81       	ldd	r24, Y+3	; 0x03
    4842:	9c 81       	ldd	r25, Y+4	; 0x04
    4844:	01 96       	adiw	r24, 0x01	; 1
    4846:	02 c0       	rjmp	.+4      	; 0x484c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    4848:	8b 81       	ldd	r24, Y+3	; 0x03
    484a:	9c 81       	ldd	r25, Y+4	; 0x04
    484c:	9a 87       	std	Y+10, r25	; 0x0a
    484e:	89 87       	std	Y+9, r24	; 0x09

String WaterSensorWire::SplitString(String data, char separator, int index) {
    int found = 0;
    int strIndex[] = {0, -1};
    int maxIndex = data.length() - 1;
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	9c 81       	ldd	r25, Y+4	; 0x04
    4854:	01 96       	adiw	r24, 0x01	; 1
    4856:	9c 83       	std	Y+4, r25	; 0x04
    4858:	8b 83       	std	Y+3, r24	; 0x03
    485a:	2b 81       	ldd	r18, Y+3	; 0x03
    485c:	3c 81       	ldd	r19, Y+4	; 0x04
    485e:	8d 81       	ldd	r24, Y+5	; 0x05
    4860:	9e 81       	ldd	r25, Y+6	; 0x06
    4862:	82 17       	cp	r24, r18
    4864:	93 07       	cpc	r25, r19
    4866:	44 f0       	brlt	.+16     	; 0x4878 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4868:	29 81       	ldd	r18, Y+1	; 0x01
    486a:	3a 81       	ldd	r19, Y+2	; 0x02
    486c:	88 89       	ldd	r24, Y+16	; 0x10
    486e:	99 89       	ldd	r25, Y+17	; 0x11
    4870:	82 17       	cp	r24, r18
    4872:	93 07       	cpc	r25, r19
    4874:	0c f0       	brlt	.+2      	; 0x4878 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4876:	bc cf       	rjmp	.-136    	; 0x47f0 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
    4878:	29 81       	ldd	r18, Y+1	; 0x01
    487a:	3a 81       	ldd	r19, Y+2	; 0x02
    487c:	88 89       	ldd	r24, Y+16	; 0x10
    487e:	99 89       	ldd	r25, Y+17	; 0x11
    4880:	82 17       	cp	r24, r18
    4882:	93 07       	cpc	r25, r19
    4884:	6c f4       	brge	.+26     	; 0x48a0 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    4886:	89 85       	ldd	r24, Y+9	; 0x09
    4888:	9a 85       	ldd	r25, Y+10	; 0x0a
    488a:	9c 01       	movw	r18, r24
    488c:	8f 81       	ldd	r24, Y+7	; 0x07
    488e:	98 85       	ldd	r25, Y+8	; 0x08
    4890:	ac 01       	movw	r20, r24
    4892:	8b 85       	ldd	r24, Y+11	; 0x0b
    4894:	9c 85       	ldd	r25, Y+12	; 0x0c
    4896:	6d 85       	ldd	r22, Y+13	; 0x0d
    4898:	7e 85       	ldd	r23, Y+14	; 0x0e
    489a:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <_ZNK6String9substringEjj>
    489e:	06 c0       	rjmp	.+12     	; 0x48ac <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    48a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    48a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    48a4:	63 e2       	ldi	r22, 0x23	; 35
    48a6:	71 e0       	ldi	r23, 0x01	; 1
    48a8:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    48ac:	00 00       	nop
}
    48ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    48b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    48b2:	61 96       	adiw	r28, 0x11	; 17
    48b4:	e2 e0       	ldi	r30, 0x02	; 2
    48b6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

000048ba <_Z41__static_initialization_and_destruction_0ii>:
    48ba:	a4 e0       	ldi	r26, 0x04	; 4
    48bc:	b0 e0       	ldi	r27, 0x00	; 0
    48be:	e3 e6       	ldi	r30, 0x63	; 99
    48c0:	f4 e2       	ldi	r31, 0x24	; 36
    48c2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    48c6:	9a 83       	std	Y+2, r25	; 0x02
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	7c 83       	std	Y+4, r23	; 0x04
    48cc:	6b 83       	std	Y+3, r22	; 0x03
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	9a 81       	ldd	r25, Y+2	; 0x02
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	11 f5       	brne	.+68     	; 0x491a <_Z41__static_initialization_and_destruction_0ii+0x60>
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	9c 81       	ldd	r25, Y+4	; 0x04
    48da:	01 96       	adiw	r24, 0x01	; 1
    48dc:	f1 f4       	brne	.+60     	; 0x491a <_Z41__static_initialization_and_destruction_0ii+0x60>
#include "WaterSensorWire.h"

const byte _slave = 8;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    48de:	63 e2       	ldi	r22, 0x23	; 35
    48e0:	71 e0       	ldi	r23, 0x01	; 1
    48e2:	85 e4       	ldi	r24, 0x45	; 69
    48e4:	93 e0       	ldi	r25, 0x03	; 3
    48e6:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    48ea:	63 e2       	ldi	r22, 0x23	; 35
    48ec:	71 e0       	ldi	r23, 0x01	; 1
    48ee:	8b e4       	ldi	r24, 0x4B	; 75
    48f0:	93 e0       	ldi	r25, 0x03	; 3
    48f2:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    48f6:	63 e2       	ldi	r22, 0x23	; 35
    48f8:	71 e0       	ldi	r23, 0x01	; 1
    48fa:	81 e5       	ldi	r24, 0x51	; 81
    48fc:	93 e0       	ldi	r25, 0x03	; 3
    48fe:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
static String _cmdData = "";
    4902:	63 e2       	ldi	r22, 0x23	; 35
    4904:	71 e0       	ldi	r23, 0x01	; 1
    4906:	87 e5       	ldi	r24, 0x57	; 87
    4908:	93 e0       	ldi	r25, 0x03	; 3
    490a:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
static String _response = "";
    490e:	63 e2       	ldi	r22, 0x23	; 35
    4910:	71 e0       	ldi	r23, 0x01	; 1
    4912:	8d e5       	ldi	r24, 0x5D	; 93
    4914:	93 e0       	ldi	r25, 0x03	; 3
    4916:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringC1EPKc>
    491a:	89 81       	ldd	r24, Y+1	; 0x01
    491c:	9a 81       	ldd	r25, Y+2	; 0x02
    491e:	89 2b       	or	r24, r25
    4920:	c1 f4       	brne	.+48     	; 0x4952 <_Z41__static_initialization_and_destruction_0ii+0x98>
    4922:	8b 81       	ldd	r24, Y+3	; 0x03
    4924:	9c 81       	ldd	r25, Y+4	; 0x04
    4926:	01 96       	adiw	r24, 0x01	; 1
    4928:	a1 f4       	brne	.+40     	; 0x4952 <_Z41__static_initialization_and_destruction_0ii+0x98>
    492a:	8d e5       	ldi	r24, 0x5D	; 93
    492c:	93 e0       	ldi	r25, 0x03	; 3
    492e:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    4932:	87 e5       	ldi	r24, 0x57	; 87
    4934:	93 e0       	ldi	r25, 0x03	; 3
    4936:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    493a:	81 e5       	ldi	r24, 0x51	; 81
    493c:	93 e0       	ldi	r25, 0x03	; 3
    493e:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>

const byte _slave = 8;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    4942:	8b e4       	ldi	r24, 0x4B	; 75
    4944:	93 e0       	ldi	r25, 0x03	; 3
    4946:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    494a:	85 e4       	ldi	r24, 0x45	; 69
    494c:	93 e0       	ldi	r25, 0x03	; 3
    494e:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN6StringD1Ev>
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
    4952:	24 96       	adiw	r28, 0x04	; 4
    4954:	e2 e0       	ldi	r30, 0x02	; 2
    4956:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

0000495a <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    495a:	a0 e0       	ldi	r26, 0x00	; 0
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	e3 eb       	ldi	r30, 0xB3	; 179
    4960:	f4 e2       	ldi	r31, 0x24	; 36
    4962:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4966:	6f ef       	ldi	r22, 0xFF	; 255
    4968:	7f ef       	ldi	r23, 0xFF	; 255
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	a5 df       	rcall	.-182    	; 0x48ba <_Z41__static_initialization_and_destruction_0ii>
    4970:	e2 e0       	ldi	r30, 0x02	; 2
    4972:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004976 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    4976:	a0 e0       	ldi	r26, 0x00	; 0
    4978:	b0 e0       	ldi	r27, 0x00	; 0
    497a:	e1 ec       	ldi	r30, 0xC1	; 193
    497c:	f4 e2       	ldi	r31, 0x24	; 36
    497e:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4982:	6f ef       	ldi	r22, 0xFF	; 255
    4984:	7f ef       	ldi	r23, 0xFF	; 255
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	97 df       	rcall	.-210    	; 0x48ba <_Z41__static_initialization_and_destruction_0ii>
    498c:	e2 e0       	ldi	r30, 0x02	; 2
    498e:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004992 <_Z41__static_initialization_and_destruction_0ii>:

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    4992:	a4 e3       	ldi	r26, 0x34	; 52
    4994:	b0 e0       	ldi	r27, 0x00	; 0
    4996:	ef ec       	ldi	r30, 0xCF	; 207
    4998:	f4 e2       	ldi	r31, 0x24	; 36
    499a:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__prologue_saves__+0x1c>
    499e:	9a ab       	std	Y+50, r25	; 0x32
    49a0:	89 ab       	std	Y+49, r24	; 0x31
    49a2:	7c ab       	std	Y+52, r23	; 0x34
    49a4:	6b ab       	std	Y+51, r22	; 0x33
    49a6:	89 a9       	ldd	r24, Y+49	; 0x31
    49a8:	9a a9       	ldd	r25, Y+50	; 0x32
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	a1 f5       	brne	.+104    	; 0x4a16 <_Z41__static_initialization_and_destruction_0ii+0x84>
    49ae:	8b a9       	ldd	r24, Y+51	; 0x33
    49b0:	9c a9       	ldd	r25, Y+52	; 0x34
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	81 f5       	brne	.+96     	; 0x4a16 <_Z41__static_initialization_and_destruction_0ii+0x84>
namespace Globals {

    int _phSensorPin = A3;//A13;
    int _tdsSensorPin = A2;//A12;

    LCDBase TheLCD = LCDBase();
    49b6:	83 e6       	ldi	r24, 0x63	; 99
    49b8:	93 e0       	ldi	r25, 0x03	; 3
    49ba:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    49be:	ce 01       	movw	r24, r28
    49c0:	49 96       	adiw	r24, 0x19	; 25
    49c2:	63 e6       	ldi	r22, 0x63	; 99
    49c4:	73 e0       	ldi	r23, 0x03	; 3
    49c6:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN7LCDBaseC1ERKS_>
    49ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    49ce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    49d2:	9e 01       	movw	r18, r28
    49d4:	27 5e       	subi	r18, 0xE7	; 231
    49d6:	3f 4f       	sbci	r19, 0xFF	; 255
    49d8:	89 01       	movw	r16, r18
    49da:	21 e0       	ldi	r18, 0x01	; 1
    49dc:	40 ed       	ldi	r20, 0xD0	; 208
    49de:	57 e0       	ldi	r21, 0x07	; 7
    49e0:	bc 01       	movw	r22, r24
    49e2:	8b e7       	ldi	r24, 0x7B	; 123
    49e4:	93 e0       	ldi	r25, 0x03	; 3
    49e6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <_ZN8PHSensorC1Eiib7LCDBase>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);
    49ea:	63 e6       	ldi	r22, 0x63	; 99
    49ec:	73 e0       	ldi	r23, 0x03	; 3
    49ee:	ce 01       	movw	r24, r28
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN7LCDBaseC1ERKS_>
    49f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    49fa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    49fe:	9e 01       	movw	r18, r28
    4a00:	2f 5f       	subi	r18, 0xFF	; 255
    4a02:	3f 4f       	sbci	r19, 0xFF	; 255
    4a04:	89 01       	movw	r16, r18
    4a06:	21 e0       	ldi	r18, 0x01	; 1
    4a08:	48 ee       	ldi	r20, 0xE8	; 232
    4a0a:	53 e0       	ldi	r21, 0x03	; 3
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	8e e1       	ldi	r24, 0x1E	; 30
    4a10:	94 e0       	ldi	r25, 0x04	; 4
    4a12:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <_ZN9TDSSensorC1Eiib7LCDBase>
    4a16:	89 a9       	ldd	r24, Y+49	; 0x31
    4a18:	9a a9       	ldd	r25, Y+50	; 0x32
    4a1a:	89 2b       	or	r24, r25
    4a1c:	59 f4       	brne	.+22     	; 0x4a34 <_Z41__static_initialization_and_destruction_0ii+0xa2>
    4a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    4a20:	9c a9       	ldd	r25, Y+52	; 0x34
    4a22:	01 96       	adiw	r24, 0x01	; 1
    4a24:	39 f4       	brne	.+14     	; 0x4a34 <_Z41__static_initialization_and_destruction_0ii+0xa2>
    4a26:	8e e1       	ldi	r24, 0x1E	; 30
    4a28:	94 e0       	ldi	r25, 0x04	; 4
    4a2a:	1c dc       	rcall	.-1992   	; 0x4264 <_ZN9TDSSensorD1Ev>

    int _phSensorPin = A3;//A13;
    int _tdsSensorPin = A2;//A12;

    LCDBase TheLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    4a2c:	8b e7       	ldi	r24, 0x7B	; 123
    4a2e:	93 e0       	ldi	r25, 0x03	; 3
    4a30:	0e 94 8e 1c 	call	0x391c	; 0x391c <_ZN8PHSensorD1Ev>

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    4a34:	e4 96       	adiw	r28, 0x34	; 52
    4a36:	e4 e0       	ldi	r30, 0x04	; 4
    4a38:	0c 94 9c 2f 	jmp	0x5f38	; 0x5f38 <__epilogue_restores__+0x1c>

00004a3c <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    4a3c:	a0 e0       	ldi	r26, 0x00	; 0
    4a3e:	b0 e0       	ldi	r27, 0x00	; 0
    4a40:	e4 e2       	ldi	r30, 0x24	; 36
    4a42:	f5 e2       	ldi	r31, 0x25	; 37
    4a44:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4a48:	6f ef       	ldi	r22, 0xFF	; 255
    4a4a:	7f ef       	ldi	r23, 0xFF	; 255
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	a0 df       	rcall	.-192    	; 0x4992 <_Z41__static_initialization_and_destruction_0ii>
    4a52:	e2 e0       	ldi	r30, 0x02	; 2
    4a54:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004a58 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    4a58:	a0 e0       	ldi	r26, 0x00	; 0
    4a5a:	b0 e0       	ldi	r27, 0x00	; 0
    4a5c:	e2 e3       	ldi	r30, 0x32	; 50
    4a5e:	f5 e2       	ldi	r31, 0x25	; 37
    4a60:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4a64:	6f ef       	ldi	r22, 0xFF	; 255
    4a66:	7f ef       	ldi	r23, 0xFF	; 255
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	92 df       	rcall	.-220    	; 0x4992 <_Z41__static_initialization_and_destruction_0ii>
    4a6e:	e2 e0       	ldi	r30, 0x02	; 2
    4a70:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004a74 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4a74:	a6 e0       	ldi	r26, 0x06	; 6
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	e0 e4       	ldi	r30, 0x40	; 64
    4a7a:	f5 e2       	ldi	r31, 0x25	; 37
    4a7c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4a80:	9a 83       	std	Y+2, r25	; 0x02
    4a82:	89 83       	std	Y+1, r24	; 0x01
    4a84:	4b 83       	std	Y+3, r20	; 0x03
    4a86:	5c 83       	std	Y+4, r21	; 0x04
    4a88:	6d 83       	std	Y+5, r22	; 0x05
    4a8a:	7e 83       	std	Y+6, r23	; 0x06
    4a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a90:	ad 81       	ldd	r26, Y+5	; 0x05
    4a92:	be 81       	ldd	r27, Y+6	; 0x06
    4a94:	e9 81       	ldd	r30, Y+1	; 0x01
    4a96:	fa 81       	ldd	r31, Y+2	; 0x02
    4a98:	26 e0       	ldi	r18, 0x06	; 6
    4a9a:	ac 01       	movw	r20, r24
    4a9c:	bd 01       	movw	r22, r26
    4a9e:	cf 01       	movw	r24, r30
    4aa0:	38 d3       	rcall	.+1648   	; 0x5112 <_ZN14HardwareSerial5beginEmh>
    4aa2:	26 96       	adiw	r28, 0x06	; 6
    4aa4:	e2 e0       	ldi	r30, 0x02	; 2
    4aa6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004aaa <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    4aaa:	a2 e0       	ldi	r26, 0x02	; 2
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	eb e5       	ldi	r30, 0x5B	; 91
    4ab0:	f5 e2       	ldi	r31, 0x25	; 37
    4ab2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4ab6:	9a 83       	std	Y+2, r25	; 0x02
    4ab8:	89 83       	std	Y+1, r24	; 0x01
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	22 96       	adiw	r28, 0x02	; 2
    4abe:	e2 e0       	ldi	r30, 0x02	; 2
    4ac0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004ac4 <setup>:

SimpleTimer _asyncTimer;

void AsyncDoWork();

void setup(void) {
    4ac4:	a0 e0       	ldi	r26, 0x00	; 0
    4ac6:	b0 e0       	ldi	r27, 0x00	; 0
    4ac8:	e8 e6       	ldi	r30, 0x68	; 104
    4aca:	f5 e2       	ldi	r31, 0x25	; 37
    4acc:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(9600);
    4ad0:	40 e8       	ldi	r20, 0x80	; 128
    4ad2:	55 e2       	ldi	r21, 0x25	; 37
    4ad4:	60 e0       	ldi	r22, 0x00	; 0
    4ad6:	70 e0       	ldi	r23, 0x00	; 0
    4ad8:	82 e6       	ldi	r24, 0x62	; 98
    4ada:	95 e0       	ldi	r25, 0x05	; 5
    4adc:	cb df       	rcall	.-106    	; 0x4a74 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4ade:	00 00       	nop
    4ae0:	82 e6       	ldi	r24, 0x62	; 98
    4ae2:	95 e0       	ldi	r25, 0x05	; 5
    4ae4:	e2 df       	rcall	.-60     	; 0x4aaa <_ZN14HardwareSerialcvbEv>
    4ae6:	98 2f       	mov	r25, r24
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	89 27       	eor	r24, r25
    4aec:	88 23       	and	r24, r24
    4aee:	c1 f7       	brne	.-16     	; 0x4ae0 <setup+0x1c>

    WaterSensorWire::Setup();
    4af0:	34 dc       	rcall	.-1944   	; 0x435a <_ZN15WaterSensorWire5SetupEv>

    _asyncTimer.setInterval(1000, AsyncDoWork);
    4af2:	2e e9       	ldi	r18, 0x9E	; 158
    4af4:	35 e2       	ldi	r19, 0x25	; 37
    4af6:	48 ee       	ldi	r20, 0xE8	; 232
    4af8:	53 e0       	ldi	r21, 0x03	; 3
    4afa:	60 e0       	ldi	r22, 0x00	; 0
    4afc:	70 e0       	ldi	r23, 0x00	; 0
    4afe:	84 eb       	ldi	r24, 0xB4	; 180
    4b00:	94 e0       	ldi	r25, 0x04	; 4
    4b02:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    4b06:	e2 e0       	ldi	r30, 0x02	; 2
    4b08:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004b0c <loop>:

void loop(void) {
    4b0c:	a0 e0       	ldi	r26, 0x00	; 0
    4b0e:	b0 e0       	ldi	r27, 0x00	; 0
    4b10:	ec e8       	ldi	r30, 0x8C	; 140
    4b12:	f5 e2       	ldi	r31, 0x25	; 37
    4b14:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>

    _asyncTimer.run();
    4b18:	84 eb       	ldi	r24, 0xB4	; 180
    4b1a:	94 e0       	ldi	r25, 0x04	; 4
    4b1c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN11SimpleTimer3runEv>

    ThePHSensor.PrintPHToLCD();
    4b20:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    4b24:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    4b28:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN8PHSensor12PrintPHToLCDEv>
    TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    4b2c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    4b30:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    4b34:	48 d8       	rcall	.-3952   	; 0x3bc6 <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    4b36:	e2 e0       	ldi	r30, 0x02	; 2
    4b38:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004b3c <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4b3c:	a0 e0       	ldi	r26, 0x00	; 0
    4b3e:	b0 e0       	ldi	r27, 0x00	; 0
    4b40:	e4 ea       	ldi	r30, 0xA4	; 164
    4b42:	f5 e2       	ldi	r31, 0x25	; 37
    4b44:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    ThePHSensor.CalculatePH();
    4b48:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN7Globals11ThePHSensorE>
    4b4c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZN7Globals11ThePHSensorE+0x1>
    4b50:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN8PHSensor11CalculatePHEv>
    TheTDSSensor.CalculateTDS();//todo: uncomment this
    4b54:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZN7Globals12TheTDSSensorE>
    4b58:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_ZN7Globals12TheTDSSensorE+0x1>
    4b5c:	ea d8       	rcall	.-3628   	; 0x3d32 <_ZN9TDSSensor12CalculateTDSEv>
}
    4b5e:	e2 e0       	ldi	r30, 0x02	; 2
    4b60:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004b64 <_Z41__static_initialization_and_destruction_0ii>:
    4b64:	a4 e0       	ldi	r26, 0x04	; 4
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	e8 eb       	ldi	r30, 0xB8	; 184
    4b6a:	f5 e2       	ldi	r31, 0x25	; 37
    4b6c:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4b70:	9a 83       	std	Y+2, r25	; 0x02
    4b72:	89 83       	std	Y+1, r24	; 0x01
    4b74:	7c 83       	std	Y+4, r23	; 0x04
    4b76:	6b 83       	std	Y+3, r22	; 0x03
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	41 f4       	brne	.+16     	; 0x4b90 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    4b80:	8b 81       	ldd	r24, Y+3	; 0x03
    4b82:	9c 81       	ldd	r25, Y+4	; 0x04
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	21 f4       	brne	.+8      	; 0x4b90 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "_globalsWaterSensors.h"
#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    4b88:	84 eb       	ldi	r24, 0xB4	; 180
    4b8a:	94 e0       	ldi	r25, 0x04	; 4
    4b8c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN11SimpleTimerC1Ev>
}

void AsyncDoWork() {
    ThePHSensor.CalculatePH();
    TheTDSSensor.CalculateTDS();//todo: uncomment this
}
    4b90:	24 96       	adiw	r28, 0x04	; 4
    4b92:	e2 e0       	ldi	r30, 0x02	; 2
    4b94:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004b98 <_GLOBAL__sub_I__asyncTimer>:
    4b98:	a0 e0       	ldi	r26, 0x00	; 0
    4b9a:	b0 e0       	ldi	r27, 0x00	; 0
    4b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    4b9e:	f5 e2       	ldi	r31, 0x25	; 37
    4ba0:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x20>
    4ba4:	6f ef       	ldi	r22, 0xFF	; 255
    4ba6:	7f ef       	ldi	r23, 0xFF	; 255
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	db df       	rcall	.-74     	; 0x4b64 <_Z41__static_initialization_and_destruction_0ii>
    4bae:	e2 e0       	ldi	r30, 0x02	; 2
    4bb0:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x20>

00004bb4 <__subsf3>:
    4bb4:	50 58       	subi	r21, 0x80	; 128

00004bb6 <__addsf3>:
    4bb6:	bb 27       	eor	r27, r27
    4bb8:	aa 27       	eor	r26, r26
    4bba:	0e d0       	rcall	.+28     	; 0x4bd8 <__addsf3x>
    4bbc:	44 c1       	rjmp	.+648    	; 0x4e46 <__fp_round>
    4bbe:	35 d1       	rcall	.+618    	; 0x4e2a <__fp_pscA>
    4bc0:	30 f0       	brcs	.+12     	; 0x4bce <__addsf3+0x18>
    4bc2:	3a d1       	rcall	.+628    	; 0x4e38 <__fp_pscB>
    4bc4:	20 f0       	brcs	.+8      	; 0x4bce <__addsf3+0x18>
    4bc6:	31 f4       	brne	.+12     	; 0x4bd4 <__addsf3+0x1e>
    4bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    4bca:	11 f4       	brne	.+4      	; 0x4bd0 <__addsf3+0x1a>
    4bcc:	1e f4       	brtc	.+6      	; 0x4bd4 <__addsf3+0x1e>
    4bce:	2a c1       	rjmp	.+596    	; 0x4e24 <__fp_nan>
    4bd0:	0e f4       	brtc	.+2      	; 0x4bd4 <__addsf3+0x1e>
    4bd2:	e0 95       	com	r30
    4bd4:	e7 fb       	bst	r30, 7
    4bd6:	20 c1       	rjmp	.+576    	; 0x4e18 <__fp_inf>

00004bd8 <__addsf3x>:
    4bd8:	e9 2f       	mov	r30, r25
    4bda:	46 d1       	rcall	.+652    	; 0x4e68 <__fp_split3>
    4bdc:	80 f3       	brcs	.-32     	; 0x4bbe <__addsf3+0x8>
    4bde:	ba 17       	cp	r27, r26
    4be0:	62 07       	cpc	r22, r18
    4be2:	73 07       	cpc	r23, r19
    4be4:	84 07       	cpc	r24, r20
    4be6:	95 07       	cpc	r25, r21
    4be8:	18 f0       	brcs	.+6      	; 0x4bf0 <__addsf3x+0x18>
    4bea:	71 f4       	brne	.+28     	; 0x4c08 <__addsf3x+0x30>
    4bec:	9e f5       	brtc	.+102    	; 0x4c54 <__addsf3x+0x7c>
    4bee:	5e c1       	rjmp	.+700    	; 0x4eac <__fp_zero>
    4bf0:	0e f4       	brtc	.+2      	; 0x4bf4 <__addsf3x+0x1c>
    4bf2:	e0 95       	com	r30
    4bf4:	0b 2e       	mov	r0, r27
    4bf6:	ba 2f       	mov	r27, r26
    4bf8:	a0 2d       	mov	r26, r0
    4bfa:	0b 01       	movw	r0, r22
    4bfc:	b9 01       	movw	r22, r18
    4bfe:	90 01       	movw	r18, r0
    4c00:	0c 01       	movw	r0, r24
    4c02:	ca 01       	movw	r24, r20
    4c04:	a0 01       	movw	r20, r0
    4c06:	11 24       	eor	r1, r1
    4c08:	ff 27       	eor	r31, r31
    4c0a:	59 1b       	sub	r21, r25
    4c0c:	99 f0       	breq	.+38     	; 0x4c34 <__addsf3x+0x5c>
    4c0e:	59 3f       	cpi	r21, 0xF9	; 249
    4c10:	50 f4       	brcc	.+20     	; 0x4c26 <__addsf3x+0x4e>
    4c12:	50 3e       	cpi	r21, 0xE0	; 224
    4c14:	68 f1       	brcs	.+90     	; 0x4c70 <__addsf3x+0x98>
    4c16:	1a 16       	cp	r1, r26
    4c18:	f0 40       	sbci	r31, 0x00	; 0
    4c1a:	a2 2f       	mov	r26, r18
    4c1c:	23 2f       	mov	r18, r19
    4c1e:	34 2f       	mov	r19, r20
    4c20:	44 27       	eor	r20, r20
    4c22:	58 5f       	subi	r21, 0xF8	; 248
    4c24:	f3 cf       	rjmp	.-26     	; 0x4c0c <__addsf3x+0x34>
    4c26:	46 95       	lsr	r20
    4c28:	37 95       	ror	r19
    4c2a:	27 95       	ror	r18
    4c2c:	a7 95       	ror	r26
    4c2e:	f0 40       	sbci	r31, 0x00	; 0
    4c30:	53 95       	inc	r21
    4c32:	c9 f7       	brne	.-14     	; 0x4c26 <__addsf3x+0x4e>
    4c34:	7e f4       	brtc	.+30     	; 0x4c54 <__addsf3x+0x7c>
    4c36:	1f 16       	cp	r1, r31
    4c38:	ba 0b       	sbc	r27, r26
    4c3a:	62 0b       	sbc	r22, r18
    4c3c:	73 0b       	sbc	r23, r19
    4c3e:	84 0b       	sbc	r24, r20
    4c40:	ba f0       	brmi	.+46     	; 0x4c70 <__addsf3x+0x98>
    4c42:	91 50       	subi	r25, 0x01	; 1
    4c44:	a1 f0       	breq	.+40     	; 0x4c6e <__addsf3x+0x96>
    4c46:	ff 0f       	add	r31, r31
    4c48:	bb 1f       	adc	r27, r27
    4c4a:	66 1f       	adc	r22, r22
    4c4c:	77 1f       	adc	r23, r23
    4c4e:	88 1f       	adc	r24, r24
    4c50:	c2 f7       	brpl	.-16     	; 0x4c42 <__addsf3x+0x6a>
    4c52:	0e c0       	rjmp	.+28     	; 0x4c70 <__addsf3x+0x98>
    4c54:	ba 0f       	add	r27, r26
    4c56:	62 1f       	adc	r22, r18
    4c58:	73 1f       	adc	r23, r19
    4c5a:	84 1f       	adc	r24, r20
    4c5c:	48 f4       	brcc	.+18     	; 0x4c70 <__addsf3x+0x98>
    4c5e:	87 95       	ror	r24
    4c60:	77 95       	ror	r23
    4c62:	67 95       	ror	r22
    4c64:	b7 95       	ror	r27
    4c66:	f7 95       	ror	r31
    4c68:	9e 3f       	cpi	r25, 0xFE	; 254
    4c6a:	08 f0       	brcs	.+2      	; 0x4c6e <__addsf3x+0x96>
    4c6c:	b3 cf       	rjmp	.-154    	; 0x4bd4 <__addsf3+0x1e>
    4c6e:	93 95       	inc	r25
    4c70:	88 0f       	add	r24, r24
    4c72:	08 f0       	brcs	.+2      	; 0x4c76 <__addsf3x+0x9e>
    4c74:	99 27       	eor	r25, r25
    4c76:	ee 0f       	add	r30, r30
    4c78:	97 95       	ror	r25
    4c7a:	87 95       	ror	r24
    4c7c:	08 95       	ret

00004c7e <__cmpsf2>:
    4c7e:	a8 d0       	rcall	.+336    	; 0x4dd0 <__fp_cmp>
    4c80:	08 f4       	brcc	.+2      	; 0x4c84 <__cmpsf2+0x6>
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	08 95       	ret

00004c86 <__divsf3>:
    4c86:	0c d0       	rcall	.+24     	; 0x4ca0 <__divsf3x>
    4c88:	de c0       	rjmp	.+444    	; 0x4e46 <__fp_round>
    4c8a:	d6 d0       	rcall	.+428    	; 0x4e38 <__fp_pscB>
    4c8c:	40 f0       	brcs	.+16     	; 0x4c9e <__divsf3+0x18>
    4c8e:	cd d0       	rcall	.+410    	; 0x4e2a <__fp_pscA>
    4c90:	30 f0       	brcs	.+12     	; 0x4c9e <__divsf3+0x18>
    4c92:	21 f4       	brne	.+8      	; 0x4c9c <__divsf3+0x16>
    4c94:	5f 3f       	cpi	r21, 0xFF	; 255
    4c96:	19 f0       	breq	.+6      	; 0x4c9e <__divsf3+0x18>
    4c98:	bf c0       	rjmp	.+382    	; 0x4e18 <__fp_inf>
    4c9a:	51 11       	cpse	r21, r1
    4c9c:	08 c1       	rjmp	.+528    	; 0x4eae <__fp_szero>
    4c9e:	c2 c0       	rjmp	.+388    	; 0x4e24 <__fp_nan>

00004ca0 <__divsf3x>:
    4ca0:	e3 d0       	rcall	.+454    	; 0x4e68 <__fp_split3>
    4ca2:	98 f3       	brcs	.-26     	; 0x4c8a <__divsf3+0x4>

00004ca4 <__divsf3_pse>:
    4ca4:	99 23       	and	r25, r25
    4ca6:	c9 f3       	breq	.-14     	; 0x4c9a <__divsf3+0x14>
    4ca8:	55 23       	and	r21, r21
    4caa:	b1 f3       	breq	.-20     	; 0x4c98 <__divsf3+0x12>
    4cac:	95 1b       	sub	r25, r21
    4cae:	55 0b       	sbc	r21, r21
    4cb0:	bb 27       	eor	r27, r27
    4cb2:	aa 27       	eor	r26, r26
    4cb4:	62 17       	cp	r22, r18
    4cb6:	73 07       	cpc	r23, r19
    4cb8:	84 07       	cpc	r24, r20
    4cba:	38 f0       	brcs	.+14     	; 0x4cca <__divsf3_pse+0x26>
    4cbc:	9f 5f       	subi	r25, 0xFF	; 255
    4cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    4cc0:	22 0f       	add	r18, r18
    4cc2:	33 1f       	adc	r19, r19
    4cc4:	44 1f       	adc	r20, r20
    4cc6:	aa 1f       	adc	r26, r26
    4cc8:	a9 f3       	breq	.-22     	; 0x4cb4 <__divsf3_pse+0x10>
    4cca:	33 d0       	rcall	.+102    	; 0x4d32 <__divsf3_pse+0x8e>
    4ccc:	0e 2e       	mov	r0, r30
    4cce:	3a f0       	brmi	.+14     	; 0x4cde <__divsf3_pse+0x3a>
    4cd0:	e0 e8       	ldi	r30, 0x80	; 128
    4cd2:	30 d0       	rcall	.+96     	; 0x4d34 <__divsf3_pse+0x90>
    4cd4:	91 50       	subi	r25, 0x01	; 1
    4cd6:	50 40       	sbci	r21, 0x00	; 0
    4cd8:	e6 95       	lsr	r30
    4cda:	00 1c       	adc	r0, r0
    4cdc:	ca f7       	brpl	.-14     	; 0x4cd0 <__divsf3_pse+0x2c>
    4cde:	29 d0       	rcall	.+82     	; 0x4d32 <__divsf3_pse+0x8e>
    4ce0:	fe 2f       	mov	r31, r30
    4ce2:	27 d0       	rcall	.+78     	; 0x4d32 <__divsf3_pse+0x8e>
    4ce4:	66 0f       	add	r22, r22
    4ce6:	77 1f       	adc	r23, r23
    4ce8:	88 1f       	adc	r24, r24
    4cea:	bb 1f       	adc	r27, r27
    4cec:	26 17       	cp	r18, r22
    4cee:	37 07       	cpc	r19, r23
    4cf0:	48 07       	cpc	r20, r24
    4cf2:	ab 07       	cpc	r26, r27
    4cf4:	b0 e8       	ldi	r27, 0x80	; 128
    4cf6:	09 f0       	breq	.+2      	; 0x4cfa <__divsf3_pse+0x56>
    4cf8:	bb 0b       	sbc	r27, r27
    4cfa:	80 2d       	mov	r24, r0
    4cfc:	bf 01       	movw	r22, r30
    4cfe:	ff 27       	eor	r31, r31
    4d00:	93 58       	subi	r25, 0x83	; 131
    4d02:	5f 4f       	sbci	r21, 0xFF	; 255
    4d04:	2a f0       	brmi	.+10     	; 0x4d10 <__divsf3_pse+0x6c>
    4d06:	9e 3f       	cpi	r25, 0xFE	; 254
    4d08:	51 05       	cpc	r21, r1
    4d0a:	68 f0       	brcs	.+26     	; 0x4d26 <__divsf3_pse+0x82>
    4d0c:	85 c0       	rjmp	.+266    	; 0x4e18 <__fp_inf>
    4d0e:	cf c0       	rjmp	.+414    	; 0x4eae <__fp_szero>
    4d10:	5f 3f       	cpi	r21, 0xFF	; 255
    4d12:	ec f3       	brlt	.-6      	; 0x4d0e <__divsf3_pse+0x6a>
    4d14:	98 3e       	cpi	r25, 0xE8	; 232
    4d16:	dc f3       	brlt	.-10     	; 0x4d0e <__divsf3_pse+0x6a>
    4d18:	86 95       	lsr	r24
    4d1a:	77 95       	ror	r23
    4d1c:	67 95       	ror	r22
    4d1e:	b7 95       	ror	r27
    4d20:	f7 95       	ror	r31
    4d22:	9f 5f       	subi	r25, 0xFF	; 255
    4d24:	c9 f7       	brne	.-14     	; 0x4d18 <__divsf3_pse+0x74>
    4d26:	88 0f       	add	r24, r24
    4d28:	91 1d       	adc	r25, r1
    4d2a:	96 95       	lsr	r25
    4d2c:	87 95       	ror	r24
    4d2e:	97 f9       	bld	r25, 7
    4d30:	08 95       	ret
    4d32:	e1 e0       	ldi	r30, 0x01	; 1
    4d34:	66 0f       	add	r22, r22
    4d36:	77 1f       	adc	r23, r23
    4d38:	88 1f       	adc	r24, r24
    4d3a:	bb 1f       	adc	r27, r27
    4d3c:	62 17       	cp	r22, r18
    4d3e:	73 07       	cpc	r23, r19
    4d40:	84 07       	cpc	r24, r20
    4d42:	ba 07       	cpc	r27, r26
    4d44:	20 f0       	brcs	.+8      	; 0x4d4e <__divsf3_pse+0xaa>
    4d46:	62 1b       	sub	r22, r18
    4d48:	73 0b       	sbc	r23, r19
    4d4a:	84 0b       	sbc	r24, r20
    4d4c:	ba 0b       	sbc	r27, r26
    4d4e:	ee 1f       	adc	r30, r30
    4d50:	88 f7       	brcc	.-30     	; 0x4d34 <__divsf3_pse+0x90>
    4d52:	e0 95       	com	r30
    4d54:	08 95       	ret

00004d56 <__floatunsisf>:
    4d56:	e8 94       	clt
    4d58:	09 c0       	rjmp	.+18     	; 0x4d6c <__floatsisf+0x12>

00004d5a <__floatsisf>:
    4d5a:	97 fb       	bst	r25, 7
    4d5c:	3e f4       	brtc	.+14     	; 0x4d6c <__floatsisf+0x12>
    4d5e:	90 95       	com	r25
    4d60:	80 95       	com	r24
    4d62:	70 95       	com	r23
    4d64:	61 95       	neg	r22
    4d66:	7f 4f       	sbci	r23, 0xFF	; 255
    4d68:	8f 4f       	sbci	r24, 0xFF	; 255
    4d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d6c:	99 23       	and	r25, r25
    4d6e:	a9 f0       	breq	.+42     	; 0x4d9a <__floatsisf+0x40>
    4d70:	f9 2f       	mov	r31, r25
    4d72:	96 e9       	ldi	r25, 0x96	; 150
    4d74:	bb 27       	eor	r27, r27
    4d76:	93 95       	inc	r25
    4d78:	f6 95       	lsr	r31
    4d7a:	87 95       	ror	r24
    4d7c:	77 95       	ror	r23
    4d7e:	67 95       	ror	r22
    4d80:	b7 95       	ror	r27
    4d82:	f1 11       	cpse	r31, r1
    4d84:	f8 cf       	rjmp	.-16     	; 0x4d76 <__floatsisf+0x1c>
    4d86:	fa f4       	brpl	.+62     	; 0x4dc6 <__floatsisf+0x6c>
    4d88:	bb 0f       	add	r27, r27
    4d8a:	11 f4       	brne	.+4      	; 0x4d90 <__floatsisf+0x36>
    4d8c:	60 ff       	sbrs	r22, 0
    4d8e:	1b c0       	rjmp	.+54     	; 0x4dc6 <__floatsisf+0x6c>
    4d90:	6f 5f       	subi	r22, 0xFF	; 255
    4d92:	7f 4f       	sbci	r23, 0xFF	; 255
    4d94:	8f 4f       	sbci	r24, 0xFF	; 255
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	16 c0       	rjmp	.+44     	; 0x4dc6 <__floatsisf+0x6c>
    4d9a:	88 23       	and	r24, r24
    4d9c:	11 f0       	breq	.+4      	; 0x4da2 <__floatsisf+0x48>
    4d9e:	96 e9       	ldi	r25, 0x96	; 150
    4da0:	11 c0       	rjmp	.+34     	; 0x4dc4 <__floatsisf+0x6a>
    4da2:	77 23       	and	r23, r23
    4da4:	21 f0       	breq	.+8      	; 0x4dae <__floatsisf+0x54>
    4da6:	9e e8       	ldi	r25, 0x8E	; 142
    4da8:	87 2f       	mov	r24, r23
    4daa:	76 2f       	mov	r23, r22
    4dac:	05 c0       	rjmp	.+10     	; 0x4db8 <__floatsisf+0x5e>
    4dae:	66 23       	and	r22, r22
    4db0:	71 f0       	breq	.+28     	; 0x4dce <__floatsisf+0x74>
    4db2:	96 e8       	ldi	r25, 0x86	; 134
    4db4:	86 2f       	mov	r24, r22
    4db6:	70 e0       	ldi	r23, 0x00	; 0
    4db8:	60 e0       	ldi	r22, 0x00	; 0
    4dba:	2a f0       	brmi	.+10     	; 0x4dc6 <__floatsisf+0x6c>
    4dbc:	9a 95       	dec	r25
    4dbe:	66 0f       	add	r22, r22
    4dc0:	77 1f       	adc	r23, r23
    4dc2:	88 1f       	adc	r24, r24
    4dc4:	da f7       	brpl	.-10     	; 0x4dbc <__floatsisf+0x62>
    4dc6:	88 0f       	add	r24, r24
    4dc8:	96 95       	lsr	r25
    4dca:	87 95       	ror	r24
    4dcc:	97 f9       	bld	r25, 7
    4dce:	08 95       	ret

00004dd0 <__fp_cmp>:
    4dd0:	99 0f       	add	r25, r25
    4dd2:	00 08       	sbc	r0, r0
    4dd4:	55 0f       	add	r21, r21
    4dd6:	aa 0b       	sbc	r26, r26
    4dd8:	e0 e8       	ldi	r30, 0x80	; 128
    4dda:	fe ef       	ldi	r31, 0xFE	; 254
    4ddc:	16 16       	cp	r1, r22
    4dde:	17 06       	cpc	r1, r23
    4de0:	e8 07       	cpc	r30, r24
    4de2:	f9 07       	cpc	r31, r25
    4de4:	c0 f0       	brcs	.+48     	; 0x4e16 <__fp_cmp+0x46>
    4de6:	12 16       	cp	r1, r18
    4de8:	13 06       	cpc	r1, r19
    4dea:	e4 07       	cpc	r30, r20
    4dec:	f5 07       	cpc	r31, r21
    4dee:	98 f0       	brcs	.+38     	; 0x4e16 <__fp_cmp+0x46>
    4df0:	62 1b       	sub	r22, r18
    4df2:	73 0b       	sbc	r23, r19
    4df4:	84 0b       	sbc	r24, r20
    4df6:	95 0b       	sbc	r25, r21
    4df8:	39 f4       	brne	.+14     	; 0x4e08 <__fp_cmp+0x38>
    4dfa:	0a 26       	eor	r0, r26
    4dfc:	61 f0       	breq	.+24     	; 0x4e16 <__fp_cmp+0x46>
    4dfe:	23 2b       	or	r18, r19
    4e00:	24 2b       	or	r18, r20
    4e02:	25 2b       	or	r18, r21
    4e04:	21 f4       	brne	.+8      	; 0x4e0e <__fp_cmp+0x3e>
    4e06:	08 95       	ret
    4e08:	0a 26       	eor	r0, r26
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <__fp_cmp+0x3e>
    4e0c:	a1 40       	sbci	r26, 0x01	; 1
    4e0e:	a6 95       	lsr	r26
    4e10:	8f ef       	ldi	r24, 0xFF	; 255
    4e12:	81 1d       	adc	r24, r1
    4e14:	81 1d       	adc	r24, r1
    4e16:	08 95       	ret

00004e18 <__fp_inf>:
    4e18:	97 f9       	bld	r25, 7
    4e1a:	9f 67       	ori	r25, 0x7F	; 127
    4e1c:	80 e8       	ldi	r24, 0x80	; 128
    4e1e:	70 e0       	ldi	r23, 0x00	; 0
    4e20:	60 e0       	ldi	r22, 0x00	; 0
    4e22:	08 95       	ret

00004e24 <__fp_nan>:
    4e24:	9f ef       	ldi	r25, 0xFF	; 255
    4e26:	80 ec       	ldi	r24, 0xC0	; 192
    4e28:	08 95       	ret

00004e2a <__fp_pscA>:
    4e2a:	00 24       	eor	r0, r0
    4e2c:	0a 94       	dec	r0
    4e2e:	16 16       	cp	r1, r22
    4e30:	17 06       	cpc	r1, r23
    4e32:	18 06       	cpc	r1, r24
    4e34:	09 06       	cpc	r0, r25
    4e36:	08 95       	ret

00004e38 <__fp_pscB>:
    4e38:	00 24       	eor	r0, r0
    4e3a:	0a 94       	dec	r0
    4e3c:	12 16       	cp	r1, r18
    4e3e:	13 06       	cpc	r1, r19
    4e40:	14 06       	cpc	r1, r20
    4e42:	05 06       	cpc	r0, r21
    4e44:	08 95       	ret

00004e46 <__fp_round>:
    4e46:	09 2e       	mov	r0, r25
    4e48:	03 94       	inc	r0
    4e4a:	00 0c       	add	r0, r0
    4e4c:	11 f4       	brne	.+4      	; 0x4e52 <__fp_round+0xc>
    4e4e:	88 23       	and	r24, r24
    4e50:	52 f0       	brmi	.+20     	; 0x4e66 <__fp_round+0x20>
    4e52:	bb 0f       	add	r27, r27
    4e54:	40 f4       	brcc	.+16     	; 0x4e66 <__fp_round+0x20>
    4e56:	bf 2b       	or	r27, r31
    4e58:	11 f4       	brne	.+4      	; 0x4e5e <__fp_round+0x18>
    4e5a:	60 ff       	sbrs	r22, 0
    4e5c:	04 c0       	rjmp	.+8      	; 0x4e66 <__fp_round+0x20>
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	8f 4f       	sbci	r24, 0xFF	; 255
    4e64:	9f 4f       	sbci	r25, 0xFF	; 255
    4e66:	08 95       	ret

00004e68 <__fp_split3>:
    4e68:	57 fd       	sbrc	r21, 7
    4e6a:	90 58       	subi	r25, 0x80	; 128
    4e6c:	44 0f       	add	r20, r20
    4e6e:	55 1f       	adc	r21, r21
    4e70:	59 f0       	breq	.+22     	; 0x4e88 <__fp_splitA+0x10>
    4e72:	5f 3f       	cpi	r21, 0xFF	; 255
    4e74:	71 f0       	breq	.+28     	; 0x4e92 <__fp_splitA+0x1a>
    4e76:	47 95       	ror	r20

00004e78 <__fp_splitA>:
    4e78:	88 0f       	add	r24, r24
    4e7a:	97 fb       	bst	r25, 7
    4e7c:	99 1f       	adc	r25, r25
    4e7e:	61 f0       	breq	.+24     	; 0x4e98 <__fp_splitA+0x20>
    4e80:	9f 3f       	cpi	r25, 0xFF	; 255
    4e82:	79 f0       	breq	.+30     	; 0x4ea2 <__fp_splitA+0x2a>
    4e84:	87 95       	ror	r24
    4e86:	08 95       	ret
    4e88:	12 16       	cp	r1, r18
    4e8a:	13 06       	cpc	r1, r19
    4e8c:	14 06       	cpc	r1, r20
    4e8e:	55 1f       	adc	r21, r21
    4e90:	f2 cf       	rjmp	.-28     	; 0x4e76 <__fp_split3+0xe>
    4e92:	46 95       	lsr	r20
    4e94:	f1 df       	rcall	.-30     	; 0x4e78 <__fp_splitA>
    4e96:	08 c0       	rjmp	.+16     	; 0x4ea8 <__fp_splitA+0x30>
    4e98:	16 16       	cp	r1, r22
    4e9a:	17 06       	cpc	r1, r23
    4e9c:	18 06       	cpc	r1, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	f1 cf       	rjmp	.-30     	; 0x4e84 <__fp_splitA+0xc>
    4ea2:	86 95       	lsr	r24
    4ea4:	71 05       	cpc	r23, r1
    4ea6:	61 05       	cpc	r22, r1
    4ea8:	08 94       	sec
    4eaa:	08 95       	ret

00004eac <__fp_zero>:
    4eac:	e8 94       	clt

00004eae <__fp_szero>:
    4eae:	bb 27       	eor	r27, r27
    4eb0:	66 27       	eor	r22, r22
    4eb2:	77 27       	eor	r23, r23
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	97 f9       	bld	r25, 7
    4eb8:	08 95       	ret

00004eba <__mulsf3>:
    4eba:	0b d0       	rcall	.+22     	; 0x4ed2 <__mulsf3x>
    4ebc:	c4 cf       	rjmp	.-120    	; 0x4e46 <__fp_round>
    4ebe:	b5 df       	rcall	.-150    	; 0x4e2a <__fp_pscA>
    4ec0:	28 f0       	brcs	.+10     	; 0x4ecc <__mulsf3+0x12>
    4ec2:	ba df       	rcall	.-140    	; 0x4e38 <__fp_pscB>
    4ec4:	18 f0       	brcs	.+6      	; 0x4ecc <__mulsf3+0x12>
    4ec6:	95 23       	and	r25, r21
    4ec8:	09 f0       	breq	.+2      	; 0x4ecc <__mulsf3+0x12>
    4eca:	a6 cf       	rjmp	.-180    	; 0x4e18 <__fp_inf>
    4ecc:	ab cf       	rjmp	.-170    	; 0x4e24 <__fp_nan>
    4ece:	11 24       	eor	r1, r1
    4ed0:	ee cf       	rjmp	.-36     	; 0x4eae <__fp_szero>

00004ed2 <__mulsf3x>:
    4ed2:	ca df       	rcall	.-108    	; 0x4e68 <__fp_split3>
    4ed4:	a0 f3       	brcs	.-24     	; 0x4ebe <__mulsf3+0x4>

00004ed6 <__mulsf3_pse>:
    4ed6:	95 9f       	mul	r25, r21
    4ed8:	d1 f3       	breq	.-12     	; 0x4ece <__mulsf3+0x14>
    4eda:	95 0f       	add	r25, r21
    4edc:	50 e0       	ldi	r21, 0x00	; 0
    4ede:	55 1f       	adc	r21, r21
    4ee0:	62 9f       	mul	r22, r18
    4ee2:	f0 01       	movw	r30, r0
    4ee4:	72 9f       	mul	r23, r18
    4ee6:	bb 27       	eor	r27, r27
    4ee8:	f0 0d       	add	r31, r0
    4eea:	b1 1d       	adc	r27, r1
    4eec:	63 9f       	mul	r22, r19
    4eee:	aa 27       	eor	r26, r26
    4ef0:	f0 0d       	add	r31, r0
    4ef2:	b1 1d       	adc	r27, r1
    4ef4:	aa 1f       	adc	r26, r26
    4ef6:	64 9f       	mul	r22, r20
    4ef8:	66 27       	eor	r22, r22
    4efa:	b0 0d       	add	r27, r0
    4efc:	a1 1d       	adc	r26, r1
    4efe:	66 1f       	adc	r22, r22
    4f00:	82 9f       	mul	r24, r18
    4f02:	22 27       	eor	r18, r18
    4f04:	b0 0d       	add	r27, r0
    4f06:	a1 1d       	adc	r26, r1
    4f08:	62 1f       	adc	r22, r18
    4f0a:	73 9f       	mul	r23, r19
    4f0c:	b0 0d       	add	r27, r0
    4f0e:	a1 1d       	adc	r26, r1
    4f10:	62 1f       	adc	r22, r18
    4f12:	83 9f       	mul	r24, r19
    4f14:	a0 0d       	add	r26, r0
    4f16:	61 1d       	adc	r22, r1
    4f18:	22 1f       	adc	r18, r18
    4f1a:	74 9f       	mul	r23, r20
    4f1c:	33 27       	eor	r19, r19
    4f1e:	a0 0d       	add	r26, r0
    4f20:	61 1d       	adc	r22, r1
    4f22:	23 1f       	adc	r18, r19
    4f24:	84 9f       	mul	r24, r20
    4f26:	60 0d       	add	r22, r0
    4f28:	21 1d       	adc	r18, r1
    4f2a:	82 2f       	mov	r24, r18
    4f2c:	76 2f       	mov	r23, r22
    4f2e:	6a 2f       	mov	r22, r26
    4f30:	11 24       	eor	r1, r1
    4f32:	9f 57       	subi	r25, 0x7F	; 127
    4f34:	50 40       	sbci	r21, 0x00	; 0
    4f36:	8a f0       	brmi	.+34     	; 0x4f5a <__mulsf3_pse+0x84>
    4f38:	e1 f0       	breq	.+56     	; 0x4f72 <__mulsf3_pse+0x9c>
    4f3a:	88 23       	and	r24, r24
    4f3c:	4a f0       	brmi	.+18     	; 0x4f50 <__mulsf3_pse+0x7a>
    4f3e:	ee 0f       	add	r30, r30
    4f40:	ff 1f       	adc	r31, r31
    4f42:	bb 1f       	adc	r27, r27
    4f44:	66 1f       	adc	r22, r22
    4f46:	77 1f       	adc	r23, r23
    4f48:	88 1f       	adc	r24, r24
    4f4a:	91 50       	subi	r25, 0x01	; 1
    4f4c:	50 40       	sbci	r21, 0x00	; 0
    4f4e:	a9 f7       	brne	.-22     	; 0x4f3a <__mulsf3_pse+0x64>
    4f50:	9e 3f       	cpi	r25, 0xFE	; 254
    4f52:	51 05       	cpc	r21, r1
    4f54:	70 f0       	brcs	.+28     	; 0x4f72 <__mulsf3_pse+0x9c>
    4f56:	60 cf       	rjmp	.-320    	; 0x4e18 <__fp_inf>
    4f58:	aa cf       	rjmp	.-172    	; 0x4eae <__fp_szero>
    4f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    4f5c:	ec f3       	brlt	.-6      	; 0x4f58 <__mulsf3_pse+0x82>
    4f5e:	98 3e       	cpi	r25, 0xE8	; 232
    4f60:	dc f3       	brlt	.-10     	; 0x4f58 <__mulsf3_pse+0x82>
    4f62:	86 95       	lsr	r24
    4f64:	77 95       	ror	r23
    4f66:	67 95       	ror	r22
    4f68:	b7 95       	ror	r27
    4f6a:	f7 95       	ror	r31
    4f6c:	e7 95       	ror	r30
    4f6e:	9f 5f       	subi	r25, 0xFF	; 255
    4f70:	c1 f7       	brne	.-16     	; 0x4f62 <__mulsf3_pse+0x8c>
    4f72:	fe 2b       	or	r31, r30
    4f74:	88 0f       	add	r24, r24
    4f76:	91 1d       	adc	r25, r1
    4f78:	96 95       	lsr	r25
    4f7a:	87 95       	ror	r24
    4f7c:	97 f9       	bld	r25, 7
    4f7e:	08 95       	ret

00004f80 <__unordsf2>:
    4f80:	27 df       	rcall	.-434    	; 0x4dd0 <__fp_cmp>
    4f82:	88 0b       	sbc	r24, r24
    4f84:	99 0b       	sbc	r25, r25
    4f86:	08 95       	ret

00004f88 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4f88:	0e 94 1d 33 	call	0x663a	; 0x663a <abort>

00004f8c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4f8c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4f8e:	91 8d       	ldd	r25, Z+25	; 0x19
    4f90:	22 8d       	ldd	r18, Z+26	; 0x1a
    4f92:	89 2f       	mov	r24, r25
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	80 5c       	subi	r24, 0xC0	; 192
    4f98:	9f 4f       	sbci	r25, 0xFF	; 255
    4f9a:	82 1b       	sub	r24, r18
    4f9c:	91 09       	sbc	r25, r1
}
    4f9e:	8f 73       	andi	r24, 0x3F	; 63
    4fa0:	99 27       	eor	r25, r25
    4fa2:	08 95       	ret

00004fa4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4fa4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4fa6:	91 8d       	ldd	r25, Z+25	; 0x19
    4fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4faa:	98 17       	cp	r25, r24
    4fac:	31 f0       	breq	.+12     	; 0x4fba <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4fae:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fb0:	e8 0f       	add	r30, r24
    4fb2:	f1 1d       	adc	r31, r1
    4fb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4fba:	8f ef       	ldi	r24, 0xFF	; 255
    4fbc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4fbe:	08 95       	ret

00004fc0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4fc0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4fc2:	91 8d       	ldd	r25, Z+25	; 0x19
    4fc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fc6:	98 17       	cp	r25, r24
    4fc8:	61 f0       	breq	.+24     	; 0x4fe2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4fca:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fcc:	df 01       	movw	r26, r30
    4fce:	a8 0f       	add	r26, r24
    4fd0:	b1 1d       	adc	r27, r1
    4fd2:	5d 96       	adiw	r26, 0x1d	; 29
    4fd4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4fd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    4fd8:	9f 5f       	subi	r25, 0xFF	; 255
    4fda:	9f 73       	andi	r25, 0x3F	; 63
    4fdc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4fe2:	8f ef       	ldi	r24, 0xFF	; 255
    4fe4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4fe6:	08 95       	ret

00004fe8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4fe8:	83 e4       	ldi	r24, 0x43	; 67
    4fea:	99 e2       	ldi	r25, 0x29	; 41
    4fec:	89 2b       	or	r24, r25
    4fee:	41 f0       	breq	.+16     	; 0x5000 <_Z14serialEventRunv+0x18>
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	89 2b       	or	r24, r25
    4ff6:	21 f0       	breq	.+8      	; 0x5000 <_Z14serialEventRunv+0x18>
    4ff8:	46 d1       	rcall	.+652    	; 0x5286 <_Z17Serial0_availablev>
    4ffa:	81 11       	cpse	r24, r1
    4ffc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5000:	08 95       	ret

00005002 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5002:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5004:	84 8d       	ldd	r24, Z+28	; 0x1c
    5006:	df 01       	movw	r26, r30
    5008:	a8 0f       	add	r26, r24
    500a:	b1 1d       	adc	r27, r1
    500c:	a3 5a       	subi	r26, 0xA3	; 163
    500e:	bf 4f       	sbci	r27, 0xFF	; 255
    5010:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5012:	84 8d       	ldd	r24, Z+28	; 0x1c
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	01 96       	adiw	r24, 0x01	; 1
    5018:	8f 73       	andi	r24, 0x3F	; 63
    501a:	99 27       	eor	r25, r25
    501c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    501e:	a6 89       	ldd	r26, Z+22	; 0x16
    5020:	b7 89       	ldd	r27, Z+23	; 0x17
    5022:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5024:	a0 89       	ldd	r26, Z+16	; 0x10
    5026:	b1 89       	ldd	r27, Z+17	; 0x11
    5028:	8c 91       	ld	r24, X
    502a:	80 64       	ori	r24, 0x40	; 64
    502c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    502e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5030:	84 8d       	ldd	r24, Z+28	; 0x1c
    5032:	98 13       	cpse	r25, r24
    5034:	06 c0       	rjmp	.+12     	; 0x5042 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5036:	02 88       	ldd	r0, Z+18	; 0x12
    5038:	f3 89       	ldd	r31, Z+19	; 0x13
    503a:	e0 2d       	mov	r30, r0
    503c:	80 81       	ld	r24, Z
    503e:	8f 7d       	andi	r24, 0xDF	; 223
    5040:	80 83       	st	Z, r24
    5042:	08 95       	ret

00005044 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    504a:	88 8d       	ldd	r24, Y+24	; 0x18
    504c:	88 23       	and	r24, r24
    504e:	c1 f0       	breq	.+48     	; 0x5080 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5050:	ea 89       	ldd	r30, Y+18	; 0x12
    5052:	fb 89       	ldd	r31, Y+19	; 0x13
    5054:	80 81       	ld	r24, Z
    5056:	85 fd       	sbrc	r24, 5
    5058:	05 c0       	rjmp	.+10     	; 0x5064 <_ZN14HardwareSerial5flushEv+0x20>
    505a:	a8 89       	ldd	r26, Y+16	; 0x10
    505c:	b9 89       	ldd	r27, Y+17	; 0x11
    505e:	8c 91       	ld	r24, X
    5060:	86 fd       	sbrc	r24, 6
    5062:	0e c0       	rjmp	.+28     	; 0x5080 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5064:	0f b6       	in	r0, 0x3f	; 63
    5066:	07 fc       	sbrc	r0, 7
    5068:	f5 cf       	rjmp	.-22     	; 0x5054 <_ZN14HardwareSerial5flushEv+0x10>
    506a:	80 81       	ld	r24, Z
    506c:	85 ff       	sbrs	r24, 5
    506e:	f2 cf       	rjmp	.-28     	; 0x5054 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5070:	a8 89       	ldd	r26, Y+16	; 0x10
    5072:	b9 89       	ldd	r27, Y+17	; 0x11
    5074:	8c 91       	ld	r24, X
    5076:	85 ff       	sbrs	r24, 5
    5078:	ed cf       	rjmp	.-38     	; 0x5054 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    507a:	ce 01       	movw	r24, r28
    507c:	c2 df       	rcall	.-124    	; 0x5002 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    507e:	e8 cf       	rjmp	.-48     	; 0x5050 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	08 95       	ret

00005086 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    5086:	ef 92       	push	r14
    5088:	ff 92       	push	r15
    508a:	0f 93       	push	r16
    508c:	1f 93       	push	r17
    508e:	cf 93       	push	r28
    5090:	df 93       	push	r29
    5092:	ec 01       	movw	r28, r24
  _written = true;
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5098:	9b 8d       	ldd	r25, Y+27	; 0x1b
    509a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    509c:	98 13       	cpse	r25, r24
    509e:	05 c0       	rjmp	.+10     	; 0x50aa <_ZN14HardwareSerial5writeEh+0x24>
    50a0:	e8 89       	ldd	r30, Y+16	; 0x10
    50a2:	f9 89       	ldd	r31, Y+17	; 0x11
    50a4:	80 81       	ld	r24, Z
    50a6:	85 fd       	sbrc	r24, 5
    50a8:	23 c0       	rjmp	.+70     	; 0x50f0 <_ZN14HardwareSerial5writeEh+0x6a>
    50aa:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    50ac:	0b 8d       	ldd	r16, Y+27	; 0x1b
    50ae:	10 e0       	ldi	r17, 0x00	; 0
    50b0:	0f 5f       	subi	r16, 0xFF	; 255
    50b2:	1f 4f       	sbci	r17, 0xFF	; 255
    50b4:	0f 73       	andi	r16, 0x3F	; 63
    50b6:	11 27       	eor	r17, r17
    50b8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    50ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50bc:	e8 12       	cpse	r14, r24
    50be:	0b c0       	rjmp	.+22     	; 0x50d6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    50c0:	0f b6       	in	r0, 0x3f	; 63
    50c2:	07 fc       	sbrc	r0, 7
    50c4:	fa cf       	rjmp	.-12     	; 0x50ba <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    50c6:	e8 89       	ldd	r30, Y+16	; 0x10
    50c8:	f9 89       	ldd	r31, Y+17	; 0x11
    50ca:	80 81       	ld	r24, Z
    50cc:	85 ff       	sbrs	r24, 5
    50ce:	f5 cf       	rjmp	.-22     	; 0x50ba <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    50d0:	ce 01       	movw	r24, r28
    50d2:	97 df       	rcall	.-210    	; 0x5002 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    50d4:	f2 cf       	rjmp	.-28     	; 0x50ba <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    50d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50d8:	fe 01       	movw	r30, r28
    50da:	e8 0f       	add	r30, r24
    50dc:	f1 1d       	adc	r31, r1
    50de:	e3 5a       	subi	r30, 0xA3	; 163
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    50e4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    50e6:	ea 89       	ldd	r30, Y+18	; 0x12
    50e8:	fb 89       	ldd	r31, Y+19	; 0x13
    50ea:	80 81       	ld	r24, Z
    50ec:	80 62       	ori	r24, 0x20	; 32
    50ee:	07 c0       	rjmp	.+14     	; 0x50fe <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    50f0:	ee 89       	ldd	r30, Y+22	; 0x16
    50f2:	ff 89       	ldd	r31, Y+23	; 0x17
    50f4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    50f6:	e8 89       	ldd	r30, Y+16	; 0x10
    50f8:	f9 89       	ldd	r31, Y+17	; 0x11
    50fa:	80 81       	ld	r24, Z
    50fc:	80 64       	ori	r24, 0x40	; 64
    50fe:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	df 91       	pop	r29
    5106:	cf 91       	pop	r28
    5108:	1f 91       	pop	r17
    510a:	0f 91       	pop	r16
    510c:	ff 90       	pop	r15
    510e:	ef 90       	pop	r14
    5110:	08 95       	ret

00005112 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5112:	cf 92       	push	r12
    5114:	df 92       	push	r13
    5116:	ef 92       	push	r14
    5118:	ff 92       	push	r15
    511a:	1f 93       	push	r17
    511c:	cf 93       	push	r28
    511e:	df 93       	push	r29
    5120:	ec 01       	movw	r28, r24
    5122:	6a 01       	movw	r12, r20
    5124:	7b 01       	movw	r14, r22
    5126:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5128:	e8 89       	ldd	r30, Y+16	; 0x10
    512a:	f9 89       	ldd	r31, Y+17	; 0x11
    512c:	82 e0       	ldi	r24, 0x02	; 2
    512e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5130:	41 15       	cp	r20, r1
    5132:	51 4e       	sbci	r21, 0xE1	; 225
    5134:	61 05       	cpc	r22, r1
    5136:	71 05       	cpc	r23, r1
    5138:	a9 f0       	breq	.+42     	; 0x5164 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	79 e0       	ldi	r23, 0x09	; 9
    513e:	8d e3       	ldi	r24, 0x3D	; 61
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	a7 01       	movw	r20, r14
    5144:	96 01       	movw	r18, r12
    5146:	80 d6       	rcall	.+3328   	; 0x5e48 <__udivmodsi4>
    5148:	da 01       	movw	r26, r20
    514a:	c9 01       	movw	r24, r18
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	a1 09       	sbc	r26, r1
    5150:	b1 09       	sbc	r27, r1
    5152:	b6 95       	lsr	r27
    5154:	a7 95       	ror	r26
    5156:	97 95       	ror	r25
    5158:	87 95       	ror	r24
    515a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    515c:	41 15       	cp	r20, r1
    515e:	80 e1       	ldi	r24, 0x10	; 16
    5160:	58 07       	cpc	r21, r24
    5162:	a0 f0       	brcs	.+40     	; 0x518c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5164:	e8 89       	ldd	r30, Y+16	; 0x10
    5166:	f9 89       	ldd	r31, Y+17	; 0x11
    5168:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    516a:	60 e8       	ldi	r22, 0x80	; 128
    516c:	74 e8       	ldi	r23, 0x84	; 132
    516e:	8e e1       	ldi	r24, 0x1E	; 30
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	a7 01       	movw	r20, r14
    5174:	96 01       	movw	r18, r12
    5176:	68 d6       	rcall	.+3280   	; 0x5e48 <__udivmodsi4>
    5178:	ba 01       	movw	r22, r20
    517a:	a9 01       	movw	r20, r18
    517c:	41 50       	subi	r20, 0x01	; 1
    517e:	51 09       	sbc	r21, r1
    5180:	61 09       	sbc	r22, r1
    5182:	71 09       	sbc	r23, r1
    5184:	76 95       	lsr	r23
    5186:	67 95       	ror	r22
    5188:	57 95       	ror	r21
    518a:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    518c:	ec 85       	ldd	r30, Y+12	; 0x0c
    518e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5190:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    5192:	ee 85       	ldd	r30, Y+14	; 0x0e
    5194:	ff 85       	ldd	r31, Y+15	; 0x0f
    5196:	40 83       	st	Z, r20

  _written = false;
    5198:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    519a:	ec 89       	ldd	r30, Y+20	; 0x14
    519c:	fd 89       	ldd	r31, Y+21	; 0x15
    519e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    51a0:	ea 89       	ldd	r30, Y+18	; 0x12
    51a2:	fb 89       	ldd	r31, Y+19	; 0x13
    51a4:	80 81       	ld	r24, Z
    51a6:	80 61       	ori	r24, 0x10	; 16
    51a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    51aa:	ea 89       	ldd	r30, Y+18	; 0x12
    51ac:	fb 89       	ldd	r31, Y+19	; 0x13
    51ae:	80 81       	ld	r24, Z
    51b0:	88 60       	ori	r24, 0x08	; 8
    51b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    51b4:	ea 89       	ldd	r30, Y+18	; 0x12
    51b6:	fb 89       	ldd	r31, Y+19	; 0x13
    51b8:	80 81       	ld	r24, Z
    51ba:	80 68       	ori	r24, 0x80	; 128
    51bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    51be:	ea 89       	ldd	r30, Y+18	; 0x12
    51c0:	fb 89       	ldd	r31, Y+19	; 0x13
    51c2:	80 81       	ld	r24, Z
    51c4:	8f 7d       	andi	r24, 0xDF	; 223
    51c6:	80 83       	st	Z, r24
}
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	1f 91       	pop	r17
    51ce:	ff 90       	pop	r15
    51d0:	ef 90       	pop	r14
    51d2:	df 90       	pop	r13
    51d4:	cf 90       	pop	r12
    51d6:	08 95       	ret

000051d8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    51d8:	1f 92       	push	r1
    51da:	0f 92       	push	r0
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	0f 92       	push	r0
    51e0:	11 24       	eor	r1, r1
    51e2:	2f 93       	push	r18
    51e4:	8f 93       	push	r24
    51e6:	9f 93       	push	r25
    51e8:	ef 93       	push	r30
    51ea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    51ec:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <Serial+0x10>
    51f0:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <Serial+0x11>
    51f4:	80 81       	ld	r24, Z
    51f6:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <Serial+0x16>
    51fa:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <Serial+0x17>
    51fe:	82 fd       	sbrc	r24, 2
    5200:	12 c0       	rjmp	.+36     	; 0x5226 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5202:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5204:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <Serial+0x19>
    5208:	8f 5f       	subi	r24, 0xFF	; 255
    520a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    520c:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <Serial+0x1a>
    5210:	82 17       	cp	r24, r18
    5212:	51 f0       	breq	.+20     	; 0x5228 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5214:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <Serial+0x19>
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	ee 59       	subi	r30, 0x9E	; 158
    521c:	fa 4f       	sbci	r31, 0xFA	; 250
    521e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5220:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <Serial+0x19>
    5224:	01 c0       	rjmp	.+2      	; 0x5228 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5226:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5228:	ff 91       	pop	r31
    522a:	ef 91       	pop	r30
    522c:	9f 91       	pop	r25
    522e:	8f 91       	pop	r24
    5230:	2f 91       	pop	r18
    5232:	0f 90       	pop	r0
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	0f 90       	pop	r0
    5238:	1f 90       	pop	r1
    523a:	18 95       	reti

0000523c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    523c:	1f 92       	push	r1
    523e:	0f 92       	push	r0
    5240:	0f b6       	in	r0, 0x3f	; 63
    5242:	0f 92       	push	r0
    5244:	11 24       	eor	r1, r1
    5246:	2f 93       	push	r18
    5248:	3f 93       	push	r19
    524a:	4f 93       	push	r20
    524c:	5f 93       	push	r21
    524e:	6f 93       	push	r22
    5250:	7f 93       	push	r23
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	ef 93       	push	r30
    525c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    525e:	82 e6       	ldi	r24, 0x62	; 98
    5260:	95 e0       	ldi	r25, 0x05	; 5
    5262:	cf de       	rcall	.-610    	; 0x5002 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5264:	ff 91       	pop	r31
    5266:	ef 91       	pop	r30
    5268:	bf 91       	pop	r27
    526a:	af 91       	pop	r26
    526c:	9f 91       	pop	r25
    526e:	8f 91       	pop	r24
    5270:	7f 91       	pop	r23
    5272:	6f 91       	pop	r22
    5274:	5f 91       	pop	r21
    5276:	4f 91       	pop	r20
    5278:	3f 91       	pop	r19
    527a:	2f 91       	pop	r18
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

00005286 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5286:	82 e6       	ldi	r24, 0x62	; 98
    5288:	95 e0       	ldi	r25, 0x05	; 5
    528a:	80 de       	rcall	.-768    	; 0x4f8c <_ZN14HardwareSerial9availableEv>
    528c:	21 e0       	ldi	r18, 0x01	; 1
    528e:	89 2b       	or	r24, r25
    5290:	09 f4       	brne	.+2      	; 0x5294 <_Z17Serial0_availablev+0xe>
    5292:	20 e0       	ldi	r18, 0x00	; 0
}
    5294:	82 2f       	mov	r24, r18
    5296:	08 95       	ret

00005298 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5298:	e2 e6       	ldi	r30, 0x62	; 98
    529a:	f5 e0       	ldi	r31, 0x05	; 5
    529c:	13 82       	std	Z+3, r1	; 0x03
    529e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    52a0:	88 ee       	ldi	r24, 0xE8	; 232
    52a2:	93 e0       	ldi	r25, 0x03	; 3
    52a4:	a0 e0       	ldi	r26, 0x00	; 0
    52a6:	b0 e0       	ldi	r27, 0x00	; 0
    52a8:	84 83       	std	Z+4, r24	; 0x04
    52aa:	95 83       	std	Z+5, r25	; 0x05
    52ac:	a6 83       	std	Z+6, r26	; 0x06
    52ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    52b0:	8e ec       	ldi	r24, 0xCE	; 206
    52b2:	91 e0       	ldi	r25, 0x01	; 1
    52b4:	91 83       	std	Z+1, r25	; 0x01
    52b6:	80 83       	st	Z, r24
    52b8:	85 ec       	ldi	r24, 0xC5	; 197
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	95 87       	std	Z+13, r25	; 0x0d
    52be:	84 87       	std	Z+12, r24	; 0x0c
    52c0:	84 ec       	ldi	r24, 0xC4	; 196
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	97 87       	std	Z+15, r25	; 0x0f
    52c6:	86 87       	std	Z+14, r24	; 0x0e
    52c8:	80 ec       	ldi	r24, 0xC0	; 192
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	91 8b       	std	Z+17, r25	; 0x11
    52ce:	80 8b       	std	Z+16, r24	; 0x10
    52d0:	81 ec       	ldi	r24, 0xC1	; 193
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	93 8b       	std	Z+19, r25	; 0x13
    52d6:	82 8b       	std	Z+18, r24	; 0x12
    52d8:	82 ec       	ldi	r24, 0xC2	; 194
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	95 8b       	std	Z+21, r25	; 0x15
    52de:	84 8b       	std	Z+20, r24	; 0x14
    52e0:	86 ec       	ldi	r24, 0xC6	; 198
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	97 8b       	std	Z+23, r25	; 0x17
    52e6:	86 8b       	std	Z+22, r24	; 0x16
    52e8:	11 8e       	std	Z+25, r1	; 0x19
    52ea:	12 8e       	std	Z+26, r1	; 0x1a
    52ec:	13 8e       	std	Z+27, r1	; 0x1b
    52ee:	14 8e       	std	Z+28, r1	; 0x1c
    52f0:	08 95       	ret

000052f2 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    52f2:	08 95       	ret

000052f4 <main>:

int main(void)
{
	init();
    52f4:	26 d2       	rcall	.+1100   	; 0x5742 <init>

	initVariant();
    52f6:	fd df       	rcall	.-6      	; 0x52f2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    52f8:	e5 db       	rcall	.-2102   	; 0x4ac4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    52fa:	c4 ef       	ldi	r28, 0xF4	; 244
    52fc:	d7 e2       	ldi	r29, 0x27	; 39
#endif
	
	setup();
    
	for (;;) {
		loop();
    52fe:	06 dc       	rcall	.-2036   	; 0x4b0c <loop>
		if (serialEventRun) serialEventRun();
    5300:	20 97       	sbiw	r28, 0x00	; 0
    5302:	e9 f3       	breq	.-6      	; 0x52fe <main+0xa>
    5304:	71 de       	rcall	.-798    	; 0x4fe8 <_Z14serialEventRunv>
    5306:	fb cf       	rjmp	.-10     	; 0x52fe <main+0xa>

00005308 <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    5308:	52 c6       	rjmp	.+3236   	; 0x5fae <malloc>

0000530a <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    530a:	e6 c6       	rjmp	.+3532   	; 0x60d8 <free>

0000530c <_ZN5Print5writeEPKhj>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    530c:	cf 92       	push	r12
    530e:	df 92       	push	r13
    5310:	ef 92       	push	r14
    5312:	ff 92       	push	r15
    5314:	0f 93       	push	r16
    5316:	1f 93       	push	r17
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	6c 01       	movw	r12, r24
    531e:	7a 01       	movw	r14, r20
    5320:	8b 01       	movw	r16, r22
    5322:	c0 e0       	ldi	r28, 0x00	; 0
    5324:	d0 e0       	ldi	r29, 0x00	; 0
    5326:	ce 15       	cp	r28, r14
    5328:	df 05       	cpc	r29, r15
    532a:	89 f0       	breq	.+34     	; 0x534e <_ZN5Print5writeEPKhj+0x42>
    532c:	d8 01       	movw	r26, r16
    532e:	6d 91       	ld	r22, X+
    5330:	8d 01       	movw	r16, r26
    5332:	d6 01       	movw	r26, r12
    5334:	ed 91       	ld	r30, X+
    5336:	fc 91       	ld	r31, X
    5338:	01 90       	ld	r0, Z+
    533a:	f0 81       	ld	r31, Z
    533c:	e0 2d       	mov	r30, r0
    533e:	c6 01       	movw	r24, r12
    5340:	09 95       	icall
    5342:	89 2b       	or	r24, r25
    5344:	11 f4       	brne	.+4      	; 0x534a <_ZN5Print5writeEPKhj+0x3e>
    5346:	7e 01       	movw	r14, r28
    5348:	02 c0       	rjmp	.+4      	; 0x534e <_ZN5Print5writeEPKhj+0x42>
    534a:	21 96       	adiw	r28, 0x01	; 1
    534c:	ec cf       	rjmp	.-40     	; 0x5326 <_ZN5Print5writeEPKhj+0x1a>
    534e:	c7 01       	movw	r24, r14
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	ff 90       	pop	r15
    535a:	ef 90       	pop	r14
    535c:	df 90       	pop	r13
    535e:	cf 90       	pop	r12
    5360:	08 95       	ret

00005362 <_ZN5Print5writeEPKc>:
    5362:	61 15       	cp	r22, r1
    5364:	71 05       	cpc	r23, r1
    5366:	79 f0       	breq	.+30     	; 0x5386 <_ZN5Print5writeEPKc+0x24>
    5368:	fb 01       	movw	r30, r22
    536a:	01 90       	ld	r0, Z+
    536c:	00 20       	and	r0, r0
    536e:	e9 f7       	brne	.-6      	; 0x536a <_ZN5Print5writeEPKc+0x8>
    5370:	31 97       	sbiw	r30, 0x01	; 1
    5372:	af 01       	movw	r20, r30
    5374:	46 1b       	sub	r20, r22
    5376:	57 0b       	sbc	r21, r23
    5378:	dc 01       	movw	r26, r24
    537a:	ed 91       	ld	r30, X+
    537c:	fc 91       	ld	r31, X
    537e:	02 80       	ldd	r0, Z+2	; 0x02
    5380:	f3 81       	ldd	r31, Z+3	; 0x03
    5382:	e0 2d       	mov	r30, r0
    5384:	09 94       	ijmp
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	08 95       	ret

0000538c <_ZN5Print5printEPK19__FlashStringHelper>:
    538c:	ef 92       	push	r14
    538e:	ff 92       	push	r15
    5390:	0f 93       	push	r16
    5392:	1f 93       	push	r17
    5394:	cf 93       	push	r28
    5396:	df 93       	push	r29
    5398:	8c 01       	movw	r16, r24
    539a:	7b 01       	movw	r14, r22
    539c:	c0 e0       	ldi	r28, 0x00	; 0
    539e:	d0 e0       	ldi	r29, 0x00	; 0
    53a0:	f7 01       	movw	r30, r14
    53a2:	ec 0f       	add	r30, r28
    53a4:	fd 1f       	adc	r31, r29
    53a6:	64 91       	lpm	r22, Z
    53a8:	66 23       	and	r22, r22
    53aa:	61 f0       	breq	.+24     	; 0x53c4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    53ac:	d8 01       	movw	r26, r16
    53ae:	ed 91       	ld	r30, X+
    53b0:	fc 91       	ld	r31, X
    53b2:	01 90       	ld	r0, Z+
    53b4:	f0 81       	ld	r31, Z
    53b6:	e0 2d       	mov	r30, r0
    53b8:	c8 01       	movw	r24, r16
    53ba:	09 95       	icall
    53bc:	89 2b       	or	r24, r25
    53be:	11 f0       	breq	.+4      	; 0x53c4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    53c0:	21 96       	adiw	r28, 0x01	; 1
    53c2:	ee cf       	rjmp	.-36     	; 0x53a0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    53c4:	ce 01       	movw	r24, r28
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	ff 90       	pop	r15
    53d0:	ef 90       	pop	r14
    53d2:	08 95       	ret

000053d4 <_ZN5Print5printERK6String>:
    53d4:	dc 01       	movw	r26, r24
    53d6:	ed 91       	ld	r30, X+
    53d8:	fc 91       	ld	r31, X
    53da:	db 01       	movw	r26, r22
    53dc:	14 96       	adiw	r26, 0x04	; 4
    53de:	4d 91       	ld	r20, X+
    53e0:	5c 91       	ld	r21, X
    53e2:	15 97       	sbiw	r26, 0x05	; 5
    53e4:	6d 91       	ld	r22, X+
    53e6:	7c 91       	ld	r23, X
    53e8:	02 80       	ldd	r0, Z+2	; 0x02
    53ea:	f3 81       	ldd	r31, Z+3	; 0x03
    53ec:	e0 2d       	mov	r30, r0
    53ee:	09 94       	ijmp

000053f0 <_ZN5Print5printEPKc>:
    53f0:	b8 cf       	rjmp	.-144    	; 0x5362 <_ZN5Print5writeEPKc>

000053f2 <_ZN5Print5printEc>:
    53f2:	dc 01       	movw	r26, r24
    53f4:	ed 91       	ld	r30, X+
    53f6:	fc 91       	ld	r31, X
    53f8:	01 90       	ld	r0, Z+
    53fa:	f0 81       	ld	r31, Z
    53fc:	e0 2d       	mov	r30, r0
    53fe:	09 94       	ijmp

00005400 <_ZN5Print7printlnEv>:
    5400:	6a ed       	ldi	r22, 0xDA	; 218
    5402:	71 e0       	ldi	r23, 0x01	; 1
    5404:	ae cf       	rjmp	.-164    	; 0x5362 <_ZN5Print5writeEPKc>

00005406 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5406:	0f 93       	push	r16
    5408:	1f 93       	push	r17
    540a:	cf 93       	push	r28
    540c:	df 93       	push	r29
    540e:	ec 01       	movw	r28, r24
    5410:	bd df       	rcall	.-134    	; 0x538c <_ZN5Print5printEPK19__FlashStringHelper>
    5412:	8c 01       	movw	r16, r24
    5414:	ce 01       	movw	r24, r28
    5416:	f4 df       	rcall	.-24     	; 0x5400 <_ZN5Print7printlnEv>
    5418:	80 0f       	add	r24, r16
    541a:	91 1f       	adc	r25, r17
    541c:	df 91       	pop	r29
    541e:	cf 91       	pop	r28
    5420:	1f 91       	pop	r17
    5422:	0f 91       	pop	r16
    5424:	08 95       	ret

00005426 <_ZN5Print11printNumberEmh>:
    5426:	8f 92       	push	r8
    5428:	9f 92       	push	r9
    542a:	af 92       	push	r10
    542c:	bf 92       	push	r11
    542e:	cf 92       	push	r12
    5430:	df 92       	push	r13
    5432:	ef 92       	push	r14
    5434:	ff 92       	push	r15
    5436:	0f 93       	push	r16
    5438:	1f 93       	push	r17
    543a:	cf 93       	push	r28
    543c:	df 93       	push	r29
    543e:	cd b7       	in	r28, 0x3d	; 61
    5440:	de b7       	in	r29, 0x3e	; 62
    5442:	a1 97       	sbiw	r28, 0x21	; 33
    5444:	0f b6       	in	r0, 0x3f	; 63
    5446:	f8 94       	cli
    5448:	de bf       	out	0x3e, r29	; 62
    544a:	0f be       	out	0x3f, r0	; 63
    544c:	cd bf       	out	0x3d, r28	; 61
    544e:	7c 01       	movw	r14, r24
    5450:	d4 2e       	mov	r13, r20
    5452:	c5 2e       	mov	r12, r21
    5454:	db 01       	movw	r26, r22
    5456:	19 a2       	std	Y+33, r1	; 0x21
    5458:	22 30       	cpi	r18, 0x02	; 2
    545a:	08 f4       	brcc	.+2      	; 0x545e <_ZN5Print11printNumberEmh+0x38>
    545c:	2a e0       	ldi	r18, 0x0A	; 10
    545e:	8e 01       	movw	r16, r28
    5460:	0f 5d       	subi	r16, 0xDF	; 223
    5462:	1f 4f       	sbci	r17, 0xFF	; 255
    5464:	82 2e       	mov	r8, r18
    5466:	91 2c       	mov	r9, r1
    5468:	a1 2c       	mov	r10, r1
    546a:	b1 2c       	mov	r11, r1
    546c:	6d 2d       	mov	r22, r13
    546e:	7c 2d       	mov	r23, r12
    5470:	cd 01       	movw	r24, r26
    5472:	a5 01       	movw	r20, r10
    5474:	94 01       	movw	r18, r8
    5476:	e8 d4       	rcall	.+2512   	; 0x5e48 <__udivmodsi4>
    5478:	d2 2e       	mov	r13, r18
    547a:	c3 2e       	mov	r12, r19
    547c:	da 01       	movw	r26, r20
    547e:	01 50       	subi	r16, 0x01	; 1
    5480:	11 09       	sbc	r17, r1
    5482:	6a 30       	cpi	r22, 0x0A	; 10
    5484:	71 05       	cpc	r23, r1
    5486:	81 05       	cpc	r24, r1
    5488:	91 05       	cpc	r25, r1
    548a:	10 f4       	brcc	.+4      	; 0x5490 <_ZN5Print11printNumberEmh+0x6a>
    548c:	60 5d       	subi	r22, 0xD0	; 208
    548e:	01 c0       	rjmp	.+2      	; 0x5492 <_ZN5Print11printNumberEmh+0x6c>
    5490:	69 5c       	subi	r22, 0xC9	; 201
    5492:	f8 01       	movw	r30, r16
    5494:	60 83       	st	Z, r22
    5496:	23 2b       	or	r18, r19
    5498:	24 2b       	or	r18, r20
    549a:	25 2b       	or	r18, r21
    549c:	39 f7       	brne	.-50     	; 0x546c <_ZN5Print11printNumberEmh+0x46>
    549e:	b8 01       	movw	r22, r16
    54a0:	c7 01       	movw	r24, r14
    54a2:	5f df       	rcall	.-322    	; 0x5362 <_ZN5Print5writeEPKc>
    54a4:	a1 96       	adiw	r28, 0x21	; 33
    54a6:	0f b6       	in	r0, 0x3f	; 63
    54a8:	f8 94       	cli
    54aa:	de bf       	out	0x3e, r29	; 62
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	cd bf       	out	0x3d, r28	; 61
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	cf 90       	pop	r12
    54c0:	bf 90       	pop	r11
    54c2:	af 90       	pop	r10
    54c4:	9f 90       	pop	r9
    54c6:	8f 90       	pop	r8
    54c8:	08 95       	ret

000054ca <_ZN5Print5printEli>:
    54ca:	cf 92       	push	r12
    54cc:	df 92       	push	r13
    54ce:	ef 92       	push	r14
    54d0:	ff 92       	push	r15
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	ec 01       	movw	r28, r24
    54dc:	6a 01       	movw	r12, r20
    54de:	7b 01       	movw	r14, r22
    54e0:	21 15       	cp	r18, r1
    54e2:	31 05       	cpc	r19, r1
    54e4:	79 f4       	brne	.+30     	; 0x5504 <_ZN5Print5printEli+0x3a>
    54e6:	e8 81       	ld	r30, Y
    54e8:	f9 81       	ldd	r31, Y+1	; 0x01
    54ea:	01 90       	ld	r0, Z+
    54ec:	f0 81       	ld	r31, Z
    54ee:	e0 2d       	mov	r30, r0
    54f0:	64 2f       	mov	r22, r20
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	df 90       	pop	r13
    5500:	cf 90       	pop	r12
    5502:	09 94       	ijmp
    5504:	2a 30       	cpi	r18, 0x0A	; 10
    5506:	31 05       	cpc	r19, r1
    5508:	d9 f4       	brne	.+54     	; 0x5540 <_ZN5Print5printEli+0x76>
    550a:	77 ff       	sbrs	r23, 7
    550c:	18 c0       	rjmp	.+48     	; 0x553e <_ZN5Print5printEli+0x74>
    550e:	6d e2       	ldi	r22, 0x2D	; 45
    5510:	70 df       	rcall	.-288    	; 0x53f2 <_ZN5Print5printEc>
    5512:	8c 01       	movw	r16, r24
    5514:	44 27       	eor	r20, r20
    5516:	55 27       	eor	r21, r21
    5518:	ba 01       	movw	r22, r20
    551a:	4c 19       	sub	r20, r12
    551c:	5d 09       	sbc	r21, r13
    551e:	6e 09       	sbc	r22, r14
    5520:	7f 09       	sbc	r23, r15
    5522:	2a e0       	ldi	r18, 0x0A	; 10
    5524:	ce 01       	movw	r24, r28
    5526:	7f df       	rcall	.-258    	; 0x5426 <_ZN5Print11printNumberEmh>
    5528:	80 0f       	add	r24, r16
    552a:	91 1f       	adc	r25, r17
    552c:	df 91       	pop	r29
    552e:	cf 91       	pop	r28
    5530:	1f 91       	pop	r17
    5532:	0f 91       	pop	r16
    5534:	ff 90       	pop	r15
    5536:	ef 90       	pop	r14
    5538:	df 90       	pop	r13
    553a:	cf 90       	pop	r12
    553c:	08 95       	ret
    553e:	2a e0       	ldi	r18, 0x0A	; 10
    5540:	b7 01       	movw	r22, r14
    5542:	a6 01       	movw	r20, r12
    5544:	ce 01       	movw	r24, r28
    5546:	df 91       	pop	r29
    5548:	cf 91       	pop	r28
    554a:	1f 91       	pop	r17
    554c:	0f 91       	pop	r16
    554e:	ff 90       	pop	r15
    5550:	ef 90       	pop	r14
    5552:	df 90       	pop	r13
    5554:	cf 90       	pop	r12
    5556:	67 cf       	rjmp	.-306    	; 0x5426 <_ZN5Print11printNumberEmh>

00005558 <_ZN5Print7printlnEii>:
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	ec 01       	movw	r28, r24
    5562:	9a 01       	movw	r18, r20
    5564:	ab 01       	movw	r20, r22
    5566:	77 0f       	add	r23, r23
    5568:	66 0b       	sbc	r22, r22
    556a:	77 0b       	sbc	r23, r23
    556c:	ae df       	rcall	.-164    	; 0x54ca <_ZN5Print5printEli>
    556e:	8c 01       	movw	r16, r24
    5570:	ce 01       	movw	r24, r28
    5572:	46 df       	rcall	.-372    	; 0x5400 <_ZN5Print7printlnEv>
    5574:	80 0f       	add	r24, r16
    5576:	91 1f       	adc	r25, r17
    5578:	df 91       	pop	r29
    557a:	cf 91       	pop	r28
    557c:	1f 91       	pop	r17
    557e:	0f 91       	pop	r16
    5580:	08 95       	ret

00005582 <_ZN5Print5printEmi>:
    5582:	21 15       	cp	r18, r1
    5584:	31 05       	cpc	r19, r1
    5586:	41 f4       	brne	.+16     	; 0x5598 <_ZN5Print5printEmi+0x16>
    5588:	dc 01       	movw	r26, r24
    558a:	ed 91       	ld	r30, X+
    558c:	fc 91       	ld	r31, X
    558e:	01 90       	ld	r0, Z+
    5590:	f0 81       	ld	r31, Z
    5592:	e0 2d       	mov	r30, r0
    5594:	64 2f       	mov	r22, r20
    5596:	09 94       	ijmp
    5598:	46 cf       	rjmp	.-372    	; 0x5426 <_ZN5Print11printNumberEmh>

0000559a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    559a:	0f 93       	push	r16
    559c:	1f 93       	push	r17
    559e:	cf 93       	push	r28
    55a0:	df 93       	push	r29
    55a2:	ec 01       	movw	r28, r24
    55a4:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    55a6:	46 2f       	mov	r20, r22
    55a8:	50 e0       	ldi	r21, 0x00	; 0
    55aa:	60 e0       	ldi	r22, 0x00	; 0
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	e9 df       	rcall	.-46     	; 0x5582 <_ZN5Print5printEmi>
    55b0:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    55b2:	ce 01       	movw	r24, r28
    55b4:	25 df       	rcall	.-438    	; 0x5400 <_ZN5Print7printlnEv>
  return n;
}
    55b6:	80 0f       	add	r24, r16
    55b8:	91 1f       	adc	r25, r17
    55ba:	df 91       	pop	r29
    55bc:	cf 91       	pop	r28
    55be:	1f 91       	pop	r17
    55c0:	0f 91       	pop	r16
    55c2:	08 95       	ret

000055c4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    55c4:	1f 92       	push	r1
    55c6:	0f 92       	push	r0
    55c8:	0f b6       	in	r0, 0x3f	; 63
    55ca:	0f 92       	push	r0
    55cc:	11 24       	eor	r1, r1
    55ce:	2f 93       	push	r18
    55d0:	3f 93       	push	r19
    55d2:	8f 93       	push	r24
    55d4:	9f 93       	push	r25
    55d6:	af 93       	push	r26
    55d8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    55da:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <timer0_millis>
    55de:	90 91 01 06 	lds	r25, 0x0601	; 0x800601 <timer0_millis+0x1>
    55e2:	a0 91 02 06 	lds	r26, 0x0602	; 0x800602 <timer0_millis+0x2>
    55e6:	b0 91 03 06 	lds	r27, 0x0603	; 0x800603 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    55ea:	30 91 ff 05 	lds	r19, 0x05FF	; 0x8005ff <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    55ee:	23 e0       	ldi	r18, 0x03	; 3
    55f0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    55f2:	2d 37       	cpi	r18, 0x7D	; 125
    55f4:	20 f4       	brcc	.+8      	; 0x55fe <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    55f6:	01 96       	adiw	r24, 0x01	; 1
    55f8:	a1 1d       	adc	r26, r1
    55fa:	b1 1d       	adc	r27, r1
    55fc:	05 c0       	rjmp	.+10     	; 0x5608 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    55fe:	26 e8       	ldi	r18, 0x86	; 134
    5600:	23 0f       	add	r18, r19
		m += 1;
    5602:	02 96       	adiw	r24, 0x02	; 2
    5604:	a1 1d       	adc	r26, r1
    5606:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5608:	20 93 ff 05 	sts	0x05FF, r18	; 0x8005ff <timer0_fract>
	timer0_millis = m;
    560c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <timer0_millis>
    5610:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <timer0_millis+0x1>
    5614:	a0 93 02 06 	sts	0x0602, r26	; 0x800602 <timer0_millis+0x2>
    5618:	b0 93 03 06 	sts	0x0603, r27	; 0x800603 <timer0_millis+0x3>
	timer0_overflow_count++;
    561c:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <timer0_overflow_count>
    5620:	90 91 05 06 	lds	r25, 0x0605	; 0x800605 <timer0_overflow_count+0x1>
    5624:	a0 91 06 06 	lds	r26, 0x0606	; 0x800606 <timer0_overflow_count+0x2>
    5628:	b0 91 07 06 	lds	r27, 0x0607	; 0x800607 <timer0_overflow_count+0x3>
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	a1 1d       	adc	r26, r1
    5630:	b1 1d       	adc	r27, r1
    5632:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <timer0_overflow_count>
    5636:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <timer0_overflow_count+0x1>
    563a:	a0 93 06 06 	sts	0x0606, r26	; 0x800606 <timer0_overflow_count+0x2>
    563e:	b0 93 07 06 	sts	0x0607, r27	; 0x800607 <timer0_overflow_count+0x3>
}
    5642:	bf 91       	pop	r27
    5644:	af 91       	pop	r26
    5646:	9f 91       	pop	r25
    5648:	8f 91       	pop	r24
    564a:	3f 91       	pop	r19
    564c:	2f 91       	pop	r18
    564e:	0f 90       	pop	r0
    5650:	0f be       	out	0x3f, r0	; 63
    5652:	0f 90       	pop	r0
    5654:	1f 90       	pop	r1
    5656:	18 95       	reti

00005658 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5658:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    565a:	f8 94       	cli
	m = timer0_millis;
    565c:	60 91 00 06 	lds	r22, 0x0600	; 0x800600 <timer0_millis>
    5660:	70 91 01 06 	lds	r23, 0x0601	; 0x800601 <timer0_millis+0x1>
    5664:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <timer0_millis+0x2>
    5668:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <timer0_millis+0x3>
	SREG = oldSREG;
    566c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    566e:	08 95       	ret

00005670 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5670:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5672:	f8 94       	cli
	m = timer0_overflow_count;
    5674:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <timer0_overflow_count>
    5678:	90 91 05 06 	lds	r25, 0x0605	; 0x800605 <timer0_overflow_count+0x1>
    567c:	a0 91 06 06 	lds	r26, 0x0606	; 0x800606 <timer0_overflow_count+0x2>
    5680:	b0 91 07 06 	lds	r27, 0x0607	; 0x800607 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5684:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5686:	a8 9b       	sbis	0x15, 0	; 21
    5688:	05 c0       	rjmp	.+10     	; 0x5694 <micros+0x24>
    568a:	2f 3f       	cpi	r18, 0xFF	; 255
    568c:	19 f0       	breq	.+6      	; 0x5694 <micros+0x24>
		m++;
    568e:	01 96       	adiw	r24, 0x01	; 1
    5690:	a1 1d       	adc	r26, r1
    5692:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5694:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5696:	ba 2f       	mov	r27, r26
    5698:	a9 2f       	mov	r26, r25
    569a:	98 2f       	mov	r25, r24
    569c:	88 27       	eor	r24, r24
    569e:	82 0f       	add	r24, r18
    56a0:	91 1d       	adc	r25, r1
    56a2:	a1 1d       	adc	r26, r1
    56a4:	b1 1d       	adc	r27, r1
    56a6:	bc 01       	movw	r22, r24
    56a8:	cd 01       	movw	r24, r26
    56aa:	42 e0       	ldi	r20, 0x02	; 2
    56ac:	66 0f       	add	r22, r22
    56ae:	77 1f       	adc	r23, r23
    56b0:	88 1f       	adc	r24, r24
    56b2:	99 1f       	adc	r25, r25
    56b4:	4a 95       	dec	r20
    56b6:	d1 f7       	brne	.-12     	; 0x56ac <micros+0x3c>
}
    56b8:	08 95       	ret

000056ba <delay>:

void delay(unsigned long ms)
{
    56ba:	8f 92       	push	r8
    56bc:	9f 92       	push	r9
    56be:	af 92       	push	r10
    56c0:	bf 92       	push	r11
    56c2:	cf 92       	push	r12
    56c4:	df 92       	push	r13
    56c6:	ef 92       	push	r14
    56c8:	ff 92       	push	r15
    56ca:	6b 01       	movw	r12, r22
    56cc:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    56ce:	d0 df       	rcall	.-96     	; 0x5670 <micros>
    56d0:	4b 01       	movw	r8, r22
    56d2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    56d4:	c1 14       	cp	r12, r1
    56d6:	d1 04       	cpc	r13, r1
    56d8:	e1 04       	cpc	r14, r1
    56da:	f1 04       	cpc	r15, r1
    56dc:	f1 f0       	breq	.+60     	; 0x571a <delay+0x60>
		yield();
    56de:	b3 d3       	rcall	.+1894   	; 0x5e46 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    56e0:	c7 df       	rcall	.-114    	; 0x5670 <micros>
    56e2:	dc 01       	movw	r26, r24
    56e4:	cb 01       	movw	r24, r22
    56e6:	88 19       	sub	r24, r8
    56e8:	99 09       	sbc	r25, r9
    56ea:	aa 09       	sbc	r26, r10
    56ec:	bb 09       	sbc	r27, r11
    56ee:	88 3e       	cpi	r24, 0xE8	; 232
    56f0:	93 40       	sbci	r25, 0x03	; 3
    56f2:	a1 05       	cpc	r26, r1
    56f4:	b1 05       	cpc	r27, r1
    56f6:	70 f3       	brcs	.-36     	; 0x56d4 <delay+0x1a>
			ms--;
    56f8:	21 e0       	ldi	r18, 0x01	; 1
    56fa:	c2 1a       	sub	r12, r18
    56fc:	d1 08       	sbc	r13, r1
    56fe:	e1 08       	sbc	r14, r1
    5700:	f1 08       	sbc	r15, r1
			start += 1000;
    5702:	88 ee       	ldi	r24, 0xE8	; 232
    5704:	88 0e       	add	r8, r24
    5706:	83 e0       	ldi	r24, 0x03	; 3
    5708:	98 1e       	adc	r9, r24
    570a:	a1 1c       	adc	r10, r1
    570c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    570e:	c1 14       	cp	r12, r1
    5710:	d1 04       	cpc	r13, r1
    5712:	e1 04       	cpc	r14, r1
    5714:	f1 04       	cpc	r15, r1
    5716:	21 f7       	brne	.-56     	; 0x56e0 <delay+0x26>
    5718:	dd cf       	rjmp	.-70     	; 0x56d4 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    571a:	ff 90       	pop	r15
    571c:	ef 90       	pop	r14
    571e:	df 90       	pop	r13
    5720:	cf 90       	pop	r12
    5722:	bf 90       	pop	r11
    5724:	af 90       	pop	r10
    5726:	9f 90       	pop	r9
    5728:	8f 90       	pop	r8
    572a:	08 95       	ret

0000572c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    572c:	82 30       	cpi	r24, 0x02	; 2
    572e:	91 05       	cpc	r25, r1
    5730:	38 f0       	brcs	.+14     	; 0x5740 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5732:	88 0f       	add	r24, r24
    5734:	99 1f       	adc	r25, r25
    5736:	88 0f       	add	r24, r24
    5738:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    573a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    573c:	01 97       	sbiw	r24, 0x01	; 1
    573e:	f1 f7       	brne	.-4      	; 0x573c <delayMicroseconds+0x10>
    5740:	08 95       	ret

00005742 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5742:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5744:	84 b5       	in	r24, 0x24	; 36
    5746:	82 60       	ori	r24, 0x02	; 2
    5748:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    574a:	84 b5       	in	r24, 0x24	; 36
    574c:	81 60       	ori	r24, 0x01	; 1
    574e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5750:	85 b5       	in	r24, 0x25	; 37
    5752:	82 60       	ori	r24, 0x02	; 2
    5754:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5756:	85 b5       	in	r24, 0x25	; 37
    5758:	81 60       	ori	r24, 0x01	; 1
    575a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    575c:	ee e6       	ldi	r30, 0x6E	; 110
    575e:	f0 e0       	ldi	r31, 0x00	; 0
    5760:	80 81       	ld	r24, Z
    5762:	81 60       	ori	r24, 0x01	; 1
    5764:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5766:	e1 e8       	ldi	r30, 0x81	; 129
    5768:	f0 e0       	ldi	r31, 0x00	; 0
    576a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    576c:	80 81       	ld	r24, Z
    576e:	82 60       	ori	r24, 0x02	; 2
    5770:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5772:	80 81       	ld	r24, Z
    5774:	81 60       	ori	r24, 0x01	; 1
    5776:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5778:	e0 e8       	ldi	r30, 0x80	; 128
    577a:	f0 e0       	ldi	r31, 0x00	; 0
    577c:	80 81       	ld	r24, Z
    577e:	81 60       	ori	r24, 0x01	; 1
    5780:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5782:	e1 eb       	ldi	r30, 0xB1	; 177
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	80 81       	ld	r24, Z
    5788:	84 60       	ori	r24, 0x04	; 4
    578a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    578c:	e0 eb       	ldi	r30, 0xB0	; 176
    578e:	f0 e0       	ldi	r31, 0x00	; 0
    5790:	80 81       	ld	r24, Z
    5792:	81 60       	ori	r24, 0x01	; 1
    5794:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5796:	ea e7       	ldi	r30, 0x7A	; 122
    5798:	f0 e0       	ldi	r31, 0x00	; 0
    579a:	80 81       	ld	r24, Z
    579c:	84 60       	ori	r24, 0x04	; 4
    579e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    57a0:	80 81       	ld	r24, Z
    57a2:	82 60       	ori	r24, 0x02	; 2
    57a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    57a6:	80 81       	ld	r24, Z
    57a8:	81 60       	ori	r24, 0x01	; 1
    57aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    57ac:	80 81       	ld	r24, Z
    57ae:	80 68       	ori	r24, 0x80	; 128
    57b0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    57b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    57b6:	08 95       	ret

000057b8 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    57b8:	8e 30       	cpi	r24, 0x0E	; 14
    57ba:	08 f0       	brcs	.+2      	; 0x57be <analogRead+0x6>
    57bc:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    57be:	87 70       	andi	r24, 0x07	; 7
    57c0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <analog_reference>
    57c4:	90 e4       	ldi	r25, 0x40	; 64
    57c6:	29 9f       	mul	r18, r25
    57c8:	90 01       	movw	r18, r0
    57ca:	11 24       	eor	r1, r1
    57cc:	82 2b       	or	r24, r18
    57ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    57d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    57d6:	80 64       	ori	r24, 0x40	; 64
    57d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    57dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    57e0:	86 fd       	sbrc	r24, 6
    57e2:	fc cf       	rjmp	.-8      	; 0x57dc <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    57e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    57e8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    57ec:	90 e0       	ldi	r25, 0x00	; 0
}
    57ee:	92 2b       	or	r25, r18
    57f0:	08 95       	ret

000057f2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    57f2:	83 30       	cpi	r24, 0x03	; 3
    57f4:	81 f0       	breq	.+32     	; 0x5816 <turnOffPWM+0x24>
    57f6:	28 f4       	brcc	.+10     	; 0x5802 <turnOffPWM+0x10>
    57f8:	81 30       	cpi	r24, 0x01	; 1
    57fa:	99 f0       	breq	.+38     	; 0x5822 <turnOffPWM+0x30>
    57fc:	82 30       	cpi	r24, 0x02	; 2
    57fe:	a1 f0       	breq	.+40     	; 0x5828 <turnOffPWM+0x36>
    5800:	08 95       	ret
    5802:	87 30       	cpi	r24, 0x07	; 7
    5804:	a9 f0       	breq	.+42     	; 0x5830 <turnOffPWM+0x3e>
    5806:	88 30       	cpi	r24, 0x08	; 8
    5808:	b9 f0       	breq	.+46     	; 0x5838 <turnOffPWM+0x46>
    580a:	84 30       	cpi	r24, 0x04	; 4
    580c:	d1 f4       	brne	.+52     	; 0x5842 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    580e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5812:	8f 7d       	andi	r24, 0xDF	; 223
    5814:	03 c0       	rjmp	.+6      	; 0x581c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5816:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    581a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    581c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5820:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5822:	84 b5       	in	r24, 0x24	; 36
    5824:	8f 77       	andi	r24, 0x7F	; 127
    5826:	02 c0       	rjmp	.+4      	; 0x582c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5828:	84 b5       	in	r24, 0x24	; 36
    582a:	8f 7d       	andi	r24, 0xDF	; 223
    582c:	84 bd       	out	0x24, r24	; 36
    582e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5830:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5834:	8f 77       	andi	r24, 0x7F	; 127
    5836:	03 c0       	rjmp	.+6      	; 0x583e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5838:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    583c:	8f 7d       	andi	r24, 0xDF	; 223
    583e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5842:	08 95       	ret

00005844 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5844:	cf 93       	push	r28
    5846:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	fc 01       	movw	r30, r24
    584c:	e2 5d       	subi	r30, 0xD2	; 210
    584e:	fb 4f       	sbci	r31, 0xFB	; 251
    5850:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5852:	fc 01       	movw	r30, r24
    5854:	ee 5b       	subi	r30, 0xBE	; 190
    5856:	fb 4f       	sbci	r31, 0xFB	; 251
    5858:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    585a:	88 23       	and	r24, r24
    585c:	61 f1       	breq	.+88     	; 0x58b6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	88 0f       	add	r24, r24
    5862:	99 1f       	adc	r25, r25
    5864:	fc 01       	movw	r30, r24
    5866:	e6 59       	subi	r30, 0x96	; 150
    5868:	fb 4f       	sbci	r31, 0xFB	; 251
    586a:	c5 91       	lpm	r28, Z+
    586c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    586e:	fc 01       	movw	r30, r24
    5870:	e0 5a       	subi	r30, 0xA0	; 160
    5872:	fb 4f       	sbci	r31, 0xFB	; 251
    5874:	a5 91       	lpm	r26, Z+
    5876:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5878:	61 11       	cpse	r22, r1
    587a:	09 c0       	rjmp	.+18     	; 0x588e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    587c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    587e:	f8 94       	cli
		*reg &= ~bit;
    5880:	88 81       	ld	r24, Y
    5882:	20 95       	com	r18
    5884:	82 23       	and	r24, r18
    5886:	88 83       	st	Y, r24
		*out &= ~bit;
    5888:	ec 91       	ld	r30, X
    588a:	2e 23       	and	r18, r30
    588c:	0b c0       	rjmp	.+22     	; 0x58a4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    588e:	62 30       	cpi	r22, 0x02	; 2
    5890:	61 f4       	brne	.+24     	; 0x58aa <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5892:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5894:	f8 94       	cli
		*reg &= ~bit;
    5896:	38 81       	ld	r19, Y
    5898:	82 2f       	mov	r24, r18
    589a:	80 95       	com	r24
    589c:	83 23       	and	r24, r19
    589e:	88 83       	st	Y, r24
		*out |= bit;
    58a0:	ec 91       	ld	r30, X
    58a2:	2e 2b       	or	r18, r30
    58a4:	2c 93       	st	X, r18
		SREG = oldSREG;
    58a6:	9f bf       	out	0x3f, r25	; 63
    58a8:	06 c0       	rjmp	.+12     	; 0x58b6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    58aa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    58ac:	f8 94       	cli
		*reg |= bit;
    58ae:	e8 81       	ld	r30, Y
    58b0:	2e 2b       	or	r18, r30
    58b2:	28 83       	st	Y, r18
		SREG = oldSREG;
    58b4:	8f bf       	out	0x3f, r24	; 63
	}
}
    58b6:	df 91       	pop	r29
    58b8:	cf 91       	pop	r28
    58ba:	08 95       	ret

000058bc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    58bc:	1f 93       	push	r17
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    58c2:	28 2f       	mov	r18, r24
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	f9 01       	movw	r30, r18
    58c8:	e6 5e       	subi	r30, 0xE6	; 230
    58ca:	fb 4f       	sbci	r31, 0xFB	; 251
    58cc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    58ce:	f9 01       	movw	r30, r18
    58d0:	e2 5d       	subi	r30, 0xD2	; 210
    58d2:	fb 4f       	sbci	r31, 0xFB	; 251
    58d4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    58d6:	f9 01       	movw	r30, r18
    58d8:	ee 5b       	subi	r30, 0xBE	; 190
    58da:	fb 4f       	sbci	r31, 0xFB	; 251
    58dc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    58de:	cc 23       	and	r28, r28
    58e0:	c1 f0       	breq	.+48     	; 0x5912 <digitalWrite+0x56>
    58e2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    58e4:	81 11       	cpse	r24, r1
    58e6:	85 df       	rcall	.-246    	; 0x57f2 <turnOffPWM>

	out = portOutputRegister(port);
    58e8:	ec 2f       	mov	r30, r28
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	ee 0f       	add	r30, r30
    58ee:	ff 1f       	adc	r31, r31
    58f0:	e0 5a       	subi	r30, 0xA0	; 160
    58f2:	fb 4f       	sbci	r31, 0xFB	; 251
    58f4:	a5 91       	lpm	r26, Z+
    58f6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    58f8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    58fa:	f8 94       	cli

	if (val == LOW) {
    58fc:	11 11       	cpse	r17, r1
    58fe:	05 c0       	rjmp	.+10     	; 0x590a <digitalWrite+0x4e>
		*out &= ~bit;
    5900:	9c 91       	ld	r25, X
    5902:	ed 2f       	mov	r30, r29
    5904:	e0 95       	com	r30
    5906:	e9 23       	and	r30, r25
    5908:	02 c0       	rjmp	.+4      	; 0x590e <digitalWrite+0x52>
	} else {
		*out |= bit;
    590a:	ec 91       	ld	r30, X
    590c:	ed 2b       	or	r30, r29
    590e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    5910:	8f bf       	out	0x3f, r24	; 63
}
    5912:	df 91       	pop	r29
    5914:	cf 91       	pop	r28
    5916:	1f 91       	pop	r17
    5918:	08 95       	ret

0000591a <digitalRead>:

int digitalRead(uint8_t pin)
{
    591a:	cf 93       	push	r28
    591c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    591e:	28 2f       	mov	r18, r24
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	f9 01       	movw	r30, r18
    5924:	e6 5e       	subi	r30, 0xE6	; 230
    5926:	fb 4f       	sbci	r31, 0xFB	; 251
    5928:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    592a:	f9 01       	movw	r30, r18
    592c:	e2 5d       	subi	r30, 0xD2	; 210
    592e:	fb 4f       	sbci	r31, 0xFB	; 251
    5930:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5932:	f9 01       	movw	r30, r18
    5934:	ee 5b       	subi	r30, 0xBE	; 190
    5936:	fb 4f       	sbci	r31, 0xFB	; 251
    5938:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    593a:	cc 23       	and	r28, r28
    593c:	89 f0       	breq	.+34     	; 0x5960 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    593e:	81 11       	cpse	r24, r1
    5940:	58 df       	rcall	.-336    	; 0x57f2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5942:	ec 2f       	mov	r30, r28
    5944:	f0 e0       	ldi	r31, 0x00	; 0
    5946:	ee 0f       	add	r30, r30
    5948:	ff 1f       	adc	r31, r31
    594a:	ea 5a       	subi	r30, 0xAA	; 170
    594c:	fb 4f       	sbci	r31, 0xFB	; 251
    594e:	a5 91       	lpm	r26, Z+
    5950:	b4 91       	lpm	r27, Z
    5952:	ec 91       	ld	r30, X
    5954:	ed 23       	and	r30, r29
    5956:	81 e0       	ldi	r24, 0x01	; 1
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	21 f4       	brne	.+8      	; 0x5964 <digitalRead+0x4a>
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	02 c0       	rjmp	.+4      	; 0x5964 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5960:	80 e0       	ldi	r24, 0x00	; 0
    5962:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5964:	df 91       	pop	r29
    5966:	cf 91       	pop	r28
    5968:	08 95       	ret

0000596a <_ZN6StringD1Ev>:

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
	return 0;
}
    596a:	fc 01       	movw	r30, r24
    596c:	80 81       	ld	r24, Z
    596e:	91 81       	ldd	r25, Z+1	; 0x01
    5970:	b3 c3       	rjmp	.+1894   	; 0x60d8 <free>

00005972 <_ZN6String10invalidateEv>:
    5972:	cf 93       	push	r28
    5974:	df 93       	push	r29
    5976:	ec 01       	movw	r28, r24
    5978:	88 81       	ld	r24, Y
    597a:	99 81       	ldd	r25, Y+1	; 0x01
    597c:	00 97       	sbiw	r24, 0x00	; 0
    597e:	09 f0       	breq	.+2      	; 0x5982 <_ZN6String10invalidateEv+0x10>
    5980:	ab d3       	rcall	.+1878   	; 0x60d8 <free>
    5982:	19 82       	std	Y+1, r1	; 0x01
    5984:	18 82       	st	Y, r1
    5986:	1d 82       	std	Y+5, r1	; 0x05
    5988:	1c 82       	std	Y+4, r1	; 0x04
    598a:	1b 82       	std	Y+3, r1	; 0x03
    598c:	1a 82       	std	Y+2, r1	; 0x02
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	08 95       	ret

00005994 <_ZN6String12changeBufferEj>:
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	cf 93       	push	r28
    599a:	df 93       	push	r29
    599c:	ec 01       	movw	r28, r24
    599e:	8b 01       	movw	r16, r22
    59a0:	6f 5f       	subi	r22, 0xFF	; 255
    59a2:	7f 4f       	sbci	r23, 0xFF	; 255
    59a4:	88 81       	ld	r24, Y
    59a6:	99 81       	ldd	r25, Y+1	; 0x01
    59a8:	2f d4       	rcall	.+2142   	; 0x6208 <realloc>
    59aa:	00 97       	sbiw	r24, 0x00	; 0
    59ac:	31 f0       	breq	.+12     	; 0x59ba <_ZN6String12changeBufferEj+0x26>
    59ae:	99 83       	std	Y+1, r25	; 0x01
    59b0:	88 83       	st	Y, r24
    59b2:	1b 83       	std	Y+3, r17	; 0x03
    59b4:	0a 83       	std	Y+2, r16	; 0x02
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	01 c0       	rjmp	.+2      	; 0x59bc <_ZN6String12changeBufferEj+0x28>
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	1f 91       	pop	r17
    59c2:	0f 91       	pop	r16
    59c4:	08 95       	ret

000059c6 <_ZN6String7reserveEj>:
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	ec 01       	movw	r28, r24
    59cc:	88 81       	ld	r24, Y
    59ce:	99 81       	ldd	r25, Y+1	; 0x01
    59d0:	89 2b       	or	r24, r25
    59d2:	29 f0       	breq	.+10     	; 0x59de <_ZN6String7reserveEj+0x18>
    59d4:	8a 81       	ldd	r24, Y+2	; 0x02
    59d6:	9b 81       	ldd	r25, Y+3	; 0x03
    59d8:	86 17       	cp	r24, r22
    59da:	97 07       	cpc	r25, r23
    59dc:	58 f4       	brcc	.+22     	; 0x59f4 <_ZN6String7reserveEj+0x2e>
    59de:	ce 01       	movw	r24, r28
    59e0:	d9 df       	rcall	.-78     	; 0x5994 <_ZN6String12changeBufferEj>
    59e2:	88 23       	and	r24, r24
    59e4:	41 f0       	breq	.+16     	; 0x59f6 <_ZN6String7reserveEj+0x30>
    59e6:	8c 81       	ldd	r24, Y+4	; 0x04
    59e8:	9d 81       	ldd	r25, Y+5	; 0x05
    59ea:	89 2b       	or	r24, r25
    59ec:	19 f4       	brne	.+6      	; 0x59f4 <_ZN6String7reserveEj+0x2e>
    59ee:	e8 81       	ld	r30, Y
    59f0:	f9 81       	ldd	r31, Y+1	; 0x01
    59f2:	10 82       	st	Z, r1
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	08 95       	ret

000059fc <_ZN6String4copyEPKcj>:
    59fc:	ef 92       	push	r14
    59fe:	ff 92       	push	r15
    5a00:	0f 93       	push	r16
    5a02:	1f 93       	push	r17
    5a04:	cf 93       	push	r28
    5a06:	df 93       	push	r29
    5a08:	ec 01       	movw	r28, r24
    5a0a:	7b 01       	movw	r14, r22
    5a0c:	8a 01       	movw	r16, r20
    5a0e:	ba 01       	movw	r22, r20
    5a10:	da df       	rcall	.-76     	; 0x59c6 <_ZN6String7reserveEj>
    5a12:	81 11       	cpse	r24, r1
    5a14:	03 c0       	rjmp	.+6      	; 0x5a1c <_ZN6String4copyEPKcj+0x20>
    5a16:	ce 01       	movw	r24, r28
    5a18:	ac df       	rcall	.-168    	; 0x5972 <_ZN6String10invalidateEv>
    5a1a:	06 c0       	rjmp	.+12     	; 0x5a28 <_ZN6String4copyEPKcj+0x2c>
    5a1c:	1d 83       	std	Y+5, r17	; 0x05
    5a1e:	0c 83       	std	Y+4, r16	; 0x04
    5a20:	b7 01       	movw	r22, r14
    5a22:	88 81       	ld	r24, Y
    5a24:	99 81       	ldd	r25, Y+1	; 0x01
    5a26:	42 d6       	rcall	.+3204   	; 0x66ac <strcpy>
    5a28:	ce 01       	movw	r24, r28
    5a2a:	df 91       	pop	r29
    5a2c:	cf 91       	pop	r28
    5a2e:	1f 91       	pop	r17
    5a30:	0f 91       	pop	r16
    5a32:	ff 90       	pop	r15
    5a34:	ef 90       	pop	r14
    5a36:	08 95       	ret

00005a38 <_ZN6StringC1EPKc>:
    5a38:	fc 01       	movw	r30, r24
    5a3a:	11 82       	std	Z+1, r1	; 0x01
    5a3c:	10 82       	st	Z, r1
    5a3e:	13 82       	std	Z+3, r1	; 0x03
    5a40:	12 82       	std	Z+2, r1	; 0x02
    5a42:	15 82       	std	Z+5, r1	; 0x05
    5a44:	14 82       	std	Z+4, r1	; 0x04
    5a46:	61 15       	cp	r22, r1
    5a48:	71 05       	cpc	r23, r1
    5a4a:	49 f0       	breq	.+18     	; 0x5a5e <_ZN6StringC1EPKc+0x26>
    5a4c:	fb 01       	movw	r30, r22
    5a4e:	01 90       	ld	r0, Z+
    5a50:	00 20       	and	r0, r0
    5a52:	e9 f7       	brne	.-6      	; 0x5a4e <_ZN6StringC1EPKc+0x16>
    5a54:	31 97       	sbiw	r30, 0x01	; 1
    5a56:	af 01       	movw	r20, r30
    5a58:	46 1b       	sub	r20, r22
    5a5a:	57 0b       	sbc	r21, r23
    5a5c:	cf cf       	rjmp	.-98     	; 0x59fc <_ZN6String4copyEPKcj>
    5a5e:	08 95       	ret

00005a60 <_ZN6StringaSERKS_>:
    5a60:	cf 93       	push	r28
    5a62:	df 93       	push	r29
    5a64:	ec 01       	movw	r28, r24
    5a66:	fb 01       	movw	r30, r22
    5a68:	86 17       	cp	r24, r22
    5a6a:	97 07       	cpc	r25, r23
    5a6c:	51 f0       	breq	.+20     	; 0x5a82 <_ZN6StringaSERKS_+0x22>
    5a6e:	60 81       	ld	r22, Z
    5a70:	71 81       	ldd	r23, Z+1	; 0x01
    5a72:	61 15       	cp	r22, r1
    5a74:	71 05       	cpc	r23, r1
    5a76:	21 f0       	breq	.+8      	; 0x5a80 <_ZN6StringaSERKS_+0x20>
    5a78:	44 81       	ldd	r20, Z+4	; 0x04
    5a7a:	55 81       	ldd	r21, Z+5	; 0x05
    5a7c:	bf df       	rcall	.-130    	; 0x59fc <_ZN6String4copyEPKcj>
    5a7e:	01 c0       	rjmp	.+2      	; 0x5a82 <_ZN6StringaSERKS_+0x22>
    5a80:	78 df       	rcall	.-272    	; 0x5972 <_ZN6String10invalidateEv>
    5a82:	ce 01       	movw	r24, r28
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	08 95       	ret

00005a8a <_ZN6StringC1ERKS_>:
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	11 82       	std	Z+1, r1	; 0x01
    5a8e:	10 82       	st	Z, r1
    5a90:	13 82       	std	Z+3, r1	; 0x03
    5a92:	12 82       	std	Z+2, r1	; 0x02
    5a94:	15 82       	std	Z+5, r1	; 0x05
    5a96:	14 82       	std	Z+4, r1	; 0x04
    5a98:	e3 cf       	rjmp	.-58     	; 0x5a60 <_ZN6StringaSERKS_>

00005a9a <_ZN6StringaSEPKc>:
    5a9a:	cf 93       	push	r28
    5a9c:	df 93       	push	r29
    5a9e:	ec 01       	movw	r28, r24
    5aa0:	61 15       	cp	r22, r1
    5aa2:	71 05       	cpc	r23, r1
    5aa4:	51 f0       	breq	.+20     	; 0x5aba <_ZN6StringaSEPKc+0x20>
    5aa6:	fb 01       	movw	r30, r22
    5aa8:	01 90       	ld	r0, Z+
    5aaa:	00 20       	and	r0, r0
    5aac:	e9 f7       	brne	.-6      	; 0x5aa8 <_ZN6StringaSEPKc+0xe>
    5aae:	31 97       	sbiw	r30, 0x01	; 1
    5ab0:	af 01       	movw	r20, r30
    5ab2:	46 1b       	sub	r20, r22
    5ab4:	57 0b       	sbc	r21, r23
    5ab6:	a2 df       	rcall	.-188    	; 0x59fc <_ZN6String4copyEPKcj>
    5ab8:	01 c0       	rjmp	.+2      	; 0x5abc <_ZN6StringaSEPKc+0x22>
    5aba:	5b df       	rcall	.-330    	; 0x5972 <_ZN6String10invalidateEv>
    5abc:	ce 01       	movw	r24, r28
    5abe:	df 91       	pop	r29
    5ac0:	cf 91       	pop	r28
    5ac2:	08 95       	ret

00005ac4 <_ZN6StringC1Efh>:
    5ac4:	ef 92       	push	r14
    5ac6:	ff 92       	push	r15
    5ac8:	0f 93       	push	r16
    5aca:	1f 93       	push	r17
    5acc:	cf 93       	push	r28
    5ace:	df 93       	push	r29
    5ad0:	cd b7       	in	r28, 0x3d	; 61
    5ad2:	de b7       	in	r29, 0x3e	; 62
    5ad4:	a1 97       	sbiw	r28, 0x21	; 33
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	f8 94       	cli
    5ada:	de bf       	out	0x3e, r29	; 62
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	cd bf       	out	0x3d, r28	; 61
    5ae0:	7c 01       	movw	r14, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	ba 01       	movw	r22, r20
    5ae6:	f7 01       	movw	r30, r14
    5ae8:	11 82       	std	Z+1, r1	; 0x01
    5aea:	10 82       	st	Z, r1
    5aec:	13 82       	std	Z+3, r1	; 0x03
    5aee:	12 82       	std	Z+2, r1	; 0x02
    5af0:	15 82       	std	Z+5, r1	; 0x05
    5af2:	14 82       	std	Z+4, r1	; 0x04
    5af4:	42 e0       	ldi	r20, 0x02	; 2
    5af6:	42 0f       	add	r20, r18
    5af8:	8e 01       	movw	r16, r28
    5afa:	0f 5f       	subi	r16, 0xFF	; 255
    5afc:	1f 4f       	sbci	r17, 0xFF	; 255
    5afe:	38 d2       	rcall	.+1136   	; 0x5f70 <dtostrf>
    5b00:	bc 01       	movw	r22, r24
    5b02:	c7 01       	movw	r24, r14
    5b04:	ca df       	rcall	.-108    	; 0x5a9a <_ZN6StringaSEPKc>
    5b06:	a1 96       	adiw	r28, 0x21	; 33
    5b08:	0f b6       	in	r0, 0x3f	; 63
    5b0a:	f8 94       	cli
    5b0c:	de bf       	out	0x3e, r29	; 62
    5b0e:	0f be       	out	0x3f, r0	; 63
    5b10:	cd bf       	out	0x3d, r28	; 61
    5b12:	df 91       	pop	r29
    5b14:	cf 91       	pop	r28
    5b16:	1f 91       	pop	r17
    5b18:	0f 91       	pop	r16
    5b1a:	ff 90       	pop	r15
    5b1c:	ef 90       	pop	r14
    5b1e:	08 95       	ret

00005b20 <_ZN6StringC1Edh>:
    5b20:	ef 92       	push	r14
    5b22:	ff 92       	push	r15
    5b24:	0f 93       	push	r16
    5b26:	1f 93       	push	r17
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
    5b2c:	cd b7       	in	r28, 0x3d	; 61
    5b2e:	de b7       	in	r29, 0x3e	; 62
    5b30:	a1 97       	sbiw	r28, 0x21	; 33
    5b32:	0f b6       	in	r0, 0x3f	; 63
    5b34:	f8 94       	cli
    5b36:	de bf       	out	0x3e, r29	; 62
    5b38:	0f be       	out	0x3f, r0	; 63
    5b3a:	cd bf       	out	0x3d, r28	; 61
    5b3c:	7c 01       	movw	r14, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	ba 01       	movw	r22, r20
    5b42:	f7 01       	movw	r30, r14
    5b44:	11 82       	std	Z+1, r1	; 0x01
    5b46:	10 82       	st	Z, r1
    5b48:	13 82       	std	Z+3, r1	; 0x03
    5b4a:	12 82       	std	Z+2, r1	; 0x02
    5b4c:	15 82       	std	Z+5, r1	; 0x05
    5b4e:	14 82       	std	Z+4, r1	; 0x04
    5b50:	42 e0       	ldi	r20, 0x02	; 2
    5b52:	42 0f       	add	r20, r18
    5b54:	8e 01       	movw	r16, r28
    5b56:	0f 5f       	subi	r16, 0xFF	; 255
    5b58:	1f 4f       	sbci	r17, 0xFF	; 255
    5b5a:	0a d2       	rcall	.+1044   	; 0x5f70 <dtostrf>
    5b5c:	bc 01       	movw	r22, r24
    5b5e:	c7 01       	movw	r24, r14
    5b60:	9c df       	rcall	.-200    	; 0x5a9a <_ZN6StringaSEPKc>
    5b62:	a1 96       	adiw	r28, 0x21	; 33
    5b64:	0f b6       	in	r0, 0x3f	; 63
    5b66:	f8 94       	cli
    5b68:	de bf       	out	0x3e, r29	; 62
    5b6a:	0f be       	out	0x3f, r0	; 63
    5b6c:	cd bf       	out	0x3d, r28	; 61
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	08 95       	ret

00005b7c <_ZN6String6concatEPKcj>:
    5b7c:	ef 92       	push	r14
    5b7e:	ff 92       	push	r15
    5b80:	0f 93       	push	r16
    5b82:	1f 93       	push	r17
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	fc 01       	movw	r30, r24
    5b8a:	24 81       	ldd	r18, Z+4	; 0x04
    5b8c:	35 81       	ldd	r19, Z+5	; 0x05
    5b8e:	61 15       	cp	r22, r1
    5b90:	71 05       	cpc	r23, r1
    5b92:	11 f4       	brne	.+4      	; 0x5b98 <_ZN6String6concatEPKcj+0x1c>
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	17 c0       	rjmp	.+46     	; 0x5bc6 <_ZN6String6concatEPKcj+0x4a>
    5b98:	41 15       	cp	r20, r1
    5b9a:	51 05       	cpc	r21, r1
    5b9c:	99 f0       	breq	.+38     	; 0x5bc4 <_ZN6String6concatEPKcj+0x48>
    5b9e:	7b 01       	movw	r14, r22
    5ba0:	ec 01       	movw	r28, r24
    5ba2:	8a 01       	movw	r16, r20
    5ba4:	02 0f       	add	r16, r18
    5ba6:	13 1f       	adc	r17, r19
    5ba8:	b8 01       	movw	r22, r16
    5baa:	0d df       	rcall	.-486    	; 0x59c6 <_ZN6String7reserveEj>
    5bac:	88 23       	and	r24, r24
    5bae:	91 f3       	breq	.-28     	; 0x5b94 <_ZN6String6concatEPKcj+0x18>
    5bb0:	28 81       	ld	r18, Y
    5bb2:	39 81       	ldd	r19, Y+1	; 0x01
    5bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    5bb8:	b7 01       	movw	r22, r14
    5bba:	82 0f       	add	r24, r18
    5bbc:	93 1f       	adc	r25, r19
    5bbe:	76 d5       	rcall	.+2796   	; 0x66ac <strcpy>
    5bc0:	1d 83       	std	Y+5, r17	; 0x05
    5bc2:	0c 83       	std	Y+4, r16	; 0x04
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	ff 90       	pop	r15
    5bd0:	ef 90       	pop	r14
    5bd2:	08 95       	ret

00005bd4 <_ZN6String6concatEPKc>:
    5bd4:	61 15       	cp	r22, r1
    5bd6:	71 05       	cpc	r23, r1
    5bd8:	49 f0       	breq	.+18     	; 0x5bec <_ZN6String6concatEPKc+0x18>
    5bda:	fb 01       	movw	r30, r22
    5bdc:	01 90       	ld	r0, Z+
    5bde:	00 20       	and	r0, r0
    5be0:	e9 f7       	brne	.-6      	; 0x5bdc <_ZN6String6concatEPKc+0x8>
    5be2:	31 97       	sbiw	r30, 0x01	; 1
    5be4:	af 01       	movw	r20, r30
    5be6:	46 1b       	sub	r20, r22
    5be8:	57 0b       	sbc	r21, r23
    5bea:	c8 cf       	rjmp	.-112    	; 0x5b7c <_ZN6String6concatEPKcj>
    5bec:	80 e0       	ldi	r24, 0x00	; 0
    5bee:	08 95       	ret

00005bf0 <_ZN6String6concatEc>:
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	00 d0       	rcall	.+0      	; 0x5bf6 <_ZN6String6concatEc+0x6>
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
    5bfa:	69 83       	std	Y+1, r22	; 0x01
    5bfc:	1a 82       	std	Y+2, r1	; 0x02
    5bfe:	41 e0       	ldi	r20, 0x01	; 1
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	be 01       	movw	r22, r28
    5c04:	6f 5f       	subi	r22, 0xFF	; 255
    5c06:	7f 4f       	sbci	r23, 0xFF	; 255
    5c08:	b9 df       	rcall	.-142    	; 0x5b7c <_ZN6String6concatEPKcj>
    5c0a:	0f 90       	pop	r0
    5c0c:	0f 90       	pop	r0
    5c0e:	df 91       	pop	r29
    5c10:	cf 91       	pop	r28
    5c12:	08 95       	ret

00005c14 <_ZplRK15StringSumHelperRK6String>:
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	ec 01       	movw	r28, r24
    5c1a:	fb 01       	movw	r30, r22
    5c1c:	44 81       	ldd	r20, Z+4	; 0x04
    5c1e:	55 81       	ldd	r21, Z+5	; 0x05
    5c20:	60 81       	ld	r22, Z
    5c22:	71 81       	ldd	r23, Z+1	; 0x01
    5c24:	ab df       	rcall	.-170    	; 0x5b7c <_ZN6String6concatEPKcj>
    5c26:	81 11       	cpse	r24, r1
    5c28:	02 c0       	rjmp	.+4      	; 0x5c2e <_ZplRK15StringSumHelperRK6String+0x1a>
    5c2a:	ce 01       	movw	r24, r28
    5c2c:	a2 de       	rcall	.-700    	; 0x5972 <_ZN6String10invalidateEv>
    5c2e:	ce 01       	movw	r24, r28
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	08 95       	ret

00005c36 <_ZNK6String6equalsEPKc>:
    5c36:	fc 01       	movw	r30, r24
    5c38:	24 81       	ldd	r18, Z+4	; 0x04
    5c3a:	35 81       	ldd	r19, Z+5	; 0x05
    5c3c:	23 2b       	or	r18, r19
    5c3e:	31 f4       	brne	.+12     	; 0x5c4c <_ZNK6String6equalsEPKc+0x16>
    5c40:	21 e0       	ldi	r18, 0x01	; 1
    5c42:	61 15       	cp	r22, r1
    5c44:	71 05       	cpc	r23, r1
    5c46:	99 f0       	breq	.+38     	; 0x5c6e <_ZNK6String6equalsEPKc+0x38>
    5c48:	fb 01       	movw	r30, r22
    5c4a:	08 c0       	rjmp	.+16     	; 0x5c5c <_ZNK6String6equalsEPKc+0x26>
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	80 81       	ld	r24, Z
    5c50:	91 81       	ldd	r25, Z+1	; 0x01
    5c52:	61 15       	cp	r22, r1
    5c54:	71 05       	cpc	r23, r1
    5c56:	31 f4       	brne	.+12     	; 0x5c64 <_ZNK6String6equalsEPKc+0x2e>
    5c58:	21 e0       	ldi	r18, 0x01	; 1
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	80 81       	ld	r24, Z
    5c5e:	88 23       	and	r24, r24
    5c60:	31 f0       	breq	.+12     	; 0x5c6e <_ZNK6String6equalsEPKc+0x38>
    5c62:	04 c0       	rjmp	.+8      	; 0x5c6c <_ZNK6String6equalsEPKc+0x36>
    5c64:	1a d5       	rcall	.+2612   	; 0x669a <strcmp>
    5c66:	21 e0       	ldi	r18, 0x01	; 1
    5c68:	89 2b       	or	r24, r25
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <_ZNK6String6equalsEPKc+0x38>
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	82 2f       	mov	r24, r18
    5c70:	08 95       	ret

00005c72 <_ZNK6String10startsWithERKS_j>:
    5c72:	db 01       	movw	r26, r22
    5c74:	14 96       	adiw	r26, 0x04	; 4
    5c76:	ed 91       	ld	r30, X+
    5c78:	fc 91       	ld	r31, X
    5c7a:	15 97       	sbiw	r26, 0x05	; 5
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	14 96       	adiw	r26, 0x04	; 4
    5c80:	2d 91       	ld	r18, X+
    5c82:	3c 91       	ld	r19, X
    5c84:	15 97       	sbiw	r26, 0x05	; 5
    5c86:	2e 1b       	sub	r18, r30
    5c88:	3f 0b       	sbc	r19, r31
    5c8a:	24 17       	cp	r18, r20
    5c8c:	35 07       	cpc	r19, r21
    5c8e:	98 f0       	brcs	.+38     	; 0x5cb6 <_ZNK6String10startsWithERKS_j+0x44>
    5c90:	2d 91       	ld	r18, X+
    5c92:	3c 91       	ld	r19, X
    5c94:	21 15       	cp	r18, r1
    5c96:	31 05       	cpc	r19, r1
    5c98:	71 f0       	breq	.+28     	; 0x5cb6 <_ZNK6String10startsWithERKS_j+0x44>
    5c9a:	db 01       	movw	r26, r22
    5c9c:	6d 91       	ld	r22, X+
    5c9e:	7c 91       	ld	r23, X
    5ca0:	61 15       	cp	r22, r1
    5ca2:	71 05       	cpc	r23, r1
    5ca4:	41 f0       	breq	.+16     	; 0x5cb6 <_ZNK6String10startsWithERKS_j+0x44>
    5ca6:	ca 01       	movw	r24, r20
    5ca8:	af 01       	movw	r20, r30
    5caa:	82 0f       	add	r24, r18
    5cac:	93 1f       	adc	r25, r19
    5cae:	05 d5       	rcall	.+2570   	; 0x66ba <strncmp>
    5cb0:	21 e0       	ldi	r18, 0x01	; 1
    5cb2:	89 2b       	or	r24, r25
    5cb4:	09 f0       	breq	.+2      	; 0x5cb8 <_ZNK6String10startsWithERKS_j+0x46>
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	82 2f       	mov	r24, r18
    5cba:	08 95       	ret

00005cbc <_ZNK6String10startsWithERKS_>:
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	44 81       	ldd	r20, Z+4	; 0x04
    5cc0:	55 81       	ldd	r21, Z+5	; 0x05
    5cc2:	fb 01       	movw	r30, r22
    5cc4:	24 81       	ldd	r18, Z+4	; 0x04
    5cc6:	35 81       	ldd	r19, Z+5	; 0x05
    5cc8:	42 17       	cp	r20, r18
    5cca:	53 07       	cpc	r21, r19
    5ccc:	18 f0       	brcs	.+6      	; 0x5cd4 <_ZNK6String10startsWithERKS_+0x18>
    5cce:	40 e0       	ldi	r20, 0x00	; 0
    5cd0:	50 e0       	ldi	r21, 0x00	; 0
    5cd2:	cf cf       	rjmp	.-98     	; 0x5c72 <_ZNK6String10startsWithERKS_j>
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	08 95       	ret

00005cd8 <_ZNK6StringixEj>:
    5cd8:	fc 01       	movw	r30, r24
    5cda:	24 81       	ldd	r18, Z+4	; 0x04
    5cdc:	35 81       	ldd	r19, Z+5	; 0x05
    5cde:	62 17       	cp	r22, r18
    5ce0:	73 07       	cpc	r23, r19
    5ce2:	48 f4       	brcc	.+18     	; 0x5cf6 <_ZNK6StringixEj+0x1e>
    5ce4:	80 81       	ld	r24, Z
    5ce6:	91 81       	ldd	r25, Z+1	; 0x01
    5ce8:	00 97       	sbiw	r24, 0x00	; 0
    5cea:	29 f0       	breq	.+10     	; 0x5cf6 <_ZNK6StringixEj+0x1e>
    5cec:	fc 01       	movw	r30, r24
    5cee:	e6 0f       	add	r30, r22
    5cf0:	f7 1f       	adc	r31, r23
    5cf2:	80 81       	ld	r24, Z
    5cf4:	08 95       	ret
    5cf6:	80 e0       	ldi	r24, 0x00	; 0
    5cf8:	08 95       	ret

00005cfa <_ZNK6String6charAtEj>:
    5cfa:	ee cf       	rjmp	.-36     	; 0x5cd8 <_ZNK6StringixEj>

00005cfc <_ZNK6String9substringEjj>:
    5cfc:	bf 92       	push	r11
    5cfe:	cf 92       	push	r12
    5d00:	df 92       	push	r13
    5d02:	ef 92       	push	r14
    5d04:	ff 92       	push	r15
    5d06:	0f 93       	push	r16
    5d08:	1f 93       	push	r17
    5d0a:	cf 93       	push	r28
    5d0c:	df 93       	push	r29
    5d0e:	7c 01       	movw	r14, r24
    5d10:	6b 01       	movw	r12, r22
    5d12:	8a 01       	movw	r16, r20
    5d14:	e9 01       	movw	r28, r18
    5d16:	24 17       	cp	r18, r20
    5d18:	35 07       	cpc	r19, r21
    5d1a:	20 f4       	brcc	.+8      	; 0x5d24 <_ZNK6String9substringEjj+0x28>
    5d1c:	81 2f       	mov	r24, r17
    5d1e:	89 01       	movw	r16, r18
    5d20:	c4 2f       	mov	r28, r20
    5d22:	d8 2f       	mov	r29, r24
    5d24:	6c ed       	ldi	r22, 0xDC	; 220
    5d26:	71 e0       	ldi	r23, 0x01	; 1
    5d28:	c7 01       	movw	r24, r14
    5d2a:	86 de       	rcall	.-756    	; 0x5a38 <_ZN6StringC1EPKc>
    5d2c:	d6 01       	movw	r26, r12
    5d2e:	14 96       	adiw	r26, 0x04	; 4
    5d30:	8d 91       	ld	r24, X+
    5d32:	9c 91       	ld	r25, X
    5d34:	15 97       	sbiw	r26, 0x05	; 5
    5d36:	08 17       	cp	r16, r24
    5d38:	19 07       	cpc	r17, r25
    5d3a:	c8 f4       	brcc	.+50     	; 0x5d6e <_ZNK6String9substringEjj+0x72>
    5d3c:	8c 17       	cp	r24, r28
    5d3e:	9d 07       	cpc	r25, r29
    5d40:	08 f4       	brcc	.+2      	; 0x5d44 <_ZNK6String9substringEjj+0x48>
    5d42:	ec 01       	movw	r28, r24
    5d44:	d6 01       	movw	r26, r12
    5d46:	ed 91       	ld	r30, X+
    5d48:	fc 91       	ld	r31, X
    5d4a:	11 97       	sbiw	r26, 0x01	; 1
    5d4c:	ec 0f       	add	r30, r28
    5d4e:	fd 1f       	adc	r31, r29
    5d50:	b0 80       	ld	r11, Z
    5d52:	10 82       	st	Z, r1
    5d54:	4d 91       	ld	r20, X+
    5d56:	5c 91       	ld	r21, X
    5d58:	ba 01       	movw	r22, r20
    5d5a:	60 0f       	add	r22, r16
    5d5c:	71 1f       	adc	r23, r17
    5d5e:	c7 01       	movw	r24, r14
    5d60:	9c de       	rcall	.-712    	; 0x5a9a <_ZN6StringaSEPKc>
    5d62:	d6 01       	movw	r26, r12
    5d64:	ed 91       	ld	r30, X+
    5d66:	fc 91       	ld	r31, X
    5d68:	ec 0f       	add	r30, r28
    5d6a:	fd 1f       	adc	r31, r29
    5d6c:	b0 82       	st	Z, r11
    5d6e:	c7 01       	movw	r24, r14
    5d70:	df 91       	pop	r29
    5d72:	cf 91       	pop	r28
    5d74:	1f 91       	pop	r17
    5d76:	0f 91       	pop	r16
    5d78:	ff 90       	pop	r15
    5d7a:	ef 90       	pop	r14
    5d7c:	df 90       	pop	r13
    5d7e:	cf 90       	pop	r12
    5d80:	bf 90       	pop	r11
    5d82:	08 95       	ret

00005d84 <_ZN6String4trimEv>:
    5d84:	af 92       	push	r10
    5d86:	bf 92       	push	r11
    5d88:	cf 92       	push	r12
    5d8a:	df 92       	push	r13
    5d8c:	ef 92       	push	r14
    5d8e:	ff 92       	push	r15
    5d90:	0f 93       	push	r16
    5d92:	1f 93       	push	r17
    5d94:	cf 93       	push	r28
    5d96:	df 93       	push	r29
    5d98:	dc 01       	movw	r26, r24
    5d9a:	cd 90       	ld	r12, X+
    5d9c:	dc 90       	ld	r13, X
    5d9e:	11 97       	sbiw	r26, 0x01	; 1
    5da0:	c1 14       	cp	r12, r1
    5da2:	d1 04       	cpc	r13, r1
    5da4:	d9 f1       	breq	.+118    	; 0x5e1c <_ZN6String4trimEv+0x98>
    5da6:	14 96       	adiw	r26, 0x04	; 4
    5da8:	cd 91       	ld	r28, X+
    5daa:	dc 91       	ld	r29, X
    5dac:	15 97       	sbiw	r26, 0x05	; 5
    5dae:	20 97       	sbiw	r28, 0x00	; 0
    5db0:	a9 f1       	breq	.+106    	; 0x5e1c <_ZN6String4trimEv+0x98>
    5db2:	8c 01       	movw	r16, r24
    5db4:	56 01       	movw	r10, r12
    5db6:	75 01       	movw	r14, r10
    5db8:	bf ef       	ldi	r27, 0xFF	; 255
    5dba:	ab 1a       	sub	r10, r27
    5dbc:	bb 0a       	sbc	r11, r27
    5dbe:	f7 01       	movw	r30, r14
    5dc0:	80 81       	ld	r24, Z
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	41 d4       	rcall	.+2178   	; 0x6648 <isspace>
    5dc6:	89 2b       	or	r24, r25
    5dc8:	b1 f7       	brne	.-20     	; 0x5db6 <_ZN6String4trimEv+0x32>
    5dca:	21 97       	sbiw	r28, 0x01	; 1
    5dcc:	cc 0d       	add	r28, r12
    5dce:	dd 1d       	adc	r29, r13
    5dd0:	88 81       	ld	r24, Y
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	39 d4       	rcall	.+2162   	; 0x6648 <isspace>
    5dd6:	89 2b       	or	r24, r25
    5dd8:	89 f4       	brne	.+34     	; 0x5dfc <_ZN6String4trimEv+0x78>
    5dda:	ae 01       	movw	r20, r28
    5ddc:	4f 5f       	subi	r20, 0xFF	; 255
    5dde:	5f 4f       	sbci	r21, 0xFF	; 255
    5de0:	4e 19       	sub	r20, r14
    5de2:	5f 09       	sbc	r21, r15
    5de4:	d8 01       	movw	r26, r16
    5de6:	15 96       	adiw	r26, 0x05	; 5
    5de8:	5c 93       	st	X, r21
    5dea:	4e 93       	st	-X, r20
    5dec:	14 97       	sbiw	r26, 0x04	; 4
    5dee:	ce 14       	cp	r12, r14
    5df0:	df 04       	cpc	r13, r15
    5df2:	48 f4       	brcc	.+18     	; 0x5e06 <_ZN6String4trimEv+0x82>
    5df4:	b7 01       	movw	r22, r14
    5df6:	c6 01       	movw	r24, r12
    5df8:	47 d4       	rcall	.+2190   	; 0x6688 <memcpy>
    5dfa:	05 c0       	rjmp	.+10     	; 0x5e06 <_ZN6String4trimEv+0x82>
    5dfc:	ce 15       	cp	r28, r14
    5dfe:	df 05       	cpc	r29, r15
    5e00:	60 f3       	brcs	.-40     	; 0x5dda <_ZN6String4trimEv+0x56>
    5e02:	21 97       	sbiw	r28, 0x01	; 1
    5e04:	e5 cf       	rjmp	.-54     	; 0x5dd0 <_ZN6String4trimEv+0x4c>
    5e06:	d8 01       	movw	r26, r16
    5e08:	ed 91       	ld	r30, X+
    5e0a:	fc 91       	ld	r31, X
    5e0c:	11 97       	sbiw	r26, 0x01	; 1
    5e0e:	14 96       	adiw	r26, 0x04	; 4
    5e10:	8d 91       	ld	r24, X+
    5e12:	9c 91       	ld	r25, X
    5e14:	15 97       	sbiw	r26, 0x05	; 5
    5e16:	e8 0f       	add	r30, r24
    5e18:	f9 1f       	adc	r31, r25
    5e1a:	10 82       	st	Z, r1
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	ff 90       	pop	r15
    5e26:	ef 90       	pop	r14
    5e28:	df 90       	pop	r13
    5e2a:	cf 90       	pop	r12
    5e2c:	bf 90       	pop	r11
    5e2e:	af 90       	pop	r10
    5e30:	08 95       	ret

00005e32 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    5e32:	fc 01       	movw	r30, r24
    5e34:	80 81       	ld	r24, Z
    5e36:	91 81       	ldd	r25, Z+1	; 0x01
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	09 f0       	breq	.+2      	; 0x5e3e <_ZNK6String7toFloatEv+0xc>
    5e3c:	02 c4       	rjmp	.+2052   	; 0x6642 <atof>
	return 0;
}
    5e3e:	60 e0       	ldi	r22, 0x00	; 0
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	cb 01       	movw	r24, r22
    5e44:	08 95       	ret

00005e46 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5e46:	08 95       	ret

00005e48 <__udivmodsi4>:
    5e48:	a1 e2       	ldi	r26, 0x21	; 33
    5e4a:	1a 2e       	mov	r1, r26
    5e4c:	aa 1b       	sub	r26, r26
    5e4e:	bb 1b       	sub	r27, r27
    5e50:	fd 01       	movw	r30, r26
    5e52:	0d c0       	rjmp	.+26     	; 0x5e6e <__udivmodsi4_ep>

00005e54 <__udivmodsi4_loop>:
    5e54:	aa 1f       	adc	r26, r26
    5e56:	bb 1f       	adc	r27, r27
    5e58:	ee 1f       	adc	r30, r30
    5e5a:	ff 1f       	adc	r31, r31
    5e5c:	a2 17       	cp	r26, r18
    5e5e:	b3 07       	cpc	r27, r19
    5e60:	e4 07       	cpc	r30, r20
    5e62:	f5 07       	cpc	r31, r21
    5e64:	20 f0       	brcs	.+8      	; 0x5e6e <__udivmodsi4_ep>
    5e66:	a2 1b       	sub	r26, r18
    5e68:	b3 0b       	sbc	r27, r19
    5e6a:	e4 0b       	sbc	r30, r20
    5e6c:	f5 0b       	sbc	r31, r21

00005e6e <__udivmodsi4_ep>:
    5e6e:	66 1f       	adc	r22, r22
    5e70:	77 1f       	adc	r23, r23
    5e72:	88 1f       	adc	r24, r24
    5e74:	99 1f       	adc	r25, r25
    5e76:	1a 94       	dec	r1
    5e78:	69 f7       	brne	.-38     	; 0x5e54 <__udivmodsi4_loop>
    5e7a:	60 95       	com	r22
    5e7c:	70 95       	com	r23
    5e7e:	80 95       	com	r24
    5e80:	90 95       	com	r25
    5e82:	9b 01       	movw	r18, r22
    5e84:	ac 01       	movw	r20, r24
    5e86:	bd 01       	movw	r22, r26
    5e88:	cf 01       	movw	r24, r30
    5e8a:	08 95       	ret

00005e8c <__divmodsi4>:
    5e8c:	05 2e       	mov	r0, r21
    5e8e:	97 fb       	bst	r25, 7
    5e90:	16 f4       	brtc	.+4      	; 0x5e96 <__divmodsi4+0xa>
    5e92:	00 94       	com	r0
    5e94:	0f d0       	rcall	.+30     	; 0x5eb4 <__negsi2>
    5e96:	57 fd       	sbrc	r21, 7
    5e98:	05 d0       	rcall	.+10     	; 0x5ea4 <__divmodsi4_neg2>
    5e9a:	d6 df       	rcall	.-84     	; 0x5e48 <__udivmodsi4>
    5e9c:	07 fc       	sbrc	r0, 7
    5e9e:	02 d0       	rcall	.+4      	; 0x5ea4 <__divmodsi4_neg2>
    5ea0:	46 f4       	brtc	.+16     	; 0x5eb2 <__divmodsi4_exit>
    5ea2:	08 c0       	rjmp	.+16     	; 0x5eb4 <__negsi2>

00005ea4 <__divmodsi4_neg2>:
    5ea4:	50 95       	com	r21
    5ea6:	40 95       	com	r20
    5ea8:	30 95       	com	r19
    5eaa:	21 95       	neg	r18
    5eac:	3f 4f       	sbci	r19, 0xFF	; 255
    5eae:	4f 4f       	sbci	r20, 0xFF	; 255
    5eb0:	5f 4f       	sbci	r21, 0xFF	; 255

00005eb2 <__divmodsi4_exit>:
    5eb2:	08 95       	ret

00005eb4 <__negsi2>:
    5eb4:	90 95       	com	r25
    5eb6:	80 95       	com	r24
    5eb8:	70 95       	com	r23
    5eba:	61 95       	neg	r22
    5ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec2:	08 95       	ret

00005ec4 <__tablejump2__>:
    5ec4:	ee 0f       	add	r30, r30
    5ec6:	ff 1f       	adc	r31, r31
    5ec8:	05 90       	lpm	r0, Z+
    5eca:	f4 91       	lpm	r31, Z
    5ecc:	e0 2d       	mov	r30, r0
    5ece:	09 94       	ijmp

00005ed0 <__muluhisi3>:
    5ed0:	40 d0       	rcall	.+128    	; 0x5f52 <__umulhisi3>
    5ed2:	a5 9f       	mul	r26, r21
    5ed4:	90 0d       	add	r25, r0
    5ed6:	b4 9f       	mul	r27, r20
    5ed8:	90 0d       	add	r25, r0
    5eda:	a4 9f       	mul	r26, r20
    5edc:	80 0d       	add	r24, r0
    5ede:	91 1d       	adc	r25, r1
    5ee0:	11 24       	eor	r1, r1
    5ee2:	08 95       	ret

00005ee4 <__prologue_saves__>:
    5ee4:	2f 92       	push	r2
    5ee6:	3f 92       	push	r3
    5ee8:	4f 92       	push	r4
    5eea:	5f 92       	push	r5
    5eec:	6f 92       	push	r6
    5eee:	7f 92       	push	r7
    5ef0:	8f 92       	push	r8
    5ef2:	9f 92       	push	r9
    5ef4:	af 92       	push	r10
    5ef6:	bf 92       	push	r11
    5ef8:	cf 92       	push	r12
    5efa:	df 92       	push	r13
    5efc:	ef 92       	push	r14
    5efe:	ff 92       	push	r15
    5f00:	0f 93       	push	r16
    5f02:	1f 93       	push	r17
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29
    5f08:	cd b7       	in	r28, 0x3d	; 61
    5f0a:	de b7       	in	r29, 0x3e	; 62
    5f0c:	ca 1b       	sub	r28, r26
    5f0e:	db 0b       	sbc	r29, r27
    5f10:	0f b6       	in	r0, 0x3f	; 63
    5f12:	f8 94       	cli
    5f14:	de bf       	out	0x3e, r29	; 62
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	cd bf       	out	0x3d, r28	; 61
    5f1a:	09 94       	ijmp

00005f1c <__epilogue_restores__>:
    5f1c:	2a 88       	ldd	r2, Y+18	; 0x12
    5f1e:	39 88       	ldd	r3, Y+17	; 0x11
    5f20:	48 88       	ldd	r4, Y+16	; 0x10
    5f22:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f24:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f26:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f28:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f2e:	b9 84       	ldd	r11, Y+9	; 0x09
    5f30:	c8 84       	ldd	r12, Y+8	; 0x08
    5f32:	df 80       	ldd	r13, Y+7	; 0x07
    5f34:	ee 80       	ldd	r14, Y+6	; 0x06
    5f36:	fd 80       	ldd	r15, Y+5	; 0x05
    5f38:	0c 81       	ldd	r16, Y+4	; 0x04
    5f3a:	1b 81       	ldd	r17, Y+3	; 0x03
    5f3c:	aa 81       	ldd	r26, Y+2	; 0x02
    5f3e:	b9 81       	ldd	r27, Y+1	; 0x01
    5f40:	ce 0f       	add	r28, r30
    5f42:	d1 1d       	adc	r29, r1
    5f44:	0f b6       	in	r0, 0x3f	; 63
    5f46:	f8 94       	cli
    5f48:	de bf       	out	0x3e, r29	; 62
    5f4a:	0f be       	out	0x3f, r0	; 63
    5f4c:	cd bf       	out	0x3d, r28	; 61
    5f4e:	ed 01       	movw	r28, r26
    5f50:	08 95       	ret

00005f52 <__umulhisi3>:
    5f52:	a2 9f       	mul	r26, r18
    5f54:	b0 01       	movw	r22, r0
    5f56:	b3 9f       	mul	r27, r19
    5f58:	c0 01       	movw	r24, r0
    5f5a:	a3 9f       	mul	r26, r19
    5f5c:	70 0d       	add	r23, r0
    5f5e:	81 1d       	adc	r24, r1
    5f60:	11 24       	eor	r1, r1
    5f62:	91 1d       	adc	r25, r1
    5f64:	b2 9f       	mul	r27, r18
    5f66:	70 0d       	add	r23, r0
    5f68:	81 1d       	adc	r24, r1
    5f6a:	11 24       	eor	r1, r1
    5f6c:	91 1d       	adc	r25, r1
    5f6e:	08 95       	ret

00005f70 <dtostrf>:
    5f70:	ef 92       	push	r14
    5f72:	0f 93       	push	r16
    5f74:	1f 93       	push	r17
    5f76:	cf 93       	push	r28
    5f78:	df 93       	push	r29
    5f7a:	e8 01       	movw	r28, r16
    5f7c:	47 fd       	sbrc	r20, 7
    5f7e:	02 c0       	rjmp	.+4      	; 0x5f84 <dtostrf+0x14>
    5f80:	34 e0       	ldi	r19, 0x04	; 4
    5f82:	01 c0       	rjmp	.+2      	; 0x5f86 <dtostrf+0x16>
    5f84:	34 e1       	ldi	r19, 0x14	; 20
    5f86:	e4 2f       	mov	r30, r20
    5f88:	44 0f       	add	r20, r20
    5f8a:	ff 0b       	sbc	r31, r31
    5f8c:	f7 ff       	sbrs	r31, 7
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <dtostrf+0x26>
    5f90:	f1 95       	neg	r31
    5f92:	e1 95       	neg	r30
    5f94:	f1 09       	sbc	r31, r1
    5f96:	e3 2e       	mov	r14, r19
    5f98:	02 2f       	mov	r16, r18
    5f9a:	2e 2f       	mov	r18, r30
    5f9c:	ae 01       	movw	r20, r28
    5f9e:	9b d3       	rcall	.+1846   	; 0x66d6 <dtoa_prf>
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	1f 91       	pop	r17
    5fa8:	0f 91       	pop	r16
    5faa:	ef 90       	pop	r14
    5fac:	08 95       	ret

00005fae <malloc>:
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	82 30       	cpi	r24, 0x02	; 2
    5fb4:	91 05       	cpc	r25, r1
    5fb6:	10 f4       	brcc	.+4      	; 0x5fbc <malloc+0xe>
    5fb8:	82 e0       	ldi	r24, 0x02	; 2
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	e0 91 0a 06 	lds	r30, 0x060A	; 0x80060a <__flp>
    5fc0:	f0 91 0b 06 	lds	r31, 0x060B	; 0x80060b <__flp+0x1>
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	30 e0       	ldi	r19, 0x00	; 0
    5fc8:	c0 e0       	ldi	r28, 0x00	; 0
    5fca:	d0 e0       	ldi	r29, 0x00	; 0
    5fcc:	30 97       	sbiw	r30, 0x00	; 0
    5fce:	11 f1       	breq	.+68     	; 0x6014 <malloc+0x66>
    5fd0:	40 81       	ld	r20, Z
    5fd2:	51 81       	ldd	r21, Z+1	; 0x01
    5fd4:	48 17       	cp	r20, r24
    5fd6:	59 07       	cpc	r21, r25
    5fd8:	c0 f0       	brcs	.+48     	; 0x600a <malloc+0x5c>
    5fda:	48 17       	cp	r20, r24
    5fdc:	59 07       	cpc	r21, r25
    5fde:	61 f4       	brne	.+24     	; 0x5ff8 <malloc+0x4a>
    5fe0:	82 81       	ldd	r24, Z+2	; 0x02
    5fe2:	93 81       	ldd	r25, Z+3	; 0x03
    5fe4:	20 97       	sbiw	r28, 0x00	; 0
    5fe6:	19 f0       	breq	.+6      	; 0x5fee <malloc+0x40>
    5fe8:	9b 83       	std	Y+3, r25	; 0x03
    5fea:	8a 83       	std	Y+2, r24	; 0x02
    5fec:	2b c0       	rjmp	.+86     	; 0x6044 <malloc+0x96>
    5fee:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <__flp+0x1>
    5ff2:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__flp>
    5ff6:	26 c0       	rjmp	.+76     	; 0x6044 <malloc+0x96>
    5ff8:	21 15       	cp	r18, r1
    5ffa:	31 05       	cpc	r19, r1
    5ffc:	19 f0       	breq	.+6      	; 0x6004 <malloc+0x56>
    5ffe:	42 17       	cp	r20, r18
    6000:	53 07       	cpc	r21, r19
    6002:	18 f4       	brcc	.+6      	; 0x600a <malloc+0x5c>
    6004:	9a 01       	movw	r18, r20
    6006:	be 01       	movw	r22, r28
    6008:	df 01       	movw	r26, r30
    600a:	ef 01       	movw	r28, r30
    600c:	02 80       	ldd	r0, Z+2	; 0x02
    600e:	f3 81       	ldd	r31, Z+3	; 0x03
    6010:	e0 2d       	mov	r30, r0
    6012:	dc cf       	rjmp	.-72     	; 0x5fcc <malloc+0x1e>
    6014:	21 15       	cp	r18, r1
    6016:	31 05       	cpc	r19, r1
    6018:	09 f1       	breq	.+66     	; 0x605c <malloc+0xae>
    601a:	28 1b       	sub	r18, r24
    601c:	39 0b       	sbc	r19, r25
    601e:	24 30       	cpi	r18, 0x04	; 4
    6020:	31 05       	cpc	r19, r1
    6022:	90 f4       	brcc	.+36     	; 0x6048 <malloc+0x9a>
    6024:	12 96       	adiw	r26, 0x02	; 2
    6026:	8d 91       	ld	r24, X+
    6028:	9c 91       	ld	r25, X
    602a:	13 97       	sbiw	r26, 0x03	; 3
    602c:	61 15       	cp	r22, r1
    602e:	71 05       	cpc	r23, r1
    6030:	21 f0       	breq	.+8      	; 0x603a <malloc+0x8c>
    6032:	fb 01       	movw	r30, r22
    6034:	93 83       	std	Z+3, r25	; 0x03
    6036:	82 83       	std	Z+2, r24	; 0x02
    6038:	04 c0       	rjmp	.+8      	; 0x6042 <malloc+0x94>
    603a:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <__flp+0x1>
    603e:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__flp>
    6042:	fd 01       	movw	r30, r26
    6044:	32 96       	adiw	r30, 0x02	; 2
    6046:	44 c0       	rjmp	.+136    	; 0x60d0 <malloc+0x122>
    6048:	fd 01       	movw	r30, r26
    604a:	e2 0f       	add	r30, r18
    604c:	f3 1f       	adc	r31, r19
    604e:	81 93       	st	Z+, r24
    6050:	91 93       	st	Z+, r25
    6052:	22 50       	subi	r18, 0x02	; 2
    6054:	31 09       	sbc	r19, r1
    6056:	2d 93       	st	X+, r18
    6058:	3c 93       	st	X, r19
    605a:	3a c0       	rjmp	.+116    	; 0x60d0 <malloc+0x122>
    605c:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <__brkval>
    6060:	30 91 09 06 	lds	r19, 0x0609	; 0x800609 <__brkval+0x1>
    6064:	23 2b       	or	r18, r19
    6066:	41 f4       	brne	.+16     	; 0x6078 <malloc+0xca>
    6068:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    606c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6070:	30 93 09 06 	sts	0x0609, r19	; 0x800609 <__brkval+0x1>
    6074:	20 93 08 06 	sts	0x0608, r18	; 0x800608 <__brkval>
    6078:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    607c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6080:	21 15       	cp	r18, r1
    6082:	31 05       	cpc	r19, r1
    6084:	41 f4       	brne	.+16     	; 0x6096 <malloc+0xe8>
    6086:	2d b7       	in	r18, 0x3d	; 61
    6088:	3e b7       	in	r19, 0x3e	; 62
    608a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    608e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6092:	24 1b       	sub	r18, r20
    6094:	35 0b       	sbc	r19, r21
    6096:	e0 91 08 06 	lds	r30, 0x0608	; 0x800608 <__brkval>
    609a:	f0 91 09 06 	lds	r31, 0x0609	; 0x800609 <__brkval+0x1>
    609e:	e2 17       	cp	r30, r18
    60a0:	f3 07       	cpc	r31, r19
    60a2:	a0 f4       	brcc	.+40     	; 0x60cc <malloc+0x11e>
    60a4:	2e 1b       	sub	r18, r30
    60a6:	3f 0b       	sbc	r19, r31
    60a8:	28 17       	cp	r18, r24
    60aa:	39 07       	cpc	r19, r25
    60ac:	78 f0       	brcs	.+30     	; 0x60cc <malloc+0x11e>
    60ae:	ac 01       	movw	r20, r24
    60b0:	4e 5f       	subi	r20, 0xFE	; 254
    60b2:	5f 4f       	sbci	r21, 0xFF	; 255
    60b4:	24 17       	cp	r18, r20
    60b6:	35 07       	cpc	r19, r21
    60b8:	48 f0       	brcs	.+18     	; 0x60cc <malloc+0x11e>
    60ba:	4e 0f       	add	r20, r30
    60bc:	5f 1f       	adc	r21, r31
    60be:	50 93 09 06 	sts	0x0609, r21	; 0x800609 <__brkval+0x1>
    60c2:	40 93 08 06 	sts	0x0608, r20	; 0x800608 <__brkval>
    60c6:	81 93       	st	Z+, r24
    60c8:	91 93       	st	Z+, r25
    60ca:	02 c0       	rjmp	.+4      	; 0x60d0 <malloc+0x122>
    60cc:	e0 e0       	ldi	r30, 0x00	; 0
    60ce:	f0 e0       	ldi	r31, 0x00	; 0
    60d0:	cf 01       	movw	r24, r30
    60d2:	df 91       	pop	r29
    60d4:	cf 91       	pop	r28
    60d6:	08 95       	ret

000060d8 <free>:
    60d8:	0f 93       	push	r16
    60da:	1f 93       	push	r17
    60dc:	cf 93       	push	r28
    60de:	df 93       	push	r29
    60e0:	00 97       	sbiw	r24, 0x00	; 0
    60e2:	09 f4       	brne	.+2      	; 0x60e6 <free+0xe>
    60e4:	8c c0       	rjmp	.+280    	; 0x61fe <free+0x126>
    60e6:	fc 01       	movw	r30, r24
    60e8:	32 97       	sbiw	r30, 0x02	; 2
    60ea:	13 82       	std	Z+3, r1	; 0x03
    60ec:	12 82       	std	Z+2, r1	; 0x02
    60ee:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <__flp>
    60f2:	10 91 0b 06 	lds	r17, 0x060B	; 0x80060b <__flp+0x1>
    60f6:	01 15       	cp	r16, r1
    60f8:	11 05       	cpc	r17, r1
    60fa:	81 f4       	brne	.+32     	; 0x611c <free+0x44>
    60fc:	20 81       	ld	r18, Z
    60fe:	31 81       	ldd	r19, Z+1	; 0x01
    6100:	82 0f       	add	r24, r18
    6102:	93 1f       	adc	r25, r19
    6104:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <__brkval>
    6108:	30 91 09 06 	lds	r19, 0x0609	; 0x800609 <__brkval+0x1>
    610c:	28 17       	cp	r18, r24
    610e:	39 07       	cpc	r19, r25
    6110:	79 f5       	brne	.+94     	; 0x6170 <free+0x98>
    6112:	f0 93 09 06 	sts	0x0609, r31	; 0x800609 <__brkval+0x1>
    6116:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <__brkval>
    611a:	71 c0       	rjmp	.+226    	; 0x61fe <free+0x126>
    611c:	d8 01       	movw	r26, r16
    611e:	40 e0       	ldi	r20, 0x00	; 0
    6120:	50 e0       	ldi	r21, 0x00	; 0
    6122:	ae 17       	cp	r26, r30
    6124:	bf 07       	cpc	r27, r31
    6126:	50 f4       	brcc	.+20     	; 0x613c <free+0x64>
    6128:	12 96       	adiw	r26, 0x02	; 2
    612a:	2d 91       	ld	r18, X+
    612c:	3c 91       	ld	r19, X
    612e:	13 97       	sbiw	r26, 0x03	; 3
    6130:	ad 01       	movw	r20, r26
    6132:	21 15       	cp	r18, r1
    6134:	31 05       	cpc	r19, r1
    6136:	09 f1       	breq	.+66     	; 0x617a <free+0xa2>
    6138:	d9 01       	movw	r26, r18
    613a:	f3 cf       	rjmp	.-26     	; 0x6122 <free+0x4a>
    613c:	9d 01       	movw	r18, r26
    613e:	da 01       	movw	r26, r20
    6140:	33 83       	std	Z+3, r19	; 0x03
    6142:	22 83       	std	Z+2, r18	; 0x02
    6144:	60 81       	ld	r22, Z
    6146:	71 81       	ldd	r23, Z+1	; 0x01
    6148:	86 0f       	add	r24, r22
    614a:	97 1f       	adc	r25, r23
    614c:	82 17       	cp	r24, r18
    614e:	93 07       	cpc	r25, r19
    6150:	69 f4       	brne	.+26     	; 0x616c <free+0x94>
    6152:	ec 01       	movw	r28, r24
    6154:	28 81       	ld	r18, Y
    6156:	39 81       	ldd	r19, Y+1	; 0x01
    6158:	26 0f       	add	r18, r22
    615a:	37 1f       	adc	r19, r23
    615c:	2e 5f       	subi	r18, 0xFE	; 254
    615e:	3f 4f       	sbci	r19, 0xFF	; 255
    6160:	31 83       	std	Z+1, r19	; 0x01
    6162:	20 83       	st	Z, r18
    6164:	8a 81       	ldd	r24, Y+2	; 0x02
    6166:	9b 81       	ldd	r25, Y+3	; 0x03
    6168:	93 83       	std	Z+3, r25	; 0x03
    616a:	82 83       	std	Z+2, r24	; 0x02
    616c:	45 2b       	or	r20, r21
    616e:	29 f4       	brne	.+10     	; 0x617a <free+0xa2>
    6170:	f0 93 0b 06 	sts	0x060B, r31	; 0x80060b <__flp+0x1>
    6174:	e0 93 0a 06 	sts	0x060A, r30	; 0x80060a <__flp>
    6178:	42 c0       	rjmp	.+132    	; 0x61fe <free+0x126>
    617a:	13 96       	adiw	r26, 0x03	; 3
    617c:	fc 93       	st	X, r31
    617e:	ee 93       	st	-X, r30
    6180:	12 97       	sbiw	r26, 0x02	; 2
    6182:	ed 01       	movw	r28, r26
    6184:	49 91       	ld	r20, Y+
    6186:	59 91       	ld	r21, Y+
    6188:	9e 01       	movw	r18, r28
    618a:	24 0f       	add	r18, r20
    618c:	35 1f       	adc	r19, r21
    618e:	e2 17       	cp	r30, r18
    6190:	f3 07       	cpc	r31, r19
    6192:	71 f4       	brne	.+28     	; 0x61b0 <free+0xd8>
    6194:	80 81       	ld	r24, Z
    6196:	91 81       	ldd	r25, Z+1	; 0x01
    6198:	84 0f       	add	r24, r20
    619a:	95 1f       	adc	r25, r21
    619c:	02 96       	adiw	r24, 0x02	; 2
    619e:	11 96       	adiw	r26, 0x01	; 1
    61a0:	9c 93       	st	X, r25
    61a2:	8e 93       	st	-X, r24
    61a4:	82 81       	ldd	r24, Z+2	; 0x02
    61a6:	93 81       	ldd	r25, Z+3	; 0x03
    61a8:	13 96       	adiw	r26, 0x03	; 3
    61aa:	9c 93       	st	X, r25
    61ac:	8e 93       	st	-X, r24
    61ae:	12 97       	sbiw	r26, 0x02	; 2
    61b0:	e0 e0       	ldi	r30, 0x00	; 0
    61b2:	f0 e0       	ldi	r31, 0x00	; 0
    61b4:	d8 01       	movw	r26, r16
    61b6:	12 96       	adiw	r26, 0x02	; 2
    61b8:	8d 91       	ld	r24, X+
    61ba:	9c 91       	ld	r25, X
    61bc:	13 97       	sbiw	r26, 0x03	; 3
    61be:	00 97       	sbiw	r24, 0x00	; 0
    61c0:	19 f0       	breq	.+6      	; 0x61c8 <free+0xf0>
    61c2:	f8 01       	movw	r30, r16
    61c4:	8c 01       	movw	r16, r24
    61c6:	f6 cf       	rjmp	.-20     	; 0x61b4 <free+0xdc>
    61c8:	8d 91       	ld	r24, X+
    61ca:	9c 91       	ld	r25, X
    61cc:	98 01       	movw	r18, r16
    61ce:	2e 5f       	subi	r18, 0xFE	; 254
    61d0:	3f 4f       	sbci	r19, 0xFF	; 255
    61d2:	82 0f       	add	r24, r18
    61d4:	93 1f       	adc	r25, r19
    61d6:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <__brkval>
    61da:	30 91 09 06 	lds	r19, 0x0609	; 0x800609 <__brkval+0x1>
    61de:	28 17       	cp	r18, r24
    61e0:	39 07       	cpc	r19, r25
    61e2:	69 f4       	brne	.+26     	; 0x61fe <free+0x126>
    61e4:	30 97       	sbiw	r30, 0x00	; 0
    61e6:	29 f4       	brne	.+10     	; 0x61f2 <free+0x11a>
    61e8:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <__flp+0x1>
    61ec:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <__flp>
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <free+0x11e>
    61f2:	13 82       	std	Z+3, r1	; 0x03
    61f4:	12 82       	std	Z+2, r1	; 0x02
    61f6:	10 93 09 06 	sts	0x0609, r17	; 0x800609 <__brkval+0x1>
    61fa:	00 93 08 06 	sts	0x0608, r16	; 0x800608 <__brkval>
    61fe:	df 91       	pop	r29
    6200:	cf 91       	pop	r28
    6202:	1f 91       	pop	r17
    6204:	0f 91       	pop	r16
    6206:	08 95       	ret

00006208 <realloc>:
    6208:	a0 e0       	ldi	r26, 0x00	; 0
    620a:	b0 e0       	ldi	r27, 0x00	; 0
    620c:	e9 e0       	ldi	r30, 0x09	; 9
    620e:	f1 e3       	ldi	r31, 0x31	; 49
    6210:	6d ce       	rjmp	.-806    	; 0x5eec <__prologue_saves__+0x8>
    6212:	ec 01       	movw	r28, r24
    6214:	00 97       	sbiw	r24, 0x00	; 0
    6216:	19 f4       	brne	.+6      	; 0x621e <realloc+0x16>
    6218:	cb 01       	movw	r24, r22
    621a:	c9 de       	rcall	.-622    	; 0x5fae <malloc>
    621c:	b4 c0       	rjmp	.+360    	; 0x6386 <realloc+0x17e>
    621e:	fc 01       	movw	r30, r24
    6220:	e6 0f       	add	r30, r22
    6222:	f7 1f       	adc	r31, r23
    6224:	9c 01       	movw	r18, r24
    6226:	22 50       	subi	r18, 0x02	; 2
    6228:	31 09       	sbc	r19, r1
    622a:	e2 17       	cp	r30, r18
    622c:	f3 07       	cpc	r31, r19
    622e:	08 f4       	brcc	.+2      	; 0x6232 <realloc+0x2a>
    6230:	a8 c0       	rjmp	.+336    	; 0x6382 <realloc+0x17a>
    6232:	d9 01       	movw	r26, r18
    6234:	0d 91       	ld	r16, X+
    6236:	1c 91       	ld	r17, X
    6238:	11 97       	sbiw	r26, 0x01	; 1
    623a:	06 17       	cp	r16, r22
    623c:	17 07       	cpc	r17, r23
    623e:	a8 f0       	brcs	.+42     	; 0x626a <realloc+0x62>
    6240:	05 30       	cpi	r16, 0x05	; 5
    6242:	11 05       	cpc	r17, r1
    6244:	08 f4       	brcc	.+2      	; 0x6248 <realloc+0x40>
    6246:	9b c0       	rjmp	.+310    	; 0x637e <realloc+0x176>
    6248:	c8 01       	movw	r24, r16
    624a:	04 97       	sbiw	r24, 0x04	; 4
    624c:	86 17       	cp	r24, r22
    624e:	97 07       	cpc	r25, r23
    6250:	08 f4       	brcc	.+2      	; 0x6254 <realloc+0x4c>
    6252:	95 c0       	rjmp	.+298    	; 0x637e <realloc+0x176>
    6254:	02 50       	subi	r16, 0x02	; 2
    6256:	11 09       	sbc	r17, r1
    6258:	06 1b       	sub	r16, r22
    625a:	17 0b       	sbc	r17, r23
    625c:	01 93       	st	Z+, r16
    625e:	11 93       	st	Z+, r17
    6260:	6d 93       	st	X+, r22
    6262:	7c 93       	st	X, r23
    6264:	cf 01       	movw	r24, r30
    6266:	38 df       	rcall	.-400    	; 0x60d8 <free>
    6268:	8a c0       	rjmp	.+276    	; 0x637e <realloc+0x176>
    626a:	5b 01       	movw	r10, r22
    626c:	a0 1a       	sub	r10, r16
    626e:	b1 0a       	sbc	r11, r17
    6270:	4c 01       	movw	r8, r24
    6272:	80 0e       	add	r8, r16
    6274:	91 1e       	adc	r9, r17
    6276:	a0 91 0a 06 	lds	r26, 0x060A	; 0x80060a <__flp>
    627a:	b0 91 0b 06 	lds	r27, 0x060B	; 0x80060b <__flp+0x1>
    627e:	40 e0       	ldi	r20, 0x00	; 0
    6280:	50 e0       	ldi	r21, 0x00	; 0
    6282:	e1 2c       	mov	r14, r1
    6284:	f1 2c       	mov	r15, r1
    6286:	10 97       	sbiw	r26, 0x00	; 0
    6288:	09 f4       	brne	.+2      	; 0x628c <realloc+0x84>
    628a:	4a c0       	rjmp	.+148    	; 0x6320 <realloc+0x118>
    628c:	a8 15       	cp	r26, r8
    628e:	b9 05       	cpc	r27, r9
    6290:	d1 f5       	brne	.+116    	; 0x6306 <realloc+0xfe>
    6292:	6d 90       	ld	r6, X+
    6294:	7c 90       	ld	r7, X
    6296:	11 97       	sbiw	r26, 0x01	; 1
    6298:	63 01       	movw	r12, r6
    629a:	82 e0       	ldi	r24, 0x02	; 2
    629c:	c8 0e       	add	r12, r24
    629e:	d1 1c       	adc	r13, r1
    62a0:	ca 14       	cp	r12, r10
    62a2:	db 04       	cpc	r13, r11
    62a4:	80 f1       	brcs	.+96     	; 0x6306 <realloc+0xfe>
    62a6:	a3 01       	movw	r20, r6
    62a8:	4a 19       	sub	r20, r10
    62aa:	5b 09       	sbc	r21, r11
    62ac:	6a 01       	movw	r12, r20
    62ae:	82 e0       	ldi	r24, 0x02	; 2
    62b0:	c8 0e       	add	r12, r24
    62b2:	d1 1c       	adc	r13, r1
    62b4:	12 96       	adiw	r26, 0x02	; 2
    62b6:	bc 90       	ld	r11, X
    62b8:	12 97       	sbiw	r26, 0x02	; 2
    62ba:	13 96       	adiw	r26, 0x03	; 3
    62bc:	ac 91       	ld	r26, X
    62be:	b5 e0       	ldi	r27, 0x05	; 5
    62c0:	cb 16       	cp	r12, r27
    62c2:	d1 04       	cpc	r13, r1
    62c4:	40 f0       	brcs	.+16     	; 0x62d6 <realloc+0xce>
    62c6:	b2 82       	std	Z+2, r11	; 0x02
    62c8:	a3 83       	std	Z+3, r26	; 0x03
    62ca:	51 83       	std	Z+1, r21	; 0x01
    62cc:	40 83       	st	Z, r20
    62ce:	d9 01       	movw	r26, r18
    62d0:	6d 93       	st	X+, r22
    62d2:	7c 93       	st	X, r23
    62d4:	0a c0       	rjmp	.+20     	; 0x62ea <realloc+0xe2>
    62d6:	0e 5f       	subi	r16, 0xFE	; 254
    62d8:	1f 4f       	sbci	r17, 0xFF	; 255
    62da:	c3 01       	movw	r24, r6
    62dc:	80 0f       	add	r24, r16
    62de:	91 1f       	adc	r25, r17
    62e0:	f9 01       	movw	r30, r18
    62e2:	91 83       	std	Z+1, r25	; 0x01
    62e4:	80 83       	st	Z, r24
    62e6:	eb 2d       	mov	r30, r11
    62e8:	fa 2f       	mov	r31, r26
    62ea:	e1 14       	cp	r14, r1
    62ec:	f1 04       	cpc	r15, r1
    62ee:	31 f0       	breq	.+12     	; 0x62fc <realloc+0xf4>
    62f0:	d7 01       	movw	r26, r14
    62f2:	13 96       	adiw	r26, 0x03	; 3
    62f4:	fc 93       	st	X, r31
    62f6:	ee 93       	st	-X, r30
    62f8:	12 97       	sbiw	r26, 0x02	; 2
    62fa:	41 c0       	rjmp	.+130    	; 0x637e <realloc+0x176>
    62fc:	f0 93 0b 06 	sts	0x060B, r31	; 0x80060b <__flp+0x1>
    6300:	e0 93 0a 06 	sts	0x060A, r30	; 0x80060a <__flp>
    6304:	3c c0       	rjmp	.+120    	; 0x637e <realloc+0x176>
    6306:	8d 91       	ld	r24, X+
    6308:	9c 91       	ld	r25, X
    630a:	11 97       	sbiw	r26, 0x01	; 1
    630c:	48 17       	cp	r20, r24
    630e:	59 07       	cpc	r21, r25
    6310:	08 f4       	brcc	.+2      	; 0x6314 <realloc+0x10c>
    6312:	ac 01       	movw	r20, r24
    6314:	7d 01       	movw	r14, r26
    6316:	12 96       	adiw	r26, 0x02	; 2
    6318:	0d 90       	ld	r0, X+
    631a:	bc 91       	ld	r27, X
    631c:	a0 2d       	mov	r26, r0
    631e:	b3 cf       	rjmp	.-154    	; 0x6286 <realloc+0x7e>
    6320:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__brkval>
    6324:	90 91 09 06 	lds	r25, 0x0609	; 0x800609 <__brkval+0x1>
    6328:	88 15       	cp	r24, r8
    632a:	99 05       	cpc	r25, r9
    632c:	e1 f4       	brne	.+56     	; 0x6366 <realloc+0x15e>
    632e:	46 17       	cp	r20, r22
    6330:	57 07       	cpc	r21, r23
    6332:	c8 f4       	brcc	.+50     	; 0x6366 <realloc+0x15e>
    6334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6338:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    633c:	00 97       	sbiw	r24, 0x00	; 0
    633e:	41 f4       	brne	.+16     	; 0x6350 <realloc+0x148>
    6340:	8d b7       	in	r24, 0x3d	; 61
    6342:	9e b7       	in	r25, 0x3e	; 62
    6344:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6348:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    634c:	84 1b       	sub	r24, r20
    634e:	95 0b       	sbc	r25, r21
    6350:	e8 17       	cp	r30, r24
    6352:	f9 07       	cpc	r31, r25
    6354:	b0 f4       	brcc	.+44     	; 0x6382 <realloc+0x17a>
    6356:	f0 93 09 06 	sts	0x0609, r31	; 0x800609 <__brkval+0x1>
    635a:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <__brkval>
    635e:	f9 01       	movw	r30, r18
    6360:	71 83       	std	Z+1, r23	; 0x01
    6362:	60 83       	st	Z, r22
    6364:	0c c0       	rjmp	.+24     	; 0x637e <realloc+0x176>
    6366:	cb 01       	movw	r24, r22
    6368:	22 de       	rcall	.-956    	; 0x5fae <malloc>
    636a:	7c 01       	movw	r14, r24
    636c:	00 97       	sbiw	r24, 0x00	; 0
    636e:	49 f0       	breq	.+18     	; 0x6382 <realloc+0x17a>
    6370:	a8 01       	movw	r20, r16
    6372:	be 01       	movw	r22, r28
    6374:	89 d1       	rcall	.+786    	; 0x6688 <memcpy>
    6376:	ce 01       	movw	r24, r28
    6378:	af de       	rcall	.-674    	; 0x60d8 <free>
    637a:	c7 01       	movw	r24, r14
    637c:	04 c0       	rjmp	.+8      	; 0x6386 <realloc+0x17e>
    637e:	ce 01       	movw	r24, r28
    6380:	02 c0       	rjmp	.+4      	; 0x6386 <realloc+0x17e>
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	cd b7       	in	r28, 0x3d	; 61
    6388:	de b7       	in	r29, 0x3e	; 62
    638a:	ee e0       	ldi	r30, 0x0E	; 14
    638c:	cb cd       	rjmp	.-1130   	; 0x5f24 <__epilogue_restores__+0x8>

0000638e <strtod>:
    638e:	a0 e0       	ldi	r26, 0x00	; 0
    6390:	b0 e0       	ldi	r27, 0x00	; 0
    6392:	ec ec       	ldi	r30, 0xCC	; 204
    6394:	f1 e3       	ldi	r31, 0x31	; 49
    6396:	aa cd       	rjmp	.-1196   	; 0x5eec <__prologue_saves__+0x8>
    6398:	ec 01       	movw	r28, r24
    639a:	7b 01       	movw	r14, r22
    639c:	61 15       	cp	r22, r1
    639e:	71 05       	cpc	r23, r1
    63a0:	19 f0       	breq	.+6      	; 0x63a8 <strtod+0x1a>
    63a2:	db 01       	movw	r26, r22
    63a4:	8d 93       	st	X+, r24
    63a6:	9c 93       	st	X, r25
    63a8:	8e 01       	movw	r16, r28
    63aa:	0f 5f       	subi	r16, 0xFF	; 255
    63ac:	1f 4f       	sbci	r17, 0xFF	; 255
    63ae:	78 80       	ld	r7, Y
    63b0:	87 2d       	mov	r24, r7
    63b2:	90 e0       	ldi	r25, 0x00	; 0
    63b4:	49 d1       	rcall	.+658    	; 0x6648 <isspace>
    63b6:	89 2b       	or	r24, r25
    63b8:	11 f0       	breq	.+4      	; 0x63be <strtod+0x30>
    63ba:	e8 01       	movw	r28, r16
    63bc:	f5 cf       	rjmp	.-22     	; 0x63a8 <strtod+0x1a>
    63be:	bd e2       	ldi	r27, 0x2D	; 45
    63c0:	7b 12       	cpse	r7, r27
    63c2:	05 c0       	rjmp	.+10     	; 0x63ce <strtod+0x40>
    63c4:	0f 5f       	subi	r16, 0xFF	; 255
    63c6:	1f 4f       	sbci	r17, 0xFF	; 255
    63c8:	79 80       	ldd	r7, Y+1	; 0x01
    63ca:	c1 e0       	ldi	r28, 0x01	; 1
    63cc:	08 c0       	rjmp	.+16     	; 0x63de <strtod+0x50>
    63ce:	eb e2       	ldi	r30, 0x2B	; 43
    63d0:	7e 12       	cpse	r7, r30
    63d2:	04 c0       	rjmp	.+8      	; 0x63dc <strtod+0x4e>
    63d4:	8e 01       	movw	r16, r28
    63d6:	0e 5f       	subi	r16, 0xFE	; 254
    63d8:	1f 4f       	sbci	r17, 0xFF	; 255
    63da:	79 80       	ldd	r7, Y+1	; 0x01
    63dc:	c0 e0       	ldi	r28, 0x00	; 0
    63de:	68 01       	movw	r12, r16
    63e0:	f1 e0       	ldi	r31, 0x01	; 1
    63e2:	cf 1a       	sub	r12, r31
    63e4:	d1 08       	sbc	r13, r1
    63e6:	43 e0       	ldi	r20, 0x03	; 3
    63e8:	50 e0       	ldi	r21, 0x00	; 0
    63ea:	62 e6       	ldi	r22, 0x62	; 98
    63ec:	72 e0       	ldi	r23, 0x02	; 2
    63ee:	c6 01       	movw	r24, r12
    63f0:	33 d1       	rcall	.+614    	; 0x6658 <strncasecmp_P>
    63f2:	89 2b       	or	r24, r25
    63f4:	e9 f4       	brne	.+58     	; 0x6430 <strtod+0xa2>
    63f6:	68 01       	movw	r12, r16
    63f8:	22 e0       	ldi	r18, 0x02	; 2
    63fa:	c2 0e       	add	r12, r18
    63fc:	d1 1c       	adc	r13, r1
    63fe:	45 e0       	ldi	r20, 0x05	; 5
    6400:	50 e0       	ldi	r21, 0x00	; 0
    6402:	6d e5       	ldi	r22, 0x5D	; 93
    6404:	72 e0       	ldi	r23, 0x02	; 2
    6406:	c6 01       	movw	r24, r12
    6408:	27 d1       	rcall	.+590    	; 0x6658 <strncasecmp_P>
    640a:	89 2b       	or	r24, r25
    640c:	21 f4       	brne	.+8      	; 0x6416 <strtod+0x88>
    640e:	68 01       	movw	r12, r16
    6410:	87 e0       	ldi	r24, 0x07	; 7
    6412:	c8 0e       	add	r12, r24
    6414:	d1 1c       	adc	r13, r1
    6416:	e1 14       	cp	r14, r1
    6418:	f1 04       	cpc	r15, r1
    641a:	19 f0       	breq	.+6      	; 0x6422 <strtod+0x94>
    641c:	d7 01       	movw	r26, r14
    641e:	cd 92       	st	X+, r12
    6420:	dc 92       	st	X, r13
    6422:	c1 11       	cpse	r28, r1
    6424:	fd c0       	rjmp	.+506    	; 0x6620 <strtod+0x292>
    6426:	60 e0       	ldi	r22, 0x00	; 0
    6428:	70 e0       	ldi	r23, 0x00	; 0
    642a:	80 e8       	ldi	r24, 0x80	; 128
    642c:	9f e7       	ldi	r25, 0x7F	; 127
    642e:	01 c1       	rjmp	.+514    	; 0x6632 <strtod+0x2a4>
    6430:	43 e0       	ldi	r20, 0x03	; 3
    6432:	50 e0       	ldi	r21, 0x00	; 0
    6434:	6a e5       	ldi	r22, 0x5A	; 90
    6436:	72 e0       	ldi	r23, 0x02	; 2
    6438:	c6 01       	movw	r24, r12
    643a:	0e d1       	rcall	.+540    	; 0x6658 <strncasecmp_P>
    643c:	89 2b       	or	r24, r25
    643e:	51 f4       	brne	.+20     	; 0x6454 <strtod+0xc6>
    6440:	e1 14       	cp	r14, r1
    6442:	f1 04       	cpc	r15, r1
    6444:	09 f4       	brne	.+2      	; 0x6448 <strtod+0xba>
    6446:	f1 c0       	rjmp	.+482    	; 0x662a <strtod+0x29c>
    6448:	0e 5f       	subi	r16, 0xFE	; 254
    644a:	1f 4f       	sbci	r17, 0xFF	; 255
    644c:	f7 01       	movw	r30, r14
    644e:	11 83       	std	Z+1, r17	; 0x01
    6450:	00 83       	st	Z, r16
    6452:	eb c0       	rjmp	.+470    	; 0x662a <strtod+0x29c>
    6454:	68 01       	movw	r12, r16
    6456:	60 e0       	ldi	r22, 0x00	; 0
    6458:	70 e0       	ldi	r23, 0x00	; 0
    645a:	cb 01       	movw	r24, r22
    645c:	00 e0       	ldi	r16, 0x00	; 0
    645e:	10 e0       	ldi	r17, 0x00	; 0
    6460:	f6 01       	movw	r30, r12
    6462:	d0 ed       	ldi	r29, 0xD0	; 208
    6464:	d7 0d       	add	r29, r7
    6466:	da 30       	cpi	r29, 0x0A	; 10
    6468:	50 f5       	brcc	.+84     	; 0x64be <strtod+0x130>
    646a:	2c 2f       	mov	r18, r28
    646c:	22 60       	ori	r18, 0x02	; 2
    646e:	62 2e       	mov	r6, r18
    6470:	2c 2f       	mov	r18, r28
    6472:	28 70       	andi	r18, 0x08	; 8
    6474:	c2 ff       	sbrs	r28, 2
    6476:	05 c0       	rjmp	.+10     	; 0x6482 <strtod+0xf4>
    6478:	21 11       	cpse	r18, r1
    647a:	27 c0       	rjmp	.+78     	; 0x64ca <strtod+0x13c>
    647c:	0f 5f       	subi	r16, 0xFF	; 255
    647e:	1f 4f       	sbci	r17, 0xFF	; 255
    6480:	24 c0       	rjmp	.+72     	; 0x64ca <strtod+0x13c>
    6482:	22 23       	and	r18, r18
    6484:	11 f0       	breq	.+4      	; 0x648a <strtod+0xfc>
    6486:	01 50       	subi	r16, 0x01	; 1
    6488:	11 09       	sbc	r17, r1
    648a:	a5 e0       	ldi	r26, 0x05	; 5
    648c:	b0 e0       	ldi	r27, 0x00	; 0
    648e:	9b 01       	movw	r18, r22
    6490:	ac 01       	movw	r20, r24
    6492:	1e dd       	rcall	.-1476   	; 0x5ed0 <__muluhisi3>
    6494:	4b 01       	movw	r8, r22
    6496:	5c 01       	movw	r10, r24
    6498:	88 0c       	add	r8, r8
    649a:	99 1c       	adc	r9, r9
    649c:	aa 1c       	adc	r10, r10
    649e:	bb 1c       	adc	r11, r11
    64a0:	c5 01       	movw	r24, r10
    64a2:	b4 01       	movw	r22, r8
    64a4:	6d 0f       	add	r22, r29
    64a6:	71 1d       	adc	r23, r1
    64a8:	81 1d       	adc	r24, r1
    64aa:	91 1d       	adc	r25, r1
    64ac:	68 39       	cpi	r22, 0x98	; 152
    64ae:	a9 e9       	ldi	r26, 0x99	; 153
    64b0:	7a 07       	cpc	r23, r26
    64b2:	8a 07       	cpc	r24, r26
    64b4:	a9 e1       	ldi	r26, 0x19	; 25
    64b6:	9a 07       	cpc	r25, r26
    64b8:	40 f0       	brcs	.+16     	; 0x64ca <strtod+0x13c>
    64ba:	c6 60       	ori	r28, 0x06	; 6
    64bc:	05 c0       	rjmp	.+10     	; 0x64c8 <strtod+0x13a>
    64be:	de 3f       	cpi	r29, 0xFE	; 254
    64c0:	51 f4       	brne	.+20     	; 0x64d6 <strtod+0x148>
    64c2:	c3 fd       	sbrc	r28, 3
    64c4:	44 c0       	rjmp	.+136    	; 0x654e <strtod+0x1c0>
    64c6:	c8 60       	ori	r28, 0x08	; 8
    64c8:	6c 2e       	mov	r6, r28
    64ca:	bf ef       	ldi	r27, 0xFF	; 255
    64cc:	cb 1a       	sub	r12, r27
    64ce:	db 0a       	sbc	r13, r27
    64d0:	70 80       	ld	r7, Z
    64d2:	c6 2d       	mov	r28, r6
    64d4:	c5 cf       	rjmp	.-118    	; 0x6460 <strtod+0xd2>
    64d6:	2d 2f       	mov	r18, r29
    64d8:	2f 7d       	andi	r18, 0xDF	; 223
    64da:	25 31       	cpi	r18, 0x15	; 21
    64dc:	c1 f5       	brne	.+112    	; 0x654e <strtod+0x1c0>
    64de:	40 81       	ld	r20, Z
    64e0:	4d 32       	cpi	r20, 0x2D	; 45
    64e2:	11 f4       	brne	.+4      	; 0x64e8 <strtod+0x15a>
    64e4:	c0 61       	ori	r28, 0x10	; 16
    64e6:	06 c0       	rjmp	.+12     	; 0x64f4 <strtod+0x166>
    64e8:	4b 32       	cpi	r20, 0x2B	; 43
    64ea:	21 f0       	breq	.+8      	; 0x64f4 <strtod+0x166>
    64ec:	31 96       	adiw	r30, 0x01	; 1
    64ee:	21 e0       	ldi	r18, 0x01	; 1
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	06 c0       	rjmp	.+12     	; 0x6500 <strtod+0x172>
    64f4:	32 96       	adiw	r30, 0x02	; 2
    64f6:	d6 01       	movw	r26, r12
    64f8:	11 96       	adiw	r26, 0x01	; 1
    64fa:	4c 91       	ld	r20, X
    64fc:	22 e0       	ldi	r18, 0x02	; 2
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	a0 ed       	ldi	r26, 0xD0	; 208
    6502:	a4 0f       	add	r26, r20
    6504:	aa 30       	cpi	r26, 0x0A	; 10
    6506:	18 f0       	brcs	.+6      	; 0x650e <strtod+0x180>
    6508:	e2 1b       	sub	r30, r18
    650a:	f3 0b       	sbc	r31, r19
    650c:	20 c0       	rjmp	.+64     	; 0x654e <strtod+0x1c0>
    650e:	40 e0       	ldi	r20, 0x00	; 0
    6510:	50 e0       	ldi	r21, 0x00	; 0
    6512:	40 38       	cpi	r20, 0x80	; 128
    6514:	bc e0       	ldi	r27, 0x0C	; 12
    6516:	5b 07       	cpc	r21, r27
    6518:	5c f4       	brge	.+22     	; 0x6530 <strtod+0x1a2>
    651a:	9a 01       	movw	r18, r20
    651c:	22 0f       	add	r18, r18
    651e:	33 1f       	adc	r19, r19
    6520:	22 0f       	add	r18, r18
    6522:	33 1f       	adc	r19, r19
    6524:	42 0f       	add	r20, r18
    6526:	53 1f       	adc	r21, r19
    6528:	44 0f       	add	r20, r20
    652a:	55 1f       	adc	r21, r21
    652c:	4a 0f       	add	r20, r26
    652e:	51 1d       	adc	r21, r1
    6530:	31 96       	adiw	r30, 0x01	; 1
    6532:	df 01       	movw	r26, r30
    6534:	11 97       	sbiw	r26, 0x01	; 1
    6536:	2c 91       	ld	r18, X
    6538:	a0 ed       	ldi	r26, 0xD0	; 208
    653a:	a2 0f       	add	r26, r18
    653c:	aa 30       	cpi	r26, 0x0A	; 10
    653e:	48 f3       	brcs	.-46     	; 0x6512 <strtod+0x184>
    6540:	c4 ff       	sbrs	r28, 4
    6542:	03 c0       	rjmp	.+6      	; 0x654a <strtod+0x1bc>
    6544:	51 95       	neg	r21
    6546:	41 95       	neg	r20
    6548:	51 09       	sbc	r21, r1
    654a:	04 0f       	add	r16, r20
    654c:	15 1f       	adc	r17, r21
    654e:	c1 ff       	sbrs	r28, 1
    6550:	07 c0       	rjmp	.+14     	; 0x6560 <strtod+0x1d2>
    6552:	e1 14       	cp	r14, r1
    6554:	f1 04       	cpc	r15, r1
    6556:	21 f0       	breq	.+8      	; 0x6560 <strtod+0x1d2>
    6558:	31 97       	sbiw	r30, 0x01	; 1
    655a:	d7 01       	movw	r26, r14
    655c:	ed 93       	st	X+, r30
    655e:	fc 93       	st	X, r31
    6560:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatunsisf>
    6564:	c3 70       	andi	r28, 0x03	; 3
    6566:	c3 30       	cpi	r28, 0x03	; 3
    6568:	19 f0       	breq	.+6      	; 0x6570 <strtod+0x1e2>
    656a:	6b 01       	movw	r12, r22
    656c:	7c 01       	movw	r14, r24
    656e:	06 c0       	rjmp	.+12     	; 0x657c <strtod+0x1ee>
    6570:	6b 01       	movw	r12, r22
    6572:	7c 01       	movw	r14, r24
    6574:	f7 fa       	bst	r15, 7
    6576:	f0 94       	com	r15
    6578:	f7 f8       	bld	r15, 7
    657a:	f0 94       	com	r15
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	a9 01       	movw	r20, r18
    6582:	c7 01       	movw	r24, r14
    6584:	b6 01       	movw	r22, r12
    6586:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <__cmpsf2>
    658a:	88 23       	and	r24, r24
    658c:	09 f4       	brne	.+2      	; 0x6590 <strtod+0x202>
    658e:	45 c0       	rjmp	.+138    	; 0x661a <strtod+0x28c>
    6590:	17 ff       	sbrs	r17, 7
    6592:	06 c0       	rjmp	.+12     	; 0x65a0 <strtod+0x212>
    6594:	11 95       	neg	r17
    6596:	01 95       	neg	r16
    6598:	11 09       	sbc	r17, r1
    659a:	c9 e7       	ldi	r28, 0x79	; 121
    659c:	d2 e0       	ldi	r29, 0x02	; 2
    659e:	02 c0       	rjmp	.+4      	; 0x65a4 <strtod+0x216>
    65a0:	c1 e9       	ldi	r28, 0x91	; 145
    65a2:	d2 e0       	ldi	r29, 0x02	; 2
    65a4:	5e 01       	movw	r10, r28
    65a6:	b8 e1       	ldi	r27, 0x18	; 24
    65a8:	ab 1a       	sub	r10, r27
    65aa:	b1 08       	sbc	r11, r1
    65ac:	46 01       	movw	r8, r12
    65ae:	be 2d       	mov	r27, r14
    65b0:	af 2d       	mov	r26, r15
    65b2:	90 e2       	ldi	r25, 0x20	; 32
    65b4:	e9 2e       	mov	r14, r25
    65b6:	f1 2c       	mov	r15, r1
    65b8:	0e 15       	cp	r16, r14
    65ba:	1f 05       	cpc	r17, r15
    65bc:	84 f0       	brlt	.+32     	; 0x65de <strtod+0x250>
    65be:	fe 01       	movw	r30, r28
    65c0:	25 91       	lpm	r18, Z+
    65c2:	35 91       	lpm	r19, Z+
    65c4:	45 91       	lpm	r20, Z+
    65c6:	54 91       	lpm	r21, Z
    65c8:	b4 01       	movw	r22, r8
    65ca:	8b 2f       	mov	r24, r27
    65cc:	9a 2f       	mov	r25, r26
    65ce:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__mulsf3>
    65d2:	4b 01       	movw	r8, r22
    65d4:	b8 2f       	mov	r27, r24
    65d6:	a9 2f       	mov	r26, r25
    65d8:	0e 19       	sub	r16, r14
    65da:	1f 09       	sbc	r17, r15
    65dc:	ed cf       	rjmp	.-38     	; 0x65b8 <strtod+0x22a>
    65de:	24 97       	sbiw	r28, 0x04	; 4
    65e0:	f5 94       	asr	r15
    65e2:	e7 94       	ror	r14
    65e4:	ca 15       	cp	r28, r10
    65e6:	db 05       	cpc	r29, r11
    65e8:	39 f7       	brne	.-50     	; 0x65b8 <strtod+0x22a>
    65ea:	64 01       	movw	r12, r8
    65ec:	eb 2e       	mov	r14, r27
    65ee:	fa 2e       	mov	r15, r26
    65f0:	8e 2d       	mov	r24, r14
    65f2:	88 0f       	add	r24, r24
    65f4:	8f 2d       	mov	r24, r15
    65f6:	88 1f       	adc	r24, r24
    65f8:	8f 3f       	cpi	r24, 0xFF	; 255
    65fa:	49 f0       	breq	.+18     	; 0x660e <strtod+0x280>
    65fc:	20 e0       	ldi	r18, 0x00	; 0
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	a9 01       	movw	r20, r18
    6602:	c7 01       	movw	r24, r14
    6604:	b6 01       	movw	r22, r12
    6606:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <__cmpsf2>
    660a:	81 11       	cpse	r24, r1
    660c:	06 c0       	rjmp	.+12     	; 0x661a <strtod+0x28c>
    660e:	82 e2       	ldi	r24, 0x22	; 34
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <errno+0x1>
    6616:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <errno>
    661a:	c7 01       	movw	r24, r14
    661c:	b6 01       	movw	r22, r12
    661e:	09 c0       	rjmp	.+18     	; 0x6632 <strtod+0x2a4>
    6620:	60 e0       	ldi	r22, 0x00	; 0
    6622:	70 e0       	ldi	r23, 0x00	; 0
    6624:	80 e8       	ldi	r24, 0x80	; 128
    6626:	9f ef       	ldi	r25, 0xFF	; 255
    6628:	04 c0       	rjmp	.+8      	; 0x6632 <strtod+0x2a4>
    662a:	60 e0       	ldi	r22, 0x00	; 0
    662c:	70 e0       	ldi	r23, 0x00	; 0
    662e:	80 ec       	ldi	r24, 0xC0	; 192
    6630:	9f e7       	ldi	r25, 0x7F	; 127
    6632:	cd b7       	in	r28, 0x3d	; 61
    6634:	de b7       	in	r29, 0x3e	; 62
    6636:	ee e0       	ldi	r30, 0x0E	; 14
    6638:	75 cc       	rjmp	.-1814   	; 0x5f24 <__epilogue_restores__+0x8>

0000663a <abort>:
    663a:	81 e0       	ldi	r24, 0x01	; 1
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	f8 94       	cli
    6640:	e1 c2       	rjmp	.+1474   	; 0x6c04 <__do_global_dtors>

00006642 <atof>:
    6642:	66 27       	eor	r22, r22
    6644:	77 27       	eor	r23, r23
    6646:	a3 ce       	rjmp	.-698    	; 0x638e <strtod>

00006648 <isspace>:
    6648:	91 11       	cpse	r25, r1
    664a:	aa c2       	rjmp	.+1364   	; 0x6ba0 <__ctype_isfalse>
    664c:	80 32       	cpi	r24, 0x20	; 32
    664e:	19 f0       	breq	.+6      	; 0x6656 <isspace+0xe>
    6650:	89 50       	subi	r24, 0x09	; 9
    6652:	85 50       	subi	r24, 0x05	; 5
    6654:	d0 f7       	brcc	.-12     	; 0x664a <isspace+0x2>
    6656:	08 95       	ret

00006658 <strncasecmp_P>:
    6658:	fb 01       	movw	r30, r22
    665a:	dc 01       	movw	r26, r24
    665c:	41 50       	subi	r20, 0x01	; 1
    665e:	50 40       	sbci	r21, 0x00	; 0
    6660:	88 f0       	brcs	.+34     	; 0x6684 <strncasecmp_P+0x2c>
    6662:	8d 91       	ld	r24, X+
    6664:	81 34       	cpi	r24, 0x41	; 65
    6666:	1c f0       	brlt	.+6      	; 0x666e <strncasecmp_P+0x16>
    6668:	8b 35       	cpi	r24, 0x5B	; 91
    666a:	0c f4       	brge	.+2      	; 0x666e <strncasecmp_P+0x16>
    666c:	80 5e       	subi	r24, 0xE0	; 224
    666e:	65 91       	lpm	r22, Z+
    6670:	61 34       	cpi	r22, 0x41	; 65
    6672:	1c f0       	brlt	.+6      	; 0x667a <strncasecmp_P+0x22>
    6674:	6b 35       	cpi	r22, 0x5B	; 91
    6676:	0c f4       	brge	.+2      	; 0x667a <strncasecmp_P+0x22>
    6678:	60 5e       	subi	r22, 0xE0	; 224
    667a:	86 1b       	sub	r24, r22
    667c:	61 11       	cpse	r22, r1
    667e:	71 f3       	breq	.-36     	; 0x665c <strncasecmp_P+0x4>
    6680:	99 0b       	sbc	r25, r25
    6682:	08 95       	ret
    6684:	88 1b       	sub	r24, r24
    6686:	fc cf       	rjmp	.-8      	; 0x6680 <strncasecmp_P+0x28>

00006688 <memcpy>:
    6688:	fb 01       	movw	r30, r22
    668a:	dc 01       	movw	r26, r24
    668c:	02 c0       	rjmp	.+4      	; 0x6692 <memcpy+0xa>
    668e:	01 90       	ld	r0, Z+
    6690:	0d 92       	st	X+, r0
    6692:	41 50       	subi	r20, 0x01	; 1
    6694:	50 40       	sbci	r21, 0x00	; 0
    6696:	d8 f7       	brcc	.-10     	; 0x668e <memcpy+0x6>
    6698:	08 95       	ret

0000669a <strcmp>:
    669a:	fb 01       	movw	r30, r22
    669c:	dc 01       	movw	r26, r24
    669e:	8d 91       	ld	r24, X+
    66a0:	01 90       	ld	r0, Z+
    66a2:	80 19       	sub	r24, r0
    66a4:	01 10       	cpse	r0, r1
    66a6:	d9 f3       	breq	.-10     	; 0x669e <strcmp+0x4>
    66a8:	99 0b       	sbc	r25, r25
    66aa:	08 95       	ret

000066ac <strcpy>:
    66ac:	fb 01       	movw	r30, r22
    66ae:	dc 01       	movw	r26, r24
    66b0:	01 90       	ld	r0, Z+
    66b2:	0d 92       	st	X+, r0
    66b4:	00 20       	and	r0, r0
    66b6:	e1 f7       	brne	.-8      	; 0x66b0 <strcpy+0x4>
    66b8:	08 95       	ret

000066ba <strncmp>:
    66ba:	fb 01       	movw	r30, r22
    66bc:	dc 01       	movw	r26, r24
    66be:	41 50       	subi	r20, 0x01	; 1
    66c0:	50 40       	sbci	r21, 0x00	; 0
    66c2:	30 f0       	brcs	.+12     	; 0x66d0 <strncmp+0x16>
    66c4:	8d 91       	ld	r24, X+
    66c6:	01 90       	ld	r0, Z+
    66c8:	80 19       	sub	r24, r0
    66ca:	19 f4       	brne	.+6      	; 0x66d2 <strncmp+0x18>
    66cc:	00 20       	and	r0, r0
    66ce:	b9 f7       	brne	.-18     	; 0x66be <strncmp+0x4>
    66d0:	88 1b       	sub	r24, r24
    66d2:	99 0b       	sbc	r25, r25
    66d4:	08 95       	ret

000066d6 <dtoa_prf>:
    66d6:	4f 92       	push	r4
    66d8:	5f 92       	push	r5
    66da:	6f 92       	push	r6
    66dc:	7f 92       	push	r7
    66de:	9f 92       	push	r9
    66e0:	af 92       	push	r10
    66e2:	bf 92       	push	r11
    66e4:	cf 92       	push	r12
    66e6:	df 92       	push	r13
    66e8:	ef 92       	push	r14
    66ea:	ff 92       	push	r15
    66ec:	0f 93       	push	r16
    66ee:	1f 93       	push	r17
    66f0:	cf 93       	push	r28
    66f2:	df 93       	push	r29
    66f4:	cd b7       	in	r28, 0x3d	; 61
    66f6:	de b7       	in	r29, 0x3e	; 62
    66f8:	29 97       	sbiw	r28, 0x09	; 9
    66fa:	0f b6       	in	r0, 0x3f	; 63
    66fc:	f8 94       	cli
    66fe:	de bf       	out	0x3e, r29	; 62
    6700:	0f be       	out	0x3f, r0	; 63
    6702:	cd bf       	out	0x3d, r28	; 61
    6704:	6a 01       	movw	r12, r20
    6706:	12 2f       	mov	r17, r18
    6708:	b0 2e       	mov	r11, r16
    670a:	2b e3       	ldi	r18, 0x3B	; 59
    670c:	20 17       	cp	r18, r16
    670e:	20 f0       	brcs	.+8      	; 0x6718 <dtoa_prf+0x42>
    6710:	ff 24       	eor	r15, r15
    6712:	f3 94       	inc	r15
    6714:	f0 0e       	add	r15, r16
    6716:	02 c0       	rjmp	.+4      	; 0x671c <dtoa_prf+0x46>
    6718:	bc e3       	ldi	r27, 0x3C	; 60
    671a:	fb 2e       	mov	r15, r27
    671c:	0f 2d       	mov	r16, r15
    671e:	27 e0       	ldi	r18, 0x07	; 7
    6720:	ae 01       	movw	r20, r28
    6722:	4f 5f       	subi	r20, 0xFF	; 255
    6724:	5f 4f       	sbci	r21, 0xFF	; 255
    6726:	64 d1       	rcall	.+712    	; 0x69f0 <__ftoa_engine>
    6728:	ac 01       	movw	r20, r24
    672a:	89 81       	ldd	r24, Y+1	; 0x01
    672c:	98 2f       	mov	r25, r24
    672e:	99 70       	andi	r25, 0x09	; 9
    6730:	91 30       	cpi	r25, 0x01	; 1
    6732:	31 f0       	breq	.+12     	; 0x6740 <dtoa_prf+0x6a>
    6734:	e1 fc       	sbrc	r14, 1
    6736:	06 c0       	rjmp	.+12     	; 0x6744 <dtoa_prf+0x6e>
    6738:	e0 fe       	sbrs	r14, 0
    673a:	06 c0       	rjmp	.+12     	; 0x6748 <dtoa_prf+0x72>
    673c:	90 e2       	ldi	r25, 0x20	; 32
    673e:	05 c0       	rjmp	.+10     	; 0x674a <dtoa_prf+0x74>
    6740:	9d e2       	ldi	r25, 0x2D	; 45
    6742:	03 c0       	rjmp	.+6      	; 0x674a <dtoa_prf+0x74>
    6744:	9b e2       	ldi	r25, 0x2B	; 43
    6746:	01 c0       	rjmp	.+2      	; 0x674a <dtoa_prf+0x74>
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	ee 2d       	mov	r30, r14
    674c:	e0 71       	andi	r30, 0x10	; 16
    674e:	83 ff       	sbrs	r24, 3
    6750:	3c c0       	rjmp	.+120    	; 0x67ca <dtoa_prf+0xf4>
    6752:	91 11       	cpse	r25, r1
    6754:	02 c0       	rjmp	.+4      	; 0x675a <dtoa_prf+0x84>
    6756:	83 e0       	ldi	r24, 0x03	; 3
    6758:	01 c0       	rjmp	.+2      	; 0x675c <dtoa_prf+0x86>
    675a:	84 e0       	ldi	r24, 0x04	; 4
    675c:	81 17       	cp	r24, r17
    675e:	18 f4       	brcc	.+6      	; 0x6766 <dtoa_prf+0x90>
    6760:	21 2f       	mov	r18, r17
    6762:	28 1b       	sub	r18, r24
    6764:	01 c0       	rjmp	.+2      	; 0x6768 <dtoa_prf+0x92>
    6766:	20 e0       	ldi	r18, 0x00	; 0
    6768:	e1 11       	cpse	r30, r1
    676a:	0b c0       	rjmp	.+22     	; 0x6782 <dtoa_prf+0xac>
    676c:	f6 01       	movw	r30, r12
    676e:	82 2f       	mov	r24, r18
    6770:	30 e2       	ldi	r19, 0x20	; 32
    6772:	88 23       	and	r24, r24
    6774:	19 f0       	breq	.+6      	; 0x677c <dtoa_prf+0xa6>
    6776:	31 93       	st	Z+, r19
    6778:	81 50       	subi	r24, 0x01	; 1
    677a:	fb cf       	rjmp	.-10     	; 0x6772 <dtoa_prf+0x9c>
    677c:	c2 0e       	add	r12, r18
    677e:	d1 1c       	adc	r13, r1
    6780:	20 e0       	ldi	r18, 0x00	; 0
    6782:	99 23       	and	r25, r25
    6784:	29 f0       	breq	.+10     	; 0x6790 <dtoa_prf+0xba>
    6786:	d6 01       	movw	r26, r12
    6788:	9c 93       	st	X, r25
    678a:	f6 01       	movw	r30, r12
    678c:	31 96       	adiw	r30, 0x01	; 1
    678e:	6f 01       	movw	r12, r30
    6790:	c6 01       	movw	r24, r12
    6792:	03 96       	adiw	r24, 0x03	; 3
    6794:	e2 fe       	sbrs	r14, 2
    6796:	0a c0       	rjmp	.+20     	; 0x67ac <dtoa_prf+0xd6>
    6798:	3e e4       	ldi	r19, 0x4E	; 78
    679a:	d6 01       	movw	r26, r12
    679c:	3c 93       	st	X, r19
    679e:	41 e4       	ldi	r20, 0x41	; 65
    67a0:	11 96       	adiw	r26, 0x01	; 1
    67a2:	4c 93       	st	X, r20
    67a4:	11 97       	sbiw	r26, 0x01	; 1
    67a6:	12 96       	adiw	r26, 0x02	; 2
    67a8:	3c 93       	st	X, r19
    67aa:	06 c0       	rjmp	.+12     	; 0x67b8 <dtoa_prf+0xe2>
    67ac:	3e e6       	ldi	r19, 0x6E	; 110
    67ae:	f6 01       	movw	r30, r12
    67b0:	30 83       	st	Z, r19
    67b2:	41 e6       	ldi	r20, 0x61	; 97
    67b4:	41 83       	std	Z+1, r20	; 0x01
    67b6:	32 83       	std	Z+2, r19	; 0x02
    67b8:	fc 01       	movw	r30, r24
    67ba:	32 2f       	mov	r19, r18
    67bc:	40 e2       	ldi	r20, 0x20	; 32
    67be:	33 23       	and	r19, r19
    67c0:	09 f4       	brne	.+2      	; 0x67c4 <dtoa_prf+0xee>
    67c2:	42 c0       	rjmp	.+132    	; 0x6848 <dtoa_prf+0x172>
    67c4:	41 93       	st	Z+, r20
    67c6:	31 50       	subi	r19, 0x01	; 1
    67c8:	fa cf       	rjmp	.-12     	; 0x67be <dtoa_prf+0xe8>
    67ca:	82 ff       	sbrs	r24, 2
    67cc:	44 c0       	rjmp	.+136    	; 0x6856 <dtoa_prf+0x180>
    67ce:	91 11       	cpse	r25, r1
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <dtoa_prf+0x100>
    67d2:	83 e0       	ldi	r24, 0x03	; 3
    67d4:	01 c0       	rjmp	.+2      	; 0x67d8 <dtoa_prf+0x102>
    67d6:	84 e0       	ldi	r24, 0x04	; 4
    67d8:	81 17       	cp	r24, r17
    67da:	18 f4       	brcc	.+6      	; 0x67e2 <dtoa_prf+0x10c>
    67dc:	21 2f       	mov	r18, r17
    67de:	28 1b       	sub	r18, r24
    67e0:	01 c0       	rjmp	.+2      	; 0x67e4 <dtoa_prf+0x10e>
    67e2:	20 e0       	ldi	r18, 0x00	; 0
    67e4:	e1 11       	cpse	r30, r1
    67e6:	0b c0       	rjmp	.+22     	; 0x67fe <dtoa_prf+0x128>
    67e8:	f6 01       	movw	r30, r12
    67ea:	82 2f       	mov	r24, r18
    67ec:	30 e2       	ldi	r19, 0x20	; 32
    67ee:	88 23       	and	r24, r24
    67f0:	19 f0       	breq	.+6      	; 0x67f8 <dtoa_prf+0x122>
    67f2:	31 93       	st	Z+, r19
    67f4:	81 50       	subi	r24, 0x01	; 1
    67f6:	fb cf       	rjmp	.-10     	; 0x67ee <dtoa_prf+0x118>
    67f8:	c2 0e       	add	r12, r18
    67fa:	d1 1c       	adc	r13, r1
    67fc:	20 e0       	ldi	r18, 0x00	; 0
    67fe:	99 23       	and	r25, r25
    6800:	29 f0       	breq	.+10     	; 0x680c <dtoa_prf+0x136>
    6802:	d6 01       	movw	r26, r12
    6804:	9c 93       	st	X, r25
    6806:	f6 01       	movw	r30, r12
    6808:	31 96       	adiw	r30, 0x01	; 1
    680a:	6f 01       	movw	r12, r30
    680c:	c6 01       	movw	r24, r12
    680e:	03 96       	adiw	r24, 0x03	; 3
    6810:	e2 fe       	sbrs	r14, 2
    6812:	0b c0       	rjmp	.+22     	; 0x682a <dtoa_prf+0x154>
    6814:	39 e4       	ldi	r19, 0x49	; 73
    6816:	d6 01       	movw	r26, r12
    6818:	3c 93       	st	X, r19
    681a:	3e e4       	ldi	r19, 0x4E	; 78
    681c:	11 96       	adiw	r26, 0x01	; 1
    681e:	3c 93       	st	X, r19
    6820:	11 97       	sbiw	r26, 0x01	; 1
    6822:	36 e4       	ldi	r19, 0x46	; 70
    6824:	12 96       	adiw	r26, 0x02	; 2
    6826:	3c 93       	st	X, r19
    6828:	07 c0       	rjmp	.+14     	; 0x6838 <dtoa_prf+0x162>
    682a:	39 e6       	ldi	r19, 0x69	; 105
    682c:	f6 01       	movw	r30, r12
    682e:	30 83       	st	Z, r19
    6830:	3e e6       	ldi	r19, 0x6E	; 110
    6832:	31 83       	std	Z+1, r19	; 0x01
    6834:	36 e6       	ldi	r19, 0x66	; 102
    6836:	32 83       	std	Z+2, r19	; 0x02
    6838:	fc 01       	movw	r30, r24
    683a:	32 2f       	mov	r19, r18
    683c:	40 e2       	ldi	r20, 0x20	; 32
    683e:	33 23       	and	r19, r19
    6840:	19 f0       	breq	.+6      	; 0x6848 <dtoa_prf+0x172>
    6842:	41 93       	st	Z+, r20
    6844:	31 50       	subi	r19, 0x01	; 1
    6846:	fb cf       	rjmp	.-10     	; 0x683e <dtoa_prf+0x168>
    6848:	fc 01       	movw	r30, r24
    684a:	e2 0f       	add	r30, r18
    684c:	f1 1d       	adc	r31, r1
    684e:	10 82       	st	Z, r1
    6850:	8e ef       	ldi	r24, 0xFE	; 254
    6852:	9f ef       	ldi	r25, 0xFF	; 255
    6854:	b7 c0       	rjmp	.+366    	; 0x69c4 <dtoa_prf+0x2ee>
    6856:	f1 e0       	ldi	r31, 0x01	; 1
    6858:	91 11       	cpse	r25, r1
    685a:	01 c0       	rjmp	.+2      	; 0x685e <dtoa_prf+0x188>
    685c:	f0 e0       	ldi	r31, 0x00	; 0
    685e:	6f 2f       	mov	r22, r31
    6860:	70 e0       	ldi	r23, 0x00	; 0
    6862:	14 16       	cp	r1, r20
    6864:	15 06       	cpc	r1, r21
    6866:	24 f4       	brge	.+8      	; 0x6870 <dtoa_prf+0x19a>
    6868:	9a 01       	movw	r18, r20
    686a:	2f 5f       	subi	r18, 0xFF	; 255
    686c:	3f 4f       	sbci	r19, 0xFF	; 255
    686e:	02 c0       	rjmp	.+4      	; 0x6874 <dtoa_prf+0x19e>
    6870:	21 e0       	ldi	r18, 0x01	; 1
    6872:	30 e0       	ldi	r19, 0x00	; 0
    6874:	26 0f       	add	r18, r22
    6876:	37 1f       	adc	r19, r23
    6878:	bb 20       	and	r11, r11
    687a:	29 f0       	breq	.+10     	; 0x6886 <dtoa_prf+0x1b0>
    687c:	6b 2d       	mov	r22, r11
    687e:	70 e0       	ldi	r23, 0x00	; 0
    6880:	6f 5f       	subi	r22, 0xFF	; 255
    6882:	7f 4f       	sbci	r23, 0xFF	; 255
    6884:	02 c0       	rjmp	.+4      	; 0x688a <dtoa_prf+0x1b4>
    6886:	60 e0       	ldi	r22, 0x00	; 0
    6888:	70 e0       	ldi	r23, 0x00	; 0
    688a:	26 0f       	add	r18, r22
    688c:	37 1f       	adc	r19, r23
    688e:	61 2f       	mov	r22, r17
    6890:	70 e0       	ldi	r23, 0x00	; 0
    6892:	26 17       	cp	r18, r22
    6894:	37 07       	cpc	r19, r23
    6896:	1c f4       	brge	.+6      	; 0x689e <dtoa_prf+0x1c8>
    6898:	12 1b       	sub	r17, r18
    689a:	21 2f       	mov	r18, r17
    689c:	01 c0       	rjmp	.+2      	; 0x68a0 <dtoa_prf+0x1ca>
    689e:	20 e0       	ldi	r18, 0x00	; 0
    68a0:	3e 2d       	mov	r19, r14
    68a2:	38 71       	andi	r19, 0x18	; 24
    68a4:	59 f4       	brne	.+22     	; 0x68bc <dtoa_prf+0x1e6>
    68a6:	d6 01       	movw	r26, r12
    68a8:	32 2f       	mov	r19, r18
    68aa:	60 e2       	ldi	r22, 0x20	; 32
    68ac:	33 23       	and	r19, r19
    68ae:	19 f0       	breq	.+6      	; 0x68b6 <dtoa_prf+0x1e0>
    68b0:	6d 93       	st	X+, r22
    68b2:	31 50       	subi	r19, 0x01	; 1
    68b4:	fb cf       	rjmp	.-10     	; 0x68ac <dtoa_prf+0x1d6>
    68b6:	c2 0e       	add	r12, r18
    68b8:	d1 1c       	adc	r13, r1
    68ba:	20 e0       	ldi	r18, 0x00	; 0
    68bc:	ff 23       	and	r31, r31
    68be:	31 f0       	breq	.+12     	; 0x68cc <dtoa_prf+0x1f6>
    68c0:	d6 01       	movw	r26, r12
    68c2:	9c 93       	st	X, r25
    68c4:	b6 01       	movw	r22, r12
    68c6:	6f 5f       	subi	r22, 0xFF	; 255
    68c8:	7f 4f       	sbci	r23, 0xFF	; 255
    68ca:	6b 01       	movw	r12, r22
    68cc:	e1 11       	cpse	r30, r1
    68ce:	0b c0       	rjmp	.+22     	; 0x68e6 <dtoa_prf+0x210>
    68d0:	f6 01       	movw	r30, r12
    68d2:	92 2f       	mov	r25, r18
    68d4:	30 e3       	ldi	r19, 0x30	; 48
    68d6:	99 23       	and	r25, r25
    68d8:	19 f0       	breq	.+6      	; 0x68e0 <dtoa_prf+0x20a>
    68da:	31 93       	st	Z+, r19
    68dc:	91 50       	subi	r25, 0x01	; 1
    68de:	fb cf       	rjmp	.-10     	; 0x68d6 <dtoa_prf+0x200>
    68e0:	c2 0e       	add	r12, r18
    68e2:	d1 1c       	adc	r13, r1
    68e4:	20 e0       	ldi	r18, 0x00	; 0
    68e6:	9f 2d       	mov	r25, r15
    68e8:	94 0f       	add	r25, r20
    68ea:	3a 81       	ldd	r19, Y+2	; 0x02
    68ec:	78 2f       	mov	r23, r24
    68ee:	70 71       	andi	r23, 0x10	; 16
    68f0:	a7 2e       	mov	r10, r23
    68f2:	84 ff       	sbrs	r24, 4
    68f4:	03 c0       	rjmp	.+6      	; 0x68fc <dtoa_prf+0x226>
    68f6:	31 33       	cpi	r19, 0x31	; 49
    68f8:	09 f4       	brne	.+2      	; 0x68fc <dtoa_prf+0x226>
    68fa:	91 50       	subi	r25, 0x01	; 1
    68fc:	19 16       	cp	r1, r25
    68fe:	24 f4       	brge	.+8      	; 0x6908 <dtoa_prf+0x232>
    6900:	99 30       	cpi	r25, 0x09	; 9
    6902:	18 f0       	brcs	.+6      	; 0x690a <dtoa_prf+0x234>
    6904:	98 e0       	ldi	r25, 0x08	; 8
    6906:	01 c0       	rjmp	.+2      	; 0x690a <dtoa_prf+0x234>
    6908:	91 e0       	ldi	r25, 0x01	; 1
    690a:	e4 2f       	mov	r30, r20
    690c:	85 2f       	mov	r24, r21
    690e:	57 ff       	sbrs	r21, 7
    6910:	02 c0       	rjmp	.+4      	; 0x6916 <dtoa_prf+0x240>
    6912:	e0 e0       	ldi	r30, 0x00	; 0
    6914:	80 e0       	ldi	r24, 0x00	; 0
    6916:	6e 2f       	mov	r22, r30
    6918:	78 2f       	mov	r23, r24
    691a:	e0 e0       	ldi	r30, 0x00	; 0
    691c:	f0 e0       	ldi	r31, 0x00	; 0
    691e:	ae e2       	ldi	r26, 0x2E	; 46
    6920:	9a 2e       	mov	r9, r26
    6922:	3a 01       	movw	r6, r20
    6924:	69 1a       	sub	r6, r25
    6926:	71 08       	sbc	r7, r1
    6928:	2a 01       	movw	r4, r20
    692a:	46 1a       	sub	r4, r22
    692c:	57 0a       	sbc	r5, r23
    692e:	0b 2d       	mov	r16, r11
    6930:	10 e0       	ldi	r17, 0x00	; 0
    6932:	11 95       	neg	r17
    6934:	01 95       	neg	r16
    6936:	11 09       	sbc	r17, r1
    6938:	6f 3f       	cpi	r22, 0xFF	; 255
    693a:	8f ef       	ldi	r24, 0xFF	; 255
    693c:	78 07       	cpc	r23, r24
    693e:	29 f4       	brne	.+10     	; 0x694a <dtoa_prf+0x274>
    6940:	d6 01       	movw	r26, r12
    6942:	9c 92       	st	X, r9
    6944:	c6 01       	movw	r24, r12
    6946:	01 96       	adiw	r24, 0x01	; 1
    6948:	6c 01       	movw	r12, r24
    694a:	46 17       	cp	r20, r22
    694c:	57 07       	cpc	r21, r23
    694e:	84 f0       	brlt	.+32     	; 0x6970 <dtoa_prf+0x29a>
    6950:	66 16       	cp	r6, r22
    6952:	77 06       	cpc	r7, r23
    6954:	6c f4       	brge	.+26     	; 0x6970 <dtoa_prf+0x29a>
    6956:	7f 01       	movw	r14, r30
    6958:	e4 0c       	add	r14, r4
    695a:	f5 1c       	adc	r15, r5
    695c:	a1 e0       	ldi	r26, 0x01	; 1
    695e:	b0 e0       	ldi	r27, 0x00	; 0
    6960:	ac 0f       	add	r26, r28
    6962:	bd 1f       	adc	r27, r29
    6964:	ea 0e       	add	r14, r26
    6966:	fb 1e       	adc	r15, r27
    6968:	d7 01       	movw	r26, r14
    696a:	11 96       	adiw	r26, 0x01	; 1
    696c:	bc 90       	ld	r11, X
    696e:	02 c0       	rjmp	.+4      	; 0x6974 <dtoa_prf+0x29e>
    6970:	90 e3       	ldi	r25, 0x30	; 48
    6972:	b9 2e       	mov	r11, r25
    6974:	61 50       	subi	r22, 0x01	; 1
    6976:	71 09       	sbc	r23, r1
    6978:	31 96       	adiw	r30, 0x01	; 1
    697a:	c6 01       	movw	r24, r12
    697c:	01 96       	adiw	r24, 0x01	; 1
    697e:	7c 01       	movw	r14, r24
    6980:	60 17       	cp	r22, r16
    6982:	71 07       	cpc	r23, r17
    6984:	24 f0       	brlt	.+8      	; 0x698e <dtoa_prf+0x2b8>
    6986:	d6 01       	movw	r26, r12
    6988:	bc 92       	st	X, r11
    698a:	6c 01       	movw	r12, r24
    698c:	d5 cf       	rjmp	.-86     	; 0x6938 <dtoa_prf+0x262>
    698e:	64 17       	cp	r22, r20
    6990:	75 07       	cpc	r23, r21
    6992:	41 f4       	brne	.+16     	; 0x69a4 <dtoa_prf+0x2ce>
    6994:	36 33       	cpi	r19, 0x36	; 54
    6996:	20 f4       	brcc	.+8      	; 0x69a0 <dtoa_prf+0x2ca>
    6998:	35 33       	cpi	r19, 0x35	; 53
    699a:	21 f4       	brne	.+8      	; 0x69a4 <dtoa_prf+0x2ce>
    699c:	a1 10       	cpse	r10, r1
    699e:	02 c0       	rjmp	.+4      	; 0x69a4 <dtoa_prf+0x2ce>
    69a0:	81 e3       	ldi	r24, 0x31	; 49
    69a2:	b8 2e       	mov	r11, r24
    69a4:	f6 01       	movw	r30, r12
    69a6:	b0 82       	st	Z, r11
    69a8:	f7 01       	movw	r30, r14
    69aa:	82 2f       	mov	r24, r18
    69ac:	90 e2       	ldi	r25, 0x20	; 32
    69ae:	88 23       	and	r24, r24
    69b0:	19 f0       	breq	.+6      	; 0x69b8 <dtoa_prf+0x2e2>
    69b2:	91 93       	st	Z+, r25
    69b4:	81 50       	subi	r24, 0x01	; 1
    69b6:	fb cf       	rjmp	.-10     	; 0x69ae <dtoa_prf+0x2d8>
    69b8:	f7 01       	movw	r30, r14
    69ba:	e2 0f       	add	r30, r18
    69bc:	f1 1d       	adc	r31, r1
    69be:	10 82       	st	Z, r1
    69c0:	80 e0       	ldi	r24, 0x00	; 0
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	29 96       	adiw	r28, 0x09	; 9
    69c6:	0f b6       	in	r0, 0x3f	; 63
    69c8:	f8 94       	cli
    69ca:	de bf       	out	0x3e, r29	; 62
    69cc:	0f be       	out	0x3f, r0	; 63
    69ce:	cd bf       	out	0x3d, r28	; 61
    69d0:	df 91       	pop	r29
    69d2:	cf 91       	pop	r28
    69d4:	1f 91       	pop	r17
    69d6:	0f 91       	pop	r16
    69d8:	ff 90       	pop	r15
    69da:	ef 90       	pop	r14
    69dc:	df 90       	pop	r13
    69de:	cf 90       	pop	r12
    69e0:	bf 90       	pop	r11
    69e2:	af 90       	pop	r10
    69e4:	9f 90       	pop	r9
    69e6:	7f 90       	pop	r7
    69e8:	6f 90       	pop	r6
    69ea:	5f 90       	pop	r5
    69ec:	4f 90       	pop	r4
    69ee:	08 95       	ret

000069f0 <__ftoa_engine>:
    69f0:	28 30       	cpi	r18, 0x08	; 8
    69f2:	08 f0       	brcs	.+2      	; 0x69f6 <__ftoa_engine+0x6>
    69f4:	27 e0       	ldi	r18, 0x07	; 7
    69f6:	33 27       	eor	r19, r19
    69f8:	da 01       	movw	r26, r20
    69fa:	99 0f       	add	r25, r25
    69fc:	31 1d       	adc	r19, r1
    69fe:	87 fd       	sbrc	r24, 7
    6a00:	91 60       	ori	r25, 0x01	; 1
    6a02:	00 96       	adiw	r24, 0x00	; 0
    6a04:	61 05       	cpc	r22, r1
    6a06:	71 05       	cpc	r23, r1
    6a08:	39 f4       	brne	.+14     	; 0x6a18 <__ftoa_engine+0x28>
    6a0a:	32 60       	ori	r19, 0x02	; 2
    6a0c:	2e 5f       	subi	r18, 0xFE	; 254
    6a0e:	3d 93       	st	X+, r19
    6a10:	30 e3       	ldi	r19, 0x30	; 48
    6a12:	2a 95       	dec	r18
    6a14:	e1 f7       	brne	.-8      	; 0x6a0e <__ftoa_engine+0x1e>
    6a16:	08 95       	ret
    6a18:	9f 3f       	cpi	r25, 0xFF	; 255
    6a1a:	30 f0       	brcs	.+12     	; 0x6a28 <__ftoa_engine+0x38>
    6a1c:	80 38       	cpi	r24, 0x80	; 128
    6a1e:	71 05       	cpc	r23, r1
    6a20:	61 05       	cpc	r22, r1
    6a22:	09 f0       	breq	.+2      	; 0x6a26 <__ftoa_engine+0x36>
    6a24:	3c 5f       	subi	r19, 0xFC	; 252
    6a26:	3c 5f       	subi	r19, 0xFC	; 252
    6a28:	3d 93       	st	X+, r19
    6a2a:	91 30       	cpi	r25, 0x01	; 1
    6a2c:	08 f0       	brcs	.+2      	; 0x6a30 <__ftoa_engine+0x40>
    6a2e:	80 68       	ori	r24, 0x80	; 128
    6a30:	91 1d       	adc	r25, r1
    6a32:	df 93       	push	r29
    6a34:	cf 93       	push	r28
    6a36:	1f 93       	push	r17
    6a38:	0f 93       	push	r16
    6a3a:	ff 92       	push	r15
    6a3c:	ef 92       	push	r14
    6a3e:	19 2f       	mov	r17, r25
    6a40:	98 7f       	andi	r25, 0xF8	; 248
    6a42:	96 95       	lsr	r25
    6a44:	e9 2f       	mov	r30, r25
    6a46:	96 95       	lsr	r25
    6a48:	96 95       	lsr	r25
    6a4a:	e9 0f       	add	r30, r25
    6a4c:	ff 27       	eor	r31, r31
    6a4e:	e1 51       	subi	r30, 0x11	; 17
    6a50:	fd 4f       	sbci	r31, 0xFD	; 253
    6a52:	99 27       	eor	r25, r25
    6a54:	33 27       	eor	r19, r19
    6a56:	ee 24       	eor	r14, r14
    6a58:	ff 24       	eor	r15, r15
    6a5a:	a7 01       	movw	r20, r14
    6a5c:	e7 01       	movw	r28, r14
    6a5e:	05 90       	lpm	r0, Z+
    6a60:	08 94       	sec
    6a62:	07 94       	ror	r0
    6a64:	28 f4       	brcc	.+10     	; 0x6a70 <__ftoa_engine+0x80>
    6a66:	36 0f       	add	r19, r22
    6a68:	e7 1e       	adc	r14, r23
    6a6a:	f8 1e       	adc	r15, r24
    6a6c:	49 1f       	adc	r20, r25
    6a6e:	51 1d       	adc	r21, r1
    6a70:	66 0f       	add	r22, r22
    6a72:	77 1f       	adc	r23, r23
    6a74:	88 1f       	adc	r24, r24
    6a76:	99 1f       	adc	r25, r25
    6a78:	06 94       	lsr	r0
    6a7a:	a1 f7       	brne	.-24     	; 0x6a64 <__ftoa_engine+0x74>
    6a7c:	05 90       	lpm	r0, Z+
    6a7e:	07 94       	ror	r0
    6a80:	28 f4       	brcc	.+10     	; 0x6a8c <__ftoa_engine+0x9c>
    6a82:	e7 0e       	add	r14, r23
    6a84:	f8 1e       	adc	r15, r24
    6a86:	49 1f       	adc	r20, r25
    6a88:	56 1f       	adc	r21, r22
    6a8a:	c1 1d       	adc	r28, r1
    6a8c:	77 0f       	add	r23, r23
    6a8e:	88 1f       	adc	r24, r24
    6a90:	99 1f       	adc	r25, r25
    6a92:	66 1f       	adc	r22, r22
    6a94:	06 94       	lsr	r0
    6a96:	a1 f7       	brne	.-24     	; 0x6a80 <__ftoa_engine+0x90>
    6a98:	05 90       	lpm	r0, Z+
    6a9a:	07 94       	ror	r0
    6a9c:	28 f4       	brcc	.+10     	; 0x6aa8 <__ftoa_engine+0xb8>
    6a9e:	f8 0e       	add	r15, r24
    6aa0:	49 1f       	adc	r20, r25
    6aa2:	56 1f       	adc	r21, r22
    6aa4:	c7 1f       	adc	r28, r23
    6aa6:	d1 1d       	adc	r29, r1
    6aa8:	88 0f       	add	r24, r24
    6aaa:	99 1f       	adc	r25, r25
    6aac:	66 1f       	adc	r22, r22
    6aae:	77 1f       	adc	r23, r23
    6ab0:	06 94       	lsr	r0
    6ab2:	a1 f7       	brne	.-24     	; 0x6a9c <__ftoa_engine+0xac>
    6ab4:	05 90       	lpm	r0, Z+
    6ab6:	07 94       	ror	r0
    6ab8:	20 f4       	brcc	.+8      	; 0x6ac2 <__ftoa_engine+0xd2>
    6aba:	49 0f       	add	r20, r25
    6abc:	56 1f       	adc	r21, r22
    6abe:	c7 1f       	adc	r28, r23
    6ac0:	d8 1f       	adc	r29, r24
    6ac2:	99 0f       	add	r25, r25
    6ac4:	66 1f       	adc	r22, r22
    6ac6:	77 1f       	adc	r23, r23
    6ac8:	88 1f       	adc	r24, r24
    6aca:	06 94       	lsr	r0
    6acc:	a9 f7       	brne	.-22     	; 0x6ab8 <__ftoa_engine+0xc8>
    6ace:	84 91       	lpm	r24, Z
    6ad0:	10 95       	com	r17
    6ad2:	17 70       	andi	r17, 0x07	; 7
    6ad4:	41 f0       	breq	.+16     	; 0x6ae6 <__ftoa_engine+0xf6>
    6ad6:	d6 95       	lsr	r29
    6ad8:	c7 95       	ror	r28
    6ada:	57 95       	ror	r21
    6adc:	47 95       	ror	r20
    6ade:	f7 94       	ror	r15
    6ae0:	e7 94       	ror	r14
    6ae2:	1a 95       	dec	r17
    6ae4:	c1 f7       	brne	.-16     	; 0x6ad6 <__ftoa_engine+0xe6>
    6ae6:	e5 e9       	ldi	r30, 0x95	; 149
    6ae8:	f2 e0       	ldi	r31, 0x02	; 2
    6aea:	68 94       	set
    6aec:	15 90       	lpm	r1, Z+
    6aee:	15 91       	lpm	r17, Z+
    6af0:	35 91       	lpm	r19, Z+
    6af2:	65 91       	lpm	r22, Z+
    6af4:	95 91       	lpm	r25, Z+
    6af6:	05 90       	lpm	r0, Z+
    6af8:	7f e2       	ldi	r23, 0x2F	; 47
    6afa:	73 95       	inc	r23
    6afc:	e1 18       	sub	r14, r1
    6afe:	f1 0a       	sbc	r15, r17
    6b00:	43 0b       	sbc	r20, r19
    6b02:	56 0b       	sbc	r21, r22
    6b04:	c9 0b       	sbc	r28, r25
    6b06:	d0 09       	sbc	r29, r0
    6b08:	c0 f7       	brcc	.-16     	; 0x6afa <__ftoa_engine+0x10a>
    6b0a:	e1 0c       	add	r14, r1
    6b0c:	f1 1e       	adc	r15, r17
    6b0e:	43 1f       	adc	r20, r19
    6b10:	56 1f       	adc	r21, r22
    6b12:	c9 1f       	adc	r28, r25
    6b14:	d0 1d       	adc	r29, r0
    6b16:	7e f4       	brtc	.+30     	; 0x6b36 <__ftoa_engine+0x146>
    6b18:	70 33       	cpi	r23, 0x30	; 48
    6b1a:	11 f4       	brne	.+4      	; 0x6b20 <__ftoa_engine+0x130>
    6b1c:	8a 95       	dec	r24
    6b1e:	e6 cf       	rjmp	.-52     	; 0x6aec <__ftoa_engine+0xfc>
    6b20:	e8 94       	clt
    6b22:	01 50       	subi	r16, 0x01	; 1
    6b24:	30 f0       	brcs	.+12     	; 0x6b32 <__ftoa_engine+0x142>
    6b26:	08 0f       	add	r16, r24
    6b28:	0a f4       	brpl	.+2      	; 0x6b2c <__ftoa_engine+0x13c>
    6b2a:	00 27       	eor	r16, r16
    6b2c:	02 17       	cp	r16, r18
    6b2e:	08 f4       	brcc	.+2      	; 0x6b32 <__ftoa_engine+0x142>
    6b30:	20 2f       	mov	r18, r16
    6b32:	23 95       	inc	r18
    6b34:	02 2f       	mov	r16, r18
    6b36:	7a 33       	cpi	r23, 0x3A	; 58
    6b38:	28 f0       	brcs	.+10     	; 0x6b44 <__ftoa_engine+0x154>
    6b3a:	79 e3       	ldi	r23, 0x39	; 57
    6b3c:	7d 93       	st	X+, r23
    6b3e:	2a 95       	dec	r18
    6b40:	e9 f7       	brne	.-6      	; 0x6b3c <__ftoa_engine+0x14c>
    6b42:	10 c0       	rjmp	.+32     	; 0x6b64 <__ftoa_engine+0x174>
    6b44:	7d 93       	st	X+, r23
    6b46:	2a 95       	dec	r18
    6b48:	89 f6       	brne	.-94     	; 0x6aec <__ftoa_engine+0xfc>
    6b4a:	06 94       	lsr	r0
    6b4c:	97 95       	ror	r25
    6b4e:	67 95       	ror	r22
    6b50:	37 95       	ror	r19
    6b52:	17 95       	ror	r17
    6b54:	17 94       	ror	r1
    6b56:	e1 18       	sub	r14, r1
    6b58:	f1 0a       	sbc	r15, r17
    6b5a:	43 0b       	sbc	r20, r19
    6b5c:	56 0b       	sbc	r21, r22
    6b5e:	c9 0b       	sbc	r28, r25
    6b60:	d0 09       	sbc	r29, r0
    6b62:	98 f0       	brcs	.+38     	; 0x6b8a <__ftoa_engine+0x19a>
    6b64:	23 95       	inc	r18
    6b66:	7e 91       	ld	r23, -X
    6b68:	73 95       	inc	r23
    6b6a:	7a 33       	cpi	r23, 0x3A	; 58
    6b6c:	08 f0       	brcs	.+2      	; 0x6b70 <__ftoa_engine+0x180>
    6b6e:	70 e3       	ldi	r23, 0x30	; 48
    6b70:	7c 93       	st	X, r23
    6b72:	20 13       	cpse	r18, r16
    6b74:	b8 f7       	brcc	.-18     	; 0x6b64 <__ftoa_engine+0x174>
    6b76:	7e 91       	ld	r23, -X
    6b78:	70 61       	ori	r23, 0x10	; 16
    6b7a:	7d 93       	st	X+, r23
    6b7c:	30 f0       	brcs	.+12     	; 0x6b8a <__ftoa_engine+0x19a>
    6b7e:	83 95       	inc	r24
    6b80:	71 e3       	ldi	r23, 0x31	; 49
    6b82:	7d 93       	st	X+, r23
    6b84:	70 e3       	ldi	r23, 0x30	; 48
    6b86:	2a 95       	dec	r18
    6b88:	e1 f7       	brne	.-8      	; 0x6b82 <__ftoa_engine+0x192>
    6b8a:	11 24       	eor	r1, r1
    6b8c:	ef 90       	pop	r14
    6b8e:	ff 90       	pop	r15
    6b90:	0f 91       	pop	r16
    6b92:	1f 91       	pop	r17
    6b94:	cf 91       	pop	r28
    6b96:	df 91       	pop	r29
    6b98:	99 27       	eor	r25, r25
    6b9a:	87 fd       	sbrc	r24, 7
    6b9c:	90 95       	com	r25
    6b9e:	08 95       	ret

00006ba0 <__ctype_isfalse>:
    6ba0:	99 27       	eor	r25, r25
    6ba2:	88 27       	eor	r24, r24

00006ba4 <__ctype_istrue>:
    6ba4:	08 95       	ret

00006ba6 <eeprom_read_block>:
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22

00006baa <eeprom_read_blraw>:
    6baa:	fc 01       	movw	r30, r24
    6bac:	f9 99       	sbic	0x1f, 1	; 31
    6bae:	fe cf       	rjmp	.-4      	; 0x6bac <eeprom_read_blraw+0x2>
    6bb0:	06 c0       	rjmp	.+12     	; 0x6bbe <eeprom_read_blraw+0x14>
    6bb2:	f2 bd       	out	0x22, r31	; 34
    6bb4:	e1 bd       	out	0x21, r30	; 33
    6bb6:	f8 9a       	sbi	0x1f, 0	; 31
    6bb8:	31 96       	adiw	r30, 0x01	; 1
    6bba:	00 b4       	in	r0, 0x20	; 32
    6bbc:	0d 92       	st	X+, r0
    6bbe:	41 50       	subi	r20, 0x01	; 1
    6bc0:	50 40       	sbci	r21, 0x00	; 0
    6bc2:	b8 f7       	brcc	.-18     	; 0x6bb2 <eeprom_read_blraw+0x8>
    6bc4:	08 95       	ret

00006bc6 <eeprom_read_byte>:
    6bc6:	f9 99       	sbic	0x1f, 1	; 31
    6bc8:	fe cf       	rjmp	.-4      	; 0x6bc6 <eeprom_read_byte>
    6bca:	92 bd       	out	0x22, r25	; 34
    6bcc:	81 bd       	out	0x21, r24	; 33
    6bce:	f8 9a       	sbi	0x1f, 0	; 31
    6bd0:	99 27       	eor	r25, r25
    6bd2:	80 b5       	in	r24, 0x20	; 32
    6bd4:	08 95       	ret

00006bd6 <eeprom_write_block>:
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	cb 01       	movw	r24, r22
    6bda:	02 c0       	rjmp	.+4      	; 0x6be0 <eeprom_write_block+0xa>
    6bdc:	2d 91       	ld	r18, X+
    6bde:	05 d0       	rcall	.+10     	; 0x6bea <eeprom_write_r18>
    6be0:	41 50       	subi	r20, 0x01	; 1
    6be2:	50 40       	sbci	r21, 0x00	; 0
    6be4:	d8 f7       	brcc	.-10     	; 0x6bdc <eeprom_write_block+0x6>
    6be6:	08 95       	ret

00006be8 <eeprom_write_byte>:
    6be8:	26 2f       	mov	r18, r22

00006bea <eeprom_write_r18>:
    6bea:	f9 99       	sbic	0x1f, 1	; 31
    6bec:	fe cf       	rjmp	.-4      	; 0x6bea <eeprom_write_r18>
    6bee:	1f ba       	out	0x1f, r1	; 31
    6bf0:	92 bd       	out	0x22, r25	; 34
    6bf2:	81 bd       	out	0x21, r24	; 33
    6bf4:	20 bd       	out	0x20, r18	; 32
    6bf6:	0f b6       	in	r0, 0x3f	; 63
    6bf8:	f8 94       	cli
    6bfa:	fa 9a       	sbi	0x1f, 2	; 31
    6bfc:	f9 9a       	sbi	0x1f, 1	; 31
    6bfe:	0f be       	out	0x3f, r0	; 63
    6c00:	01 96       	adiw	r24, 0x01	; 1
    6c02:	08 95       	ret

00006c04 <__do_global_dtors>:
    6c04:	12 e0       	ldi	r17, 0x02	; 2
    6c06:	c0 e4       	ldi	r28, 0x40	; 64
    6c08:	d2 e0       	ldi	r29, 0x02	; 2
    6c0a:	03 c0       	rjmp	.+6      	; 0x6c12 <__do_global_dtors+0xe>
    6c0c:	fe 01       	movw	r30, r28
    6c0e:	5a d9       	rcall	.-3404   	; 0x5ec4 <__tablejump2__>
    6c10:	21 96       	adiw	r28, 0x01	; 1
    6c12:	c2 34       	cpi	r28, 0x42	; 66
    6c14:	d1 07       	cpc	r29, r17
    6c16:	d1 f7       	brne	.-12     	; 0x6c0c <__do_global_dtors+0x8>
    6c18:	f8 94       	cli

00006c1a <__stop_program>:
    6c1a:	ff cf       	rjmp	.-2      	; 0x6c1a <__stop_program>
