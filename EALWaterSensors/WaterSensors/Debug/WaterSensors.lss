
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  000066ea  0000679e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000401  008001d8  008001d8  00006876  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  00006876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000687c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001028  00000000  00000000  00006918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002871d  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000050e9  00000000  00000000  0003005d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000b547  00000000  00000000  00035146  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003170  00000000  00000000  00040690  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00013628  00000000  00000000  00043800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009e8a  00000000  00000000  00056e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f98  00000000  00000000  00060cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000103a9  00000000  00000000  00061c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	31 c2       	rjmp	.+1122   	; 0x464 <__dtors_end>
       2:	00 00       	nop
       4:	57 c2       	rjmp	.+1198   	; 0x4b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c2       	rjmp	.+1194   	; 0x4b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c6       	rjmp	.+3162   	; 0xc68 <__vector_3>
       e:	00 00       	nop
      10:	2b c6       	rjmp	.+3158   	; 0xc68 <__vector_3>
      12:	00 00       	nop
      14:	29 c6       	rjmp	.+3154   	; 0xc68 <__vector_3>
      16:	00 00       	nop
      18:	4d c2       	rjmp	.+1178   	; 0x4b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c2       	rjmp	.+1174   	; 0x4b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c2       	rjmp	.+1170   	; 0x4b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c2       	rjmp	.+1166   	; 0x4b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c2       	rjmp	.+1162   	; 0x4b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c2       	rjmp	.+1158   	; 0x4b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c2       	rjmp	.+1154   	; 0x4b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c2       	rjmp	.+1150   	; 0x4b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c2       	rjmp	.+1146   	; 0x4b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c2       	rjmp	.+1142   	; 0x4b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 3b 27 	jmp	0x4e76	; 0x4e76 <__vector_16>
      44:	37 c2       	rjmp	.+1134   	; 0x4b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <__vector_18>
      4c:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__vector_19>
      50:	31 c2       	rjmp	.+1122   	; 0x4b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	2f c2       	rjmp	.+1118   	; 0x4b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c2       	rjmp	.+1114   	; 0x4b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c2       	rjmp	.+1110   	; 0x4b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c2       	rjmp	.+1296   	; 0x572 <__vector_24>
      62:	00 00       	nop
      64:	27 c2       	rjmp	.+1102   	; 0x4b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf 03       	fmulsu	r19, r23
      6a:	c2 03       	fmuls	r20, r18
      6c:	c2 03       	fmuls	r20, r18
      6e:	c2 03       	fmuls	r20, r18
      70:	c2 03       	fmuls	r20, r18
      72:	c2 03       	fmuls	r20, r18
      74:	c2 03       	fmuls	r20, r18
      76:	c2 03       	fmuls	r20, r18
      78:	d9 02       	muls	r29, r25
      7a:	c2 03       	fmuls	r20, r18
      7c:	c2 03       	fmuls	r20, r18
      7e:	c2 03       	fmuls	r20, r18
      80:	c2 03       	fmuls	r20, r18
      82:	c2 03       	fmuls	r20, r18
      84:	c2 03       	fmuls	r20, r18
      86:	c2 03       	fmuls	r20, r18
      88:	d9 02       	muls	r29, r25
      8a:	c2 03       	fmuls	r20, r18
      8c:	c2 03       	fmuls	r20, r18
      8e:	c2 03       	fmuls	r20, r18
      90:	c2 03       	fmuls	r20, r18
      92:	c2 03       	fmuls	r20, r18
      94:	c2 03       	fmuls	r20, r18
      96:	c2 03       	fmuls	r20, r18
      98:	e1 02       	muls	r30, r17
      9a:	c2 03       	fmuls	r20, r18
      9c:	c2 03       	fmuls	r20, r18
      9e:	c2 03       	fmuls	r20, r18
      a0:	c2 03       	fmuls	r20, r18
      a2:	c2 03       	fmuls	r20, r18
      a4:	c2 03       	fmuls	r20, r18
      a6:	c2 03       	fmuls	r20, r18
      a8:	06 03       	mulsu	r16, r22
      aa:	c2 03       	fmuls	r20, r18
      ac:	c2 03       	fmuls	r20, r18
      ae:	c2 03       	fmuls	r20, r18
      b0:	c2 03       	fmuls	r20, r18
      b2:	c2 03       	fmuls	r20, r18
      b4:	c2 03       	fmuls	r20, r18
      b6:	c2 03       	fmuls	r20, r18
      b8:	e1 02       	muls	r30, r17
      ba:	c2 03       	fmuls	r20, r18
      bc:	c2 03       	fmuls	r20, r18
      be:	c2 03       	fmuls	r20, r18
      c0:	c2 03       	fmuls	r20, r18
      c2:	c2 03       	fmuls	r20, r18
      c4:	c2 03       	fmuls	r20, r18
      c6:	c2 03       	fmuls	r20, r18
      c8:	0b 03       	fmul	r16, r19
      ca:	c2 03       	fmuls	r20, r18
      cc:	c2 03       	fmuls	r20, r18
      ce:	c2 03       	fmuls	r20, r18
      d0:	c2 03       	fmuls	r20, r18
      d2:	c2 03       	fmuls	r20, r18
      d4:	c2 03       	fmuls	r20, r18
      d6:	c2 03       	fmuls	r20, r18
      d8:	10 03       	mulsu	r17, r16
      da:	c2 03       	fmuls	r20, r18
      dc:	c2 03       	fmuls	r20, r18
      de:	c2 03       	fmuls	r20, r18
      e0:	c2 03       	fmuls	r20, r18
      e2:	c2 03       	fmuls	r20, r18
      e4:	c2 03       	fmuls	r20, r18
      e6:	c2 03       	fmuls	r20, r18
      e8:	21 03       	mulsu	r18, r17
      ea:	c2 03       	fmuls	r20, r18
      ec:	c2 03       	fmuls	r20, r18
      ee:	c2 03       	fmuls	r20, r18
      f0:	c2 03       	fmuls	r20, r18
      f2:	c2 03       	fmuls	r20, r18
      f4:	c2 03       	fmuls	r20, r18
      f6:	c2 03       	fmuls	r20, r18
      f8:	4a 03       	fmul	r20, r18
      fa:	c2 03       	fmuls	r20, r18
      fc:	c2 03       	fmuls	r20, r18
      fe:	c2 03       	fmuls	r20, r18
     100:	c2 03       	fmuls	r20, r18
     102:	c2 03       	fmuls	r20, r18
     104:	c2 03       	fmuls	r20, r18
     106:	c2 03       	fmuls	r20, r18
     108:	15 03       	mulsu	r17, r21
     10a:	c2 03       	fmuls	r20, r18
     10c:	c2 03       	fmuls	r20, r18
     10e:	c2 03       	fmuls	r20, r18
     110:	c2 03       	fmuls	r20, r18
     112:	c2 03       	fmuls	r20, r18
     114:	c2 03       	fmuls	r20, r18
     116:	c2 03       	fmuls	r20, r18
     118:	2f 03       	fmul	r18, r23
     11a:	c2 03       	fmuls	r20, r18
     11c:	c2 03       	fmuls	r20, r18
     11e:	c2 03       	fmuls	r20, r18
     120:	c2 03       	fmuls	r20, r18
     122:	c2 03       	fmuls	r20, r18
     124:	c2 03       	fmuls	r20, r18
     126:	c2 03       	fmuls	r20, r18
     128:	4c 03       	fmul	r20, r20
     12a:	c2 03       	fmuls	r20, r18
     12c:	c2 03       	fmuls	r20, r18
     12e:	c2 03       	fmuls	r20, r18
     130:	c2 03       	fmuls	r20, r18
     132:	c2 03       	fmuls	r20, r18
     134:	c2 03       	fmuls	r20, r18
     136:	c2 03       	fmuls	r20, r18
     138:	4c 03       	fmul	r20, r20
     13a:	c2 03       	fmuls	r20, r18
     13c:	c2 03       	fmuls	r20, r18
     13e:	c2 03       	fmuls	r20, r18
     140:	c2 03       	fmuls	r20, r18
     142:	c2 03       	fmuls	r20, r18
     144:	c2 03       	fmuls	r20, r18
     146:	c2 03       	fmuls	r20, r18
     148:	4c 03       	fmul	r20, r20
     14a:	c2 03       	fmuls	r20, r18
     14c:	c2 03       	fmuls	r20, r18
     14e:	c2 03       	fmuls	r20, r18
     150:	c2 03       	fmuls	r20, r18
     152:	c2 03       	fmuls	r20, r18
     154:	c2 03       	fmuls	r20, r18
     156:	c2 03       	fmuls	r20, r18
     158:	4c 03       	fmul	r20, r20
     15a:	c2 03       	fmuls	r20, r18
     15c:	c2 03       	fmuls	r20, r18
     15e:	c2 03       	fmuls	r20, r18
     160:	c2 03       	fmuls	r20, r18
     162:	c2 03       	fmuls	r20, r18
     164:	c2 03       	fmuls	r20, r18
     166:	c2 03       	fmuls	r20, r18
     168:	55 03       	mulsu	r21, r21
     16a:	c2 03       	fmuls	r20, r18
     16c:	c2 03       	fmuls	r20, r18
     16e:	c2 03       	fmuls	r20, r18
     170:	c2 03       	fmuls	r20, r18
     172:	c2 03       	fmuls	r20, r18
     174:	c2 03       	fmuls	r20, r18
     176:	c2 03       	fmuls	r20, r18
     178:	86 03       	fmuls	r16, r22
     17a:	c2 03       	fmuls	r20, r18
     17c:	c2 03       	fmuls	r20, r18
     17e:	c2 03       	fmuls	r20, r18
     180:	c2 03       	fmuls	r20, r18
     182:	c2 03       	fmuls	r20, r18
     184:	c2 03       	fmuls	r20, r18
     186:	c2 03       	fmuls	r20, r18
     188:	55 03       	mulsu	r21, r21
     18a:	c2 03       	fmuls	r20, r18
     18c:	c2 03       	fmuls	r20, r18
     18e:	c2 03       	fmuls	r20, r18
     190:	c2 03       	fmuls	r20, r18
     192:	c2 03       	fmuls	r20, r18
     194:	c2 03       	fmuls	r20, r18
     196:	c2 03       	fmuls	r20, r18
     198:	86 03       	fmuls	r16, r22
     19a:	c2 03       	fmuls	r20, r18
     19c:	c2 03       	fmuls	r20, r18
     19e:	c2 03       	fmuls	r20, r18
     1a0:	c2 03       	fmuls	r20, r18
     1a2:	c2 03       	fmuls	r20, r18
     1a4:	c2 03       	fmuls	r20, r18
     1a6:	c2 03       	fmuls	r20, r18
     1a8:	6d 03       	fmul	r22, r21
     1aa:	c2 03       	fmuls	r20, r18
     1ac:	c2 03       	fmuls	r20, r18
     1ae:	c2 03       	fmuls	r20, r18
     1b0:	c2 03       	fmuls	r20, r18
     1b2:	c2 03       	fmuls	r20, r18
     1b4:	c2 03       	fmuls	r20, r18
     1b6:	c2 03       	fmuls	r20, r18
     1b8:	8a 03       	fmulsu	r16, r18
     1ba:	c2 03       	fmuls	r20, r18
     1bc:	c2 03       	fmuls	r20, r18
     1be:	c2 03       	fmuls	r20, r18
     1c0:	c2 03       	fmuls	r20, r18
     1c2:	c2 03       	fmuls	r20, r18
     1c4:	c2 03       	fmuls	r20, r18
     1c6:	c2 03       	fmuls	r20, r18
     1c8:	8a 03       	fmulsu	r16, r18
     1ca:	c2 03       	fmuls	r20, r18
     1cc:	c2 03       	fmuls	r20, r18
     1ce:	c2 03       	fmuls	r20, r18
     1d0:	c2 03       	fmuls	r20, r18
     1d2:	c2 03       	fmuls	r20, r18
     1d4:	c2 03       	fmuls	r20, r18
     1d6:	c2 03       	fmuls	r20, r18
     1d8:	9f 03       	fmulsu	r17, r23
     1da:	c2 03       	fmuls	r20, r18
     1dc:	c2 03       	fmuls	r20, r18
     1de:	c2 03       	fmuls	r20, r18
     1e0:	c2 03       	fmuls	r20, r18
     1e2:	c2 03       	fmuls	r20, r18
     1e4:	c2 03       	fmuls	r20, r18
     1e6:	c2 03       	fmuls	r20, r18
     1e8:	b9 03       	fmulsu	r19, r17
     1ea:	c2 03       	fmuls	r20, r18
     1ec:	c2 03       	fmuls	r20, r18
     1ee:	c2 03       	fmuls	r20, r18
     1f0:	c2 03       	fmuls	r20, r18
     1f2:	c2 03       	fmuls	r20, r18
     1f4:	c2 03       	fmuls	r20, r18
     1f6:	c2 03       	fmuls	r20, r18
     1f8:	b9 03       	fmulsu	r19, r17

000001fa <__trampolines_end>:
     1fa:	4e 41       	sbci	r20, 0x1E	; 30
     1fc:	4e 49       	Address 0x000001fc is out of bounds.
.word	0xffff	; ????

000001fd <pstr_inity>:
     1fd:	49 4e 49 54 59                                      INITY

00000202 <pstr_inf>:
     202:	49 4e 46                                            INF

00000205 <pwr_m10>:
     205:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     215:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021d <pwr_p10>:
     21d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     23d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     24d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     25d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     26d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     27d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     28d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     29d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2ad:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2bd:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2cd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2dd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2ed:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2fd:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     30d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     31d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     32d:	3d 27                                               ='

0000032f <_ZZN7LCDBase9ClearLineEsE3__c>:
     32f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000340 <_ZZN7MathExt16CalculateAverageEPiiE3__c>:
     340:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     350:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     360:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

0000036a <_ZZN8PHSensor10getPHValueEvE3__c>:
     36a:	50 48 20 52 61 77 20 52 65 61 64 69 6e 67 3a 20     PH Raw Reading: 
	...

0000037b <_ZZN9TDSSensor11getTDSValueEvE3__c>:
     37b:	54 44 53 20 52 61 77 20 52 65 61 64 69 6e 67 3a     TDS Raw Reading:
     38b:	20 00                                                .

0000038d <_ZZN15WaterSensorWire5SetupEvE3__c>:
     38d:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

00000396 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     396:	63 6d 64 3a 20 00                                   cmd: .

0000039c <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     39c:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

000003a6 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     3a6:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     3b6:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     3c6:	76 65 64 3a 20 00                                   ved: .

000003cc <_ZZN15WaterSensorWire7RequestEvE3__c>:
     3cc:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     3dc:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

000003e7 <_ZZ11AsyncDoWorkvE3__c>:
     3e7:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     3f7:	64 00                                               d.

000003f9 <digital_pin_to_timer_PGM>:
     3f9:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     409:	00 00 00 00                                         ....

0000040d <digital_pin_to_bit_mask_PGM>:
     40d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     41d:	04 08 10 20                                         ... 

00000421 <digital_pin_to_port_PGM>:
     421:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     431:	03 03 03 03                                         ....

00000435 <port_to_input_PGM>:
     435:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000043f <port_to_output_PGM>:
     43f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000449 <port_to_mode_PGM>:
     449:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000454 <__ctors_start>:
     454:	ec 05       	cpc	r30, r12
     456:	07 0b       	sbc	r16, r23
     458:	c7 1f       	adc	r28, r23
     45a:	a3 20       	and	r10, r3
     45c:	e7 21       	and	r30, r7
     45e:	98 25       	eor	r25, r8

00000460 <__ctors_end>:
     460:	d5 1f       	adc	r29, r21
     462:	b1 20       	and	r11, r1

00000464 <__dtors_end>:
     464:	11 24       	eor	r1, r1
     466:	1f be       	out	0x3f, r1	; 63
     468:	cf ef       	ldi	r28, 0xFF	; 255
     46a:	d8 e0       	ldi	r29, 0x08	; 8
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	cd bf       	out	0x3d, r28	; 61

00000470 <__do_copy_data>:
     470:	11 e0       	ldi	r17, 0x01	; 1
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b1 e0       	ldi	r27, 0x01	; 1
     476:	ea ee       	ldi	r30, 0xEA	; 234
     478:	f6 e6       	ldi	r31, 0x66	; 102
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__do_copy_data+0x10>
     47c:	05 90       	lpm	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	a8 3d       	cpi	r26, 0xD8	; 216
     482:	b1 07       	cpc	r27, r17
     484:	d9 f7       	brne	.-10     	; 0x47c <__do_copy_data+0xc>

00000486 <__do_clear_bss>:
     486:	25 e0       	ldi	r18, 0x05	; 5
     488:	a8 ed       	ldi	r26, 0xD8	; 216
     48a:	b1 e0       	ldi	r27, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <.do_clear_bss_start>

0000048e <.do_clear_bss_loop>:
     48e:	1d 92       	st	X+, r1

00000490 <.do_clear_bss_start>:
     490:	a9 3d       	cpi	r26, 0xD9	; 217
     492:	b2 07       	cpc	r27, r18
     494:	e1 f7       	brne	.-8      	; 0x48e <.do_clear_bss_loop>

00000496 <__do_global_ctors>:
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	c0 e3       	ldi	r28, 0x30	; 48
     49a:	d2 e0       	ldi	r29, 0x02	; 2
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__do_global_ctors+0x10>
     49e:	21 97       	sbiw	r28, 0x01	; 1
     4a0:	fe 01       	movw	r30, r28
     4a2:	0e 94 31 2c 	call	0x5862	; 0x5862 <__tablejump2__>
     4a6:	ca 32       	cpi	r28, 0x2A	; 42
     4a8:	d1 07       	cpc	r29, r17
     4aa:	c9 f7       	brne	.-14     	; 0x49e <__do_global_ctors+0x8>
     4ac:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <main>
     4b0:	0c 94 69 33 	jmp	0x66d2	; 0x66d2 <__do_global_dtors>

000004b4 <__bad_interrupt>:
     4b4:	a5 cd       	rjmp	.-1206   	; 0x0 <__vectors>

000004b6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4b6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_sendStop>
     4c0:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <twi_inRepStart>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	82 e1       	ldi	r24, 0x12	; 18
     4c8:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	83 e1       	ldi	r24, 0x13	; 19
     4d0:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
     4d4:	e9 eb       	ldi	r30, 0xB9	; 185
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	8e 7f       	andi	r24, 0xFE	; 254
     4dc:	80 83       	st	Z, r24
     4de:	80 81       	ld	r24, Z
     4e0:	8d 7f       	andi	r24, 0xFD	; 253
     4e2:	80 83       	st	Z, r24
     4e4:	88 e4       	ldi	r24, 0x48	; 72
     4e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4f0:	08 95       	ret

000004f2 <twi_setAddress>:
     4f2:	88 0f       	add	r24, r24
     4f4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     4f8:	08 95       	ret

000004fa <twi_transmit>:
     4fa:	61 32       	cpi	r22, 0x21	; 33
     4fc:	c8 f4       	brcc	.+50     	; 0x530 <twi_transmit+0x36>
     4fe:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <twi_state>
     502:	24 30       	cpi	r18, 0x04	; 4
     504:	b9 f4       	brne	.+46     	; 0x534 <twi_transmit+0x3a>
     506:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <twi_txBufferLength>
     50a:	66 23       	and	r22, r22
     50c:	a9 f0       	breq	.+42     	; 0x538 <twi_transmit+0x3e>
     50e:	fc 01       	movw	r30, r24
     510:	ac ef       	ldi	r26, 0xFC	; 252
     512:	b1 e0       	ldi	r27, 0x01	; 1
     514:	61 50       	subi	r22, 0x01	; 1
     516:	26 2f       	mov	r18, r22
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	28 0f       	add	r18, r24
     520:	39 1f       	adc	r19, r25
     522:	91 91       	ld	r25, Z+
     524:	9d 93       	st	X+, r25
     526:	e2 17       	cp	r30, r18
     528:	f3 07       	cpc	r31, r19
     52a:	d9 f7       	brne	.-10     	; 0x522 <twi_transmit+0x28>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	08 95       	ret
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	08 95       	ret
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	08 95       	ret

0000053c <twi_attachSlaveRxEvent>:
     53c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <twi_onSlaveReceive+0x1>
     540:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <twi_onSlaveReceive>
     544:	08 95       	ret

00000546 <twi_attachSlaveTxEvent>:
     546:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <twi_onSlaveTransmit+0x1>
     54a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_onSlaveTransmit>
     54e:	08 95       	ret

00000550 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     550:	85 ed       	ldi	r24, 0xD5	; 213
     552:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     556:	ec eb       	ldi	r30, 0xBC	; 188
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	84 fd       	sbrc	r24, 4
     55e:	fd cf       	rjmp	.-6      	; 0x55a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     560:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     564:	08 95       	ret

00000566 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     566:	85 ec       	ldi	r24, 0xC5	; 197
     568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     56c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     570:	08 95       	ret

00000572 <__vector_24>:
}

ISR(TWI_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
  switch(TW_STATUS){
     594:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     598:	e8 2f       	mov	r30, r24
     59a:	e8 7f       	andi	r30, 0xF8	; 248
     59c:	8e 2f       	mov	r24, r30
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	89 3c       	cpi	r24, 0xC9	; 201
     5a2:	91 05       	cpc	r25, r1
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__vector_24+0x36>
     5a6:	ee c0       	rjmp	.+476    	; 0x784 <__vector_24+0x212>
     5a8:	fc 01       	movw	r30, r24
     5aa:	ec 5c       	subi	r30, 0xCC	; 204
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	0c 94 31 2c 	jmp	0x5862	; 0x5862 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5b2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_slarw>
     5b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5ba:	85 ec       	ldi	r24, 0xC5	; 197
     5bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5c0:	e1 c0       	rjmp	.+450    	; 0x784 <__vector_24+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5c2:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
     5c6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
     5ca:	98 17       	cp	r25, r24
     5cc:	80 f4       	brcc	.+32     	; 0x5ee <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5ce:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	8e 0f       	add	r24, r30
     5d6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	e2 5e       	subi	r30, 0xE2	; 226
     5de:	fd 4f       	sbci	r31, 0xFD	; 253
     5e0:	80 81       	ld	r24, Z
     5e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5e6:	85 ec       	ldi	r24, 0xC5	; 197
     5e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5ec:	cb c0       	rjmp	.+406    	; 0x784 <__vector_24+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     5ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_sendStop>
     5f2:	88 23       	and	r24, r24
     5f4:	11 f0       	breq	.+4      	; 0x5fa <__vector_24+0x88>
          twi_stop();
     5f6:	ac df       	rcall	.-168    	; 0x550 <twi_stop>
     5f8:	c5 c0       	rjmp	.+394    	; 0x784 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     600:	84 ea       	ldi	r24, 0xA4	; 164
     602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     606:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     60a:	bc c0       	rjmp	.+376    	; 0x784 <__vector_24+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_stop();
     612:	9e df       	rcall	.-196    	; 0x550 <twi_stop>
      break;
     614:	b7 c0       	rjmp	.+366    	; 0x784 <__vector_24+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_stop();
     61c:	99 df       	rcall	.-206    	; 0x550 <twi_stop>
      break;
     61e:	b2 c0       	rjmp	.+356    	; 0x784 <__vector_24+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     620:	88 e3       	ldi	r24, 0x38	; 56
     622:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_releaseBus();
     626:	9f df       	rcall	.-194    	; 0x566 <twi_releaseBus>
      break;
     628:	ad c0       	rjmp	.+346    	; 0x784 <__vector_24+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     62a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8e 0f       	add	r24, r30
     632:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     636:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e2 5e       	subi	r30, 0xE2	; 226
     63e:	fd 4f       	sbci	r31, 0xFD	; 253
     640:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     642:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
     646:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
     64a:	98 17       	cp	r25, r24
     64c:	20 f4       	brcc	.+8      	; 0x656 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     64e:	85 ec       	ldi	r24, 0xC5	; 197
     650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     654:	97 c0       	rjmp	.+302    	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     656:	85 e8       	ldi	r24, 0x85	; 133
     658:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     65c:	93 c0       	rjmp	.+294    	; 0x784 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     65e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8e 0f       	add	r24, r30
     666:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     66a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e2 5e       	subi	r30, 0xE2	; 226
     672:	fd 4f       	sbci	r31, 0xFD	; 253
     674:	80 83       	st	Z, r24
	if (twi_sendStop)
     676:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_sendStop>
     67a:	88 23       	and	r24, r24
     67c:	11 f0       	breq	.+4      	; 0x682 <__vector_24+0x110>
          twi_stop();
     67e:	68 df       	rcall	.-304    	; 0x550 <twi_stop>
     680:	81 c0       	rjmp	.+258    	; 0x784 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     688:	84 ea       	ldi	r24, 0xA4	; 164
     68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     68e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     692:	78 c0       	rjmp	.+240    	; 0x784 <__vector_24+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     694:	5d df       	rcall	.-326    	; 0x550 <twi_stop>
      break;
     696:	76 c0       	rjmp	.+236    	; 0x784 <__vector_24+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     69e:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6a2:	85 ec       	ldi	r24, 0xC5	; 197
     6a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6a8:	6d c0       	rjmp	.+218    	; 0x784 <__vector_24+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6aa:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6ae:	80 32       	cpi	r24, 0x20	; 32
     6b0:	80 f4       	brcc	.+32     	; 0x6d2 <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     6b2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	8e 0f       	add	r24, r30
     6ba:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <twi_rxBufferIndex>
     6be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	e6 52       	subi	r30, 0x26	; 38
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6ca:	85 ec       	ldi	r24, 0xC5	; 197
     6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d0:	59 c0       	rjmp	.+178    	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     6d2:	85 e8       	ldi	r24, 0x85	; 133
     6d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d8:	55 c0       	rjmp	.+170    	; 0x784 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6da:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6de:	80 32       	cpi	r24, 0x20	; 32
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <__vector_24+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6e2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e6 52       	subi	r30, 0x26	; 38
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     6ee:	30 df       	rcall	.-416    	; 0x550 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6f0:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <twi_onSlaveReceive>
     6fa:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <twi_onSlaveReceive+0x1>
     6fe:	8a ed       	ldi	r24, 0xDA	; 218
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     704:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     708:	2e df       	rcall	.-420    	; 0x566 <twi_releaseBus>
      break;
     70a:	3c c0       	rjmp	.+120    	; 0x784 <__vector_24+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     70c:	85 e8       	ldi	r24, 0x85	; 133
     70e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     712:	38 c0       	rjmp	.+112    	; 0x784 <__vector_24+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     71a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     71e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     722:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <twi_onSlaveTransmit>
     726:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <twi_onSlaveTransmit+0x1>
     72a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     72c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
     730:	81 11       	cpse	r24, r1
     732:	05 c0       	rjmp	.+10     	; 0x73e <__vector_24+0x1cc>
        twi_txBufferLength = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     73a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     73e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <twi_txBufferIndex>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	8e 0f       	add	r24, r30
     746:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <twi_txBufferIndex>
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	e4 50       	subi	r30, 0x04	; 4
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	80 81       	ld	r24, Z
     752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     756:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <twi_txBufferIndex>
     75a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
     75e:	98 17       	cp	r25, r24
     760:	20 f4       	brcc	.+8      	; 0x76a <__vector_24+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     762:	85 ec       	ldi	r24, 0xC5	; 197
     764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     768:	0d c0       	rjmp	.+26     	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     76a:	85 e8       	ldi	r24, 0x85	; 133
     76c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     770:	09 c0       	rjmp	.+18     	; 0x784 <__vector_24+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     772:	85 ec       	ldi	r24, 0xC5	; 197
     774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     778:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
      break;
     77c:	03 c0       	rjmp	.+6      	; 0x784 <__vector_24+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     77e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
      twi_stop();
     782:	e6 de       	rcall	.-564    	; 0x550 <twi_stop>
      break;
  }
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     7a6:	a4 e0       	ldi	r26, 0x04	; 4
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	e9 ed       	ldi	r30, 0xD9	; 217
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	7c 83       	std	Y+4, r23	; 0x04
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	2b 81       	ldd	r18, Y+3	; 0x03
     7c0:	3c 81       	ldd	r19, Y+4	; 0x04
     7c2:	fc 01       	movw	r30, r24
     7c4:	33 83       	std	Z+3, r19	; 0x03
     7c6:	22 83       	std	Z+2, r18	; 0x02
     7c8:	24 96       	adiw	r28, 0x04	; 4
     7ca:	e2 e0       	ldi	r30, 0x02	; 2
     7cc:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000007d0 <_ZN5PrintC1Ev>:
     7d0:	a2 e0       	ldi	r26, 0x02	; 2
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	ee ee       	ldi	r30, 0xEE	; 238
     7d6:	f3 e0       	ldi	r31, 0x03	; 3
     7d8:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	24 ed       	ldi	r18, 0xD4	; 212
     7e6:	31 e0       	ldi	r19, 0x01	; 1
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	fc 01       	movw	r30, r24
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	22 96       	adiw	r28, 0x02	; 2
     7fa:	e2 e0       	ldi	r30, 0x02	; 2
     7fc:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000800 <_ZN6StreamC1Ev>:
     800:	a2 e0       	ldi	r26, 0x02	; 2
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e6 e0       	ldi	r30, 0x06	; 6
     806:	f4 e0       	ldi	r31, 0x04	; 4
     808:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	dd df       	rcall	.-70     	; 0x7d0 <_ZN5PrintC1Ev>
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	25 e7       	ldi	r18, 0x75	; 117
     81c:	31 e0       	ldi	r19, 0x01	; 1
     81e:	fc 01       	movw	r30, r24
     820:	31 83       	std	Z+1, r19	; 0x01
     822:	20 83       	st	Z, r18
     824:	29 81       	ldd	r18, Y+1	; 0x01
     826:	3a 81       	ldd	r19, Y+2	; 0x02
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	84 83       	std	Z+4, r24	; 0x04
     834:	95 83       	std	Z+5, r25	; 0x05
     836:	a6 83       	std	Z+6, r26	; 0x06
     838:	b7 83       	std	Z+7, r27	; 0x07
     83a:	22 96       	adiw	r28, 0x02	; 2
     83c:	e2 e0       	ldi	r30, 0x02	; 2
     83e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000842 <_ZN7TwoWireC1Ev>:
     842:	a2 e0       	ldi	r26, 0x02	; 2
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e7 e2       	ldi	r30, 0x27	; 39
     848:	f4 e0       	ldi	r31, 0x04	; 4
     84a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	d4 df       	rcall	.-88     	; 0x800 <_ZN6StreamC1Ev>
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	25 e6       	ldi	r18, 0x65	; 101
     85e:	31 e0       	ldi	r19, 0x01	; 1
     860:	fc 01       	movw	r30, r24
     862:	31 83       	std	Z+1, r19	; 0x01
     864:	20 83       	st	Z, r18
     866:	22 96       	adiw	r28, 0x02	; 2
     868:	e2 e0       	ldi	r30, 0x02	; 2
     86a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000086e <_ZN7TwoWire5beginEv>:
     86e:	a2 e0       	ldi	r26, 0x02	; 2
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     882:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     886:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     88a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     88e:	13 de       	rcall	.-986    	; 0x4b6 <twi_init>
     890:	22 96       	adiw	r28, 0x02	; 2
     892:	e2 e0       	ldi	r30, 0x02	; 2
     894:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000898 <_ZN7TwoWire5beginEh>:
     898:	a3 e0       	ldi	r26, 0x03	; 3
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	e2 e5       	ldi	r30, 0x52	; 82
     89e:	f4 e0       	ldi	r31, 0x04	; 4
     8a0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	6b 83       	std	Y+3, r22	; 0x03
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	22 de       	rcall	.-956    	; 0x4f2 <twi_setAddress>
     8ae:	81 e9       	ldi	r24, 0x91	; 145
     8b0:	95 e0       	ldi	r25, 0x05	; 5
     8b2:	49 de       	rcall	.-878    	; 0x546 <twi_attachSlaveTxEvent>
     8b4:	8b e4       	ldi	r24, 0x4B	; 75
     8b6:	95 e0       	ldi	r25, 0x05	; 5
     8b8:	41 de       	rcall	.-894    	; 0x53c <twi_attachSlaveRxEvent>
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	9a 81       	ldd	r25, Y+2	; 0x02
     8be:	d7 df       	rcall	.-82     	; 0x86e <_ZN7TwoWire5beginEv>
     8c0:	23 96       	adiw	r28, 0x03	; 3
     8c2:	e2 e0       	ldi	r30, 0x02	; 2
     8c4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000008c8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8c8:	a3 e0       	ldi	r26, 0x03	; 3
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	ea e6       	ldi	r30, 0x6A	; 106
     8ce:	f4 e0       	ldi	r31, 0x04	; 4
     8d0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     8da:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     8de:	88 23       	and	r24, r24
     8e0:	f9 f0       	breq	.+62     	; 0x920 <__stack+0x21>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8e2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     8e6:	80 32       	cpi	r24, 0x20	; 32
     8e8:	40 f0       	brcs	.+16     	; 0x8fa <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	59 df       	rcall	.-334    	; 0x7a6 <_ZN5Print13setWriteErrorEi>
      return 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	19 c0       	rjmp	.+50     	; 0x92c <__stack+0x2d>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     8fa:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	2b 81       	ldd	r18, Y+3	; 0x03
     904:	88 59       	subi	r24, 0x98	; 152
     906:	9d 4f       	sbci	r25, 0xFD	; 253
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
    ++txBufferIndex;
     90c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     916:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     91a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     920:	ce 01       	movw	r24, r28
     922:	03 96       	adiw	r24, 0x03	; 3
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	e9 dd       	rcall	.-1070   	; 0x4fa <twi_transmit>
  }
  return 1;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
}
     92c:	23 96       	adiw	r28, 0x03	; 3
     92e:	e2 e0       	ldi	r30, 0x02	; 2
     930:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000934 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     934:	a8 e0       	ldi	r26, 0x08	; 8
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	8b 83       	std	Y+3, r24	; 0x03
     944:	7e 83       	std	Y+6, r23	; 0x06
     946:	6d 83       	std	Y+5, r22	; 0x05
     948:	58 87       	std	Y+8, r21	; 0x08
     94a:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     94c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     950:	88 23       	and	r24, r24
     952:	29 f1       	breq	.+74     	; 0x99e <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     954:	1a 82       	std	Y+2, r1	; 0x02
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	1a c0       	rjmp	.+52     	; 0x98e <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	fc 01       	movw	r30, r24
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	4d 81       	ldd	r20, Y+5	; 0x05
     96c:	5e 81       	ldd	r21, Y+6	; 0x06
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	84 0f       	add	r24, r20
     974:	95 1f       	adc	r25, r21
     976:	fc 01       	movw	r30, r24
     978:	40 81       	ld	r20, Z
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	64 2f       	mov	r22, r20
     980:	f9 01       	movw	r30, r18
     982:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	3a 81       	ldd	r19, Y+2	; 0x02
     992:	8f 81       	ldd	r24, Y+7	; 0x07
     994:	98 85       	ldd	r25, Y+8	; 0x08
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	f8 f2       	brcs	.-66     	; 0x95a <_ZN7TwoWire5writeEPKhj+0x26>
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	9e 81       	ldd	r25, Y+6	; 0x06
     9a4:	62 2f       	mov	r22, r18
     9a6:	a9 dd       	rcall	.-1198   	; 0x4fa <twi_transmit>
  }
  return quantity;
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
}
     9ac:	28 96       	adiw	r28, 0x08	; 8
     9ae:	e2 e0       	ldi	r30, 0x02	; 2
     9b0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000009b4 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     9b4:	a2 e0       	ldi	r26, 0x02	; 2
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e0 ee       	ldi	r30, 0xE0	; 224
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     9c4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	48 1b       	sub	r20, r24
     9d8:	59 0b       	sbc	r21, r25
     9da:	ca 01       	movw	r24, r20
}
     9dc:	22 96       	adiw	r28, 0x02	; 2
     9de:	e2 e0       	ldi	r30, 0x02	; 2
     9e0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000009e4 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     9e4:	a4 e0       	ldi	r26, 0x04	; 4
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e8 ef       	ldi	r30, 0xF8	; 248
     9ea:	f4 e0       	ldi	r31, 0x04	; 4
     9ec:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     9fc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a00:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     a04:	98 17       	cp	r25, r24
     a06:	88 f4       	brcc	.+34     	; 0xa2a <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     a08:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	8a 5b       	subi	r24, 0xBA	; 186
     a12:	9d 4f       	sbci	r25, 0xFD	; 253
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	88 2f       	mov	r24, r24
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     a20:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a2e:	24 96       	adiw	r28, 0x04	; 4
     a30:	e2 e0       	ldi	r30, 0x02	; 2
     a32:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000a36 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     a36:	a4 e0       	ldi	r26, 0x04	; 4
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e1 e2       	ldi	r30, 0x21	; 33
     a3c:	f5 e0       	ldi	r31, 0x05	; 5
     a3e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     a4e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a52:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     a56:	98 17       	cp	r25, r24
     a58:	60 f4       	brcc	.+24     	; 0xa72 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     a5a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	8a 5b       	subi	r24, 0xBA	; 186
     a64:	9d 4f       	sbci	r25, 0xFD	; 253
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a76:	24 96       	adiw	r28, 0x04	; 4
     a78:	e2 e0       	ldi	r30, 0x02	; 2
     a7a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000a7e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a7e:	a2 e0       	ldi	r26, 0x02	; 2
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     a8e:	22 96       	adiw	r28, 0x02	; 2
     a90:	e2 e0       	ldi	r30, 0x02	; 2
     a92:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000a96 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     a96:	a5 e0       	ldi	r26, 0x05	; 5
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e1 e5       	ldi	r30, 0x51	; 81
     a9c:	f5 e0       	ldi	r31, 0x05	; 5
     a9e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	7d 83       	std	Y+5, r23	; 0x05
     aa8:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     aaa:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     aae:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     ab2:	89 2b       	or	r24, r25
     ab4:	09 f4       	brne	.+2      	; 0xab8 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     ab6:	31 c0       	rjmp	.+98     	; 0xb1a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     ab8:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     abc:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     ac0:	98 17       	cp	r25, r24
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     ac4:	2a c0       	rjmp	.+84     	; 0xb1a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	13 c0       	rjmp	.+38     	; 0xaf0 <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	22 2f       	mov	r18, r18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a 81       	ldd	r20, Y+2	; 0x02
     ad8:	5b 81       	ldd	r21, Y+3	; 0x03
     ada:	24 0f       	add	r18, r20
     adc:	35 1f       	adc	r19, r21
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	8a 5b       	subi	r24, 0xBA	; 186
     ae4:	9d 4f       	sbci	r25, 0xFD	; 253
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	9d 81       	ldd	r25, Y+5	; 0x05
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	2c f3       	brlt	.-54     	; 0xaca <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     b00:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     b0a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     b0e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	f9 01       	movw	r30, r18
     b18:	09 95       	icall
}
     b1a:	25 96       	adiw	r28, 0x05	; 5
     b1c:	e2 e0       	ldi	r30, 0x02	; 2
     b1e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000b22 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     b2e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     b32:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b36:	89 2b       	or	r24, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     b3c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     b40:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     b44:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     b48:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b4c:	fc 01       	movw	r30, r24
     b4e:	09 95       	icall
}
     b50:	e2 e0       	ldi	r30, 0x02	; 2
     b52:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000b56 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     b56:	a4 e0       	ldi	r26, 0x04	; 4
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e1 eb       	ldi	r30, 0xB1	; 177
     b5c:	f5 e0       	ldi	r31, 0x05	; 5
     b5e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	7c 83       	std	Y+4, r23	; 0x04
     b68:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     b72:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
}
     b76:	24 96       	adiw	r28, 0x04	; 4
     b78:	e2 e0       	ldi	r30, 0x02	; 2
     b7a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000b7e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     b7e:	a4 e0       	ldi	r26, 0x04	; 4
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e5 ec       	ldi	r30, 0xC5	; 197
     b84:	f5 e0       	ldi	r31, 0x05	; 5
     b86:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	7c 83       	std	Y+4, r23	; 0x04
     b90:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b9a:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN7TwoWire14user_onRequestE>
}
     b9e:	24 96       	adiw	r28, 0x04	; 4
     ba0:	e2 e0       	ldi	r30, 0x02	; 2
     ba2:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000ba6 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ba6:	a4 e0       	ldi	r26, 0x04	; 4
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 ed       	ldi	r30, 0xD9	; 217
     bac:	f5 e0       	ldi	r31, 0x05	; 5
     bae:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	7c 83       	std	Y+4, r23	; 0x04
     bb8:	6b 83       	std	Y+3, r22	; 0x03
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bca:	8f e8       	ldi	r24, 0x8F	; 143
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	39 de       	rcall	.-910    	; 0x842 <_ZN7TwoWireC1Ev>
     bd0:	24 96       	adiw	r28, 0x04	; 4
     bd2:	e2 e0       	ldi	r30, 0x02	; 2
     bd4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000bd8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e2 ef       	ldi	r30, 0xF2	; 242
     bde:	f5 e0       	ldi	r31, 0x05	; 5
     be0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     be4:	6f ef       	ldi	r22, 0xFF	; 255
     be6:	7f ef       	ldi	r23, 0xFF	; 255
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	dc df       	rcall	.-72     	; 0xba6 <_Z41__static_initialization_and_destruction_0ii>
     bee:	e2 e0       	ldi	r30, 0x02	; 2
     bf0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000bf4 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     bf4:	a2 e0       	ldi	r26, 0x02	; 2
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	6a 83       	std	Y+2, r22	; 0x02
     c04:	22 96       	adiw	r28, 0x02	; 2
     c06:	e2 e0       	ldi	r30, 0x02	; 2
     c08:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000c0c <_ZN14SoftwareSerial10tunedDelayEj>:
     c0c:	a4 e0       	ldi	r26, 0x04	; 4
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ec e0       	ldi	r30, 0x0C	; 12
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	24 96       	adiw	r28, 0x04	; 4
     c32:	e2 e0       	ldi	r30, 0x02	; 2
     c34:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000c38 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     c38:	a2 e0       	ldi	r26, 0x02	; 2
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e2 e2       	ldi	r30, 0x22	; 34
     c3e:	f6 e0       	ldi	r31, 0x06	; 6
     c40:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	fc 01       	movw	r30, r24
     c4e:	86 85       	ldd	r24, Z+14	; 0x0e
     c50:	97 85       	ldd	r25, Z+15	; 0x0f
     c52:	fc 01       	movw	r30, r24
     c54:	20 81       	ld	r18, Z
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	fc 01       	movw	r30, r24
     c5c:	85 85       	ldd	r24, Z+13	; 0x0d
     c5e:	82 23       	and	r24, r18
}
     c60:	22 96       	adiw	r28, 0x02	; 2
     c62:	e2 e0       	ldi	r30, 0x02	; 2
     c64:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00000c68 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	2b 97       	sbiw	r28, 0x0b	; 11
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     c9a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     c9e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     ca2:	89 2b       	or	r24, r25
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__vector_3+0x40>
     ca6:	f4 c0       	rjmp	.+488    	; 0xe90 <__vector_3+0x228>
  {
    active_object->recv();
     ca8:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     cac:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     cb4:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cbe:	82 70       	andi	r24, 0x02	; 2
     cc0:	88 23       	and	r24, r24
     cc2:	49 f0       	breq	.+18     	; 0xcd6 <__vector_3+0x6e>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	b7 df       	rcall	.-146    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     cca:	98 2f       	mov	r25, r24
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	99 23       	and	r25, r25
     cd0:	51 f4       	brne	.+20     	; 0xce6 <__vector_3+0x7e>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <__vector_3+0x7e>
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	ae df       	rcall	.-164    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     cdc:	98 2f       	mov	r25, r24
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	99 23       	and	r25, r25
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_3+0x7e>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <__vector_3+0x84>
     cea:	d2 c0       	rjmp	.+420    	; 0xe90 <__vector_3+0x228>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	9d 83       	std	Y+5, r25	; 0x05
     cf2:	8c 83       	std	Y+4, r24	; 0x04
     cf4:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	fc 01       	movw	r30, r24
     d02:	83 89       	ldd	r24, Z+19	; 0x13
     d04:	94 89       	ldd	r25, Z+20	; 0x14
     d06:	2c 81       	ldd	r18, Y+4	; 0x04
     d08:	3d 81       	ldd	r19, Y+5	; 0x05
     d0a:	f9 01       	movw	r30, r18
     d0c:	23 89       	ldd	r18, Z+19	; 0x13
     d0e:	34 89       	ldd	r19, Z+20	; 0x14
     d10:	f9 01       	movw	r30, r18
     d12:	40 81       	ld	r20, Z
     d14:	2c 81       	ldd	r18, Y+4	; 0x04
     d16:	3d 81       	ldd	r19, Y+5	; 0x05
     d18:	f9 01       	movw	r30, r18
     d1a:	25 89       	ldd	r18, Z+21	; 0x15
     d1c:	24 2b       	or	r18, r20
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	fc 01       	movw	r30, r24
     d2a:	83 89       	ldd	r24, Z+19	; 0x13
     d2c:	94 89       	ldd	r25, Z+20	; 0x14
     d2e:	2c 81       	ldd	r18, Y+4	; 0x04
     d30:	3d 81       	ldd	r19, Y+5	; 0x05
     d32:	f9 01       	movw	r30, r18
     d34:	23 89       	ldd	r18, Z+19	; 0x13
     d36:	34 89       	ldd	r19, Z+20	; 0x14
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	42 2f       	mov	r20, r18
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	f9 01       	movw	r30, r18
     d44:	25 89       	ldd	r18, Z+21	; 0x15
     d46:	20 95       	com	r18
     d48:	24 23       	and	r18, r20
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	fc 01       	movw	r30, r24
     d54:	86 89       	ldd	r24, Z+22	; 0x16
     d56:	97 89       	ldd	r25, Z+23	; 0x17
     d58:	59 df       	rcall	.-334    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	8d e0       	ldi	r24, 0x0D	; 13
     d5e:	4a df       	rcall	.-364    	; 0xbf4 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	8f 83       	std	Y+7, r24	; 0x07
     d64:	1f c0       	rjmp	.+62     	; 0xda4 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 8d       	ldd	r24, Z+24	; 0x18
     d6e:	91 8d       	ldd	r25, Z+25	; 0x19
     d70:	4d df       	rcall	.-358    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	95 95       	asr	r25
     d7a:	87 95       	ror	r24
     d7c:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	8d e0       	ldi	r24, 0x0D	; 13
     d82:	38 df       	rcall	.-400    	; 0xbf4 <_Z10DebugPulsehh>
      if (rx_pin_read())
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	57 df       	rcall	.-338    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     d8a:	98 2f       	mov	r25, r24
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	99 23       	and	r25, r25
     d90:	09 f4       	brne	.+2      	; 0xd94 <__vector_3+0x12c>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	88 23       	and	r24, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <__vector_3+0x136>
        d |= 0x80;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	8f 83       	std	Y+7, r24	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	88 23       	and	r24, r24
     da8:	f1 f6       	brne	.-68     	; 0xd66 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	fc 01       	movw	r30, r24
     db0:	86 8d       	ldd	r24, Z+30	; 0x1e
     db2:	82 70       	andi	r24, 0x02	; 2
     db4:	88 23       	and	r24, r24
     db6:	19 f0       	breq	.+6      	; 0xdbe <__vector_3+0x156>
      d = ~d;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	80 95       	com	r24
     dbc:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     dbe:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	8f 73       	andi	r24, 0x3F	; 63
     dca:	90 78       	andi	r25, 0x80	; 128
     dcc:	99 23       	and	r25, r25
     dce:	24 f4       	brge	.+8      	; 0xdd8 <__vector_3+0x170>
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	80 6c       	ori	r24, 0xC0	; 192
     dd4:	9f 6f       	ori	r25, 0xFF	; 255
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     dda:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <_ZN14SoftwareSerial20_receive_buffer_headE>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	28 85       	ldd	r18, Y+8	; 0x08
     de2:	29 17       	cp	r18, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <__vector_3+0x180>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	69 f0       	breq	.+26     	; 0xe06 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     dec:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	83 56       	subi	r24, 0x63	; 99
     df6:	9d 4f       	sbci	r25, 0xFD	; 253
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     dfe:	88 85       	ldd	r24, Y+8	; 0x08
     e00:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	8b e0       	ldi	r24, 0x0B	; 11
     e0a:	f4 de       	rcall	.-536    	; 0xbf4 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	fc 01       	movw	r30, r24
     e12:	26 8d       	ldd	r18, Z+30	; 0x1e
     e14:	21 60       	ori	r18, 0x01	; 1
     e16:	fc 01       	movw	r30, r24
     e18:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	fc 01       	movw	r30, r24
     e20:	82 8d       	ldd	r24, Z+26	; 0x1a
     e22:	93 8d       	ldd	r25, Z+27	; 0x1b
     e24:	f3 de       	rcall	.-538    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	8b e0       	ldi	r24, 0x0B	; 11
     e2a:	e4 de       	rcall	.-568    	; 0xbf4 <_Z10DebugPulsehh>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	9a 87       	std	Y+10, r25	; 0x0a
     e32:	89 87       	std	Y+9, r24	; 0x09
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     e38:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3a:	88 23       	and	r24, r24
     e3c:	a1 f0       	breq	.+40     	; 0xe66 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	fc 01       	movw	r30, r24
     e44:	83 89       	ldd	r24, Z+19	; 0x13
     e46:	94 89       	ldd	r25, Z+20	; 0x14
     e48:	29 85       	ldd	r18, Y+9	; 0x09
     e4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4c:	f9 01       	movw	r30, r18
     e4e:	23 89       	ldd	r18, Z+19	; 0x13
     e50:	34 89       	ldd	r19, Z+20	; 0x14
     e52:	f9 01       	movw	r30, r18
     e54:	40 81       	ld	r20, Z
     e56:	29 85       	ldd	r18, Y+9	; 0x09
     e58:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5a:	f9 01       	movw	r30, r18
     e5c:	25 89       	ldd	r18, Z+21	; 0x15
     e5e:	24 2b       	or	r18, r20
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
     e64:	15 c0       	rjmp	.+42     	; 0xe90 <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	fc 01       	movw	r30, r24
     e6c:	83 89       	ldd	r24, Z+19	; 0x13
     e6e:	94 89       	ldd	r25, Z+20	; 0x14
     e70:	29 85       	ldd	r18, Y+9	; 0x09
     e72:	3a 85       	ldd	r19, Y+10	; 0x0a
     e74:	f9 01       	movw	r30, r18
     e76:	23 89       	ldd	r18, Z+19	; 0x13
     e78:	34 89       	ldd	r19, Z+20	; 0x14
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	42 2f       	mov	r20, r18
     e80:	29 85       	ldd	r18, Y+9	; 0x09
     e82:	3a 85       	ldd	r19, Y+10	; 0x0a
     e84:	f9 01       	movw	r30, r18
     e86:	25 89       	ldd	r18, Z+21	; 0x15
     e88:	20 95       	com	r18
     e8a:	24 23       	and	r18, r20
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     e90:	2b 96       	adiw	r28, 0x0b	; 11
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     ec4:	8f 92       	push	r8
     ec6:	af 92       	push	r10
     ec8:	cf 92       	push	r12
     eca:	ef 92       	push	r14
     ecc:	0f 93       	push	r16
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	28 97       	sbiw	r28, 0x08	; 8
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04
     eea:	2d 83       	std	Y+5, r18	; 0x05
     eec:	0e 83       	std	Y+6, r16	; 0x06
     eee:	ef 82       	std	Y+7, r14	; 0x07
     ef0:	c8 86       	std	Y+8, r12	; 0x08
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	6c dc       	rcall	.-1832   	; 0x7d0 <_ZN5PrintC1Ev>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	25 e8       	ldi	r18, 0x85	; 133
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	fc 01       	movw	r30, r24
     f02:	31 83       	std	Z+1, r19	; 0x01
     f04:	20 83       	st	Z, r18
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	1f 92       	push	r1
     f10:	1f 92       	push	r1
     f12:	88 84       	ldd	r8, Y+8	; 0x08
     f14:	af 80       	ldd	r10, Y+7	; 0x07
     f16:	ce 80       	ldd	r12, Y+6	; 0x06
     f18:	ed 80       	ldd	r14, Y+5	; 0x05
     f1a:	0c 81       	ldd	r16, Y+4	; 0x04
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	12 d0       	rcall	.+36     	; 0xf48 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	28 96       	adiw	r28, 0x08	; 8
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	0f 91       	pop	r16
     f3e:	ef 90       	pop	r14
     f40:	cf 90       	pop	r12
     f42:	af 90       	pop	r10
     f44:	8f 90       	pop	r8
     f46:	08 95       	ret

00000f48 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     f48:	8f 92       	push	r8
     f4a:	af 92       	push	r10
     f4c:	cf 92       	push	r12
     f4e:	ef 92       	push	r14
     f50:	0f 93       	push	r16
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	2a 97       	sbiw	r28, 0x0a	; 10
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	6b 83       	std	Y+3, r22	; 0x03
     f6c:	4c 83       	std	Y+4, r20	; 0x04
     f6e:	2d 83       	std	Y+5, r18	; 0x05
     f70:	0e 83       	std	Y+6, r16	; 0x06
     f72:	ef 82       	std	Y+7, r14	; 0x07
     f74:	c8 86       	std	Y+8, r12	; 0x08
     f76:	a9 86       	std	Y+9, r10	; 0x09
     f78:	8a 86       	std	Y+10, r8	; 0x0a
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	fc 01       	movw	r30, r24
     f82:	24 83       	std	Z+4, r18	; 0x04
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	2d 81       	ldd	r18, Y+5	; 0x05
     f8a:	fc 01       	movw	r30, r24
     f8c:	25 83       	std	Z+5, r18	; 0x05
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	2e 81       	ldd	r18, Y+6	; 0x06
     f94:	fc 01       	movw	r30, r24
     f96:	26 83       	std	Z+6, r18	; 0x06
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	2f 81       	ldd	r18, Y+7	; 0x07
     f9e:	fc 01       	movw	r30, r24
     fa0:	27 83       	std	Z+7, r18	; 0x07
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	28 85       	ldd	r18, Y+8	; 0x08
     fa8:	fc 01       	movw	r30, r24
     faa:	20 87       	std	Z+8, r18	; 0x08
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	29 85       	ldd	r18, Y+9	; 0x09
     fb2:	fc 01       	movw	r30, r24
     fb4:	21 87       	std	Z+9, r18	; 0x09
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	2a 85       	ldd	r18, Y+10	; 0x0a
     fbc:	fc 01       	movw	r30, r24
     fbe:	22 87       	std	Z+10, r18	; 0x0a
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	2c 89       	ldd	r18, Y+20	; 0x14
     fc6:	fc 01       	movw	r30, r24
     fc8:	23 87       	std	Z+11, r18	; 0x0b
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	2d 89       	ldd	r18, Y+21	; 0x15
     fd0:	fc 01       	movw	r30, r24
     fd2:	24 87       	std	Z+12, r18	; 0x0c
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	2e 89       	ldd	r18, Y+22	; 0x16
     fda:	fc 01       	movw	r30, r24
     fdc:	25 87       	std	Z+13, r18	; 0x0d
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	2f 89       	ldd	r18, Y+23	; 0x17
     fe4:	fc 01       	movw	r30, r24
     fe6:	26 87       	std	Z+14, r18	; 0x0e
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	fc 01       	movw	r30, r24
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	fc 01       	movw	r30, r24
     ffc:	85 81       	ldd	r24, Z+5	; 0x05
     ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    1000:	39 f0       	breq	.+14     	; 0x1010 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	fc 01       	movw	r30, r24
    1008:	85 81       	ldd	r24, Z+5	; 0x05
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	fc 01       	movw	r30, r24
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	29 f0       	breq	.+10     	; 0x102e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	fc 01       	movw	r30, r24
    102a:	17 86       	std	Z+15, r1	; 0x0f
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	20 e1       	ldi	r18, 0x10	; 16
    1034:	fc 01       	movw	r30, r24
    1036:	27 87       	std	Z+15, r18	; 0x0f
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	60 e1       	ldi	r22, 0x10	; 16
    1042:	0e d0       	rcall	.+28     	; 0x1060 <_ZN13LiquidCrystal5beginEhhh>
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	0f 91       	pop	r16
    1056:	ef 90       	pop	r14
    1058:	cf 90       	pop	r12
    105a:	af 90       	pop	r10
    105c:	8f 90       	pop	r8
    105e:	08 95       	ret

00001060 <_ZN13LiquidCrystal5beginEhhh>:
    1060:	a5 e0       	ldi	r26, 0x05	; 5
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e3       	ldi	r30, 0x36	; 54
    1066:	f8 e0       	ldi	r31, 0x08	; 8
    1068:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	6b 83       	std	Y+3, r22	; 0x03
    1072:	4c 83       	std	Y+4, r20	; 0x04
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	50 f0       	brcs	.+20     	; 0x1090 <_ZN13LiquidCrystal5beginEhhh+0x30>
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	fc 01       	movw	r30, r24
    1082:	87 85       	ldd	r24, Z+15	; 0x0f
    1084:	28 2f       	mov	r18, r24
    1086:	28 60       	ori	r18, 0x08	; 8
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	fc 01       	movw	r30, r24
    108e:	27 87       	std	Z+15, r18	; 0x0f
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	fc 01       	movw	r30, r24
    1098:	23 8b       	std	Z+19, r18	; 0x13
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	ac 01       	movw	r20, r24
    10a2:	40 5c       	subi	r20, 0xC0	; 192
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	8a 01       	movw	r16, r20
    10b2:	40 e4       	ldi	r20, 0x40	; 64
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	a4 d0       	rcall	.+328    	; 0x1204 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	88 23       	and	r24, r24
    10c0:	69 f0       	breq	.+26     	; 0x10dc <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	51 f4       	brne	.+20     	; 0x10dc <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	fc 01       	movw	r30, r24
    10ce:	87 85       	ldd	r24, Z+15	; 0x0f
    10d0:	28 2f       	mov	r18, r24
    10d2:	24 60       	ori	r18, 0x04	; 4
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	fc 01       	movw	r30, r24
    10da:	27 87       	std	Z+15, r18	; 0x0f
    10dc:	80 e5       	ldi	r24, 0x50	; 80
    10de:	93 ec       	ldi	r25, 0xC3	; 195
    10e0:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	fc 01       	movw	r30, r24
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	fc 01       	movw	r30, r24
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	fc 01       	movw	r30, r24
    1106:	85 81       	ldd	r24, Z+5	; 0x05
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	39 f0       	breq	.+14     	; 0x111a <_ZN13LiquidCrystal5beginEhhh+0xba>
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	fc 01       	movw	r30, r24
    1112:	85 81       	ldd	r24, Z+5	; 0x05
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	fc 01       	movw	r30, r24
    1120:	87 85       	ldd	r24, Z+15	; 0x0f
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	80 71       	andi	r24, 0x10	; 16
    1128:	99 27       	eor	r25, r25
    112a:	89 2b       	or	r24, r25
    112c:	e9 f4       	brne	.+58     	; 0x1168 <_ZN13LiquidCrystal5beginEhhh+0x108>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	91 d1       	rcall	.+802    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1136:	84 e9       	ldi	r24, 0x94	; 148
    1138:	91 e1       	ldi	r25, 0x11	; 17
    113a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	89 d1       	rcall	.+786    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1146:	84 e9       	ldi	r24, 0x94	; 148
    1148:	91 e1       	ldi	r25, 0x11	; 17
    114a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	63 e0       	ldi	r22, 0x03	; 3
    1154:	81 d1       	rcall	.+770    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1156:	86 e9       	ldi	r24, 0x96	; 150
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	79 d1       	rcall	.+754    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1166:	26 c0       	rjmp	.+76     	; 0x11b4 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	fc 01       	movw	r30, r24
    116e:	87 85       	ldd	r24, Z+15	; 0x0f
    1170:	28 2f       	mov	r18, r24
    1172:	20 62       	ori	r18, 0x20	; 32
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	62 2f       	mov	r22, r18
    117a:	d6 d0       	rcall	.+428    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    117c:	84 e9       	ldi	r24, 0x94	; 148
    117e:	91 e1       	ldi	r25, 0x11	; 17
    1180:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	fc 01       	movw	r30, r24
    118a:	87 85       	ldd	r24, Z+15	; 0x0f
    118c:	28 2f       	mov	r18, r24
    118e:	20 62       	ori	r18, 0x20	; 32
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	62 2f       	mov	r22, r18
    1196:	c8 d0       	rcall	.+400    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    1198:	86 e9       	ldi	r24, 0x96	; 150
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	fc 01       	movw	r30, r24
    11a6:	87 85       	ldd	r24, Z+15	; 0x0f
    11a8:	28 2f       	mov	r18, r24
    11aa:	20 62       	ori	r18, 0x20	; 32
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	62 2f       	mov	r22, r18
    11b2:	ba d0       	rcall	.+372    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	87 85       	ldd	r24, Z+15	; 0x0f
    11bc:	28 2f       	mov	r18, r24
    11be:	20 62       	ori	r18, 0x20	; 32
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	62 2f       	mov	r22, r18
    11c6:	b0 d0       	rcall	.+352    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	24 e0       	ldi	r18, 0x04	; 4
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 8b       	std	Z+16, r18	; 0x10
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	88 d0       	rcall	.+272    	; 0x12e8 <_ZN13LiquidCrystal7displayEv>
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	3b d0       	rcall	.+118    	; 0x1254 <_ZN13LiquidCrystal5clearEv>
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	22 e0       	ldi	r18, 0x02	; 2
    11e4:	fc 01       	movw	r30, r24
    11e6:	21 8b       	std	Z+17, r18	; 0x11
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	fc 01       	movw	r30, r24
    11ee:	81 89       	ldd	r24, Z+17	; 0x11
    11f0:	28 2f       	mov	r18, r24
    11f2:	24 60       	ori	r18, 0x04	; 4
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	62 2f       	mov	r22, r18
    11fa:	96 d0       	rcall	.+300    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11fc:	25 96       	adiw	r28, 0x05	; 5
    11fe:	e4 e0       	ldi	r30, 0x04	; 4
    1200:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00001204 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    1204:	aa e0       	ldi	r26, 0x0A	; 10
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e0       	ldi	r30, 0x08	; 8
    120a:	f9 e0       	ldi	r31, 0x09	; 9
    120c:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	7c 83       	std	Y+4, r23	; 0x04
    1216:	6b 83       	std	Y+3, r22	; 0x03
    1218:	5e 83       	std	Y+6, r21	; 0x06
    121a:	4d 83       	std	Y+5, r20	; 0x05
    121c:	38 87       	std	Y+8, r19	; 0x08
    121e:	2f 83       	std	Y+7, r18	; 0x07
    1220:	1a 87       	std	Y+10, r17	; 0x0a
    1222:	09 87       	std	Y+9, r16	; 0x09
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	fc 01       	movw	r30, r24
    122c:	24 8b       	std	Z+20, r18	; 0x14
    122e:	2d 81       	ldd	r18, Y+5	; 0x05
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	fc 01       	movw	r30, r24
    1236:	25 8b       	std	Z+21, r18	; 0x15
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	fc 01       	movw	r30, r24
    1240:	26 8b       	std	Z+22, r18	; 0x16
    1242:	29 85       	ldd	r18, Y+9	; 0x09
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	fc 01       	movw	r30, r24
    124a:	27 8b       	std	Z+23, r18	; 0x17
    124c:	2a 96       	adiw	r28, 0x0a	; 10
    124e:	e4 e0       	ldi	r30, 0x04	; 4
    1250:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00001254 <_ZN13LiquidCrystal5clearEv>:
    1254:	a2 e0       	ldi	r26, 0x02	; 2
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f9 e0       	ldi	r31, 0x09	; 9
    125c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	5e d0       	rcall	.+188    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    126c:	80 ed       	ldi	r24, 0xD0	; 208
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
    1274:	22 96       	adiw	r28, 0x02	; 2
    1276:	e2 e0       	ldi	r30, 0x02	; 2
    1278:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000127c <_ZN13LiquidCrystal9setCursorEhh>:
    127c:	a6 e0       	ldi	r26, 0x06	; 6
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e4 e4       	ldi	r30, 0x44	; 68
    1282:	f9 e0       	ldi	r31, 0x09	; 9
    1284:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	6d 83       	std	Y+5, r22	; 0x05
    128e:	4e 83       	std	Y+6, r20	; 0x06
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	8e 83       	std	Y+6, r24	; 0x06
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	fc 01       	movw	r30, r24
    12a8:	93 89       	ldd	r25, Z+19	; 0x13
    12aa:	8e 81       	ldd	r24, Y+6	; 0x06
    12ac:	89 17       	cp	r24, r25
    12ae:	30 f0       	brcs	.+12     	; 0x12bc <_ZN13LiquidCrystal9setCursorEhh+0x40>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	83 89       	ldd	r24, Z+19	; 0x13
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	8e 83       	std	Y+6, r24	; 0x06
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	44 96       	adiw	r24, 0x14	; 20
    12cc:	fc 01       	movw	r30, r24
    12ce:	90 81       	ld	r25, Z
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	89 0f       	add	r24, r25
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	28 2f       	mov	r18, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	62 2f       	mov	r22, r18
    12de:	24 d0       	rcall	.+72     	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    12e0:	26 96       	adiw	r28, 0x06	; 6
    12e2:	e2 e0       	ldi	r30, 0x02	; 2
    12e4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000012e8 <_ZN13LiquidCrystal7displayEv>:
    12e8:	a2 e0       	ldi	r26, 0x02	; 2
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e7       	ldi	r30, 0x7A	; 122
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	fc 01       	movw	r30, r24
    12fe:	80 89       	ldd	r24, Z+16	; 0x10
    1300:	28 2f       	mov	r18, r24
    1302:	24 60       	ori	r18, 0x04	; 4
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	fc 01       	movw	r30, r24
    130a:	20 8b       	std	Z+16, r18	; 0x10
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	fc 01       	movw	r30, r24
    1312:	80 89       	ldd	r24, Z+16	; 0x10
    1314:	28 2f       	mov	r18, r24
    1316:	28 60       	ori	r18, 0x08	; 8
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	62 2f       	mov	r22, r18
    131e:	04 d0       	rcall	.+8      	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    1320:	22 96       	adiw	r28, 0x02	; 2
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001328 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    1328:	a3 e0       	ldi	r26, 0x03	; 3
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	6b 81       	ldd	r22, Y+3	; 0x03
    1342:	18 d0       	rcall	.+48     	; 0x1374 <_ZN13LiquidCrystal4sendEhh>
}
    1344:	23 96       	adiw	r28, 0x03	; 3
    1346:	e2 e0       	ldi	r30, 0x02	; 2
    1348:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000134c <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    134c:	a3 e0       	ldi	r26, 0x03	; 3
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ec ea       	ldi	r30, 0xAC	; 172
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	6b 81       	ldd	r22, Y+3	; 0x03
    1366:	06 d0       	rcall	.+12     	; 0x1374 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
}
    136c:	23 96       	adiw	r28, 0x03	; 3
    136e:	e2 e0       	ldi	r30, 0x02	; 2
    1370:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001374 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1374:	a4 e0       	ldi	r26, 0x04	; 4
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e0 ec       	ldi	r30, 0xC0	; 192
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	fc 01       	movw	r30, r24
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	6c 81       	ldd	r22, Y+4	; 0x04
    1392:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	fc 01       	movw	r30, r24
    139c:	85 81       	ldd	r24, Z+5	; 0x05
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	85 81       	ldd	r24, Z+5	; 0x05
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	fc 01       	movw	r30, r24
    13b6:	87 85       	ldd	r24, Z+15	; 0x0f
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	80 71       	andi	r24, 0x10	; 16
    13be:	99 27       	eor	r25, r25
    13c0:	89 2b       	or	r24, r25
    13c2:	29 f0       	breq	.+10     	; 0x13ce <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	6b 81       	ldd	r22, Y+3	; 0x03
    13ca:	85 d0       	rcall	.+266    	; 0x14d6 <_ZN13LiquidCrystal10write8bitsEh>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	95 95       	asr	r25
    13d6:	87 95       	ror	r24
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	95 95       	asr	r25
    13de:	87 95       	ror	r24
    13e0:	95 95       	asr	r25
    13e2:	87 95       	ror	r24
    13e4:	28 2f       	mov	r18, r24
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	62 2f       	mov	r22, r18
    13ec:	35 d0       	rcall	.+106    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	6b 81       	ldd	r22, Y+3	; 0x03
    13f4:	31 d0       	rcall	.+98     	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    13f6:	24 96       	adiw	r28, 0x04	; 4
    13f8:	e2 e0       	ldi	r30, 0x02	; 2
    13fa:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000013fe <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    13fe:	a2 e0       	ldi	r26, 0x02	; 2
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	fc 01       	movw	r30, r24
    1414:	86 81       	ldd	r24, Z+6	; 0x06
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
  delayMicroseconds(1);    
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	fc 01       	movw	r30, r24
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	fc 01       	movw	r30, r24
    1440:	86 81       	ldd	r24, Z+6	; 0x06
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1448:	84 e6       	ldi	r24, 0x64	; 100
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delayMicroseconds>
}
    1450:	22 96       	adiw	r28, 0x02	; 2
    1452:	e2 e0       	ldi	r30, 0x02	; 2
    1454:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001458 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1458:	a5 e0       	ldi	r26, 0x05	; 5
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	fa e0       	ldi	r31, 0x0A	; 10
    1460:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
    1468:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    146a:	1a 82       	std	Y+2, r1	; 0x02
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	28 c0       	rjmp	.+80     	; 0x14c0 <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	07 96       	adiw	r24, 0x07	; 7
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	09 80       	ldd	r0, Y+1	; 0x01
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    1492:	95 95       	asr	r25
    1494:	87 95       	ror	r24
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    149a:	48 2f       	mov	r20, r24
    149c:	41 70       	andi	r20, 0x01	; 1
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	07 96       	adiw	r24, 0x07	; 7
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
    14b0:	64 2f       	mov	r22, r20
    14b2:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	04 97       	sbiw	r24, 0x04	; 4
    14c6:	a4 f2       	brlt	.-88     	; 0x1470 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	98 df       	rcall	.-208    	; 0x13fe <_ZN13LiquidCrystal11pulseEnableEv>
}
    14ce:	25 96       	adiw	r28, 0x05	; 5
    14d0:	e2 e0       	ldi	r30, 0x02	; 2
    14d2:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000014d6 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    14d6:	a5 e0       	ldi	r26, 0x05	; 5
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e1 e7       	ldi	r30, 0x71	; 113
    14dc:	fa e0       	ldi	r31, 0x0A	; 10
    14de:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	28 c0       	rjmp	.+80     	; 0x153e <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	07 96       	adiw	r24, 0x07	; 7
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	09 80       	ldd	r0, Y+1	; 0x01
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    1510:	95 95       	asr	r25
    1512:	87 95       	ror	r24
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    1518:	48 2f       	mov	r20, r24
    151a:	41 70       	andi	r20, 0x01	; 1
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	07 96       	adiw	r24, 0x07	; 7
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	64 2f       	mov	r22, r20
    1530:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	08 97       	sbiw	r24, 0x08	; 8
    1544:	a4 f2       	brlt	.-88     	; 0x14ee <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	59 df       	rcall	.-334    	; 0x13fe <_ZN13LiquidCrystal11pulseEnableEv>
}
    154c:	25 96       	adiw	r28, 0x05	; 5
    154e:	e2 e0       	ldi	r30, 0x02	; 2
    1550:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001554 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e0 eb       	ldi	r30, 0xB0	; 176
    155a:	fa e0       	ldi	r31, 0x0A	; 10
    155c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1560:	8f ed       	ldi	r24, 0xDF	; 223
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	88 23       	and	r24, r24
    156a:	51 f4       	brne	.+20     	; 0x1580 <_ZN4erom6Access8instanceEv+0x2c>
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	89 ee       	ldi	r24, 0xE9	; 233
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0a d0       	rcall	.+20     	; 0x158a <_ZN4erom6AccessC1Ej>
    1576:	8f ed       	ldi	r24, 0xDF	; 223
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    1580:	89 ee       	ldi	r24, 0xE9	; 233
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	e2 e0       	ldi	r30, 0x02	; 2
    1586:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000158a <_ZN4erom6AccessC1Ej>:
    158a:	a4 e0       	ldi	r26, 0x04	; 4
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb ec       	ldi	r30, 0xCB	; 203
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	7c 83       	std	Y+4, r23	; 0x04
    159c:	6b 83       	std	Y+3, r22	; 0x03
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	fc 01       	movw	r30, r24
    15a8:	31 83       	std	Z+1, r19	; 0x01
    15aa:	20 83       	st	Z, r18
    15ac:	0a d0       	rcall	.+20     	; 0x15c2 <_ZN4erom6Access18device_memory_sizeEv>
    15ae:	9c 01       	movw	r18, r24
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	33 83       	std	Z+3, r19	; 0x03
    15b8:	22 83       	std	Z+2, r18	; 0x02
    15ba:	24 96       	adiw	r28, 0x04	; 4
    15bc:	e2 e0       	ldi	r30, 0x02	; 2
    15be:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000015c2 <_ZN4erom6Access18device_memory_sizeEv>:
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	e2 e0       	ldi	r30, 0x02	; 2
    15d4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000015d8 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    15d8:	a4 e0       	ldi	r26, 0x04	; 4
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 ef       	ldi	r30, 0xF2	; 242
    15de:	fa e0       	ldi	r31, 0x0A	; 10
    15e0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	7c 83       	std	Y+4, r23	; 0x04
    15ea:	6b 83       	std	Y+3, r22	; 0x03
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	49 f4       	brne	.+18     	; 0x1606 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	29 f4       	brne	.+10     	; 0x1606 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    15fc:	ab df       	rcall	.-170    	; 0x1554 <_ZN4erom6Access8instanceEv>
    15fe:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZN4erom6accessE+0x1>
    1602:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1606:	24 96       	adiw	r28, 0x04	; 4
    1608:	e2 e0       	ldi	r30, 0x02	; 2
    160a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000160e <_GLOBAL__sub_I__ZN4erom6accessE>:
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    161a:	6f ef       	ldi	r22, 0xFF	; 255
    161c:	7f ef       	ldi	r23, 0xFF	; 255
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	da df       	rcall	.-76     	; 0x15d8 <_Z41__static_initialization_and_destruction_0ii>
    1624:	e2 e0       	ldi	r30, 0x02	; 2
    1626:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000162a <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1636:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	e2 e0       	ldi	r30, 0x02	; 2
    1644:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001648 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1648:	a8 e0       	ldi	r26, 0x08	; 8
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ea e2       	ldi	r30, 0x2A	; 42
    164e:	fb e0       	ldi	r31, 0x0B	; 11
    1650:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1654:	98 87       	std	Y+8, r25	; 0x08
    1656:	8f 83       	std	Y+7, r24	; 0x07
    1658:	8f 81       	ldd	r24, Y+7	; 0x07
    165a:	98 85       	ldd	r25, Y+8	; 0x08
    165c:	2d e8       	ldi	r18, 0x8D	; 141
    165e:	31 e0       	ldi	r19, 0x01	; 1
    1660:	fc 01       	movw	r30, r24
    1662:	31 83       	std	Z+1, r19	; 0x01
    1664:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1666:	e1 df       	rcall	.-62     	; 0x162a <_ZL7elapsedv>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	ad 83       	std	Y+5, r26	; 0x05
    1672:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
    1678:	3d c0       	rjmp	.+122    	; 0x16f4 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    167a:	2f 81       	ldd	r18, Y+7	; 0x07
    167c:	38 85       	ldd	r19, Y+8	; 0x08
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	82 0f       	add	r24, r18
    1684:	93 1f       	adc	r25, r19
    1686:	82 57       	subi	r24, 0x72	; 114
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    168e:	2f 81       	ldd	r18, Y+7	; 0x07
    1690:	38 85       	ldd	r19, Y+8	; 0x08
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	45 96       	adiw	r24, 0x15	; 21
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	82 0f       	add	r24, r18
    169e:	93 1f       	adc	r25, r19
    16a0:	fc 01       	movw	r30, r24
    16a2:	11 82       	std	Z+1, r1	; 0x01
    16a4:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    16a6:	2f 81       	ldd	r18, Y+7	; 0x07
    16a8:	38 85       	ldd	r19, Y+8	; 0x08
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	9c 01       	movw	r18, r24
    16bc:	2e 5f       	subi	r18, 0xFE	; 254
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	ad 81       	ldd	r26, Y+5	; 0x05
    16c6:	be 81       	ldd	r27, Y+6	; 0x06
    16c8:	f9 01       	movw	r30, r18
    16ca:	80 83       	st	Z, r24
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	a2 83       	std	Z+2, r26	; 0x02
    16d0:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    16d2:	2f 81       	ldd	r18, Y+7	; 0x07
    16d4:	38 85       	ldd	r19, Y+8	; 0x08
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	cd 96       	adiw	r24, 0x3d	; 61
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	fc 01       	movw	r30, r24
    16e6:	11 82       	std	Z+1, r1	; 0x01
    16e8:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	0a 97       	sbiw	r24, 0x0a	; 10
    16fa:	0c f4       	brge	.+2      	; 0x16fe <_ZN11SimpleTimerC1Ev+0xb6>
    16fc:	be cf       	rjmp	.-132    	; 0x167a <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    16fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1700:	98 85       	ldd	r25, Y+8	; 0x08
    1702:	84 55       	subi	r24, 0x54	; 84
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	fc 01       	movw	r30, r24
    1708:	11 82       	std	Z+1, r1	; 0x01
    170a:	10 82       	st	Z, r1
}
    170c:	28 96       	adiw	r28, 0x08	; 8
    170e:	e2 e0       	ldi	r30, 0x02	; 2
    1710:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001714 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    1714:	a8 e0       	ldi	r26, 0x08	; 8
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e0 e9       	ldi	r30, 0x90	; 144
    171a:	fb e0       	ldi	r31, 0x0B	; 11
    171c:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    1720:	98 87       	std	Y+8, r25	; 0x08
    1722:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    1724:	82 df       	rcall	.-252    	; 0x162a <_ZL7elapsedv>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8b 83       	std	Y+3, r24	; 0x03
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	ad 83       	std	Y+5, r26	; 0x05
    1730:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	25 c1       	rjmp	.+586    	; 0x1982 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1738:	2f 81       	ldd	r18, Y+7	; 0x07
    173a:	38 85       	ldd	r19, Y+8	; 0x08
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	84 5b       	subi	r24, 0xB4	; 180
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	fc 01       	movw	r30, r24
    174e:	11 82       	std	Z+1, r1	; 0x01
    1750:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1752:	2f 81       	ldd	r18, Y+7	; 0x07
    1754:	38 85       	ldd	r19, Y+8	; 0x08
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	45 96       	adiw	r24, 0x15	; 21
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	82 0f       	add	r24, r18
    1762:	93 1f       	adc	r25, r19
    1764:	fc 01       	movw	r30, r24
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	89 2b       	or	r24, r25
    176c:	09 f4       	brne	.+2      	; 0x1770 <_ZN11SimpleTimer3runEv+0x5c>
    176e:	04 c1       	rjmp	.+520    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1770:	2f 81       	ldd	r18, Y+7	; 0x07
    1772:	38 85       	ldd	r19, Y+8	; 0x08
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	02 96       	adiw	r24, 0x02	; 2
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	a2 81       	ldd	r26, Z+2	; 0x02
    178e:	b3 81       	ldd	r27, Z+3	; 0x03
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	4d 81       	ldd	r20, Y+5	; 0x05
    1796:	5e 81       	ldd	r21, Y+6	; 0x06
    1798:	79 01       	movw	r14, r18
    179a:	8a 01       	movw	r16, r20
    179c:	e8 1a       	sub	r14, r24
    179e:	f9 0a       	sbc	r15, r25
    17a0:	0a 0b       	sbc	r16, r26
    17a2:	1b 0b       	sbc	r17, r27
    17a4:	d8 01       	movw	r26, r16
    17a6:	c7 01       	movw	r24, r14
    17a8:	4f 81       	ldd	r20, Y+7	; 0x07
    17aa:	58 85       	ldd	r21, Y+8	; 0x08
    17ac:	29 81       	ldd	r18, Y+1	; 0x01
    17ae:	3a 81       	ldd	r19, Y+2	; 0x02
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	24 0f       	add	r18, r20
    17ba:	35 1f       	adc	r19, r21
    17bc:	22 5c       	subi	r18, 0xC2	; 194
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	31 81       	ldd	r19, Z+1	; 0x01
    17c6:	42 81       	ldd	r20, Z+2	; 0x02
    17c8:	53 81       	ldd	r21, Z+3	; 0x03
    17ca:	82 17       	cp	r24, r18
    17cc:	93 07       	cpc	r25, r19
    17ce:	a4 07       	cpc	r26, r20
    17d0:	b5 07       	cpc	r27, r21
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <_ZN11SimpleTimer3runEv+0xc2>
    17d4:	d1 c0       	rjmp	.+418    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    17d6:	2f 81       	ldd	r18, Y+7	; 0x07
    17d8:	38 85       	ldd	r19, Y+8	; 0x08
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	fc 01       	movw	r30, r24
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	a2 81       	ldd	r26, Z+2	; 0x02
    17f4:	b3 81       	ldd	r27, Z+3	; 0x03
    17f6:	4f 81       	ldd	r20, Y+7	; 0x07
    17f8:	58 85       	ldd	r21, Y+8	; 0x08
    17fa:	29 81       	ldd	r18, Y+1	; 0x01
    17fc:	3a 81       	ldd	r19, Y+2	; 0x02
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	24 0f       	add	r18, r20
    1808:	35 1f       	adc	r19, r21
    180a:	22 5c       	subi	r18, 0xC2	; 194
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	42 81       	ldd	r20, Z+2	; 0x02
    1816:	53 81       	ldd	r21, Z+3	; 0x03
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	a4 1f       	adc	r26, r20
    181e:	b5 1f       	adc	r27, r21
    1820:	4f 81       	ldd	r20, Y+7	; 0x07
    1822:	58 85       	ldd	r21, Y+8	; 0x08
    1824:	29 81       	ldd	r18, Y+1	; 0x01
    1826:	3a 81       	ldd	r19, Y+2	; 0x02
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	24 0f       	add	r18, r20
    1832:	35 1f       	adc	r19, r21
    1834:	2e 5f       	subi	r18, 0xFE	; 254
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	f9 01       	movw	r30, r18
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1842:	2f 81       	ldd	r18, Y+7	; 0x07
    1844:	38 85       	ldd	r19, Y+8	; 0x08
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	82 57       	subi	r24, 0x72	; 114
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <_ZN11SimpleTimer3runEv+0x148>
    185a:	8e c0       	rjmp	.+284    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    185c:	2f 81       	ldd	r18, Y+7	; 0x07
    185e:	38 85       	ldd	r19, Y+8	; 0x08
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	c3 96       	adiw	r24, 0x33	; 51
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	fc 01       	movw	r30, r24
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	89 2b       	or	r24, r25
    1876:	81 f4       	brne	.+32     	; 0x1898 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1878:	2f 81       	ldd	r18, Y+7	; 0x07
    187a:	38 85       	ldd	r19, Y+8	; 0x08
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	84 5b       	subi	r24, 0xB4	; 180
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	31 83       	std	Z+1, r19	; 0x01
    1894:	20 83       	st	Z, r18
    1896:	70 c0       	rjmp	.+224    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1898:	2f 81       	ldd	r18, Y+7	; 0x07
    189a:	38 85       	ldd	r19, Y+8	; 0x08
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	cd 96       	adiw	r24, 0x3d	; 61
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 81       	ld	r18, Z
    18ae:	31 81       	ldd	r19, Z+1	; 0x01
    18b0:	4f 81       	ldd	r20, Y+7	; 0x07
    18b2:	58 85       	ldd	r21, Y+8	; 0x08
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	c3 96       	adiw	r24, 0x33	; 51
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	84 0f       	add	r24, r20
    18c0:	95 1f       	adc	r25, r21
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	28 17       	cp	r18, r24
    18ca:	39 07       	cpc	r19, r25
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <_ZN11SimpleTimer3runEv+0x1bc>
    18ce:	54 c0       	rjmp	.+168    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    18d0:	2f 81       	ldd	r18, Y+7	; 0x07
    18d2:	38 85       	ldd	r19, Y+8	; 0x08
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	84 5b       	subi	r24, 0xB4	; 180
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	31 83       	std	Z+1, r19	; 0x01
    18ec:	20 83       	st	Z, r18
                        numRuns[i]++;
    18ee:	2f 81       	ldd	r18, Y+7	; 0x07
    18f0:	38 85       	ldd	r19, Y+8	; 0x08
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	cd 96       	adiw	r24, 0x3d	; 61
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	82 0f       	add	r24, r18
    18fe:	93 1f       	adc	r25, r19
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	9c 01       	movw	r18, r24
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	4f 81       	ldd	r20, Y+7	; 0x07
    190e:	58 85       	ldd	r21, Y+8	; 0x08
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	cd 96       	adiw	r24, 0x3d	; 61
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	84 0f       	add	r24, r20
    191c:	95 1f       	adc	r25, r21
    191e:	fc 01       	movw	r30, r24
    1920:	31 83       	std	Z+1, r19	; 0x01
    1922:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1924:	2f 81       	ldd	r18, Y+7	; 0x07
    1926:	38 85       	ldd	r19, Y+8	; 0x08
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	cd 96       	adiw	r24, 0x3d	; 61
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	82 0f       	add	r24, r18
    1934:	93 1f       	adc	r25, r19
    1936:	fc 01       	movw	r30, r24
    1938:	20 81       	ld	r18, Z
    193a:	31 81       	ldd	r19, Z+1	; 0x01
    193c:	4f 81       	ldd	r20, Y+7	; 0x07
    193e:	58 85       	ldd	r21, Y+8	; 0x08
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	c3 96       	adiw	r24, 0x33	; 51
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	84 0f       	add	r24, r20
    194c:	95 1f       	adc	r25, r21
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	7c f0       	brlt	.+30     	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    195a:	2f 81       	ldd	r18, Y+7	; 0x07
    195c:	38 85       	ldd	r19, Y+8	; 0x08
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	84 5b       	subi	r24, 0xB4	; 180
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	31 83       	std	Z+1, r19	; 0x01
    1976:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	0a 97       	sbiw	r24, 0x0a	; 10
    1988:	0c f4       	brge	.+2      	; 0x198c <_ZN11SimpleTimer3runEv+0x278>
    198a:	d6 ce       	rjmp	.-596    	; 0x1738 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    198c:	1a 82       	std	Y+2, r1	; 0x02
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	46 c0       	rjmp	.+140    	; 0x1a1e <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	84 5b       	subi	r24, 0xB4	; 180
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	91 05       	cpc	r25, r1
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <_ZN11SimpleTimer3runEv+0x2a4>
    19b2:	02 97       	sbiw	r24, 0x02	; 2
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    19b6:	2e c0       	rjmp	.+92     	; 0x1a14 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    19b8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ba:	38 85       	ldd	r19, Y+8	; 0x08
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	45 96       	adiw	r24, 0x15	; 21
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	fc 01       	movw	r30, r24
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	fc 01       	movw	r30, r24
    19d2:	09 95       	icall
                break;
    19d4:	1f c0       	rjmp	.+62     	; 0x1a14 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    19d6:	2f 81       	ldd	r18, Y+7	; 0x07
    19d8:	38 85       	ldd	r19, Y+8	; 0x08
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	45 96       	adiw	r24, 0x15	; 21
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	fc 01       	movw	r30, r24
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	fc 01       	movw	r30, r24
    19f0:	09 95       	icall
                deleteTimer(i);
    19f2:	8f 81       	ldd	r24, Y+7	; 0x07
    19f4:	98 85       	ldd	r25, Y+8	; 0x08
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	08 96       	adiw	r24, 0x08	; 8
    19fe:	fc 01       	movw	r30, r24
    1a00:	20 81       	ld	r18, Z
    1a02:	31 81       	ldd	r19, Z+1	; 0x01
    1a04:	49 81       	ldd	r20, Y+1	; 0x01
    1a06:	5a 81       	ldd	r21, Y+2	; 0x02
    1a08:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0a:	98 85       	ldd	r25, Y+8	; 0x08
    1a0c:	ba 01       	movw	r22, r20
    1a0e:	f9 01       	movw	r30, r18
    1a10:	09 95       	icall
                break;
    1a12:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	0a 97       	sbiw	r24, 0x0a	; 10
    1a24:	0c f4       	brge	.+2      	; 0x1a28 <_ZN11SimpleTimer3runEv+0x314>
    1a26:	b5 cf       	rjmp	.-150    	; 0x1992 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1a28:	28 96       	adiw	r28, 0x08	; 8
    1a2a:	e6 e0       	ldi	r30, 0x06	; 6
    1a2c:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00001a30 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1a30:	a4 e0       	ldi	r26, 0x04	; 4
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e1       	ldi	r30, 0x1E	; 30
    1a36:	fd e0       	ldi	r31, 0x0D	; 13
    1a38:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	84 55       	subi	r24, 0x54	; 84
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a50:	1c f0       	brlt	.+6      	; 0x1a58 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	9f ef       	ldi	r25, 0xFF	; 255
    1a56:	1f c0       	rjmp	.+62     	; 0x1a96 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a58:	1a 82       	std	Y+2, r1	; 0x02
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	45 96       	adiw	r24, 0x15	; 21
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	fc 01       	movw	r30, r24
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	89 2b       	or	r24, r25
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a90:	34 f3       	brlt	.-52     	; 0x1a5e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
}
    1a96:	24 96       	adiw	r28, 0x04	; 4
    1a98:	e2 e0       	ldi	r30, 0x02	; 2
    1a9a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001a9e <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1a9e:	ac e0       	ldi	r26, 0x0C	; 12
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e5       	ldi	r30, 0x55	; 85
    1aa4:	fd e0       	ldi	r31, 0x0D	; 13
    1aa6:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	4d 83       	std	Y+5, r20	; 0x05
    1ab0:	5e 83       	std	Y+6, r21	; 0x06
    1ab2:	6f 83       	std	Y+7, r22	; 0x07
    1ab4:	78 87       	std	Y+8, r23	; 0x08
    1ab6:	3a 87       	std	Y+10, r19	; 0x0a
    1ab8:	29 87       	std	Y+9, r18	; 0x09
    1aba:	1c 87       	std	Y+12, r17	; 0x0c
    1abc:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	b6 df       	rcall	.-148    	; 0x1a30 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	99 23       	and	r25, r25
    1ace:	1c f4       	brge	.+6      	; 0x1ad6 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	6b c0       	rjmp	.+214    	; 0x1bac <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	89 2b       	or	r24, r25
    1adc:	19 f4       	brne	.+6      	; 0x1ae4 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	64 c0       	rjmp	.+200    	; 0x1bac <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	82 0f       	add	r24, r18
    1af6:	93 1f       	adc	r25, r19
    1af8:	9c 01       	movw	r18, r24
    1afa:	22 5c       	subi	r18, 0xC2	; 194
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	af 81       	ldd	r26, Y+7	; 0x07
    1b04:	b8 85       	ldd	r27, Y+8	; 0x08
    1b06:	f9 01       	movw	r30, r18
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	45 96       	adiw	r24, 0x15	; 21
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	29 85       	ldd	r18, Y+9	; 0x09
    1b24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b26:	fc 01       	movw	r30, r24
    1b28:	31 83       	std	Z+1, r19	; 0x01
    1b2a:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	c3 96       	adiw	r24, 0x33	; 51
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b40:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b42:	fc 01       	movw	r30, r24
    1b44:	31 83       	std	Z+1, r19	; 0x01
    1b46:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1b48:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	82 57       	subi	r24, 0x72	; 114
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1b5e:	65 dd       	rcall	.-1334   	; 0x162a <_ZL7elapsedv>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	4b 81       	ldd	r20, Y+3	; 0x03
    1b66:	5c 81       	ldd	r21, Y+4	; 0x04
    1b68:	29 81       	ldd	r18, Y+1	; 0x01
    1b6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	24 0f       	add	r18, r20
    1b76:	35 1f       	adc	r19, r21
    1b78:	2e 5f       	subi	r18, 0xFE	; 254
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	84 55       	subi	r24, 0x54	; 84
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	9c 01       	movw	r18, r24
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	84 55       	subi	r24, 0x54	; 84
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	31 83       	std	Z+1, r19	; 0x01
    1ba6:	20 83       	st	Z, r18

    return freeTimer;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1bac:	2c 96       	adiw	r28, 0x0c	; 12
    1bae:	e4 e0       	ldi	r30, 0x04	; 4
    1bb0:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00001bb4 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1bb4:	a8 e0       	ldi	r26, 0x08	; 8
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    1bba:	fd e0       	ldi	r31, 0x0D	; 13
    1bbc:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	4b 83       	std	Y+3, r20	; 0x03
    1bc6:	5c 83       	std	Y+4, r21	; 0x04
    1bc8:	6d 83       	std	Y+5, r22	; 0x05
    1bca:	7e 83       	std	Y+6, r23	; 0x06
    1bcc:	38 87       	std	Y+8, r19	; 0x08
    1bce:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	06 96       	adiw	r24, 0x06	; 6
    1bdc:	dc 01       	movw	r26, r24
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	2f 81       	ldd	r18, Y+7	; 0x07
    1be4:	38 85       	ldd	r19, Y+8	; 0x08
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	ad 81       	ldd	r26, Y+5	; 0x05
    1bec:	be 81       	ldd	r27, Y+6	; 0x06
    1bee:	e9 80       	ldd	r14, Y+1	; 0x01
    1bf0:	fa 80       	ldd	r15, Y+2	; 0x02
    1bf2:	00 e0       	ldi	r16, 0x00	; 0
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	bd 01       	movw	r22, r26
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	09 95       	icall
}
    1bfe:	28 96       	adiw	r28, 0x08	; 8
    1c00:	e6 e0       	ldi	r30, 0x06	; 6
    1c02:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00001c06 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1c06:	a8 e0       	ldi	r26, 0x08	; 8
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e0       	ldi	r30, 0x09	; 9
    1c0c:	fe e0       	ldi	r31, 0x0E	; 14
    1c0e:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	4b 83       	std	Y+3, r20	; 0x03
    1c18:	5c 83       	std	Y+4, r21	; 0x04
    1c1a:	6d 83       	std	Y+5, r22	; 0x05
    1c1c:	7e 83       	std	Y+6, r23	; 0x06
    1c1e:	38 87       	std	Y+8, r19	; 0x08
    1c20:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	dc 01       	movw	r26, r24
    1c28:	8d 91       	ld	r24, X+
    1c2a:	9c 91       	ld	r25, X
    1c2c:	06 96       	adiw	r24, 0x06	; 6
    1c2e:	dc 01       	movw	r26, r24
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	2f 81       	ldd	r18, Y+7	; 0x07
    1c36:	38 85       	ldd	r19, Y+8	; 0x08
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	ad 81       	ldd	r26, Y+5	; 0x05
    1c3e:	be 81       	ldd	r27, Y+6	; 0x06
    1c40:	e9 80       	ldd	r14, Y+1	; 0x01
    1c42:	fa 80       	ldd	r15, Y+2	; 0x02
    1c44:	01 e0       	ldi	r16, 0x01	; 1
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	ac 01       	movw	r20, r24
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	09 95       	icall
}
    1c50:	28 96       	adiw	r28, 0x08	; 8
    1c52:	e6 e0       	ldi	r30, 0x06	; 6
    1c54:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00001c58 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1c58:	a4 e0       	ldi	r26, 0x04	; 4
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	fe e0       	ldi	r31, 0x0E	; 14
    1c60:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	7c 83       	std	Y+4, r23	; 0x04
    1c6a:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	0a 97       	sbiw	r24, 0x0a	; 10
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1c74:	69 c0       	rjmp	.+210    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	84 55       	subi	r24, 0x54	; 84
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	89 2b       	or	r24, r25
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1c88:	5f c0       	rjmp	.+190    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1c8a:	29 81       	ldd	r18, Y+1	; 0x01
    1c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	45 96       	adiw	r24, 0x15	; 21
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	89 2b       	or	r24, r25
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1ca6:	50 c0       	rjmp	.+160    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1ca8:	29 81       	ldd	r18, Y+1	; 0x01
    1caa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	45 96       	adiw	r24, 0x15	; 21
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	fc 01       	movw	r30, r24
    1cbc:	11 82       	std	Z+1, r1	; 0x01
    1cbe:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1cc0:	29 81       	ldd	r18, Y+1	; 0x01
    1cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	82 0f       	add	r24, r18
    1cca:	93 1f       	adc	r25, r19
    1ccc:	82 57       	subi	r24, 0x72	; 114
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1cd4:	29 81       	ldd	r18, Y+1	; 0x01
    1cd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	84 5b       	subi	r24, 0xB4	; 180
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	fc 01       	movw	r30, r24
    1cea:	11 82       	std	Z+1, r1	; 0x01
    1cec:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1cee:	29 81       	ldd	r18, Y+1	; 0x01
    1cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	ce 96       	adiw	r24, 0x3e	; 62
    1d04:	fc 01       	movw	r30, r24
    1d06:	10 82       	st	Z, r1
    1d08:	11 82       	std	Z+1, r1	; 0x01
    1d0a:	12 82       	std	Z+2, r1	; 0x02
    1d0c:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1d0e:	29 81       	ldd	r18, Y+1	; 0x01
    1d10:	3a 81       	ldd	r19, Y+2	; 0x02
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	cd 96       	adiw	r24, 0x3d	; 61
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	fc 01       	movw	r30, r24
    1d22:	11 82       	std	Z+1, r1	; 0x01
    1d24:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	84 55       	subi	r24, 0x54	; 84
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	9c 01       	movw	r18, r24
    1d36:	21 50       	subi	r18, 0x01	; 1
    1d38:	31 09       	sbc	r19, r1
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	84 55       	subi	r24, 0x54	; 84
    1d40:	9f 4f       	sbci	r25, 0xFF	; 255
    1d42:	fc 01       	movw	r30, r24
    1d44:	31 83       	std	Z+1, r19	; 0x01
    1d46:	20 83       	st	Z, r18
    }
}
    1d48:	24 96       	adiw	r28, 0x04	; 4
    1d4a:	e2 e0       	ldi	r30, 0x02	; 2
    1d4c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001d50 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1d50:	a4 e0       	ldi	r26, 0x04	; 4
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ee ea       	ldi	r30, 0xAE	; 174
    1d56:	fe e0       	ldi	r31, 0x0E	; 14
    1d58:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	7c 83       	std	Y+4, r23	; 0x04
    1d62:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	0a 97       	sbiw	r24, 0x0a	; 10
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1d6e:	5d dc       	rcall	.-1862   	; 0x162a <_ZL7elapsedv>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	49 81       	ldd	r20, Y+1	; 0x01
    1d76:	5a 81       	ldd	r21, Y+2	; 0x02
    1d78:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	24 0f       	add	r18, r20
    1d86:	35 1f       	adc	r19, r21
    1d88:	2e 5f       	subi	r18, 0xFE	; 254
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
}
    1d96:	24 96       	adiw	r28, 0x04	; 4
    1d98:	e2 e0       	ldi	r30, 0x02	; 2
    1d9a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001d9e <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1d9e:	a4 e0       	ldi	r26, 0x04	; 4
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 ed       	ldi	r30, 0xD5	; 213
    1da4:	fe e0       	ldi	r31, 0x0E	; 14
    1da6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	7c 83       	std	Y+4, r23	; 0x04
    1db0:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	0a 97       	sbiw	r24, 0x0a	; 10
    1db8:	14 f0       	brlt	.+4      	; 0x1dbe <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	0a c0       	rjmp	.+20     	; 0x1dd2 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1dbe:	29 81       	ldd	r18, Y+1	; 0x01
    1dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	82 0f       	add	r24, r18
    1dc8:	93 1f       	adc	r25, r19
    1dca:	82 57       	subi	r24, 0x72	; 114
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	fc 01       	movw	r30, r24
    1dd0:	80 81       	ld	r24, Z
}
    1dd2:	24 96       	adiw	r28, 0x04	; 4
    1dd4:	e2 e0       	ldi	r30, 0x02	; 2
    1dd6:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001dda <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1dda:	a4 e0       	ldi	r26, 0x04	; 4
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 ef       	ldi	r30, 0xF3	; 243
    1de0:	fe e0       	ldi	r31, 0x0E	; 14
    1de2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	7c 83       	std	Y+4, r23	; 0x04
    1dec:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	0a 97       	sbiw	r24, 0x0a	; 10
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1df6:	0b c0       	rjmp	.+22     	; 0x1e0e <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1df8:	29 81       	ldd	r18, Y+1	; 0x01
    1dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	82 0f       	add	r24, r18
    1e02:	93 1f       	adc	r25, r19
    1e04:	82 57       	subi	r24, 0x72	; 114
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 83       	st	Z, r18
}
    1e0e:	24 96       	adiw	r28, 0x04	; 4
    1e10:	e2 e0       	ldi	r30, 0x02	; 2
    1e12:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001e16 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1e16:	a4 e0       	ldi	r26, 0x04	; 4
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e1 e1       	ldi	r30, 0x11	; 17
    1e1c:	ff e0       	ldi	r31, 0x0F	; 15
    1e1e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	7c 83       	std	Y+4, r23	; 0x04
    1e28:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	0a 97       	sbiw	r24, 0x0a	; 10
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1e32:	0a c0       	rjmp	.+20     	; 0x1e48 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    1e34:	29 81       	ldd	r18, Y+1	; 0x01
    1e36:	3a 81       	ldd	r19, Y+2	; 0x02
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	82 57       	subi	r24, 0x72	; 114
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	fc 01       	movw	r30, r24
    1e46:	10 82       	st	Z, r1
}
    1e48:	24 96       	adiw	r28, 0x04	; 4
    1e4a:	e2 e0       	ldi	r30, 0x02	; 2
    1e4c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001e50 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    1e50:	cf 92       	push	r12
    1e52:	ef 92       	push	r14
    1e54:	0f 93       	push	r16
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <_ZN7LCDBaseC1Ev+0xc>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f7 e0       	ldi	r31, 0x07	; 7
    1e6c:	cf 2e       	mov	r12, r31
    1e6e:	f0 2d       	mov	r31, r0
    1e70:	0f 2e       	mov	r0, r31
    1e72:	f6 e0       	ldi	r31, 0x06	; 6
    1e74:	ef 2e       	mov	r14, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	05 e0       	ldi	r16, 0x05	; 5
    1e7a:	24 e0       	ldi	r18, 0x04	; 4
    1e7c:	49 e0       	ldi	r20, 0x09	; 9
    1e7e:	68 e0       	ldi	r22, 0x08	; 8
    1e80:	21 d8       	rcall	.-4030   	; 0xec4 <_ZN13LiquidCrystalC1Ehhhhhh>
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	23 ea       	ldi	r18, 0xA3	; 163
    1e88:	31 e0       	ldi	r19, 0x01	; 1
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	31 83       	std	Z+1, r19	; 0x01
    1e8e:	20 83       	st	Z, r18
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	2a e0       	ldi	r18, 0x0A	; 10
    1e96:	e5 e1       	ldi	r30, 0x15	; 21
    1e98:	f1 e0       	ldi	r31, 0x01	; 1
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	58 96       	adiw	r26, 0x18	; 24
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	2a 95       	dec	r18
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <_ZN7LCDBaseC1Ev+0x4e>
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	25 e0       	ldi	r18, 0x05	; 5
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	fc 01       	movw	r30, r24
    1eb0:	33 a3       	std	Z+35, r19	; 0x23
    1eb2:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	08 d0       	rcall	.+16     	; 0x1eca <_ZN7LCDBase4InitEv>
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	0f 91       	pop	r16
    1ec4:	ef 90       	pop	r14
    1ec6:	cf 90       	pop	r12
    1ec8:	08 95       	ret

00001eca <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    1eca:	a2 e0       	ldi	r26, 0x02	; 2
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	42 e0       	ldi	r20, 0x02	; 2
    1ee2:	60 e1       	ldi	r22, 0x10	; 16
    1ee4:	bd d8       	rcall	.-3718   	; 0x1060 <_ZN13LiquidCrystal5beginEhhh>
    clear();
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	b4 d9       	rcall	.-3224   	; 0x1254 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	c3 d9       	rcall	.-3194   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>

}
    1ef6:	22 96       	adiw	r28, 0x02	; 2
    1ef8:	e2 e0       	ldi	r30, 0x02	; 2
    1efa:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001efe <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    1efe:	a4 e0       	ldi	r26, 0x04	; 4
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e8       	ldi	r30, 0x85	; 133
    1f04:	ff e0       	ldi	r31, 0x0F	; 15
    1f06:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	7c 83       	std	Y+4, r23	; 0x04
    1f10:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	42 2f       	mov	r20, r18
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	af d9       	rcall	.-3234   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    1f1e:	2f e2       	ldi	r18, 0x2F	; 47
    1f20:	33 e0       	ldi	r19, 0x03	; 3
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	b9 01       	movw	r22, r18
    1f28:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
}
    1f2c:	24 96       	adiw	r28, 0x04	; 4
    1f2e:	e2 e0       	ldi	r30, 0x02	; 2
    1f30:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001f34 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    1f34:	a6 e0       	ldi	r26, 0x06	; 6
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e0 ea       	ldi	r30, 0xA0	; 160
    1f3a:	ff e0       	ldi	r31, 0x0F	; 15
    1f3c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	7c 83       	std	Y+4, r23	; 0x04
    1f46:	6b 83       	std	Y+3, r22	; 0x03
    1f48:	5e 83       	std	Y+6, r21	; 0x06
    1f4a:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	b9 01       	movw	r22, r18
    1f56:	d3 df       	rcall	.-90     	; 0x1efe <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    1f58:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	42 2f       	mov	r20, r18
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	8c d9       	rcall	.-3304   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	0e 94 34 26 	call	0x4c68	; 0x4c68 <_ZN5Print5printERK6String>
}
    1f72:	26 96       	adiw	r28, 0x06	; 6
    1f74:	e2 e0       	ldi	r30, 0x02	; 2
    1f76:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001f7a <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    1f7a:	a4 e0       	ldi	r26, 0x04	; 4
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	69 d0       	rcall	.+210    	; 0x2062 <_ZN7LCDBase6getKeyEv>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	91 f0       	breq	.+36     	; 0x1fc2 <_ZN7LCDBase14DetectKeyPressEv+0x48>
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <_ZN7LCDBase14DetectKeyPressEv+0x34>
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	49 f0       	breq	.+18     	; 0x1fba <_ZN7LCDBase14DetectKeyPressEv+0x40>
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <_ZN7LCDBase14DetectKeyPressEv+0x44>
    1fac:	10 c0       	rjmp	.+32     	; 0x1fce <_ZN7LCDBase14DetectKeyPressEv+0x54>
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	49 f0       	breq	.+18     	; 0x1fc6 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    1fb4:	04 97       	sbiw	r24, 0x04	; 4
    1fb6:	49 f0       	breq	.+18     	; 0x1fca <_ZN7LCDBase14DetectKeyPressEv+0x50>
    1fb8:	0a c0       	rjmp	.+20     	; 0x1fce <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    1fce:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    1fd0:	24 96       	adiw	r28, 0x04	; 4
    1fd2:	e2 e0       	ldi	r30, 0x02	; 2
    1fd4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00001fd8 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    1fd8:	a6 e0       	ldi	r26, 0x06	; 6
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1fde:	ff e0       	ldi	r31, 0x0F	; 15
    1fe0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	7e 83       	std	Y+6, r23	; 0x06
    1fea:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    1fec:	1a 82       	std	Y+2, r1	; 0x02
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	1a c0       	rjmp	.+52     	; 0x2026 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	0c 96       	adiw	r24, 0x0c	; 12
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	82 0f       	add	r24, r18
    2002:	93 1f       	adc	r25, r19
    2004:	fc 01       	movw	r30, r24
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	9c 01       	movw	r18, r24
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	82 17       	cp	r24, r18
    2012:	93 07       	cpc	r25, r19
    2014:	18 f4       	brcc	.+6      	; 0x201c <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	1f c0       	rjmp	.+62     	; 0x205a <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	22 a1       	ldd	r18, Z+34	; 0x22
    202e:	33 a1       	ldd	r19, Z+35	; 0x23
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	82 17       	cp	r24, r18
    2036:	93 07       	cpc	r25, r19
    2038:	e4 f2       	brlt	.-72     	; 0x1ff2 <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	fc 01       	movw	r30, r24
    2040:	22 a1       	ldd	r18, Z+34	; 0x22
    2042:	33 a1       	ldd	r19, Z+35	; 0x23
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	82 17       	cp	r24, r18
    204a:	93 07       	cpc	r25, r19
    204c:	24 f0       	brlt	.+8      	; 0x2056 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
}
    205a:	26 96       	adiw	r28, 0x06	; 6
    205c:	e2 e0       	ldi	r30, 0x02	; 2
    205e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002062 <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    2062:	a6 e0       	ldi	r26, 0x06	; 6
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 35 28 	call	0x506a	; 0x506a <analogRead>
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    207c:	29 81       	ldd	r18, Y+1	; 0x01
    207e:	3a 81       	ldd	r19, Y+2	; 0x02
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	b9 01       	movw	r22, r18
    2086:	a8 df       	rcall	.-176    	; 0x1fd8 <_ZN7LCDBase13getKeyFromValEj>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2090:	26 96       	adiw	r28, 0x06	; 6
    2092:	e2 e0       	ldi	r30, 0x02	; 2
    2094:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002098 <_ZN7MathExt16CalculateAverageEPii>:
                       std::bind2nd(std::minus<double>(), mean));
        double sq_sum = std::inner_product(diff.begin(), diff.end(), diff.begin(), 0.0);
        double stdev = sqrt(sq_sum / vec.size());
        return stdev;
    }
    double CalculateAverage(int* arr, int number) {
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	66 97       	sbiw	r28, 0x16	; 22
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	98 8b       	std	Y+16, r25	; 0x10
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
    20b8:	7a 8b       	std	Y+18, r23	; 0x12
    20ba:	69 8b       	std	Y+17, r22	; 0x11
        int i;
        int max, min;
        double avg;
        long amount = 0;
    20bc:	1f 82       	std	Y+7, r1	; 0x07
    20be:	18 86       	std	Y+8, r1	; 0x08
    20c0:	19 86       	std	Y+9, r1	; 0x09
    20c2:	1a 86       	std	Y+10, r1	; 0x0a
        if(number <= 0) {
    20c4:	89 89       	ldd	r24, Y+17	; 0x11
    20c6:	9a 89       	ldd	r25, Y+18	; 0x12
    20c8:	18 16       	cp	r1, r24
    20ca:	19 06       	cpc	r1, r25
    20cc:	5c f0       	brlt	.+22     	; 0x20e4 <_ZN7MathExt16CalculateAverageEPii+0x4c>
            Serial.println(F("Error number for the array to avraging!/n"));
    20ce:	80 e4       	ldi	r24, 0x40	; 64
    20d0:	93 e0       	ldi	r25, 0x03	; 3
    20d2:	bc 01       	movw	r22, r24
    20d4:	8d e2       	ldi	r24, 0x2D	; 45
    20d6:	95 e0       	ldi	r25, 0x05	; 5
    20d8:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <_ZN5Print7printlnEPK19__FlashStringHelper>
            return 0;
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	dc 01       	movw	r26, r24
    20e2:	2b c1       	rjmp	.+598    	; 0x233a <_ZN7MathExt16CalculateAverageEPii+0x2a2>
        }
        if(number < 5) { //less than 5, calculated directly statistics
    20e4:	89 89       	ldd	r24, Y+17	; 0x11
    20e6:	9a 89       	ldd	r25, Y+18	; 0x12
    20e8:	05 97       	sbiw	r24, 0x05	; 5
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <_ZN7MathExt16CalculateAverageEPii+0x56>
    20ec:	49 c0       	rjmp	.+146    	; 0x2180 <_ZN7MathExt16CalculateAverageEPii+0xe8>
            for(i = 0; i < number; i++) {
    20ee:	1a 82       	std	Y+2, r1	; 0x02
    20f0:	19 82       	std	Y+1, r1	; 0x01
    20f2:	20 c0       	rjmp	.+64     	; 0x2134 <_ZN7MathExt16CalculateAverageEPii+0x9c>
                amount += arr[i];
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	2f 85       	ldd	r18, Y+15	; 0x0f
    20fe:	38 89       	ldd	r19, Y+16	; 0x10
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	fc 01       	movw	r30, r24
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	09 2e       	mov	r0, r25
    210c:	00 0c       	add	r0, r0
    210e:	aa 0b       	sbc	r26, r26
    2110:	bb 0b       	sbc	r27, r27
    2112:	2f 81       	ldd	r18, Y+7	; 0x07
    2114:	38 85       	ldd	r19, Y+8	; 0x08
    2116:	49 85       	ldd	r20, Y+9	; 0x09
    2118:	5a 85       	ldd	r21, Y+10	; 0x0a
    211a:	82 0f       	add	r24, r18
    211c:	93 1f       	adc	r25, r19
    211e:	a4 1f       	adc	r26, r20
    2120:	b5 1f       	adc	r27, r21
    2122:	8f 83       	std	Y+7, r24	; 0x07
    2124:	98 87       	std	Y+8, r25	; 0x08
    2126:	a9 87       	std	Y+9, r26	; 0x09
    2128:	ba 87       	std	Y+10, r27	; 0x0a
        if(number <= 0) {
            Serial.println(F("Error number for the array to avraging!/n"));
            return 0;
        }
        if(number < 5) { //less than 5, calculated directly statistics
            for(i = 0; i < number; i++) {
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	29 81       	ldd	r18, Y+1	; 0x01
    2136:	3a 81       	ldd	r19, Y+2	; 0x02
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	9a 89       	ldd	r25, Y+18	; 0x12
    213c:	28 17       	cp	r18, r24
    213e:	39 07       	cpc	r19, r25
    2140:	cc f2       	brlt	.-78     	; 0x20f4 <_ZN7MathExt16CalculateAverageEPii+0x5c>
                amount += arr[i];
            }
            avg = amount / number;
    2142:	89 89       	ldd	r24, Y+17	; 0x11
    2144:	9a 89       	ldd	r25, Y+18	; 0x12
    2146:	9c 01       	movw	r18, r24
    2148:	99 0f       	add	r25, r25
    214a:	44 0b       	sbc	r20, r20
    214c:	55 0b       	sbc	r21, r21
    214e:	8f 81       	ldd	r24, Y+7	; 0x07
    2150:	98 85       	ldd	r25, Y+8	; 0x08
    2152:	a9 85       	ldd	r26, Y+9	; 0x09
    2154:	ba 85       	ldd	r27, Y+10	; 0x0a
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodsi4>
    215e:	da 01       	movw	r26, r20
    2160:	c9 01       	movw	r24, r18
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__floatsisf>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8b 87       	std	Y+11, r24	; 0x0b
    2170:	9c 87       	std	Y+12, r25	; 0x0c
    2172:	ad 87       	std	Y+13, r26	; 0x0d
    2174:	be 87       	std	Y+14, r27	; 0x0e
            return avg;
    2176:	8b 85       	ldd	r24, Y+11	; 0x0b
    2178:	9c 85       	ldd	r25, Y+12	; 0x0c
    217a:	ad 85       	ldd	r26, Y+13	; 0x0d
    217c:	be 85       	ldd	r27, Y+14	; 0x0e
    217e:	dd c0       	rjmp	.+442    	; 0x233a <_ZN7MathExt16CalculateAverageEPii+0x2a2>
        }
        else {
            if(arr[0] < arr[1]) {
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	98 89       	ldd	r25, Y+16	; 0x10
    2184:	fc 01       	movw	r30, r24
    2186:	20 81       	ld	r18, Z
    2188:	31 81       	ldd	r19, Z+1	; 0x01
    218a:	8f 85       	ldd	r24, Y+15	; 0x0f
    218c:	98 89       	ldd	r25, Y+16	; 0x10
    218e:	02 96       	adiw	r24, 0x02	; 2
    2190:	fc 01       	movw	r30, r24
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	28 17       	cp	r18, r24
    2198:	39 07       	cpc	r19, r25
    219a:	7c f4       	brge	.+30     	; 0x21ba <_ZN7MathExt16CalculateAverageEPii+0x122>
                min = arr[0];
    219c:	8f 85       	ldd	r24, Y+15	; 0x0f
    219e:	98 89       	ldd	r25, Y+16	; 0x10
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
                max = arr[1];
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	fc 01       	movw	r30, r24
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	9c 83       	std	Y+4, r25	; 0x04
    21b6:	8b 83       	std	Y+3, r24	; 0x03
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <_ZN7MathExt16CalculateAverageEPii+0x13e>
            }
            else {
                min = arr[1];
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	98 89       	ldd	r25, Y+16	; 0x10
    21be:	fc 01       	movw	r30, r24
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
                max = arr[0];
    21c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ca:	98 89       	ldd	r25, Y+16	; 0x10
    21cc:	fc 01       	movw	r30, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
            }
            for(i = 2; i < number; i++) {
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	80 c0       	rjmp	.+256    	; 0x22e0 <_ZN7MathExt16CalculateAverageEPii+0x248>
                if(arr[i] < min) {
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    21ea:	38 89       	ldd	r19, Y+16	; 0x10
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	fc 01       	movw	r30, r24
    21f2:	20 81       	ld	r18, Z
    21f4:	31 81       	ldd	r19, Z+1	; 0x01
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	28 17       	cp	r18, r24
    21fc:	39 07       	cpc	r19, r25
    21fe:	04 f5       	brge	.+64     	; 0x2240 <_ZN7MathExt16CalculateAverageEPii+0x1a8>
                    amount += min;      //arr<min
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	09 2e       	mov	r0, r25
    2206:	00 0c       	add	r0, r0
    2208:	aa 0b       	sbc	r26, r26
    220a:	bb 0b       	sbc	r27, r27
    220c:	2f 81       	ldd	r18, Y+7	; 0x07
    220e:	38 85       	ldd	r19, Y+8	; 0x08
    2210:	49 85       	ldd	r20, Y+9	; 0x09
    2212:	5a 85       	ldd	r21, Y+10	; 0x0a
    2214:	82 0f       	add	r24, r18
    2216:	93 1f       	adc	r25, r19
    2218:	a4 1f       	adc	r26, r20
    221a:	b5 1f       	adc	r27, r21
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
                    min = arr[i];
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	2f 85       	ldd	r18, Y+15	; 0x0f
    222e:	38 89       	ldd	r19, Y+16	; 0x10
    2230:	82 0f       	add	r24, r18
    2232:	93 1f       	adc	r25, r19
    2234:	fc 01       	movw	r30, r24
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	4b c0       	rjmp	.+150    	; 0x22d6 <_ZN7MathExt16CalculateAverageEPii+0x23e>
                }
                else {
                    if(arr[i] > max) {
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	2f 85       	ldd	r18, Y+15	; 0x0f
    224a:	38 89       	ldd	r19, Y+16	; 0x10
    224c:	82 0f       	add	r24, r18
    224e:	93 1f       	adc	r25, r19
    2250:	fc 01       	movw	r30, r24
    2252:	20 81       	ld	r18, Z
    2254:	31 81       	ldd	r19, Z+1	; 0x01
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	82 17       	cp	r24, r18
    225c:	93 07       	cpc	r25, r19
    225e:	04 f5       	brge	.+64     	; 0x22a0 <_ZN7MathExt16CalculateAverageEPii+0x208>
                        amount += max;  //arr>max
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	09 2e       	mov	r0, r25
    2266:	00 0c       	add	r0, r0
    2268:	aa 0b       	sbc	r26, r26
    226a:	bb 0b       	sbc	r27, r27
    226c:	2f 81       	ldd	r18, Y+7	; 0x07
    226e:	38 85       	ldd	r19, Y+8	; 0x08
    2270:	49 85       	ldd	r20, Y+9	; 0x09
    2272:	5a 85       	ldd	r21, Y+10	; 0x0a
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	a4 1f       	adc	r26, r20
    227a:	b5 1f       	adc	r27, r21
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	a9 87       	std	Y+9, r26	; 0x09
    2282:	ba 87       	std	Y+10, r27	; 0x0a
                        max = arr[i];
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	2f 85       	ldd	r18, Y+15	; 0x0f
    228e:	38 89       	ldd	r19, Y+16	; 0x10
    2290:	82 0f       	add	r24, r18
    2292:	93 1f       	adc	r25, r19
    2294:	fc 01       	movw	r30, r24
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	1b c0       	rjmp	.+54     	; 0x22d6 <_ZN7MathExt16CalculateAverageEPii+0x23e>
                    }
                    else {
                        amount += arr[i]; //min<=arr<=max
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    22aa:	38 89       	ldd	r19, Y+16	; 0x10
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	fc 01       	movw	r30, r24
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	09 2e       	mov	r0, r25
    22b8:	00 0c       	add	r0, r0
    22ba:	aa 0b       	sbc	r26, r26
    22bc:	bb 0b       	sbc	r27, r27
    22be:	2f 81       	ldd	r18, Y+7	; 0x07
    22c0:	38 85       	ldd	r19, Y+8	; 0x08
    22c2:	49 85       	ldd	r20, Y+9	; 0x09
    22c4:	5a 85       	ldd	r21, Y+10	; 0x0a
    22c6:	82 0f       	add	r24, r18
    22c8:	93 1f       	adc	r25, r19
    22ca:	a4 1f       	adc	r26, r20
    22cc:	b5 1f       	adc	r27, r21
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	98 87       	std	Y+8, r25	; 0x08
    22d2:	a9 87       	std	Y+9, r26	; 0x09
    22d4:	ba 87       	std	Y+10, r27	; 0x0a
            }
            else {
                min = arr[1];
                max = arr[0];
            }
            for(i = 2; i < number; i++) {
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	29 81       	ldd	r18, Y+1	; 0x01
    22e2:	3a 81       	ldd	r19, Y+2	; 0x02
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	0c f4       	brge	.+2      	; 0x22f0 <_ZN7MathExt16CalculateAverageEPii+0x258>
    22ee:	78 cf       	rjmp	.-272    	; 0x21e0 <_ZN7MathExt16CalculateAverageEPii+0x148>
                    else {
                        amount += arr[i]; //min<=arr<=max
                    }
                }//if
            }//for
            avg = (double)amount / (number - 2);
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__floatsisf>
    22fc:	6b 01       	movw	r12, r22
    22fe:	7c 01       	movw	r14, r24
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	9a 89       	ldd	r25, Y+18	; 0x12
    2304:	02 97       	sbiw	r24, 0x02	; 2
    2306:	09 2e       	mov	r0, r25
    2308:	00 0c       	add	r0, r0
    230a:	aa 0b       	sbc	r26, r26
    230c:	bb 0b       	sbc	r27, r27
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__floatsisf>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 01       	movw	r18, r24
    231c:	ad 01       	movw	r20, r26
    231e:	c7 01       	movw	r24, r14
    2320:	b6 01       	movw	r22, r12
    2322:	0e 94 5e 22 	call	0x44bc	; 0x44bc <__divsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8b 87       	std	Y+11, r24	; 0x0b
    232c:	9c 87       	std	Y+12, r25	; 0x0c
    232e:	ad 87       	std	Y+13, r26	; 0x0d
    2330:	be 87       	std	Y+14, r27	; 0x0e
        }//if
        return avg;
    2332:	8b 85       	ldd	r24, Y+11	; 0x0b
    2334:	9c 85       	ldd	r25, Y+12	; 0x0c
    2336:	ad 85       	ldd	r26, Y+13	; 0x0d
    2338:	be 85       	ldd	r27, Y+14	; 0x0e
    }
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	66 96       	adiw	r28, 0x16	; 22
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	08 95       	ret

00002358 <_ZNK6String5c_strEv>:
        Serial.println(tankPH, 2);
        //}
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}
    2358:	a2 e0       	ldi	r26, 0x02	; 2
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 eb       	ldi	r30, 0xB2	; 178
    235e:	f1 e1       	ldi	r31, 0x11	; 17
    2360:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	fc 01       	movw	r30, r24
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	22 96       	adiw	r28, 0x02	; 2
    2374:	e2 e0       	ldi	r30, 0x02	; 2
    2376:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000237a <_ZN15StringSumHelperC1EPKc>:
    237a:	a4 e0       	ldi	r26, 0x04	; 4
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 ec       	ldi	r30, 0xC3	; 195
    2380:	f1 e1       	ldi	r31, 0x11	; 17
    2382:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	7c 83       	std	Y+4, r23	; 0x04
    238c:	6b 83       	std	Y+3, r22	; 0x03
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	2b 81       	ldd	r18, Y+3	; 0x03
    2394:	3c 81       	ldd	r19, Y+4	; 0x04
    2396:	b9 01       	movw	r22, r18
    2398:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    239c:	24 96       	adiw	r28, 0x04	; 4
    239e:	e2 e0       	ldi	r30, 0x02	; 2
    23a0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000023a4 <_ZN5EERefC1Ei>:
    23a4:	a4 e0       	ldi	r26, 0x04	; 4
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e8 ed       	ldi	r30, 0xD8	; 216
    23aa:	f1 e1       	ldi	r31, 0x11	; 17
    23ac:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	7c 83       	std	Y+4, r23	; 0x04
    23b6:	6b 83       	std	Y+3, r22	; 0x03
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	3c 81       	ldd	r19, Y+4	; 0x04
    23c0:	fc 01       	movw	r30, r24
    23c2:	31 83       	std	Z+1, r19	; 0x01
    23c4:	20 83       	st	Z, r18
    23c6:	24 96       	adiw	r28, 0x04	; 4
    23c8:	e2 e0       	ldi	r30, 0x02	; 2
    23ca:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000023ce <_ZNK5EERefdeEv>:
    23ce:	a2 e0       	ldi	r26, 0x02	; 2
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed ee       	ldi	r30, 0xED	; 237
    23d4:	f1 e1       	ldi	r31, 0x11	; 17
    23d6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	fc 01       	movw	r30, r24
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	0e 94 53 33 	call	0x66a6	; 0x66a6 <eeprom_read_byte>
    23ec:	22 96       	adiw	r28, 0x02	; 2
    23ee:	e2 e0       	ldi	r30, 0x02	; 2
    23f0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000023f4 <_ZNK5EERefcvKhEv>:
    23f4:	a2 e0       	ldi	r26, 0x02	; 2
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e0       	ldi	r30, 0x00	; 0
    23fa:	f2 e1       	ldi	r31, 0x12	; 18
    23fc:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	e2 df       	rcall	.-60     	; 0x23ce <_ZNK5EERefdeEv>
    240a:	22 96       	adiw	r28, 0x02	; 2
    240c:	e2 e0       	ldi	r30, 0x02	; 2
    240e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002412 <_ZN5EERefaSEh>:
    2412:	a3 e0       	ldi	r26, 0x03	; 3
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	6b 83       	std	Y+3, r22	; 0x03
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	fc 01       	movw	r30, r24
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	6b 81       	ldd	r22, Y+3	; 0x03
    2430:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <eeprom_write_byte>
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	23 96       	adiw	r28, 0x03	; 3
    243a:	e2 e0       	ldi	r30, 0x02	; 2
    243c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002440 <_ZN5EERef6updateEh>:
    2440:	a3 e0       	ldi	r26, 0x03	; 3
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	6b 83       	std	Y+3, r22	; 0x03
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	ce df       	rcall	.-100    	; 0x23f4 <_ZNK5EERefcvKhEv>
    2458:	98 2f       	mov	r25, r24
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	98 17       	cp	r25, r24
    245e:	29 f0       	breq	.+10     	; 0x246a <_ZN5EERef6updateEh+0x2a>
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	6b 81       	ldd	r22, Y+3	; 0x03
    2466:	d5 df       	rcall	.-86     	; 0x2412 <_ZN5EERefaSEh>
    2468:	02 c0       	rjmp	.+4      	; 0x246e <_ZN5EERef6updateEh+0x2e>
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	23 96       	adiw	r28, 0x03	; 3
    2470:	e2 e0       	ldi	r30, 0x02	; 2
    2472:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002476 <_ZN11EEPROMClassixEi>:
    2476:	a6 e0       	ldi	r26, 0x06	; 6
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e1 e4       	ldi	r30, 0x41	; 65
    247c:	f2 e1       	ldi	r31, 0x12	; 18
    247e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    2486:	7e 83       	std	Y+6, r23	; 0x06
    2488:	6d 83       	std	Y+5, r22	; 0x05
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	bc 01       	movw	r22, r24
    2490:	ce 01       	movw	r24, r28
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	87 df       	rcall	.-242    	; 0x23a4 <_ZN5EERefC1Ei>
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	26 96       	adiw	r28, 0x06	; 6
    249c:	e2 e0       	ldi	r30, 0x02	; 2
    249e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000024a2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    24a2:	aa e0       	ldi	r26, 0x0A	; 10
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e5       	ldi	r30, 0x57	; 87
    24a8:	f2 e1       	ldi	r31, 0x12	; 18
    24aa:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	78 87       	std	Y+8, r23	; 0x08
    24b4:	6f 83       	std	Y+7, r22	; 0x07
    24b6:	5a 87       	std	Y+10, r21	; 0x0a
    24b8:	49 87       	std	Y+9, r20	; 0x09
    24ba:	1a 82       	std	Y+2, r1	; 0x02
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	1d c0       	rjmp	.+58     	; 0x24fa <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    24c0:	0d 81       	ldd	r16, Y+5	; 0x05
    24c2:	1e 81       	ldd	r17, Y+6	; 0x06
    24c4:	c8 01       	movw	r24, r16
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	8f 81       	ldd	r24, Y+7	; 0x07
    24ce:	98 85       	ldd	r25, Y+8	; 0x08
    24d0:	9c 01       	movw	r18, r24
    24d2:	2f 5f       	subi	r18, 0xFF	; 255
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	38 87       	std	Y+8, r19	; 0x08
    24d8:	2f 83       	std	Y+7, r18	; 0x07
    24da:	bc 01       	movw	r22, r24
    24dc:	8d ee       	ldi	r24, 0xED	; 237
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	ca df       	rcall	.-108    	; 0x2476 <_ZN11EEPROMClassixEi>
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	ce 01       	movw	r24, r28
    24e8:	03 96       	adiw	r24, 0x03	; 3
    24ea:	84 df       	rcall	.-248    	; 0x23f4 <_ZNK5EERefcvKhEv>
    24ec:	f8 01       	movw	r30, r16
    24ee:	80 83       	st	Z, r24
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	29 81       	ldd	r18, Y+1	; 0x01
    24fc:	3a 81       	ldd	r19, Y+2	; 0x02
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	28 17       	cp	r18, r24
    2504:	39 07       	cpc	r19, r25
    2506:	e0 f2       	brcs	.-72     	; 0x24c0 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2508:	2a 96       	adiw	r28, 0x0a	; 10
    250a:	e4 e0       	ldi	r30, 0x04	; 4
    250c:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00002510 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2510:	ab e0       	ldi	r26, 0x0B	; 11
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e8       	ldi	r30, 0x8E	; 142
    2516:	f2 e1       	ldi	r31, 0x12	; 18
    2518:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    251c:	9f 83       	std	Y+7, r25	; 0x07
    251e:	8e 83       	std	Y+6, r24	; 0x06
    2520:	79 87       	std	Y+9, r23	; 0x09
    2522:	68 87       	std	Y+8, r22	; 0x08
    2524:	5b 87       	std	Y+11, r21	; 0x0b
    2526:	4a 87       	std	Y+10, r20	; 0x0a
    2528:	1a 82       	std	Y+2, r1	; 0x02
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	20 c0       	rjmp	.+64     	; 0x256e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	9f 81       	ldd	r25, Y+7	; 0x07
    2532:	fc 01       	movw	r30, r24
    2534:	80 81       	ld	r24, Z
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	88 85       	ldd	r24, Y+8	; 0x08
    253a:	99 85       	ldd	r25, Y+9	; 0x09
    253c:	9c 01       	movw	r18, r24
    253e:	2f 5f       	subi	r18, 0xFF	; 255
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	39 87       	std	Y+9, r19	; 0x09
    2544:	28 87       	std	Y+8, r18	; 0x08
    2546:	bc 01       	movw	r22, r24
    2548:	8d ee       	ldi	r24, 0xED	; 237
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	94 df       	rcall	.-216    	; 0x2476 <_ZN11EEPROMClassixEi>
    254e:	9d 83       	std	Y+5, r25	; 0x05
    2550:	8c 83       	std	Y+4, r24	; 0x04
    2552:	ce 01       	movw	r24, r28
    2554:	04 96       	adiw	r24, 0x04	; 4
    2556:	6b 81       	ldd	r22, Y+3	; 0x03
    2558:	73 df       	rcall	.-282    	; 0x2440 <_ZN5EERef6updateEh>
    255a:	8e 81       	ldd	r24, Y+6	; 0x06
    255c:	9f 81       	ldd	r25, Y+7	; 0x07
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9f 83       	std	Y+7, r25	; 0x07
    2562:	8e 83       	std	Y+6, r24	; 0x06
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	29 81       	ldd	r18, Y+1	; 0x01
    2570:	3a 81       	ldd	r19, Y+2	; 0x02
    2572:	8a 85       	ldd	r24, Y+10	; 0x0a
    2574:	9b 85       	ldd	r25, Y+11	; 0x0b
    2576:	28 17       	cp	r18, r24
    2578:	39 07       	cpc	r19, r25
    257a:	c8 f2       	brcs	.-78     	; 0x252e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    257c:	2b 96       	adiw	r28, 0x0b	; 11
    257e:	e2 e0       	ldi	r30, 0x02	; 2
    2580:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002584 <_ZN5PrintC1ERKS_>:
    2584:	a4 e0       	ldi	r26, 0x04	; 4
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e8 ec       	ldi	r30, 0xC8	; 200
    258a:	f2 e1       	ldi	r31, 0x12	; 18
    258c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	7c 83       	std	Y+4, r23	; 0x04
    2596:	6b 83       	std	Y+3, r22	; 0x03
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	24 ed       	ldi	r18, 0xD4	; 212
    259e:	31 e0       	ldi	r19, 0x01	; 1
    25a0:	fc 01       	movw	r30, r24
    25a2:	31 83       	std	Z+1, r19	; 0x01
    25a4:	20 83       	st	Z, r18
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	fc 01       	movw	r30, r24
    25ac:	22 81       	ldd	r18, Z+2	; 0x02
    25ae:	33 81       	ldd	r19, Z+3	; 0x03
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	fc 01       	movw	r30, r24
    25b6:	33 83       	std	Z+3, r19	; 0x03
    25b8:	22 83       	std	Z+2, r18	; 0x02
    25ba:	24 96       	adiw	r28, 0x04	; 4
    25bc:	e2 e0       	ldi	r30, 0x02	; 2
    25be:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000025c2 <_ZN13LiquidCrystalC1ERKS_>:
    25c2:	a4 e0       	ldi	r26, 0x04	; 4
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e7 ee       	ldi	r30, 0xE7	; 231
    25c8:	f2 e1       	ldi	r31, 0x12	; 18
    25ca:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	7c 83       	std	Y+4, r23	; 0x04
    25d4:	6b 83       	std	Y+3, r22	; 0x03
    25d6:	2b 81       	ldd	r18, Y+3	; 0x03
    25d8:	3c 81       	ldd	r19, Y+4	; 0x04
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	b9 01       	movw	r22, r18
    25e0:	d1 df       	rcall	.-94     	; 0x2584 <_ZN5PrintC1ERKS_>
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	25 e8       	ldi	r18, 0x85	; 133
    25e8:	31 e0       	ldi	r19, 0x01	; 1
    25ea:	fc 01       	movw	r30, r24
    25ec:	31 83       	std	Z+1, r19	; 0x01
    25ee:	20 83       	st	Z, r18
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	fc 01       	movw	r30, r24
    25f6:	24 81       	ldd	r18, Z+4	; 0x04
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	fc 01       	movw	r30, r24
    25fe:	24 83       	std	Z+4, r18	; 0x04
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	fc 01       	movw	r30, r24
    2606:	25 81       	ldd	r18, Z+5	; 0x05
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	fc 01       	movw	r30, r24
    260e:	25 83       	std	Z+5, r18	; 0x05
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	fc 01       	movw	r30, r24
    2616:	26 81       	ldd	r18, Z+6	; 0x06
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	fc 01       	movw	r30, r24
    261e:	26 83       	std	Z+6, r18	; 0x06
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	2b 81       	ldd	r18, Y+3	; 0x03
    2626:	3c 81       	ldd	r19, Y+4	; 0x04
    2628:	48 e0       	ldi	r20, 0x08	; 8
    262a:	f9 01       	movw	r30, r18
    262c:	37 96       	adiw	r30, 0x07	; 7
    262e:	dc 01       	movw	r26, r24
    2630:	17 96       	adiw	r26, 0x07	; 7
    2632:	01 90       	ld	r0, Z+
    2634:	0d 92       	st	X+, r0
    2636:	4a 95       	dec	r20
    2638:	e1 f7       	brne	.-8      	; 0x2632 <_ZN13LiquidCrystalC1ERKS_+0x70>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	27 85       	ldd	r18, Z+15	; 0x0f
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	fc 01       	movw	r30, r24
    2648:	27 87       	std	Z+15, r18	; 0x0f
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	fc 01       	movw	r30, r24
    2650:	20 89       	ldd	r18, Z+16	; 0x10
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	fc 01       	movw	r30, r24
    2658:	20 8b       	std	Z+16, r18	; 0x10
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	fc 01       	movw	r30, r24
    2660:	21 89       	ldd	r18, Z+17	; 0x11
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	fc 01       	movw	r30, r24
    2668:	21 8b       	std	Z+17, r18	; 0x11
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	fc 01       	movw	r30, r24
    2670:	22 89       	ldd	r18, Z+18	; 0x12
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	fc 01       	movw	r30, r24
    2678:	22 8b       	std	Z+18, r18	; 0x12
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	fc 01       	movw	r30, r24
    2680:	23 89       	ldd	r18, Z+19	; 0x13
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	fc 01       	movw	r30, r24
    2688:	23 8b       	std	Z+19, r18	; 0x13
    268a:	29 81       	ldd	r18, Y+1	; 0x01
    268c:	3a 81       	ldd	r19, Y+2	; 0x02
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	fc 01       	movw	r30, r24
    2694:	84 89       	ldd	r24, Z+20	; 0x14
    2696:	95 89       	ldd	r25, Z+21	; 0x15
    2698:	a6 89       	ldd	r26, Z+22	; 0x16
    269a:	b7 89       	ldd	r27, Z+23	; 0x17
    269c:	f9 01       	movw	r30, r18
    269e:	84 8b       	std	Z+20, r24	; 0x14
    26a0:	95 8b       	std	Z+21, r25	; 0x15
    26a2:	a6 8b       	std	Z+22, r26	; 0x16
    26a4:	b7 8b       	std	Z+23, r27	; 0x17
    26a6:	24 96       	adiw	r28, 0x04	; 4
    26a8:	e2 e0       	ldi	r30, 0x02	; 2
    26aa:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000026ae <_ZN7LCDBaseC1ERKS_>:
    26ae:	a4 e0       	ldi	r26, 0x04	; 4
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ed e5       	ldi	r30, 0x5D	; 93
    26b4:	f3 e1       	ldi	r31, 0x13	; 19
    26b6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	7c 83       	std	Y+4, r23	; 0x04
    26c0:	6b 83       	std	Y+3, r22	; 0x03
    26c2:	2b 81       	ldd	r18, Y+3	; 0x03
    26c4:	3c 81       	ldd	r19, Y+4	; 0x04
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	b9 01       	movw	r22, r18
    26cc:	7a df       	rcall	.-268    	; 0x25c2 <_ZN13LiquidCrystalC1ERKS_>
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	23 ea       	ldi	r18, 0xA3	; 163
    26d4:	31 e0       	ldi	r19, 0x01	; 1
    26d6:	fc 01       	movw	r30, r24
    26d8:	31 83       	std	Z+1, r19	; 0x01
    26da:	20 83       	st	Z, r18
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	4a e0       	ldi	r20, 0x0A	; 10
    26e6:	f9 01       	movw	r30, r18
    26e8:	78 96       	adiw	r30, 0x18	; 24
    26ea:	dc 01       	movw	r26, r24
    26ec:	58 96       	adiw	r26, 0x18	; 24
    26ee:	01 90       	ld	r0, Z+
    26f0:	0d 92       	st	X+, r0
    26f2:	4a 95       	dec	r20
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <_ZN7LCDBaseC1ERKS_+0x40>
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	fc 01       	movw	r30, r24
    26fc:	22 a1       	ldd	r18, Z+34	; 0x22
    26fe:	33 a1       	ldd	r19, Z+35	; 0x23
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	fc 01       	movw	r30, r24
    2706:	33 a3       	std	Z+35, r19	; 0x23
    2708:	22 a3       	std	Z+34, r18	; 0x22
    270a:	24 96       	adiw	r28, 0x04	; 4
    270c:	e2 e0       	ldi	r30, 0x02	; 2
    270e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002712 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2712:	ab e0       	ldi	r26, 0x0B	; 11
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ef e8       	ldi	r30, 0x8F	; 143
    2718:	f3 e1       	ldi	r31, 0x13	; 19
    271a:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	7c 83       	std	Y+4, r23	; 0x04
    2724:	6b 83       	std	Y+3, r22	; 0x03
    2726:	5e 83       	std	Y+6, r21	; 0x06
    2728:	4d 83       	std	Y+5, r20	; 0x05
    272a:	2f 83       	std	Y+7, r18	; 0x07
    272c:	19 87       	std	Y+9, r17	; 0x09
    272e:	08 87       	std	Y+8, r16	; 0x08
    2730:	fb 86       	std	Y+11, r15	; 0x0b
    2732:	ea 86       	std	Y+10, r14	; 0x0a
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	fc 01       	movw	r30, r24
    273e:	31 83       	std	Z+1, r19	; 0x01
    2740:	20 83       	st	Z, r18
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	fc 01       	movw	r30, r24
    2748:	17 ae       	std	Z+63, r1	; 0x3f
    274a:	16 ae       	std	Z+62, r1	; 0x3e
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	80 5c       	subi	r24, 0xC0	; 192
    2752:	9f 4f       	sbci	r25, 0xFF	; 255
    2754:	2d 81       	ldd	r18, Y+5	; 0x05
    2756:	3e 81       	ldd	r19, Y+6	; 0x06
    2758:	fc 01       	movw	r30, r24
    275a:	31 83       	std	Z+1, r19	; 0x01
    275c:	20 83       	st	Z, r18
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	86 5b       	subi	r24, 0xB6	; 182
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	2f 81       	ldd	r18, Y+7	; 0x07
    2768:	fc 01       	movw	r30, r24
    276a:	20 83       	st	Z, r18
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	85 5b       	subi	r24, 0xB5	; 181
    2772:	9f 4f       	sbci	r25, 0xFF	; 255
    2774:	2a 85       	ldd	r18, Y+10	; 0x0a
    2776:	3b 85       	ldd	r19, Y+11	; 0x0b
    2778:	fc 01       	movw	r30, r24
    277a:	31 83       	std	Z+1, r19	; 0x01
    277c:	20 83       	st	Z, r18
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	82 5b       	subi	r24, 0xB2	; 178
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	28 85       	ldd	r18, Y+8	; 0x08
    2788:	39 85       	ldd	r19, Y+9	; 0x09
    278a:	b9 01       	movw	r22, r18
    278c:	90 df       	rcall	.-224    	; 0x26ae <_ZN7LCDBaseC1ERKS_>
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	8e 58       	subi	r24, 0x8E	; 142
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	6f e1       	ldi	r22, 0x1F	; 31
    2798:	71 e0       	ldi	r23, 0x01	; 1
    279a:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	9c 01       	movw	r18, r24
    27a4:	28 58       	subi	r18, 0x88	; 136
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e4       	ldi	r26, 0x40	; 64
    27ae:	b0 e4       	ldi	r27, 0x40	; 64
    27b0:	f9 01       	movw	r30, r18
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	04 d0       	rcall	.+8      	; 0x27c8 <_ZN8PHSensor4initEv>
    27c0:	2b 96       	adiw	r28, 0x0b	; 11
    27c2:	e6 e0       	ldi	r30, 0x06	; 6
    27c4:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

000027c8 <_ZN8PHSensor4initEv>:
    27c8:	a6 e0       	ldi	r26, 0x06	; 6
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	ea ee       	ldi	r30, 0xEA	; 234
    27ce:	f3 e1       	ldi	r31, 0x13	; 19
    27d0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	8d e0       	ldi	r24, 0x0D	; 13
    27dc:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	85 5b       	subi	r24, 0xB5	; 181
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	fc 01       	movw	r30, r24
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    27f4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    27f8:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    27fc:	23 d3       	rcall	.+1606   	; 0x2e44 <_ZN6EEWrapIfEcvKfEv>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	ab 83       	std	Y+3, r26	; 0x03
    2808:	bc 83       	std	Y+4, r27	; 0x04
    280a:	29 81       	ldd	r18, Y+1	; 0x01
    280c:	3a 81       	ldd	r19, Y+2	; 0x02
    280e:	4b 81       	ldd	r20, Y+3	; 0x03
    2810:	5c 81       	ldd	r21, Y+4	; 0x04
    2812:	69 81       	ldd	r22, Y+1	; 0x01
    2814:	7a 81       	ldd	r23, Y+2	; 0x02
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	0e 94 0c 24 	call	0x4818	; 0x4818 <__unordsf2>
    281e:	88 23       	and	r24, r24
    2820:	71 f4       	brne	.+28     	; 0x283e <_ZN8PHSensor4initEv+0x76>
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	9c 01       	movw	r18, r24
    2828:	28 58       	subi	r18, 0x88	; 136
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	ab 81       	ldd	r26, Y+3	; 0x03
    2832:	bc 81       	ldd	r27, Y+4	; 0x04
    2834:	f9 01       	movw	r30, r18
    2836:	80 83       	st	Z, r24
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	a2 83       	std	Z+2, r26	; 0x02
    283c:	b3 83       	std	Z+3, r27	; 0x03
    283e:	26 96       	adiw	r28, 0x06	; 6
    2840:	e2 e0       	ldi	r30, 0x02	; 2
    2842:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002846 <_ZN8PHSensor6UpdateEd>:
    2846:	aa e0       	ldi	r26, 0x0A	; 10
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 e2       	ldi	r30, 0x29	; 41
    284c:	f4 e1       	ldi	r31, 0x14	; 20
    284e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	4f 83       	std	Y+7, r20	; 0x07
    2858:	58 87       	std	Y+8, r21	; 0x08
    285a:	69 87       	std	Y+9, r22	; 0x09
    285c:	7a 87       	std	Y+10, r23	; 0x0a
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	9c 01       	movw	r18, r24
    2864:	28 58       	subi	r18, 0x88	; 136
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	8f 81       	ldd	r24, Y+7	; 0x07
    286a:	98 85       	ldd	r25, Y+8	; 0x08
    286c:	a9 85       	ldd	r26, Y+9	; 0x09
    286e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2870:	f9 01       	movw	r30, r18
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	88 58       	subi	r24, 0x88	; 136
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	fc 01       	movw	r30, r24
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	a2 81       	ldd	r26, Z+2	; 0x02
    288a:	b3 81       	ldd	r27, Z+3	; 0x03
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	ab 83       	std	Y+3, r26	; 0x03
    2892:	bc 83       	std	Y+4, r27	; 0x04
    2894:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2898:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    289c:	9c 01       	movw	r18, r24
    289e:	ce 01       	movw	r24, r28
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	bc 01       	movw	r22, r24
    28a4:	c9 01       	movw	r24, r18
    28a6:	e1 d2       	rcall	.+1474   	; 0x2e6a <_ZN6EEWrapIfEaSERKf>
    28a8:	2a 96       	adiw	r28, 0x0a	; 10
    28aa:	e2 e0       	ldi	r30, 0x02	; 2
    28ac:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000028b0 <_ZN8PHSensor5GetPHEv>:
    28b0:	a8 e0       	ldi	r26, 0x08	; 8
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	ee e5       	ldi	r30, 0x5E	; 94
    28b6:	f4 e1       	ldi	r31, 0x14	; 20
    28b8:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    28bc:	98 87       	std	Y+8, r25	; 0x08
    28be:	8f 83       	std	Y+7, r24	; 0x07
    28c0:	8f 81       	ldd	r24, Y+7	; 0x07
    28c2:	98 85       	ldd	r25, Y+8	; 0x08
    28c4:	8e 5b       	subi	r24, 0xBE	; 190
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	fc 01       	movw	r30, r24
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	a2 81       	ldd	r26, Z+2	; 0x02
    28d0:	b3 81       	ldd	r27, Z+3	; 0x03
    28d2:	22 e0       	ldi	r18, 0x02	; 2
    28d4:	ac 01       	movw	r20, r24
    28d6:	bd 01       	movw	r22, r26
    28d8:	ce 01       	movw	r24, r28
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	0e 94 10 2a 	call	0x5420	; 0x5420 <_ZN6StringC1Efh>
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	39 dd       	rcall	.-1422   	; 0x2358 <_ZNK6String5c_strEv>
    28e6:	9c 01       	movw	r18, r24
    28e8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ea:	98 85       	ldd	r25, Y+8	; 0x08
    28ec:	8e 58       	subi	r24, 0x8E	; 142
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	b9 01       	movw	r22, r18
    28f2:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    28f6:	ce 01       	movw	r24, r28
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    28fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2900:	98 85       	ldd	r25, Y+8	; 0x08
    2902:	8e 5b       	subi	r24, 0xBE	; 190
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	fc 01       	movw	r30, r24
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	a2 81       	ldd	r26, Z+2	; 0x02
    290e:	b3 81       	ldd	r27, Z+3	; 0x03
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	28 96       	adiw	r28, 0x08	; 8
    2916:	e2 e0       	ldi	r30, 0x02	; 2
    2918:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000291c <_ZN8PHSensor11CalculatePHEv>:
    291c:	a2 e0       	ldi	r26, 0x02	; 2
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e4 e9       	ldi	r30, 0x94	; 148
    2922:	f4 e1       	ldi	r31, 0x14	; 20
    2924:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	83 5b       	subi	r24, 0xB3	; 179
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	fc 01       	movw	r30, r24
    2936:	90 81       	ld	r25, Z
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	89 27       	eor	r24, r25
    293c:	88 23       	and	r24, r24
    293e:	09 f0       	breq	.+2      	; 0x2942 <_ZN8PHSensor11CalculatePHEv+0x26>
    2940:	5c c0       	rjmp	.+184    	; 0x29fa <_ZN8PHSensor11CalculatePHEv+0xde>
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	5d d0       	rcall	.+186    	; 0x2a02 <_ZN8PHSensor10getPHValueEv>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	29 81       	ldd	r18, Y+1	; 0x01
    294e:	3a 81       	ldd	r19, Y+2	; 0x02
    2950:	2e 5b       	subi	r18, 0xBE	; 190
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	f9 01       	movw	r30, r18
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	a2 83       	std	Z+2, r26	; 0x02
    295c:	b3 83       	std	Z+3, r27	; 0x03
    295e:	8e ee       	ldi	r24, 0xEE	; 238
    2960:	92 e0       	ldi	r25, 0x02	; 2
    2962:	fc 01       	movw	r30, r24
    2964:	80 81       	ld	r24, Z
    2966:	88 23       	and	r24, r24
    2968:	89 f4       	brne	.+34     	; 0x298c <_ZN8PHSensor11CalculatePHEv+0x70>
    296a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2976:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    297a:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    297e:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2982:	8e ee       	ldi	r24, 0xEE	; 238
    2984:	92 e0       	ldi	r25, 0x02	; 2
    2986:	21 e0       	ldi	r18, 0x01	; 1
    2988:	fc 01       	movw	r30, r24
    298a:	20 83       	st	Z, r18
    298c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2990:	9b 01       	movw	r18, r22
    2992:	ac 01       	movw	r20, r24
    2994:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2998:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    299c:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    29a0:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    29a4:	79 01       	movw	r14, r18
    29a6:	8a 01       	movw	r16, r20
    29a8:	e8 1a       	sub	r14, r24
    29aa:	f9 0a       	sbc	r15, r25
    29ac:	0a 0b       	sbc	r16, r26
    29ae:	1b 0b       	sbc	r17, r27
    29b0:	d8 01       	movw	r26, r16
    29b2:	c7 01       	movw	r24, r14
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	81 36       	cpi	r24, 0x61	; 97
    29b8:	9a 4e       	sbci	r25, 0xEA	; 234
    29ba:	a1 05       	cpc	r26, r1
    29bc:	b1 05       	cpc	r27, r1
    29be:	08 f4       	brcc	.+2      	; 0x29c2 <_ZN8PHSensor11CalculatePHEv+0xa6>
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	22 23       	and	r18, r18
    29c4:	d1 f0       	breq	.+52     	; 0x29fa <_ZN8PHSensor11CalculatePHEv+0xde>
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	1b d0       	rcall	.+54     	; 0x2a02 <_ZN8PHSensor10getPHValueEv>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	29 81       	ldd	r18, Y+1	; 0x01
    29d2:	3a 81       	ldd	r19, Y+2	; 0x02
    29d4:	2e 5b       	subi	r18, 0xBE	; 190
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	f9 01       	movw	r30, r18
    29da:	80 83       	st	Z, r24
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	a2 83       	std	Z+2, r26	; 0x02
    29e0:	b3 83       	std	Z+3, r27	; 0x03
    29e2:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    29ee:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    29f2:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    29f6:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    29fa:	22 96       	adiw	r28, 0x02	; 2
    29fc:	e6 e0       	ldi	r30, 0x06	; 6
    29fe:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00002a02 <_ZN8PHSensor10getPHValueEv>:
    2a02:	ae e0       	ldi	r26, 0x0E	; 14
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e7 e0       	ldi	r30, 0x07	; 7
    2a08:	f5 e1       	ldi	r31, 0x15	; 21
    2a0a:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    2a0e:	9e 87       	std	Y+14, r25	; 0x0e
    2a10:	8d 87       	std	Y+13, r24	; 0x0d
    2a12:	86 ef       	ldi	r24, 0xF6	; 246
    2a14:	92 e0       	ldi	r25, 0x02	; 2
    2a16:	fc 01       	movw	r30, r24
    2a18:	80 81       	ld	r24, Z
    2a1a:	88 23       	and	r24, r24
    2a1c:	89 f4       	brne	.+34     	; 0x2a40 <_ZN8PHSensor10getPHValueEv+0x3e>
    2a1e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2a2a:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2a2e:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2a32:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2a36:	86 ef       	ldi	r24, 0xF6	; 246
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	20 83       	st	Z, r18
    2a40:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2a44:	9b 01       	movw	r18, r22
    2a46:	ac 01       	movw	r20, r24
    2a48:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2a4c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2a50:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2a54:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2a58:	79 01       	movw	r14, r18
    2a5a:	8a 01       	movw	r16, r20
    2a5c:	e8 1a       	sub	r14, r24
    2a5e:	f9 0a       	sbc	r15, r25
    2a60:	0a 0b       	sbc	r16, r26
    2a62:	1b 0b       	sbc	r17, r27
    2a64:	d8 01       	movw	r26, r16
    2a66:	c7 01       	movw	r24, r14
    2a68:	21 e0       	ldi	r18, 0x01	; 1
    2a6a:	89 3e       	cpi	r24, 0xE9	; 233
    2a6c:	93 40       	sbci	r25, 0x03	; 3
    2a6e:	a1 05       	cpc	r26, r1
    2a70:	b1 05       	cpc	r27, r1
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <_ZN8PHSensor10getPHValueEv+0x74>
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	22 23       	and	r18, r18
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <_ZN8PHSensor10getPHValueEv+0x7a>
    2a7a:	cf c0       	rjmp	.+414    	; 0x2c1a <_ZN8PHSensor10getPHValueEv+0x218>
    2a7c:	8e e1       	ldi	r24, 0x1E	; 30
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a88:	fc 01       	movw	r30, r24
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	0e 94 35 28 	call	0x506a	; 0x506a <analogRead>
    2a92:	98 87       	std	Y+8, r25	; 0x08
    2a94:	8f 83       	std	Y+7, r24	; 0x07
    2a96:	8a e6       	ldi	r24, 0x6A	; 106
    2a98:	93 e0       	ldi	r25, 0x03	; 3
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	8d e2       	ldi	r24, 0x2D	; 45
    2a9e:	95 e0       	ldi	r25, 0x05	; 5
    2aa0:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    2aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa6:	98 85       	ldd	r25, Y+8	; 0x08
    2aa8:	4a e0       	ldi	r20, 0x0A	; 10
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	bc 01       	movw	r22, r24
    2aae:	8d e2       	ldi	r24, 0x2D	; 45
    2ab0:	95 e0       	ldi	r25, 0x05	; 5
    2ab2:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_ZN5Print7printlnEii>
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	fc 01       	movw	r30, r24
    2abc:	86 ad       	ldd	r24, Z+62	; 0x3e
    2abe:	97 ad       	ldd	r25, Z+63	; 0x3f
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	4f 5f       	subi	r20, 0xFF	; 255
    2ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ac8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2aca:	f9 01       	movw	r30, r18
    2acc:	57 af       	std	Z+63, r21	; 0x3f
    2ace:	46 af       	std	Z+62, r20	; 0x3e
    2ad0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ad2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	2f 81       	ldd	r18, Y+7	; 0x07
    2ae0:	38 85       	ldd	r19, Y+8	; 0x08
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	31 83       	std	Z+1, r19	; 0x01
    2ae6:	20 83       	st	Z, r18
    2ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aec:	fc 01       	movw	r30, r24
    2aee:	26 ad       	ldd	r18, Z+62	; 0x3e
    2af0:	37 ad       	ldd	r19, Z+63	; 0x3f
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	29 f4       	brne	.+10     	; 0x2b06 <_ZN8PHSensor10getPHValueEv+0x104>
    2afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b00:	fc 01       	movw	r30, r24
    2b02:	17 ae       	std	Z+63, r1	; 0x3f
    2b04:	16 ae       	std	Z+62, r1	; 0x3e
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	02 96       	adiw	r24, 0x02	; 2
    2b0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b10:	b9 01       	movw	r22, r18
    2b12:	c2 da       	rcall	.-2684   	; 0x2098 <_ZN7MathExt16CalculateAverageEPii>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	89 87       	std	Y+9, r24	; 0x09
    2b1a:	9a 87       	std	Y+10, r25	; 0x0a
    2b1c:	ab 87       	std	Y+11, r26	; 0x0b
    2b1e:	bc 87       	std	Y+12, r27	; 0x0c
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 ea       	ldi	r20, 0xA0	; 160
    2b26:	50 e4       	ldi	r21, 0x40	; 64
    2b28:	69 85       	ldd	r22, Y+9	; 0x09
    2b2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b30:	0e 94 a9 23 	call	0x4752	; 0x4752 <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 5e 22 	call	0x44bc	; 0x44bc <__divsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b50:	2a 5b       	subi	r18, 0xBA	; 186
    2b52:	3f 4f       	sbci	r19, 0xFF	; 255
    2b54:	f9 01       	movw	r30, r18
    2b56:	80 83       	st	Z, r24
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	a2 83       	std	Z+2, r26	; 0x02
    2b5c:	b3 83       	std	Z+3, r27	; 0x03
    2b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b62:	8a 5b       	subi	r24, 0xBA	; 186
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	fc 01       	movw	r30, r24
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b70:	9c 01       	movw	r18, r24
    2b72:	ad 01       	movw	r20, r26
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	90 e4       	ldi	r25, 0x40	; 64
    2b7c:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	2c ee       	ldi	r18, 0xEC	; 236
    2b86:	31 e5       	ldi	r19, 0x51	; 81
    2b88:	48 e3       	ldi	r20, 0x38	; 56
    2b8a:	5e e3       	ldi	r21, 0x3E	; 62
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 5e 22 	call	0x44bc	; 0x44bc <__divsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 ee       	ldi	r20, 0xE0	; 224
    2b9e:	50 e4       	ldi	r21, 0x40	; 64
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__addsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	7c 01       	movw	r14, r24
    2bae:	8d 01       	movw	r16, r26
    2bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb4:	88 58       	subi	r24, 0x88	; 136
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	fc 01       	movw	r30, r24
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	a2 81       	ldd	r26, Z+2	; 0x02
    2bc0:	b3 81       	ldd	r27, Z+3	; 0x03
    2bc2:	9c 01       	movw	r18, r24
    2bc4:	ad 01       	movw	r20, r26
    2bc6:	c8 01       	movw	r24, r16
    2bc8:	b7 01       	movw	r22, r14
    2bca:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__addsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	ab 83       	std	Y+3, r26	; 0x03
    2bd8:	bc 83       	std	Y+4, r27	; 0x04
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	a9 01       	movw	r20, r18
    2be0:	69 81       	ldd	r22, Y+1	; 0x01
    2be2:	7a 81       	ldd	r23, Y+2	; 0x02
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__cmpsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	24 f4       	brge	.+8      	; 0x2bf8 <_ZN8PHSensor10getPHValueEv+0x1f6>
    2bf0:	19 82       	std	Y+1, r1	; 0x01
    2bf2:	1a 82       	std	Y+2, r1	; 0x02
    2bf4:	1b 82       	std	Y+3, r1	; 0x03
    2bf6:	1c 82       	std	Y+4, r1	; 0x04
    2bf8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2c04:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2c08:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2c0c:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	ab 81       	ldd	r26, Y+3	; 0x03
    2c16:	bc 81       	ldd	r27, Y+4	; 0x04
    2c18:	09 c0       	rjmp	.+18     	; 0x2c2c <_ZN8PHSensor10getPHValueEv+0x22a>
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	8e 5b       	subi	r24, 0xBE	; 190
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	fc 01       	movw	r30, r24
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	a2 81       	ldd	r26, Z+2	; 0x02
    2c2a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	2e 96       	adiw	r28, 0x0e	; 14
    2c32:	e6 e0       	ldi	r30, 0x06	; 6
    2c34:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00002c38 <_ZN15StringSumHelperD1Ev>:
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c38:	a2 e0       	ldi	r26, 0x02	; 2
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e2 e2       	ldi	r30, 0x22	; 34
    2c3e:	f6 e1       	ldi	r31, 0x16	; 22
    2c40:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    2c50:	22 96       	adiw	r28, 0x02	; 2
    2c52:	e2 e0       	ldi	r30, 0x02	; 2
    2c54:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002c58 <_ZN8PHSensor12PrintPHToLCDEv>:
void PHSensor::PrintPHToLCD() {
    2c58:	aa e1       	ldi	r26, 0x1A	; 26
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e2 e3       	ldi	r30, 0x32	; 50
    2c5e:	f6 e1       	ldi	r31, 0x16	; 22
    2c60:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    2c64:	9a 8f       	std	Y+26, r25	; 0x1a
    2c66:	89 8f       	std	Y+25, r24	; 0x19
    GetPH();
    2c68:	89 8d       	ldd	r24, Y+25	; 0x19
    2c6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c6c:	21 de       	rcall	.-958    	; 0x28b0 <_ZN8PHSensor5GetPHEv>
    static unsigned long printTime = millis();
    2c6e:	8e ef       	ldi	r24, 0xFE	; 254
    2c70:	92 e0       	ldi	r25, 0x02	; 2
    2c72:	fc 01       	movw	r30, r24
    2c74:	80 81       	ld	r24, Z
    2c76:	88 23       	and	r24, r24
    2c78:	89 f4       	brne	.+34     	; 0x2c9c <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    2c7a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2c86:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2c8a:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2c8e:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2c92:	8e ef       	ldi	r24, 0xFE	; 254
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	21 e0       	ldi	r18, 0x01	; 1
    2c98:	fc 01       	movw	r30, r24
    2c9a:	20 83       	st	Z, r18
    if(millis() - printTime > _printPHEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    2c9c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2ca8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2cac:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2cb0:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2cb4:	28 1b       	sub	r18, r24
    2cb6:	39 0b       	sbc	r19, r25
    2cb8:	4a 0b       	sbc	r20, r26
    2cba:	5b 0b       	sbc	r21, r27
    2cbc:	89 8d       	ldd	r24, Y+25	; 0x19
    2cbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cc0:	80 5c       	subi	r24, 0xC0	; 192
    2cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	80 81       	ld	r24, Z
    2cc8:	91 81       	ldd	r25, Z+1	; 0x01
    2cca:	80 57       	subi	r24, 0x70	; 112
    2ccc:	9e 4f       	sbci	r25, 0xFE	; 254
    2cce:	09 2e       	mov	r0, r25
    2cd0:	00 0c       	add	r0, r0
    2cd2:	aa 0b       	sbc	r26, r26
    2cd4:	bb 0b       	sbc	r27, r27
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	82 17       	cp	r24, r18
    2cda:	93 07       	cpc	r25, r19
    2cdc:	a4 07       	cpc	r26, r20
    2cde:	b5 07       	cpc	r27, r21
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <_ZN8PHSensor12PrintPHToLCDEv+0x8c>
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	66 23       	and	r22, r22
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <_ZN8PHSensor12PrintPHToLCDEv+0x92>
    2ce8:	6a c0       	rjmp	.+212    	; 0x2dbe <_ZN8PHSensor12PrintPHToLCDEv+0x166>
        if(_printToLCD) {
    2cea:	89 8d       	ldd	r24, Y+25	; 0x19
    2cec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cee:	86 5b       	subi	r24, 0xB6	; 182
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <_ZN8PHSensor12PrintPHToLCDEv+0xa4>
    2cfa:	55 c0       	rjmp	.+170    	; 0x2da6 <_ZN8PHSensor12PrintPHToLCDEv+0x14e>
            //Serial.print(F("LCD Print: "));
            //Serial.println(tankPH, 2);
            String enabled = "";
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	0d 96       	adiw	r24, 0x0d	; 13
    2d00:	6f e1       	ldi	r22, 0x1F	; 31
    2d02:	71 e0       	ldi	r23, 0x01	; 1
    2d04:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
            if(_enabled) {
    2d08:	89 8d       	ldd	r24, Y+25	; 0x19
    2d0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d0c:	83 5b       	subi	r24, 0xB3	; 179
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	fc 01       	movw	r30, r24
    2d12:	80 81       	ld	r24, Z
    2d14:	88 23       	and	r24, r24
    2d16:	31 f0       	breq	.+12     	; 0x2d24 <_ZN8PHSensor12PrintPHToLCDEv+0xcc>
                enabled = "<";
    2d18:	ce 01       	movw	r24, r28
    2d1a:	0d 96       	adiw	r24, 0x0d	; 13
    2d1c:	60 e2       	ldi	r22, 0x20	; 32
    2d1e:	71 e0       	ldi	r23, 0x01	; 1
    2d20:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
            }

            String text = "PH: " + PhString + " " + enabled;
    2d24:	89 8d       	ldd	r24, Y+25	; 0x19
    2d26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d28:	8c 01       	movw	r16, r24
    2d2a:	0e 58       	subi	r16, 0x8E	; 142
    2d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2e:	ce 01       	movw	r24, r28
    2d30:	07 96       	adiw	r24, 0x07	; 7
    2d32:	62 e2       	ldi	r22, 0x22	; 34
    2d34:	71 e0       	ldi	r23, 0x01	; 1
    2d36:	21 db       	rcall	.-2494   	; 0x237a <_ZN15StringSumHelperC1EPKc>
    2d38:	ce 01       	movw	r24, r28
    2d3a:	07 96       	adiw	r24, 0x07	; 7
    2d3c:	b8 01       	movw	r22, r16
    2d3e:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZplRK15StringSumHelperRK6String>
    2d42:	67 e2       	ldi	r22, 0x27	; 39
    2d44:	71 e0       	ldi	r23, 0x01	; 1
    2d46:	0e 94 c9 2a 	call	0x5592	; 0x5592 <_ZplRK15StringSumHelperPKc>
    2d4a:	9c 01       	movw	r18, r24
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0d 96       	adiw	r24, 0x0d	; 13
    2d50:	bc 01       	movw	r22, r24
    2d52:	c9 01       	movw	r24, r18
    2d54:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZplRK15StringSumHelperRK6String>
    2d58:	9c 01       	movw	r18, r24
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	43 96       	adiw	r24, 0x13	; 19
    2d5e:	b9 01       	movw	r22, r18
    2d60:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    2d64:	ce 01       	movw	r24, r28
    2d66:	07 96       	adiw	r24, 0x07	; 7
    2d68:	67 df       	rcall	.-306    	; 0x2c38 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(0, text);
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	43 96       	adiw	r24, 0x13	; 19
    2d6e:	bc 01       	movw	r22, r24
    2d70:	ce 01       	movw	r24, r28
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    2d78:	89 8d       	ldd	r24, Y+25	; 0x19
    2d7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d7c:	82 5b       	subi	r24, 0xB2	; 178
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	9e 01       	movw	r18, r28
    2d82:	2f 5f       	subi	r18, 0xFF	; 255
    2d84:	3f 4f       	sbci	r19, 0xFF	; 255
    2d86:	a9 01       	movw	r20, r18
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	d3 d8       	rcall	.-3674   	; 0x1f34 <_ZN7LCDBase9PrintLineEs6String>
    2d8e:	ce 01       	movw	r24, r28
    2d90:	01 96       	adiw	r24, 0x01	; 1
    2d92:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }

            String text = "PH: " + PhString + " " + enabled;
    2d96:	ce 01       	movw	r24, r28
    2d98:	43 96       	adiw	r24, 0x13	; 19
    2d9a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
            _lcd.PrintLine(0, text);
    2d9e:	ce 01       	movw	r24, r28
    2da0:	0d 96       	adiw	r24, 0x0d	; 13
    2da2:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
        }
        //digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    2da6:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2db2:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2db6:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2dba:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    }
}
    2dbe:	6a 96       	adiw	r28, 0x1a	; 26
    2dc0:	e4 e0       	ldi	r30, 0x04	; 4
    2dc2:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00002dc6 <_ZN8PHSensor6TurnOnEv>:



void PHSensor::TurnOn() {
    2dc6:	a2 e0       	ldi	r26, 0x02	; 2
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	83 5b       	subi	r24, 0xB3	; 179
    2ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dde:	21 e0       	ldi	r18, 0x01	; 1
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 83       	st	Z, r18
    digitalWrite(_relayPin, HIGH);
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	85 5b       	subi	r24, 0xB5	; 181
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	fc 01       	movw	r30, r24
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	61 e0       	ldi	r22, 0x01	; 1
    2df4:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
}
    2df8:	22 96       	adiw	r28, 0x02	; 2
    2dfa:	e2 e0       	ldi	r30, 0x02	; 2
    2dfc:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002e00 <_ZN8PHSensor7TurnOffEv>:

void PHSensor::TurnOff() {
    2e00:	a2 e0       	ldi	r26, 0x02	; 2
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e6 e0       	ldi	r30, 0x06	; 6
    2e06:	f7 e1       	ldi	r31, 0x17	; 23
    2e08:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	83 5b       	subi	r24, 0xB3	; 179
    2e16:	9f 4f       	sbci	r25, 0xFF	; 255
    2e18:	fc 01       	movw	r30, r24
    2e1a:	10 82       	st	Z, r1
    digitalWrite(_relayPin, LOW);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	85 5b       	subi	r24, 0xB5	; 181
    2e22:	9f 4f       	sbci	r25, 0xFF	; 255
    2e24:	fc 01       	movw	r30, r24
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	60 e0       	ldi	r22, 0x00	; 0
    2e2c:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
    delay(1000);
    2e30:	68 ee       	ldi	r22, 0xE8	; 232
    2e32:	73 e0       	ldi	r23, 0x03	; 3
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <delay>

}
    2e3c:	22 96       	adiw	r28, 0x02	; 2
    2e3e:	e2 e0       	ldi	r30, 0x02	; 2
    2e40:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002e44 <_ZN6EEWrapIfEcvKfEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    2e44:	a2 e0       	ldi	r26, 0x02	; 2
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e8 e2       	ldi	r30, 0x28	; 40
    2e4a:	f7 e1       	ldi	r31, 0x17	; 23
    2e4c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	1c d0       	rcall	.+56     	; 0x2e92 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	22 96       	adiw	r28, 0x02	; 2
    2e64:	e2 e0       	ldi	r30, 0x02	; 2
    2e66:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002e6a <_ZN6EEWrapIfEaSERKf>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    2e6a:	a4 e0       	ldi	r26, 0x04	; 4
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	eb e3       	ldi	r30, 0x3B	; 59
    2e70:	f7 e1       	ldi	r31, 0x17	; 23
    2e72:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	7c 83       	std	Y+4, r23	; 0x04
    2e7c:	6b 83       	std	Y+3, r22	; 0x03
    2e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e80:	3c 81       	ldd	r19, Y+4	; 0x04
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	b9 01       	movw	r22, r18
    2e88:	24 d0       	rcall	.+72     	; 0x2ed2 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    2e8a:	24 96       	adiw	r28, 0x04	; 4
    2e8c:	e2 e0       	ldi	r30, 0x02	; 2
    2e8e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002e92 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    2e92:	a6 e0       	ldi	r26, 0x06	; 6
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	ef e4       	ldi	r30, 0x4F	; 79
    2e98:	f7 e1       	ldi	r31, 0x17	; 23
    2e9a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2e9e:	9e 83       	std	Y+6, r25	; 0x06
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	33 d0       	rcall	.+102    	; 0x2f0e <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	83 e0       	ldi	r24, 0x03	; 3
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9e 01       	movw	r18, r28
    2eb0:	2f 5f       	subi	r18, 0xFF	; 255
    2eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	44 e0       	ldi	r20, 0x04	; 4
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	f2 da       	rcall	.-2588   	; 0x24a2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ec4:	bc 81       	ldd	r27, Y+4	; 0x04
        }
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	26 96       	adiw	r28, 0x06	; 6
    2ecc:	e2 e0       	ldi	r30, 0x02	; 2
    2ece:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002ed2 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:

        D &EEWrite( const T& v ){
    2ed2:	a4 e0       	ldi	r26, 0x04	; 4
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ef e6       	ldi	r30, 0x6F	; 111
    2ed8:	f7 e1       	ldi	r31, 0x17	; 23
    2eda:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	7c 83       	std	Y+4, r23	; 0x04
    2ee4:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	11 d0       	rcall	.+34     	; 0x2f0e <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    2eec:	bc 01       	movw	r22, r24
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef6:	82 0f       	add	r24, r18
    2ef8:	93 1f       	adc	r25, r19
    2efa:	44 e0       	ldi	r20, 0x04	; 4
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	08 db       	rcall	.-2544   	; 0x2510 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	04 d0       	rcall	.+8      	; 0x2f0e <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
        }
    2f06:	24 96       	adiw	r28, 0x04	; 4
    2f08:	e2 e0       	ldi	r30, 0x02	; 2
    2f0a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002f0e <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:
        protected: STATIC_ACCESS
    2f0e:	a2 e0       	ldi	r26, 0x02	; 2
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	ed e8       	ldi	r30, 0x8D	; 141
    2f14:	f7 e1       	ldi	r31, 0x17	; 23
    2f16:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2f1a:	9a 83       	std	Y+2, r25	; 0x02
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	9a 81       	ldd	r25, Y+2	; 0x02
    2f22:	22 96       	adiw	r28, 0x02	; 2
    2f24:	e2 e0       	ldi	r30, 0x02	; 2
    2f26:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00002f2a <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    2f2a:	ab e0       	ldi	r26, 0x0B	; 11
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	eb e9       	ldi	r30, 0x9B	; 155
    2f30:	f7 e1       	ldi	r31, 0x17	; 23
    2f32:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	7c 83       	std	Y+4, r23	; 0x04
    2f3c:	6b 83       	std	Y+3, r22	; 0x03
    2f3e:	5e 83       	std	Y+6, r21	; 0x06
    2f40:	4d 83       	std	Y+5, r20	; 0x05
    2f42:	2f 83       	std	Y+7, r18	; 0x07
    2f44:	19 87       	std	Y+9, r17	; 0x09
    2f46:	08 87       	std	Y+8, r16	; 0x08
    2f48:	fb 86       	std	Y+11, r15	; 0x0b
    2f4a:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	2b 81       	ldd	r18, Y+3	; 0x03
    2f52:	3c 81       	ldd	r19, Y+4	; 0x04
    2f54:	fc 01       	movw	r30, r24
    2f56:	31 83       	std	Z+1, r19	; 0x01
    2f58:	20 83       	st	Z, r18
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	fc 01       	movw	r30, r24
    2f60:	17 8a       	std	Z+23, r1	; 0x17
    2f62:	16 8a       	std	Z+22, r1	; 0x16
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	9a 81       	ldd	r25, Y+2	; 0x02
    2f68:	2d 81       	ldd	r18, Y+5	; 0x05
    2f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	31 8f       	std	Z+25, r19	; 0x19
    2f70:	20 8f       	std	Z+24, r18	; 0x18
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	2f 81       	ldd	r18, Y+7	; 0x07
    2f78:	fc 01       	movw	r30, r24
    2f7a:	26 8f       	std	Z+30, r18	; 0x1e
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f82:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f84:	fc 01       	movw	r30, r24
    2f86:	30 a3       	std	Z+32, r19	; 0x20
    2f88:	27 8f       	std	Z+31, r18	; 0x1f
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	fc 01       	movw	r30, r24
    2f90:	13 a2       	std	Z+35, r1	; 0x23
    2f92:	12 a2       	std	Z+34, r1	; 0x22
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	84 96       	adiw	r24, 0x24	; 36
    2f9a:	28 85       	ldd	r18, Y+8	; 0x08
    2f9c:	39 85       	ldd	r19, Y+9	; 0x09
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	86 db       	rcall	.-2292   	; 0x26ae <_ZN7LCDBaseC1ERKS_>
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	88 5b       	subi	r24, 0xB8	; 184
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	69 e2       	ldi	r22, 0x29	; 41
    2fac:	71 e0       	ldi	r23, 0x01	; 1
    2fae:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	82 5b       	subi	r24, 0xB2	; 178
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	2e e0       	ldi	r18, 0x0E	; 14
    2fbc:	31 e0       	ldi	r19, 0x01	; 1
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	31 83       	std	Z+1, r19	; 0x01
    2fc2:	20 83       	st	Z, r18
    init();
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc8:	04 d0       	rcall	.+8      	; 0x2fd2 <_ZN9TDSSensor4initEv>
}
    2fca:	2b 96       	adiw	r28, 0x0b	; 11
    2fcc:	e6 e0       	ldi	r30, 0x06	; 6
    2fce:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00002fd2 <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    2fd2:	a6 e0       	ldi	r26, 0x06	; 6
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	ef ee       	ldi	r30, 0xEF	; 239
    2fd8:	f7 e1       	ldi	r31, 0x17	; 23
    2fda:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    //led to show board working
    pinMode(13, OUTPUT);
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
    2fe4:	8d e0       	ldi	r24, 0x0D	; 13
    2fe6:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    pinMode(_relayPin, OUTPUT);
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	fc 01       	movw	r30, r24
    2ff0:	87 8d       	ldd	r24, Z+31	; 0x1f
    2ff2:	90 a1       	ldd	r25, Z+32	; 0x20
    2ff4:	61 e0       	ldi	r22, 0x01	; 1
    2ff6:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    2ffa:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2ffe:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3002:	04 96       	adiw	r24, 0x04	; 4
    3004:	bf d2       	rcall	.+1406   	; 0x3584 <_ZN6EEWrapIiEcvKiEv>
    3006:	09 2e       	mov	r0, r25
    3008:	00 0c       	add	r0, r0
    300a:	aa 0b       	sbc	r26, r26
    300c:	bb 0b       	sbc	r27, r27
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__floatsisf>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	ab 83       	std	Y+3, r26	; 0x03
    3020:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    3022:	29 81       	ldd	r18, Y+1	; 0x01
    3024:	3a 81       	ldd	r19, Y+2	; 0x02
    3026:	4b 81       	ldd	r20, Y+3	; 0x03
    3028:	5c 81       	ldd	r21, Y+4	; 0x04
    302a:	69 81       	ldd	r22, Y+1	; 0x01
    302c:	7a 81       	ldd	r23, Y+2	; 0x02
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	0e 94 0c 24 	call	0x4818	; 0x4818 <__unordsf2>
    3036:	88 23       	and	r24, r24
    3038:	81 f4       	brne	.+32     	; 0x305a <_ZN9TDSSensor4initEv+0x88>
        Offset = offset;
    303a:	69 81       	ldd	r22, Y+1	; 0x01
    303c:	7a 81       	ldd	r23, Y+2	; 0x02
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	0e 94 c6 22 	call	0x458c	; 0x458c <__fixsfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9c 01       	movw	r18, r24
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	82 5b       	subi	r24, 0xB2	; 178
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	fc 01       	movw	r30, r24
    3056:	31 83       	std	Z+1, r19	; 0x01
    3058:	20 83       	st	Z, r18
    }
}
    305a:	26 96       	adiw	r28, 0x06	; 6
    305c:	e2 e0       	ldi	r30, 0x02	; 2
    305e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003062 <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    3062:	a4 e0       	ldi	r26, 0x04	; 4
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e7 e3       	ldi	r30, 0x37	; 55
    3068:	f8 e1       	ldi	r31, 0x18	; 24
    306a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	7c 83       	std	Y+4, r23	; 0x04
    3074:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	82 5b       	subi	r24, 0xB2	; 178
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	2b 81       	ldd	r18, Y+3	; 0x03
    3080:	3c 81       	ldd	r19, Y+4	; 0x04
    3082:	fc 01       	movw	r30, r24
    3084:	31 83       	std	Z+1, r19	; 0x01
    3086:	20 83       	st	Z, r18
    TheSensorsMem.TdsOffset = Offset;
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	9c 01       	movw	r18, r24
    308e:	22 5b       	subi	r18, 0xB2	; 178
    3090:	3f 4f       	sbci	r19, 0xFF	; 255
    3092:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3096:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    309a:	04 96       	adiw	r24, 0x04	; 4
    309c:	b9 01       	movw	r22, r18
    309e:	81 d2       	rcall	.+1282   	; 0x35a2 <_ZN6EEWrapIiEaSERKi>
}
    30a0:	24 96       	adiw	r28, 0x04	; 4
    30a2:	e2 e0       	ldi	r30, 0x02	; 2
    30a4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000030a8 <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    30a8:	a8 e0       	ldi	r26, 0x08	; 8
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	ea e5       	ldi	r30, 0x5A	; 90
    30ae:	f8 e1       	ldi	r31, 0x18	; 24
    30b0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    30b4:	98 87       	std	Y+8, r25	; 0x08
    30b6:	8f 83       	std	Y+7, r24	; 0x07

    TdsString = String(_tdsValue, 0).c_str();
    30b8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ba:	98 85       	ldd	r25, Y+8	; 0x08
    30bc:	fc 01       	movw	r30, r24
    30be:	82 8d       	ldd	r24, Z+26	; 0x1a
    30c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    30c2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    30c4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	ac 01       	movw	r20, r24
    30ca:	bd 01       	movw	r22, r26
    30cc:	ce 01       	movw	r24, r28
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	0e 94 10 2a 	call	0x5420	; 0x5420 <_ZN6StringC1Efh>
    30d4:	ce 01       	movw	r24, r28
    30d6:	01 96       	adiw	r24, 0x01	; 1
    30d8:	3f d9       	rcall	.-3458   	; 0x2358 <_ZNK6String5c_strEv>
    30da:	9c 01       	movw	r18, r24
    30dc:	8f 81       	ldd	r24, Y+7	; 0x07
    30de:	98 85       	ldd	r25, Y+8	; 0x08
    30e0:	88 5b       	subi	r24, 0xB8	; 184
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	b9 01       	movw	r22, r18
    30e6:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    //TdsAvgString = String(_tdsValueAverage, 0).c_str();
    return _tdsValue;
    30f2:	8f 81       	ldd	r24, Y+7	; 0x07
    30f4:	98 85       	ldd	r25, Y+8	; 0x08
    30f6:	fc 01       	movw	r30, r24
    30f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    30fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    30fe:	b5 8d       	ldd	r27, Z+29	; 0x1d

}
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	28 96       	adiw	r28, 0x08	; 8
    3106:	e2 e0       	ldi	r30, 0x02	; 2
    3108:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000310c <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    310c:	aa e1       	ldi	r26, 0x1A	; 26
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ec e8       	ldi	r30, 0x8C	; 140
    3112:	f8 e1       	ldi	r31, 0x18	; 24
    3114:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    3118:	9a 8f       	std	Y+26, r25	; 0x1a
    311a:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    311c:	89 8d       	ldd	r24, Y+25	; 0x19
    311e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3120:	c3 df       	rcall	.-122    	; 0x30a8 <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    3122:	82 e1       	ldi	r24, 0x12	; 18
    3124:	93 e0       	ldi	r25, 0x03	; 3
    3126:	fc 01       	movw	r30, r24
    3128:	80 81       	ld	r24, Z
    312a:	88 23       	and	r24, r24
    312c:	89 f4       	brne	.+34     	; 0x3150 <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    312e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    313a:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    313e:	a0 93 2c 03 	sts	0x032C, r26	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3142:	b0 93 2d 03 	sts	0x032D, r27	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3146:	82 e1       	ldi	r24, 0x12	; 18
    3148:	93 e0       	ldi	r25, 0x03	; 3
    314a:	21 e0       	ldi	r18, 0x01	; 1
    314c:	fc 01       	movw	r30, r24
    314e:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    3150:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    3154:	9b 01       	movw	r18, r22
    3156:	ac 01       	movw	r20, r24
    3158:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    315c:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3160:	a0 91 2c 03 	lds	r26, 0x032C	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3164:	b0 91 2d 03 	lds	r27, 0x032D	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3168:	28 1b       	sub	r18, r24
    316a:	39 0b       	sbc	r19, r25
    316c:	4a 0b       	sbc	r20, r26
    316e:	5b 0b       	sbc	r21, r27
    3170:	89 8d       	ldd	r24, Y+25	; 0x19
    3172:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3174:	fc 01       	movw	r30, r24
    3176:	80 8d       	ldd	r24, Z+24	; 0x18
    3178:	91 8d       	ldd	r25, Z+25	; 0x19
    317a:	80 57       	subi	r24, 0x70	; 112
    317c:	9e 4f       	sbci	r25, 0xFE	; 254
    317e:	09 2e       	mov	r0, r25
    3180:	00 0c       	add	r0, r0
    3182:	aa 0b       	sbc	r26, r26
    3184:	bb 0b       	sbc	r27, r27
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	82 17       	cp	r24, r18
    318a:	93 07       	cpc	r25, r19
    318c:	a4 07       	cpc	r26, r20
    318e:	b5 07       	cpc	r27, r21
    3190:	08 f0       	brcs	.+2      	; 0x3194 <_ZN9TDSSensor13PrintTDSToLCDEv+0x88>
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	66 23       	and	r22, r22
    3196:	09 f4       	brne	.+2      	; 0x319a <_ZN9TDSSensor13PrintTDSToLCDEv+0x8e>
    3198:	70 c0       	rjmp	.+224    	; 0x327a <_ZN9TDSSensor13PrintTDSToLCDEv+0x16e>
        if(_printToLCD) {
    319a:	89 8d       	ldd	r24, Y+25	; 0x19
    319c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    319e:	fc 01       	movw	r30, r24
    31a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    31a2:	88 23       	and	r24, r24
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <_ZN9TDSSensor13PrintTDSToLCDEv+0x9c>
    31a6:	53 c0       	rjmp	.+166    	; 0x324e <_ZN9TDSSensor13PrintTDSToLCDEv+0x142>
            String enabled = "";
    31a8:	ce 01       	movw	r24, r28
    31aa:	0d 96       	adiw	r24, 0x0d	; 13
    31ac:	69 e2       	ldi	r22, 0x29	; 41
    31ae:	71 e0       	ldi	r23, 0x01	; 1
    31b0:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
            if(_enabled) {
    31b4:	89 8d       	ldd	r24, Y+25	; 0x19
    31b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31b8:	fc 01       	movw	r30, r24
    31ba:	81 a1       	ldd	r24, Z+33	; 0x21
    31bc:	88 23       	and	r24, r24
    31be:	31 f0       	breq	.+12     	; 0x31cc <_ZN9TDSSensor13PrintTDSToLCDEv+0xc0>
                enabled = "<";
    31c0:	ce 01       	movw	r24, r28
    31c2:	0d 96       	adiw	r24, 0x0d	; 13
    31c4:	6a e2       	ldi	r22, 0x2A	; 42
    31c6:	71 e0       	ldi	r23, 0x01	; 1
    31c8:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsString + " " + enabled;
    31cc:	89 8d       	ldd	r24, Y+25	; 0x19
    31ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31d0:	8c 01       	movw	r16, r24
    31d2:	08 5b       	subi	r16, 0xB8	; 184
    31d4:	1f 4f       	sbci	r17, 0xFF	; 255
    31d6:	ce 01       	movw	r24, r28
    31d8:	07 96       	adiw	r24, 0x07	; 7
    31da:	6c e2       	ldi	r22, 0x2C	; 44
    31dc:	71 e0       	ldi	r23, 0x01	; 1
    31de:	cd d8       	rcall	.-3686   	; 0x237a <_ZN15StringSumHelperC1EPKc>
    31e0:	ce 01       	movw	r24, r28
    31e2:	07 96       	adiw	r24, 0x07	; 7
    31e4:	b8 01       	movw	r22, r16
    31e6:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZplRK15StringSumHelperRK6String>
    31ea:	62 e3       	ldi	r22, 0x32	; 50
    31ec:	71 e0       	ldi	r23, 0x01	; 1
    31ee:	0e 94 c9 2a 	call	0x5592	; 0x5592 <_ZplRK15StringSumHelperPKc>
    31f2:	9c 01       	movw	r18, r24
    31f4:	ce 01       	movw	r24, r28
    31f6:	0d 96       	adiw	r24, 0x0d	; 13
    31f8:	bc 01       	movw	r22, r24
    31fa:	c9 01       	movw	r24, r18
    31fc:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZplRK15StringSumHelperRK6String>
    3200:	9c 01       	movw	r18, r24
    3202:	ce 01       	movw	r24, r28
    3204:	43 96       	adiw	r24, 0x13	; 19
    3206:	b9 01       	movw	r22, r18
    3208:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    320c:	ce 01       	movw	r24, r28
    320e:	07 96       	adiw	r24, 0x07	; 7
    3210:	13 dd       	rcall	.-1498   	; 0x2c38 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    3212:	ce 01       	movw	r24, r28
    3214:	43 96       	adiw	r24, 0x13	; 19
    3216:	bc 01       	movw	r22, r24
    3218:	ce 01       	movw	r24, r28
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    3220:	89 8d       	ldd	r24, Y+25	; 0x19
    3222:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3224:	84 96       	adiw	r24, 0x24	; 36
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	a9 01       	movw	r20, r18
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_ZN7LCDBase9PrintLineEs6String>
    3236:	ce 01       	movw	r24, r28
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsString + " " + enabled;
    323e:	ce 01       	movw	r24, r28
    3240:	43 96       	adiw	r24, 0x13	; 19
    3242:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3246:	ce 01       	movw	r24, r28
    3248:	0d 96       	adiw	r24, 0x0d	; 13
    324a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    324e:	8d e0       	ldi	r24, 0x0D	; 13
    3250:	0e 94 e6 28 	call	0x51cc	; 0x51cc <digitalRead>
    3254:	98 2f       	mov	r25, r24
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	89 27       	eor	r24, r25
    325a:	68 2f       	mov	r22, r24
    325c:	8d e0       	ldi	r24, 0x0D	; 13
    325e:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
        printTime = millis();
    3262:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    326e:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3272:	a0 93 2c 03 	sts	0x032C, r26	; 0x80032c <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3276:	b0 93 2d 03 	sts	0x032D, r27	; 0x80032d <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    327a:	6a 96       	adiw	r28, 0x1a	; 26
    327c:	e4 e0       	ldi	r30, 0x04	; 4
    327e:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00003282 <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    3282:	a2 e0       	ldi	r26, 0x02	; 2
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e7 e4       	ldi	r30, 0x47	; 71
    3288:	f9 e1       	ldi	r31, 0x19	; 25
    328a:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	fc 01       	movw	r30, r24
    3298:	91 a1       	ldd	r25, Z+33	; 0x21
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	89 27       	eor	r24, r25
    329e:	88 23       	and	r24, r24
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <_ZN9TDSSensor12CalculateTDSEv+0x22>
        return;
    32a2:	58 c0       	rjmp	.+176    	; 0x3354 <_ZN9TDSSensor12CalculateTDSEv+0xd2>
    }

    _tdsValue = getTDSValue();
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	59 d0       	rcall	.+178    	; 0x335c <_ZN9TDSSensor11getTDSValueEv>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	29 81       	ldd	r18, Y+1	; 0x01
    32b0:	3a 81       	ldd	r19, Y+2	; 0x02
    32b2:	f9 01       	movw	r30, r18
    32b4:	82 8f       	std	Z+26, r24	; 0x1a
    32b6:	93 8f       	std	Z+27, r25	; 0x1b
    32b8:	a4 8f       	std	Z+28, r26	; 0x1c
    32ba:	b5 8f       	std	Z+29, r27	; 0x1d
    static unsigned long samplingTime = millis();
    32bc:	8a e1       	ldi	r24, 0x1A	; 26
    32be:	93 e0       	ldi	r25, 0x03	; 3
    32c0:	fc 01       	movw	r30, r24
    32c2:	80 81       	ld	r24, Z
    32c4:	88 23       	and	r24, r24
    32c6:	89 f4       	brne	.+34     	; 0x32ea <_ZN9TDSSensor12CalculateTDSEv+0x68>
    32c8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    32d4:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    32d8:	a0 93 30 03 	sts	0x0330, r26	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    32dc:	b0 93 31 03 	sts	0x0331, r27	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    32e0:	8a e1       	ldi	r24, 0x1A	; 26
    32e2:	93 e0       	ldi	r25, 0x03	; 3
    32e4:	21 e0       	ldi	r18, 0x01	; 1
    32e6:	fc 01       	movw	r30, r24
    32e8:	20 83       	st	Z, r18
    if(millis() - samplingTime > 60000) { //wait 1 min inbetween readings
    32ea:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    32ee:	9b 01       	movw	r18, r22
    32f0:	ac 01       	movw	r20, r24
    32f2:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    32f6:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    32fa:	a0 91 30 03 	lds	r26, 0x0330	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    32fe:	b0 91 31 03 	lds	r27, 0x0331	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    3302:	79 01       	movw	r14, r18
    3304:	8a 01       	movw	r16, r20
    3306:	e8 1a       	sub	r14, r24
    3308:	f9 0a       	sbc	r15, r25
    330a:	0a 0b       	sbc	r16, r26
    330c:	1b 0b       	sbc	r17, r27
    330e:	d8 01       	movw	r26, r16
    3310:	c7 01       	movw	r24, r14
    3312:	21 e0       	ldi	r18, 0x01	; 1
    3314:	81 36       	cpi	r24, 0x61	; 97
    3316:	9a 4e       	sbci	r25, 0xEA	; 234
    3318:	a1 05       	cpc	r26, r1
    331a:	b1 05       	cpc	r27, r1
    331c:	08 f4       	brcc	.+2      	; 0x3320 <_ZN9TDSSensor12CalculateTDSEv+0x9e>
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	22 23       	and	r18, r18
    3322:	c1 f0       	breq	.+48     	; 0x3354 <_ZN9TDSSensor12CalculateTDSEv+0xd2>

        _tdsValue = getTDSValue();
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	19 d0       	rcall	.+50     	; 0x335c <_ZN9TDSSensor11getTDSValueEv>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	29 81       	ldd	r18, Y+1	; 0x01
    3330:	3a 81       	ldd	r19, Y+2	; 0x02
    3332:	f9 01       	movw	r30, r18
    3334:	82 8f       	std	Z+26, r24	; 0x1a
    3336:	93 8f       	std	Z+27, r25	; 0x1b
    3338:	a4 8f       	std	Z+28, r26	; 0x1c
    333a:	b5 8f       	std	Z+29, r27	; 0x1d
        samplingTime = millis();
    333c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    3348:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    334c:	a0 93 30 03 	sts	0x0330, r26	; 0x800330 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    3350:	b0 93 31 03 	sts	0x0331, r27	; 0x800331 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    //
    //if(_numOfSamples > 10) {
    //_numOfSamples = 1;
    //}

}
    3354:	22 96       	adiw	r28, 0x02	; 2
    3356:	e6 e0       	ldi	r30, 0x06	; 6
    3358:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

0000335c <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    335c:	a2 e1       	ldi	r26, 0x12	; 18
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	e4 eb       	ldi	r30, 0xB4	; 180
    3362:	f9 e1       	ldi	r31, 0x19	; 25
    3364:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    3368:	9a 8b       	std	Y+18, r25	; 0x12
    336a:	89 8b       	std	Y+17, r24	; 0x11
    static unsigned long samplingTime = millis();
    336c:	82 e2       	ldi	r24, 0x22	; 34
    336e:	93 e0       	ldi	r25, 0x03	; 3
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	88 23       	and	r24, r24
    3376:	89 f4       	brne	.+34     	; 0x339a <_ZN9TDSSensor11getTDSValueEv+0x3e>
    3378:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    3384:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    3388:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    338c:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    3390:	82 e2       	ldi	r24, 0x22	; 34
    3392:	93 e0       	ldi	r25, 0x03	; 3
    3394:	21 e0       	ldi	r18, 0x01	; 1
    3396:	fc 01       	movw	r30, r24
    3398:	20 83       	st	Z, r18
    if(millis() - samplingTime > 1000) {//wait .5 sec between readings, according to spec
    339a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    339e:	9b 01       	movw	r18, r22
    33a0:	ac 01       	movw	r20, r24
    33a2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    33a6:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    33aa:	a0 91 34 03 	lds	r26, 0x0334	; 0x800334 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    33ae:	b0 91 35 03 	lds	r27, 0x0335	; 0x800335 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    33b2:	79 01       	movw	r14, r18
    33b4:	8a 01       	movw	r16, r20
    33b6:	e8 1a       	sub	r14, r24
    33b8:	f9 0a       	sbc	r15, r25
    33ba:	0a 0b       	sbc	r16, r26
    33bc:	1b 0b       	sbc	r17, r27
    33be:	d8 01       	movw	r26, r16
    33c0:	c7 01       	movw	r24, r14
    33c2:	21 e0       	ldi	r18, 0x01	; 1
    33c4:	89 3e       	cpi	r24, 0xE9	; 233
    33c6:	93 40       	sbci	r25, 0x03	; 3
    33c8:	a1 05       	cpc	r26, r1
    33ca:	b1 05       	cpc	r27, r1
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <_ZN9TDSSensor11getTDSValueEv+0x74>
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	22 23       	and	r18, r18
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <_ZN9TDSSensor11getTDSValueEv+0x7a>
    33d4:	93 c0       	rjmp	.+294    	; 0x34fc <_ZN9TDSSensor11getTDSValueEv+0x1a0>
        int numOfSamples = 10;
    33d6:	8a e0       	ldi	r24, 0x0A	; 10
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 83       	std	Y+1, r24	; 0x01
        int reading = analogRead(_pin);
    33de:	89 89       	ldd	r24, Y+17	; 0x11
    33e0:	9a 89       	ldd	r25, Y+18	; 0x12
    33e2:	fc 01       	movw	r30, r24
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	0e 94 35 28 	call	0x506a	; 0x506a <analogRead>
    33ec:	9c 83       	std	Y+4, r25	; 0x04
    33ee:	8b 83       	std	Y+3, r24	; 0x03

        Serial.print(F("TDS Raw Reading: "));
    33f0:	8b e7       	ldi	r24, 0x7B	; 123
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	bc 01       	movw	r22, r24
    33f6:	8d e2       	ldi	r24, 0x2D	; 45
    33f8:	95 e0       	ldi	r25, 0x05	; 5
    33fa:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(reading);
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	9c 81       	ldd	r25, Y+4	; 0x04
    3402:	4a e0       	ldi	r20, 0x0A	; 10
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	bc 01       	movw	r22, r24
    3408:	8d e2       	ldi	r24, 0x2D	; 45
    340a:	95 e0       	ldi	r25, 0x05	; 5
    340c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_ZN5Print7printlnEii>

        _tdsAverage[_tdsArrayIndex++] = reading;
    3410:	89 89       	ldd	r24, Y+17	; 0x11
    3412:	9a 89       	ldd	r25, Y+18	; 0x12
    3414:	fc 01       	movw	r30, r24
    3416:	86 89       	ldd	r24, Z+22	; 0x16
    3418:	97 89       	ldd	r25, Z+23	; 0x17
    341a:	ac 01       	movw	r20, r24
    341c:	4f 5f       	subi	r20, 0xFF	; 255
    341e:	5f 4f       	sbci	r21, 0xFF	; 255
    3420:	29 89       	ldd	r18, Y+17	; 0x11
    3422:	3a 89       	ldd	r19, Y+18	; 0x12
    3424:	f9 01       	movw	r30, r18
    3426:	57 8b       	std	Z+23, r21	; 0x17
    3428:	46 8b       	std	Z+22, r20	; 0x16
    342a:	29 89       	ldd	r18, Y+17	; 0x11
    342c:	3a 89       	ldd	r19, Y+18	; 0x12
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	82 0f       	add	r24, r18
    3436:	93 1f       	adc	r25, r19
    3438:	2b 81       	ldd	r18, Y+3	; 0x03
    343a:	3c 81       	ldd	r19, Y+4	; 0x04
    343c:	fc 01       	movw	r30, r24
    343e:	31 83       	std	Z+1, r19	; 0x01
    3440:	20 83       	st	Z, r18
        if(_tdsArrayIndex == numOfSamples) {
    3442:	89 89       	ldd	r24, Y+17	; 0x11
    3444:	9a 89       	ldd	r25, Y+18	; 0x12
    3446:	fc 01       	movw	r30, r24
    3448:	26 89       	ldd	r18, Z+22	; 0x16
    344a:	37 89       	ldd	r19, Z+23	; 0x17
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
    3450:	28 17       	cp	r18, r24
    3452:	39 07       	cpc	r19, r25
    3454:	29 f4       	brne	.+10     	; 0x3460 <_ZN9TDSSensor11getTDSValueEv+0x104>
            _tdsArrayIndex = 0;
    3456:	89 89       	ldd	r24, Y+17	; 0x11
    3458:	9a 89       	ldd	r25, Y+18	; 0x12
    345a:	fc 01       	movw	r30, r24
    345c:	17 8a       	std	Z+23, r1	; 0x17
    345e:	16 8a       	std	Z+22, r1	; 0x16
        }
        double tdsAvg = MathExt::CalculateAverage(_tdsAverage, numOfSamples);
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	02 96       	adiw	r24, 0x02	; 2
    3466:	29 81       	ldd	r18, Y+1	; 0x01
    3468:	3a 81       	ldd	r19, Y+2	; 0x02
    346a:	b9 01       	movw	r22, r18
    346c:	0e 94 4c 10 	call	0x2098	; 0x2098 <_ZN7MathExt16CalculateAverageEPii>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	af 83       	std	Y+7, r26	; 0x07
    347a:	b8 87       	std	Y+8, r27	; 0x08
        double voltage = tdsAvg * (5.0 / 1024);
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 ea       	ldi	r20, 0xA0	; 160
    3482:	5b e3       	ldi	r21, 0x3B	; 59
    3484:	6d 81       	ldd	r22, Y+5	; 0x05
    3486:	7e 81       	ldd	r23, Y+6	; 0x06
    3488:	8f 81       	ldd	r24, Y+7	; 0x07
    348a:	98 85       	ldd	r25, Y+8	; 0x08
    348c:	0e 94 a9 23 	call	0x4752	; 0x4752 <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	89 87       	std	Y+9, r24	; 0x09
    3496:	9a 87       	std	Y+10, r25	; 0x0a
    3498:	ab 87       	std	Y+11, r26	; 0x0b
    349a:	bc 87       	std	Y+12, r27	; 0x0c
        double tankTDS = voltage * Offset;
    349c:	89 89       	ldd	r24, Y+17	; 0x11
    349e:	9a 89       	ldd	r25, Y+18	; 0x12
    34a0:	82 5b       	subi	r24, 0xB2	; 178
    34a2:	9f 4f       	sbci	r25, 0xFF	; 255
    34a4:	fc 01       	movw	r30, r24
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	09 2e       	mov	r0, r25
    34ac:	00 0c       	add	r0, r0
    34ae:	aa 0b       	sbc	r26, r26
    34b0:	bb 0b       	sbc	r27, r27
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__floatsisf>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	29 85       	ldd	r18, Y+9	; 0x09
    34c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    34c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    34c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 a9 23 	call	0x4752	; 0x4752 <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8d 87       	std	Y+13, r24	; 0x0d
    34d4:	9e 87       	std	Y+14, r25	; 0x0e
    34d6:	af 87       	std	Y+15, r26	; 0x0f
    34d8:	b8 8b       	std	Y+16, r27	; 0x10

        samplingTime = millis();
    34da:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <millis>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    34e6:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    34ea:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    34ee:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
        return tankTDS;
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	af 85       	ldd	r26, Y+15	; 0x0f
    34f8:	b8 89       	ldd	r27, Y+16	; 0x10
    34fa:	07 c0       	rjmp	.+14     	; 0x350a <_ZN9TDSSensor11getTDSValueEv+0x1ae>
    }
    return _tdsValue;
    34fc:	89 89       	ldd	r24, Y+17	; 0x11
    34fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3500:	fc 01       	movw	r30, r24
    3502:	82 8d       	ldd	r24, Z+26	; 0x1a
    3504:	93 8d       	ldd	r25, Z+27	; 0x1b
    3506:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3508:	b5 8d       	ldd	r27, Z+29	; 0x1d

}
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	62 96       	adiw	r28, 0x12	; 18
    3510:	e6 e0       	ldi	r30, 0x06	; 6
    3512:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00003516 <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    3516:	a2 e0       	ldi	r26, 0x02	; 2
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e1 e9       	ldi	r30, 0x91	; 145
    351c:	fa e1       	ldi	r31, 0x1A	; 26
    351e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	21 e0       	ldi	r18, 0x01	; 1
    352c:	fc 01       	movw	r30, r24
    352e:	21 a3       	std	Z+33, r18	; 0x21
    digitalWrite(_relayPin, HIGH);
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	fc 01       	movw	r30, r24
    3536:	87 8d       	ldd	r24, Z+31	; 0x1f
    3538:	90 a1       	ldd	r25, Z+32	; 0x20
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
}
    3540:	22 96       	adiw	r28, 0x02	; 2
    3542:	e2 e0       	ldi	r30, 0x02	; 2
    3544:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003548 <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    3548:	a2 e0       	ldi	r26, 0x02	; 2
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	ea ea       	ldi	r30, 0xAA	; 170
    354e:	fa e1       	ldi	r31, 0x1A	; 26
    3550:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3554:	9a 83       	std	Y+2, r25	; 0x02
    3556:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
    355a:	9a 81       	ldd	r25, Y+2	; 0x02
    355c:	fc 01       	movw	r30, r24
    355e:	11 a2       	std	Z+33, r1	; 0x21
    digitalWrite(_relayPin, LOW);
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	9a 81       	ldd	r25, Y+2	; 0x02
    3564:	fc 01       	movw	r30, r24
    3566:	87 8d       	ldd	r24, Z+31	; 0x1f
    3568:	90 a1       	ldd	r25, Z+32	; 0x20
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	0e 94 b7 28 	call	0x516e	; 0x516e <digitalWrite>
    delay(1000);
    3570:	68 ee       	ldi	r22, 0xE8	; 232
    3572:	73 e0       	ldi	r23, 0x03	; 3
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <delay>

}
    357c:	22 96       	adiw	r28, 0x02	; 2
    357e:	e2 e0       	ldi	r30, 0x02	; 2
    3580:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003584 <_ZN6EEWrapIiEcvKiEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    3584:	a2 e0       	ldi	r26, 0x02	; 2
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e8 ec       	ldi	r30, 0xC8	; 200
    358a:	fa e1       	ldi	r31, 0x1A	; 26
    358c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	18 d0       	rcall	.+48     	; 0x35ca <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    359a:	22 96       	adiw	r28, 0x02	; 2
    359c:	e2 e0       	ldi	r30, 0x02	; 2
    359e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000035a2 <_ZN6EEWrapIiEaSERKi>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    35a2:	a4 e0       	ldi	r26, 0x04	; 4
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	e7 ed       	ldi	r30, 0xD7	; 215
    35a8:	fa e1       	ldi	r31, 0x1A	; 26
    35aa:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    35ae:	9a 83       	std	Y+2, r25	; 0x02
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	7c 83       	std	Y+4, r23	; 0x04
    35b4:	6b 83       	std	Y+3, r22	; 0x03
    35b6:	2b 81       	ldd	r18, Y+3	; 0x03
    35b8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	b9 01       	movw	r22, r18
    35c0:	21 d0       	rcall	.+66     	; 0x3604 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    35c2:	24 96       	adiw	r28, 0x04	; 4
    35c4:	e2 e0       	ldi	r30, 0x02	; 2
    35c6:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000035ca <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    35ca:	a4 e0       	ldi	r26, 0x04	; 4
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	eb ee       	ldi	r30, 0xEB	; 235
    35d0:	fa e1       	ldi	r31, 0x1A	; 26
    35d2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    35d6:	9c 83       	std	Y+4, r25	; 0x04
    35d8:	8b 83       	std	Y+3, r24	; 0x03
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	9c 81       	ldd	r25, Y+4	; 0x04
    35de:	31 d0       	rcall	.+98     	; 0x3642 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    35e0:	bc 01       	movw	r22, r24
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 01       	movw	r18, r28
    35e8:	2f 5f       	subi	r18, 0xFF	; 255
    35ea:	3f 4f       	sbci	r19, 0xFF	; 255
    35ec:	82 0f       	add	r24, r18
    35ee:	93 1f       	adc	r25, r19
    35f0:	42 e0       	ldi	r20, 0x02	; 2
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
        }
    35fc:	24 96       	adiw	r28, 0x04	; 4
    35fe:	e2 e0       	ldi	r30, 0x02	; 2
    3600:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003604 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:

        D &EEWrite( const T& v ){
    3604:	a4 e0       	ldi	r26, 0x04	; 4
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	e8 e0       	ldi	r30, 0x08	; 8
    360a:	fb e1       	ldi	r31, 0x1B	; 27
    360c:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3610:	9a 83       	std	Y+2, r25	; 0x02
    3612:	89 83       	std	Y+1, r24	; 0x01
    3614:	7c 83       	std	Y+4, r23	; 0x04
    3616:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	12 d0       	rcall	.+36     	; 0x3642 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    361e:	bc 01       	movw	r22, r24
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	2b 81       	ldd	r18, Y+3	; 0x03
    3626:	3c 81       	ldd	r19, Y+4	; 0x04
    3628:	82 0f       	add	r24, r18
    362a:	93 1f       	adc	r25, r19
    362c:	42 e0       	ldi	r20, 0x02	; 2
    362e:	50 e0       	ldi	r21, 0x00	; 0
    3630:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	04 d0       	rcall	.+8      	; 0x3642 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    363a:	24 96       	adiw	r28, 0x04	; 4
    363c:	e2 e0       	ldi	r30, 0x02	; 2
    363e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003642 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:
        protected: STATIC_ACCESS
    3642:	a2 e0       	ldi	r26, 0x02	; 2
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	e7 e2       	ldi	r30, 0x27	; 39
    3648:	fb e1       	ldi	r31, 0x1B	; 27
    364a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	9a 81       	ldd	r25, Y+2	; 0x02
    3656:	22 96       	adiw	r28, 0x02	; 2
    3658:	e2 e0       	ldi	r30, 0x02	; 2
    365a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000365e <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    365e:	a2 e0       	ldi	r26, 0x02	; 2
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	e5 e3       	ldi	r30, 0x35	; 53
    3664:	fb e1       	ldi	r31, 0x1B	; 27
    3666:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	fc 01       	movw	r30, r24
    3674:	84 81       	ldd	r24, Z+4	; 0x04
    3676:	95 81       	ldd	r25, Z+5	; 0x05
    3678:	22 96       	adiw	r28, 0x02	; 2
    367a:	e2 e0       	ldi	r30, 0x02	; 2
    367c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003680 <_ZN6StringpLEPKc>:
    3680:	a4 e0       	ldi	r26, 0x04	; 4
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e6 e4       	ldi	r30, 0x46	; 70
    3686:	fb e1       	ldi	r31, 0x1B	; 27
    3688:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	7c 83       	std	Y+4, r23	; 0x04
    3692:	6b 83       	std	Y+3, r22	; 0x03
    3694:	2b 81       	ldd	r18, Y+3	; 0x03
    3696:	3c 81       	ldd	r19, Y+4	; 0x04
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	9a 81       	ldd	r25, Y+2	; 0x02
    369c:	b9 01       	movw	r22, r18
    369e:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN6String6concatEPKc>
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	24 96       	adiw	r28, 0x04	; 4
    36a8:	e2 e0       	ldi	r30, 0x02	; 2
    36aa:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000036ae <_ZNK6StringeqEPKc>:
    36ae:	a4 e0       	ldi	r26, 0x04	; 4
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	ed e5       	ldi	r30, 0x5D	; 93
    36b4:	fb e1       	ldi	r31, 0x1B	; 27
    36b6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	7c 83       	std	Y+4, r23	; 0x04
    36c0:	6b 83       	std	Y+3, r22	; 0x03
    36c2:	2b 81       	ldd	r18, Y+3	; 0x03
    36c4:	3c 81       	ldd	r19, Y+4	; 0x04
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	b9 01       	movw	r22, r18
    36cc:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZNK6String6equalsEPKc>
    36d0:	24 96       	adiw	r28, 0x04	; 4
    36d2:	e2 e0       	ldi	r30, 0x02	; 2
    36d4:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000036d8 <_ZN15StringSumHelperC1ERK6String>:
    36d8:	a4 e0       	ldi	r26, 0x04	; 4
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e2 e7       	ldi	r30, 0x72	; 114
    36de:	fb e1       	ldi	r31, 0x1B	; 27
    36e0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    36e4:	9a 83       	std	Y+2, r25	; 0x02
    36e6:	89 83       	std	Y+1, r24	; 0x01
    36e8:	7c 83       	std	Y+4, r23	; 0x04
    36ea:	6b 83       	std	Y+3, r22	; 0x03
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	2b 81       	ldd	r18, Y+3	; 0x03
    36f2:	3c 81       	ldd	r19, Y+4	; 0x04
    36f4:	b9 01       	movw	r22, r18
    36f6:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    36fa:	24 96       	adiw	r28, 0x04	; 4
    36fc:	e2 e0       	ldi	r30, 0x02	; 2
    36fe:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003702 <_ZN15WaterSensorWire5SetupEv>:
    3702:	a0 e0       	ldi	r26, 0x00	; 0
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e7 e8       	ldi	r30, 0x87	; 135
    3708:	fb e1       	ldi	r31, 0x1B	; 27
    370a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    370e:	8d e8       	ldi	r24, 0x8D	; 141
    3710:	93 e0       	ldi	r25, 0x03	; 3
    3712:	bc 01       	movw	r22, r24
    3714:	8d e2       	ldi	r24, 0x2D	; 45
    3716:	95 e0       	ldi	r25, 0x05	; 5
    3718:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    371c:	4a e0       	ldi	r20, 0x0A	; 10
    371e:	50 e0       	ldi	r21, 0x00	; 0
    3720:	68 e0       	ldi	r22, 0x08	; 8
    3722:	8d e2       	ldi	r24, 0x2D	; 45
    3724:	95 e0       	ldi	r25, 0x05	; 5
    3726:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <_ZN5Print7printlnEhi>
    372a:	68 e0       	ldi	r22, 0x08	; 8
    372c:	8f e8       	ldi	r24, 0x8F	; 143
    372e:	92 e0       	ldi	r25, 0x02	; 2
    3730:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN7TwoWire5beginEh>
    3734:	6c e8       	ldi	r22, 0x8C	; 140
    3736:	7d e1       	ldi	r23, 0x1D	; 29
    3738:	8f e8       	ldi	r24, 0x8F	; 143
    373a:	92 e0       	ldi	r25, 0x02	; 2
    373c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN7TwoWire9onRequestEPFvvE>
    3740:	62 e9       	ldi	r22, 0x92	; 146
    3742:	7c e1       	ldi	r23, 0x1C	; 28
    3744:	8f e8       	ldi	r24, 0x8F	; 143
    3746:	92 e0       	ldi	r25, 0x02	; 2
    3748:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7TwoWire9onReceiveEPFviE>
    374c:	e2 e0       	ldi	r30, 0x02	; 2
    374e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003752 <_ZN15WaterSensorWire4LoopEv>:
    3752:	a4 e3       	ldi	r26, 0x34	; 52
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	ef ea       	ldi	r30, 0xAF	; 175
    3758:	fb e1       	ldi	r31, 0x1B	; 27
    375a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    375e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3762:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    3766:	8e 58       	subi	r24, 0x8E	; 142
    3768:	9f 4f       	sbci	r25, 0xFF	; 255
    376a:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZNK6String5c_strEv>
    376e:	bc 01       	movw	r22, r24
    3770:	84 e5       	ldi	r24, 0x54	; 84
    3772:	93 e0       	ldi	r25, 0x03	; 3
    3774:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3778:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    377c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    3780:	88 5b       	subi	r24, 0xB8	; 184
    3782:	9f 4f       	sbci	r25, 0xFF	; 255
    3784:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZNK6String5c_strEv>
    3788:	bc 01       	movw	r22, r24
    378a:	8a e5       	ldi	r24, 0x5A	; 90
    378c:	93 e0       	ldi	r25, 0x03	; 3
    378e:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3792:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3796:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    379a:	88 58       	subi	r24, 0x88	; 136
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	fc 01       	movw	r30, r24
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	a2 81       	ldd	r26, Z+2	; 0x02
    37a6:	b3 81       	ldd	r27, Z+3	; 0x03
    37a8:	fe 01       	movw	r30, r28
    37aa:	b7 96       	adiw	r30, 0x27	; 39
    37ac:	22 e0       	ldi	r18, 0x02	; 2
    37ae:	ac 01       	movw	r20, r24
    37b0:	bd 01       	movw	r22, r26
    37b2:	cf 01       	movw	r24, r30
    37b4:	0e 94 3e 2a 	call	0x547c	; 0x547c <_ZN6StringC1Edh>
    37b8:	ce 01       	movw	r24, r28
    37ba:	87 96       	adiw	r24, 0x27	; 39
    37bc:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZNK6String5c_strEv>
    37c0:	bc 01       	movw	r22, r24
    37c2:	82 e7       	ldi	r24, 0x72	; 114
    37c4:	93 e0       	ldi	r25, 0x03	; 3
    37c6:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    37ca:	ce 01       	movw	r24, r28
    37cc:	87 96       	adiw	r24, 0x27	; 39
    37ce:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    37d2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    37d6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    37da:	82 5b       	subi	r24, 0xB2	; 178
    37dc:	9f 4f       	sbci	r25, 0xFF	; 255
    37de:	fc 01       	movw	r30, r24
    37e0:	20 81       	ld	r18, Z
    37e2:	31 81       	ldd	r19, Z+1	; 0x01
    37e4:	ce 01       	movw	r24, r28
    37e6:	81 96       	adiw	r24, 0x21	; 33
    37e8:	4a e0       	ldi	r20, 0x0A	; 10
    37ea:	b9 01       	movw	r22, r18
    37ec:	0e 94 bb 29 	call	0x5376	; 0x5376 <_ZN6StringC1Eih>
    37f0:	ce 01       	movw	r24, r28
    37f2:	81 96       	adiw	r24, 0x21	; 33
    37f4:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZNK6String5c_strEv>
    37f8:	bc 01       	movw	r22, r24
    37fa:	88 e7       	ldi	r24, 0x78	; 120
    37fc:	93 e0       	ldi	r25, 0x03	; 3
    37fe:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3802:	ce 01       	movw	r24, r28
    3804:	81 96       	adiw	r24, 0x21	; 33
    3806:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    380a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <_ZN7Globals10ReadingTDSE>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 27       	eor	r24, r25
    3812:	88 23       	and	r24, r24
    3814:	39 f0       	breq	.+14     	; 0x3824 <_ZN15WaterSensorWire4LoopEv+0xd2>
    3816:	64 e3       	ldi	r22, 0x34	; 52
    3818:	71 e0       	ldi	r23, 0x01	; 1
    381a:	8c e6       	ldi	r24, 0x6C	; 108
    381c:	93 e0       	ldi	r25, 0x03	; 3
    381e:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <_ZN15WaterSensorWire4LoopEv+0xde>
    3824:	67 e3       	ldi	r22, 0x37	; 55
    3826:	71 e0       	ldi	r23, 0x01	; 1
    3828:	8c e6       	ldi	r24, 0x6C	; 108
    382a:	93 e0       	ldi	r25, 0x03	; 3
    382c:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3830:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <_ZN7Globals18SensorReadDurationE>
    3834:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <_ZN7Globals18SensorReadDurationE+0x1>
    3838:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <_ZN7Globals18SensorReadDurationE+0x2>
    383c:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <_ZN7Globals18SensorReadDurationE+0x3>
    3840:	28 ee       	ldi	r18, 0xE8	; 232
    3842:	33 e0       	ldi	r19, 0x03	; 3
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodsi4>
    3850:	da 01       	movw	r26, r20
    3852:	c9 01       	movw	r24, r18
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	9a 83       	std	Y+2, r25	; 0x02
    3858:	ab 83       	std	Y+3, r26	; 0x03
    385a:	bc 83       	std	Y+4, r27	; 0x04
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	ab 81       	ldd	r26, Y+3	; 0x03
    3862:	bc 81       	ldd	r27, Y+4	; 0x04
    3864:	fe 01       	movw	r30, r28
    3866:	75 96       	adiw	r30, 0x15	; 21
    3868:	2a e0       	ldi	r18, 0x0A	; 10
    386a:	ac 01       	movw	r20, r24
    386c:	bd 01       	movw	r22, r26
    386e:	cf 01       	movw	r24, r30
    3870:	0e 94 e5 29 	call	0x53ca	; 0x53ca <_ZN6StringC1Elh>
    3874:	9e 01       	movw	r18, r28
    3876:	2b 5e       	subi	r18, 0xEB	; 235
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	ce 01       	movw	r24, r28
    387c:	4b 96       	adiw	r24, 0x1b	; 27
    387e:	b9 01       	movw	r22, r18
    3880:	2b df       	rcall	.-426    	; 0x36d8 <_ZN15StringSumHelperC1ERK6String>
    3882:	ce 01       	movw	r24, r28
    3884:	4b 96       	adiw	r24, 0x1b	; 27
    3886:	6b e3       	ldi	r22, 0x3B	; 59
    3888:	71 e0       	ldi	r23, 0x01	; 1
    388a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <_ZplRK15StringSumHelperPKc>
    388e:	bc 01       	movw	r22, r24
    3890:	86 e6       	ldi	r24, 0x66	; 102
    3892:	93 e0       	ldi	r25, 0x03	; 3
    3894:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3898:	ce 01       	movw	r24, r28
    389a:	4b 96       	adiw	r24, 0x1b	; 27
    389c:	cd d9       	rcall	.-3174   	; 0x2c38 <_ZN15StringSumHelperD1Ev>
    389e:	ce 01       	movw	r24, r28
    38a0:	45 96       	adiw	r24, 0x15	; 21
    38a2:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    38a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    38aa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    38ae:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    38b2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    38b6:	28 ee       	ldi	r18, 0xE8	; 232
    38b8:	33 e0       	ldi	r19, 0x03	; 3
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodsi4>
    38c6:	da 01       	movw	r26, r20
    38c8:	c9 01       	movw	r24, r18
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	9e 83       	std	Y+6, r25	; 0x06
    38ce:	af 83       	std	Y+7, r26	; 0x07
    38d0:	b8 87       	std	Y+8, r27	; 0x08
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	af 81       	ldd	r26, Y+7	; 0x07
    38d8:	b8 85       	ldd	r27, Y+8	; 0x08
    38da:	fe 01       	movw	r30, r28
    38dc:	39 96       	adiw	r30, 0x09	; 9
    38de:	2a e0       	ldi	r18, 0x0A	; 10
    38e0:	ac 01       	movw	r20, r24
    38e2:	bd 01       	movw	r22, r26
    38e4:	cf 01       	movw	r24, r30
    38e6:	0e 94 e5 29 	call	0x53ca	; 0x53ca <_ZN6StringC1Elh>
    38ea:	9e 01       	movw	r18, r28
    38ec:	27 5f       	subi	r18, 0xF7	; 247
    38ee:	3f 4f       	sbci	r19, 0xFF	; 255
    38f0:	ce 01       	movw	r24, r28
    38f2:	0f 96       	adiw	r24, 0x0f	; 15
    38f4:	b9 01       	movw	r22, r18
    38f6:	f0 de       	rcall	.-544    	; 0x36d8 <_ZN15StringSumHelperC1ERK6String>
    38f8:	ce 01       	movw	r24, r28
    38fa:	0f 96       	adiw	r24, 0x0f	; 15
    38fc:	6b e3       	ldi	r22, 0x3B	; 59
    38fe:	71 e0       	ldi	r23, 0x01	; 1
    3900:	0e 94 c9 2a 	call	0x5592	; 0x5592 <_ZplRK15StringSumHelperPKc>
    3904:	bc 01       	movw	r22, r24
    3906:	80 e6       	ldi	r24, 0x60	; 96
    3908:	93 e0       	ldi	r25, 0x03	; 3
    390a:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    390e:	ce 01       	movw	r24, r28
    3910:	0f 96       	adiw	r24, 0x0f	; 15
    3912:	92 d9       	rcall	.-3292   	; 0x2c38 <_ZN15StringSumHelperD1Ev>
    3914:	ce 01       	movw	r24, r28
    3916:	09 96       	adiw	r24, 0x09	; 9
    3918:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    391c:	e4 96       	adiw	r28, 0x34	; 52
    391e:	e2 e0       	ldi	r30, 0x02	; 2
    3920:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003924 <_ZN15WaterSensorWire7ReceiveEi>:
    3924:	a7 e2       	ldi	r26, 0x27	; 39
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	e8 e9       	ldi	r30, 0x98	; 152
    392a:	fc e1       	ldi	r31, 0x1C	; 28
    392c:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__prologue_saves__+0x1e>
    3930:	9f a3       	std	Y+39, r25	; 0x27
    3932:	8e a3       	std	Y+38, r24	; 0x26
    3934:	6d e3       	ldi	r22, 0x3D	; 61
    3936:	71 e0       	ldi	r23, 0x01	; 1
    3938:	86 e3       	ldi	r24, 0x36	; 54
    393a:	93 e0       	ldi	r25, 0x03	; 3
    393c:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3940:	6d e3       	ldi	r22, 0x3D	; 61
    3942:	71 e0       	ldi	r23, 0x01	; 1
    3944:	82 e4       	ldi	r24, 0x42	; 66
    3946:	93 e0       	ldi	r25, 0x03	; 3
    3948:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    394c:	6d e3       	ldi	r22, 0x3D	; 61
    394e:	71 e0       	ldi	r23, 0x01	; 1
    3950:	88 e4       	ldi	r24, 0x48	; 72
    3952:	93 e0       	ldi	r25, 0x03	; 3
    3954:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3958:	8e a1       	ldd	r24, Y+38	; 0x26
    395a:	9f a1       	ldd	r25, Y+39	; 0x27
    395c:	44 97       	sbiw	r24, 0x14	; 20
    395e:	09 f0       	breq	.+2      	; 0x3962 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    3960:	c7 c0       	rjmp	.+398    	; 0x3af0 <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    3962:	0a c0       	rjmp	.+20     	; 0x3978 <_ZN15WaterSensorWire7ReceiveEi+0x54>
    3964:	8f e8       	ldi	r24, 0x8F	; 143
    3966:	92 e0       	ldi	r25, 0x02	; 2
    3968:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN7TwoWire4readEv>
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	69 81       	ldd	r22, Y+1	; 0x01
    3970:	86 e3       	ldi	r24, 0x36	; 54
    3972:	93 e0       	ldi	r25, 0x03	; 3
    3974:	0e 94 a6 2a 	call	0x554c	; 0x554c <_ZN6String6concatEc>
    3978:	8f e8       	ldi	r24, 0x8F	; 143
    397a:	92 e0       	ldi	r25, 0x02	; 2
    397c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN7TwoWire9availableEv>
    3980:	21 e0       	ldi	r18, 0x01	; 1
    3982:	18 16       	cp	r1, r24
    3984:	19 06       	cpc	r1, r25
    3986:	0c f0       	brlt	.+2      	; 0x398a <_ZN15WaterSensorWire7ReceiveEi+0x66>
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	22 23       	and	r18, r18
    398c:	59 f7       	brne	.-42     	; 0x3964 <_ZN15WaterSensorWire7ReceiveEi+0x40>
    398e:	86 e3       	ldi	r24, 0x36	; 54
    3990:	93 e0       	ldi	r25, 0x03	; 3
    3992:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN6String4trimEv>
    3996:	ce 01       	movw	r24, r28
    3998:	44 96       	adiw	r24, 0x14	; 20
    399a:	6e e3       	ldi	r22, 0x3E	; 62
    399c:	71 e0       	ldi	r23, 0x01	; 1
    399e:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    39a2:	ce 01       	movw	r24, r28
    39a4:	44 96       	adiw	r24, 0x14	; 20
    39a6:	bc 01       	movw	r22, r24
    39a8:	86 e3       	ldi	r24, 0x36	; 54
    39aa:	93 e0       	ldi	r25, 0x03	; 3
    39ac:	0e 94 23 2b 	call	0x5646	; 0x5646 <_ZNK6String10startsWithERKS_>
    39b0:	11 e0       	ldi	r17, 0x01	; 1
    39b2:	88 23       	and	r24, r24
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <_ZN15WaterSensorWire7ReceiveEi+0x94>
    39b6:	10 e0       	ldi	r17, 0x00	; 0
    39b8:	ce 01       	movw	r24, r28
    39ba:	44 96       	adiw	r24, 0x14	; 20
    39bc:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    39c0:	11 23       	and	r17, r17
    39c2:	a1 f0       	breq	.+40     	; 0x39ec <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    39c4:	66 e3       	ldi	r22, 0x36	; 54
    39c6:	73 e0       	ldi	r23, 0x03	; 3
    39c8:	82 e4       	ldi	r24, 0x42	; 66
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    39d0:	86 e9       	ldi	r24, 0x96	; 150
    39d2:	93 e0       	ldi	r25, 0x03	; 3
    39d4:	bc 01       	movw	r22, r24
    39d6:	8d e2       	ldi	r24, 0x2D	; 45
    39d8:	95 e0       	ldi	r25, 0x05	; 5
    39da:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    39de:	62 e4       	ldi	r22, 0x42	; 66
    39e0:	73 e0       	ldi	r23, 0x03	; 3
    39e2:	8d e2       	ldi	r24, 0x2D	; 45
    39e4:	95 e0       	ldi	r25, 0x05	; 5
    39e6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnERK6String>
    39ea:	92 c0       	rjmp	.+292    	; 0x3b10 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    39ec:	66 e3       	ldi	r22, 0x36	; 54
    39ee:	73 e0       	ldi	r23, 0x03	; 3
    39f0:	88 e4       	ldi	r24, 0x48	; 72
    39f2:	93 e0       	ldi	r25, 0x03	; 3
    39f4:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    39f8:	8c e9       	ldi	r24, 0x9C	; 156
    39fa:	93 e0       	ldi	r25, 0x03	; 3
    39fc:	bc 01       	movw	r22, r24
    39fe:	8d e2       	ldi	r24, 0x2D	; 45
    3a00:	95 e0       	ldi	r25, 0x05	; 5
    3a02:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    3a06:	68 e4       	ldi	r22, 0x48	; 72
    3a08:	73 e0       	ldi	r23, 0x03	; 3
    3a0a:	8d e2       	ldi	r24, 0x2D	; 45
    3a0c:	95 e0       	ldi	r25, 0x05	; 5
    3a0e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN5Print7printlnERK6String>
    3a12:	ce 01       	movw	r24, r28
    3a14:	0e 96       	adiw	r24, 0x0e	; 14
    3a16:	68 e4       	ldi	r22, 0x48	; 72
    3a18:	73 e0       	ldi	r23, 0x03	; 3
    3a1a:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    3a1e:	ce 01       	movw	r24, r28
    3a20:	4a 96       	adiw	r24, 0x1a	; 26
    3a22:	be 01       	movw	r22, r28
    3a24:	62 5f       	subi	r22, 0xF2	; 242
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	4d e3       	ldi	r20, 0x3D	; 61
    3a2e:	94 d1       	rcall	.+808    	; 0x3d58 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3a30:	ce 01       	movw	r24, r28
    3a32:	0e 96       	adiw	r24, 0x0e	; 14
    3a34:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3a38:	ce 01       	movw	r24, r28
    3a3a:	08 96       	adiw	r24, 0x08	; 8
    3a3c:	68 e4       	ldi	r22, 0x48	; 72
    3a3e:	73 e0       	ldi	r23, 0x03	; 3
    3a40:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    3a44:	ce 01       	movw	r24, r28
    3a46:	80 96       	adiw	r24, 0x20	; 32
    3a48:	be 01       	movw	r22, r28
    3a4a:	68 5f       	subi	r22, 0xF8	; 248
    3a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4e:	21 e0       	ldi	r18, 0x01	; 1
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	4d e3       	ldi	r20, 0x3D	; 61
    3a54:	81 d1       	rcall	.+770    	; 0x3d58 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3a56:	ce 01       	movw	r24, r28
    3a58:	08 96       	adiw	r24, 0x08	; 8
    3a5a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3a5e:	ce 01       	movw	r24, r28
    3a60:	4a 96       	adiw	r24, 0x1a	; 26
    3a62:	60 e4       	ldi	r22, 0x40	; 64
    3a64:	71 e0       	ldi	r23, 0x01	; 1
    3a66:	23 de       	rcall	.-954    	; 0x36ae <_ZNK6StringeqEPKc>
    3a68:	98 2f       	mov	r25, r24
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	99 23       	and	r25, r25
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	88 23       	and	r24, r24
    3a74:	89 f0       	breq	.+34     	; 0x3a98 <_ZN15WaterSensorWire7ReceiveEi+0x174>
    3a76:	ce 01       	movw	r24, r28
    3a78:	80 96       	adiw	r24, 0x20	; 32
    3a7a:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZNK6String5toIntEv>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9b 83       	std	Y+3, r25	; 0x03
    3a84:	8a 83       	std	Y+2, r24	; 0x02
    3a86:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    3a8a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    3a8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3a90:	3b 81       	ldd	r19, Y+3	; 0x03
    3a92:	b9 01       	movw	r22, r18
    3a94:	e6 da       	rcall	.-2612   	; 0x3062 <_ZN9TDSSensor6UpdateEi>
    3a96:	23 c0       	rjmp	.+70     	; 0x3ade <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    3a98:	ce 01       	movw	r24, r28
    3a9a:	4a 96       	adiw	r24, 0x1a	; 26
    3a9c:	6a e4       	ldi	r22, 0x4A	; 74
    3a9e:	71 e0       	ldi	r23, 0x01	; 1
    3aa0:	06 de       	rcall	.-1012   	; 0x36ae <_ZNK6StringeqEPKc>
    3aa2:	98 2f       	mov	r25, r24
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	99 23       	and	r25, r25
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <_ZN15WaterSensorWire7ReceiveEi+0x188>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	88 23       	and	r24, r24
    3aae:	b9 f0       	breq	.+46     	; 0x3ade <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	80 96       	adiw	r24, 0x20	; 32
    3ab4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZNK6String7toFloatEv>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8c 83       	std	Y+4, r24	; 0x04
    3abe:	9d 83       	std	Y+5, r25	; 0x05
    3ac0:	ae 83       	std	Y+6, r26	; 0x06
    3ac2:	bf 83       	std	Y+7, r27	; 0x07
    3ac4:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3ac8:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad0:	ae 81       	ldd	r26, Y+6	; 0x06
    3ad2:	bf 81       	ldd	r27, Y+7	; 0x07
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	bd 01       	movw	r22, r26
    3ad8:	c9 01       	movw	r24, r18
    3ada:	0e 94 23 14 	call	0x2846	; 0x2846 <_ZN8PHSensor6UpdateEd>
    3ade:	ce 01       	movw	r24, r28
    3ae0:	80 96       	adiw	r24, 0x20	; 32
    3ae2:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	4a 96       	adiw	r24, 0x1a	; 26
    3aea:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3aee:	10 c0       	rjmp	.+32     	; 0x3b10 <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    3af0:	86 ea       	ldi	r24, 0xA6	; 166
    3af2:	93 e0       	ldi	r25, 0x03	; 3
    3af4:	bc 01       	movw	r22, r24
    3af6:	8d e2       	ldi	r24, 0x2D	; 45
    3af8:	95 e0       	ldi	r25, 0x05	; 5
    3afa:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    3afe:	8e a1       	ldd	r24, Y+38	; 0x26
    3b00:	9f a1       	ldd	r25, Y+39	; 0x27
    3b02:	4a e0       	ldi	r20, 0x0A	; 10
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	bc 01       	movw	r22, r24
    3b08:	8d e2       	ldi	r24, 0x2D	; 45
    3b0a:	95 e0       	ldi	r25, 0x05	; 5
    3b0c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_ZN5Print7printlnEii>
    3b10:	a7 96       	adiw	r28, 0x27	; 39
    3b12:	e3 e0       	ldi	r30, 0x03	; 3
    3b14:	0c 94 6c 2c 	jmp	0x58d8	; 0x58d8 <__epilogue_restores__+0x1e>

00003b18 <_ZN15WaterSensorWire7RequestEv>:
    3b18:	a2 e1       	ldi	r26, 0x12	; 18
    3b1a:	b0 e0       	ldi	r27, 0x00	; 0
    3b1c:	e2 e9       	ldi	r30, 0x92	; 146
    3b1e:	fd e1       	ldi	r31, 0x1D	; 29
    3b20:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__prologue_saves__+0x1c>
    3b24:	ce 01       	movw	r24, r28
    3b26:	0d 96       	adiw	r24, 0x0d	; 13
    3b28:	6d e3       	ldi	r22, 0x3D	; 61
    3b2a:	71 e0       	ldi	r23, 0x01	; 1
    3b2c:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    3b30:	6e e3       	ldi	r22, 0x3E	; 62
    3b32:	71 e0       	ldi	r23, 0x01	; 1
    3b34:	82 e4       	ldi	r24, 0x42	; 66
    3b36:	93 e0       	ldi	r25, 0x03	; 3
    3b38:	ba dd       	rcall	.-1164   	; 0x36ae <_ZNK6StringeqEPKc>
    3b3a:	98 2f       	mov	r25, r24
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	99 23       	and	r25, r25
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <_ZN15WaterSensorWire7RequestEv+0x2c>
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	88 23       	and	r24, r24
    3b46:	c1 f0       	breq	.+48     	; 0x3b78 <_ZN15WaterSensorWire7RequestEv+0x60>
    3b48:	ce 01       	movw	r24, r28
    3b4a:	0d 96       	adiw	r24, 0x0d	; 13
    3b4c:	63 e5       	ldi	r22, 0x53	; 83
    3b4e:	71 e0       	ldi	r23, 0x01	; 1
    3b50:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZN6StringaSEPKc>
    3b54:	9e 01       	movw	r18, r28
    3b56:	23 5f       	subi	r18, 0xF3	; 243
    3b58:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	07 96       	adiw	r24, 0x07	; 7
    3b5e:	b9 01       	movw	r22, r18
    3b60:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    3b64:	ce 01       	movw	r24, r28
    3b66:	07 96       	adiw	r24, 0x07	; 7
    3b68:	a7 d0       	rcall	.+334    	; 0x3cb8 <_ZN15WaterSensorWire8TransmitE6String>
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	07 96       	adiw	r24, 0x07	; 7
    3b6e:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3b72:	00 e0       	ldi	r16, 0x00	; 0
    3b74:	10 e0       	ldi	r17, 0x00	; 0
    3b76:	94 c0       	rjmp	.+296    	; 0x3ca0 <_ZN15WaterSensorWire7RequestEv+0x188>
    3b78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3b7c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3b80:	01 96       	adiw	r24, 0x01	; 1
    3b82:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3b86:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3b8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3b8e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3b92:	89 2b       	or	r24, r25
    3b94:	39 f4       	brne	.+14     	; 0x3ba4 <_ZN15WaterSensorWire7RequestEv+0x8c>
    3b96:	ce 01       	movw	r24, r28
    3b98:	0d 96       	adiw	r24, 0x0d	; 13
    3b9a:	64 e5       	ldi	r22, 0x54	; 84
    3b9c:	73 e0       	ldi	r23, 0x03	; 3
    3b9e:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3ba2:	6e c0       	rjmp	.+220    	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3ba4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3ba8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	39 f4       	brne	.+14     	; 0x3bbe <_ZN15WaterSensorWire7RequestEv+0xa6>
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	0d 96       	adiw	r24, 0x0d	; 13
    3bb4:	6a e5       	ldi	r22, 0x5A	; 90
    3bb6:	73 e0       	ldi	r23, 0x03	; 3
    3bb8:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3bbc:	61 c0       	rjmp	.+194    	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3bbe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3bc2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3bc6:	02 97       	sbiw	r24, 0x02	; 2
    3bc8:	39 f4       	brne	.+14     	; 0x3bd8 <_ZN15WaterSensorWire7RequestEv+0xc0>
    3bca:	ce 01       	movw	r24, r28
    3bcc:	0d 96       	adiw	r24, 0x0d	; 13
    3bce:	62 e7       	ldi	r22, 0x72	; 114
    3bd0:	73 e0       	ldi	r23, 0x03	; 3
    3bd2:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3bd6:	54 c0       	rjmp	.+168    	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3bd8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3bdc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3be0:	03 97       	sbiw	r24, 0x03	; 3
    3be2:	39 f4       	brne	.+14     	; 0x3bf2 <_ZN15WaterSensorWire7RequestEv+0xda>
    3be4:	ce 01       	movw	r24, r28
    3be6:	0d 96       	adiw	r24, 0x0d	; 13
    3be8:	68 e7       	ldi	r22, 0x78	; 120
    3bea:	73 e0       	ldi	r23, 0x03	; 3
    3bec:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3bf0:	47 c0       	rjmp	.+142    	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3bf2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3bf6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3bfa:	04 97       	sbiw	r24, 0x04	; 4
    3bfc:	39 f4       	brne	.+14     	; 0x3c0c <_ZN15WaterSensorWire7RequestEv+0xf4>
    3bfe:	ce 01       	movw	r24, r28
    3c00:	0d 96       	adiw	r24, 0x0d	; 13
    3c02:	6c e6       	ldi	r22, 0x6C	; 108
    3c04:	73 e0       	ldi	r23, 0x03	; 3
    3c06:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3c0a:	3a c0       	rjmp	.+116    	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3c0c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c10:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c14:	05 97       	sbiw	r24, 0x05	; 5
    3c16:	39 f4       	brne	.+14     	; 0x3c26 <_ZN15WaterSensorWire7RequestEv+0x10e>
    3c18:	ce 01       	movw	r24, r28
    3c1a:	0d 96       	adiw	r24, 0x0d	; 13
    3c1c:	66 e6       	ldi	r22, 0x66	; 102
    3c1e:	73 e0       	ldi	r23, 0x03	; 3
    3c20:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3c24:	2d c0       	rjmp	.+90     	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3c26:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c2a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c2e:	06 97       	sbiw	r24, 0x06	; 6
    3c30:	69 f4       	brne	.+26     	; 0x3c4c <_ZN15WaterSensorWire7RequestEv+0x134>
    3c32:	ce 01       	movw	r24, r28
    3c34:	0d 96       	adiw	r24, 0x0d	; 13
    3c36:	60 e6       	ldi	r22, 0x60	; 96
    3c38:	73 e0       	ldi	r23, 0x03	; 3
    3c3a:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN6StringaSERKS_>
    3c3e:	8f ef       	ldi	r24, 0xFF	; 255
    3c40:	9f ef       	ldi	r25, 0xFF	; 255
    3c42:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3c46:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3c4a:	1a c0       	rjmp	.+52     	; 0x3c80 <_ZN15WaterSensorWire7RequestEv+0x168>
    3c4c:	8c ec       	ldi	r24, 0xCC	; 204
    3c4e:	93 e0       	ldi	r25, 0x03	; 3
    3c50:	bc 01       	movw	r22, r24
    3c52:	8d e2       	ldi	r24, 0x2D	; 45
    3c54:	95 e0       	ldi	r25, 0x05	; 5
    3c56:	e4 d7       	rcall	.+4040   	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    3c58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c5c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c60:	4a e0       	ldi	r20, 0x0A	; 10
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	bc 01       	movw	r22, r24
    3c66:	8d e2       	ldi	r24, 0x2D	; 45
    3c68:	95 e0       	ldi	r25, 0x05	; 5
    3c6a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_ZN5Print7printlnEii>
    3c6e:	8f ef       	ldi	r24, 0xFF	; 255
    3c70:	9f ef       	ldi	r25, 0xFF	; 255
    3c72:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3c76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3c7a:	00 e0       	ldi	r16, 0x00	; 0
    3c7c:	10 e0       	ldi	r17, 0x00	; 0
    3c7e:	10 c0       	rjmp	.+32     	; 0x3ca0 <_ZN15WaterSensorWire7RequestEv+0x188>
    3c80:	ce 01       	movw	r24, r28
    3c82:	0d 96       	adiw	r24, 0x0d	; 13
    3c84:	bc 01       	movw	r22, r24
    3c86:	ce 01       	movw	r24, r28
    3c88:	01 96       	adiw	r24, 0x01	; 1
    3c8a:	0e 94 9e 29 	call	0x533c	; 0x533c <_ZN6StringC1ERKS_>
    3c8e:	ce 01       	movw	r24, r28
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	12 d0       	rcall	.+36     	; 0x3cb8 <_ZN15WaterSensorWire8TransmitE6String>
    3c94:	ce 01       	movw	r24, r28
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3c9c:	01 e0       	ldi	r16, 0x01	; 1
    3c9e:	10 e0       	ldi	r17, 0x00	; 0
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	0d 96       	adiw	r24, 0x0d	; 13
    3ca4:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3ca8:	01 30       	cpi	r16, 0x01	; 1
    3caa:	11 05       	cpc	r17, r1
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <_ZN15WaterSensorWire7RequestEv+0x198>
    3cae:	00 00       	nop
    3cb0:	62 96       	adiw	r28, 0x12	; 18
    3cb2:	e4 e0       	ldi	r30, 0x04	; 4
    3cb4:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

00003cb8 <_ZN15WaterSensorWire8TransmitE6String>:
    3cb8:	a2 e1       	ldi	r26, 0x12	; 18
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	e2 e6       	ldi	r30, 0x62	; 98
    3cbe:	fe e1       	ldi	r31, 0x1E	; 30
    3cc0:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3cc4:	9a 8b       	std	Y+18, r25	; 0x12
    3cc6:	89 8b       	std	Y+17, r24	; 0x11
    3cc8:	89 89       	ldd	r24, Y+17	; 0x11
    3cca:	9a 89       	ldd	r25, Y+18	; 0x12
    3ccc:	c8 dc       	rcall	.-1648   	; 0x365e <_ZNK6String6lengthEv>
    3cce:	9c 01       	movw	r18, r24
    3cd0:	8a e0       	ldi	r24, 0x0A	; 10
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	82 1b       	sub	r24, r18
    3cd6:	93 0b       	sbc	r25, r19
    3cd8:	9e 83       	std	Y+6, r25	; 0x06
    3cda:	8d 83       	std	Y+5, r24	; 0x05
    3cdc:	1a 82       	std	Y+2, r1	; 0x02
    3cde:	19 82       	std	Y+1, r1	; 0x01
    3ce0:	0a c0       	rjmp	.+20     	; 0x3cf6 <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    3ce2:	89 89       	ldd	r24, Y+17	; 0x11
    3ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ce6:	69 e5       	ldi	r22, 0x59	; 89
    3ce8:	71 e0       	ldi	r23, 0x01	; 1
    3cea:	ca dc       	rcall	.-1644   	; 0x3680 <_ZN6StringpLEPKc>
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	9a 83       	std	Y+2, r25	; 0x02
    3cf4:	89 83       	std	Y+1, r24	; 0x01
    3cf6:	29 81       	ldd	r18, Y+1	; 0x01
    3cf8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	28 17       	cp	r18, r24
    3d00:	39 07       	cpc	r19, r25
    3d02:	7c f3       	brlt	.-34     	; 0x3ce2 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    3d04:	1c 82       	std	Y+4, r1	; 0x04
    3d06:	1b 82       	std	Y+3, r1	; 0x03
    3d08:	16 c0       	rjmp	.+44     	; 0x3d36 <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    3d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d0e:	89 89       	ldd	r24, Y+17	; 0x11
    3d10:	9a 89       	ldd	r25, Y+18	; 0x12
    3d12:	b9 01       	movw	r22, r18
    3d14:	0e 94 42 2b 	call	0x5684	; 0x5684 <_ZNK6String6charAtEj>
    3d18:	48 2f       	mov	r20, r24
    3d1a:	9e 01       	movw	r18, r28
    3d1c:	29 5f       	subi	r18, 0xF9	; 249
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	82 0f       	add	r24, r18
    3d26:	93 1f       	adc	r25, r19
    3d28:	fc 01       	movw	r30, r24
    3d2a:	40 83       	st	Z, r20
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	9c 83       	std	Y+4, r25	; 0x04
    3d34:	8b 83       	std	Y+3, r24	; 0x03
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
    3d38:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3a:	0a 97       	sbiw	r24, 0x0a	; 10
    3d3c:	34 f3       	brlt	.-52     	; 0x3d0a <_ZN15WaterSensorWire8TransmitE6String+0x52>
    3d3e:	ce 01       	movw	r24, r28
    3d40:	07 96       	adiw	r24, 0x07	; 7
    3d42:	4a e0       	ldi	r20, 0x0A	; 10
    3d44:	50 e0       	ldi	r21, 0x00	; 0
    3d46:	bc 01       	movw	r22, r24
    3d48:	8f e8       	ldi	r24, 0x8F	; 143
    3d4a:	92 e0       	ldi	r25, 0x02	; 2
    3d4c:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN7TwoWire5writeEPKhj>
    3d50:	62 96       	adiw	r28, 0x12	; 18
    3d52:	e2 e0       	ldi	r30, 0x02	; 2
    3d54:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003d58 <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    3d58:	a1 e1       	ldi	r26, 0x11	; 17
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    3d5e:	fe e1       	ldi	r31, 0x1E	; 30
    3d60:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3d64:	9c 87       	std	Y+12, r25	; 0x0c
    3d66:	8b 87       	std	Y+11, r24	; 0x0b
    3d68:	7e 87       	std	Y+14, r23	; 0x0e
    3d6a:	6d 87       	std	Y+13, r22	; 0x0d
    3d6c:	4f 87       	std	Y+15, r20	; 0x0f
    3d6e:	39 8b       	std	Y+17, r19	; 0x11
    3d70:	28 8b       	std	Y+16, r18	; 0x10
    3d72:	1a 82       	std	Y+2, r1	; 0x02
    3d74:	19 82       	std	Y+1, r1	; 0x01
    3d76:	18 86       	std	Y+8, r1	; 0x08
    3d78:	1f 82       	std	Y+7, r1	; 0x07
    3d7a:	8f ef       	ldi	r24, 0xFF	; 255
    3d7c:	9f ef       	ldi	r25, 0xFF	; 255
    3d7e:	9a 87       	std	Y+10, r25	; 0x0a
    3d80:	89 87       	std	Y+9, r24	; 0x09
    3d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d86:	6b dc       	rcall	.-1834   	; 0x365e <_ZNK6String6lengthEv>
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	9e 83       	std	Y+6, r25	; 0x06
    3d8c:	8d 83       	std	Y+5, r24	; 0x05
    3d8e:	1c 82       	std	Y+4, r1	; 0x04
    3d90:	1b 82       	std	Y+3, r1	; 0x03
    3d92:	35 c0       	rjmp	.+106    	; 0x3dfe <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    3d94:	2b 81       	ldd	r18, Y+3	; 0x03
    3d96:	3c 81       	ldd	r19, Y+4	; 0x04
    3d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d9c:	b9 01       	movw	r22, r18
    3d9e:	0e 94 42 2b 	call	0x5684	; 0x5684 <_ZNK6String6charAtEj>
    3da2:	98 2f       	mov	r25, r24
    3da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da6:	98 17       	cp	r25, r24
    3da8:	39 f0       	breq	.+14     	; 0x3db8 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    3daa:	2b 81       	ldd	r18, Y+3	; 0x03
    3dac:	3c 81       	ldd	r19, Y+4	; 0x04
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	28 17       	cp	r18, r24
    3db4:	39 07       	cpc	r19, r25
    3db6:	11 f4       	brne	.+4      	; 0x3dbc <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	88 23       	and	r24, r24
    3dc0:	c9 f0       	breq	.+50     	; 0x3df4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	9a 83       	std	Y+2, r25	; 0x02
    3dca:	89 83       	std	Y+1, r24	; 0x01
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	01 96       	adiw	r24, 0x01	; 1
    3dd2:	98 87       	std	Y+8, r25	; 0x08
    3dd4:	8f 83       	std	Y+7, r24	; 0x07
    3dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    3dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	28 17       	cp	r18, r24
    3de0:	39 07       	cpc	r19, r25
    3de2:	21 f4       	brne	.+8      	; 0x3dec <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	01 96       	adiw	r24, 0x01	; 1
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	9a 87       	std	Y+10, r25	; 0x0a
    3df2:	89 87       	std	Y+9, r24	; 0x09
    3df4:	8b 81       	ldd	r24, Y+3	; 0x03
    3df6:	9c 81       	ldd	r25, Y+4	; 0x04
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	9c 83       	std	Y+4, r25	; 0x04
    3dfc:	8b 83       	std	Y+3, r24	; 0x03
    3dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    3e00:	3c 81       	ldd	r19, Y+4	; 0x04
    3e02:	8d 81       	ldd	r24, Y+5	; 0x05
    3e04:	9e 81       	ldd	r25, Y+6	; 0x06
    3e06:	82 17       	cp	r24, r18
    3e08:	93 07       	cpc	r25, r19
    3e0a:	44 f0       	brlt	.+16     	; 0x3e1c <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3e0c:	29 81       	ldd	r18, Y+1	; 0x01
    3e0e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e10:	88 89       	ldd	r24, Y+16	; 0x10
    3e12:	99 89       	ldd	r25, Y+17	; 0x11
    3e14:	82 17       	cp	r24, r18
    3e16:	93 07       	cpc	r25, r19
    3e18:	0c f0       	brlt	.+2      	; 0x3e1c <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3e1a:	bc cf       	rjmp	.-136    	; 0x3d94 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    3e1c:	29 81       	ldd	r18, Y+1	; 0x01
    3e1e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e20:	88 89       	ldd	r24, Y+16	; 0x10
    3e22:	99 89       	ldd	r25, Y+17	; 0x11
    3e24:	82 17       	cp	r24, r18
    3e26:	93 07       	cpc	r25, r19
    3e28:	6c f4       	brge	.+26     	; 0x3e44 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    3e2a:	89 85       	ldd	r24, Y+9	; 0x09
    3e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2e:	9c 01       	movw	r18, r24
    3e30:	8f 81       	ldd	r24, Y+7	; 0x07
    3e32:	98 85       	ldd	r25, Y+8	; 0x08
    3e34:	ac 01       	movw	r20, r24
    3e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e3e:	0e 94 43 2b 	call	0x5686	; 0x5686 <_ZNK6String9substringEjj>
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    3e44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e46:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e48:	6d e3       	ldi	r22, 0x3D	; 61
    3e4a:	71 e0       	ldi	r23, 0x01	; 1
    3e4c:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    3e50:	00 00       	nop
    3e52:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e54:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e56:	61 96       	adiw	r28, 0x11	; 17
    3e58:	e2 e0       	ldi	r30, 0x02	; 2
    3e5a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003e5e <_Z41__static_initialization_and_destruction_0ii>:
    3e5e:	a4 e0       	ldi	r26, 0x04	; 4
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e5 e3       	ldi	r30, 0x35	; 53
    3e64:	ff e1       	ldi	r31, 0x1F	; 31
    3e66:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	7c 83       	std	Y+4, r23	; 0x04
    3e70:	6b 83       	std	Y+3, r22	; 0x03
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <_Z41__static_initialization_and_destruction_0ii+0x1e>
    3e7a:	4d c0       	rjmp	.+154    	; 0x3f16 <_Z41__static_initialization_and_destruction_0ii+0xb8>
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e80:	01 96       	adiw	r24, 0x01	; 1
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <_Z41__static_initialization_and_destruction_0ii+0x28>
    3e84:	48 c0       	rjmp	.+144    	; 0x3f16 <_Z41__static_initialization_and_destruction_0ii+0xb8>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3e86:	6d e3       	ldi	r22, 0x3D	; 61
    3e88:	71 e0       	ldi	r23, 0x01	; 1
    3e8a:	86 e3       	ldi	r24, 0x36	; 54
    3e8c:	93 e0       	ldi	r25, 0x03	; 3
    3e8e:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _wireResponse = "";
    3e92:	6d e3       	ldi	r22, 0x3D	; 61
    3e94:	71 e0       	ldi	r23, 0x01	; 1
    3e96:	8c e3       	ldi	r24, 0x3C	; 60
    3e98:	93 e0       	ldi	r25, 0x03	; 3
    3e9a:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    3e9e:	6d e3       	ldi	r22, 0x3D	; 61
    3ea0:	71 e0       	ldi	r23, 0x01	; 1
    3ea2:	82 e4       	ldi	r24, 0x42	; 66
    3ea4:	93 e0       	ldi	r25, 0x03	; 3
    3ea6:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _cmdData = "";
    3eaa:	6d e3       	ldi	r22, 0x3D	; 61
    3eac:	71 e0       	ldi	r23, 0x01	; 1
    3eae:	88 e4       	ldi	r24, 0x48	; 72
    3eb0:	93 e0       	ldi	r25, 0x03	; 3
    3eb2:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _response = "";
    3eb6:	6d e3       	ldi	r22, 0x3D	; 61
    3eb8:	71 e0       	ldi	r23, 0x01	; 1
    3eba:	8e e4       	ldi	r24, 0x4E	; 78
    3ebc:	93 e0       	ldi	r25, 0x03	; 3
    3ebe:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
//static long _lastReqReceived = 0;
static String _ph = "";
    3ec2:	6d e3       	ldi	r22, 0x3D	; 61
    3ec4:	71 e0       	ldi	r23, 0x01	; 1
    3ec6:	84 e5       	ldi	r24, 0x54	; 84
    3ec8:	93 e0       	ldi	r25, 0x03	; 3
    3eca:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
//static String _phAvg = "";
static String _tds = "";
    3ece:	6d e3       	ldi	r22, 0x3D	; 61
    3ed0:	71 e0       	ldi	r23, 0x01	; 1
    3ed2:	8a e5       	ldi	r24, 0x5A	; 90
    3ed4:	93 e0       	ldi	r25, 0x03	; 3
    3ed6:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3eda:	6d e3       	ldi	r22, 0x3D	; 61
    3edc:	71 e0       	ldi	r23, 0x01	; 1
    3ede:	80 e6       	ldi	r24, 0x60	; 96
    3ee0:	93 e0       	ldi	r25, 0x03	; 3
    3ee2:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _sensorReadDur = "";
    3ee6:	6d e3       	ldi	r22, 0x3D	; 61
    3ee8:	71 e0       	ldi	r23, 0x01	; 1
    3eea:	86 e6       	ldi	r24, 0x66	; 102
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _reading = "";
    3ef2:	6d e3       	ldi	r22, 0x3D	; 61
    3ef4:	71 e0       	ldi	r23, 0x01	; 1
    3ef6:	8c e6       	ldi	r24, 0x6C	; 108
    3ef8:	93 e0       	ldi	r25, 0x03	; 3
    3efa:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _phOffset = "";
    3efe:	6d e3       	ldi	r22, 0x3D	; 61
    3f00:	71 e0       	ldi	r23, 0x01	; 1
    3f02:	82 e7       	ldi	r24, 0x72	; 114
    3f04:	93 e0       	ldi	r25, 0x03	; 3
    3f06:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
static String _tdsOffset = "";
    3f0a:	6d e3       	ldi	r22, 0x3D	; 61
    3f0c:	71 e0       	ldi	r23, 0x01	; 1
    3f0e:	88 e7       	ldi	r24, 0x78	; 120
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	0e 94 75 29 	call	0x52ea	; 0x52ea <_ZN6StringC1EPKc>
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	89 2b       	or	r24, r25
    3f1c:	a1 f5       	brne	.+104    	; 0x3f86 <_Z41__static_initialization_and_destruction_0ii+0x128>
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	9c 81       	ldd	r25, Y+4	; 0x04
    3f22:	01 96       	adiw	r24, 0x01	; 1
    3f24:	81 f5       	brne	.+96     	; 0x3f86 <_Z41__static_initialization_and_destruction_0ii+0x128>
    3f26:	88 e7       	ldi	r24, 0x78	; 120
    3f28:	93 e0       	ldi	r25, 0x03	; 3
    3f2a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
static String _phOffset = "";
    3f2e:	82 e7       	ldi	r24, 0x72	; 114
    3f30:	93 e0       	ldi	r25, 0x03	; 3
    3f32:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
    3f36:	8c e6       	ldi	r24, 0x6C	; 108
    3f38:	93 e0       	ldi	r25, 0x03	; 3
    3f3a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
    3f3e:	86 e6       	ldi	r24, 0x66	; 102
    3f40:	93 e0       	ldi	r25, 0x03	; 3
    3f42:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3f46:	80 e6       	ldi	r24, 0x60	; 96
    3f48:	93 e0       	ldi	r25, 0x03	; 3
    3f4a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
    3f4e:	8a e5       	ldi	r24, 0x5A	; 90
    3f50:	93 e0       	ldi	r25, 0x03	; 3
    3f52:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
    3f56:	84 e5       	ldi	r24, 0x54	; 84
    3f58:	93 e0       	ldi	r25, 0x03	; 3
    3f5a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
    3f5e:	8e e4       	ldi	r24, 0x4E	; 78
    3f60:	93 e0       	ldi	r25, 0x03	; 3
    3f62:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    3f66:	88 e4       	ldi	r24, 0x48	; 72
    3f68:	93 e0       	ldi	r25, 0x03	; 3
    3f6a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    3f6e:	82 e4       	ldi	r24, 0x42	; 66
    3f70:	93 e0       	ldi	r25, 0x03	; 3
    3f72:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    3f76:	8c e3       	ldi	r24, 0x3C	; 60
    3f78:	93 e0       	ldi	r25, 0x03	; 3
    3f7a:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3f7e:	86 e3       	ldi	r24, 0x36	; 54
    3f80:	93 e0       	ldi	r25, 0x03	; 3
    3f82:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    3f86:	24 96       	adiw	r28, 0x04	; 4
    3f88:	e2 e0       	ldi	r30, 0x02	; 2
    3f8a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003f8e <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    3f8e:	a0 e0       	ldi	r26, 0x00	; 0
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	ed ec       	ldi	r30, 0xCD	; 205
    3f94:	ff e1       	ldi	r31, 0x1F	; 31
    3f96:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3f9a:	6f ef       	ldi	r22, 0xFF	; 255
    3f9c:	7f ef       	ldi	r23, 0xFF	; 255
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	5d df       	rcall	.-326    	; 0x3e5e <_Z41__static_initialization_and_destruction_0ii>
    3fa4:	e2 e0       	ldi	r30, 0x02	; 2
    3fa6:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003faa <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    3faa:	a0 e0       	ldi	r26, 0x00	; 0
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	eb ed       	ldi	r30, 0xDB	; 219
    3fb0:	ff e1       	ldi	r31, 0x1F	; 31
    3fb2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3fb6:	6f ef       	ldi	r22, 0xFF	; 255
    3fb8:	7f ef       	ldi	r23, 0xFF	; 255
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	4f df       	rcall	.-354    	; 0x3e5e <_Z41__static_initialization_and_destruction_0ii>
    3fc0:	e2 e0       	ldi	r30, 0x02	; 2
    3fc2:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003fc6 <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    3fc6:	a2 e0       	ldi	r26, 0x02	; 2
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	e9 ee       	ldi	r30, 0xE9	; 233
    3fcc:	ff e1       	ldi	r31, 0x1F	; 31
    3fce:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
    3fd4:	89 83       	std	Y+1, r24	; 0x01
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fda:	8e 58       	subi	r24, 0x8E	; 142
    3fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fde:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    3fe2:	22 96       	adiw	r28, 0x02	; 2
    3fe4:	e2 e0       	ldi	r30, 0x02	; 2
    3fe6:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00003fea <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    3fea:	a2 e0       	ldi	r26, 0x02	; 2
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	eb ef       	ldi	r30, 0xFB	; 251
    3ff0:	ff e1       	ldi	r31, 0x1F	; 31
    3ff2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	88 5b       	subi	r24, 0xB8	; 184
    4000:	9f 4f       	sbci	r25, 0xFF	; 255
    4002:	0e 94 0e 29 	call	0x521c	; 0x521c <_ZN6StringD1Ev>
    4006:	22 96       	adiw	r28, 0x02	; 2
    4008:	e2 e0       	ldi	r30, 0x02	; 2
    400a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000400e <_ZN7Globals13SwitchSensorsEv>:

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

    void SwitchSensors() {
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	ed e0       	ldi	r30, 0x0D	; 13
    4014:	f0 e2       	ldi	r31, 0x20	; 32
    4016:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    401a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <_ZN7Globals10ReadingTDSE>
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	89 27       	eor	r24, r25
    4022:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    4026:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <_ZN7Globals10ReadingTDSE>
    402a:	88 23       	and	r24, r24
    402c:	41 f0       	breq	.+16     	; 0x403e <_ZN7Globals13SwitchSensorsEv+0x30>
            ThePHSensor.TurnOff();
    402e:	87 ea       	ldi	r24, 0xA7	; 167
    4030:	93 e0       	ldi	r25, 0x03	; 3
    4032:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    4036:	83 e2       	ldi	r24, 0x23	; 35
    4038:	94 e0       	ldi	r25, 0x04	; 4
    403a:	6d da       	rcall	.-2854   	; 0x3516 <_ZN9TDSSensor6TurnOnEv>
    403c:	07 c0       	rjmp	.+14     	; 0x404c <_ZN7Globals13SwitchSensorsEv+0x3e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    403e:	83 e2       	ldi	r24, 0x23	; 35
    4040:	94 e0       	ldi	r25, 0x04	; 4
    4042:	82 da       	rcall	.-2812   	; 0x3548 <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    4044:	87 ea       	ldi	r24, 0xA7	; 167
    4046:	93 e0       	ldi	r25, 0x03	; 3
    4048:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_ZN8PHSensor6TurnOnEv>
        }
    }
    404c:	e2 e0       	ldi	r30, 0x02	; 2
    404e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00004052 <_Z41__static_initialization_and_destruction_0ii>:

}
    4052:	ac e4       	ldi	r26, 0x4C	; 76
    4054:	b0 e0       	ldi	r27, 0x00	; 0
    4056:	ef e2       	ldi	r30, 0x2F	; 47
    4058:	f0 e2       	ldi	r31, 0x20	; 32
    405a:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>
    405e:	9e 01       	movw	r18, r28
    4060:	27 5b       	subi	r18, 0xB7	; 183
    4062:	3f 4f       	sbci	r19, 0xFF	; 255
    4064:	f9 01       	movw	r30, r18
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	80 83       	st	Z, r24
    406a:	ce 01       	movw	r24, r28
    406c:	85 5b       	subi	r24, 0xB5	; 181
    406e:	9f 4f       	sbci	r25, 0xFF	; 255
    4070:	fc 01       	movw	r30, r24
    4072:	71 83       	std	Z+1, r23	; 0x01
    4074:	60 83       	st	Z, r22
    4076:	ce 01       	movw	r24, r28
    4078:	87 5b       	subi	r24, 0xB7	; 183
    407a:	9f 4f       	sbci	r25, 0xFF	; 255
    407c:	fc 01       	movw	r30, r24
    407e:	80 81       	ld	r24, Z
    4080:	91 81       	ldd	r25, Z+1	; 0x01
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	09 f0       	breq	.+2      	; 0x4088 <_Z41__static_initialization_and_destruction_0ii+0x36>
    4086:	44 c0       	rjmp	.+136    	; 0x4110 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    4088:	ce 01       	movw	r24, r28
    408a:	85 5b       	subi	r24, 0xB5	; 181
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	fc 01       	movw	r30, r24
    4090:	80 81       	ld	r24, Z
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	01 96       	adiw	r24, 0x01	; 1
    4096:	e1 f5       	brne	.+120    	; 0x4110 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    4098:	83 e8       	ldi	r24, 0x83	; 131
    409a:	93 e0       	ldi	r25, 0x03	; 3
    409c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    40a0:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN7Globals11_phRelayPinE>
    40a4:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN7Globals11_phRelayPinE+0x1>
    40a8:	23 e8       	ldi	r18, 0x83	; 131
    40aa:	33 e0       	ldi	r19, 0x03	; 3
    40ac:	ce 01       	movw	r24, r28
    40ae:	85 96       	adiw	r24, 0x25	; 37
    40b0:	b9 01       	movw	r22, r18
    40b2:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN7LCDBaseC1ERKS_>
    40b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    40ba:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    40be:	9e 01       	movw	r18, r28
    40c0:	2b 5d       	subi	r18, 0xDB	; 219
    40c2:	3f 4f       	sbci	r19, 0xFF	; 255
    40c4:	78 01       	movw	r14, r16
    40c6:	89 01       	movw	r16, r18
    40c8:	21 e0       	ldi	r18, 0x01	; 1
    40ca:	40 ed       	ldi	r20, 0xD0	; 208
    40cc:	57 e0       	ldi	r21, 0x07	; 7
    40ce:	bc 01       	movw	r22, r24
    40d0:	87 ea       	ldi	r24, 0xA7	; 167
    40d2:	93 e0       	ldi	r25, 0x03	; 3
    40d4:	0e 94 89 13 	call	0x2712	; 0x2712 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    40d8:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN7Globals12_tdsRelayPinE>
    40dc:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN7Globals12_tdsRelayPinE+0x1>
    40e0:	83 e8       	ldi	r24, 0x83	; 131
    40e2:	93 e0       	ldi	r25, 0x03	; 3
    40e4:	bc 01       	movw	r22, r24
    40e6:	ce 01       	movw	r24, r28
    40e8:	01 96       	adiw	r24, 0x01	; 1
    40ea:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN7LCDBaseC1ERKS_>
    40ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    40f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    40f6:	78 01       	movw	r14, r16
    40f8:	9e 01       	movw	r18, r28
    40fa:	2f 5f       	subi	r18, 0xFF	; 255
    40fc:	3f 4f       	sbci	r19, 0xFF	; 255
    40fe:	89 01       	movw	r16, r18
    4100:	21 e0       	ldi	r18, 0x01	; 1
    4102:	48 ee       	ldi	r20, 0xE8	; 232
    4104:	53 e0       	ldi	r21, 0x03	; 3
    4106:	bc 01       	movw	r22, r24
    4108:	83 e2       	ldi	r24, 0x23	; 35
    410a:	94 e0       	ldi	r25, 0x04	; 4
    410c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN9TDSSensorC1Eiib7LCDBasei>
    4110:	ce 01       	movw	r24, r28
    4112:	87 5b       	subi	r24, 0xB7	; 183
    4114:	9f 4f       	sbci	r25, 0xFF	; 255
    4116:	fc 01       	movw	r30, r24
    4118:	80 81       	ld	r24, Z
    411a:	91 81       	ldd	r25, Z+1	; 0x01
    411c:	89 2b       	or	r24, r25
    411e:	71 f4       	brne	.+28     	; 0x413c <_Z41__static_initialization_and_destruction_0ii+0xea>
    4120:	ce 01       	movw	r24, r28
    4122:	85 5b       	subi	r24, 0xB5	; 181
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	fc 01       	movw	r30, r24
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	31 f4       	brne	.+12     	; 0x413c <_Z41__static_initialization_and_destruction_0ii+0xea>
    4130:	83 e2       	ldi	r24, 0x23	; 35
    4132:	94 e0       	ldi	r25, 0x04	; 4
    4134:	5a df       	rcall	.-332    	; 0x3fea <_ZN9TDSSensorD1Ev>
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4136:	87 ea       	ldi	r24, 0xA7	; 167
    4138:	93 e0       	ldi	r25, 0x03	; 3
    413a:	45 df       	rcall	.-374    	; 0x3fc6 <_ZN8PHSensorD1Ev>
            TheTDSSensor.TurnOff();//signal mofset
            ThePHSensor.TurnOn();
        }
    }

}
    413c:	c4 5b       	subi	r28, 0xB4	; 180
    413e:	df 4f       	sbci	r29, 0xFF	; 255
    4140:	e6 e0       	ldi	r30, 0x06	; 6
    4142:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

00004146 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    4146:	a0 e0       	ldi	r26, 0x00	; 0
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	e9 ea       	ldi	r30, 0xA9	; 169
    414c:	f0 e2       	ldi	r31, 0x20	; 32
    414e:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    4152:	6f ef       	ldi	r22, 0xFF	; 255
    4154:	7f ef       	ldi	r23, 0xFF	; 255
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	7b df       	rcall	.-266    	; 0x4052 <_Z41__static_initialization_and_destruction_0ii>
    415c:	e2 e0       	ldi	r30, 0x02	; 2
    415e:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00004162 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    4162:	a0 e0       	ldi	r26, 0x00	; 0
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	e7 eb       	ldi	r30, 0xB7	; 183
    4168:	f0 e2       	ldi	r31, 0x20	; 32
    416a:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    416e:	6f ef       	ldi	r22, 0xFF	; 255
    4170:	7f ef       	ldi	r23, 0xFF	; 255
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	6d df       	rcall	.-294    	; 0x4052 <_Z41__static_initialization_and_destruction_0ii>
    4178:	e2 e0       	ldi	r30, 0x02	; 2
    417a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000417e <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    417e:	a6 e0       	ldi	r26, 0x06	; 6
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	e5 ec       	ldi	r30, 0xC5	; 197
    4184:	f0 e2       	ldi	r31, 0x20	; 32
    4186:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    418a:	9a 83       	std	Y+2, r25	; 0x02
    418c:	89 83       	std	Y+1, r24	; 0x01
    418e:	4b 83       	std	Y+3, r20	; 0x03
    4190:	5c 83       	std	Y+4, r21	; 0x04
    4192:	6d 83       	std	Y+5, r22	; 0x05
    4194:	7e 83       	std	Y+6, r23	; 0x06
    4196:	8b 81       	ldd	r24, Y+3	; 0x03
    4198:	9c 81       	ldd	r25, Y+4	; 0x04
    419a:	ad 81       	ldd	r26, Y+5	; 0x05
    419c:	be 81       	ldd	r27, Y+6	; 0x06
    419e:	e9 81       	ldd	r30, Y+1	; 0x01
    41a0:	fa 81       	ldd	r31, Y+2	; 0x02
    41a2:	26 e0       	ldi	r18, 0x06	; 6
    41a4:	ac 01       	movw	r20, r24
    41a6:	bd 01       	movw	r22, r26
    41a8:	cf 01       	movw	r24, r30
    41aa:	ff d3       	rcall	.+2046   	; 0x49aa <_ZN14HardwareSerial5beginEmh>
    41ac:	26 96       	adiw	r28, 0x06	; 6
    41ae:	e2 e0       	ldi	r30, 0x02	; 2
    41b0:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000041b4 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    41b4:	a2 e0       	ldi	r26, 0x02	; 2
    41b6:	b0 e0       	ldi	r27, 0x00	; 0
    41b8:	e0 ee       	ldi	r30, 0xE0	; 224
    41ba:	f0 e2       	ldi	r31, 0x20	; 32
    41bc:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    41c0:	9a 83       	std	Y+2, r25	; 0x02
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	22 96       	adiw	r28, 0x02	; 2
    41c8:	e2 e0       	ldi	r30, 0x02	; 2
    41ca:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000041ce <setup>:
SimpleTimer _asyncTimer;


void AsyncDoWork();

void setup(void) {
    41ce:	a0 e0       	ldi	r26, 0x00	; 0
    41d0:	b0 e0       	ldi	r27, 0x00	; 0
    41d2:	ed ee       	ldi	r30, 0xED	; 237
    41d4:	f0 e2       	ldi	r31, 0x20	; 32
    41d6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	51 ee       	ldi	r21, 0xE1	; 225
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	70 e0       	ldi	r23, 0x00	; 0
    41e2:	8d e2       	ldi	r24, 0x2D	; 45
    41e4:	95 e0       	ldi	r25, 0x05	; 5
    41e6:	cb df       	rcall	.-106    	; 0x417e <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    41e8:	00 00       	nop
    41ea:	8d e2       	ldi	r24, 0x2D	; 45
    41ec:	95 e0       	ldi	r25, 0x05	; 5
    41ee:	e2 df       	rcall	.-60     	; 0x41b4 <_ZN14HardwareSerialcvbEv>
    41f0:	98 2f       	mov	r25, r24
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	89 27       	eor	r24, r25
    41f6:	88 23       	and	r24, r24
    41f8:	c1 f7       	brne	.-16     	; 0x41ea <setup+0x1c>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    41fa:	89 e0       	ldi	r24, 0x09	; 9
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	88 70       	andi	r24, 0x08	; 8
    4200:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    4202:	89 2b       	or	r24, r25
    4204:	11 f0       	breq	.+4      	; 0x420a <setup+0x3c>
    4206:	88 e2       	ldi	r24, 0x28	; 40
    4208:	01 c0       	rjmp	.+2      	; 0x420c <setup+0x3e>
    420a:	88 e0       	ldi	r24, 0x08	; 8
    420c:	99 e0       	ldi	r25, 0x09	; 9
    420e:	97 70       	andi	r25, 0x07	; 7
    4210:	89 2b       	or	r24, r25
    4212:	98 2f       	mov	r25, r24
    4214:	88 e1       	ldi	r24, 0x18	; 24
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	a8 95       	wdr
    421c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

    wdt_enable(WDTO_8S);

    WaterSensorWire::Setup();
    4226:	6d da       	rcall	.-2854   	; 0x3702 <_ZN15WaterSensorWire5SetupEv>
    ThePHSensor.TurnOn();
    4228:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    422c:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    4230:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_ZN8PHSensor6TurnOnEv>

    _asyncTimer.setInterval(1000, AsyncDoWork); //todo: set to 1000;
    4234:	20 e4       	ldi	r18, 0x40	; 64
    4236:	31 e2       	ldi	r19, 0x21	; 33
    4238:	48 ee       	ldi	r20, 0xE8	; 232
    423a:	53 e0       	ldi	r21, 0x03	; 3
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	83 e7       	ldi	r24, 0x73	; 115
    4242:	94 e0       	ldi	r25, 0x04	; 4
    4244:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    4248:	e2 e0       	ldi	r30, 0x02	; 2
    424a:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

0000424e <loop>:

//String _request;
//String _response;
void loop(void) {
    424e:	a0 e0       	ldi	r26, 0x00	; 0
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	ed e2       	ldi	r30, 0x2D	; 45
    4254:	f1 e2       	ldi	r31, 0x21	; 33
    4256:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>

    _asyncTimer.run();
    425a:	83 e7       	ldi	r24, 0x73	; 115
    425c:	94 e0       	ldi	r25, 0x04	; 4
    425e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN11SimpleTimer3runEv>

    ThePHSensor.PrintPHToLCD();
    4262:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4266:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    426a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN8PHSensor12PrintPHToLCDEv>
    TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    426e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    4272:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    4276:	0e 94 86 18 	call	0x310c	; 0x310c <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    427a:	e2 e0       	ldi	r30, 0x02	; 2
    427c:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

00004280 <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4280:	a0 e0       	ldi	r26, 0x00	; 0
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	e6 e4       	ldi	r30, 0x46	; 70
    4286:	f1 e2       	ldi	r31, 0x21	; 33
    4288:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__prologue_saves__+0x18>

    wdt_reset();
    428c:	a8 95       	wdr

    static unsigned long lastSensorReadTime = millis();
    428e:	81 e2       	ldi	r24, 0x21	; 33
    4290:	95 e0       	ldi	r25, 0x05	; 5
    4292:	fc 01       	movw	r30, r24
    4294:	80 81       	ld	r24, Z
    4296:	88 23       	and	r24, r24
    4298:	81 f4       	brne	.+32     	; 0x42ba <_Z11AsyncDoWorkv+0x3a>
    429a:	37 d6       	rcall	.+3182   	; 0x4f0a <millis>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    42a4:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    42a8:	a0 93 2b 05 	sts	0x052B, r26	; 0x80052b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    42ac:	b0 93 2c 05 	sts	0x052C, r27	; 0x80052c <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    42b0:	81 e2       	ldi	r24, 0x21	; 33
    42b2:	95 e0       	ldi	r25, 0x05	; 5
    42b4:	21 e0       	ldi	r18, 0x01	; 1
    42b6:	fc 01       	movw	r30, r24
    42b8:	20 83       	st	Z, r18

    if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    42ba:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN7Globals6TheLCDE>
    42be:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN7Globals6TheLCDE+0x1>
    42c2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN7LCDBase14DetectKeyPressEv>
    42c6:	98 2f       	mov	r25, r24
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	94 30       	cpi	r25, 0x04	; 4
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <_Z11AsyncDoWorkv+0x50>
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	88 23       	and	r24, r24
    42d2:	91 f0       	breq	.+36     	; 0x42f8 <_Z11AsyncDoWorkv+0x78>
        Serial.println(F("[Selelct] Pressed"));
    42d4:	87 ee       	ldi	r24, 0xE7	; 231
    42d6:	93 e0       	ldi	r25, 0x03	; 3
    42d8:	bc 01       	movw	r22, r24
    42da:	8d e2       	ldi	r24, 0x2D	; 45
    42dc:	95 e0       	ldi	r25, 0x05	; 5
    42de:	dc d4       	rcall	.+2488   	; 0x4c98 <_ZN5Print7printlnEPK19__FlashStringHelper>
        SwitchSensors();
    42e0:	96 de       	rcall	.-724    	; 0x400e <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    42e2:	13 d6       	rcall	.+3110   	; 0x4f0a <millis>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    42ec:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    42f0:	a0 93 2b 05 	sts	0x052B, r26	; 0x80052b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    42f4:	b0 93 2c 05 	sts	0x052C, r27	; 0x80052c <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    SensorReadDuration = millis() - lastSensorReadTime;
    42f8:	08 d6       	rcall	.+3088   	; 0x4f0a <millis>
    42fa:	9b 01       	movw	r18, r22
    42fc:	ac 01       	movw	r20, r24
    42fe:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4302:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4306:	a0 91 2b 05 	lds	r26, 0x052B	; 0x80052b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    430a:	b0 91 2c 05 	lds	r27, 0x052C	; 0x80052c <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    430e:	79 01       	movw	r14, r18
    4310:	8a 01       	movw	r16, r20
    4312:	e8 1a       	sub	r14, r24
    4314:	f9 0a       	sbc	r15, r25
    4316:	0a 0b       	sbc	r16, r26
    4318:	1b 0b       	sbc	r17, r27
    431a:	d8 01       	movw	r26, r16
    431c:	c7 01       	movw	r24, r14
    431e:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <_ZN7Globals18SensorReadDurationE>
    4322:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <_ZN7Globals18SensorReadDurationE+0x1>
    4326:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <_ZN7Globals18SensorReadDurationE+0x2>
    432a:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <_ZN7Globals18SensorReadDurationE+0x3>
    WaterSensorWire::Loop();
    432e:	11 da       	rcall	.-3038   	; 0x3752 <_ZN15WaterSensorWire4LoopEv>
    if(SensorReadDuration > SensorReadInterval) {
    4330:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <_ZN7Globals18SensorReadDurationE>
    4334:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <_ZN7Globals18SensorReadDurationE+0x1>
    4338:	40 91 81 03 	lds	r20, 0x0381	; 0x800381 <_ZN7Globals18SensorReadDurationE+0x2>
    433c:	50 91 82 03 	lds	r21, 0x0382	; 0x800382 <_ZN7Globals18SensorReadDurationE+0x3>
    4340:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    4344:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    4348:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    434c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    4350:	82 17       	cp	r24, r18
    4352:	93 07       	cpc	r25, r19
    4354:	a4 07       	cpc	r26, r20
    4356:	b5 07       	cpc	r27, r21
    4358:	64 f4       	brge	.+24     	; 0x4372 <_Z11AsyncDoWorkv+0xf2>

        SwitchSensors();
    435a:	59 de       	rcall	.-846    	; 0x400e <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    435c:	d6 d5       	rcall	.+2988   	; 0x4f0a <millis>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4366:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    436a:	a0 93 2b 05 	sts	0x052B, r26	; 0x80052b <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    436e:	b0 93 2c 05 	sts	0x052C, r27	; 0x80052c <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    if(ReadingTDS) {
    4372:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <_ZN7Globals10ReadingTDSE>
    4376:	88 23       	and	r24, r24
    4378:	39 f0       	breq	.+14     	; 0x4388 <_Z11AsyncDoWorkv+0x108>
        TheTDSSensor.CalculateTDS();
    437a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    437e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    4382:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN9TDSSensor12CalculateTDSEv>
    4386:	06 c0       	rjmp	.+12     	; 0x4394 <_Z11AsyncDoWorkv+0x114>
    }
    else {
        ThePHSensor.CalculatePH();
    4388:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    438c:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    4390:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN8PHSensor11CalculatePHEv>
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    4394:	e6 e0       	ldi	r30, 0x06	; 6
    4396:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__epilogue_restores__+0x18>

0000439a <_Z41__static_initialization_and_destruction_0ii>:
    439a:	a4 e0       	ldi	r26, 0x04	; 4
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	e3 ed       	ldi	r30, 0xD3	; 211
    43a0:	f1 e2       	ldi	r31, 0x21	; 33
    43a2:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	89 83       	std	Y+1, r24	; 0x01
    43aa:	7c 83       	std	Y+4, r23	; 0x04
    43ac:	6b 83       	std	Y+3, r22	; 0x03
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	9a 81       	ldd	r25, Y+2	; 0x02
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	41 f4       	brne	.+16     	; 0x43c6 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	01 96       	adiw	r24, 0x01	; 1
    43bc:	21 f4       	brne	.+8      	; 0x43c6 <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    43be:	83 e7       	ldi	r24, 0x73	; 115
    43c0:	94 e0       	ldi	r25, 0x04	; 4
    43c2:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN11SimpleTimerC1Ev>
        ThePHSensor.CalculatePH();
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    43c6:	24 96       	adiw	r28, 0x04	; 4
    43c8:	e2 e0       	ldi	r30, 0x02	; 2
    43ca:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000043ce <_GLOBAL__sub_I__asyncTimer>:
    43ce:	a0 e0       	ldi	r26, 0x00	; 0
    43d0:	b0 e0       	ldi	r27, 0x00	; 0
    43d2:	ed ee       	ldi	r30, 0xED	; 237
    43d4:	f1 e2       	ldi	r31, 0x21	; 33
    43d6:	0c 94 51 2c 	jmp	0x58a2	; 0x58a2 <__prologue_saves__+0x20>
    43da:	6f ef       	ldi	r22, 0xFF	; 255
    43dc:	7f ef       	ldi	r23, 0xFF	; 255
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	db df       	rcall	.-74     	; 0x439a <_Z41__static_initialization_and_destruction_0ii>
    43e4:	e2 e0       	ldi	r30, 0x02	; 2
    43e6:	0c 94 6d 2c 	jmp	0x58da	; 0x58da <__epilogue_restores__+0x20>

000043ea <__subsf3>:
    43ea:	50 58       	subi	r21, 0x80	; 128

000043ec <__addsf3>:
    43ec:	bb 27       	eor	r27, r27
    43ee:	aa 27       	eor	r26, r26
    43f0:	0e d0       	rcall	.+28     	; 0x440e <__addsf3x>
    43f2:	75 c1       	rjmp	.+746    	; 0x46de <__fp_round>
    43f4:	66 d1       	rcall	.+716    	; 0x46c2 <__fp_pscA>
    43f6:	30 f0       	brcs	.+12     	; 0x4404 <__addsf3+0x18>
    43f8:	6b d1       	rcall	.+726    	; 0x46d0 <__fp_pscB>
    43fa:	20 f0       	brcs	.+8      	; 0x4404 <__addsf3+0x18>
    43fc:	31 f4       	brne	.+12     	; 0x440a <__addsf3+0x1e>
    43fe:	9f 3f       	cpi	r25, 0xFF	; 255
    4400:	11 f4       	brne	.+4      	; 0x4406 <__addsf3+0x1a>
    4402:	1e f4       	brtc	.+6      	; 0x440a <__addsf3+0x1e>
    4404:	5b c1       	rjmp	.+694    	; 0x46bc <__fp_nan>
    4406:	0e f4       	brtc	.+2      	; 0x440a <__addsf3+0x1e>
    4408:	e0 95       	com	r30
    440a:	e7 fb       	bst	r30, 7
    440c:	51 c1       	rjmp	.+674    	; 0x46b0 <__fp_inf>

0000440e <__addsf3x>:
    440e:	e9 2f       	mov	r30, r25
    4410:	77 d1       	rcall	.+750    	; 0x4700 <__fp_split3>
    4412:	80 f3       	brcs	.-32     	; 0x43f4 <__addsf3+0x8>
    4414:	ba 17       	cp	r27, r26
    4416:	62 07       	cpc	r22, r18
    4418:	73 07       	cpc	r23, r19
    441a:	84 07       	cpc	r24, r20
    441c:	95 07       	cpc	r25, r21
    441e:	18 f0       	brcs	.+6      	; 0x4426 <__addsf3x+0x18>
    4420:	71 f4       	brne	.+28     	; 0x443e <__addsf3x+0x30>
    4422:	9e f5       	brtc	.+102    	; 0x448a <__addsf3x+0x7c>
    4424:	8f c1       	rjmp	.+798    	; 0x4744 <__fp_zero>
    4426:	0e f4       	brtc	.+2      	; 0x442a <__addsf3x+0x1c>
    4428:	e0 95       	com	r30
    442a:	0b 2e       	mov	r0, r27
    442c:	ba 2f       	mov	r27, r26
    442e:	a0 2d       	mov	r26, r0
    4430:	0b 01       	movw	r0, r22
    4432:	b9 01       	movw	r22, r18
    4434:	90 01       	movw	r18, r0
    4436:	0c 01       	movw	r0, r24
    4438:	ca 01       	movw	r24, r20
    443a:	a0 01       	movw	r20, r0
    443c:	11 24       	eor	r1, r1
    443e:	ff 27       	eor	r31, r31
    4440:	59 1b       	sub	r21, r25
    4442:	99 f0       	breq	.+38     	; 0x446a <__addsf3x+0x5c>
    4444:	59 3f       	cpi	r21, 0xF9	; 249
    4446:	50 f4       	brcc	.+20     	; 0x445c <__addsf3x+0x4e>
    4448:	50 3e       	cpi	r21, 0xE0	; 224
    444a:	68 f1       	brcs	.+90     	; 0x44a6 <__addsf3x+0x98>
    444c:	1a 16       	cp	r1, r26
    444e:	f0 40       	sbci	r31, 0x00	; 0
    4450:	a2 2f       	mov	r26, r18
    4452:	23 2f       	mov	r18, r19
    4454:	34 2f       	mov	r19, r20
    4456:	44 27       	eor	r20, r20
    4458:	58 5f       	subi	r21, 0xF8	; 248
    445a:	f3 cf       	rjmp	.-26     	; 0x4442 <__addsf3x+0x34>
    445c:	46 95       	lsr	r20
    445e:	37 95       	ror	r19
    4460:	27 95       	ror	r18
    4462:	a7 95       	ror	r26
    4464:	f0 40       	sbci	r31, 0x00	; 0
    4466:	53 95       	inc	r21
    4468:	c9 f7       	brne	.-14     	; 0x445c <__addsf3x+0x4e>
    446a:	7e f4       	brtc	.+30     	; 0x448a <__addsf3x+0x7c>
    446c:	1f 16       	cp	r1, r31
    446e:	ba 0b       	sbc	r27, r26
    4470:	62 0b       	sbc	r22, r18
    4472:	73 0b       	sbc	r23, r19
    4474:	84 0b       	sbc	r24, r20
    4476:	ba f0       	brmi	.+46     	; 0x44a6 <__addsf3x+0x98>
    4478:	91 50       	subi	r25, 0x01	; 1
    447a:	a1 f0       	breq	.+40     	; 0x44a4 <__addsf3x+0x96>
    447c:	ff 0f       	add	r31, r31
    447e:	bb 1f       	adc	r27, r27
    4480:	66 1f       	adc	r22, r22
    4482:	77 1f       	adc	r23, r23
    4484:	88 1f       	adc	r24, r24
    4486:	c2 f7       	brpl	.-16     	; 0x4478 <__addsf3x+0x6a>
    4488:	0e c0       	rjmp	.+28     	; 0x44a6 <__addsf3x+0x98>
    448a:	ba 0f       	add	r27, r26
    448c:	62 1f       	adc	r22, r18
    448e:	73 1f       	adc	r23, r19
    4490:	84 1f       	adc	r24, r20
    4492:	48 f4       	brcc	.+18     	; 0x44a6 <__addsf3x+0x98>
    4494:	87 95       	ror	r24
    4496:	77 95       	ror	r23
    4498:	67 95       	ror	r22
    449a:	b7 95       	ror	r27
    449c:	f7 95       	ror	r31
    449e:	9e 3f       	cpi	r25, 0xFE	; 254
    44a0:	08 f0       	brcs	.+2      	; 0x44a4 <__addsf3x+0x96>
    44a2:	b3 cf       	rjmp	.-154    	; 0x440a <__addsf3+0x1e>
    44a4:	93 95       	inc	r25
    44a6:	88 0f       	add	r24, r24
    44a8:	08 f0       	brcs	.+2      	; 0x44ac <__addsf3x+0x9e>
    44aa:	99 27       	eor	r25, r25
    44ac:	ee 0f       	add	r30, r30
    44ae:	97 95       	ror	r25
    44b0:	87 95       	ror	r24
    44b2:	08 95       	ret

000044b4 <__cmpsf2>:
    44b4:	d9 d0       	rcall	.+434    	; 0x4668 <__fp_cmp>
    44b6:	08 f4       	brcc	.+2      	; 0x44ba <__cmpsf2+0x6>
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	08 95       	ret

000044bc <__divsf3>:
    44bc:	0c d0       	rcall	.+24     	; 0x44d6 <__divsf3x>
    44be:	0f c1       	rjmp	.+542    	; 0x46de <__fp_round>
    44c0:	07 d1       	rcall	.+526    	; 0x46d0 <__fp_pscB>
    44c2:	40 f0       	brcs	.+16     	; 0x44d4 <__divsf3+0x18>
    44c4:	fe d0       	rcall	.+508    	; 0x46c2 <__fp_pscA>
    44c6:	30 f0       	brcs	.+12     	; 0x44d4 <__divsf3+0x18>
    44c8:	21 f4       	brne	.+8      	; 0x44d2 <__divsf3+0x16>
    44ca:	5f 3f       	cpi	r21, 0xFF	; 255
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <__divsf3+0x18>
    44ce:	f0 c0       	rjmp	.+480    	; 0x46b0 <__fp_inf>
    44d0:	51 11       	cpse	r21, r1
    44d2:	39 c1       	rjmp	.+626    	; 0x4746 <__fp_szero>
    44d4:	f3 c0       	rjmp	.+486    	; 0x46bc <__fp_nan>

000044d6 <__divsf3x>:
    44d6:	14 d1       	rcall	.+552    	; 0x4700 <__fp_split3>
    44d8:	98 f3       	brcs	.-26     	; 0x44c0 <__divsf3+0x4>

000044da <__divsf3_pse>:
    44da:	99 23       	and	r25, r25
    44dc:	c9 f3       	breq	.-14     	; 0x44d0 <__divsf3+0x14>
    44de:	55 23       	and	r21, r21
    44e0:	b1 f3       	breq	.-20     	; 0x44ce <__divsf3+0x12>
    44e2:	95 1b       	sub	r25, r21
    44e4:	55 0b       	sbc	r21, r21
    44e6:	bb 27       	eor	r27, r27
    44e8:	aa 27       	eor	r26, r26
    44ea:	62 17       	cp	r22, r18
    44ec:	73 07       	cpc	r23, r19
    44ee:	84 07       	cpc	r24, r20
    44f0:	38 f0       	brcs	.+14     	; 0x4500 <__divsf3_pse+0x26>
    44f2:	9f 5f       	subi	r25, 0xFF	; 255
    44f4:	5f 4f       	sbci	r21, 0xFF	; 255
    44f6:	22 0f       	add	r18, r18
    44f8:	33 1f       	adc	r19, r19
    44fa:	44 1f       	adc	r20, r20
    44fc:	aa 1f       	adc	r26, r26
    44fe:	a9 f3       	breq	.-22     	; 0x44ea <__divsf3_pse+0x10>
    4500:	33 d0       	rcall	.+102    	; 0x4568 <__divsf3_pse+0x8e>
    4502:	0e 2e       	mov	r0, r30
    4504:	3a f0       	brmi	.+14     	; 0x4514 <__divsf3_pse+0x3a>
    4506:	e0 e8       	ldi	r30, 0x80	; 128
    4508:	30 d0       	rcall	.+96     	; 0x456a <__divsf3_pse+0x90>
    450a:	91 50       	subi	r25, 0x01	; 1
    450c:	50 40       	sbci	r21, 0x00	; 0
    450e:	e6 95       	lsr	r30
    4510:	00 1c       	adc	r0, r0
    4512:	ca f7       	brpl	.-14     	; 0x4506 <__divsf3_pse+0x2c>
    4514:	29 d0       	rcall	.+82     	; 0x4568 <__divsf3_pse+0x8e>
    4516:	fe 2f       	mov	r31, r30
    4518:	27 d0       	rcall	.+78     	; 0x4568 <__divsf3_pse+0x8e>
    451a:	66 0f       	add	r22, r22
    451c:	77 1f       	adc	r23, r23
    451e:	88 1f       	adc	r24, r24
    4520:	bb 1f       	adc	r27, r27
    4522:	26 17       	cp	r18, r22
    4524:	37 07       	cpc	r19, r23
    4526:	48 07       	cpc	r20, r24
    4528:	ab 07       	cpc	r26, r27
    452a:	b0 e8       	ldi	r27, 0x80	; 128
    452c:	09 f0       	breq	.+2      	; 0x4530 <__divsf3_pse+0x56>
    452e:	bb 0b       	sbc	r27, r27
    4530:	80 2d       	mov	r24, r0
    4532:	bf 01       	movw	r22, r30
    4534:	ff 27       	eor	r31, r31
    4536:	93 58       	subi	r25, 0x83	; 131
    4538:	5f 4f       	sbci	r21, 0xFF	; 255
    453a:	2a f0       	brmi	.+10     	; 0x4546 <__divsf3_pse+0x6c>
    453c:	9e 3f       	cpi	r25, 0xFE	; 254
    453e:	51 05       	cpc	r21, r1
    4540:	68 f0       	brcs	.+26     	; 0x455c <__divsf3_pse+0x82>
    4542:	b6 c0       	rjmp	.+364    	; 0x46b0 <__fp_inf>
    4544:	00 c1       	rjmp	.+512    	; 0x4746 <__fp_szero>
    4546:	5f 3f       	cpi	r21, 0xFF	; 255
    4548:	ec f3       	brlt	.-6      	; 0x4544 <__divsf3_pse+0x6a>
    454a:	98 3e       	cpi	r25, 0xE8	; 232
    454c:	dc f3       	brlt	.-10     	; 0x4544 <__divsf3_pse+0x6a>
    454e:	86 95       	lsr	r24
    4550:	77 95       	ror	r23
    4552:	67 95       	ror	r22
    4554:	b7 95       	ror	r27
    4556:	f7 95       	ror	r31
    4558:	9f 5f       	subi	r25, 0xFF	; 255
    455a:	c9 f7       	brne	.-14     	; 0x454e <__divsf3_pse+0x74>
    455c:	88 0f       	add	r24, r24
    455e:	91 1d       	adc	r25, r1
    4560:	96 95       	lsr	r25
    4562:	87 95       	ror	r24
    4564:	97 f9       	bld	r25, 7
    4566:	08 95       	ret
    4568:	e1 e0       	ldi	r30, 0x01	; 1
    456a:	66 0f       	add	r22, r22
    456c:	77 1f       	adc	r23, r23
    456e:	88 1f       	adc	r24, r24
    4570:	bb 1f       	adc	r27, r27
    4572:	62 17       	cp	r22, r18
    4574:	73 07       	cpc	r23, r19
    4576:	84 07       	cpc	r24, r20
    4578:	ba 07       	cpc	r27, r26
    457a:	20 f0       	brcs	.+8      	; 0x4584 <__divsf3_pse+0xaa>
    457c:	62 1b       	sub	r22, r18
    457e:	73 0b       	sbc	r23, r19
    4580:	84 0b       	sbc	r24, r20
    4582:	ba 0b       	sbc	r27, r26
    4584:	ee 1f       	adc	r30, r30
    4586:	88 f7       	brcc	.-30     	; 0x456a <__divsf3_pse+0x90>
    4588:	e0 95       	com	r30
    458a:	08 95       	ret

0000458c <__fixsfsi>:
    458c:	04 d0       	rcall	.+8      	; 0x4596 <__fixunssfsi>
    458e:	68 94       	set
    4590:	b1 11       	cpse	r27, r1
    4592:	d9 c0       	rjmp	.+434    	; 0x4746 <__fp_szero>
    4594:	08 95       	ret

00004596 <__fixunssfsi>:
    4596:	bc d0       	rcall	.+376    	; 0x4710 <__fp_splitA>
    4598:	88 f0       	brcs	.+34     	; 0x45bc <__fixunssfsi+0x26>
    459a:	9f 57       	subi	r25, 0x7F	; 127
    459c:	90 f0       	brcs	.+36     	; 0x45c2 <__fixunssfsi+0x2c>
    459e:	b9 2f       	mov	r27, r25
    45a0:	99 27       	eor	r25, r25
    45a2:	b7 51       	subi	r27, 0x17	; 23
    45a4:	a0 f0       	brcs	.+40     	; 0x45ce <__fixunssfsi+0x38>
    45a6:	d1 f0       	breq	.+52     	; 0x45dc <__fixunssfsi+0x46>
    45a8:	66 0f       	add	r22, r22
    45aa:	77 1f       	adc	r23, r23
    45ac:	88 1f       	adc	r24, r24
    45ae:	99 1f       	adc	r25, r25
    45b0:	1a f0       	brmi	.+6      	; 0x45b8 <__fixunssfsi+0x22>
    45b2:	ba 95       	dec	r27
    45b4:	c9 f7       	brne	.-14     	; 0x45a8 <__fixunssfsi+0x12>
    45b6:	12 c0       	rjmp	.+36     	; 0x45dc <__fixunssfsi+0x46>
    45b8:	b1 30       	cpi	r27, 0x01	; 1
    45ba:	81 f0       	breq	.+32     	; 0x45dc <__fixunssfsi+0x46>
    45bc:	c3 d0       	rcall	.+390    	; 0x4744 <__fp_zero>
    45be:	b1 e0       	ldi	r27, 0x01	; 1
    45c0:	08 95       	ret
    45c2:	c0 c0       	rjmp	.+384    	; 0x4744 <__fp_zero>
    45c4:	67 2f       	mov	r22, r23
    45c6:	78 2f       	mov	r23, r24
    45c8:	88 27       	eor	r24, r24
    45ca:	b8 5f       	subi	r27, 0xF8	; 248
    45cc:	39 f0       	breq	.+14     	; 0x45dc <__fixunssfsi+0x46>
    45ce:	b9 3f       	cpi	r27, 0xF9	; 249
    45d0:	cc f3       	brlt	.-14     	; 0x45c4 <__fixunssfsi+0x2e>
    45d2:	86 95       	lsr	r24
    45d4:	77 95       	ror	r23
    45d6:	67 95       	ror	r22
    45d8:	b3 95       	inc	r27
    45da:	d9 f7       	brne	.-10     	; 0x45d2 <__fixunssfsi+0x3c>
    45dc:	3e f4       	brtc	.+14     	; 0x45ec <__fixunssfsi+0x56>
    45de:	90 95       	com	r25
    45e0:	80 95       	com	r24
    45e2:	70 95       	com	r23
    45e4:	61 95       	neg	r22
    45e6:	7f 4f       	sbci	r23, 0xFF	; 255
    45e8:	8f 4f       	sbci	r24, 0xFF	; 255
    45ea:	9f 4f       	sbci	r25, 0xFF	; 255
    45ec:	08 95       	ret

000045ee <__floatunsisf>:
    45ee:	e8 94       	clt
    45f0:	09 c0       	rjmp	.+18     	; 0x4604 <__floatsisf+0x12>

000045f2 <__floatsisf>:
    45f2:	97 fb       	bst	r25, 7
    45f4:	3e f4       	brtc	.+14     	; 0x4604 <__floatsisf+0x12>
    45f6:	90 95       	com	r25
    45f8:	80 95       	com	r24
    45fa:	70 95       	com	r23
    45fc:	61 95       	neg	r22
    45fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4600:	8f 4f       	sbci	r24, 0xFF	; 255
    4602:	9f 4f       	sbci	r25, 0xFF	; 255
    4604:	99 23       	and	r25, r25
    4606:	a9 f0       	breq	.+42     	; 0x4632 <__floatsisf+0x40>
    4608:	f9 2f       	mov	r31, r25
    460a:	96 e9       	ldi	r25, 0x96	; 150
    460c:	bb 27       	eor	r27, r27
    460e:	93 95       	inc	r25
    4610:	f6 95       	lsr	r31
    4612:	87 95       	ror	r24
    4614:	77 95       	ror	r23
    4616:	67 95       	ror	r22
    4618:	b7 95       	ror	r27
    461a:	f1 11       	cpse	r31, r1
    461c:	f8 cf       	rjmp	.-16     	; 0x460e <__floatsisf+0x1c>
    461e:	fa f4       	brpl	.+62     	; 0x465e <__floatsisf+0x6c>
    4620:	bb 0f       	add	r27, r27
    4622:	11 f4       	brne	.+4      	; 0x4628 <__floatsisf+0x36>
    4624:	60 ff       	sbrs	r22, 0
    4626:	1b c0       	rjmp	.+54     	; 0x465e <__floatsisf+0x6c>
    4628:	6f 5f       	subi	r22, 0xFF	; 255
    462a:	7f 4f       	sbci	r23, 0xFF	; 255
    462c:	8f 4f       	sbci	r24, 0xFF	; 255
    462e:	9f 4f       	sbci	r25, 0xFF	; 255
    4630:	16 c0       	rjmp	.+44     	; 0x465e <__floatsisf+0x6c>
    4632:	88 23       	and	r24, r24
    4634:	11 f0       	breq	.+4      	; 0x463a <__floatsisf+0x48>
    4636:	96 e9       	ldi	r25, 0x96	; 150
    4638:	11 c0       	rjmp	.+34     	; 0x465c <__floatsisf+0x6a>
    463a:	77 23       	and	r23, r23
    463c:	21 f0       	breq	.+8      	; 0x4646 <__floatsisf+0x54>
    463e:	9e e8       	ldi	r25, 0x8E	; 142
    4640:	87 2f       	mov	r24, r23
    4642:	76 2f       	mov	r23, r22
    4644:	05 c0       	rjmp	.+10     	; 0x4650 <__floatsisf+0x5e>
    4646:	66 23       	and	r22, r22
    4648:	71 f0       	breq	.+28     	; 0x4666 <__floatsisf+0x74>
    464a:	96 e8       	ldi	r25, 0x86	; 134
    464c:	86 2f       	mov	r24, r22
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	2a f0       	brmi	.+10     	; 0x465e <__floatsisf+0x6c>
    4654:	9a 95       	dec	r25
    4656:	66 0f       	add	r22, r22
    4658:	77 1f       	adc	r23, r23
    465a:	88 1f       	adc	r24, r24
    465c:	da f7       	brpl	.-10     	; 0x4654 <__floatsisf+0x62>
    465e:	88 0f       	add	r24, r24
    4660:	96 95       	lsr	r25
    4662:	87 95       	ror	r24
    4664:	97 f9       	bld	r25, 7
    4666:	08 95       	ret

00004668 <__fp_cmp>:
    4668:	99 0f       	add	r25, r25
    466a:	00 08       	sbc	r0, r0
    466c:	55 0f       	add	r21, r21
    466e:	aa 0b       	sbc	r26, r26
    4670:	e0 e8       	ldi	r30, 0x80	; 128
    4672:	fe ef       	ldi	r31, 0xFE	; 254
    4674:	16 16       	cp	r1, r22
    4676:	17 06       	cpc	r1, r23
    4678:	e8 07       	cpc	r30, r24
    467a:	f9 07       	cpc	r31, r25
    467c:	c0 f0       	brcs	.+48     	; 0x46ae <__fp_cmp+0x46>
    467e:	12 16       	cp	r1, r18
    4680:	13 06       	cpc	r1, r19
    4682:	e4 07       	cpc	r30, r20
    4684:	f5 07       	cpc	r31, r21
    4686:	98 f0       	brcs	.+38     	; 0x46ae <__fp_cmp+0x46>
    4688:	62 1b       	sub	r22, r18
    468a:	73 0b       	sbc	r23, r19
    468c:	84 0b       	sbc	r24, r20
    468e:	95 0b       	sbc	r25, r21
    4690:	39 f4       	brne	.+14     	; 0x46a0 <__fp_cmp+0x38>
    4692:	0a 26       	eor	r0, r26
    4694:	61 f0       	breq	.+24     	; 0x46ae <__fp_cmp+0x46>
    4696:	23 2b       	or	r18, r19
    4698:	24 2b       	or	r18, r20
    469a:	25 2b       	or	r18, r21
    469c:	21 f4       	brne	.+8      	; 0x46a6 <__fp_cmp+0x3e>
    469e:	08 95       	ret
    46a0:	0a 26       	eor	r0, r26
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <__fp_cmp+0x3e>
    46a4:	a1 40       	sbci	r26, 0x01	; 1
    46a6:	a6 95       	lsr	r26
    46a8:	8f ef       	ldi	r24, 0xFF	; 255
    46aa:	81 1d       	adc	r24, r1
    46ac:	81 1d       	adc	r24, r1
    46ae:	08 95       	ret

000046b0 <__fp_inf>:
    46b0:	97 f9       	bld	r25, 7
    46b2:	9f 67       	ori	r25, 0x7F	; 127
    46b4:	80 e8       	ldi	r24, 0x80	; 128
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	60 e0       	ldi	r22, 0x00	; 0
    46ba:	08 95       	ret

000046bc <__fp_nan>:
    46bc:	9f ef       	ldi	r25, 0xFF	; 255
    46be:	80 ec       	ldi	r24, 0xC0	; 192
    46c0:	08 95       	ret

000046c2 <__fp_pscA>:
    46c2:	00 24       	eor	r0, r0
    46c4:	0a 94       	dec	r0
    46c6:	16 16       	cp	r1, r22
    46c8:	17 06       	cpc	r1, r23
    46ca:	18 06       	cpc	r1, r24
    46cc:	09 06       	cpc	r0, r25
    46ce:	08 95       	ret

000046d0 <__fp_pscB>:
    46d0:	00 24       	eor	r0, r0
    46d2:	0a 94       	dec	r0
    46d4:	12 16       	cp	r1, r18
    46d6:	13 06       	cpc	r1, r19
    46d8:	14 06       	cpc	r1, r20
    46da:	05 06       	cpc	r0, r21
    46dc:	08 95       	ret

000046de <__fp_round>:
    46de:	09 2e       	mov	r0, r25
    46e0:	03 94       	inc	r0
    46e2:	00 0c       	add	r0, r0
    46e4:	11 f4       	brne	.+4      	; 0x46ea <__fp_round+0xc>
    46e6:	88 23       	and	r24, r24
    46e8:	52 f0       	brmi	.+20     	; 0x46fe <__fp_round+0x20>
    46ea:	bb 0f       	add	r27, r27
    46ec:	40 f4       	brcc	.+16     	; 0x46fe <__fp_round+0x20>
    46ee:	bf 2b       	or	r27, r31
    46f0:	11 f4       	brne	.+4      	; 0x46f6 <__fp_round+0x18>
    46f2:	60 ff       	sbrs	r22, 0
    46f4:	04 c0       	rjmp	.+8      	; 0x46fe <__fp_round+0x20>
    46f6:	6f 5f       	subi	r22, 0xFF	; 255
    46f8:	7f 4f       	sbci	r23, 0xFF	; 255
    46fa:	8f 4f       	sbci	r24, 0xFF	; 255
    46fc:	9f 4f       	sbci	r25, 0xFF	; 255
    46fe:	08 95       	ret

00004700 <__fp_split3>:
    4700:	57 fd       	sbrc	r21, 7
    4702:	90 58       	subi	r25, 0x80	; 128
    4704:	44 0f       	add	r20, r20
    4706:	55 1f       	adc	r21, r21
    4708:	59 f0       	breq	.+22     	; 0x4720 <__fp_splitA+0x10>
    470a:	5f 3f       	cpi	r21, 0xFF	; 255
    470c:	71 f0       	breq	.+28     	; 0x472a <__fp_splitA+0x1a>
    470e:	47 95       	ror	r20

00004710 <__fp_splitA>:
    4710:	88 0f       	add	r24, r24
    4712:	97 fb       	bst	r25, 7
    4714:	99 1f       	adc	r25, r25
    4716:	61 f0       	breq	.+24     	; 0x4730 <__fp_splitA+0x20>
    4718:	9f 3f       	cpi	r25, 0xFF	; 255
    471a:	79 f0       	breq	.+30     	; 0x473a <__fp_splitA+0x2a>
    471c:	87 95       	ror	r24
    471e:	08 95       	ret
    4720:	12 16       	cp	r1, r18
    4722:	13 06       	cpc	r1, r19
    4724:	14 06       	cpc	r1, r20
    4726:	55 1f       	adc	r21, r21
    4728:	f2 cf       	rjmp	.-28     	; 0x470e <__fp_split3+0xe>
    472a:	46 95       	lsr	r20
    472c:	f1 df       	rcall	.-30     	; 0x4710 <__fp_splitA>
    472e:	08 c0       	rjmp	.+16     	; 0x4740 <__fp_splitA+0x30>
    4730:	16 16       	cp	r1, r22
    4732:	17 06       	cpc	r1, r23
    4734:	18 06       	cpc	r1, r24
    4736:	99 1f       	adc	r25, r25
    4738:	f1 cf       	rjmp	.-30     	; 0x471c <__fp_splitA+0xc>
    473a:	86 95       	lsr	r24
    473c:	71 05       	cpc	r23, r1
    473e:	61 05       	cpc	r22, r1
    4740:	08 94       	sec
    4742:	08 95       	ret

00004744 <__fp_zero>:
    4744:	e8 94       	clt

00004746 <__fp_szero>:
    4746:	bb 27       	eor	r27, r27
    4748:	66 27       	eor	r22, r22
    474a:	77 27       	eor	r23, r23
    474c:	cb 01       	movw	r24, r22
    474e:	97 f9       	bld	r25, 7
    4750:	08 95       	ret

00004752 <__mulsf3>:
    4752:	0b d0       	rcall	.+22     	; 0x476a <__mulsf3x>
    4754:	c4 cf       	rjmp	.-120    	; 0x46de <__fp_round>
    4756:	b5 df       	rcall	.-150    	; 0x46c2 <__fp_pscA>
    4758:	28 f0       	brcs	.+10     	; 0x4764 <__mulsf3+0x12>
    475a:	ba df       	rcall	.-140    	; 0x46d0 <__fp_pscB>
    475c:	18 f0       	brcs	.+6      	; 0x4764 <__mulsf3+0x12>
    475e:	95 23       	and	r25, r21
    4760:	09 f0       	breq	.+2      	; 0x4764 <__mulsf3+0x12>
    4762:	a6 cf       	rjmp	.-180    	; 0x46b0 <__fp_inf>
    4764:	ab cf       	rjmp	.-170    	; 0x46bc <__fp_nan>
    4766:	11 24       	eor	r1, r1
    4768:	ee cf       	rjmp	.-36     	; 0x4746 <__fp_szero>

0000476a <__mulsf3x>:
    476a:	ca df       	rcall	.-108    	; 0x4700 <__fp_split3>
    476c:	a0 f3       	brcs	.-24     	; 0x4756 <__mulsf3+0x4>

0000476e <__mulsf3_pse>:
    476e:	95 9f       	mul	r25, r21
    4770:	d1 f3       	breq	.-12     	; 0x4766 <__mulsf3+0x14>
    4772:	95 0f       	add	r25, r21
    4774:	50 e0       	ldi	r21, 0x00	; 0
    4776:	55 1f       	adc	r21, r21
    4778:	62 9f       	mul	r22, r18
    477a:	f0 01       	movw	r30, r0
    477c:	72 9f       	mul	r23, r18
    477e:	bb 27       	eor	r27, r27
    4780:	f0 0d       	add	r31, r0
    4782:	b1 1d       	adc	r27, r1
    4784:	63 9f       	mul	r22, r19
    4786:	aa 27       	eor	r26, r26
    4788:	f0 0d       	add	r31, r0
    478a:	b1 1d       	adc	r27, r1
    478c:	aa 1f       	adc	r26, r26
    478e:	64 9f       	mul	r22, r20
    4790:	66 27       	eor	r22, r22
    4792:	b0 0d       	add	r27, r0
    4794:	a1 1d       	adc	r26, r1
    4796:	66 1f       	adc	r22, r22
    4798:	82 9f       	mul	r24, r18
    479a:	22 27       	eor	r18, r18
    479c:	b0 0d       	add	r27, r0
    479e:	a1 1d       	adc	r26, r1
    47a0:	62 1f       	adc	r22, r18
    47a2:	73 9f       	mul	r23, r19
    47a4:	b0 0d       	add	r27, r0
    47a6:	a1 1d       	adc	r26, r1
    47a8:	62 1f       	adc	r22, r18
    47aa:	83 9f       	mul	r24, r19
    47ac:	a0 0d       	add	r26, r0
    47ae:	61 1d       	adc	r22, r1
    47b0:	22 1f       	adc	r18, r18
    47b2:	74 9f       	mul	r23, r20
    47b4:	33 27       	eor	r19, r19
    47b6:	a0 0d       	add	r26, r0
    47b8:	61 1d       	adc	r22, r1
    47ba:	23 1f       	adc	r18, r19
    47bc:	84 9f       	mul	r24, r20
    47be:	60 0d       	add	r22, r0
    47c0:	21 1d       	adc	r18, r1
    47c2:	82 2f       	mov	r24, r18
    47c4:	76 2f       	mov	r23, r22
    47c6:	6a 2f       	mov	r22, r26
    47c8:	11 24       	eor	r1, r1
    47ca:	9f 57       	subi	r25, 0x7F	; 127
    47cc:	50 40       	sbci	r21, 0x00	; 0
    47ce:	8a f0       	brmi	.+34     	; 0x47f2 <__mulsf3_pse+0x84>
    47d0:	e1 f0       	breq	.+56     	; 0x480a <__mulsf3_pse+0x9c>
    47d2:	88 23       	and	r24, r24
    47d4:	4a f0       	brmi	.+18     	; 0x47e8 <__mulsf3_pse+0x7a>
    47d6:	ee 0f       	add	r30, r30
    47d8:	ff 1f       	adc	r31, r31
    47da:	bb 1f       	adc	r27, r27
    47dc:	66 1f       	adc	r22, r22
    47de:	77 1f       	adc	r23, r23
    47e0:	88 1f       	adc	r24, r24
    47e2:	91 50       	subi	r25, 0x01	; 1
    47e4:	50 40       	sbci	r21, 0x00	; 0
    47e6:	a9 f7       	brne	.-22     	; 0x47d2 <__mulsf3_pse+0x64>
    47e8:	9e 3f       	cpi	r25, 0xFE	; 254
    47ea:	51 05       	cpc	r21, r1
    47ec:	70 f0       	brcs	.+28     	; 0x480a <__mulsf3_pse+0x9c>
    47ee:	60 cf       	rjmp	.-320    	; 0x46b0 <__fp_inf>
    47f0:	aa cf       	rjmp	.-172    	; 0x4746 <__fp_szero>
    47f2:	5f 3f       	cpi	r21, 0xFF	; 255
    47f4:	ec f3       	brlt	.-6      	; 0x47f0 <__mulsf3_pse+0x82>
    47f6:	98 3e       	cpi	r25, 0xE8	; 232
    47f8:	dc f3       	brlt	.-10     	; 0x47f0 <__mulsf3_pse+0x82>
    47fa:	86 95       	lsr	r24
    47fc:	77 95       	ror	r23
    47fe:	67 95       	ror	r22
    4800:	b7 95       	ror	r27
    4802:	f7 95       	ror	r31
    4804:	e7 95       	ror	r30
    4806:	9f 5f       	subi	r25, 0xFF	; 255
    4808:	c1 f7       	brne	.-16     	; 0x47fa <__mulsf3_pse+0x8c>
    480a:	fe 2b       	or	r31, r30
    480c:	88 0f       	add	r24, r24
    480e:	91 1d       	adc	r25, r1
    4810:	96 95       	lsr	r25
    4812:	87 95       	ror	r24
    4814:	97 f9       	bld	r25, 7
    4816:	08 95       	ret

00004818 <__unordsf2>:
    4818:	27 df       	rcall	.-434    	; 0x4668 <__fp_cmp>
    481a:	88 0b       	sbc	r24, r24
    481c:	99 0b       	sbc	r25, r25
    481e:	08 95       	ret

00004820 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4820:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <abort>

00004824 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4824:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4826:	91 8d       	ldd	r25, Z+25	; 0x19
    4828:	22 8d       	ldd	r18, Z+26	; 0x1a
    482a:	89 2f       	mov	r24, r25
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	80 5c       	subi	r24, 0xC0	; 192
    4830:	9f 4f       	sbci	r25, 0xFF	; 255
    4832:	82 1b       	sub	r24, r18
    4834:	91 09       	sbc	r25, r1
}
    4836:	8f 73       	andi	r24, 0x3F	; 63
    4838:	99 27       	eor	r25, r25
    483a:	08 95       	ret

0000483c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    483c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    483e:	91 8d       	ldd	r25, Z+25	; 0x19
    4840:	82 8d       	ldd	r24, Z+26	; 0x1a
    4842:	98 17       	cp	r25, r24
    4844:	31 f0       	breq	.+12     	; 0x4852 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4846:	82 8d       	ldd	r24, Z+26	; 0x1a
    4848:	e8 0f       	add	r30, r24
    484a:	f1 1d       	adc	r31, r1
    484c:	85 8d       	ldd	r24, Z+29	; 0x1d
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4852:	8f ef       	ldi	r24, 0xFF	; 255
    4854:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4856:	08 95       	ret

00004858 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4858:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    485a:	91 8d       	ldd	r25, Z+25	; 0x19
    485c:	82 8d       	ldd	r24, Z+26	; 0x1a
    485e:	98 17       	cp	r25, r24
    4860:	61 f0       	breq	.+24     	; 0x487a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4862:	82 8d       	ldd	r24, Z+26	; 0x1a
    4864:	df 01       	movw	r26, r30
    4866:	a8 0f       	add	r26, r24
    4868:	b1 1d       	adc	r27, r1
    486a:	5d 96       	adiw	r26, 0x1d	; 29
    486c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    486e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4870:	9f 5f       	subi	r25, 0xFF	; 255
    4872:	9f 73       	andi	r25, 0x3F	; 63
    4874:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    487a:	8f ef       	ldi	r24, 0xFF	; 255
    487c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    487e:	08 95       	ret

00004880 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4880:	8f e8       	ldi	r24, 0x8F	; 143
    4882:	95 e2       	ldi	r25, 0x25	; 37
    4884:	89 2b       	or	r24, r25
    4886:	41 f0       	breq	.+16     	; 0x4898 <_Z14serialEventRunv+0x18>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	89 2b       	or	r24, r25
    488e:	21 f0       	breq	.+8      	; 0x4898 <_Z14serialEventRunv+0x18>
    4890:	46 d1       	rcall	.+652    	; 0x4b1e <_Z17Serial0_availablev>
    4892:	81 11       	cpse	r24, r1
    4894:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4898:	08 95       	ret

0000489a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    489a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    489c:	84 8d       	ldd	r24, Z+28	; 0x1c
    489e:	df 01       	movw	r26, r30
    48a0:	a8 0f       	add	r26, r24
    48a2:	b1 1d       	adc	r27, r1
    48a4:	a3 5a       	subi	r26, 0xA3	; 163
    48a6:	bf 4f       	sbci	r27, 0xFF	; 255
    48a8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    48aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	8f 73       	andi	r24, 0x3F	; 63
    48b2:	99 27       	eor	r25, r25
    48b4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    48b6:	a6 89       	ldd	r26, Z+22	; 0x16
    48b8:	b7 89       	ldd	r27, Z+23	; 0x17
    48ba:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    48bc:	a0 89       	ldd	r26, Z+16	; 0x10
    48be:	b1 89       	ldd	r27, Z+17	; 0x11
    48c0:	8c 91       	ld	r24, X
    48c2:	80 64       	ori	r24, 0x40	; 64
    48c4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    48c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    48c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    48ca:	98 13       	cpse	r25, r24
    48cc:	06 c0       	rjmp	.+12     	; 0x48da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    48ce:	02 88       	ldd	r0, Z+18	; 0x12
    48d0:	f3 89       	ldd	r31, Z+19	; 0x13
    48d2:	e0 2d       	mov	r30, r0
    48d4:	80 81       	ld	r24, Z
    48d6:	8f 7d       	andi	r24, 0xDF	; 223
    48d8:	80 83       	st	Z, r24
    48da:	08 95       	ret

000048dc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    48dc:	cf 93       	push	r28
    48de:	df 93       	push	r29
    48e0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    48e2:	88 8d       	ldd	r24, Y+24	; 0x18
    48e4:	88 23       	and	r24, r24
    48e6:	c1 f0       	breq	.+48     	; 0x4918 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    48e8:	ea 89       	ldd	r30, Y+18	; 0x12
    48ea:	fb 89       	ldd	r31, Y+19	; 0x13
    48ec:	80 81       	ld	r24, Z
    48ee:	85 fd       	sbrc	r24, 5
    48f0:	05 c0       	rjmp	.+10     	; 0x48fc <_ZN14HardwareSerial5flushEv+0x20>
    48f2:	a8 89       	ldd	r26, Y+16	; 0x10
    48f4:	b9 89       	ldd	r27, Y+17	; 0x11
    48f6:	8c 91       	ld	r24, X
    48f8:	86 fd       	sbrc	r24, 6
    48fa:	0e c0       	rjmp	.+28     	; 0x4918 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    48fc:	0f b6       	in	r0, 0x3f	; 63
    48fe:	07 fc       	sbrc	r0, 7
    4900:	f5 cf       	rjmp	.-22     	; 0x48ec <_ZN14HardwareSerial5flushEv+0x10>
    4902:	80 81       	ld	r24, Z
    4904:	85 ff       	sbrs	r24, 5
    4906:	f2 cf       	rjmp	.-28     	; 0x48ec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4908:	a8 89       	ldd	r26, Y+16	; 0x10
    490a:	b9 89       	ldd	r27, Y+17	; 0x11
    490c:	8c 91       	ld	r24, X
    490e:	85 ff       	sbrs	r24, 5
    4910:	ed cf       	rjmp	.-38     	; 0x48ec <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4912:	ce 01       	movw	r24, r28
    4914:	c2 df       	rcall	.-124    	; 0x489a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4916:	e8 cf       	rjmp	.-48     	; 0x48e8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	08 95       	ret

0000491e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	ec 01       	movw	r28, r24
  _written = true;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4930:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4932:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4934:	98 13       	cpse	r25, r24
    4936:	05 c0       	rjmp	.+10     	; 0x4942 <_ZN14HardwareSerial5writeEh+0x24>
    4938:	e8 89       	ldd	r30, Y+16	; 0x10
    493a:	f9 89       	ldd	r31, Y+17	; 0x11
    493c:	80 81       	ld	r24, Z
    493e:	85 fd       	sbrc	r24, 5
    4940:	23 c0       	rjmp	.+70     	; 0x4988 <_ZN14HardwareSerial5writeEh+0x6a>
    4942:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4944:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4946:	10 e0       	ldi	r17, 0x00	; 0
    4948:	0f 5f       	subi	r16, 0xFF	; 255
    494a:	1f 4f       	sbci	r17, 0xFF	; 255
    494c:	0f 73       	andi	r16, 0x3F	; 63
    494e:	11 27       	eor	r17, r17
    4950:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4952:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4954:	e8 12       	cpse	r14, r24
    4956:	0b c0       	rjmp	.+22     	; 0x496e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	07 fc       	sbrc	r0, 7
    495c:	fa cf       	rjmp	.-12     	; 0x4952 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    495e:	e8 89       	ldd	r30, Y+16	; 0x10
    4960:	f9 89       	ldd	r31, Y+17	; 0x11
    4962:	80 81       	ld	r24, Z
    4964:	85 ff       	sbrs	r24, 5
    4966:	f5 cf       	rjmp	.-22     	; 0x4952 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4968:	ce 01       	movw	r24, r28
    496a:	97 df       	rcall	.-210    	; 0x489a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    496c:	f2 cf       	rjmp	.-28     	; 0x4952 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    496e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4970:	fe 01       	movw	r30, r28
    4972:	e8 0f       	add	r30, r24
    4974:	f1 1d       	adc	r31, r1
    4976:	e3 5a       	subi	r30, 0xA3	; 163
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    497c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    497e:	ea 89       	ldd	r30, Y+18	; 0x12
    4980:	fb 89       	ldd	r31, Y+19	; 0x13
    4982:	80 81       	ld	r24, Z
    4984:	80 62       	ori	r24, 0x20	; 32
    4986:	07 c0       	rjmp	.+14     	; 0x4996 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4988:	ee 89       	ldd	r30, Y+22	; 0x16
    498a:	ff 89       	ldd	r31, Y+23	; 0x17
    498c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    498e:	e8 89       	ldd	r30, Y+16	; 0x10
    4990:	f9 89       	ldd	r31, Y+17	; 0x11
    4992:	80 81       	ld	r24, Z
    4994:	80 64       	ori	r24, 0x40	; 64
    4996:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	1f 91       	pop	r17
    49a2:	0f 91       	pop	r16
    49a4:	ff 90       	pop	r15
    49a6:	ef 90       	pop	r14
    49a8:	08 95       	ret

000049aa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    49aa:	cf 92       	push	r12
    49ac:	df 92       	push	r13
    49ae:	ef 92       	push	r14
    49b0:	ff 92       	push	r15
    49b2:	1f 93       	push	r17
    49b4:	cf 93       	push	r28
    49b6:	df 93       	push	r29
    49b8:	ec 01       	movw	r28, r24
    49ba:	6a 01       	movw	r12, r20
    49bc:	7b 01       	movw	r14, r22
    49be:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    49c0:	e8 89       	ldd	r30, Y+16	; 0x10
    49c2:	f9 89       	ldd	r31, Y+17	; 0x11
    49c4:	82 e0       	ldi	r24, 0x02	; 2
    49c6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    49c8:	41 15       	cp	r20, r1
    49ca:	51 4e       	sbci	r21, 0xE1	; 225
    49cc:	61 05       	cpc	r22, r1
    49ce:	71 05       	cpc	r23, r1
    49d0:	a9 f0       	breq	.+42     	; 0x49fc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	79 e0       	ldi	r23, 0x09	; 9
    49d6:	8d e3       	ldi	r24, 0x3D	; 61
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	a7 01       	movw	r20, r14
    49dc:	96 01       	movw	r18, r12
    49de:	03 d7       	rcall	.+3590   	; 0x57e6 <__udivmodsi4>
    49e0:	da 01       	movw	r26, r20
    49e2:	c9 01       	movw	r24, r18
    49e4:	01 97       	sbiw	r24, 0x01	; 1
    49e6:	a1 09       	sbc	r26, r1
    49e8:	b1 09       	sbc	r27, r1
    49ea:	b6 95       	lsr	r27
    49ec:	a7 95       	ror	r26
    49ee:	97 95       	ror	r25
    49f0:	87 95       	ror	r24
    49f2:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    49f4:	41 15       	cp	r20, r1
    49f6:	80 e1       	ldi	r24, 0x10	; 16
    49f8:	58 07       	cpc	r21, r24
    49fa:	a0 f0       	brcs	.+40     	; 0x4a24 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    49fc:	e8 89       	ldd	r30, Y+16	; 0x10
    49fe:	f9 89       	ldd	r31, Y+17	; 0x11
    4a00:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4a02:	60 e8       	ldi	r22, 0x80	; 128
    4a04:	74 e8       	ldi	r23, 0x84	; 132
    4a06:	8e e1       	ldi	r24, 0x1E	; 30
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	a7 01       	movw	r20, r14
    4a0c:	96 01       	movw	r18, r12
    4a0e:	eb d6       	rcall	.+3542   	; 0x57e6 <__udivmodsi4>
    4a10:	ba 01       	movw	r22, r20
    4a12:	a9 01       	movw	r20, r18
    4a14:	41 50       	subi	r20, 0x01	; 1
    4a16:	51 09       	sbc	r21, r1
    4a18:	61 09       	sbc	r22, r1
    4a1a:	71 09       	sbc	r23, r1
    4a1c:	76 95       	lsr	r23
    4a1e:	67 95       	ror	r22
    4a20:	57 95       	ror	r21
    4a22:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4a24:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a26:	fd 85       	ldd	r31, Y+13	; 0x0d
    4a28:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4a2a:	ee 85       	ldd	r30, Y+14	; 0x0e
    4a2c:	ff 85       	ldd	r31, Y+15	; 0x0f
    4a2e:	40 83       	st	Z, r20

  _written = false;
    4a30:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4a32:	ec 89       	ldd	r30, Y+20	; 0x14
    4a34:	fd 89       	ldd	r31, Y+21	; 0x15
    4a36:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4a38:	ea 89       	ldd	r30, Y+18	; 0x12
    4a3a:	fb 89       	ldd	r31, Y+19	; 0x13
    4a3c:	80 81       	ld	r24, Z
    4a3e:	80 61       	ori	r24, 0x10	; 16
    4a40:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4a42:	ea 89       	ldd	r30, Y+18	; 0x12
    4a44:	fb 89       	ldd	r31, Y+19	; 0x13
    4a46:	80 81       	ld	r24, Z
    4a48:	88 60       	ori	r24, 0x08	; 8
    4a4a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4a4c:	ea 89       	ldd	r30, Y+18	; 0x12
    4a4e:	fb 89       	ldd	r31, Y+19	; 0x13
    4a50:	80 81       	ld	r24, Z
    4a52:	80 68       	ori	r24, 0x80	; 128
    4a54:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4a56:	ea 89       	ldd	r30, Y+18	; 0x12
    4a58:	fb 89       	ldd	r31, Y+19	; 0x13
    4a5a:	80 81       	ld	r24, Z
    4a5c:	8f 7d       	andi	r24, 0xDF	; 223
    4a5e:	80 83       	st	Z, r24
}
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	1f 91       	pop	r17
    4a66:	ff 90       	pop	r15
    4a68:	ef 90       	pop	r14
    4a6a:	df 90       	pop	r13
    4a6c:	cf 90       	pop	r12
    4a6e:	08 95       	ret

00004a70 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4a70:	1f 92       	push	r1
    4a72:	0f 92       	push	r0
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	0f 92       	push	r0
    4a78:	11 24       	eor	r1, r1
    4a7a:	2f 93       	push	r18
    4a7c:	8f 93       	push	r24
    4a7e:	9f 93       	push	r25
    4a80:	ef 93       	push	r30
    4a82:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4a84:	e0 91 3d 05 	lds	r30, 0x053D	; 0x80053d <Serial+0x10>
    4a88:	f0 91 3e 05 	lds	r31, 0x053E	; 0x80053e <Serial+0x11>
    4a8c:	80 81       	ld	r24, Z
    4a8e:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <Serial+0x16>
    4a92:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <Serial+0x17>
    4a96:	82 fd       	sbrc	r24, 2
    4a98:	12 c0       	rjmp	.+36     	; 0x4abe <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4a9a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4a9c:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <Serial+0x19>
    4aa0:	8f 5f       	subi	r24, 0xFF	; 255
    4aa2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4aa4:	20 91 47 05 	lds	r18, 0x0547	; 0x800547 <Serial+0x1a>
    4aa8:	82 17       	cp	r24, r18
    4aaa:	51 f0       	breq	.+20     	; 0x4ac0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4aac:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <Serial+0x19>
    4ab0:	f0 e0       	ldi	r31, 0x00	; 0
    4ab2:	e3 5d       	subi	r30, 0xD3	; 211
    4ab4:	fa 4f       	sbci	r31, 0xFA	; 250
    4ab6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4ab8:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <Serial+0x19>
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4abe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4ac0:	ff 91       	pop	r31
    4ac2:	ef 91       	pop	r30
    4ac4:	9f 91       	pop	r25
    4ac6:	8f 91       	pop	r24
    4ac8:	2f 91       	pop	r18
    4aca:	0f 90       	pop	r0
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	0f 90       	pop	r0
    4ad0:	1f 90       	pop	r1
    4ad2:	18 95       	reti

00004ad4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4ad4:	1f 92       	push	r1
    4ad6:	0f 92       	push	r0
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	2f 93       	push	r18
    4ae0:	3f 93       	push	r19
    4ae2:	4f 93       	push	r20
    4ae4:	5f 93       	push	r21
    4ae6:	6f 93       	push	r22
    4ae8:	7f 93       	push	r23
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4af6:	8d e2       	ldi	r24, 0x2D	; 45
    4af8:	95 e0       	ldi	r25, 0x05	; 5
    4afa:	cf de       	rcall	.-610    	; 0x489a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4afc:	ff 91       	pop	r31
    4afe:	ef 91       	pop	r30
    4b00:	bf 91       	pop	r27
    4b02:	af 91       	pop	r26
    4b04:	9f 91       	pop	r25
    4b06:	8f 91       	pop	r24
    4b08:	7f 91       	pop	r23
    4b0a:	6f 91       	pop	r22
    4b0c:	5f 91       	pop	r21
    4b0e:	4f 91       	pop	r20
    4b10:	3f 91       	pop	r19
    4b12:	2f 91       	pop	r18
    4b14:	0f 90       	pop	r0
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	0f 90       	pop	r0
    4b1a:	1f 90       	pop	r1
    4b1c:	18 95       	reti

00004b1e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4b1e:	8d e2       	ldi	r24, 0x2D	; 45
    4b20:	95 e0       	ldi	r25, 0x05	; 5
    4b22:	80 de       	rcall	.-768    	; 0x4824 <_ZN14HardwareSerial9availableEv>
    4b24:	21 e0       	ldi	r18, 0x01	; 1
    4b26:	89 2b       	or	r24, r25
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <_Z17Serial0_availablev+0xe>
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
}
    4b2c:	82 2f       	mov	r24, r18
    4b2e:	08 95       	ret

00004b30 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4b30:	ed e2       	ldi	r30, 0x2D	; 45
    4b32:	f5 e0       	ldi	r31, 0x05	; 5
    4b34:	13 82       	std	Z+3, r1	; 0x03
    4b36:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4b38:	88 ee       	ldi	r24, 0xE8	; 232
    4b3a:	93 e0       	ldi	r25, 0x03	; 3
    4b3c:	a0 e0       	ldi	r26, 0x00	; 0
    4b3e:	b0 e0       	ldi	r27, 0x00	; 0
    4b40:	84 83       	std	Z+4, r24	; 0x04
    4b42:	95 83       	std	Z+5, r25	; 0x05
    4b44:	a6 83       	std	Z+6, r26	; 0x06
    4b46:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4b48:	83 eb       	ldi	r24, 0xB3	; 179
    4b4a:	91 e0       	ldi	r25, 0x01	; 1
    4b4c:	91 83       	std	Z+1, r25	; 0x01
    4b4e:	80 83       	st	Z, r24
    4b50:	85 ec       	ldi	r24, 0xC5	; 197
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	95 87       	std	Z+13, r25	; 0x0d
    4b56:	84 87       	std	Z+12, r24	; 0x0c
    4b58:	84 ec       	ldi	r24, 0xC4	; 196
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	97 87       	std	Z+15, r25	; 0x0f
    4b5e:	86 87       	std	Z+14, r24	; 0x0e
    4b60:	80 ec       	ldi	r24, 0xC0	; 192
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	91 8b       	std	Z+17, r25	; 0x11
    4b66:	80 8b       	std	Z+16, r24	; 0x10
    4b68:	81 ec       	ldi	r24, 0xC1	; 193
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	93 8b       	std	Z+19, r25	; 0x13
    4b6e:	82 8b       	std	Z+18, r24	; 0x12
    4b70:	82 ec       	ldi	r24, 0xC2	; 194
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	95 8b       	std	Z+21, r25	; 0x15
    4b76:	84 8b       	std	Z+20, r24	; 0x14
    4b78:	86 ec       	ldi	r24, 0xC6	; 198
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	97 8b       	std	Z+23, r25	; 0x17
    4b7e:	86 8b       	std	Z+22, r24	; 0x16
    4b80:	11 8e       	std	Z+25, r1	; 0x19
    4b82:	12 8e       	std	Z+26, r1	; 0x1a
    4b84:	13 8e       	std	Z+27, r1	; 0x1b
    4b86:	14 8e       	std	Z+28, r1	; 0x1c
    4b88:	08 95       	ret

00004b8a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4b8a:	08 95       	ret

00004b8c <main>:

int main(void)
{
	init();
    4b8c:	33 d2       	rcall	.+1126   	; 0x4ff4 <init>

	initVariant();
    4b8e:	fd df       	rcall	.-6      	; 0x4b8a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4b90:	1e db       	rcall	.-2500   	; 0x41ce <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4b92:	c0 e4       	ldi	r28, 0x40	; 64
    4b94:	d4 e2       	ldi	r29, 0x24	; 36
#endif
	
	setup();
    
	for (;;) {
		loop();
    4b96:	5b db       	rcall	.-2378   	; 0x424e <loop>
		if (serialEventRun) serialEventRun();
    4b98:	20 97       	sbiw	r28, 0x00	; 0
    4b9a:	e9 f3       	breq	.-6      	; 0x4b96 <main+0xa>
    4b9c:	71 de       	rcall	.-798    	; 0x4880 <_Z14serialEventRunv>
    4b9e:	fb cf       	rjmp	.-10     	; 0x4b96 <main+0xa>

00004ba0 <_ZN5Print5writeEPKhj>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4ba0:	cf 92       	push	r12
    4ba2:	df 92       	push	r13
    4ba4:	ef 92       	push	r14
    4ba6:	ff 92       	push	r15
    4ba8:	0f 93       	push	r16
    4baa:	1f 93       	push	r17
    4bac:	cf 93       	push	r28
    4bae:	df 93       	push	r29
    4bb0:	6c 01       	movw	r12, r24
    4bb2:	7a 01       	movw	r14, r20
    4bb4:	8b 01       	movw	r16, r22
    4bb6:	c0 e0       	ldi	r28, 0x00	; 0
    4bb8:	d0 e0       	ldi	r29, 0x00	; 0
    4bba:	ce 15       	cp	r28, r14
    4bbc:	df 05       	cpc	r29, r15
    4bbe:	89 f0       	breq	.+34     	; 0x4be2 <_ZN5Print5writeEPKhj+0x42>
    4bc0:	d8 01       	movw	r26, r16
    4bc2:	6d 91       	ld	r22, X+
    4bc4:	8d 01       	movw	r16, r26
    4bc6:	d6 01       	movw	r26, r12
    4bc8:	ed 91       	ld	r30, X+
    4bca:	fc 91       	ld	r31, X
    4bcc:	01 90       	ld	r0, Z+
    4bce:	f0 81       	ld	r31, Z
    4bd0:	e0 2d       	mov	r30, r0
    4bd2:	c6 01       	movw	r24, r12
    4bd4:	09 95       	icall
    4bd6:	89 2b       	or	r24, r25
    4bd8:	11 f4       	brne	.+4      	; 0x4bde <_ZN5Print5writeEPKhj+0x3e>
    4bda:	7e 01       	movw	r14, r28
    4bdc:	02 c0       	rjmp	.+4      	; 0x4be2 <_ZN5Print5writeEPKhj+0x42>
    4bde:	21 96       	adiw	r28, 0x01	; 1
    4be0:	ec cf       	rjmp	.-40     	; 0x4bba <_ZN5Print5writeEPKhj+0x1a>
    4be2:	c7 01       	movw	r24, r14
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	1f 91       	pop	r17
    4bea:	0f 91       	pop	r16
    4bec:	ff 90       	pop	r15
    4bee:	ef 90       	pop	r14
    4bf0:	df 90       	pop	r13
    4bf2:	cf 90       	pop	r12
    4bf4:	08 95       	ret

00004bf6 <_ZN5Print5writeEPKc>:
    4bf6:	61 15       	cp	r22, r1
    4bf8:	71 05       	cpc	r23, r1
    4bfa:	79 f0       	breq	.+30     	; 0x4c1a <_ZN5Print5writeEPKc+0x24>
    4bfc:	fb 01       	movw	r30, r22
    4bfe:	01 90       	ld	r0, Z+
    4c00:	00 20       	and	r0, r0
    4c02:	e9 f7       	brne	.-6      	; 0x4bfe <_ZN5Print5writeEPKc+0x8>
    4c04:	31 97       	sbiw	r30, 0x01	; 1
    4c06:	af 01       	movw	r20, r30
    4c08:	46 1b       	sub	r20, r22
    4c0a:	57 0b       	sbc	r21, r23
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	ed 91       	ld	r30, X+
    4c10:	fc 91       	ld	r31, X
    4c12:	02 80       	ldd	r0, Z+2	; 0x02
    4c14:	f3 81       	ldd	r31, Z+3	; 0x03
    4c16:	e0 2d       	mov	r30, r0
    4c18:	09 94       	ijmp
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	08 95       	ret

00004c20 <_ZN5Print5printEPK19__FlashStringHelper>:
    4c20:	ef 92       	push	r14
    4c22:	ff 92       	push	r15
    4c24:	0f 93       	push	r16
    4c26:	1f 93       	push	r17
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	8c 01       	movw	r16, r24
    4c2e:	7b 01       	movw	r14, r22
    4c30:	c0 e0       	ldi	r28, 0x00	; 0
    4c32:	d0 e0       	ldi	r29, 0x00	; 0
    4c34:	f7 01       	movw	r30, r14
    4c36:	ec 0f       	add	r30, r28
    4c38:	fd 1f       	adc	r31, r29
    4c3a:	64 91       	lpm	r22, Z
    4c3c:	66 23       	and	r22, r22
    4c3e:	61 f0       	breq	.+24     	; 0x4c58 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4c40:	d8 01       	movw	r26, r16
    4c42:	ed 91       	ld	r30, X+
    4c44:	fc 91       	ld	r31, X
    4c46:	01 90       	ld	r0, Z+
    4c48:	f0 81       	ld	r31, Z
    4c4a:	e0 2d       	mov	r30, r0
    4c4c:	c8 01       	movw	r24, r16
    4c4e:	09 95       	icall
    4c50:	89 2b       	or	r24, r25
    4c52:	11 f0       	breq	.+4      	; 0x4c58 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4c54:	21 96       	adiw	r28, 0x01	; 1
    4c56:	ee cf       	rjmp	.-36     	; 0x4c34 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    4c58:	ce 01       	movw	r24, r28
    4c5a:	df 91       	pop	r29
    4c5c:	cf 91       	pop	r28
    4c5e:	1f 91       	pop	r17
    4c60:	0f 91       	pop	r16
    4c62:	ff 90       	pop	r15
    4c64:	ef 90       	pop	r14
    4c66:	08 95       	ret

00004c68 <_ZN5Print5printERK6String>:
    4c68:	dc 01       	movw	r26, r24
    4c6a:	ed 91       	ld	r30, X+
    4c6c:	fc 91       	ld	r31, X
    4c6e:	db 01       	movw	r26, r22
    4c70:	14 96       	adiw	r26, 0x04	; 4
    4c72:	4d 91       	ld	r20, X+
    4c74:	5c 91       	ld	r21, X
    4c76:	15 97       	sbiw	r26, 0x05	; 5
    4c78:	6d 91       	ld	r22, X+
    4c7a:	7c 91       	ld	r23, X
    4c7c:	02 80       	ldd	r0, Z+2	; 0x02
    4c7e:	f3 81       	ldd	r31, Z+3	; 0x03
    4c80:	e0 2d       	mov	r30, r0
    4c82:	09 94       	ijmp

00004c84 <_ZN5Print5printEc>:
    4c84:	dc 01       	movw	r26, r24
    4c86:	ed 91       	ld	r30, X+
    4c88:	fc 91       	ld	r31, X
    4c8a:	01 90       	ld	r0, Z+
    4c8c:	f0 81       	ld	r31, Z
    4c8e:	e0 2d       	mov	r30, r0
    4c90:	09 94       	ijmp

00004c92 <_ZN5Print7printlnEv>:
    4c92:	6f eb       	ldi	r22, 0xBF	; 191
    4c94:	71 e0       	ldi	r23, 0x01	; 1
    4c96:	af cf       	rjmp	.-162    	; 0x4bf6 <_ZN5Print5writeEPKc>

00004c98 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	ec 01       	movw	r28, r24
    4ca2:	be df       	rcall	.-132    	; 0x4c20 <_ZN5Print5printEPK19__FlashStringHelper>
    4ca4:	8c 01       	movw	r16, r24
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	f4 df       	rcall	.-24     	; 0x4c92 <_ZN5Print7printlnEv>
    4caa:	80 0f       	add	r24, r16
    4cac:	91 1f       	adc	r25, r17
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	1f 91       	pop	r17
    4cb4:	0f 91       	pop	r16
    4cb6:	08 95       	ret

00004cb8 <_ZN5Print7printlnERK6String>:
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	ec 01       	movw	r28, r24
    4cc2:	d2 df       	rcall	.-92     	; 0x4c68 <_ZN5Print5printERK6String>
    4cc4:	8c 01       	movw	r16, r24
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	e4 df       	rcall	.-56     	; 0x4c92 <_ZN5Print7printlnEv>
    4cca:	80 0f       	add	r24, r16
    4ccc:	91 1f       	adc	r25, r17
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	08 95       	ret

00004cd8 <_ZN5Print11printNumberEmh>:
    4cd8:	8f 92       	push	r8
    4cda:	9f 92       	push	r9
    4cdc:	af 92       	push	r10
    4cde:	bf 92       	push	r11
    4ce0:	cf 92       	push	r12
    4ce2:	df 92       	push	r13
    4ce4:	ef 92       	push	r14
    4ce6:	ff 92       	push	r15
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	a1 97       	sbiw	r28, 0x21	; 33
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	7c 01       	movw	r14, r24
    4d02:	d4 2e       	mov	r13, r20
    4d04:	c5 2e       	mov	r12, r21
    4d06:	db 01       	movw	r26, r22
    4d08:	19 a2       	std	Y+33, r1	; 0x21
    4d0a:	22 30       	cpi	r18, 0x02	; 2
    4d0c:	08 f4       	brcc	.+2      	; 0x4d10 <_ZN5Print11printNumberEmh+0x38>
    4d0e:	2a e0       	ldi	r18, 0x0A	; 10
    4d10:	8e 01       	movw	r16, r28
    4d12:	0f 5d       	subi	r16, 0xDF	; 223
    4d14:	1f 4f       	sbci	r17, 0xFF	; 255
    4d16:	82 2e       	mov	r8, r18
    4d18:	91 2c       	mov	r9, r1
    4d1a:	a1 2c       	mov	r10, r1
    4d1c:	b1 2c       	mov	r11, r1
    4d1e:	6d 2d       	mov	r22, r13
    4d20:	7c 2d       	mov	r23, r12
    4d22:	cd 01       	movw	r24, r26
    4d24:	a5 01       	movw	r20, r10
    4d26:	94 01       	movw	r18, r8
    4d28:	5e d5       	rcall	.+2748   	; 0x57e6 <__udivmodsi4>
    4d2a:	d2 2e       	mov	r13, r18
    4d2c:	c3 2e       	mov	r12, r19
    4d2e:	da 01       	movw	r26, r20
    4d30:	01 50       	subi	r16, 0x01	; 1
    4d32:	11 09       	sbc	r17, r1
    4d34:	6a 30       	cpi	r22, 0x0A	; 10
    4d36:	71 05       	cpc	r23, r1
    4d38:	81 05       	cpc	r24, r1
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	10 f4       	brcc	.+4      	; 0x4d42 <_ZN5Print11printNumberEmh+0x6a>
    4d3e:	60 5d       	subi	r22, 0xD0	; 208
    4d40:	01 c0       	rjmp	.+2      	; 0x4d44 <_ZN5Print11printNumberEmh+0x6c>
    4d42:	69 5c       	subi	r22, 0xC9	; 201
    4d44:	f8 01       	movw	r30, r16
    4d46:	60 83       	st	Z, r22
    4d48:	23 2b       	or	r18, r19
    4d4a:	24 2b       	or	r18, r20
    4d4c:	25 2b       	or	r18, r21
    4d4e:	39 f7       	brne	.-50     	; 0x4d1e <_ZN5Print11printNumberEmh+0x46>
    4d50:	b8 01       	movw	r22, r16
    4d52:	c7 01       	movw	r24, r14
    4d54:	50 df       	rcall	.-352    	; 0x4bf6 <_ZN5Print5writeEPKc>
    4d56:	a1 96       	adiw	r28, 0x21	; 33
    4d58:	0f b6       	in	r0, 0x3f	; 63
    4d5a:	f8 94       	cli
    4d5c:	de bf       	out	0x3e, r29	; 62
    4d5e:	0f be       	out	0x3f, r0	; 63
    4d60:	cd bf       	out	0x3d, r28	; 61
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	1f 91       	pop	r17
    4d68:	0f 91       	pop	r16
    4d6a:	ff 90       	pop	r15
    4d6c:	ef 90       	pop	r14
    4d6e:	df 90       	pop	r13
    4d70:	cf 90       	pop	r12
    4d72:	bf 90       	pop	r11
    4d74:	af 90       	pop	r10
    4d76:	9f 90       	pop	r9
    4d78:	8f 90       	pop	r8
    4d7a:	08 95       	ret

00004d7c <_ZN5Print5printEli>:
    4d7c:	cf 92       	push	r12
    4d7e:	df 92       	push	r13
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	ec 01       	movw	r28, r24
    4d8e:	6a 01       	movw	r12, r20
    4d90:	7b 01       	movw	r14, r22
    4d92:	21 15       	cp	r18, r1
    4d94:	31 05       	cpc	r19, r1
    4d96:	79 f4       	brne	.+30     	; 0x4db6 <_ZN5Print5printEli+0x3a>
    4d98:	e8 81       	ld	r30, Y
    4d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    4d9c:	01 90       	ld	r0, Z+
    4d9e:	f0 81       	ld	r31, Z
    4da0:	e0 2d       	mov	r30, r0
    4da2:	64 2f       	mov	r22, r20
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	ff 90       	pop	r15
    4dae:	ef 90       	pop	r14
    4db0:	df 90       	pop	r13
    4db2:	cf 90       	pop	r12
    4db4:	09 94       	ijmp
    4db6:	2a 30       	cpi	r18, 0x0A	; 10
    4db8:	31 05       	cpc	r19, r1
    4dba:	d9 f4       	brne	.+54     	; 0x4df2 <_ZN5Print5printEli+0x76>
    4dbc:	77 ff       	sbrs	r23, 7
    4dbe:	18 c0       	rjmp	.+48     	; 0x4df0 <_ZN5Print5printEli+0x74>
    4dc0:	6d e2       	ldi	r22, 0x2D	; 45
    4dc2:	60 df       	rcall	.-320    	; 0x4c84 <_ZN5Print5printEc>
    4dc4:	8c 01       	movw	r16, r24
    4dc6:	44 27       	eor	r20, r20
    4dc8:	55 27       	eor	r21, r21
    4dca:	ba 01       	movw	r22, r20
    4dcc:	4c 19       	sub	r20, r12
    4dce:	5d 09       	sbc	r21, r13
    4dd0:	6e 09       	sbc	r22, r14
    4dd2:	7f 09       	sbc	r23, r15
    4dd4:	2a e0       	ldi	r18, 0x0A	; 10
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	7f df       	rcall	.-258    	; 0x4cd8 <_ZN5Print11printNumberEmh>
    4dda:	80 0f       	add	r24, r16
    4ddc:	91 1f       	adc	r25, r17
    4dde:	df 91       	pop	r29
    4de0:	cf 91       	pop	r28
    4de2:	1f 91       	pop	r17
    4de4:	0f 91       	pop	r16
    4de6:	ff 90       	pop	r15
    4de8:	ef 90       	pop	r14
    4dea:	df 90       	pop	r13
    4dec:	cf 90       	pop	r12
    4dee:	08 95       	ret
    4df0:	2a e0       	ldi	r18, 0x0A	; 10
    4df2:	b7 01       	movw	r22, r14
    4df4:	a6 01       	movw	r20, r12
    4df6:	ce 01       	movw	r24, r28
    4df8:	df 91       	pop	r29
    4dfa:	cf 91       	pop	r28
    4dfc:	1f 91       	pop	r17
    4dfe:	0f 91       	pop	r16
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	df 90       	pop	r13
    4e06:	cf 90       	pop	r12
    4e08:	67 cf       	rjmp	.-306    	; 0x4cd8 <_ZN5Print11printNumberEmh>

00004e0a <_ZN5Print7printlnEii>:
    4e0a:	0f 93       	push	r16
    4e0c:	1f 93       	push	r17
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	ec 01       	movw	r28, r24
    4e14:	9a 01       	movw	r18, r20
    4e16:	ab 01       	movw	r20, r22
    4e18:	77 0f       	add	r23, r23
    4e1a:	66 0b       	sbc	r22, r22
    4e1c:	77 0b       	sbc	r23, r23
    4e1e:	ae df       	rcall	.-164    	; 0x4d7c <_ZN5Print5printEli>
    4e20:	8c 01       	movw	r16, r24
    4e22:	ce 01       	movw	r24, r28
    4e24:	36 df       	rcall	.-404    	; 0x4c92 <_ZN5Print7printlnEv>
    4e26:	80 0f       	add	r24, r16
    4e28:	91 1f       	adc	r25, r17
    4e2a:	df 91       	pop	r29
    4e2c:	cf 91       	pop	r28
    4e2e:	1f 91       	pop	r17
    4e30:	0f 91       	pop	r16
    4e32:	08 95       	ret

00004e34 <_ZN5Print5printEmi>:
    4e34:	21 15       	cp	r18, r1
    4e36:	31 05       	cpc	r19, r1
    4e38:	41 f4       	brne	.+16     	; 0x4e4a <_ZN5Print5printEmi+0x16>
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	ed 91       	ld	r30, X+
    4e3e:	fc 91       	ld	r31, X
    4e40:	01 90       	ld	r0, Z+
    4e42:	f0 81       	ld	r31, Z
    4e44:	e0 2d       	mov	r30, r0
    4e46:	64 2f       	mov	r22, r20
    4e48:	09 94       	ijmp
    4e4a:	46 cf       	rjmp	.-372    	; 0x4cd8 <_ZN5Print11printNumberEmh>

00004e4c <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	ec 01       	movw	r28, r24
    4e56:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4e58:	46 2f       	mov	r20, r22
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	e9 df       	rcall	.-46     	; 0x4e34 <_ZN5Print5printEmi>
    4e62:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4e64:	ce 01       	movw	r24, r28
    4e66:	15 df       	rcall	.-470    	; 0x4c92 <_ZN5Print7printlnEv>
  return n;
}
    4e68:	80 0f       	add	r24, r16
    4e6a:	91 1f       	adc	r25, r17
    4e6c:	df 91       	pop	r29
    4e6e:	cf 91       	pop	r28
    4e70:	1f 91       	pop	r17
    4e72:	0f 91       	pop	r16
    4e74:	08 95       	ret

00004e76 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4e76:	1f 92       	push	r1
    4e78:	0f 92       	push	r0
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	0f 92       	push	r0
    4e7e:	11 24       	eor	r1, r1
    4e80:	2f 93       	push	r18
    4e82:	3f 93       	push	r19
    4e84:	8f 93       	push	r24
    4e86:	9f 93       	push	r25
    4e88:	af 93       	push	r26
    4e8a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4e8c:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <timer0_millis>
    4e90:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <timer0_millis+0x1>
    4e94:	a0 91 cd 05 	lds	r26, 0x05CD	; 0x8005cd <timer0_millis+0x2>
    4e98:	b0 91 ce 05 	lds	r27, 0x05CE	; 0x8005ce <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4e9c:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4ea0:	23 e0       	ldi	r18, 0x03	; 3
    4ea2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4ea4:	2d 37       	cpi	r18, 0x7D	; 125
    4ea6:	20 f4       	brcc	.+8      	; 0x4eb0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4ea8:	01 96       	adiw	r24, 0x01	; 1
    4eaa:	a1 1d       	adc	r26, r1
    4eac:	b1 1d       	adc	r27, r1
    4eae:	05 c0       	rjmp	.+10     	; 0x4eba <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4eb0:	26 e8       	ldi	r18, 0x86	; 134
    4eb2:	23 0f       	add	r18, r19
		m += 1;
    4eb4:	02 96       	adiw	r24, 0x02	; 2
    4eb6:	a1 1d       	adc	r26, r1
    4eb8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4eba:	20 93 ca 05 	sts	0x05CA, r18	; 0x8005ca <timer0_fract>
	timer0_millis = m;
    4ebe:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <timer0_millis>
    4ec2:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <timer0_millis+0x1>
    4ec6:	a0 93 cd 05 	sts	0x05CD, r26	; 0x8005cd <timer0_millis+0x2>
    4eca:	b0 93 ce 05 	sts	0x05CE, r27	; 0x8005ce <timer0_millis+0x3>
	timer0_overflow_count++;
    4ece:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <timer0_overflow_count>
    4ed2:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <timer0_overflow_count+0x1>
    4ed6:	a0 91 d1 05 	lds	r26, 0x05D1	; 0x8005d1 <timer0_overflow_count+0x2>
    4eda:	b0 91 d2 05 	lds	r27, 0x05D2	; 0x8005d2 <timer0_overflow_count+0x3>
    4ede:	01 96       	adiw	r24, 0x01	; 1
    4ee0:	a1 1d       	adc	r26, r1
    4ee2:	b1 1d       	adc	r27, r1
    4ee4:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <timer0_overflow_count>
    4ee8:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <timer0_overflow_count+0x1>
    4eec:	a0 93 d1 05 	sts	0x05D1, r26	; 0x8005d1 <timer0_overflow_count+0x2>
    4ef0:	b0 93 d2 05 	sts	0x05D2, r27	; 0x8005d2 <timer0_overflow_count+0x3>
}
    4ef4:	bf 91       	pop	r27
    4ef6:	af 91       	pop	r26
    4ef8:	9f 91       	pop	r25
    4efa:	8f 91       	pop	r24
    4efc:	3f 91       	pop	r19
    4efe:	2f 91       	pop	r18
    4f00:	0f 90       	pop	r0
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	0f 90       	pop	r0
    4f06:	1f 90       	pop	r1
    4f08:	18 95       	reti

00004f0a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4f0a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4f0c:	f8 94       	cli
	m = timer0_millis;
    4f0e:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <timer0_millis>
    4f12:	70 91 cc 05 	lds	r23, 0x05CC	; 0x8005cc <timer0_millis+0x1>
    4f16:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <timer0_millis+0x2>
    4f1a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <timer0_millis+0x3>
	SREG = oldSREG;
    4f1e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4f20:	08 95       	ret

00004f22 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4f22:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4f24:	f8 94       	cli
	m = timer0_overflow_count;
    4f26:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <timer0_overflow_count>
    4f2a:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <timer0_overflow_count+0x1>
    4f2e:	a0 91 d1 05 	lds	r26, 0x05D1	; 0x8005d1 <timer0_overflow_count+0x2>
    4f32:	b0 91 d2 05 	lds	r27, 0x05D2	; 0x8005d2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4f36:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4f38:	a8 9b       	sbis	0x15, 0	; 21
    4f3a:	05 c0       	rjmp	.+10     	; 0x4f46 <micros+0x24>
    4f3c:	2f 3f       	cpi	r18, 0xFF	; 255
    4f3e:	19 f0       	breq	.+6      	; 0x4f46 <micros+0x24>
		m++;
    4f40:	01 96       	adiw	r24, 0x01	; 1
    4f42:	a1 1d       	adc	r26, r1
    4f44:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4f46:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4f48:	ba 2f       	mov	r27, r26
    4f4a:	a9 2f       	mov	r26, r25
    4f4c:	98 2f       	mov	r25, r24
    4f4e:	88 27       	eor	r24, r24
    4f50:	82 0f       	add	r24, r18
    4f52:	91 1d       	adc	r25, r1
    4f54:	a1 1d       	adc	r26, r1
    4f56:	b1 1d       	adc	r27, r1
    4f58:	bc 01       	movw	r22, r24
    4f5a:	cd 01       	movw	r24, r26
    4f5c:	42 e0       	ldi	r20, 0x02	; 2
    4f5e:	66 0f       	add	r22, r22
    4f60:	77 1f       	adc	r23, r23
    4f62:	88 1f       	adc	r24, r24
    4f64:	99 1f       	adc	r25, r25
    4f66:	4a 95       	dec	r20
    4f68:	d1 f7       	brne	.-12     	; 0x4f5e <micros+0x3c>
}
    4f6a:	08 95       	ret

00004f6c <delay>:

void delay(unsigned long ms)
{
    4f6c:	8f 92       	push	r8
    4f6e:	9f 92       	push	r9
    4f70:	af 92       	push	r10
    4f72:	bf 92       	push	r11
    4f74:	cf 92       	push	r12
    4f76:	df 92       	push	r13
    4f78:	ef 92       	push	r14
    4f7a:	ff 92       	push	r15
    4f7c:	6b 01       	movw	r12, r22
    4f7e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4f80:	d0 df       	rcall	.-96     	; 0x4f22 <micros>
    4f82:	4b 01       	movw	r8, r22
    4f84:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4f86:	c1 14       	cp	r12, r1
    4f88:	d1 04       	cpc	r13, r1
    4f8a:	e1 04       	cpc	r14, r1
    4f8c:	f1 04       	cpc	r15, r1
    4f8e:	f1 f0       	breq	.+60     	; 0x4fcc <delay+0x60>
		yield();
    4f90:	29 d4       	rcall	.+2130   	; 0x57e4 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4f92:	c7 df       	rcall	.-114    	; 0x4f22 <micros>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	88 19       	sub	r24, r8
    4f9a:	99 09       	sbc	r25, r9
    4f9c:	aa 09       	sbc	r26, r10
    4f9e:	bb 09       	sbc	r27, r11
    4fa0:	88 3e       	cpi	r24, 0xE8	; 232
    4fa2:	93 40       	sbci	r25, 0x03	; 3
    4fa4:	a1 05       	cpc	r26, r1
    4fa6:	b1 05       	cpc	r27, r1
    4fa8:	70 f3       	brcs	.-36     	; 0x4f86 <delay+0x1a>
			ms--;
    4faa:	21 e0       	ldi	r18, 0x01	; 1
    4fac:	c2 1a       	sub	r12, r18
    4fae:	d1 08       	sbc	r13, r1
    4fb0:	e1 08       	sbc	r14, r1
    4fb2:	f1 08       	sbc	r15, r1
			start += 1000;
    4fb4:	88 ee       	ldi	r24, 0xE8	; 232
    4fb6:	88 0e       	add	r8, r24
    4fb8:	83 e0       	ldi	r24, 0x03	; 3
    4fba:	98 1e       	adc	r9, r24
    4fbc:	a1 1c       	adc	r10, r1
    4fbe:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4fc0:	c1 14       	cp	r12, r1
    4fc2:	d1 04       	cpc	r13, r1
    4fc4:	e1 04       	cpc	r14, r1
    4fc6:	f1 04       	cpc	r15, r1
    4fc8:	21 f7       	brne	.-56     	; 0x4f92 <delay+0x26>
    4fca:	dd cf       	rjmp	.-70     	; 0x4f86 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    4fcc:	ff 90       	pop	r15
    4fce:	ef 90       	pop	r14
    4fd0:	df 90       	pop	r13
    4fd2:	cf 90       	pop	r12
    4fd4:	bf 90       	pop	r11
    4fd6:	af 90       	pop	r10
    4fd8:	9f 90       	pop	r9
    4fda:	8f 90       	pop	r8
    4fdc:	08 95       	ret

00004fde <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4fde:	82 30       	cpi	r24, 0x02	; 2
    4fe0:	91 05       	cpc	r25, r1
    4fe2:	38 f0       	brcs	.+14     	; 0x4ff2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	88 0f       	add	r24, r24
    4fea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4fec:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4fee:	01 97       	sbiw	r24, 0x01	; 1
    4ff0:	f1 f7       	brne	.-4      	; 0x4fee <delayMicroseconds+0x10>
    4ff2:	08 95       	ret

00004ff4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4ff4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4ff6:	84 b5       	in	r24, 0x24	; 36
    4ff8:	82 60       	ori	r24, 0x02	; 2
    4ffa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4ffc:	84 b5       	in	r24, 0x24	; 36
    4ffe:	81 60       	ori	r24, 0x01	; 1
    5000:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5002:	85 b5       	in	r24, 0x25	; 37
    5004:	82 60       	ori	r24, 0x02	; 2
    5006:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5008:	85 b5       	in	r24, 0x25	; 37
    500a:	81 60       	ori	r24, 0x01	; 1
    500c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    500e:	ee e6       	ldi	r30, 0x6E	; 110
    5010:	f0 e0       	ldi	r31, 0x00	; 0
    5012:	80 81       	ld	r24, Z
    5014:	81 60       	ori	r24, 0x01	; 1
    5016:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5018:	e1 e8       	ldi	r30, 0x81	; 129
    501a:	f0 e0       	ldi	r31, 0x00	; 0
    501c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    501e:	80 81       	ld	r24, Z
    5020:	82 60       	ori	r24, 0x02	; 2
    5022:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5024:	80 81       	ld	r24, Z
    5026:	81 60       	ori	r24, 0x01	; 1
    5028:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    502a:	e0 e8       	ldi	r30, 0x80	; 128
    502c:	f0 e0       	ldi	r31, 0x00	; 0
    502e:	80 81       	ld	r24, Z
    5030:	81 60       	ori	r24, 0x01	; 1
    5032:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5034:	e1 eb       	ldi	r30, 0xB1	; 177
    5036:	f0 e0       	ldi	r31, 0x00	; 0
    5038:	80 81       	ld	r24, Z
    503a:	84 60       	ori	r24, 0x04	; 4
    503c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    503e:	e0 eb       	ldi	r30, 0xB0	; 176
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	80 81       	ld	r24, Z
    5044:	81 60       	ori	r24, 0x01	; 1
    5046:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5048:	ea e7       	ldi	r30, 0x7A	; 122
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	80 81       	ld	r24, Z
    504e:	84 60       	ori	r24, 0x04	; 4
    5050:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5052:	80 81       	ld	r24, Z
    5054:	82 60       	ori	r24, 0x02	; 2
    5056:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5058:	80 81       	ld	r24, Z
    505a:	81 60       	ori	r24, 0x01	; 1
    505c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    505e:	80 81       	ld	r24, Z
    5060:	80 68       	ori	r24, 0x80	; 128
    5062:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5064:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5068:	08 95       	ret

0000506a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    506a:	8e 30       	cpi	r24, 0x0E	; 14
    506c:	08 f0       	brcs	.+2      	; 0x5070 <analogRead+0x6>
    506e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5070:	87 70       	andi	r24, 0x07	; 7
    5072:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    5076:	90 e4       	ldi	r25, 0x40	; 64
    5078:	29 9f       	mul	r18, r25
    507a:	90 01       	movw	r18, r0
    507c:	11 24       	eor	r1, r1
    507e:	82 2b       	or	r24, r18
    5080:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5084:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5088:	80 64       	ori	r24, 0x40	; 64
    508a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    508e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5092:	86 fd       	sbrc	r24, 6
    5094:	fc cf       	rjmp	.-8      	; 0x508e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5096:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    509a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    509e:	90 e0       	ldi	r25, 0x00	; 0
}
    50a0:	92 2b       	or	r25, r18
    50a2:	08 95       	ret

000050a4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    50a4:	83 30       	cpi	r24, 0x03	; 3
    50a6:	81 f0       	breq	.+32     	; 0x50c8 <turnOffPWM+0x24>
    50a8:	28 f4       	brcc	.+10     	; 0x50b4 <turnOffPWM+0x10>
    50aa:	81 30       	cpi	r24, 0x01	; 1
    50ac:	99 f0       	breq	.+38     	; 0x50d4 <turnOffPWM+0x30>
    50ae:	82 30       	cpi	r24, 0x02	; 2
    50b0:	a1 f0       	breq	.+40     	; 0x50da <turnOffPWM+0x36>
    50b2:	08 95       	ret
    50b4:	87 30       	cpi	r24, 0x07	; 7
    50b6:	a9 f0       	breq	.+42     	; 0x50e2 <turnOffPWM+0x3e>
    50b8:	88 30       	cpi	r24, 0x08	; 8
    50ba:	b9 f0       	breq	.+46     	; 0x50ea <turnOffPWM+0x46>
    50bc:	84 30       	cpi	r24, 0x04	; 4
    50be:	d1 f4       	brne	.+52     	; 0x50f4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    50c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50c4:	8f 7d       	andi	r24, 0xDF	; 223
    50c6:	03 c0       	rjmp	.+6      	; 0x50ce <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    50c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50cc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    50ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50d2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    50d4:	84 b5       	in	r24, 0x24	; 36
    50d6:	8f 77       	andi	r24, 0x7F	; 127
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    50da:	84 b5       	in	r24, 0x24	; 36
    50dc:	8f 7d       	andi	r24, 0xDF	; 223
    50de:	84 bd       	out	0x24, r24	; 36
    50e0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    50e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    50e6:	8f 77       	andi	r24, 0x7F	; 127
    50e8:	03 c0       	rjmp	.+6      	; 0x50f0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    50ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    50ee:	8f 7d       	andi	r24, 0xDF	; 223
    50f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    50f4:	08 95       	ret

000050f6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	fc 01       	movw	r30, r24
    50fe:	e3 5f       	subi	r30, 0xF3	; 243
    5100:	fb 4f       	sbci	r31, 0xFB	; 251
    5102:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5104:	fc 01       	movw	r30, r24
    5106:	ef 5d       	subi	r30, 0xDF	; 223
    5108:	fb 4f       	sbci	r31, 0xFB	; 251
    510a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    510c:	88 23       	and	r24, r24
    510e:	61 f1       	breq	.+88     	; 0x5168 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	88 0f       	add	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	fc 01       	movw	r30, r24
    5118:	e7 5b       	subi	r30, 0xB7	; 183
    511a:	fb 4f       	sbci	r31, 0xFB	; 251
    511c:	c5 91       	lpm	r28, Z+
    511e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5120:	fc 01       	movw	r30, r24
    5122:	e1 5c       	subi	r30, 0xC1	; 193
    5124:	fb 4f       	sbci	r31, 0xFB	; 251
    5126:	a5 91       	lpm	r26, Z+
    5128:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    512a:	61 11       	cpse	r22, r1
    512c:	09 c0       	rjmp	.+18     	; 0x5140 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    512e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5130:	f8 94       	cli
		*reg &= ~bit;
    5132:	88 81       	ld	r24, Y
    5134:	20 95       	com	r18
    5136:	82 23       	and	r24, r18
    5138:	88 83       	st	Y, r24
		*out &= ~bit;
    513a:	ec 91       	ld	r30, X
    513c:	2e 23       	and	r18, r30
    513e:	0b c0       	rjmp	.+22     	; 0x5156 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5140:	62 30       	cpi	r22, 0x02	; 2
    5142:	61 f4       	brne	.+24     	; 0x515c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5144:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5146:	f8 94       	cli
		*reg &= ~bit;
    5148:	38 81       	ld	r19, Y
    514a:	82 2f       	mov	r24, r18
    514c:	80 95       	com	r24
    514e:	83 23       	and	r24, r19
    5150:	88 83       	st	Y, r24
		*out |= bit;
    5152:	ec 91       	ld	r30, X
    5154:	2e 2b       	or	r18, r30
    5156:	2c 93       	st	X, r18
		SREG = oldSREG;
    5158:	9f bf       	out	0x3f, r25	; 63
    515a:	06 c0       	rjmp	.+12     	; 0x5168 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    515c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    515e:	f8 94       	cli
		*reg |= bit;
    5160:	e8 81       	ld	r30, Y
    5162:	2e 2b       	or	r18, r30
    5164:	28 83       	st	Y, r18
		SREG = oldSREG;
    5166:	8f bf       	out	0x3f, r24	; 63
	}
}
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5174:	28 2f       	mov	r18, r24
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	f9 01       	movw	r30, r18
    517a:	e7 50       	subi	r30, 0x07	; 7
    517c:	fc 4f       	sbci	r31, 0xFC	; 252
    517e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5180:	f9 01       	movw	r30, r18
    5182:	e3 5f       	subi	r30, 0xF3	; 243
    5184:	fb 4f       	sbci	r31, 0xFB	; 251
    5186:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5188:	f9 01       	movw	r30, r18
    518a:	ef 5d       	subi	r30, 0xDF	; 223
    518c:	fb 4f       	sbci	r31, 0xFB	; 251
    518e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5190:	cc 23       	and	r28, r28
    5192:	c1 f0       	breq	.+48     	; 0x51c4 <digitalWrite+0x56>
    5194:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5196:	81 11       	cpse	r24, r1
    5198:	85 df       	rcall	.-246    	; 0x50a4 <turnOffPWM>

	out = portOutputRegister(port);
    519a:	ec 2f       	mov	r30, r28
    519c:	f0 e0       	ldi	r31, 0x00	; 0
    519e:	ee 0f       	add	r30, r30
    51a0:	ff 1f       	adc	r31, r31
    51a2:	e1 5c       	subi	r30, 0xC1	; 193
    51a4:	fb 4f       	sbci	r31, 0xFB	; 251
    51a6:	a5 91       	lpm	r26, Z+
    51a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    51aa:	8f b7       	in	r24, 0x3f	; 63
	cli();
    51ac:	f8 94       	cli

	if (val == LOW) {
    51ae:	11 11       	cpse	r17, r1
    51b0:	05 c0       	rjmp	.+10     	; 0x51bc <digitalWrite+0x4e>
		*out &= ~bit;
    51b2:	9c 91       	ld	r25, X
    51b4:	ed 2f       	mov	r30, r29
    51b6:	e0 95       	com	r30
    51b8:	e9 23       	and	r30, r25
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    51bc:	ec 91       	ld	r30, X
    51be:	ed 2b       	or	r30, r29
    51c0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    51c2:	8f bf       	out	0x3f, r24	; 63
}
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	1f 91       	pop	r17
    51ca:	08 95       	ret

000051cc <digitalRead>:

int digitalRead(uint8_t pin)
{
    51cc:	cf 93       	push	r28
    51ce:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    51d0:	28 2f       	mov	r18, r24
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	f9 01       	movw	r30, r18
    51d6:	e7 50       	subi	r30, 0x07	; 7
    51d8:	fc 4f       	sbci	r31, 0xFC	; 252
    51da:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    51dc:	f9 01       	movw	r30, r18
    51de:	e3 5f       	subi	r30, 0xF3	; 243
    51e0:	fb 4f       	sbci	r31, 0xFB	; 251
    51e2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    51e4:	f9 01       	movw	r30, r18
    51e6:	ef 5d       	subi	r30, 0xDF	; 223
    51e8:	fb 4f       	sbci	r31, 0xFB	; 251
    51ea:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    51ec:	cc 23       	and	r28, r28
    51ee:	89 f0       	breq	.+34     	; 0x5212 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    51f0:	81 11       	cpse	r24, r1
    51f2:	58 df       	rcall	.-336    	; 0x50a4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    51f4:	ec 2f       	mov	r30, r28
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	ee 0f       	add	r30, r30
    51fa:	ff 1f       	adc	r31, r31
    51fc:	eb 5c       	subi	r30, 0xCB	; 203
    51fe:	fb 4f       	sbci	r31, 0xFB	; 251
    5200:	a5 91       	lpm	r26, Z+
    5202:	b4 91       	lpm	r27, Z
    5204:	ec 91       	ld	r30, X
    5206:	ed 23       	and	r30, r29
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	21 f4       	brne	.+8      	; 0x5216 <digitalRead+0x4a>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	02 c0       	rjmp	.+4      	; 0x5216 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	08 95       	ret

0000521c <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    521c:	fc 01       	movw	r30, r24
    521e:	80 81       	ld	r24, Z
    5220:	91 81       	ldd	r25, Z+1	; 0x01
    5222:	29 c4       	rjmp	.+2130   	; 0x5a76 <free>

00005224 <_ZN6String10invalidateEv>:
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	ec 01       	movw	r28, r24
    522a:	88 81       	ld	r24, Y
    522c:	99 81       	ldd	r25, Y+1	; 0x01
    522e:	00 97       	sbiw	r24, 0x00	; 0
    5230:	09 f0       	breq	.+2      	; 0x5234 <_ZN6String10invalidateEv+0x10>
    5232:	21 d4       	rcall	.+2114   	; 0x5a76 <free>
    5234:	19 82       	std	Y+1, r1	; 0x01
    5236:	18 82       	st	Y, r1
    5238:	1d 82       	std	Y+5, r1	; 0x05
    523a:	1c 82       	std	Y+4, r1	; 0x04
    523c:	1b 82       	std	Y+3, r1	; 0x03
    523e:	1a 82       	std	Y+2, r1	; 0x02
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	08 95       	ret

00005246 <_ZN6String12changeBufferEj>:
    5246:	0f 93       	push	r16
    5248:	1f 93       	push	r17
    524a:	cf 93       	push	r28
    524c:	df 93       	push	r29
    524e:	ec 01       	movw	r28, r24
    5250:	8b 01       	movw	r16, r22
    5252:	6f 5f       	subi	r22, 0xFF	; 255
    5254:	7f 4f       	sbci	r23, 0xFF	; 255
    5256:	88 81       	ld	r24, Y
    5258:	99 81       	ldd	r25, Y+1	; 0x01
    525a:	a5 d4       	rcall	.+2378   	; 0x5ba6 <realloc>
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	31 f0       	breq	.+12     	; 0x526c <_ZN6String12changeBufferEj+0x26>
    5260:	99 83       	std	Y+1, r25	; 0x01
    5262:	88 83       	st	Y, r24
    5264:	1b 83       	std	Y+3, r17	; 0x03
    5266:	0a 83       	std	Y+2, r16	; 0x02
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	01 c0       	rjmp	.+2      	; 0x526e <_ZN6String12changeBufferEj+0x28>
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	08 95       	ret

00005278 <_ZN6String7reserveEj>:
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	ec 01       	movw	r28, r24
    527e:	88 81       	ld	r24, Y
    5280:	99 81       	ldd	r25, Y+1	; 0x01
    5282:	89 2b       	or	r24, r25
    5284:	29 f0       	breq	.+10     	; 0x5290 <_ZN6String7reserveEj+0x18>
    5286:	8a 81       	ldd	r24, Y+2	; 0x02
    5288:	9b 81       	ldd	r25, Y+3	; 0x03
    528a:	86 17       	cp	r24, r22
    528c:	97 07       	cpc	r25, r23
    528e:	58 f4       	brcc	.+22     	; 0x52a6 <_ZN6String7reserveEj+0x2e>
    5290:	ce 01       	movw	r24, r28
    5292:	d9 df       	rcall	.-78     	; 0x5246 <_ZN6String12changeBufferEj>
    5294:	88 23       	and	r24, r24
    5296:	41 f0       	breq	.+16     	; 0x52a8 <_ZN6String7reserveEj+0x30>
    5298:	8c 81       	ldd	r24, Y+4	; 0x04
    529a:	9d 81       	ldd	r25, Y+5	; 0x05
    529c:	89 2b       	or	r24, r25
    529e:	19 f4       	brne	.+6      	; 0x52a6 <_ZN6String7reserveEj+0x2e>
    52a0:	e8 81       	ld	r30, Y
    52a2:	f9 81       	ldd	r31, Y+1	; 0x01
    52a4:	10 82       	st	Z, r1
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	df 91       	pop	r29
    52aa:	cf 91       	pop	r28
    52ac:	08 95       	ret

000052ae <_ZN6String4copyEPKcj>:
    52ae:	ef 92       	push	r14
    52b0:	ff 92       	push	r15
    52b2:	0f 93       	push	r16
    52b4:	1f 93       	push	r17
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	ec 01       	movw	r28, r24
    52bc:	7b 01       	movw	r14, r22
    52be:	8a 01       	movw	r16, r20
    52c0:	ba 01       	movw	r22, r20
    52c2:	da df       	rcall	.-76     	; 0x5278 <_ZN6String7reserveEj>
    52c4:	81 11       	cpse	r24, r1
    52c6:	03 c0       	rjmp	.+6      	; 0x52ce <_ZN6String4copyEPKcj+0x20>
    52c8:	ce 01       	movw	r24, r28
    52ca:	ac df       	rcall	.-168    	; 0x5224 <_ZN6String10invalidateEv>
    52cc:	06 c0       	rjmp	.+12     	; 0x52da <_ZN6String4copyEPKcj+0x2c>
    52ce:	1d 83       	std	Y+5, r17	; 0x05
    52d0:	0c 83       	std	Y+4, r16	; 0x04
    52d2:	b7 01       	movw	r22, r14
    52d4:	88 81       	ld	r24, Y
    52d6:	99 81       	ldd	r25, Y+1	; 0x01
    52d8:	de d6       	rcall	.+3516   	; 0x6096 <strcpy>
    52da:	ce 01       	movw	r24, r28
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	ff 90       	pop	r15
    52e6:	ef 90       	pop	r14
    52e8:	08 95       	ret

000052ea <_ZN6StringC1EPKc>:
    52ea:	fc 01       	movw	r30, r24
    52ec:	11 82       	std	Z+1, r1	; 0x01
    52ee:	10 82       	st	Z, r1
    52f0:	13 82       	std	Z+3, r1	; 0x03
    52f2:	12 82       	std	Z+2, r1	; 0x02
    52f4:	15 82       	std	Z+5, r1	; 0x05
    52f6:	14 82       	std	Z+4, r1	; 0x04
    52f8:	61 15       	cp	r22, r1
    52fa:	71 05       	cpc	r23, r1
    52fc:	49 f0       	breq	.+18     	; 0x5310 <_ZN6StringC1EPKc+0x26>
    52fe:	fb 01       	movw	r30, r22
    5300:	01 90       	ld	r0, Z+
    5302:	00 20       	and	r0, r0
    5304:	e9 f7       	brne	.-6      	; 0x5300 <_ZN6StringC1EPKc+0x16>
    5306:	31 97       	sbiw	r30, 0x01	; 1
    5308:	af 01       	movw	r20, r30
    530a:	46 1b       	sub	r20, r22
    530c:	57 0b       	sbc	r21, r23
    530e:	cf cf       	rjmp	.-98     	; 0x52ae <_ZN6String4copyEPKcj>
    5310:	08 95       	ret

00005312 <_ZN6StringaSERKS_>:
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	ec 01       	movw	r28, r24
    5318:	fb 01       	movw	r30, r22
    531a:	86 17       	cp	r24, r22
    531c:	97 07       	cpc	r25, r23
    531e:	51 f0       	breq	.+20     	; 0x5334 <_ZN6StringaSERKS_+0x22>
    5320:	60 81       	ld	r22, Z
    5322:	71 81       	ldd	r23, Z+1	; 0x01
    5324:	61 15       	cp	r22, r1
    5326:	71 05       	cpc	r23, r1
    5328:	21 f0       	breq	.+8      	; 0x5332 <_ZN6StringaSERKS_+0x20>
    532a:	44 81       	ldd	r20, Z+4	; 0x04
    532c:	55 81       	ldd	r21, Z+5	; 0x05
    532e:	bf df       	rcall	.-130    	; 0x52ae <_ZN6String4copyEPKcj>
    5330:	01 c0       	rjmp	.+2      	; 0x5334 <_ZN6StringaSERKS_+0x22>
    5332:	78 df       	rcall	.-272    	; 0x5224 <_ZN6String10invalidateEv>
    5334:	ce 01       	movw	r24, r28
    5336:	df 91       	pop	r29
    5338:	cf 91       	pop	r28
    533a:	08 95       	ret

0000533c <_ZN6StringC1ERKS_>:
    533c:	fc 01       	movw	r30, r24
    533e:	11 82       	std	Z+1, r1	; 0x01
    5340:	10 82       	st	Z, r1
    5342:	13 82       	std	Z+3, r1	; 0x03
    5344:	12 82       	std	Z+2, r1	; 0x02
    5346:	15 82       	std	Z+5, r1	; 0x05
    5348:	14 82       	std	Z+4, r1	; 0x04
    534a:	e3 cf       	rjmp	.-58     	; 0x5312 <_ZN6StringaSERKS_>

0000534c <_ZN6StringaSEPKc>:
    534c:	cf 93       	push	r28
    534e:	df 93       	push	r29
    5350:	ec 01       	movw	r28, r24
    5352:	61 15       	cp	r22, r1
    5354:	71 05       	cpc	r23, r1
    5356:	51 f0       	breq	.+20     	; 0x536c <_ZN6StringaSEPKc+0x20>
    5358:	fb 01       	movw	r30, r22
    535a:	01 90       	ld	r0, Z+
    535c:	00 20       	and	r0, r0
    535e:	e9 f7       	brne	.-6      	; 0x535a <_ZN6StringaSEPKc+0xe>
    5360:	31 97       	sbiw	r30, 0x01	; 1
    5362:	af 01       	movw	r20, r30
    5364:	46 1b       	sub	r20, r22
    5366:	57 0b       	sbc	r21, r23
    5368:	a2 df       	rcall	.-188    	; 0x52ae <_ZN6String4copyEPKcj>
    536a:	01 c0       	rjmp	.+2      	; 0x536e <_ZN6StringaSEPKc+0x22>
    536c:	5b df       	rcall	.-330    	; 0x5224 <_ZN6String10invalidateEv>
    536e:	ce 01       	movw	r24, r28
    5370:	df 91       	pop	r29
    5372:	cf 91       	pop	r28
    5374:	08 95       	ret

00005376 <_ZN6StringC1Eih>:
    5376:	0f 93       	push	r16
    5378:	1f 93       	push	r17
    537a:	cf 93       	push	r28
    537c:	df 93       	push	r29
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	62 97       	sbiw	r28, 0x12	; 18
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	f8 94       	cli
    5388:	de bf       	out	0x3e, r29	; 62
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	cd bf       	out	0x3d, r28	; 61
    538e:	8c 01       	movw	r16, r24
    5390:	cb 01       	movw	r24, r22
    5392:	f8 01       	movw	r30, r16
    5394:	11 82       	std	Z+1, r1	; 0x01
    5396:	10 82       	st	Z, r1
    5398:	13 82       	std	Z+3, r1	; 0x03
    539a:	12 82       	std	Z+2, r1	; 0x02
    539c:	15 82       	std	Z+5, r1	; 0x05
    539e:	14 82       	std	Z+4, r1	; 0x04
    53a0:	50 e0       	ldi	r21, 0x00	; 0
    53a2:	be 01       	movw	r22, r28
    53a4:	6f 5f       	subi	r22, 0xFF	; 255
    53a6:	7f 4f       	sbci	r23, 0xFF	; 255
    53a8:	8b d6       	rcall	.+3350   	; 0x60c0 <itoa>
    53aa:	be 01       	movw	r22, r28
    53ac:	6f 5f       	subi	r22, 0xFF	; 255
    53ae:	7f 4f       	sbci	r23, 0xFF	; 255
    53b0:	c8 01       	movw	r24, r16
    53b2:	cc df       	rcall	.-104    	; 0x534c <_ZN6StringaSEPKc>
    53b4:	62 96       	adiw	r28, 0x12	; 18
    53b6:	0f b6       	in	r0, 0x3f	; 63
    53b8:	f8 94       	cli
    53ba:	de bf       	out	0x3e, r29	; 62
    53bc:	0f be       	out	0x3f, r0	; 63
    53be:	cd bf       	out	0x3d, r28	; 61
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	1f 91       	pop	r17
    53c6:	0f 91       	pop	r16
    53c8:	08 95       	ret

000053ca <_ZN6StringC1Elh>:
    53ca:	0f 93       	push	r16
    53cc:	1f 93       	push	r17
    53ce:	cf 93       	push	r28
    53d0:	df 93       	push	r29
    53d2:	cd b7       	in	r28, 0x3d	; 61
    53d4:	de b7       	in	r29, 0x3e	; 62
    53d6:	a2 97       	sbiw	r28, 0x22	; 34
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	8c 01       	movw	r16, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	ba 01       	movw	r22, r20
    53e8:	f8 01       	movw	r30, r16
    53ea:	11 82       	std	Z+1, r1	; 0x01
    53ec:	10 82       	st	Z, r1
    53ee:	13 82       	std	Z+3, r1	; 0x03
    53f0:	12 82       	std	Z+2, r1	; 0x02
    53f2:	15 82       	std	Z+5, r1	; 0x05
    53f4:	14 82       	std	Z+4, r1	; 0x04
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	ae 01       	movw	r20, r28
    53fa:	4f 5f       	subi	r20, 0xFF	; 255
    53fc:	5f 4f       	sbci	r21, 0xFF	; 255
    53fe:	74 d6       	rcall	.+3304   	; 0x60e8 <ltoa>
    5400:	be 01       	movw	r22, r28
    5402:	6f 5f       	subi	r22, 0xFF	; 255
    5404:	7f 4f       	sbci	r23, 0xFF	; 255
    5406:	c8 01       	movw	r24, r16
    5408:	a1 df       	rcall	.-190    	; 0x534c <_ZN6StringaSEPKc>
    540a:	a2 96       	adiw	r28, 0x22	; 34
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	f8 94       	cli
    5410:	de bf       	out	0x3e, r29	; 62
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	cd bf       	out	0x3d, r28	; 61
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	08 95       	ret

00005420 <_ZN6StringC1Efh>:
    5420:	ef 92       	push	r14
    5422:	ff 92       	push	r15
    5424:	0f 93       	push	r16
    5426:	1f 93       	push	r17
    5428:	cf 93       	push	r28
    542a:	df 93       	push	r29
    542c:	cd b7       	in	r28, 0x3d	; 61
    542e:	de b7       	in	r29, 0x3e	; 62
    5430:	a1 97       	sbiw	r28, 0x21	; 33
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	f8 94       	cli
    5436:	de bf       	out	0x3e, r29	; 62
    5438:	0f be       	out	0x3f, r0	; 63
    543a:	cd bf       	out	0x3d, r28	; 61
    543c:	7c 01       	movw	r14, r24
    543e:	cb 01       	movw	r24, r22
    5440:	ba 01       	movw	r22, r20
    5442:	f7 01       	movw	r30, r14
    5444:	11 82       	std	Z+1, r1	; 0x01
    5446:	10 82       	st	Z, r1
    5448:	13 82       	std	Z+3, r1	; 0x03
    544a:	12 82       	std	Z+2, r1	; 0x02
    544c:	15 82       	std	Z+5, r1	; 0x05
    544e:	14 82       	std	Z+4, r1	; 0x04
    5450:	42 e0       	ldi	r20, 0x02	; 2
    5452:	42 0f       	add	r20, r18
    5454:	8e 01       	movw	r16, r28
    5456:	0f 5f       	subi	r16, 0xFF	; 255
    5458:	1f 4f       	sbci	r17, 0xFF	; 255
    545a:	59 d2       	rcall	.+1202   	; 0x590e <dtostrf>
    545c:	bc 01       	movw	r22, r24
    545e:	c7 01       	movw	r24, r14
    5460:	75 df       	rcall	.-278    	; 0x534c <_ZN6StringaSEPKc>
    5462:	a1 96       	adiw	r28, 0x21	; 33
    5464:	0f b6       	in	r0, 0x3f	; 63
    5466:	f8 94       	cli
    5468:	de bf       	out	0x3e, r29	; 62
    546a:	0f be       	out	0x3f, r0	; 63
    546c:	cd bf       	out	0x3d, r28	; 61
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	ff 90       	pop	r15
    5478:	ef 90       	pop	r14
    547a:	08 95       	ret

0000547c <_ZN6StringC1Edh>:
    547c:	ef 92       	push	r14
    547e:	ff 92       	push	r15
    5480:	0f 93       	push	r16
    5482:	1f 93       	push	r17
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	a1 97       	sbiw	r28, 0x21	; 33
    548e:	0f b6       	in	r0, 0x3f	; 63
    5490:	f8 94       	cli
    5492:	de bf       	out	0x3e, r29	; 62
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	cd bf       	out	0x3d, r28	; 61
    5498:	7c 01       	movw	r14, r24
    549a:	cb 01       	movw	r24, r22
    549c:	ba 01       	movw	r22, r20
    549e:	f7 01       	movw	r30, r14
    54a0:	11 82       	std	Z+1, r1	; 0x01
    54a2:	10 82       	st	Z, r1
    54a4:	13 82       	std	Z+3, r1	; 0x03
    54a6:	12 82       	std	Z+2, r1	; 0x02
    54a8:	15 82       	std	Z+5, r1	; 0x05
    54aa:	14 82       	std	Z+4, r1	; 0x04
    54ac:	42 e0       	ldi	r20, 0x02	; 2
    54ae:	42 0f       	add	r20, r18
    54b0:	8e 01       	movw	r16, r28
    54b2:	0f 5f       	subi	r16, 0xFF	; 255
    54b4:	1f 4f       	sbci	r17, 0xFF	; 255
    54b6:	2b d2       	rcall	.+1110   	; 0x590e <dtostrf>
    54b8:	bc 01       	movw	r22, r24
    54ba:	c7 01       	movw	r24, r14
    54bc:	47 df       	rcall	.-370    	; 0x534c <_ZN6StringaSEPKc>
    54be:	a1 96       	adiw	r28, 0x21	; 33
    54c0:	0f b6       	in	r0, 0x3f	; 63
    54c2:	f8 94       	cli
    54c4:	de bf       	out	0x3e, r29	; 62
    54c6:	0f be       	out	0x3f, r0	; 63
    54c8:	cd bf       	out	0x3d, r28	; 61
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	1f 91       	pop	r17
    54d0:	0f 91       	pop	r16
    54d2:	ff 90       	pop	r15
    54d4:	ef 90       	pop	r14
    54d6:	08 95       	ret

000054d8 <_ZN6String6concatEPKcj>:
    54d8:	ef 92       	push	r14
    54da:	ff 92       	push	r15
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	fc 01       	movw	r30, r24
    54e6:	24 81       	ldd	r18, Z+4	; 0x04
    54e8:	35 81       	ldd	r19, Z+5	; 0x05
    54ea:	61 15       	cp	r22, r1
    54ec:	71 05       	cpc	r23, r1
    54ee:	11 f4       	brne	.+4      	; 0x54f4 <_ZN6String6concatEPKcj+0x1c>
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	17 c0       	rjmp	.+46     	; 0x5522 <_ZN6String6concatEPKcj+0x4a>
    54f4:	41 15       	cp	r20, r1
    54f6:	51 05       	cpc	r21, r1
    54f8:	99 f0       	breq	.+38     	; 0x5520 <_ZN6String6concatEPKcj+0x48>
    54fa:	7b 01       	movw	r14, r22
    54fc:	ec 01       	movw	r28, r24
    54fe:	8a 01       	movw	r16, r20
    5500:	02 0f       	add	r16, r18
    5502:	13 1f       	adc	r17, r19
    5504:	b8 01       	movw	r22, r16
    5506:	b8 de       	rcall	.-656    	; 0x5278 <_ZN6String7reserveEj>
    5508:	88 23       	and	r24, r24
    550a:	91 f3       	breq	.-28     	; 0x54f0 <_ZN6String6concatEPKcj+0x18>
    550c:	28 81       	ld	r18, Y
    550e:	39 81       	ldd	r19, Y+1	; 0x01
    5510:	8c 81       	ldd	r24, Y+4	; 0x04
    5512:	9d 81       	ldd	r25, Y+5	; 0x05
    5514:	b7 01       	movw	r22, r14
    5516:	82 0f       	add	r24, r18
    5518:	93 1f       	adc	r25, r19
    551a:	bd d5       	rcall	.+2938   	; 0x6096 <strcpy>
    551c:	1d 83       	std	Y+5, r17	; 0x05
    551e:	0c 83       	std	Y+4, r16	; 0x04
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	1f 91       	pop	r17
    5528:	0f 91       	pop	r16
    552a:	ff 90       	pop	r15
    552c:	ef 90       	pop	r14
    552e:	08 95       	ret

00005530 <_ZN6String6concatEPKc>:
    5530:	61 15       	cp	r22, r1
    5532:	71 05       	cpc	r23, r1
    5534:	49 f0       	breq	.+18     	; 0x5548 <_ZN6String6concatEPKc+0x18>
    5536:	fb 01       	movw	r30, r22
    5538:	01 90       	ld	r0, Z+
    553a:	00 20       	and	r0, r0
    553c:	e9 f7       	brne	.-6      	; 0x5538 <_ZN6String6concatEPKc+0x8>
    553e:	31 97       	sbiw	r30, 0x01	; 1
    5540:	af 01       	movw	r20, r30
    5542:	46 1b       	sub	r20, r22
    5544:	57 0b       	sbc	r21, r23
    5546:	c8 cf       	rjmp	.-112    	; 0x54d8 <_ZN6String6concatEPKcj>
    5548:	80 e0       	ldi	r24, 0x00	; 0
    554a:	08 95       	ret

0000554c <_ZN6String6concatEc>:
    554c:	cf 93       	push	r28
    554e:	df 93       	push	r29
    5550:	00 d0       	rcall	.+0      	; 0x5552 <_ZN6String6concatEc+0x6>
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	69 83       	std	Y+1, r22	; 0x01
    5558:	1a 82       	std	Y+2, r1	; 0x02
    555a:	41 e0       	ldi	r20, 0x01	; 1
    555c:	50 e0       	ldi	r21, 0x00	; 0
    555e:	be 01       	movw	r22, r28
    5560:	6f 5f       	subi	r22, 0xFF	; 255
    5562:	7f 4f       	sbci	r23, 0xFF	; 255
    5564:	b9 df       	rcall	.-142    	; 0x54d8 <_ZN6String6concatEPKcj>
    5566:	0f 90       	pop	r0
    5568:	0f 90       	pop	r0
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	08 95       	ret

00005570 <_ZplRK15StringSumHelperRK6String>:
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	ec 01       	movw	r28, r24
    5576:	fb 01       	movw	r30, r22
    5578:	44 81       	ldd	r20, Z+4	; 0x04
    557a:	55 81       	ldd	r21, Z+5	; 0x05
    557c:	60 81       	ld	r22, Z
    557e:	71 81       	ldd	r23, Z+1	; 0x01
    5580:	ab df       	rcall	.-170    	; 0x54d8 <_ZN6String6concatEPKcj>
    5582:	81 11       	cpse	r24, r1
    5584:	02 c0       	rjmp	.+4      	; 0x558a <_ZplRK15StringSumHelperRK6String+0x1a>
    5586:	ce 01       	movw	r24, r28
    5588:	4d de       	rcall	.-870    	; 0x5224 <_ZN6String10invalidateEv>
    558a:	ce 01       	movw	r24, r28
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	08 95       	ret

00005592 <_ZplRK15StringSumHelperPKc>:
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	ec 01       	movw	r28, r24
    5598:	61 15       	cp	r22, r1
    559a:	71 05       	cpc	r23, r1
    559c:	59 f0       	breq	.+22     	; 0x55b4 <_ZplRK15StringSumHelperPKc+0x22>
    559e:	fb 01       	movw	r30, r22
    55a0:	01 90       	ld	r0, Z+
    55a2:	00 20       	and	r0, r0
    55a4:	e9 f7       	brne	.-6      	; 0x55a0 <_ZplRK15StringSumHelperPKc+0xe>
    55a6:	31 97       	sbiw	r30, 0x01	; 1
    55a8:	af 01       	movw	r20, r30
    55aa:	46 1b       	sub	r20, r22
    55ac:	57 0b       	sbc	r21, r23
    55ae:	94 df       	rcall	.-216    	; 0x54d8 <_ZN6String6concatEPKcj>
    55b0:	81 11       	cpse	r24, r1
    55b2:	02 c0       	rjmp	.+4      	; 0x55b8 <_ZplRK15StringSumHelperPKc+0x26>
    55b4:	ce 01       	movw	r24, r28
    55b6:	36 de       	rcall	.-916    	; 0x5224 <_ZN6String10invalidateEv>
    55b8:	ce 01       	movw	r24, r28
    55ba:	df 91       	pop	r29
    55bc:	cf 91       	pop	r28
    55be:	08 95       	ret

000055c0 <_ZNK6String6equalsEPKc>:
    55c0:	fc 01       	movw	r30, r24
    55c2:	24 81       	ldd	r18, Z+4	; 0x04
    55c4:	35 81       	ldd	r19, Z+5	; 0x05
    55c6:	23 2b       	or	r18, r19
    55c8:	31 f4       	brne	.+12     	; 0x55d6 <_ZNK6String6equalsEPKc+0x16>
    55ca:	21 e0       	ldi	r18, 0x01	; 1
    55cc:	61 15       	cp	r22, r1
    55ce:	71 05       	cpc	r23, r1
    55d0:	99 f0       	breq	.+38     	; 0x55f8 <_ZNK6String6equalsEPKc+0x38>
    55d2:	fb 01       	movw	r30, r22
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <_ZNK6String6equalsEPKc+0x26>
    55d6:	fc 01       	movw	r30, r24
    55d8:	80 81       	ld	r24, Z
    55da:	91 81       	ldd	r25, Z+1	; 0x01
    55dc:	61 15       	cp	r22, r1
    55de:	71 05       	cpc	r23, r1
    55e0:	31 f4       	brne	.+12     	; 0x55ee <_ZNK6String6equalsEPKc+0x2e>
    55e2:	21 e0       	ldi	r18, 0x01	; 1
    55e4:	fc 01       	movw	r30, r24
    55e6:	80 81       	ld	r24, Z
    55e8:	88 23       	and	r24, r24
    55ea:	31 f0       	breq	.+12     	; 0x55f8 <_ZNK6String6equalsEPKc+0x38>
    55ec:	04 c0       	rjmp	.+8      	; 0x55f6 <_ZNK6String6equalsEPKc+0x36>
    55ee:	4a d5       	rcall	.+2708   	; 0x6084 <strcmp>
    55f0:	21 e0       	ldi	r18, 0x01	; 1
    55f2:	89 2b       	or	r24, r25
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <_ZNK6String6equalsEPKc+0x38>
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	82 2f       	mov	r24, r18
    55fa:	08 95       	ret

000055fc <_ZNK6String10startsWithERKS_j>:
    55fc:	db 01       	movw	r26, r22
    55fe:	14 96       	adiw	r26, 0x04	; 4
    5600:	ed 91       	ld	r30, X+
    5602:	fc 91       	ld	r31, X
    5604:	15 97       	sbiw	r26, 0x05	; 5
    5606:	dc 01       	movw	r26, r24
    5608:	14 96       	adiw	r26, 0x04	; 4
    560a:	2d 91       	ld	r18, X+
    560c:	3c 91       	ld	r19, X
    560e:	15 97       	sbiw	r26, 0x05	; 5
    5610:	2e 1b       	sub	r18, r30
    5612:	3f 0b       	sbc	r19, r31
    5614:	24 17       	cp	r18, r20
    5616:	35 07       	cpc	r19, r21
    5618:	98 f0       	brcs	.+38     	; 0x5640 <_ZNK6String10startsWithERKS_j+0x44>
    561a:	2d 91       	ld	r18, X+
    561c:	3c 91       	ld	r19, X
    561e:	21 15       	cp	r18, r1
    5620:	31 05       	cpc	r19, r1
    5622:	71 f0       	breq	.+28     	; 0x5640 <_ZNK6String10startsWithERKS_j+0x44>
    5624:	db 01       	movw	r26, r22
    5626:	6d 91       	ld	r22, X+
    5628:	7c 91       	ld	r23, X
    562a:	61 15       	cp	r22, r1
    562c:	71 05       	cpc	r23, r1
    562e:	41 f0       	breq	.+16     	; 0x5640 <_ZNK6String10startsWithERKS_j+0x44>
    5630:	ca 01       	movw	r24, r20
    5632:	af 01       	movw	r20, r30
    5634:	82 0f       	add	r24, r18
    5636:	93 1f       	adc	r25, r19
    5638:	35 d5       	rcall	.+2666   	; 0x60a4 <strncmp>
    563a:	21 e0       	ldi	r18, 0x01	; 1
    563c:	89 2b       	or	r24, r25
    563e:	09 f0       	breq	.+2      	; 0x5642 <_ZNK6String10startsWithERKS_j+0x46>
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	82 2f       	mov	r24, r18
    5644:	08 95       	ret

00005646 <_ZNK6String10startsWithERKS_>:
    5646:	fc 01       	movw	r30, r24
    5648:	44 81       	ldd	r20, Z+4	; 0x04
    564a:	55 81       	ldd	r21, Z+5	; 0x05
    564c:	fb 01       	movw	r30, r22
    564e:	24 81       	ldd	r18, Z+4	; 0x04
    5650:	35 81       	ldd	r19, Z+5	; 0x05
    5652:	42 17       	cp	r20, r18
    5654:	53 07       	cpc	r21, r19
    5656:	18 f0       	brcs	.+6      	; 0x565e <_ZNK6String10startsWithERKS_+0x18>
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	50 e0       	ldi	r21, 0x00	; 0
    565c:	cf cf       	rjmp	.-98     	; 0x55fc <_ZNK6String10startsWithERKS_j>
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	08 95       	ret

00005662 <_ZNK6StringixEj>:
    5662:	fc 01       	movw	r30, r24
    5664:	24 81       	ldd	r18, Z+4	; 0x04
    5666:	35 81       	ldd	r19, Z+5	; 0x05
    5668:	62 17       	cp	r22, r18
    566a:	73 07       	cpc	r23, r19
    566c:	48 f4       	brcc	.+18     	; 0x5680 <_ZNK6StringixEj+0x1e>
    566e:	80 81       	ld	r24, Z
    5670:	91 81       	ldd	r25, Z+1	; 0x01
    5672:	00 97       	sbiw	r24, 0x00	; 0
    5674:	29 f0       	breq	.+10     	; 0x5680 <_ZNK6StringixEj+0x1e>
    5676:	fc 01       	movw	r30, r24
    5678:	e6 0f       	add	r30, r22
    567a:	f7 1f       	adc	r31, r23
    567c:	80 81       	ld	r24, Z
    567e:	08 95       	ret
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	08 95       	ret

00005684 <_ZNK6String6charAtEj>:
    5684:	ee cf       	rjmp	.-36     	; 0x5662 <_ZNK6StringixEj>

00005686 <_ZNK6String9substringEjj>:
    5686:	bf 92       	push	r11
    5688:	cf 92       	push	r12
    568a:	df 92       	push	r13
    568c:	ef 92       	push	r14
    568e:	ff 92       	push	r15
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	7c 01       	movw	r14, r24
    569a:	6b 01       	movw	r12, r22
    569c:	8a 01       	movw	r16, r20
    569e:	e9 01       	movw	r28, r18
    56a0:	24 17       	cp	r18, r20
    56a2:	35 07       	cpc	r19, r21
    56a4:	20 f4       	brcc	.+8      	; 0x56ae <_ZNK6String9substringEjj+0x28>
    56a6:	81 2f       	mov	r24, r17
    56a8:	89 01       	movw	r16, r18
    56aa:	c4 2f       	mov	r28, r20
    56ac:	d8 2f       	mov	r29, r24
    56ae:	61 ec       	ldi	r22, 0xC1	; 193
    56b0:	71 e0       	ldi	r23, 0x01	; 1
    56b2:	c7 01       	movw	r24, r14
    56b4:	1a de       	rcall	.-972    	; 0x52ea <_ZN6StringC1EPKc>
    56b6:	d6 01       	movw	r26, r12
    56b8:	14 96       	adiw	r26, 0x04	; 4
    56ba:	8d 91       	ld	r24, X+
    56bc:	9c 91       	ld	r25, X
    56be:	15 97       	sbiw	r26, 0x05	; 5
    56c0:	08 17       	cp	r16, r24
    56c2:	19 07       	cpc	r17, r25
    56c4:	c8 f4       	brcc	.+50     	; 0x56f8 <_ZNK6String9substringEjj+0x72>
    56c6:	8c 17       	cp	r24, r28
    56c8:	9d 07       	cpc	r25, r29
    56ca:	08 f4       	brcc	.+2      	; 0x56ce <_ZNK6String9substringEjj+0x48>
    56cc:	ec 01       	movw	r28, r24
    56ce:	d6 01       	movw	r26, r12
    56d0:	ed 91       	ld	r30, X+
    56d2:	fc 91       	ld	r31, X
    56d4:	11 97       	sbiw	r26, 0x01	; 1
    56d6:	ec 0f       	add	r30, r28
    56d8:	fd 1f       	adc	r31, r29
    56da:	b0 80       	ld	r11, Z
    56dc:	10 82       	st	Z, r1
    56de:	4d 91       	ld	r20, X+
    56e0:	5c 91       	ld	r21, X
    56e2:	ba 01       	movw	r22, r20
    56e4:	60 0f       	add	r22, r16
    56e6:	71 1f       	adc	r23, r17
    56e8:	c7 01       	movw	r24, r14
    56ea:	30 de       	rcall	.-928    	; 0x534c <_ZN6StringaSEPKc>
    56ec:	d6 01       	movw	r26, r12
    56ee:	ed 91       	ld	r30, X+
    56f0:	fc 91       	ld	r31, X
    56f2:	ec 0f       	add	r30, r28
    56f4:	fd 1f       	adc	r31, r29
    56f6:	b0 82       	st	Z, r11
    56f8:	c7 01       	movw	r24, r14
    56fa:	df 91       	pop	r29
    56fc:	cf 91       	pop	r28
    56fe:	1f 91       	pop	r17
    5700:	0f 91       	pop	r16
    5702:	ff 90       	pop	r15
    5704:	ef 90       	pop	r14
    5706:	df 90       	pop	r13
    5708:	cf 90       	pop	r12
    570a:	bf 90       	pop	r11
    570c:	08 95       	ret

0000570e <_ZN6String4trimEv>:

void String::trim(void)
{
    570e:	af 92       	push	r10
    5710:	bf 92       	push	r11
    5712:	cf 92       	push	r12
    5714:	df 92       	push	r13
    5716:	ef 92       	push	r14
    5718:	ff 92       	push	r15
    571a:	0f 93       	push	r16
    571c:	1f 93       	push	r17
    571e:	cf 93       	push	r28
    5720:	df 93       	push	r29
	if (!buffer || len == 0) return;
    5722:	dc 01       	movw	r26, r24
    5724:	cd 90       	ld	r12, X+
    5726:	dc 90       	ld	r13, X
    5728:	11 97       	sbiw	r26, 0x01	; 1
    572a:	c1 14       	cp	r12, r1
    572c:	d1 04       	cpc	r13, r1
    572e:	d9 f1       	breq	.+118    	; 0x57a6 <_ZN6String4trimEv+0x98>
    5730:	14 96       	adiw	r26, 0x04	; 4
    5732:	cd 91       	ld	r28, X+
    5734:	dc 91       	ld	r29, X
    5736:	15 97       	sbiw	r26, 0x05	; 5
    5738:	20 97       	sbiw	r28, 0x00	; 0
    573a:	a9 f1       	breq	.+106    	; 0x57a6 <_ZN6String4trimEv+0x98>
    573c:	8c 01       	movw	r16, r24
    573e:	56 01       	movw	r10, r12
    5740:	75 01       	movw	r14, r10
    5742:	bf ef       	ldi	r27, 0xFF	; 255
    5744:	ab 1a       	sub	r10, r27
    5746:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    5748:	f7 01       	movw	r30, r14
    574a:	80 81       	ld	r24, Z
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	71 d4       	rcall	.+2274   	; 0x6032 <isspace>
    5750:	89 2b       	or	r24, r25
    5752:	b1 f7       	brne	.-20     	; 0x5740 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    5754:	21 97       	sbiw	r28, 0x01	; 1
    5756:	cc 0d       	add	r28, r12
    5758:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    575a:	88 81       	ld	r24, Y
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	69 d4       	rcall	.+2258   	; 0x6032 <isspace>
    5760:	89 2b       	or	r24, r25
    5762:	89 f4       	brne	.+34     	; 0x5786 <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    5764:	ae 01       	movw	r20, r28
    5766:	4f 5f       	subi	r20, 0xFF	; 255
    5768:	5f 4f       	sbci	r21, 0xFF	; 255
    576a:	4e 19       	sub	r20, r14
    576c:	5f 09       	sbc	r21, r15
    576e:	d8 01       	movw	r26, r16
    5770:	15 96       	adiw	r26, 0x05	; 5
    5772:	5c 93       	st	X, r21
    5774:	4e 93       	st	-X, r20
    5776:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    5778:	ce 14       	cp	r12, r14
    577a:	df 04       	cpc	r13, r15
    577c:	48 f4       	brcc	.+18     	; 0x5790 <_ZN6String4trimEv+0x82>
    577e:	b7 01       	movw	r22, r14
    5780:	c6 01       	movw	r24, r12
    5782:	77 d4       	rcall	.+2286   	; 0x6072 <memcpy>
    5784:	05 c0       	rjmp	.+10     	; 0x5790 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    5786:	ce 15       	cp	r28, r14
    5788:	df 05       	cpc	r29, r15
    578a:	60 f3       	brcs	.-40     	; 0x5764 <_ZN6String4trimEv+0x56>
    578c:	21 97       	sbiw	r28, 0x01	; 1
    578e:	e5 cf       	rjmp	.-54     	; 0x575a <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    5790:	d8 01       	movw	r26, r16
    5792:	ed 91       	ld	r30, X+
    5794:	fc 91       	ld	r31, X
    5796:	11 97       	sbiw	r26, 0x01	; 1
    5798:	14 96       	adiw	r26, 0x04	; 4
    579a:	8d 91       	ld	r24, X+
    579c:	9c 91       	ld	r25, X
    579e:	15 97       	sbiw	r26, 0x05	; 5
    57a0:	e8 0f       	add	r30, r24
    57a2:	f9 1f       	adc	r31, r25
    57a4:	10 82       	st	Z, r1
}
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	ff 90       	pop	r15
    57b0:	ef 90       	pop	r14
    57b2:	df 90       	pop	r13
    57b4:	cf 90       	pop	r12
    57b6:	bf 90       	pop	r11
    57b8:	af 90       	pop	r10
    57ba:	08 95       	ret

000057bc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    57bc:	fc 01       	movw	r30, r24
    57be:	80 81       	ld	r24, Z
    57c0:	91 81       	ldd	r25, Z+1	; 0x01
    57c2:	00 97       	sbiw	r24, 0x00	; 0
    57c4:	09 f0       	breq	.+2      	; 0x57c8 <_ZNK6String5toIntEv+0xc>
    57c6:	0f c4       	rjmp	.+2078   	; 0x5fe6 <atol>
	return 0;
}
    57c8:	60 e0       	ldi	r22, 0x00	; 0
    57ca:	70 e0       	ldi	r23, 0x00	; 0
    57cc:	cb 01       	movw	r24, r22
    57ce:	08 95       	ret

000057d0 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    57d0:	fc 01       	movw	r30, r24
    57d2:	80 81       	ld	r24, Z
    57d4:	91 81       	ldd	r25, Z+1	; 0x01
    57d6:	00 97       	sbiw	r24, 0x00	; 0
    57d8:	09 f0       	breq	.+2      	; 0x57dc <_ZNK6String7toFloatEv+0xc>
    57da:	02 c4       	rjmp	.+2052   	; 0x5fe0 <atof>
	return 0;
}
    57dc:	60 e0       	ldi	r22, 0x00	; 0
    57de:	70 e0       	ldi	r23, 0x00	; 0
    57e0:	cb 01       	movw	r24, r22
    57e2:	08 95       	ret

000057e4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    57e4:	08 95       	ret

000057e6 <__udivmodsi4>:
    57e6:	a1 e2       	ldi	r26, 0x21	; 33
    57e8:	1a 2e       	mov	r1, r26
    57ea:	aa 1b       	sub	r26, r26
    57ec:	bb 1b       	sub	r27, r27
    57ee:	fd 01       	movw	r30, r26
    57f0:	0d c0       	rjmp	.+26     	; 0x580c <__udivmodsi4_ep>

000057f2 <__udivmodsi4_loop>:
    57f2:	aa 1f       	adc	r26, r26
    57f4:	bb 1f       	adc	r27, r27
    57f6:	ee 1f       	adc	r30, r30
    57f8:	ff 1f       	adc	r31, r31
    57fa:	a2 17       	cp	r26, r18
    57fc:	b3 07       	cpc	r27, r19
    57fe:	e4 07       	cpc	r30, r20
    5800:	f5 07       	cpc	r31, r21
    5802:	20 f0       	brcs	.+8      	; 0x580c <__udivmodsi4_ep>
    5804:	a2 1b       	sub	r26, r18
    5806:	b3 0b       	sbc	r27, r19
    5808:	e4 0b       	sbc	r30, r20
    580a:	f5 0b       	sbc	r31, r21

0000580c <__udivmodsi4_ep>:
    580c:	66 1f       	adc	r22, r22
    580e:	77 1f       	adc	r23, r23
    5810:	88 1f       	adc	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	1a 94       	dec	r1
    5816:	69 f7       	brne	.-38     	; 0x57f2 <__udivmodsi4_loop>
    5818:	60 95       	com	r22
    581a:	70 95       	com	r23
    581c:	80 95       	com	r24
    581e:	90 95       	com	r25
    5820:	9b 01       	movw	r18, r22
    5822:	ac 01       	movw	r20, r24
    5824:	bd 01       	movw	r22, r26
    5826:	cf 01       	movw	r24, r30
    5828:	08 95       	ret

0000582a <__divmodsi4>:
    582a:	05 2e       	mov	r0, r21
    582c:	97 fb       	bst	r25, 7
    582e:	16 f4       	brtc	.+4      	; 0x5834 <__divmodsi4+0xa>
    5830:	00 94       	com	r0
    5832:	0f d0       	rcall	.+30     	; 0x5852 <__negsi2>
    5834:	57 fd       	sbrc	r21, 7
    5836:	05 d0       	rcall	.+10     	; 0x5842 <__divmodsi4_neg2>
    5838:	d6 df       	rcall	.-84     	; 0x57e6 <__udivmodsi4>
    583a:	07 fc       	sbrc	r0, 7
    583c:	02 d0       	rcall	.+4      	; 0x5842 <__divmodsi4_neg2>
    583e:	46 f4       	brtc	.+16     	; 0x5850 <__divmodsi4_exit>
    5840:	08 c0       	rjmp	.+16     	; 0x5852 <__negsi2>

00005842 <__divmodsi4_neg2>:
    5842:	50 95       	com	r21
    5844:	40 95       	com	r20
    5846:	30 95       	com	r19
    5848:	21 95       	neg	r18
    584a:	3f 4f       	sbci	r19, 0xFF	; 255
    584c:	4f 4f       	sbci	r20, 0xFF	; 255
    584e:	5f 4f       	sbci	r21, 0xFF	; 255

00005850 <__divmodsi4_exit>:
    5850:	08 95       	ret

00005852 <__negsi2>:
    5852:	90 95       	com	r25
    5854:	80 95       	com	r24
    5856:	70 95       	com	r23
    5858:	61 95       	neg	r22
    585a:	7f 4f       	sbci	r23, 0xFF	; 255
    585c:	8f 4f       	sbci	r24, 0xFF	; 255
    585e:	9f 4f       	sbci	r25, 0xFF	; 255
    5860:	08 95       	ret

00005862 <__tablejump2__>:
    5862:	ee 0f       	add	r30, r30
    5864:	ff 1f       	adc	r31, r31
    5866:	05 90       	lpm	r0, Z+
    5868:	f4 91       	lpm	r31, Z
    586a:	e0 2d       	mov	r30, r0
    586c:	09 94       	ijmp

0000586e <__muluhisi3>:
    586e:	40 d0       	rcall	.+128    	; 0x58f0 <__umulhisi3>
    5870:	a5 9f       	mul	r26, r21
    5872:	90 0d       	add	r25, r0
    5874:	b4 9f       	mul	r27, r20
    5876:	90 0d       	add	r25, r0
    5878:	a4 9f       	mul	r26, r20
    587a:	80 0d       	add	r24, r0
    587c:	91 1d       	adc	r25, r1
    587e:	11 24       	eor	r1, r1
    5880:	08 95       	ret

00005882 <__prologue_saves__>:
    5882:	2f 92       	push	r2
    5884:	3f 92       	push	r3
    5886:	4f 92       	push	r4
    5888:	5f 92       	push	r5
    588a:	6f 92       	push	r6
    588c:	7f 92       	push	r7
    588e:	8f 92       	push	r8
    5890:	9f 92       	push	r9
    5892:	af 92       	push	r10
    5894:	bf 92       	push	r11
    5896:	cf 92       	push	r12
    5898:	df 92       	push	r13
    589a:	ef 92       	push	r14
    589c:	ff 92       	push	r15
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	cd b7       	in	r28, 0x3d	; 61
    58a8:	de b7       	in	r29, 0x3e	; 62
    58aa:	ca 1b       	sub	r28, r26
    58ac:	db 0b       	sbc	r29, r27
    58ae:	0f b6       	in	r0, 0x3f	; 63
    58b0:	f8 94       	cli
    58b2:	de bf       	out	0x3e, r29	; 62
    58b4:	0f be       	out	0x3f, r0	; 63
    58b6:	cd bf       	out	0x3d, r28	; 61
    58b8:	09 94       	ijmp

000058ba <__epilogue_restores__>:
    58ba:	2a 88       	ldd	r2, Y+18	; 0x12
    58bc:	39 88       	ldd	r3, Y+17	; 0x11
    58be:	48 88       	ldd	r4, Y+16	; 0x10
    58c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    58c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    58c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    58c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    58c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    58ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    58cc:	b9 84       	ldd	r11, Y+9	; 0x09
    58ce:	c8 84       	ldd	r12, Y+8	; 0x08
    58d0:	df 80       	ldd	r13, Y+7	; 0x07
    58d2:	ee 80       	ldd	r14, Y+6	; 0x06
    58d4:	fd 80       	ldd	r15, Y+5	; 0x05
    58d6:	0c 81       	ldd	r16, Y+4	; 0x04
    58d8:	1b 81       	ldd	r17, Y+3	; 0x03
    58da:	aa 81       	ldd	r26, Y+2	; 0x02
    58dc:	b9 81       	ldd	r27, Y+1	; 0x01
    58de:	ce 0f       	add	r28, r30
    58e0:	d1 1d       	adc	r29, r1
    58e2:	0f b6       	in	r0, 0x3f	; 63
    58e4:	f8 94       	cli
    58e6:	de bf       	out	0x3e, r29	; 62
    58e8:	0f be       	out	0x3f, r0	; 63
    58ea:	cd bf       	out	0x3d, r28	; 61
    58ec:	ed 01       	movw	r28, r26
    58ee:	08 95       	ret

000058f0 <__umulhisi3>:
    58f0:	a2 9f       	mul	r26, r18
    58f2:	b0 01       	movw	r22, r0
    58f4:	b3 9f       	mul	r27, r19
    58f6:	c0 01       	movw	r24, r0
    58f8:	a3 9f       	mul	r26, r19
    58fa:	70 0d       	add	r23, r0
    58fc:	81 1d       	adc	r24, r1
    58fe:	11 24       	eor	r1, r1
    5900:	91 1d       	adc	r25, r1
    5902:	b2 9f       	mul	r27, r18
    5904:	70 0d       	add	r23, r0
    5906:	81 1d       	adc	r24, r1
    5908:	11 24       	eor	r1, r1
    590a:	91 1d       	adc	r25, r1
    590c:	08 95       	ret

0000590e <dtostrf>:
    590e:	ef 92       	push	r14
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
    5918:	e8 01       	movw	r28, r16
    591a:	47 fd       	sbrc	r20, 7
    591c:	02 c0       	rjmp	.+4      	; 0x5922 <dtostrf+0x14>
    591e:	34 e0       	ldi	r19, 0x04	; 4
    5920:	01 c0       	rjmp	.+2      	; 0x5924 <dtostrf+0x16>
    5922:	34 e1       	ldi	r19, 0x14	; 20
    5924:	e4 2f       	mov	r30, r20
    5926:	44 0f       	add	r20, r20
    5928:	ff 0b       	sbc	r31, r31
    592a:	f7 ff       	sbrs	r31, 7
    592c:	03 c0       	rjmp	.+6      	; 0x5934 <dtostrf+0x26>
    592e:	f1 95       	neg	r31
    5930:	e1 95       	neg	r30
    5932:	f1 09       	sbc	r31, r1
    5934:	e3 2e       	mov	r14, r19
    5936:	02 2f       	mov	r16, r18
    5938:	2e 2f       	mov	r18, r30
    593a:	ae 01       	movw	r20, r28
    593c:	3c d4       	rcall	.+2168   	; 0x61b6 <dtoa_prf>
    593e:	ce 01       	movw	r24, r28
    5940:	df 91       	pop	r29
    5942:	cf 91       	pop	r28
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	ef 90       	pop	r14
    594a:	08 95       	ret

0000594c <malloc>:
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	82 30       	cpi	r24, 0x02	; 2
    5952:	91 05       	cpc	r25, r1
    5954:	10 f4       	brcc	.+4      	; 0x595a <malloc+0xe>
    5956:	82 e0       	ldi	r24, 0x02	; 2
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <__flp>
    595e:	f0 91 d6 05 	lds	r31, 0x05D6	; 0x8005d6 <__flp+0x1>
    5962:	20 e0       	ldi	r18, 0x00	; 0
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	c0 e0       	ldi	r28, 0x00	; 0
    5968:	d0 e0       	ldi	r29, 0x00	; 0
    596a:	30 97       	sbiw	r30, 0x00	; 0
    596c:	11 f1       	breq	.+68     	; 0x59b2 <malloc+0x66>
    596e:	40 81       	ld	r20, Z
    5970:	51 81       	ldd	r21, Z+1	; 0x01
    5972:	48 17       	cp	r20, r24
    5974:	59 07       	cpc	r21, r25
    5976:	c0 f0       	brcs	.+48     	; 0x59a8 <malloc+0x5c>
    5978:	48 17       	cp	r20, r24
    597a:	59 07       	cpc	r21, r25
    597c:	61 f4       	brne	.+24     	; 0x5996 <malloc+0x4a>
    597e:	82 81       	ldd	r24, Z+2	; 0x02
    5980:	93 81       	ldd	r25, Z+3	; 0x03
    5982:	20 97       	sbiw	r28, 0x00	; 0
    5984:	19 f0       	breq	.+6      	; 0x598c <malloc+0x40>
    5986:	9b 83       	std	Y+3, r25	; 0x03
    5988:	8a 83       	std	Y+2, r24	; 0x02
    598a:	2b c0       	rjmp	.+86     	; 0x59e2 <malloc+0x96>
    598c:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <__flp+0x1>
    5990:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <__flp>
    5994:	26 c0       	rjmp	.+76     	; 0x59e2 <malloc+0x96>
    5996:	21 15       	cp	r18, r1
    5998:	31 05       	cpc	r19, r1
    599a:	19 f0       	breq	.+6      	; 0x59a2 <malloc+0x56>
    599c:	42 17       	cp	r20, r18
    599e:	53 07       	cpc	r21, r19
    59a0:	18 f4       	brcc	.+6      	; 0x59a8 <malloc+0x5c>
    59a2:	9a 01       	movw	r18, r20
    59a4:	be 01       	movw	r22, r28
    59a6:	df 01       	movw	r26, r30
    59a8:	ef 01       	movw	r28, r30
    59aa:	02 80       	ldd	r0, Z+2	; 0x02
    59ac:	f3 81       	ldd	r31, Z+3	; 0x03
    59ae:	e0 2d       	mov	r30, r0
    59b0:	dc cf       	rjmp	.-72     	; 0x596a <malloc+0x1e>
    59b2:	21 15       	cp	r18, r1
    59b4:	31 05       	cpc	r19, r1
    59b6:	09 f1       	breq	.+66     	; 0x59fa <malloc+0xae>
    59b8:	28 1b       	sub	r18, r24
    59ba:	39 0b       	sbc	r19, r25
    59bc:	24 30       	cpi	r18, 0x04	; 4
    59be:	31 05       	cpc	r19, r1
    59c0:	90 f4       	brcc	.+36     	; 0x59e6 <malloc+0x9a>
    59c2:	12 96       	adiw	r26, 0x02	; 2
    59c4:	8d 91       	ld	r24, X+
    59c6:	9c 91       	ld	r25, X
    59c8:	13 97       	sbiw	r26, 0x03	; 3
    59ca:	61 15       	cp	r22, r1
    59cc:	71 05       	cpc	r23, r1
    59ce:	21 f0       	breq	.+8      	; 0x59d8 <malloc+0x8c>
    59d0:	fb 01       	movw	r30, r22
    59d2:	93 83       	std	Z+3, r25	; 0x03
    59d4:	82 83       	std	Z+2, r24	; 0x02
    59d6:	04 c0       	rjmp	.+8      	; 0x59e0 <malloc+0x94>
    59d8:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <__flp+0x1>
    59dc:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <__flp>
    59e0:	fd 01       	movw	r30, r26
    59e2:	32 96       	adiw	r30, 0x02	; 2
    59e4:	44 c0       	rjmp	.+136    	; 0x5a6e <malloc+0x122>
    59e6:	fd 01       	movw	r30, r26
    59e8:	e2 0f       	add	r30, r18
    59ea:	f3 1f       	adc	r31, r19
    59ec:	81 93       	st	Z+, r24
    59ee:	91 93       	st	Z+, r25
    59f0:	22 50       	subi	r18, 0x02	; 2
    59f2:	31 09       	sbc	r19, r1
    59f4:	2d 93       	st	X+, r18
    59f6:	3c 93       	st	X, r19
    59f8:	3a c0       	rjmp	.+116    	; 0x5a6e <malloc+0x122>
    59fa:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    59fe:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5a02:	23 2b       	or	r18, r19
    5a04:	41 f4       	brne	.+16     	; 0x5a16 <malloc+0xca>
    5a06:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5a0a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5a0e:	30 93 d4 05 	sts	0x05D4, r19	; 0x8005d4 <__brkval+0x1>
    5a12:	20 93 d3 05 	sts	0x05D3, r18	; 0x8005d3 <__brkval>
    5a16:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5a1a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5a1e:	21 15       	cp	r18, r1
    5a20:	31 05       	cpc	r19, r1
    5a22:	41 f4       	brne	.+16     	; 0x5a34 <malloc+0xe8>
    5a24:	2d b7       	in	r18, 0x3d	; 61
    5a26:	3e b7       	in	r19, 0x3e	; 62
    5a28:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5a2c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5a30:	24 1b       	sub	r18, r20
    5a32:	35 0b       	sbc	r19, r21
    5a34:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <__brkval>
    5a38:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5a3c:	e2 17       	cp	r30, r18
    5a3e:	f3 07       	cpc	r31, r19
    5a40:	a0 f4       	brcc	.+40     	; 0x5a6a <malloc+0x11e>
    5a42:	2e 1b       	sub	r18, r30
    5a44:	3f 0b       	sbc	r19, r31
    5a46:	28 17       	cp	r18, r24
    5a48:	39 07       	cpc	r19, r25
    5a4a:	78 f0       	brcs	.+30     	; 0x5a6a <malloc+0x11e>
    5a4c:	ac 01       	movw	r20, r24
    5a4e:	4e 5f       	subi	r20, 0xFE	; 254
    5a50:	5f 4f       	sbci	r21, 0xFF	; 255
    5a52:	24 17       	cp	r18, r20
    5a54:	35 07       	cpc	r19, r21
    5a56:	48 f0       	brcs	.+18     	; 0x5a6a <malloc+0x11e>
    5a58:	4e 0f       	add	r20, r30
    5a5a:	5f 1f       	adc	r21, r31
    5a5c:	50 93 d4 05 	sts	0x05D4, r21	; 0x8005d4 <__brkval+0x1>
    5a60:	40 93 d3 05 	sts	0x05D3, r20	; 0x8005d3 <__brkval>
    5a64:	81 93       	st	Z+, r24
    5a66:	91 93       	st	Z+, r25
    5a68:	02 c0       	rjmp	.+4      	; 0x5a6e <malloc+0x122>
    5a6a:	e0 e0       	ldi	r30, 0x00	; 0
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	cf 01       	movw	r24, r30
    5a70:	df 91       	pop	r29
    5a72:	cf 91       	pop	r28
    5a74:	08 95       	ret

00005a76 <free>:
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	00 97       	sbiw	r24, 0x00	; 0
    5a80:	09 f4       	brne	.+2      	; 0x5a84 <free+0xe>
    5a82:	8c c0       	rjmp	.+280    	; 0x5b9c <free+0x126>
    5a84:	fc 01       	movw	r30, r24
    5a86:	32 97       	sbiw	r30, 0x02	; 2
    5a88:	13 82       	std	Z+3, r1	; 0x03
    5a8a:	12 82       	std	Z+2, r1	; 0x02
    5a8c:	00 91 d5 05 	lds	r16, 0x05D5	; 0x8005d5 <__flp>
    5a90:	10 91 d6 05 	lds	r17, 0x05D6	; 0x8005d6 <__flp+0x1>
    5a94:	01 15       	cp	r16, r1
    5a96:	11 05       	cpc	r17, r1
    5a98:	81 f4       	brne	.+32     	; 0x5aba <free+0x44>
    5a9a:	20 81       	ld	r18, Z
    5a9c:	31 81       	ldd	r19, Z+1	; 0x01
    5a9e:	82 0f       	add	r24, r18
    5aa0:	93 1f       	adc	r25, r19
    5aa2:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    5aa6:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5aaa:	28 17       	cp	r18, r24
    5aac:	39 07       	cpc	r19, r25
    5aae:	79 f5       	brne	.+94     	; 0x5b0e <free+0x98>
    5ab0:	f0 93 d4 05 	sts	0x05D4, r31	; 0x8005d4 <__brkval+0x1>
    5ab4:	e0 93 d3 05 	sts	0x05D3, r30	; 0x8005d3 <__brkval>
    5ab8:	71 c0       	rjmp	.+226    	; 0x5b9c <free+0x126>
    5aba:	d8 01       	movw	r26, r16
    5abc:	40 e0       	ldi	r20, 0x00	; 0
    5abe:	50 e0       	ldi	r21, 0x00	; 0
    5ac0:	ae 17       	cp	r26, r30
    5ac2:	bf 07       	cpc	r27, r31
    5ac4:	50 f4       	brcc	.+20     	; 0x5ada <free+0x64>
    5ac6:	12 96       	adiw	r26, 0x02	; 2
    5ac8:	2d 91       	ld	r18, X+
    5aca:	3c 91       	ld	r19, X
    5acc:	13 97       	sbiw	r26, 0x03	; 3
    5ace:	ad 01       	movw	r20, r26
    5ad0:	21 15       	cp	r18, r1
    5ad2:	31 05       	cpc	r19, r1
    5ad4:	09 f1       	breq	.+66     	; 0x5b18 <free+0xa2>
    5ad6:	d9 01       	movw	r26, r18
    5ad8:	f3 cf       	rjmp	.-26     	; 0x5ac0 <free+0x4a>
    5ada:	9d 01       	movw	r18, r26
    5adc:	da 01       	movw	r26, r20
    5ade:	33 83       	std	Z+3, r19	; 0x03
    5ae0:	22 83       	std	Z+2, r18	; 0x02
    5ae2:	60 81       	ld	r22, Z
    5ae4:	71 81       	ldd	r23, Z+1	; 0x01
    5ae6:	86 0f       	add	r24, r22
    5ae8:	97 1f       	adc	r25, r23
    5aea:	82 17       	cp	r24, r18
    5aec:	93 07       	cpc	r25, r19
    5aee:	69 f4       	brne	.+26     	; 0x5b0a <free+0x94>
    5af0:	ec 01       	movw	r28, r24
    5af2:	28 81       	ld	r18, Y
    5af4:	39 81       	ldd	r19, Y+1	; 0x01
    5af6:	26 0f       	add	r18, r22
    5af8:	37 1f       	adc	r19, r23
    5afa:	2e 5f       	subi	r18, 0xFE	; 254
    5afc:	3f 4f       	sbci	r19, 0xFF	; 255
    5afe:	31 83       	std	Z+1, r19	; 0x01
    5b00:	20 83       	st	Z, r18
    5b02:	8a 81       	ldd	r24, Y+2	; 0x02
    5b04:	9b 81       	ldd	r25, Y+3	; 0x03
    5b06:	93 83       	std	Z+3, r25	; 0x03
    5b08:	82 83       	std	Z+2, r24	; 0x02
    5b0a:	45 2b       	or	r20, r21
    5b0c:	29 f4       	brne	.+10     	; 0x5b18 <free+0xa2>
    5b0e:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <__flp+0x1>
    5b12:	e0 93 d5 05 	sts	0x05D5, r30	; 0x8005d5 <__flp>
    5b16:	42 c0       	rjmp	.+132    	; 0x5b9c <free+0x126>
    5b18:	13 96       	adiw	r26, 0x03	; 3
    5b1a:	fc 93       	st	X, r31
    5b1c:	ee 93       	st	-X, r30
    5b1e:	12 97       	sbiw	r26, 0x02	; 2
    5b20:	ed 01       	movw	r28, r26
    5b22:	49 91       	ld	r20, Y+
    5b24:	59 91       	ld	r21, Y+
    5b26:	9e 01       	movw	r18, r28
    5b28:	24 0f       	add	r18, r20
    5b2a:	35 1f       	adc	r19, r21
    5b2c:	e2 17       	cp	r30, r18
    5b2e:	f3 07       	cpc	r31, r19
    5b30:	71 f4       	brne	.+28     	; 0x5b4e <free+0xd8>
    5b32:	80 81       	ld	r24, Z
    5b34:	91 81       	ldd	r25, Z+1	; 0x01
    5b36:	84 0f       	add	r24, r20
    5b38:	95 1f       	adc	r25, r21
    5b3a:	02 96       	adiw	r24, 0x02	; 2
    5b3c:	11 96       	adiw	r26, 0x01	; 1
    5b3e:	9c 93       	st	X, r25
    5b40:	8e 93       	st	-X, r24
    5b42:	82 81       	ldd	r24, Z+2	; 0x02
    5b44:	93 81       	ldd	r25, Z+3	; 0x03
    5b46:	13 96       	adiw	r26, 0x03	; 3
    5b48:	9c 93       	st	X, r25
    5b4a:	8e 93       	st	-X, r24
    5b4c:	12 97       	sbiw	r26, 0x02	; 2
    5b4e:	e0 e0       	ldi	r30, 0x00	; 0
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	d8 01       	movw	r26, r16
    5b54:	12 96       	adiw	r26, 0x02	; 2
    5b56:	8d 91       	ld	r24, X+
    5b58:	9c 91       	ld	r25, X
    5b5a:	13 97       	sbiw	r26, 0x03	; 3
    5b5c:	00 97       	sbiw	r24, 0x00	; 0
    5b5e:	19 f0       	breq	.+6      	; 0x5b66 <free+0xf0>
    5b60:	f8 01       	movw	r30, r16
    5b62:	8c 01       	movw	r16, r24
    5b64:	f6 cf       	rjmp	.-20     	; 0x5b52 <free+0xdc>
    5b66:	8d 91       	ld	r24, X+
    5b68:	9c 91       	ld	r25, X
    5b6a:	98 01       	movw	r18, r16
    5b6c:	2e 5f       	subi	r18, 0xFE	; 254
    5b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b70:	82 0f       	add	r24, r18
    5b72:	93 1f       	adc	r25, r19
    5b74:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    5b78:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5b7c:	28 17       	cp	r18, r24
    5b7e:	39 07       	cpc	r19, r25
    5b80:	69 f4       	brne	.+26     	; 0x5b9c <free+0x126>
    5b82:	30 97       	sbiw	r30, 0x00	; 0
    5b84:	29 f4       	brne	.+10     	; 0x5b90 <free+0x11a>
    5b86:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <__flp+0x1>
    5b8a:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <__flp>
    5b8e:	02 c0       	rjmp	.+4      	; 0x5b94 <free+0x11e>
    5b90:	13 82       	std	Z+3, r1	; 0x03
    5b92:	12 82       	std	Z+2, r1	; 0x02
    5b94:	10 93 d4 05 	sts	0x05D4, r17	; 0x8005d4 <__brkval+0x1>
    5b98:	00 93 d3 05 	sts	0x05D3, r16	; 0x8005d3 <__brkval>
    5b9c:	df 91       	pop	r29
    5b9e:	cf 91       	pop	r28
    5ba0:	1f 91       	pop	r17
    5ba2:	0f 91       	pop	r16
    5ba4:	08 95       	ret

00005ba6 <realloc>:
    5ba6:	a0 e0       	ldi	r26, 0x00	; 0
    5ba8:	b0 e0       	ldi	r27, 0x00	; 0
    5baa:	e8 ed       	ldi	r30, 0xD8	; 216
    5bac:	fd e2       	ldi	r31, 0x2D	; 45
    5bae:	6d ce       	rjmp	.-806    	; 0x588a <__prologue_saves__+0x8>
    5bb0:	ec 01       	movw	r28, r24
    5bb2:	00 97       	sbiw	r24, 0x00	; 0
    5bb4:	19 f4       	brne	.+6      	; 0x5bbc <realloc+0x16>
    5bb6:	cb 01       	movw	r24, r22
    5bb8:	c9 de       	rcall	.-622    	; 0x594c <malloc>
    5bba:	b4 c0       	rjmp	.+360    	; 0x5d24 <realloc+0x17e>
    5bbc:	fc 01       	movw	r30, r24
    5bbe:	e6 0f       	add	r30, r22
    5bc0:	f7 1f       	adc	r31, r23
    5bc2:	9c 01       	movw	r18, r24
    5bc4:	22 50       	subi	r18, 0x02	; 2
    5bc6:	31 09       	sbc	r19, r1
    5bc8:	e2 17       	cp	r30, r18
    5bca:	f3 07       	cpc	r31, r19
    5bcc:	08 f4       	brcc	.+2      	; 0x5bd0 <realloc+0x2a>
    5bce:	a8 c0       	rjmp	.+336    	; 0x5d20 <realloc+0x17a>
    5bd0:	d9 01       	movw	r26, r18
    5bd2:	0d 91       	ld	r16, X+
    5bd4:	1c 91       	ld	r17, X
    5bd6:	11 97       	sbiw	r26, 0x01	; 1
    5bd8:	06 17       	cp	r16, r22
    5bda:	17 07       	cpc	r17, r23
    5bdc:	a8 f0       	brcs	.+42     	; 0x5c08 <realloc+0x62>
    5bde:	05 30       	cpi	r16, 0x05	; 5
    5be0:	11 05       	cpc	r17, r1
    5be2:	08 f4       	brcc	.+2      	; 0x5be6 <realloc+0x40>
    5be4:	9b c0       	rjmp	.+310    	; 0x5d1c <realloc+0x176>
    5be6:	c8 01       	movw	r24, r16
    5be8:	04 97       	sbiw	r24, 0x04	; 4
    5bea:	86 17       	cp	r24, r22
    5bec:	97 07       	cpc	r25, r23
    5bee:	08 f4       	brcc	.+2      	; 0x5bf2 <realloc+0x4c>
    5bf0:	95 c0       	rjmp	.+298    	; 0x5d1c <realloc+0x176>
    5bf2:	02 50       	subi	r16, 0x02	; 2
    5bf4:	11 09       	sbc	r17, r1
    5bf6:	06 1b       	sub	r16, r22
    5bf8:	17 0b       	sbc	r17, r23
    5bfa:	01 93       	st	Z+, r16
    5bfc:	11 93       	st	Z+, r17
    5bfe:	6d 93       	st	X+, r22
    5c00:	7c 93       	st	X, r23
    5c02:	cf 01       	movw	r24, r30
    5c04:	38 df       	rcall	.-400    	; 0x5a76 <free>
    5c06:	8a c0       	rjmp	.+276    	; 0x5d1c <realloc+0x176>
    5c08:	5b 01       	movw	r10, r22
    5c0a:	a0 1a       	sub	r10, r16
    5c0c:	b1 0a       	sbc	r11, r17
    5c0e:	4c 01       	movw	r8, r24
    5c10:	80 0e       	add	r8, r16
    5c12:	91 1e       	adc	r9, r17
    5c14:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <__flp>
    5c18:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <__flp+0x1>
    5c1c:	40 e0       	ldi	r20, 0x00	; 0
    5c1e:	50 e0       	ldi	r21, 0x00	; 0
    5c20:	e1 2c       	mov	r14, r1
    5c22:	f1 2c       	mov	r15, r1
    5c24:	10 97       	sbiw	r26, 0x00	; 0
    5c26:	09 f4       	brne	.+2      	; 0x5c2a <realloc+0x84>
    5c28:	4a c0       	rjmp	.+148    	; 0x5cbe <realloc+0x118>
    5c2a:	a8 15       	cp	r26, r8
    5c2c:	b9 05       	cpc	r27, r9
    5c2e:	d1 f5       	brne	.+116    	; 0x5ca4 <realloc+0xfe>
    5c30:	6d 90       	ld	r6, X+
    5c32:	7c 90       	ld	r7, X
    5c34:	11 97       	sbiw	r26, 0x01	; 1
    5c36:	63 01       	movw	r12, r6
    5c38:	82 e0       	ldi	r24, 0x02	; 2
    5c3a:	c8 0e       	add	r12, r24
    5c3c:	d1 1c       	adc	r13, r1
    5c3e:	ca 14       	cp	r12, r10
    5c40:	db 04       	cpc	r13, r11
    5c42:	80 f1       	brcs	.+96     	; 0x5ca4 <realloc+0xfe>
    5c44:	a3 01       	movw	r20, r6
    5c46:	4a 19       	sub	r20, r10
    5c48:	5b 09       	sbc	r21, r11
    5c4a:	6a 01       	movw	r12, r20
    5c4c:	82 e0       	ldi	r24, 0x02	; 2
    5c4e:	c8 0e       	add	r12, r24
    5c50:	d1 1c       	adc	r13, r1
    5c52:	12 96       	adiw	r26, 0x02	; 2
    5c54:	bc 90       	ld	r11, X
    5c56:	12 97       	sbiw	r26, 0x02	; 2
    5c58:	13 96       	adiw	r26, 0x03	; 3
    5c5a:	ac 91       	ld	r26, X
    5c5c:	b5 e0       	ldi	r27, 0x05	; 5
    5c5e:	cb 16       	cp	r12, r27
    5c60:	d1 04       	cpc	r13, r1
    5c62:	40 f0       	brcs	.+16     	; 0x5c74 <realloc+0xce>
    5c64:	b2 82       	std	Z+2, r11	; 0x02
    5c66:	a3 83       	std	Z+3, r26	; 0x03
    5c68:	51 83       	std	Z+1, r21	; 0x01
    5c6a:	40 83       	st	Z, r20
    5c6c:	d9 01       	movw	r26, r18
    5c6e:	6d 93       	st	X+, r22
    5c70:	7c 93       	st	X, r23
    5c72:	0a c0       	rjmp	.+20     	; 0x5c88 <realloc+0xe2>
    5c74:	0e 5f       	subi	r16, 0xFE	; 254
    5c76:	1f 4f       	sbci	r17, 0xFF	; 255
    5c78:	c3 01       	movw	r24, r6
    5c7a:	80 0f       	add	r24, r16
    5c7c:	91 1f       	adc	r25, r17
    5c7e:	f9 01       	movw	r30, r18
    5c80:	91 83       	std	Z+1, r25	; 0x01
    5c82:	80 83       	st	Z, r24
    5c84:	eb 2d       	mov	r30, r11
    5c86:	fa 2f       	mov	r31, r26
    5c88:	e1 14       	cp	r14, r1
    5c8a:	f1 04       	cpc	r15, r1
    5c8c:	31 f0       	breq	.+12     	; 0x5c9a <realloc+0xf4>
    5c8e:	d7 01       	movw	r26, r14
    5c90:	13 96       	adiw	r26, 0x03	; 3
    5c92:	fc 93       	st	X, r31
    5c94:	ee 93       	st	-X, r30
    5c96:	12 97       	sbiw	r26, 0x02	; 2
    5c98:	41 c0       	rjmp	.+130    	; 0x5d1c <realloc+0x176>
    5c9a:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <__flp+0x1>
    5c9e:	e0 93 d5 05 	sts	0x05D5, r30	; 0x8005d5 <__flp>
    5ca2:	3c c0       	rjmp	.+120    	; 0x5d1c <realloc+0x176>
    5ca4:	8d 91       	ld	r24, X+
    5ca6:	9c 91       	ld	r25, X
    5ca8:	11 97       	sbiw	r26, 0x01	; 1
    5caa:	48 17       	cp	r20, r24
    5cac:	59 07       	cpc	r21, r25
    5cae:	08 f4       	brcc	.+2      	; 0x5cb2 <realloc+0x10c>
    5cb0:	ac 01       	movw	r20, r24
    5cb2:	7d 01       	movw	r14, r26
    5cb4:	12 96       	adiw	r26, 0x02	; 2
    5cb6:	0d 90       	ld	r0, X+
    5cb8:	bc 91       	ld	r27, X
    5cba:	a0 2d       	mov	r26, r0
    5cbc:	b3 cf       	rjmp	.-154    	; 0x5c24 <realloc+0x7e>
    5cbe:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <__brkval>
    5cc2:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5cc6:	88 15       	cp	r24, r8
    5cc8:	99 05       	cpc	r25, r9
    5cca:	e1 f4       	brne	.+56     	; 0x5d04 <realloc+0x15e>
    5ccc:	46 17       	cp	r20, r22
    5cce:	57 07       	cpc	r21, r23
    5cd0:	c8 f4       	brcc	.+50     	; 0x5d04 <realloc+0x15e>
    5cd2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5cd6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5cda:	00 97       	sbiw	r24, 0x00	; 0
    5cdc:	41 f4       	brne	.+16     	; 0x5cee <realloc+0x148>
    5cde:	8d b7       	in	r24, 0x3d	; 61
    5ce0:	9e b7       	in	r25, 0x3e	; 62
    5ce2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5ce6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5cea:	84 1b       	sub	r24, r20
    5cec:	95 0b       	sbc	r25, r21
    5cee:	e8 17       	cp	r30, r24
    5cf0:	f9 07       	cpc	r31, r25
    5cf2:	b0 f4       	brcc	.+44     	; 0x5d20 <realloc+0x17a>
    5cf4:	f0 93 d4 05 	sts	0x05D4, r31	; 0x8005d4 <__brkval+0x1>
    5cf8:	e0 93 d3 05 	sts	0x05D3, r30	; 0x8005d3 <__brkval>
    5cfc:	f9 01       	movw	r30, r18
    5cfe:	71 83       	std	Z+1, r23	; 0x01
    5d00:	60 83       	st	Z, r22
    5d02:	0c c0       	rjmp	.+24     	; 0x5d1c <realloc+0x176>
    5d04:	cb 01       	movw	r24, r22
    5d06:	22 de       	rcall	.-956    	; 0x594c <malloc>
    5d08:	7c 01       	movw	r14, r24
    5d0a:	00 97       	sbiw	r24, 0x00	; 0
    5d0c:	49 f0       	breq	.+18     	; 0x5d20 <realloc+0x17a>
    5d0e:	a8 01       	movw	r20, r16
    5d10:	be 01       	movw	r22, r28
    5d12:	af d1       	rcall	.+862    	; 0x6072 <memcpy>
    5d14:	ce 01       	movw	r24, r28
    5d16:	af de       	rcall	.-674    	; 0x5a76 <free>
    5d18:	c7 01       	movw	r24, r14
    5d1a:	04 c0       	rjmp	.+8      	; 0x5d24 <realloc+0x17e>
    5d1c:	ce 01       	movw	r24, r28
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <realloc+0x17e>
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	cd b7       	in	r28, 0x3d	; 61
    5d26:	de b7       	in	r29, 0x3e	; 62
    5d28:	ee e0       	ldi	r30, 0x0E	; 14
    5d2a:	cb cd       	rjmp	.-1130   	; 0x58c2 <__epilogue_restores__+0x8>

00005d2c <strtod>:
    5d2c:	a0 e0       	ldi	r26, 0x00	; 0
    5d2e:	b0 e0       	ldi	r27, 0x00	; 0
    5d30:	eb e9       	ldi	r30, 0x9B	; 155
    5d32:	fe e2       	ldi	r31, 0x2E	; 46
    5d34:	aa cd       	rjmp	.-1196   	; 0x588a <__prologue_saves__+0x8>
    5d36:	ec 01       	movw	r28, r24
    5d38:	7b 01       	movw	r14, r22
    5d3a:	61 15       	cp	r22, r1
    5d3c:	71 05       	cpc	r23, r1
    5d3e:	19 f0       	breq	.+6      	; 0x5d46 <strtod+0x1a>
    5d40:	db 01       	movw	r26, r22
    5d42:	8d 93       	st	X+, r24
    5d44:	9c 93       	st	X, r25
    5d46:	8e 01       	movw	r16, r28
    5d48:	0f 5f       	subi	r16, 0xFF	; 255
    5d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4c:	78 80       	ld	r7, Y
    5d4e:	87 2d       	mov	r24, r7
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	6f d1       	rcall	.+734    	; 0x6032 <isspace>
    5d54:	89 2b       	or	r24, r25
    5d56:	11 f0       	breq	.+4      	; 0x5d5c <strtod+0x30>
    5d58:	e8 01       	movw	r28, r16
    5d5a:	f5 cf       	rjmp	.-22     	; 0x5d46 <strtod+0x1a>
    5d5c:	bd e2       	ldi	r27, 0x2D	; 45
    5d5e:	7b 12       	cpse	r7, r27
    5d60:	05 c0       	rjmp	.+10     	; 0x5d6c <strtod+0x40>
    5d62:	0f 5f       	subi	r16, 0xFF	; 255
    5d64:	1f 4f       	sbci	r17, 0xFF	; 255
    5d66:	79 80       	ldd	r7, Y+1	; 0x01
    5d68:	c1 e0       	ldi	r28, 0x01	; 1
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <strtod+0x50>
    5d6c:	eb e2       	ldi	r30, 0x2B	; 43
    5d6e:	7e 12       	cpse	r7, r30
    5d70:	04 c0       	rjmp	.+8      	; 0x5d7a <strtod+0x4e>
    5d72:	8e 01       	movw	r16, r28
    5d74:	0e 5f       	subi	r16, 0xFE	; 254
    5d76:	1f 4f       	sbci	r17, 0xFF	; 255
    5d78:	79 80       	ldd	r7, Y+1	; 0x01
    5d7a:	c0 e0       	ldi	r28, 0x00	; 0
    5d7c:	68 01       	movw	r12, r16
    5d7e:	f1 e0       	ldi	r31, 0x01	; 1
    5d80:	cf 1a       	sub	r12, r31
    5d82:	d1 08       	sbc	r13, r1
    5d84:	43 e0       	ldi	r20, 0x03	; 3
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	62 e0       	ldi	r22, 0x02	; 2
    5d8a:	72 e0       	ldi	r23, 0x02	; 2
    5d8c:	c6 01       	movw	r24, r12
    5d8e:	59 d1       	rcall	.+690    	; 0x6042 <strncasecmp_P>
    5d90:	89 2b       	or	r24, r25
    5d92:	e9 f4       	brne	.+58     	; 0x5dce <strtod+0xa2>
    5d94:	68 01       	movw	r12, r16
    5d96:	22 e0       	ldi	r18, 0x02	; 2
    5d98:	c2 0e       	add	r12, r18
    5d9a:	d1 1c       	adc	r13, r1
    5d9c:	45 e0       	ldi	r20, 0x05	; 5
    5d9e:	50 e0       	ldi	r21, 0x00	; 0
    5da0:	6d ef       	ldi	r22, 0xFD	; 253
    5da2:	71 e0       	ldi	r23, 0x01	; 1
    5da4:	c6 01       	movw	r24, r12
    5da6:	4d d1       	rcall	.+666    	; 0x6042 <strncasecmp_P>
    5da8:	89 2b       	or	r24, r25
    5daa:	21 f4       	brne	.+8      	; 0x5db4 <strtod+0x88>
    5dac:	68 01       	movw	r12, r16
    5dae:	87 e0       	ldi	r24, 0x07	; 7
    5db0:	c8 0e       	add	r12, r24
    5db2:	d1 1c       	adc	r13, r1
    5db4:	e1 14       	cp	r14, r1
    5db6:	f1 04       	cpc	r15, r1
    5db8:	19 f0       	breq	.+6      	; 0x5dc0 <strtod+0x94>
    5dba:	d7 01       	movw	r26, r14
    5dbc:	cd 92       	st	X+, r12
    5dbe:	dc 92       	st	X, r13
    5dc0:	c1 11       	cpse	r28, r1
    5dc2:	fd c0       	rjmp	.+506    	; 0x5fbe <strtod+0x292>
    5dc4:	60 e0       	ldi	r22, 0x00	; 0
    5dc6:	70 e0       	ldi	r23, 0x00	; 0
    5dc8:	80 e8       	ldi	r24, 0x80	; 128
    5dca:	9f e7       	ldi	r25, 0x7F	; 127
    5dcc:	01 c1       	rjmp	.+514    	; 0x5fd0 <strtod+0x2a4>
    5dce:	43 e0       	ldi	r20, 0x03	; 3
    5dd0:	50 e0       	ldi	r21, 0x00	; 0
    5dd2:	6a ef       	ldi	r22, 0xFA	; 250
    5dd4:	71 e0       	ldi	r23, 0x01	; 1
    5dd6:	c6 01       	movw	r24, r12
    5dd8:	34 d1       	rcall	.+616    	; 0x6042 <strncasecmp_P>
    5dda:	89 2b       	or	r24, r25
    5ddc:	51 f4       	brne	.+20     	; 0x5df2 <strtod+0xc6>
    5dde:	e1 14       	cp	r14, r1
    5de0:	f1 04       	cpc	r15, r1
    5de2:	09 f4       	brne	.+2      	; 0x5de6 <strtod+0xba>
    5de4:	f1 c0       	rjmp	.+482    	; 0x5fc8 <strtod+0x29c>
    5de6:	0e 5f       	subi	r16, 0xFE	; 254
    5de8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dea:	f7 01       	movw	r30, r14
    5dec:	11 83       	std	Z+1, r17	; 0x01
    5dee:	00 83       	st	Z, r16
    5df0:	eb c0       	rjmp	.+470    	; 0x5fc8 <strtod+0x29c>
    5df2:	68 01       	movw	r12, r16
    5df4:	60 e0       	ldi	r22, 0x00	; 0
    5df6:	70 e0       	ldi	r23, 0x00	; 0
    5df8:	cb 01       	movw	r24, r22
    5dfa:	00 e0       	ldi	r16, 0x00	; 0
    5dfc:	10 e0       	ldi	r17, 0x00	; 0
    5dfe:	f6 01       	movw	r30, r12
    5e00:	d0 ed       	ldi	r29, 0xD0	; 208
    5e02:	d7 0d       	add	r29, r7
    5e04:	da 30       	cpi	r29, 0x0A	; 10
    5e06:	50 f5       	brcc	.+84     	; 0x5e5c <strtod+0x130>
    5e08:	2c 2f       	mov	r18, r28
    5e0a:	22 60       	ori	r18, 0x02	; 2
    5e0c:	62 2e       	mov	r6, r18
    5e0e:	2c 2f       	mov	r18, r28
    5e10:	28 70       	andi	r18, 0x08	; 8
    5e12:	c2 ff       	sbrs	r28, 2
    5e14:	05 c0       	rjmp	.+10     	; 0x5e20 <strtod+0xf4>
    5e16:	21 11       	cpse	r18, r1
    5e18:	27 c0       	rjmp	.+78     	; 0x5e68 <strtod+0x13c>
    5e1a:	0f 5f       	subi	r16, 0xFF	; 255
    5e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e1e:	24 c0       	rjmp	.+72     	; 0x5e68 <strtod+0x13c>
    5e20:	22 23       	and	r18, r18
    5e22:	11 f0       	breq	.+4      	; 0x5e28 <strtod+0xfc>
    5e24:	01 50       	subi	r16, 0x01	; 1
    5e26:	11 09       	sbc	r17, r1
    5e28:	a5 e0       	ldi	r26, 0x05	; 5
    5e2a:	b0 e0       	ldi	r27, 0x00	; 0
    5e2c:	9b 01       	movw	r18, r22
    5e2e:	ac 01       	movw	r20, r24
    5e30:	1e dd       	rcall	.-1476   	; 0x586e <__muluhisi3>
    5e32:	4b 01       	movw	r8, r22
    5e34:	5c 01       	movw	r10, r24
    5e36:	88 0c       	add	r8, r8
    5e38:	99 1c       	adc	r9, r9
    5e3a:	aa 1c       	adc	r10, r10
    5e3c:	bb 1c       	adc	r11, r11
    5e3e:	c5 01       	movw	r24, r10
    5e40:	b4 01       	movw	r22, r8
    5e42:	6d 0f       	add	r22, r29
    5e44:	71 1d       	adc	r23, r1
    5e46:	81 1d       	adc	r24, r1
    5e48:	91 1d       	adc	r25, r1
    5e4a:	68 39       	cpi	r22, 0x98	; 152
    5e4c:	a9 e9       	ldi	r26, 0x99	; 153
    5e4e:	7a 07       	cpc	r23, r26
    5e50:	8a 07       	cpc	r24, r26
    5e52:	a9 e1       	ldi	r26, 0x19	; 25
    5e54:	9a 07       	cpc	r25, r26
    5e56:	40 f0       	brcs	.+16     	; 0x5e68 <strtod+0x13c>
    5e58:	c6 60       	ori	r28, 0x06	; 6
    5e5a:	05 c0       	rjmp	.+10     	; 0x5e66 <strtod+0x13a>
    5e5c:	de 3f       	cpi	r29, 0xFE	; 254
    5e5e:	51 f4       	brne	.+20     	; 0x5e74 <strtod+0x148>
    5e60:	c3 fd       	sbrc	r28, 3
    5e62:	44 c0       	rjmp	.+136    	; 0x5eec <strtod+0x1c0>
    5e64:	c8 60       	ori	r28, 0x08	; 8
    5e66:	6c 2e       	mov	r6, r28
    5e68:	bf ef       	ldi	r27, 0xFF	; 255
    5e6a:	cb 1a       	sub	r12, r27
    5e6c:	db 0a       	sbc	r13, r27
    5e6e:	70 80       	ld	r7, Z
    5e70:	c6 2d       	mov	r28, r6
    5e72:	c5 cf       	rjmp	.-118    	; 0x5dfe <strtod+0xd2>
    5e74:	2d 2f       	mov	r18, r29
    5e76:	2f 7d       	andi	r18, 0xDF	; 223
    5e78:	25 31       	cpi	r18, 0x15	; 21
    5e7a:	c1 f5       	brne	.+112    	; 0x5eec <strtod+0x1c0>
    5e7c:	40 81       	ld	r20, Z
    5e7e:	4d 32       	cpi	r20, 0x2D	; 45
    5e80:	11 f4       	brne	.+4      	; 0x5e86 <strtod+0x15a>
    5e82:	c0 61       	ori	r28, 0x10	; 16
    5e84:	06 c0       	rjmp	.+12     	; 0x5e92 <strtod+0x166>
    5e86:	4b 32       	cpi	r20, 0x2B	; 43
    5e88:	21 f0       	breq	.+8      	; 0x5e92 <strtod+0x166>
    5e8a:	31 96       	adiw	r30, 0x01	; 1
    5e8c:	21 e0       	ldi	r18, 0x01	; 1
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	06 c0       	rjmp	.+12     	; 0x5e9e <strtod+0x172>
    5e92:	32 96       	adiw	r30, 0x02	; 2
    5e94:	d6 01       	movw	r26, r12
    5e96:	11 96       	adiw	r26, 0x01	; 1
    5e98:	4c 91       	ld	r20, X
    5e9a:	22 e0       	ldi	r18, 0x02	; 2
    5e9c:	30 e0       	ldi	r19, 0x00	; 0
    5e9e:	a0 ed       	ldi	r26, 0xD0	; 208
    5ea0:	a4 0f       	add	r26, r20
    5ea2:	aa 30       	cpi	r26, 0x0A	; 10
    5ea4:	18 f0       	brcs	.+6      	; 0x5eac <strtod+0x180>
    5ea6:	e2 1b       	sub	r30, r18
    5ea8:	f3 0b       	sbc	r31, r19
    5eaa:	20 c0       	rjmp	.+64     	; 0x5eec <strtod+0x1c0>
    5eac:	40 e0       	ldi	r20, 0x00	; 0
    5eae:	50 e0       	ldi	r21, 0x00	; 0
    5eb0:	40 38       	cpi	r20, 0x80	; 128
    5eb2:	bc e0       	ldi	r27, 0x0C	; 12
    5eb4:	5b 07       	cpc	r21, r27
    5eb6:	5c f4       	brge	.+22     	; 0x5ece <strtod+0x1a2>
    5eb8:	9a 01       	movw	r18, r20
    5eba:	22 0f       	add	r18, r18
    5ebc:	33 1f       	adc	r19, r19
    5ebe:	22 0f       	add	r18, r18
    5ec0:	33 1f       	adc	r19, r19
    5ec2:	42 0f       	add	r20, r18
    5ec4:	53 1f       	adc	r21, r19
    5ec6:	44 0f       	add	r20, r20
    5ec8:	55 1f       	adc	r21, r21
    5eca:	4a 0f       	add	r20, r26
    5ecc:	51 1d       	adc	r21, r1
    5ece:	31 96       	adiw	r30, 0x01	; 1
    5ed0:	df 01       	movw	r26, r30
    5ed2:	11 97       	sbiw	r26, 0x01	; 1
    5ed4:	2c 91       	ld	r18, X
    5ed6:	a0 ed       	ldi	r26, 0xD0	; 208
    5ed8:	a2 0f       	add	r26, r18
    5eda:	aa 30       	cpi	r26, 0x0A	; 10
    5edc:	48 f3       	brcs	.-46     	; 0x5eb0 <strtod+0x184>
    5ede:	c4 ff       	sbrs	r28, 4
    5ee0:	03 c0       	rjmp	.+6      	; 0x5ee8 <strtod+0x1bc>
    5ee2:	51 95       	neg	r21
    5ee4:	41 95       	neg	r20
    5ee6:	51 09       	sbc	r21, r1
    5ee8:	04 0f       	add	r16, r20
    5eea:	15 1f       	adc	r17, r21
    5eec:	c1 ff       	sbrs	r28, 1
    5eee:	07 c0       	rjmp	.+14     	; 0x5efe <strtod+0x1d2>
    5ef0:	e1 14       	cp	r14, r1
    5ef2:	f1 04       	cpc	r15, r1
    5ef4:	21 f0       	breq	.+8      	; 0x5efe <strtod+0x1d2>
    5ef6:	31 97       	sbiw	r30, 0x01	; 1
    5ef8:	d7 01       	movw	r26, r14
    5efa:	ed 93       	st	X+, r30
    5efc:	fc 93       	st	X, r31
    5efe:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__floatunsisf>
    5f02:	c3 70       	andi	r28, 0x03	; 3
    5f04:	c3 30       	cpi	r28, 0x03	; 3
    5f06:	19 f0       	breq	.+6      	; 0x5f0e <strtod+0x1e2>
    5f08:	6b 01       	movw	r12, r22
    5f0a:	7c 01       	movw	r14, r24
    5f0c:	06 c0       	rjmp	.+12     	; 0x5f1a <strtod+0x1ee>
    5f0e:	6b 01       	movw	r12, r22
    5f10:	7c 01       	movw	r14, r24
    5f12:	f7 fa       	bst	r15, 7
    5f14:	f0 94       	com	r15
    5f16:	f7 f8       	bld	r15, 7
    5f18:	f0 94       	com	r15
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	a9 01       	movw	r20, r18
    5f20:	c7 01       	movw	r24, r14
    5f22:	b6 01       	movw	r22, r12
    5f24:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__cmpsf2>
    5f28:	88 23       	and	r24, r24
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <strtod+0x202>
    5f2c:	45 c0       	rjmp	.+138    	; 0x5fb8 <strtod+0x28c>
    5f2e:	17 ff       	sbrs	r17, 7
    5f30:	06 c0       	rjmp	.+12     	; 0x5f3e <strtod+0x212>
    5f32:	11 95       	neg	r17
    5f34:	01 95       	neg	r16
    5f36:	11 09       	sbc	r17, r1
    5f38:	c9 e1       	ldi	r28, 0x19	; 25
    5f3a:	d2 e0       	ldi	r29, 0x02	; 2
    5f3c:	02 c0       	rjmp	.+4      	; 0x5f42 <strtod+0x216>
    5f3e:	c1 e3       	ldi	r28, 0x31	; 49
    5f40:	d2 e0       	ldi	r29, 0x02	; 2
    5f42:	5e 01       	movw	r10, r28
    5f44:	b8 e1       	ldi	r27, 0x18	; 24
    5f46:	ab 1a       	sub	r10, r27
    5f48:	b1 08       	sbc	r11, r1
    5f4a:	46 01       	movw	r8, r12
    5f4c:	be 2d       	mov	r27, r14
    5f4e:	af 2d       	mov	r26, r15
    5f50:	90 e2       	ldi	r25, 0x20	; 32
    5f52:	e9 2e       	mov	r14, r25
    5f54:	f1 2c       	mov	r15, r1
    5f56:	0e 15       	cp	r16, r14
    5f58:	1f 05       	cpc	r17, r15
    5f5a:	84 f0       	brlt	.+32     	; 0x5f7c <strtod+0x250>
    5f5c:	fe 01       	movw	r30, r28
    5f5e:	25 91       	lpm	r18, Z+
    5f60:	35 91       	lpm	r19, Z+
    5f62:	45 91       	lpm	r20, Z+
    5f64:	54 91       	lpm	r21, Z
    5f66:	b4 01       	movw	r22, r8
    5f68:	8b 2f       	mov	r24, r27
    5f6a:	9a 2f       	mov	r25, r26
    5f6c:	0e 94 a9 23 	call	0x4752	; 0x4752 <__mulsf3>
    5f70:	4b 01       	movw	r8, r22
    5f72:	b8 2f       	mov	r27, r24
    5f74:	a9 2f       	mov	r26, r25
    5f76:	0e 19       	sub	r16, r14
    5f78:	1f 09       	sbc	r17, r15
    5f7a:	ed cf       	rjmp	.-38     	; 0x5f56 <strtod+0x22a>
    5f7c:	24 97       	sbiw	r28, 0x04	; 4
    5f7e:	f5 94       	asr	r15
    5f80:	e7 94       	ror	r14
    5f82:	ca 15       	cp	r28, r10
    5f84:	db 05       	cpc	r29, r11
    5f86:	39 f7       	brne	.-50     	; 0x5f56 <strtod+0x22a>
    5f88:	64 01       	movw	r12, r8
    5f8a:	eb 2e       	mov	r14, r27
    5f8c:	fa 2e       	mov	r15, r26
    5f8e:	8e 2d       	mov	r24, r14
    5f90:	88 0f       	add	r24, r24
    5f92:	8f 2d       	mov	r24, r15
    5f94:	88 1f       	adc	r24, r24
    5f96:	8f 3f       	cpi	r24, 0xFF	; 255
    5f98:	49 f0       	breq	.+18     	; 0x5fac <strtod+0x280>
    5f9a:	20 e0       	ldi	r18, 0x00	; 0
    5f9c:	30 e0       	ldi	r19, 0x00	; 0
    5f9e:	a9 01       	movw	r20, r18
    5fa0:	c7 01       	movw	r24, r14
    5fa2:	b6 01       	movw	r22, r12
    5fa4:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__cmpsf2>
    5fa8:	81 11       	cpse	r24, r1
    5faa:	06 c0       	rjmp	.+12     	; 0x5fb8 <strtod+0x28c>
    5fac:	82 e2       	ldi	r24, 0x22	; 34
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <errno+0x1>
    5fb4:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <errno>
    5fb8:	c7 01       	movw	r24, r14
    5fba:	b6 01       	movw	r22, r12
    5fbc:	09 c0       	rjmp	.+18     	; 0x5fd0 <strtod+0x2a4>
    5fbe:	60 e0       	ldi	r22, 0x00	; 0
    5fc0:	70 e0       	ldi	r23, 0x00	; 0
    5fc2:	80 e8       	ldi	r24, 0x80	; 128
    5fc4:	9f ef       	ldi	r25, 0xFF	; 255
    5fc6:	04 c0       	rjmp	.+8      	; 0x5fd0 <strtod+0x2a4>
    5fc8:	60 e0       	ldi	r22, 0x00	; 0
    5fca:	70 e0       	ldi	r23, 0x00	; 0
    5fcc:	80 ec       	ldi	r24, 0xC0	; 192
    5fce:	9f e7       	ldi	r25, 0x7F	; 127
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
    5fd4:	ee e0       	ldi	r30, 0x0E	; 14
    5fd6:	75 cc       	rjmp	.-1814   	; 0x58c2 <__epilogue_restores__+0x8>

00005fd8 <abort>:
    5fd8:	81 e0       	ldi	r24, 0x01	; 1
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	f8 94       	cli
    5fde:	79 c3       	rjmp	.+1778   	; 0x66d2 <__do_global_dtors>

00005fe0 <atof>:
    5fe0:	66 27       	eor	r22, r22
    5fe2:	77 27       	eor	r23, r23
    5fe4:	a3 ce       	rjmp	.-698    	; 0x5d2c <strtod>

00005fe6 <atol>:
    5fe6:	1f 93       	push	r17
    5fe8:	fc 01       	movw	r30, r24
    5fea:	99 27       	eor	r25, r25
    5fec:	88 27       	eor	r24, r24
    5fee:	bc 01       	movw	r22, r24
    5ff0:	e8 94       	clt
    5ff2:	11 91       	ld	r17, Z+
    5ff4:	10 32       	cpi	r17, 0x20	; 32
    5ff6:	e9 f3       	breq	.-6      	; 0x5ff2 <atol+0xc>
    5ff8:	19 30       	cpi	r17, 0x09	; 9
    5ffa:	10 f0       	brcs	.+4      	; 0x6000 <atol+0x1a>
    5ffc:	1e 30       	cpi	r17, 0x0E	; 14
    5ffe:	c8 f3       	brcs	.-14     	; 0x5ff2 <atol+0xc>
    6000:	1b 32       	cpi	r17, 0x2B	; 43
    6002:	49 f0       	breq	.+18     	; 0x6016 <atol+0x30>
    6004:	1d 32       	cpi	r17, 0x2D	; 45
    6006:	41 f4       	brne	.+16     	; 0x6018 <atol+0x32>
    6008:	68 94       	set
    600a:	05 c0       	rjmp	.+10     	; 0x6016 <atol+0x30>
    600c:	85 d0       	rcall	.+266    	; 0x6118 <__mulsi_const_10>
    600e:	61 0f       	add	r22, r17
    6010:	71 1d       	adc	r23, r1
    6012:	81 1d       	adc	r24, r1
    6014:	91 1d       	adc	r25, r1
    6016:	11 91       	ld	r17, Z+
    6018:	10 53       	subi	r17, 0x30	; 48
    601a:	1a 30       	cpi	r17, 0x0A	; 10
    601c:	b8 f3       	brcs	.-18     	; 0x600c <atol+0x26>
    601e:	3e f4       	brtc	.+14     	; 0x602e <atol+0x48>
    6020:	90 95       	com	r25
    6022:	80 95       	com	r24
    6024:	70 95       	com	r23
    6026:	61 95       	neg	r22
    6028:	7f 4f       	sbci	r23, 0xFF	; 255
    602a:	8f 4f       	sbci	r24, 0xFF	; 255
    602c:	9f 4f       	sbci	r25, 0xFF	; 255
    602e:	1f 91       	pop	r17
    6030:	08 95       	ret

00006032 <isspace>:
    6032:	91 11       	cpse	r25, r1
    6034:	25 c3       	rjmp	.+1610   	; 0x6680 <__ctype_isfalse>
    6036:	80 32       	cpi	r24, 0x20	; 32
    6038:	19 f0       	breq	.+6      	; 0x6040 <isspace+0xe>
    603a:	89 50       	subi	r24, 0x09	; 9
    603c:	85 50       	subi	r24, 0x05	; 5
    603e:	d0 f7       	brcc	.-12     	; 0x6034 <isspace+0x2>
    6040:	08 95       	ret

00006042 <strncasecmp_P>:
    6042:	fb 01       	movw	r30, r22
    6044:	dc 01       	movw	r26, r24
    6046:	41 50       	subi	r20, 0x01	; 1
    6048:	50 40       	sbci	r21, 0x00	; 0
    604a:	88 f0       	brcs	.+34     	; 0x606e <strncasecmp_P+0x2c>
    604c:	8d 91       	ld	r24, X+
    604e:	81 34       	cpi	r24, 0x41	; 65
    6050:	1c f0       	brlt	.+6      	; 0x6058 <strncasecmp_P+0x16>
    6052:	8b 35       	cpi	r24, 0x5B	; 91
    6054:	0c f4       	brge	.+2      	; 0x6058 <strncasecmp_P+0x16>
    6056:	80 5e       	subi	r24, 0xE0	; 224
    6058:	65 91       	lpm	r22, Z+
    605a:	61 34       	cpi	r22, 0x41	; 65
    605c:	1c f0       	brlt	.+6      	; 0x6064 <strncasecmp_P+0x22>
    605e:	6b 35       	cpi	r22, 0x5B	; 91
    6060:	0c f4       	brge	.+2      	; 0x6064 <strncasecmp_P+0x22>
    6062:	60 5e       	subi	r22, 0xE0	; 224
    6064:	86 1b       	sub	r24, r22
    6066:	61 11       	cpse	r22, r1
    6068:	71 f3       	breq	.-36     	; 0x6046 <strncasecmp_P+0x4>
    606a:	99 0b       	sbc	r25, r25
    606c:	08 95       	ret
    606e:	88 1b       	sub	r24, r24
    6070:	fc cf       	rjmp	.-8      	; 0x606a <strncasecmp_P+0x28>

00006072 <memcpy>:
    6072:	fb 01       	movw	r30, r22
    6074:	dc 01       	movw	r26, r24
    6076:	02 c0       	rjmp	.+4      	; 0x607c <memcpy+0xa>
    6078:	01 90       	ld	r0, Z+
    607a:	0d 92       	st	X+, r0
    607c:	41 50       	subi	r20, 0x01	; 1
    607e:	50 40       	sbci	r21, 0x00	; 0
    6080:	d8 f7       	brcc	.-10     	; 0x6078 <memcpy+0x6>
    6082:	08 95       	ret

00006084 <strcmp>:
    6084:	fb 01       	movw	r30, r22
    6086:	dc 01       	movw	r26, r24
    6088:	8d 91       	ld	r24, X+
    608a:	01 90       	ld	r0, Z+
    608c:	80 19       	sub	r24, r0
    608e:	01 10       	cpse	r0, r1
    6090:	d9 f3       	breq	.-10     	; 0x6088 <strcmp+0x4>
    6092:	99 0b       	sbc	r25, r25
    6094:	08 95       	ret

00006096 <strcpy>:
    6096:	fb 01       	movw	r30, r22
    6098:	dc 01       	movw	r26, r24
    609a:	01 90       	ld	r0, Z+
    609c:	0d 92       	st	X+, r0
    609e:	00 20       	and	r0, r0
    60a0:	e1 f7       	brne	.-8      	; 0x609a <strcpy+0x4>
    60a2:	08 95       	ret

000060a4 <strncmp>:
    60a4:	fb 01       	movw	r30, r22
    60a6:	dc 01       	movw	r26, r24
    60a8:	41 50       	subi	r20, 0x01	; 1
    60aa:	50 40       	sbci	r21, 0x00	; 0
    60ac:	30 f0       	brcs	.+12     	; 0x60ba <strncmp+0x16>
    60ae:	8d 91       	ld	r24, X+
    60b0:	01 90       	ld	r0, Z+
    60b2:	80 19       	sub	r24, r0
    60b4:	19 f4       	brne	.+6      	; 0x60bc <strncmp+0x18>
    60b6:	00 20       	and	r0, r0
    60b8:	b9 f7       	brne	.-18     	; 0x60a8 <strncmp+0x4>
    60ba:	88 1b       	sub	r24, r24
    60bc:	99 0b       	sbc	r25, r25
    60be:	08 95       	ret

000060c0 <itoa>:
    60c0:	45 32       	cpi	r20, 0x25	; 37
    60c2:	51 05       	cpc	r21, r1
    60c4:	18 f4       	brcc	.+6      	; 0x60cc <itoa+0xc>
    60c6:	42 30       	cpi	r20, 0x02	; 2
    60c8:	08 f0       	brcs	.+2      	; 0x60cc <itoa+0xc>
    60ca:	04 c0       	rjmp	.+8      	; 0x60d4 <__itoa_ncheck>
    60cc:	fb 01       	movw	r30, r22
    60ce:	10 82       	st	Z, r1
    60d0:	cb 01       	movw	r24, r22
    60d2:	08 95       	ret

000060d4 <__itoa_ncheck>:
    60d4:	bb 27       	eor	r27, r27
    60d6:	4a 30       	cpi	r20, 0x0A	; 10
    60d8:	31 f4       	brne	.+12     	; 0x60e6 <__itoa_ncheck+0x12>
    60da:	99 23       	and	r25, r25
    60dc:	22 f4       	brpl	.+8      	; 0x60e6 <__itoa_ncheck+0x12>
    60de:	bd e2       	ldi	r27, 0x2D	; 45
    60e0:	90 95       	com	r25
    60e2:	81 95       	neg	r24
    60e4:	9f 4f       	sbci	r25, 0xFF	; 255
    60e6:	4f c0       	rjmp	.+158    	; 0x6186 <__utoa_common>

000060e8 <ltoa>:
    60e8:	25 32       	cpi	r18, 0x25	; 37
    60ea:	31 05       	cpc	r19, r1
    60ec:	18 f4       	brcc	.+6      	; 0x60f4 <ltoa+0xc>
    60ee:	22 30       	cpi	r18, 0x02	; 2
    60f0:	08 f0       	brcs	.+2      	; 0x60f4 <ltoa+0xc>
    60f2:	04 c0       	rjmp	.+8      	; 0x60fc <__ltoa_ncheck>
    60f4:	fa 01       	movw	r30, r20
    60f6:	10 82       	st	Z, r1
    60f8:	ca 01       	movw	r24, r20
    60fa:	08 95       	ret

000060fc <__ltoa_ncheck>:
    60fc:	bb 27       	eor	r27, r27
    60fe:	2a 30       	cpi	r18, 0x0A	; 10
    6100:	51 f4       	brne	.+20     	; 0x6116 <__ltoa_ncheck+0x1a>
    6102:	99 23       	and	r25, r25
    6104:	42 f4       	brpl	.+16     	; 0x6116 <__ltoa_ncheck+0x1a>
    6106:	bd e2       	ldi	r27, 0x2D	; 45
    6108:	90 95       	com	r25
    610a:	80 95       	com	r24
    610c:	70 95       	com	r23
    610e:	61 95       	neg	r22
    6110:	7f 4f       	sbci	r23, 0xFF	; 255
    6112:	8f 4f       	sbci	r24, 0xFF	; 255
    6114:	9f 4f       	sbci	r25, 0xFF	; 255
    6116:	16 c0       	rjmp	.+44     	; 0x6144 <__ultoa_common>

00006118 <__mulsi_const_10>:
    6118:	59 2f       	mov	r21, r25
    611a:	48 2f       	mov	r20, r24
    611c:	37 2f       	mov	r19, r23
    611e:	26 2f       	mov	r18, r22
    6120:	66 0f       	add	r22, r22
    6122:	77 1f       	adc	r23, r23
    6124:	88 1f       	adc	r24, r24
    6126:	99 1f       	adc	r25, r25
    6128:	66 0f       	add	r22, r22
    612a:	77 1f       	adc	r23, r23
    612c:	88 1f       	adc	r24, r24
    612e:	99 1f       	adc	r25, r25
    6130:	62 0f       	add	r22, r18
    6132:	73 1f       	adc	r23, r19
    6134:	84 1f       	adc	r24, r20
    6136:	95 1f       	adc	r25, r21
    6138:	66 0f       	add	r22, r22
    613a:	77 1f       	adc	r23, r23
    613c:	88 1f       	adc	r24, r24
    613e:	99 1f       	adc	r25, r25
    6140:	08 95       	ret

00006142 <__ultoa_ncheck>:
    6142:	bb 27       	eor	r27, r27

00006144 <__ultoa_common>:
    6144:	fa 01       	movw	r30, r20
    6146:	a6 2f       	mov	r26, r22
    6148:	62 17       	cp	r22, r18
    614a:	71 05       	cpc	r23, r1
    614c:	81 05       	cpc	r24, r1
    614e:	91 05       	cpc	r25, r1
    6150:	33 0b       	sbc	r19, r19
    6152:	30 fb       	bst	r19, 0
    6154:	66 f0       	brts	.+24     	; 0x616e <__ultoa_common+0x2a>
    6156:	aa 27       	eor	r26, r26
    6158:	66 0f       	add	r22, r22
    615a:	77 1f       	adc	r23, r23
    615c:	88 1f       	adc	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	aa 1f       	adc	r26, r26
    6162:	a2 17       	cp	r26, r18
    6164:	10 f0       	brcs	.+4      	; 0x616a <__ultoa_common+0x26>
    6166:	a2 1b       	sub	r26, r18
    6168:	63 95       	inc	r22
    616a:	38 50       	subi	r19, 0x08	; 8
    616c:	a9 f7       	brne	.-22     	; 0x6158 <__ultoa_common+0x14>
    616e:	a0 5d       	subi	r26, 0xD0	; 208
    6170:	aa 33       	cpi	r26, 0x3A	; 58
    6172:	08 f0       	brcs	.+2      	; 0x6176 <__ultoa_common+0x32>
    6174:	a9 5d       	subi	r26, 0xD9	; 217
    6176:	a1 93       	st	Z+, r26
    6178:	36 f7       	brtc	.-52     	; 0x6146 <__ultoa_common+0x2>
    617a:	b1 11       	cpse	r27, r1
    617c:	b1 93       	st	Z+, r27
    617e:	10 82       	st	Z, r1
    6180:	ca 01       	movw	r24, r20
    6182:	81 c2       	rjmp	.+1282   	; 0x6686 <strrev>

00006184 <__utoa_ncheck>:
    6184:	bb 27       	eor	r27, r27

00006186 <__utoa_common>:
    6186:	fb 01       	movw	r30, r22
    6188:	55 27       	eor	r21, r21
    618a:	aa 27       	eor	r26, r26
    618c:	88 0f       	add	r24, r24
    618e:	99 1f       	adc	r25, r25
    6190:	aa 1f       	adc	r26, r26
    6192:	a4 17       	cp	r26, r20
    6194:	10 f0       	brcs	.+4      	; 0x619a <__utoa_common+0x14>
    6196:	a4 1b       	sub	r26, r20
    6198:	83 95       	inc	r24
    619a:	50 51       	subi	r21, 0x10	; 16
    619c:	b9 f7       	brne	.-18     	; 0x618c <__utoa_common+0x6>
    619e:	a0 5d       	subi	r26, 0xD0	; 208
    61a0:	aa 33       	cpi	r26, 0x3A	; 58
    61a2:	08 f0       	brcs	.+2      	; 0x61a6 <__utoa_common+0x20>
    61a4:	a9 5d       	subi	r26, 0xD9	; 217
    61a6:	a1 93       	st	Z+, r26
    61a8:	00 97       	sbiw	r24, 0x00	; 0
    61aa:	79 f7       	brne	.-34     	; 0x618a <__utoa_common+0x4>
    61ac:	b1 11       	cpse	r27, r1
    61ae:	b1 93       	st	Z+, r27
    61b0:	11 92       	st	Z+, r1
    61b2:	cb 01       	movw	r24, r22
    61b4:	68 c2       	rjmp	.+1232   	; 0x6686 <strrev>

000061b6 <dtoa_prf>:
    61b6:	4f 92       	push	r4
    61b8:	5f 92       	push	r5
    61ba:	6f 92       	push	r6
    61bc:	7f 92       	push	r7
    61be:	9f 92       	push	r9
    61c0:	af 92       	push	r10
    61c2:	bf 92       	push	r11
    61c4:	cf 92       	push	r12
    61c6:	df 92       	push	r13
    61c8:	ef 92       	push	r14
    61ca:	ff 92       	push	r15
    61cc:	0f 93       	push	r16
    61ce:	1f 93       	push	r17
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    61d8:	29 97       	sbiw	r28, 0x09	; 9
    61da:	0f b6       	in	r0, 0x3f	; 63
    61dc:	f8 94       	cli
    61de:	de bf       	out	0x3e, r29	; 62
    61e0:	0f be       	out	0x3f, r0	; 63
    61e2:	cd bf       	out	0x3d, r28	; 61
    61e4:	6a 01       	movw	r12, r20
    61e6:	12 2f       	mov	r17, r18
    61e8:	b0 2e       	mov	r11, r16
    61ea:	2b e3       	ldi	r18, 0x3B	; 59
    61ec:	20 17       	cp	r18, r16
    61ee:	20 f0       	brcs	.+8      	; 0x61f8 <dtoa_prf+0x42>
    61f0:	ff 24       	eor	r15, r15
    61f2:	f3 94       	inc	r15
    61f4:	f0 0e       	add	r15, r16
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <dtoa_prf+0x46>
    61f8:	bc e3       	ldi	r27, 0x3C	; 60
    61fa:	fb 2e       	mov	r15, r27
    61fc:	0f 2d       	mov	r16, r15
    61fe:	27 e0       	ldi	r18, 0x07	; 7
    6200:	ae 01       	movw	r20, r28
    6202:	4f 5f       	subi	r20, 0xFF	; 255
    6204:	5f 4f       	sbci	r21, 0xFF	; 255
    6206:	64 d1       	rcall	.+712    	; 0x64d0 <__ftoa_engine>
    6208:	ac 01       	movw	r20, r24
    620a:	89 81       	ldd	r24, Y+1	; 0x01
    620c:	98 2f       	mov	r25, r24
    620e:	99 70       	andi	r25, 0x09	; 9
    6210:	91 30       	cpi	r25, 0x01	; 1
    6212:	31 f0       	breq	.+12     	; 0x6220 <dtoa_prf+0x6a>
    6214:	e1 fc       	sbrc	r14, 1
    6216:	06 c0       	rjmp	.+12     	; 0x6224 <dtoa_prf+0x6e>
    6218:	e0 fe       	sbrs	r14, 0
    621a:	06 c0       	rjmp	.+12     	; 0x6228 <dtoa_prf+0x72>
    621c:	90 e2       	ldi	r25, 0x20	; 32
    621e:	05 c0       	rjmp	.+10     	; 0x622a <dtoa_prf+0x74>
    6220:	9d e2       	ldi	r25, 0x2D	; 45
    6222:	03 c0       	rjmp	.+6      	; 0x622a <dtoa_prf+0x74>
    6224:	9b e2       	ldi	r25, 0x2B	; 43
    6226:	01 c0       	rjmp	.+2      	; 0x622a <dtoa_prf+0x74>
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	ee 2d       	mov	r30, r14
    622c:	e0 71       	andi	r30, 0x10	; 16
    622e:	83 ff       	sbrs	r24, 3
    6230:	3c c0       	rjmp	.+120    	; 0x62aa <dtoa_prf+0xf4>
    6232:	91 11       	cpse	r25, r1
    6234:	02 c0       	rjmp	.+4      	; 0x623a <dtoa_prf+0x84>
    6236:	83 e0       	ldi	r24, 0x03	; 3
    6238:	01 c0       	rjmp	.+2      	; 0x623c <dtoa_prf+0x86>
    623a:	84 e0       	ldi	r24, 0x04	; 4
    623c:	81 17       	cp	r24, r17
    623e:	18 f4       	brcc	.+6      	; 0x6246 <dtoa_prf+0x90>
    6240:	21 2f       	mov	r18, r17
    6242:	28 1b       	sub	r18, r24
    6244:	01 c0       	rjmp	.+2      	; 0x6248 <dtoa_prf+0x92>
    6246:	20 e0       	ldi	r18, 0x00	; 0
    6248:	e1 11       	cpse	r30, r1
    624a:	0b c0       	rjmp	.+22     	; 0x6262 <dtoa_prf+0xac>
    624c:	f6 01       	movw	r30, r12
    624e:	82 2f       	mov	r24, r18
    6250:	30 e2       	ldi	r19, 0x20	; 32
    6252:	88 23       	and	r24, r24
    6254:	19 f0       	breq	.+6      	; 0x625c <dtoa_prf+0xa6>
    6256:	31 93       	st	Z+, r19
    6258:	81 50       	subi	r24, 0x01	; 1
    625a:	fb cf       	rjmp	.-10     	; 0x6252 <dtoa_prf+0x9c>
    625c:	c2 0e       	add	r12, r18
    625e:	d1 1c       	adc	r13, r1
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	99 23       	and	r25, r25
    6264:	29 f0       	breq	.+10     	; 0x6270 <dtoa_prf+0xba>
    6266:	d6 01       	movw	r26, r12
    6268:	9c 93       	st	X, r25
    626a:	f6 01       	movw	r30, r12
    626c:	31 96       	adiw	r30, 0x01	; 1
    626e:	6f 01       	movw	r12, r30
    6270:	c6 01       	movw	r24, r12
    6272:	03 96       	adiw	r24, 0x03	; 3
    6274:	e2 fe       	sbrs	r14, 2
    6276:	0a c0       	rjmp	.+20     	; 0x628c <dtoa_prf+0xd6>
    6278:	3e e4       	ldi	r19, 0x4E	; 78
    627a:	d6 01       	movw	r26, r12
    627c:	3c 93       	st	X, r19
    627e:	41 e4       	ldi	r20, 0x41	; 65
    6280:	11 96       	adiw	r26, 0x01	; 1
    6282:	4c 93       	st	X, r20
    6284:	11 97       	sbiw	r26, 0x01	; 1
    6286:	12 96       	adiw	r26, 0x02	; 2
    6288:	3c 93       	st	X, r19
    628a:	06 c0       	rjmp	.+12     	; 0x6298 <dtoa_prf+0xe2>
    628c:	3e e6       	ldi	r19, 0x6E	; 110
    628e:	f6 01       	movw	r30, r12
    6290:	30 83       	st	Z, r19
    6292:	41 e6       	ldi	r20, 0x61	; 97
    6294:	41 83       	std	Z+1, r20	; 0x01
    6296:	32 83       	std	Z+2, r19	; 0x02
    6298:	fc 01       	movw	r30, r24
    629a:	32 2f       	mov	r19, r18
    629c:	40 e2       	ldi	r20, 0x20	; 32
    629e:	33 23       	and	r19, r19
    62a0:	09 f4       	brne	.+2      	; 0x62a4 <dtoa_prf+0xee>
    62a2:	42 c0       	rjmp	.+132    	; 0x6328 <dtoa_prf+0x172>
    62a4:	41 93       	st	Z+, r20
    62a6:	31 50       	subi	r19, 0x01	; 1
    62a8:	fa cf       	rjmp	.-12     	; 0x629e <dtoa_prf+0xe8>
    62aa:	82 ff       	sbrs	r24, 2
    62ac:	44 c0       	rjmp	.+136    	; 0x6336 <dtoa_prf+0x180>
    62ae:	91 11       	cpse	r25, r1
    62b0:	02 c0       	rjmp	.+4      	; 0x62b6 <dtoa_prf+0x100>
    62b2:	83 e0       	ldi	r24, 0x03	; 3
    62b4:	01 c0       	rjmp	.+2      	; 0x62b8 <dtoa_prf+0x102>
    62b6:	84 e0       	ldi	r24, 0x04	; 4
    62b8:	81 17       	cp	r24, r17
    62ba:	18 f4       	brcc	.+6      	; 0x62c2 <dtoa_prf+0x10c>
    62bc:	21 2f       	mov	r18, r17
    62be:	28 1b       	sub	r18, r24
    62c0:	01 c0       	rjmp	.+2      	; 0x62c4 <dtoa_prf+0x10e>
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	e1 11       	cpse	r30, r1
    62c6:	0b c0       	rjmp	.+22     	; 0x62de <dtoa_prf+0x128>
    62c8:	f6 01       	movw	r30, r12
    62ca:	82 2f       	mov	r24, r18
    62cc:	30 e2       	ldi	r19, 0x20	; 32
    62ce:	88 23       	and	r24, r24
    62d0:	19 f0       	breq	.+6      	; 0x62d8 <dtoa_prf+0x122>
    62d2:	31 93       	st	Z+, r19
    62d4:	81 50       	subi	r24, 0x01	; 1
    62d6:	fb cf       	rjmp	.-10     	; 0x62ce <dtoa_prf+0x118>
    62d8:	c2 0e       	add	r12, r18
    62da:	d1 1c       	adc	r13, r1
    62dc:	20 e0       	ldi	r18, 0x00	; 0
    62de:	99 23       	and	r25, r25
    62e0:	29 f0       	breq	.+10     	; 0x62ec <dtoa_prf+0x136>
    62e2:	d6 01       	movw	r26, r12
    62e4:	9c 93       	st	X, r25
    62e6:	f6 01       	movw	r30, r12
    62e8:	31 96       	adiw	r30, 0x01	; 1
    62ea:	6f 01       	movw	r12, r30
    62ec:	c6 01       	movw	r24, r12
    62ee:	03 96       	adiw	r24, 0x03	; 3
    62f0:	e2 fe       	sbrs	r14, 2
    62f2:	0b c0       	rjmp	.+22     	; 0x630a <dtoa_prf+0x154>
    62f4:	39 e4       	ldi	r19, 0x49	; 73
    62f6:	d6 01       	movw	r26, r12
    62f8:	3c 93       	st	X, r19
    62fa:	3e e4       	ldi	r19, 0x4E	; 78
    62fc:	11 96       	adiw	r26, 0x01	; 1
    62fe:	3c 93       	st	X, r19
    6300:	11 97       	sbiw	r26, 0x01	; 1
    6302:	36 e4       	ldi	r19, 0x46	; 70
    6304:	12 96       	adiw	r26, 0x02	; 2
    6306:	3c 93       	st	X, r19
    6308:	07 c0       	rjmp	.+14     	; 0x6318 <dtoa_prf+0x162>
    630a:	39 e6       	ldi	r19, 0x69	; 105
    630c:	f6 01       	movw	r30, r12
    630e:	30 83       	st	Z, r19
    6310:	3e e6       	ldi	r19, 0x6E	; 110
    6312:	31 83       	std	Z+1, r19	; 0x01
    6314:	36 e6       	ldi	r19, 0x66	; 102
    6316:	32 83       	std	Z+2, r19	; 0x02
    6318:	fc 01       	movw	r30, r24
    631a:	32 2f       	mov	r19, r18
    631c:	40 e2       	ldi	r20, 0x20	; 32
    631e:	33 23       	and	r19, r19
    6320:	19 f0       	breq	.+6      	; 0x6328 <dtoa_prf+0x172>
    6322:	41 93       	st	Z+, r20
    6324:	31 50       	subi	r19, 0x01	; 1
    6326:	fb cf       	rjmp	.-10     	; 0x631e <dtoa_prf+0x168>
    6328:	fc 01       	movw	r30, r24
    632a:	e2 0f       	add	r30, r18
    632c:	f1 1d       	adc	r31, r1
    632e:	10 82       	st	Z, r1
    6330:	8e ef       	ldi	r24, 0xFE	; 254
    6332:	9f ef       	ldi	r25, 0xFF	; 255
    6334:	b7 c0       	rjmp	.+366    	; 0x64a4 <dtoa_prf+0x2ee>
    6336:	f1 e0       	ldi	r31, 0x01	; 1
    6338:	91 11       	cpse	r25, r1
    633a:	01 c0       	rjmp	.+2      	; 0x633e <dtoa_prf+0x188>
    633c:	f0 e0       	ldi	r31, 0x00	; 0
    633e:	6f 2f       	mov	r22, r31
    6340:	70 e0       	ldi	r23, 0x00	; 0
    6342:	14 16       	cp	r1, r20
    6344:	15 06       	cpc	r1, r21
    6346:	24 f4       	brge	.+8      	; 0x6350 <dtoa_prf+0x19a>
    6348:	9a 01       	movw	r18, r20
    634a:	2f 5f       	subi	r18, 0xFF	; 255
    634c:	3f 4f       	sbci	r19, 0xFF	; 255
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <dtoa_prf+0x19e>
    6350:	21 e0       	ldi	r18, 0x01	; 1
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	26 0f       	add	r18, r22
    6356:	37 1f       	adc	r19, r23
    6358:	bb 20       	and	r11, r11
    635a:	29 f0       	breq	.+10     	; 0x6366 <dtoa_prf+0x1b0>
    635c:	6b 2d       	mov	r22, r11
    635e:	70 e0       	ldi	r23, 0x00	; 0
    6360:	6f 5f       	subi	r22, 0xFF	; 255
    6362:	7f 4f       	sbci	r23, 0xFF	; 255
    6364:	02 c0       	rjmp	.+4      	; 0x636a <dtoa_prf+0x1b4>
    6366:	60 e0       	ldi	r22, 0x00	; 0
    6368:	70 e0       	ldi	r23, 0x00	; 0
    636a:	26 0f       	add	r18, r22
    636c:	37 1f       	adc	r19, r23
    636e:	61 2f       	mov	r22, r17
    6370:	70 e0       	ldi	r23, 0x00	; 0
    6372:	26 17       	cp	r18, r22
    6374:	37 07       	cpc	r19, r23
    6376:	1c f4       	brge	.+6      	; 0x637e <dtoa_prf+0x1c8>
    6378:	12 1b       	sub	r17, r18
    637a:	21 2f       	mov	r18, r17
    637c:	01 c0       	rjmp	.+2      	; 0x6380 <dtoa_prf+0x1ca>
    637e:	20 e0       	ldi	r18, 0x00	; 0
    6380:	3e 2d       	mov	r19, r14
    6382:	38 71       	andi	r19, 0x18	; 24
    6384:	59 f4       	brne	.+22     	; 0x639c <dtoa_prf+0x1e6>
    6386:	d6 01       	movw	r26, r12
    6388:	32 2f       	mov	r19, r18
    638a:	60 e2       	ldi	r22, 0x20	; 32
    638c:	33 23       	and	r19, r19
    638e:	19 f0       	breq	.+6      	; 0x6396 <dtoa_prf+0x1e0>
    6390:	6d 93       	st	X+, r22
    6392:	31 50       	subi	r19, 0x01	; 1
    6394:	fb cf       	rjmp	.-10     	; 0x638c <dtoa_prf+0x1d6>
    6396:	c2 0e       	add	r12, r18
    6398:	d1 1c       	adc	r13, r1
    639a:	20 e0       	ldi	r18, 0x00	; 0
    639c:	ff 23       	and	r31, r31
    639e:	31 f0       	breq	.+12     	; 0x63ac <dtoa_prf+0x1f6>
    63a0:	d6 01       	movw	r26, r12
    63a2:	9c 93       	st	X, r25
    63a4:	b6 01       	movw	r22, r12
    63a6:	6f 5f       	subi	r22, 0xFF	; 255
    63a8:	7f 4f       	sbci	r23, 0xFF	; 255
    63aa:	6b 01       	movw	r12, r22
    63ac:	e1 11       	cpse	r30, r1
    63ae:	0b c0       	rjmp	.+22     	; 0x63c6 <dtoa_prf+0x210>
    63b0:	f6 01       	movw	r30, r12
    63b2:	92 2f       	mov	r25, r18
    63b4:	30 e3       	ldi	r19, 0x30	; 48
    63b6:	99 23       	and	r25, r25
    63b8:	19 f0       	breq	.+6      	; 0x63c0 <dtoa_prf+0x20a>
    63ba:	31 93       	st	Z+, r19
    63bc:	91 50       	subi	r25, 0x01	; 1
    63be:	fb cf       	rjmp	.-10     	; 0x63b6 <dtoa_prf+0x200>
    63c0:	c2 0e       	add	r12, r18
    63c2:	d1 1c       	adc	r13, r1
    63c4:	20 e0       	ldi	r18, 0x00	; 0
    63c6:	9f 2d       	mov	r25, r15
    63c8:	94 0f       	add	r25, r20
    63ca:	3a 81       	ldd	r19, Y+2	; 0x02
    63cc:	78 2f       	mov	r23, r24
    63ce:	70 71       	andi	r23, 0x10	; 16
    63d0:	a7 2e       	mov	r10, r23
    63d2:	84 ff       	sbrs	r24, 4
    63d4:	03 c0       	rjmp	.+6      	; 0x63dc <dtoa_prf+0x226>
    63d6:	31 33       	cpi	r19, 0x31	; 49
    63d8:	09 f4       	brne	.+2      	; 0x63dc <dtoa_prf+0x226>
    63da:	91 50       	subi	r25, 0x01	; 1
    63dc:	19 16       	cp	r1, r25
    63de:	24 f4       	brge	.+8      	; 0x63e8 <dtoa_prf+0x232>
    63e0:	99 30       	cpi	r25, 0x09	; 9
    63e2:	18 f0       	brcs	.+6      	; 0x63ea <dtoa_prf+0x234>
    63e4:	98 e0       	ldi	r25, 0x08	; 8
    63e6:	01 c0       	rjmp	.+2      	; 0x63ea <dtoa_prf+0x234>
    63e8:	91 e0       	ldi	r25, 0x01	; 1
    63ea:	e4 2f       	mov	r30, r20
    63ec:	85 2f       	mov	r24, r21
    63ee:	57 ff       	sbrs	r21, 7
    63f0:	02 c0       	rjmp	.+4      	; 0x63f6 <dtoa_prf+0x240>
    63f2:	e0 e0       	ldi	r30, 0x00	; 0
    63f4:	80 e0       	ldi	r24, 0x00	; 0
    63f6:	6e 2f       	mov	r22, r30
    63f8:	78 2f       	mov	r23, r24
    63fa:	e0 e0       	ldi	r30, 0x00	; 0
    63fc:	f0 e0       	ldi	r31, 0x00	; 0
    63fe:	ae e2       	ldi	r26, 0x2E	; 46
    6400:	9a 2e       	mov	r9, r26
    6402:	3a 01       	movw	r6, r20
    6404:	69 1a       	sub	r6, r25
    6406:	71 08       	sbc	r7, r1
    6408:	2a 01       	movw	r4, r20
    640a:	46 1a       	sub	r4, r22
    640c:	57 0a       	sbc	r5, r23
    640e:	0b 2d       	mov	r16, r11
    6410:	10 e0       	ldi	r17, 0x00	; 0
    6412:	11 95       	neg	r17
    6414:	01 95       	neg	r16
    6416:	11 09       	sbc	r17, r1
    6418:	6f 3f       	cpi	r22, 0xFF	; 255
    641a:	8f ef       	ldi	r24, 0xFF	; 255
    641c:	78 07       	cpc	r23, r24
    641e:	29 f4       	brne	.+10     	; 0x642a <dtoa_prf+0x274>
    6420:	d6 01       	movw	r26, r12
    6422:	9c 92       	st	X, r9
    6424:	c6 01       	movw	r24, r12
    6426:	01 96       	adiw	r24, 0x01	; 1
    6428:	6c 01       	movw	r12, r24
    642a:	46 17       	cp	r20, r22
    642c:	57 07       	cpc	r21, r23
    642e:	84 f0       	brlt	.+32     	; 0x6450 <dtoa_prf+0x29a>
    6430:	66 16       	cp	r6, r22
    6432:	77 06       	cpc	r7, r23
    6434:	6c f4       	brge	.+26     	; 0x6450 <dtoa_prf+0x29a>
    6436:	7f 01       	movw	r14, r30
    6438:	e4 0c       	add	r14, r4
    643a:	f5 1c       	adc	r15, r5
    643c:	a1 e0       	ldi	r26, 0x01	; 1
    643e:	b0 e0       	ldi	r27, 0x00	; 0
    6440:	ac 0f       	add	r26, r28
    6442:	bd 1f       	adc	r27, r29
    6444:	ea 0e       	add	r14, r26
    6446:	fb 1e       	adc	r15, r27
    6448:	d7 01       	movw	r26, r14
    644a:	11 96       	adiw	r26, 0x01	; 1
    644c:	bc 90       	ld	r11, X
    644e:	02 c0       	rjmp	.+4      	; 0x6454 <dtoa_prf+0x29e>
    6450:	90 e3       	ldi	r25, 0x30	; 48
    6452:	b9 2e       	mov	r11, r25
    6454:	61 50       	subi	r22, 0x01	; 1
    6456:	71 09       	sbc	r23, r1
    6458:	31 96       	adiw	r30, 0x01	; 1
    645a:	c6 01       	movw	r24, r12
    645c:	01 96       	adiw	r24, 0x01	; 1
    645e:	7c 01       	movw	r14, r24
    6460:	60 17       	cp	r22, r16
    6462:	71 07       	cpc	r23, r17
    6464:	24 f0       	brlt	.+8      	; 0x646e <dtoa_prf+0x2b8>
    6466:	d6 01       	movw	r26, r12
    6468:	bc 92       	st	X, r11
    646a:	6c 01       	movw	r12, r24
    646c:	d5 cf       	rjmp	.-86     	; 0x6418 <dtoa_prf+0x262>
    646e:	64 17       	cp	r22, r20
    6470:	75 07       	cpc	r23, r21
    6472:	41 f4       	brne	.+16     	; 0x6484 <dtoa_prf+0x2ce>
    6474:	36 33       	cpi	r19, 0x36	; 54
    6476:	20 f4       	brcc	.+8      	; 0x6480 <dtoa_prf+0x2ca>
    6478:	35 33       	cpi	r19, 0x35	; 53
    647a:	21 f4       	brne	.+8      	; 0x6484 <dtoa_prf+0x2ce>
    647c:	a1 10       	cpse	r10, r1
    647e:	02 c0       	rjmp	.+4      	; 0x6484 <dtoa_prf+0x2ce>
    6480:	81 e3       	ldi	r24, 0x31	; 49
    6482:	b8 2e       	mov	r11, r24
    6484:	f6 01       	movw	r30, r12
    6486:	b0 82       	st	Z, r11
    6488:	f7 01       	movw	r30, r14
    648a:	82 2f       	mov	r24, r18
    648c:	90 e2       	ldi	r25, 0x20	; 32
    648e:	88 23       	and	r24, r24
    6490:	19 f0       	breq	.+6      	; 0x6498 <dtoa_prf+0x2e2>
    6492:	91 93       	st	Z+, r25
    6494:	81 50       	subi	r24, 0x01	; 1
    6496:	fb cf       	rjmp	.-10     	; 0x648e <dtoa_prf+0x2d8>
    6498:	f7 01       	movw	r30, r14
    649a:	e2 0f       	add	r30, r18
    649c:	f1 1d       	adc	r31, r1
    649e:	10 82       	st	Z, r1
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	29 96       	adiw	r28, 0x09	; 9
    64a6:	0f b6       	in	r0, 0x3f	; 63
    64a8:	f8 94       	cli
    64aa:	de bf       	out	0x3e, r29	; 62
    64ac:	0f be       	out	0x3f, r0	; 63
    64ae:	cd bf       	out	0x3d, r28	; 61
    64b0:	df 91       	pop	r29
    64b2:	cf 91       	pop	r28
    64b4:	1f 91       	pop	r17
    64b6:	0f 91       	pop	r16
    64b8:	ff 90       	pop	r15
    64ba:	ef 90       	pop	r14
    64bc:	df 90       	pop	r13
    64be:	cf 90       	pop	r12
    64c0:	bf 90       	pop	r11
    64c2:	af 90       	pop	r10
    64c4:	9f 90       	pop	r9
    64c6:	7f 90       	pop	r7
    64c8:	6f 90       	pop	r6
    64ca:	5f 90       	pop	r5
    64cc:	4f 90       	pop	r4
    64ce:	08 95       	ret

000064d0 <__ftoa_engine>:
    64d0:	28 30       	cpi	r18, 0x08	; 8
    64d2:	08 f0       	brcs	.+2      	; 0x64d6 <__ftoa_engine+0x6>
    64d4:	27 e0       	ldi	r18, 0x07	; 7
    64d6:	33 27       	eor	r19, r19
    64d8:	da 01       	movw	r26, r20
    64da:	99 0f       	add	r25, r25
    64dc:	31 1d       	adc	r19, r1
    64de:	87 fd       	sbrc	r24, 7
    64e0:	91 60       	ori	r25, 0x01	; 1
    64e2:	00 96       	adiw	r24, 0x00	; 0
    64e4:	61 05       	cpc	r22, r1
    64e6:	71 05       	cpc	r23, r1
    64e8:	39 f4       	brne	.+14     	; 0x64f8 <__ftoa_engine+0x28>
    64ea:	32 60       	ori	r19, 0x02	; 2
    64ec:	2e 5f       	subi	r18, 0xFE	; 254
    64ee:	3d 93       	st	X+, r19
    64f0:	30 e3       	ldi	r19, 0x30	; 48
    64f2:	2a 95       	dec	r18
    64f4:	e1 f7       	brne	.-8      	; 0x64ee <__ftoa_engine+0x1e>
    64f6:	08 95       	ret
    64f8:	9f 3f       	cpi	r25, 0xFF	; 255
    64fa:	30 f0       	brcs	.+12     	; 0x6508 <__ftoa_engine+0x38>
    64fc:	80 38       	cpi	r24, 0x80	; 128
    64fe:	71 05       	cpc	r23, r1
    6500:	61 05       	cpc	r22, r1
    6502:	09 f0       	breq	.+2      	; 0x6506 <__ftoa_engine+0x36>
    6504:	3c 5f       	subi	r19, 0xFC	; 252
    6506:	3c 5f       	subi	r19, 0xFC	; 252
    6508:	3d 93       	st	X+, r19
    650a:	91 30       	cpi	r25, 0x01	; 1
    650c:	08 f0       	brcs	.+2      	; 0x6510 <__ftoa_engine+0x40>
    650e:	80 68       	ori	r24, 0x80	; 128
    6510:	91 1d       	adc	r25, r1
    6512:	df 93       	push	r29
    6514:	cf 93       	push	r28
    6516:	1f 93       	push	r17
    6518:	0f 93       	push	r16
    651a:	ff 92       	push	r15
    651c:	ef 92       	push	r14
    651e:	19 2f       	mov	r17, r25
    6520:	98 7f       	andi	r25, 0xF8	; 248
    6522:	96 95       	lsr	r25
    6524:	e9 2f       	mov	r30, r25
    6526:	96 95       	lsr	r25
    6528:	96 95       	lsr	r25
    652a:	e9 0f       	add	r30, r25
    652c:	ff 27       	eor	r31, r31
    652e:	e1 57       	subi	r30, 0x71	; 113
    6530:	fd 4f       	sbci	r31, 0xFD	; 253
    6532:	99 27       	eor	r25, r25
    6534:	33 27       	eor	r19, r19
    6536:	ee 24       	eor	r14, r14
    6538:	ff 24       	eor	r15, r15
    653a:	a7 01       	movw	r20, r14
    653c:	e7 01       	movw	r28, r14
    653e:	05 90       	lpm	r0, Z+
    6540:	08 94       	sec
    6542:	07 94       	ror	r0
    6544:	28 f4       	brcc	.+10     	; 0x6550 <__ftoa_engine+0x80>
    6546:	36 0f       	add	r19, r22
    6548:	e7 1e       	adc	r14, r23
    654a:	f8 1e       	adc	r15, r24
    654c:	49 1f       	adc	r20, r25
    654e:	51 1d       	adc	r21, r1
    6550:	66 0f       	add	r22, r22
    6552:	77 1f       	adc	r23, r23
    6554:	88 1f       	adc	r24, r24
    6556:	99 1f       	adc	r25, r25
    6558:	06 94       	lsr	r0
    655a:	a1 f7       	brne	.-24     	; 0x6544 <__ftoa_engine+0x74>
    655c:	05 90       	lpm	r0, Z+
    655e:	07 94       	ror	r0
    6560:	28 f4       	brcc	.+10     	; 0x656c <__ftoa_engine+0x9c>
    6562:	e7 0e       	add	r14, r23
    6564:	f8 1e       	adc	r15, r24
    6566:	49 1f       	adc	r20, r25
    6568:	56 1f       	adc	r21, r22
    656a:	c1 1d       	adc	r28, r1
    656c:	77 0f       	add	r23, r23
    656e:	88 1f       	adc	r24, r24
    6570:	99 1f       	adc	r25, r25
    6572:	66 1f       	adc	r22, r22
    6574:	06 94       	lsr	r0
    6576:	a1 f7       	brne	.-24     	; 0x6560 <__ftoa_engine+0x90>
    6578:	05 90       	lpm	r0, Z+
    657a:	07 94       	ror	r0
    657c:	28 f4       	brcc	.+10     	; 0x6588 <__ftoa_engine+0xb8>
    657e:	f8 0e       	add	r15, r24
    6580:	49 1f       	adc	r20, r25
    6582:	56 1f       	adc	r21, r22
    6584:	c7 1f       	adc	r28, r23
    6586:	d1 1d       	adc	r29, r1
    6588:	88 0f       	add	r24, r24
    658a:	99 1f       	adc	r25, r25
    658c:	66 1f       	adc	r22, r22
    658e:	77 1f       	adc	r23, r23
    6590:	06 94       	lsr	r0
    6592:	a1 f7       	brne	.-24     	; 0x657c <__ftoa_engine+0xac>
    6594:	05 90       	lpm	r0, Z+
    6596:	07 94       	ror	r0
    6598:	20 f4       	brcc	.+8      	; 0x65a2 <__ftoa_engine+0xd2>
    659a:	49 0f       	add	r20, r25
    659c:	56 1f       	adc	r21, r22
    659e:	c7 1f       	adc	r28, r23
    65a0:	d8 1f       	adc	r29, r24
    65a2:	99 0f       	add	r25, r25
    65a4:	66 1f       	adc	r22, r22
    65a6:	77 1f       	adc	r23, r23
    65a8:	88 1f       	adc	r24, r24
    65aa:	06 94       	lsr	r0
    65ac:	a9 f7       	brne	.-22     	; 0x6598 <__ftoa_engine+0xc8>
    65ae:	84 91       	lpm	r24, Z
    65b0:	10 95       	com	r17
    65b2:	17 70       	andi	r17, 0x07	; 7
    65b4:	41 f0       	breq	.+16     	; 0x65c6 <__ftoa_engine+0xf6>
    65b6:	d6 95       	lsr	r29
    65b8:	c7 95       	ror	r28
    65ba:	57 95       	ror	r21
    65bc:	47 95       	ror	r20
    65be:	f7 94       	ror	r15
    65c0:	e7 94       	ror	r14
    65c2:	1a 95       	dec	r17
    65c4:	c1 f7       	brne	.-16     	; 0x65b6 <__ftoa_engine+0xe6>
    65c6:	e5 e3       	ldi	r30, 0x35	; 53
    65c8:	f2 e0       	ldi	r31, 0x02	; 2
    65ca:	68 94       	set
    65cc:	15 90       	lpm	r1, Z+
    65ce:	15 91       	lpm	r17, Z+
    65d0:	35 91       	lpm	r19, Z+
    65d2:	65 91       	lpm	r22, Z+
    65d4:	95 91       	lpm	r25, Z+
    65d6:	05 90       	lpm	r0, Z+
    65d8:	7f e2       	ldi	r23, 0x2F	; 47
    65da:	73 95       	inc	r23
    65dc:	e1 18       	sub	r14, r1
    65de:	f1 0a       	sbc	r15, r17
    65e0:	43 0b       	sbc	r20, r19
    65e2:	56 0b       	sbc	r21, r22
    65e4:	c9 0b       	sbc	r28, r25
    65e6:	d0 09       	sbc	r29, r0
    65e8:	c0 f7       	brcc	.-16     	; 0x65da <__ftoa_engine+0x10a>
    65ea:	e1 0c       	add	r14, r1
    65ec:	f1 1e       	adc	r15, r17
    65ee:	43 1f       	adc	r20, r19
    65f0:	56 1f       	adc	r21, r22
    65f2:	c9 1f       	adc	r28, r25
    65f4:	d0 1d       	adc	r29, r0
    65f6:	7e f4       	brtc	.+30     	; 0x6616 <__ftoa_engine+0x146>
    65f8:	70 33       	cpi	r23, 0x30	; 48
    65fa:	11 f4       	brne	.+4      	; 0x6600 <__ftoa_engine+0x130>
    65fc:	8a 95       	dec	r24
    65fe:	e6 cf       	rjmp	.-52     	; 0x65cc <__ftoa_engine+0xfc>
    6600:	e8 94       	clt
    6602:	01 50       	subi	r16, 0x01	; 1
    6604:	30 f0       	brcs	.+12     	; 0x6612 <__ftoa_engine+0x142>
    6606:	08 0f       	add	r16, r24
    6608:	0a f4       	brpl	.+2      	; 0x660c <__ftoa_engine+0x13c>
    660a:	00 27       	eor	r16, r16
    660c:	02 17       	cp	r16, r18
    660e:	08 f4       	brcc	.+2      	; 0x6612 <__ftoa_engine+0x142>
    6610:	20 2f       	mov	r18, r16
    6612:	23 95       	inc	r18
    6614:	02 2f       	mov	r16, r18
    6616:	7a 33       	cpi	r23, 0x3A	; 58
    6618:	28 f0       	brcs	.+10     	; 0x6624 <__ftoa_engine+0x154>
    661a:	79 e3       	ldi	r23, 0x39	; 57
    661c:	7d 93       	st	X+, r23
    661e:	2a 95       	dec	r18
    6620:	e9 f7       	brne	.-6      	; 0x661c <__ftoa_engine+0x14c>
    6622:	10 c0       	rjmp	.+32     	; 0x6644 <__ftoa_engine+0x174>
    6624:	7d 93       	st	X+, r23
    6626:	2a 95       	dec	r18
    6628:	89 f6       	brne	.-94     	; 0x65cc <__ftoa_engine+0xfc>
    662a:	06 94       	lsr	r0
    662c:	97 95       	ror	r25
    662e:	67 95       	ror	r22
    6630:	37 95       	ror	r19
    6632:	17 95       	ror	r17
    6634:	17 94       	ror	r1
    6636:	e1 18       	sub	r14, r1
    6638:	f1 0a       	sbc	r15, r17
    663a:	43 0b       	sbc	r20, r19
    663c:	56 0b       	sbc	r21, r22
    663e:	c9 0b       	sbc	r28, r25
    6640:	d0 09       	sbc	r29, r0
    6642:	98 f0       	brcs	.+38     	; 0x666a <__ftoa_engine+0x19a>
    6644:	23 95       	inc	r18
    6646:	7e 91       	ld	r23, -X
    6648:	73 95       	inc	r23
    664a:	7a 33       	cpi	r23, 0x3A	; 58
    664c:	08 f0       	brcs	.+2      	; 0x6650 <__ftoa_engine+0x180>
    664e:	70 e3       	ldi	r23, 0x30	; 48
    6650:	7c 93       	st	X, r23
    6652:	20 13       	cpse	r18, r16
    6654:	b8 f7       	brcc	.-18     	; 0x6644 <__ftoa_engine+0x174>
    6656:	7e 91       	ld	r23, -X
    6658:	70 61       	ori	r23, 0x10	; 16
    665a:	7d 93       	st	X+, r23
    665c:	30 f0       	brcs	.+12     	; 0x666a <__ftoa_engine+0x19a>
    665e:	83 95       	inc	r24
    6660:	71 e3       	ldi	r23, 0x31	; 49
    6662:	7d 93       	st	X+, r23
    6664:	70 e3       	ldi	r23, 0x30	; 48
    6666:	2a 95       	dec	r18
    6668:	e1 f7       	brne	.-8      	; 0x6662 <__ftoa_engine+0x192>
    666a:	11 24       	eor	r1, r1
    666c:	ef 90       	pop	r14
    666e:	ff 90       	pop	r15
    6670:	0f 91       	pop	r16
    6672:	1f 91       	pop	r17
    6674:	cf 91       	pop	r28
    6676:	df 91       	pop	r29
    6678:	99 27       	eor	r25, r25
    667a:	87 fd       	sbrc	r24, 7
    667c:	90 95       	com	r25
    667e:	08 95       	ret

00006680 <__ctype_isfalse>:
    6680:	99 27       	eor	r25, r25
    6682:	88 27       	eor	r24, r24

00006684 <__ctype_istrue>:
    6684:	08 95       	ret

00006686 <strrev>:
    6686:	dc 01       	movw	r26, r24
    6688:	fc 01       	movw	r30, r24
    668a:	67 2f       	mov	r22, r23
    668c:	71 91       	ld	r23, Z+
    668e:	77 23       	and	r23, r23
    6690:	e1 f7       	brne	.-8      	; 0x668a <strrev+0x4>
    6692:	32 97       	sbiw	r30, 0x02	; 2
    6694:	04 c0       	rjmp	.+8      	; 0x669e <strrev+0x18>
    6696:	7c 91       	ld	r23, X
    6698:	6d 93       	st	X+, r22
    669a:	70 83       	st	Z, r23
    669c:	62 91       	ld	r22, -Z
    669e:	ae 17       	cp	r26, r30
    66a0:	bf 07       	cpc	r27, r31
    66a2:	c8 f3       	brcs	.-14     	; 0x6696 <strrev+0x10>
    66a4:	08 95       	ret

000066a6 <eeprom_read_byte>:
    66a6:	f9 99       	sbic	0x1f, 1	; 31
    66a8:	fe cf       	rjmp	.-4      	; 0x66a6 <eeprom_read_byte>
    66aa:	92 bd       	out	0x22, r25	; 34
    66ac:	81 bd       	out	0x21, r24	; 33
    66ae:	f8 9a       	sbi	0x1f, 0	; 31
    66b0:	99 27       	eor	r25, r25
    66b2:	80 b5       	in	r24, 0x20	; 32
    66b4:	08 95       	ret

000066b6 <eeprom_write_byte>:
    66b6:	26 2f       	mov	r18, r22

000066b8 <eeprom_write_r18>:
    66b8:	f9 99       	sbic	0x1f, 1	; 31
    66ba:	fe cf       	rjmp	.-4      	; 0x66b8 <eeprom_write_r18>
    66bc:	1f ba       	out	0x1f, r1	; 31
    66be:	92 bd       	out	0x22, r25	; 34
    66c0:	81 bd       	out	0x21, r24	; 33
    66c2:	20 bd       	out	0x20, r18	; 32
    66c4:	0f b6       	in	r0, 0x3f	; 63
    66c6:	f8 94       	cli
    66c8:	fa 9a       	sbi	0x1f, 2	; 31
    66ca:	f9 9a       	sbi	0x1f, 1	; 31
    66cc:	0f be       	out	0x3f, r0	; 63
    66ce:	01 96       	adiw	r24, 0x01	; 1
    66d0:	08 95       	ret

000066d2 <__do_global_dtors>:
    66d2:	12 e0       	ldi	r17, 0x02	; 2
    66d4:	c0 e3       	ldi	r28, 0x30	; 48
    66d6:	d2 e0       	ldi	r29, 0x02	; 2
    66d8:	03 c0       	rjmp	.+6      	; 0x66e0 <__do_global_dtors+0xe>
    66da:	fe 01       	movw	r30, r28
    66dc:	c2 d8       	rcall	.-3708   	; 0x5862 <__tablejump2__>
    66de:	21 96       	adiw	r28, 0x01	; 1
    66e0:	c2 33       	cpi	r28, 0x32	; 50
    66e2:	d1 07       	cpc	r29, r17
    66e4:	d1 f7       	brne	.-12     	; 0x66da <__do_global_dtors+0x8>
    66e6:	f8 94       	cli

000066e8 <__stop_program>:
    66e8:	ff cf       	rjmp	.-2      	; 0x66e8 <__stop_program>
