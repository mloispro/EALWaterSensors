
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  000061e8  0000627c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000061e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042d  008001e6  008001e6  00006362  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001030  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00022326  00000000  00000000  00007430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004859  00000000  00000000  00029756  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a5fd  00000000  00000000  0002dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000031a4  00000000  00000000  000385ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011b52  00000000  00000000  0003b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a030  00000000  00000000  0004d2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f88  00000000  00000000  000572d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b990  00000000  00000000  0005825a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	11 c2       	rjmp	.+1058   	; 0x424 <__dtors_end>
       2:	00 00       	nop
       4:	37 c2       	rjmp	.+1134   	; 0x474 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c2       	rjmp	.+1130   	; 0x474 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c c6       	rjmp	.+3096   	; 0xc26 <__vector_3>
       e:	00 00       	nop
      10:	0a c6       	rjmp	.+3092   	; 0xc26 <__vector_3>
      12:	00 00       	nop
      14:	08 c6       	rjmp	.+3088   	; 0xc26 <__vector_3>
      16:	00 00       	nop
      18:	2d c2       	rjmp	.+1114   	; 0x474 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2b c2       	rjmp	.+1110   	; 0x474 <__bad_interrupt>
      1e:	00 00       	nop
      20:	29 c2       	rjmp	.+1106   	; 0x474 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c2       	rjmp	.+1102   	; 0x474 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c2       	rjmp	.+1098   	; 0x474 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c2       	rjmp	.+1094   	; 0x474 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c2       	rjmp	.+1090   	; 0x474 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c2       	rjmp	.+1086   	; 0x474 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c2       	rjmp	.+1082   	; 0x474 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c2       	rjmp	.+1078   	; 0x474 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <__vector_16>
      44:	17 c2       	rjmp	.+1070   	; 0x474 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <__vector_18>
      4c:	0c 94 26 24 	jmp	0x484c	; 0x484c <__vector_19>
      50:	11 c2       	rjmp	.+1058   	; 0x474 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c2       	rjmp	.+1054   	; 0x474 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c2       	rjmp	.+1050   	; 0x474 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c2       	rjmp	.+1046   	; 0x474 <__bad_interrupt>
      5e:	00 00       	nop
      60:	68 c2       	rjmp	.+1232   	; 0x532 <__vector_24>
      62:	00 00       	nop
      64:	07 c2       	rjmp	.+1038   	; 0x474 <__bad_interrupt>
      66:	00 00       	nop
      68:	9e 03       	fmulsu	r17, r22
      6a:	a1 03       	fmuls	r18, r17
      6c:	a1 03       	fmuls	r18, r17
      6e:	a1 03       	fmuls	r18, r17
      70:	a1 03       	fmuls	r18, r17
      72:	a1 03       	fmuls	r18, r17
      74:	a1 03       	fmuls	r18, r17
      76:	a1 03       	fmuls	r18, r17
      78:	b9 02       	muls	r27, r25
      7a:	a1 03       	fmuls	r18, r17
      7c:	a1 03       	fmuls	r18, r17
      7e:	a1 03       	fmuls	r18, r17
      80:	a1 03       	fmuls	r18, r17
      82:	a1 03       	fmuls	r18, r17
      84:	a1 03       	fmuls	r18, r17
      86:	a1 03       	fmuls	r18, r17
      88:	b9 02       	muls	r27, r25
      8a:	a1 03       	fmuls	r18, r17
      8c:	a1 03       	fmuls	r18, r17
      8e:	a1 03       	fmuls	r18, r17
      90:	a1 03       	fmuls	r18, r17
      92:	a1 03       	fmuls	r18, r17
      94:	a1 03       	fmuls	r18, r17
      96:	a1 03       	fmuls	r18, r17
      98:	c1 02       	muls	r28, r17
      9a:	a1 03       	fmuls	r18, r17
      9c:	a1 03       	fmuls	r18, r17
      9e:	a1 03       	fmuls	r18, r17
      a0:	a1 03       	fmuls	r18, r17
      a2:	a1 03       	fmuls	r18, r17
      a4:	a1 03       	fmuls	r18, r17
      a6:	a1 03       	fmuls	r18, r17
      a8:	e6 02       	muls	r30, r22
      aa:	a1 03       	fmuls	r18, r17
      ac:	a1 03       	fmuls	r18, r17
      ae:	a1 03       	fmuls	r18, r17
      b0:	a1 03       	fmuls	r18, r17
      b2:	a1 03       	fmuls	r18, r17
      b4:	a1 03       	fmuls	r18, r17
      b6:	a1 03       	fmuls	r18, r17
      b8:	c1 02       	muls	r28, r17
      ba:	a1 03       	fmuls	r18, r17
      bc:	a1 03       	fmuls	r18, r17
      be:	a1 03       	fmuls	r18, r17
      c0:	a1 03       	fmuls	r18, r17
      c2:	a1 03       	fmuls	r18, r17
      c4:	a1 03       	fmuls	r18, r17
      c6:	a1 03       	fmuls	r18, r17
      c8:	eb 02       	muls	r30, r27
      ca:	a1 03       	fmuls	r18, r17
      cc:	a1 03       	fmuls	r18, r17
      ce:	a1 03       	fmuls	r18, r17
      d0:	a1 03       	fmuls	r18, r17
      d2:	a1 03       	fmuls	r18, r17
      d4:	a1 03       	fmuls	r18, r17
      d6:	a1 03       	fmuls	r18, r17
      d8:	f0 02       	muls	r31, r16
      da:	a1 03       	fmuls	r18, r17
      dc:	a1 03       	fmuls	r18, r17
      de:	a1 03       	fmuls	r18, r17
      e0:	a1 03       	fmuls	r18, r17
      e2:	a1 03       	fmuls	r18, r17
      e4:	a1 03       	fmuls	r18, r17
      e6:	a1 03       	fmuls	r18, r17
      e8:	01 03       	mulsu	r16, r17
      ea:	a1 03       	fmuls	r18, r17
      ec:	a1 03       	fmuls	r18, r17
      ee:	a1 03       	fmuls	r18, r17
      f0:	a1 03       	fmuls	r18, r17
      f2:	a1 03       	fmuls	r18, r17
      f4:	a1 03       	fmuls	r18, r17
      f6:	a1 03       	fmuls	r18, r17
      f8:	2a 03       	fmul	r18, r18
      fa:	a1 03       	fmuls	r18, r17
      fc:	a1 03       	fmuls	r18, r17
      fe:	a1 03       	fmuls	r18, r17
     100:	a1 03       	fmuls	r18, r17
     102:	a1 03       	fmuls	r18, r17
     104:	a1 03       	fmuls	r18, r17
     106:	a1 03       	fmuls	r18, r17
     108:	f5 02       	muls	r31, r21
     10a:	a1 03       	fmuls	r18, r17
     10c:	a1 03       	fmuls	r18, r17
     10e:	a1 03       	fmuls	r18, r17
     110:	a1 03       	fmuls	r18, r17
     112:	a1 03       	fmuls	r18, r17
     114:	a1 03       	fmuls	r18, r17
     116:	a1 03       	fmuls	r18, r17
     118:	0f 03       	fmul	r16, r23
     11a:	a1 03       	fmuls	r18, r17
     11c:	a1 03       	fmuls	r18, r17
     11e:	a1 03       	fmuls	r18, r17
     120:	a1 03       	fmuls	r18, r17
     122:	a1 03       	fmuls	r18, r17
     124:	a1 03       	fmuls	r18, r17
     126:	a1 03       	fmuls	r18, r17
     128:	2c 03       	fmul	r18, r20
     12a:	a1 03       	fmuls	r18, r17
     12c:	a1 03       	fmuls	r18, r17
     12e:	a1 03       	fmuls	r18, r17
     130:	a1 03       	fmuls	r18, r17
     132:	a1 03       	fmuls	r18, r17
     134:	a1 03       	fmuls	r18, r17
     136:	a1 03       	fmuls	r18, r17
     138:	2c 03       	fmul	r18, r20
     13a:	a1 03       	fmuls	r18, r17
     13c:	a1 03       	fmuls	r18, r17
     13e:	a1 03       	fmuls	r18, r17
     140:	a1 03       	fmuls	r18, r17
     142:	a1 03       	fmuls	r18, r17
     144:	a1 03       	fmuls	r18, r17
     146:	a1 03       	fmuls	r18, r17
     148:	2c 03       	fmul	r18, r20
     14a:	a1 03       	fmuls	r18, r17
     14c:	a1 03       	fmuls	r18, r17
     14e:	a1 03       	fmuls	r18, r17
     150:	a1 03       	fmuls	r18, r17
     152:	a1 03       	fmuls	r18, r17
     154:	a1 03       	fmuls	r18, r17
     156:	a1 03       	fmuls	r18, r17
     158:	2c 03       	fmul	r18, r20
     15a:	a1 03       	fmuls	r18, r17
     15c:	a1 03       	fmuls	r18, r17
     15e:	a1 03       	fmuls	r18, r17
     160:	a1 03       	fmuls	r18, r17
     162:	a1 03       	fmuls	r18, r17
     164:	a1 03       	fmuls	r18, r17
     166:	a1 03       	fmuls	r18, r17
     168:	35 03       	mulsu	r19, r21
     16a:	a1 03       	fmuls	r18, r17
     16c:	a1 03       	fmuls	r18, r17
     16e:	a1 03       	fmuls	r18, r17
     170:	a1 03       	fmuls	r18, r17
     172:	a1 03       	fmuls	r18, r17
     174:	a1 03       	fmuls	r18, r17
     176:	a1 03       	fmuls	r18, r17
     178:	65 03       	mulsu	r22, r21
     17a:	a1 03       	fmuls	r18, r17
     17c:	a1 03       	fmuls	r18, r17
     17e:	a1 03       	fmuls	r18, r17
     180:	a1 03       	fmuls	r18, r17
     182:	a1 03       	fmuls	r18, r17
     184:	a1 03       	fmuls	r18, r17
     186:	a1 03       	fmuls	r18, r17
     188:	35 03       	mulsu	r19, r21
     18a:	a1 03       	fmuls	r18, r17
     18c:	a1 03       	fmuls	r18, r17
     18e:	a1 03       	fmuls	r18, r17
     190:	a1 03       	fmuls	r18, r17
     192:	a1 03       	fmuls	r18, r17
     194:	a1 03       	fmuls	r18, r17
     196:	a1 03       	fmuls	r18, r17
     198:	65 03       	mulsu	r22, r21
     19a:	a1 03       	fmuls	r18, r17
     19c:	a1 03       	fmuls	r18, r17
     19e:	a1 03       	fmuls	r18, r17
     1a0:	a1 03       	fmuls	r18, r17
     1a2:	a1 03       	fmuls	r18, r17
     1a4:	a1 03       	fmuls	r18, r17
     1a6:	a1 03       	fmuls	r18, r17
     1a8:	4d 03       	fmul	r20, r21
     1aa:	a1 03       	fmuls	r18, r17
     1ac:	a1 03       	fmuls	r18, r17
     1ae:	a1 03       	fmuls	r18, r17
     1b0:	a1 03       	fmuls	r18, r17
     1b2:	a1 03       	fmuls	r18, r17
     1b4:	a1 03       	fmuls	r18, r17
     1b6:	a1 03       	fmuls	r18, r17
     1b8:	69 03       	fmul	r22, r17
     1ba:	a1 03       	fmuls	r18, r17
     1bc:	a1 03       	fmuls	r18, r17
     1be:	a1 03       	fmuls	r18, r17
     1c0:	a1 03       	fmuls	r18, r17
     1c2:	a1 03       	fmuls	r18, r17
     1c4:	a1 03       	fmuls	r18, r17
     1c6:	a1 03       	fmuls	r18, r17
     1c8:	69 03       	fmul	r22, r17
     1ca:	a1 03       	fmuls	r18, r17
     1cc:	a1 03       	fmuls	r18, r17
     1ce:	a1 03       	fmuls	r18, r17
     1d0:	a1 03       	fmuls	r18, r17
     1d2:	a1 03       	fmuls	r18, r17
     1d4:	a1 03       	fmuls	r18, r17
     1d6:	a1 03       	fmuls	r18, r17
     1d8:	7e 03       	fmul	r23, r22
     1da:	a1 03       	fmuls	r18, r17
     1dc:	a1 03       	fmuls	r18, r17
     1de:	a1 03       	fmuls	r18, r17
     1e0:	a1 03       	fmuls	r18, r17
     1e2:	a1 03       	fmuls	r18, r17
     1e4:	a1 03       	fmuls	r18, r17
     1e6:	a1 03       	fmuls	r18, r17
     1e8:	98 03       	fmulsu	r17, r16
     1ea:	a1 03       	fmuls	r18, r17
     1ec:	a1 03       	fmuls	r18, r17
     1ee:	a1 03       	fmuls	r18, r17
     1f0:	a1 03       	fmuls	r18, r17
     1f2:	a1 03       	fmuls	r18, r17
     1f4:	a1 03       	fmuls	r18, r17
     1f6:	a1 03       	fmuls	r18, r17
     1f8:	98 03       	fmulsu	r17, r16

000001fa <__trampolines_end>:
     1fa:	4e 41       	sbci	r20, 0x1E	; 30
     1fc:	4e 49       	Address 0x000001fc is out of bounds.
.word	0xffff	; ????

000001fd <pstr_inity>:
     1fd:	49 4e 49 54 59                                      INITY

00000202 <pstr_inf>:
     202:	49 4e 46                                            INF

00000205 <pwr_m10>:
     205:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     215:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021d <pwr_p10>:
     21d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     23d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     24d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     25d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     26d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     27d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     28d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     29d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2ad:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2bd:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2cd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2dd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2ed:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2fd:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     30d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     31d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     32d:	3d 27                                               ='

0000032f <_ZZN7LCDBase9ClearLineEsE3__c>:
     32f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000340 <_ZZN8PHSensor16CalculateAverageEPiiE3__c>:
     340:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     350:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     360:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

0000036a <_ZZN9TDSSensor16CalculateAverageEPiiE3__c>:
     36a:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     37a:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     38a:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

00000394 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     394:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     3a4:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     3b4:	76 65 64 3a 20 00                                   ved: .

000003ba <digital_pin_to_timer_PGM>:
     3ba:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3ca:	00 00 00 00                                         ....

000003ce <digital_pin_to_bit_mask_PGM>:
     3ce:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3de:	04 08 10 20                                         ... 

000003e2 <digital_pin_to_port_PGM>:
     3e2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3f2:	03 03 03 03                                         ....

000003f6 <port_to_input_PGM>:
     3f6:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000400 <port_to_output_PGM>:
     400:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000040a <port_to_mode_PGM>:
     40a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000414 <__ctors_start>:
     414:	cb 05       	cpc	r28, r11
     416:	69 0c       	add	r6, r9
     418:	be 1f       	adc	r27, r30
     41a:	2e 20       	and	r2, r14
     41c:	d4 20       	and	r13, r4
     41e:	54 24       	eor	r5, r4

00000420 <__ctors_end>:
     420:	cc 1f       	adc	r28, r28
     422:	3c 20       	and	r3, r12

00000424 <__dtors_end>:
     424:	11 24       	eor	r1, r1
     426:	1f be       	out	0x3f, r1	; 63
     428:	cf ef       	ldi	r28, 0xFF	; 255
     42a:	d8 e0       	ldi	r29, 0x08	; 8
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	cd bf       	out	0x3d, r28	; 61

00000430 <__do_copy_data>:
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	e8 ee       	ldi	r30, 0xE8	; 232
     438:	f1 e6       	ldi	r31, 0x61	; 97
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__do_copy_data+0x10>
     43c:	05 90       	lpm	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	a6 3e       	cpi	r26, 0xE6	; 230
     442:	b1 07       	cpc	r27, r17
     444:	d9 f7       	brne	.-10     	; 0x43c <__do_copy_data+0xc>

00000446 <__do_clear_bss>:
     446:	26 e0       	ldi	r18, 0x06	; 6
     448:	a6 ee       	ldi	r26, 0xE6	; 230
     44a:	b1 e0       	ldi	r27, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <.do_clear_bss_start>

0000044e <.do_clear_bss_loop>:
     44e:	1d 92       	st	X+, r1

00000450 <.do_clear_bss_start>:
     450:	a3 31       	cpi	r26, 0x13	; 19
     452:	b2 07       	cpc	r27, r18
     454:	e1 f7       	brne	.-8      	; 0x44e <.do_clear_bss_loop>

00000456 <__do_global_ctors>:
     456:	12 e0       	ldi	r17, 0x02	; 2
     458:	c0 e1       	ldi	r28, 0x10	; 16
     45a:	d2 e0       	ldi	r29, 0x02	; 2
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__do_global_ctors+0x10>
     45e:	21 97       	sbiw	r28, 0x01	; 1
     460:	fe 01       	movw	r30, r28
     462:	0e 94 48 2a 	call	0x5490	; 0x5490 <__tablejump2__>
     466:	ca 30       	cpi	r28, 0x0A	; 10
     468:	d1 07       	cpc	r29, r17
     46a:	c9 f7       	brne	.-14     	; 0x45e <__do_global_ctors+0x8>
     46c:	0e 94 82 24 	call	0x4904	; 0x4904 <main>
     470:	0c 94 e8 30 	jmp	0x61d0	; 0x61d0 <__do_global_dtors>

00000474 <__bad_interrupt>:
     474:	c5 cd       	rjmp	.-1142   	; 0x0 <__vectors>

00000476 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     476:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <twi_sendStop>
     480:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <twi_inRepStart>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	82 e1       	ldi	r24, 0x12	; 18
     488:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	83 e1       	ldi	r24, 0x13	; 19
     490:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
     494:	e9 eb       	ldi	r30, 0xB9	; 185
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	8e 7f       	andi	r24, 0xFE	; 254
     49c:	80 83       	st	Z, r24
     49e:	80 81       	ld	r24, Z
     4a0:	8d 7f       	andi	r24, 0xFD	; 253
     4a2:	80 83       	st	Z, r24
     4a4:	88 e4       	ldi	r24, 0x48	; 72
     4a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4aa:	85 e4       	ldi	r24, 0x45	; 69
     4ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4b0:	08 95       	ret

000004b2 <twi_setAddress>:
     4b2:	88 0f       	add	r24, r24
     4b4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     4b8:	08 95       	ret

000004ba <twi_transmit>:
     4ba:	61 32       	cpi	r22, 0x21	; 33
     4bc:	c8 f4       	brcc	.+50     	; 0x4f0 <twi_transmit+0x36>
     4be:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <twi_state>
     4c2:	24 30       	cpi	r18, 0x04	; 4
     4c4:	b9 f4       	brne	.+46     	; 0x4f4 <twi_transmit+0x3a>
     4c6:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <twi_txBufferLength>
     4ca:	66 23       	and	r22, r22
     4cc:	a9 f0       	breq	.+42     	; 0x4f8 <twi_transmit+0x3e>
     4ce:	fc 01       	movw	r30, r24
     4d0:	aa e0       	ldi	r26, 0x0A	; 10
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	26 2f       	mov	r18, r22
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	2f 5f       	subi	r18, 0xFF	; 255
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	28 0f       	add	r18, r24
     4e0:	39 1f       	adc	r19, r25
     4e2:	91 91       	ld	r25, Z+
     4e4:	9d 93       	st	X+, r25
     4e6:	e2 17       	cp	r30, r18
     4e8:	f3 07       	cpc	r31, r19
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <twi_transmit+0x28>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	08 95       	ret
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	08 95       	ret
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	08 95       	ret
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret

000004fc <twi_attachSlaveRxEvent>:
     4fc:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <twi_onSlaveReceive+0x1>
     500:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <twi_onSlaveReceive>
     504:	08 95       	ret

00000506 <twi_attachSlaveTxEvent>:
     506:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <twi_onSlaveTransmit+0x1>
     50a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <twi_onSlaveTransmit>
     50e:	08 95       	ret

00000510 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     510:	85 ed       	ldi	r24, 0xD5	; 213
     512:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     516:	ec eb       	ldi	r30, 0xBC	; 188
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	84 fd       	sbrc	r24, 4
     51e:	fd cf       	rjmp	.-6      	; 0x51a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     520:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     524:	08 95       	ret

00000526 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     526:	85 ec       	ldi	r24, 0xC5	; 197
     528:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     52c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     530:	08 95       	ret

00000532 <__vector_24>:
}

ISR(TWI_vect)
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
  switch(TW_STATUS){
     554:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     558:	e8 2f       	mov	r30, r24
     55a:	e8 7f       	andi	r30, 0xF8	; 248
     55c:	8e 2f       	mov	r24, r30
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	89 3c       	cpi	r24, 0xC9	; 201
     562:	91 05       	cpc	r25, r1
     564:	08 f0       	brcs	.+2      	; 0x568 <__vector_24+0x36>
     566:	ed c0       	rjmp	.+474    	; 0x742 <__vector_24+0x210>
     568:	fc 01       	movw	r30, r24
     56a:	ec 5c       	subi	r30, 0xCC	; 204
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     572:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <twi_slarw>
     576:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     57a:	85 ec       	ldi	r24, 0xC5	; 197
     57c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     580:	e0 c0       	rjmp	.+448    	; 0x742 <__vector_24+0x210>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     582:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <twi_masterBufferIndex>
     586:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_masterBufferLength>
     58a:	98 17       	cp	r25, r24
     58c:	80 f4       	brcc	.+32     	; 0x5ae <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     58e:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	8e 0f       	add	r24, r30
     596:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	e4 5d       	subi	r30, 0xD4	; 212
     59e:	fd 4f       	sbci	r31, 0xFD	; 253
     5a0:	80 81       	ld	r24, Z
     5a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5a6:	85 ec       	ldi	r24, 0xC5	; 197
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5ac:	ca c0       	rjmp	.+404    	; 0x742 <__vector_24+0x210>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     5ae:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <twi_sendStop>
     5b2:	88 23       	and	r24, r24
     5b4:	11 f0       	breq	.+4      	; 0x5ba <__vector_24+0x88>
          twi_stop();
     5b6:	ac df       	rcall	.-168    	; 0x510 <twi_stop>
     5b8:	c4 c0       	rjmp	.+392    	; 0x742 <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     5c0:	84 ea       	ldi	r24, 0xA4	; 164
     5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     5c6:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     5ca:	bb c0       	rjmp	.+374    	; 0x742 <__vector_24+0x210>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     5cc:	80 e2       	ldi	r24, 0x20	; 32
     5ce:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_stop();
     5d2:	9e df       	rcall	.-196    	; 0x510 <twi_stop>
      break;
     5d4:	b6 c0       	rjmp	.+364    	; 0x742 <__vector_24+0x210>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_stop();
     5dc:	99 df       	rcall	.-206    	; 0x510 <twi_stop>
      break;
     5de:	b1 c0       	rjmp	.+354    	; 0x742 <__vector_24+0x210>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     5e0:	88 e3       	ldi	r24, 0x38	; 56
     5e2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_releaseBus();
     5e6:	9f df       	rcall	.-194    	; 0x526 <twi_releaseBus>
      break;
     5e8:	ac c0       	rjmp	.+344    	; 0x742 <__vector_24+0x210>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     5ea:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	8e 0f       	add	r24, r30
     5f2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     5f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	e4 5d       	subi	r30, 0xD4	; 212
     5fe:	fd 4f       	sbci	r31, 0xFD	; 253
     600:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     602:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <twi_masterBufferIndex>
     606:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_masterBufferLength>
     60a:	98 17       	cp	r25, r24
     60c:	20 f4       	brcc	.+8      	; 0x616 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     60e:	85 ec       	ldi	r24, 0xC5	; 197
     610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     614:	96 c0       	rjmp	.+300    	; 0x742 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     616:	85 e8       	ldi	r24, 0x85	; 133
     618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     61c:	92 c0       	rjmp	.+292    	; 0x742 <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     61e:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	8e 0f       	add	r24, r30
     626:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     62a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	e4 5d       	subi	r30, 0xD4	; 212
     632:	fd 4f       	sbci	r31, 0xFD	; 253
     634:	80 83       	st	Z, r24
	if (twi_sendStop)
     636:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <twi_sendStop>
     63a:	88 23       	and	r24, r24
     63c:	11 f0       	breq	.+4      	; 0x642 <__vector_24+0x110>
          twi_stop();
     63e:	68 df       	rcall	.-304    	; 0x510 <twi_stop>
     640:	80 c0       	rjmp	.+256    	; 0x742 <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     648:	84 ea       	ldi	r24, 0xA4	; 164
     64a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     64e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     652:	77 c0       	rjmp	.+238    	; 0x742 <__vector_24+0x210>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     654:	5d df       	rcall	.-326    	; 0x510 <twi_stop>
      break;
     656:	75 c0       	rjmp	.+234    	; 0x742 <__vector_24+0x210>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     65e:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     662:	85 ec       	ldi	r24, 0xC5	; 197
     664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     668:	6c c0       	rjmp	.+216    	; 0x742 <__vector_24+0x210>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     66a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     66e:	80 32       	cpi	r24, 0x20	; 32
     670:	80 f4       	brcc	.+32     	; 0x692 <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     672:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	8e 0f       	add	r24, r30
     67a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <twi_rxBufferIndex>
     67e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e8 51       	subi	r30, 0x18	; 24
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     68a:	85 ec       	ldi	r24, 0xC5	; 197
     68c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     690:	58 c0       	rjmp	.+176    	; 0x742 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     692:	85 e8       	ldi	r24, 0x85	; 133
     694:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     698:	54 c0       	rjmp	.+168    	; 0x742 <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     69a:	45 df       	rcall	.-374    	; 0x526 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     69c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6a0:	80 32       	cpi	r24, 0x20	; 32
     6a2:	30 f4       	brcc	.+12     	; 0x6b0 <__vector_24+0x17e>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6a4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	e8 51       	subi	r30, 0x18	; 24
     6ac:	fe 4f       	sbci	r31, 0xFE	; 254
     6ae:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6b0:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <twi_onSlaveReceive>
     6ba:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <twi_onSlaveReceive+0x1>
     6be:	88 ee       	ldi	r24, 0xE8	; 232
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     6c4:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <twi_rxBufferIndex>
      break;
     6c8:	3c c0       	rjmp	.+120    	; 0x742 <__vector_24+0x210>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     6ca:	85 e8       	ldi	r24, 0x85	; 133
     6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d0:	38 c0       	rjmp	.+112    	; 0x742 <__vector_24+0x210>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     6d8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     6dc:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     6e0:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <twi_onSlaveTransmit>
     6e4:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <twi_onSlaveTransmit+0x1>
     6e8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6ea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_txBufferLength>
     6ee:	81 11       	cpse	r24, r1
     6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__vector_24+0x1ca>
        twi_txBufferLength = 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     6f8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     6fc:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <twi_txBufferIndex>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	8e 0f       	add	r24, r30
     704:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <twi_txBufferIndex>
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e6 5f       	subi	r30, 0xF6	; 246
     70c:	fd 4f       	sbci	r31, 0xFD	; 253
     70e:	80 81       	ld	r24, Z
     710:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     714:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <twi_txBufferIndex>
     718:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_txBufferLength>
     71c:	98 17       	cp	r25, r24
     71e:	20 f4       	brcc	.+8      	; 0x728 <__vector_24+0x1f6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     720:	85 ec       	ldi	r24, 0xC5	; 197
     722:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     726:	0d c0       	rjmp	.+26     	; 0x742 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     728:	85 e8       	ldi	r24, 0x85	; 133
     72a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     72e:	09 c0       	rjmp	.+18     	; 0x742 <__vector_24+0x210>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     730:	85 ec       	ldi	r24, 0xC5	; 197
     732:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     736:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
      break;
     73a:	03 c0       	rjmp	.+6      	; 0x742 <__vector_24+0x210>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     73c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
      twi_stop();
     740:	e7 de       	rcall	.-562    	; 0x510 <twi_stop>
      break;
  }
}
     742:	ff 91       	pop	r31
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     764:	a4 e0       	ldi	r26, 0x04	; 4
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e8 eb       	ldi	r30, 0xB8	; 184
     76a:	f3 e0       	ldi	r31, 0x03	; 3
     76c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	7c 83       	std	Y+4, r23	; 0x04
     776:	6b 83       	std	Y+3, r22	; 0x03
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	2b 81       	ldd	r18, Y+3	; 0x03
     77e:	3c 81       	ldd	r19, Y+4	; 0x04
     780:	fc 01       	movw	r30, r24
     782:	33 83       	std	Z+3, r19	; 0x03
     784:	22 83       	std	Z+2, r18	; 0x02
     786:	24 96       	adiw	r28, 0x04	; 4
     788:	e2 e0       	ldi	r30, 0x02	; 2
     78a:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000078e <_ZN5PrintC1Ev>:
     78e:	a2 e0       	ldi	r26, 0x02	; 2
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ed ec       	ldi	r30, 0xCD	; 205
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	22 ee       	ldi	r18, 0xE2	; 226
     7a4:	31 e0       	ldi	r19, 0x01	; 1
     7a6:	fc 01       	movw	r30, r24
     7a8:	31 83       	std	Z+1, r19	; 0x01
     7aa:	20 83       	st	Z, r18
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	fc 01       	movw	r30, r24
     7b2:	13 82       	std	Z+3, r1	; 0x03
     7b4:	12 82       	std	Z+2, r1	; 0x02
     7b6:	22 96       	adiw	r28, 0x02	; 2
     7b8:	e2 e0       	ldi	r30, 0x02	; 2
     7ba:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000007be <_ZN6StreamC1Ev>:
     7be:	a2 e0       	ldi	r26, 0x02	; 2
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	e5 ee       	ldi	r30, 0xE5	; 229
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	dd df       	rcall	.-70     	; 0x78e <_ZN5PrintC1Ev>
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	21 e6       	ldi	r18, 0x61	; 97
     7da:	31 e0       	ldi	r19, 0x01	; 1
     7dc:	fc 01       	movw	r30, r24
     7de:	31 83       	std	Z+1, r19	; 0x01
     7e0:	20 83       	st	Z, r18
     7e2:	29 81       	ldd	r18, Y+1	; 0x01
     7e4:	3a 81       	ldd	r19, Y+2	; 0x02
     7e6:	88 ee       	ldi	r24, 0xE8	; 232
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	84 83       	std	Z+4, r24	; 0x04
     7f2:	95 83       	std	Z+5, r25	; 0x05
     7f4:	a6 83       	std	Z+6, r26	; 0x06
     7f6:	b7 83       	std	Z+7, r27	; 0x07
     7f8:	22 96       	adiw	r28, 0x02	; 2
     7fa:	e2 e0       	ldi	r30, 0x02	; 2
     7fc:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000800 <_ZN7TwoWireC1Ev>:
     800:	a2 e0       	ldi	r26, 0x02	; 2
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e6 e0       	ldi	r30, 0x06	; 6
     806:	f4 e0       	ldi	r31, 0x04	; 4
     808:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	d4 df       	rcall	.-88     	; 0x7be <_ZN6StreamC1Ev>
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	21 e5       	ldi	r18, 0x51	; 81
     81c:	31 e0       	ldi	r19, 0x01	; 1
     81e:	fc 01       	movw	r30, r24
     820:	31 83       	std	Z+1, r19	; 0x01
     822:	20 83       	st	Z, r18
     824:	22 96       	adiw	r28, 0x02	; 2
     826:	e2 e0       	ldi	r30, 0x02	; 2
     828:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000082c <_ZN7TwoWire5beginEv>:
     82c:	a2 e0       	ldi	r26, 0x02	; 2
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ec e1       	ldi	r30, 0x1C	; 28
     832:	f4 e0       	ldi	r31, 0x04	; 4
     834:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     840:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     844:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     848:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     84c:	14 de       	rcall	.-984    	; 0x476 <twi_init>
     84e:	22 96       	adiw	r28, 0x02	; 2
     850:	e2 e0       	ldi	r30, 0x02	; 2
     852:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000856 <_ZN7TwoWire5beginEh>:
     856:	a3 e0       	ldi	r26, 0x03	; 3
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e1 e3       	ldi	r30, 0x31	; 49
     85c:	f4 e0       	ldi	r31, 0x04	; 4
     85e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     862:	9a 83       	std	Y+2, r25	; 0x02
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	6b 83       	std	Y+3, r22	; 0x03
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	23 de       	rcall	.-954    	; 0x4b2 <twi_setAddress>
     86c:	80 e7       	ldi	r24, 0x70	; 112
     86e:	95 e0       	ldi	r25, 0x05	; 5
     870:	4a de       	rcall	.-876    	; 0x506 <twi_attachSlaveTxEvent>
     872:	8a e2       	ldi	r24, 0x2A	; 42
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	42 de       	rcall	.-892    	; 0x4fc <twi_attachSlaveRxEvent>
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	d7 df       	rcall	.-82     	; 0x82c <_ZN7TwoWire5beginEv>
     87e:	23 96       	adiw	r28, 0x03	; 3
     880:	e2 e0       	ldi	r30, 0x02	; 2
     882:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000886 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     886:	a3 e0       	ldi	r26, 0x03	; 3
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     892:	9a 83       	std	Y+2, r25	; 0x02
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     898:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <_ZN7TwoWire12transmittingE>
     89c:	88 23       	and	r24, r24
     89e:	f9 f0       	breq	.+62     	; 0x8de <_ZN7TwoWire5writeEh+0x58>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8a0:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     8a4:	80 32       	cpi	r24, 0x20	; 32
     8a6:	40 f0       	brcs	.+16     	; 0x8b8 <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	59 df       	rcall	.-334    	; 0x764 <_ZN5Print13setWriteErrorEi>
      return 0;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	19 c0       	rjmp	.+50     	; 0x8ea <_ZN7TwoWire5writeEh+0x64>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     8b8:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	2b 81       	ldd	r18, Y+3	; 0x03
     8c2:	8a 58       	subi	r24, 0x8A	; 138
     8c4:	9d 4f       	sbci	r25, 0xFD	; 253
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
    ++txBufferIndex;
     8ca:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     8d4:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     8d8:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <_ZN7TwoWire5writeEh+0x60>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     8de:	ce 01       	movw	r24, r28
     8e0:	03 96       	adiw	r24, 0x03	; 3
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	ea dd       	rcall	.-1068   	; 0x4ba <twi_transmit>
  }
  return 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
}
     8ea:	23 96       	adiw	r28, 0x03	; 3
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000008f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     8fe:	9c 83       	std	Y+4, r25	; 0x04
     900:	8b 83       	std	Y+3, r24	; 0x03
     902:	7e 83       	std	Y+6, r23	; 0x06
     904:	6d 83       	std	Y+5, r22	; 0x05
     906:	58 87       	std	Y+8, r21	; 0x08
     908:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     90a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <_ZN7TwoWire12transmittingE>
     90e:	88 23       	and	r24, r24
     910:	29 f1       	breq	.+74     	; 0x95c <__stack+0x5d>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     912:	1a 82       	std	Y+2, r1	; 0x02
     914:	19 82       	std	Y+1, r1	; 0x01
     916:	1a c0       	rjmp	.+52     	; 0x94c <__stack+0x4d>
      write(data[i]);
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	fc 01       	movw	r30, r24
     924:	20 81       	ld	r18, Z
     926:	31 81       	ldd	r19, Z+1	; 0x01
     928:	4d 81       	ldd	r20, Y+5	; 0x05
     92a:	5e 81       	ldd	r21, Y+6	; 0x06
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	84 0f       	add	r24, r20
     932:	95 1f       	adc	r25, r21
     934:	fc 01       	movw	r30, r24
     936:	40 81       	ld	r20, Z
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	64 2f       	mov	r22, r20
     93e:	f9 01       	movw	r30, r18
     940:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	3a 81       	ldd	r19, Y+2	; 0x02
     950:	8f 81       	ldd	r24, Y+7	; 0x07
     952:	98 85       	ldd	r25, Y+8	; 0x08
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	f8 f2       	brcs	.-66     	; 0x918 <__stack+0x19>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x67>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     95c:	2f 81       	ldd	r18, Y+7	; 0x07
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	62 2f       	mov	r22, r18
     964:	aa dd       	rcall	.-1196   	; 0x4ba <twi_transmit>
  }
  return quantity;
     966:	8f 81       	ldd	r24, Y+7	; 0x07
     968:	98 85       	ldd	r25, Y+8	; 0x08
}
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	e2 e0       	ldi	r30, 0x02	; 2
     96e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000972 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     972:	a2 e0       	ldi	r26, 0x02	; 2
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	ef eb       	ldi	r30, 0xBF	; 191
     978:	f4 e0       	ldi	r31, 0x04	; 4
     97a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     982:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     986:	28 2f       	mov	r18, r24
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a9 01       	movw	r20, r18
     994:	48 1b       	sub	r20, r24
     996:	59 0b       	sbc	r21, r25
     998:	ca 01       	movw	r24, r20
}
     99a:	22 96       	adiw	r28, 0x02	; 2
     99c:	e2 e0       	ldi	r30, 0x02	; 2
     99e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000009a2 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     9a2:	a4 e0       	ldi	r26, 0x04	; 4
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     9ae:	9c 83       	std	Y+4, r25	; 0x04
     9b0:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	9a 83       	std	Y+2, r25	; 0x02
     9b8:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     9ba:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     9be:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     9c2:	98 17       	cp	r25, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     9c6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	8c 5a       	subi	r24, 0xAC	; 172
     9d0:	9d 4f       	sbci	r25, 0xFD	; 253
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	88 2f       	mov	r24, r24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	9a 83       	std	Y+2, r25	; 0x02
     9dc:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     9de:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9ec:	24 96       	adiw	r28, 0x04	; 4
     9ee:	e2 e0       	ldi	r30, 0x02	; 2
     9f0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000009f4 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     9f4:	a4 e0       	ldi	r26, 0x04	; 4
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f5 e0       	ldi	r31, 0x05	; 5
     9fc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     a0c:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a10:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     a14:	98 17       	cp	r25, r24
     a16:	60 f4       	brcc	.+24     	; 0xa30 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     a18:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	8c 5a       	subi	r24, 0xAC	; 172
     a22:	9d 4f       	sbci	r25, 0xFD	; 253
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9a 83       	std	Y+2, r25	; 0x02
     a2e:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a34:	24 96       	adiw	r28, 0x04	; 4
     a36:	e2 e0       	ldi	r30, 0x02	; 2
     a38:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000a3c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a3c:	a2 e0       	ldi	r26, 0x02	; 2
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e4 e2       	ldi	r30, 0x24	; 36
     a42:	f5 e0       	ldi	r31, 0x05	; 5
     a44:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     a48:	9a 83       	std	Y+2, r25	; 0x02
     a4a:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     a4c:	22 96       	adiw	r28, 0x02	; 2
     a4e:	e2 e0       	ldi	r30, 0x02	; 2
     a50:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000a54 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     a54:	a5 e0       	ldi	r26, 0x05	; 5
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e0 e3       	ldi	r30, 0x30	; 48
     a5a:	f5 e0       	ldi	r31, 0x05	; 5
     a5c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     a60:	9b 83       	std	Y+3, r25	; 0x03
     a62:	8a 83       	std	Y+2, r24	; 0x02
     a64:	7d 83       	std	Y+5, r23	; 0x05
     a66:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     a68:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
     a6c:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     a70:	89 2b       	or	r24, r25
     a72:	09 f4       	brne	.+2      	; 0xa76 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     a74:	31 c0       	rjmp	.+98     	; 0xad8 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     a76:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a7a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     a7e:	98 17       	cp	r25, r24
     a80:	08 f4       	brcc	.+2      	; 0xa84 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     a82:	2a c0       	rjmp	.+84     	; 0xad8 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     a84:	19 82       	std	Y+1, r1	; 0x01
     a86:	13 c0       	rjmp	.+38     	; 0xaae <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	29 81       	ldd	r18, Y+1	; 0x01
     a90:	22 2f       	mov	r18, r18
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	4a 81       	ldd	r20, Y+2	; 0x02
     a96:	5b 81       	ldd	r21, Y+3	; 0x03
     a98:	24 0f       	add	r18, r20
     a9a:	35 1f       	adc	r19, r21
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	8c 5a       	subi	r24, 0xAC	; 172
     aa2:	9d 4f       	sbci	r25, 0xFD	; 253
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	8c 81       	ldd	r24, Y+4	; 0x04
     ab6:	9d 81       	ldd	r25, Y+5	; 0x05
     ab8:	28 17       	cp	r18, r24
     aba:	39 07       	cpc	r19, r25
     abc:	2c f3       	brlt	.-54     	; 0xa88 <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     abe:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     ac8:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
     acc:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     ad0:	8c 81       	ldd	r24, Y+4	; 0x04
     ad2:	9d 81       	ldd	r25, Y+5	; 0x05
     ad4:	f9 01       	movw	r30, r18
     ad6:	09 95       	icall
}
     ad8:	25 96       	adiw	r28, 0x05	; 5
     ada:	e2 e0       	ldi	r30, 0x02	; 2
     adc:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000ae0 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e6 e7       	ldi	r30, 0x76	; 118
     ae6:	f5 e0       	ldi	r31, 0x05	; 5
     ae8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     aec:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_ZN7TwoWire14user_onRequestE>
     af0:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     af4:	89 2b       	or	r24, r25
     af6:	09 f4       	brne	.+2      	; 0xafa <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     af8:	0a c0       	rjmp	.+20     	; 0xb0e <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     afa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     afe:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     b02:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_ZN7TwoWire14user_onRequestE>
     b06:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     b0a:	fc 01       	movw	r30, r24
     b0c:	09 95       	icall
}
     b0e:	e2 e0       	ldi	r30, 0x02	; 2
     b10:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000b14 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     b14:	a4 e0       	ldi	r26, 0x04	; 4
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e0 e9       	ldi	r30, 0x90	; 144
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	7c 83       	std	Y+4, r23	; 0x04
     b26:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     b30:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
}
     b34:	24 96       	adiw	r28, 0x04	; 4
     b36:	e2 e0       	ldi	r30, 0x02	; 2
     b38:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000b3c <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     b3c:	a4 e0       	ldi	r26, 0x04	; 4
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e4 ea       	ldi	r30, 0xA4	; 164
     b42:	f5 e0       	ldi	r31, 0x05	; 5
     b44:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     b48:	9a 83       	std	Y+2, r25	; 0x02
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	7c 83       	std	Y+4, r23	; 0x04
     b4e:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     b58:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_ZN7TwoWire14user_onRequestE>
}
     b5c:	24 96       	adiw	r28, 0x04	; 4
     b5e:	e2 e0       	ldi	r30, 0x02	; 2
     b60:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000b64 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     b64:	a4 e0       	ldi	r26, 0x04	; 4
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e8 eb       	ldi	r30, 0xB8	; 184
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     b70:	9a 83       	std	Y+2, r25	; 0x02
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	7c 83       	std	Y+4, r23	; 0x04
     b76:	6b 83       	std	Y+3, r22	; 0x03
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	19 f4       	brne	.+6      	; 0xb8e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b88:	8d e9       	ldi	r24, 0x9D	; 157
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	39 de       	rcall	.-910    	; 0x800 <_ZN7TwoWireC1Ev>
     b8e:	24 96       	adiw	r28, 0x04	; 4
     b90:	e2 e0       	ldi	r30, 0x02	; 2
     b92:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000b96 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e1 ed       	ldi	r30, 0xD1	; 209
     b9c:	f5 e0       	ldi	r31, 0x05	; 5
     b9e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     ba2:	6f ef       	ldi	r22, 0xFF	; 255
     ba4:	7f ef       	ldi	r23, 0xFF	; 255
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	dc df       	rcall	.-72     	; 0xb64 <_Z41__static_initialization_and_destruction_0ii>
     bac:	e2 e0       	ldi	r30, 0x02	; 2
     bae:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000bb2 <_Z10DebugPulsehh>:
    setRxIntMsk(false);
    active_object = NULL;
    return true;
  }
  return false;
}
     bb2:	a2 e0       	ldi	r26, 0x02	; 2
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef ed       	ldi	r30, 0xDF	; 223
     bb8:	f5 e0       	ldi	r31, 0x05	; 5
     bba:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	6a 83       	std	Y+2, r22	; 0x02
     bc2:	22 96       	adiw	r28, 0x02	; 2
     bc4:	e2 e0       	ldi	r30, 0x02	; 2
     bc6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000bca <_ZN14SoftwareSerial10tunedDelayEj>:
     bca:	a4 e0       	ldi	r26, 0x04	; 4
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	eb ee       	ldi	r30, 0xEB	; 235
     bd0:	f5 e0       	ldi	r31, 0x05	; 5
     bd2:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     bd6:	9c 83       	std	Y+4, r25	; 0x04
     bd8:	8b 83       	std	Y+3, r24	; 0x03
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	24 96       	adiw	r28, 0x04	; 4
     bf0:	e2 e0       	ldi	r30, 0x02	; 2
     bf2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000bf6 <_ZN14SoftwareSerial11rx_pin_readEv>:
    ::);
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
     bf6:	a2 e0       	ldi	r26, 0x02	; 2
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e1 e0       	ldi	r30, 0x01	; 1
     bfc:	f6 e0       	ldi	r31, 0x06	; 6
     bfe:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	fc 01       	movw	r30, r24
     c0c:	86 85       	ldd	r24, Z+14	; 0x0e
     c0e:	97 85       	ldd	r25, Z+15	; 0x0f
     c10:	fc 01       	movw	r30, r24
     c12:	20 81       	ld	r18, Z
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	fc 01       	movw	r30, r24
     c1a:	85 85       	ldd	r24, Z+13	; 0x0d
     c1c:	82 23       	and	r24, r18
}
     c1e:	22 96       	adiw	r28, 0x02	; 2
     c20:	e2 e0       	ldi	r30, 0x02	; 2
     c22:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00000c26 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	2b 97       	sbiw	r28, 0x0b	; 11
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     c58:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZN14SoftwareSerial13active_objectE>
     c5c:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_ZN14SoftwareSerial13active_objectE+0x1>
     c60:	89 2b       	or	r24, r25
     c62:	09 f4       	brne	.+2      	; 0xc66 <__vector_3+0x40>
     c64:	f4 c0       	rjmp	.+488    	; 0xe4e <__vector_3+0x228>
  {
    active_object->recv();
     c66:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZN14SoftwareSerial13active_objectE>
     c6a:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_ZN14SoftwareSerial13active_objectE+0x1>
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     c72:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	fc 01       	movw	r30, r24
     c7a:	86 8d       	ldd	r24, Z+30	; 0x1e
     c7c:	82 70       	andi	r24, 0x02	; 2
     c7e:	88 23       	and	r24, r24
     c80:	49 f0       	breq	.+18     	; 0xc94 <__vector_3+0x6e>
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	b7 df       	rcall	.-146    	; 0xbf6 <_ZN14SoftwareSerial11rx_pin_readEv>
     c88:	98 2f       	mov	r25, r24
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	99 23       	and	r25, r25
     c8e:	51 f4       	brne	.+20     	; 0xca4 <__vector_3+0x7e>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <__vector_3+0x7e>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	ae df       	rcall	.-164    	; 0xbf6 <_ZN14SoftwareSerial11rx_pin_readEv>
     c9a:	98 2f       	mov	r25, r24
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	99 23       	and	r25, r25
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_3+0x7e>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	88 23       	and	r24, r24
     ca6:	09 f4       	brne	.+2      	; 0xcaa <__vector_3+0x84>
     ca8:	d2 c0       	rjmp	.+420    	; 0xe4e <__vector_3+0x228>
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	9d 83       	std	Y+5, r25	; 0x05
     cb0:	8c 83       	std	Y+4, r24	; 0x04
     cb2:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     cb4:	8e 81       	ldd	r24, Y+6	; 0x06
     cb6:	88 23       	and	r24, r24
     cb8:	a1 f0       	breq	.+40     	; 0xce2 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
     cbc:	9d 81       	ldd	r25, Y+5	; 0x05
     cbe:	fc 01       	movw	r30, r24
     cc0:	83 89       	ldd	r24, Z+19	; 0x13
     cc2:	94 89       	ldd	r25, Z+20	; 0x14
     cc4:	2c 81       	ldd	r18, Y+4	; 0x04
     cc6:	3d 81       	ldd	r19, Y+5	; 0x05
     cc8:	f9 01       	movw	r30, r18
     cca:	23 89       	ldd	r18, Z+19	; 0x13
     ccc:	34 89       	ldd	r19, Z+20	; 0x14
     cce:	f9 01       	movw	r30, r18
     cd0:	40 81       	ld	r20, Z
     cd2:	2c 81       	ldd	r18, Y+4	; 0x04
     cd4:	3d 81       	ldd	r19, Y+5	; 0x05
     cd6:	f9 01       	movw	r30, r18
     cd8:	25 89       	ldd	r18, Z+21	; 0x15
     cda:	24 2b       	or	r18, r20
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	15 c0       	rjmp	.+42     	; 0xd0c <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	fc 01       	movw	r30, r24
     ce8:	83 89       	ldd	r24, Z+19	; 0x13
     cea:	94 89       	ldd	r25, Z+20	; 0x14
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	f9 01       	movw	r30, r18
     cf2:	23 89       	ldd	r18, Z+19	; 0x13
     cf4:	34 89       	ldd	r19, Z+20	; 0x14
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	42 2f       	mov	r20, r18
     cfc:	2c 81       	ldd	r18, Y+4	; 0x04
     cfe:	3d 81       	ldd	r19, Y+5	; 0x05
     d00:	f9 01       	movw	r30, r18
     d02:	25 89       	ldd	r18, Z+21	; 0x15
     d04:	20 95       	com	r18
     d06:	24 23       	and	r18, r20
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	fc 01       	movw	r30, r24
     d12:	86 89       	ldd	r24, Z+22	; 0x16
     d14:	97 89       	ldd	r25, Z+23	; 0x17
     d16:	59 df       	rcall	.-334    	; 0xbca <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	8d e0       	ldi	r24, 0x0D	; 13
     d1c:	4a df       	rcall	.-364    	; 0xbb2 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d1e:	88 e0       	ldi	r24, 0x08	; 8
     d20:	8f 83       	std	Y+7, r24	; 0x07
     d22:	1f c0       	rjmp	.+62     	; 0xd62 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	fc 01       	movw	r30, r24
     d2a:	80 8d       	ldd	r24, Z+24	; 0x18
     d2c:	91 8d       	ldd	r25, Z+25	; 0x19
     d2e:	4d df       	rcall	.-358    	; 0xbca <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	95 95       	asr	r25
     d38:	87 95       	ror	r24
     d3a:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	8d e0       	ldi	r24, 0x0D	; 13
     d40:	38 df       	rcall	.-400    	; 0xbb2 <_Z10DebugPulsehh>
      if (rx_pin_read())
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	57 df       	rcall	.-338    	; 0xbf6 <_ZN14SoftwareSerial11rx_pin_readEv>
     d48:	98 2f       	mov	r25, r24
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	99 23       	and	r25, r25
     d4e:	09 f4       	brne	.+2      	; 0xd52 <__vector_3+0x12c>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	88 23       	and	r24, r24
     d54:	19 f0       	breq	.+6      	; 0xd5c <__vector_3+0x136>
        d |= 0x80;
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d5c:	8f 81       	ldd	r24, Y+7	; 0x07
     d5e:	81 50       	subi	r24, 0x01	; 1
     d60:	8f 83       	std	Y+7, r24	; 0x07
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	88 23       	and	r24, r24
     d66:	f1 f6       	brne	.-68     	; 0xd24 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	fc 01       	movw	r30, r24
     d6e:	86 8d       	ldd	r24, Z+30	; 0x1e
     d70:	82 70       	andi	r24, 0x02	; 2
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <__vector_3+0x156>
      d = ~d;
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	80 95       	com	r24
     d7a:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     d7c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	8f 73       	andi	r24, 0x3F	; 63
     d88:	90 78       	andi	r25, 0x80	; 128
     d8a:	99 23       	and	r25, r25
     d8c:	24 f4       	brge	.+8      	; 0xd96 <__vector_3+0x170>
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	80 6c       	ori	r24, 0xC0	; 192
     d92:	9f 6f       	ori	r25, 0xFF	; 255
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     d98:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_headE>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	28 85       	ldd	r18, Y+8	; 0x08
     da0:	29 17       	cp	r18, r25
     da2:	09 f4       	brne	.+2      	; 0xda6 <__vector_3+0x180>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	88 23       	and	r24, r24
     da8:	69 f0       	breq	.+26     	; 0xdc4 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     daa:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	85 55       	subi	r24, 0x55	; 85
     db4:	9d 4f       	sbci	r25, 0xFD	; 253
     db6:	2b 81       	ldd	r18, Y+3	; 0x03
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     dbc:	88 85       	ldd	r24, Y+8	; 0x08
     dbe:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	8b e0       	ldi	r24, 0x0B	; 11
     dc8:	f4 de       	rcall	.-536    	; 0xbb2 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	fc 01       	movw	r30, r24
     dd0:	26 8d       	ldd	r18, Z+30	; 0x1e
     dd2:	21 60       	ori	r18, 0x01	; 1
     dd4:	fc 01       	movw	r30, r24
     dd6:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	fc 01       	movw	r30, r24
     dde:	82 8d       	ldd	r24, Z+26	; 0x1a
     de0:	93 8d       	ldd	r25, Z+27	; 0x1b
     de2:	f3 de       	rcall	.-538    	; 0xbca <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	8b e0       	ldi	r24, 0x0B	; 11
     de8:	e4 de       	rcall	.-568    	; 0xbb2 <_Z10DebugPulsehh>
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	9a 87       	std	Y+10, r25	; 0x0a
     df0:	89 87       	std	Y+9, r24	; 0x09
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     df6:	8b 85       	ldd	r24, Y+11	; 0x0b
     df8:	88 23       	and	r24, r24
     dfa:	a1 f0       	breq	.+40     	; 0xe24 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	fc 01       	movw	r30, r24
     e02:	83 89       	ldd	r24, Z+19	; 0x13
     e04:	94 89       	ldd	r25, Z+20	; 0x14
     e06:	29 85       	ldd	r18, Y+9	; 0x09
     e08:	3a 85       	ldd	r19, Y+10	; 0x0a
     e0a:	f9 01       	movw	r30, r18
     e0c:	23 89       	ldd	r18, Z+19	; 0x13
     e0e:	34 89       	ldd	r19, Z+20	; 0x14
     e10:	f9 01       	movw	r30, r18
     e12:	40 81       	ld	r20, Z
     e14:	29 85       	ldd	r18, Y+9	; 0x09
     e16:	3a 85       	ldd	r19, Y+10	; 0x0a
     e18:	f9 01       	movw	r30, r18
     e1a:	25 89       	ldd	r18, Z+21	; 0x15
     e1c:	24 2b       	or	r18, r20
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
     e22:	15 c0       	rjmp	.+42     	; 0xe4e <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e24:	89 85       	ldd	r24, Y+9	; 0x09
     e26:	9a 85       	ldd	r25, Y+10	; 0x0a
     e28:	fc 01       	movw	r30, r24
     e2a:	83 89       	ldd	r24, Z+19	; 0x13
     e2c:	94 89       	ldd	r25, Z+20	; 0x14
     e2e:	29 85       	ldd	r18, Y+9	; 0x09
     e30:	3a 85       	ldd	r19, Y+10	; 0x0a
     e32:	f9 01       	movw	r30, r18
     e34:	23 89       	ldd	r18, Z+19	; 0x13
     e36:	34 89       	ldd	r19, Z+20	; 0x14
     e38:	f9 01       	movw	r30, r18
     e3a:	20 81       	ld	r18, Z
     e3c:	42 2f       	mov	r20, r18
     e3e:	29 85       	ldd	r18, Y+9	; 0x09
     e40:	3a 85       	ldd	r19, Y+10	; 0x0a
     e42:	f9 01       	movw	r30, r18
     e44:	25 89       	ldd	r18, Z+21	; 0x15
     e46:	20 95       	com	r18
     e48:	24 23       	and	r18, r20
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     e4e:	2b 96       	adiw	r28, 0x0b	; 11
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     e82:	8f 92       	push	r8
     e84:	af 92       	push	r10
     e86:	cf 92       	push	r12
     e88:	ef 92       	push	r14
     e8a:	0f 93       	push	r16
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	28 97       	sbiw	r28, 0x08	; 8
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6b 83       	std	Y+3, r22	; 0x03
     ea6:	4c 83       	std	Y+4, r20	; 0x04
     ea8:	2d 83       	std	Y+5, r18	; 0x05
     eaa:	0e 83       	std	Y+6, r16	; 0x06
     eac:	ef 82       	std	Y+7, r14	; 0x07
     eae:	c8 86       	std	Y+8, r12	; 0x08
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	6c dc       	rcall	.-1832   	; 0x78e <_ZN5PrintC1Ev>
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	21 e7       	ldi	r18, 0x71	; 113
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	fc 01       	movw	r30, r24
     ec0:	31 83       	std	Z+1, r19	; 0x01
     ec2:	20 83       	st	Z, r18
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	1f 92       	push	r1
     eca:	1f 92       	push	r1
     ecc:	1f 92       	push	r1
     ece:	1f 92       	push	r1
     ed0:	88 84       	ldd	r8, Y+8	; 0x08
     ed2:	af 80       	ldd	r10, Y+7	; 0x07
     ed4:	ce 80       	ldd	r12, Y+6	; 0x06
     ed6:	ed 80       	ldd	r14, Y+5	; 0x05
     ed8:	0c 81       	ldd	r16, Y+4	; 0x04
     eda:	2f ef       	ldi	r18, 0xFF	; 255
     edc:	4b 81       	ldd	r20, Y+3	; 0x03
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	12 d0       	rcall	.+36     	; 0xf06 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	28 96       	adiw	r28, 0x08	; 8
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	0f 91       	pop	r16
     efc:	ef 90       	pop	r14
     efe:	cf 90       	pop	r12
     f00:	af 90       	pop	r10
     f02:	8f 90       	pop	r8
     f04:	08 95       	ret

00000f06 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     f06:	8f 92       	push	r8
     f08:	af 92       	push	r10
     f0a:	cf 92       	push	r12
     f0c:	ef 92       	push	r14
     f0e:	0f 93       	push	r16
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	2a 97       	sbiw	r28, 0x0a	; 10
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	6b 83       	std	Y+3, r22	; 0x03
     f2a:	4c 83       	std	Y+4, r20	; 0x04
     f2c:	2d 83       	std	Y+5, r18	; 0x05
     f2e:	0e 83       	std	Y+6, r16	; 0x06
     f30:	ef 82       	std	Y+7, r14	; 0x07
     f32:	c8 86       	std	Y+8, r12	; 0x08
     f34:	a9 86       	std	Y+9, r10	; 0x09
     f36:	8a 86       	std	Y+10, r8	; 0x0a
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	fc 01       	movw	r30, r24
     f40:	24 83       	std	Z+4, r18	; 0x04
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	fc 01       	movw	r30, r24
     f4a:	25 83       	std	Z+5, r18	; 0x05
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	2e 81       	ldd	r18, Y+6	; 0x06
     f52:	fc 01       	movw	r30, r24
     f54:	26 83       	std	Z+6, r18	; 0x06
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	2f 81       	ldd	r18, Y+7	; 0x07
     f5c:	fc 01       	movw	r30, r24
     f5e:	27 83       	std	Z+7, r18	; 0x07
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	28 85       	ldd	r18, Y+8	; 0x08
     f66:	fc 01       	movw	r30, r24
     f68:	20 87       	std	Z+8, r18	; 0x08
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	29 85       	ldd	r18, Y+9	; 0x09
     f70:	fc 01       	movw	r30, r24
     f72:	21 87       	std	Z+9, r18	; 0x09
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	2a 85       	ldd	r18, Y+10	; 0x0a
     f7a:	fc 01       	movw	r30, r24
     f7c:	22 87       	std	Z+10, r18	; 0x0a
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	2c 89       	ldd	r18, Y+20	; 0x14
     f84:	fc 01       	movw	r30, r24
     f86:	23 87       	std	Z+11, r18	; 0x0b
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	2d 89       	ldd	r18, Y+21	; 0x15
     f8e:	fc 01       	movw	r30, r24
     f90:	24 87       	std	Z+12, r18	; 0x0c
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	2e 89       	ldd	r18, Y+22	; 0x16
     f98:	fc 01       	movw	r30, r24
     f9a:	25 87       	std	Z+13, r18	; 0x0d
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	2f 89       	ldd	r18, Y+23	; 0x17
     fa2:	fc 01       	movw	r30, r24
     fa4:	26 87       	std	Z+14, r18	; 0x0e
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 23       	and	r24, r24
     faa:	29 f0       	breq	.+10     	; 0xfb6 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	17 86       	std	Z+15, r1	; 0x0f
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	20 e1       	ldi	r18, 0x10	; 16
     fbc:	fc 01       	movw	r30, r24
     fbe:	27 87       	std	Z+15, r18	; 0x0f
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	60 e1       	ldi	r22, 0x10	; 16
     fca:	0e d0       	rcall	.+28     	; 0xfe8 <_ZN13LiquidCrystal5beginEhhh>
     fcc:	2a 96       	adiw	r28, 0x0a	; 10
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	0f 91       	pop	r16
     fde:	ef 90       	pop	r14
     fe0:	cf 90       	pop	r12
     fe2:	af 90       	pop	r10
     fe4:	8f 90       	pop	r8
     fe6:	08 95       	ret

00000fe8 <_ZN13LiquidCrystal5beginEhhh>:
     fe8:	a7 e0       	ldi	r26, 0x07	; 7
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea ef       	ldi	r30, 0xFA	; 250
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	6d 83       	std	Y+5, r22	; 0x05
     ffa:	4e 83       	std	Y+6, r20	; 0x06
     ffc:	2f 83       	std	Y+7, r18	; 0x07
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	50 f0       	brcs	.+20     	; 0x1018 <_ZN13LiquidCrystal5beginEhhh+0x30>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	87 85       	ldd	r24, Z+15	; 0x0f
    100c:	28 2f       	mov	r18, r24
    100e:	28 60       	ori	r18, 0x08	; 8
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	fc 01       	movw	r30, r24
    1016:	27 87       	std	Z+15, r18	; 0x0f
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	2e 81       	ldd	r18, Y+6	; 0x06
    101e:	fc 01       	movw	r30, r24
    1020:	23 8b       	std	Z+19, r18	; 0x13
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	ac 01       	movw	r20, r24
    102a:	40 5c       	subi	r20, 0xC0	; 192
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	8a 01       	movw	r16, r20
    103a:	40 e4       	ldi	r20, 0x40	; 64
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	e7 d0       	rcall	.+462    	; 0x1212 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    1044:	8f 81       	ldd	r24, Y+7	; 0x07
    1046:	88 23       	and	r24, r24
    1048:	69 f0       	breq	.+26     	; 0x1064 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	51 f4       	brne	.+20     	; 0x1064 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	fc 01       	movw	r30, r24
    1056:	87 85       	ldd	r24, Z+15	; 0x0f
    1058:	28 2f       	mov	r18, r24
    105a:	24 60       	ori	r18, 0x04	; 4
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	fc 01       	movw	r30, r24
    1062:	27 87       	std	Z+15, r18	; 0x0f
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	fc 01       	movw	r30, r24
    106a:	84 81       	ldd	r24, Z+4	; 0x04
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	fc 01       	movw	r30, r24
    1078:	85 81       	ldd	r24, Z+5	; 0x05
    107a:	8f 3f       	cpi	r24, 0xFF	; 255
    107c:	39 f0       	breq	.+14     	; 0x108c <_ZN13LiquidCrystal5beginEhhh+0xa4>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	fc 01       	movw	r30, r24
    1084:	85 81       	ldd	r24, Z+5	; 0x05
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	fc 01       	movw	r30, r24
    1092:	86 81       	ldd	r24, Z+6	; 0x06
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    109a:	1a 82       	std	Y+2, r1	; 0x02
    109c:	19 82       	std	Y+1, r1	; 0x01
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <_ZN13LiquidCrystal5beginEhhh+0xda>
    10a0:	2b 81       	ldd	r18, Y+3	; 0x03
    10a2:	3c 81       	ldd	r19, Y+4	; 0x04
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	07 96       	adiw	r24, 0x07	; 7
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	fc 01       	movw	r30, r24
    10c8:	87 85       	ldd	r24, Z+15	; 0x0f
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 71       	andi	r24, 0x10	; 16
    10d0:	99 27       	eor	r25, r25
    10d2:	89 2b       	or	r24, r25
    10d4:	19 f0       	breq	.+6      	; 0x10dc <_ZN13LiquidCrystal5beginEhhh+0xf4>
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <_ZN13LiquidCrystal5beginEhhh+0xf8>
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	29 81       	ldd	r18, Y+1	; 0x01
    10e2:	3a 81       	ldd	r19, Y+2	; 0x02
    10e4:	28 17       	cp	r18, r24
    10e6:	39 07       	cpc	r19, r25
    10e8:	dc f2       	brlt	.-74     	; 0x10a0 <_ZN13LiquidCrystal5beginEhhh+0xb8>
    10ea:	80 e5       	ldi	r24, 0x50	; 80
    10ec:	93 ec       	ldi	r25, 0xC3	; 195
    10ee:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	fc 01       	movw	r30, r24
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	fc 01       	movw	r30, r24
    1106:	86 81       	ldd	r24, Z+6	; 0x06
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	fc 01       	movw	r30, r24
    1114:	85 81       	ldd	r24, Z+5	; 0x05
    1116:	8f 3f       	cpi	r24, 0xFF	; 255
    1118:	39 f0       	breq	.+14     	; 0x1128 <_ZN13LiquidCrystal5beginEhhh+0x140>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	fc 01       	movw	r30, r24
    1120:	85 81       	ldd	r24, Z+5	; 0x05
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	fc 01       	movw	r30, r24
    112e:	87 85       	ldd	r24, Z+15	; 0x0f
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	80 71       	andi	r24, 0x10	; 16
    1136:	99 27       	eor	r25, r25
    1138:	89 2b       	or	r24, r25
    113a:	e9 f4       	brne	.+58     	; 0x1176 <_ZN13LiquidCrystal5beginEhhh+0x18e>
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	63 e0       	ldi	r22, 0x03	; 3
    1142:	91 d1       	rcall	.+802    	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
    1144:	84 e9       	ldi	r24, 0x94	; 148
    1146:	91 e1       	ldi	r25, 0x11	; 17
    1148:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	63 e0       	ldi	r22, 0x03	; 3
    1152:	89 d1       	rcall	.+786    	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
    1154:	84 e9       	ldi	r24, 0x94	; 148
    1156:	91 e1       	ldi	r25, 0x11	; 17
    1158:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	63 e0       	ldi	r22, 0x03	; 3
    1162:	81 d1       	rcall	.+770    	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
    1164:	86 e9       	ldi	r24, 0x96	; 150
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	62 e0       	ldi	r22, 0x02	; 2
    1172:	79 d1       	rcall	.+754    	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
    1174:	26 c0       	rjmp	.+76     	; 0x11c2 <_ZN13LiquidCrystal5beginEhhh+0x1da>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	fc 01       	movw	r30, r24
    117c:	87 85       	ldd	r24, Z+15	; 0x0f
    117e:	28 2f       	mov	r18, r24
    1180:	20 62       	ori	r18, 0x20	; 32
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	62 2f       	mov	r22, r18
    1188:	d6 d0       	rcall	.+428    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    118a:	84 e9       	ldi	r24, 0x94	; 148
    118c:	91 e1       	ldi	r25, 0x11	; 17
    118e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	fc 01       	movw	r30, r24
    1198:	87 85       	ldd	r24, Z+15	; 0x0f
    119a:	28 2f       	mov	r18, r24
    119c:	20 62       	ori	r18, 0x20	; 32
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	62 2f       	mov	r22, r18
    11a4:	c8 d0       	rcall	.+400    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    11a6:	86 e9       	ldi	r24, 0x96	; 150
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	fc 01       	movw	r30, r24
    11b4:	87 85       	ldd	r24, Z+15	; 0x0f
    11b6:	28 2f       	mov	r18, r24
    11b8:	20 62       	ori	r18, 0x20	; 32
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	62 2f       	mov	r22, r18
    11c0:	ba d0       	rcall	.+372    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	fc 01       	movw	r30, r24
    11c8:	87 85       	ldd	r24, Z+15	; 0x0f
    11ca:	28 2f       	mov	r18, r24
    11cc:	20 62       	ori	r18, 0x20	; 32
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	62 2f       	mov	r22, r18
    11d4:	b0 d0       	rcall	.+352    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	24 e0       	ldi	r18, 0x04	; 4
    11dc:	fc 01       	movw	r30, r24
    11de:	20 8b       	std	Z+16, r18	; 0x10
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	88 d0       	rcall	.+272    	; 0x12f6 <_ZN13LiquidCrystal7displayEv>
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	3b d0       	rcall	.+118    	; 0x1262 <_ZN13LiquidCrystal5clearEv>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	22 e0       	ldi	r18, 0x02	; 2
    11f2:	fc 01       	movw	r30, r24
    11f4:	21 8b       	std	Z+17, r18	; 0x11
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	fc 01       	movw	r30, r24
    11fc:	81 89       	ldd	r24, Z+17	; 0x11
    11fe:	28 2f       	mov	r18, r24
    1200:	24 60       	ori	r18, 0x04	; 4
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	62 2f       	mov	r22, r18
    1208:	96 d0       	rcall	.+300    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    120a:	27 96       	adiw	r28, 0x07	; 7
    120c:	e4 e0       	ldi	r30, 0x04	; 4
    120e:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00001212 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    1212:	aa e0       	ldi	r26, 0x0A	; 10
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e0       	ldi	r30, 0x0F	; 15
    1218:	f9 e0       	ldi	r31, 0x09	; 9
    121a:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	7c 83       	std	Y+4, r23	; 0x04
    1224:	6b 83       	std	Y+3, r22	; 0x03
    1226:	5e 83       	std	Y+6, r21	; 0x06
    1228:	4d 83       	std	Y+5, r20	; 0x05
    122a:	38 87       	std	Y+8, r19	; 0x08
    122c:	2f 83       	std	Y+7, r18	; 0x07
    122e:	1a 87       	std	Y+10, r17	; 0x0a
    1230:	09 87       	std	Y+9, r16	; 0x09
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	fc 01       	movw	r30, r24
    123a:	24 8b       	std	Z+20, r18	; 0x14
    123c:	2d 81       	ldd	r18, Y+5	; 0x05
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	fc 01       	movw	r30, r24
    1244:	25 8b       	std	Z+21, r18	; 0x15
    1246:	2f 81       	ldd	r18, Y+7	; 0x07
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	26 8b       	std	Z+22, r18	; 0x16
    1250:	29 85       	ldd	r18, Y+9	; 0x09
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	fc 01       	movw	r30, r24
    1258:	27 8b       	std	Z+23, r18	; 0x17
    125a:	2a 96       	adiw	r28, 0x0a	; 10
    125c:	e4 e0       	ldi	r30, 0x04	; 4
    125e:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00001262 <_ZN13LiquidCrystal5clearEv>:
    1262:	a2 e0       	ldi	r26, 0x02	; 2
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	5e d0       	rcall	.+188    	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    127a:	80 ed       	ldi	r24, 0xD0	; 208
    127c:	97 e0       	ldi	r25, 0x07	; 7
    127e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
    1282:	22 96       	adiw	r28, 0x02	; 2
    1284:	e2 e0       	ldi	r30, 0x02	; 2
    1286:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000128a <_ZN13LiquidCrystal9setCursorEhh>:
    128a:	a6 e0       	ldi	r26, 0x06	; 6
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e4       	ldi	r30, 0x4B	; 75
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	6d 83       	std	Y+5, r22	; 0x05
    129c:	4e 83       	std	Y+6, r20	; 0x06
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	10 f0       	brcs	.+4      	; 0x12b0 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	8e 83       	std	Y+6, r24	; 0x06
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	93 89       	ldd	r25, Z+19	; 0x13
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	89 17       	cp	r24, r25
    12bc:	30 f0       	brcs	.+12     	; 0x12ca <_ZN13LiquidCrystal9setCursorEhh+0x40>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	fc 01       	movw	r30, r24
    12c4:	83 89       	ldd	r24, Z+19	; 0x13
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	8e 83       	std	Y+6, r24	; 0x06
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	44 96       	adiw	r24, 0x14	; 20
    12da:	fc 01       	movw	r30, r24
    12dc:	90 81       	ld	r25, Z
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	89 0f       	add	r24, r25
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	28 2f       	mov	r18, r24
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	62 2f       	mov	r22, r18
    12ec:	24 d0       	rcall	.+72     	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    12ee:	26 96       	adiw	r28, 0x06	; 6
    12f0:	e2 e0       	ldi	r30, 0x02	; 2
    12f2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000012f6 <_ZN13LiquidCrystal7displayEv>:
    12f6:	a2 e0       	ldi	r26, 0x02	; 2
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e1 e8       	ldi	r30, 0x81	; 129
    12fc:	f9 e0       	ldi	r31, 0x09	; 9
    12fe:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	fc 01       	movw	r30, r24
    130c:	80 89       	ldd	r24, Z+16	; 0x10
    130e:	28 2f       	mov	r18, r24
    1310:	24 60       	ori	r18, 0x04	; 4
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	fc 01       	movw	r30, r24
    1318:	20 8b       	std	Z+16, r18	; 0x10
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	fc 01       	movw	r30, r24
    1320:	80 89       	ldd	r24, Z+16	; 0x10
    1322:	28 2f       	mov	r18, r24
    1324:	28 60       	ori	r18, 0x08	; 8
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	62 2f       	mov	r22, r18
    132c:	04 d0       	rcall	.+8      	; 0x1336 <_ZN13LiquidCrystal7commandEh>
    132e:	22 96       	adiw	r28, 0x02	; 2
    1330:	e2 e0       	ldi	r30, 0x02	; 2
    1332:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001336 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    1336:	a3 e0       	ldi	r26, 0x03	; 3
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 ea       	ldi	r30, 0xA1	; 161
    133c:	f9 e0       	ldi	r31, 0x09	; 9
    133e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	6b 81       	ldd	r22, Y+3	; 0x03
    1350:	18 d0       	rcall	.+48     	; 0x1382 <_ZN13LiquidCrystal4sendEhh>
}
    1352:	23 96       	adiw	r28, 0x03	; 3
    1354:	e2 e0       	ldi	r30, 0x02	; 2
    1356:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000135a <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    135a:	a3 e0       	ldi	r26, 0x03	; 3
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 eb       	ldi	r30, 0xB3	; 179
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	6b 81       	ldd	r22, Y+3	; 0x03
    1374:	06 d0       	rcall	.+12     	; 0x1382 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
}
    137a:	23 96       	adiw	r28, 0x03	; 3
    137c:	e2 e0       	ldi	r30, 0x02	; 2
    137e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001382 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1382:	a4 e0       	ldi	r26, 0x04	; 4
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 ec       	ldi	r30, 0xC7	; 199
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6b 83       	std	Y+3, r22	; 0x03
    1394:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	fc 01       	movw	r30, r24
    139c:	84 81       	ldd	r24, Z+4	; 0x04
    139e:	6c 81       	ldd	r22, Y+4	; 0x04
    13a0:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	fc 01       	movw	r30, r24
    13aa:	85 81       	ldd	r24, Z+5	; 0x05
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	39 f0       	breq	.+14     	; 0x13be <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	fc 01       	movw	r30, r24
    13b6:	85 81       	ldd	r24, Z+5	; 0x05
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	fc 01       	movw	r30, r24
    13c4:	87 85       	ldd	r24, Z+15	; 0x0f
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	80 71       	andi	r24, 0x10	; 16
    13cc:	99 27       	eor	r25, r25
    13ce:	89 2b       	or	r24, r25
    13d0:	29 f0       	breq	.+10     	; 0x13dc <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	6b 81       	ldd	r22, Y+3	; 0x03
    13d8:	79 d0       	rcall	.+242    	; 0x14cc <_ZN13LiquidCrystal10write8bitsEh>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	95 95       	asr	r25
    13e4:	87 95       	ror	r24
    13e6:	95 95       	asr	r25
    13e8:	87 95       	ror	r24
    13ea:	95 95       	asr	r25
    13ec:	87 95       	ror	r24
    13ee:	95 95       	asr	r25
    13f0:	87 95       	ror	r24
    13f2:	28 2f       	mov	r18, r24
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	62 2f       	mov	r22, r18
    13fa:	35 d0       	rcall	.+106    	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	6b 81       	ldd	r22, Y+3	; 0x03
    1402:	31 d0       	rcall	.+98     	; 0x1466 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    1404:	24 96       	adiw	r28, 0x04	; 4
    1406:	e2 e0       	ldi	r30, 0x02	; 2
    1408:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000140c <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    140c:	a2 e0       	ldi	r26, 0x02	; 2
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ec e0       	ldi	r30, 0x0C	; 12
    1412:	fa e0       	ldi	r31, 0x0A	; 10
    1414:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	fc 01       	movw	r30, r24
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
  delayMicroseconds(1);    
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	fc 01       	movw	r30, r24
    1438:	86 81       	ldd	r24, Z+6	; 0x06
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	fc 01       	movw	r30, r24
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1456:	84 e6       	ldi	r24, 0x64	; 100
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <delayMicroseconds>
}
    145e:	22 96       	adiw	r28, 0x02	; 2
    1460:	e2 e0       	ldi	r30, 0x02	; 2
    1462:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001466 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1466:	a5 e0       	ldi	r26, 0x05	; 5
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e9 e3       	ldi	r30, 0x39	; 57
    146c:	fa e0       	ldi	r31, 0x0A	; 10
    146e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    1478:	1a 82       	std	Y+2, r1	; 0x02
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	1c c0       	rjmp	.+56     	; 0x14b6 <_ZN13LiquidCrystal10write4bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	09 80       	ldd	r0, Y+1	; 0x01
    1486:	02 c0       	rjmp	.+4      	; 0x148c <_ZN13LiquidCrystal10write4bitsEh+0x26>
    1488:	95 95       	asr	r25
    148a:	87 95       	ror	r24
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1490:	48 2f       	mov	r20, r24
    1492:	41 70       	andi	r20, 0x01	; 1
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	07 96       	adiw	r24, 0x07	; 7
    14a2:	fc 01       	movw	r30, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	64 2f       	mov	r22, r20
    14a8:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	04 97       	sbiw	r24, 0x04	; 4
    14bc:	04 f3       	brlt	.-64     	; 0x147e <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	a4 df       	rcall	.-184    	; 0x140c <_ZN13LiquidCrystal11pulseEnableEv>
}
    14c4:	25 96       	adiw	r28, 0x05	; 5
    14c6:	e2 e0       	ldi	r30, 0x02	; 2
    14c8:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000014cc <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    14cc:	a5 e0       	ldi	r26, 0x05	; 5
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ec e6       	ldi	r30, 0x6C	; 108
    14d2:	fa e0       	ldi	r31, 0x0A	; 10
    14d4:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03
    14dc:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    14de:	1a 82       	std	Y+2, r1	; 0x02
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	1c c0       	rjmp	.+56     	; 0x151c <_ZN13LiquidCrystal10write8bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	09 80       	ldd	r0, Y+1	; 0x01
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <_ZN13LiquidCrystal10write8bitsEh+0x26>
    14ee:	95 95       	asr	r25
    14f0:	87 95       	ror	r24
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <_ZN13LiquidCrystal10write8bitsEh+0x22>
    14f6:	48 2f       	mov	r20, r24
    14f8:	41 70       	andi	r20, 0x01	; 1
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	07 96       	adiw	r24, 0x07	; 7
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	64 2f       	mov	r22, r20
    150e:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	08 97       	sbiw	r24, 0x08	; 8
    1522:	04 f3       	brlt	.-64     	; 0x14e4 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	71 df       	rcall	.-286    	; 0x140c <_ZN13LiquidCrystal11pulseEnableEv>
}
    152a:	25 96       	adiw	r28, 0x05	; 5
    152c:	e2 e0       	ldi	r30, 0x02	; 2
    152e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001532 <_ZNK4erom6Access4readEj>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1532:	a4 e0       	ldi	r26, 0x04	; 4
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ef e9       	ldi	r30, 0x9F	; 159
    1538:	fa e0       	ldi	r31, 0x0A	; 10
    153a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	7c 83       	std	Y+4, r23	; 0x04
    1544:	6b 83       	std	Y+3, r22	; 0x03
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	b9 01       	movw	r22, r18
    1550:	04 d0       	rcall	.+8      	; 0x155a <_ZNK4erom6Access9read_byteEj>
    1552:	24 96       	adiw	r28, 0x04	; 4
    1554:	e2 e0       	ldi	r30, 0x02	; 2
    1556:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000155a <_ZNK4erom6Access9read_byteEj>:
    155a:	a4 e0       	ldi	r26, 0x04	; 4
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 eb       	ldi	r30, 0xB3	; 179
    1560:	fa e0       	ldi	r31, 0x0A	; 10
    1562:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	7c 83       	std	Y+4, r23	; 0x04
    156c:	6b 83       	std	Y+3, r22	; 0x03
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	9c 01       	movw	r18, r24
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	b9 01       	movw	r22, r18
    157e:	50 d0       	rcall	.+160    	; 0x1620 <_ZNK4erom6Access8in_rangeEj>
    1580:	88 23       	and	r24, r24
    1582:	59 f0       	breq	.+22     	; 0x159a <_ZNK4erom6Access9read_byteEj+0x40>
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	6b d0       	rcall	.+214    	; 0x1660 <_ZNK4erom6Access4baseEv>
    158a:	9c 01       	movw	r18, r24
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	0e 94 c9 30 	call	0x6192	; 0x6192 <eeprom_read_byte>
    1598:	01 c0       	rjmp	.+2      	; 0x159c <_ZNK4erom6Access9read_byteEj+0x42>
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	24 96       	adiw	r28, 0x04	; 4
    159e:	e2 e0       	ldi	r30, 0x02	; 2
    15a0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000015a4 <_ZNK4erom6Access5writeEjh>:
    15a4:	a5 e0       	ldi	r26, 0x05	; 5
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 ed       	ldi	r30, 0xD8	; 216
    15aa:	fa e0       	ldi	r31, 0x0A	; 10
    15ac:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	7c 83       	std	Y+4, r23	; 0x04
    15b6:	6b 83       	std	Y+3, r22	; 0x03
    15b8:	4d 83       	std	Y+5, r20	; 0x05
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	4d 81       	ldd	r20, Y+5	; 0x05
    15c4:	b9 01       	movw	r22, r18
    15c6:	04 d0       	rcall	.+8      	; 0x15d0 <_ZNK4erom6Access10write_byteEjh>
    15c8:	25 96       	adiw	r28, 0x05	; 5
    15ca:	e2 e0       	ldi	r30, 0x02	; 2
    15cc:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000015d0 <_ZNK4erom6Access10write_byteEjh>:
    15d0:	a5 e0       	ldi	r26, 0x05	; 5
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ee ee       	ldi	r30, 0xEE	; 238
    15d6:	fa e0       	ldi	r31, 0x0A	; 10
    15d8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	7c 83       	std	Y+4, r23	; 0x04
    15e2:	6b 83       	std	Y+3, r22	; 0x03
    15e4:	4d 83       	std	Y+5, r20	; 0x05
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	9c 01       	movw	r18, r24
    15ec:	2f 5f       	subi	r18, 0xFF	; 255
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	b9 01       	movw	r22, r18
    15f6:	14 d0       	rcall	.+40     	; 0x1620 <_ZNK4erom6Access8in_rangeEj>
    15f8:	88 23       	and	r24, r24
    15fa:	69 f0       	breq	.+26     	; 0x1616 <_ZNK4erom6Access10write_byteEjh+0x46>
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	2f d0       	rcall	.+94     	; 0x1660 <_ZNK4erom6Access4baseEv>
    1602:	9c 01       	movw	r18, r24
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	6d 81       	ldd	r22, Y+5	; 0x05
    160e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <eeprom_write_byte>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <_ZNK4erom6Access10write_byteEjh+0x48>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	25 96       	adiw	r28, 0x05	; 5
    161a:	e2 e0       	ldi	r30, 0x02	; 2
    161c:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001620 <_ZNK4erom6Access8in_rangeEj>:
    1620:	a4 e0       	ldi	r26, 0x04	; 4
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e1       	ldi	r30, 0x16	; 22
    1626:	fb e0       	ldi	r31, 0x0B	; 11
    1628:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	7c 83       	std	Y+4, r23	; 0x04
    1632:	6b 83       	std	Y+3, r22	; 0x03
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	13 d0       	rcall	.+38     	; 0x1660 <_ZNK4erom6Access4baseEv>
    163a:	9c 01       	movw	r18, r24
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	89 01       	movw	r16, r18
    1642:	08 0f       	add	r16, r24
    1644:	19 1f       	adc	r17, r25
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	1b d0       	rcall	.+54     	; 0x1682 <_ZNK4erom6Access11memory_sizeEv>
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	08 17       	cp	r16, r24
    1650:	19 07       	cpc	r17, r25
    1652:	08 f0       	brcs	.+2      	; 0x1656 <_ZNK4erom6Access8in_rangeEj+0x36>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	82 2f       	mov	r24, r18
    1658:	24 96       	adiw	r28, 0x04	; 4
    165a:	e4 e0       	ldi	r30, 0x04	; 4
    165c:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00001660 <_ZNK4erom6Access4baseEv>:
    1660:	a2 e0       	ldi	r26, 0x02	; 2
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e6 e3       	ldi	r30, 0x36	; 54
    1666:	fb e0       	ldi	r31, 0x0B	; 11
    1668:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	22 96       	adiw	r28, 0x02	; 2
    167c:	e2 e0       	ldi	r30, 0x02	; 2
    167e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001682 <_ZNK4erom6Access11memory_sizeEv>:
    1682:	a2 e0       	ldi	r26, 0x02	; 2
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	fc 01       	movw	r30, r24
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	22 96       	adiw	r28, 0x02	; 2
    169e:	e2 e0       	ldi	r30, 0x02	; 2
    16a0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000016a4 <_ZN4erom6Access8instanceEv>:
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e5       	ldi	r30, 0x58	; 88
    16aa:	fb e0       	ldi	r31, 0x0B	; 11
    16ac:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    16b0:	8d ee       	ldi	r24, 0xED	; 237
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	88 23       	and	r24, r24
    16ba:	51 f4       	brne	.+20     	; 0x16d0 <_ZN4erom6Access8instanceEv+0x2c>
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	87 ef       	ldi	r24, 0xF7	; 247
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	7b d0       	rcall	.+246    	; 0x17bc <_ZN4erom6AccessC1Ej>
    16c6:	8d ee       	ldi	r24, 0xED	; 237
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	fc 01       	movw	r30, r24
    16ce:	20 83       	st	Z, r18
    16d0:	87 ef       	ldi	r24, 0xF7	; 247
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	e2 e0       	ldi	r30, 0x02	; 2
    16d6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000016da <_ZN4erom7Storage6OnLoadEv>:
    16da:	a2 e0       	ldi	r26, 0x02	; 2
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e3 e7       	ldi	r30, 0x73	; 115
    16e0:	fb e0       	ldi	r31, 0x0B	; 11
    16e2:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	22 96       	adiw	r28, 0x02	; 2
    16ec:	e2 e0       	ldi	r30, 0x02	; 2
    16ee:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000016f2 <_ZN4erom7Storage6OnSaveEv>:
    16f2:	a2 e0       	ldi	r26, 0x02	; 2
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ef e7       	ldi	r30, 0x7F	; 127
    16f8:	fb e0       	ldi	r31, 0x0B	; 11
    16fa:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	22 96       	adiw	r28, 0x02	; 2
    1704:	e2 e0       	ldi	r30, 0x02	; 2
    1706:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000170a <_ZN4erom7Storage7OnClearEv>:
    170a:	a2 e0       	ldi	r26, 0x02	; 2
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e8       	ldi	r30, 0x8B	; 139
    1710:	fb e0       	ldi	r31, 0x0B	; 11
    1712:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	22 96       	adiw	r28, 0x02	; 2
    171c:	e2 e0       	ldi	r30, 0x02	; 2
    171e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001722 <_ZN4erom7StorageC1Ev>:
    1722:	a2 e0       	ldi	r26, 0x02	; 2
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e9       	ldi	r30, 0x97	; 151
    1728:	fb e0       	ldi	r31, 0x0B	; 11
    172a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	29 e7       	ldi	r18, 0x79	; 121
    1738:	31 e0       	ldi	r19, 0x01	; 1
    173a:	fc 01       	movw	r30, r24
    173c:	31 83       	std	Z+1, r19	; 0x01
    173e:	20 83       	st	Z, r18
    1740:	b1 df       	rcall	.-158    	; 0x16a4 <_ZN4erom6Access8instanceEv>
    1742:	9c 01       	movw	r18, r24
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	fc 01       	movw	r30, r24
    174a:	33 83       	std	Z+3, r19	; 0x03
    174c:	22 83       	std	Z+2, r18	; 0x02
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	fc 01       	movw	r30, r24
    1754:	15 82       	std	Z+5, r1	; 0x05
    1756:	14 82       	std	Z+4, r1	; 0x04
    1758:	22 96       	adiw	r28, 0x02	; 2
    175a:	e2 e0       	ldi	r30, 0x02	; 2
    175c:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001760 <_ZN4erom7StorageD1Ev>:
    1760:	a2 e0       	ldi	r26, 0x02	; 2
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e6 eb       	ldi	r30, 0xB6	; 182
    1766:	fb e0       	ldi	r31, 0x0B	; 11
    1768:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	29 e7       	ldi	r18, 0x79	; 121
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	fc 01       	movw	r30, r24
    177a:	31 83       	std	Z+1, r19	; 0x01
    177c:	20 83       	st	Z, r18
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	89 2b       	or	r24, r25
    1784:	21 f0       	breq	.+8      	; 0x178e <_ZN4erom7StorageD1Ev+0x2e>
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	0e 94 8c 24 	call	0x4918	; 0x4918 <_ZdlPv>
    178e:	22 96       	adiw	r28, 0x02	; 2
    1790:	e2 e0       	ldi	r30, 0x02	; 2
    1792:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001796 <_ZN4erom7StorageD0Ev>:
    1796:	a2 e0       	ldi	r26, 0x02	; 2
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e1 ed       	ldi	r30, 0xD1	; 209
    179c:	fb e0       	ldi	r31, 0x0B	; 11
    179e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	da df       	rcall	.-76     	; 0x1760 <_ZN4erom7StorageD1Ev>
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	0e 94 8c 24 	call	0x4918	; 0x4918 <_ZdlPv>
    17b4:	22 96       	adiw	r28, 0x02	; 2
    17b6:	e2 e0       	ldi	r30, 0x02	; 2
    17b8:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000017bc <_ZN4erom6AccessC1Ej>:
    17bc:	a4 e0       	ldi	r26, 0x04	; 4
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e4 ee       	ldi	r30, 0xE4	; 228
    17c2:	fb e0       	ldi	r31, 0x0B	; 11
    17c4:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	7c 83       	std	Y+4, r23	; 0x04
    17ce:	6b 83       	std	Y+3, r22	; 0x03
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	fc 01       	movw	r30, r24
    17da:	31 83       	std	Z+1, r19	; 0x01
    17dc:	20 83       	st	Z, r18
    17de:	0a d0       	rcall	.+20     	; 0x17f4 <_ZN4erom6Access18device_memory_sizeEv>
    17e0:	9c 01       	movw	r18, r24
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	fc 01       	movw	r30, r24
    17e8:	33 83       	std	Z+3, r19	; 0x03
    17ea:	22 83       	std	Z+2, r18	; 0x02
    17ec:	24 96       	adiw	r28, 0x04	; 4
    17ee:	e2 e0       	ldi	r30, 0x02	; 2
    17f0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000017f4 <_ZN4erom6Access18device_memory_sizeEv>:
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e0 e0       	ldi	r30, 0x00	; 0
    17fa:	fc e0       	ldi	r31, 0x0C	; 12
    17fc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	94 e0       	ldi	r25, 0x04	; 4
    1804:	e2 e0       	ldi	r30, 0x02	; 2
    1806:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000180a <_ZNK4erom6Access10read_blockIdEEbjRT_>:
    180a:	a6 e0       	ldi	r26, 0x06	; 6
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	eb e0       	ldi	r30, 0x0B	; 11
    1810:	fc e0       	ldi	r31, 0x0C	; 12
    1812:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	7c 83       	std	Y+4, r23	; 0x04
    181c:	6b 83       	std	Y+3, r22	; 0x03
    181e:	5e 83       	std	Y+6, r21	; 0x06
    1820:	4d 83       	std	Y+5, r20	; 0x05
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	9c 01       	movw	r18, r24
    1828:	2c 5f       	subi	r18, 0xFC	; 252
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	b9 01       	movw	r22, r18
    1832:	f6 de       	rcall	.-532    	; 0x1620 <_ZNK4erom6Access8in_rangeEj>
    1834:	98 2f       	mov	r25, r24
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	89 27       	eor	r24, r25
    183a:	88 23       	and	r24, r24
    183c:	11 f0       	breq	.+4      	; 0x1842 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x38>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x4a>
    1842:	4d 81       	ldd	r20, Y+5	; 0x05
    1844:	5e 81       	ldd	r21, Y+6	; 0x06
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	b9 01       	movw	r22, r18
    1850:	05 d0       	rcall	.+10     	; 0x185c <_ZNK4erom6Access11_read_blockIdEEvjRT_>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	26 96       	adiw	r28, 0x06	; 6
    1856:	e2 e0       	ldi	r30, 0x02	; 2
    1858:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000185c <_ZNK4erom6Access11_read_blockIdEEvjRT_>:
    185c:	a6 e0       	ldi	r26, 0x06	; 6
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	7c 83       	std	Y+4, r23	; 0x04
    186e:	6b 83       	std	Y+3, r22	; 0x03
    1870:	5e 83       	std	Y+6, r21	; 0x06
    1872:	4d 83       	std	Y+5, r20	; 0x05
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	f3 de       	rcall	.-538    	; 0x1660 <_ZNK4erom6Access4baseEv>
    187a:	9c 01       	movw	r18, r24
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	82 0f       	add	r24, r18
    1882:	93 1f       	adc	r25, r19
    1884:	9c 01       	movw	r18, r24
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	44 e0       	ldi	r20, 0x04	; 4
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	b9 01       	movw	r22, r18
    1890:	0e 94 b9 30 	call	0x6172	; 0x6172 <eeprom_read_block>
    1894:	26 96       	adiw	r28, 0x06	; 6
    1896:	e2 e0       	ldi	r30, 0x02	; 2
    1898:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000189c <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    189c:	a4 e0       	ldi	r26, 0x04	; 4
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e4 e5       	ldi	r30, 0x54	; 84
    18a2:	fc e0       	ldi	r31, 0x0C	; 12
    18a4:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	7c 83       	std	Y+4, r23	; 0x04
    18ae:	6b 83       	std	Y+3, r22	; 0x03
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	49 f4       	brne	.+18     	; 0x18ca <_Z41__static_initialization_and_destruction_0ii+0x2e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	29 f4       	brne	.+10     	; 0x18ca <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    18c0:	f1 de       	rcall	.-542    	; 0x16a4 <_ZN4erom6Access8instanceEv>
    18c2:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <_ZN4erom6accessE+0x1>
    18c6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    18ca:	24 96       	adiw	r28, 0x04	; 4
    18cc:	e2 e0       	ldi	r30, 0x02	; 2
    18ce:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000018d2 <_GLOBAL__sub_I__ZN4erom6accessE>:
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e6       	ldi	r30, 0x6F	; 111
    18d8:	fc e0       	ldi	r31, 0x0C	; 12
    18da:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    18de:	6f ef       	ldi	r22, 0xFF	; 255
    18e0:	7f ef       	ldi	r23, 0xFF	; 255
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	da df       	rcall	.-76     	; 0x189c <_Z41__static_initialization_and_destruction_0ii>
    18e8:	e2 e0       	ldi	r30, 0x02	; 2
    18ea:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000018ee <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    18ee:	a0 e0       	ldi	r26, 0x00	; 0
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ed e7       	ldi	r30, 0x7D	; 125
    18f4:	fc e0       	ldi	r31, 0x0C	; 12
    18f6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    18fa:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	e2 e0       	ldi	r30, 0x02	; 2
    1908:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000190c <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    190c:	a8 e0       	ldi	r26, 0x08	; 8
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ec e8       	ldi	r30, 0x8C	; 140
    1912:	fc e0       	ldi	r31, 0x0C	; 12
    1914:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1918:	98 87       	std	Y+8, r25	; 0x08
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	27 e8       	ldi	r18, 0x87	; 135
    1922:	31 e0       	ldi	r19, 0x01	; 1
    1924:	fc 01       	movw	r30, r24
    1926:	31 83       	std	Z+1, r19	; 0x01
    1928:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    192a:	e1 df       	rcall	.-62     	; 0x18ee <_ZL7elapsedv>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8b 83       	std	Y+3, r24	; 0x03
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	ad 83       	std	Y+5, r26	; 0x05
    1936:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1938:	1a 82       	std	Y+2, r1	; 0x02
    193a:	19 82       	std	Y+1, r1	; 0x01
    193c:	3d c0       	rjmp	.+122    	; 0x19b8 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    193e:	2f 81       	ldd	r18, Y+7	; 0x07
    1940:	38 85       	ldd	r19, Y+8	; 0x08
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	82 57       	subi	r24, 0x72	; 114
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	fc 01       	movw	r30, r24
    1950:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    1952:	2f 81       	ldd	r18, Y+7	; 0x07
    1954:	38 85       	ldd	r19, Y+8	; 0x08
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	45 96       	adiw	r24, 0x15	; 21
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	fc 01       	movw	r30, r24
    1966:	11 82       	std	Z+1, r1	; 0x01
    1968:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    196a:	2f 81       	ldd	r18, Y+7	; 0x07
    196c:	38 85       	ldd	r19, Y+8	; 0x08
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	9c 01       	movw	r18, r24
    1980:	2e 5f       	subi	r18, 0xFE	; 254
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	ad 81       	ldd	r26, Y+5	; 0x05
    198a:	be 81       	ldd	r27, Y+6	; 0x06
    198c:	f9 01       	movw	r30, r18
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    1996:	2f 81       	ldd	r18, Y+7	; 0x07
    1998:	38 85       	ldd	r19, Y+8	; 0x08
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	cd 96       	adiw	r24, 0x3d	; 61
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	fc 01       	movw	r30, r24
    19aa:	11 82       	std	Z+1, r1	; 0x01
    19ac:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	0a 97       	sbiw	r24, 0x0a	; 10
    19be:	0c f4       	brge	.+2      	; 0x19c2 <_ZN11SimpleTimerC1Ev+0xb6>
    19c0:	be cf       	rjmp	.-132    	; 0x193e <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    19c2:	8f 81       	ldd	r24, Y+7	; 0x07
    19c4:	98 85       	ldd	r25, Y+8	; 0x08
    19c6:	84 55       	subi	r24, 0x54	; 84
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	fc 01       	movw	r30, r24
    19cc:	11 82       	std	Z+1, r1	; 0x01
    19ce:	10 82       	st	Z, r1
}
    19d0:	28 96       	adiw	r28, 0x08	; 8
    19d2:	e2 e0       	ldi	r30, 0x02	; 2
    19d4:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000019d8 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    19d8:	a8 e0       	ldi	r26, 0x08	; 8
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e2 ef       	ldi	r30, 0xF2	; 242
    19de:	fc e0       	ldi	r31, 0x0C	; 12
    19e0:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__+0x18>
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    19e8:	82 df       	rcall	.-252    	; 0x18ee <_ZL7elapsedv>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8b 83       	std	Y+3, r24	; 0x03
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	ad 83       	std	Y+5, r26	; 0x05
    19f4:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    19f6:	1a 82       	std	Y+2, r1	; 0x02
    19f8:	19 82       	std	Y+1, r1	; 0x01
    19fa:	25 c1       	rjmp	.+586    	; 0x1c46 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    19fc:	2f 81       	ldd	r18, Y+7	; 0x07
    19fe:	38 85       	ldd	r19, Y+8	; 0x08
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	84 5b       	subi	r24, 0xB4	; 180
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	fc 01       	movw	r30, r24
    1a12:	11 82       	std	Z+1, r1	; 0x01
    1a14:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1a16:	2f 81       	ldd	r18, Y+7	; 0x07
    1a18:	38 85       	ldd	r19, Y+8	; 0x08
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	45 96       	adiw	r24, 0x15	; 21
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	89 2b       	or	r24, r25
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <_ZN11SimpleTimer3runEv+0x5c>
    1a32:	04 c1       	rjmp	.+520    	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1a34:	2f 81       	ldd	r18, Y+7	; 0x07
    1a36:	38 85       	ldd	r19, Y+8	; 0x08
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	02 96       	adiw	r24, 0x02	; 2
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	a2 81       	ldd	r26, Z+2	; 0x02
    1a52:	b3 81       	ldd	r27, Z+3	; 0x03
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	4d 81       	ldd	r20, Y+5	; 0x05
    1a5a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a5c:	79 01       	movw	r14, r18
    1a5e:	8a 01       	movw	r16, r20
    1a60:	e8 1a       	sub	r14, r24
    1a62:	f9 0a       	sbc	r15, r25
    1a64:	0a 0b       	sbc	r16, r26
    1a66:	1b 0b       	sbc	r17, r27
    1a68:	d8 01       	movw	r26, r16
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	4f 81       	ldd	r20, Y+7	; 0x07
    1a6e:	58 85       	ldd	r21, Y+8	; 0x08
    1a70:	29 81       	ldd	r18, Y+1	; 0x01
    1a72:	3a 81       	ldd	r19, Y+2	; 0x02
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	24 0f       	add	r18, r20
    1a7e:	35 1f       	adc	r19, r21
    1a80:	22 5c       	subi	r18, 0xC2	; 194
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	31 81       	ldd	r19, Z+1	; 0x01
    1a8a:	42 81       	ldd	r20, Z+2	; 0x02
    1a8c:	53 81       	ldd	r21, Z+3	; 0x03
    1a8e:	82 17       	cp	r24, r18
    1a90:	93 07       	cpc	r25, r19
    1a92:	a4 07       	cpc	r26, r20
    1a94:	b5 07       	cpc	r27, r21
    1a96:	08 f4       	brcc	.+2      	; 0x1a9a <_ZN11SimpleTimer3runEv+0xc2>
    1a98:	d1 c0       	rjmp	.+418    	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    1a9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9c:	38 85       	ldd	r19, Y+8	; 0x08
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	82 0f       	add	r24, r18
    1aac:	93 1f       	adc	r25, r19
    1aae:	02 96       	adiw	r24, 0x02	; 2
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab8:	b3 81       	ldd	r27, Z+3	; 0x03
    1aba:	4f 81       	ldd	r20, Y+7	; 0x07
    1abc:	58 85       	ldd	r21, Y+8	; 0x08
    1abe:	29 81       	ldd	r18, Y+1	; 0x01
    1ac0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac2:	22 0f       	add	r18, r18
    1ac4:	33 1f       	adc	r19, r19
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	24 0f       	add	r18, r20
    1acc:	35 1f       	adc	r19, r21
    1ace:	22 5c       	subi	r18, 0xC2	; 194
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	20 81       	ld	r18, Z
    1ad6:	31 81       	ldd	r19, Z+1	; 0x01
    1ad8:	42 81       	ldd	r20, Z+2	; 0x02
    1ada:	53 81       	ldd	r21, Z+3	; 0x03
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	a4 1f       	adc	r26, r20
    1ae2:	b5 1f       	adc	r27, r21
    1ae4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ae6:	58 85       	ldd	r21, Y+8	; 0x08
    1ae8:	29 81       	ldd	r18, Y+1	; 0x01
    1aea:	3a 81       	ldd	r19, Y+2	; 0x02
    1aec:	22 0f       	add	r18, r18
    1aee:	33 1f       	adc	r19, r19
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	24 0f       	add	r18, r20
    1af6:	35 1f       	adc	r19, r21
    1af8:	2e 5f       	subi	r18, 0xFE	; 254
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	f9 01       	movw	r30, r18
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1b06:	2f 81       	ldd	r18, Y+7	; 0x07
    1b08:	38 85       	ldd	r19, Y+8	; 0x08
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	82 0f       	add	r24, r18
    1b10:	93 1f       	adc	r25, r19
    1b12:	82 57       	subi	r24, 0x72	; 114
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <_ZN11SimpleTimer3runEv+0x148>
    1b1e:	8e c0       	rjmp	.+284    	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1b20:	2f 81       	ldd	r18, Y+7	; 0x07
    1b22:	38 85       	ldd	r19, Y+8	; 0x08
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	c3 96       	adiw	r24, 0x33	; 51
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	82 0f       	add	r24, r18
    1b30:	93 1f       	adc	r25, r19
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	89 2b       	or	r24, r25
    1b3a:	81 f4       	brne	.+32     	; 0x1b5c <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b3e:	38 85       	ldd	r19, Y+8	; 0x08
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	84 5b       	subi	r24, 0xB4	; 180
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	82 0f       	add	r24, r18
    1b4e:	93 1f       	adc	r25, r19
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	31 83       	std	Z+1, r19	; 0x01
    1b58:	20 83       	st	Z, r18
    1b5a:	70 c0       	rjmp	.+224    	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1b5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b5e:	38 85       	ldd	r19, Y+8	; 0x08
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	cd 96       	adiw	r24, 0x3d	; 61
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 81       	ld	r18, Z
    1b72:	31 81       	ldd	r19, Z+1	; 0x01
    1b74:	4f 81       	ldd	r20, Y+7	; 0x07
    1b76:	58 85       	ldd	r21, Y+8	; 0x08
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	c3 96       	adiw	r24, 0x33	; 51
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	84 0f       	add	r24, r20
    1b84:	95 1f       	adc	r25, r21
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	28 17       	cp	r18, r24
    1b8e:	39 07       	cpc	r19, r25
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <_ZN11SimpleTimer3runEv+0x1bc>
    1b92:	54 c0       	rjmp	.+168    	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1b94:	2f 81       	ldd	r18, Y+7	; 0x07
    1b96:	38 85       	ldd	r19, Y+8	; 0x08
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	84 5b       	subi	r24, 0xB4	; 180
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	82 0f       	add	r24, r18
    1ba6:	93 1f       	adc	r25, r19
    1ba8:	21 e0       	ldi	r18, 0x01	; 1
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	fc 01       	movw	r30, r24
    1bae:	31 83       	std	Z+1, r19	; 0x01
    1bb0:	20 83       	st	Z, r18
                        numRuns[i]++;
    1bb2:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb4:	38 85       	ldd	r19, Y+8	; 0x08
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	cd 96       	adiw	r24, 0x3d	; 61
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	82 0f       	add	r24, r18
    1bc2:	93 1f       	adc	r25, r19
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	9c 01       	movw	r18, r24
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	4f 81       	ldd	r20, Y+7	; 0x07
    1bd2:	58 85       	ldd	r21, Y+8	; 0x08
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	cd 96       	adiw	r24, 0x3d	; 61
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	84 0f       	add	r24, r20
    1be0:	95 1f       	adc	r25, r21
    1be2:	fc 01       	movw	r30, r24
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1be8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bea:	38 85       	ldd	r19, Y+8	; 0x08
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	cd 96       	adiw	r24, 0x3d	; 61
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 81       	ld	r18, Z
    1bfe:	31 81       	ldd	r19, Z+1	; 0x01
    1c00:	4f 81       	ldd	r20, Y+7	; 0x07
    1c02:	58 85       	ldd	r21, Y+8	; 0x08
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	c3 96       	adiw	r24, 0x33	; 51
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	84 0f       	add	r24, r20
    1c10:	95 1f       	adc	r25, r21
    1c12:	fc 01       	movw	r30, r24
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	28 17       	cp	r18, r24
    1c1a:	39 07       	cpc	r19, r25
    1c1c:	7c f0       	brlt	.+30     	; 0x1c3c <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1c1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c20:	38 85       	ldd	r19, Y+8	; 0x08
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	84 5b       	subi	r24, 0xB4	; 180
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	22 e0       	ldi	r18, 0x02	; 2
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	fc 01       	movw	r30, r24
    1c38:	31 83       	std	Z+1, r19	; 0x01
    1c3a:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c4c:	0c f4       	brge	.+2      	; 0x1c50 <_ZN11SimpleTimer3runEv+0x278>
    1c4e:	d6 ce       	rjmp	.-596    	; 0x19fc <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1c50:	1a 82       	std	Y+2, r1	; 0x02
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	46 c0       	rjmp	.+140    	; 0x1ce2 <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1c56:	2f 81       	ldd	r18, Y+7	; 0x07
    1c58:	38 85       	ldd	r19, Y+8	; 0x08
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	84 5b       	subi	r24, 0xB4	; 180
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	82 0f       	add	r24, r18
    1c68:	93 1f       	adc	r25, r19
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	91 05       	cpc	r25, r1
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <_ZN11SimpleTimer3runEv+0x2a4>
    1c76:	02 97       	sbiw	r24, 0x02	; 2
    1c78:	81 f0       	breq	.+32     	; 0x1c9a <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1c7a:	2e c0       	rjmp	.+92     	; 0x1cd8 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1c7c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7e:	38 85       	ldd	r19, Y+8	; 0x08
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	45 96       	adiw	r24, 0x15	; 21
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	82 0f       	add	r24, r18
    1c8c:	93 1f       	adc	r25, r19
    1c8e:	fc 01       	movw	r30, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	fc 01       	movw	r30, r24
    1c96:	09 95       	icall
                break;
    1c98:	1f c0       	rjmp	.+62     	; 0x1cd8 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1c9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c9c:	38 85       	ldd	r19, Y+8	; 0x08
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	45 96       	adiw	r24, 0x15	; 21
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	82 0f       	add	r24, r18
    1caa:	93 1f       	adc	r25, r19
    1cac:	fc 01       	movw	r30, r24
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	09 95       	icall
                deleteTimer(i);
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	98 85       	ldd	r25, Y+8	; 0x08
    1cba:	fc 01       	movw	r30, r24
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	08 96       	adiw	r24, 0x08	; 8
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	20 81       	ld	r18, Z
    1cc6:	31 81       	ldd	r19, Z+1	; 0x01
    1cc8:	49 81       	ldd	r20, Y+1	; 0x01
    1cca:	5a 81       	ldd	r21, Y+2	; 0x02
    1ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cce:	98 85       	ldd	r25, Y+8	; 0x08
    1cd0:	ba 01       	movw	r22, r20
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	09 95       	icall
                break;
    1cd6:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	0a 97       	sbiw	r24, 0x0a	; 10
    1ce8:	0c f4       	brge	.+2      	; 0x1cec <_ZN11SimpleTimer3runEv+0x314>
    1cea:	b5 cf       	rjmp	.-150    	; 0x1c56 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1cec:	28 96       	adiw	r28, 0x08	; 8
    1cee:	e6 e0       	ldi	r30, 0x06	; 6
    1cf0:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__+0x18>

00001cf4 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1cf4:	a4 e0       	ldi	r26, 0x04	; 4
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e0 e8       	ldi	r30, 0x80	; 128
    1cfa:	fe e0       	ldi	r31, 0x0E	; 14
    1cfc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	84 55       	subi	r24, 0x54	; 84
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	0a 97       	sbiw	r24, 0x0a	; 10
    1d14:	1c f0       	brlt	.+6      	; 0x1d1c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	9f ef       	ldi	r25, 0xFF	; 255
    1d1a:	1f c0       	rjmp	.+62     	; 0x1d5a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1d1c:	1a 82       	std	Y+2, r1	; 0x02
    1d1e:	19 82       	std	Y+1, r1	; 0x01
    1d20:	16 c0       	rjmp	.+44     	; 0x1d4e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	45 96       	adiw	r24, 0x15	; 21
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	fc 01       	movw	r30, r24
    1d36:	80 81       	ld	r24, Z
    1d38:	91 81       	ldd	r25, Z+1	; 0x01
    1d3a:	89 2b       	or	r24, r25
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	0a 97       	sbiw	r24, 0x0a	; 10
    1d54:	34 f3       	brlt	.-52     	; 0x1d22 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	9f ef       	ldi	r25, 0xFF	; 255
}
    1d5a:	24 96       	adiw	r28, 0x04	; 4
    1d5c:	e2 e0       	ldi	r30, 0x02	; 2
    1d5e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00001d62 <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1d62:	ac e0       	ldi	r26, 0x0C	; 12
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e7 eb       	ldi	r30, 0xB7	; 183
    1d68:	fe e0       	ldi	r31, 0x0E	; 14
    1d6a:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	4d 83       	std	Y+5, r20	; 0x05
    1d74:	5e 83       	std	Y+6, r21	; 0x06
    1d76:	6f 83       	std	Y+7, r22	; 0x07
    1d78:	78 87       	std	Y+8, r23	; 0x08
    1d7a:	3a 87       	std	Y+10, r19	; 0x0a
    1d7c:	29 87       	std	Y+9, r18	; 0x09
    1d7e:	1c 87       	std	Y+12, r17	; 0x0c
    1d80:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	b6 df       	rcall	.-148    	; 0x1cf4 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	99 23       	and	r25, r25
    1d92:	1c f4       	brge	.+6      	; 0x1d9a <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	9f ef       	ldi	r25, 0xFF	; 255
    1d98:	6b c0       	rjmp	.+214    	; 0x1e70 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	89 2b       	or	r24, r25
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9f ef       	ldi	r25, 0xFF	; 255
    1da6:	64 c0       	rjmp	.+200    	; 0x1e70 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	22 5c       	subi	r18, 0xC2	; 194
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	af 81       	ldd	r26, Y+7	; 0x07
    1dc8:	b8 85       	ldd	r27, Y+8	; 0x08
    1dca:	f9 01       	movw	r30, r18
    1dcc:	80 83       	st	Z, r24
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	a2 83       	std	Z+2, r26	; 0x02
    1dd2:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	45 96       	adiw	r24, 0x15	; 21
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	29 85       	ldd	r18, Y+9	; 0x09
    1de8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dea:	fc 01       	movw	r30, r24
    1dec:	31 83       	std	Z+1, r19	; 0x01
    1dee:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	3c 81       	ldd	r19, Y+4	; 0x04
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	c3 96       	adiw	r24, 0x33	; 51
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e04:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e06:	fc 01       	movw	r30, r24
    1e08:	31 83       	std	Z+1, r19	; 0x01
    1e0a:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	82 57       	subi	r24, 0x72	; 114
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	21 e0       	ldi	r18, 0x01	; 1
    1e1e:	fc 01       	movw	r30, r24
    1e20:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1e22:	65 dd       	rcall	.-1334   	; 0x18ee <_ZL7elapsedv>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	4b 81       	ldd	r20, Y+3	; 0x03
    1e2a:	5c 81       	ldd	r21, Y+4	; 0x04
    1e2c:	29 81       	ldd	r18, Y+1	; 0x01
    1e2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	24 0f       	add	r18, r20
    1e3a:	35 1f       	adc	r19, r21
    1e3c:	2e 5f       	subi	r18, 0xFE	; 254
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	f9 01       	movw	r30, r18
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	84 55       	subi	r24, 0x54	; 84
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	fc 01       	movw	r30, r24
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	9c 01       	movw	r18, r24
    1e5a:	2f 5f       	subi	r18, 0xFF	; 255
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	84 55       	subi	r24, 0x54	; 84
    1e64:	9f 4f       	sbci	r25, 0xFF	; 255
    1e66:	fc 01       	movw	r30, r24
    1e68:	31 83       	std	Z+1, r19	; 0x01
    1e6a:	20 83       	st	Z, r18

    return freeTimer;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e70:	2c 96       	adiw	r28, 0x0c	; 12
    1e72:	e4 e0       	ldi	r30, 0x04	; 4
    1e74:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00001e78 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1e78:	a8 e0       	ldi	r26, 0x08	; 8
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e4       	ldi	r30, 0x42	; 66
    1e7e:	ff e0       	ldi	r31, 0x0F	; 15
    1e80:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__+0x18>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	4b 83       	std	Y+3, r20	; 0x03
    1e8a:	5c 83       	std	Y+4, r21	; 0x04
    1e8c:	6d 83       	std	Y+5, r22	; 0x05
    1e8e:	7e 83       	std	Y+6, r23	; 0x06
    1e90:	38 87       	std	Y+8, r19	; 0x08
    1e92:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	dc 01       	movw	r26, r24
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	9c 91       	ld	r25, X
    1e9e:	06 96       	adiw	r24, 0x06	; 6
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	ed 91       	ld	r30, X+
    1ea4:	fc 91       	ld	r31, X
    1ea6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea8:	38 85       	ldd	r19, Y+8	; 0x08
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	ad 81       	ldd	r26, Y+5	; 0x05
    1eb0:	be 81       	ldd	r27, Y+6	; 0x06
    1eb2:	e9 80       	ldd	r14, Y+1	; 0x01
    1eb4:	fa 80       	ldd	r15, Y+2	; 0x02
    1eb6:	00 e0       	ldi	r16, 0x00	; 0
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
    1eba:	ac 01       	movw	r20, r24
    1ebc:	bd 01       	movw	r22, r26
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	09 95       	icall
}
    1ec2:	28 96       	adiw	r28, 0x08	; 8
    1ec4:	e6 e0       	ldi	r30, 0x06	; 6
    1ec6:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__+0x18>

00001eca <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1eca:	a8 e0       	ldi	r26, 0x08	; 8
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__+0x18>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	4b 83       	std	Y+3, r20	; 0x03
    1edc:	5c 83       	std	Y+4, r21	; 0x04
    1ede:	6d 83       	std	Y+5, r22	; 0x05
    1ee0:	7e 83       	std	Y+6, r23	; 0x06
    1ee2:	38 87       	std	Y+8, r19	; 0x08
    1ee4:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	dc 01       	movw	r26, r24
    1eec:	8d 91       	ld	r24, X+
    1eee:	9c 91       	ld	r25, X
    1ef0:	06 96       	adiw	r24, 0x06	; 6
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	2f 81       	ldd	r18, Y+7	; 0x07
    1efa:	38 85       	ldd	r19, Y+8	; 0x08
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	ad 81       	ldd	r26, Y+5	; 0x05
    1f02:	be 81       	ldd	r27, Y+6	; 0x06
    1f04:	e9 80       	ldd	r14, Y+1	; 0x01
    1f06:	fa 80       	ldd	r15, Y+2	; 0x02
    1f08:	01 e0       	ldi	r16, 0x01	; 1
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	bd 01       	movw	r22, r26
    1f10:	c7 01       	movw	r24, r14
    1f12:	09 95       	icall
}
    1f14:	28 96       	adiw	r28, 0x08	; 8
    1f16:	e6 e0       	ldi	r30, 0x06	; 6
    1f18:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__+0x18>

00001f1c <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1f1c:	a4 e0       	ldi	r26, 0x04	; 4
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	7c 83       	std	Y+4, r23	; 0x04
    1f2e:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	0a 97       	sbiw	r24, 0x0a	; 10
    1f36:	0c f0       	brlt	.+2      	; 0x1f3a <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1f38:	69 c0       	rjmp	.+210    	; 0x200c <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	84 55       	subi	r24, 0x54	; 84
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	fc 01       	movw	r30, r24
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	89 2b       	or	r24, r25
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1f4c:	5f c0       	rjmp	.+190    	; 0x200c <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1f4e:	29 81       	ldd	r18, Y+1	; 0x01
    1f50:	3a 81       	ldd	r19, Y+2	; 0x02
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	45 96       	adiw	r24, 0x15	; 21
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	82 0f       	add	r24, r18
    1f5e:	93 1f       	adc	r25, r19
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	89 2b       	or	r24, r25
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1f6a:	50 c0       	rjmp	.+160    	; 0x200c <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1f6c:	29 81       	ldd	r18, Y+1	; 0x01
    1f6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	45 96       	adiw	r24, 0x15	; 21
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	fc 01       	movw	r30, r24
    1f80:	11 82       	std	Z+1, r1	; 0x01
    1f82:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1f84:	29 81       	ldd	r18, Y+1	; 0x01
    1f86:	3a 81       	ldd	r19, Y+2	; 0x02
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	82 57       	subi	r24, 0x72	; 114
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	fc 01       	movw	r30, r24
    1f96:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1f98:	29 81       	ldd	r18, Y+1	; 0x01
    1f9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	84 5b       	subi	r24, 0xB4	; 180
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	82 0f       	add	r24, r18
    1faa:	93 1f       	adc	r25, r19
    1fac:	fc 01       	movw	r30, r24
    1fae:	11 82       	std	Z+1, r1	; 0x01
    1fb0:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1fb2:	29 81       	ldd	r18, Y+1	; 0x01
    1fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	ce 96       	adiw	r24, 0x3e	; 62
    1fc8:	fc 01       	movw	r30, r24
    1fca:	10 82       	st	Z, r1
    1fcc:	11 82       	std	Z+1, r1	; 0x01
    1fce:	12 82       	std	Z+2, r1	; 0x02
    1fd0:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1fd2:	29 81       	ldd	r18, Y+1	; 0x01
    1fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	cd 96       	adiw	r24, 0x3d	; 61
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	11 82       	std	Z+1, r1	; 0x01
    1fe8:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	84 55       	subi	r24, 0x54	; 84
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	9c 01       	movw	r18, r24
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	31 09       	sbc	r19, r1
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	84 55       	subi	r24, 0x54	; 84
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	fc 01       	movw	r30, r24
    2008:	31 83       	std	Z+1, r19	; 0x01
    200a:	20 83       	st	Z, r18
    }
}
    200c:	24 96       	adiw	r28, 0x04	; 4
    200e:	e2 e0       	ldi	r30, 0x02	; 2
    2010:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002014 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    2014:	a4 e0       	ldi	r26, 0x04	; 4
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e0 e1       	ldi	r30, 0x10	; 16
    201a:	f0 e1       	ldi	r31, 0x10	; 16
    201c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	7c 83       	std	Y+4, r23	; 0x04
    2026:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	0a 97       	sbiw	r24, 0x0a	; 10
    202e:	0c f0       	brlt	.+2      	; 0x2032 <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    2030:	14 c0       	rjmp	.+40     	; 0x205a <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    2032:	5d dc       	rcall	.-1862   	; 0x18ee <_ZL7elapsedv>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	49 81       	ldd	r20, Y+1	; 0x01
    203a:	5a 81       	ldd	r21, Y+2	; 0x02
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	24 0f       	add	r18, r20
    204a:	35 1f       	adc	r19, r21
    204c:	2e 5f       	subi	r18, 0xFE	; 254
    204e:	3f 4f       	sbci	r19, 0xFF	; 255
    2050:	f9 01       	movw	r30, r18
    2052:	80 83       	st	Z, r24
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	a2 83       	std	Z+2, r26	; 0x02
    2058:	b3 83       	std	Z+3, r27	; 0x03
}
    205a:	24 96       	adiw	r28, 0x04	; 4
    205c:	e2 e0       	ldi	r30, 0x02	; 2
    205e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002062 <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    2062:	a4 e0       	ldi	r26, 0x04	; 4
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	7c 83       	std	Y+4, r23	; 0x04
    2074:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	0a 97       	sbiw	r24, 0x0a	; 10
    207c:	14 f0       	brlt	.+4      	; 0x2082 <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    2082:	29 81       	ldd	r18, Y+1	; 0x01
    2084:	3a 81       	ldd	r19, Y+2	; 0x02
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	82 57       	subi	r24, 0x72	; 114
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	fc 01       	movw	r30, r24
    2094:	80 81       	ld	r24, Z
}
    2096:	24 96       	adiw	r28, 0x04	; 4
    2098:	e2 e0       	ldi	r30, 0x02	; 2
    209a:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000209e <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    209e:	a4 e0       	ldi	r26, 0x04	; 4
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e5 e5       	ldi	r30, 0x55	; 85
    20a4:	f0 e1       	ldi	r31, 0x10	; 16
    20a6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	7c 83       	std	Y+4, r23	; 0x04
    20b0:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	0a 97       	sbiw	r24, 0x0a	; 10
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    20ba:	0b c0       	rjmp	.+22     	; 0x20d2 <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    20bc:	29 81       	ldd	r18, Y+1	; 0x01
    20be:	3a 81       	ldd	r19, Y+2	; 0x02
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	82 57       	subi	r24, 0x72	; 114
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	21 e0       	ldi	r18, 0x01	; 1
    20ce:	fc 01       	movw	r30, r24
    20d0:	20 83       	st	Z, r18
}
    20d2:	24 96       	adiw	r28, 0x04	; 4
    20d4:	e2 e0       	ldi	r30, 0x02	; 2
    20d6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000020da <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    20da:	a4 e0       	ldi	r26, 0x04	; 4
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e7       	ldi	r30, 0x73	; 115
    20e0:	f0 e1       	ldi	r31, 0x10	; 16
    20e2:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	7c 83       	std	Y+4, r23	; 0x04
    20ec:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	0a 97       	sbiw	r24, 0x0a	; 10
    20f4:	0c f0       	brlt	.+2      	; 0x20f8 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    20f6:	0a c0       	rjmp	.+20     	; 0x210c <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    20f8:	29 81       	ldd	r18, Y+1	; 0x01
    20fa:	3a 81       	ldd	r19, Y+2	; 0x02
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	82 57       	subi	r24, 0x72	; 114
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	fc 01       	movw	r30, r24
    210a:	10 82       	st	Z, r1
}
    210c:	24 96       	adiw	r28, 0x04	; 4
    210e:	e2 e0       	ldi	r30, 0x02	; 2
    2110:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002114 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    2114:	cf 92       	push	r12
    2116:	ef 92       	push	r14
    2118:	0f 93       	push	r16
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_ZN7LCDBaseC1Ev+0xc>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	0f 2e       	mov	r0, r31
    212e:	f7 e0       	ldi	r31, 0x07	; 7
    2130:	cf 2e       	mov	r12, r31
    2132:	f0 2d       	mov	r31, r0
    2134:	0f 2e       	mov	r0, r31
    2136:	f6 e0       	ldi	r31, 0x06	; 6
    2138:	ef 2e       	mov	r14, r31
    213a:	f0 2d       	mov	r31, r0
    213c:	05 e0       	ldi	r16, 0x05	; 5
    213e:	24 e0       	ldi	r18, 0x04	; 4
    2140:	49 e0       	ldi	r20, 0x09	; 9
    2142:	68 e0       	ldi	r22, 0x08	; 8
    2144:	0e 94 41 07 	call	0xe82	; 0xe82 <_ZN13LiquidCrystalC1Ehhhhhh>
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	2d e9       	ldi	r18, 0x9D	; 157
    214e:	31 e0       	ldi	r19, 0x01	; 1
    2150:	fc 01       	movw	r30, r24
    2152:	31 83       	std	Z+1, r19	; 0x01
    2154:	20 83       	st	Z, r18
    Init();
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	08 d0       	rcall	.+16     	; 0x216c <_ZN7LCDBase4InitEv>
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	0f 91       	pop	r16
    2166:	ef 90       	pop	r14
    2168:	cf 90       	pop	r12
    216a:	08 95       	ret

0000216c <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    216c:	a2 e0       	ldi	r26, 0x02	; 2
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ec eb       	ldi	r30, 0xBC	; 188
    2172:	f0 e1       	ldi	r31, 0x10	; 16
    2174:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	42 e0       	ldi	r20, 0x02	; 2
    2184:	60 e1       	ldi	r22, 0x10	; 16
    2186:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN13LiquidCrystal5beginEhhh>
    clear();
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	69 d8       	rcall	.-3886   	; 0x1262 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	78 d8       	rcall	.-3856   	; 0x128a <_ZN13LiquidCrystal9setCursorEhh>

}
    219a:	22 96       	adiw	r28, 0x02	; 2
    219c:	e2 e0       	ldi	r30, 0x02	; 2
    219e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000021a2 <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    21a2:	a4 e0       	ldi	r26, 0x04	; 4
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e7 ed       	ldi	r30, 0xD7	; 215
    21a8:	f0 e1       	ldi	r31, 0x10	; 16
    21aa:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	7c 83       	std	Y+4, r23	; 0x04
    21b4:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    21b6:	2b 81       	ldd	r18, Y+3	; 0x03
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	42 2f       	mov	r20, r18
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	64 d8       	rcall	.-3896   	; 0x128a <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    21c2:	2f e2       	ldi	r18, 0x2F	; 47
    21c4:	33 e0       	ldi	r19, 0x03	; 3
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 cd 24 	call	0x499a	; 0x499a <_ZN5Print5printEPK19__FlashStringHelper>
}
    21d0:	24 96       	adiw	r28, 0x04	; 4
    21d2:	e2 e0       	ldi	r30, 0x02	; 2
    21d4:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000021d8 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    21d8:	a6 e0       	ldi	r26, 0x06	; 6
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e2 ef       	ldi	r30, 0xF2	; 242
    21de:	f0 e1       	ldi	r31, 0x10	; 16
    21e0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	7c 83       	std	Y+4, r23	; 0x04
    21ea:	6b 83       	std	Y+3, r22	; 0x03
    21ec:	5e 83       	std	Y+6, r21	; 0x06
    21ee:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	b9 01       	movw	r22, r18
    21fa:	d3 df       	rcall	.-90     	; 0x21a2 <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	42 2f       	mov	r20, r18
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	41 d8       	rcall	.-3966   	; 0x128a <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	2d 81       	ldd	r18, Y+5	; 0x05
    220e:	3e 81       	ldd	r19, Y+6	; 0x06
    2210:	b9 01       	movw	r22, r18
    2212:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <_ZN5Print5printERK6String>
}
    2216:	26 96       	adiw	r28, 0x06	; 6
    2218:	e2 e0       	ldi	r30, 0x02	; 2
    221a:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000221e <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
    221e:	a2 e0       	ldi	r26, 0x02	; 2
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e1       	ldi	r30, 0x15	; 21
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	fc 01       	movw	r30, r24
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	22 96       	adiw	r28, 0x02	; 2
    223a:	e2 e0       	ldi	r30, 0x02	; 2
    223c:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002240 <_ZN15StringSumHelperC1EPKc>:
private:
  size_t _base, _memory_size;

  template<class T> inline void  _read_block(size_t aAddress, T &aValue) const {
    eeprom_read_block((void*)&aValue, reinterpret_cast<const void*>(aAddress + base()), sizeof(aValue));
  }
    2240:	a4 e0       	ldi	r26, 0x04	; 4
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e6 e2       	ldi	r30, 0x26	; 38
    2246:	f1 e1       	ldi	r31, 0x11	; 17
    2248:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	7c 83       	std	Y+4, r23	; 0x04
    2252:	6b 83       	std	Y+3, r22	; 0x03
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	b9 01       	movw	r22, r18
    225e:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    2262:	24 96       	adiw	r28, 0x04	; 4
    2264:	e2 e0       	ldi	r30, 0x02	; 2
    2266:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000226a <_ZN5PrintC1ERKS_>:
    226a:	a4 e0       	ldi	r26, 0x04	; 4
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f1 e1       	ldi	r31, 0x11	; 17
    2272:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	7c 83       	std	Y+4, r23	; 0x04
    227c:	6b 83       	std	Y+3, r22	; 0x03
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	22 ee       	ldi	r18, 0xE2	; 226
    2284:	31 e0       	ldi	r19, 0x01	; 1
    2286:	fc 01       	movw	r30, r24
    2288:	31 83       	std	Z+1, r19	; 0x01
    228a:	20 83       	st	Z, r18
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	fc 01       	movw	r30, r24
    2292:	22 81       	ldd	r18, Z+2	; 0x02
    2294:	33 81       	ldd	r19, Z+3	; 0x03
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	fc 01       	movw	r30, r24
    229c:	33 83       	std	Z+3, r19	; 0x03
    229e:	22 83       	std	Z+2, r18	; 0x02
    22a0:	24 96       	adiw	r28, 0x04	; 4
    22a2:	e2 e0       	ldi	r30, 0x02	; 2
    22a4:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000022a8 <_ZN13LiquidCrystalC1ERKS_>:
    22a8:	a4 e0       	ldi	r26, 0x04	; 4
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e5       	ldi	r30, 0x5A	; 90
    22ae:	f1 e1       	ldi	r31, 0x11	; 17
    22b0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	7c 83       	std	Y+4, r23	; 0x04
    22ba:	6b 83       	std	Y+3, r22	; 0x03
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	b9 01       	movw	r22, r18
    22c6:	d1 df       	rcall	.-94     	; 0x226a <_ZN5PrintC1ERKS_>
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	21 e7       	ldi	r18, 0x71	; 113
    22ce:	31 e0       	ldi	r19, 0x01	; 1
    22d0:	fc 01       	movw	r30, r24
    22d2:	31 83       	std	Z+1, r19	; 0x01
    22d4:	20 83       	st	Z, r18
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	fc 01       	movw	r30, r24
    22dc:	24 81       	ldd	r18, Z+4	; 0x04
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	fc 01       	movw	r30, r24
    22e4:	24 83       	std	Z+4, r18	; 0x04
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	fc 01       	movw	r30, r24
    22ec:	25 81       	ldd	r18, Z+5	; 0x05
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	fc 01       	movw	r30, r24
    22f4:	25 83       	std	Z+5, r18	; 0x05
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	fc 01       	movw	r30, r24
    22fc:	26 81       	ldd	r18, Z+6	; 0x06
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	fc 01       	movw	r30, r24
    2304:	26 83       	std	Z+6, r18	; 0x06
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	48 e0       	ldi	r20, 0x08	; 8
    2310:	f9 01       	movw	r30, r18
    2312:	37 96       	adiw	r30, 0x07	; 7
    2314:	dc 01       	movw	r26, r24
    2316:	17 96       	adiw	r26, 0x07	; 7
    2318:	01 90       	ld	r0, Z+
    231a:	0d 92       	st	X+, r0
    231c:	4a 95       	dec	r20
    231e:	e1 f7       	brne	.-8      	; 0x2318 <_ZN13LiquidCrystalC1ERKS_+0x70>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	fc 01       	movw	r30, r24
    2326:	27 85       	ldd	r18, Z+15	; 0x0f
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	fc 01       	movw	r30, r24
    232e:	27 87       	std	Z+15, r18	; 0x0f
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	fc 01       	movw	r30, r24
    2336:	20 89       	ldd	r18, Z+16	; 0x10
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	fc 01       	movw	r30, r24
    233e:	20 8b       	std	Z+16, r18	; 0x10
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	fc 01       	movw	r30, r24
    2346:	21 89       	ldd	r18, Z+17	; 0x11
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	fc 01       	movw	r30, r24
    234e:	21 8b       	std	Z+17, r18	; 0x11
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	fc 01       	movw	r30, r24
    2356:	22 89       	ldd	r18, Z+18	; 0x12
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	fc 01       	movw	r30, r24
    235e:	22 8b       	std	Z+18, r18	; 0x12
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	fc 01       	movw	r30, r24
    2366:	23 89       	ldd	r18, Z+19	; 0x13
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	fc 01       	movw	r30, r24
    236e:	23 8b       	std	Z+19, r18	; 0x13
    2370:	29 81       	ldd	r18, Y+1	; 0x01
    2372:	3a 81       	ldd	r19, Y+2	; 0x02
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	fc 01       	movw	r30, r24
    237a:	84 89       	ldd	r24, Z+20	; 0x14
    237c:	95 89       	ldd	r25, Z+21	; 0x15
    237e:	a6 89       	ldd	r26, Z+22	; 0x16
    2380:	b7 89       	ldd	r27, Z+23	; 0x17
    2382:	f9 01       	movw	r30, r18
    2384:	84 8b       	std	Z+20, r24	; 0x14
    2386:	95 8b       	std	Z+21, r25	; 0x15
    2388:	a6 8b       	std	Z+22, r26	; 0x16
    238a:	b7 8b       	std	Z+23, r27	; 0x17
    238c:	24 96       	adiw	r28, 0x04	; 4
    238e:	e2 e0       	ldi	r30, 0x02	; 2
    2390:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002394 <_ZN7LCDBaseC1ERKS_>:
    2394:	a4 e0       	ldi	r26, 0x04	; 4
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e0 ed       	ldi	r30, 0xD0	; 208
    239a:	f1 e1       	ldi	r31, 0x11	; 17
    239c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	7c 83       	std	Y+4, r23	; 0x04
    23a6:	6b 83       	std	Y+3, r22	; 0x03
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	b9 01       	movw	r22, r18
    23b2:	7a df       	rcall	.-268    	; 0x22a8 <_ZN13LiquidCrystalC1ERKS_>
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	2d e9       	ldi	r18, 0x9D	; 157
    23ba:	31 e0       	ldi	r19, 0x01	; 1
    23bc:	fc 01       	movw	r30, r24
    23be:	31 83       	std	Z+1, r19	; 0x01
    23c0:	20 83       	st	Z, r18
    23c2:	24 96       	adiw	r28, 0x04	; 4
    23c4:	e2 e0       	ldi	r30, 0x02	; 2
    23c6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000023ca <_ZN8PHSensorC1Eiib7LCDBase>:
    23ca:	a9 e0       	ldi	r26, 0x09	; 9
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	eb ee       	ldi	r30, 0xEB	; 235
    23d0:	f1 e1       	ldi	r31, 0x11	; 17
    23d2:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	7c 83       	std	Y+4, r23	; 0x04
    23dc:	6b 83       	std	Y+3, r22	; 0x03
    23de:	5e 83       	std	Y+6, r21	; 0x06
    23e0:	4d 83       	std	Y+5, r20	; 0x05
    23e2:	2f 83       	std	Y+7, r18	; 0x07
    23e4:	19 87       	std	Y+9, r17	; 0x09
    23e6:	08 87       	std	Y+8, r16	; 0x08
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	9a d9       	rcall	.-3276   	; 0x1722 <_ZN4erom7StorageC1Ev>
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	25 ea       	ldi	r18, 0xA5	; 165
    23f4:	31 e0       	ldi	r19, 0x01	; 1
    23f6:	fc 01       	movw	r30, r24
    23f8:	31 83       	std	Z+1, r19	; 0x01
    23fa:	20 83       	st	Z, r18
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	2b 81       	ldd	r18, Y+3	; 0x03
    2402:	3c 81       	ldd	r19, Y+4	; 0x04
    2404:	fc 01       	movw	r30, r24
    2406:	34 87       	std	Z+12, r19	; 0x0c
    2408:	23 87       	std	Z+11, r18	; 0x0b
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	8b 57       	subi	r24, 0x7B	; 123
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	fc 01       	movw	r30, r24
    2414:	11 82       	std	Z+1, r1	; 0x01
    2416:	10 82       	st	Z, r1
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	89 57       	subi	r24, 0x79	; 121
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	2d 81       	ldd	r18, Y+5	; 0x05
    2422:	3e 81       	ldd	r19, Y+6	; 0x06
    2424:	fc 01       	movw	r30, r24
    2426:	31 83       	std	Z+1, r19	; 0x01
    2428:	20 83       	st	Z, r18
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	8b 56       	subi	r24, 0x6B	; 107
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	2f 81       	ldd	r18, Y+7	; 0x07
    2434:	fc 01       	movw	r30, r24
    2436:	20 83       	st	Z, r18
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	8a 56       	subi	r24, 0x6A	; 106
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	28 85       	ldd	r18, Y+8	; 0x08
    2442:	39 85       	ldd	r19, Y+9	; 0x09
    2444:	b9 01       	movw	r22, r18
    2446:	a6 df       	rcall	.-180    	; 0x2394 <_ZN7LCDBaseC1ERKS_>
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	82 55       	subi	r24, 0x52	; 82
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	6d e0       	ldi	r22, 0x0D	; 13
    2452:	71 e0       	ldi	r23, 0x01	; 1
    2454:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	8c 54       	subi	r24, 0x4C	; 76
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	6d e0       	ldi	r22, 0x0D	; 13
    2462:	71 e0       	ldi	r23, 0x01	; 1
    2464:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	9a 81       	ldd	r25, Y+2	; 0x02
    246c:	86 54       	subi	r24, 0x46	; 70
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	63 e0       	ldi	r22, 0x03	; 3
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	68 d4       	rcall	.+2256   	; 0x2d46 <_ZN4erom5EntryIdEC1Ej>
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	04 d0       	rcall	.+8      	; 0x2484 <_ZN8PHSensor4InitEv>
    247c:	29 96       	adiw	r28, 0x09	; 9
    247e:	e4 e0       	ldi	r30, 0x04	; 4
    2480:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00002484 <_ZN8PHSensor4InitEv>:
    2484:	a6 e0       	ldi	r26, 0x06	; 6
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e4       	ldi	r30, 0x48	; 72
    248a:	f2 e1       	ldi	r31, 0x12	; 18
    248c:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__prologue_saves__+0x1e>
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	8d e0       	ldi	r24, 0x0D	; 13
    2498:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	86 54       	subi	r24, 0x46	; 70
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	70 d4       	rcall	.+2272   	; 0x2d86 <_ZN4erom5EntryIdE4loadEv>
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	86 54       	subi	r24, 0x46	; 70
    24ac:	9f 4f       	sbci	r25, 0xFF	; 255
    24ae:	90 d4       	rcall	.+2336   	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    24b0:	fc 01       	movw	r30, r24
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	a2 81       	ldd	r26, Z+2	; 0x02
    24b8:	b3 81       	ldd	r27, Z+3	; 0x03
    24ba:	11 e0       	ldi	r17, 0x01	; 1
    24bc:	9c 01       	movw	r18, r24
    24be:	ad 01       	movw	r20, r26
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 c8 22 	call	0x4590	; 0x4590 <__unordsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <_ZN8PHSensor4InitEv+0x4a>
    24cc:	10 e0       	ldi	r17, 0x00	; 0
    24ce:	11 23       	and	r17, r17
    24d0:	89 f0       	breq	.+34     	; 0x24f4 <_ZN8PHSensor4InitEv+0x70>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a0 e4       	ldi	r26, 0x40	; 64
    24d8:	b0 e4       	ldi	r27, 0x40	; 64
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	ab 83       	std	Y+3, r26	; 0x03
    24e0:	bc 83       	std	Y+4, r27	; 0x04
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	86 54       	subi	r24, 0x46	; 70
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	9e 01       	movw	r18, r28
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	b9 01       	movw	r22, r18
    24f2:	7d d4       	rcall	.+2298   	; 0x2dee <_ZN4erom5EntryIdEaSERKd>
    24f4:	26 96       	adiw	r28, 0x06	; 6
    24f6:	e3 e0       	ldi	r30, 0x03	; 3
    24f8:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__epilogue_restores__+0x1e>

000024fc <_ZN8PHSensor6UpdateEd>:
    24fc:	a6 e0       	ldi	r26, 0x06	; 6
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e4 e8       	ldi	r30, 0x84	; 132
    2502:	f2 e1       	ldi	r31, 0x12	; 18
    2504:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	4b 83       	std	Y+3, r20	; 0x03
    250e:	5c 83       	std	Y+4, r21	; 0x04
    2510:	6d 83       	std	Y+5, r22	; 0x05
    2512:	7e 83       	std	Y+6, r23	; 0x06
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	86 54       	subi	r24, 0x46	; 70
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	9e 01       	movw	r18, r28
    251e:	2d 5f       	subi	r18, 0xFD	; 253
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	b9 01       	movw	r22, r18
    2524:	64 d4       	rcall	.+2248   	; 0x2dee <_ZN4erom5EntryIdEaSERKd>
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	86 54       	subi	r24, 0x46	; 70
    252c:	9f 4f       	sbci	r25, 0xFF	; 255
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	7c d4       	rcall	.+2296   	; 0x2e2a <_ZNK4erom5EntryIdE4saveEb>
    2532:	26 96       	adiw	r28, 0x06	; 6
    2534:	e2 e0       	ldi	r30, 0x02	; 2
    2536:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000253a <_ZN8PHSensor5GetPHEv>:
    253a:	ae e0       	ldi	r26, 0x0E	; 14
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e3 ea       	ldi	r30, 0xA3	; 163
    2540:	f2 e1       	ldi	r31, 0x12	; 18
    2542:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2546:	9e 87       	std	Y+14, r25	; 0x0e
    2548:	8d 87       	std	Y+13, r24	; 0x0d
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	9e 85       	ldd	r25, Y+14	; 0x0e
    254e:	87 57       	subi	r24, 0x77	; 119
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	fc 01       	movw	r30, r24
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	a2 81       	ldd	r26, Z+2	; 0x02
    255a:	b3 81       	ldd	r27, Z+3	; 0x03
    255c:	fe 01       	movw	r30, r28
    255e:	37 96       	adiw	r30, 0x07	; 7
    2560:	22 e0       	ldi	r18, 0x02	; 2
    2562:	ac 01       	movw	r20, r24
    2564:	bd 01       	movw	r22, r26
    2566:	cf 01       	movw	r24, r30
    2568:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN6StringC1Efh>
    256c:	ce 01       	movw	r24, r28
    256e:	07 96       	adiw	r24, 0x07	; 7
    2570:	56 de       	rcall	.-852    	; 0x221e <_ZNK6String5c_strEv>
    2572:	9c 01       	movw	r18, r24
    2574:	8d 85       	ldd	r24, Y+13	; 0x0d
    2576:	9e 85       	ldd	r25, Y+14	; 0x0e
    2578:	82 55       	subi	r24, 0x52	; 82
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	b9 01       	movw	r22, r18
    257e:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    2582:	ce 01       	movw	r24, r28
    2584:	07 96       	adiw	r24, 0x07	; 7
    2586:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	83 57       	subi	r24, 0x73	; 115
    2590:	9f 4f       	sbci	r25, 0xFF	; 255
    2592:	fc 01       	movw	r30, r24
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	a2 81       	ldd	r26, Z+2	; 0x02
    259a:	b3 81       	ldd	r27, Z+3	; 0x03
    259c:	22 e0       	ldi	r18, 0x02	; 2
    259e:	ac 01       	movw	r20, r24
    25a0:	bd 01       	movw	r22, r26
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN6StringC1Efh>
    25aa:	ce 01       	movw	r24, r28
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	37 de       	rcall	.-914    	; 0x221e <_ZNK6String5c_strEv>
    25b0:	9c 01       	movw	r18, r24
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	8c 54       	subi	r24, 0x4C	; 76
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	b9 01       	movw	r22, r18
    25bc:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    25c0:	ce 01       	movw	r24, r28
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    25c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    25cc:	87 57       	subi	r24, 0x77	; 119
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	fc 01       	movw	r30, r24
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	a2 81       	ldd	r26, Z+2	; 0x02
    25d8:	b3 81       	ldd	r27, Z+3	; 0x03
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	2e 96       	adiw	r28, 0x0e	; 14
    25e0:	e2 e0       	ldi	r30, 0x02	; 2
    25e2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000025e6 <_ZN8PHSensor11CalculatePHEv>:
    25e6:	a4 e1       	ldi	r26, 0x14	; 20
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e9 ef       	ldi	r30, 0xF9	; 249
    25ec:	f2 e1       	ldi	r31, 0x12	; 18
    25ee:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	6f d0       	rcall	.+222    	; 0x26da <_ZN8PHSensor10GetPHValueEv>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	ab 83       	std	Y+3, r26	; 0x03
    2606:	bc 83       	std	Y+4, r27	; 0x04
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	18 86       	std	Y+8, r1	; 0x08
    2612:	1f 82       	std	Y+7, r1	; 0x07
    2614:	32 c0       	rjmp	.+100    	; 0x267a <_ZN8PHSensor11CalculatePHEv+0x94>
    2616:	8f 81       	ldd	r24, Y+7	; 0x07
    2618:	98 85       	ldd	r25, Y+8	; 0x08
    261a:	c2 96       	adiw	r24, 0x32	; 50
    261c:	9a 87       	std	Y+10, r25	; 0x0a
    261e:	89 87       	std	Y+9, r24	; 0x09
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	09 2e       	mov	r0, r25
    2626:	00 0c       	add	r0, r0
    2628:	aa 0b       	sbc	r26, r26
    262a:	bb 0b       	sbc	r27, r27
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 43 26 	call	0x4c86	; 0x4c86 <delay>
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	50 d0       	rcall	.+160    	; 0x26da <_ZN8PHSensor10GetPHValueEv>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8b 87       	std	Y+11, r24	; 0x0b
    2640:	9c 87       	std	Y+12, r25	; 0x0c
    2642:	ad 87       	std	Y+13, r26	; 0x0d
    2644:	be 87       	std	Y+14, r27	; 0x0e
    2646:	2b 85       	ldd	r18, Y+11	; 0x0b
    2648:	3c 85       	ldd	r19, Y+12	; 0x0c
    264a:	4d 85       	ldd	r20, Y+13	; 0x0d
    264c:	5e 85       	ldd	r21, Y+14	; 0x0e
    264e:	69 81       	ldd	r22, Y+1	; 0x01
    2650:	7a 81       	ldd	r23, Y+2	; 0x02
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <__addsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	ab 83       	std	Y+3, r26	; 0x03
    2664:	bc 83       	std	Y+4, r27	; 0x04
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	9e 81       	ldd	r25, Y+6	; 0x06
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	8f 81       	ldd	r24, Y+7	; 0x07
    2672:	98 85       	ldd	r25, Y+8	; 0x08
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	98 87       	std	Y+8, r25	; 0x08
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	8f 81       	ldd	r24, Y+7	; 0x07
    267c:	98 85       	ldd	r25, Y+8	; 0x08
    267e:	45 97       	sbiw	r24, 0x15	; 21
    2680:	54 f2       	brlt	.-108    	; 0x2616 <_ZN8PHSensor11CalculatePHEv+0x30>
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	09 2e       	mov	r0, r25
    2688:	00 0c       	add	r0, r0
    268a:	aa 0b       	sbc	r26, r26
    268c:	bb 0b       	sbc	r27, r27
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 b5 21 	call	0x436a	; 0x436a <__floatsisf>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 01       	movw	r18, r24
    269c:	ad 01       	movw	r20, r26
    269e:	69 81       	ldd	r22, Y+1	; 0x01
    26a0:	7a 81       	ldd	r23, Y+2	; 0x02
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	0e 94 4b 21 	call	0x4296	; 0x4296 <__divsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8f 87       	std	Y+15, r24	; 0x0f
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	a9 8b       	std	Y+17, r26	; 0x11
    26b4:	ba 8b       	std	Y+18, r27	; 0x12
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	9c 01       	movw	r18, r24
    26bc:	27 57       	subi	r18, 0x77	; 119
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	98 89       	ldd	r25, Y+16	; 0x10
    26c4:	a9 89       	ldd	r26, Y+17	; 0x11
    26c6:	ba 89       	ldd	r27, Y+18	; 0x12
    26c8:	f9 01       	movw	r30, r18
    26ca:	80 83       	st	Z, r24
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	a2 83       	std	Z+2, r26	; 0x02
    26d0:	b3 83       	std	Z+3, r27	; 0x03
    26d2:	64 96       	adiw	r28, 0x14	; 20
    26d4:	e2 e0       	ldi	r30, 0x02	; 2
    26d6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000026da <_ZN8PHSensor10GetPHValueEv>:
    26da:	ac e0       	ldi	r26, 0x0C	; 12
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e3 e7       	ldi	r30, 0x73	; 115
    26e0:	f3 e1       	ldi	r31, 0x13	; 19
    26e2:	0c 94 62 2a 	jmp	0x54c4	; 0x54c4 <__prologue_saves__+0x14>
    26e6:	9c 87       	std	Y+12, r25	; 0x0c
    26e8:	8b 87       	std	Y+11, r24	; 0x0b
    26ea:	8b ef       	ldi	r24, 0xFB	; 251
    26ec:	92 e0       	ldi	r25, 0x02	; 2
    26ee:	fc 01       	movw	r30, r24
    26f0:	80 81       	ld	r24, Z
    26f2:	88 23       	and	r24, r24
    26f4:	89 f4       	brne	.+34     	; 0x2718 <_ZN8PHSensor10GetPHValueEv+0x3e>
    26f6:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    2702:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    2706:	a0 93 0d 03 	sts	0x030D, r26	; 0x80030d <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    270a:	b0 93 0e 03 	sts	0x030E, r27	; 0x80030e <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    270e:	8b ef       	ldi	r24, 0xFB	; 251
    2710:	92 e0       	ldi	r25, 0x02	; 2
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	fc 01       	movw	r30, r24
    2716:	20 83       	st	Z, r18
    2718:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    2724:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    2728:	a0 91 0d 03 	lds	r26, 0x030D	; 0x80030d <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    272c:	b0 91 0e 03 	lds	r27, 0x030E	; 0x80030e <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    2730:	79 01       	movw	r14, r18
    2732:	8a 01       	movw	r16, r20
    2734:	e8 1a       	sub	r14, r24
    2736:	f9 0a       	sbc	r15, r25
    2738:	0a 0b       	sbc	r16, r26
    273a:	1b 0b       	sbc	r17, r27
    273c:	d8 01       	movw	r26, r16
    273e:	c7 01       	movw	r24, r14
    2740:	21 e0       	ldi	r18, 0x01	; 1
    2742:	8f 36       	cpi	r24, 0x6F	; 111
    2744:	91 05       	cpc	r25, r1
    2746:	a1 05       	cpc	r26, r1
    2748:	b1 05       	cpc	r27, r1
    274a:	08 f4       	brcc	.+2      	; 0x274e <_ZN8PHSensor10GetPHValueEv+0x74>
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	22 23       	and	r18, r18
    2750:	09 f4       	brne	.+2      	; 0x2754 <_ZN8PHSensor10GetPHValueEv+0x7a>
    2752:	9b c0       	rjmp	.+310    	; 0x288a <_ZN8PHSensor10GetPHValueEv+0x1b0>
    2754:	8c e3       	ldi	r24, 0x3C	; 60
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	8b 85       	ldd	r24, Y+11	; 0x0b
    275e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2760:	8b 57       	subi	r24, 0x7B	; 123
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	fc 01       	movw	r30, r24
    2766:	00 81       	ld	r16, Z
    2768:	11 81       	ldd	r17, Z+1	; 0x01
    276a:	98 01       	movw	r18, r16
    276c:	2f 5f       	subi	r18, 0xFF	; 255
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	8b 85       	ldd	r24, Y+11	; 0x0b
    2772:	9c 85       	ldd	r25, Y+12	; 0x0c
    2774:	8b 57       	subi	r24, 0x7B	; 123
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	fc 01       	movw	r30, r24
    277a:	31 83       	std	Z+1, r19	; 0x01
    277c:	20 83       	st	Z, r18
    277e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2780:	9c 85       	ldd	r25, Y+12	; 0x0c
    2782:	fc 01       	movw	r30, r24
    2784:	83 85       	ldd	r24, Z+11	; 0x0b
    2786:	94 85       	ldd	r25, Z+12	; 0x0c
    2788:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <analogRead>
    278c:	ac 01       	movw	r20, r24
    278e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2790:	3c 85       	ldd	r19, Y+12	; 0x0c
    2792:	c8 01       	movw	r24, r16
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	0d 96       	adiw	r24, 0x0d	; 13
    279e:	fc 01       	movw	r30, r24
    27a0:	51 83       	std	Z+1, r21	; 0x01
    27a2:	40 83       	st	Z, r20
    27a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    27a8:	8b 57       	subi	r24, 0x7B	; 123
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	fc 01       	movw	r30, r24
    27ae:	20 81       	ld	r18, Z
    27b0:	31 81       	ldd	r19, Z+1	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	39 f4       	brne	.+14     	; 0x27ca <_ZN8PHSensor10GetPHValueEv+0xf0>
    27bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27be:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c0:	8b 57       	subi	r24, 0x7B	; 123
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	fc 01       	movw	r30, r24
    27c6:	11 82       	std	Z+1, r1	; 0x01
    27c8:	10 82       	st	Z, r1
    27ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    27cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ce:	9c 01       	movw	r18, r24
    27d0:	23 5f       	subi	r18, 0xF3	; 243
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	49 81       	ldd	r20, Y+1	; 0x01
    27d6:	5a 81       	ldd	r21, Y+2	; 0x02
    27d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27da:	9c 85       	ldd	r25, Y+12	; 0x0c
    27dc:	b9 01       	movw	r22, r18
    27de:	27 d1       	rcall	.+590    	; 0x2a2e <_ZN8PHSensor16CalculateAverageEPii>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8b 83       	std	Y+3, r24	; 0x03
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	ad 83       	std	Y+5, r26	; 0x05
    27ea:	be 83       	std	Y+6, r27	; 0x06
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 ea       	ldi	r20, 0xA0	; 160
    27f2:	50 e4       	ldi	r21, 0x40	; 64
    27f4:	6b 81       	ldd	r22, Y+3	; 0x03
    27f6:	7c 81       	ldd	r23, Y+4	; 0x04
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	0e 94 65 22 	call	0x44ca	; 0x44ca <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e8       	ldi	r20, 0x80	; 128
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 4b 21 	call	0x4296	; 0x4296 <__divsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	2b 85       	ldd	r18, Y+11	; 0x0b
    281a:	3c 85       	ldd	r19, Y+12	; 0x0c
    281c:	2f 56       	subi	r18, 0x6F	; 111
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	f9 01       	movw	r30, r18
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
    282a:	8b 85       	ldd	r24, Y+11	; 0x0b
    282c:	9c 85       	ldd	r25, Y+12	; 0x0c
    282e:	8f 56       	subi	r24, 0x6F	; 111
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	fc 01       	movw	r30, r24
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	a2 81       	ldd	r26, Z+2	; 0x02
    283a:	b3 81       	ldd	r27, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e6       	ldi	r20, 0x60	; 96
    2842:	50 e4       	ldi	r21, 0x40	; 64
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 65 22 	call	0x44ca	; 0x44ca <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	6c 01       	movw	r12, r24
    2852:	7d 01       	movw	r14, r26
    2854:	8b 85       	ldd	r24, Y+11	; 0x0b
    2856:	9c 85       	ldd	r25, Y+12	; 0x0c
    2858:	86 54       	subi	r24, 0x46	; 70
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	b9 d2       	rcall	.+1394   	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    285e:	fc 01       	movw	r30, r24
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	a2 81       	ldd	r26, Z+2	; 0x02
    2866:	b3 81       	ldd	r27, Z+3	; 0x03
    2868:	9c 01       	movw	r18, r24
    286a:	ad 01       	movw	r20, r26
    286c:	c7 01       	movw	r24, r14
    286e:	b6 01       	movw	r22, r12
    2870:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <__addsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8f 83       	std	Y+7, r24	; 0x07
    287a:	98 87       	std	Y+8, r25	; 0x08
    287c:	a9 87       	std	Y+9, r26	; 0x09
    287e:	ba 87       	std	Y+10, r27	; 0x0a
    2880:	8f 81       	ldd	r24, Y+7	; 0x07
    2882:	98 85       	ldd	r25, Y+8	; 0x08
    2884:	a9 85       	ldd	r26, Y+9	; 0x09
    2886:	ba 85       	ldd	r27, Y+10	; 0x0a
    2888:	09 c0       	rjmp	.+18     	; 0x289c <_ZN8PHSensor10GetPHValueEv+0x1c2>
    288a:	8b 85       	ldd	r24, Y+11	; 0x0b
    288c:	9c 85       	ldd	r25, Y+12	; 0x0c
    288e:	87 57       	subi	r24, 0x77	; 119
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	fc 01       	movw	r30, r24
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	a2 81       	ldd	r26, Z+2	; 0x02
    289a:	b3 81       	ldd	r27, Z+3	; 0x03
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	2c 96       	adiw	r28, 0x0c	; 12
    28a2:	e8 e0       	ldi	r30, 0x08	; 8
    28a4:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__epilogue_restores__+0x14>

000028a8 <_ZN15StringSumHelperD1Ev>:
    28a8:	a2 e0       	ldi	r26, 0x02	; 2
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ea e5       	ldi	r30, 0x5A	; 90
    28ae:	f4 e1       	ldi	r31, 0x14	; 20
    28b0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    28c0:	22 96       	adiw	r28, 0x02	; 2
    28c2:	e2 e0       	ldi	r30, 0x02	; 2
    28c4:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000028c8 <_ZN8PHSensor12PrintPHToLCDEv>:
    28c8:	ae e1       	ldi	r26, 0x1E	; 30
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ea e6       	ldi	r30, 0x6A	; 106
    28ce:	f4 e1       	ldi	r31, 0x14	; 20
    28d0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    28d4:	9e 8f       	std	Y+30, r25	; 0x1e
    28d6:	8d 8f       	std	Y+29, r24	; 0x1d
    28d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28dc:	2e de       	rcall	.-932    	; 0x253a <_ZN8PHSensor5GetPHEv>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	ab 83       	std	Y+3, r26	; 0x03
    28e8:	bc 83       	std	Y+4, r27	; 0x04
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	fc 01       	movw	r30, r24
    28f0:	80 81       	ld	r24, Z
    28f2:	88 23       	and	r24, r24
    28f4:	89 f4       	brne	.+34     	; 0x2918 <_ZN8PHSensor12PrintPHToLCDEv+0x50>
    28f6:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2902:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2906:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    290a:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	93 e0       	ldi	r25, 0x03	; 3
    2912:	21 e0       	ldi	r18, 0x01	; 1
    2914:	fc 01       	movw	r30, r24
    2916:	20 83       	st	Z, r18
    2918:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    291c:	9b 01       	movw	r18, r22
    291e:	ac 01       	movw	r20, r24
    2920:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2924:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2928:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    292c:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2930:	28 1b       	sub	r18, r24
    2932:	39 0b       	sbc	r19, r25
    2934:	4a 0b       	sbc	r20, r26
    2936:	5b 0b       	sbc	r21, r27
    2938:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    293c:	89 57       	subi	r24, 0x79	; 121
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	fc 01       	movw	r30, r24
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	80 57       	subi	r24, 0x70	; 112
    2948:	9e 4f       	sbci	r25, 0xFE	; 254
    294a:	09 2e       	mov	r0, r25
    294c:	00 0c       	add	r0, r0
    294e:	aa 0b       	sbc	r26, r26
    2950:	bb 0b       	sbc	r27, r27
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	82 17       	cp	r24, r18
    2956:	93 07       	cpc	r25, r19
    2958:	a4 07       	cpc	r26, r20
    295a:	b5 07       	cpc	r27, r21
    295c:	08 f0       	brcs	.+2      	; 0x2960 <_ZN8PHSensor12PrintPHToLCDEv+0x98>
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	66 23       	and	r22, r22
    2962:	09 f4       	brne	.+2      	; 0x2966 <_ZN8PHSensor12PrintPHToLCDEv+0x9e>
    2964:	60 c0       	rjmp	.+192    	; 0x2a26 <_ZN8PHSensor12PrintPHToLCDEv+0x15e>
    2966:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2968:	9e 8d       	ldd	r25, Y+30	; 0x1e
    296a:	8b 56       	subi	r24, 0x6B	; 107
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	fc 01       	movw	r30, r24
    2970:	80 81       	ld	r24, Z
    2972:	88 23       	and	r24, r24
    2974:	09 f4       	brne	.+2      	; 0x2978 <_ZN8PHSensor12PrintPHToLCDEv+0xb0>
    2976:	41 c0       	rjmp	.+130    	; 0x29fa <_ZN8PHSensor12PrintPHToLCDEv+0x132>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	ab 81       	ldd	r26, Y+3	; 0x03
    297e:	bc 81       	ldd	r27, Y+4	; 0x04
    2980:	fe 01       	movw	r30, r28
    2982:	71 96       	adiw	r30, 0x11	; 17
    2984:	22 e0       	ldi	r18, 0x02	; 2
    2986:	ac 01       	movw	r20, r24
    2988:	bd 01       	movw	r22, r26
    298a:	cf 01       	movw	r24, r30
    298c:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN6StringC1Edh>
    2990:	ce 01       	movw	r24, r28
    2992:	0b 96       	adiw	r24, 0x0b	; 11
    2994:	6e e0       	ldi	r22, 0x0E	; 14
    2996:	71 e0       	ldi	r23, 0x01	; 1
    2998:	53 dc       	rcall	.-1882   	; 0x2240 <_ZN15StringSumHelperC1EPKc>
    299a:	9e 01       	movw	r18, r28
    299c:	2f 5e       	subi	r18, 0xEF	; 239
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	ce 01       	movw	r24, r28
    29a2:	0b 96       	adiw	r24, 0x0b	; 11
    29a4:	b9 01       	movw	r22, r18
    29a6:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_ZplRK15StringSumHelperRK6String>
    29aa:	9c 01       	movw	r18, r24
    29ac:	ce 01       	movw	r24, r28
    29ae:	47 96       	adiw	r24, 0x17	; 23
    29b0:	b9 01       	movw	r22, r18
    29b2:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    29b6:	ce 01       	movw	r24, r28
    29b8:	0b 96       	adiw	r24, 0x0b	; 11
    29ba:	76 df       	rcall	.-276    	; 0x28a8 <_ZN15StringSumHelperD1Ev>
    29bc:	ce 01       	movw	r24, r28
    29be:	41 96       	adiw	r24, 0x11	; 17
    29c0:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    29c4:	9e 01       	movw	r18, r28
    29c6:	29 5e       	subi	r18, 0xE9	; 233
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	ce 01       	movw	r24, r28
    29cc:	05 96       	adiw	r24, 0x05	; 5
    29ce:	b9 01       	movw	r22, r18
    29d0:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    29d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d8:	8a 56       	subi	r24, 0x6A	; 106
    29da:	9f 4f       	sbci	r25, 0xFF	; 255
    29dc:	9e 01       	movw	r18, r28
    29de:	2b 5f       	subi	r18, 0xFB	; 251
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	a9 01       	movw	r20, r18
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	f7 db       	rcall	.-2066   	; 0x21d8 <_ZN7LCDBase9PrintLineEs6String>
    29ea:	ce 01       	movw	r24, r28
    29ec:	05 96       	adiw	r24, 0x05	; 5
    29ee:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    29f2:	ce 01       	movw	r24, r28
    29f4:	47 96       	adiw	r24, 0x17	; 23
    29f6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    29fa:	8d e0       	ldi	r24, 0x0D	; 13
    29fc:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <digitalRead>
    2a00:	98 2f       	mov	r25, r24
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	89 27       	eor	r24, r25
    2a06:	68 2f       	mov	r22, r24
    2a08:	8d e0       	ldi	r24, 0x0D	; 13
    2a0a:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
    2a0e:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2a1a:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2a1e:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2a22:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2a26:	6e 96       	adiw	r28, 0x1e	; 30
    2a28:	e2 e0       	ldi	r30, 0x02	; 2
    2a2a:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002a2e <_ZN8PHSensor16CalculateAverageEPii>:
    2a2e:	cf 92       	push	r12
    2a30:	df 92       	push	r13
    2a32:	ef 92       	push	r14
    2a34:	ff 92       	push	r15
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	68 97       	sbiw	r28, 0x18	; 24
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	98 8b       	std	Y+16, r25	; 0x10
    2a4c:	8f 87       	std	Y+15, r24	; 0x0f
    2a4e:	7a 8b       	std	Y+18, r23	; 0x12
    2a50:	69 8b       	std	Y+17, r22	; 0x11
    2a52:	5c 8b       	std	Y+20, r21	; 0x14
    2a54:	4b 8b       	std	Y+19, r20	; 0x13
    2a56:	1f 82       	std	Y+7, r1	; 0x07
    2a58:	18 86       	std	Y+8, r1	; 0x08
    2a5a:	19 86       	std	Y+9, r1	; 0x09
    2a5c:	1a 86       	std	Y+10, r1	; 0x0a
    2a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a60:	9c 89       	ldd	r25, Y+20	; 0x14
    2a62:	18 16       	cp	r1, r24
    2a64:	19 06       	cpc	r1, r25
    2a66:	5c f0       	brlt	.+22     	; 0x2a7e <_ZN8PHSensor16CalculateAverageEPii+0x50>
    2a68:	80 e4       	ldi	r24, 0x40	; 64
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	87 e6       	ldi	r24, 0x67	; 103
    2a70:	95 e0       	ldi	r25, 0x05	; 5
    2a72:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	2b c1       	rjmp	.+598    	; 0x2cd4 <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	05 97       	sbiw	r24, 0x05	; 5
    2a84:	0c f0       	brlt	.+2      	; 0x2a88 <_ZN8PHSensor16CalculateAverageEPii+0x5a>
    2a86:	49 c0       	rjmp	.+146    	; 0x2b1a <_ZN8PHSensor16CalculateAverageEPii+0xec>
    2a88:	1a 82       	std	Y+2, r1	; 0x02
    2a8a:	19 82       	std	Y+1, r1	; 0x01
    2a8c:	20 c0       	rjmp	.+64     	; 0x2ace <_ZN8PHSensor16CalculateAverageEPii+0xa0>
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	29 89       	ldd	r18, Y+17	; 0x11
    2a98:	3a 89       	ldd	r19, Y+18	; 0x12
    2a9a:	82 0f       	add	r24, r18
    2a9c:	93 1f       	adc	r25, r19
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	09 2e       	mov	r0, r25
    2aa6:	00 0c       	add	r0, r0
    2aa8:	aa 0b       	sbc	r26, r26
    2aaa:	bb 0b       	sbc	r27, r27
    2aac:	2f 81       	ldd	r18, Y+7	; 0x07
    2aae:	38 85       	ldd	r19, Y+8	; 0x08
    2ab0:	49 85       	ldd	r20, Y+9	; 0x09
    2ab2:	5a 85       	ldd	r21, Y+10	; 0x0a
    2ab4:	82 0f       	add	r24, r18
    2ab6:	93 1f       	adc	r25, r19
    2ab8:	a4 1f       	adc	r26, r20
    2aba:	b5 1f       	adc	r27, r21
    2abc:	8f 83       	std	Y+7, r24	; 0x07
    2abe:	98 87       	std	Y+8, r25	; 0x08
    2ac0:	a9 87       	std	Y+9, r26	; 0x09
    2ac2:	ba 87       	std	Y+10, r27	; 0x0a
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	29 81       	ldd	r18, Y+1	; 0x01
    2ad0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	28 17       	cp	r18, r24
    2ad8:	39 07       	cpc	r19, r25
    2ada:	cc f2       	brlt	.-78     	; 0x2a8e <_ZN8PHSensor16CalculateAverageEPii+0x60>
    2adc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ade:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	99 0f       	add	r25, r25
    2ae4:	44 0b       	sbc	r20, r20
    2ae6:	55 0b       	sbc	r21, r21
    2ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aea:	98 85       	ldd	r25, Y+8	; 0x08
    2aec:	a9 85       	ldd	r26, Y+9	; 0x09
    2aee:	ba 85       	ldd	r27, Y+10	; 0x0a
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__divmodsi4>
    2af8:	da 01       	movw	r26, r20
    2afa:	c9 01       	movw	r24, r18
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 b5 21 	call	0x436a	; 0x436a <__floatsisf>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8b 87       	std	Y+11, r24	; 0x0b
    2b0a:	9c 87       	std	Y+12, r25	; 0x0c
    2b0c:	ad 87       	std	Y+13, r26	; 0x0d
    2b0e:	be 87       	std	Y+14, r27	; 0x0e
    2b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b14:	ad 85       	ldd	r26, Y+13	; 0x0d
    2b16:	be 85       	ldd	r27, Y+14	; 0x0e
    2b18:	dd c0       	rjmp	.+442    	; 0x2cd4 <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2b1a:	89 89       	ldd	r24, Y+17	; 0x11
    2b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1e:	fc 01       	movw	r30, r24
    2b20:	20 81       	ld	r18, Z
    2b22:	31 81       	ldd	r19, Z+1	; 0x01
    2b24:	89 89       	ldd	r24, Y+17	; 0x11
    2b26:	9a 89       	ldd	r25, Y+18	; 0x12
    2b28:	02 96       	adiw	r24, 0x02	; 2
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	28 17       	cp	r18, r24
    2b32:	39 07       	cpc	r19, r25
    2b34:	7c f4       	brge	.+30     	; 0x2b54 <_ZN8PHSensor16CalculateAverageEPii+0x126>
    2b36:	89 89       	ldd	r24, Y+17	; 0x11
    2b38:	9a 89       	ldd	r25, Y+18	; 0x12
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	89 89       	ldd	r24, Y+17	; 0x11
    2b46:	9a 89       	ldd	r25, Y+18	; 0x12
    2b48:	fc 01       	movw	r30, r24
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	9c 83       	std	Y+4, r25	; 0x04
    2b50:	8b 83       	std	Y+3, r24	; 0x03
    2b52:	0e c0       	rjmp	.+28     	; 0x2b70 <_ZN8PHSensor16CalculateAverageEPii+0x142>
    2b54:	89 89       	ldd	r24, Y+17	; 0x11
    2b56:	9a 89       	ldd	r25, Y+18	; 0x12
    2b58:	fc 01       	movw	r30, r24
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	89 89       	ldd	r24, Y+17	; 0x11
    2b64:	9a 89       	ldd	r25, Y+18	; 0x12
    2b66:	fc 01       	movw	r30, r24
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	80 c0       	rjmp	.+256    	; 0x2c7a <_ZN8PHSensor16CalculateAverageEPii+0x24c>
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	29 89       	ldd	r18, Y+17	; 0x11
    2b84:	3a 89       	ldd	r19, Y+18	; 0x12
    2b86:	82 0f       	add	r24, r18
    2b88:	93 1f       	adc	r25, r19
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	20 81       	ld	r18, Z
    2b8e:	31 81       	ldd	r19, Z+1	; 0x01
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	28 17       	cp	r18, r24
    2b96:	39 07       	cpc	r19, r25
    2b98:	04 f5       	brge	.+64     	; 0x2bda <_ZN8PHSensor16CalculateAverageEPii+0x1ac>
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	09 2e       	mov	r0, r25
    2ba0:	00 0c       	add	r0, r0
    2ba2:	aa 0b       	sbc	r26, r26
    2ba4:	bb 0b       	sbc	r27, r27
    2ba6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ba8:	38 85       	ldd	r19, Y+8	; 0x08
    2baa:	49 85       	ldd	r20, Y+9	; 0x09
    2bac:	5a 85       	ldd	r21, Y+10	; 0x0a
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	a4 1f       	adc	r26, r20
    2bb4:	b5 1f       	adc	r27, r21
    2bb6:	8f 83       	std	Y+7, r24	; 0x07
    2bb8:	98 87       	std	Y+8, r25	; 0x08
    2bba:	a9 87       	std	Y+9, r26	; 0x09
    2bbc:	ba 87       	std	Y+10, r27	; 0x0a
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	29 89       	ldd	r18, Y+17	; 0x11
    2bc8:	3a 89       	ldd	r19, Y+18	; 0x12
    2bca:	82 0f       	add	r24, r18
    2bcc:	93 1f       	adc	r25, r19
    2bce:	fc 01       	movw	r30, r24
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	4b c0       	rjmp	.+150    	; 0x2c70 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	29 89       	ldd	r18, Y+17	; 0x11
    2be4:	3a 89       	ldd	r19, Y+18	; 0x12
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 81       	ld	r18, Z
    2bee:	31 81       	ldd	r19, Z+1	; 0x01
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	82 17       	cp	r24, r18
    2bf6:	93 07       	cpc	r25, r19
    2bf8:	04 f5       	brge	.+64     	; 0x2c3a <_ZN8PHSensor16CalculateAverageEPii+0x20c>
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	09 2e       	mov	r0, r25
    2c00:	00 0c       	add	r0, r0
    2c02:	aa 0b       	sbc	r26, r26
    2c04:	bb 0b       	sbc	r27, r27
    2c06:	2f 81       	ldd	r18, Y+7	; 0x07
    2c08:	38 85       	ldd	r19, Y+8	; 0x08
    2c0a:	49 85       	ldd	r20, Y+9	; 0x09
    2c0c:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c0e:	82 0f       	add	r24, r18
    2c10:	93 1f       	adc	r25, r19
    2c12:	a4 1f       	adc	r26, r20
    2c14:	b5 1f       	adc	r27, r21
    2c16:	8f 83       	std	Y+7, r24	; 0x07
    2c18:	98 87       	std	Y+8, r25	; 0x08
    2c1a:	a9 87       	std	Y+9, r26	; 0x09
    2c1c:	ba 87       	std	Y+10, r27	; 0x0a
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	29 89       	ldd	r18, Y+17	; 0x11
    2c28:	3a 89       	ldd	r19, Y+18	; 0x12
    2c2a:	82 0f       	add	r24, r18
    2c2c:	93 1f       	adc	r25, r19
    2c2e:	fc 01       	movw	r30, r24
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	9c 83       	std	Y+4, r25	; 0x04
    2c36:	8b 83       	std	Y+3, r24	; 0x03
    2c38:	1b c0       	rjmp	.+54     	; 0x2c70 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	29 89       	ldd	r18, Y+17	; 0x11
    2c44:	3a 89       	ldd	r19, Y+18	; 0x12
    2c46:	82 0f       	add	r24, r18
    2c48:	93 1f       	adc	r25, r19
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	09 2e       	mov	r0, r25
    2c52:	00 0c       	add	r0, r0
    2c54:	aa 0b       	sbc	r26, r26
    2c56:	bb 0b       	sbc	r27, r27
    2c58:	2f 81       	ldd	r18, Y+7	; 0x07
    2c5a:	38 85       	ldd	r19, Y+8	; 0x08
    2c5c:	49 85       	ldd	r20, Y+9	; 0x09
    2c5e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c60:	82 0f       	add	r24, r18
    2c62:	93 1f       	adc	r25, r19
    2c64:	a4 1f       	adc	r26, r20
    2c66:	b5 1f       	adc	r27, r21
    2c68:	8f 83       	std	Y+7, r24	; 0x07
    2c6a:	98 87       	std	Y+8, r25	; 0x08
    2c6c:	a9 87       	std	Y+9, r26	; 0x09
    2c6e:	ba 87       	std	Y+10, r27	; 0x0a
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	29 81       	ldd	r18, Y+1	; 0x01
    2c7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	28 17       	cp	r18, r24
    2c84:	39 07       	cpc	r19, r25
    2c86:	0c f4       	brge	.+2      	; 0x2c8a <_ZN8PHSensor16CalculateAverageEPii+0x25c>
    2c88:	78 cf       	rjmp	.-272    	; 0x2b7a <_ZN8PHSensor16CalculateAverageEPii+0x14c>
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	0e 94 b5 21 	call	0x436a	; 0x436a <__floatsisf>
    2c96:	6b 01       	movw	r12, r22
    2c98:	7c 01       	movw	r14, r24
    2c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9e:	02 97       	sbiw	r24, 0x02	; 2
    2ca0:	09 2e       	mov	r0, r25
    2ca2:	00 0c       	add	r0, r0
    2ca4:	aa 0b       	sbc	r26, r26
    2ca6:	bb 0b       	sbc	r27, r27
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 b5 21 	call	0x436a	; 0x436a <__floatsisf>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	ad 01       	movw	r20, r26
    2cb8:	c7 01       	movw	r24, r14
    2cba:	b6 01       	movw	r22, r12
    2cbc:	0e 94 4b 21 	call	0x4296	; 0x4296 <__divsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8b 87       	std	Y+11, r24	; 0x0b
    2cc6:	9c 87       	std	Y+12, r25	; 0x0c
    2cc8:	ad 87       	std	Y+13, r26	; 0x0d
    2cca:	be 87       	std	Y+14, r27	; 0x0e
    2ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cd0:	ad 85       	ldd	r26, Y+13	; 0x0d
    2cd2:	be 85       	ldd	r27, Y+14	; 0x0e
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	68 96       	adiw	r28, 0x18	; 24
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	08 95       	ret

00002cf2 <_ZNK4erom6Access11write_blockIdEEbjRKT_>:
    2cf2:	a6 e0       	ldi	r26, 0x06	; 6
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	ef e7       	ldi	r30, 0x7F	; 127
    2cf8:	f6 e1       	ldi	r31, 0x16	; 22
    2cfa:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	7c 83       	std	Y+4, r23	; 0x04
    2d04:	6b 83       	std	Y+3, r22	; 0x03
    2d06:	5e 83       	std	Y+6, r21	; 0x06
    2d08:	4d 83       	std	Y+5, r20	; 0x05
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	9c 01       	movw	r18, r24
    2d10:	2c 5f       	subi	r18, 0xFC	; 252
    2d12:	3f 4f       	sbci	r19, 0xFF	; 255
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	9a 81       	ldd	r25, Y+2	; 0x02
    2d18:	b9 01       	movw	r22, r18
    2d1a:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZNK4erom6Access8in_rangeEj>
    2d1e:	98 2f       	mov	r25, r24
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	89 27       	eor	r24, r25
    2d24:	88 23       	and	r24, r24
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x3a>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x4c>
    2d2c:	4d 81       	ldd	r20, Y+5	; 0x05
    2d2e:	5e 81       	ldd	r21, Y+6	; 0x06
    2d30:	2b 81       	ldd	r18, Y+3	; 0x03
    2d32:	3c 81       	ldd	r19, Y+4	; 0x04
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	b9 01       	movw	r22, r18
    2d3a:	b1 d0       	rcall	.+354    	; 0x2e9e <_ZNK4erom6Access12_write_blockIdEEvjRKT_>
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	26 96       	adiw	r28, 0x06	; 6
    2d40:	e2 e0       	ldi	r30, 0x02	; 2
    2d42:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002d46 <_ZN4erom5EntryIdEC1Ej>:
    2d46:	a4 e0       	ldi	r26, 0x04	; 4
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    2d4c:	f6 e1       	ldi	r31, 0x16	; 22
    2d4e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2d52:	9a 83       	std	Y+2, r25	; 0x02
    2d54:	89 83       	std	Y+1, r24	; 0x01
    2d56:	7c 83       	std	Y+4, r23	; 0x04
    2d58:	6b 83       	std	Y+3, r22	; 0x03
    2d5a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_ZN4erom6Access8instanceEv>
    2d5e:	9c 01       	movw	r18, r24
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	fc 01       	movw	r30, r24
    2d66:	31 83       	std	Z+1, r19	; 0x01
    2d68:	20 83       	st	Z, r18
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d70:	3c 81       	ldd	r19, Y+4	; 0x04
    2d72:	fc 01       	movw	r30, r24
    2d74:	33 83       	std	Z+3, r19	; 0x03
    2d76:	22 83       	std	Z+2, r18	; 0x02
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	04 d0       	rcall	.+8      	; 0x2d86 <_ZN4erom5EntryIdE4loadEv>
    2d7e:	24 96       	adiw	r28, 0x04	; 4
    2d80:	e2 e0       	ldi	r30, 0x02	; 2
    2d82:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002d86 <_ZN4erom5EntryIdE4loadEv>:
    2d86:	a2 e0       	ldi	r26, 0x02	; 2
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2d8c:	f6 e1       	ldi	r31, 0x16	; 22
    2d8e:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	89 2b       	or	r24, r25
    2da2:	91 f0       	breq	.+36     	; 0x2dc8 <_ZN4erom5EntryIdE4loadEv+0x42>
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	9a 81       	ldd	r25, Y+2	; 0x02
    2da8:	8c 01       	movw	r16, r24
    2daa:	0c 5f       	subi	r16, 0xFC	; 252
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	96 d0       	rcall	.+300    	; 0x2ee0 <_ZNK4erom5EntryIdE7addressEv>
    2db4:	9c 01       	movw	r18, r24
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	a8 01       	movw	r20, r16
    2dc2:	b9 01       	movw	r22, r18
    2dc4:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZNK4erom6Access10read_blockIdEEbjRT_>
    2dc8:	22 96       	adiw	r28, 0x02	; 2
    2dca:	e4 e0       	ldi	r30, 0x04	; 4
    2dcc:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00002dd0 <_ZN4erom5EntryIdEcvRdEv>:
  //  v = 0;                // Set RAM value to '0'
  //  v.load();             // Load value from EEPROM
  //  if (v != 100) Serial.print("EEPROM write error!");
  inline operator type() const { return value; }
  inline operator const type&() const { return value; }
  inline operator type&() { return value; }
    2dd0:	a2 e0       	ldi	r26, 0x02	; 2
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	ee ee       	ldi	r30, 0xEE	; 238
    2dd6:	f6 e1       	ldi	r31, 0x16	; 22
    2dd8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	04 96       	adiw	r24, 0x04	; 4
    2de6:	22 96       	adiw	r28, 0x02	; 2
    2de8:	e2 e0       	ldi	r30, 0x02	; 2
    2dea:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002dee <_ZN4erom5EntryIdEaSERKd>:
    2dee:	a4 e0       	ldi	r26, 0x04	; 4
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ed ef       	ldi	r30, 0xFD	; 253
    2df4:	f6 e1       	ldi	r31, 0x16	; 22
    2df6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	7c 83       	std	Y+4, r23	; 0x04
    2e00:	6b 83       	std	Y+3, r22	; 0x03
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	fc 01       	movw	r30, r24
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e0e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e10:	29 81       	ldd	r18, Y+1	; 0x01
    2e12:	3a 81       	ldd	r19, Y+2	; 0x02
    2e14:	f9 01       	movw	r30, r18
    2e16:	84 83       	std	Z+4, r24	; 0x04
    2e18:	95 83       	std	Z+5, r25	; 0x05
    2e1a:	a6 83       	std	Z+6, r26	; 0x06
    2e1c:	b7 83       	std	Z+7, r27	; 0x07
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	24 96       	adiw	r28, 0x04	; 4
    2e24:	e2 e0       	ldi	r30, 0x02	; 2
    2e26:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002e2a <_ZNK4erom5EntryIdE4saveEb>:
    2e2a:	a3 e0       	ldi	r26, 0x03	; 3
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	eb e1       	ldi	r30, 0x1B	; 27
    2e30:	f7 e1       	ldi	r31, 0x17	; 23
    2e32:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	6b 83       	std	Y+3, r22	; 0x03
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	fc 01       	movw	r30, r24
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	89 2b       	or	r24, r25
    2e48:	31 f1       	breq	.+76     	; 0x2e96 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	88 23       	and	r24, r24
    2e4e:	91 f0       	breq	.+36     	; 0x2e74 <_ZNK4erom5EntryIdE4saveEb+0x4a>
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	8c 01       	movw	r16, r24
    2e56:	0c 5f       	subi	r16, 0xFC	; 252
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	40 d0       	rcall	.+128    	; 0x2ee0 <_ZNK4erom5EntryIdE7addressEv>
    2e60:	9c 01       	movw	r18, r24
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	fc 01       	movw	r30, r24
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	a8 01       	movw	r20, r16
    2e6e:	b9 01       	movw	r22, r18
    2e70:	40 df       	rcall	.-384    	; 0x2cf2 <_ZNK4erom6Access11write_blockIdEEbjRKT_>
    2e72:	11 c0       	rjmp	.+34     	; 0x2e96 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	8c 01       	movw	r16, r24
    2e7a:	0c 5f       	subi	r16, 0xFC	; 252
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	2e d0       	rcall	.+92     	; 0x2ee0 <_ZNK4erom5EntryIdE7addressEv>
    2e84:	9c 01       	movw	r18, r24
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	a8 01       	movw	r20, r16
    2e92:	b9 01       	movw	r22, r18
    2e94:	36 d0       	rcall	.+108    	; 0x2f02 <_ZNK4erom6Access12update_blockIdEEjjRKT_>
    2e96:	23 96       	adiw	r28, 0x03	; 3
    2e98:	e4 e0       	ldi	r30, 0x04	; 4
    2e9a:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00002e9e <_ZNK4erom6Access12_write_blockIdEEvjRKT_>:
    2e9e:	a6 e0       	ldi	r26, 0x06	; 6
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e5 e5       	ldi	r30, 0x55	; 85
    2ea4:	f7 e1       	ldi	r31, 0x17	; 23
    2ea6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	7c 83       	std	Y+4, r23	; 0x04
    2eb0:	6b 83       	std	Y+3, r22	; 0x03
    2eb2:	5e 83       	std	Y+6, r21	; 0x06
    2eb4:	4d 83       	std	Y+5, r20	; 0x05
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eba:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZNK4erom6Access4baseEv>
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	82 0f       	add	r24, r18
    2ec6:	93 1f       	adc	r25, r19
    2ec8:	9c 01       	movw	r18, r24
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	44 e0       	ldi	r20, 0x04	; 4
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	b9 01       	movw	r22, r18
    2ed4:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <eeprom_write_block>
    2ed8:	26 96       	adiw	r28, 0x06	; 6
    2eda:	e2 e0       	ldi	r30, 0x02	; 2
    2edc:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002ee0 <_ZNK4erom5EntryIdE7addressEv>:
    2ee0:	a2 e0       	ldi	r26, 0x02	; 2
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e6 e7       	ldi	r30, 0x76	; 118
    2ee6:	f7 e1       	ldi	r31, 0x17	; 23
    2ee8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	22 96       	adiw	r28, 0x02	; 2
    2efc:	e2 e0       	ldi	r30, 0x02	; 2
    2efe:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002f02 <_ZNK4erom6Access12update_blockIdEEjjRKT_>:
    2f02:	ac e0       	ldi	r26, 0x0C	; 12
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e7 e8       	ldi	r30, 0x87	; 135
    2f08:	f7 e1       	ldi	r31, 0x17	; 23
    2f0a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	8f 83       	std	Y+7, r24	; 0x07
    2f12:	7a 87       	std	Y+10, r23	; 0x0a
    2f14:	69 87       	std	Y+9, r22	; 0x09
    2f16:	5c 87       	std	Y+12, r21	; 0x0c
    2f18:	4b 87       	std	Y+11, r20	; 0x0b
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	9c 01       	movw	r18, r24
    2f20:	2c 5f       	subi	r18, 0xFC	; 252
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	8f 81       	ldd	r24, Y+7	; 0x07
    2f26:	98 85       	ldd	r25, Y+8	; 0x08
    2f28:	b9 01       	movw	r22, r18
    2f2a:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZNK4erom6Access8in_rangeEj>
    2f2e:	98 2f       	mov	r25, r24
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	89 27       	eor	r24, r25
    2f34:	88 23       	and	r24, r24
    2f36:	19 f0       	breq	.+6      	; 0x2f3e <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x3c>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	40 c0       	rjmp	.+128    	; 0x2fbe <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xbc>
    2f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f40:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	1c 82       	std	Y+4, r1	; 0x04
    2f48:	1b 82       	std	Y+3, r1	; 0x03
    2f4a:	1e 82       	std	Y+6, r1	; 0x06
    2f4c:	1d 82       	std	Y+5, r1	; 0x05
    2f4e:	31 c0       	rjmp	.+98     	; 0x2fb2 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xb0>
    2f50:	29 85       	ldd	r18, Y+9	; 0x09
    2f52:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f54:	8f 81       	ldd	r24, Y+7	; 0x07
    2f56:	98 85       	ldd	r25, Y+8	; 0x08
    2f58:	b9 01       	movw	r22, r18
    2f5a:	0e 94 99 0a 	call	0x1532	; 0x1532 <_ZNK4erom6Access4readEj>
    2f5e:	28 2f       	mov	r18, r24
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	fc 01       	movw	r30, r24
    2f66:	90 81       	ld	r25, Z
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	29 17       	cp	r18, r25
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x6e>
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	88 23       	and	r24, r24
    2f72:	81 f0       	breq	.+32     	; 0x2f94 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x92>
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	fc 01       	movw	r30, r24
    2f7a:	40 81       	ld	r20, Z
    2f7c:	29 85       	ldd	r18, Y+9	; 0x09
    2f7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f80:	8f 81       	ldd	r24, Y+7	; 0x07
    2f82:	98 85       	ldd	r25, Y+8	; 0x08
    2f84:	b9 01       	movw	r22, r18
    2f86:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZNK4erom6Access5writeEjh>
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	01 96       	adiw	r24, 0x01	; 1
    2f90:	9c 83       	std	Y+4, r25	; 0x04
    2f92:	8b 83       	std	Y+3, r24	; 0x03
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	9a 87       	std	Y+10, r25	; 0x0a
    2f9c:	89 87       	std	Y+9, r24	; 0x09
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	04 97       	sbiw	r24, 0x04	; 4
    2fb8:	58 f2       	brcs	.-106    	; 0x2f50 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x4e>
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbe:	2c 96       	adiw	r28, 0x0c	; 12
    2fc0:	e2 e0       	ldi	r30, 0x02	; 2
    2fc2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00002fc6 <_ZN8PHSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class PHSensor : public erom::Storage {
    2fc6:	a2 e0       	ldi	r26, 0x02	; 2
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 ee       	ldi	r30, 0xE9	; 233
    2fcc:	f7 e1       	ldi	r31, 0x17	; 23
    2fce:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    2fd2:	9a 83       	std	Y+2, r25	; 0x02
    2fd4:	89 83       	std	Y+1, r24	; 0x01
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fda:	25 ea       	ldi	r18, 0xA5	; 165
    2fdc:	31 e0       	ldi	r19, 0x01	; 1
    2fde:	fc 01       	movw	r30, r24
    2fe0:	31 83       	std	Z+1, r19	; 0x01
    2fe2:	20 83       	st	Z, r18
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe8:	8c 54       	subi	r24, 0x4C	; 76
    2fea:	9f 4f       	sbci	r25, 0xFF	; 255
    2fec:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	82 55       	subi	r24, 0x52	; 82
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4erom7StorageD1Ev>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	89 2b       	or	r24, r25
    300a:	21 f0       	breq	.+8      	; 0x3014 <_ZN8PHSensorD1Ev+0x4e>
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	0e 94 8c 24 	call	0x4918	; 0x4918 <_ZdlPv>
    3014:	22 96       	adiw	r28, 0x02	; 2
    3016:	e2 e0       	ldi	r30, 0x02	; 2
    3018:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000301c <_ZN8PHSensorD0Ev>:
    301c:	a2 e0       	ldi	r26, 0x02	; 2
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e4 e1       	ldi	r30, 0x14	; 20
    3022:	f8 e1       	ldi	r31, 0x18	; 24
    3024:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	ca df       	rcall	.-108    	; 0x2fc6 <_ZN8PHSensorD1Ev>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	0e 94 8c 24 	call	0x4918	; 0x4918 <_ZdlPv>
    303a:	22 96       	adiw	r28, 0x02	; 2
    303c:	e2 e0       	ldi	r30, 0x02	; 2
    303e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003042 <_ZN9TDSSensorC1Eiib7LCDBase>:
    3042:	a9 e0       	ldi	r26, 0x09	; 9
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f8 e1       	ldi	r31, 0x18	; 24
    304a:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    304e:	9a 83       	std	Y+2, r25	; 0x02
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	7c 83       	std	Y+4, r23	; 0x04
    3054:	6b 83       	std	Y+3, r22	; 0x03
    3056:	5e 83       	std	Y+6, r21	; 0x06
    3058:	4d 83       	std	Y+5, r20	; 0x05
    305a:	2f 83       	std	Y+7, r18	; 0x07
    305c:	19 87       	std	Y+9, r17	; 0x09
    305e:	08 87       	std	Y+8, r16	; 0x08
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN4erom7StorageC1Ev>
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	23 eb       	ldi	r18, 0xB3	; 179
    306e:	31 e0       	ldi	r19, 0x01	; 1
    3070:	fc 01       	movw	r30, r24
    3072:	31 83       	std	Z+1, r19	; 0x01
    3074:	20 83       	st	Z, r18
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	2b 81       	ldd	r18, Y+3	; 0x03
    307c:	3c 81       	ldd	r19, Y+4	; 0x04
    307e:	fc 01       	movw	r30, r24
    3080:	34 87       	std	Z+12, r19	; 0x0c
    3082:	23 87       	std	Z+11, r18	; 0x0b
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	83 5a       	subi	r24, 0xA3	; 163
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	fc 01       	movw	r30, r24
    308e:	11 82       	std	Z+1, r1	; 0x01
    3090:	10 82       	st	Z, r1
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	81 5a       	subi	r24, 0xA1	; 161
    3098:	9f 4f       	sbci	r25, 0xFF	; 255
    309a:	2d 81       	ldd	r18, Y+5	; 0x05
    309c:	3e 81       	ldd	r19, Y+6	; 0x06
    309e:	fc 01       	movw	r30, r24
    30a0:	31 83       	std	Z+1, r19	; 0x01
    30a2:	20 83       	st	Z, r18
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	87 59       	subi	r24, 0x97	; 151
    30aa:	9f 4f       	sbci	r25, 0xFF	; 255
    30ac:	2f 81       	ldd	r18, Y+7	; 0x07
    30ae:	fc 01       	movw	r30, r24
    30b0:	20 83       	st	Z, r18
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	86 59       	subi	r24, 0x96	; 150
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	28 85       	ldd	r18, Y+8	; 0x08
    30bc:	39 85       	ldd	r19, Y+9	; 0x09
    30be:	b9 01       	movw	r22, r18
    30c0:	69 d9       	rcall	.-3374   	; 0x2394 <_ZN7LCDBaseC1ERKS_>
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	8e 57       	subi	r24, 0x7E	; 126
    30c8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ca:	63 e1       	ldi	r22, 0x13	; 19
    30cc:	71 e0       	ldi	r23, 0x01	; 1
    30ce:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	88 57       	subi	r24, 0x78	; 120
    30d8:	9f 4f       	sbci	r25, 0xFF	; 255
    30da:	63 e1       	ldi	r22, 0x13	; 19
    30dc:	71 e0       	ldi	r23, 0x01	; 1
    30de:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	9a 81       	ldd	r25, Y+2	; 0x02
    30e6:	82 57       	subi	r24, 0x72	; 114
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	6a eb       	ldi	r22, 0xBA	; 186
    30ec:	74 e0       	ldi	r23, 0x04	; 4
    30ee:	2b de       	rcall	.-938    	; 0x2d46 <_ZN4erom5EntryIdEC1Ej>
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	04 d0       	rcall	.+8      	; 0x30fe <_ZN9TDSSensor4InitEv>
    30f6:	29 96       	adiw	r28, 0x09	; 9
    30f8:	e4 e0       	ldi	r30, 0x04	; 4
    30fa:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

000030fe <_ZN9TDSSensor4InitEv>:
    30fe:	a6 e0       	ldi	r26, 0x06	; 6
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e5 e8       	ldi	r30, 0x85	; 133
    3104:	f8 e1       	ldi	r31, 0x18	; 24
    3106:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__prologue_saves__+0x1e>
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	8d e0       	ldi	r24, 0x0D	; 13
    3112:	0e 94 08 27 	call	0x4e10	; 0x4e10 <pinMode>
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	82 57       	subi	r24, 0x72	; 114
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	33 de       	rcall	.-922    	; 0x2d86 <_ZN4erom5EntryIdE4loadEv>
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	82 57       	subi	r24, 0x72	; 114
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	53 de       	rcall	.-858    	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    312a:	fc 01       	movw	r30, r24
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	a2 81       	ldd	r26, Z+2	; 0x02
    3132:	b3 81       	ldd	r27, Z+3	; 0x03
    3134:	11 e0       	ldi	r17, 0x01	; 1
    3136:	9c 01       	movw	r18, r24
    3138:	ad 01       	movw	r20, r26
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	0e 94 c8 22 	call	0x4590	; 0x4590 <__unordsf2>
    3142:	88 23       	and	r24, r24
    3144:	09 f4       	brne	.+2      	; 0x3148 <_ZN9TDSSensor4InitEv+0x4a>
    3146:	10 e0       	ldi	r17, 0x00	; 0
    3148:	11 23       	and	r17, r17
    314a:	89 f0       	breq	.+34     	; 0x316e <_ZN9TDSSensor4InitEv+0x70>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e4       	ldi	r25, 0x40	; 64
    3150:	a7 e9       	ldi	r26, 0x97	; 151
    3152:	b4 e4       	ldi	r27, 0x44	; 68
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	ab 83       	std	Y+3, r26	; 0x03
    315a:	bc 83       	std	Y+4, r27	; 0x04
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	82 57       	subi	r24, 0x72	; 114
    3162:	9f 4f       	sbci	r25, 0xFF	; 255
    3164:	9e 01       	movw	r18, r28
    3166:	2f 5f       	subi	r18, 0xFF	; 255
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	b9 01       	movw	r22, r18
    316c:	40 de       	rcall	.-896    	; 0x2dee <_ZN4erom5EntryIdEaSERKd>
    316e:	26 96       	adiw	r28, 0x06	; 6
    3170:	e3 e0       	ldi	r30, 0x03	; 3
    3172:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__epilogue_restores__+0x1e>

00003176 <_ZN9TDSSensor6UpdateEd>:
    3176:	a6 e0       	ldi	r26, 0x06	; 6
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e1 ec       	ldi	r30, 0xC1	; 193
    317c:	f8 e1       	ldi	r31, 0x18	; 24
    317e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	4b 83       	std	Y+3, r20	; 0x03
    3188:	5c 83       	std	Y+4, r21	; 0x04
    318a:	6d 83       	std	Y+5, r22	; 0x05
    318c:	7e 83       	std	Y+6, r23	; 0x06
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	82 57       	subi	r24, 0x72	; 114
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	9e 01       	movw	r18, r28
    3198:	2d 5f       	subi	r18, 0xFD	; 253
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	b9 01       	movw	r22, r18
    319e:	27 de       	rcall	.-946    	; 0x2dee <_ZN4erom5EntryIdEaSERKd>
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	9a 81       	ldd	r25, Y+2	; 0x02
    31a4:	82 57       	subi	r24, 0x72	; 114
    31a6:	9f 4f       	sbci	r25, 0xFF	; 255
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	3f de       	rcall	.-898    	; 0x2e2a <_ZNK4erom5EntryIdE4saveEb>
    31ac:	26 96       	adiw	r28, 0x06	; 6
    31ae:	e2 e0       	ldi	r30, 0x02	; 2
    31b0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000031b4 <_ZN9TDSSensor6GetTDSEv>:
    31b4:	ae e0       	ldi	r26, 0x0E	; 14
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e0 ee       	ldi	r30, 0xE0	; 224
    31ba:	f8 e1       	ldi	r31, 0x18	; 24
    31bc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    31c0:	9e 87       	std	Y+14, r25	; 0x0e
    31c2:	8d 87       	std	Y+13, r24	; 0x0d
    31c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c8:	8f 59       	subi	r24, 0x9F	; 159
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	fc 01       	movw	r30, r24
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	a2 81       	ldd	r26, Z+2	; 0x02
    31d4:	b3 81       	ldd	r27, Z+3	; 0x03
    31d6:	fe 01       	movw	r30, r28
    31d8:	37 96       	adiw	r30, 0x07	; 7
    31da:	22 e0       	ldi	r18, 0x02	; 2
    31dc:	ac 01       	movw	r20, r24
    31de:	bd 01       	movw	r22, r26
    31e0:	cf 01       	movw	r24, r30
    31e2:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN6StringC1Efh>
    31e6:	ce 01       	movw	r24, r28
    31e8:	07 96       	adiw	r24, 0x07	; 7
    31ea:	19 d8       	rcall	.-4046   	; 0x221e <_ZNK6String5c_strEv>
    31ec:	9c 01       	movw	r18, r24
    31ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f2:	8e 57       	subi	r24, 0x7E	; 126
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	b9 01       	movw	r22, r18
    31f8:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    31fc:	ce 01       	movw	r24, r28
    31fe:	07 96       	adiw	r24, 0x07	; 7
    3200:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3204:	8d 85       	ldd	r24, Y+13	; 0x0d
    3206:	9e 85       	ldd	r25, Y+14	; 0x0e
    3208:	8b 59       	subi	r24, 0x9B	; 155
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	fc 01       	movw	r30, r24
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	a2 81       	ldd	r26, Z+2	; 0x02
    3214:	b3 81       	ldd	r27, Z+3	; 0x03
    3216:	22 e0       	ldi	r18, 0x02	; 2
    3218:	ac 01       	movw	r20, r24
    321a:	bd 01       	movw	r22, r26
    321c:	ce 01       	movw	r24, r28
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	0e 94 48 28 	call	0x5090	; 0x5090 <_ZN6StringC1Efh>
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZNK6String5c_strEv>
    322c:	9c 01       	movw	r18, r24
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	88 57       	subi	r24, 0x78	; 120
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	b9 01       	movw	r22, r18
    3238:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    323c:	ce 01       	movw	r24, r28
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	8f 59       	subi	r24, 0x9F	; 159
    324a:	9f 4f       	sbci	r25, 0xFF	; 255
    324c:	fc 01       	movw	r30, r24
    324e:	80 81       	ld	r24, Z
    3250:	91 81       	ldd	r25, Z+1	; 0x01
    3252:	a2 81       	ldd	r26, Z+2	; 0x02
    3254:	b3 81       	ldd	r27, Z+3	; 0x03
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	2e 96       	adiw	r28, 0x0e	; 14
    325c:	e2 e0       	ldi	r30, 0x02	; 2
    325e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003262 <_ZN9TDSSensor13PrintTDSToLCDEv>:
    3262:	ae e1       	ldi	r26, 0x1E	; 30
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e7 e3       	ldi	r30, 0x37	; 55
    3268:	f9 e1       	ldi	r31, 0x19	; 25
    326a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    326e:	9e 8f       	std	Y+30, r25	; 0x1e
    3270:	8d 8f       	std	Y+29, r24	; 0x1d
    3272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3276:	9e df       	rcall	.-196    	; 0x31b4 <_ZN9TDSSensor6GetTDSEv>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	ab 83       	std	Y+3, r26	; 0x03
    3282:	bc 83       	std	Y+4, r27	; 0x04
    3284:	83 e1       	ldi	r24, 0x13	; 19
    3286:	93 e0       	ldi	r25, 0x03	; 3
    3288:	fc 01       	movw	r30, r24
    328a:	80 81       	ld	r24, Z
    328c:	88 23       	and	r24, r24
    328e:	89 f4       	brne	.+34     	; 0x32b2 <_ZN9TDSSensor13PrintTDSToLCDEv+0x50>
    3290:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    329c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    32a0:	a0 93 25 03 	sts	0x0325, r26	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    32a4:	b0 93 26 03 	sts	0x0326, r27	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    32a8:	83 e1       	ldi	r24, 0x13	; 19
    32aa:	93 e0       	ldi	r25, 0x03	; 3
    32ac:	21 e0       	ldi	r18, 0x01	; 1
    32ae:	fc 01       	movw	r30, r24
    32b0:	20 83       	st	Z, r18
    32b2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    32b6:	9b 01       	movw	r18, r22
    32b8:	ac 01       	movw	r20, r24
    32ba:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    32be:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    32c2:	a0 91 25 03 	lds	r26, 0x0325	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    32c6:	b0 91 26 03 	lds	r27, 0x0326	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    32ca:	28 1b       	sub	r18, r24
    32cc:	39 0b       	sbc	r19, r25
    32ce:	4a 0b       	sbc	r20, r26
    32d0:	5b 0b       	sbc	r21, r27
    32d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32d6:	81 5a       	subi	r24, 0xA1	; 161
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	fc 01       	movw	r30, r24
    32dc:	80 81       	ld	r24, Z
    32de:	91 81       	ldd	r25, Z+1	; 0x01
    32e0:	80 57       	subi	r24, 0x70	; 112
    32e2:	9e 4f       	sbci	r25, 0xFE	; 254
    32e4:	09 2e       	mov	r0, r25
    32e6:	00 0c       	add	r0, r0
    32e8:	aa 0b       	sbc	r26, r26
    32ea:	bb 0b       	sbc	r27, r27
    32ec:	61 e0       	ldi	r22, 0x01	; 1
    32ee:	82 17       	cp	r24, r18
    32f0:	93 07       	cpc	r25, r19
    32f2:	a4 07       	cpc	r26, r20
    32f4:	b5 07       	cpc	r27, r21
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <_ZN9TDSSensor13PrintTDSToLCDEv+0x98>
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	66 23       	and	r22, r22
    32fc:	09 f4       	brne	.+2      	; 0x3300 <_ZN9TDSSensor13PrintTDSToLCDEv+0x9e>
    32fe:	62 c0       	rjmp	.+196    	; 0x33c4 <_ZN9TDSSensor13PrintTDSToLCDEv+0x162>
    3300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3304:	87 59       	subi	r24, 0x97	; 151
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	fc 01       	movw	r30, r24
    330a:	80 81       	ld	r24, Z
    330c:	88 23       	and	r24, r24
    330e:	09 f4       	brne	.+2      	; 0x3312 <_ZN9TDSSensor13PrintTDSToLCDEv+0xb0>
    3310:	43 c0       	rjmp	.+134    	; 0x3398 <_ZN9TDSSensor13PrintTDSToLCDEv+0x136>
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	ab 81       	ldd	r26, Y+3	; 0x03
    3318:	bc 81       	ldd	r27, Y+4	; 0x04
    331a:	fe 01       	movw	r30, r28
    331c:	71 96       	adiw	r30, 0x11	; 17
    331e:	22 e0       	ldi	r18, 0x02	; 2
    3320:	ac 01       	movw	r20, r24
    3322:	bd 01       	movw	r22, r26
    3324:	cf 01       	movw	r24, r30
    3326:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN6StringC1Edh>
    332a:	ce 01       	movw	r24, r28
    332c:	0b 96       	adiw	r24, 0x0b	; 11
    332e:	64 e1       	ldi	r22, 0x14	; 20
    3330:	71 e0       	ldi	r23, 0x01	; 1
    3332:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN15StringSumHelperC1EPKc>
    3336:	9e 01       	movw	r18, r28
    3338:	2f 5e       	subi	r18, 0xEF	; 239
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	ce 01       	movw	r24, r28
    333e:	0b 96       	adiw	r24, 0x0b	; 11
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_ZplRK15StringSumHelperRK6String>
    3346:	9c 01       	movw	r18, r24
    3348:	ce 01       	movw	r24, r28
    334a:	47 96       	adiw	r24, 0x17	; 23
    334c:	b9 01       	movw	r22, r18
    334e:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    3352:	ce 01       	movw	r24, r28
    3354:	0b 96       	adiw	r24, 0x0b	; 11
    3356:	a8 da       	rcall	.-2736   	; 0x28a8 <_ZN15StringSumHelperD1Ev>
    3358:	ce 01       	movw	r24, r28
    335a:	41 96       	adiw	r24, 0x11	; 17
    335c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3360:	9e 01       	movw	r18, r28
    3362:	29 5e       	subi	r18, 0xE9	; 233
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	ce 01       	movw	r24, r28
    3368:	05 96       	adiw	r24, 0x05	; 5
    336a:	b9 01       	movw	r22, r18
    336c:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    3370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3374:	86 59       	subi	r24, 0x96	; 150
    3376:	9f 4f       	sbci	r25, 0xFF	; 255
    3378:	9e 01       	movw	r18, r28
    337a:	2b 5f       	subi	r18, 0xFB	; 251
    337c:	3f 4f       	sbci	r19, 0xFF	; 255
    337e:	a9 01       	movw	r20, r18
    3380:	61 e0       	ldi	r22, 0x01	; 1
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <_ZN7LCDBase9PrintLineEs6String>
    3388:	ce 01       	movw	r24, r28
    338a:	05 96       	adiw	r24, 0x05	; 5
    338c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3390:	ce 01       	movw	r24, r28
    3392:	47 96       	adiw	r24, 0x17	; 23
    3394:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3398:	8d e0       	ldi	r24, 0x0D	; 13
    339a:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <digitalRead>
    339e:	98 2f       	mov	r25, r24
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	89 27       	eor	r24, r25
    33a4:	68 2f       	mov	r22, r24
    33a6:	8d e0       	ldi	r24, 0x0D	; 13
    33a8:	0e 94 44 27 	call	0x4e88	; 0x4e88 <digitalWrite>
    33ac:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    33b8:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    33bc:	a0 93 25 03 	sts	0x0325, r26	; 0x800325 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    33c0:	b0 93 26 03 	sts	0x0326, r27	; 0x800326 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    33c4:	6e 96       	adiw	r28, 0x1e	; 30
    33c6:	e2 e0       	ldi	r30, 0x02	; 2
    33c8:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000033cc <_ZN9TDSSensor12CalculateTDSEv>:
    33cc:	a4 e1       	ldi	r26, 0x14	; 20
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	ec ee       	ldi	r30, 0xEC	; 236
    33d2:	f9 e1       	ldi	r31, 0x19	; 25
    33d4:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    33d8:	9c 8b       	std	Y+20, r25	; 0x14
    33da:	8b 8b       	std	Y+19, r24	; 0x13
    33dc:	8b 89       	ldd	r24, Y+19	; 0x13
    33de:	9c 89       	ldd	r25, Y+20	; 0x14
    33e0:	6d d0       	rcall	.+218    	; 0x34bc <_ZN9TDSSensor11GetTDSValueEv>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	ab 83       	std	Y+3, r26	; 0x03
    33ec:	bc 83       	std	Y+4, r27	; 0x04
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	18 86       	std	Y+8, r1	; 0x08
    33f8:	1f 82       	std	Y+7, r1	; 0x07
    33fa:	32 c0       	rjmp	.+100    	; 0x3460 <_ZN9TDSSensor12CalculateTDSEv+0x94>
    33fc:	8f 81       	ldd	r24, Y+7	; 0x07
    33fe:	98 85       	ldd	r25, Y+8	; 0x08
    3400:	8c 59       	subi	r24, 0x9C	; 156
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	9a 87       	std	Y+10, r25	; 0x0a
    3406:	89 87       	std	Y+9, r24	; 0x09
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	09 2e       	mov	r0, r25
    340e:	00 0c       	add	r0, r0
    3410:	aa 0b       	sbc	r26, r26
    3412:	bb 0b       	sbc	r27, r27
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 43 26 	call	0x4c86	; 0x4c86 <delay>
    341c:	8b 89       	ldd	r24, Y+19	; 0x13
    341e:	9c 89       	ldd	r25, Y+20	; 0x14
    3420:	4d d0       	rcall	.+154    	; 0x34bc <_ZN9TDSSensor11GetTDSValueEv>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	8b 87       	std	Y+11, r24	; 0x0b
    3428:	9c 87       	std	Y+12, r25	; 0x0c
    342a:	ad 87       	std	Y+13, r26	; 0x0d
    342c:	be 87       	std	Y+14, r27	; 0x0e
    342e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3430:	3c 85       	ldd	r19, Y+12	; 0x0c
    3432:	4d 85       	ldd	r20, Y+13	; 0x0d
    3434:	5e 85       	ldd	r21, Y+14	; 0x0e
    3436:	69 81       	ldd	r22, Y+1	; 0x01
    3438:	7a 81       	ldd	r23, Y+2	; 0x02
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	c3 d6       	rcall	.+3462   	; 0x41c6 <__addsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	ab 83       	std	Y+3, r26	; 0x03
    344a:	bc 83       	std	Y+4, r27	; 0x04
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8f 81       	ldd	r24, Y+7	; 0x07
    3458:	98 85       	ldd	r25, Y+8	; 0x08
    345a:	01 96       	adiw	r24, 0x01	; 1
    345c:	98 87       	std	Y+8, r25	; 0x08
    345e:	8f 83       	std	Y+7, r24	; 0x07
    3460:	8f 81       	ldd	r24, Y+7	; 0x07
    3462:	98 85       	ldd	r25, Y+8	; 0x08
    3464:	0b 97       	sbiw	r24, 0x0b	; 11
    3466:	54 f2       	brlt	.-108    	; 0x33fc <_ZN9TDSSensor12CalculateTDSEv+0x30>
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	09 2e       	mov	r0, r25
    346e:	00 0c       	add	r0, r0
    3470:	aa 0b       	sbc	r26, r26
    3472:	bb 0b       	sbc	r27, r27
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	78 d7       	rcall	.+3824   	; 0x436a <__floatsisf>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	9c 01       	movw	r18, r24
    3480:	ad 01       	movw	r20, r26
    3482:	69 81       	ldd	r22, Y+1	; 0x01
    3484:	7a 81       	ldd	r23, Y+2	; 0x02
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	05 d7       	rcall	.+3594   	; 0x4296 <__divsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	8f 87       	std	Y+15, r24	; 0x0f
    3492:	98 8b       	std	Y+16, r25	; 0x10
    3494:	a9 8b       	std	Y+17, r26	; 0x11
    3496:	ba 8b       	std	Y+18, r27	; 0x12
    3498:	8b 89       	ldd	r24, Y+19	; 0x13
    349a:	9c 89       	ldd	r25, Y+20	; 0x14
    349c:	9c 01       	movw	r18, r24
    349e:	2f 59       	subi	r18, 0x9F	; 159
    34a0:	3f 4f       	sbci	r19, 0xFF	; 255
    34a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a4:	98 89       	ldd	r25, Y+16	; 0x10
    34a6:	a9 89       	ldd	r26, Y+17	; 0x11
    34a8:	ba 89       	ldd	r27, Y+18	; 0x12
    34aa:	f9 01       	movw	r30, r18
    34ac:	80 83       	st	Z, r24
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	a2 83       	std	Z+2, r26	; 0x02
    34b2:	b3 83       	std	Z+3, r27	; 0x03
    34b4:	64 96       	adiw	r28, 0x14	; 20
    34b6:	e2 e0       	ldi	r30, 0x02	; 2
    34b8:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000034bc <_ZN9TDSSensor11GetTDSValueEv>:
    34bc:	a0 e1       	ldi	r26, 0x10	; 16
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e4 e6       	ldi	r30, 0x64	; 100
    34c2:	fa e1       	ldi	r31, 0x1A	; 26
    34c4:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__prologue_saves__+0x18>
    34c8:	98 8b       	std	Y+16, r25	; 0x10
    34ca:	8f 87       	std	Y+15, r24	; 0x0f
    34cc:	8b e1       	ldi	r24, 0x1B	; 27
    34ce:	93 e0       	ldi	r25, 0x03	; 3
    34d0:	fc 01       	movw	r30, r24
    34d2:	80 81       	ld	r24, Z
    34d4:	88 23       	and	r24, r24
    34d6:	89 f4       	brne	.+34     	; 0x34fa <_ZN9TDSSensor11GetTDSValueEv+0x3e>
    34d8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    34e4:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    34e8:	a0 93 29 03 	sts	0x0329, r26	; 0x800329 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    34ec:	b0 93 2a 03 	sts	0x032A, r27	; 0x80032a <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    34f0:	8b e1       	ldi	r24, 0x1B	; 27
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	21 e0       	ldi	r18, 0x01	; 1
    34f6:	fc 01       	movw	r30, r24
    34f8:	20 83       	st	Z, r18
    34fa:	0e 94 12 26 	call	0x4c24	; 0x4c24 <millis>
    34fe:	9b 01       	movw	r18, r22
    3500:	ac 01       	movw	r20, r24
    3502:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    3506:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    350a:	a0 91 29 03 	lds	r26, 0x0329	; 0x800329 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    350e:	b0 91 2a 03 	lds	r27, 0x032A	; 0x80032a <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    3512:	79 01       	movw	r14, r18
    3514:	8a 01       	movw	r16, r20
    3516:	e8 1a       	sub	r14, r24
    3518:	f9 0a       	sbc	r15, r25
    351a:	0a 0b       	sbc	r16, r26
    351c:	1b 0b       	sbc	r17, r27
    351e:	d8 01       	movw	r26, r16
    3520:	c7 01       	movw	r24, r14
    3522:	21 e0       	ldi	r18, 0x01	; 1
    3524:	8f 36       	cpi	r24, 0x6F	; 111
    3526:	91 05       	cpc	r25, r1
    3528:	a1 05       	cpc	r26, r1
    352a:	b1 05       	cpc	r27, r1
    352c:	08 f4       	brcc	.+2      	; 0x3530 <_ZN9TDSSensor11GetTDSValueEv+0x74>
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	22 23       	and	r18, r18
    3532:	09 f4       	brne	.+2      	; 0x3536 <_ZN9TDSSensor11GetTDSValueEv+0x7a>
    3534:	77 c0       	rjmp	.+238    	; 0x3624 <_ZN9TDSSensor11GetTDSValueEv+0x168>
    3536:	88 e2       	ldi	r24, 0x28	; 40
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3540:	98 89       	ldd	r25, Y+16	; 0x10
    3542:	83 5a       	subi	r24, 0xA3	; 163
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	fc 01       	movw	r30, r24
    3548:	00 81       	ld	r16, Z
    354a:	11 81       	ldd	r17, Z+1	; 0x01
    354c:	98 01       	movw	r18, r16
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	8f 85       	ldd	r24, Y+15	; 0x0f
    3554:	98 89       	ldd	r25, Y+16	; 0x10
    3556:	83 5a       	subi	r24, 0xA3	; 163
    3558:	9f 4f       	sbci	r25, 0xFF	; 255
    355a:	fc 01       	movw	r30, r24
    355c:	31 83       	std	Z+1, r19	; 0x01
    355e:	20 83       	st	Z, r18
    3560:	8f 85       	ldd	r24, Y+15	; 0x0f
    3562:	98 89       	ldd	r25, Y+16	; 0x10
    3564:	fc 01       	movw	r30, r24
    3566:	83 85       	ldd	r24, Z+11	; 0x0b
    3568:	94 85       	ldd	r25, Z+12	; 0x0c
    356a:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <analogRead>
    356e:	ac 01       	movw	r20, r24
    3570:	2f 85       	ldd	r18, Y+15	; 0x0f
    3572:	38 89       	ldd	r19, Y+16	; 0x10
    3574:	c8 01       	movw	r24, r16
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	82 0f       	add	r24, r18
    357c:	93 1f       	adc	r25, r19
    357e:	0d 96       	adiw	r24, 0x0d	; 13
    3580:	fc 01       	movw	r30, r24
    3582:	51 83       	std	Z+1, r21	; 0x01
    3584:	40 83       	st	Z, r20
    3586:	8f 85       	ldd	r24, Y+15	; 0x0f
    3588:	98 89       	ldd	r25, Y+16	; 0x10
    358a:	83 5a       	subi	r24, 0xA3	; 163
    358c:	9f 4f       	sbci	r25, 0xFF	; 255
    358e:	fc 01       	movw	r30, r24
    3590:	20 81       	ld	r18, Z
    3592:	31 81       	ldd	r19, Z+1	; 0x01
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	28 17       	cp	r18, r24
    359a:	39 07       	cpc	r19, r25
    359c:	39 f4       	brne	.+14     	; 0x35ac <_ZN9TDSSensor11GetTDSValueEv+0xf0>
    359e:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a0:	98 89       	ldd	r25, Y+16	; 0x10
    35a2:	83 5a       	subi	r24, 0xA3	; 163
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	fc 01       	movw	r30, r24
    35a8:	11 82       	std	Z+1, r1	; 0x01
    35aa:	10 82       	st	Z, r1
    35ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ae:	98 89       	ldd	r25, Y+16	; 0x10
    35b0:	9c 01       	movw	r18, r24
    35b2:	23 5f       	subi	r18, 0xF3	; 243
    35b4:	3f 4f       	sbci	r19, 0xFF	; 255
    35b6:	49 81       	ldd	r20, Y+1	; 0x01
    35b8:	5a 81       	ldd	r21, Y+2	; 0x02
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	98 89       	ldd	r25, Y+16	; 0x10
    35be:	b9 01       	movw	r22, r18
    35c0:	40 d0       	rcall	.+128    	; 0x3642 <_ZN9TDSSensor16CalculateAverageEPii>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	8b 83       	std	Y+3, r24	; 0x03
    35c8:	9c 83       	std	Y+4, r25	; 0x04
    35ca:	ad 83       	std	Y+5, r26	; 0x05
    35cc:	be 83       	std	Y+6, r27	; 0x06
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 ea       	ldi	r20, 0xA0	; 160
    35d4:	5b e3       	ldi	r21, 0x3B	; 59
    35d6:	6b 81       	ldd	r22, Y+3	; 0x03
    35d8:	7c 81       	ldd	r23, Y+4	; 0x04
    35da:	8d 81       	ldd	r24, Y+5	; 0x05
    35dc:	9e 81       	ldd	r25, Y+6	; 0x06
    35de:	75 d7       	rcall	.+3818   	; 0x44ca <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	98 87       	std	Y+8, r25	; 0x08
    35e8:	a9 87       	std	Y+9, r26	; 0x09
    35ea:	ba 87       	std	Y+10, r27	; 0x0a
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	98 89       	ldd	r25, Y+16	; 0x10
    35f0:	82 57       	subi	r24, 0x72	; 114
    35f2:	9f 4f       	sbci	r25, 0xFF	; 255
    35f4:	ed db       	rcall	.-2086   	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    35f6:	fc 01       	movw	r30, r24
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	a2 81       	ldd	r26, Z+2	; 0x02
    35fe:	b3 81       	ldd	r27, Z+3	; 0x03
    3600:	2f 81       	ldd	r18, Y+7	; 0x07
    3602:	38 85       	ldd	r19, Y+8	; 0x08
    3604:	49 85       	ldd	r20, Y+9	; 0x09
    3606:	5a 85       	ldd	r21, Y+10	; 0x0a
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	5e d7       	rcall	.+3772   	; 0x44ca <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	8b 87       	std	Y+11, r24	; 0x0b
    3614:	9c 87       	std	Y+12, r25	; 0x0c
    3616:	ad 87       	std	Y+13, r26	; 0x0d
    3618:	be 87       	std	Y+14, r27	; 0x0e
    361a:	8b 85       	ldd	r24, Y+11	; 0x0b
    361c:	9c 85       	ldd	r25, Y+12	; 0x0c
    361e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3620:	be 85       	ldd	r27, Y+14	; 0x0e
    3622:	09 c0       	rjmp	.+18     	; 0x3636 <_ZN9TDSSensor11GetTDSValueEv+0x17a>
    3624:	8f 85       	ldd	r24, Y+15	; 0x0f
    3626:	98 89       	ldd	r25, Y+16	; 0x10
    3628:	8f 59       	subi	r24, 0x9F	; 159
    362a:	9f 4f       	sbci	r25, 0xFF	; 255
    362c:	fc 01       	movw	r30, r24
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	a2 81       	ldd	r26, Z+2	; 0x02
    3634:	b3 81       	ldd	r27, Z+3	; 0x03
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	60 96       	adiw	r28, 0x10	; 16
    363c:	e6 e0       	ldi	r30, 0x06	; 6
    363e:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__epilogue_restores__+0x18>

00003642 <_ZN9TDSSensor16CalculateAverageEPii>:
    3642:	cf 92       	push	r12
    3644:	df 92       	push	r13
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	68 97       	sbiw	r28, 0x18	; 24
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	98 8b       	std	Y+16, r25	; 0x10
    3660:	8f 87       	std	Y+15, r24	; 0x0f
    3662:	7a 8b       	std	Y+18, r23	; 0x12
    3664:	69 8b       	std	Y+17, r22	; 0x11
    3666:	5c 8b       	std	Y+20, r21	; 0x14
    3668:	4b 8b       	std	Y+19, r20	; 0x13
    366a:	1f 82       	std	Y+7, r1	; 0x07
    366c:	18 86       	std	Y+8, r1	; 0x08
    366e:	19 86       	std	Y+9, r1	; 0x09
    3670:	1a 86       	std	Y+10, r1	; 0x0a
    3672:	8b 89       	ldd	r24, Y+19	; 0x13
    3674:	9c 89       	ldd	r25, Y+20	; 0x14
    3676:	18 16       	cp	r1, r24
    3678:	19 06       	cpc	r1, r25
    367a:	5c f0       	brlt	.+22     	; 0x3692 <_ZN9TDSSensor16CalculateAverageEPii+0x50>
    367c:	8a e6       	ldi	r24, 0x6A	; 106
    367e:	93 e0       	ldi	r25, 0x03	; 3
    3680:	bc 01       	movw	r22, r24
    3682:	87 e6       	ldi	r24, 0x67	; 103
    3684:	95 e0       	ldi	r25, 0x05	; 5
    3686:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <_ZN5Print7printlnEPK19__FlashStringHelper>
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	dc 01       	movw	r26, r24
    3690:	27 c1       	rjmp	.+590    	; 0x38e0 <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    3692:	8b 89       	ldd	r24, Y+19	; 0x13
    3694:	9c 89       	ldd	r25, Y+20	; 0x14
    3696:	05 97       	sbiw	r24, 0x05	; 5
    3698:	0c f0       	brlt	.+2      	; 0x369c <_ZN9TDSSensor16CalculateAverageEPii+0x5a>
    369a:	48 c0       	rjmp	.+144    	; 0x372c <_ZN9TDSSensor16CalculateAverageEPii+0xea>
    369c:	1a 82       	std	Y+2, r1	; 0x02
    369e:	19 82       	std	Y+1, r1	; 0x01
    36a0:	20 c0       	rjmp	.+64     	; 0x36e2 <_ZN9TDSSensor16CalculateAverageEPii+0xa0>
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	29 89       	ldd	r18, Y+17	; 0x11
    36ac:	3a 89       	ldd	r19, Y+18	; 0x12
    36ae:	82 0f       	add	r24, r18
    36b0:	93 1f       	adc	r25, r19
    36b2:	fc 01       	movw	r30, r24
    36b4:	80 81       	ld	r24, Z
    36b6:	91 81       	ldd	r25, Z+1	; 0x01
    36b8:	09 2e       	mov	r0, r25
    36ba:	00 0c       	add	r0, r0
    36bc:	aa 0b       	sbc	r26, r26
    36be:	bb 0b       	sbc	r27, r27
    36c0:	2f 81       	ldd	r18, Y+7	; 0x07
    36c2:	38 85       	ldd	r19, Y+8	; 0x08
    36c4:	49 85       	ldd	r20, Y+9	; 0x09
    36c6:	5a 85       	ldd	r21, Y+10	; 0x0a
    36c8:	82 0f       	add	r24, r18
    36ca:	93 1f       	adc	r25, r19
    36cc:	a4 1f       	adc	r26, r20
    36ce:	b5 1f       	adc	r27, r21
    36d0:	8f 83       	std	Y+7, r24	; 0x07
    36d2:	98 87       	std	Y+8, r25	; 0x08
    36d4:	a9 87       	std	Y+9, r26	; 0x09
    36d6:	ba 87       	std	Y+10, r27	; 0x0a
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	29 81       	ldd	r18, Y+1	; 0x01
    36e4:	3a 81       	ldd	r19, Y+2	; 0x02
    36e6:	8b 89       	ldd	r24, Y+19	; 0x13
    36e8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ea:	28 17       	cp	r18, r24
    36ec:	39 07       	cpc	r19, r25
    36ee:	cc f2       	brlt	.-78     	; 0x36a2 <_ZN9TDSSensor16CalculateAverageEPii+0x60>
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	9c 01       	movw	r18, r24
    36f6:	99 0f       	add	r25, r25
    36f8:	44 0b       	sbc	r20, r20
    36fa:	55 0b       	sbc	r21, r21
    36fc:	8f 81       	ldd	r24, Y+7	; 0x07
    36fe:	98 85       	ldd	r25, Y+8	; 0x08
    3700:	a9 85       	ldd	r26, Y+9	; 0x09
    3702:	ba 85       	ldd	r27, Y+10	; 0x0a
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__divmodsi4>
    370c:	da 01       	movw	r26, r20
    370e:	c9 01       	movw	r24, r18
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	2a d6       	rcall	.+3156   	; 0x436a <__floatsisf>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	8b 87       	std	Y+11, r24	; 0x0b
    371c:	9c 87       	std	Y+12, r25	; 0x0c
    371e:	ad 87       	std	Y+13, r26	; 0x0d
    3720:	be 87       	std	Y+14, r27	; 0x0e
    3722:	8b 85       	ldd	r24, Y+11	; 0x0b
    3724:	9c 85       	ldd	r25, Y+12	; 0x0c
    3726:	ad 85       	ldd	r26, Y+13	; 0x0d
    3728:	be 85       	ldd	r27, Y+14	; 0x0e
    372a:	da c0       	rjmp	.+436    	; 0x38e0 <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    372c:	89 89       	ldd	r24, Y+17	; 0x11
    372e:	9a 89       	ldd	r25, Y+18	; 0x12
    3730:	fc 01       	movw	r30, r24
    3732:	20 81       	ld	r18, Z
    3734:	31 81       	ldd	r19, Z+1	; 0x01
    3736:	89 89       	ldd	r24, Y+17	; 0x11
    3738:	9a 89       	ldd	r25, Y+18	; 0x12
    373a:	02 96       	adiw	r24, 0x02	; 2
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	28 17       	cp	r18, r24
    3744:	39 07       	cpc	r19, r25
    3746:	7c f4       	brge	.+30     	; 0x3766 <_ZN9TDSSensor16CalculateAverageEPii+0x124>
    3748:	89 89       	ldd	r24, Y+17	; 0x11
    374a:	9a 89       	ldd	r25, Y+18	; 0x12
    374c:	fc 01       	movw	r30, r24
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
    3756:	89 89       	ldd	r24, Y+17	; 0x11
    3758:	9a 89       	ldd	r25, Y+18	; 0x12
    375a:	fc 01       	movw	r30, r24
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	0e c0       	rjmp	.+28     	; 0x3782 <_ZN9TDSSensor16CalculateAverageEPii+0x140>
    3766:	89 89       	ldd	r24, Y+17	; 0x11
    3768:	9a 89       	ldd	r25, Y+18	; 0x12
    376a:	fc 01       	movw	r30, r24
    376c:	82 81       	ldd	r24, Z+2	; 0x02
    376e:	93 81       	ldd	r25, Z+3	; 0x03
    3770:	9e 83       	std	Y+6, r25	; 0x06
    3772:	8d 83       	std	Y+5, r24	; 0x05
    3774:	89 89       	ldd	r24, Y+17	; 0x11
    3776:	9a 89       	ldd	r25, Y+18	; 0x12
    3778:	fc 01       	movw	r30, r24
    377a:	80 81       	ld	r24, Z
    377c:	91 81       	ldd	r25, Z+1	; 0x01
    377e:	9c 83       	std	Y+4, r25	; 0x04
    3780:	8b 83       	std	Y+3, r24	; 0x03
    3782:	82 e0       	ldi	r24, 0x02	; 2
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	9a 83       	std	Y+2, r25	; 0x02
    3788:	89 83       	std	Y+1, r24	; 0x01
    378a:	80 c0       	rjmp	.+256    	; 0x388c <_ZN9TDSSensor16CalculateAverageEPii+0x24a>
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	29 89       	ldd	r18, Y+17	; 0x11
    3796:	3a 89       	ldd	r19, Y+18	; 0x12
    3798:	82 0f       	add	r24, r18
    379a:	93 1f       	adc	r25, r19
    379c:	fc 01       	movw	r30, r24
    379e:	20 81       	ld	r18, Z
    37a0:	31 81       	ldd	r19, Z+1	; 0x01
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	04 f5       	brge	.+64     	; 0x37ec <_ZN9TDSSensor16CalculateAverageEPii+0x1aa>
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	9e 81       	ldd	r25, Y+6	; 0x06
    37b0:	09 2e       	mov	r0, r25
    37b2:	00 0c       	add	r0, r0
    37b4:	aa 0b       	sbc	r26, r26
    37b6:	bb 0b       	sbc	r27, r27
    37b8:	2f 81       	ldd	r18, Y+7	; 0x07
    37ba:	38 85       	ldd	r19, Y+8	; 0x08
    37bc:	49 85       	ldd	r20, Y+9	; 0x09
    37be:	5a 85       	ldd	r21, Y+10	; 0x0a
    37c0:	82 0f       	add	r24, r18
    37c2:	93 1f       	adc	r25, r19
    37c4:	a4 1f       	adc	r26, r20
    37c6:	b5 1f       	adc	r27, r21
    37c8:	8f 83       	std	Y+7, r24	; 0x07
    37ca:	98 87       	std	Y+8, r25	; 0x08
    37cc:	a9 87       	std	Y+9, r26	; 0x09
    37ce:	ba 87       	std	Y+10, r27	; 0x0a
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	29 89       	ldd	r18, Y+17	; 0x11
    37da:	3a 89       	ldd	r19, Y+18	; 0x12
    37dc:	82 0f       	add	r24, r18
    37de:	93 1f       	adc	r25, r19
    37e0:	fc 01       	movw	r30, r24
    37e2:	80 81       	ld	r24, Z
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	4b c0       	rjmp	.+150    	; 0x3882 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	29 89       	ldd	r18, Y+17	; 0x11
    37f6:	3a 89       	ldd	r19, Y+18	; 0x12
    37f8:	82 0f       	add	r24, r18
    37fa:	93 1f       	adc	r25, r19
    37fc:	fc 01       	movw	r30, r24
    37fe:	20 81       	ld	r18, Z
    3800:	31 81       	ldd	r19, Z+1	; 0x01
    3802:	8b 81       	ldd	r24, Y+3	; 0x03
    3804:	9c 81       	ldd	r25, Y+4	; 0x04
    3806:	82 17       	cp	r24, r18
    3808:	93 07       	cpc	r25, r19
    380a:	04 f5       	brge	.+64     	; 0x384c <_ZN9TDSSensor16CalculateAverageEPii+0x20a>
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	9c 81       	ldd	r25, Y+4	; 0x04
    3810:	09 2e       	mov	r0, r25
    3812:	00 0c       	add	r0, r0
    3814:	aa 0b       	sbc	r26, r26
    3816:	bb 0b       	sbc	r27, r27
    3818:	2f 81       	ldd	r18, Y+7	; 0x07
    381a:	38 85       	ldd	r19, Y+8	; 0x08
    381c:	49 85       	ldd	r20, Y+9	; 0x09
    381e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3820:	82 0f       	add	r24, r18
    3822:	93 1f       	adc	r25, r19
    3824:	a4 1f       	adc	r26, r20
    3826:	b5 1f       	adc	r27, r21
    3828:	8f 83       	std	Y+7, r24	; 0x07
    382a:	98 87       	std	Y+8, r25	; 0x08
    382c:	a9 87       	std	Y+9, r26	; 0x09
    382e:	ba 87       	std	Y+10, r27	; 0x0a
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	29 89       	ldd	r18, Y+17	; 0x11
    383a:	3a 89       	ldd	r19, Y+18	; 0x12
    383c:	82 0f       	add	r24, r18
    383e:	93 1f       	adc	r25, r19
    3840:	fc 01       	movw	r30, r24
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	9c 83       	std	Y+4, r25	; 0x04
    3848:	8b 83       	std	Y+3, r24	; 0x03
    384a:	1b c0       	rjmp	.+54     	; 0x3882 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	9a 81       	ldd	r25, Y+2	; 0x02
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	29 89       	ldd	r18, Y+17	; 0x11
    3856:	3a 89       	ldd	r19, Y+18	; 0x12
    3858:	82 0f       	add	r24, r18
    385a:	93 1f       	adc	r25, r19
    385c:	fc 01       	movw	r30, r24
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	09 2e       	mov	r0, r25
    3864:	00 0c       	add	r0, r0
    3866:	aa 0b       	sbc	r26, r26
    3868:	bb 0b       	sbc	r27, r27
    386a:	2f 81       	ldd	r18, Y+7	; 0x07
    386c:	38 85       	ldd	r19, Y+8	; 0x08
    386e:	49 85       	ldd	r20, Y+9	; 0x09
    3870:	5a 85       	ldd	r21, Y+10	; 0x0a
    3872:	82 0f       	add	r24, r18
    3874:	93 1f       	adc	r25, r19
    3876:	a4 1f       	adc	r26, r20
    3878:	b5 1f       	adc	r27, r21
    387a:	8f 83       	std	Y+7, r24	; 0x07
    387c:	98 87       	std	Y+8, r25	; 0x08
    387e:	a9 87       	std	Y+9, r26	; 0x09
    3880:	ba 87       	std	Y+10, r27	; 0x0a
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	9a 83       	std	Y+2, r25	; 0x02
    388a:	89 83       	std	Y+1, r24	; 0x01
    388c:	29 81       	ldd	r18, Y+1	; 0x01
    388e:	3a 81       	ldd	r19, Y+2	; 0x02
    3890:	8b 89       	ldd	r24, Y+19	; 0x13
    3892:	9c 89       	ldd	r25, Y+20	; 0x14
    3894:	28 17       	cp	r18, r24
    3896:	39 07       	cpc	r19, r25
    3898:	0c f4       	brge	.+2      	; 0x389c <_ZN9TDSSensor16CalculateAverageEPii+0x25a>
    389a:	78 cf       	rjmp	.-272    	; 0x378c <_ZN9TDSSensor16CalculateAverageEPii+0x14a>
    389c:	6f 81       	ldd	r22, Y+7	; 0x07
    389e:	78 85       	ldd	r23, Y+8	; 0x08
    38a0:	89 85       	ldd	r24, Y+9	; 0x09
    38a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a4:	62 d5       	rcall	.+2756   	; 0x436a <__floatsisf>
    38a6:	6b 01       	movw	r12, r22
    38a8:	7c 01       	movw	r14, r24
    38aa:	8b 89       	ldd	r24, Y+19	; 0x13
    38ac:	9c 89       	ldd	r25, Y+20	; 0x14
    38ae:	02 97       	sbiw	r24, 0x02	; 2
    38b0:	09 2e       	mov	r0, r25
    38b2:	00 0c       	add	r0, r0
    38b4:	aa 0b       	sbc	r26, r26
    38b6:	bb 0b       	sbc	r27, r27
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	56 d5       	rcall	.+2732   	; 0x436a <__floatsisf>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9c 01       	movw	r18, r24
    38c4:	ad 01       	movw	r20, r26
    38c6:	c7 01       	movw	r24, r14
    38c8:	b6 01       	movw	r22, r12
    38ca:	e5 d4       	rcall	.+2506   	; 0x4296 <__divsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8b 87       	std	Y+11, r24	; 0x0b
    38d2:	9c 87       	std	Y+12, r25	; 0x0c
    38d4:	ad 87       	std	Y+13, r26	; 0x0d
    38d6:	be 87       	std	Y+14, r27	; 0x0e
    38d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    38da:	9c 85       	ldd	r25, Y+12	; 0x0c
    38dc:	ad 85       	ldd	r26, Y+13	; 0x0d
    38de:	be 85       	ldd	r27, Y+14	; 0x0e
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	68 96       	adiw	r28, 0x18	; 24
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	ff 90       	pop	r15
    38f6:	ef 90       	pop	r14
    38f8:	df 90       	pop	r13
    38fa:	cf 90       	pop	r12
    38fc:	08 95       	ret

000038fe <_ZN9TDSSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class TDSSensor : public erom::Storage {
    38fe:	a2 e0       	ldi	r26, 0x02	; 2
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	e5 e8       	ldi	r30, 0x85	; 133
    3904:	fc e1       	ldi	r31, 0x1C	; 28
    3906:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    390a:	9a 83       	std	Y+2, r25	; 0x02
    390c:	89 83       	std	Y+1, r24	; 0x01
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	9a 81       	ldd	r25, Y+2	; 0x02
    3912:	23 eb       	ldi	r18, 0xB3	; 179
    3914:	31 e0       	ldi	r19, 0x01	; 1
    3916:	fc 01       	movw	r30, r24
    3918:	31 83       	std	Z+1, r19	; 0x01
    391a:	20 83       	st	Z, r18
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	88 57       	subi	r24, 0x78	; 120
    3922:	9f 4f       	sbci	r25, 0xFF	; 255
    3924:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	8e 57       	subi	r24, 0x7E	; 126
    392e:	9f 4f       	sbci	r25, 0xFF	; 255
    3930:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4erom7StorageD1Ev>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	89 2b       	or	r24, r25
    3942:	19 f0       	breq	.+6      	; 0x394a <_ZN9TDSSensorD1Ev+0x4c>
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	e7 d7       	rcall	.+4046   	; 0x4918 <_ZdlPv>
    394a:	22 96       	adiw	r28, 0x02	; 2
    394c:	e2 e0       	ldi	r30, 0x02	; 2
    394e:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003952 <_ZN9TDSSensorD0Ev>:
    3952:	a2 e0       	ldi	r26, 0x02	; 2
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	ef ea       	ldi	r30, 0xAF	; 175
    3958:	fc e1       	ldi	r31, 0x1C	; 28
    395a:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    395e:	9a 83       	std	Y+2, r25	; 0x02
    3960:	89 83       	std	Y+1, r24	; 0x01
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	9a 81       	ldd	r25, Y+2	; 0x02
    3966:	cb df       	rcall	.-106    	; 0x38fe <_ZN9TDSSensorD1Ev>
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	d5 d7       	rcall	.+4010   	; 0x4918 <_ZdlPv>
    396e:	22 96       	adiw	r28, 0x02	; 2
    3970:	e2 e0       	ldi	r30, 0x02	; 2
    3972:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003976 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    3976:	a2 e0       	ldi	r26, 0x02	; 2
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e1 ec       	ldi	r30, 0xC1	; 193
    397c:	fc e1       	ldi	r31, 0x1C	; 28
    397e:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	fc 01       	movw	r30, r24
    398c:	84 81       	ldd	r24, Z+4	; 0x04
    398e:	95 81       	ldd	r25, Z+5	; 0x05
    3990:	22 96       	adiw	r28, 0x02	; 2
    3992:	e2 e0       	ldi	r30, 0x02	; 2
    3994:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003998 <_ZN6StringpLEPKc>:
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    3998:	a4 e0       	ldi	r26, 0x04	; 4
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e2 ed       	ldi	r30, 0xD2	; 210
    399e:	fc e1       	ldi	r31, 0x1C	; 28
    39a0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	7c 83       	std	Y+4, r23	; 0x04
    39aa:	6b 83       	std	Y+3, r22	; 0x03
    39ac:	2b 81       	ldd	r18, Y+3	; 0x03
    39ae:	3c 81       	ldd	r19, Y+4	; 0x04
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	9a 81       	ldd	r25, Y+2	; 0x02
    39b4:	b9 01       	movw	r22, r18
    39b6:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <_ZN6String6concatEPKc>
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	24 96       	adiw	r28, 0x04	; 4
    39c0:	e2 e0       	ldi	r30, 0x02	; 2
    39c2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000039c6 <_ZNK6StringeqEPKc>:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    39c6:	a4 e0       	ldi	r26, 0x04	; 4
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	e9 ee       	ldi	r30, 0xE9	; 233
    39cc:	fc e1       	ldi	r31, 0x1C	; 28
    39ce:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	7c 83       	std	Y+4, r23	; 0x04
    39d8:	6b 83       	std	Y+3, r22	; 0x03
    39da:	2b 81       	ldd	r18, Y+3	; 0x03
    39dc:	3c 81       	ldd	r19, Y+4	; 0x04
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	b9 01       	movw	r22, r18
    39e4:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZNK6String6equalsEPKc>
    39e8:	24 96       	adiw	r28, 0x04	; 4
    39ea:	e2 e0       	ldi	r30, 0x02	; 2
    39ec:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000039f0 <_ZN15WaterSensorWire5SetupEv>:
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";

void WaterSensorWire::Setup() {
    39f0:	a0 e0       	ldi	r26, 0x00	; 0
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ee ef       	ldi	r30, 0xFE	; 254
    39f6:	fc e1       	ldi	r31, 0x1C	; 28
    39f8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    Wire.begin(_slave); //attached to esp8266 wifi
    39fc:	62 e1       	ldi	r22, 0x12	; 18
    39fe:	8d e9       	ldi	r24, 0x9D	; 157
    3a00:	92 e0       	ldi	r25, 0x02	; 2
    3a02:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN7TwoWire5beginEh>
    Wire.onRequest(Request);
    3a06:	60 ef       	ldi	r22, 0xF0	; 240
    3a08:	7d e1       	ldi	r23, 0x1D	; 29
    3a0a:	8d e9       	ldi	r24, 0x9D	; 157
    3a0c:	92 e0       	ldi	r25, 0x02	; 2
    3a0e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN7TwoWire9onRequestEPFvvE>
    Wire.onReceive(Receive);
    3a12:	62 e1       	ldi	r22, 0x12	; 18
    3a14:	7d e1       	ldi	r23, 0x1D	; 29
    3a16:	8d e9       	ldi	r24, 0x9D	; 157
    3a18:	92 e0       	ldi	r25, 0x02	; 2
    3a1a:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZN7TwoWire9onReceiveEPFviE>

}
    3a1e:	e2 e0       	ldi	r30, 0x02	; 2
    3a20:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003a24 <_ZN15WaterSensorWire7ReceiveEi>:
void WaterSensorWire::Receive(int bytes) {
    3a24:	a9 e2       	ldi	r26, 0x29	; 41
    3a26:	b0 e0       	ldi	r27, 0x00	; 0
    3a28:	e8 e1       	ldi	r30, 0x18	; 24
    3a2a:	fd e1       	ldi	r31, 0x1D	; 29
    3a2c:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <__prologue_saves__+0x1e>
    3a30:	99 a7       	std	Y+41, r25	; 0x29
    3a32:	88 a7       	std	Y+40, r24	; 0x28
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!
    _wireRequest = "";
    3a34:	6a e1       	ldi	r22, 0x1A	; 26
    3a36:	71 e0       	ldi	r23, 0x01	; 1
    3a38:	8b e2       	ldi	r24, 0x2B	; 43
    3a3a:	93 e0       	ldi	r25, 0x03	; 3
    3a3c:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    _cmd = "";
    3a40:	6a e1       	ldi	r22, 0x1A	; 26
    3a42:	71 e0       	ldi	r23, 0x01	; 1
    3a44:	87 e3       	ldi	r24, 0x37	; 55
    3a46:	93 e0       	ldi	r25, 0x03	; 3
    3a48:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    _cmdData = "";
    3a4c:	6a e1       	ldi	r22, 0x1A	; 26
    3a4e:	71 e0       	ldi	r23, 0x01	; 1
    3a50:	8d e3       	ldi	r24, 0x3D	; 61
    3a52:	93 e0       	ldi	r25, 0x03	; 3
    3a54:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    if(bytes == _wireReqLength) {
    3a58:	88 a5       	ldd	r24, Y+40	; 0x28
    3a5a:	99 a5       	ldd	r25, Y+41	; 0x29
    3a5c:	44 97       	sbiw	r24, 0x14	; 20
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    3a60:	ad c0       	rjmp	.+346    	; 0x3bbc <_ZN15WaterSensorWire7ReceiveEi+0x198>
        while (0 < Wire.available()) {
    3a62:	0a c0       	rjmp	.+20     	; 0x3a78 <_ZN15WaterSensorWire7ReceiveEi+0x54>
            char c = Wire.read();
    3a64:	8d e9       	ldi	r24, 0x9D	; 157
    3a66:	92 e0       	ldi	r25, 0x02	; 2
    3a68:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN7TwoWire4readEv>
    3a6c:	89 83       	std	Y+1, r24	; 0x01
            _wireRequest.concat(c);
    3a6e:	69 81       	ldd	r22, Y+1	; 0x01
    3a70:	8b e2       	ldi	r24, 0x2B	; 43
    3a72:	93 e0       	ldi	r25, 0x03	; 3
    3a74:	0e 94 de 28 	call	0x51bc	; 0x51bc <_ZN6String6concatEc>
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!
    _wireRequest = "";
    _cmd = "";
    _cmdData = "";
    if(bytes == _wireReqLength) {
        while (0 < Wire.available()) {
    3a78:	8d e9       	ldi	r24, 0x9D	; 157
    3a7a:	92 e0       	ldi	r25, 0x02	; 2
    3a7c:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN7TwoWire9availableEv>
    3a80:	21 e0       	ldi	r18, 0x01	; 1
    3a82:	18 16       	cp	r1, r24
    3a84:	19 06       	cpc	r1, r25
    3a86:	0c f0       	brlt	.+2      	; 0x3a8a <_ZN15WaterSensorWire7ReceiveEi+0x66>
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	22 23       	and	r18, r18
    3a8c:	59 f7       	brne	.-42     	; 0x3a64 <_ZN15WaterSensorWire7ReceiveEi+0x40>
            char c = Wire.read();
            _wireRequest.concat(c);
        }
        //Serial.println("Wire Request: " + _wireRequest);
        _wireRequest.trim();
    3a8e:	8b e2       	ldi	r24, 0x2B	; 43
    3a90:	93 e0       	ldi	r25, 0x03	; 3
    3a92:	0e 94 a8 29 	call	0x5350	; 0x5350 <_ZN6String4trimEv>
        if(_wireRequest.startsWith("/")) {
    3a96:	ce 01       	movw	r24, r28
    3a98:	46 96       	adiw	r24, 0x16	; 22
    3a9a:	6b e1       	ldi	r22, 0x1B	; 27
    3a9c:	71 e0       	ldi	r23, 0x01	; 1
    3a9e:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	46 96       	adiw	r24, 0x16	; 22
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	8b e2       	ldi	r24, 0x2B	; 43
    3aaa:	93 e0       	ldi	r25, 0x03	; 3
    3aac:	0e 94 44 29 	call	0x5288	; 0x5288 <_ZNK6String10startsWithERKS_>
    3ab0:	11 e0       	ldi	r17, 0x01	; 1
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <_ZN15WaterSensorWire7ReceiveEi+0x94>
    3ab6:	10 e0       	ldi	r17, 0x00	; 0
    3ab8:	ce 01       	movw	r24, r28
    3aba:	46 96       	adiw	r24, 0x16	; 22
    3abc:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3ac0:	11 23       	and	r17, r17
    3ac2:	39 f0       	breq	.+14     	; 0x3ad2 <_ZN15WaterSensorWire7ReceiveEi+0xae>
            _cmd = _wireRequest;
    3ac4:	6b e2       	ldi	r22, 0x2B	; 43
    3ac6:	73 e0       	ldi	r23, 0x03	; 3
    3ac8:	87 e3       	ldi	r24, 0x37	; 55
    3aca:	93 e0       	ldi	r25, 0x03	; 3
    3acc:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
    3ad0:	83 c0       	rjmp	.+262    	; 0x3bd8 <_ZN15WaterSensorWire7ReceiveEi+0x1b4>
            //Serial.println("cmd: " + _cmd);
        }
        else {
            _cmdData = _wireRequest;
    3ad2:	6b e2       	ldi	r22, 0x2B	; 43
    3ad4:	73 e0       	ldi	r23, 0x03	; 3
    3ad6:	8d e3       	ldi	r24, 0x3D	; 61
    3ad8:	93 e0       	ldi	r25, 0x03	; 3
    3ada:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
    3ade:	ce 01       	movw	r24, r28
    3ae0:	40 96       	adiw	r24, 0x10	; 16
    3ae2:	6d e3       	ldi	r22, 0x3D	; 61
    3ae4:	73 e0       	ldi	r23, 0x03	; 3
    3ae6:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    3aea:	ce 01       	movw	r24, r28
    3aec:	4c 96       	adiw	r24, 0x1c	; 28
    3aee:	be 01       	movw	r22, r28
    3af0:	60 5f       	subi	r22, 0xF0	; 240
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	4d e3       	ldi	r20, 0x3D	; 61
    3afa:	72 d1       	rcall	.+740    	; 0x3de0 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3afc:	ce 01       	movw	r24, r28
    3afe:	40 96       	adiw	r24, 0x10	; 16
    3b00:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
            String val = SplitString(_cmdData, '=', 1);
    3b04:	ce 01       	movw	r24, r28
    3b06:	0a 96       	adiw	r24, 0x0a	; 10
    3b08:	6d e3       	ldi	r22, 0x3D	; 61
    3b0a:	73 e0       	ldi	r23, 0x03	; 3
    3b0c:	0e 94 2b 28 	call	0x5056	; 0x5056 <_ZN6StringC1ERKS_>
    3b10:	ce 01       	movw	r24, r28
    3b12:	82 96       	adiw	r24, 0x22	; 34
    3b14:	be 01       	movw	r22, r28
    3b16:	66 5f       	subi	r22, 0xF6	; 246
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	21 e0       	ldi	r18, 0x01	; 1
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	4d e3       	ldi	r20, 0x3D	; 61
    3b20:	5f d1       	rcall	.+702    	; 0x3de0 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3b22:	ce 01       	movw	r24, r28
    3b24:	0a 96       	adiw	r24, 0x0a	; 10
    3b26:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
            if(var == "tdsoffset") {
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	4c 96       	adiw	r24, 0x1c	; 28
    3b2e:	6d e1       	ldi	r22, 0x1D	; 29
    3b30:	71 e0       	ldi	r23, 0x01	; 1
    3b32:	49 df       	rcall	.-366    	; 0x39c6 <_ZNK6StringeqEPKc>
    3b34:	98 2f       	mov	r25, r24
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	99 23       	and	r25, r25
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <_ZN15WaterSensorWire7ReceiveEi+0x11a>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	88 23       	and	r24, r24
    3b40:	a1 f0       	breq	.+40     	; 0x3b6a <_ZN15WaterSensorWire7ReceiveEi+0x146>
                double offset = val.toFloat();
    3b42:	ce 01       	movw	r24, r28
    3b44:	82 96       	adiw	r24, 0x22	; 34
    3b46:	0e 94 ff 29 	call	0x53fe	; 0x53fe <_ZNK6String7toFloatEv>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	8a 83       	std	Y+2, r24	; 0x02
    3b50:	9b 83       	std	Y+3, r25	; 0x03
    3b52:	ac 83       	std	Y+4, r26	; 0x04
    3b54:	bd 83       	std	Y+5, r27	; 0x05
                TheTDSSensor.Update(offset);
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5a:	ac 81       	ldd	r26, Y+4	; 0x04
    3b5c:	bd 81       	ldd	r27, Y+5	; 0x05
    3b5e:	ac 01       	movw	r20, r24
    3b60:	bd 01       	movw	r22, r26
    3b62:	83 e2       	ldi	r24, 0x23	; 35
    3b64:	94 e0       	ldi	r25, 0x04	; 4
    3b66:	07 db       	rcall	.-2546   	; 0x3176 <_ZN9TDSSensor6UpdateEd>
    3b68:	20 c0       	rjmp	.+64     	; 0x3baa <_ZN15WaterSensorWire7ReceiveEi+0x186>
            }
            else if(var == "phoffset") {
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	4c 96       	adiw	r24, 0x1c	; 28
    3b6e:	67 e2       	ldi	r22, 0x27	; 39
    3b70:	71 e0       	ldi	r23, 0x01	; 1
    3b72:	29 df       	rcall	.-430    	; 0x39c6 <_ZNK6StringeqEPKc>
    3b74:	98 2f       	mov	r25, r24
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	99 23       	and	r25, r25
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <_ZN15WaterSensorWire7ReceiveEi+0x15a>
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	88 23       	and	r24, r24
    3b80:	a1 f0       	breq	.+40     	; 0x3baa <_ZN15WaterSensorWire7ReceiveEi+0x186>
                double offset = val.toFloat();
    3b82:	ce 01       	movw	r24, r28
    3b84:	82 96       	adiw	r24, 0x22	; 34
    3b86:	0e 94 ff 29 	call	0x53fe	; 0x53fe <_ZNK6String7toFloatEv>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	8e 83       	std	Y+6, r24	; 0x06
    3b90:	9f 83       	std	Y+7, r25	; 0x07
    3b92:	a8 87       	std	Y+8, r26	; 0x08
    3b94:	b9 87       	std	Y+9, r27	; 0x09
                ThePHSensor.Update(offset);
    3b96:	8e 81       	ldd	r24, Y+6	; 0x06
    3b98:	9f 81       	ldd	r25, Y+7	; 0x07
    3b9a:	a8 85       	ldd	r26, Y+8	; 0x08
    3b9c:	b9 85       	ldd	r27, Y+9	; 0x09
    3b9e:	ac 01       	movw	r20, r24
    3ba0:	bd 01       	movw	r22, r26
    3ba2:	81 e6       	ldi	r24, 0x61	; 97
    3ba4:	93 e0       	ldi	r25, 0x03	; 3
    3ba6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN8PHSensor6UpdateEd>
        }
        else {
            _cmdData = _wireRequest;
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
            String val = SplitString(_cmdData, '=', 1);
    3baa:	ce 01       	movw	r24, r28
    3bac:	82 96       	adiw	r24, 0x22	; 34
    3bae:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
                TheTDSSensor.Update(offset);
            }
            else if(var == "phoffset") {
                double offset = val.toFloat();
                ThePHSensor.Update(offset);
            }
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	4c 96       	adiw	r24, 0x1c	; 28
    3bb6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3bba:	0e c0       	rjmp	.+28     	; 0x3bd8 <_ZN15WaterSensorWire7ReceiveEi+0x1b4>
        }
    }
    else {
        Serial.print(F("Unexpected number of bytes received: "));
    3bbc:	84 e9       	ldi	r24, 0x94	; 148
    3bbe:	93 e0       	ldi	r25, 0x03	; 3
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	87 e6       	ldi	r24, 0x67	; 103
    3bc4:	95 e0       	ldi	r25, 0x05	; 5
    3bc6:	e9 d6       	rcall	.+3538   	; 0x499a <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(bytes);
    3bc8:	88 a5       	ldd	r24, Y+40	; 0x28
    3bca:	99 a5       	ldd	r25, Y+41	; 0x29
    3bcc:	4a e0       	ldi	r20, 0x0A	; 10
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	87 e6       	ldi	r24, 0x67	; 103
    3bd4:	95 e0       	ldi	r25, 0x05	; 5
    3bd6:	c7 d7       	rcall	.+3982   	; 0x4b66 <_ZN5Print7printlnEii>
    }
}
    3bd8:	a9 96       	adiw	r28, 0x29	; 41
    3bda:	e3 e0       	ldi	r30, 0x03	; 3
    3bdc:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__epilogue_restores__+0x1e>

00003be0 <_ZN15WaterSensorWire7RequestEv>:
void WaterSensorWire::Request() {
    3be0:	a1 e2       	ldi	r26, 0x21	; 33
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	e6 ef       	ldi	r30, 0xF6	; 246
    3be6:	fd e1       	ldi	r31, 0x1D	; 29
    3be8:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!

    _responseIndex++;
    3bec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3bf0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3bfa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    String partialResponse = "";
    3bfe:	ce 01       	movw	r24, r28
    3c00:	42 96       	adiw	r24, 0x12	; 18
    3c02:	6a e1       	ldi	r22, 0x1A	; 26
    3c04:	71 e0       	ldi	r23, 0x01	; 1
    3c06:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    if(_responseIndex == 0) {
    3c0a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c0e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c12:	89 2b       	or	r24, r25
    3c14:	39 f4       	brne	.+14     	; 0x3c24 <_ZN15WaterSensorWire7RequestEv+0x44>
        partialResponse = ThePHSensor.PhString;
    3c16:	ce 01       	movw	r24, r28
    3c18:	42 96       	adiw	r24, 0x12	; 18
    3c1a:	6f e0       	ldi	r22, 0x0F	; 15
    3c1c:	74 e0       	ldi	r23, 0x04	; 4
    3c1e:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
    3c22:	8f c0       	rjmp	.+286    	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else if(_responseIndex == 1) {
    3c24:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c28:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	39 f4       	brne	.+14     	; 0x3c3e <_ZN15WaterSensorWire7RequestEv+0x5e>
        partialResponse = ThePHSensor.PhAvgString;
    3c30:	ce 01       	movw	r24, r28
    3c32:	42 96       	adiw	r24, 0x12	; 18
    3c34:	65 e1       	ldi	r22, 0x15	; 21
    3c36:	74 e0       	ldi	r23, 0x04	; 4
    3c38:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
    3c3c:	82 c0       	rjmp	.+260    	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else if(_responseIndex == 2) {
    3c3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c42:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c46:	02 97       	sbiw	r24, 0x02	; 2
    3c48:	39 f4       	brne	.+14     	; 0x3c58 <_ZN15WaterSensorWire7RequestEv+0x78>
        partialResponse = TheTDSSensor.TdsString;
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	42 96       	adiw	r24, 0x12	; 18
    3c4e:	65 ea       	ldi	r22, 0xA5	; 165
    3c50:	74 e0       	ldi	r23, 0x04	; 4
    3c52:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
    3c56:	75 c0       	rjmp	.+234    	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else if(_responseIndex == 3) {
    3c58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c5c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c60:	03 97       	sbiw	r24, 0x03	; 3
    3c62:	39 f4       	brne	.+14     	; 0x3c72 <_ZN15WaterSensorWire7RequestEv+0x92>
        partialResponse = TheTDSSensor.TdsAvgString;
    3c64:	ce 01       	movw	r24, r28
    3c66:	42 96       	adiw	r24, 0x12	; 18
    3c68:	6b ea       	ldi	r22, 0xAB	; 171
    3c6a:	74 e0       	ldi	r23, 0x04	; 4
    3c6c:	0e 94 16 28 	call	0x502c	; 0x502c <_ZN6StringaSERKS_>
    3c70:	68 c0       	rjmp	.+208    	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else if(_responseIndex == 4) {
    3c72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3c76:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3c7a:	04 97       	sbiw	r24, 0x04	; 4
    3c7c:	f9 f4       	brne	.+62     	; 0x3cbc <_ZN15WaterSensorWire7RequestEv+0xdc>
        partialResponse = String(ThePHSensor.Offset, 2).c_str();
    3c7e:	8b e1       	ldi	r24, 0x1B	; 27
    3c80:	94 e0       	ldi	r25, 0x04	; 4
    3c82:	a6 d8       	rcall	.-3764   	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    3c84:	fc 01       	movw	r30, r24
    3c86:	80 81       	ld	r24, Z
    3c88:	91 81       	ldd	r25, Z+1	; 0x01
    3c8a:	a2 81       	ldd	r26, Z+2	; 0x02
    3c8c:	b3 81       	ldd	r27, Z+3	; 0x03
    3c8e:	fe 01       	movw	r30, r28
    3c90:	3c 96       	adiw	r30, 0x0c	; 12
    3c92:	22 e0       	ldi	r18, 0x02	; 2
    3c94:	ac 01       	movw	r20, r24
    3c96:	bd 01       	movw	r22, r26
    3c98:	cf 01       	movw	r24, r30
    3c9a:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN6StringC1Edh>
    3c9e:	ce 01       	movw	r24, r28
    3ca0:	0c 96       	adiw	r24, 0x0c	; 12
    3ca2:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZNK6String5c_strEv>
    3ca6:	9c 01       	movw	r18, r24
    3ca8:	ce 01       	movw	r24, r28
    3caa:	42 96       	adiw	r24, 0x12	; 18
    3cac:	b9 01       	movw	r22, r18
    3cae:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    3cb2:	ce 01       	movw	r24, r28
    3cb4:	0c 96       	adiw	r24, 0x0c	; 12
    3cb6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3cba:	43 c0       	rjmp	.+134    	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else if(_responseIndex == 5) {
    3cbc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3cc0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3cc4:	05 97       	sbiw	r24, 0x05	; 5
    3cc6:	29 f5       	brne	.+74     	; 0x3d12 <_ZN15WaterSensorWire7RequestEv+0x132>
        partialResponse = String(TheTDSSensor.Offset, 2).c_str();
    3cc8:	81 eb       	ldi	r24, 0xB1	; 177
    3cca:	94 e0       	ldi	r25, 0x04	; 4
    3ccc:	81 d8       	rcall	.-3838   	; 0x2dd0 <_ZN4erom5EntryIdEcvRdEv>
    3cce:	fc 01       	movw	r30, r24
    3cd0:	80 81       	ld	r24, Z
    3cd2:	91 81       	ldd	r25, Z+1	; 0x01
    3cd4:	a2 81       	ldd	r26, Z+2	; 0x02
    3cd6:	b3 81       	ldd	r27, Z+3	; 0x03
    3cd8:	fe 01       	movw	r30, r28
    3cda:	36 96       	adiw	r30, 0x06	; 6
    3cdc:	22 e0       	ldi	r18, 0x02	; 2
    3cde:	ac 01       	movw	r20, r24
    3ce0:	bd 01       	movw	r22, r26
    3ce2:	cf 01       	movw	r24, r30
    3ce4:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN6StringC1Edh>
    3ce8:	ce 01       	movw	r24, r28
    3cea:	06 96       	adiw	r24, 0x06	; 6
    3cec:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZNK6String5c_strEv>
    3cf0:	9c 01       	movw	r18, r24
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	42 96       	adiw	r24, 0x12	; 18
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN6StringaSEPKc>
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	06 96       	adiw	r24, 0x06	; 6
    3d00:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
        _responseIndex = -1; //need to keep this in last if always
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	9f ef       	ldi	r25, 0xFF	; 255
    3d08:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3d0c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3d10:	18 c0       	rjmp	.+48     	; 0x3d42 <_ZN15WaterSensorWire7RequestEv+0x162>
    }
    else {
        Serial.print("~responseIndex not found: ");
    3d12:	60 e3       	ldi	r22, 0x30	; 48
    3d14:	71 e0       	ldi	r23, 0x01	; 1
    3d16:	87 e6       	ldi	r24, 0x67	; 103
    3d18:	95 e0       	ldi	r25, 0x05	; 5
    3d1a:	71 d6       	rcall	.+3298   	; 0x49fe <_ZN5Print5printEPKc>
        Serial.println(_responseIndex);
    3d1c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3d20:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3d24:	4a e0       	ldi	r20, 0x0A	; 10
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	bc 01       	movw	r22, r24
    3d2a:	87 e6       	ldi	r24, 0x67	; 103
    3d2c:	95 e0       	ldi	r25, 0x05	; 5
    3d2e:	1b d7       	rcall	.+3638   	; 0x4b66 <_ZN5Print7printlnEii>
        _responseIndex = -1;
    3d30:	8f ef       	ldi	r24, 0xFF	; 255
    3d32:	9f ef       	ldi	r25, 0xFF	; 255
    3d34:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3d38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3d3c:	00 e0       	ldi	r16, 0x00	; 0
    3d3e:	10 e0       	ldi	r17, 0x00	; 0
        return;
    3d40:	43 c0       	rjmp	.+134    	; 0x3dc8 <_ZN15WaterSensorWire7RequestEv+0x1e8>
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    3d42:	ce 01       	movw	r24, r28
    3d44:	42 96       	adiw	r24, 0x12	; 18
    3d46:	17 de       	rcall	.-978    	; 0x3976 <_ZNK6String6lengthEv>
    3d48:	9c 01       	movw	r18, r24
    3d4a:	8a e0       	ldi	r24, 0x0A	; 10
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	82 1b       	sub	r24, r18
    3d50:	93 0b       	sbc	r25, r19
    3d52:	9d 83       	std	Y+5, r25	; 0x05
    3d54:	8c 83       	std	Y+4, r24	; 0x04
    for(int i = 0; i < diff; i++) {
    3d56:	1a 82       	std	Y+2, r1	; 0x02
    3d58:	19 82       	std	Y+1, r1	; 0x01
    3d5a:	0a c0       	rjmp	.+20     	; 0x3d70 <_ZN15WaterSensorWire7RequestEv+0x190>
        partialResponse += " ";
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	42 96       	adiw	r24, 0x12	; 18
    3d60:	6b e4       	ldi	r22, 0x4B	; 75
    3d62:	71 e0       	ldi	r23, 0x01	; 1
    3d64:	19 de       	rcall	.-974    	; 0x3998 <_ZN6StringpLEPKc>
        return;
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	01 96       	adiw	r24, 0x01	; 1
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    3d70:	29 81       	ldd	r18, Y+1	; 0x01
    3d72:	3a 81       	ldd	r19, Y+2	; 0x02
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	9d 81       	ldd	r25, Y+5	; 0x05
    3d78:	28 17       	cp	r18, r24
    3d7a:	39 07       	cpc	r19, r25
    3d7c:	7c f3       	brlt	.-34     	; 0x3d5c <_ZN15WaterSensorWire7RequestEv+0x17c>
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    3d7e:	1b 82       	std	Y+3, r1	; 0x03
    3d80:	15 c0       	rjmp	.+42     	; 0x3dac <_ZN15WaterSensorWire7RequestEv+0x1cc>
        response[i] = (byte)partialResponse.charAt(i);
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	08 2f       	mov	r16, r24
    3d86:	10 e0       	ldi	r17, 0x00	; 0
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	ce 01       	movw	r24, r28
    3d90:	42 96       	adiw	r24, 0x12	; 18
    3d92:	b9 01       	movw	r22, r18
    3d94:	0e 94 63 29 	call	0x52c6	; 0x52c6 <_ZNK6String6charAtEj>
    3d98:	28 2f       	mov	r18, r24
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	48 96       	adiw	r24, 0x18	; 24
    3d9e:	80 0f       	add	r24, r16
    3da0:	91 1f       	adc	r25, r17
    3da2:	fc 01       	movw	r30, r24
    3da4:	20 83       	st	Z, r18
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	8b 83       	std	Y+3, r24	; 0x03
    3dac:	8b 81       	ldd	r24, Y+3	; 0x03
    3dae:	8a 30       	cpi	r24, 0x0A	; 10
    3db0:	40 f3       	brcs	.-48     	; 0x3d82 <_ZN15WaterSensorWire7RequestEv+0x1a2>
        response[i] = (byte)partialResponse.charAt(i);
    }
    Wire.write(response, sizeof(response));
    3db2:	ce 01       	movw	r24, r28
    3db4:	48 96       	adiw	r24, 0x18	; 24
    3db6:	4a e0       	ldi	r20, 0x0A	; 10
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	bc 01       	movw	r22, r24
    3dbc:	8d e9       	ldi	r24, 0x9D	; 157
    3dbe:	92 e0       	ldi	r25, 0x02	; 2
    3dc0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN7TwoWire5writeEPKhj>
    3dc4:	01 e0       	ldi	r16, 0x01	; 1
    3dc6:	10 e0       	ldi	r17, 0x00	; 0
    3dc8:	ce 01       	movw	r24, r28
    3dca:	42 96       	adiw	r24, 0x12	; 18
    3dcc:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <_ZN6StringD1Ev>
    3dd0:	01 30       	cpi	r16, 0x01	; 1
    3dd2:	11 05       	cpc	r17, r1
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <_ZN15WaterSensorWire7RequestEv+0x1f8>
    3dd6:	00 00       	nop
}
    3dd8:	a1 96       	adiw	r28, 0x21	; 33
    3dda:	e4 e0       	ldi	r30, 0x04	; 4
    3ddc:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

00003de0 <_ZN15WaterSensorWire11SplitStringE6Stringci>:

String WaterSensorWire::SplitString(String data, char separator, int index) {
    3de0:	a1 e1       	ldi	r26, 0x11	; 17
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	e6 ef       	ldi	r30, 0xF6	; 246
    3de6:	fe e1       	ldi	r31, 0x1E	; 30
    3de8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3dec:	9c 87       	std	Y+12, r25	; 0x0c
    3dee:	8b 87       	std	Y+11, r24	; 0x0b
    3df0:	7e 87       	std	Y+14, r23	; 0x0e
    3df2:	6d 87       	std	Y+13, r22	; 0x0d
    3df4:	4f 87       	std	Y+15, r20	; 0x0f
    3df6:	39 8b       	std	Y+17, r19	; 0x11
    3df8:	28 8b       	std	Y+16, r18	; 0x10
    int found = 0;
    3dfa:	1a 82       	std	Y+2, r1	; 0x02
    3dfc:	19 82       	std	Y+1, r1	; 0x01
    int strIndex[] = {0, -1};
    3dfe:	18 86       	std	Y+8, r1	; 0x08
    3e00:	1f 82       	std	Y+7, r1	; 0x07
    3e02:	8f ef       	ldi	r24, 0xFF	; 255
    3e04:	9f ef       	ldi	r25, 0xFF	; 255
    3e06:	9a 87       	std	Y+10, r25	; 0x0a
    3e08:	89 87       	std	Y+9, r24	; 0x09
    int maxIndex = data.length() - 1;
    3e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0e:	b3 dd       	rcall	.-1178   	; 0x3976 <_ZNK6String6lengthEv>
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	9e 83       	std	Y+6, r25	; 0x06
    3e14:	8d 83       	std	Y+5, r24	; 0x05
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    3e16:	1c 82       	std	Y+4, r1	; 0x04
    3e18:	1b 82       	std	Y+3, r1	; 0x03
    3e1a:	35 c0       	rjmp	.+106    	; 0x3e86 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
        if(data.charAt(i) == separator || i == maxIndex) {
    3e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e24:	b9 01       	movw	r22, r18
    3e26:	0e 94 63 29 	call	0x52c6	; 0x52c6 <_ZNK6String6charAtEj>
    3e2a:	98 2f       	mov	r25, r24
    3e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e2e:	98 17       	cp	r25, r24
    3e30:	39 f0       	breq	.+14     	; 0x3e40 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    3e32:	2b 81       	ldd	r18, Y+3	; 0x03
    3e34:	3c 81       	ldd	r19, Y+4	; 0x04
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3a:	28 17       	cp	r18, r24
    3e3c:	39 07       	cpc	r19, r25
    3e3e:	11 f4       	brne	.+4      	; 0x3e44 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	01 c0       	rjmp	.+2      	; 0x3e46 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	88 23       	and	r24, r24
    3e48:	c9 f0       	breq	.+50     	; 0x3e7c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
            found++;
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	01 96       	adiw	r24, 0x01	; 1
    3e50:	9a 83       	std	Y+2, r25	; 0x02
    3e52:	89 83       	std	Y+1, r24	; 0x01
            strIndex[0] = strIndex[1] + 1;
    3e54:	89 85       	ldd	r24, Y+9	; 0x09
    3e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e58:	01 96       	adiw	r24, 0x01	; 1
    3e5a:	98 87       	std	Y+8, r25	; 0x08
    3e5c:	8f 83       	std	Y+7, r24	; 0x07
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
    3e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e60:	3c 81       	ldd	r19, Y+4	; 0x04
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	28 17       	cp	r18, r24
    3e68:	39 07       	cpc	r19, r25
    3e6a:	21 f4       	brne	.+8      	; 0x3e74 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	01 96       	adiw	r24, 0x01	; 1
    3e72:	02 c0       	rjmp	.+4      	; 0x3e78 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    3e74:	8b 81       	ldd	r24, Y+3	; 0x03
    3e76:	9c 81       	ldd	r25, Y+4	; 0x04
    3e78:	9a 87       	std	Y+10, r25	; 0x0a
    3e7a:	89 87       	std	Y+9, r24	; 0x09

String WaterSensorWire::SplitString(String data, char separator, int index) {
    int found = 0;
    int strIndex[] = {0, -1};
    int maxIndex = data.length() - 1;
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e80:	01 96       	adiw	r24, 0x01	; 1
    3e82:	9c 83       	std	Y+4, r25	; 0x04
    3e84:	8b 83       	std	Y+3, r24	; 0x03
    3e86:	2b 81       	ldd	r18, Y+3	; 0x03
    3e88:	3c 81       	ldd	r19, Y+4	; 0x04
    3e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8e:	82 17       	cp	r24, r18
    3e90:	93 07       	cpc	r25, r19
    3e92:	44 f0       	brlt	.+16     	; 0x3ea4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3e94:	29 81       	ldd	r18, Y+1	; 0x01
    3e96:	3a 81       	ldd	r19, Y+2	; 0x02
    3e98:	88 89       	ldd	r24, Y+16	; 0x10
    3e9a:	99 89       	ldd	r25, Y+17	; 0x11
    3e9c:	82 17       	cp	r24, r18
    3e9e:	93 07       	cpc	r25, r19
    3ea0:	0c f0       	brlt	.+2      	; 0x3ea4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3ea2:	bc cf       	rjmp	.-136    	; 0x3e1c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
    3ea4:	29 81       	ldd	r18, Y+1	; 0x01
    3ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea8:	88 89       	ldd	r24, Y+16	; 0x10
    3eaa:	99 89       	ldd	r25, Y+17	; 0x11
    3eac:	82 17       	cp	r24, r18
    3eae:	93 07       	cpc	r25, r19
    3eb0:	6c f4       	brge	.+26     	; 0x3ecc <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    3eb2:	89 85       	ldd	r24, Y+9	; 0x09
    3eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb6:	9c 01       	movw	r18, r24
    3eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eba:	98 85       	ldd	r25, Y+8	; 0x08
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ec2:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ec4:	7e 85       	ldd	r23, Y+14	; 0x0e
    3ec6:	0e 94 64 29 	call	0x52c8	; 0x52c8 <_ZNK6String9substringEjj>
    3eca:	06 c0       	rjmp	.+12     	; 0x3ed8 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    3ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ece:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed0:	6a e1       	ldi	r22, 0x1A	; 26
    3ed2:	71 e0       	ldi	r23, 0x01	; 1
    3ed4:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    3ed8:	00 00       	nop
}
    3eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ede:	61 96       	adiw	r28, 0x11	; 17
    3ee0:	e2 e0       	ldi	r30, 0x02	; 2
    3ee2:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003ee6 <_Z41__static_initialization_and_destruction_0ii>:
    3ee6:	a4 e0       	ldi	r26, 0x04	; 4
    3ee8:	b0 e0       	ldi	r27, 0x00	; 0
    3eea:	e9 e7       	ldi	r30, 0x79	; 121
    3eec:	ff e1       	ldi	r31, 0x1F	; 31
    3eee:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3ef2:	9a 83       	std	Y+2, r25	; 0x02
    3ef4:	89 83       	std	Y+1, r24	; 0x01
    3ef6:	7c 83       	std	Y+4, r23	; 0x04
    3ef8:	6b 83       	std	Y+3, r22	; 0x03
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	9a 81       	ldd	r25, Y+2	; 0x02
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	11 f5       	brne	.+68     	; 0x3f46 <_Z41__static_initialization_and_destruction_0ii+0x60>
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	01 96       	adiw	r24, 0x01	; 1
    3f08:	f1 f4       	brne	.+60     	; 0x3f46 <_Z41__static_initialization_and_destruction_0ii+0x60>
#include "WaterSensorWire.h"

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3f0a:	6a e1       	ldi	r22, 0x1A	; 26
    3f0c:	71 e0       	ldi	r23, 0x01	; 1
    3f0e:	8b e2       	ldi	r24, 0x2B	; 43
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    3f16:	6a e1       	ldi	r22, 0x1A	; 26
    3f18:	71 e0       	ldi	r23, 0x01	; 1
    3f1a:	81 e3       	ldi	r24, 0x31	; 49
    3f1c:	93 e0       	ldi	r25, 0x03	; 3
    3f1e:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    3f22:	6a e1       	ldi	r22, 0x1A	; 26
    3f24:	71 e0       	ldi	r23, 0x01	; 1
    3f26:	87 e3       	ldi	r24, 0x37	; 55
    3f28:	93 e0       	ldi	r25, 0x03	; 3
    3f2a:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
static String _cmdData = "";
    3f2e:	6a e1       	ldi	r22, 0x1A	; 26
    3f30:	71 e0       	ldi	r23, 0x01	; 1
    3f32:	8d e3       	ldi	r24, 0x3D	; 61
    3f34:	93 e0       	ldi	r25, 0x03	; 3
    3f36:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
static String _response = "";
    3f3a:	6a e1       	ldi	r22, 0x1A	; 26
    3f3c:	71 e0       	ldi	r23, 0x01	; 1
    3f3e:	83 e4       	ldi	r24, 0x43	; 67
    3f40:	93 e0       	ldi	r25, 0x03	; 3
    3f42:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN6StringC1EPKc>
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	89 2b       	or	r24, r25
    3f4c:	99 f4       	brne	.+38     	; 0x3f74 <_Z41__static_initialization_and_destruction_0ii+0x8e>
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	9c 81       	ldd	r25, Y+4	; 0x04
    3f52:	01 96       	adiw	r24, 0x01	; 1
    3f54:	79 f4       	brne	.+30     	; 0x3f74 <_Z41__static_initialization_and_destruction_0ii+0x8e>
    3f56:	83 e4       	ldi	r24, 0x43	; 67
    3f58:	93 e0       	ldi	r25, 0x03	; 3
    3f5a:	ed d7       	rcall	.+4058   	; 0x4f36 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    3f5c:	8d e3       	ldi	r24, 0x3D	; 61
    3f5e:	93 e0       	ldi	r25, 0x03	; 3
    3f60:	ea d7       	rcall	.+4052   	; 0x4f36 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    3f62:	87 e3       	ldi	r24, 0x37	; 55
    3f64:	93 e0       	ldi	r25, 0x03	; 3
    3f66:	e7 d7       	rcall	.+4046   	; 0x4f36 <_ZN6StringD1Ev>

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    3f68:	81 e3       	ldi	r24, 0x31	; 49
    3f6a:	93 e0       	ldi	r25, 0x03	; 3
    3f6c:	e4 d7       	rcall	.+4040   	; 0x4f36 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3f6e:	8b e2       	ldi	r24, 0x2B	; 43
    3f70:	93 e0       	ldi	r25, 0x03	; 3
    3f72:	e1 d7       	rcall	.+4034   	; 0x4f36 <_ZN6StringD1Ev>
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
    3f74:	24 96       	adiw	r28, 0x04	; 4
    3f76:	e2 e0       	ldi	r30, 0x02	; 2
    3f78:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003f7c <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    3f7c:	a0 e0       	ldi	r26, 0x00	; 0
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	e4 ec       	ldi	r30, 0xC4	; 196
    3f82:	ff e1       	ldi	r31, 0x1F	; 31
    3f84:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3f88:	6f ef       	ldi	r22, 0xFF	; 255
    3f8a:	7f ef       	ldi	r23, 0xFF	; 255
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	aa df       	rcall	.-172    	; 0x3ee6 <_Z41__static_initialization_and_destruction_0ii>
    3f92:	e2 e0       	ldi	r30, 0x02	; 2
    3f94:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003f98 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    3f98:	a0 e0       	ldi	r26, 0x00	; 0
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e2 ed       	ldi	r30, 0xD2	; 210
    3f9e:	ff e1       	ldi	r31, 0x1F	; 31
    3fa0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    3fa4:	6f ef       	ldi	r22, 0xFF	; 255
    3fa6:	7f ef       	ldi	r23, 0xFF	; 255
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9c df       	rcall	.-200    	; 0x3ee6 <_Z41__static_initialization_and_destruction_0ii>
    3fae:	e2 e0       	ldi	r30, 0x02	; 2
    3fb0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00003fb4 <_Z41__static_initialization_and_destruction_0ii>:

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    3fb4:	a4 e3       	ldi	r26, 0x34	; 52
    3fb6:	b0 e0       	ldi	r27, 0x00	; 0
    3fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    3fba:	ff e1       	ldi	r31, 0x1F	; 31
    3fbc:	0c 94 66 2a 	jmp	0x54cc	; 0x54cc <__prologue_saves__+0x1c>
    3fc0:	9a ab       	std	Y+50, r25	; 0x32
    3fc2:	89 ab       	std	Y+49, r24	; 0x31
    3fc4:	7c ab       	std	Y+52, r23	; 0x34
    3fc6:	6b ab       	std	Y+51, r22	; 0x33
    3fc8:	89 a9       	ldd	r24, Y+49	; 0x31
    3fca:	9a a9       	ldd	r25, Y+50	; 0x32
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	99 f5       	brne	.+102    	; 0x4036 <_Z41__static_initialization_and_destruction_0ii+0x82>
    3fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    3fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	79 f5       	brne	.+94     	; 0x4036 <_Z41__static_initialization_and_destruction_0ii+0x82>
namespace Globals {

    int _phSensorPin = A5;//A15;
    int _tdsSensorPin = A4;//A14;

    LCDBase TheLCD = LCDBase();
    3fd8:	89 e4       	ldi	r24, 0x49	; 73
    3fda:	93 e0       	ldi	r25, 0x03	; 3
    3fdc:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7LCDBaseC1Ev>

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	49 96       	adiw	r24, 0x19	; 25
    3fe4:	69 e4       	ldi	r22, 0x49	; 73
    3fe6:	73 e0       	ldi	r23, 0x03	; 3
    3fe8:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN7LCDBaseC1ERKS_>
    3fec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    3ff0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    3ff4:	9e 01       	movw	r18, r28
    3ff6:	27 5e       	subi	r18, 0xE7	; 231
    3ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffa:	89 01       	movw	r16, r18
    3ffc:	21 e0       	ldi	r18, 0x01	; 1
    3ffe:	40 ed       	ldi	r20, 0xD0	; 208
    4000:	57 e0       	ldi	r21, 0x07	; 7
    4002:	bc 01       	movw	r22, r24
    4004:	81 e6       	ldi	r24, 0x61	; 97
    4006:	93 e0       	ldi	r25, 0x03	; 3
    4008:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN8PHSensorC1Eiib7LCDBase>

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);
    400c:	69 e4       	ldi	r22, 0x49	; 73
    400e:	73 e0       	ldi	r23, 0x03	; 3
    4010:	ce 01       	movw	r24, r28
    4012:	01 96       	adiw	r24, 0x01	; 1
    4014:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN7LCDBaseC1ERKS_>
    4018:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    401c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    4020:	9e 01       	movw	r18, r28
    4022:	2f 5f       	subi	r18, 0xFF	; 255
    4024:	3f 4f       	sbci	r19, 0xFF	; 255
    4026:	89 01       	movw	r16, r18
    4028:	21 e0       	ldi	r18, 0x01	; 1
    402a:	48 ee       	ldi	r20, 0xE8	; 232
    402c:	53 e0       	ldi	r21, 0x03	; 3
    402e:	bc 01       	movw	r22, r24
    4030:	83 e2       	ldi	r24, 0x23	; 35
    4032:	94 e0       	ldi	r25, 0x04	; 4
    4034:	06 d8       	rcall	.-4084   	; 0x3042 <_ZN9TDSSensorC1Eiib7LCDBase>
    4036:	89 a9       	ldd	r24, Y+49	; 0x31
    4038:	9a a9       	ldd	r25, Y+50	; 0x32
    403a:	89 2b       	or	r24, r25
    403c:	59 f4       	brne	.+22     	; 0x4054 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    403e:	8b a9       	ldd	r24, Y+51	; 0x33
    4040:	9c a9       	ldd	r25, Y+52	; 0x34
    4042:	01 96       	adiw	r24, 0x01	; 1
    4044:	39 f4       	brne	.+14     	; 0x4054 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    4046:	83 e2       	ldi	r24, 0x23	; 35
    4048:	94 e0       	ldi	r25, 0x04	; 4
    404a:	59 dc       	rcall	.-1870   	; 0x38fe <_ZN9TDSSensorD1Ev>
    int _phSensorPin = A5;//A15;
    int _tdsSensorPin = A4;//A14;

    LCDBase TheLCD = LCDBase();

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    404c:	81 e6       	ldi	r24, 0x61	; 97
    404e:	93 e0       	ldi	r25, 0x03	; 3
    4050:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN8PHSensorD1Ev>

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    4054:	e4 96       	adiw	r28, 0x34	; 52
    4056:	e4 e0       	ldi	r30, 0x04	; 4
    4058:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__epilogue_restores__+0x1c>

0000405c <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    405c:	a0 e0       	ldi	r26, 0x00	; 0
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	e4 e3       	ldi	r30, 0x34	; 52
    4062:	f0 e2       	ldi	r31, 0x20	; 32
    4064:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    4068:	6f ef       	ldi	r22, 0xFF	; 255
    406a:	7f ef       	ldi	r23, 0xFF	; 255
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	a1 df       	rcall	.-190    	; 0x3fb4 <_Z41__static_initialization_and_destruction_0ii>
    4072:	e2 e0       	ldi	r30, 0x02	; 2
    4074:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00004078 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    4078:	a0 e0       	ldi	r26, 0x00	; 0
    407a:	b0 e0       	ldi	r27, 0x00	; 0
    407c:	e2 e4       	ldi	r30, 0x42	; 66
    407e:	f0 e2       	ldi	r31, 0x20	; 32
    4080:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    4084:	6f ef       	ldi	r22, 0xFF	; 255
    4086:	7f ef       	ldi	r23, 0xFF	; 255
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	93 df       	rcall	.-218    	; 0x3fb4 <_Z41__static_initialization_and_destruction_0ii>
    408e:	e2 e0       	ldi	r30, 0x02	; 2
    4090:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00004094 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4094:	a6 e0       	ldi	r26, 0x06	; 6
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	e0 e5       	ldi	r30, 0x50	; 80
    409a:	f0 e2       	ldi	r31, 0x20	; 32
    409c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
    40a4:	4b 83       	std	Y+3, r20	; 0x03
    40a6:	5c 83       	std	Y+4, r21	; 0x04
    40a8:	6d 83       	std	Y+5, r22	; 0x05
    40aa:	7e 83       	std	Y+6, r23	; 0x06
    40ac:	8b 81       	ldd	r24, Y+3	; 0x03
    40ae:	9c 81       	ldd	r25, Y+4	; 0x04
    40b0:	ad 81       	ldd	r26, Y+5	; 0x05
    40b2:	be 81       	ldd	r27, Y+6	; 0x06
    40b4:	e9 81       	ldd	r30, Y+1	; 0x01
    40b6:	fa 81       	ldd	r31, Y+2	; 0x02
    40b8:	26 e0       	ldi	r18, 0x06	; 6
    40ba:	ac 01       	movw	r20, r24
    40bc:	bd 01       	movw	r22, r26
    40be:	cf 01       	movw	r24, r30
    40c0:	30 d3       	rcall	.+1632   	; 0x4722 <_ZN14HardwareSerial5beginEmh>
    40c2:	26 96       	adiw	r28, 0x06	; 6
    40c4:	e2 e0       	ldi	r30, 0x02	; 2
    40c6:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000040ca <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    40ca:	a2 e0       	ldi	r26, 0x02	; 2
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	eb e6       	ldi	r30, 0x6B	; 107
    40d0:	f0 e2       	ldi	r31, 0x20	; 32
    40d2:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	22 96       	adiw	r28, 0x02	; 2
    40de:	e2 e0       	ldi	r30, 0x02	; 2
    40e0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000040e4 <setup>:

SimpleTimer _asyncTimer;

void AsyncDoWork();

void setup(void) {
    40e4:	a0 e0       	ldi	r26, 0x00	; 0
    40e6:	b0 e0       	ldi	r27, 0x00	; 0
    40e8:	e8 e7       	ldi	r30, 0x78	; 120
    40ea:	f0 e2       	ldi	r31, 0x20	; 32
    40ec:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    WaterSensorWire::Setup();
    40f0:	7f dc       	rcall	.-1794   	; 0x39f0 <_ZN15WaterSensorWire5SetupEv>

    // Listen on serial connection for messages from the pc
    Serial.begin(9600);
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	55 e2       	ldi	r21, 0x25	; 37
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	70 e0       	ldi	r23, 0x00	; 0
    40fa:	87 e6       	ldi	r24, 0x67	; 103
    40fc:	95 e0       	ldi	r25, 0x05	; 5
    40fe:	ca df       	rcall	.-108    	; 0x4094 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4100:	00 00       	nop
    4102:	87 e6       	ldi	r24, 0x67	; 103
    4104:	95 e0       	ldi	r25, 0x05	; 5
    4106:	e1 df       	rcall	.-62     	; 0x40ca <_ZN14HardwareSerialcvbEv>
    4108:	98 2f       	mov	r25, r24
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	89 27       	eor	r24, r25
    410e:	88 23       	and	r24, r24
    4110:	c1 f7       	brne	.-16     	; 0x4102 <setup+0x1e>

    _asyncTimer.setInterval(1000, AsyncDoWork);
    4112:	2a ea       	ldi	r18, 0xAA	; 170
    4114:	30 e2       	ldi	r19, 0x20	; 32
    4116:	48 ee       	ldi	r20, 0xE8	; 232
    4118:	53 e0       	ldi	r21, 0x03	; 3
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	89 eb       	ldi	r24, 0xB9	; 185
    4120:	94 e0       	ldi	r25, 0x04	; 4
    4122:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    4126:	e2 e0       	ldi	r30, 0x02	; 2
    4128:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

0000412c <loop>:

void loop(void) {
    412c:	a0 e0       	ldi	r26, 0x00	; 0
    412e:	b0 e0       	ldi	r27, 0x00	; 0
    4130:	ec e9       	ldi	r30, 0x9C	; 156
    4132:	f0 e2       	ldi	r31, 0x20	; 32
    4134:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>

    _asyncTimer.run();
    4138:	89 eb       	ldi	r24, 0xB9	; 185
    413a:	94 e0       	ldi	r25, 0x04	; 4
    413c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN11SimpleTimer3runEv>

    Globals::ThePHSensor.PrintPHToLCD();
    4140:	81 e6       	ldi	r24, 0x61	; 97
    4142:	93 e0       	ldi	r25, 0x03	; 3
    4144:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN8PHSensor12PrintPHToLCDEv>
    Globals::TheTDSSensor.PrintTDSToLCD();
    4148:	83 e2       	ldi	r24, 0x23	; 35
    414a:	94 e0       	ldi	r25, 0x04	; 4
    414c:	8a d8       	rcall	.-3820   	; 0x3262 <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    414e:	e2 e0       	ldi	r30, 0x02	; 2
    4150:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00004154 <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4154:	a0 e0       	ldi	r26, 0x00	; 0
    4156:	b0 e0       	ldi	r27, 0x00	; 0
    4158:	e0 eb       	ldi	r30, 0xB0	; 176
    415a:	f0 e2       	ldi	r31, 0x20	; 32
    415c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    Globals::ThePHSensor.CalculatePH();
    4160:	81 e6       	ldi	r24, 0x61	; 97
    4162:	93 e0       	ldi	r25, 0x03	; 3
    4164:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN8PHSensor11CalculatePHEv>
    Globals::TheTDSSensor.CalculateTDS();
    4168:	83 e2       	ldi	r24, 0x23	; 35
    416a:	94 e0       	ldi	r25, 0x04	; 4
    416c:	2f d9       	rcall	.-3490   	; 0x33cc <_ZN9TDSSensor12CalculateTDSEv>
}
    416e:	e2 e0       	ldi	r30, 0x02	; 2
    4170:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

00004174 <_Z41__static_initialization_and_destruction_0ii>:
    4174:	a4 e0       	ldi	r26, 0x04	; 4
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e0 ec       	ldi	r30, 0xC0	; 192
    417a:	f0 e2       	ldi	r31, 0x20	; 32
    417c:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    4180:	9a 83       	std	Y+2, r25	; 0x02
    4182:	89 83       	std	Y+1, r24	; 0x01
    4184:	7c 83       	std	Y+4, r23	; 0x04
    4186:	6b 83       	std	Y+3, r22	; 0x03
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	9a 81       	ldd	r25, Y+2	; 0x02
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	41 f4       	brne	.+16     	; 0x41a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    4190:	8b 81       	ldd	r24, Y+3	; 0x03
    4192:	9c 81       	ldd	r25, Y+4	; 0x04
    4194:	01 96       	adiw	r24, 0x01	; 1
    4196:	21 f4       	brne	.+8      	; 0x41a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "_globalsWaterSensors.h"
#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    4198:	89 eb       	ldi	r24, 0xB9	; 185
    419a:	94 e0       	ldi	r25, 0x04	; 4
    419c:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN11SimpleTimerC1Ev>
}

void AsyncDoWork() {
    Globals::ThePHSensor.CalculatePH();
    Globals::TheTDSSensor.CalculateTDS();
}
    41a0:	24 96       	adiw	r28, 0x04	; 4
    41a2:	e2 e0       	ldi	r30, 0x02	; 2
    41a4:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000041a8 <_GLOBAL__sub_I__asyncTimer>:
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	ea ed       	ldi	r30, 0xDA	; 218
    41ae:	f0 e2       	ldi	r31, 0x20	; 32
    41b0:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__prologue_saves__+0x20>
    41b4:	6f ef       	ldi	r22, 0xFF	; 255
    41b6:	7f ef       	ldi	r23, 0xFF	; 255
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	db df       	rcall	.-74     	; 0x4174 <_Z41__static_initialization_and_destruction_0ii>
    41be:	e2 e0       	ldi	r30, 0x02	; 2
    41c0:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__epilogue_restores__+0x20>

000041c4 <__subsf3>:
    41c4:	50 58       	subi	r21, 0x80	; 128

000041c6 <__addsf3>:
    41c6:	bb 27       	eor	r27, r27
    41c8:	aa 27       	eor	r26, r26
    41ca:	0e d0       	rcall	.+28     	; 0x41e8 <__addsf3x>
    41cc:	44 c1       	rjmp	.+648    	; 0x4456 <__fp_round>
    41ce:	35 d1       	rcall	.+618    	; 0x443a <__fp_pscA>
    41d0:	30 f0       	brcs	.+12     	; 0x41de <__addsf3+0x18>
    41d2:	3a d1       	rcall	.+628    	; 0x4448 <__fp_pscB>
    41d4:	20 f0       	brcs	.+8      	; 0x41de <__addsf3+0x18>
    41d6:	31 f4       	brne	.+12     	; 0x41e4 <__addsf3+0x1e>
    41d8:	9f 3f       	cpi	r25, 0xFF	; 255
    41da:	11 f4       	brne	.+4      	; 0x41e0 <__addsf3+0x1a>
    41dc:	1e f4       	brtc	.+6      	; 0x41e4 <__addsf3+0x1e>
    41de:	2a c1       	rjmp	.+596    	; 0x4434 <__fp_nan>
    41e0:	0e f4       	brtc	.+2      	; 0x41e4 <__addsf3+0x1e>
    41e2:	e0 95       	com	r30
    41e4:	e7 fb       	bst	r30, 7
    41e6:	20 c1       	rjmp	.+576    	; 0x4428 <__fp_inf>

000041e8 <__addsf3x>:
    41e8:	e9 2f       	mov	r30, r25
    41ea:	46 d1       	rcall	.+652    	; 0x4478 <__fp_split3>
    41ec:	80 f3       	brcs	.-32     	; 0x41ce <__addsf3+0x8>
    41ee:	ba 17       	cp	r27, r26
    41f0:	62 07       	cpc	r22, r18
    41f2:	73 07       	cpc	r23, r19
    41f4:	84 07       	cpc	r24, r20
    41f6:	95 07       	cpc	r25, r21
    41f8:	18 f0       	brcs	.+6      	; 0x4200 <__addsf3x+0x18>
    41fa:	71 f4       	brne	.+28     	; 0x4218 <__addsf3x+0x30>
    41fc:	9e f5       	brtc	.+102    	; 0x4264 <__addsf3x+0x7c>
    41fe:	5e c1       	rjmp	.+700    	; 0x44bc <__fp_zero>
    4200:	0e f4       	brtc	.+2      	; 0x4204 <__addsf3x+0x1c>
    4202:	e0 95       	com	r30
    4204:	0b 2e       	mov	r0, r27
    4206:	ba 2f       	mov	r27, r26
    4208:	a0 2d       	mov	r26, r0
    420a:	0b 01       	movw	r0, r22
    420c:	b9 01       	movw	r22, r18
    420e:	90 01       	movw	r18, r0
    4210:	0c 01       	movw	r0, r24
    4212:	ca 01       	movw	r24, r20
    4214:	a0 01       	movw	r20, r0
    4216:	11 24       	eor	r1, r1
    4218:	ff 27       	eor	r31, r31
    421a:	59 1b       	sub	r21, r25
    421c:	99 f0       	breq	.+38     	; 0x4244 <__addsf3x+0x5c>
    421e:	59 3f       	cpi	r21, 0xF9	; 249
    4220:	50 f4       	brcc	.+20     	; 0x4236 <__addsf3x+0x4e>
    4222:	50 3e       	cpi	r21, 0xE0	; 224
    4224:	68 f1       	brcs	.+90     	; 0x4280 <__addsf3x+0x98>
    4226:	1a 16       	cp	r1, r26
    4228:	f0 40       	sbci	r31, 0x00	; 0
    422a:	a2 2f       	mov	r26, r18
    422c:	23 2f       	mov	r18, r19
    422e:	34 2f       	mov	r19, r20
    4230:	44 27       	eor	r20, r20
    4232:	58 5f       	subi	r21, 0xF8	; 248
    4234:	f3 cf       	rjmp	.-26     	; 0x421c <__addsf3x+0x34>
    4236:	46 95       	lsr	r20
    4238:	37 95       	ror	r19
    423a:	27 95       	ror	r18
    423c:	a7 95       	ror	r26
    423e:	f0 40       	sbci	r31, 0x00	; 0
    4240:	53 95       	inc	r21
    4242:	c9 f7       	brne	.-14     	; 0x4236 <__addsf3x+0x4e>
    4244:	7e f4       	brtc	.+30     	; 0x4264 <__addsf3x+0x7c>
    4246:	1f 16       	cp	r1, r31
    4248:	ba 0b       	sbc	r27, r26
    424a:	62 0b       	sbc	r22, r18
    424c:	73 0b       	sbc	r23, r19
    424e:	84 0b       	sbc	r24, r20
    4250:	ba f0       	brmi	.+46     	; 0x4280 <__addsf3x+0x98>
    4252:	91 50       	subi	r25, 0x01	; 1
    4254:	a1 f0       	breq	.+40     	; 0x427e <__addsf3x+0x96>
    4256:	ff 0f       	add	r31, r31
    4258:	bb 1f       	adc	r27, r27
    425a:	66 1f       	adc	r22, r22
    425c:	77 1f       	adc	r23, r23
    425e:	88 1f       	adc	r24, r24
    4260:	c2 f7       	brpl	.-16     	; 0x4252 <__addsf3x+0x6a>
    4262:	0e c0       	rjmp	.+28     	; 0x4280 <__addsf3x+0x98>
    4264:	ba 0f       	add	r27, r26
    4266:	62 1f       	adc	r22, r18
    4268:	73 1f       	adc	r23, r19
    426a:	84 1f       	adc	r24, r20
    426c:	48 f4       	brcc	.+18     	; 0x4280 <__addsf3x+0x98>
    426e:	87 95       	ror	r24
    4270:	77 95       	ror	r23
    4272:	67 95       	ror	r22
    4274:	b7 95       	ror	r27
    4276:	f7 95       	ror	r31
    4278:	9e 3f       	cpi	r25, 0xFE	; 254
    427a:	08 f0       	brcs	.+2      	; 0x427e <__addsf3x+0x96>
    427c:	b3 cf       	rjmp	.-154    	; 0x41e4 <__addsf3+0x1e>
    427e:	93 95       	inc	r25
    4280:	88 0f       	add	r24, r24
    4282:	08 f0       	brcs	.+2      	; 0x4286 <__addsf3x+0x9e>
    4284:	99 27       	eor	r25, r25
    4286:	ee 0f       	add	r30, r30
    4288:	97 95       	ror	r25
    428a:	87 95       	ror	r24
    428c:	08 95       	ret

0000428e <__cmpsf2>:
    428e:	a8 d0       	rcall	.+336    	; 0x43e0 <__fp_cmp>
    4290:	08 f4       	brcc	.+2      	; 0x4294 <__cmpsf2+0x6>
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	08 95       	ret

00004296 <__divsf3>:
    4296:	0c d0       	rcall	.+24     	; 0x42b0 <__divsf3x>
    4298:	de c0       	rjmp	.+444    	; 0x4456 <__fp_round>
    429a:	d6 d0       	rcall	.+428    	; 0x4448 <__fp_pscB>
    429c:	40 f0       	brcs	.+16     	; 0x42ae <__divsf3+0x18>
    429e:	cd d0       	rcall	.+410    	; 0x443a <__fp_pscA>
    42a0:	30 f0       	brcs	.+12     	; 0x42ae <__divsf3+0x18>
    42a2:	21 f4       	brne	.+8      	; 0x42ac <__divsf3+0x16>
    42a4:	5f 3f       	cpi	r21, 0xFF	; 255
    42a6:	19 f0       	breq	.+6      	; 0x42ae <__divsf3+0x18>
    42a8:	bf c0       	rjmp	.+382    	; 0x4428 <__fp_inf>
    42aa:	51 11       	cpse	r21, r1
    42ac:	08 c1       	rjmp	.+528    	; 0x44be <__fp_szero>
    42ae:	c2 c0       	rjmp	.+388    	; 0x4434 <__fp_nan>

000042b0 <__divsf3x>:
    42b0:	e3 d0       	rcall	.+454    	; 0x4478 <__fp_split3>
    42b2:	98 f3       	brcs	.-26     	; 0x429a <__divsf3+0x4>

000042b4 <__divsf3_pse>:
    42b4:	99 23       	and	r25, r25
    42b6:	c9 f3       	breq	.-14     	; 0x42aa <__divsf3+0x14>
    42b8:	55 23       	and	r21, r21
    42ba:	b1 f3       	breq	.-20     	; 0x42a8 <__divsf3+0x12>
    42bc:	95 1b       	sub	r25, r21
    42be:	55 0b       	sbc	r21, r21
    42c0:	bb 27       	eor	r27, r27
    42c2:	aa 27       	eor	r26, r26
    42c4:	62 17       	cp	r22, r18
    42c6:	73 07       	cpc	r23, r19
    42c8:	84 07       	cpc	r24, r20
    42ca:	38 f0       	brcs	.+14     	; 0x42da <__divsf3_pse+0x26>
    42cc:	9f 5f       	subi	r25, 0xFF	; 255
    42ce:	5f 4f       	sbci	r21, 0xFF	; 255
    42d0:	22 0f       	add	r18, r18
    42d2:	33 1f       	adc	r19, r19
    42d4:	44 1f       	adc	r20, r20
    42d6:	aa 1f       	adc	r26, r26
    42d8:	a9 f3       	breq	.-22     	; 0x42c4 <__divsf3_pse+0x10>
    42da:	33 d0       	rcall	.+102    	; 0x4342 <__divsf3_pse+0x8e>
    42dc:	0e 2e       	mov	r0, r30
    42de:	3a f0       	brmi	.+14     	; 0x42ee <__divsf3_pse+0x3a>
    42e0:	e0 e8       	ldi	r30, 0x80	; 128
    42e2:	30 d0       	rcall	.+96     	; 0x4344 <__divsf3_pse+0x90>
    42e4:	91 50       	subi	r25, 0x01	; 1
    42e6:	50 40       	sbci	r21, 0x00	; 0
    42e8:	e6 95       	lsr	r30
    42ea:	00 1c       	adc	r0, r0
    42ec:	ca f7       	brpl	.-14     	; 0x42e0 <__divsf3_pse+0x2c>
    42ee:	29 d0       	rcall	.+82     	; 0x4342 <__divsf3_pse+0x8e>
    42f0:	fe 2f       	mov	r31, r30
    42f2:	27 d0       	rcall	.+78     	; 0x4342 <__divsf3_pse+0x8e>
    42f4:	66 0f       	add	r22, r22
    42f6:	77 1f       	adc	r23, r23
    42f8:	88 1f       	adc	r24, r24
    42fa:	bb 1f       	adc	r27, r27
    42fc:	26 17       	cp	r18, r22
    42fe:	37 07       	cpc	r19, r23
    4300:	48 07       	cpc	r20, r24
    4302:	ab 07       	cpc	r26, r27
    4304:	b0 e8       	ldi	r27, 0x80	; 128
    4306:	09 f0       	breq	.+2      	; 0x430a <__divsf3_pse+0x56>
    4308:	bb 0b       	sbc	r27, r27
    430a:	80 2d       	mov	r24, r0
    430c:	bf 01       	movw	r22, r30
    430e:	ff 27       	eor	r31, r31
    4310:	93 58       	subi	r25, 0x83	; 131
    4312:	5f 4f       	sbci	r21, 0xFF	; 255
    4314:	2a f0       	brmi	.+10     	; 0x4320 <__divsf3_pse+0x6c>
    4316:	9e 3f       	cpi	r25, 0xFE	; 254
    4318:	51 05       	cpc	r21, r1
    431a:	68 f0       	brcs	.+26     	; 0x4336 <__divsf3_pse+0x82>
    431c:	85 c0       	rjmp	.+266    	; 0x4428 <__fp_inf>
    431e:	cf c0       	rjmp	.+414    	; 0x44be <__fp_szero>
    4320:	5f 3f       	cpi	r21, 0xFF	; 255
    4322:	ec f3       	brlt	.-6      	; 0x431e <__divsf3_pse+0x6a>
    4324:	98 3e       	cpi	r25, 0xE8	; 232
    4326:	dc f3       	brlt	.-10     	; 0x431e <__divsf3_pse+0x6a>
    4328:	86 95       	lsr	r24
    432a:	77 95       	ror	r23
    432c:	67 95       	ror	r22
    432e:	b7 95       	ror	r27
    4330:	f7 95       	ror	r31
    4332:	9f 5f       	subi	r25, 0xFF	; 255
    4334:	c9 f7       	brne	.-14     	; 0x4328 <__divsf3_pse+0x74>
    4336:	88 0f       	add	r24, r24
    4338:	91 1d       	adc	r25, r1
    433a:	96 95       	lsr	r25
    433c:	87 95       	ror	r24
    433e:	97 f9       	bld	r25, 7
    4340:	08 95       	ret
    4342:	e1 e0       	ldi	r30, 0x01	; 1
    4344:	66 0f       	add	r22, r22
    4346:	77 1f       	adc	r23, r23
    4348:	88 1f       	adc	r24, r24
    434a:	bb 1f       	adc	r27, r27
    434c:	62 17       	cp	r22, r18
    434e:	73 07       	cpc	r23, r19
    4350:	84 07       	cpc	r24, r20
    4352:	ba 07       	cpc	r27, r26
    4354:	20 f0       	brcs	.+8      	; 0x435e <__divsf3_pse+0xaa>
    4356:	62 1b       	sub	r22, r18
    4358:	73 0b       	sbc	r23, r19
    435a:	84 0b       	sbc	r24, r20
    435c:	ba 0b       	sbc	r27, r26
    435e:	ee 1f       	adc	r30, r30
    4360:	88 f7       	brcc	.-30     	; 0x4344 <__divsf3_pse+0x90>
    4362:	e0 95       	com	r30
    4364:	08 95       	ret

00004366 <__floatunsisf>:
    4366:	e8 94       	clt
    4368:	09 c0       	rjmp	.+18     	; 0x437c <__floatsisf+0x12>

0000436a <__floatsisf>:
    436a:	97 fb       	bst	r25, 7
    436c:	3e f4       	brtc	.+14     	; 0x437c <__floatsisf+0x12>
    436e:	90 95       	com	r25
    4370:	80 95       	com	r24
    4372:	70 95       	com	r23
    4374:	61 95       	neg	r22
    4376:	7f 4f       	sbci	r23, 0xFF	; 255
    4378:	8f 4f       	sbci	r24, 0xFF	; 255
    437a:	9f 4f       	sbci	r25, 0xFF	; 255
    437c:	99 23       	and	r25, r25
    437e:	a9 f0       	breq	.+42     	; 0x43aa <__floatsisf+0x40>
    4380:	f9 2f       	mov	r31, r25
    4382:	96 e9       	ldi	r25, 0x96	; 150
    4384:	bb 27       	eor	r27, r27
    4386:	93 95       	inc	r25
    4388:	f6 95       	lsr	r31
    438a:	87 95       	ror	r24
    438c:	77 95       	ror	r23
    438e:	67 95       	ror	r22
    4390:	b7 95       	ror	r27
    4392:	f1 11       	cpse	r31, r1
    4394:	f8 cf       	rjmp	.-16     	; 0x4386 <__floatsisf+0x1c>
    4396:	fa f4       	brpl	.+62     	; 0x43d6 <__floatsisf+0x6c>
    4398:	bb 0f       	add	r27, r27
    439a:	11 f4       	brne	.+4      	; 0x43a0 <__floatsisf+0x36>
    439c:	60 ff       	sbrs	r22, 0
    439e:	1b c0       	rjmp	.+54     	; 0x43d6 <__floatsisf+0x6c>
    43a0:	6f 5f       	subi	r22, 0xFF	; 255
    43a2:	7f 4f       	sbci	r23, 0xFF	; 255
    43a4:	8f 4f       	sbci	r24, 0xFF	; 255
    43a6:	9f 4f       	sbci	r25, 0xFF	; 255
    43a8:	16 c0       	rjmp	.+44     	; 0x43d6 <__floatsisf+0x6c>
    43aa:	88 23       	and	r24, r24
    43ac:	11 f0       	breq	.+4      	; 0x43b2 <__floatsisf+0x48>
    43ae:	96 e9       	ldi	r25, 0x96	; 150
    43b0:	11 c0       	rjmp	.+34     	; 0x43d4 <__floatsisf+0x6a>
    43b2:	77 23       	and	r23, r23
    43b4:	21 f0       	breq	.+8      	; 0x43be <__floatsisf+0x54>
    43b6:	9e e8       	ldi	r25, 0x8E	; 142
    43b8:	87 2f       	mov	r24, r23
    43ba:	76 2f       	mov	r23, r22
    43bc:	05 c0       	rjmp	.+10     	; 0x43c8 <__floatsisf+0x5e>
    43be:	66 23       	and	r22, r22
    43c0:	71 f0       	breq	.+28     	; 0x43de <__floatsisf+0x74>
    43c2:	96 e8       	ldi	r25, 0x86	; 134
    43c4:	86 2f       	mov	r24, r22
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	2a f0       	brmi	.+10     	; 0x43d6 <__floatsisf+0x6c>
    43cc:	9a 95       	dec	r25
    43ce:	66 0f       	add	r22, r22
    43d0:	77 1f       	adc	r23, r23
    43d2:	88 1f       	adc	r24, r24
    43d4:	da f7       	brpl	.-10     	; 0x43cc <__floatsisf+0x62>
    43d6:	88 0f       	add	r24, r24
    43d8:	96 95       	lsr	r25
    43da:	87 95       	ror	r24
    43dc:	97 f9       	bld	r25, 7
    43de:	08 95       	ret

000043e0 <__fp_cmp>:
    43e0:	99 0f       	add	r25, r25
    43e2:	00 08       	sbc	r0, r0
    43e4:	55 0f       	add	r21, r21
    43e6:	aa 0b       	sbc	r26, r26
    43e8:	e0 e8       	ldi	r30, 0x80	; 128
    43ea:	fe ef       	ldi	r31, 0xFE	; 254
    43ec:	16 16       	cp	r1, r22
    43ee:	17 06       	cpc	r1, r23
    43f0:	e8 07       	cpc	r30, r24
    43f2:	f9 07       	cpc	r31, r25
    43f4:	c0 f0       	brcs	.+48     	; 0x4426 <__fp_cmp+0x46>
    43f6:	12 16       	cp	r1, r18
    43f8:	13 06       	cpc	r1, r19
    43fa:	e4 07       	cpc	r30, r20
    43fc:	f5 07       	cpc	r31, r21
    43fe:	98 f0       	brcs	.+38     	; 0x4426 <__fp_cmp+0x46>
    4400:	62 1b       	sub	r22, r18
    4402:	73 0b       	sbc	r23, r19
    4404:	84 0b       	sbc	r24, r20
    4406:	95 0b       	sbc	r25, r21
    4408:	39 f4       	brne	.+14     	; 0x4418 <__fp_cmp+0x38>
    440a:	0a 26       	eor	r0, r26
    440c:	61 f0       	breq	.+24     	; 0x4426 <__fp_cmp+0x46>
    440e:	23 2b       	or	r18, r19
    4410:	24 2b       	or	r18, r20
    4412:	25 2b       	or	r18, r21
    4414:	21 f4       	brne	.+8      	; 0x441e <__fp_cmp+0x3e>
    4416:	08 95       	ret
    4418:	0a 26       	eor	r0, r26
    441a:	09 f4       	brne	.+2      	; 0x441e <__fp_cmp+0x3e>
    441c:	a1 40       	sbci	r26, 0x01	; 1
    441e:	a6 95       	lsr	r26
    4420:	8f ef       	ldi	r24, 0xFF	; 255
    4422:	81 1d       	adc	r24, r1
    4424:	81 1d       	adc	r24, r1
    4426:	08 95       	ret

00004428 <__fp_inf>:
    4428:	97 f9       	bld	r25, 7
    442a:	9f 67       	ori	r25, 0x7F	; 127
    442c:	80 e8       	ldi	r24, 0x80	; 128
    442e:	70 e0       	ldi	r23, 0x00	; 0
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	08 95       	ret

00004434 <__fp_nan>:
    4434:	9f ef       	ldi	r25, 0xFF	; 255
    4436:	80 ec       	ldi	r24, 0xC0	; 192
    4438:	08 95       	ret

0000443a <__fp_pscA>:
    443a:	00 24       	eor	r0, r0
    443c:	0a 94       	dec	r0
    443e:	16 16       	cp	r1, r22
    4440:	17 06       	cpc	r1, r23
    4442:	18 06       	cpc	r1, r24
    4444:	09 06       	cpc	r0, r25
    4446:	08 95       	ret

00004448 <__fp_pscB>:
    4448:	00 24       	eor	r0, r0
    444a:	0a 94       	dec	r0
    444c:	12 16       	cp	r1, r18
    444e:	13 06       	cpc	r1, r19
    4450:	14 06       	cpc	r1, r20
    4452:	05 06       	cpc	r0, r21
    4454:	08 95       	ret

00004456 <__fp_round>:
    4456:	09 2e       	mov	r0, r25
    4458:	03 94       	inc	r0
    445a:	00 0c       	add	r0, r0
    445c:	11 f4       	brne	.+4      	; 0x4462 <__fp_round+0xc>
    445e:	88 23       	and	r24, r24
    4460:	52 f0       	brmi	.+20     	; 0x4476 <__fp_round+0x20>
    4462:	bb 0f       	add	r27, r27
    4464:	40 f4       	brcc	.+16     	; 0x4476 <__fp_round+0x20>
    4466:	bf 2b       	or	r27, r31
    4468:	11 f4       	brne	.+4      	; 0x446e <__fp_round+0x18>
    446a:	60 ff       	sbrs	r22, 0
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <__fp_round+0x20>
    446e:	6f 5f       	subi	r22, 0xFF	; 255
    4470:	7f 4f       	sbci	r23, 0xFF	; 255
    4472:	8f 4f       	sbci	r24, 0xFF	; 255
    4474:	9f 4f       	sbci	r25, 0xFF	; 255
    4476:	08 95       	ret

00004478 <__fp_split3>:
    4478:	57 fd       	sbrc	r21, 7
    447a:	90 58       	subi	r25, 0x80	; 128
    447c:	44 0f       	add	r20, r20
    447e:	55 1f       	adc	r21, r21
    4480:	59 f0       	breq	.+22     	; 0x4498 <__fp_splitA+0x10>
    4482:	5f 3f       	cpi	r21, 0xFF	; 255
    4484:	71 f0       	breq	.+28     	; 0x44a2 <__fp_splitA+0x1a>
    4486:	47 95       	ror	r20

00004488 <__fp_splitA>:
    4488:	88 0f       	add	r24, r24
    448a:	97 fb       	bst	r25, 7
    448c:	99 1f       	adc	r25, r25
    448e:	61 f0       	breq	.+24     	; 0x44a8 <__fp_splitA+0x20>
    4490:	9f 3f       	cpi	r25, 0xFF	; 255
    4492:	79 f0       	breq	.+30     	; 0x44b2 <__fp_splitA+0x2a>
    4494:	87 95       	ror	r24
    4496:	08 95       	ret
    4498:	12 16       	cp	r1, r18
    449a:	13 06       	cpc	r1, r19
    449c:	14 06       	cpc	r1, r20
    449e:	55 1f       	adc	r21, r21
    44a0:	f2 cf       	rjmp	.-28     	; 0x4486 <__fp_split3+0xe>
    44a2:	46 95       	lsr	r20
    44a4:	f1 df       	rcall	.-30     	; 0x4488 <__fp_splitA>
    44a6:	08 c0       	rjmp	.+16     	; 0x44b8 <__fp_splitA+0x30>
    44a8:	16 16       	cp	r1, r22
    44aa:	17 06       	cpc	r1, r23
    44ac:	18 06       	cpc	r1, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	f1 cf       	rjmp	.-30     	; 0x4494 <__fp_splitA+0xc>
    44b2:	86 95       	lsr	r24
    44b4:	71 05       	cpc	r23, r1
    44b6:	61 05       	cpc	r22, r1
    44b8:	08 94       	sec
    44ba:	08 95       	ret

000044bc <__fp_zero>:
    44bc:	e8 94       	clt

000044be <__fp_szero>:
    44be:	bb 27       	eor	r27, r27
    44c0:	66 27       	eor	r22, r22
    44c2:	77 27       	eor	r23, r23
    44c4:	cb 01       	movw	r24, r22
    44c6:	97 f9       	bld	r25, 7
    44c8:	08 95       	ret

000044ca <__mulsf3>:
    44ca:	0b d0       	rcall	.+22     	; 0x44e2 <__mulsf3x>
    44cc:	c4 cf       	rjmp	.-120    	; 0x4456 <__fp_round>
    44ce:	b5 df       	rcall	.-150    	; 0x443a <__fp_pscA>
    44d0:	28 f0       	brcs	.+10     	; 0x44dc <__mulsf3+0x12>
    44d2:	ba df       	rcall	.-140    	; 0x4448 <__fp_pscB>
    44d4:	18 f0       	brcs	.+6      	; 0x44dc <__mulsf3+0x12>
    44d6:	95 23       	and	r25, r21
    44d8:	09 f0       	breq	.+2      	; 0x44dc <__mulsf3+0x12>
    44da:	a6 cf       	rjmp	.-180    	; 0x4428 <__fp_inf>
    44dc:	ab cf       	rjmp	.-170    	; 0x4434 <__fp_nan>
    44de:	11 24       	eor	r1, r1
    44e0:	ee cf       	rjmp	.-36     	; 0x44be <__fp_szero>

000044e2 <__mulsf3x>:
    44e2:	ca df       	rcall	.-108    	; 0x4478 <__fp_split3>
    44e4:	a0 f3       	brcs	.-24     	; 0x44ce <__mulsf3+0x4>

000044e6 <__mulsf3_pse>:
    44e6:	95 9f       	mul	r25, r21
    44e8:	d1 f3       	breq	.-12     	; 0x44de <__mulsf3+0x14>
    44ea:	95 0f       	add	r25, r21
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	55 1f       	adc	r21, r21
    44f0:	62 9f       	mul	r22, r18
    44f2:	f0 01       	movw	r30, r0
    44f4:	72 9f       	mul	r23, r18
    44f6:	bb 27       	eor	r27, r27
    44f8:	f0 0d       	add	r31, r0
    44fa:	b1 1d       	adc	r27, r1
    44fc:	63 9f       	mul	r22, r19
    44fe:	aa 27       	eor	r26, r26
    4500:	f0 0d       	add	r31, r0
    4502:	b1 1d       	adc	r27, r1
    4504:	aa 1f       	adc	r26, r26
    4506:	64 9f       	mul	r22, r20
    4508:	66 27       	eor	r22, r22
    450a:	b0 0d       	add	r27, r0
    450c:	a1 1d       	adc	r26, r1
    450e:	66 1f       	adc	r22, r22
    4510:	82 9f       	mul	r24, r18
    4512:	22 27       	eor	r18, r18
    4514:	b0 0d       	add	r27, r0
    4516:	a1 1d       	adc	r26, r1
    4518:	62 1f       	adc	r22, r18
    451a:	73 9f       	mul	r23, r19
    451c:	b0 0d       	add	r27, r0
    451e:	a1 1d       	adc	r26, r1
    4520:	62 1f       	adc	r22, r18
    4522:	83 9f       	mul	r24, r19
    4524:	a0 0d       	add	r26, r0
    4526:	61 1d       	adc	r22, r1
    4528:	22 1f       	adc	r18, r18
    452a:	74 9f       	mul	r23, r20
    452c:	33 27       	eor	r19, r19
    452e:	a0 0d       	add	r26, r0
    4530:	61 1d       	adc	r22, r1
    4532:	23 1f       	adc	r18, r19
    4534:	84 9f       	mul	r24, r20
    4536:	60 0d       	add	r22, r0
    4538:	21 1d       	adc	r18, r1
    453a:	82 2f       	mov	r24, r18
    453c:	76 2f       	mov	r23, r22
    453e:	6a 2f       	mov	r22, r26
    4540:	11 24       	eor	r1, r1
    4542:	9f 57       	subi	r25, 0x7F	; 127
    4544:	50 40       	sbci	r21, 0x00	; 0
    4546:	8a f0       	brmi	.+34     	; 0x456a <__mulsf3_pse+0x84>
    4548:	e1 f0       	breq	.+56     	; 0x4582 <__mulsf3_pse+0x9c>
    454a:	88 23       	and	r24, r24
    454c:	4a f0       	brmi	.+18     	; 0x4560 <__mulsf3_pse+0x7a>
    454e:	ee 0f       	add	r30, r30
    4550:	ff 1f       	adc	r31, r31
    4552:	bb 1f       	adc	r27, r27
    4554:	66 1f       	adc	r22, r22
    4556:	77 1f       	adc	r23, r23
    4558:	88 1f       	adc	r24, r24
    455a:	91 50       	subi	r25, 0x01	; 1
    455c:	50 40       	sbci	r21, 0x00	; 0
    455e:	a9 f7       	brne	.-22     	; 0x454a <__mulsf3_pse+0x64>
    4560:	9e 3f       	cpi	r25, 0xFE	; 254
    4562:	51 05       	cpc	r21, r1
    4564:	70 f0       	brcs	.+28     	; 0x4582 <__mulsf3_pse+0x9c>
    4566:	60 cf       	rjmp	.-320    	; 0x4428 <__fp_inf>
    4568:	aa cf       	rjmp	.-172    	; 0x44be <__fp_szero>
    456a:	5f 3f       	cpi	r21, 0xFF	; 255
    456c:	ec f3       	brlt	.-6      	; 0x4568 <__mulsf3_pse+0x82>
    456e:	98 3e       	cpi	r25, 0xE8	; 232
    4570:	dc f3       	brlt	.-10     	; 0x4568 <__mulsf3_pse+0x82>
    4572:	86 95       	lsr	r24
    4574:	77 95       	ror	r23
    4576:	67 95       	ror	r22
    4578:	b7 95       	ror	r27
    457a:	f7 95       	ror	r31
    457c:	e7 95       	ror	r30
    457e:	9f 5f       	subi	r25, 0xFF	; 255
    4580:	c1 f7       	brne	.-16     	; 0x4572 <__mulsf3_pse+0x8c>
    4582:	fe 2b       	or	r31, r30
    4584:	88 0f       	add	r24, r24
    4586:	91 1d       	adc	r25, r1
    4588:	96 95       	lsr	r25
    458a:	87 95       	ror	r24
    458c:	97 f9       	bld	r25, 7
    458e:	08 95       	ret

00004590 <__unordsf2>:
    4590:	27 df       	rcall	.-434    	; 0x43e0 <__fp_cmp>
    4592:	88 0b       	sbc	r24, r24
    4594:	99 0b       	sbc	r25, r25
    4596:	08 95       	ret

00004598 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4598:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <abort>

0000459c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    459c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    459e:	91 8d       	ldd	r25, Z+25	; 0x19
    45a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    45a2:	89 2f       	mov	r24, r25
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	80 5c       	subi	r24, 0xC0	; 192
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	82 1b       	sub	r24, r18
    45ac:	91 09       	sbc	r25, r1
}
    45ae:	8f 73       	andi	r24, 0x3F	; 63
    45b0:	99 27       	eor	r25, r25
    45b2:	08 95       	ret

000045b4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    45b4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    45b6:	91 8d       	ldd	r25, Z+25	; 0x19
    45b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    45ba:	98 17       	cp	r25, r24
    45bc:	31 f0       	breq	.+12     	; 0x45ca <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    45be:	82 8d       	ldd	r24, Z+26	; 0x1a
    45c0:	e8 0f       	add	r30, r24
    45c2:	f1 1d       	adc	r31, r1
    45c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    45ca:	8f ef       	ldi	r24, 0xFF	; 255
    45cc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    45ce:	08 95       	ret

000045d0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    45d0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    45d2:	91 8d       	ldd	r25, Z+25	; 0x19
    45d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    45d6:	98 17       	cp	r25, r24
    45d8:	61 f0       	breq	.+24     	; 0x45f2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    45da:	82 8d       	ldd	r24, Z+26	; 0x1a
    45dc:	df 01       	movw	r26, r30
    45de:	a8 0f       	add	r26, r24
    45e0:	b1 1d       	adc	r27, r1
    45e2:	5d 96       	adiw	r26, 0x1d	; 29
    45e4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    45e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    45e8:	9f 5f       	subi	r25, 0xFF	; 255
    45ea:	9f 73       	andi	r25, 0x3F	; 63
    45ec:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    45f2:	8f ef       	ldi	r24, 0xFF	; 255
    45f4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    45f6:	08 95       	ret

000045f8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    45f8:	8b e4       	ldi	r24, 0x4B	; 75
    45fa:	94 e2       	ldi	r25, 0x24	; 36
    45fc:	89 2b       	or	r24, r25
    45fe:	41 f0       	breq	.+16     	; 0x4610 <_Z14serialEventRunv+0x18>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	89 2b       	or	r24, r25
    4606:	21 f0       	breq	.+8      	; 0x4610 <_Z14serialEventRunv+0x18>
    4608:	46 d1       	rcall	.+652    	; 0x4896 <_Z17Serial0_availablev>
    460a:	81 11       	cpse	r24, r1
    460c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4610:	08 95       	ret

00004612 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4612:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4614:	84 8d       	ldd	r24, Z+28	; 0x1c
    4616:	df 01       	movw	r26, r30
    4618:	a8 0f       	add	r26, r24
    461a:	b1 1d       	adc	r27, r1
    461c:	a3 5a       	subi	r26, 0xA3	; 163
    461e:	bf 4f       	sbci	r27, 0xFF	; 255
    4620:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4622:	84 8d       	ldd	r24, Z+28	; 0x1c
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	8f 73       	andi	r24, 0x3F	; 63
    462a:	99 27       	eor	r25, r25
    462c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    462e:	a6 89       	ldd	r26, Z+22	; 0x16
    4630:	b7 89       	ldd	r27, Z+23	; 0x17
    4632:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4634:	a0 89       	ldd	r26, Z+16	; 0x10
    4636:	b1 89       	ldd	r27, Z+17	; 0x11
    4638:	8c 91       	ld	r24, X
    463a:	80 64       	ori	r24, 0x40	; 64
    463c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    463e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4640:	84 8d       	ldd	r24, Z+28	; 0x1c
    4642:	98 13       	cpse	r25, r24
    4644:	06 c0       	rjmp	.+12     	; 0x4652 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4646:	02 88       	ldd	r0, Z+18	; 0x12
    4648:	f3 89       	ldd	r31, Z+19	; 0x13
    464a:	e0 2d       	mov	r30, r0
    464c:	80 81       	ld	r24, Z
    464e:	8f 7d       	andi	r24, 0xDF	; 223
    4650:	80 83       	st	Z, r24
    4652:	08 95       	ret

00004654 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    465a:	88 8d       	ldd	r24, Y+24	; 0x18
    465c:	88 23       	and	r24, r24
    465e:	c1 f0       	breq	.+48     	; 0x4690 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4660:	ea 89       	ldd	r30, Y+18	; 0x12
    4662:	fb 89       	ldd	r31, Y+19	; 0x13
    4664:	80 81       	ld	r24, Z
    4666:	85 fd       	sbrc	r24, 5
    4668:	05 c0       	rjmp	.+10     	; 0x4674 <_ZN14HardwareSerial5flushEv+0x20>
    466a:	a8 89       	ldd	r26, Y+16	; 0x10
    466c:	b9 89       	ldd	r27, Y+17	; 0x11
    466e:	8c 91       	ld	r24, X
    4670:	86 fd       	sbrc	r24, 6
    4672:	0e c0       	rjmp	.+28     	; 0x4690 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	07 fc       	sbrc	r0, 7
    4678:	f5 cf       	rjmp	.-22     	; 0x4664 <_ZN14HardwareSerial5flushEv+0x10>
    467a:	80 81       	ld	r24, Z
    467c:	85 ff       	sbrs	r24, 5
    467e:	f2 cf       	rjmp	.-28     	; 0x4664 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4680:	a8 89       	ldd	r26, Y+16	; 0x10
    4682:	b9 89       	ldd	r27, Y+17	; 0x11
    4684:	8c 91       	ld	r24, X
    4686:	85 ff       	sbrs	r24, 5
    4688:	ed cf       	rjmp	.-38     	; 0x4664 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    468a:	ce 01       	movw	r24, r28
    468c:	c2 df       	rcall	.-124    	; 0x4612 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    468e:	e8 cf       	rjmp	.-48     	; 0x4660 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	08 95       	ret

00004696 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4696:	ef 92       	push	r14
    4698:	ff 92       	push	r15
    469a:	0f 93       	push	r16
    469c:	1f 93       	push	r17
    469e:	cf 93       	push	r28
    46a0:	df 93       	push	r29
    46a2:	ec 01       	movw	r28, r24
  _written = true;
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    46a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    46aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46ac:	98 13       	cpse	r25, r24
    46ae:	05 c0       	rjmp	.+10     	; 0x46ba <_ZN14HardwareSerial5writeEh+0x24>
    46b0:	e8 89       	ldd	r30, Y+16	; 0x10
    46b2:	f9 89       	ldd	r31, Y+17	; 0x11
    46b4:	80 81       	ld	r24, Z
    46b6:	85 fd       	sbrc	r24, 5
    46b8:	23 c0       	rjmp	.+70     	; 0x4700 <_ZN14HardwareSerial5writeEh+0x6a>
    46ba:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    46bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    46be:	10 e0       	ldi	r17, 0x00	; 0
    46c0:	0f 5f       	subi	r16, 0xFF	; 255
    46c2:	1f 4f       	sbci	r17, 0xFF	; 255
    46c4:	0f 73       	andi	r16, 0x3F	; 63
    46c6:	11 27       	eor	r17, r17
    46c8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    46ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46cc:	e8 12       	cpse	r14, r24
    46ce:	0b c0       	rjmp	.+22     	; 0x46e6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	07 fc       	sbrc	r0, 7
    46d4:	fa cf       	rjmp	.-12     	; 0x46ca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    46d6:	e8 89       	ldd	r30, Y+16	; 0x10
    46d8:	f9 89       	ldd	r31, Y+17	; 0x11
    46da:	80 81       	ld	r24, Z
    46dc:	85 ff       	sbrs	r24, 5
    46de:	f5 cf       	rjmp	.-22     	; 0x46ca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    46e0:	ce 01       	movw	r24, r28
    46e2:	97 df       	rcall	.-210    	; 0x4612 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    46e4:	f2 cf       	rjmp	.-28     	; 0x46ca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    46e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46e8:	fe 01       	movw	r30, r28
    46ea:	e8 0f       	add	r30, r24
    46ec:	f1 1d       	adc	r31, r1
    46ee:	e3 5a       	subi	r30, 0xA3	; 163
    46f0:	ff 4f       	sbci	r31, 0xFF	; 255
    46f2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    46f4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    46f6:	ea 89       	ldd	r30, Y+18	; 0x12
    46f8:	fb 89       	ldd	r31, Y+19	; 0x13
    46fa:	80 81       	ld	r24, Z
    46fc:	80 62       	ori	r24, 0x20	; 32
    46fe:	07 c0       	rjmp	.+14     	; 0x470e <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4700:	ee 89       	ldd	r30, Y+22	; 0x16
    4702:	ff 89       	ldd	r31, Y+23	; 0x17
    4704:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4706:	e8 89       	ldd	r30, Y+16	; 0x10
    4708:	f9 89       	ldd	r31, Y+17	; 0x11
    470a:	80 81       	ld	r24, Z
    470c:	80 64       	ori	r24, 0x40	; 64
    470e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	ff 90       	pop	r15
    471e:	ef 90       	pop	r14
    4720:	08 95       	ret

00004722 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4722:	cf 92       	push	r12
    4724:	df 92       	push	r13
    4726:	ef 92       	push	r14
    4728:	ff 92       	push	r15
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	ec 01       	movw	r28, r24
    4732:	6a 01       	movw	r12, r20
    4734:	7b 01       	movw	r14, r22
    4736:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4738:	e8 89       	ldd	r30, Y+16	; 0x10
    473a:	f9 89       	ldd	r31, Y+17	; 0x11
    473c:	82 e0       	ldi	r24, 0x02	; 2
    473e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4740:	41 15       	cp	r20, r1
    4742:	51 4e       	sbci	r21, 0xE1	; 225
    4744:	61 05       	cpc	r22, r1
    4746:	71 05       	cpc	r23, r1
    4748:	a9 f0       	breq	.+42     	; 0x4774 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	79 e0       	ldi	r23, 0x09	; 9
    474e:	8d e3       	ldi	r24, 0x3D	; 61
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	a7 01       	movw	r20, r14
    4754:	96 01       	movw	r18, r12
    4756:	5e d6       	rcall	.+3260   	; 0x5414 <__udivmodsi4>
    4758:	da 01       	movw	r26, r20
    475a:	c9 01       	movw	r24, r18
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	a1 09       	sbc	r26, r1
    4760:	b1 09       	sbc	r27, r1
    4762:	b6 95       	lsr	r27
    4764:	a7 95       	ror	r26
    4766:	97 95       	ror	r25
    4768:	87 95       	ror	r24
    476a:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    476c:	41 15       	cp	r20, r1
    476e:	80 e1       	ldi	r24, 0x10	; 16
    4770:	58 07       	cpc	r21, r24
    4772:	a0 f0       	brcs	.+40     	; 0x479c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4774:	e8 89       	ldd	r30, Y+16	; 0x10
    4776:	f9 89       	ldd	r31, Y+17	; 0x11
    4778:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    477a:	60 e8       	ldi	r22, 0x80	; 128
    477c:	74 e8       	ldi	r23, 0x84	; 132
    477e:	8e e1       	ldi	r24, 0x1E	; 30
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	a7 01       	movw	r20, r14
    4784:	96 01       	movw	r18, r12
    4786:	46 d6       	rcall	.+3212   	; 0x5414 <__udivmodsi4>
    4788:	ba 01       	movw	r22, r20
    478a:	a9 01       	movw	r20, r18
    478c:	41 50       	subi	r20, 0x01	; 1
    478e:	51 09       	sbc	r21, r1
    4790:	61 09       	sbc	r22, r1
    4792:	71 09       	sbc	r23, r1
    4794:	76 95       	lsr	r23
    4796:	67 95       	ror	r22
    4798:	57 95       	ror	r21
    479a:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    479c:	ec 85       	ldd	r30, Y+12	; 0x0c
    479e:	fd 85       	ldd	r31, Y+13	; 0x0d
    47a0:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    47a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    47a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    47a6:	40 83       	st	Z, r20

  _written = false;
    47a8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    47aa:	ec 89       	ldd	r30, Y+20	; 0x14
    47ac:	fd 89       	ldd	r31, Y+21	; 0x15
    47ae:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    47b0:	ea 89       	ldd	r30, Y+18	; 0x12
    47b2:	fb 89       	ldd	r31, Y+19	; 0x13
    47b4:	80 81       	ld	r24, Z
    47b6:	80 61       	ori	r24, 0x10	; 16
    47b8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    47ba:	ea 89       	ldd	r30, Y+18	; 0x12
    47bc:	fb 89       	ldd	r31, Y+19	; 0x13
    47be:	80 81       	ld	r24, Z
    47c0:	88 60       	ori	r24, 0x08	; 8
    47c2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    47c4:	ea 89       	ldd	r30, Y+18	; 0x12
    47c6:	fb 89       	ldd	r31, Y+19	; 0x13
    47c8:	80 81       	ld	r24, Z
    47ca:	80 68       	ori	r24, 0x80	; 128
    47cc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    47ce:	ea 89       	ldd	r30, Y+18	; 0x12
    47d0:	fb 89       	ldd	r31, Y+19	; 0x13
    47d2:	80 81       	ld	r24, Z
    47d4:	8f 7d       	andi	r24, 0xDF	; 223
    47d6:	80 83       	st	Z, r24
}
    47d8:	df 91       	pop	r29
    47da:	cf 91       	pop	r28
    47dc:	1f 91       	pop	r17
    47de:	ff 90       	pop	r15
    47e0:	ef 90       	pop	r14
    47e2:	df 90       	pop	r13
    47e4:	cf 90       	pop	r12
    47e6:	08 95       	ret

000047e8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    47e8:	1f 92       	push	r1
    47ea:	0f 92       	push	r0
    47ec:	0f b6       	in	r0, 0x3f	; 63
    47ee:	0f 92       	push	r0
    47f0:	11 24       	eor	r1, r1
    47f2:	2f 93       	push	r18
    47f4:	8f 93       	push	r24
    47f6:	9f 93       	push	r25
    47f8:	ef 93       	push	r30
    47fa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    47fc:	e0 91 77 05 	lds	r30, 0x0577	; 0x800577 <Serial+0x10>
    4800:	f0 91 78 05 	lds	r31, 0x0578	; 0x800578 <Serial+0x11>
    4804:	80 81       	ld	r24, Z
    4806:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <Serial+0x16>
    480a:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <Serial+0x17>
    480e:	82 fd       	sbrc	r24, 2
    4810:	12 c0       	rjmp	.+36     	; 0x4836 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4812:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4814:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <Serial+0x19>
    4818:	8f 5f       	subi	r24, 0xFF	; 255
    481a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    481c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <Serial+0x1a>
    4820:	82 17       	cp	r24, r18
    4822:	51 f0       	breq	.+20     	; 0x4838 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4824:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <Serial+0x19>
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	e9 59       	subi	r30, 0x99	; 153
    482c:	fa 4f       	sbci	r31, 0xFA	; 250
    482e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4830:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <Serial+0x19>
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4836:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4838:	ff 91       	pop	r31
    483a:	ef 91       	pop	r30
    483c:	9f 91       	pop	r25
    483e:	8f 91       	pop	r24
    4840:	2f 91       	pop	r18
    4842:	0f 90       	pop	r0
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	0f 90       	pop	r0
    4848:	1f 90       	pop	r1
    484a:	18 95       	reti

0000484c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    484c:	1f 92       	push	r1
    484e:	0f 92       	push	r0
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	0f 92       	push	r0
    4854:	11 24       	eor	r1, r1
    4856:	2f 93       	push	r18
    4858:	3f 93       	push	r19
    485a:	4f 93       	push	r20
    485c:	5f 93       	push	r21
    485e:	6f 93       	push	r22
    4860:	7f 93       	push	r23
    4862:	8f 93       	push	r24
    4864:	9f 93       	push	r25
    4866:	af 93       	push	r26
    4868:	bf 93       	push	r27
    486a:	ef 93       	push	r30
    486c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    486e:	87 e6       	ldi	r24, 0x67	; 103
    4870:	95 e0       	ldi	r25, 0x05	; 5
    4872:	cf de       	rcall	.-610    	; 0x4612 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4874:	ff 91       	pop	r31
    4876:	ef 91       	pop	r30
    4878:	bf 91       	pop	r27
    487a:	af 91       	pop	r26
    487c:	9f 91       	pop	r25
    487e:	8f 91       	pop	r24
    4880:	7f 91       	pop	r23
    4882:	6f 91       	pop	r22
    4884:	5f 91       	pop	r21
    4886:	4f 91       	pop	r20
    4888:	3f 91       	pop	r19
    488a:	2f 91       	pop	r18
    488c:	0f 90       	pop	r0
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	0f 90       	pop	r0
    4892:	1f 90       	pop	r1
    4894:	18 95       	reti

00004896 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4896:	87 e6       	ldi	r24, 0x67	; 103
    4898:	95 e0       	ldi	r25, 0x05	; 5
    489a:	80 de       	rcall	.-768    	; 0x459c <_ZN14HardwareSerial9availableEv>
    489c:	21 e0       	ldi	r18, 0x01	; 1
    489e:	89 2b       	or	r24, r25
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <_Z17Serial0_availablev+0xe>
    48a2:	20 e0       	ldi	r18, 0x00	; 0
}
    48a4:	82 2f       	mov	r24, r18
    48a6:	08 95       	ret

000048a8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    48a8:	e7 e6       	ldi	r30, 0x67	; 103
    48aa:	f5 e0       	ldi	r31, 0x05	; 5
    48ac:	13 82       	std	Z+3, r1	; 0x03
    48ae:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    48b0:	88 ee       	ldi	r24, 0xE8	; 232
    48b2:	93 e0       	ldi	r25, 0x03	; 3
    48b4:	a0 e0       	ldi	r26, 0x00	; 0
    48b6:	b0 e0       	ldi	r27, 0x00	; 0
    48b8:	84 83       	std	Z+4, r24	; 0x04
    48ba:	95 83       	std	Z+5, r25	; 0x05
    48bc:	a6 83       	std	Z+6, r26	; 0x06
    48be:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    48c0:	81 ec       	ldi	r24, 0xC1	; 193
    48c2:	91 e0       	ldi	r25, 0x01	; 1
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	80 83       	st	Z, r24
    48c8:	85 ec       	ldi	r24, 0xC5	; 197
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	95 87       	std	Z+13, r25	; 0x0d
    48ce:	84 87       	std	Z+12, r24	; 0x0c
    48d0:	84 ec       	ldi	r24, 0xC4	; 196
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	97 87       	std	Z+15, r25	; 0x0f
    48d6:	86 87       	std	Z+14, r24	; 0x0e
    48d8:	80 ec       	ldi	r24, 0xC0	; 192
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	91 8b       	std	Z+17, r25	; 0x11
    48de:	80 8b       	std	Z+16, r24	; 0x10
    48e0:	81 ec       	ldi	r24, 0xC1	; 193
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	93 8b       	std	Z+19, r25	; 0x13
    48e6:	82 8b       	std	Z+18, r24	; 0x12
    48e8:	82 ec       	ldi	r24, 0xC2	; 194
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	95 8b       	std	Z+21, r25	; 0x15
    48ee:	84 8b       	std	Z+20, r24	; 0x14
    48f0:	86 ec       	ldi	r24, 0xC6	; 198
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	97 8b       	std	Z+23, r25	; 0x17
    48f6:	86 8b       	std	Z+22, r24	; 0x16
    48f8:	11 8e       	std	Z+25, r1	; 0x19
    48fa:	12 8e       	std	Z+26, r1	; 0x1a
    48fc:	13 8e       	std	Z+27, r1	; 0x1b
    48fe:	14 8e       	std	Z+28, r1	; 0x1c
    4900:	08 95       	ret

00004902 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4902:	08 95       	ret

00004904 <main>:

int main(void)
{
	init();
    4904:	04 d2       	rcall	.+1032   	; 0x4d0e <init>

	initVariant();
    4906:	fd df       	rcall	.-6      	; 0x4902 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4908:	ed db       	rcall	.-2086   	; 0x40e4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    490a:	cc ef       	ldi	r28, 0xFC	; 252
    490c:	d2 e2       	ldi	r29, 0x22	; 34
#endif
	
	setup();
    
	for (;;) {
		loop();
    490e:	0e dc       	rcall	.-2020   	; 0x412c <loop>
		if (serialEventRun) serialEventRun();
    4910:	20 97       	sbiw	r28, 0x00	; 0
    4912:	e9 f3       	breq	.-6      	; 0x490e <main+0xa>
    4914:	71 de       	rcall	.-798    	; 0x45f8 <_Z14serialEventRunv>
    4916:	fb cf       	rjmp	.-10     	; 0x490e <main+0xa>

00004918 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    4918:	c5 c6       	rjmp	.+3466   	; 0x56a4 <free>

0000491a <_ZN5Print5writeEPKhj>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    491a:	cf 92       	push	r12
    491c:	df 92       	push	r13
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	6c 01       	movw	r12, r24
    492c:	7a 01       	movw	r14, r20
    492e:	8b 01       	movw	r16, r22
    4930:	c0 e0       	ldi	r28, 0x00	; 0
    4932:	d0 e0       	ldi	r29, 0x00	; 0
    4934:	ce 15       	cp	r28, r14
    4936:	df 05       	cpc	r29, r15
    4938:	89 f0       	breq	.+34     	; 0x495c <_ZN5Print5writeEPKhj+0x42>
    493a:	d8 01       	movw	r26, r16
    493c:	6d 91       	ld	r22, X+
    493e:	8d 01       	movw	r16, r26
    4940:	d6 01       	movw	r26, r12
    4942:	ed 91       	ld	r30, X+
    4944:	fc 91       	ld	r31, X
    4946:	01 90       	ld	r0, Z+
    4948:	f0 81       	ld	r31, Z
    494a:	e0 2d       	mov	r30, r0
    494c:	c6 01       	movw	r24, r12
    494e:	09 95       	icall
    4950:	89 2b       	or	r24, r25
    4952:	11 f4       	brne	.+4      	; 0x4958 <_ZN5Print5writeEPKhj+0x3e>
    4954:	7e 01       	movw	r14, r28
    4956:	02 c0       	rjmp	.+4      	; 0x495c <_ZN5Print5writeEPKhj+0x42>
    4958:	21 96       	adiw	r28, 0x01	; 1
    495a:	ec cf       	rjmp	.-40     	; 0x4934 <_ZN5Print5writeEPKhj+0x1a>
    495c:	c7 01       	movw	r24, r14
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	1f 91       	pop	r17
    4964:	0f 91       	pop	r16
    4966:	ff 90       	pop	r15
    4968:	ef 90       	pop	r14
    496a:	df 90       	pop	r13
    496c:	cf 90       	pop	r12
    496e:	08 95       	ret

00004970 <_ZN5Print5writeEPKc>:
    4970:	61 15       	cp	r22, r1
    4972:	71 05       	cpc	r23, r1
    4974:	79 f0       	breq	.+30     	; 0x4994 <_ZN5Print5writeEPKc+0x24>
    4976:	fb 01       	movw	r30, r22
    4978:	01 90       	ld	r0, Z+
    497a:	00 20       	and	r0, r0
    497c:	e9 f7       	brne	.-6      	; 0x4978 <_ZN5Print5writeEPKc+0x8>
    497e:	31 97       	sbiw	r30, 0x01	; 1
    4980:	af 01       	movw	r20, r30
    4982:	46 1b       	sub	r20, r22
    4984:	57 0b       	sbc	r21, r23
    4986:	dc 01       	movw	r26, r24
    4988:	ed 91       	ld	r30, X+
    498a:	fc 91       	ld	r31, X
    498c:	02 80       	ldd	r0, Z+2	; 0x02
    498e:	f3 81       	ldd	r31, Z+3	; 0x03
    4990:	e0 2d       	mov	r30, r0
    4992:	09 94       	ijmp
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	08 95       	ret

0000499a <_ZN5Print5printEPK19__FlashStringHelper>:
    499a:	ef 92       	push	r14
    499c:	ff 92       	push	r15
    499e:	0f 93       	push	r16
    49a0:	1f 93       	push	r17
    49a2:	cf 93       	push	r28
    49a4:	df 93       	push	r29
    49a6:	8c 01       	movw	r16, r24
    49a8:	7b 01       	movw	r14, r22
    49aa:	c0 e0       	ldi	r28, 0x00	; 0
    49ac:	d0 e0       	ldi	r29, 0x00	; 0
    49ae:	f7 01       	movw	r30, r14
    49b0:	ec 0f       	add	r30, r28
    49b2:	fd 1f       	adc	r31, r29
    49b4:	64 91       	lpm	r22, Z
    49b6:	66 23       	and	r22, r22
    49b8:	61 f0       	breq	.+24     	; 0x49d2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    49ba:	d8 01       	movw	r26, r16
    49bc:	ed 91       	ld	r30, X+
    49be:	fc 91       	ld	r31, X
    49c0:	01 90       	ld	r0, Z+
    49c2:	f0 81       	ld	r31, Z
    49c4:	e0 2d       	mov	r30, r0
    49c6:	c8 01       	movw	r24, r16
    49c8:	09 95       	icall
    49ca:	89 2b       	or	r24, r25
    49cc:	11 f0       	breq	.+4      	; 0x49d2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    49ce:	21 96       	adiw	r28, 0x01	; 1
    49d0:	ee cf       	rjmp	.-36     	; 0x49ae <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    49d2:	ce 01       	movw	r24, r28
    49d4:	df 91       	pop	r29
    49d6:	cf 91       	pop	r28
    49d8:	1f 91       	pop	r17
    49da:	0f 91       	pop	r16
    49dc:	ff 90       	pop	r15
    49de:	ef 90       	pop	r14
    49e0:	08 95       	ret

000049e2 <_ZN5Print5printERK6String>:
    49e2:	dc 01       	movw	r26, r24
    49e4:	ed 91       	ld	r30, X+
    49e6:	fc 91       	ld	r31, X
    49e8:	db 01       	movw	r26, r22
    49ea:	14 96       	adiw	r26, 0x04	; 4
    49ec:	4d 91       	ld	r20, X+
    49ee:	5c 91       	ld	r21, X
    49f0:	15 97       	sbiw	r26, 0x05	; 5
    49f2:	6d 91       	ld	r22, X+
    49f4:	7c 91       	ld	r23, X
    49f6:	02 80       	ldd	r0, Z+2	; 0x02
    49f8:	f3 81       	ldd	r31, Z+3	; 0x03
    49fa:	e0 2d       	mov	r30, r0
    49fc:	09 94       	ijmp

000049fe <_ZN5Print5printEPKc>:
    49fe:	b8 cf       	rjmp	.-144    	; 0x4970 <_ZN5Print5writeEPKc>

00004a00 <_ZN5Print5printEc>:
    4a00:	dc 01       	movw	r26, r24
    4a02:	ed 91       	ld	r30, X+
    4a04:	fc 91       	ld	r31, X
    4a06:	01 90       	ld	r0, Z+
    4a08:	f0 81       	ld	r31, Z
    4a0a:	e0 2d       	mov	r30, r0
    4a0c:	09 94       	ijmp

00004a0e <_ZN5Print7printlnEv>:
    4a0e:	6d ec       	ldi	r22, 0xCD	; 205
    4a10:	71 e0       	ldi	r23, 0x01	; 1
    4a12:	ae cf       	rjmp	.-164    	; 0x4970 <_ZN5Print5writeEPKc>

00004a14 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	ec 01       	movw	r28, r24
    4a1e:	bd df       	rcall	.-134    	; 0x499a <_ZN5Print5printEPK19__FlashStringHelper>
    4a20:	8c 01       	movw	r16, r24
    4a22:	ce 01       	movw	r24, r28
    4a24:	f4 df       	rcall	.-24     	; 0x4a0e <_ZN5Print7printlnEv>
    4a26:	80 0f       	add	r24, r16
    4a28:	91 1f       	adc	r25, r17
    4a2a:	df 91       	pop	r29
    4a2c:	cf 91       	pop	r28
    4a2e:	1f 91       	pop	r17
    4a30:	0f 91       	pop	r16
    4a32:	08 95       	ret

00004a34 <_ZN5Print11printNumberEmh>:
    4a34:	8f 92       	push	r8
    4a36:	9f 92       	push	r9
    4a38:	af 92       	push	r10
    4a3a:	bf 92       	push	r11
    4a3c:	cf 92       	push	r12
    4a3e:	df 92       	push	r13
    4a40:	ef 92       	push	r14
    4a42:	ff 92       	push	r15
    4a44:	0f 93       	push	r16
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
    4a50:	a1 97       	sbiw	r28, 0x21	; 33
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	f8 94       	cli
    4a56:	de bf       	out	0x3e, r29	; 62
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	cd bf       	out	0x3d, r28	; 61
    4a5c:	7c 01       	movw	r14, r24
    4a5e:	d4 2e       	mov	r13, r20
    4a60:	c5 2e       	mov	r12, r21
    4a62:	db 01       	movw	r26, r22
    4a64:	19 a2       	std	Y+33, r1	; 0x21
    4a66:	22 30       	cpi	r18, 0x02	; 2
    4a68:	08 f4       	brcc	.+2      	; 0x4a6c <_ZN5Print11printNumberEmh+0x38>
    4a6a:	2a e0       	ldi	r18, 0x0A	; 10
    4a6c:	8e 01       	movw	r16, r28
    4a6e:	0f 5d       	subi	r16, 0xDF	; 223
    4a70:	1f 4f       	sbci	r17, 0xFF	; 255
    4a72:	82 2e       	mov	r8, r18
    4a74:	91 2c       	mov	r9, r1
    4a76:	a1 2c       	mov	r10, r1
    4a78:	b1 2c       	mov	r11, r1
    4a7a:	6d 2d       	mov	r22, r13
    4a7c:	7c 2d       	mov	r23, r12
    4a7e:	cd 01       	movw	r24, r26
    4a80:	a5 01       	movw	r20, r10
    4a82:	94 01       	movw	r18, r8
    4a84:	c7 d4       	rcall	.+2446   	; 0x5414 <__udivmodsi4>
    4a86:	d2 2e       	mov	r13, r18
    4a88:	c3 2e       	mov	r12, r19
    4a8a:	da 01       	movw	r26, r20
    4a8c:	01 50       	subi	r16, 0x01	; 1
    4a8e:	11 09       	sbc	r17, r1
    4a90:	6a 30       	cpi	r22, 0x0A	; 10
    4a92:	71 05       	cpc	r23, r1
    4a94:	81 05       	cpc	r24, r1
    4a96:	91 05       	cpc	r25, r1
    4a98:	10 f4       	brcc	.+4      	; 0x4a9e <_ZN5Print11printNumberEmh+0x6a>
    4a9a:	60 5d       	subi	r22, 0xD0	; 208
    4a9c:	01 c0       	rjmp	.+2      	; 0x4aa0 <_ZN5Print11printNumberEmh+0x6c>
    4a9e:	69 5c       	subi	r22, 0xC9	; 201
    4aa0:	f8 01       	movw	r30, r16
    4aa2:	60 83       	st	Z, r22
    4aa4:	23 2b       	or	r18, r19
    4aa6:	24 2b       	or	r18, r20
    4aa8:	25 2b       	or	r18, r21
    4aaa:	39 f7       	brne	.-50     	; 0x4a7a <_ZN5Print11printNumberEmh+0x46>
    4aac:	b8 01       	movw	r22, r16
    4aae:	c7 01       	movw	r24, r14
    4ab0:	5f df       	rcall	.-322    	; 0x4970 <_ZN5Print5writeEPKc>
    4ab2:	a1 96       	adiw	r28, 0x21	; 33
    4ab4:	0f b6       	in	r0, 0x3f	; 63
    4ab6:	f8 94       	cli
    4ab8:	de bf       	out	0x3e, r29	; 62
    4aba:	0f be       	out	0x3f, r0	; 63
    4abc:	cd bf       	out	0x3d, r28	; 61
    4abe:	df 91       	pop	r29
    4ac0:	cf 91       	pop	r28
    4ac2:	1f 91       	pop	r17
    4ac4:	0f 91       	pop	r16
    4ac6:	ff 90       	pop	r15
    4ac8:	ef 90       	pop	r14
    4aca:	df 90       	pop	r13
    4acc:	cf 90       	pop	r12
    4ace:	bf 90       	pop	r11
    4ad0:	af 90       	pop	r10
    4ad2:	9f 90       	pop	r9
    4ad4:	8f 90       	pop	r8
    4ad6:	08 95       	ret

00004ad8 <_ZN5Print5printEli>:
    4ad8:	cf 92       	push	r12
    4ada:	df 92       	push	r13
    4adc:	ef 92       	push	r14
    4ade:	ff 92       	push	r15
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	ec 01       	movw	r28, r24
    4aea:	6a 01       	movw	r12, r20
    4aec:	7b 01       	movw	r14, r22
    4aee:	21 15       	cp	r18, r1
    4af0:	31 05       	cpc	r19, r1
    4af2:	79 f4       	brne	.+30     	; 0x4b12 <_ZN5Print5printEli+0x3a>
    4af4:	e8 81       	ld	r30, Y
    4af6:	f9 81       	ldd	r31, Y+1	; 0x01
    4af8:	01 90       	ld	r0, Z+
    4afa:	f0 81       	ld	r31, Z
    4afc:	e0 2d       	mov	r30, r0
    4afe:	64 2f       	mov	r22, r20
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	0f 91       	pop	r16
    4b08:	ff 90       	pop	r15
    4b0a:	ef 90       	pop	r14
    4b0c:	df 90       	pop	r13
    4b0e:	cf 90       	pop	r12
    4b10:	09 94       	ijmp
    4b12:	2a 30       	cpi	r18, 0x0A	; 10
    4b14:	31 05       	cpc	r19, r1
    4b16:	d9 f4       	brne	.+54     	; 0x4b4e <_ZN5Print5printEli+0x76>
    4b18:	77 ff       	sbrs	r23, 7
    4b1a:	18 c0       	rjmp	.+48     	; 0x4b4c <_ZN5Print5printEli+0x74>
    4b1c:	6d e2       	ldi	r22, 0x2D	; 45
    4b1e:	70 df       	rcall	.-288    	; 0x4a00 <_ZN5Print5printEc>
    4b20:	8c 01       	movw	r16, r24
    4b22:	44 27       	eor	r20, r20
    4b24:	55 27       	eor	r21, r21
    4b26:	ba 01       	movw	r22, r20
    4b28:	4c 19       	sub	r20, r12
    4b2a:	5d 09       	sbc	r21, r13
    4b2c:	6e 09       	sbc	r22, r14
    4b2e:	7f 09       	sbc	r23, r15
    4b30:	2a e0       	ldi	r18, 0x0A	; 10
    4b32:	ce 01       	movw	r24, r28
    4b34:	7f df       	rcall	.-258    	; 0x4a34 <_ZN5Print11printNumberEmh>
    4b36:	80 0f       	add	r24, r16
    4b38:	91 1f       	adc	r25, r17
    4b3a:	df 91       	pop	r29
    4b3c:	cf 91       	pop	r28
    4b3e:	1f 91       	pop	r17
    4b40:	0f 91       	pop	r16
    4b42:	ff 90       	pop	r15
    4b44:	ef 90       	pop	r14
    4b46:	df 90       	pop	r13
    4b48:	cf 90       	pop	r12
    4b4a:	08 95       	ret
    4b4c:	2a e0       	ldi	r18, 0x0A	; 10
    4b4e:	b7 01       	movw	r22, r14
    4b50:	a6 01       	movw	r20, r12
    4b52:	ce 01       	movw	r24, r28
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	ff 90       	pop	r15
    4b5e:	ef 90       	pop	r14
    4b60:	df 90       	pop	r13
    4b62:	cf 90       	pop	r12
    4b64:	67 cf       	rjmp	.-306    	; 0x4a34 <_ZN5Print11printNumberEmh>

00004b66 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4b66:	0f 93       	push	r16
    4b68:	1f 93       	push	r17
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	ec 01       	movw	r28, r24
    4b70:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4b72:	ab 01       	movw	r20, r22
    4b74:	77 0f       	add	r23, r23
    4b76:	66 0b       	sbc	r22, r22
    4b78:	77 0b       	sbc	r23, r23
    4b7a:	ae df       	rcall	.-164    	; 0x4ad8 <_ZN5Print5printEli>
    4b7c:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4b7e:	ce 01       	movw	r24, r28
    4b80:	46 df       	rcall	.-372    	; 0x4a0e <_ZN5Print7printlnEv>
  return n;
}
    4b82:	80 0f       	add	r24, r16
    4b84:	91 1f       	adc	r25, r17
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	1f 91       	pop	r17
    4b8c:	0f 91       	pop	r16
    4b8e:	08 95       	ret

00004b90 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4b90:	1f 92       	push	r1
    4b92:	0f 92       	push	r0
    4b94:	0f b6       	in	r0, 0x3f	; 63
    4b96:	0f 92       	push	r0
    4b98:	11 24       	eor	r1, r1
    4b9a:	2f 93       	push	r18
    4b9c:	3f 93       	push	r19
    4b9e:	8f 93       	push	r24
    4ba0:	9f 93       	push	r25
    4ba2:	af 93       	push	r26
    4ba4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4ba6:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <timer0_millis>
    4baa:	90 91 06 06 	lds	r25, 0x0606	; 0x800606 <timer0_millis+0x1>
    4bae:	a0 91 07 06 	lds	r26, 0x0607	; 0x800607 <timer0_millis+0x2>
    4bb2:	b0 91 08 06 	lds	r27, 0x0608	; 0x800608 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4bb6:	30 91 04 06 	lds	r19, 0x0604	; 0x800604 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4bba:	23 e0       	ldi	r18, 0x03	; 3
    4bbc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4bbe:	2d 37       	cpi	r18, 0x7D	; 125
    4bc0:	20 f4       	brcc	.+8      	; 0x4bca <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	a1 1d       	adc	r26, r1
    4bc6:	b1 1d       	adc	r27, r1
    4bc8:	05 c0       	rjmp	.+10     	; 0x4bd4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4bca:	26 e8       	ldi	r18, 0x86	; 134
    4bcc:	23 0f       	add	r18, r19
		m += 1;
    4bce:	02 96       	adiw	r24, 0x02	; 2
    4bd0:	a1 1d       	adc	r26, r1
    4bd2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4bd4:	20 93 04 06 	sts	0x0604, r18	; 0x800604 <timer0_fract>
	timer0_millis = m;
    4bd8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <timer0_millis>
    4bdc:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <timer0_millis+0x1>
    4be0:	a0 93 07 06 	sts	0x0607, r26	; 0x800607 <timer0_millis+0x2>
    4be4:	b0 93 08 06 	sts	0x0608, r27	; 0x800608 <timer0_millis+0x3>
	timer0_overflow_count++;
    4be8:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <timer0_overflow_count>
    4bec:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <timer0_overflow_count+0x1>
    4bf0:	a0 91 0b 06 	lds	r26, 0x060B	; 0x80060b <timer0_overflow_count+0x2>
    4bf4:	b0 91 0c 06 	lds	r27, 0x060C	; 0x80060c <timer0_overflow_count+0x3>
    4bf8:	01 96       	adiw	r24, 0x01	; 1
    4bfa:	a1 1d       	adc	r26, r1
    4bfc:	b1 1d       	adc	r27, r1
    4bfe:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <timer0_overflow_count>
    4c02:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <timer0_overflow_count+0x1>
    4c06:	a0 93 0b 06 	sts	0x060B, r26	; 0x80060b <timer0_overflow_count+0x2>
    4c0a:	b0 93 0c 06 	sts	0x060C, r27	; 0x80060c <timer0_overflow_count+0x3>
}
    4c0e:	bf 91       	pop	r27
    4c10:	af 91       	pop	r26
    4c12:	9f 91       	pop	r25
    4c14:	8f 91       	pop	r24
    4c16:	3f 91       	pop	r19
    4c18:	2f 91       	pop	r18
    4c1a:	0f 90       	pop	r0
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	0f 90       	pop	r0
    4c20:	1f 90       	pop	r1
    4c22:	18 95       	reti

00004c24 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4c24:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4c26:	f8 94       	cli
	m = timer0_millis;
    4c28:	60 91 05 06 	lds	r22, 0x0605	; 0x800605 <timer0_millis>
    4c2c:	70 91 06 06 	lds	r23, 0x0606	; 0x800606 <timer0_millis+0x1>
    4c30:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <timer0_millis+0x2>
    4c34:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <timer0_millis+0x3>
	SREG = oldSREG;
    4c38:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4c3a:	08 95       	ret

00004c3c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4c3c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4c3e:	f8 94       	cli
	m = timer0_overflow_count;
    4c40:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <timer0_overflow_count>
    4c44:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <timer0_overflow_count+0x1>
    4c48:	a0 91 0b 06 	lds	r26, 0x060B	; 0x80060b <timer0_overflow_count+0x2>
    4c4c:	b0 91 0c 06 	lds	r27, 0x060C	; 0x80060c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4c50:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4c52:	a8 9b       	sbis	0x15, 0	; 21
    4c54:	05 c0       	rjmp	.+10     	; 0x4c60 <micros+0x24>
    4c56:	2f 3f       	cpi	r18, 0xFF	; 255
    4c58:	19 f0       	breq	.+6      	; 0x4c60 <micros+0x24>
		m++;
    4c5a:	01 96       	adiw	r24, 0x01	; 1
    4c5c:	a1 1d       	adc	r26, r1
    4c5e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4c60:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4c62:	ba 2f       	mov	r27, r26
    4c64:	a9 2f       	mov	r26, r25
    4c66:	98 2f       	mov	r25, r24
    4c68:	88 27       	eor	r24, r24
    4c6a:	82 0f       	add	r24, r18
    4c6c:	91 1d       	adc	r25, r1
    4c6e:	a1 1d       	adc	r26, r1
    4c70:	b1 1d       	adc	r27, r1
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	42 e0       	ldi	r20, 0x02	; 2
    4c78:	66 0f       	add	r22, r22
    4c7a:	77 1f       	adc	r23, r23
    4c7c:	88 1f       	adc	r24, r24
    4c7e:	99 1f       	adc	r25, r25
    4c80:	4a 95       	dec	r20
    4c82:	d1 f7       	brne	.-12     	; 0x4c78 <micros+0x3c>
}
    4c84:	08 95       	ret

00004c86 <delay>:

void delay(unsigned long ms)
{
    4c86:	8f 92       	push	r8
    4c88:	9f 92       	push	r9
    4c8a:	af 92       	push	r10
    4c8c:	bf 92       	push	r11
    4c8e:	cf 92       	push	r12
    4c90:	df 92       	push	r13
    4c92:	ef 92       	push	r14
    4c94:	ff 92       	push	r15
    4c96:	6b 01       	movw	r12, r22
    4c98:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4c9a:	d0 df       	rcall	.-96     	; 0x4c3c <micros>
    4c9c:	4b 01       	movw	r8, r22
    4c9e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4ca0:	c1 14       	cp	r12, r1
    4ca2:	d1 04       	cpc	r13, r1
    4ca4:	e1 04       	cpc	r14, r1
    4ca6:	f1 04       	cpc	r15, r1
    4ca8:	f1 f0       	breq	.+60     	; 0x4ce6 <delay+0x60>
		yield();
    4caa:	b3 d3       	rcall	.+1894   	; 0x5412 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4cac:	c7 df       	rcall	.-114    	; 0x4c3c <micros>
    4cae:	dc 01       	movw	r26, r24
    4cb0:	cb 01       	movw	r24, r22
    4cb2:	88 19       	sub	r24, r8
    4cb4:	99 09       	sbc	r25, r9
    4cb6:	aa 09       	sbc	r26, r10
    4cb8:	bb 09       	sbc	r27, r11
    4cba:	88 3e       	cpi	r24, 0xE8	; 232
    4cbc:	93 40       	sbci	r25, 0x03	; 3
    4cbe:	a1 05       	cpc	r26, r1
    4cc0:	b1 05       	cpc	r27, r1
    4cc2:	70 f3       	brcs	.-36     	; 0x4ca0 <delay+0x1a>
			ms--;
    4cc4:	21 e0       	ldi	r18, 0x01	; 1
    4cc6:	c2 1a       	sub	r12, r18
    4cc8:	d1 08       	sbc	r13, r1
    4cca:	e1 08       	sbc	r14, r1
    4ccc:	f1 08       	sbc	r15, r1
			start += 1000;
    4cce:	88 ee       	ldi	r24, 0xE8	; 232
    4cd0:	88 0e       	add	r8, r24
    4cd2:	83 e0       	ldi	r24, 0x03	; 3
    4cd4:	98 1e       	adc	r9, r24
    4cd6:	a1 1c       	adc	r10, r1
    4cd8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4cda:	c1 14       	cp	r12, r1
    4cdc:	d1 04       	cpc	r13, r1
    4cde:	e1 04       	cpc	r14, r1
    4ce0:	f1 04       	cpc	r15, r1
    4ce2:	21 f7       	brne	.-56     	; 0x4cac <delay+0x26>
    4ce4:	dd cf       	rjmp	.-70     	; 0x4ca0 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    4ce6:	ff 90       	pop	r15
    4ce8:	ef 90       	pop	r14
    4cea:	df 90       	pop	r13
    4cec:	cf 90       	pop	r12
    4cee:	bf 90       	pop	r11
    4cf0:	af 90       	pop	r10
    4cf2:	9f 90       	pop	r9
    4cf4:	8f 90       	pop	r8
    4cf6:	08 95       	ret

00004cf8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4cf8:	82 30       	cpi	r24, 0x02	; 2
    4cfa:	91 05       	cpc	r25, r1
    4cfc:	38 f0       	brcs	.+14     	; 0x4d0c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4cfe:	88 0f       	add	r24, r24
    4d00:	99 1f       	adc	r25, r25
    4d02:	88 0f       	add	r24, r24
    4d04:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4d06:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	f1 f7       	brne	.-4      	; 0x4d08 <delayMicroseconds+0x10>
    4d0c:	08 95       	ret

00004d0e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4d0e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4d10:	84 b5       	in	r24, 0x24	; 36
    4d12:	82 60       	ori	r24, 0x02	; 2
    4d14:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4d16:	84 b5       	in	r24, 0x24	; 36
    4d18:	81 60       	ori	r24, 0x01	; 1
    4d1a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4d1c:	85 b5       	in	r24, 0x25	; 37
    4d1e:	82 60       	ori	r24, 0x02	; 2
    4d20:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4d22:	85 b5       	in	r24, 0x25	; 37
    4d24:	81 60       	ori	r24, 0x01	; 1
    4d26:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4d28:	ee e6       	ldi	r30, 0x6E	; 110
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	80 81       	ld	r24, Z
    4d2e:	81 60       	ori	r24, 0x01	; 1
    4d30:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4d32:	e1 e8       	ldi	r30, 0x81	; 129
    4d34:	f0 e0       	ldi	r31, 0x00	; 0
    4d36:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4d38:	80 81       	ld	r24, Z
    4d3a:	82 60       	ori	r24, 0x02	; 2
    4d3c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4d3e:	80 81       	ld	r24, Z
    4d40:	81 60       	ori	r24, 0x01	; 1
    4d42:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4d44:	e0 e8       	ldi	r30, 0x80	; 128
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	80 81       	ld	r24, Z
    4d4a:	81 60       	ori	r24, 0x01	; 1
    4d4c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4d4e:	e1 eb       	ldi	r30, 0xB1	; 177
    4d50:	f0 e0       	ldi	r31, 0x00	; 0
    4d52:	80 81       	ld	r24, Z
    4d54:	84 60       	ori	r24, 0x04	; 4
    4d56:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4d58:	e0 eb       	ldi	r30, 0xB0	; 176
    4d5a:	f0 e0       	ldi	r31, 0x00	; 0
    4d5c:	80 81       	ld	r24, Z
    4d5e:	81 60       	ori	r24, 0x01	; 1
    4d60:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4d62:	ea e7       	ldi	r30, 0x7A	; 122
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	80 81       	ld	r24, Z
    4d68:	84 60       	ori	r24, 0x04	; 4
    4d6a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4d6c:	80 81       	ld	r24, Z
    4d6e:	82 60       	ori	r24, 0x02	; 2
    4d70:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4d72:	80 81       	ld	r24, Z
    4d74:	81 60       	ori	r24, 0x01	; 1
    4d76:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4d78:	80 81       	ld	r24, Z
    4d7a:	80 68       	ori	r24, 0x80	; 128
    4d7c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4d7e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4d82:	08 95       	ret

00004d84 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4d84:	8e 30       	cpi	r24, 0x0E	; 14
    4d86:	08 f0       	brcs	.+2      	; 0x4d8a <analogRead+0x6>
    4d88:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4d8a:	87 70       	andi	r24, 0x07	; 7
    4d8c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <analog_reference>
    4d90:	90 e4       	ldi	r25, 0x40	; 64
    4d92:	29 9f       	mul	r18, r25
    4d94:	90 01       	movw	r18, r0
    4d96:	11 24       	eor	r1, r1
    4d98:	82 2b       	or	r24, r18
    4d9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4d9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4da2:	80 64       	ori	r24, 0x40	; 64
    4da4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4da8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4dac:	86 fd       	sbrc	r24, 6
    4dae:	fc cf       	rjmp	.-8      	; 0x4da8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4db0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4db4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4db8:	90 e0       	ldi	r25, 0x00	; 0
}
    4dba:	92 2b       	or	r25, r18
    4dbc:	08 95       	ret

00004dbe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4dbe:	83 30       	cpi	r24, 0x03	; 3
    4dc0:	81 f0       	breq	.+32     	; 0x4de2 <turnOffPWM+0x24>
    4dc2:	28 f4       	brcc	.+10     	; 0x4dce <turnOffPWM+0x10>
    4dc4:	81 30       	cpi	r24, 0x01	; 1
    4dc6:	99 f0       	breq	.+38     	; 0x4dee <turnOffPWM+0x30>
    4dc8:	82 30       	cpi	r24, 0x02	; 2
    4dca:	a1 f0       	breq	.+40     	; 0x4df4 <turnOffPWM+0x36>
    4dcc:	08 95       	ret
    4dce:	87 30       	cpi	r24, 0x07	; 7
    4dd0:	a9 f0       	breq	.+42     	; 0x4dfc <turnOffPWM+0x3e>
    4dd2:	88 30       	cpi	r24, 0x08	; 8
    4dd4:	b9 f0       	breq	.+46     	; 0x4e04 <turnOffPWM+0x46>
    4dd6:	84 30       	cpi	r24, 0x04	; 4
    4dd8:	d1 f4       	brne	.+52     	; 0x4e0e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4dda:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4dde:	8f 7d       	andi	r24, 0xDF	; 223
    4de0:	03 c0       	rjmp	.+6      	; 0x4de8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4de2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4de6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4de8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4dec:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4dee:	84 b5       	in	r24, 0x24	; 36
    4df0:	8f 77       	andi	r24, 0x7F	; 127
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4df4:	84 b5       	in	r24, 0x24	; 36
    4df6:	8f 7d       	andi	r24, 0xDF	; 223
    4df8:	84 bd       	out	0x24, r24	; 36
    4dfa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4dfc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4e00:	8f 77       	andi	r24, 0x7F	; 127
    4e02:	03 c0       	rjmp	.+6      	; 0x4e0a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4e04:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4e08:	8f 7d       	andi	r24, 0xDF	; 223
    4e0a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4e0e:	08 95       	ret

00004e10 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	fc 01       	movw	r30, r24
    4e18:	e2 53       	subi	r30, 0x32	; 50
    4e1a:	fc 4f       	sbci	r31, 0xFC	; 252
    4e1c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4e1e:	fc 01       	movw	r30, r24
    4e20:	ee 51       	subi	r30, 0x1E	; 30
    4e22:	fc 4f       	sbci	r31, 0xFC	; 252
    4e24:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4e26:	88 23       	and	r24, r24
    4e28:	61 f1       	breq	.+88     	; 0x4e82 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	fc 01       	movw	r30, r24
    4e32:	e6 5f       	subi	r30, 0xF6	; 246
    4e34:	fb 4f       	sbci	r31, 0xFB	; 251
    4e36:	c5 91       	lpm	r28, Z+
    4e38:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	e0 50       	subi	r30, 0x00	; 0
    4e3e:	fc 4f       	sbci	r31, 0xFC	; 252
    4e40:	a5 91       	lpm	r26, Z+
    4e42:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4e44:	61 11       	cpse	r22, r1
    4e46:	09 c0       	rjmp	.+18     	; 0x4e5a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4e48:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4e4a:	f8 94       	cli
		*reg &= ~bit;
    4e4c:	88 81       	ld	r24, Y
    4e4e:	20 95       	com	r18
    4e50:	82 23       	and	r24, r18
    4e52:	88 83       	st	Y, r24
		*out &= ~bit;
    4e54:	ec 91       	ld	r30, X
    4e56:	2e 23       	and	r18, r30
    4e58:	0b c0       	rjmp	.+22     	; 0x4e70 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4e5a:	62 30       	cpi	r22, 0x02	; 2
    4e5c:	61 f4       	brne	.+24     	; 0x4e76 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4e5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4e60:	f8 94       	cli
		*reg &= ~bit;
    4e62:	38 81       	ld	r19, Y
    4e64:	82 2f       	mov	r24, r18
    4e66:	80 95       	com	r24
    4e68:	83 23       	and	r24, r19
    4e6a:	88 83       	st	Y, r24
		*out |= bit;
    4e6c:	ec 91       	ld	r30, X
    4e6e:	2e 2b       	or	r18, r30
    4e70:	2c 93       	st	X, r18
		SREG = oldSREG;
    4e72:	9f bf       	out	0x3f, r25	; 63
    4e74:	06 c0       	rjmp	.+12     	; 0x4e82 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4e76:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4e78:	f8 94       	cli
		*reg |= bit;
    4e7a:	e8 81       	ld	r30, Y
    4e7c:	2e 2b       	or	r18, r30
    4e7e:	28 83       	st	Y, r18
		SREG = oldSREG;
    4e80:	8f bf       	out	0x3f, r24	; 63
	}
}
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	08 95       	ret

00004e88 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4e8e:	28 2f       	mov	r18, r24
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	f9 01       	movw	r30, r18
    4e94:	e6 54       	subi	r30, 0x46	; 70
    4e96:	fc 4f       	sbci	r31, 0xFC	; 252
    4e98:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4e9a:	f9 01       	movw	r30, r18
    4e9c:	e2 53       	subi	r30, 0x32	; 50
    4e9e:	fc 4f       	sbci	r31, 0xFC	; 252
    4ea0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4ea2:	f9 01       	movw	r30, r18
    4ea4:	ee 51       	subi	r30, 0x1E	; 30
    4ea6:	fc 4f       	sbci	r31, 0xFC	; 252
    4ea8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4eaa:	cc 23       	and	r28, r28
    4eac:	c1 f0       	breq	.+48     	; 0x4ede <digitalWrite+0x56>
    4eae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4eb0:	81 11       	cpse	r24, r1
    4eb2:	85 df       	rcall	.-246    	; 0x4dbe <turnOffPWM>

	out = portOutputRegister(port);
    4eb4:	ec 2f       	mov	r30, r28
    4eb6:	f0 e0       	ldi	r31, 0x00	; 0
    4eb8:	ee 0f       	add	r30, r30
    4eba:	ff 1f       	adc	r31, r31
    4ebc:	e0 50       	subi	r30, 0x00	; 0
    4ebe:	fc 4f       	sbci	r31, 0xFC	; 252
    4ec0:	a5 91       	lpm	r26, Z+
    4ec2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4ec4:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4ec6:	f8 94       	cli

	if (val == LOW) {
    4ec8:	11 11       	cpse	r17, r1
    4eca:	05 c0       	rjmp	.+10     	; 0x4ed6 <digitalWrite+0x4e>
		*out &= ~bit;
    4ecc:	9c 91       	ld	r25, X
    4ece:	ed 2f       	mov	r30, r29
    4ed0:	e0 95       	com	r30
    4ed2:	e9 23       	and	r30, r25
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <digitalWrite+0x52>
	} else {
		*out |= bit;
    4ed6:	ec 91       	ld	r30, X
    4ed8:	ed 2b       	or	r30, r29
    4eda:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    4edc:	8f bf       	out	0x3f, r24	; 63
}
    4ede:	df 91       	pop	r29
    4ee0:	cf 91       	pop	r28
    4ee2:	1f 91       	pop	r17
    4ee4:	08 95       	ret

00004ee6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4ee6:	cf 93       	push	r28
    4ee8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4eea:	28 2f       	mov	r18, r24
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	f9 01       	movw	r30, r18
    4ef0:	e6 54       	subi	r30, 0x46	; 70
    4ef2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ef4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4ef6:	f9 01       	movw	r30, r18
    4ef8:	e2 53       	subi	r30, 0x32	; 50
    4efa:	fc 4f       	sbci	r31, 0xFC	; 252
    4efc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4efe:	f9 01       	movw	r30, r18
    4f00:	ee 51       	subi	r30, 0x1E	; 30
    4f02:	fc 4f       	sbci	r31, 0xFC	; 252
    4f04:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4f06:	cc 23       	and	r28, r28
    4f08:	89 f0       	breq	.+34     	; 0x4f2c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4f0a:	81 11       	cpse	r24, r1
    4f0c:	58 df       	rcall	.-336    	; 0x4dbe <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4f0e:	ec 2f       	mov	r30, r28
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	ee 0f       	add	r30, r30
    4f14:	ff 1f       	adc	r31, r31
    4f16:	ea 50       	subi	r30, 0x0A	; 10
    4f18:	fc 4f       	sbci	r31, 0xFC	; 252
    4f1a:	a5 91       	lpm	r26, Z+
    4f1c:	b4 91       	lpm	r27, Z
    4f1e:	ec 91       	ld	r30, X
    4f20:	ed 23       	and	r30, r29
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	21 f4       	brne	.+8      	; 0x4f30 <digitalRead+0x4a>
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	02 c0       	rjmp	.+4      	; 0x4f30 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	08 95       	ret

00004f36 <_ZN6StringD1Ev>:

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
	return 0;
}
    4f36:	fc 01       	movw	r30, r24
    4f38:	80 81       	ld	r24, Z
    4f3a:	91 81       	ldd	r25, Z+1	; 0x01
    4f3c:	b3 c3       	rjmp	.+1894   	; 0x56a4 <free>

00004f3e <_ZN6String10invalidateEv>:
    4f3e:	cf 93       	push	r28
    4f40:	df 93       	push	r29
    4f42:	ec 01       	movw	r28, r24
    4f44:	88 81       	ld	r24, Y
    4f46:	99 81       	ldd	r25, Y+1	; 0x01
    4f48:	00 97       	sbiw	r24, 0x00	; 0
    4f4a:	09 f0       	breq	.+2      	; 0x4f4e <_ZN6String10invalidateEv+0x10>
    4f4c:	ab d3       	rcall	.+1878   	; 0x56a4 <free>
    4f4e:	19 82       	std	Y+1, r1	; 0x01
    4f50:	18 82       	st	Y, r1
    4f52:	1d 82       	std	Y+5, r1	; 0x05
    4f54:	1c 82       	std	Y+4, r1	; 0x04
    4f56:	1b 82       	std	Y+3, r1	; 0x03
    4f58:	1a 82       	std	Y+2, r1	; 0x02
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	08 95       	ret

00004f60 <_ZN6String12changeBufferEj>:
    4f60:	0f 93       	push	r16
    4f62:	1f 93       	push	r17
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	ec 01       	movw	r28, r24
    4f6a:	8b 01       	movw	r16, r22
    4f6c:	6f 5f       	subi	r22, 0xFF	; 255
    4f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f70:	88 81       	ld	r24, Y
    4f72:	99 81       	ldd	r25, Y+1	; 0x01
    4f74:	2f d4       	rcall	.+2142   	; 0x57d4 <realloc>
    4f76:	00 97       	sbiw	r24, 0x00	; 0
    4f78:	31 f0       	breq	.+12     	; 0x4f86 <_ZN6String12changeBufferEj+0x26>
    4f7a:	99 83       	std	Y+1, r25	; 0x01
    4f7c:	88 83       	st	Y, r24
    4f7e:	1b 83       	std	Y+3, r17	; 0x03
    4f80:	0a 83       	std	Y+2, r16	; 0x02
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <_ZN6String12changeBufferEj+0x28>
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	df 91       	pop	r29
    4f8a:	cf 91       	pop	r28
    4f8c:	1f 91       	pop	r17
    4f8e:	0f 91       	pop	r16
    4f90:	08 95       	ret

00004f92 <_ZN6String7reserveEj>:
    4f92:	cf 93       	push	r28
    4f94:	df 93       	push	r29
    4f96:	ec 01       	movw	r28, r24
    4f98:	88 81       	ld	r24, Y
    4f9a:	99 81       	ldd	r25, Y+1	; 0x01
    4f9c:	89 2b       	or	r24, r25
    4f9e:	29 f0       	breq	.+10     	; 0x4faa <_ZN6String7reserveEj+0x18>
    4fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa4:	86 17       	cp	r24, r22
    4fa6:	97 07       	cpc	r25, r23
    4fa8:	58 f4       	brcc	.+22     	; 0x4fc0 <_ZN6String7reserveEj+0x2e>
    4faa:	ce 01       	movw	r24, r28
    4fac:	d9 df       	rcall	.-78     	; 0x4f60 <_ZN6String12changeBufferEj>
    4fae:	88 23       	and	r24, r24
    4fb0:	41 f0       	breq	.+16     	; 0x4fc2 <_ZN6String7reserveEj+0x30>
    4fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    4fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    4fb6:	89 2b       	or	r24, r25
    4fb8:	19 f4       	brne	.+6      	; 0x4fc0 <_ZN6String7reserveEj+0x2e>
    4fba:	e8 81       	ld	r30, Y
    4fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fbe:	10 82       	st	Z, r1
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	08 95       	ret

00004fc8 <_ZN6String4copyEPKcj>:
    4fc8:	ef 92       	push	r14
    4fca:	ff 92       	push	r15
    4fcc:	0f 93       	push	r16
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	ec 01       	movw	r28, r24
    4fd6:	7b 01       	movw	r14, r22
    4fd8:	8a 01       	movw	r16, r20
    4fda:	ba 01       	movw	r22, r20
    4fdc:	da df       	rcall	.-76     	; 0x4f92 <_ZN6String7reserveEj>
    4fde:	81 11       	cpse	r24, r1
    4fe0:	03 c0       	rjmp	.+6      	; 0x4fe8 <_ZN6String4copyEPKcj+0x20>
    4fe2:	ce 01       	movw	r24, r28
    4fe4:	ac df       	rcall	.-168    	; 0x4f3e <_ZN6String10invalidateEv>
    4fe6:	06 c0       	rjmp	.+12     	; 0x4ff4 <_ZN6String4copyEPKcj+0x2c>
    4fe8:	1d 83       	std	Y+5, r17	; 0x05
    4fea:	0c 83       	std	Y+4, r16	; 0x04
    4fec:	b7 01       	movw	r22, r14
    4fee:	88 81       	ld	r24, Y
    4ff0:	99 81       	ldd	r25, Y+1	; 0x01
    4ff2:	42 d6       	rcall	.+3204   	; 0x5c78 <strcpy>
    4ff4:	ce 01       	movw	r24, r28
    4ff6:	df 91       	pop	r29
    4ff8:	cf 91       	pop	r28
    4ffa:	1f 91       	pop	r17
    4ffc:	0f 91       	pop	r16
    4ffe:	ff 90       	pop	r15
    5000:	ef 90       	pop	r14
    5002:	08 95       	ret

00005004 <_ZN6StringC1EPKc>:
    5004:	fc 01       	movw	r30, r24
    5006:	11 82       	std	Z+1, r1	; 0x01
    5008:	10 82       	st	Z, r1
    500a:	13 82       	std	Z+3, r1	; 0x03
    500c:	12 82       	std	Z+2, r1	; 0x02
    500e:	15 82       	std	Z+5, r1	; 0x05
    5010:	14 82       	std	Z+4, r1	; 0x04
    5012:	61 15       	cp	r22, r1
    5014:	71 05       	cpc	r23, r1
    5016:	49 f0       	breq	.+18     	; 0x502a <_ZN6StringC1EPKc+0x26>
    5018:	fb 01       	movw	r30, r22
    501a:	01 90       	ld	r0, Z+
    501c:	00 20       	and	r0, r0
    501e:	e9 f7       	brne	.-6      	; 0x501a <_ZN6StringC1EPKc+0x16>
    5020:	31 97       	sbiw	r30, 0x01	; 1
    5022:	af 01       	movw	r20, r30
    5024:	46 1b       	sub	r20, r22
    5026:	57 0b       	sbc	r21, r23
    5028:	cf cf       	rjmp	.-98     	; 0x4fc8 <_ZN6String4copyEPKcj>
    502a:	08 95       	ret

0000502c <_ZN6StringaSERKS_>:
    502c:	cf 93       	push	r28
    502e:	df 93       	push	r29
    5030:	ec 01       	movw	r28, r24
    5032:	fb 01       	movw	r30, r22
    5034:	86 17       	cp	r24, r22
    5036:	97 07       	cpc	r25, r23
    5038:	51 f0       	breq	.+20     	; 0x504e <_ZN6StringaSERKS_+0x22>
    503a:	60 81       	ld	r22, Z
    503c:	71 81       	ldd	r23, Z+1	; 0x01
    503e:	61 15       	cp	r22, r1
    5040:	71 05       	cpc	r23, r1
    5042:	21 f0       	breq	.+8      	; 0x504c <_ZN6StringaSERKS_+0x20>
    5044:	44 81       	ldd	r20, Z+4	; 0x04
    5046:	55 81       	ldd	r21, Z+5	; 0x05
    5048:	bf df       	rcall	.-130    	; 0x4fc8 <_ZN6String4copyEPKcj>
    504a:	01 c0       	rjmp	.+2      	; 0x504e <_ZN6StringaSERKS_+0x22>
    504c:	78 df       	rcall	.-272    	; 0x4f3e <_ZN6String10invalidateEv>
    504e:	ce 01       	movw	r24, r28
    5050:	df 91       	pop	r29
    5052:	cf 91       	pop	r28
    5054:	08 95       	ret

00005056 <_ZN6StringC1ERKS_>:
    5056:	fc 01       	movw	r30, r24
    5058:	11 82       	std	Z+1, r1	; 0x01
    505a:	10 82       	st	Z, r1
    505c:	13 82       	std	Z+3, r1	; 0x03
    505e:	12 82       	std	Z+2, r1	; 0x02
    5060:	15 82       	std	Z+5, r1	; 0x05
    5062:	14 82       	std	Z+4, r1	; 0x04
    5064:	e3 cf       	rjmp	.-58     	; 0x502c <_ZN6StringaSERKS_>

00005066 <_ZN6StringaSEPKc>:
    5066:	cf 93       	push	r28
    5068:	df 93       	push	r29
    506a:	ec 01       	movw	r28, r24
    506c:	61 15       	cp	r22, r1
    506e:	71 05       	cpc	r23, r1
    5070:	51 f0       	breq	.+20     	; 0x5086 <_ZN6StringaSEPKc+0x20>
    5072:	fb 01       	movw	r30, r22
    5074:	01 90       	ld	r0, Z+
    5076:	00 20       	and	r0, r0
    5078:	e9 f7       	brne	.-6      	; 0x5074 <_ZN6StringaSEPKc+0xe>
    507a:	31 97       	sbiw	r30, 0x01	; 1
    507c:	af 01       	movw	r20, r30
    507e:	46 1b       	sub	r20, r22
    5080:	57 0b       	sbc	r21, r23
    5082:	a2 df       	rcall	.-188    	; 0x4fc8 <_ZN6String4copyEPKcj>
    5084:	01 c0       	rjmp	.+2      	; 0x5088 <_ZN6StringaSEPKc+0x22>
    5086:	5b df       	rcall	.-330    	; 0x4f3e <_ZN6String10invalidateEv>
    5088:	ce 01       	movw	r24, r28
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	08 95       	ret

00005090 <_ZN6StringC1Efh>:
    5090:	ef 92       	push	r14
    5092:	ff 92       	push	r15
    5094:	0f 93       	push	r16
    5096:	1f 93       	push	r17
    5098:	cf 93       	push	r28
    509a:	df 93       	push	r29
    509c:	cd b7       	in	r28, 0x3d	; 61
    509e:	de b7       	in	r29, 0x3e	; 62
    50a0:	a1 97       	sbiw	r28, 0x21	; 33
    50a2:	0f b6       	in	r0, 0x3f	; 63
    50a4:	f8 94       	cli
    50a6:	de bf       	out	0x3e, r29	; 62
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	cd bf       	out	0x3d, r28	; 61
    50ac:	7c 01       	movw	r14, r24
    50ae:	cb 01       	movw	r24, r22
    50b0:	ba 01       	movw	r22, r20
    50b2:	f7 01       	movw	r30, r14
    50b4:	11 82       	std	Z+1, r1	; 0x01
    50b6:	10 82       	st	Z, r1
    50b8:	13 82       	std	Z+3, r1	; 0x03
    50ba:	12 82       	std	Z+2, r1	; 0x02
    50bc:	15 82       	std	Z+5, r1	; 0x05
    50be:	14 82       	std	Z+4, r1	; 0x04
    50c0:	42 e0       	ldi	r20, 0x02	; 2
    50c2:	42 0f       	add	r20, r18
    50c4:	8e 01       	movw	r16, r28
    50c6:	0f 5f       	subi	r16, 0xFF	; 255
    50c8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ca:	38 d2       	rcall	.+1136   	; 0x553c <dtostrf>
    50cc:	bc 01       	movw	r22, r24
    50ce:	c7 01       	movw	r24, r14
    50d0:	ca df       	rcall	.-108    	; 0x5066 <_ZN6StringaSEPKc>
    50d2:	a1 96       	adiw	r28, 0x21	; 33
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	ff 90       	pop	r15
    50e8:	ef 90       	pop	r14
    50ea:	08 95       	ret

000050ec <_ZN6StringC1Edh>:
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	0f 93       	push	r16
    50f2:	1f 93       	push	r17
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62
    50fc:	a1 97       	sbiw	r28, 0x21	; 33
    50fe:	0f b6       	in	r0, 0x3f	; 63
    5100:	f8 94       	cli
    5102:	de bf       	out	0x3e, r29	; 62
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	cd bf       	out	0x3d, r28	; 61
    5108:	7c 01       	movw	r14, r24
    510a:	cb 01       	movw	r24, r22
    510c:	ba 01       	movw	r22, r20
    510e:	f7 01       	movw	r30, r14
    5110:	11 82       	std	Z+1, r1	; 0x01
    5112:	10 82       	st	Z, r1
    5114:	13 82       	std	Z+3, r1	; 0x03
    5116:	12 82       	std	Z+2, r1	; 0x02
    5118:	15 82       	std	Z+5, r1	; 0x05
    511a:	14 82       	std	Z+4, r1	; 0x04
    511c:	42 e0       	ldi	r20, 0x02	; 2
    511e:	42 0f       	add	r20, r18
    5120:	8e 01       	movw	r16, r28
    5122:	0f 5f       	subi	r16, 0xFF	; 255
    5124:	1f 4f       	sbci	r17, 0xFF	; 255
    5126:	0a d2       	rcall	.+1044   	; 0x553c <dtostrf>
    5128:	bc 01       	movw	r22, r24
    512a:	c7 01       	movw	r24, r14
    512c:	9c df       	rcall	.-200    	; 0x5066 <_ZN6StringaSEPKc>
    512e:	a1 96       	adiw	r28, 0x21	; 33
    5130:	0f b6       	in	r0, 0x3f	; 63
    5132:	f8 94       	cli
    5134:	de bf       	out	0x3e, r29	; 62
    5136:	0f be       	out	0x3f, r0	; 63
    5138:	cd bf       	out	0x3d, r28	; 61
    513a:	df 91       	pop	r29
    513c:	cf 91       	pop	r28
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	ff 90       	pop	r15
    5144:	ef 90       	pop	r14
    5146:	08 95       	ret

00005148 <_ZN6String6concatEPKcj>:
    5148:	ef 92       	push	r14
    514a:	ff 92       	push	r15
    514c:	0f 93       	push	r16
    514e:	1f 93       	push	r17
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	fc 01       	movw	r30, r24
    5156:	24 81       	ldd	r18, Z+4	; 0x04
    5158:	35 81       	ldd	r19, Z+5	; 0x05
    515a:	61 15       	cp	r22, r1
    515c:	71 05       	cpc	r23, r1
    515e:	11 f4       	brne	.+4      	; 0x5164 <_ZN6String6concatEPKcj+0x1c>
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	17 c0       	rjmp	.+46     	; 0x5192 <_ZN6String6concatEPKcj+0x4a>
    5164:	41 15       	cp	r20, r1
    5166:	51 05       	cpc	r21, r1
    5168:	99 f0       	breq	.+38     	; 0x5190 <_ZN6String6concatEPKcj+0x48>
    516a:	7b 01       	movw	r14, r22
    516c:	ec 01       	movw	r28, r24
    516e:	8a 01       	movw	r16, r20
    5170:	02 0f       	add	r16, r18
    5172:	13 1f       	adc	r17, r19
    5174:	b8 01       	movw	r22, r16
    5176:	0d df       	rcall	.-486    	; 0x4f92 <_ZN6String7reserveEj>
    5178:	88 23       	and	r24, r24
    517a:	91 f3       	breq	.-28     	; 0x5160 <_ZN6String6concatEPKcj+0x18>
    517c:	28 81       	ld	r18, Y
    517e:	39 81       	ldd	r19, Y+1	; 0x01
    5180:	8c 81       	ldd	r24, Y+4	; 0x04
    5182:	9d 81       	ldd	r25, Y+5	; 0x05
    5184:	b7 01       	movw	r22, r14
    5186:	82 0f       	add	r24, r18
    5188:	93 1f       	adc	r25, r19
    518a:	76 d5       	rcall	.+2796   	; 0x5c78 <strcpy>
    518c:	1d 83       	std	Y+5, r17	; 0x05
    518e:	0c 83       	std	Y+4, r16	; 0x04
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	df 91       	pop	r29
    5194:	cf 91       	pop	r28
    5196:	1f 91       	pop	r17
    5198:	0f 91       	pop	r16
    519a:	ff 90       	pop	r15
    519c:	ef 90       	pop	r14
    519e:	08 95       	ret

000051a0 <_ZN6String6concatEPKc>:
    51a0:	61 15       	cp	r22, r1
    51a2:	71 05       	cpc	r23, r1
    51a4:	49 f0       	breq	.+18     	; 0x51b8 <_ZN6String6concatEPKc+0x18>
    51a6:	fb 01       	movw	r30, r22
    51a8:	01 90       	ld	r0, Z+
    51aa:	00 20       	and	r0, r0
    51ac:	e9 f7       	brne	.-6      	; 0x51a8 <_ZN6String6concatEPKc+0x8>
    51ae:	31 97       	sbiw	r30, 0x01	; 1
    51b0:	af 01       	movw	r20, r30
    51b2:	46 1b       	sub	r20, r22
    51b4:	57 0b       	sbc	r21, r23
    51b6:	c8 cf       	rjmp	.-112    	; 0x5148 <_ZN6String6concatEPKcj>
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	08 95       	ret

000051bc <_ZN6String6concatEc>:
    51bc:	cf 93       	push	r28
    51be:	df 93       	push	r29
    51c0:	00 d0       	rcall	.+0      	; 0x51c2 <_ZN6String6concatEc+0x6>
    51c2:	cd b7       	in	r28, 0x3d	; 61
    51c4:	de b7       	in	r29, 0x3e	; 62
    51c6:	69 83       	std	Y+1, r22	; 0x01
    51c8:	1a 82       	std	Y+2, r1	; 0x02
    51ca:	41 e0       	ldi	r20, 0x01	; 1
    51cc:	50 e0       	ldi	r21, 0x00	; 0
    51ce:	be 01       	movw	r22, r28
    51d0:	6f 5f       	subi	r22, 0xFF	; 255
    51d2:	7f 4f       	sbci	r23, 0xFF	; 255
    51d4:	b9 df       	rcall	.-142    	; 0x5148 <_ZN6String6concatEPKcj>
    51d6:	0f 90       	pop	r0
    51d8:	0f 90       	pop	r0
    51da:	df 91       	pop	r29
    51dc:	cf 91       	pop	r28
    51de:	08 95       	ret

000051e0 <_ZplRK15StringSumHelperRK6String>:
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	ec 01       	movw	r28, r24
    51e6:	fb 01       	movw	r30, r22
    51e8:	44 81       	ldd	r20, Z+4	; 0x04
    51ea:	55 81       	ldd	r21, Z+5	; 0x05
    51ec:	60 81       	ld	r22, Z
    51ee:	71 81       	ldd	r23, Z+1	; 0x01
    51f0:	ab df       	rcall	.-170    	; 0x5148 <_ZN6String6concatEPKcj>
    51f2:	81 11       	cpse	r24, r1
    51f4:	02 c0       	rjmp	.+4      	; 0x51fa <_ZplRK15StringSumHelperRK6String+0x1a>
    51f6:	ce 01       	movw	r24, r28
    51f8:	a2 de       	rcall	.-700    	; 0x4f3e <_ZN6String10invalidateEv>
    51fa:	ce 01       	movw	r24, r28
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	08 95       	ret

00005202 <_ZNK6String6equalsEPKc>:
    5202:	fc 01       	movw	r30, r24
    5204:	24 81       	ldd	r18, Z+4	; 0x04
    5206:	35 81       	ldd	r19, Z+5	; 0x05
    5208:	23 2b       	or	r18, r19
    520a:	31 f4       	brne	.+12     	; 0x5218 <_ZNK6String6equalsEPKc+0x16>
    520c:	21 e0       	ldi	r18, 0x01	; 1
    520e:	61 15       	cp	r22, r1
    5210:	71 05       	cpc	r23, r1
    5212:	99 f0       	breq	.+38     	; 0x523a <_ZNK6String6equalsEPKc+0x38>
    5214:	fb 01       	movw	r30, r22
    5216:	08 c0       	rjmp	.+16     	; 0x5228 <_ZNK6String6equalsEPKc+0x26>
    5218:	fc 01       	movw	r30, r24
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	61 15       	cp	r22, r1
    5220:	71 05       	cpc	r23, r1
    5222:	31 f4       	brne	.+12     	; 0x5230 <_ZNK6String6equalsEPKc+0x2e>
    5224:	21 e0       	ldi	r18, 0x01	; 1
    5226:	fc 01       	movw	r30, r24
    5228:	80 81       	ld	r24, Z
    522a:	88 23       	and	r24, r24
    522c:	31 f0       	breq	.+12     	; 0x523a <_ZNK6String6equalsEPKc+0x38>
    522e:	04 c0       	rjmp	.+8      	; 0x5238 <_ZNK6String6equalsEPKc+0x36>
    5230:	1a d5       	rcall	.+2612   	; 0x5c66 <strcmp>
    5232:	21 e0       	ldi	r18, 0x01	; 1
    5234:	89 2b       	or	r24, r25
    5236:	09 f0       	breq	.+2      	; 0x523a <_ZNK6String6equalsEPKc+0x38>
    5238:	20 e0       	ldi	r18, 0x00	; 0
    523a:	82 2f       	mov	r24, r18
    523c:	08 95       	ret

0000523e <_ZNK6String10startsWithERKS_j>:
    523e:	db 01       	movw	r26, r22
    5240:	14 96       	adiw	r26, 0x04	; 4
    5242:	ed 91       	ld	r30, X+
    5244:	fc 91       	ld	r31, X
    5246:	15 97       	sbiw	r26, 0x05	; 5
    5248:	dc 01       	movw	r26, r24
    524a:	14 96       	adiw	r26, 0x04	; 4
    524c:	2d 91       	ld	r18, X+
    524e:	3c 91       	ld	r19, X
    5250:	15 97       	sbiw	r26, 0x05	; 5
    5252:	2e 1b       	sub	r18, r30
    5254:	3f 0b       	sbc	r19, r31
    5256:	24 17       	cp	r18, r20
    5258:	35 07       	cpc	r19, r21
    525a:	98 f0       	brcs	.+38     	; 0x5282 <_ZNK6String10startsWithERKS_j+0x44>
    525c:	2d 91       	ld	r18, X+
    525e:	3c 91       	ld	r19, X
    5260:	21 15       	cp	r18, r1
    5262:	31 05       	cpc	r19, r1
    5264:	71 f0       	breq	.+28     	; 0x5282 <_ZNK6String10startsWithERKS_j+0x44>
    5266:	db 01       	movw	r26, r22
    5268:	6d 91       	ld	r22, X+
    526a:	7c 91       	ld	r23, X
    526c:	61 15       	cp	r22, r1
    526e:	71 05       	cpc	r23, r1
    5270:	41 f0       	breq	.+16     	; 0x5282 <_ZNK6String10startsWithERKS_j+0x44>
    5272:	ca 01       	movw	r24, r20
    5274:	af 01       	movw	r20, r30
    5276:	82 0f       	add	r24, r18
    5278:	93 1f       	adc	r25, r19
    527a:	05 d5       	rcall	.+2570   	; 0x5c86 <strncmp>
    527c:	21 e0       	ldi	r18, 0x01	; 1
    527e:	89 2b       	or	r24, r25
    5280:	09 f0       	breq	.+2      	; 0x5284 <_ZNK6String10startsWithERKS_j+0x46>
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	82 2f       	mov	r24, r18
    5286:	08 95       	ret

00005288 <_ZNK6String10startsWithERKS_>:
    5288:	fc 01       	movw	r30, r24
    528a:	44 81       	ldd	r20, Z+4	; 0x04
    528c:	55 81       	ldd	r21, Z+5	; 0x05
    528e:	fb 01       	movw	r30, r22
    5290:	24 81       	ldd	r18, Z+4	; 0x04
    5292:	35 81       	ldd	r19, Z+5	; 0x05
    5294:	42 17       	cp	r20, r18
    5296:	53 07       	cpc	r21, r19
    5298:	18 f0       	brcs	.+6      	; 0x52a0 <_ZNK6String10startsWithERKS_+0x18>
    529a:	40 e0       	ldi	r20, 0x00	; 0
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	cf cf       	rjmp	.-98     	; 0x523e <_ZNK6String10startsWithERKS_j>
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	08 95       	ret

000052a4 <_ZNK6StringixEj>:
    52a4:	fc 01       	movw	r30, r24
    52a6:	24 81       	ldd	r18, Z+4	; 0x04
    52a8:	35 81       	ldd	r19, Z+5	; 0x05
    52aa:	62 17       	cp	r22, r18
    52ac:	73 07       	cpc	r23, r19
    52ae:	48 f4       	brcc	.+18     	; 0x52c2 <_ZNK6StringixEj+0x1e>
    52b0:	80 81       	ld	r24, Z
    52b2:	91 81       	ldd	r25, Z+1	; 0x01
    52b4:	00 97       	sbiw	r24, 0x00	; 0
    52b6:	29 f0       	breq	.+10     	; 0x52c2 <_ZNK6StringixEj+0x1e>
    52b8:	fc 01       	movw	r30, r24
    52ba:	e6 0f       	add	r30, r22
    52bc:	f7 1f       	adc	r31, r23
    52be:	80 81       	ld	r24, Z
    52c0:	08 95       	ret
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	08 95       	ret

000052c6 <_ZNK6String6charAtEj>:
    52c6:	ee cf       	rjmp	.-36     	; 0x52a4 <_ZNK6StringixEj>

000052c8 <_ZNK6String9substringEjj>:
    52c8:	bf 92       	push	r11
    52ca:	cf 92       	push	r12
    52cc:	df 92       	push	r13
    52ce:	ef 92       	push	r14
    52d0:	ff 92       	push	r15
    52d2:	0f 93       	push	r16
    52d4:	1f 93       	push	r17
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	7c 01       	movw	r14, r24
    52dc:	6b 01       	movw	r12, r22
    52de:	8a 01       	movw	r16, r20
    52e0:	e9 01       	movw	r28, r18
    52e2:	24 17       	cp	r18, r20
    52e4:	35 07       	cpc	r19, r21
    52e6:	20 f4       	brcc	.+8      	; 0x52f0 <_ZNK6String9substringEjj+0x28>
    52e8:	81 2f       	mov	r24, r17
    52ea:	89 01       	movw	r16, r18
    52ec:	c4 2f       	mov	r28, r20
    52ee:	d8 2f       	mov	r29, r24
    52f0:	6f ec       	ldi	r22, 0xCF	; 207
    52f2:	71 e0       	ldi	r23, 0x01	; 1
    52f4:	c7 01       	movw	r24, r14
    52f6:	86 de       	rcall	.-756    	; 0x5004 <_ZN6StringC1EPKc>
    52f8:	d6 01       	movw	r26, r12
    52fa:	14 96       	adiw	r26, 0x04	; 4
    52fc:	8d 91       	ld	r24, X+
    52fe:	9c 91       	ld	r25, X
    5300:	15 97       	sbiw	r26, 0x05	; 5
    5302:	08 17       	cp	r16, r24
    5304:	19 07       	cpc	r17, r25
    5306:	c8 f4       	brcc	.+50     	; 0x533a <_ZNK6String9substringEjj+0x72>
    5308:	8c 17       	cp	r24, r28
    530a:	9d 07       	cpc	r25, r29
    530c:	08 f4       	brcc	.+2      	; 0x5310 <_ZNK6String9substringEjj+0x48>
    530e:	ec 01       	movw	r28, r24
    5310:	d6 01       	movw	r26, r12
    5312:	ed 91       	ld	r30, X+
    5314:	fc 91       	ld	r31, X
    5316:	11 97       	sbiw	r26, 0x01	; 1
    5318:	ec 0f       	add	r30, r28
    531a:	fd 1f       	adc	r31, r29
    531c:	b0 80       	ld	r11, Z
    531e:	10 82       	st	Z, r1
    5320:	4d 91       	ld	r20, X+
    5322:	5c 91       	ld	r21, X
    5324:	ba 01       	movw	r22, r20
    5326:	60 0f       	add	r22, r16
    5328:	71 1f       	adc	r23, r17
    532a:	c7 01       	movw	r24, r14
    532c:	9c de       	rcall	.-712    	; 0x5066 <_ZN6StringaSEPKc>
    532e:	d6 01       	movw	r26, r12
    5330:	ed 91       	ld	r30, X+
    5332:	fc 91       	ld	r31, X
    5334:	ec 0f       	add	r30, r28
    5336:	fd 1f       	adc	r31, r29
    5338:	b0 82       	st	Z, r11
    533a:	c7 01       	movw	r24, r14
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	1f 91       	pop	r17
    5342:	0f 91       	pop	r16
    5344:	ff 90       	pop	r15
    5346:	ef 90       	pop	r14
    5348:	df 90       	pop	r13
    534a:	cf 90       	pop	r12
    534c:	bf 90       	pop	r11
    534e:	08 95       	ret

00005350 <_ZN6String4trimEv>:
    5350:	af 92       	push	r10
    5352:	bf 92       	push	r11
    5354:	cf 92       	push	r12
    5356:	df 92       	push	r13
    5358:	ef 92       	push	r14
    535a:	ff 92       	push	r15
    535c:	0f 93       	push	r16
    535e:	1f 93       	push	r17
    5360:	cf 93       	push	r28
    5362:	df 93       	push	r29
    5364:	dc 01       	movw	r26, r24
    5366:	cd 90       	ld	r12, X+
    5368:	dc 90       	ld	r13, X
    536a:	11 97       	sbiw	r26, 0x01	; 1
    536c:	c1 14       	cp	r12, r1
    536e:	d1 04       	cpc	r13, r1
    5370:	d9 f1       	breq	.+118    	; 0x53e8 <_ZN6String4trimEv+0x98>
    5372:	14 96       	adiw	r26, 0x04	; 4
    5374:	cd 91       	ld	r28, X+
    5376:	dc 91       	ld	r29, X
    5378:	15 97       	sbiw	r26, 0x05	; 5
    537a:	20 97       	sbiw	r28, 0x00	; 0
    537c:	a9 f1       	breq	.+106    	; 0x53e8 <_ZN6String4trimEv+0x98>
    537e:	8c 01       	movw	r16, r24
    5380:	56 01       	movw	r10, r12
    5382:	75 01       	movw	r14, r10
    5384:	bf ef       	ldi	r27, 0xFF	; 255
    5386:	ab 1a       	sub	r10, r27
    5388:	bb 0a       	sbc	r11, r27
    538a:	f7 01       	movw	r30, r14
    538c:	80 81       	ld	r24, Z
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	41 d4       	rcall	.+2178   	; 0x5c14 <isspace>
    5392:	89 2b       	or	r24, r25
    5394:	b1 f7       	brne	.-20     	; 0x5382 <_ZN6String4trimEv+0x32>
    5396:	21 97       	sbiw	r28, 0x01	; 1
    5398:	cc 0d       	add	r28, r12
    539a:	dd 1d       	adc	r29, r13
    539c:	88 81       	ld	r24, Y
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	39 d4       	rcall	.+2162   	; 0x5c14 <isspace>
    53a2:	89 2b       	or	r24, r25
    53a4:	89 f4       	brne	.+34     	; 0x53c8 <_ZN6String4trimEv+0x78>
    53a6:	ae 01       	movw	r20, r28
    53a8:	4f 5f       	subi	r20, 0xFF	; 255
    53aa:	5f 4f       	sbci	r21, 0xFF	; 255
    53ac:	4e 19       	sub	r20, r14
    53ae:	5f 09       	sbc	r21, r15
    53b0:	d8 01       	movw	r26, r16
    53b2:	15 96       	adiw	r26, 0x05	; 5
    53b4:	5c 93       	st	X, r21
    53b6:	4e 93       	st	-X, r20
    53b8:	14 97       	sbiw	r26, 0x04	; 4
    53ba:	ce 14       	cp	r12, r14
    53bc:	df 04       	cpc	r13, r15
    53be:	48 f4       	brcc	.+18     	; 0x53d2 <_ZN6String4trimEv+0x82>
    53c0:	b7 01       	movw	r22, r14
    53c2:	c6 01       	movw	r24, r12
    53c4:	47 d4       	rcall	.+2190   	; 0x5c54 <memcpy>
    53c6:	05 c0       	rjmp	.+10     	; 0x53d2 <_ZN6String4trimEv+0x82>
    53c8:	ce 15       	cp	r28, r14
    53ca:	df 05       	cpc	r29, r15
    53cc:	60 f3       	brcs	.-40     	; 0x53a6 <_ZN6String4trimEv+0x56>
    53ce:	21 97       	sbiw	r28, 0x01	; 1
    53d0:	e5 cf       	rjmp	.-54     	; 0x539c <_ZN6String4trimEv+0x4c>
    53d2:	d8 01       	movw	r26, r16
    53d4:	ed 91       	ld	r30, X+
    53d6:	fc 91       	ld	r31, X
    53d8:	11 97       	sbiw	r26, 0x01	; 1
    53da:	14 96       	adiw	r26, 0x04	; 4
    53dc:	8d 91       	ld	r24, X+
    53de:	9c 91       	ld	r25, X
    53e0:	15 97       	sbiw	r26, 0x05	; 5
    53e2:	e8 0f       	add	r30, r24
    53e4:	f9 1f       	adc	r31, r25
    53e6:	10 82       	st	Z, r1
    53e8:	df 91       	pop	r29
    53ea:	cf 91       	pop	r28
    53ec:	1f 91       	pop	r17
    53ee:	0f 91       	pop	r16
    53f0:	ff 90       	pop	r15
    53f2:	ef 90       	pop	r14
    53f4:	df 90       	pop	r13
    53f6:	cf 90       	pop	r12
    53f8:	bf 90       	pop	r11
    53fa:	af 90       	pop	r10
    53fc:	08 95       	ret

000053fe <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    53fe:	fc 01       	movw	r30, r24
    5400:	80 81       	ld	r24, Z
    5402:	91 81       	ldd	r25, Z+1	; 0x01
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	09 f0       	breq	.+2      	; 0x540a <_ZNK6String7toFloatEv+0xc>
    5408:	02 c4       	rjmp	.+2052   	; 0x5c0e <atof>
	return 0;
}
    540a:	60 e0       	ldi	r22, 0x00	; 0
    540c:	70 e0       	ldi	r23, 0x00	; 0
    540e:	cb 01       	movw	r24, r22
    5410:	08 95       	ret

00005412 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5412:	08 95       	ret

00005414 <__udivmodsi4>:
    5414:	a1 e2       	ldi	r26, 0x21	; 33
    5416:	1a 2e       	mov	r1, r26
    5418:	aa 1b       	sub	r26, r26
    541a:	bb 1b       	sub	r27, r27
    541c:	fd 01       	movw	r30, r26
    541e:	0d c0       	rjmp	.+26     	; 0x543a <__udivmodsi4_ep>

00005420 <__udivmodsi4_loop>:
    5420:	aa 1f       	adc	r26, r26
    5422:	bb 1f       	adc	r27, r27
    5424:	ee 1f       	adc	r30, r30
    5426:	ff 1f       	adc	r31, r31
    5428:	a2 17       	cp	r26, r18
    542a:	b3 07       	cpc	r27, r19
    542c:	e4 07       	cpc	r30, r20
    542e:	f5 07       	cpc	r31, r21
    5430:	20 f0       	brcs	.+8      	; 0x543a <__udivmodsi4_ep>
    5432:	a2 1b       	sub	r26, r18
    5434:	b3 0b       	sbc	r27, r19
    5436:	e4 0b       	sbc	r30, r20
    5438:	f5 0b       	sbc	r31, r21

0000543a <__udivmodsi4_ep>:
    543a:	66 1f       	adc	r22, r22
    543c:	77 1f       	adc	r23, r23
    543e:	88 1f       	adc	r24, r24
    5440:	99 1f       	adc	r25, r25
    5442:	1a 94       	dec	r1
    5444:	69 f7       	brne	.-38     	; 0x5420 <__udivmodsi4_loop>
    5446:	60 95       	com	r22
    5448:	70 95       	com	r23
    544a:	80 95       	com	r24
    544c:	90 95       	com	r25
    544e:	9b 01       	movw	r18, r22
    5450:	ac 01       	movw	r20, r24
    5452:	bd 01       	movw	r22, r26
    5454:	cf 01       	movw	r24, r30
    5456:	08 95       	ret

00005458 <__divmodsi4>:
    5458:	05 2e       	mov	r0, r21
    545a:	97 fb       	bst	r25, 7
    545c:	16 f4       	brtc	.+4      	; 0x5462 <__divmodsi4+0xa>
    545e:	00 94       	com	r0
    5460:	0f d0       	rcall	.+30     	; 0x5480 <__negsi2>
    5462:	57 fd       	sbrc	r21, 7
    5464:	05 d0       	rcall	.+10     	; 0x5470 <__divmodsi4_neg2>
    5466:	d6 df       	rcall	.-84     	; 0x5414 <__udivmodsi4>
    5468:	07 fc       	sbrc	r0, 7
    546a:	02 d0       	rcall	.+4      	; 0x5470 <__divmodsi4_neg2>
    546c:	46 f4       	brtc	.+16     	; 0x547e <__divmodsi4_exit>
    546e:	08 c0       	rjmp	.+16     	; 0x5480 <__negsi2>

00005470 <__divmodsi4_neg2>:
    5470:	50 95       	com	r21
    5472:	40 95       	com	r20
    5474:	30 95       	com	r19
    5476:	21 95       	neg	r18
    5478:	3f 4f       	sbci	r19, 0xFF	; 255
    547a:	4f 4f       	sbci	r20, 0xFF	; 255
    547c:	5f 4f       	sbci	r21, 0xFF	; 255

0000547e <__divmodsi4_exit>:
    547e:	08 95       	ret

00005480 <__negsi2>:
    5480:	90 95       	com	r25
    5482:	80 95       	com	r24
    5484:	70 95       	com	r23
    5486:	61 95       	neg	r22
    5488:	7f 4f       	sbci	r23, 0xFF	; 255
    548a:	8f 4f       	sbci	r24, 0xFF	; 255
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	08 95       	ret

00005490 <__tablejump2__>:
    5490:	ee 0f       	add	r30, r30
    5492:	ff 1f       	adc	r31, r31
    5494:	05 90       	lpm	r0, Z+
    5496:	f4 91       	lpm	r31, Z
    5498:	e0 2d       	mov	r30, r0
    549a:	09 94       	ijmp

0000549c <__muluhisi3>:
    549c:	40 d0       	rcall	.+128    	; 0x551e <__umulhisi3>
    549e:	a5 9f       	mul	r26, r21
    54a0:	90 0d       	add	r25, r0
    54a2:	b4 9f       	mul	r27, r20
    54a4:	90 0d       	add	r25, r0
    54a6:	a4 9f       	mul	r26, r20
    54a8:	80 0d       	add	r24, r0
    54aa:	91 1d       	adc	r25, r1
    54ac:	11 24       	eor	r1, r1
    54ae:	08 95       	ret

000054b0 <__prologue_saves__>:
    54b0:	2f 92       	push	r2
    54b2:	3f 92       	push	r3
    54b4:	4f 92       	push	r4
    54b6:	5f 92       	push	r5
    54b8:	6f 92       	push	r6
    54ba:	7f 92       	push	r7
    54bc:	8f 92       	push	r8
    54be:	9f 92       	push	r9
    54c0:	af 92       	push	r10
    54c2:	bf 92       	push	r11
    54c4:	cf 92       	push	r12
    54c6:	df 92       	push	r13
    54c8:	ef 92       	push	r14
    54ca:	ff 92       	push	r15
    54cc:	0f 93       	push	r16
    54ce:	1f 93       	push	r17
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
    54d8:	ca 1b       	sub	r28, r26
    54da:	db 0b       	sbc	r29, r27
    54dc:	0f b6       	in	r0, 0x3f	; 63
    54de:	f8 94       	cli
    54e0:	de bf       	out	0x3e, r29	; 62
    54e2:	0f be       	out	0x3f, r0	; 63
    54e4:	cd bf       	out	0x3d, r28	; 61
    54e6:	09 94       	ijmp

000054e8 <__epilogue_restores__>:
    54e8:	2a 88       	ldd	r2, Y+18	; 0x12
    54ea:	39 88       	ldd	r3, Y+17	; 0x11
    54ec:	48 88       	ldd	r4, Y+16	; 0x10
    54ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    54f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    54f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    54f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    54f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    54f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    54fa:	b9 84       	ldd	r11, Y+9	; 0x09
    54fc:	c8 84       	ldd	r12, Y+8	; 0x08
    54fe:	df 80       	ldd	r13, Y+7	; 0x07
    5500:	ee 80       	ldd	r14, Y+6	; 0x06
    5502:	fd 80       	ldd	r15, Y+5	; 0x05
    5504:	0c 81       	ldd	r16, Y+4	; 0x04
    5506:	1b 81       	ldd	r17, Y+3	; 0x03
    5508:	aa 81       	ldd	r26, Y+2	; 0x02
    550a:	b9 81       	ldd	r27, Y+1	; 0x01
    550c:	ce 0f       	add	r28, r30
    550e:	d1 1d       	adc	r29, r1
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	ed 01       	movw	r28, r26
    551c:	08 95       	ret

0000551e <__umulhisi3>:
    551e:	a2 9f       	mul	r26, r18
    5520:	b0 01       	movw	r22, r0
    5522:	b3 9f       	mul	r27, r19
    5524:	c0 01       	movw	r24, r0
    5526:	a3 9f       	mul	r26, r19
    5528:	70 0d       	add	r23, r0
    552a:	81 1d       	adc	r24, r1
    552c:	11 24       	eor	r1, r1
    552e:	91 1d       	adc	r25, r1
    5530:	b2 9f       	mul	r27, r18
    5532:	70 0d       	add	r23, r0
    5534:	81 1d       	adc	r24, r1
    5536:	11 24       	eor	r1, r1
    5538:	91 1d       	adc	r25, r1
    553a:	08 95       	ret

0000553c <dtostrf>:
    553c:	ef 92       	push	r14
    553e:	0f 93       	push	r16
    5540:	1f 93       	push	r17
    5542:	cf 93       	push	r28
    5544:	df 93       	push	r29
    5546:	e8 01       	movw	r28, r16
    5548:	47 fd       	sbrc	r20, 7
    554a:	02 c0       	rjmp	.+4      	; 0x5550 <dtostrf+0x14>
    554c:	34 e0       	ldi	r19, 0x04	; 4
    554e:	01 c0       	rjmp	.+2      	; 0x5552 <dtostrf+0x16>
    5550:	34 e1       	ldi	r19, 0x14	; 20
    5552:	e4 2f       	mov	r30, r20
    5554:	44 0f       	add	r20, r20
    5556:	ff 0b       	sbc	r31, r31
    5558:	f7 ff       	sbrs	r31, 7
    555a:	03 c0       	rjmp	.+6      	; 0x5562 <dtostrf+0x26>
    555c:	f1 95       	neg	r31
    555e:	e1 95       	neg	r30
    5560:	f1 09       	sbc	r31, r1
    5562:	e3 2e       	mov	r14, r19
    5564:	02 2f       	mov	r16, r18
    5566:	2e 2f       	mov	r18, r30
    5568:	ae 01       	movw	r20, r28
    556a:	9b d3       	rcall	.+1846   	; 0x5ca2 <dtoa_prf>
    556c:	ce 01       	movw	r24, r28
    556e:	df 91       	pop	r29
    5570:	cf 91       	pop	r28
    5572:	1f 91       	pop	r17
    5574:	0f 91       	pop	r16
    5576:	ef 90       	pop	r14
    5578:	08 95       	ret

0000557a <malloc>:
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	82 30       	cpi	r24, 0x02	; 2
    5580:	91 05       	cpc	r25, r1
    5582:	10 f4       	brcc	.+4      	; 0x5588 <malloc+0xe>
    5584:	82 e0       	ldi	r24, 0x02	; 2
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <__flp>
    558c:	f0 91 10 06 	lds	r31, 0x0610	; 0x800610 <__flp+0x1>
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	c0 e0       	ldi	r28, 0x00	; 0
    5596:	d0 e0       	ldi	r29, 0x00	; 0
    5598:	30 97       	sbiw	r30, 0x00	; 0
    559a:	11 f1       	breq	.+68     	; 0x55e0 <malloc+0x66>
    559c:	40 81       	ld	r20, Z
    559e:	51 81       	ldd	r21, Z+1	; 0x01
    55a0:	48 17       	cp	r20, r24
    55a2:	59 07       	cpc	r21, r25
    55a4:	c0 f0       	brcs	.+48     	; 0x55d6 <malloc+0x5c>
    55a6:	48 17       	cp	r20, r24
    55a8:	59 07       	cpc	r21, r25
    55aa:	61 f4       	brne	.+24     	; 0x55c4 <malloc+0x4a>
    55ac:	82 81       	ldd	r24, Z+2	; 0x02
    55ae:	93 81       	ldd	r25, Z+3	; 0x03
    55b0:	20 97       	sbiw	r28, 0x00	; 0
    55b2:	19 f0       	breq	.+6      	; 0x55ba <malloc+0x40>
    55b4:	9b 83       	std	Y+3, r25	; 0x03
    55b6:	8a 83       	std	Y+2, r24	; 0x02
    55b8:	2b c0       	rjmp	.+86     	; 0x5610 <malloc+0x96>
    55ba:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <__flp+0x1>
    55be:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <__flp>
    55c2:	26 c0       	rjmp	.+76     	; 0x5610 <malloc+0x96>
    55c4:	21 15       	cp	r18, r1
    55c6:	31 05       	cpc	r19, r1
    55c8:	19 f0       	breq	.+6      	; 0x55d0 <malloc+0x56>
    55ca:	42 17       	cp	r20, r18
    55cc:	53 07       	cpc	r21, r19
    55ce:	18 f4       	brcc	.+6      	; 0x55d6 <malloc+0x5c>
    55d0:	9a 01       	movw	r18, r20
    55d2:	be 01       	movw	r22, r28
    55d4:	df 01       	movw	r26, r30
    55d6:	ef 01       	movw	r28, r30
    55d8:	02 80       	ldd	r0, Z+2	; 0x02
    55da:	f3 81       	ldd	r31, Z+3	; 0x03
    55dc:	e0 2d       	mov	r30, r0
    55de:	dc cf       	rjmp	.-72     	; 0x5598 <malloc+0x1e>
    55e0:	21 15       	cp	r18, r1
    55e2:	31 05       	cpc	r19, r1
    55e4:	09 f1       	breq	.+66     	; 0x5628 <malloc+0xae>
    55e6:	28 1b       	sub	r18, r24
    55e8:	39 0b       	sbc	r19, r25
    55ea:	24 30       	cpi	r18, 0x04	; 4
    55ec:	31 05       	cpc	r19, r1
    55ee:	90 f4       	brcc	.+36     	; 0x5614 <malloc+0x9a>
    55f0:	12 96       	adiw	r26, 0x02	; 2
    55f2:	8d 91       	ld	r24, X+
    55f4:	9c 91       	ld	r25, X
    55f6:	13 97       	sbiw	r26, 0x03	; 3
    55f8:	61 15       	cp	r22, r1
    55fa:	71 05       	cpc	r23, r1
    55fc:	21 f0       	breq	.+8      	; 0x5606 <malloc+0x8c>
    55fe:	fb 01       	movw	r30, r22
    5600:	93 83       	std	Z+3, r25	; 0x03
    5602:	82 83       	std	Z+2, r24	; 0x02
    5604:	04 c0       	rjmp	.+8      	; 0x560e <malloc+0x94>
    5606:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <__flp+0x1>
    560a:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <__flp>
    560e:	fd 01       	movw	r30, r26
    5610:	32 96       	adiw	r30, 0x02	; 2
    5612:	44 c0       	rjmp	.+136    	; 0x569c <malloc+0x122>
    5614:	fd 01       	movw	r30, r26
    5616:	e2 0f       	add	r30, r18
    5618:	f3 1f       	adc	r31, r19
    561a:	81 93       	st	Z+, r24
    561c:	91 93       	st	Z+, r25
    561e:	22 50       	subi	r18, 0x02	; 2
    5620:	31 09       	sbc	r19, r1
    5622:	2d 93       	st	X+, r18
    5624:	3c 93       	st	X, r19
    5626:	3a c0       	rjmp	.+116    	; 0x569c <malloc+0x122>
    5628:	20 91 0d 06 	lds	r18, 0x060D	; 0x80060d <__brkval>
    562c:	30 91 0e 06 	lds	r19, 0x060E	; 0x80060e <__brkval+0x1>
    5630:	23 2b       	or	r18, r19
    5632:	41 f4       	brne	.+16     	; 0x5644 <malloc+0xca>
    5634:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5638:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    563c:	30 93 0e 06 	sts	0x060E, r19	; 0x80060e <__brkval+0x1>
    5640:	20 93 0d 06 	sts	0x060D, r18	; 0x80060d <__brkval>
    5644:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5648:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    564c:	21 15       	cp	r18, r1
    564e:	31 05       	cpc	r19, r1
    5650:	41 f4       	brne	.+16     	; 0x5662 <malloc+0xe8>
    5652:	2d b7       	in	r18, 0x3d	; 61
    5654:	3e b7       	in	r19, 0x3e	; 62
    5656:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    565a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    565e:	24 1b       	sub	r18, r20
    5660:	35 0b       	sbc	r19, r21
    5662:	e0 91 0d 06 	lds	r30, 0x060D	; 0x80060d <__brkval>
    5666:	f0 91 0e 06 	lds	r31, 0x060E	; 0x80060e <__brkval+0x1>
    566a:	e2 17       	cp	r30, r18
    566c:	f3 07       	cpc	r31, r19
    566e:	a0 f4       	brcc	.+40     	; 0x5698 <malloc+0x11e>
    5670:	2e 1b       	sub	r18, r30
    5672:	3f 0b       	sbc	r19, r31
    5674:	28 17       	cp	r18, r24
    5676:	39 07       	cpc	r19, r25
    5678:	78 f0       	brcs	.+30     	; 0x5698 <malloc+0x11e>
    567a:	ac 01       	movw	r20, r24
    567c:	4e 5f       	subi	r20, 0xFE	; 254
    567e:	5f 4f       	sbci	r21, 0xFF	; 255
    5680:	24 17       	cp	r18, r20
    5682:	35 07       	cpc	r19, r21
    5684:	48 f0       	brcs	.+18     	; 0x5698 <malloc+0x11e>
    5686:	4e 0f       	add	r20, r30
    5688:	5f 1f       	adc	r21, r31
    568a:	50 93 0e 06 	sts	0x060E, r21	; 0x80060e <__brkval+0x1>
    568e:	40 93 0d 06 	sts	0x060D, r20	; 0x80060d <__brkval>
    5692:	81 93       	st	Z+, r24
    5694:	91 93       	st	Z+, r25
    5696:	02 c0       	rjmp	.+4      	; 0x569c <malloc+0x122>
    5698:	e0 e0       	ldi	r30, 0x00	; 0
    569a:	f0 e0       	ldi	r31, 0x00	; 0
    569c:	cf 01       	movw	r24, r30
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	08 95       	ret

000056a4 <free>:
    56a4:	0f 93       	push	r16
    56a6:	1f 93       	push	r17
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	09 f4       	brne	.+2      	; 0x56b2 <free+0xe>
    56b0:	8c c0       	rjmp	.+280    	; 0x57ca <free+0x126>
    56b2:	fc 01       	movw	r30, r24
    56b4:	32 97       	sbiw	r30, 0x02	; 2
    56b6:	13 82       	std	Z+3, r1	; 0x03
    56b8:	12 82       	std	Z+2, r1	; 0x02
    56ba:	00 91 0f 06 	lds	r16, 0x060F	; 0x80060f <__flp>
    56be:	10 91 10 06 	lds	r17, 0x0610	; 0x800610 <__flp+0x1>
    56c2:	01 15       	cp	r16, r1
    56c4:	11 05       	cpc	r17, r1
    56c6:	81 f4       	brne	.+32     	; 0x56e8 <free+0x44>
    56c8:	20 81       	ld	r18, Z
    56ca:	31 81       	ldd	r19, Z+1	; 0x01
    56cc:	82 0f       	add	r24, r18
    56ce:	93 1f       	adc	r25, r19
    56d0:	20 91 0d 06 	lds	r18, 0x060D	; 0x80060d <__brkval>
    56d4:	30 91 0e 06 	lds	r19, 0x060E	; 0x80060e <__brkval+0x1>
    56d8:	28 17       	cp	r18, r24
    56da:	39 07       	cpc	r19, r25
    56dc:	79 f5       	brne	.+94     	; 0x573c <free+0x98>
    56de:	f0 93 0e 06 	sts	0x060E, r31	; 0x80060e <__brkval+0x1>
    56e2:	e0 93 0d 06 	sts	0x060D, r30	; 0x80060d <__brkval>
    56e6:	71 c0       	rjmp	.+226    	; 0x57ca <free+0x126>
    56e8:	d8 01       	movw	r26, r16
    56ea:	40 e0       	ldi	r20, 0x00	; 0
    56ec:	50 e0       	ldi	r21, 0x00	; 0
    56ee:	ae 17       	cp	r26, r30
    56f0:	bf 07       	cpc	r27, r31
    56f2:	50 f4       	brcc	.+20     	; 0x5708 <free+0x64>
    56f4:	12 96       	adiw	r26, 0x02	; 2
    56f6:	2d 91       	ld	r18, X+
    56f8:	3c 91       	ld	r19, X
    56fa:	13 97       	sbiw	r26, 0x03	; 3
    56fc:	ad 01       	movw	r20, r26
    56fe:	21 15       	cp	r18, r1
    5700:	31 05       	cpc	r19, r1
    5702:	09 f1       	breq	.+66     	; 0x5746 <free+0xa2>
    5704:	d9 01       	movw	r26, r18
    5706:	f3 cf       	rjmp	.-26     	; 0x56ee <free+0x4a>
    5708:	9d 01       	movw	r18, r26
    570a:	da 01       	movw	r26, r20
    570c:	33 83       	std	Z+3, r19	; 0x03
    570e:	22 83       	std	Z+2, r18	; 0x02
    5710:	60 81       	ld	r22, Z
    5712:	71 81       	ldd	r23, Z+1	; 0x01
    5714:	86 0f       	add	r24, r22
    5716:	97 1f       	adc	r25, r23
    5718:	82 17       	cp	r24, r18
    571a:	93 07       	cpc	r25, r19
    571c:	69 f4       	brne	.+26     	; 0x5738 <free+0x94>
    571e:	ec 01       	movw	r28, r24
    5720:	28 81       	ld	r18, Y
    5722:	39 81       	ldd	r19, Y+1	; 0x01
    5724:	26 0f       	add	r18, r22
    5726:	37 1f       	adc	r19, r23
    5728:	2e 5f       	subi	r18, 0xFE	; 254
    572a:	3f 4f       	sbci	r19, 0xFF	; 255
    572c:	31 83       	std	Z+1, r19	; 0x01
    572e:	20 83       	st	Z, r18
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	9b 81       	ldd	r25, Y+3	; 0x03
    5734:	93 83       	std	Z+3, r25	; 0x03
    5736:	82 83       	std	Z+2, r24	; 0x02
    5738:	45 2b       	or	r20, r21
    573a:	29 f4       	brne	.+10     	; 0x5746 <free+0xa2>
    573c:	f0 93 10 06 	sts	0x0610, r31	; 0x800610 <__flp+0x1>
    5740:	e0 93 0f 06 	sts	0x060F, r30	; 0x80060f <__flp>
    5744:	42 c0       	rjmp	.+132    	; 0x57ca <free+0x126>
    5746:	13 96       	adiw	r26, 0x03	; 3
    5748:	fc 93       	st	X, r31
    574a:	ee 93       	st	-X, r30
    574c:	12 97       	sbiw	r26, 0x02	; 2
    574e:	ed 01       	movw	r28, r26
    5750:	49 91       	ld	r20, Y+
    5752:	59 91       	ld	r21, Y+
    5754:	9e 01       	movw	r18, r28
    5756:	24 0f       	add	r18, r20
    5758:	35 1f       	adc	r19, r21
    575a:	e2 17       	cp	r30, r18
    575c:	f3 07       	cpc	r31, r19
    575e:	71 f4       	brne	.+28     	; 0x577c <free+0xd8>
    5760:	80 81       	ld	r24, Z
    5762:	91 81       	ldd	r25, Z+1	; 0x01
    5764:	84 0f       	add	r24, r20
    5766:	95 1f       	adc	r25, r21
    5768:	02 96       	adiw	r24, 0x02	; 2
    576a:	11 96       	adiw	r26, 0x01	; 1
    576c:	9c 93       	st	X, r25
    576e:	8e 93       	st	-X, r24
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	93 81       	ldd	r25, Z+3	; 0x03
    5774:	13 96       	adiw	r26, 0x03	; 3
    5776:	9c 93       	st	X, r25
    5778:	8e 93       	st	-X, r24
    577a:	12 97       	sbiw	r26, 0x02	; 2
    577c:	e0 e0       	ldi	r30, 0x00	; 0
    577e:	f0 e0       	ldi	r31, 0x00	; 0
    5780:	d8 01       	movw	r26, r16
    5782:	12 96       	adiw	r26, 0x02	; 2
    5784:	8d 91       	ld	r24, X+
    5786:	9c 91       	ld	r25, X
    5788:	13 97       	sbiw	r26, 0x03	; 3
    578a:	00 97       	sbiw	r24, 0x00	; 0
    578c:	19 f0       	breq	.+6      	; 0x5794 <free+0xf0>
    578e:	f8 01       	movw	r30, r16
    5790:	8c 01       	movw	r16, r24
    5792:	f6 cf       	rjmp	.-20     	; 0x5780 <free+0xdc>
    5794:	8d 91       	ld	r24, X+
    5796:	9c 91       	ld	r25, X
    5798:	98 01       	movw	r18, r16
    579a:	2e 5f       	subi	r18, 0xFE	; 254
    579c:	3f 4f       	sbci	r19, 0xFF	; 255
    579e:	82 0f       	add	r24, r18
    57a0:	93 1f       	adc	r25, r19
    57a2:	20 91 0d 06 	lds	r18, 0x060D	; 0x80060d <__brkval>
    57a6:	30 91 0e 06 	lds	r19, 0x060E	; 0x80060e <__brkval+0x1>
    57aa:	28 17       	cp	r18, r24
    57ac:	39 07       	cpc	r19, r25
    57ae:	69 f4       	brne	.+26     	; 0x57ca <free+0x126>
    57b0:	30 97       	sbiw	r30, 0x00	; 0
    57b2:	29 f4       	brne	.+10     	; 0x57be <free+0x11a>
    57b4:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <__flp+0x1>
    57b8:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <__flp>
    57bc:	02 c0       	rjmp	.+4      	; 0x57c2 <free+0x11e>
    57be:	13 82       	std	Z+3, r1	; 0x03
    57c0:	12 82       	std	Z+2, r1	; 0x02
    57c2:	10 93 0e 06 	sts	0x060E, r17	; 0x80060e <__brkval+0x1>
    57c6:	00 93 0d 06 	sts	0x060D, r16	; 0x80060d <__brkval>
    57ca:	df 91       	pop	r29
    57cc:	cf 91       	pop	r28
    57ce:	1f 91       	pop	r17
    57d0:	0f 91       	pop	r16
    57d2:	08 95       	ret

000057d4 <realloc>:
    57d4:	a0 e0       	ldi	r26, 0x00	; 0
    57d6:	b0 e0       	ldi	r27, 0x00	; 0
    57d8:	ef ee       	ldi	r30, 0xEF	; 239
    57da:	fb e2       	ldi	r31, 0x2B	; 43
    57dc:	6d ce       	rjmp	.-806    	; 0x54b8 <__prologue_saves__+0x8>
    57de:	ec 01       	movw	r28, r24
    57e0:	00 97       	sbiw	r24, 0x00	; 0
    57e2:	19 f4       	brne	.+6      	; 0x57ea <realloc+0x16>
    57e4:	cb 01       	movw	r24, r22
    57e6:	c9 de       	rcall	.-622    	; 0x557a <malloc>
    57e8:	b4 c0       	rjmp	.+360    	; 0x5952 <realloc+0x17e>
    57ea:	fc 01       	movw	r30, r24
    57ec:	e6 0f       	add	r30, r22
    57ee:	f7 1f       	adc	r31, r23
    57f0:	9c 01       	movw	r18, r24
    57f2:	22 50       	subi	r18, 0x02	; 2
    57f4:	31 09       	sbc	r19, r1
    57f6:	e2 17       	cp	r30, r18
    57f8:	f3 07       	cpc	r31, r19
    57fa:	08 f4       	brcc	.+2      	; 0x57fe <realloc+0x2a>
    57fc:	a8 c0       	rjmp	.+336    	; 0x594e <realloc+0x17a>
    57fe:	d9 01       	movw	r26, r18
    5800:	0d 91       	ld	r16, X+
    5802:	1c 91       	ld	r17, X
    5804:	11 97       	sbiw	r26, 0x01	; 1
    5806:	06 17       	cp	r16, r22
    5808:	17 07       	cpc	r17, r23
    580a:	a8 f0       	brcs	.+42     	; 0x5836 <realloc+0x62>
    580c:	05 30       	cpi	r16, 0x05	; 5
    580e:	11 05       	cpc	r17, r1
    5810:	08 f4       	brcc	.+2      	; 0x5814 <realloc+0x40>
    5812:	9b c0       	rjmp	.+310    	; 0x594a <realloc+0x176>
    5814:	c8 01       	movw	r24, r16
    5816:	04 97       	sbiw	r24, 0x04	; 4
    5818:	86 17       	cp	r24, r22
    581a:	97 07       	cpc	r25, r23
    581c:	08 f4       	brcc	.+2      	; 0x5820 <realloc+0x4c>
    581e:	95 c0       	rjmp	.+298    	; 0x594a <realloc+0x176>
    5820:	02 50       	subi	r16, 0x02	; 2
    5822:	11 09       	sbc	r17, r1
    5824:	06 1b       	sub	r16, r22
    5826:	17 0b       	sbc	r17, r23
    5828:	01 93       	st	Z+, r16
    582a:	11 93       	st	Z+, r17
    582c:	6d 93       	st	X+, r22
    582e:	7c 93       	st	X, r23
    5830:	cf 01       	movw	r24, r30
    5832:	38 df       	rcall	.-400    	; 0x56a4 <free>
    5834:	8a c0       	rjmp	.+276    	; 0x594a <realloc+0x176>
    5836:	5b 01       	movw	r10, r22
    5838:	a0 1a       	sub	r10, r16
    583a:	b1 0a       	sbc	r11, r17
    583c:	4c 01       	movw	r8, r24
    583e:	80 0e       	add	r8, r16
    5840:	91 1e       	adc	r9, r17
    5842:	a0 91 0f 06 	lds	r26, 0x060F	; 0x80060f <__flp>
    5846:	b0 91 10 06 	lds	r27, 0x0610	; 0x800610 <__flp+0x1>
    584a:	40 e0       	ldi	r20, 0x00	; 0
    584c:	50 e0       	ldi	r21, 0x00	; 0
    584e:	e1 2c       	mov	r14, r1
    5850:	f1 2c       	mov	r15, r1
    5852:	10 97       	sbiw	r26, 0x00	; 0
    5854:	09 f4       	brne	.+2      	; 0x5858 <realloc+0x84>
    5856:	4a c0       	rjmp	.+148    	; 0x58ec <realloc+0x118>
    5858:	a8 15       	cp	r26, r8
    585a:	b9 05       	cpc	r27, r9
    585c:	d1 f5       	brne	.+116    	; 0x58d2 <realloc+0xfe>
    585e:	6d 90       	ld	r6, X+
    5860:	7c 90       	ld	r7, X
    5862:	11 97       	sbiw	r26, 0x01	; 1
    5864:	63 01       	movw	r12, r6
    5866:	82 e0       	ldi	r24, 0x02	; 2
    5868:	c8 0e       	add	r12, r24
    586a:	d1 1c       	adc	r13, r1
    586c:	ca 14       	cp	r12, r10
    586e:	db 04       	cpc	r13, r11
    5870:	80 f1       	brcs	.+96     	; 0x58d2 <realloc+0xfe>
    5872:	a3 01       	movw	r20, r6
    5874:	4a 19       	sub	r20, r10
    5876:	5b 09       	sbc	r21, r11
    5878:	6a 01       	movw	r12, r20
    587a:	82 e0       	ldi	r24, 0x02	; 2
    587c:	c8 0e       	add	r12, r24
    587e:	d1 1c       	adc	r13, r1
    5880:	12 96       	adiw	r26, 0x02	; 2
    5882:	bc 90       	ld	r11, X
    5884:	12 97       	sbiw	r26, 0x02	; 2
    5886:	13 96       	adiw	r26, 0x03	; 3
    5888:	ac 91       	ld	r26, X
    588a:	b5 e0       	ldi	r27, 0x05	; 5
    588c:	cb 16       	cp	r12, r27
    588e:	d1 04       	cpc	r13, r1
    5890:	40 f0       	brcs	.+16     	; 0x58a2 <realloc+0xce>
    5892:	b2 82       	std	Z+2, r11	; 0x02
    5894:	a3 83       	std	Z+3, r26	; 0x03
    5896:	51 83       	std	Z+1, r21	; 0x01
    5898:	40 83       	st	Z, r20
    589a:	d9 01       	movw	r26, r18
    589c:	6d 93       	st	X+, r22
    589e:	7c 93       	st	X, r23
    58a0:	0a c0       	rjmp	.+20     	; 0x58b6 <realloc+0xe2>
    58a2:	0e 5f       	subi	r16, 0xFE	; 254
    58a4:	1f 4f       	sbci	r17, 0xFF	; 255
    58a6:	c3 01       	movw	r24, r6
    58a8:	80 0f       	add	r24, r16
    58aa:	91 1f       	adc	r25, r17
    58ac:	f9 01       	movw	r30, r18
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	80 83       	st	Z, r24
    58b2:	eb 2d       	mov	r30, r11
    58b4:	fa 2f       	mov	r31, r26
    58b6:	e1 14       	cp	r14, r1
    58b8:	f1 04       	cpc	r15, r1
    58ba:	31 f0       	breq	.+12     	; 0x58c8 <realloc+0xf4>
    58bc:	d7 01       	movw	r26, r14
    58be:	13 96       	adiw	r26, 0x03	; 3
    58c0:	fc 93       	st	X, r31
    58c2:	ee 93       	st	-X, r30
    58c4:	12 97       	sbiw	r26, 0x02	; 2
    58c6:	41 c0       	rjmp	.+130    	; 0x594a <realloc+0x176>
    58c8:	f0 93 10 06 	sts	0x0610, r31	; 0x800610 <__flp+0x1>
    58cc:	e0 93 0f 06 	sts	0x060F, r30	; 0x80060f <__flp>
    58d0:	3c c0       	rjmp	.+120    	; 0x594a <realloc+0x176>
    58d2:	8d 91       	ld	r24, X+
    58d4:	9c 91       	ld	r25, X
    58d6:	11 97       	sbiw	r26, 0x01	; 1
    58d8:	48 17       	cp	r20, r24
    58da:	59 07       	cpc	r21, r25
    58dc:	08 f4       	brcc	.+2      	; 0x58e0 <realloc+0x10c>
    58de:	ac 01       	movw	r20, r24
    58e0:	7d 01       	movw	r14, r26
    58e2:	12 96       	adiw	r26, 0x02	; 2
    58e4:	0d 90       	ld	r0, X+
    58e6:	bc 91       	ld	r27, X
    58e8:	a0 2d       	mov	r26, r0
    58ea:	b3 cf       	rjmp	.-154    	; 0x5852 <realloc+0x7e>
    58ec:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__brkval>
    58f0:	90 91 0e 06 	lds	r25, 0x060E	; 0x80060e <__brkval+0x1>
    58f4:	88 15       	cp	r24, r8
    58f6:	99 05       	cpc	r25, r9
    58f8:	e1 f4       	brne	.+56     	; 0x5932 <realloc+0x15e>
    58fa:	46 17       	cp	r20, r22
    58fc:	57 07       	cpc	r21, r23
    58fe:	c8 f4       	brcc	.+50     	; 0x5932 <realloc+0x15e>
    5900:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5904:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5908:	00 97       	sbiw	r24, 0x00	; 0
    590a:	41 f4       	brne	.+16     	; 0x591c <realloc+0x148>
    590c:	8d b7       	in	r24, 0x3d	; 61
    590e:	9e b7       	in	r25, 0x3e	; 62
    5910:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5914:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5918:	84 1b       	sub	r24, r20
    591a:	95 0b       	sbc	r25, r21
    591c:	e8 17       	cp	r30, r24
    591e:	f9 07       	cpc	r31, r25
    5920:	b0 f4       	brcc	.+44     	; 0x594e <realloc+0x17a>
    5922:	f0 93 0e 06 	sts	0x060E, r31	; 0x80060e <__brkval+0x1>
    5926:	e0 93 0d 06 	sts	0x060D, r30	; 0x80060d <__brkval>
    592a:	f9 01       	movw	r30, r18
    592c:	71 83       	std	Z+1, r23	; 0x01
    592e:	60 83       	st	Z, r22
    5930:	0c c0       	rjmp	.+24     	; 0x594a <realloc+0x176>
    5932:	cb 01       	movw	r24, r22
    5934:	22 de       	rcall	.-956    	; 0x557a <malloc>
    5936:	7c 01       	movw	r14, r24
    5938:	00 97       	sbiw	r24, 0x00	; 0
    593a:	49 f0       	breq	.+18     	; 0x594e <realloc+0x17a>
    593c:	a8 01       	movw	r20, r16
    593e:	be 01       	movw	r22, r28
    5940:	89 d1       	rcall	.+786    	; 0x5c54 <memcpy>
    5942:	ce 01       	movw	r24, r28
    5944:	af de       	rcall	.-674    	; 0x56a4 <free>
    5946:	c7 01       	movw	r24, r14
    5948:	04 c0       	rjmp	.+8      	; 0x5952 <realloc+0x17e>
    594a:	ce 01       	movw	r24, r28
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <realloc+0x17e>
    594e:	80 e0       	ldi	r24, 0x00	; 0
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	cd b7       	in	r28, 0x3d	; 61
    5954:	de b7       	in	r29, 0x3e	; 62
    5956:	ee e0       	ldi	r30, 0x0E	; 14
    5958:	cb cd       	rjmp	.-1130   	; 0x54f0 <__epilogue_restores__+0x8>

0000595a <strtod>:
    595a:	a0 e0       	ldi	r26, 0x00	; 0
    595c:	b0 e0       	ldi	r27, 0x00	; 0
    595e:	e2 eb       	ldi	r30, 0xB2	; 178
    5960:	fc e2       	ldi	r31, 0x2C	; 44
    5962:	aa cd       	rjmp	.-1196   	; 0x54b8 <__prologue_saves__+0x8>
    5964:	ec 01       	movw	r28, r24
    5966:	7b 01       	movw	r14, r22
    5968:	61 15       	cp	r22, r1
    596a:	71 05       	cpc	r23, r1
    596c:	19 f0       	breq	.+6      	; 0x5974 <strtod+0x1a>
    596e:	db 01       	movw	r26, r22
    5970:	8d 93       	st	X+, r24
    5972:	9c 93       	st	X, r25
    5974:	8e 01       	movw	r16, r28
    5976:	0f 5f       	subi	r16, 0xFF	; 255
    5978:	1f 4f       	sbci	r17, 0xFF	; 255
    597a:	78 80       	ld	r7, Y
    597c:	87 2d       	mov	r24, r7
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	49 d1       	rcall	.+658    	; 0x5c14 <isspace>
    5982:	89 2b       	or	r24, r25
    5984:	11 f0       	breq	.+4      	; 0x598a <strtod+0x30>
    5986:	e8 01       	movw	r28, r16
    5988:	f5 cf       	rjmp	.-22     	; 0x5974 <strtod+0x1a>
    598a:	bd e2       	ldi	r27, 0x2D	; 45
    598c:	7b 12       	cpse	r7, r27
    598e:	05 c0       	rjmp	.+10     	; 0x599a <strtod+0x40>
    5990:	0f 5f       	subi	r16, 0xFF	; 255
    5992:	1f 4f       	sbci	r17, 0xFF	; 255
    5994:	79 80       	ldd	r7, Y+1	; 0x01
    5996:	c1 e0       	ldi	r28, 0x01	; 1
    5998:	08 c0       	rjmp	.+16     	; 0x59aa <strtod+0x50>
    599a:	eb e2       	ldi	r30, 0x2B	; 43
    599c:	7e 12       	cpse	r7, r30
    599e:	04 c0       	rjmp	.+8      	; 0x59a8 <strtod+0x4e>
    59a0:	8e 01       	movw	r16, r28
    59a2:	0e 5f       	subi	r16, 0xFE	; 254
    59a4:	1f 4f       	sbci	r17, 0xFF	; 255
    59a6:	79 80       	ldd	r7, Y+1	; 0x01
    59a8:	c0 e0       	ldi	r28, 0x00	; 0
    59aa:	68 01       	movw	r12, r16
    59ac:	f1 e0       	ldi	r31, 0x01	; 1
    59ae:	cf 1a       	sub	r12, r31
    59b0:	d1 08       	sbc	r13, r1
    59b2:	43 e0       	ldi	r20, 0x03	; 3
    59b4:	50 e0       	ldi	r21, 0x00	; 0
    59b6:	62 e0       	ldi	r22, 0x02	; 2
    59b8:	72 e0       	ldi	r23, 0x02	; 2
    59ba:	c6 01       	movw	r24, r12
    59bc:	33 d1       	rcall	.+614    	; 0x5c24 <strncasecmp_P>
    59be:	89 2b       	or	r24, r25
    59c0:	e9 f4       	brne	.+58     	; 0x59fc <strtod+0xa2>
    59c2:	68 01       	movw	r12, r16
    59c4:	22 e0       	ldi	r18, 0x02	; 2
    59c6:	c2 0e       	add	r12, r18
    59c8:	d1 1c       	adc	r13, r1
    59ca:	45 e0       	ldi	r20, 0x05	; 5
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	6d ef       	ldi	r22, 0xFD	; 253
    59d0:	71 e0       	ldi	r23, 0x01	; 1
    59d2:	c6 01       	movw	r24, r12
    59d4:	27 d1       	rcall	.+590    	; 0x5c24 <strncasecmp_P>
    59d6:	89 2b       	or	r24, r25
    59d8:	21 f4       	brne	.+8      	; 0x59e2 <strtod+0x88>
    59da:	68 01       	movw	r12, r16
    59dc:	87 e0       	ldi	r24, 0x07	; 7
    59de:	c8 0e       	add	r12, r24
    59e0:	d1 1c       	adc	r13, r1
    59e2:	e1 14       	cp	r14, r1
    59e4:	f1 04       	cpc	r15, r1
    59e6:	19 f0       	breq	.+6      	; 0x59ee <strtod+0x94>
    59e8:	d7 01       	movw	r26, r14
    59ea:	cd 92       	st	X+, r12
    59ec:	dc 92       	st	X, r13
    59ee:	c1 11       	cpse	r28, r1
    59f0:	fd c0       	rjmp	.+506    	; 0x5bec <strtod+0x292>
    59f2:	60 e0       	ldi	r22, 0x00	; 0
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	80 e8       	ldi	r24, 0x80	; 128
    59f8:	9f e7       	ldi	r25, 0x7F	; 127
    59fa:	01 c1       	rjmp	.+514    	; 0x5bfe <strtod+0x2a4>
    59fc:	43 e0       	ldi	r20, 0x03	; 3
    59fe:	50 e0       	ldi	r21, 0x00	; 0
    5a00:	6a ef       	ldi	r22, 0xFA	; 250
    5a02:	71 e0       	ldi	r23, 0x01	; 1
    5a04:	c6 01       	movw	r24, r12
    5a06:	0e d1       	rcall	.+540    	; 0x5c24 <strncasecmp_P>
    5a08:	89 2b       	or	r24, r25
    5a0a:	51 f4       	brne	.+20     	; 0x5a20 <strtod+0xc6>
    5a0c:	e1 14       	cp	r14, r1
    5a0e:	f1 04       	cpc	r15, r1
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <strtod+0xba>
    5a12:	f1 c0       	rjmp	.+482    	; 0x5bf6 <strtod+0x29c>
    5a14:	0e 5f       	subi	r16, 0xFE	; 254
    5a16:	1f 4f       	sbci	r17, 0xFF	; 255
    5a18:	f7 01       	movw	r30, r14
    5a1a:	11 83       	std	Z+1, r17	; 0x01
    5a1c:	00 83       	st	Z, r16
    5a1e:	eb c0       	rjmp	.+470    	; 0x5bf6 <strtod+0x29c>
    5a20:	68 01       	movw	r12, r16
    5a22:	60 e0       	ldi	r22, 0x00	; 0
    5a24:	70 e0       	ldi	r23, 0x00	; 0
    5a26:	cb 01       	movw	r24, r22
    5a28:	00 e0       	ldi	r16, 0x00	; 0
    5a2a:	10 e0       	ldi	r17, 0x00	; 0
    5a2c:	f6 01       	movw	r30, r12
    5a2e:	d0 ed       	ldi	r29, 0xD0	; 208
    5a30:	d7 0d       	add	r29, r7
    5a32:	da 30       	cpi	r29, 0x0A	; 10
    5a34:	50 f5       	brcc	.+84     	; 0x5a8a <strtod+0x130>
    5a36:	2c 2f       	mov	r18, r28
    5a38:	22 60       	ori	r18, 0x02	; 2
    5a3a:	62 2e       	mov	r6, r18
    5a3c:	2c 2f       	mov	r18, r28
    5a3e:	28 70       	andi	r18, 0x08	; 8
    5a40:	c2 ff       	sbrs	r28, 2
    5a42:	05 c0       	rjmp	.+10     	; 0x5a4e <strtod+0xf4>
    5a44:	21 11       	cpse	r18, r1
    5a46:	27 c0       	rjmp	.+78     	; 0x5a96 <strtod+0x13c>
    5a48:	0f 5f       	subi	r16, 0xFF	; 255
    5a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4c:	24 c0       	rjmp	.+72     	; 0x5a96 <strtod+0x13c>
    5a4e:	22 23       	and	r18, r18
    5a50:	11 f0       	breq	.+4      	; 0x5a56 <strtod+0xfc>
    5a52:	01 50       	subi	r16, 0x01	; 1
    5a54:	11 09       	sbc	r17, r1
    5a56:	a5 e0       	ldi	r26, 0x05	; 5
    5a58:	b0 e0       	ldi	r27, 0x00	; 0
    5a5a:	9b 01       	movw	r18, r22
    5a5c:	ac 01       	movw	r20, r24
    5a5e:	1e dd       	rcall	.-1476   	; 0x549c <__muluhisi3>
    5a60:	4b 01       	movw	r8, r22
    5a62:	5c 01       	movw	r10, r24
    5a64:	88 0c       	add	r8, r8
    5a66:	99 1c       	adc	r9, r9
    5a68:	aa 1c       	adc	r10, r10
    5a6a:	bb 1c       	adc	r11, r11
    5a6c:	c5 01       	movw	r24, r10
    5a6e:	b4 01       	movw	r22, r8
    5a70:	6d 0f       	add	r22, r29
    5a72:	71 1d       	adc	r23, r1
    5a74:	81 1d       	adc	r24, r1
    5a76:	91 1d       	adc	r25, r1
    5a78:	68 39       	cpi	r22, 0x98	; 152
    5a7a:	a9 e9       	ldi	r26, 0x99	; 153
    5a7c:	7a 07       	cpc	r23, r26
    5a7e:	8a 07       	cpc	r24, r26
    5a80:	a9 e1       	ldi	r26, 0x19	; 25
    5a82:	9a 07       	cpc	r25, r26
    5a84:	40 f0       	brcs	.+16     	; 0x5a96 <strtod+0x13c>
    5a86:	c6 60       	ori	r28, 0x06	; 6
    5a88:	05 c0       	rjmp	.+10     	; 0x5a94 <strtod+0x13a>
    5a8a:	de 3f       	cpi	r29, 0xFE	; 254
    5a8c:	51 f4       	brne	.+20     	; 0x5aa2 <strtod+0x148>
    5a8e:	c3 fd       	sbrc	r28, 3
    5a90:	44 c0       	rjmp	.+136    	; 0x5b1a <strtod+0x1c0>
    5a92:	c8 60       	ori	r28, 0x08	; 8
    5a94:	6c 2e       	mov	r6, r28
    5a96:	bf ef       	ldi	r27, 0xFF	; 255
    5a98:	cb 1a       	sub	r12, r27
    5a9a:	db 0a       	sbc	r13, r27
    5a9c:	70 80       	ld	r7, Z
    5a9e:	c6 2d       	mov	r28, r6
    5aa0:	c5 cf       	rjmp	.-118    	; 0x5a2c <strtod+0xd2>
    5aa2:	2d 2f       	mov	r18, r29
    5aa4:	2f 7d       	andi	r18, 0xDF	; 223
    5aa6:	25 31       	cpi	r18, 0x15	; 21
    5aa8:	c1 f5       	brne	.+112    	; 0x5b1a <strtod+0x1c0>
    5aaa:	40 81       	ld	r20, Z
    5aac:	4d 32       	cpi	r20, 0x2D	; 45
    5aae:	11 f4       	brne	.+4      	; 0x5ab4 <strtod+0x15a>
    5ab0:	c0 61       	ori	r28, 0x10	; 16
    5ab2:	06 c0       	rjmp	.+12     	; 0x5ac0 <strtod+0x166>
    5ab4:	4b 32       	cpi	r20, 0x2B	; 43
    5ab6:	21 f0       	breq	.+8      	; 0x5ac0 <strtod+0x166>
    5ab8:	31 96       	adiw	r30, 0x01	; 1
    5aba:	21 e0       	ldi	r18, 0x01	; 1
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	06 c0       	rjmp	.+12     	; 0x5acc <strtod+0x172>
    5ac0:	32 96       	adiw	r30, 0x02	; 2
    5ac2:	d6 01       	movw	r26, r12
    5ac4:	11 96       	adiw	r26, 0x01	; 1
    5ac6:	4c 91       	ld	r20, X
    5ac8:	22 e0       	ldi	r18, 0x02	; 2
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	a0 ed       	ldi	r26, 0xD0	; 208
    5ace:	a4 0f       	add	r26, r20
    5ad0:	aa 30       	cpi	r26, 0x0A	; 10
    5ad2:	18 f0       	brcs	.+6      	; 0x5ada <strtod+0x180>
    5ad4:	e2 1b       	sub	r30, r18
    5ad6:	f3 0b       	sbc	r31, r19
    5ad8:	20 c0       	rjmp	.+64     	; 0x5b1a <strtod+0x1c0>
    5ada:	40 e0       	ldi	r20, 0x00	; 0
    5adc:	50 e0       	ldi	r21, 0x00	; 0
    5ade:	40 38       	cpi	r20, 0x80	; 128
    5ae0:	bc e0       	ldi	r27, 0x0C	; 12
    5ae2:	5b 07       	cpc	r21, r27
    5ae4:	5c f4       	brge	.+22     	; 0x5afc <strtod+0x1a2>
    5ae6:	9a 01       	movw	r18, r20
    5ae8:	22 0f       	add	r18, r18
    5aea:	33 1f       	adc	r19, r19
    5aec:	22 0f       	add	r18, r18
    5aee:	33 1f       	adc	r19, r19
    5af0:	42 0f       	add	r20, r18
    5af2:	53 1f       	adc	r21, r19
    5af4:	44 0f       	add	r20, r20
    5af6:	55 1f       	adc	r21, r21
    5af8:	4a 0f       	add	r20, r26
    5afa:	51 1d       	adc	r21, r1
    5afc:	31 96       	adiw	r30, 0x01	; 1
    5afe:	df 01       	movw	r26, r30
    5b00:	11 97       	sbiw	r26, 0x01	; 1
    5b02:	2c 91       	ld	r18, X
    5b04:	a0 ed       	ldi	r26, 0xD0	; 208
    5b06:	a2 0f       	add	r26, r18
    5b08:	aa 30       	cpi	r26, 0x0A	; 10
    5b0a:	48 f3       	brcs	.-46     	; 0x5ade <strtod+0x184>
    5b0c:	c4 ff       	sbrs	r28, 4
    5b0e:	03 c0       	rjmp	.+6      	; 0x5b16 <strtod+0x1bc>
    5b10:	51 95       	neg	r21
    5b12:	41 95       	neg	r20
    5b14:	51 09       	sbc	r21, r1
    5b16:	04 0f       	add	r16, r20
    5b18:	15 1f       	adc	r17, r21
    5b1a:	c1 ff       	sbrs	r28, 1
    5b1c:	07 c0       	rjmp	.+14     	; 0x5b2c <strtod+0x1d2>
    5b1e:	e1 14       	cp	r14, r1
    5b20:	f1 04       	cpc	r15, r1
    5b22:	21 f0       	breq	.+8      	; 0x5b2c <strtod+0x1d2>
    5b24:	31 97       	sbiw	r30, 0x01	; 1
    5b26:	d7 01       	movw	r26, r14
    5b28:	ed 93       	st	X+, r30
    5b2a:	fc 93       	st	X, r31
    5b2c:	0e 94 b3 21 	call	0x4366	; 0x4366 <__floatunsisf>
    5b30:	c3 70       	andi	r28, 0x03	; 3
    5b32:	c3 30       	cpi	r28, 0x03	; 3
    5b34:	19 f0       	breq	.+6      	; 0x5b3c <strtod+0x1e2>
    5b36:	6b 01       	movw	r12, r22
    5b38:	7c 01       	movw	r14, r24
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <strtod+0x1ee>
    5b3c:	6b 01       	movw	r12, r22
    5b3e:	7c 01       	movw	r14, r24
    5b40:	f7 fa       	bst	r15, 7
    5b42:	f0 94       	com	r15
    5b44:	f7 f8       	bld	r15, 7
    5b46:	f0 94       	com	r15
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	a9 01       	movw	r20, r18
    5b4e:	c7 01       	movw	r24, r14
    5b50:	b6 01       	movw	r22, r12
    5b52:	0e 94 47 21 	call	0x428e	; 0x428e <__cmpsf2>
    5b56:	88 23       	and	r24, r24
    5b58:	09 f4       	brne	.+2      	; 0x5b5c <strtod+0x202>
    5b5a:	45 c0       	rjmp	.+138    	; 0x5be6 <strtod+0x28c>
    5b5c:	17 ff       	sbrs	r17, 7
    5b5e:	06 c0       	rjmp	.+12     	; 0x5b6c <strtod+0x212>
    5b60:	11 95       	neg	r17
    5b62:	01 95       	neg	r16
    5b64:	11 09       	sbc	r17, r1
    5b66:	c9 e1       	ldi	r28, 0x19	; 25
    5b68:	d2 e0       	ldi	r29, 0x02	; 2
    5b6a:	02 c0       	rjmp	.+4      	; 0x5b70 <strtod+0x216>
    5b6c:	c1 e3       	ldi	r28, 0x31	; 49
    5b6e:	d2 e0       	ldi	r29, 0x02	; 2
    5b70:	5e 01       	movw	r10, r28
    5b72:	b8 e1       	ldi	r27, 0x18	; 24
    5b74:	ab 1a       	sub	r10, r27
    5b76:	b1 08       	sbc	r11, r1
    5b78:	46 01       	movw	r8, r12
    5b7a:	be 2d       	mov	r27, r14
    5b7c:	af 2d       	mov	r26, r15
    5b7e:	90 e2       	ldi	r25, 0x20	; 32
    5b80:	e9 2e       	mov	r14, r25
    5b82:	f1 2c       	mov	r15, r1
    5b84:	0e 15       	cp	r16, r14
    5b86:	1f 05       	cpc	r17, r15
    5b88:	84 f0       	brlt	.+32     	; 0x5baa <strtod+0x250>
    5b8a:	fe 01       	movw	r30, r28
    5b8c:	25 91       	lpm	r18, Z+
    5b8e:	35 91       	lpm	r19, Z+
    5b90:	45 91       	lpm	r20, Z+
    5b92:	54 91       	lpm	r21, Z
    5b94:	b4 01       	movw	r22, r8
    5b96:	8b 2f       	mov	r24, r27
    5b98:	9a 2f       	mov	r25, r26
    5b9a:	0e 94 65 22 	call	0x44ca	; 0x44ca <__mulsf3>
    5b9e:	4b 01       	movw	r8, r22
    5ba0:	b8 2f       	mov	r27, r24
    5ba2:	a9 2f       	mov	r26, r25
    5ba4:	0e 19       	sub	r16, r14
    5ba6:	1f 09       	sbc	r17, r15
    5ba8:	ed cf       	rjmp	.-38     	; 0x5b84 <strtod+0x22a>
    5baa:	24 97       	sbiw	r28, 0x04	; 4
    5bac:	f5 94       	asr	r15
    5bae:	e7 94       	ror	r14
    5bb0:	ca 15       	cp	r28, r10
    5bb2:	db 05       	cpc	r29, r11
    5bb4:	39 f7       	brne	.-50     	; 0x5b84 <strtod+0x22a>
    5bb6:	64 01       	movw	r12, r8
    5bb8:	eb 2e       	mov	r14, r27
    5bba:	fa 2e       	mov	r15, r26
    5bbc:	8e 2d       	mov	r24, r14
    5bbe:	88 0f       	add	r24, r24
    5bc0:	8f 2d       	mov	r24, r15
    5bc2:	88 1f       	adc	r24, r24
    5bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    5bc6:	49 f0       	breq	.+18     	; 0x5bda <strtod+0x280>
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	a9 01       	movw	r20, r18
    5bce:	c7 01       	movw	r24, r14
    5bd0:	b6 01       	movw	r22, r12
    5bd2:	0e 94 47 21 	call	0x428e	; 0x428e <__cmpsf2>
    5bd6:	81 11       	cpse	r24, r1
    5bd8:	06 c0       	rjmp	.+12     	; 0x5be6 <strtod+0x28c>
    5bda:	82 e2       	ldi	r24, 0x22	; 34
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <errno+0x1>
    5be2:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <errno>
    5be6:	c7 01       	movw	r24, r14
    5be8:	b6 01       	movw	r22, r12
    5bea:	09 c0       	rjmp	.+18     	; 0x5bfe <strtod+0x2a4>
    5bec:	60 e0       	ldi	r22, 0x00	; 0
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	80 e8       	ldi	r24, 0x80	; 128
    5bf2:	9f ef       	ldi	r25, 0xFF	; 255
    5bf4:	04 c0       	rjmp	.+8      	; 0x5bfe <strtod+0x2a4>
    5bf6:	60 e0       	ldi	r22, 0x00	; 0
    5bf8:	70 e0       	ldi	r23, 0x00	; 0
    5bfa:	80 ec       	ldi	r24, 0xC0	; 192
    5bfc:	9f e7       	ldi	r25, 0x7F	; 127
    5bfe:	cd b7       	in	r28, 0x3d	; 61
    5c00:	de b7       	in	r29, 0x3e	; 62
    5c02:	ee e0       	ldi	r30, 0x0E	; 14
    5c04:	75 cc       	rjmp	.-1814   	; 0x54f0 <__epilogue_restores__+0x8>

00005c06 <abort>:
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	f8 94       	cli
    5c0c:	e1 c2       	rjmp	.+1474   	; 0x61d0 <__do_global_dtors>

00005c0e <atof>:
    5c0e:	66 27       	eor	r22, r22
    5c10:	77 27       	eor	r23, r23
    5c12:	a3 ce       	rjmp	.-698    	; 0x595a <strtod>

00005c14 <isspace>:
    5c14:	91 11       	cpse	r25, r1
    5c16:	aa c2       	rjmp	.+1364   	; 0x616c <__ctype_isfalse>
    5c18:	80 32       	cpi	r24, 0x20	; 32
    5c1a:	19 f0       	breq	.+6      	; 0x5c22 <isspace+0xe>
    5c1c:	89 50       	subi	r24, 0x09	; 9
    5c1e:	85 50       	subi	r24, 0x05	; 5
    5c20:	d0 f7       	brcc	.-12     	; 0x5c16 <isspace+0x2>
    5c22:	08 95       	ret

00005c24 <strncasecmp_P>:
    5c24:	fb 01       	movw	r30, r22
    5c26:	dc 01       	movw	r26, r24
    5c28:	41 50       	subi	r20, 0x01	; 1
    5c2a:	50 40       	sbci	r21, 0x00	; 0
    5c2c:	88 f0       	brcs	.+34     	; 0x5c50 <strncasecmp_P+0x2c>
    5c2e:	8d 91       	ld	r24, X+
    5c30:	81 34       	cpi	r24, 0x41	; 65
    5c32:	1c f0       	brlt	.+6      	; 0x5c3a <strncasecmp_P+0x16>
    5c34:	8b 35       	cpi	r24, 0x5B	; 91
    5c36:	0c f4       	brge	.+2      	; 0x5c3a <strncasecmp_P+0x16>
    5c38:	80 5e       	subi	r24, 0xE0	; 224
    5c3a:	65 91       	lpm	r22, Z+
    5c3c:	61 34       	cpi	r22, 0x41	; 65
    5c3e:	1c f0       	brlt	.+6      	; 0x5c46 <strncasecmp_P+0x22>
    5c40:	6b 35       	cpi	r22, 0x5B	; 91
    5c42:	0c f4       	brge	.+2      	; 0x5c46 <strncasecmp_P+0x22>
    5c44:	60 5e       	subi	r22, 0xE0	; 224
    5c46:	86 1b       	sub	r24, r22
    5c48:	61 11       	cpse	r22, r1
    5c4a:	71 f3       	breq	.-36     	; 0x5c28 <strncasecmp_P+0x4>
    5c4c:	99 0b       	sbc	r25, r25
    5c4e:	08 95       	ret
    5c50:	88 1b       	sub	r24, r24
    5c52:	fc cf       	rjmp	.-8      	; 0x5c4c <strncasecmp_P+0x28>

00005c54 <memcpy>:
    5c54:	fb 01       	movw	r30, r22
    5c56:	dc 01       	movw	r26, r24
    5c58:	02 c0       	rjmp	.+4      	; 0x5c5e <memcpy+0xa>
    5c5a:	01 90       	ld	r0, Z+
    5c5c:	0d 92       	st	X+, r0
    5c5e:	41 50       	subi	r20, 0x01	; 1
    5c60:	50 40       	sbci	r21, 0x00	; 0
    5c62:	d8 f7       	brcc	.-10     	; 0x5c5a <memcpy+0x6>
    5c64:	08 95       	ret

00005c66 <strcmp>:
    5c66:	fb 01       	movw	r30, r22
    5c68:	dc 01       	movw	r26, r24
    5c6a:	8d 91       	ld	r24, X+
    5c6c:	01 90       	ld	r0, Z+
    5c6e:	80 19       	sub	r24, r0
    5c70:	01 10       	cpse	r0, r1
    5c72:	d9 f3       	breq	.-10     	; 0x5c6a <strcmp+0x4>
    5c74:	99 0b       	sbc	r25, r25
    5c76:	08 95       	ret

00005c78 <strcpy>:
    5c78:	fb 01       	movw	r30, r22
    5c7a:	dc 01       	movw	r26, r24
    5c7c:	01 90       	ld	r0, Z+
    5c7e:	0d 92       	st	X+, r0
    5c80:	00 20       	and	r0, r0
    5c82:	e1 f7       	brne	.-8      	; 0x5c7c <strcpy+0x4>
    5c84:	08 95       	ret

00005c86 <strncmp>:
    5c86:	fb 01       	movw	r30, r22
    5c88:	dc 01       	movw	r26, r24
    5c8a:	41 50       	subi	r20, 0x01	; 1
    5c8c:	50 40       	sbci	r21, 0x00	; 0
    5c8e:	30 f0       	brcs	.+12     	; 0x5c9c <strncmp+0x16>
    5c90:	8d 91       	ld	r24, X+
    5c92:	01 90       	ld	r0, Z+
    5c94:	80 19       	sub	r24, r0
    5c96:	19 f4       	brne	.+6      	; 0x5c9e <strncmp+0x18>
    5c98:	00 20       	and	r0, r0
    5c9a:	b9 f7       	brne	.-18     	; 0x5c8a <strncmp+0x4>
    5c9c:	88 1b       	sub	r24, r24
    5c9e:	99 0b       	sbc	r25, r25
    5ca0:	08 95       	ret

00005ca2 <dtoa_prf>:
    5ca2:	4f 92       	push	r4
    5ca4:	5f 92       	push	r5
    5ca6:	6f 92       	push	r6
    5ca8:	7f 92       	push	r7
    5caa:	9f 92       	push	r9
    5cac:	af 92       	push	r10
    5cae:	bf 92       	push	r11
    5cb0:	cf 92       	push	r12
    5cb2:	df 92       	push	r13
    5cb4:	ef 92       	push	r14
    5cb6:	ff 92       	push	r15
    5cb8:	0f 93       	push	r16
    5cba:	1f 93       	push	r17
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	29 97       	sbiw	r28, 0x09	; 9
    5cc6:	0f b6       	in	r0, 0x3f	; 63
    5cc8:	f8 94       	cli
    5cca:	de bf       	out	0x3e, r29	; 62
    5ccc:	0f be       	out	0x3f, r0	; 63
    5cce:	cd bf       	out	0x3d, r28	; 61
    5cd0:	6a 01       	movw	r12, r20
    5cd2:	12 2f       	mov	r17, r18
    5cd4:	b0 2e       	mov	r11, r16
    5cd6:	2b e3       	ldi	r18, 0x3B	; 59
    5cd8:	20 17       	cp	r18, r16
    5cda:	20 f0       	brcs	.+8      	; 0x5ce4 <dtoa_prf+0x42>
    5cdc:	ff 24       	eor	r15, r15
    5cde:	f3 94       	inc	r15
    5ce0:	f0 0e       	add	r15, r16
    5ce2:	02 c0       	rjmp	.+4      	; 0x5ce8 <dtoa_prf+0x46>
    5ce4:	bc e3       	ldi	r27, 0x3C	; 60
    5ce6:	fb 2e       	mov	r15, r27
    5ce8:	0f 2d       	mov	r16, r15
    5cea:	27 e0       	ldi	r18, 0x07	; 7
    5cec:	ae 01       	movw	r20, r28
    5cee:	4f 5f       	subi	r20, 0xFF	; 255
    5cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf2:	64 d1       	rcall	.+712    	; 0x5fbc <__ftoa_engine>
    5cf4:	ac 01       	movw	r20, r24
    5cf6:	89 81       	ldd	r24, Y+1	; 0x01
    5cf8:	98 2f       	mov	r25, r24
    5cfa:	99 70       	andi	r25, 0x09	; 9
    5cfc:	91 30       	cpi	r25, 0x01	; 1
    5cfe:	31 f0       	breq	.+12     	; 0x5d0c <dtoa_prf+0x6a>
    5d00:	e1 fc       	sbrc	r14, 1
    5d02:	06 c0       	rjmp	.+12     	; 0x5d10 <dtoa_prf+0x6e>
    5d04:	e0 fe       	sbrs	r14, 0
    5d06:	06 c0       	rjmp	.+12     	; 0x5d14 <dtoa_prf+0x72>
    5d08:	90 e2       	ldi	r25, 0x20	; 32
    5d0a:	05 c0       	rjmp	.+10     	; 0x5d16 <dtoa_prf+0x74>
    5d0c:	9d e2       	ldi	r25, 0x2D	; 45
    5d0e:	03 c0       	rjmp	.+6      	; 0x5d16 <dtoa_prf+0x74>
    5d10:	9b e2       	ldi	r25, 0x2B	; 43
    5d12:	01 c0       	rjmp	.+2      	; 0x5d16 <dtoa_prf+0x74>
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	ee 2d       	mov	r30, r14
    5d18:	e0 71       	andi	r30, 0x10	; 16
    5d1a:	83 ff       	sbrs	r24, 3
    5d1c:	3c c0       	rjmp	.+120    	; 0x5d96 <dtoa_prf+0xf4>
    5d1e:	91 11       	cpse	r25, r1
    5d20:	02 c0       	rjmp	.+4      	; 0x5d26 <dtoa_prf+0x84>
    5d22:	83 e0       	ldi	r24, 0x03	; 3
    5d24:	01 c0       	rjmp	.+2      	; 0x5d28 <dtoa_prf+0x86>
    5d26:	84 e0       	ldi	r24, 0x04	; 4
    5d28:	81 17       	cp	r24, r17
    5d2a:	18 f4       	brcc	.+6      	; 0x5d32 <dtoa_prf+0x90>
    5d2c:	21 2f       	mov	r18, r17
    5d2e:	28 1b       	sub	r18, r24
    5d30:	01 c0       	rjmp	.+2      	; 0x5d34 <dtoa_prf+0x92>
    5d32:	20 e0       	ldi	r18, 0x00	; 0
    5d34:	e1 11       	cpse	r30, r1
    5d36:	0b c0       	rjmp	.+22     	; 0x5d4e <dtoa_prf+0xac>
    5d38:	f6 01       	movw	r30, r12
    5d3a:	82 2f       	mov	r24, r18
    5d3c:	30 e2       	ldi	r19, 0x20	; 32
    5d3e:	88 23       	and	r24, r24
    5d40:	19 f0       	breq	.+6      	; 0x5d48 <dtoa_prf+0xa6>
    5d42:	31 93       	st	Z+, r19
    5d44:	81 50       	subi	r24, 0x01	; 1
    5d46:	fb cf       	rjmp	.-10     	; 0x5d3e <dtoa_prf+0x9c>
    5d48:	c2 0e       	add	r12, r18
    5d4a:	d1 1c       	adc	r13, r1
    5d4c:	20 e0       	ldi	r18, 0x00	; 0
    5d4e:	99 23       	and	r25, r25
    5d50:	29 f0       	breq	.+10     	; 0x5d5c <dtoa_prf+0xba>
    5d52:	d6 01       	movw	r26, r12
    5d54:	9c 93       	st	X, r25
    5d56:	f6 01       	movw	r30, r12
    5d58:	31 96       	adiw	r30, 0x01	; 1
    5d5a:	6f 01       	movw	r12, r30
    5d5c:	c6 01       	movw	r24, r12
    5d5e:	03 96       	adiw	r24, 0x03	; 3
    5d60:	e2 fe       	sbrs	r14, 2
    5d62:	0a c0       	rjmp	.+20     	; 0x5d78 <dtoa_prf+0xd6>
    5d64:	3e e4       	ldi	r19, 0x4E	; 78
    5d66:	d6 01       	movw	r26, r12
    5d68:	3c 93       	st	X, r19
    5d6a:	41 e4       	ldi	r20, 0x41	; 65
    5d6c:	11 96       	adiw	r26, 0x01	; 1
    5d6e:	4c 93       	st	X, r20
    5d70:	11 97       	sbiw	r26, 0x01	; 1
    5d72:	12 96       	adiw	r26, 0x02	; 2
    5d74:	3c 93       	st	X, r19
    5d76:	06 c0       	rjmp	.+12     	; 0x5d84 <dtoa_prf+0xe2>
    5d78:	3e e6       	ldi	r19, 0x6E	; 110
    5d7a:	f6 01       	movw	r30, r12
    5d7c:	30 83       	st	Z, r19
    5d7e:	41 e6       	ldi	r20, 0x61	; 97
    5d80:	41 83       	std	Z+1, r20	; 0x01
    5d82:	32 83       	std	Z+2, r19	; 0x02
    5d84:	fc 01       	movw	r30, r24
    5d86:	32 2f       	mov	r19, r18
    5d88:	40 e2       	ldi	r20, 0x20	; 32
    5d8a:	33 23       	and	r19, r19
    5d8c:	09 f4       	brne	.+2      	; 0x5d90 <dtoa_prf+0xee>
    5d8e:	42 c0       	rjmp	.+132    	; 0x5e14 <dtoa_prf+0x172>
    5d90:	41 93       	st	Z+, r20
    5d92:	31 50       	subi	r19, 0x01	; 1
    5d94:	fa cf       	rjmp	.-12     	; 0x5d8a <dtoa_prf+0xe8>
    5d96:	82 ff       	sbrs	r24, 2
    5d98:	44 c0       	rjmp	.+136    	; 0x5e22 <dtoa_prf+0x180>
    5d9a:	91 11       	cpse	r25, r1
    5d9c:	02 c0       	rjmp	.+4      	; 0x5da2 <dtoa_prf+0x100>
    5d9e:	83 e0       	ldi	r24, 0x03	; 3
    5da0:	01 c0       	rjmp	.+2      	; 0x5da4 <dtoa_prf+0x102>
    5da2:	84 e0       	ldi	r24, 0x04	; 4
    5da4:	81 17       	cp	r24, r17
    5da6:	18 f4       	brcc	.+6      	; 0x5dae <dtoa_prf+0x10c>
    5da8:	21 2f       	mov	r18, r17
    5daa:	28 1b       	sub	r18, r24
    5dac:	01 c0       	rjmp	.+2      	; 0x5db0 <dtoa_prf+0x10e>
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	e1 11       	cpse	r30, r1
    5db2:	0b c0       	rjmp	.+22     	; 0x5dca <dtoa_prf+0x128>
    5db4:	f6 01       	movw	r30, r12
    5db6:	82 2f       	mov	r24, r18
    5db8:	30 e2       	ldi	r19, 0x20	; 32
    5dba:	88 23       	and	r24, r24
    5dbc:	19 f0       	breq	.+6      	; 0x5dc4 <dtoa_prf+0x122>
    5dbe:	31 93       	st	Z+, r19
    5dc0:	81 50       	subi	r24, 0x01	; 1
    5dc2:	fb cf       	rjmp	.-10     	; 0x5dba <dtoa_prf+0x118>
    5dc4:	c2 0e       	add	r12, r18
    5dc6:	d1 1c       	adc	r13, r1
    5dc8:	20 e0       	ldi	r18, 0x00	; 0
    5dca:	99 23       	and	r25, r25
    5dcc:	29 f0       	breq	.+10     	; 0x5dd8 <dtoa_prf+0x136>
    5dce:	d6 01       	movw	r26, r12
    5dd0:	9c 93       	st	X, r25
    5dd2:	f6 01       	movw	r30, r12
    5dd4:	31 96       	adiw	r30, 0x01	; 1
    5dd6:	6f 01       	movw	r12, r30
    5dd8:	c6 01       	movw	r24, r12
    5dda:	03 96       	adiw	r24, 0x03	; 3
    5ddc:	e2 fe       	sbrs	r14, 2
    5dde:	0b c0       	rjmp	.+22     	; 0x5df6 <dtoa_prf+0x154>
    5de0:	39 e4       	ldi	r19, 0x49	; 73
    5de2:	d6 01       	movw	r26, r12
    5de4:	3c 93       	st	X, r19
    5de6:	3e e4       	ldi	r19, 0x4E	; 78
    5de8:	11 96       	adiw	r26, 0x01	; 1
    5dea:	3c 93       	st	X, r19
    5dec:	11 97       	sbiw	r26, 0x01	; 1
    5dee:	36 e4       	ldi	r19, 0x46	; 70
    5df0:	12 96       	adiw	r26, 0x02	; 2
    5df2:	3c 93       	st	X, r19
    5df4:	07 c0       	rjmp	.+14     	; 0x5e04 <dtoa_prf+0x162>
    5df6:	39 e6       	ldi	r19, 0x69	; 105
    5df8:	f6 01       	movw	r30, r12
    5dfa:	30 83       	st	Z, r19
    5dfc:	3e e6       	ldi	r19, 0x6E	; 110
    5dfe:	31 83       	std	Z+1, r19	; 0x01
    5e00:	36 e6       	ldi	r19, 0x66	; 102
    5e02:	32 83       	std	Z+2, r19	; 0x02
    5e04:	fc 01       	movw	r30, r24
    5e06:	32 2f       	mov	r19, r18
    5e08:	40 e2       	ldi	r20, 0x20	; 32
    5e0a:	33 23       	and	r19, r19
    5e0c:	19 f0       	breq	.+6      	; 0x5e14 <dtoa_prf+0x172>
    5e0e:	41 93       	st	Z+, r20
    5e10:	31 50       	subi	r19, 0x01	; 1
    5e12:	fb cf       	rjmp	.-10     	; 0x5e0a <dtoa_prf+0x168>
    5e14:	fc 01       	movw	r30, r24
    5e16:	e2 0f       	add	r30, r18
    5e18:	f1 1d       	adc	r31, r1
    5e1a:	10 82       	st	Z, r1
    5e1c:	8e ef       	ldi	r24, 0xFE	; 254
    5e1e:	9f ef       	ldi	r25, 0xFF	; 255
    5e20:	b7 c0       	rjmp	.+366    	; 0x5f90 <dtoa_prf+0x2ee>
    5e22:	f1 e0       	ldi	r31, 0x01	; 1
    5e24:	91 11       	cpse	r25, r1
    5e26:	01 c0       	rjmp	.+2      	; 0x5e2a <dtoa_prf+0x188>
    5e28:	f0 e0       	ldi	r31, 0x00	; 0
    5e2a:	6f 2f       	mov	r22, r31
    5e2c:	70 e0       	ldi	r23, 0x00	; 0
    5e2e:	14 16       	cp	r1, r20
    5e30:	15 06       	cpc	r1, r21
    5e32:	24 f4       	brge	.+8      	; 0x5e3c <dtoa_prf+0x19a>
    5e34:	9a 01       	movw	r18, r20
    5e36:	2f 5f       	subi	r18, 0xFF	; 255
    5e38:	3f 4f       	sbci	r19, 0xFF	; 255
    5e3a:	02 c0       	rjmp	.+4      	; 0x5e40 <dtoa_prf+0x19e>
    5e3c:	21 e0       	ldi	r18, 0x01	; 1
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	26 0f       	add	r18, r22
    5e42:	37 1f       	adc	r19, r23
    5e44:	bb 20       	and	r11, r11
    5e46:	29 f0       	breq	.+10     	; 0x5e52 <dtoa_prf+0x1b0>
    5e48:	6b 2d       	mov	r22, r11
    5e4a:	70 e0       	ldi	r23, 0x00	; 0
    5e4c:	6f 5f       	subi	r22, 0xFF	; 255
    5e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <dtoa_prf+0x1b4>
    5e52:	60 e0       	ldi	r22, 0x00	; 0
    5e54:	70 e0       	ldi	r23, 0x00	; 0
    5e56:	26 0f       	add	r18, r22
    5e58:	37 1f       	adc	r19, r23
    5e5a:	61 2f       	mov	r22, r17
    5e5c:	70 e0       	ldi	r23, 0x00	; 0
    5e5e:	26 17       	cp	r18, r22
    5e60:	37 07       	cpc	r19, r23
    5e62:	1c f4       	brge	.+6      	; 0x5e6a <dtoa_prf+0x1c8>
    5e64:	12 1b       	sub	r17, r18
    5e66:	21 2f       	mov	r18, r17
    5e68:	01 c0       	rjmp	.+2      	; 0x5e6c <dtoa_prf+0x1ca>
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
    5e6c:	3e 2d       	mov	r19, r14
    5e6e:	38 71       	andi	r19, 0x18	; 24
    5e70:	59 f4       	brne	.+22     	; 0x5e88 <dtoa_prf+0x1e6>
    5e72:	d6 01       	movw	r26, r12
    5e74:	32 2f       	mov	r19, r18
    5e76:	60 e2       	ldi	r22, 0x20	; 32
    5e78:	33 23       	and	r19, r19
    5e7a:	19 f0       	breq	.+6      	; 0x5e82 <dtoa_prf+0x1e0>
    5e7c:	6d 93       	st	X+, r22
    5e7e:	31 50       	subi	r19, 0x01	; 1
    5e80:	fb cf       	rjmp	.-10     	; 0x5e78 <dtoa_prf+0x1d6>
    5e82:	c2 0e       	add	r12, r18
    5e84:	d1 1c       	adc	r13, r1
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	ff 23       	and	r31, r31
    5e8a:	31 f0       	breq	.+12     	; 0x5e98 <dtoa_prf+0x1f6>
    5e8c:	d6 01       	movw	r26, r12
    5e8e:	9c 93       	st	X, r25
    5e90:	b6 01       	movw	r22, r12
    5e92:	6f 5f       	subi	r22, 0xFF	; 255
    5e94:	7f 4f       	sbci	r23, 0xFF	; 255
    5e96:	6b 01       	movw	r12, r22
    5e98:	e1 11       	cpse	r30, r1
    5e9a:	0b c0       	rjmp	.+22     	; 0x5eb2 <dtoa_prf+0x210>
    5e9c:	f6 01       	movw	r30, r12
    5e9e:	92 2f       	mov	r25, r18
    5ea0:	30 e3       	ldi	r19, 0x30	; 48
    5ea2:	99 23       	and	r25, r25
    5ea4:	19 f0       	breq	.+6      	; 0x5eac <dtoa_prf+0x20a>
    5ea6:	31 93       	st	Z+, r19
    5ea8:	91 50       	subi	r25, 0x01	; 1
    5eaa:	fb cf       	rjmp	.-10     	; 0x5ea2 <dtoa_prf+0x200>
    5eac:	c2 0e       	add	r12, r18
    5eae:	d1 1c       	adc	r13, r1
    5eb0:	20 e0       	ldi	r18, 0x00	; 0
    5eb2:	9f 2d       	mov	r25, r15
    5eb4:	94 0f       	add	r25, r20
    5eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    5eb8:	78 2f       	mov	r23, r24
    5eba:	70 71       	andi	r23, 0x10	; 16
    5ebc:	a7 2e       	mov	r10, r23
    5ebe:	84 ff       	sbrs	r24, 4
    5ec0:	03 c0       	rjmp	.+6      	; 0x5ec8 <dtoa_prf+0x226>
    5ec2:	31 33       	cpi	r19, 0x31	; 49
    5ec4:	09 f4       	brne	.+2      	; 0x5ec8 <dtoa_prf+0x226>
    5ec6:	91 50       	subi	r25, 0x01	; 1
    5ec8:	19 16       	cp	r1, r25
    5eca:	24 f4       	brge	.+8      	; 0x5ed4 <dtoa_prf+0x232>
    5ecc:	99 30       	cpi	r25, 0x09	; 9
    5ece:	18 f0       	brcs	.+6      	; 0x5ed6 <dtoa_prf+0x234>
    5ed0:	98 e0       	ldi	r25, 0x08	; 8
    5ed2:	01 c0       	rjmp	.+2      	; 0x5ed6 <dtoa_prf+0x234>
    5ed4:	91 e0       	ldi	r25, 0x01	; 1
    5ed6:	e4 2f       	mov	r30, r20
    5ed8:	85 2f       	mov	r24, r21
    5eda:	57 ff       	sbrs	r21, 7
    5edc:	02 c0       	rjmp	.+4      	; 0x5ee2 <dtoa_prf+0x240>
    5ede:	e0 e0       	ldi	r30, 0x00	; 0
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	6e 2f       	mov	r22, r30
    5ee4:	78 2f       	mov	r23, r24
    5ee6:	e0 e0       	ldi	r30, 0x00	; 0
    5ee8:	f0 e0       	ldi	r31, 0x00	; 0
    5eea:	ae e2       	ldi	r26, 0x2E	; 46
    5eec:	9a 2e       	mov	r9, r26
    5eee:	3a 01       	movw	r6, r20
    5ef0:	69 1a       	sub	r6, r25
    5ef2:	71 08       	sbc	r7, r1
    5ef4:	2a 01       	movw	r4, r20
    5ef6:	46 1a       	sub	r4, r22
    5ef8:	57 0a       	sbc	r5, r23
    5efa:	0b 2d       	mov	r16, r11
    5efc:	10 e0       	ldi	r17, 0x00	; 0
    5efe:	11 95       	neg	r17
    5f00:	01 95       	neg	r16
    5f02:	11 09       	sbc	r17, r1
    5f04:	6f 3f       	cpi	r22, 0xFF	; 255
    5f06:	8f ef       	ldi	r24, 0xFF	; 255
    5f08:	78 07       	cpc	r23, r24
    5f0a:	29 f4       	brne	.+10     	; 0x5f16 <dtoa_prf+0x274>
    5f0c:	d6 01       	movw	r26, r12
    5f0e:	9c 92       	st	X, r9
    5f10:	c6 01       	movw	r24, r12
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	6c 01       	movw	r12, r24
    5f16:	46 17       	cp	r20, r22
    5f18:	57 07       	cpc	r21, r23
    5f1a:	84 f0       	brlt	.+32     	; 0x5f3c <dtoa_prf+0x29a>
    5f1c:	66 16       	cp	r6, r22
    5f1e:	77 06       	cpc	r7, r23
    5f20:	6c f4       	brge	.+26     	; 0x5f3c <dtoa_prf+0x29a>
    5f22:	7f 01       	movw	r14, r30
    5f24:	e4 0c       	add	r14, r4
    5f26:	f5 1c       	adc	r15, r5
    5f28:	a1 e0       	ldi	r26, 0x01	; 1
    5f2a:	b0 e0       	ldi	r27, 0x00	; 0
    5f2c:	ac 0f       	add	r26, r28
    5f2e:	bd 1f       	adc	r27, r29
    5f30:	ea 0e       	add	r14, r26
    5f32:	fb 1e       	adc	r15, r27
    5f34:	d7 01       	movw	r26, r14
    5f36:	11 96       	adiw	r26, 0x01	; 1
    5f38:	bc 90       	ld	r11, X
    5f3a:	02 c0       	rjmp	.+4      	; 0x5f40 <dtoa_prf+0x29e>
    5f3c:	90 e3       	ldi	r25, 0x30	; 48
    5f3e:	b9 2e       	mov	r11, r25
    5f40:	61 50       	subi	r22, 0x01	; 1
    5f42:	71 09       	sbc	r23, r1
    5f44:	31 96       	adiw	r30, 0x01	; 1
    5f46:	c6 01       	movw	r24, r12
    5f48:	01 96       	adiw	r24, 0x01	; 1
    5f4a:	7c 01       	movw	r14, r24
    5f4c:	60 17       	cp	r22, r16
    5f4e:	71 07       	cpc	r23, r17
    5f50:	24 f0       	brlt	.+8      	; 0x5f5a <dtoa_prf+0x2b8>
    5f52:	d6 01       	movw	r26, r12
    5f54:	bc 92       	st	X, r11
    5f56:	6c 01       	movw	r12, r24
    5f58:	d5 cf       	rjmp	.-86     	; 0x5f04 <dtoa_prf+0x262>
    5f5a:	64 17       	cp	r22, r20
    5f5c:	75 07       	cpc	r23, r21
    5f5e:	41 f4       	brne	.+16     	; 0x5f70 <dtoa_prf+0x2ce>
    5f60:	36 33       	cpi	r19, 0x36	; 54
    5f62:	20 f4       	brcc	.+8      	; 0x5f6c <dtoa_prf+0x2ca>
    5f64:	35 33       	cpi	r19, 0x35	; 53
    5f66:	21 f4       	brne	.+8      	; 0x5f70 <dtoa_prf+0x2ce>
    5f68:	a1 10       	cpse	r10, r1
    5f6a:	02 c0       	rjmp	.+4      	; 0x5f70 <dtoa_prf+0x2ce>
    5f6c:	81 e3       	ldi	r24, 0x31	; 49
    5f6e:	b8 2e       	mov	r11, r24
    5f70:	f6 01       	movw	r30, r12
    5f72:	b0 82       	st	Z, r11
    5f74:	f7 01       	movw	r30, r14
    5f76:	82 2f       	mov	r24, r18
    5f78:	90 e2       	ldi	r25, 0x20	; 32
    5f7a:	88 23       	and	r24, r24
    5f7c:	19 f0       	breq	.+6      	; 0x5f84 <dtoa_prf+0x2e2>
    5f7e:	91 93       	st	Z+, r25
    5f80:	81 50       	subi	r24, 0x01	; 1
    5f82:	fb cf       	rjmp	.-10     	; 0x5f7a <dtoa_prf+0x2d8>
    5f84:	f7 01       	movw	r30, r14
    5f86:	e2 0f       	add	r30, r18
    5f88:	f1 1d       	adc	r31, r1
    5f8a:	10 82       	st	Z, r1
    5f8c:	80 e0       	ldi	r24, 0x00	; 0
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	29 96       	adiw	r28, 0x09	; 9
    5f92:	0f b6       	in	r0, 0x3f	; 63
    5f94:	f8 94       	cli
    5f96:	de bf       	out	0x3e, r29	; 62
    5f98:	0f be       	out	0x3f, r0	; 63
    5f9a:	cd bf       	out	0x3d, r28	; 61
    5f9c:	df 91       	pop	r29
    5f9e:	cf 91       	pop	r28
    5fa0:	1f 91       	pop	r17
    5fa2:	0f 91       	pop	r16
    5fa4:	ff 90       	pop	r15
    5fa6:	ef 90       	pop	r14
    5fa8:	df 90       	pop	r13
    5faa:	cf 90       	pop	r12
    5fac:	bf 90       	pop	r11
    5fae:	af 90       	pop	r10
    5fb0:	9f 90       	pop	r9
    5fb2:	7f 90       	pop	r7
    5fb4:	6f 90       	pop	r6
    5fb6:	5f 90       	pop	r5
    5fb8:	4f 90       	pop	r4
    5fba:	08 95       	ret

00005fbc <__ftoa_engine>:
    5fbc:	28 30       	cpi	r18, 0x08	; 8
    5fbe:	08 f0       	brcs	.+2      	; 0x5fc2 <__ftoa_engine+0x6>
    5fc0:	27 e0       	ldi	r18, 0x07	; 7
    5fc2:	33 27       	eor	r19, r19
    5fc4:	da 01       	movw	r26, r20
    5fc6:	99 0f       	add	r25, r25
    5fc8:	31 1d       	adc	r19, r1
    5fca:	87 fd       	sbrc	r24, 7
    5fcc:	91 60       	ori	r25, 0x01	; 1
    5fce:	00 96       	adiw	r24, 0x00	; 0
    5fd0:	61 05       	cpc	r22, r1
    5fd2:	71 05       	cpc	r23, r1
    5fd4:	39 f4       	brne	.+14     	; 0x5fe4 <__ftoa_engine+0x28>
    5fd6:	32 60       	ori	r19, 0x02	; 2
    5fd8:	2e 5f       	subi	r18, 0xFE	; 254
    5fda:	3d 93       	st	X+, r19
    5fdc:	30 e3       	ldi	r19, 0x30	; 48
    5fde:	2a 95       	dec	r18
    5fe0:	e1 f7       	brne	.-8      	; 0x5fda <__ftoa_engine+0x1e>
    5fe2:	08 95       	ret
    5fe4:	9f 3f       	cpi	r25, 0xFF	; 255
    5fe6:	30 f0       	brcs	.+12     	; 0x5ff4 <__ftoa_engine+0x38>
    5fe8:	80 38       	cpi	r24, 0x80	; 128
    5fea:	71 05       	cpc	r23, r1
    5fec:	61 05       	cpc	r22, r1
    5fee:	09 f0       	breq	.+2      	; 0x5ff2 <__ftoa_engine+0x36>
    5ff0:	3c 5f       	subi	r19, 0xFC	; 252
    5ff2:	3c 5f       	subi	r19, 0xFC	; 252
    5ff4:	3d 93       	st	X+, r19
    5ff6:	91 30       	cpi	r25, 0x01	; 1
    5ff8:	08 f0       	brcs	.+2      	; 0x5ffc <__ftoa_engine+0x40>
    5ffa:	80 68       	ori	r24, 0x80	; 128
    5ffc:	91 1d       	adc	r25, r1
    5ffe:	df 93       	push	r29
    6000:	cf 93       	push	r28
    6002:	1f 93       	push	r17
    6004:	0f 93       	push	r16
    6006:	ff 92       	push	r15
    6008:	ef 92       	push	r14
    600a:	19 2f       	mov	r17, r25
    600c:	98 7f       	andi	r25, 0xF8	; 248
    600e:	96 95       	lsr	r25
    6010:	e9 2f       	mov	r30, r25
    6012:	96 95       	lsr	r25
    6014:	96 95       	lsr	r25
    6016:	e9 0f       	add	r30, r25
    6018:	ff 27       	eor	r31, r31
    601a:	e1 57       	subi	r30, 0x71	; 113
    601c:	fd 4f       	sbci	r31, 0xFD	; 253
    601e:	99 27       	eor	r25, r25
    6020:	33 27       	eor	r19, r19
    6022:	ee 24       	eor	r14, r14
    6024:	ff 24       	eor	r15, r15
    6026:	a7 01       	movw	r20, r14
    6028:	e7 01       	movw	r28, r14
    602a:	05 90       	lpm	r0, Z+
    602c:	08 94       	sec
    602e:	07 94       	ror	r0
    6030:	28 f4       	brcc	.+10     	; 0x603c <__ftoa_engine+0x80>
    6032:	36 0f       	add	r19, r22
    6034:	e7 1e       	adc	r14, r23
    6036:	f8 1e       	adc	r15, r24
    6038:	49 1f       	adc	r20, r25
    603a:	51 1d       	adc	r21, r1
    603c:	66 0f       	add	r22, r22
    603e:	77 1f       	adc	r23, r23
    6040:	88 1f       	adc	r24, r24
    6042:	99 1f       	adc	r25, r25
    6044:	06 94       	lsr	r0
    6046:	a1 f7       	brne	.-24     	; 0x6030 <__ftoa_engine+0x74>
    6048:	05 90       	lpm	r0, Z+
    604a:	07 94       	ror	r0
    604c:	28 f4       	brcc	.+10     	; 0x6058 <__ftoa_engine+0x9c>
    604e:	e7 0e       	add	r14, r23
    6050:	f8 1e       	adc	r15, r24
    6052:	49 1f       	adc	r20, r25
    6054:	56 1f       	adc	r21, r22
    6056:	c1 1d       	adc	r28, r1
    6058:	77 0f       	add	r23, r23
    605a:	88 1f       	adc	r24, r24
    605c:	99 1f       	adc	r25, r25
    605e:	66 1f       	adc	r22, r22
    6060:	06 94       	lsr	r0
    6062:	a1 f7       	brne	.-24     	; 0x604c <__ftoa_engine+0x90>
    6064:	05 90       	lpm	r0, Z+
    6066:	07 94       	ror	r0
    6068:	28 f4       	brcc	.+10     	; 0x6074 <__ftoa_engine+0xb8>
    606a:	f8 0e       	add	r15, r24
    606c:	49 1f       	adc	r20, r25
    606e:	56 1f       	adc	r21, r22
    6070:	c7 1f       	adc	r28, r23
    6072:	d1 1d       	adc	r29, r1
    6074:	88 0f       	add	r24, r24
    6076:	99 1f       	adc	r25, r25
    6078:	66 1f       	adc	r22, r22
    607a:	77 1f       	adc	r23, r23
    607c:	06 94       	lsr	r0
    607e:	a1 f7       	brne	.-24     	; 0x6068 <__ftoa_engine+0xac>
    6080:	05 90       	lpm	r0, Z+
    6082:	07 94       	ror	r0
    6084:	20 f4       	brcc	.+8      	; 0x608e <__ftoa_engine+0xd2>
    6086:	49 0f       	add	r20, r25
    6088:	56 1f       	adc	r21, r22
    608a:	c7 1f       	adc	r28, r23
    608c:	d8 1f       	adc	r29, r24
    608e:	99 0f       	add	r25, r25
    6090:	66 1f       	adc	r22, r22
    6092:	77 1f       	adc	r23, r23
    6094:	88 1f       	adc	r24, r24
    6096:	06 94       	lsr	r0
    6098:	a9 f7       	brne	.-22     	; 0x6084 <__ftoa_engine+0xc8>
    609a:	84 91       	lpm	r24, Z
    609c:	10 95       	com	r17
    609e:	17 70       	andi	r17, 0x07	; 7
    60a0:	41 f0       	breq	.+16     	; 0x60b2 <__ftoa_engine+0xf6>
    60a2:	d6 95       	lsr	r29
    60a4:	c7 95       	ror	r28
    60a6:	57 95       	ror	r21
    60a8:	47 95       	ror	r20
    60aa:	f7 94       	ror	r15
    60ac:	e7 94       	ror	r14
    60ae:	1a 95       	dec	r17
    60b0:	c1 f7       	brne	.-16     	; 0x60a2 <__ftoa_engine+0xe6>
    60b2:	e5 e3       	ldi	r30, 0x35	; 53
    60b4:	f2 e0       	ldi	r31, 0x02	; 2
    60b6:	68 94       	set
    60b8:	15 90       	lpm	r1, Z+
    60ba:	15 91       	lpm	r17, Z+
    60bc:	35 91       	lpm	r19, Z+
    60be:	65 91       	lpm	r22, Z+
    60c0:	95 91       	lpm	r25, Z+
    60c2:	05 90       	lpm	r0, Z+
    60c4:	7f e2       	ldi	r23, 0x2F	; 47
    60c6:	73 95       	inc	r23
    60c8:	e1 18       	sub	r14, r1
    60ca:	f1 0a       	sbc	r15, r17
    60cc:	43 0b       	sbc	r20, r19
    60ce:	56 0b       	sbc	r21, r22
    60d0:	c9 0b       	sbc	r28, r25
    60d2:	d0 09       	sbc	r29, r0
    60d4:	c0 f7       	brcc	.-16     	; 0x60c6 <__ftoa_engine+0x10a>
    60d6:	e1 0c       	add	r14, r1
    60d8:	f1 1e       	adc	r15, r17
    60da:	43 1f       	adc	r20, r19
    60dc:	56 1f       	adc	r21, r22
    60de:	c9 1f       	adc	r28, r25
    60e0:	d0 1d       	adc	r29, r0
    60e2:	7e f4       	brtc	.+30     	; 0x6102 <__ftoa_engine+0x146>
    60e4:	70 33       	cpi	r23, 0x30	; 48
    60e6:	11 f4       	brne	.+4      	; 0x60ec <__ftoa_engine+0x130>
    60e8:	8a 95       	dec	r24
    60ea:	e6 cf       	rjmp	.-52     	; 0x60b8 <__ftoa_engine+0xfc>
    60ec:	e8 94       	clt
    60ee:	01 50       	subi	r16, 0x01	; 1
    60f0:	30 f0       	brcs	.+12     	; 0x60fe <__ftoa_engine+0x142>
    60f2:	08 0f       	add	r16, r24
    60f4:	0a f4       	brpl	.+2      	; 0x60f8 <__ftoa_engine+0x13c>
    60f6:	00 27       	eor	r16, r16
    60f8:	02 17       	cp	r16, r18
    60fa:	08 f4       	brcc	.+2      	; 0x60fe <__ftoa_engine+0x142>
    60fc:	20 2f       	mov	r18, r16
    60fe:	23 95       	inc	r18
    6100:	02 2f       	mov	r16, r18
    6102:	7a 33       	cpi	r23, 0x3A	; 58
    6104:	28 f0       	brcs	.+10     	; 0x6110 <__ftoa_engine+0x154>
    6106:	79 e3       	ldi	r23, 0x39	; 57
    6108:	7d 93       	st	X+, r23
    610a:	2a 95       	dec	r18
    610c:	e9 f7       	brne	.-6      	; 0x6108 <__ftoa_engine+0x14c>
    610e:	10 c0       	rjmp	.+32     	; 0x6130 <__ftoa_engine+0x174>
    6110:	7d 93       	st	X+, r23
    6112:	2a 95       	dec	r18
    6114:	89 f6       	brne	.-94     	; 0x60b8 <__ftoa_engine+0xfc>
    6116:	06 94       	lsr	r0
    6118:	97 95       	ror	r25
    611a:	67 95       	ror	r22
    611c:	37 95       	ror	r19
    611e:	17 95       	ror	r17
    6120:	17 94       	ror	r1
    6122:	e1 18       	sub	r14, r1
    6124:	f1 0a       	sbc	r15, r17
    6126:	43 0b       	sbc	r20, r19
    6128:	56 0b       	sbc	r21, r22
    612a:	c9 0b       	sbc	r28, r25
    612c:	d0 09       	sbc	r29, r0
    612e:	98 f0       	brcs	.+38     	; 0x6156 <__ftoa_engine+0x19a>
    6130:	23 95       	inc	r18
    6132:	7e 91       	ld	r23, -X
    6134:	73 95       	inc	r23
    6136:	7a 33       	cpi	r23, 0x3A	; 58
    6138:	08 f0       	brcs	.+2      	; 0x613c <__ftoa_engine+0x180>
    613a:	70 e3       	ldi	r23, 0x30	; 48
    613c:	7c 93       	st	X, r23
    613e:	20 13       	cpse	r18, r16
    6140:	b8 f7       	brcc	.-18     	; 0x6130 <__ftoa_engine+0x174>
    6142:	7e 91       	ld	r23, -X
    6144:	70 61       	ori	r23, 0x10	; 16
    6146:	7d 93       	st	X+, r23
    6148:	30 f0       	brcs	.+12     	; 0x6156 <__ftoa_engine+0x19a>
    614a:	83 95       	inc	r24
    614c:	71 e3       	ldi	r23, 0x31	; 49
    614e:	7d 93       	st	X+, r23
    6150:	70 e3       	ldi	r23, 0x30	; 48
    6152:	2a 95       	dec	r18
    6154:	e1 f7       	brne	.-8      	; 0x614e <__ftoa_engine+0x192>
    6156:	11 24       	eor	r1, r1
    6158:	ef 90       	pop	r14
    615a:	ff 90       	pop	r15
    615c:	0f 91       	pop	r16
    615e:	1f 91       	pop	r17
    6160:	cf 91       	pop	r28
    6162:	df 91       	pop	r29
    6164:	99 27       	eor	r25, r25
    6166:	87 fd       	sbrc	r24, 7
    6168:	90 95       	com	r25
    616a:	08 95       	ret

0000616c <__ctype_isfalse>:
    616c:	99 27       	eor	r25, r25
    616e:	88 27       	eor	r24, r24

00006170 <__ctype_istrue>:
    6170:	08 95       	ret

00006172 <eeprom_read_block>:
    6172:	dc 01       	movw	r26, r24
    6174:	cb 01       	movw	r24, r22

00006176 <eeprom_read_blraw>:
    6176:	fc 01       	movw	r30, r24
    6178:	f9 99       	sbic	0x1f, 1	; 31
    617a:	fe cf       	rjmp	.-4      	; 0x6178 <eeprom_read_blraw+0x2>
    617c:	06 c0       	rjmp	.+12     	; 0x618a <eeprom_read_blraw+0x14>
    617e:	f2 bd       	out	0x22, r31	; 34
    6180:	e1 bd       	out	0x21, r30	; 33
    6182:	f8 9a       	sbi	0x1f, 0	; 31
    6184:	31 96       	adiw	r30, 0x01	; 1
    6186:	00 b4       	in	r0, 0x20	; 32
    6188:	0d 92       	st	X+, r0
    618a:	41 50       	subi	r20, 0x01	; 1
    618c:	50 40       	sbci	r21, 0x00	; 0
    618e:	b8 f7       	brcc	.-18     	; 0x617e <eeprom_read_blraw+0x8>
    6190:	08 95       	ret

00006192 <eeprom_read_byte>:
    6192:	f9 99       	sbic	0x1f, 1	; 31
    6194:	fe cf       	rjmp	.-4      	; 0x6192 <eeprom_read_byte>
    6196:	92 bd       	out	0x22, r25	; 34
    6198:	81 bd       	out	0x21, r24	; 33
    619a:	f8 9a       	sbi	0x1f, 0	; 31
    619c:	99 27       	eor	r25, r25
    619e:	80 b5       	in	r24, 0x20	; 32
    61a0:	08 95       	ret

000061a2 <eeprom_write_block>:
    61a2:	dc 01       	movw	r26, r24
    61a4:	cb 01       	movw	r24, r22
    61a6:	02 c0       	rjmp	.+4      	; 0x61ac <eeprom_write_block+0xa>
    61a8:	2d 91       	ld	r18, X+
    61aa:	05 d0       	rcall	.+10     	; 0x61b6 <eeprom_write_r18>
    61ac:	41 50       	subi	r20, 0x01	; 1
    61ae:	50 40       	sbci	r21, 0x00	; 0
    61b0:	d8 f7       	brcc	.-10     	; 0x61a8 <eeprom_write_block+0x6>
    61b2:	08 95       	ret

000061b4 <eeprom_write_byte>:
    61b4:	26 2f       	mov	r18, r22

000061b6 <eeprom_write_r18>:
    61b6:	f9 99       	sbic	0x1f, 1	; 31
    61b8:	fe cf       	rjmp	.-4      	; 0x61b6 <eeprom_write_r18>
    61ba:	1f ba       	out	0x1f, r1	; 31
    61bc:	92 bd       	out	0x22, r25	; 34
    61be:	81 bd       	out	0x21, r24	; 33
    61c0:	20 bd       	out	0x20, r18	; 32
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	fa 9a       	sbi	0x1f, 2	; 31
    61c8:	f9 9a       	sbi	0x1f, 1	; 31
    61ca:	0f be       	out	0x3f, r0	; 63
    61cc:	01 96       	adiw	r24, 0x01	; 1
    61ce:	08 95       	ret

000061d0 <__do_global_dtors>:
    61d0:	12 e0       	ldi	r17, 0x02	; 2
    61d2:	c0 e1       	ldi	r28, 0x10	; 16
    61d4:	d2 e0       	ldi	r29, 0x02	; 2
    61d6:	03 c0       	rjmp	.+6      	; 0x61de <__do_global_dtors+0xe>
    61d8:	fe 01       	movw	r30, r28
    61da:	5a d9       	rcall	.-3404   	; 0x5490 <__tablejump2__>
    61dc:	21 96       	adiw	r28, 0x01	; 1
    61de:	c2 31       	cpi	r28, 0x12	; 18
    61e0:	d1 07       	cpc	r29, r17
    61e2:	d1 f7       	brne	.-12     	; 0x61d8 <__do_global_dtors+0x8>
    61e4:	f8 94       	cli

000061e6 <__stop_program>:
    61e6:	ff cf       	rjmp	.-2      	; 0x61e6 <__stop_program>
