
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00006486  0000651a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000642  008001ae  008001ae  000065c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e68  00000000  00000000  00006664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c1ab  00000000  00000000  000074cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040c4  00000000  00000000  00023677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008ec5  00000000  00000000  0002773b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c14  00000000  00000000  00030600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000122cf  00000000  00000000  00033214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000768b  00000000  00000000  000454e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000df0  00000000  00000000  0004cb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000894a  00000000  00000000  0004d95e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cb c1       	rjmp	.+918    	; 0x398 <__dtors_end>
       2:	00 00       	nop
       4:	f1 c1       	rjmp	.+994    	; 0x3e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c1       	rjmp	.+990    	; 0x3e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c4       	rjmp	.+2506   	; 0x9d8 <__vector_3>
       e:	00 00       	nop
      10:	e3 c4       	rjmp	.+2502   	; 0x9d8 <__vector_3>
      12:	00 00       	nop
      14:	e1 c4       	rjmp	.+2498   	; 0x9d8 <__vector_3>
      16:	00 00       	nop
      18:	e7 c1       	rjmp	.+974    	; 0x3e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c1       	rjmp	.+970    	; 0x3e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c1       	rjmp	.+966    	; 0x3e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c1       	rjmp	.+962    	; 0x3e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c1       	rjmp	.+958    	; 0x3e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	dd c1       	rjmp	.+954    	; 0x3e8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	db c1       	rjmp	.+950    	; 0x3e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c1       	rjmp	.+946    	; 0x3e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c1       	rjmp	.+942    	; 0x3e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c1       	rjmp	.+938    	; 0x3e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__vector_16>
      44:	d1 c1       	rjmp	.+930    	; 0x3e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 5a 27 	jmp	0x4eb4	; 0x4eb4 <__vector_18>
      4c:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__vector_19>
      50:	cb c1       	rjmp	.+918    	; 0x3e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c9 c1       	rjmp	.+914    	; 0x3e8 <__bad_interrupt>
      56:	00 00       	nop
      58:	c7 c1       	rjmp	.+910    	; 0x3e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c1       	rjmp	.+906    	; 0x3e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__vector_24>
      62:	00 00       	nop
      64:	c1 c1       	rjmp	.+898    	; 0x3e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2c 03       	fmul	r18, r20
      6a:	2f 03       	fmul	r18, r23
      6c:	2f 03       	fmul	r18, r23
      6e:	2f 03       	fmul	r18, r23
      70:	2f 03       	fmul	r18, r23
      72:	2f 03       	fmul	r18, r23
      74:	2f 03       	fmul	r18, r23
      76:	2f 03       	fmul	r18, r23
      78:	47 02       	muls	r20, r23
      7a:	2f 03       	fmul	r18, r23
      7c:	2f 03       	fmul	r18, r23
      7e:	2f 03       	fmul	r18, r23
      80:	2f 03       	fmul	r18, r23
      82:	2f 03       	fmul	r18, r23
      84:	2f 03       	fmul	r18, r23
      86:	2f 03       	fmul	r18, r23
      88:	47 02       	muls	r20, r23
      8a:	2f 03       	fmul	r18, r23
      8c:	2f 03       	fmul	r18, r23
      8e:	2f 03       	fmul	r18, r23
      90:	2f 03       	fmul	r18, r23
      92:	2f 03       	fmul	r18, r23
      94:	2f 03       	fmul	r18, r23
      96:	2f 03       	fmul	r18, r23
      98:	4f 02       	muls	r20, r31
      9a:	2f 03       	fmul	r18, r23
      9c:	2f 03       	fmul	r18, r23
      9e:	2f 03       	fmul	r18, r23
      a0:	2f 03       	fmul	r18, r23
      a2:	2f 03       	fmul	r18, r23
      a4:	2f 03       	fmul	r18, r23
      a6:	2f 03       	fmul	r18, r23
      a8:	74 02       	muls	r23, r20
      aa:	2f 03       	fmul	r18, r23
      ac:	2f 03       	fmul	r18, r23
      ae:	2f 03       	fmul	r18, r23
      b0:	2f 03       	fmul	r18, r23
      b2:	2f 03       	fmul	r18, r23
      b4:	2f 03       	fmul	r18, r23
      b6:	2f 03       	fmul	r18, r23
      b8:	4f 02       	muls	r20, r31
      ba:	2f 03       	fmul	r18, r23
      bc:	2f 03       	fmul	r18, r23
      be:	2f 03       	fmul	r18, r23
      c0:	2f 03       	fmul	r18, r23
      c2:	2f 03       	fmul	r18, r23
      c4:	2f 03       	fmul	r18, r23
      c6:	2f 03       	fmul	r18, r23
      c8:	79 02       	muls	r23, r25
      ca:	2f 03       	fmul	r18, r23
      cc:	2f 03       	fmul	r18, r23
      ce:	2f 03       	fmul	r18, r23
      d0:	2f 03       	fmul	r18, r23
      d2:	2f 03       	fmul	r18, r23
      d4:	2f 03       	fmul	r18, r23
      d6:	2f 03       	fmul	r18, r23
      d8:	7e 02       	muls	r23, r30
      da:	2f 03       	fmul	r18, r23
      dc:	2f 03       	fmul	r18, r23
      de:	2f 03       	fmul	r18, r23
      e0:	2f 03       	fmul	r18, r23
      e2:	2f 03       	fmul	r18, r23
      e4:	2f 03       	fmul	r18, r23
      e6:	2f 03       	fmul	r18, r23
      e8:	8f 02       	muls	r24, r31
      ea:	2f 03       	fmul	r18, r23
      ec:	2f 03       	fmul	r18, r23
      ee:	2f 03       	fmul	r18, r23
      f0:	2f 03       	fmul	r18, r23
      f2:	2f 03       	fmul	r18, r23
      f4:	2f 03       	fmul	r18, r23
      f6:	2f 03       	fmul	r18, r23
      f8:	b8 02       	muls	r27, r24
      fa:	2f 03       	fmul	r18, r23
      fc:	2f 03       	fmul	r18, r23
      fe:	2f 03       	fmul	r18, r23
     100:	2f 03       	fmul	r18, r23
     102:	2f 03       	fmul	r18, r23
     104:	2f 03       	fmul	r18, r23
     106:	2f 03       	fmul	r18, r23
     108:	83 02       	muls	r24, r19
     10a:	2f 03       	fmul	r18, r23
     10c:	2f 03       	fmul	r18, r23
     10e:	2f 03       	fmul	r18, r23
     110:	2f 03       	fmul	r18, r23
     112:	2f 03       	fmul	r18, r23
     114:	2f 03       	fmul	r18, r23
     116:	2f 03       	fmul	r18, r23
     118:	9d 02       	muls	r25, r29
     11a:	2f 03       	fmul	r18, r23
     11c:	2f 03       	fmul	r18, r23
     11e:	2f 03       	fmul	r18, r23
     120:	2f 03       	fmul	r18, r23
     122:	2f 03       	fmul	r18, r23
     124:	2f 03       	fmul	r18, r23
     126:	2f 03       	fmul	r18, r23
     128:	ba 02       	muls	r27, r26
     12a:	2f 03       	fmul	r18, r23
     12c:	2f 03       	fmul	r18, r23
     12e:	2f 03       	fmul	r18, r23
     130:	2f 03       	fmul	r18, r23
     132:	2f 03       	fmul	r18, r23
     134:	2f 03       	fmul	r18, r23
     136:	2f 03       	fmul	r18, r23
     138:	ba 02       	muls	r27, r26
     13a:	2f 03       	fmul	r18, r23
     13c:	2f 03       	fmul	r18, r23
     13e:	2f 03       	fmul	r18, r23
     140:	2f 03       	fmul	r18, r23
     142:	2f 03       	fmul	r18, r23
     144:	2f 03       	fmul	r18, r23
     146:	2f 03       	fmul	r18, r23
     148:	ba 02       	muls	r27, r26
     14a:	2f 03       	fmul	r18, r23
     14c:	2f 03       	fmul	r18, r23
     14e:	2f 03       	fmul	r18, r23
     150:	2f 03       	fmul	r18, r23
     152:	2f 03       	fmul	r18, r23
     154:	2f 03       	fmul	r18, r23
     156:	2f 03       	fmul	r18, r23
     158:	ba 02       	muls	r27, r26
     15a:	2f 03       	fmul	r18, r23
     15c:	2f 03       	fmul	r18, r23
     15e:	2f 03       	fmul	r18, r23
     160:	2f 03       	fmul	r18, r23
     162:	2f 03       	fmul	r18, r23
     164:	2f 03       	fmul	r18, r23
     166:	2f 03       	fmul	r18, r23
     168:	c3 02       	muls	r28, r19
     16a:	2f 03       	fmul	r18, r23
     16c:	2f 03       	fmul	r18, r23
     16e:	2f 03       	fmul	r18, r23
     170:	2f 03       	fmul	r18, r23
     172:	2f 03       	fmul	r18, r23
     174:	2f 03       	fmul	r18, r23
     176:	2f 03       	fmul	r18, r23
     178:	f3 02       	muls	r31, r19
     17a:	2f 03       	fmul	r18, r23
     17c:	2f 03       	fmul	r18, r23
     17e:	2f 03       	fmul	r18, r23
     180:	2f 03       	fmul	r18, r23
     182:	2f 03       	fmul	r18, r23
     184:	2f 03       	fmul	r18, r23
     186:	2f 03       	fmul	r18, r23
     188:	c3 02       	muls	r28, r19
     18a:	2f 03       	fmul	r18, r23
     18c:	2f 03       	fmul	r18, r23
     18e:	2f 03       	fmul	r18, r23
     190:	2f 03       	fmul	r18, r23
     192:	2f 03       	fmul	r18, r23
     194:	2f 03       	fmul	r18, r23
     196:	2f 03       	fmul	r18, r23
     198:	f3 02       	muls	r31, r19
     19a:	2f 03       	fmul	r18, r23
     19c:	2f 03       	fmul	r18, r23
     19e:	2f 03       	fmul	r18, r23
     1a0:	2f 03       	fmul	r18, r23
     1a2:	2f 03       	fmul	r18, r23
     1a4:	2f 03       	fmul	r18, r23
     1a6:	2f 03       	fmul	r18, r23
     1a8:	db 02       	muls	r29, r27
     1aa:	2f 03       	fmul	r18, r23
     1ac:	2f 03       	fmul	r18, r23
     1ae:	2f 03       	fmul	r18, r23
     1b0:	2f 03       	fmul	r18, r23
     1b2:	2f 03       	fmul	r18, r23
     1b4:	2f 03       	fmul	r18, r23
     1b6:	2f 03       	fmul	r18, r23
     1b8:	f7 02       	muls	r31, r23
     1ba:	2f 03       	fmul	r18, r23
     1bc:	2f 03       	fmul	r18, r23
     1be:	2f 03       	fmul	r18, r23
     1c0:	2f 03       	fmul	r18, r23
     1c2:	2f 03       	fmul	r18, r23
     1c4:	2f 03       	fmul	r18, r23
     1c6:	2f 03       	fmul	r18, r23
     1c8:	f7 02       	muls	r31, r23
     1ca:	2f 03       	fmul	r18, r23
     1cc:	2f 03       	fmul	r18, r23
     1ce:	2f 03       	fmul	r18, r23
     1d0:	2f 03       	fmul	r18, r23
     1d2:	2f 03       	fmul	r18, r23
     1d4:	2f 03       	fmul	r18, r23
     1d6:	2f 03       	fmul	r18, r23
     1d8:	0c 03       	fmul	r16, r20
     1da:	2f 03       	fmul	r18, r23
     1dc:	2f 03       	fmul	r18, r23
     1de:	2f 03       	fmul	r18, r23
     1e0:	2f 03       	fmul	r18, r23
     1e2:	2f 03       	fmul	r18, r23
     1e4:	2f 03       	fmul	r18, r23
     1e6:	2f 03       	fmul	r18, r23
     1e8:	26 03       	mulsu	r18, r22
     1ea:	2f 03       	fmul	r18, r23
     1ec:	2f 03       	fmul	r18, r23
     1ee:	2f 03       	fmul	r18, r23
     1f0:	2f 03       	fmul	r18, r23
     1f2:	2f 03       	fmul	r18, r23
     1f4:	2f 03       	fmul	r18, r23
     1f6:	2f 03       	fmul	r18, r23
     1f8:	26 03       	mulsu	r18, r22
     1fa:	08 00       	.word	0x0008	; ????
     1fc:	00 00       	nop
     1fe:	be 92       	st	-X, r11
     200:	24 49       	sbci	r18, 0x94	; 148
     202:	12 3e       	cpi	r17, 0xE2	; 226
     204:	ab aa       	std	Y+51, r10	; 0x33
     206:	aa 2a       	or	r10, r26
     208:	be cd       	rjmp	.-1156   	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     20a:	cc cc       	rjmp	.-1640   	; 0xfffffba4 <__eeprom_end+0xff7efba4>
     20c:	4c 3e       	cpi	r20, 0xEC	; 236
     20e:	00 00       	nop
     210:	00 80       	ld	r0, Z
     212:	be ab       	std	Y+54, r27	; 0x36
     214:	aa aa       	std	Y+50, r10	; 0x32
     216:	aa 3e       	cpi	r26, 0xEA	; 234
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	bf 00       	.word	0x00bf	; ????
     21e:	00 00       	nop
     220:	80 3f       	cpi	r24, 0xF0	; 240
     222:	00 00       	nop
     224:	00 00       	nop
     226:	00 08       	sbc	r0, r0
     228:	41 78       	andi	r20, 0x81	; 129
     22a:	d3 bb       	out	0x13, r29	; 19
     22c:	43 87       	std	Z+11, r20	; 0x0b
     22e:	d1 13       	cpse	r29, r17
     230:	3d 19       	sub	r19, r13
     232:	0e 3c       	cpi	r16, 0xCE	; 206
     234:	c3 bd       	out	0x23, r28	; 35
     236:	42 82       	std	Z+2, r4	; 0x02
     238:	ad 2b       	or	r26, r29
     23a:	3e 68       	ori	r19, 0x8E	; 142
     23c:	ec 82       	std	Y+4, r14	; 0x04
     23e:	76 be       	out	0x36, r7	; 54
     240:	d9 8f       	std	Y+25, r29	; 0x19
     242:	e1 a9       	ldd	r30, Z+49	; 0x31
     244:	3e 4c       	sbci	r19, 0xCE	; 206
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	ff be       	out	0x3f, r15	; 63
     24a:	01 c4       	rjmp	.+2050   	; 0xa4e <__vector_3+0x76>
     24c:	ff 7f       	andi	r31, 0xFF	; 255
     24e:	3f 00       	.word	0x003f	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	07 63       	ori	r16, 0x37	; 55
     256:	42 36       	cpi	r20, 0x62	; 98
     258:	b7 9b       	sbis	0x16, 7	; 22
     25a:	d8 a7       	std	Y+40, r29	; 0x28
     25c:	1a 39       	cpi	r17, 0x9A	; 154
     25e:	68 56       	subi	r22, 0x68	; 104
     260:	18 ae       	std	Y+56, r1	; 0x38
     262:	ba ab       	std	Y+50, r27	; 0x32
     264:	55 8c       	ldd	r5, Z+29	; 0x1d
     266:	1d 3c       	cpi	r17, 0xCD	; 205
     268:	b7 cc       	rjmp	.-1682   	; 0xfffffbd8 <__eeprom_end+0xff7efbd8>
     26a:	57 63       	ori	r21, 0x37	; 55
     26c:	bd 6d       	ori	r27, 0xDD	; 221
     26e:	ed fd       	.word	0xfded	; ????
     270:	75 3e       	cpi	r23, 0xE5	; 229
     272:	f6 17       	cp	r31, r22
     274:	72 31       	cpi	r23, 0x12	; 18
     276:	bf 00       	.word	0x00bf	; ????
     278:	00 00       	nop
     27a:	80 3f       	cpi	r24, 0xF0	; 240

0000027c <__trampolines_end>:
     27c:	4e 41       	sbci	r20, 0x1E	; 30
     27e:	4e 49       	Address 0x0000027e is out of bounds.
.word	0xffff	; ????

0000027f <pstr_inity>:
     27f:	49 4e 49 54 59                                      INITY

00000284 <pstr_inf>:
     284:	49 4e 46                                            INF

00000287 <pwr_m10>:
     287:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     297:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000029f <pwr_p10>:
     29f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2af:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000002b7 <_ZZN7LCDBase9ClearLineEsE3__c>:
     2b7:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000002c8 <_ZZN8PHSensor12PrintPHToLCDEvE3__c>:
     2c8:	50 48 3a 20 00                                      PH: .

000002cd <_ZZN8PHSensor16CalculateAverageEPiiE3__c>:
     2cd:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     2dd:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     2ed:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000002f7 <_ZZN15CmdMessengerExt17OnIdentifyRequestEvE3__c>:
     2f7:	57 61 74 65 72 53 65 6e 73 6f 72 73 00              WaterSensors.

00000304 <_ZZN15CmdMessengerExt16OnUnknownCommandEvE3__c>:
     304:	43 6f 6d 6d 61 6e 64 20 77 69 74 68 6f 75 74 20     Command without 
     314:	61 74 74 61 63 68 65 64 20 63 61 6c 6c 62 61 63     attached callbac
     324:	6b 00                                               k.

00000326 <_ZZN15CmdMessengerExt14OnStartLoggingEvE3__c>:
     326:	53 74 61 72 74 20 4c 6f 67 67 69 6e 67 00           Start Logging.

00000334 <digital_pin_to_timer_PGM>:
     334:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     344:	00 00 00 00                                         ....

00000348 <digital_pin_to_bit_mask_PGM>:
     348:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     358:	04 08 10 20                                         ... 

0000035c <digital_pin_to_port_PGM>:
     35c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     36c:	03 03 03 03                                         ....

00000370 <port_to_input_PGM>:
     370:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000037a <port_to_output_PGM>:
     37a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000384 <port_to_mode_PGM>:
     384:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000038e <__ctors_start>:
     38e:	a4 04       	cpc	r10, r4
     390:	7d 13       	cpse	r23, r29
     392:	8c 22       	and	r8, r28
     394:	ba 27       	eor	r27, r26

00000396 <__ctors_end>:
     396:	9a 22       	and	r9, r26

00000398 <__dtors_end>:
     398:	11 24       	eor	r1, r1
     39a:	1f be       	out	0x3f, r1	; 63
     39c:	cf ef       	ldi	r28, 0xFF	; 255
     39e:	d8 e0       	ldi	r29, 0x08	; 8
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	cd bf       	out	0x3d, r28	; 61

000003a4 <__do_copy_data>:
     3a4:	11 e0       	ldi	r17, 0x01	; 1
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	e6 e8       	ldi	r30, 0x86	; 134
     3ac:	f4 e6       	ldi	r31, 0x64	; 100
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__do_copy_data+0x10>
     3b0:	05 90       	lpm	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	ae 3a       	cpi	r26, 0xAE	; 174
     3b6:	b1 07       	cpc	r27, r17
     3b8:	d9 f7       	brne	.-10     	; 0x3b0 <__do_copy_data+0xc>

000003ba <__do_clear_bss>:
     3ba:	27 e0       	ldi	r18, 0x07	; 7
     3bc:	ae ea       	ldi	r26, 0xAE	; 174
     3be:	b1 e0       	ldi	r27, 0x01	; 1
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <.do_clear_bss_start>

000003c2 <.do_clear_bss_loop>:
     3c2:	1d 92       	st	X+, r1

000003c4 <.do_clear_bss_start>:
     3c4:	a0 3f       	cpi	r26, 0xF0	; 240
     3c6:	b2 07       	cpc	r27, r18
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <.do_clear_bss_loop>

000003ca <__do_global_ctors>:
     3ca:	11 e0       	ldi	r17, 0x01	; 1
     3cc:	cb ec       	ldi	r28, 0xCB	; 203
     3ce:	d1 e0       	ldi	r29, 0x01	; 1
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <__do_global_ctors+0x10>
     3d2:	21 97       	sbiw	r28, 0x01	; 1
     3d4:	fe 01       	movw	r30, r28
     3d6:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__tablejump2__>
     3da:	c7 3c       	cpi	r28, 0xC7	; 199
     3dc:	d1 07       	cpc	r29, r17
     3de:	c9 f7       	brne	.-14     	; 0x3d2 <__do_global_ctors+0x8>
     3e0:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <main>
     3e4:	0c 94 37 32 	jmp	0x646e	; 0x646e <__do_global_dtors>

000003e8 <__bad_interrupt>:
     3e8:	0b ce       	rjmp	.-1002   	; 0x0 <__vectors>

000003ea <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     3ea:	61 32       	cpi	r22, 0x21	; 33
     3ec:	c8 f4       	brcc	.+50     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     3ee:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <twi_state>
     3f2:	24 30       	cpi	r18, 0x04	; 4
     3f4:	b9 f4       	brne	.+46     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     3f6:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <twi_txBufferLength>
     3fa:	66 23       	and	r22, r22
     3fc:	a9 f0       	breq	.+42     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     3fe:	fc 01       	movw	r30, r24
     400:	a2 ed       	ldi	r26, 0xD2	; 210
     402:	b1 e0       	ldi	r27, 0x01	; 1
     404:	61 50       	subi	r22, 0x01	; 1
     406:	26 2f       	mov	r18, r22
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	2f 5f       	subi	r18, 0xFF	; 255
     40c:	3f 4f       	sbci	r19, 0xFF	; 255
     40e:	28 0f       	add	r18, r24
     410:	39 1f       	adc	r19, r25
     412:	91 91       	ld	r25, Z+
     414:	9d 93       	st	X+, r25
     416:	e2 17       	cp	r30, r18
     418:	f3 07       	cpc	r31, r19
     41a:	d9 f7       	brne	.-10     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	08 95       	ret
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	08 95       	ret
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	08 95       	ret
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	08 95       	ret

0000042c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     42c:	85 ed       	ldi	r24, 0xD5	; 213
     42e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     432:	ec eb       	ldi	r30, 0xBC	; 188
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	84 fd       	sbrc	r24, 4
     43a:	fd cf       	rjmp	.-6      	; 0x436 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     43c:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi_state>
     440:	08 95       	ret

00000442 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     442:	85 ec       	ldi	r24, 0xC5	; 197
     444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     448:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi_state>
     44c:	08 95       	ret

0000044e <__vector_24>:
}

ISR(TWI_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
  switch(TW_STATUS){
     470:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     474:	e8 2f       	mov	r30, r24
     476:	e8 7f       	andi	r30, 0xF8	; 248
     478:	8e 2f       	mov	r24, r30
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	89 3c       	cpi	r24, 0xC9	; 201
     47e:	91 05       	cpc	r25, r1
     480:	08 f0       	brcs	.+2      	; 0x484 <__vector_24+0x36>
     482:	ed c0       	rjmp	.+474    	; 0x65e <__vector_24+0x210>
     484:	fc 01       	movw	r30, r24
     486:	ec 5c       	subi	r30, 0xCC	; 204
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     48e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <twi_slarw>
     492:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     496:	85 ec       	ldi	r24, 0xC5	; 197
     498:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     49c:	e0 c0       	rjmp	.+448    	; 0x65e <__vector_24+0x210>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     49e:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <twi_masterBufferIndex>
     4a2:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <twi_masterBufferLength>
     4a6:	98 17       	cp	r25, r24
     4a8:	80 f4       	brcc	.+32     	; 0x4ca <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     4aa:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <twi_masterBufferIndex>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	8e 0f       	add	r24, r30
     4b2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <twi_masterBufferIndex>
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	ec 50       	subi	r30, 0x0C	; 12
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	80 81       	ld	r24, Z
     4be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     4c2:	85 ec       	ldi	r24, 0xC5	; 197
     4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4c8:	ca c0       	rjmp	.+404    	; 0x65e <__vector_24+0x210>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     4ca:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <twi_sendStop>
     4ce:	88 23       	and	r24, r24
     4d0:	11 f0       	breq	.+4      	; 0x4d6 <__vector_24+0x88>
          twi_stop();
     4d2:	ac df       	rcall	.-168    	; 0x42c <twi_stop>
     4d4:	c4 c0       	rjmp	.+392    	; 0x65e <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     4dc:	84 ea       	ldi	r24, 0xA4	; 164
     4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     4e2:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi_state>
     4e6:	bb c0       	rjmp	.+374    	; 0x65e <__vector_24+0x210>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     4e8:	80 e2       	ldi	r24, 0x20	; 32
     4ea:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
      twi_stop();
     4ee:	9e df       	rcall	.-196    	; 0x42c <twi_stop>
      break;
     4f0:	b6 c0       	rjmp	.+364    	; 0x65e <__vector_24+0x210>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
      twi_stop();
     4f8:	99 df       	rcall	.-206    	; 0x42c <twi_stop>
      break;
     4fa:	b1 c0       	rjmp	.+354    	; 0x65e <__vector_24+0x210>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     4fc:	88 e3       	ldi	r24, 0x38	; 56
     4fe:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
      twi_releaseBus();
     502:	9f df       	rcall	.-194    	; 0x442 <twi_releaseBus>
      break;
     504:	ac c0       	rjmp	.+344    	; 0x65e <__vector_24+0x210>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     506:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <twi_masterBufferIndex>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	8e 0f       	add	r24, r30
     50e:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <twi_masterBufferIndex>
     512:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ec 50       	subi	r30, 0x0C	; 12
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     51e:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <twi_masterBufferIndex>
     522:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <twi_masterBufferLength>
     526:	98 17       	cp	r25, r24
     528:	20 f4       	brcc	.+8      	; 0x532 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     52a:	85 ec       	ldi	r24, 0xC5	; 197
     52c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     530:	96 c0       	rjmp	.+300    	; 0x65e <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     532:	85 e8       	ldi	r24, 0x85	; 133
     534:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     538:	92 c0       	rjmp	.+292    	; 0x65e <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     53a:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <twi_masterBufferIndex>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	8e 0f       	add	r24, r30
     542:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <twi_masterBufferIndex>
     546:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 50       	subi	r30, 0x0C	; 12
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 83       	st	Z, r24
	if (twi_sendStop)
     552:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <twi_sendStop>
     556:	88 23       	and	r24, r24
     558:	11 f0       	breq	.+4      	; 0x55e <__vector_24+0x110>
          twi_stop();
     55a:	68 df       	rcall	.-304    	; 0x42c <twi_stop>
     55c:	80 c0       	rjmp	.+256    	; 0x65e <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     564:	84 ea       	ldi	r24, 0xA4	; 164
     566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     56a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi_state>
     56e:	77 c0       	rjmp	.+238    	; 0x65e <__vector_24+0x210>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     570:	5d df       	rcall	.-326    	; 0x42c <twi_stop>
      break;
     572:	75 c0       	rjmp	.+234    	; 0x65e <__vector_24+0x210>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     57a:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     57e:	85 ec       	ldi	r24, 0xC5	; 197
     580:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     584:	6c c0       	rjmp	.+216    	; 0x65e <__vector_24+0x210>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     586:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <twi_rxBufferIndex>
     58a:	80 32       	cpi	r24, 0x20	; 32
     58c:	80 f4       	brcc	.+32     	; 0x5ae <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     58e:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <twi_rxBufferIndex>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	8e 0f       	add	r24, r30
     596:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <twi_rxBufferIndex>
     59a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	e0 55       	subi	r30, 0x50	; 80
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5a6:	85 ec       	ldi	r24, 0xC5	; 197
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5ac:	58 c0       	rjmp	.+176    	; 0x65e <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     5ae:	85 e8       	ldi	r24, 0x85	; 133
     5b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5b4:	54 c0       	rjmp	.+168    	; 0x65e <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     5b6:	45 df       	rcall	.-374    	; 0x442 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     5b8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <twi_rxBufferIndex>
     5bc:	80 32       	cpi	r24, 0x20	; 32
     5be:	30 f4       	brcc	.+12     	; 0x5cc <__vector_24+0x17e>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     5c0:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <twi_rxBufferIndex>
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	e0 55       	subi	r30, 0x50	; 80
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     5cc:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <twi_rxBufferIndex>
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <twi_onSlaveReceive>
     5d6:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <twi_onSlaveReceive+0x1>
     5da:	80 eb       	ldi	r24, 0xB0	; 176
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     5e0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <twi_rxBufferIndex>
      break;
     5e4:	3c c0       	rjmp	.+120    	; 0x65e <__vector_24+0x210>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     5e6:	85 e8       	ldi	r24, 0x85	; 133
     5e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5ec:	38 c0       	rjmp	.+112    	; 0x65e <__vector_24+0x210>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     5f4:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     5f8:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     5fc:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <twi_onSlaveTransmit>
     600:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <twi_onSlaveTransmit+0x1>
     604:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     606:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <twi_txBufferLength>
     60a:	81 11       	cpse	r24, r1
     60c:	05 c0       	rjmp	.+10     	; 0x618 <__vector_24+0x1ca>
        twi_txBufferLength = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     614:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     618:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <twi_txBufferIndex>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	8e 0f       	add	r24, r30
     620:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <twi_txBufferIndex>
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ee 52       	subi	r30, 0x2E	; 46
     628:	fe 4f       	sbci	r31, 0xFE	; 254
     62a:	80 81       	ld	r24, Z
     62c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     630:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <twi_txBufferIndex>
     634:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <twi_txBufferLength>
     638:	98 17       	cp	r25, r24
     63a:	20 f4       	brcc	.+8      	; 0x644 <__vector_24+0x1f6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     63c:	85 ec       	ldi	r24, 0xC5	; 197
     63e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     642:	0d c0       	rjmp	.+26     	; 0x65e <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     644:	85 e8       	ldi	r24, 0x85	; 133
     646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     64a:	09 c0       	rjmp	.+18     	; 0x65e <__vector_24+0x210>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     64c:	85 ec       	ldi	r24, 0xC5	; 197
     64e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     652:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi_state>
      break;
     656:	03 c0       	rjmp	.+6      	; 0x65e <__vector_24+0x210>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     658:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__data_end>
      twi_stop();
     65c:	e7 de       	rcall	.-562    	; 0x42c <twi_stop>
      break;
  }
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
     680:	a4 e0       	ldi	r26, 0x04	; 4
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e6 e4       	ldi	r30, 0x46	; 70
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	7c 83       	std	Y+4, r23	; 0x04
     692:	6b 83       	std	Y+3, r22	; 0x03
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	2b 81       	ldd	r18, Y+3	; 0x03
     69a:	3c 81       	ldd	r19, Y+4	; 0x04
     69c:	fc 01       	movw	r30, r24
     69e:	33 83       	std	Z+3, r19	; 0x03
     6a0:	22 83       	std	Z+2, r18	; 0x02
     6a2:	24 96       	adiw	r28, 0x04	; 4
     6a4:	e2 e0       	ldi	r30, 0x02	; 2
     6a6:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000006aa <_ZN5PrintC1Ev>:
     6aa:	a2 e0       	ldi	r26, 0x02	; 2
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	eb e5       	ldi	r30, 0x5B	; 91
     6b0:	f3 e0       	ldi	r31, 0x03	; 3
     6b2:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	2a ea       	ldi	r18, 0xAA	; 170
     6c0:	31 e0       	ldi	r19, 0x01	; 1
     6c2:	fc 01       	movw	r30, r24
     6c4:	31 83       	std	Z+1, r19	; 0x01
     6c6:	20 83       	st	Z, r18
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	fc 01       	movw	r30, r24
     6ce:	13 82       	std	Z+3, r1	; 0x03
     6d0:	12 82       	std	Z+2, r1	; 0x02
     6d2:	22 96       	adiw	r28, 0x02	; 2
     6d4:	e2 e0       	ldi	r30, 0x02	; 2
     6d6:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000006da <_ZN6StreamC1Ev>:
     6da:	a2 e0       	ldi	r26, 0x02	; 2
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e3 e7       	ldi	r30, 0x73	; 115
     6e0:	f3 e0       	ldi	r31, 0x03	; 3
     6e2:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     6e6:	9a 83       	std	Y+2, r25	; 0x02
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	9a 81       	ldd	r25, Y+2	; 0x02
     6ee:	dd df       	rcall	.-70     	; 0x6aa <_ZN5PrintC1Ev>
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	27 e3       	ldi	r18, 0x37	; 55
     6f6:	31 e0       	ldi	r19, 0x01	; 1
     6f8:	fc 01       	movw	r30, r24
     6fa:	31 83       	std	Z+1, r19	; 0x01
     6fc:	20 83       	st	Z, r18
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	88 ee       	ldi	r24, 0xE8	; 232
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	84 83       	std	Z+4, r24	; 0x04
     70e:	95 83       	std	Z+5, r25	; 0x05
     710:	a6 83       	std	Z+6, r26	; 0x06
     712:	b7 83       	std	Z+7, r27	; 0x07
     714:	22 96       	adiw	r28, 0x02	; 2
     716:	e2 e0       	ldi	r30, 0x02	; 2
     718:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000071c <_ZN7TwoWireC1Ev>:
     71c:	a2 e0       	ldi	r26, 0x02	; 2
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	d4 df       	rcall	.-88     	; 0x6da <_ZN6StreamC1Ev>
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	27 e2       	ldi	r18, 0x27	; 39
     738:	31 e0       	ldi	r19, 0x01	; 1
     73a:	fc 01       	movw	r30, r24
     73c:	31 83       	std	Z+1, r19	; 0x01
     73e:	20 83       	st	Z, r18
     740:	22 96       	adiw	r28, 0x02	; 2
     742:	e2 e0       	ldi	r30, 0x02	; 2
     744:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000748 <_ZN7TwoWire5writeEh>:
     748:	a3 e0       	ldi	r26, 0x03	; 3
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	ea ea       	ldi	r30, 0xAA	; 170
     74e:	f3 e0       	ldi	r31, 0x03	; 3
     750:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	6b 83       	std	Y+3, r22	; 0x03
     75a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire12transmittingE>
     75e:	88 23       	and	r24, r24
     760:	f9 f0       	breq	.+62     	; 0x7a0 <_ZN7TwoWire5writeEh+0x58>
     762:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <_ZN7TwoWire14txBufferLengthE>
     766:	80 32       	cpi	r24, 0x20	; 32
     768:	40 f0       	brcs	.+16     	; 0x77a <_ZN7TwoWire5writeEh+0x32>
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	86 df       	rcall	.-244    	; 0x680 <_ZN5Print13setWriteErrorEi>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	19 c0       	rjmp	.+50     	; 0x7ac <_ZN7TwoWire5writeEh+0x64>
     77a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <_ZN7TwoWire13txBufferIndexE>
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	2b 81       	ldd	r18, Y+3	; 0x03
     784:	82 5c       	subi	r24, 0xC2	; 194
     786:	9d 4f       	sbci	r25, 0xFD	; 253
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
     78c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <_ZN7TwoWire13txBufferIndexE>
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <_ZN7TwoWire13txBufferIndexE>
     796:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <_ZN7TwoWire13txBufferIndexE>
     79a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <_ZN7TwoWire14txBufferLengthE>
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <_ZN7TwoWire5writeEh+0x60>
     7a0:	ce 01       	movw	r24, r28
     7a2:	03 96       	adiw	r24, 0x03	; 3
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	21 de       	rcall	.-958    	; 0x3ea <twi_transmit>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	23 96       	adiw	r28, 0x03	; 3
     7ae:	e2 e0       	ldi	r30, 0x02	; 2
     7b0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000007b4 <_ZN7TwoWire5writeEPKhj>:
     7b4:	a8 e0       	ldi	r26, 0x08	; 8
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e0 ee       	ldi	r30, 0xE0	; 224
     7ba:	f3 e0       	ldi	r31, 0x03	; 3
     7bc:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	7e 83       	std	Y+6, r23	; 0x06
     7c6:	6d 83       	std	Y+5, r22	; 0x05
     7c8:	58 87       	std	Y+8, r21	; 0x08
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire12transmittingE>
     7d0:	88 23       	and	r24, r24
     7d2:	29 f1       	breq	.+74     	; 0x81e <_ZN7TwoWire5writeEPKhj+0x6a>
     7d4:	1a 82       	std	Y+2, r1	; 0x02
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	1a c0       	rjmp	.+52     	; 0x80e <_ZN7TwoWire5writeEPKhj+0x5a>
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 81       	ld	r18, Z
     7e8:	31 81       	ldd	r19, Z+1	; 0x01
     7ea:	4d 81       	ldd	r20, Y+5	; 0x05
     7ec:	5e 81       	ldd	r21, Y+6	; 0x06
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	84 0f       	add	r24, r20
     7f4:	95 1f       	adc	r25, r21
     7f6:	fc 01       	movw	r30, r24
     7f8:	40 81       	ld	r20, Z
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	64 2f       	mov	r22, r20
     800:	f9 01       	movw	r30, r18
     802:	09 95       	icall
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	29 81       	ldd	r18, Y+1	; 0x01
     810:	3a 81       	ldd	r19, Y+2	; 0x02
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	98 85       	ldd	r25, Y+8	; 0x08
     816:	28 17       	cp	r18, r24
     818:	39 07       	cpc	r19, r25
     81a:	f8 f2       	brcs	.-66     	; 0x7da <_ZN7TwoWire5writeEPKhj+0x26>
     81c:	05 c0       	rjmp	.+10     	; 0x828 <_ZN7TwoWire5writeEPKhj+0x74>
     81e:	2f 81       	ldd	r18, Y+7	; 0x07
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	9e 81       	ldd	r25, Y+6	; 0x06
     824:	62 2f       	mov	r22, r18
     826:	e1 dd       	rcall	.-1086   	; 0x3ea <twi_transmit>
     828:	8f 81       	ldd	r24, Y+7	; 0x07
     82a:	98 85       	ldd	r25, Y+8	; 0x08
     82c:	28 96       	adiw	r28, 0x08	; 8
     82e:	e2 e0       	ldi	r30, 0x02	; 2
     830:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000834 <_ZN7TwoWire9availableEv>:
     834:	a2 e0       	ldi	r26, 0x02	; 2
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	e0 e2       	ldi	r30, 0x20	; 32
     83a:	f4 e0       	ldi	r31, 0x04	; 4
     83c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZN7TwoWire14rxBufferLengthE>
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a9 01       	movw	r20, r18
     856:	48 1b       	sub	r20, r24
     858:	59 0b       	sbc	r21, r25
     85a:	ca 01       	movw	r24, r20
     85c:	22 96       	adiw	r28, 0x02	; 2
     85e:	e2 e0       	ldi	r30, 0x02	; 2
     860:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000864 <_ZN7TwoWire4readEv>:
     864:	a4 e0       	ldi	r26, 0x04	; 4
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e8 e3       	ldi	r30, 0x38	; 56
     86a:	f4 e0       	ldi	r31, 0x04	; 4
     86c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	8b 83       	std	Y+3, r24	; 0x03
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     880:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZN7TwoWire14rxBufferLengthE>
     884:	98 17       	cp	r25, r24
     886:	88 f4       	brcc	.+34     	; 0x8aa <_ZN7TwoWire4readEv+0x46>
     888:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	84 5e       	subi	r24, 0xE4	; 228
     892:	9d 4f       	sbci	r25, 0xFD	; 253
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	24 96       	adiw	r28, 0x04	; 4
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000008b6 <_ZN7TwoWire4peekEv>:
     8b6:	a4 e0       	ldi	r26, 0x04	; 4
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     8c2:	9c 83       	std	Y+4, r25	; 0x04
     8c4:	8b 83       	std	Y+3, r24	; 0x03
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     8d2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZN7TwoWire14rxBufferLengthE>
     8d6:	98 17       	cp	r25, r24
     8d8:	60 f4       	brcc	.+24     	; 0x8f2 <_ZN7TwoWire4peekEv+0x3c>
     8da:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZN7TwoWire13rxBufferIndexE>
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	84 5e       	subi	r24, 0xE4	; 228
     8e4:	9d 4f       	sbci	r25, 0xFD	; 253
     8e6:	fc 01       	movw	r30, r24
     8e8:	80 81       	ld	r24, Z
     8ea:	88 2f       	mov	r24, r24
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	9a 83       	std	Y+2, r25	; 0x02
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	9a 81       	ldd	r25, Y+2	; 0x02
     8f6:	24 96       	adiw	r28, 0x04	; 4
     8f8:	e2 e0       	ldi	r30, 0x02	; 2
     8fa:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000008fe <_ZN7TwoWire5flushEv>:
     8fe:	a2 e0       	ldi	r26, 0x02	; 2
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e5 e8       	ldi	r30, 0x85	; 133
     904:	f4 e0       	ldi	r31, 0x04	; 4
     906:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     90a:	9a 83       	std	Y+2, r25	; 0x02
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	22 96       	adiw	r28, 0x02	; 2
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000916 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     916:	a4 e0       	ldi	r26, 0x04	; 4
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	7c 83       	std	Y+4, r23	; 0x04
     928:	6b 83       	std	Y+3, r22	; 0x03
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	39 f4       	brne	.+14     	; 0x940 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	19 f4       	brne	.+6      	; 0x940 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     93a:	81 e6       	ldi	r24, 0x61	; 97
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	ee de       	rcall	.-548    	; 0x71c <_ZN7TwoWireC1Ev>
     940:	24 96       	adiw	r28, 0x04	; 4
     942:	e2 e0       	ldi	r30, 0x02	; 2
     944:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000948 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     954:	6f ef       	ldi	r22, 0xFF	; 255
     956:	7f ef       	ldi	r23, 0xFF	; 255
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	dc df       	rcall	.-72     	; 0x916 <_Z41__static_initialization_and_destruction_0ii>
     95e:	e2 e0       	ldi	r30, 0x02	; 2
     960:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00000964 <_Z10DebugPulsehh>:
    setRxIntMsk(false);
    active_object = NULL;
    return true;
  }
  return false;
}
     964:	a2 e0       	ldi	r26, 0x02	; 2
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 eb       	ldi	r30, 0xB8	; 184
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	6a 83       	std	Y+2, r22	; 0x02
     974:	22 96       	adiw	r28, 0x02	; 2
     976:	e2 e0       	ldi	r30, 0x02	; 2
     978:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000097c <_ZN14SoftwareSerial10tunedDelayEj>:
     97c:	a4 e0       	ldi	r26, 0x04	; 4
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e4 ec       	ldi	r30, 0xC4	; 196
     982:	f4 e0       	ldi	r31, 0x04	; 4
     984:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	8b 83       	std	Y+3, r24	; 0x03
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	9c 81       	ldd	r25, Y+4	; 0x04
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	24 96       	adiw	r28, 0x04	; 4
     9a2:	e2 e0       	ldi	r30, 0x02	; 2
     9a4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000009a8 <_ZN14SoftwareSerial11rx_pin_readEv>:
    ::);
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
     9a8:	a2 e0       	ldi	r26, 0x02	; 2
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	fc 01       	movw	r30, r24
     9be:	86 85       	ldd	r24, Z+14	; 0x0e
     9c0:	97 85       	ldd	r25, Z+15	; 0x0f
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 81       	ld	r18, Z
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	fc 01       	movw	r30, r24
     9cc:	85 85       	ldd	r24, Z+13	; 0x0d
     9ce:	82 23       	and	r24, r18
}
     9d0:	22 96       	adiw	r28, 0x02	; 2
     9d2:	e2 e0       	ldi	r30, 0x02	; 2
     9d4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000009d8 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	2b 97       	sbiw	r28, 0x0b	; 11
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     a0a:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZN14SoftwareSerial13active_objectE>
     a0e:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE+0x1>
     a12:	89 2b       	or	r24, r25
     a14:	09 f4       	brne	.+2      	; 0xa18 <__vector_3+0x40>
     a16:	f4 c0       	rjmp	.+488    	; 0xc00 <__vector_3+0x228>
  {
    active_object->recv();
     a18:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZN14SoftwareSerial13active_objectE>
     a1c:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_ZN14SoftwareSerial13active_objectE+0x1>
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     a24:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	fc 01       	movw	r30, r24
     a2c:	86 8d       	ldd	r24, Z+30	; 0x1e
     a2e:	82 70       	andi	r24, 0x02	; 2
     a30:	88 23       	and	r24, r24
     a32:	49 f0       	breq	.+18     	; 0xa46 <__vector_3+0x6e>
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	b7 df       	rcall	.-146    	; 0x9a8 <_ZN14SoftwareSerial11rx_pin_readEv>
     a3a:	98 2f       	mov	r25, r24
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	99 23       	and	r25, r25
     a40:	51 f4       	brne	.+20     	; 0xa56 <__vector_3+0x7e>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 c0       	rjmp	.+16     	; 0xa56 <__vector_3+0x7e>
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	ae df       	rcall	.-164    	; 0x9a8 <_ZN14SoftwareSerial11rx_pin_readEv>
     a4c:	98 2f       	mov	r25, r24
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	99 23       	and	r25, r25
     a52:	09 f0       	breq	.+2      	; 0xa56 <__vector_3+0x7e>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__vector_3+0x84>
     a5a:	d2 c0       	rjmp	.+420    	; 0xc00 <__vector_3+0x228>
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	9a 81       	ldd	r25, Y+2	; 0x02
     a60:	9d 83       	std	Y+5, r25	; 0x05
     a62:	8c 83       	std	Y+4, r24	; 0x04
     a64:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     a66:	8e 81       	ldd	r24, Y+6	; 0x06
     a68:	88 23       	and	r24, r24
     a6a:	a1 f0       	breq	.+40     	; 0xa94 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     a6c:	8c 81       	ldd	r24, Y+4	; 0x04
     a6e:	9d 81       	ldd	r25, Y+5	; 0x05
     a70:	fc 01       	movw	r30, r24
     a72:	83 89       	ldd	r24, Z+19	; 0x13
     a74:	94 89       	ldd	r25, Z+20	; 0x14
     a76:	2c 81       	ldd	r18, Y+4	; 0x04
     a78:	3d 81       	ldd	r19, Y+5	; 0x05
     a7a:	f9 01       	movw	r30, r18
     a7c:	23 89       	ldd	r18, Z+19	; 0x13
     a7e:	34 89       	ldd	r19, Z+20	; 0x14
     a80:	f9 01       	movw	r30, r18
     a82:	40 81       	ld	r20, Z
     a84:	2c 81       	ldd	r18, Y+4	; 0x04
     a86:	3d 81       	ldd	r19, Y+5	; 0x05
     a88:	f9 01       	movw	r30, r18
     a8a:	25 89       	ldd	r18, Z+21	; 0x15
     a8c:	24 2b       	or	r18, r20
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
     a92:	15 c0       	rjmp	.+42     	; 0xabe <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     a94:	8c 81       	ldd	r24, Y+4	; 0x04
     a96:	9d 81       	ldd	r25, Y+5	; 0x05
     a98:	fc 01       	movw	r30, r24
     a9a:	83 89       	ldd	r24, Z+19	; 0x13
     a9c:	94 89       	ldd	r25, Z+20	; 0x14
     a9e:	2c 81       	ldd	r18, Y+4	; 0x04
     aa0:	3d 81       	ldd	r19, Y+5	; 0x05
     aa2:	f9 01       	movw	r30, r18
     aa4:	23 89       	ldd	r18, Z+19	; 0x13
     aa6:	34 89       	ldd	r19, Z+20	; 0x14
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	42 2f       	mov	r20, r18
     aae:	2c 81       	ldd	r18, Y+4	; 0x04
     ab0:	3d 81       	ldd	r19, Y+5	; 0x05
     ab2:	f9 01       	movw	r30, r18
     ab4:	25 89       	ldd	r18, Z+21	; 0x15
     ab6:	20 95       	com	r18
     ab8:	24 23       	and	r18, r20
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	fc 01       	movw	r30, r24
     ac4:	86 89       	ldd	r24, Z+22	; 0x16
     ac6:	97 89       	ldd	r25, Z+23	; 0x17
     ac8:	59 df       	rcall	.-334    	; 0x97c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	8d e0       	ldi	r24, 0x0D	; 13
     ace:	4a df       	rcall	.-364    	; 0x964 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	8f 83       	std	Y+7, r24	; 0x07
     ad4:	1f c0       	rjmp	.+62     	; 0xb14 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	fc 01       	movw	r30, r24
     adc:	80 8d       	ldd	r24, Z+24	; 0x18
     ade:	91 8d       	ldd	r25, Z+25	; 0x19
     ae0:	4d df       	rcall	.-358    	; 0x97c <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	95 95       	asr	r25
     aea:	87 95       	ror	r24
     aec:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	8d e0       	ldi	r24, 0x0D	; 13
     af2:	38 df       	rcall	.-400    	; 0x964 <_Z10DebugPulsehh>
      if (rx_pin_read())
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	57 df       	rcall	.-338    	; 0x9a8 <_ZN14SoftwareSerial11rx_pin_readEv>
     afa:	98 2f       	mov	r25, r24
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	99 23       	and	r25, r25
     b00:	09 f4       	brne	.+2      	; 0xb04 <__vector_3+0x12c>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	88 23       	and	r24, r24
     b06:	19 f0       	breq	.+6      	; 0xb0e <__vector_3+0x136>
        d |= 0x80;
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     b0e:	8f 81       	ldd	r24, Y+7	; 0x07
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	8f 83       	std	Y+7, r24	; 0x07
     b14:	8f 81       	ldd	r24, Y+7	; 0x07
     b16:	88 23       	and	r24, r24
     b18:	f1 f6       	brne	.-68     	; 0xad6 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	fc 01       	movw	r30, r24
     b20:	86 8d       	ldd	r24, Z+30	; 0x1e
     b22:	82 70       	andi	r24, 0x02	; 2
     b24:	88 23       	and	r24, r24
     b26:	19 f0       	breq	.+6      	; 0xb2e <__vector_3+0x156>
      d = ~d;
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	80 95       	com	r24
     b2c:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     b2e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	8f 73       	andi	r24, 0x3F	; 63
     b3a:	90 78       	andi	r25, 0x80	; 128
     b3c:	99 23       	and	r25, r25
     b3e:	24 f4       	brge	.+8      	; 0xb48 <__vector_3+0x170>
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	80 6c       	ori	r24, 0xC0	; 192
     b44:	9f 6f       	ori	r25, 0xFF	; 255
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     b4a:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_headE>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	28 85       	ldd	r18, Y+8	; 0x08
     b52:	29 17       	cp	r18, r25
     b54:	09 f4       	brne	.+2      	; 0xb58 <__vector_3+0x180>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	88 23       	and	r24, r24
     b5a:	69 f0       	breq	.+26     	; 0xb76 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     b5c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	81 59       	subi	r24, 0x91	; 145
     b66:	9d 4f       	sbci	r25, 0xFD	; 253
     b68:	2b 81       	ldd	r18, Y+3	; 0x03
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     b6e:	88 85       	ldd	r24, Y+8	; 0x08
     b70:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8b e0       	ldi	r24, 0x0B	; 11
     b7a:	f4 de       	rcall	.-536    	; 0x964 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	fc 01       	movw	r30, r24
     b82:	26 8d       	ldd	r18, Z+30	; 0x1e
     b84:	21 60       	ori	r18, 0x01	; 1
     b86:	fc 01       	movw	r30, r24
     b88:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	82 8d       	ldd	r24, Z+26	; 0x1a
     b92:	93 8d       	ldd	r25, Z+27	; 0x1b
     b94:	f3 de       	rcall	.-538    	; 0x97c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	8b e0       	ldi	r24, 0x0B	; 11
     b9a:	e4 de       	rcall	.-568    	; 0x964 <_Z10DebugPulsehh>
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	9a 87       	std	Y+10, r25	; 0x0a
     ba2:	89 87       	std	Y+9, r24	; 0x09
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     ba8:	8b 85       	ldd	r24, Y+11	; 0x0b
     baa:	88 23       	and	r24, r24
     bac:	a1 f0       	breq	.+40     	; 0xbd6 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	fc 01       	movw	r30, r24
     bb4:	83 89       	ldd	r24, Z+19	; 0x13
     bb6:	94 89       	ldd	r25, Z+20	; 0x14
     bb8:	29 85       	ldd	r18, Y+9	; 0x09
     bba:	3a 85       	ldd	r19, Y+10	; 0x0a
     bbc:	f9 01       	movw	r30, r18
     bbe:	23 89       	ldd	r18, Z+19	; 0x13
     bc0:	34 89       	ldd	r19, Z+20	; 0x14
     bc2:	f9 01       	movw	r30, r18
     bc4:	40 81       	ld	r20, Z
     bc6:	29 85       	ldd	r18, Y+9	; 0x09
     bc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bca:	f9 01       	movw	r30, r18
     bcc:	25 89       	ldd	r18, Z+21	; 0x15
     bce:	24 2b       	or	r18, r20
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
     bd4:	15 c0       	rjmp	.+42     	; 0xc00 <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	fc 01       	movw	r30, r24
     bdc:	83 89       	ldd	r24, Z+19	; 0x13
     bde:	94 89       	ldd	r25, Z+20	; 0x14
     be0:	29 85       	ldd	r18, Y+9	; 0x09
     be2:	3a 85       	ldd	r19, Y+10	; 0x0a
     be4:	f9 01       	movw	r30, r18
     be6:	23 89       	ldd	r18, Z+19	; 0x13
     be8:	34 89       	ldd	r19, Z+20	; 0x14
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	42 2f       	mov	r20, r18
     bf0:	29 85       	ldd	r18, Y+9	; 0x09
     bf2:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf4:	f9 01       	movw	r30, r18
     bf6:	25 89       	ldd	r18, Z+21	; 0x15
     bf8:	20 95       	com	r18
     bfa:	24 23       	and	r18, r20
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     c00:	2b 96       	adiw	r28, 0x0b	; 11
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     c34:	8f 92       	push	r8
     c36:	af 92       	push	r10
     c38:	cf 92       	push	r12
     c3a:	ef 92       	push	r14
     c3c:	0f 93       	push	r16
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	28 97       	sbiw	r28, 0x08	; 8
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	6b 83       	std	Y+3, r22	; 0x03
     c58:	4c 83       	std	Y+4, r20	; 0x04
     c5a:	2d 83       	std	Y+5, r18	; 0x05
     c5c:	0e 83       	std	Y+6, r16	; 0x06
     c5e:	ef 82       	std	Y+7, r14	; 0x07
     c60:	c8 86       	std	Y+8, r12	; 0x08
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	21 dd       	rcall	.-1470   	; 0x6aa <_ZN5PrintC1Ev>
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	27 e4       	ldi	r18, 0x47	; 71
     c6e:	31 e0       	ldi	r19, 0x01	; 1
     c70:	fc 01       	movw	r30, r24
     c72:	31 83       	std	Z+1, r19	; 0x01
     c74:	20 83       	st	Z, r18
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	1f 92       	push	r1
     c7c:	1f 92       	push	r1
     c7e:	1f 92       	push	r1
     c80:	1f 92       	push	r1
     c82:	88 84       	ldd	r8, Y+8	; 0x08
     c84:	af 80       	ldd	r10, Y+7	; 0x07
     c86:	ce 80       	ldd	r12, Y+6	; 0x06
     c88:	ed 80       	ldd	r14, Y+5	; 0x05
     c8a:	0c 81       	ldd	r16, Y+4	; 0x04
     c8c:	2f ef       	ldi	r18, 0xFF	; 255
     c8e:	4b 81       	ldd	r20, Y+3	; 0x03
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	12 d0       	rcall	.+36     	; 0xcb8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	28 96       	adiw	r28, 0x08	; 8
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	0f 91       	pop	r16
     cae:	ef 90       	pop	r14
     cb0:	cf 90       	pop	r12
     cb2:	af 90       	pop	r10
     cb4:	8f 90       	pop	r8
     cb6:	08 95       	ret

00000cb8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     cb8:	8f 92       	push	r8
     cba:	af 92       	push	r10
     cbc:	cf 92       	push	r12
     cbe:	ef 92       	push	r14
     cc0:	0f 93       	push	r16
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	2a 97       	sbiw	r28, 0x0a	; 10
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	6b 83       	std	Y+3, r22	; 0x03
     cdc:	4c 83       	std	Y+4, r20	; 0x04
     cde:	2d 83       	std	Y+5, r18	; 0x05
     ce0:	0e 83       	std	Y+6, r16	; 0x06
     ce2:	ef 82       	std	Y+7, r14	; 0x07
     ce4:	c8 86       	std	Y+8, r12	; 0x08
     ce6:	a9 86       	std	Y+9, r10	; 0x09
     ce8:	8a 86       	std	Y+10, r8	; 0x0a
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	fc 01       	movw	r30, r24
     cf2:	24 83       	std	Z+4, r18	; 0x04
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	2d 81       	ldd	r18, Y+5	; 0x05
     cfa:	fc 01       	movw	r30, r24
     cfc:	25 83       	std	Z+5, r18	; 0x05
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	2e 81       	ldd	r18, Y+6	; 0x06
     d04:	fc 01       	movw	r30, r24
     d06:	26 83       	std	Z+6, r18	; 0x06
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	2f 81       	ldd	r18, Y+7	; 0x07
     d0e:	fc 01       	movw	r30, r24
     d10:	27 83       	std	Z+7, r18	; 0x07
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	28 85       	ldd	r18, Y+8	; 0x08
     d18:	fc 01       	movw	r30, r24
     d1a:	20 87       	std	Z+8, r18	; 0x08
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	29 85       	ldd	r18, Y+9	; 0x09
     d22:	fc 01       	movw	r30, r24
     d24:	21 87       	std	Z+9, r18	; 0x09
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	2a 85       	ldd	r18, Y+10	; 0x0a
     d2c:	fc 01       	movw	r30, r24
     d2e:	22 87       	std	Z+10, r18	; 0x0a
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	2c 89       	ldd	r18, Y+20	; 0x14
     d36:	fc 01       	movw	r30, r24
     d38:	23 87       	std	Z+11, r18	; 0x0b
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	2d 89       	ldd	r18, Y+21	; 0x15
     d40:	fc 01       	movw	r30, r24
     d42:	24 87       	std	Z+12, r18	; 0x0c
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	2e 89       	ldd	r18, Y+22	; 0x16
     d4a:	fc 01       	movw	r30, r24
     d4c:	25 87       	std	Z+13, r18	; 0x0d
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	2f 89       	ldd	r18, Y+23	; 0x17
     d54:	fc 01       	movw	r30, r24
     d56:	26 87       	std	Z+14, r18	; 0x0e
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	88 23       	and	r24, r24
     d5c:	29 f0       	breq	.+10     	; 0xd68 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	17 86       	std	Z+15, r1	; 0x0f
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	20 e1       	ldi	r18, 0x10	; 16
     d6e:	fc 01       	movw	r30, r24
     d70:	27 87       	std	Z+15, r18	; 0x0f
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	60 e1       	ldi	r22, 0x10	; 16
     d7c:	0e d0       	rcall	.+28     	; 0xd9a <_ZN13LiquidCrystal5beginEhhh>
     d7e:	2a 96       	adiw	r28, 0x0a	; 10
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	0f 91       	pop	r16
     d90:	ef 90       	pop	r14
     d92:	cf 90       	pop	r12
     d94:	af 90       	pop	r10
     d96:	8f 90       	pop	r8
     d98:	08 95       	ret

00000d9a <_ZN13LiquidCrystal5beginEhhh>:
     d9a:	a7 e0       	ldi	r26, 0x07	; 7
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 ed       	ldi	r30, 0xD3	; 211
     da0:	f6 e0       	ldi	r31, 0x06	; 6
     da2:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	6d 83       	std	Y+5, r22	; 0x05
     dac:	4e 83       	std	Y+6, r20	; 0x06
     dae:	2f 83       	std	Y+7, r18	; 0x07
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	50 f0       	brcs	.+20     	; 0xdca <_ZN13LiquidCrystal5beginEhhh+0x30>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	fc 01       	movw	r30, r24
     dbc:	87 85       	ldd	r24, Z+15	; 0x0f
     dbe:	28 2f       	mov	r18, r24
     dc0:	28 60       	ori	r18, 0x08	; 8
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	fc 01       	movw	r30, r24
     dc8:	27 87       	std	Z+15, r18	; 0x0f
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	2e 81       	ldd	r18, Y+6	; 0x06
     dd0:	fc 01       	movw	r30, r24
     dd2:	23 8b       	std	Z+19, r18	; 0x13
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	ac 01       	movw	r20, r24
     ddc:	40 5c       	subi	r20, 0xC0	; 192
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	8a 01       	movw	r16, r20
     dec:	40 e4       	ldi	r20, 0x40	; 64
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	e7 d0       	rcall	.+462    	; 0xfc4 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
     df6:	8f 81       	ldd	r24, Y+7	; 0x07
     df8:	88 23       	and	r24, r24
     dfa:	69 f0       	breq	.+26     	; 0xe16 <_ZN13LiquidCrystal5beginEhhh+0x7c>
     dfc:	8e 81       	ldd	r24, Y+6	; 0x06
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	51 f4       	brne	.+20     	; 0xe16 <_ZN13LiquidCrystal5beginEhhh+0x7c>
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	fc 01       	movw	r30, r24
     e08:	87 85       	ldd	r24, Z+15	; 0x0f
     e0a:	28 2f       	mov	r18, r24
     e0c:	24 60       	ori	r18, 0x04	; 4
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	fc 01       	movw	r30, r24
     e14:	27 87       	std	Z+15, r18	; 0x0f
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	fc 01       	movw	r30, r24
     e1c:	84 81       	ldd	r24, Z+4	; 0x04
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	0e 94 82 2b 	call	0x5704	; 0x5704 <pinMode>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	fc 01       	movw	r30, r24
     e2a:	85 81       	ldd	r24, Z+5	; 0x05
     e2c:	8f 3f       	cpi	r24, 0xFF	; 255
     e2e:	39 f0       	breq	.+14     	; 0xe3e <_ZN13LiquidCrystal5beginEhhh+0xa4>
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	fc 01       	movw	r30, r24
     e36:	85 81       	ldd	r24, Z+5	; 0x05
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 82 2b 	call	0x5704	; 0x5704 <pinMode>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	fc 01       	movw	r30, r24
     e44:	86 81       	ldd	r24, Z+6	; 0x06
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	0e 94 82 2b 	call	0x5704	; 0x5704 <pinMode>
     e4c:	1a 82       	std	Y+2, r1	; 0x02
     e4e:	19 82       	std	Y+1, r1	; 0x01
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <_ZN13LiquidCrystal5beginEhhh+0xda>
     e52:	2b 81       	ldd	r18, Y+3	; 0x03
     e54:	3c 81       	ldd	r19, Y+4	; 0x04
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	07 96       	adiw	r24, 0x07	; 7
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	0e 94 82 2b 	call	0x5704	; 0x5704 <pinMode>
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	fc 01       	movw	r30, r24
     e7a:	87 85       	ldd	r24, Z+15	; 0x0f
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	80 71       	andi	r24, 0x10	; 16
     e82:	99 27       	eor	r25, r25
     e84:	89 2b       	or	r24, r25
     e86:	19 f0       	breq	.+6      	; 0xe8e <_ZN13LiquidCrystal5beginEhhh+0xf4>
     e88:	88 e0       	ldi	r24, 0x08	; 8
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <_ZN13LiquidCrystal5beginEhhh+0xf8>
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	28 17       	cp	r18, r24
     e98:	39 07       	cpc	r19, r25
     e9a:	dc f2       	brlt	.-74     	; 0xe52 <_ZN13LiquidCrystal5beginEhhh+0xb8>
     e9c:	80 e5       	ldi	r24, 0x50	; 80
     e9e:	93 ec       	ldi	r25, 0xC3	; 195
     ea0:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	9c 81       	ldd	r25, Y+4	; 0x04
     eb6:	fc 01       	movw	r30, r24
     eb8:	86 81       	ldd	r24, Z+6	; 0x06
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	fc 01       	movw	r30, r24
     ec6:	85 81       	ldd	r24, Z+5	; 0x05
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	39 f0       	breq	.+14     	; 0xeda <_ZN13LiquidCrystal5beginEhhh+0x140>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	fc 01       	movw	r30, r24
     ed2:	85 81       	ldd	r24, Z+5	; 0x05
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	fc 01       	movw	r30, r24
     ee0:	87 85       	ldd	r24, Z+15	; 0x0f
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	80 71       	andi	r24, 0x10	; 16
     ee8:	99 27       	eor	r25, r25
     eea:	89 2b       	or	r24, r25
     eec:	e9 f4       	brne	.+58     	; 0xf28 <_ZN13LiquidCrystal5beginEhhh+0x18e>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	63 e0       	ldi	r22, 0x03	; 3
     ef4:	91 d1       	rcall	.+802    	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
     ef6:	84 e9       	ldi	r24, 0x94	; 148
     ef8:	91 e1       	ldi	r25, 0x11	; 17
     efa:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	63 e0       	ldi	r22, 0x03	; 3
     f04:	89 d1       	rcall	.+786    	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
     f06:	84 e9       	ldi	r24, 0x94	; 148
     f08:	91 e1       	ldi	r25, 0x11	; 17
     f0a:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	63 e0       	ldi	r22, 0x03	; 3
     f14:	81 d1       	rcall	.+770    	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
     f16:	86 e9       	ldi	r24, 0x96	; 150
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	79 d1       	rcall	.+754    	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
     f26:	26 c0       	rjmp	.+76     	; 0xf74 <_ZN13LiquidCrystal5beginEhhh+0x1da>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	fc 01       	movw	r30, r24
     f2e:	87 85       	ldd	r24, Z+15	; 0x0f
     f30:	28 2f       	mov	r18, r24
     f32:	20 62       	ori	r18, 0x20	; 32
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	62 2f       	mov	r22, r18
     f3a:	d6 d0       	rcall	.+428    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
     f3c:	84 e9       	ldi	r24, 0x94	; 148
     f3e:	91 e1       	ldi	r25, 0x11	; 17
     f40:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	87 85       	ldd	r24, Z+15	; 0x0f
     f4c:	28 2f       	mov	r18, r24
     f4e:	20 62       	ori	r18, 0x20	; 32
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	62 2f       	mov	r22, r18
     f56:	c8 d0       	rcall	.+400    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
     f58:	86 e9       	ldi	r24, 0x96	; 150
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	fc 01       	movw	r30, r24
     f66:	87 85       	ldd	r24, Z+15	; 0x0f
     f68:	28 2f       	mov	r18, r24
     f6a:	20 62       	ori	r18, 0x20	; 32
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	62 2f       	mov	r22, r18
     f72:	ba d0       	rcall	.+372    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	fc 01       	movw	r30, r24
     f7a:	87 85       	ldd	r24, Z+15	; 0x0f
     f7c:	28 2f       	mov	r18, r24
     f7e:	20 62       	ori	r18, 0x20	; 32
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	62 2f       	mov	r22, r18
     f86:	b0 d0       	rcall	.+352    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	24 e0       	ldi	r18, 0x04	; 4
     f8e:	fc 01       	movw	r30, r24
     f90:	20 8b       	std	Z+16, r18	; 0x10
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	88 d0       	rcall	.+272    	; 0x10a8 <_ZN13LiquidCrystal7displayEv>
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	3b d0       	rcall	.+118    	; 0x1014 <_ZN13LiquidCrystal5clearEv>
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	22 e0       	ldi	r18, 0x02	; 2
     fa4:	fc 01       	movw	r30, r24
     fa6:	21 8b       	std	Z+17, r18	; 0x11
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	fc 01       	movw	r30, r24
     fae:	81 89       	ldd	r24, Z+17	; 0x11
     fb0:	28 2f       	mov	r18, r24
     fb2:	24 60       	ori	r18, 0x04	; 4
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	62 2f       	mov	r22, r18
     fba:	96 d0       	rcall	.+300    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
     fbc:	27 96       	adiw	r28, 0x07	; 7
     fbe:	e4 e0       	ldi	r30, 0x04	; 4
     fc0:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00000fc4 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
     fc4:	aa e0       	ldi	r26, 0x0A	; 10
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	7c 83       	std	Y+4, r23	; 0x04
     fd6:	6b 83       	std	Y+3, r22	; 0x03
     fd8:	5e 83       	std	Y+6, r21	; 0x06
     fda:	4d 83       	std	Y+5, r20	; 0x05
     fdc:	38 87       	std	Y+8, r19	; 0x08
     fde:	2f 83       	std	Y+7, r18	; 0x07
     fe0:	1a 87       	std	Y+10, r17	; 0x0a
     fe2:	09 87       	std	Y+9, r16	; 0x09
     fe4:	2b 81       	ldd	r18, Y+3	; 0x03
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	fc 01       	movw	r30, r24
     fec:	24 8b       	std	Z+20, r18	; 0x14
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	fc 01       	movw	r30, r24
     ff6:	25 8b       	std	Z+21, r18	; 0x15
     ff8:	2f 81       	ldd	r18, Y+7	; 0x07
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	fc 01       	movw	r30, r24
    1000:	26 8b       	std	Z+22, r18	; 0x16
    1002:	29 85       	ldd	r18, Y+9	; 0x09
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	fc 01       	movw	r30, r24
    100a:	27 8b       	std	Z+23, r18	; 0x17
    100c:	2a 96       	adiw	r28, 0x0a	; 10
    100e:	e4 e0       	ldi	r30, 0x04	; 4
    1010:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00001014 <_ZN13LiquidCrystal5clearEv>:
    1014:	a2 e0       	ldi	r26, 0x02	; 2
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e0 e1       	ldi	r30, 0x10	; 16
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	5e d0       	rcall	.+188    	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
    102c:	80 ed       	ldi	r24, 0xD0	; 208
    102e:	97 e0       	ldi	r25, 0x07	; 7
    1030:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
    1034:	22 96       	adiw	r28, 0x02	; 2
    1036:	e2 e0       	ldi	r30, 0x02	; 2
    1038:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000103c <_ZN13LiquidCrystal9setCursorEhh>:
    103c:	a6 e0       	ldi	r26, 0x06	; 6
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e2       	ldi	r30, 0x24	; 36
    1042:	f8 e0       	ldi	r31, 0x08	; 8
    1044:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
    104c:	6d 83       	std	Y+5, r22	; 0x05
    104e:	4e 83       	std	Y+6, r20	; 0x06
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	8e 81       	ldd	r24, Y+6	; 0x06
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	10 f0       	brcs	.+4      	; 0x1062 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8e 83       	std	Y+6, r24	; 0x06
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	fc 01       	movw	r30, r24
    1068:	93 89       	ldd	r25, Z+19	; 0x13
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	89 17       	cp	r24, r25
    106e:	30 f0       	brcs	.+12     	; 0x107c <_ZN13LiquidCrystal9setCursorEhh+0x40>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	fc 01       	movw	r30, r24
    1076:	83 89       	ldd	r24, Z+19	; 0x13
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	8e 81       	ldd	r24, Y+6	; 0x06
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	44 96       	adiw	r24, 0x14	; 20
    108c:	fc 01       	movw	r30, r24
    108e:	90 81       	ld	r25, Z
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	89 0f       	add	r24, r25
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	28 2f       	mov	r18, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	62 2f       	mov	r22, r18
    109e:	24 d0       	rcall	.+72     	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
    10a0:	26 96       	adiw	r28, 0x06	; 6
    10a2:	e2 e0       	ldi	r30, 0x02	; 2
    10a4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000010a8 <_ZN13LiquidCrystal7displayEv>:
    10a8:	a2 e0       	ldi	r26, 0x02	; 2
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f8 e0       	ldi	r31, 0x08	; 8
    10b0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	fc 01       	movw	r30, r24
    10be:	80 89       	ldd	r24, Z+16	; 0x10
    10c0:	28 2f       	mov	r18, r24
    10c2:	24 60       	ori	r18, 0x04	; 4
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 8b       	std	Z+16, r18	; 0x10
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 89       	ldd	r24, Z+16	; 0x10
    10d4:	28 2f       	mov	r18, r24
    10d6:	28 60       	ori	r18, 0x08	; 8
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	62 2f       	mov	r22, r18
    10de:	04 d0       	rcall	.+8      	; 0x10e8 <_ZN13LiquidCrystal7commandEh>
    10e0:	22 96       	adiw	r28, 0x02	; 2
    10e2:	e2 e0       	ldi	r30, 0x02	; 2
    10e4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000010e8 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    10e8:	a3 e0       	ldi	r26, 0x03	; 3
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e7       	ldi	r30, 0x7A	; 122
    10ee:	f8 e0       	ldi	r31, 0x08	; 8
    10f0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	6b 81       	ldd	r22, Y+3	; 0x03
    1102:	18 d0       	rcall	.+48     	; 0x1134 <_ZN13LiquidCrystal4sendEhh>
}
    1104:	23 96       	adiw	r28, 0x03	; 3
    1106:	e2 e0       	ldi	r30, 0x02	; 2
    1108:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000110c <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    110c:	a3 e0       	ldi	r26, 0x03	; 3
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ec e8       	ldi	r30, 0x8C	; 140
    1112:	f8 e0       	ldi	r31, 0x08	; 8
    1114:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	6b 81       	ldd	r22, Y+3	; 0x03
    1126:	06 d0       	rcall	.+12     	; 0x1134 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
}
    112c:	23 96       	adiw	r28, 0x03	; 3
    112e:	e2 e0       	ldi	r30, 0x02	; 2
    1130:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001134 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1134:	a4 e0       	ldi	r26, 0x04	; 4
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e0 ea       	ldi	r30, 0xA0	; 160
    113a:	f8 e0       	ldi	r31, 0x08	; 8
    113c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6b 83       	std	Y+3, r22	; 0x03
    1146:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	fc 01       	movw	r30, r24
    114e:	84 81       	ldd	r24, Z+4	; 0x04
    1150:	6c 81       	ldd	r22, Y+4	; 0x04
    1152:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	fc 01       	movw	r30, r24
    115c:	85 81       	ldd	r24, Z+5	; 0x05
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	39 f0       	breq	.+14     	; 0x1170 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	fc 01       	movw	r30, r24
    1168:	85 81       	ldd	r24, Z+5	; 0x05
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	fc 01       	movw	r30, r24
    1176:	87 85       	ldd	r24, Z+15	; 0x0f
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	80 71       	andi	r24, 0x10	; 16
    117e:	99 27       	eor	r25, r25
    1180:	89 2b       	or	r24, r25
    1182:	29 f0       	breq	.+10     	; 0x118e <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	6b 81       	ldd	r22, Y+3	; 0x03
    118a:	79 d0       	rcall	.+242    	; 0x127e <_ZN13LiquidCrystal10write8bitsEh>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	95 95       	asr	r25
    119a:	87 95       	ror	r24
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	95 95       	asr	r25
    11a2:	87 95       	ror	r24
    11a4:	28 2f       	mov	r18, r24
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	62 2f       	mov	r22, r18
    11ac:	35 d0       	rcall	.+106    	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	6b 81       	ldd	r22, Y+3	; 0x03
    11b4:	31 d0       	rcall	.+98     	; 0x1218 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    11b6:	24 96       	adiw	r28, 0x04	; 4
    11b8:	e2 e0       	ldi	r30, 0x02	; 2
    11ba:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000011be <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    11be:	a2 e0       	ldi	r26, 0x02	; 2
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 ee       	ldi	r30, 0xE5	; 229
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	fc 01       	movw	r30, r24
    11d4:	86 81       	ldd	r24, Z+6	; 0x06
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
  delayMicroseconds(1);    
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	fc 01       	movw	r30, r24
    11ea:	86 81       	ldd	r24, Z+6	; 0x06
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	86 81       	ldd	r24, Z+6	; 0x06
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1208:	84 e6       	ldi	r24, 0x64	; 100
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delayMicroseconds>
}
    1210:	22 96       	adiw	r28, 0x02	; 2
    1212:	e2 e0       	ldi	r30, 0x02	; 2
    1214:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001218 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1218:	a5 e0       	ldi	r26, 0x05	; 5
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1224:	9c 83       	std	Y+4, r25	; 0x04
    1226:	8b 83       	std	Y+3, r24	; 0x03
    1228:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    122a:	1a 82       	std	Y+2, r1	; 0x02
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	1c c0       	rjmp	.+56     	; 0x1268 <_ZN13LiquidCrystal10write4bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	09 80       	ldd	r0, Y+1	; 0x01
    1238:	02 c0       	rjmp	.+4      	; 0x123e <_ZN13LiquidCrystal10write4bitsEh+0x26>
    123a:	95 95       	asr	r25
    123c:	87 95       	ror	r24
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1242:	48 2f       	mov	r20, r24
    1244:	41 70       	andi	r20, 0x01	; 1
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	07 96       	adiw	r24, 0x07	; 7
    1254:	fc 01       	movw	r30, r24
    1256:	80 81       	ld	r24, Z
    1258:	64 2f       	mov	r22, r20
    125a:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	04 97       	sbiw	r24, 0x04	; 4
    126e:	04 f3       	brlt	.-64     	; 0x1230 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	a4 df       	rcall	.-184    	; 0x11be <_ZN13LiquidCrystal11pulseEnableEv>
}
    1276:	25 96       	adiw	r28, 0x05	; 5
    1278:	e2 e0       	ldi	r30, 0x02	; 2
    127a:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000127e <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    127e:	a5 e0       	ldi	r26, 0x05	; 5
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e4       	ldi	r30, 0x45	; 69
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	1c c0       	rjmp	.+56     	; 0x12ce <_ZN13LiquidCrystal10write8bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	09 80       	ldd	r0, Y+1	; 0x01
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <_ZN13LiquidCrystal10write8bitsEh+0x26>
    12a0:	95 95       	asr	r25
    12a2:	87 95       	ror	r24
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    12a8:	48 2f       	mov	r20, r24
    12aa:	41 70       	andi	r20, 0x01	; 1
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	07 96       	adiw	r24, 0x07	; 7
    12ba:	fc 01       	movw	r30, r24
    12bc:	80 81       	ld	r24, Z
    12be:	64 2f       	mov	r22, r20
    12c0:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	08 97       	sbiw	r24, 0x08	; 8
    12d4:	04 f3       	brlt	.-64     	; 0x1296 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	71 df       	rcall	.-286    	; 0x11be <_ZN13LiquidCrystal11pulseEnableEv>
}
    12dc:	25 96       	adiw	r28, 0x05	; 5
    12de:	e2 e0       	ldi	r30, 0x02	; 2
    12e0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000012e4 <_ZN12CmdMessengerC1ER6Streamccc>:
{
	if (str == field_separator || str == command_separator || str == escape_character || str == '\0') {
		comms->print(escape_character);
	}
	comms->print(str);
}
    12e4:	0f 93       	push	r16
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	27 97       	sbiw	r28, 0x07	; 7
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	7c 83       	std	Y+4, r23	; 0x04
    1300:	6b 83       	std	Y+3, r22	; 0x03
    1302:	4d 83       	std	Y+5, r20	; 0x05
    1304:	2e 83       	std	Y+6, r18	; 0x06
    1306:	0f 83       	std	Y+7, r16	; 0x07
    1308:	6b 81       	ldd	r22, Y+3	; 0x03
    130a:	7c 81       	ldd	r23, Y+4	; 0x04
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	0f 81       	ldd	r16, Y+7	; 0x07
    1312:	2e 81       	ldd	r18, Y+6	; 0x06
    1314:	4d 81       	ldd	r20, Y+5	; 0x05
    1316:	0a d0       	rcall	.+20     	; 0x132c <_ZN12CmdMessenger4initER6Streamccc>
    1318:	27 96       	adiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <_ZN12CmdMessenger4initER6Streamccc>:
    132c:	0f 93       	push	r16
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	29 97       	sbiw	r28, 0x09	; 9
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03
    1346:	7e 83       	std	Y+6, r23	; 0x06
    1348:	6d 83       	std	Y+5, r22	; 0x05
    134a:	4f 83       	std	Y+7, r20	; 0x07
    134c:	28 87       	std	Y+8, r18	; 0x08
    134e:	09 87       	std	Y+9, r16	; 0x09
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	8a 5a       	subi	r24, 0xAA	; 170
    1356:	9d 4f       	sbci	r25, 0xFD	; 253
    1358:	fc 01       	movw	r30, r24
    135a:	11 82       	std	Z+1, r1	; 0x01
    135c:	10 82       	st	Z, r1
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	8f 5a       	subi	r24, 0xAF	; 175
    1364:	9d 4f       	sbci	r25, 0xFD	; 253
    1366:	2d 81       	ldd	r18, Y+5	; 0x05
    1368:	3e 81       	ldd	r19, Y+6	; 0x06
    136a:	fc 01       	movw	r30, r24
    136c:	31 83       	std	Z+1, r19	; 0x01
    136e:	20 83       	st	Z, r18
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	fc 01       	movw	r30, r24
    1376:	10 86       	std	Z+8, r1	; 0x08
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	8c 5a       	subi	r24, 0xAC	; 172
    137e:	9d 4f       	sbci	r25, 0xFD	; 253
    1380:	2f 81       	ldd	r18, Y+7	; 0x07
    1382:	fc 01       	movw	r30, r24
    1384:	20 83       	st	Z, r18
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	8d 5a       	subi	r24, 0xAD	; 173
    138c:	9d 4f       	sbci	r25, 0xFD	; 253
    138e:	28 85       	ldd	r18, Y+8	; 0x08
    1390:	fc 01       	movw	r30, r24
    1392:	20 83       	st	Z, r18
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	8b 5a       	subi	r24, 0xAB	; 171
    139a:	9d 4f       	sbci	r25, 0xFD	; 253
    139c:	29 85       	ldd	r18, Y+9	; 0x09
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	20 e4       	ldi	r18, 0x40	; 64
    13a8:	fc 01       	movw	r30, r24
    13aa:	23 83       	std	Z+3, r18	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	2f e3       	ldi	r18, 0x3F	; 63
    13b2:	fc 01       	movw	r30, r24
    13b4:	24 83       	std	Z+4, r18	; 0x04
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	2e d0       	rcall	.+92     	; 0x1418 <_ZN12CmdMessenger5resetEv>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	8a 5a       	subi	r24, 0xAA	; 170
    13c2:	9d 4f       	sbci	r25, 0xFD	; 253
    13c4:	fc 01       	movw	r30, r24
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1
    13ca:	1a 82       	std	Y+2, r1	; 0x02
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	12 c0       	rjmp	.+36     	; 0x13f4 <_ZN12CmdMessenger4initER6Streamccc+0xc8>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	84 5d       	subi	r24, 0xD4	; 212
    13da:	9e 4f       	sbci	r25, 0xFE	; 254
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	82 0f       	add	r24, r18
    13e2:	93 1f       	adc	r25, r19
    13e4:	fc 01       	movw	r30, r24
    13e6:	11 82       	std	Z+1, r1	; 0x01
    13e8:	10 82       	st	Z, r1
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	c2 97       	sbiw	r24, 0x32	; 50
    13fa:	54 f3       	brlt	.-44     	; 0x13d0 <_ZN12CmdMessenger4initER6Streamccc+0xa4>
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	fc 01       	movw	r30, r24
    1402:	17 82       	std	Z+7, r1	; 0x07
    1404:	29 96       	adiw	r28, 0x09	; 9
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	0f 91       	pop	r16
    1416:	08 95       	ret

00001418 <_ZN12CmdMessenger5resetEv>:
    1418:	a2 e0       	ldi	r26, 0x02	; 2
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e1       	ldi	r30, 0x12	; 18
    141e:	fa e0       	ldi	r31, 0x0A	; 10
    1420:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	fc 01       	movw	r30, r24
    142e:	12 82       	std	Z+2, r1	; 0x02
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	84 5b       	subi	r24, 0xB4	; 180
    1436:	9d 4f       	sbci	r25, 0xFD	; 253
    1438:	fc 01       	movw	r30, r24
    143a:	11 82       	std	Z+1, r1	; 0x01
    143c:	10 82       	st	Z, r1
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	82 5b       	subi	r24, 0xB2	; 178
    1444:	9d 4f       	sbci	r25, 0xFD	; 253
    1446:	fc 01       	movw	r30, r24
    1448:	11 82       	std	Z+1, r1	; 0x01
    144a:	10 82       	st	Z, r1
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	86 5b       	subi	r24, 0xB6	; 182
    1452:	9d 4f       	sbci	r25, 0xFD	; 253
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
    145a:	22 96       	adiw	r28, 0x02	; 2
    145c:	e2 e0       	ldi	r30, 0x02	; 2
    145e:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001462 <_ZN12CmdMessenger6attachEPFvvE>:
    1462:	a4 e0       	ldi	r26, 0x04	; 4
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e7 e3       	ldi	r30, 0x37	; 55
    1468:	fa e0       	ldi	r31, 0x0A	; 10
    146a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	7c 83       	std	Y+4, r23	; 0x04
    1474:	6b 83       	std	Y+3, r22	; 0x03
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	8a 5a       	subi	r24, 0xAA	; 170
    147c:	9d 4f       	sbci	r25, 0xFD	; 253
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	fc 01       	movw	r30, r24
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	20 83       	st	Z, r18
    1488:	24 96       	adiw	r28, 0x04	; 4
    148a:	e2 e0       	ldi	r30, 0x02	; 2
    148c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001490 <_ZN12CmdMessenger6attachEhPFvvE>:
    1490:	a5 e0       	ldi	r26, 0x05	; 5
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	fa e0       	ldi	r31, 0x0A	; 10
    1498:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6b 83       	std	Y+3, r22	; 0x03
    14a2:	5d 83       	std	Y+5, r21	; 0x05
    14a4:	4c 83       	std	Y+4, r20	; 0x04
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	82 33       	cpi	r24, 0x32	; 50
    14aa:	80 f4       	brcc	.+32     	; 0x14cc <_ZN12CmdMessenger6attachEhPFvvE+0x3c>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	29 81       	ldd	r18, Y+1	; 0x01
    14b4:	3a 81       	ldd	r19, Y+2	; 0x02
    14b6:	84 5d       	subi	r24, 0xD4	; 212
    14b8:	9e 4f       	sbci	r25, 0xFE	; 254
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	82 0f       	add	r24, r18
    14c0:	93 1f       	adc	r25, r19
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	fc 01       	movw	r30, r24
    14c8:	31 83       	std	Z+1, r19	; 0x01
    14ca:	20 83       	st	Z, r18
    14cc:	25 96       	adiw	r28, 0x05	; 5
    14ce:	e2 e0       	ldi	r30, 0x02	; 2
    14d0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000014d4 <_ZN12CmdMessenger16feedinSerialDataEv>:
    14d4:	ae e0       	ldi	r26, 0x0E	; 14
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e0 e7       	ldi	r30, 0x70	; 112
    14da:	fa e0       	ldi	r31, 0x0A	; 10
    14dc:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    14e0:	9e 87       	std	Y+14, r25	; 0x0e
    14e2:	8d 87       	std	Y+13, r24	; 0x0d
    14e4:	41 c1       	rjmp	.+642    	; 0x1768 <_ZN12CmdMessenger16feedinSerialDataEv+0x294>
    14e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ea:	8f 5a       	subi	r24, 0xAF	; 175
    14ec:	9d 4f       	sbci	r25, 0xFD	; 253
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	04 96       	adiw	r24, 0x04	; 4
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	8f 5a       	subi	r24, 0xAF	; 175
    1508:	9d 4f       	sbci	r25, 0xFD	; 253
    150a:	fc 01       	movw	r30, r24
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	f9 01       	movw	r30, r18
    1512:	09 95       	icall
    1514:	81 15       	cp	r24, r1
    1516:	92 40       	sbci	r25, 0x02	; 2
    1518:	c4 f4       	brge	.+48     	; 0x154a <_ZN12CmdMessenger16feedinSerialDataEv+0x76>
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	8f 5a       	subi	r24, 0xAF	; 175
    1520:	9d 4f       	sbci	r25, 0xFD	; 253
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	04 96       	adiw	r24, 0x04	; 4
    1530:	fc 01       	movw	r30, r24
    1532:	20 81       	ld	r18, Z
    1534:	31 81       	ldd	r19, Z+1	; 0x01
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	8f 5a       	subi	r24, 0xAF	; 175
    153c:	9d 4f       	sbci	r25, 0xFD	; 253
    153e:	fc 01       	movw	r30, r24
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	f9 01       	movw	r30, r18
    1546:	09 95       	icall
    1548:	02 c0       	rjmp	.+4      	; 0x154e <_ZN12CmdMessenger16feedinSerialDataEv+0x7a>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	8d 85       	ldd	r24, Y+13	; 0x0d
    1554:	9e 85       	ldd	r25, Y+14	; 0x0e
    1556:	9c 01       	movw	r18, r24
    1558:	27 5b       	subi	r18, 0xB7	; 183
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	8f 5a       	subi	r24, 0xAF	; 175
    1562:	9d 4f       	sbci	r25, 0xFD	; 253
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	4b 81       	ldd	r20, Y+3	; 0x03
    156c:	5c 81       	ldd	r21, Y+4	; 0x04
    156e:	b9 01       	movw	r22, r18
    1570:	0e 94 1d 2a 	call	0x543a	; 0x543a <_ZN6Stream9readBytesEPcj>
    1574:	1a 82       	std	Y+2, r1	; 0x02
    1576:	19 82       	std	Y+1, r1	; 0x01
    1578:	ef c0       	rjmp	.+478    	; 0x1758 <_ZN12CmdMessenger16feedinSerialDataEv+0x284>
    157a:	2d 85       	ldd	r18, Y+13	; 0x0d
    157c:	3e 85       	ldd	r19, Y+14	; 0x0e
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	82 0f       	add	r24, r18
    1584:	93 1f       	adc	r25, r19
    1586:	87 5b       	subi	r24, 0xB7	; 183
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	fc 01       	movw	r30, r24
    158c:	20 81       	ld	r18, Z
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	98 87       	std	Y+8, r25	; 0x08
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	2c 87       	std	Y+12, r18	; 0x0c
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	87 5b       	subi	r24, 0xB7	; 183
    159e:	9d 4f       	sbci	r25, 0xFD	; 253
    15a0:	fc 01       	movw	r30, r24
    15a2:	10 82       	st	Z, r1
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	9c 01       	movw	r18, r24
    15aa:	2a 5f       	subi	r18, 0xFA	; 250
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	8f 81       	ldd	r24, Y+7	; 0x07
    15b0:	98 85       	ldd	r25, Y+8	; 0x08
    15b2:	8b 5a       	subi	r24, 0xAB	; 171
    15b4:	9d 4f       	sbci	r25, 0xFD	; 253
    15b6:	fc 01       	movw	r30, r24
    15b8:	40 81       	ld	r20, Z
    15ba:	be 01       	movw	r22, r28
    15bc:	64 5f       	subi	r22, 0xF4	; 244
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	50 d4       	rcall	.+2208   	; 0x1e66 <_ZN12CmdMessenger9isEscapedEPccS0_>
    15c6:	89 87       	std	Y+9, r24	; 0x09
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	8d 5a       	subi	r24, 0xAD	; 173
    15ce:	9d 4f       	sbci	r25, 0xFD	; 253
    15d0:	fc 01       	movw	r30, r24
    15d2:	90 81       	ld	r25, Z
    15d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d6:	98 17       	cp	r25, r24
    15d8:	99 f5       	brne	.+102    	; 0x1640 <_ZN12CmdMessenger16feedinSerialDataEv+0x16c>
    15da:	99 85       	ldd	r25, Y+9	; 0x09
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 27       	eor	r24, r25
    15e0:	88 23       	and	r24, r24
    15e2:	71 f1       	breq	.+92     	; 0x1640 <_ZN12CmdMessenger16feedinSerialDataEv+0x16c>
    15e4:	8f 81       	ldd	r24, Y+7	; 0x07
    15e6:	98 85       	ldd	r25, Y+8	; 0x08
    15e8:	fc 01       	movw	r30, r24
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2f 81       	ldd	r18, Y+7	; 0x07
    15f2:	38 85       	ldd	r19, Y+8	; 0x08
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	09 96       	adiw	r24, 0x09	; 9
    15fa:	fc 01       	movw	r30, r24
    15fc:	10 82       	st	Z, r1
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	fc 01       	movw	r30, r24
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	88 23       	and	r24, r24
    1608:	b9 f0       	breq	.+46     	; 0x1638 <_ZN12CmdMessenger16feedinSerialDataEv+0x164>
    160a:	8f 81       	ldd	r24, Y+7	; 0x07
    160c:	98 85       	ldd	r25, Y+8	; 0x08
    160e:	87 5b       	subi	r24, 0xB7	; 183
    1610:	9d 4f       	sbci	r25, 0xFD	; 253
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	9c 01       	movw	r18, r24
    161e:	27 5f       	subi	r18, 0xF7	; 247
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	84 5b       	subi	r24, 0xB4	; 180
    1628:	9d 4f       	sbci	r25, 0xFD	; 253
    162a:	fc 01       	movw	r30, r24
    162c:	31 83       	std	Z+1, r19	; 0x01
    162e:	20 83       	st	Z, r18
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	fc 01       	movw	r30, r24
    1636:	16 82       	std	Z+6, r1	; 0x06
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	ed de       	rcall	.-550    	; 0x1418 <_ZN12CmdMessenger5resetEv>
    163e:	25 c0       	rjmp	.+74     	; 0x168a <_ZN12CmdMessenger16feedinSerialDataEv+0x1b6>
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	98 85       	ldd	r25, Y+8	; 0x08
    1644:	fc 01       	movw	r30, r24
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	4c 85       	ldd	r20, Y+12	; 0x0c
    164e:	2f 81       	ldd	r18, Y+7	; 0x07
    1650:	38 85       	ldd	r19, Y+8	; 0x08
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	09 96       	adiw	r24, 0x09	; 9
    1658:	fc 01       	movw	r30, r24
    165a:	40 83       	st	Z, r20
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	fc 01       	movw	r30, r24
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	28 0f       	add	r18, r24
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	fc 01       	movw	r30, r24
    166e:	22 83       	std	Z+2, r18	; 0x02
    1670:	8f 81       	ldd	r24, Y+7	; 0x07
    1672:	98 85       	ldd	r25, Y+8	; 0x08
    1674:	fc 01       	movw	r30, r24
    1676:	22 81       	ldd	r18, Z+2	; 0x02
    1678:	8f 81       	ldd	r24, Y+7	; 0x07
    167a:	98 85       	ldd	r25, Y+8	; 0x08
    167c:	fc 01       	movw	r30, r24
    167e:	84 81       	ldd	r24, Z+4	; 0x04
    1680:	28 17       	cp	r18, r24
    1682:	18 f0       	brcs	.+6      	; 0x168a <_ZN12CmdMessenger16feedinSerialDataEv+0x1b6>
    1684:	8f 81       	ldd	r24, Y+7	; 0x07
    1686:	98 85       	ldd	r25, Y+8	; 0x08
    1688:	c7 de       	rcall	.-626    	; 0x1418 <_ZN12CmdMessenger5resetEv>
    168a:	8f 81       	ldd	r24, Y+7	; 0x07
    168c:	98 85       	ldd	r25, Y+8	; 0x08
    168e:	87 5b       	subi	r24, 0xB7	; 183
    1690:	9d 4f       	sbci	r25, 0xFD	; 253
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <_ZN12CmdMessenger16feedinSerialDataEv+0x1d4>
    16a6:	53 c0       	rjmp	.+166    	; 0x174e <_ZN12CmdMessenger16feedinSerialDataEv+0x27a>
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	9b 87       	std	Y+11, r25	; 0x0b
    16ae:	8a 87       	std	Y+10, r24	; 0x0a
    16b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b4:	06 d3       	rcall	.+1548   	; 0x1cc2 <_ZN12CmdMessenger12readInt16ArgEv>
    16b6:	28 2f       	mov	r18, r24
    16b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    16bc:	fc 01       	movw	r30, r24
    16be:	21 83       	std	Z+1, r18	; 0x01
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	fc 01       	movw	r30, r24
    16c6:	81 81       	ldd	r24, Z+1	; 0x01
    16c8:	82 33       	cpi	r24, 0x32	; 50
    16ca:	78 f5       	brcc	.+94     	; 0x172a <_ZN12CmdMessenger16feedinSerialDataEv+0x256>
    16cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d0:	85 5b       	subi	r24, 0xB5	; 181
    16d2:	9d 4f       	sbci	r25, 0xFD	; 253
    16d4:	fc 01       	movw	r30, r24
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	39 f1       	breq	.+78     	; 0x172a <_ZN12CmdMessenger16feedinSerialDataEv+0x256>
    16dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16de:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e0:	fc 01       	movw	r30, r24
    16e2:	81 81       	ldd	r24, Z+1	; 0x01
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    16ec:	84 5d       	subi	r24, 0xD4	; 212
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	89 2b       	or	r24, r25
    1700:	a1 f0       	breq	.+40     	; 0x172a <_ZN12CmdMessenger16feedinSerialDataEv+0x256>
    1702:	8a 85       	ldd	r24, Y+10	; 0x0a
    1704:	9b 85       	ldd	r25, Y+11	; 0x0b
    1706:	fc 01       	movw	r30, r24
    1708:	81 81       	ldd	r24, Z+1	; 0x01
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1710:	3b 85       	ldd	r19, Y+11	; 0x0b
    1712:	84 5d       	subi	r24, 0xD4	; 212
    1714:	9e 4f       	sbci	r25, 0xFE	; 254
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	82 0f       	add	r24, r18
    171c:	93 1f       	adc	r25, r19
    171e:	fc 01       	movw	r30, r24
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	fc 01       	movw	r30, r24
    1726:	09 95       	icall
    1728:	12 c0       	rjmp	.+36     	; 0x174e <_ZN12CmdMessenger16feedinSerialDataEv+0x27a>
    172a:	8a 85       	ldd	r24, Y+10	; 0x0a
    172c:	9b 85       	ldd	r25, Y+11	; 0x0b
    172e:	8a 5a       	subi	r24, 0xAA	; 170
    1730:	9d 4f       	sbci	r25, 0xFD	; 253
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	89 2b       	or	r24, r25
    173a:	49 f0       	breq	.+18     	; 0x174e <_ZN12CmdMessenger16feedinSerialDataEv+0x27a>
    173c:	8a 85       	ldd	r24, Y+10	; 0x0a
    173e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1740:	8a 5a       	subi	r24, 0xAA	; 170
    1742:	9d 4f       	sbci	r25, 0xFD	; 253
    1744:	fc 01       	movw	r30, r24
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	fc 01       	movw	r30, r24
    174c:	09 95       	icall
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	29 81       	ldd	r18, Y+1	; 0x01
    175a:	3a 81       	ldd	r19, Y+2	; 0x02
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	28 17       	cp	r18, r24
    1762:	39 07       	cpc	r19, r25
    1764:	08 f4       	brcc	.+2      	; 0x1768 <_ZN12CmdMessenger16feedinSerialDataEv+0x294>
    1766:	09 cf       	rjmp	.-494    	; 0x157a <_ZN12CmdMessenger16feedinSerialDataEv+0xa6>
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	fc 01       	movw	r30, r24
    176e:	97 81       	ldd	r25, Z+7	; 0x07
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 27       	eor	r24, r25
    1774:	88 23       	and	r24, r24
    1776:	d9 f0       	breq	.+54     	; 0x17ae <_ZN12CmdMessenger16feedinSerialDataEv+0x2da>
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	8f 5a       	subi	r24, 0xAF	; 175
    177e:	9d 4f       	sbci	r25, 0xFD	; 253
    1780:	fc 01       	movw	r30, r24
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	04 96       	adiw	r24, 0x04	; 4
    178e:	fc 01       	movw	r30, r24
    1790:	20 81       	ld	r18, Z
    1792:	31 81       	ldd	r19, Z+1	; 0x01
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	8f 5a       	subi	r24, 0xAF	; 175
    179a:	9d 4f       	sbci	r25, 0xFD	; 253
    179c:	fc 01       	movw	r30, r24
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	f9 01       	movw	r30, r18
    17a4:	09 95       	icall
    17a6:	89 2b       	or	r24, r25
    17a8:	11 f0       	breq	.+4      	; 0x17ae <_ZN12CmdMessenger16feedinSerialDataEv+0x2da>
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <_ZN12CmdMessenger16feedinSerialDataEv+0x2dc>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	88 23       	and	r24, r24
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <_ZN12CmdMessenger16feedinSerialDataEv+0x2e2>
    17b4:	98 ce       	rjmp	.-720    	; 0x14e6 <_ZN12CmdMessenger16feedinSerialDataEv+0x12>
    17b6:	2e 96       	adiw	r28, 0x0e	; 14
    17b8:	e2 e0       	ldi	r30, 0x02	; 2
    17ba:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000017be <_ZN12CmdMessenger4nextEv>:
    17be:	a4 e0       	ldi	r26, 0x04	; 4
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 ee       	ldi	r30, 0xE5	; 229
    17c4:	fb e0       	ldi	r31, 0x0B	; 11
    17c6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
    17ce:	1a 82       	std	Y+2, r1	; 0x02
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	87 5b       	subi	r24, 0xB7	; 183
    17d8:	9d 4f       	sbci	r25, 0xFD	; 253
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	19 f0       	breq	.+6      	; 0x17ec <_ZN12CmdMessenger4nextEv+0x2e>
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <_ZN12CmdMessenger4nextEv+0x32>
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <_ZN12CmdMessenger4nextEv+0x4a>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	3f c0       	rjmp	.+126    	; 0x186e <_ZN12CmdMessenger4nextEv+0xb0>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	09 96       	adiw	r24, 0x09	; 9
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	87 5b       	subi	r24, 0xB7	; 183
    1800:	9d 4f       	sbci	r25, 0xFD	; 253
    1802:	22 e0       	ldi	r18, 0x02	; 2
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	86 5b       	subi	r24, 0xB6	; 182
    180e:	9d 4f       	sbci	r25, 0xFD	; 253
    1810:	fc 01       	movw	r30, r24
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	c1 f0       	breq	.+48     	; 0x1848 <_ZN12CmdMessenger4nextEv+0x8a>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	9c 01       	movw	r18, r24
    181e:	22 5b       	subi	r18, 0xB2	; 178
    1820:	3d 4f       	sbci	r19, 0xFD	; 253
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	8c 5a       	subi	r24, 0xAC	; 172
    1828:	9d 4f       	sbci	r25, 0xFD	; 253
    182a:	fc 01       	movw	r30, r24
    182c:	40 81       	ld	r20, Z
    182e:	69 81       	ldd	r22, Y+1	; 0x01
    1830:	7a 81       	ldd	r23, Y+2	; 0x02
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	ae d2       	rcall	.+1372   	; 0x1d94 <_ZN12CmdMessenger7split_rEPccPS0_>
    1838:	9c 01       	movw	r18, r24
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	84 5b       	subi	r24, 0xB4	; 180
    1840:	9d 4f       	sbci	r25, 0xFD	; 253
    1842:	fc 01       	movw	r30, r24
    1844:	31 83       	std	Z+1, r19	; 0x01
    1846:	20 83       	st	Z, r18
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	84 5b       	subi	r24, 0xB4	; 180
    184e:	9d 4f       	sbci	r25, 0xFD	; 253
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	89 2b       	or	r24, r25
    1858:	49 f0       	breq	.+18     	; 0x186c <_ZN12CmdMessenger4nextEv+0xae>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	86 5b       	subi	r24, 0xB6	; 182
    1860:	9d 4f       	sbci	r25, 0xFD	; 253
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	fc 01       	movw	r30, r24
    1866:	20 83       	st	Z, r18
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	01 c0       	rjmp	.+2      	; 0x186e <_ZN12CmdMessenger4nextEv+0xb0>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	24 96       	adiw	r28, 0x04	; 4
    1870:	e2 e0       	ldi	r30, 0x02	; 2
    1872:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001876 <_ZN12CmdMessenger12sendCmdStartEh>:
    1876:	a3 e0       	ldi	r26, 0x03	; 3
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e1 e4       	ldi	r30, 0x41	; 65
    187c:	fc e0       	ldi	r31, 0x0C	; 12
    187e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	6b 83       	std	Y+3, r22	; 0x03
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	fc 01       	movw	r30, r24
    188e:	90 81       	ld	r25, Z
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 27       	eor	r24, r25
    1894:	88 23       	and	r24, r24
    1896:	b1 f0       	breq	.+44     	; 0x18c4 <_ZN12CmdMessenger12sendCmdStartEh+0x4e>
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	fc 01       	movw	r30, r24
    18aa:	27 83       	std	Z+7, r18	; 0x07
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	8f 5a       	subi	r24, 0xAF	; 175
    18b2:	9d 4f       	sbci	r25, 0xFD	; 253
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	4a e0       	ldi	r20, 0x0A	; 10
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	6b 81       	ldd	r22, Y+3	; 0x03
    18c0:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN5Print5printEhi>
    18c4:	23 96       	adiw	r28, 0x03	; 3
    18c6:	e2 e0       	ldi	r30, 0x02	; 2
    18c8:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000018cc <_ZN12CmdMessenger13sendCmdSciArgEdj>:
    18cc:	a8 e0       	ldi	r26, 0x08	; 8
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ec e6       	ldi	r30, 0x6C	; 108
    18d2:	fc e0       	ldi	r31, 0x0C	; 12
    18d4:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	4b 83       	std	Y+3, r20	; 0x03
    18de:	5c 83       	std	Y+4, r21	; 0x04
    18e0:	6d 83       	std	Y+5, r22	; 0x05
    18e2:	7e 83       	std	Y+6, r23	; 0x06
    18e4:	38 87       	std	Y+8, r19	; 0x08
    18e6:	2f 83       	std	Y+7, r18	; 0x07
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	e1 f0       	breq	.+56     	; 0x192c <_ZN12CmdMessenger13sendCmdSciArgEdj+0x60>
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	8c 5a       	subi	r24, 0xAC	; 172
    18fa:	9d 4f       	sbci	r25, 0xFD	; 253
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 81       	ld	r18, Z
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	8f 5a       	subi	r24, 0xAF	; 175
    1906:	9d 4f       	sbci	r25, 0xFD	; 253
    1908:	fc 01       	movw	r30, r24
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	62 2f       	mov	r22, r18
    1910:	0e 94 58 28 	call	0x50b0	; 0x50b0 <_ZN5Print5printEc>
    1914:	2f 81       	ldd	r18, Y+7	; 0x07
    1916:	38 85       	ldd	r19, Y+8	; 0x08
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	ad 81       	ldd	r26, Y+5	; 0x05
    191e:	be 81       	ldd	r27, Y+6	; 0x06
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	ac 01       	movw	r20, r24
    1926:	bd 01       	movw	r22, r26
    1928:	cf 01       	movw	r24, r30
    192a:	d4 d2       	rcall	.+1448   	; 0x1ed4 <_ZN12CmdMessenger8printSciEdj>
    192c:	28 96       	adiw	r28, 0x08	; 8
    192e:	e2 e0       	ldi	r30, 0x02	; 2
    1930:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001934 <_ZN12CmdMessenger10sendCmdEndEbhj>:
    1934:	a0 e2       	ldi	r26, 0x20	; 32
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e0 ea       	ldi	r30, 0xA0	; 160
    193a:	fc e0       	ldi	r31, 0x0C	; 12
    193c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1940:	9c 8f       	std	Y+28, r25	; 0x1c
    1942:	8b 8f       	std	Y+27, r24	; 0x1b
    1944:	6d 8f       	std	Y+29, r22	; 0x1d
    1946:	4e 8f       	std	Y+30, r20	; 0x1e
    1948:	38 a3       	std	Y+32, r19	; 0x20
    194a:	2f 8f       	std	Y+31, r18	; 0x1f
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1950:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	09 f4       	brne	.+2      	; 0x195c <_ZN12CmdMessenger10sendCmdEndEbhj+0x28>
    195a:	4a c1       	rjmp	.+660    	; 0x1bf0 <_ZN12CmdMessenger10sendCmdEndEbhj+0x2bc>
    195c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1960:	8d 5a       	subi	r24, 0xAD	; 173
    1962:	9d 4f       	sbci	r25, 0xFD	; 253
    1964:	fc 01       	movw	r30, r24
    1966:	20 81       	ld	r18, Z
    1968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196c:	8f 5a       	subi	r24, 0xAF	; 175
    196e:	9d 4f       	sbci	r25, 0xFD	; 253
    1970:	fc 01       	movw	r30, r24
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	62 2f       	mov	r22, r18
    1978:	0e 94 58 28 	call	0x50b0	; 0x50b0 <_ZN5Print5printEc>
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	fc 01       	movw	r30, r24
    1982:	80 85       	ldd	r24, Z+8	; 0x08
    1984:	88 23       	and	r24, r24
    1986:	49 f0       	breq	.+18     	; 0x199a <_ZN12CmdMessenger10sendCmdEndEbhj+0x66>
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	8f 5a       	subi	r24, 0xAF	; 175
    198e:	9d 4f       	sbci	r25, 0xFD	; 253
    1990:	fc 01       	movw	r30, r24
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	0e 94 5f 28 	call	0x50be	; 0x50be <_ZN5Print7printlnEv>
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	88 23       	and	r24, r24
    199e:	09 f4       	brne	.+2      	; 0x19a2 <_ZN12CmdMessenger10sendCmdEndEbhj+0x6e>
    19a0:	27 c1       	rjmp	.+590    	; 0x1bf0 <_ZN12CmdMessenger10sendCmdEndEbhj+0x2bc>
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	9b 83       	std	Y+3, r25	; 0x03
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    19aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ac:	98 a1       	ldd	r25, Y+32	; 0x20
    19ae:	9d 83       	std	Y+5, r25	; 0x05
    19b0:	8c 83       	std	Y+4, r24	; 0x04
    19b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19b4:	8e 83       	std	Y+6, r24	; 0x06
    19b6:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	a9 87       	std	Y+9, r26	; 0x09
    19c4:	ba 87       	std	Y+10, r27	; 0x0a
    19c6:	8f 81       	ldd	r24, Y+7	; 0x07
    19c8:	98 85       	ldd	r25, Y+8	; 0x08
    19ca:	a9 85       	ldd	r26, Y+9	; 0x09
    19cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    19ce:	8b 87       	std	Y+11, r24	; 0x0b
    19d0:	9c 87       	std	Y+12, r25	; 0x0c
    19d2:	ad 87       	std	Y+13, r26	; 0x0d
    19d4:	be 87       	std	Y+14, r27	; 0x0e
    19d6:	1f 86       	std	Y+15, r1	; 0x0f
    19d8:	ed c0       	rjmp	.+474    	; 0x1bb4 <_ZN12CmdMessenger10sendCmdEndEbhj+0x280>
    19da:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	a9 87       	std	Y+9, r26	; 0x09
    19e8:	ba 87       	std	Y+10, r27	; 0x0a
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	99 8b       	std	Y+17, r25	; 0x11
    19f0:	88 8b       	std	Y+16, r24	; 0x10
    19f2:	8e 81       	ldd	r24, Y+6	; 0x06
    19f4:	8a 8b       	std	Y+18, r24	; 0x12
    19f6:	88 89       	ldd	r24, Y+16	; 0x10
    19f8:	99 89       	ldd	r25, Y+17	; 0x11
    19fa:	8f 5a       	subi	r24, 0xAF	; 175
    19fc:	9d 4f       	sbci	r25, 0xFD	; 253
    19fe:	fc 01       	movw	r30, r24
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	fc 01       	movw	r30, r24
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	04 96       	adiw	r24, 0x04	; 4
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	88 89       	ldd	r24, Y+16	; 0x10
    1a14:	99 89       	ldd	r25, Y+17	; 0x11
    1a16:	8f 5a       	subi	r24, 0xAF	; 175
    1a18:	9d 4f       	sbci	r25, 0xFD	; 253
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	f9 01       	movw	r30, r18
    1a22:	09 95       	icall
    1a24:	21 e0       	ldi	r18, 0x01	; 1
    1a26:	89 2b       	or	r24, r25
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <_ZN12CmdMessenger10sendCmdEndEbhj+0xf8>
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	22 23       	and	r18, r18
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <_ZN12CmdMessenger10sendCmdEndEbhj+0xfe>
    1a30:	bf c0       	rjmp	.+382    	; 0x1bb0 <_ZN12CmdMessenger10sendCmdEndEbhj+0x27c>
    1a32:	88 89       	ldd	r24, Y+16	; 0x10
    1a34:	99 89       	ldd	r25, Y+17	; 0x11
    1a36:	8f 5a       	subi	r24, 0xAF	; 175
    1a38:	9d 4f       	sbci	r25, 0xFD	; 253
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	fc 01       	movw	r30, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	06 96       	adiw	r24, 0x06	; 6
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 81       	ld	r18, Z
    1a4c:	31 81       	ldd	r19, Z+1	; 0x01
    1a4e:	88 89       	ldd	r24, Y+16	; 0x10
    1a50:	99 89       	ldd	r25, Y+17	; 0x11
    1a52:	8f 5a       	subi	r24, 0xAF	; 175
    1a54:	9d 4f       	sbci	r25, 0xFD	; 253
    1a56:	fc 01       	movw	r30, r24
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	f9 01       	movw	r30, r18
    1a5e:	09 95       	icall
    1a60:	28 2f       	mov	r18, r24
    1a62:	88 89       	ldd	r24, Y+16	; 0x10
    1a64:	99 89       	ldd	r25, Y+17	; 0x11
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	2a 8f       	std	Y+26, r18	; 0x1a
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	87 5b       	subi	r24, 0xB7	; 183
    1a72:	9d 4f       	sbci	r25, 0xFD	; 253
    1a74:	fc 01       	movw	r30, r24
    1a76:	10 82       	st	Z, r1
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	2a 5f       	subi	r18, 0xFA	; 250
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	8b 5a       	subi	r24, 0xAB	; 171
    1a88:	9d 4f       	sbci	r25, 0xFD	; 253
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	40 81       	ld	r20, Z
    1a8e:	be 01       	movw	r22, r28
    1a90:	66 5e       	subi	r22, 0xE6	; 230
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8b 89       	ldd	r24, Y+19	; 0x13
    1a96:	9c 89       	ldd	r25, Y+20	; 0x14
    1a98:	e6 d1       	rcall	.+972    	; 0x1e66 <_ZN12CmdMessenger9isEscapedEPccS0_>
    1a9a:	8d 8b       	std	Y+21, r24	; 0x15
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	8d 5a       	subi	r24, 0xAD	; 173
    1aa2:	9d 4f       	sbci	r25, 0xFD	; 253
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	90 81       	ld	r25, Z
    1aa8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aaa:	98 17       	cp	r25, r24
    1aac:	99 f5       	brne	.+102    	; 0x1b14 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1e0>
    1aae:	9d 89       	ldd	r25, Y+21	; 0x15
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 27       	eor	r24, r25
    1ab4:	88 23       	and	r24, r24
    1ab6:	71 f1       	breq	.+92     	; 0x1b14 <_ZN12CmdMessenger10sendCmdEndEbhj+0x1e0>
    1ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aba:	9c 89       	ldd	r25, Y+20	; 0x14
    1abc:	fc 01       	movw	r30, r24
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	2b 89       	ldd	r18, Y+19	; 0x13
    1ac6:	3c 89       	ldd	r19, Y+20	; 0x14
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	09 96       	adiw	r24, 0x09	; 9
    1ace:	fc 01       	movw	r30, r24
    1ad0:	10 82       	st	Z, r1
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	88 23       	and	r24, r24
    1adc:	b9 f0       	breq	.+46     	; 0x1b0c <_ZN12CmdMessenger10sendCmdEndEbhj+0x1d8>
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	87 5b       	subi	r24, 0xB7	; 183
    1ae4:	9d 4f       	sbci	r25, 0xFD	; 253
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	9c 01       	movw	r18, r24
    1af2:	27 5f       	subi	r18, 0xF7	; 247
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	84 5b       	subi	r24, 0xB4	; 180
    1afc:	9d 4f       	sbci	r25, 0xFD	; 253
    1afe:	fc 01       	movw	r30, r24
    1b00:	31 83       	std	Z+1, r19	; 0x01
    1b02:	20 83       	st	Z, r18
    1b04:	8b 89       	ldd	r24, Y+19	; 0x13
    1b06:	9c 89       	ldd	r25, Y+20	; 0x14
    1b08:	fc 01       	movw	r30, r24
    1b0a:	16 82       	std	Z+6, r1	; 0x06
    1b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b10:	83 dc       	rcall	.-1786   	; 0x1418 <_ZN12CmdMessenger5resetEv>
    1b12:	25 c0       	rjmp	.+74     	; 0x1b5e <_ZN12CmdMessenger10sendCmdEndEbhj+0x22a>
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	fc 01       	movw	r30, r24
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1b22:	2b 89       	ldd	r18, Y+19	; 0x13
    1b24:	3c 89       	ldd	r19, Y+20	; 0x14
    1b26:	82 0f       	add	r24, r18
    1b28:	93 1f       	adc	r25, r19
    1b2a:	09 96       	adiw	r24, 0x09	; 9
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	40 83       	st	Z, r20
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	fc 01       	movw	r30, r24
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	28 0f       	add	r18, r24
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	fc 01       	movw	r30, r24
    1b42:	22 83       	std	Z+2, r18	; 0x02
    1b44:	8b 89       	ldd	r24, Y+19	; 0x13
    1b46:	9c 89       	ldd	r25, Y+20	; 0x14
    1b48:	fc 01       	movw	r30, r24
    1b4a:	22 81       	ldd	r18, Z+2	; 0x02
    1b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b50:	fc 01       	movw	r30, r24
    1b52:	84 81       	ldd	r24, Z+4	; 0x04
    1b54:	28 17       	cp	r18, r24
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <_ZN12CmdMessenger10sendCmdEndEbhj+0x22a>
    1b58:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5c:	5d dc       	rcall	.-1862   	; 0x1418 <_ZN12CmdMessenger5resetEv>
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	87 5b       	subi	r24, 0xB7	; 183
    1b64:	9d 4f       	sbci	r25, 0xFD	; 253
    1b66:	fc 01       	movw	r30, r24
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9f 8b       	std	Y+23, r25	; 0x17
    1b70:	8e 8b       	std	Y+22, r24	; 0x16
    1b72:	8e 89       	ldd	r24, Y+22	; 0x16
    1b74:	9f 89       	ldd	r25, Y+23	; 0x17
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	c9 f4       	brne	.+50     	; 0x1bac <_ZN12CmdMessenger10sendCmdEndEbhj+0x278>
    1b7a:	88 89       	ldd	r24, Y+16	; 0x10
    1b7c:	99 89       	ldd	r25, Y+17	; 0x11
    1b7e:	a1 d0       	rcall	.+322    	; 0x1cc2 <_ZN12CmdMessenger12readInt16ArgEv>
    1b80:	99 8f       	std	Y+25, r25	; 0x19
    1b82:	88 8f       	std	Y+24, r24	; 0x18
    1b84:	8a 89       	ldd	r24, Y+18	; 0x12
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	28 8d       	ldd	r18, Y+24	; 0x18
    1b8c:	39 8d       	ldd	r19, Y+25	; 0x19
    1b8e:	28 17       	cp	r18, r24
    1b90:	39 07       	cpc	r19, r25
    1b92:	51 f4       	brne	.+20     	; 0x1ba8 <_ZN12CmdMessenger10sendCmdEndEbhj+0x274>
    1b94:	88 89       	ldd	r24, Y+16	; 0x10
    1b96:	99 89       	ldd	r25, Y+17	; 0x11
    1b98:	85 5b       	subi	r24, 0xB5	; 181
    1b9a:	9d 4f       	sbci	r25, 0xFD	; 253
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 23       	and	r24, r24
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <_ZN12CmdMessenger10sendCmdEndEbhj+0x274>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <_ZN12CmdMessenger10sendCmdEndEbhj+0x27e>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <_ZN12CmdMessenger10sendCmdEndEbhj+0x27e>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <_ZN12CmdMessenger10sendCmdEndEbhj+0x27e>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	8f 87       	std	Y+15, r24	; 0x0f
    1bb4:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb6:	38 85       	ldd	r19, Y+8	; 0x08
    1bb8:	49 85       	ldd	r20, Y+9	; 0x09
    1bba:	5a 85       	ldd	r21, Y+10	; 0x0a
    1bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bc0:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bc2:	be 85       	ldd	r27, Y+14	; 0x0e
    1bc4:	28 1b       	sub	r18, r24
    1bc6:	39 0b       	sbc	r19, r25
    1bc8:	4a 0b       	sbc	r20, r26
    1bca:	5b 0b       	sbc	r21, r27
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	cc 01       	movw	r24, r24
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	28 17       	cp	r18, r24
    1bd8:	39 07       	cpc	r19, r25
    1bda:	4a 07       	cpc	r20, r26
    1bdc:	5b 07       	cpc	r21, r27
    1bde:	30 f4       	brcc	.+12     	; 0x1bec <_ZN12CmdMessenger10sendCmdEndEbhj+0x2b8>
    1be0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	89 27       	eor	r24, r25
    1be6:	88 23       	and	r24, r24
    1be8:	09 f0       	breq	.+2      	; 0x1bec <_ZN12CmdMessenger10sendCmdEndEbhj+0x2b8>
    1bea:	f7 ce       	rjmp	.-530    	; 0x19da <_ZN12CmdMessenger10sendCmdEndEbhj+0xa6>
    1bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	17 82       	std	Z+7, r1	; 0x07
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	10 82       	st	Z, r1
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	a0 96       	adiw	r28, 0x20	; 32
    1c04:	e2 e0       	ldi	r30, 0x02	; 2
    1c06:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001c0a <_ZN12CmdMessenger8findNextEPcc>:
    1c0a:	a9 e0       	ldi	r26, 0x09	; 9
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e0       	ldi	r30, 0x0B	; 11
    1c10:	fe e0       	ldi	r31, 0x0E	; 14
    1c12:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	78 87       	std	Y+8, r23	; 0x08
    1c1c:	6f 83       	std	Y+7, r22	; 0x07
    1c1e:	49 87       	std	Y+9, r20	; 0x09
    1c20:	1a 82       	std	Y+2, r1	; 0x02
    1c22:	19 82       	std	Y+1, r1	; 0x01
    1c24:	1b 82       	std	Y+3, r1	; 0x03
    1c26:	1c 82       	std	Y+4, r1	; 0x04
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	15 82       	std	Z+5, r1	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9c 01       	movw	r18, r24
    1c36:	2b 5f       	subi	r18, 0xFB	; 251
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	8b 5a       	subi	r24, 0xAB	; 171
    1c40:	9d 4f       	sbci	r25, 0xFD	; 253
    1c42:	fc 01       	movw	r30, r24
    1c44:	40 81       	ld	r20, Z
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	0b d1       	rcall	.+534    	; 0x1e66 <_ZN12CmdMessenger9isEscapedEPccS0_>
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	8f 81       	ldd	r24, Y+7	; 0x07
    1c54:	98 85       	ldd	r25, Y+8	; 0x08
    1c56:	fc 01       	movw	r30, r24
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 23       	and	r24, r24
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <_ZN12CmdMessenger8findNextEPcc+0x62>
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 27       	eor	r24, r25
    1c64:	88 23       	and	r24, r24
    1c66:	11 f0       	breq	.+4      	; 0x1c6c <_ZN12CmdMessenger8findNextEPcc+0x62>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <_ZN12CmdMessenger8findNextEPcc+0x64>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	8c 83       	std	Y+4, r24	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	88 23       	and	r24, r24
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <_ZN12CmdMessenger8findNextEPcc+0x72>
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	1f c0       	rjmp	.+62     	; 0x1cba <_ZN12CmdMessenger8findNextEPcc+0xb0>
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 81       	ld	r18, Z
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	8c 5a       	subi	r24, 0xAC	; 172
    1c8a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	28 17       	cp	r18, r24
    1c92:	41 f4       	brne	.+16     	; 0x1ca4 <_ZN12CmdMessenger8findNextEPcc+0x9a>
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 27       	eor	r24, r25
    1c9a:	88 23       	and	r24, r24
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <_ZN12CmdMessenger8findNextEPcc+0x9a>
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	0b c0       	rjmp	.+22     	; 0x1cba <_ZN12CmdMessenger8findNextEPcc+0xb0>
    1ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca6:	98 85       	ldd	r25, Y+8	; 0x08
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	98 87       	std	Y+8, r25	; 0x08
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	bb cf       	rjmp	.-138    	; 0x1c30 <_ZN12CmdMessenger8findNextEPcc+0x26>
    1cba:	29 96       	adiw	r28, 0x09	; 9
    1cbc:	e2 e0       	ldi	r30, 0x02	; 2
    1cbe:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001cc2 <_ZN12CmdMessenger12readInt16ArgEv>:
    1cc2:	a2 e0       	ldi	r26, 0x02	; 2
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e7 e6       	ldi	r30, 0x67	; 103
    1cc8:	fe e0       	ldi	r31, 0x0E	; 14
    1cca:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	73 dd       	rcall	.-1306   	; 0x17be <_ZN12CmdMessenger4nextEv>
    1cd8:	88 23       	and	r24, r24
    1cda:	c1 f0       	breq	.+48     	; 0x1d0c <_ZN12CmdMessenger12readInt16ArgEv+0x4a>
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	86 5b       	subi	r24, 0xB6	; 182
    1ce2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	20 83       	st	Z, r18
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	85 5b       	subi	r24, 0xB5	; 181
    1cf0:	9d 4f       	sbci	r25, 0xFD	; 253
    1cf2:	21 e0       	ldi	r18, 0x01	; 1
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	84 5b       	subi	r24, 0xB4	; 180
    1cfe:	9d 4f       	sbci	r25, 0xFD	; 253
    1d00:	fc 01       	movw	r30, r24
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <atoi>
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <_ZN12CmdMessenger12readInt16ArgEv+0x5a>
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	85 5b       	subi	r24, 0xB5	; 181
    1d12:	9d 4f       	sbci	r25, 0xFD	; 253
    1d14:	fc 01       	movw	r30, r24
    1d16:	10 82       	st	Z, r1
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	22 96       	adiw	r28, 0x02	; 2
    1d1e:	e2 e0       	ldi	r30, 0x02	; 2
    1d20:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001d24 <_ZN12CmdMessenger12readFloatArgEv>:
    1d24:	a2 e0       	ldi	r26, 0x02	; 2
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e8 e9       	ldi	r30, 0x98	; 152
    1d2a:	fe e0       	ldi	r31, 0x0E	; 14
    1d2c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	42 dd       	rcall	.-1404   	; 0x17be <_ZN12CmdMessenger4nextEv>
    1d3a:	88 23       	and	r24, r24
    1d3c:	e1 f0       	breq	.+56     	; 0x1d76 <_ZN12CmdMessenger12readFloatArgEv+0x52>
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	86 5b       	subi	r24, 0xB6	; 182
    1d44:	9d 4f       	sbci	r25, 0xFD	; 253
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 83       	st	Z, r18
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	85 5b       	subi	r24, 0xB5	; 181
    1d52:	9d 4f       	sbci	r25, 0xFD	; 253
    1d54:	21 e0       	ldi	r18, 0x01	; 1
    1d56:	fc 01       	movw	r30, r24
    1d58:	20 83       	st	Z, r18
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	84 5b       	subi	r24, 0xB4	; 180
    1d60:	9d 4f       	sbci	r25, 0xFD	; 253
    1d62:	fc 01       	movw	r30, r24
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <strtod>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	09 c0       	rjmp	.+18     	; 0x1d88 <_ZN12CmdMessenger12readFloatArgEv+0x64>
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	85 5b       	subi	r24, 0xB5	; 181
    1d7c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d7e:	fc 01       	movw	r30, r24
    1d80:	10 82       	st	Z, r1
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	dc 01       	movw	r26, r24
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	22 96       	adiw	r28, 0x02	; 2
    1d8e:	e2 e0       	ldi	r30, 0x02	; 2
    1d90:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001d94 <_ZN12CmdMessenger7split_rEPccPS0_>:
    1d94:	a9 e0       	ldi	r26, 0x09	; 9
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e0 ed       	ldi	r30, 0xD0	; 208
    1d9a:	fe e0       	ldi	r31, 0x0E	; 14
    1d9c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	7e 83       	std	Y+6, r23	; 0x06
    1da6:	6d 83       	std	Y+5, r22	; 0x05
    1da8:	4f 83       	std	Y+7, r20	; 0x07
    1daa:	39 87       	std	Y+9, r19	; 0x09
    1dac:	28 87       	std	Y+8, r18	; 0x08
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	89 2b       	or	r24, r25
    1db4:	39 f4       	brne	.+14     	; 0x1dc4 <_ZN12CmdMessenger7split_rEPccPS0_+0x30>
    1db6:	88 85       	ldd	r24, Y+8	; 0x08
    1db8:	99 85       	ldd	r25, Y+9	; 0x09
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <_ZN12CmdMessenger7split_rEPccPS0_+0x3c>
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	4f 81       	ldd	r20, Y+7	; 0x07
    1dda:	b9 01       	movw	r22, r18
    1ddc:	16 df       	rcall	.-468    	; 0x1c0a <_ZN12CmdMessenger8findNextEPcc>
    1dde:	89 2b       	or	r24, r25
    1de0:	41 f4       	brne	.+16     	; 0x1df2 <_ZN12CmdMessenger7split_rEPccPS0_+0x5e>
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	11 f0       	breq	.+4      	; 0x1df2 <_ZN12CmdMessenger7split_rEPccPS0_+0x5e>
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <_ZN12CmdMessenger7split_rEPccPS0_+0x60>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	88 23       	and	r24, r24
    1df6:	39 f7       	brne	.-50     	; 0x1dc6 <_ZN12CmdMessenger7split_rEPccPS0_+0x32>
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 23       	and	r24, r24
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <_ZN12CmdMessenger7split_rEPccPS0_+0x76>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	2a c0       	rjmp	.+84     	; 0x1e5e <_ZN12CmdMessenger7split_rEPccPS0_+0xca>
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	2d 81       	ldd	r18, Y+5	; 0x05
    1e14:	3e 81       	ldd	r19, Y+6	; 0x06
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	4f 81       	ldd	r20, Y+7	; 0x07
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	f5 de       	rcall	.-534    	; 0x1c0a <_ZN12CmdMessenger8findNextEPcc>
    1e20:	9c 01       	movw	r18, r24
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	fc 01       	movw	r30, r24
    1e34:	80 81       	ld	r24, Z
    1e36:	88 23       	and	r24, r24
    1e38:	49 f0       	breq	.+18     	; 0x1e4c <_ZN12CmdMessenger7split_rEPccPS0_+0xb8>
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9c 01       	movw	r18, r24
    1e40:	2f 5f       	subi	r18, 0xFF	; 255
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	3e 83       	std	Y+6, r19	; 0x06
    1e46:	2d 83       	std	Y+5, r18	; 0x05
    1e48:	fc 01       	movw	r30, r24
    1e4a:	10 82       	st	Z, r1
    1e4c:	88 85       	ldd	r24, Y+8	; 0x08
    1e4e:	99 85       	ldd	r25, Y+9	; 0x09
    1e50:	2d 81       	ldd	r18, Y+5	; 0x05
    1e52:	3e 81       	ldd	r19, Y+6	; 0x06
    1e54:	fc 01       	movw	r30, r24
    1e56:	31 83       	std	Z+1, r19	; 0x01
    1e58:	20 83       	st	Z, r18
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	29 96       	adiw	r28, 0x09	; 9
    1e60:	e2 e0       	ldi	r30, 0x02	; 2
    1e62:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001e66 <_ZN12CmdMessenger9isEscapedEPccS0_>:
    1e66:	a8 e0       	ldi	r26, 0x08	; 8
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 e3       	ldi	r30, 0x39	; 57
    1e6c:	ff e0       	ldi	r31, 0x0F	; 15
    1e6e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	7d 83       	std	Y+5, r23	; 0x05
    1e78:	6c 83       	std	Y+4, r22	; 0x04
    1e7a:	4e 83       	std	Y+6, r20	; 0x06
    1e7c:	38 87       	std	Y+8, r19	; 0x08
    1e7e:	2f 83       	std	Y+7, r18	; 0x07
    1e80:	8f 81       	ldd	r24, Y+7	; 0x07
    1e82:	98 85       	ldd	r25, Y+8	; 0x08
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 81       	ld	r18, Z
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	29 17       	cp	r18, r25
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <_ZN12CmdMessenger9isEscapedEPccS0_+0x2c>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 81       	ld	r18, Z
    1e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 83       	st	Z, r18
    1ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea6:	98 85       	ldd	r25, Y+8	; 0x08
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 81       	ld	r18, Z
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	8b 5a       	subi	r24, 0xAB	; 171
    1eb2:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	80 81       	ld	r24, Z
    1eb8:	28 17       	cp	r18, r24
    1eba:	39 f4       	brne	.+14     	; 0x1eca <_ZN12CmdMessenger9isEscapedEPccS0_+0x64>
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <_ZN12CmdMessenger9isEscapedEPccS0_+0x64>
    1ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec4:	98 85       	ldd	r25, Y+8	; 0x08
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	10 82       	st	Z, r1
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	28 96       	adiw	r28, 0x08	; 8
    1ece:	e2 e0       	ldi	r30, 0x02	; 2
    1ed0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00001ed4 <_ZN12CmdMessenger8printSciEdj>:

/**
 * Print float and double in scientific format
 */
void CmdMessenger::printSci(double f, unsigned int digits)
{
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	ea 97       	sbiw	r28, 0x3a	; 58
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	9c ab       	std	Y+52, r25	; 0x34
    1ef4:	8b ab       	std	Y+51, r24	; 0x33
    1ef6:	4d ab       	std	Y+53, r20	; 0x35
    1ef8:	5e ab       	std	Y+54, r21	; 0x36
    1efa:	6f ab       	std	Y+55, r22	; 0x37
    1efc:	78 af       	std	Y+56, r23	; 0x38
    1efe:	3a af       	std	Y+58, r19	; 0x3a
    1f00:	29 af       	std	Y+57, r18	; 0x39
	// handle sign
	if (f < 0.0)
    1f02:	8d a9       	ldd	r24, Y+53	; 0x35
    1f04:	9e a9       	ldd	r25, Y+54	; 0x36
    1f06:	af a9       	ldd	r26, Y+55	; 0x37
    1f08:	b8 ad       	ldd	r27, Y+56	; 0x38
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	a9 01       	movw	r20, r18
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	74 f4       	brge	.+28     	; 0x1f38 <_ZN12CmdMessenger8printSciEdj+0x64>
	{
		Serial.print('-');
    1f1c:	6d e2       	ldi	r22, 0x2D	; 45
    1f1e:	84 e4       	ldi	r24, 0x44	; 68
    1f20:	97 e0       	ldi	r25, 0x07	; 7
    1f22:	0e 94 58 28 	call	0x50b0	; 0x50b0 <_ZN5Print5printEc>
		f = -f;
    1f26:	8d a9       	ldd	r24, Y+53	; 0x35
    1f28:	9e a9       	ldd	r25, Y+54	; 0x36
    1f2a:	af a9       	ldd	r26, Y+55	; 0x37
    1f2c:	b8 ad       	ldd	r27, Y+56	; 0x38
    1f2e:	b0 58       	subi	r27, 0x80	; 128
    1f30:	8d ab       	std	Y+53, r24	; 0x35
    1f32:	9e ab       	std	Y+54, r25	; 0x36
    1f34:	af ab       	std	Y+55, r26	; 0x37
    1f36:	b8 af       	std	Y+56, r27	; 0x38
	}

	// handle infinite values
	if (isinf(f))
    1f38:	8d a9       	ldd	r24, Y+53	; 0x35
    1f3a:	9e a9       	ldd	r25, Y+54	; 0x36
    1f3c:	af a9       	ldd	r26, Y+55	; 0x37
    1f3e:	b8 ad       	ldd	r27, Y+56	; 0x38
    1f40:	6c 01       	movw	r12, r24
    1f42:	7d 01       	movw	r14, r26
    1f44:	e8 94       	clt
    1f46:	f7 f8       	bld	r15, 7
    1f48:	11 e0       	ldi	r17, 0x01	; 1
    1f4a:	2f ef       	ldi	r18, 0xFF	; 255
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	5f e7       	ldi	r21, 0x7F	; 127
    1f52:	c7 01       	movw	r24, r14
    1f54:	b6 01       	movw	r22, r12
    1f56:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__unordsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	59 f4       	brne	.+22     	; 0x1f74 <_ZN12CmdMessenger8printSciEdj+0xa0>
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	5f e7       	ldi	r21, 0x7F	; 127
    1f66:	c7 01       	movw	r24, r14
    1f68:	b6 01       	movw	r22, r12
    1f6a:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	0c f4       	brge	.+2      	; 0x1f74 <_ZN12CmdMessenger8printSciEdj+0xa0>
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	81 27       	eor	r24, r17
    1f78:	88 23       	and	r24, r24
    1f7a:	39 f0       	breq	.+14     	; 0x1f8a <_ZN12CmdMessenger8printSciEdj+0xb6>
	{
		Serial.print("INF");
    1f7c:	69 e0       	ldi	r22, 0x09	; 9
    1f7e:	71 e0       	ldi	r23, 0x01	; 1
    1f80:	84 e4       	ldi	r24, 0x44	; 68
    1f82:	97 e0       	ldi	r25, 0x07	; 7
    1f84:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN5Print5printEPKc>
		return;
    1f88:	7d c1       	rjmp	.+762    	; 0x2284 <_ZN12CmdMessenger8printSciEdj+0x3b0>
	}
	// handle Not a Number
	if (isnan(f))
    1f8a:	8d a9       	ldd	r24, Y+53	; 0x35
    1f8c:	9e a9       	ldd	r25, Y+54	; 0x36
    1f8e:	af a9       	ldd	r26, Y+55	; 0x37
    1f90:	b8 ad       	ldd	r27, Y+56	; 0x38
    1f92:	2d a9       	ldd	r18, Y+53	; 0x35
    1f94:	3e a9       	ldd	r19, Y+54	; 0x36
    1f96:	4f a9       	ldd	r20, Y+55	; 0x37
    1f98:	58 ad       	ldd	r21, Y+56	; 0x38
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__unordsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	39 f0       	breq	.+14     	; 0x1fb4 <_ZN12CmdMessenger8printSciEdj+0xe0>
	{
		Serial.print("NaN");
    1fa6:	6d e0       	ldi	r22, 0x0D	; 13
    1fa8:	71 e0       	ldi	r23, 0x01	; 1
    1faa:	84 e4       	ldi	r24, 0x44	; 68
    1fac:	97 e0       	ldi	r25, 0x07	; 7
    1fae:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN5Print5printEPKc>
		return;
    1fb2:	68 c1       	rjmp	.+720    	; 0x2284 <_ZN12CmdMessenger8printSciEdj+0x3b0>
	}

	// max digits
	if (digits > 6) digits = 6;
    1fb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb8:	07 97       	sbiw	r24, 0x07	; 7
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <_ZN12CmdMessenger8printSciEdj+0xf0>
    1fbc:	86 e0       	ldi	r24, 0x06	; 6
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9a af       	std	Y+58, r25	; 0x3a
    1fc2:	89 af       	std	Y+57, r24	; 0x39
	long multiplier = pow(10, digits);     // fix int => long
    1fc4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc8:	cc 01       	movw	r24, r24
    1fca:	a0 e0       	ldi	r26, 0x00	; 0
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 aa 23 	call	0x4754	; 0x4754 <__floatunsisf>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9c 01       	movw	r18, r24
    1fdc:	ad 01       	movw	r20, r26
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	91 e4       	ldi	r25, 0x41	; 65
    1fe6:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <pow>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__fixsfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8f 87       	std	Y+15, r24	; 0x0f
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	a9 8b       	std	Y+17, r26	; 0x11
    2000:	ba 8b       	std	Y+18, r27	; 0x12

	int exponent;
	if (abs(f) < 10.0) {
    2002:	8d a9       	ldd	r24, Y+53	; 0x35
    2004:	9e a9       	ldd	r25, Y+54	; 0x36
    2006:	af a9       	ldd	r26, Y+55	; 0x37
    2008:	b8 ad       	ldd	r27, Y+56	; 0x38
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	a9 01       	movw	r20, r18
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__gesf2>
    2018:	18 16       	cp	r1, r24
    201a:	8c f4       	brge	.+34     	; 0x203e <_ZN12CmdMessenger8printSciEdj+0x16a>
    201c:	8d a9       	ldd	r24, Y+53	; 0x35
    201e:	9e a9       	ldd	r25, Y+54	; 0x36
    2020:	af a9       	ldd	r26, Y+55	; 0x37
    2022:	b8 ad       	ldd	r27, Y+56	; 0x38
    2024:	11 e0       	ldi	r17, 0x01	; 1
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    2036:	88 23       	and	r24, r24
    2038:	94 f0       	brlt	.+36     	; 0x205e <_ZN12CmdMessenger8printSciEdj+0x18a>
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	10 c0       	rjmp	.+32     	; 0x205e <_ZN12CmdMessenger8printSciEdj+0x18a>
    203e:	8d a9       	ldd	r24, Y+53	; 0x35
    2040:	9e a9       	ldd	r25, Y+54	; 0x36
    2042:	af a9       	ldd	r26, Y+55	; 0x37
    2044:	b8 ad       	ldd	r27, Y+56	; 0x38
    2046:	11 e0       	ldi	r17, 0x01	; 1
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 ec       	ldi	r21, 0xC1	; 193
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <__gesf2>
    2058:	18 16       	cp	r1, r24
    205a:	0c f0       	brlt	.+2      	; 0x205e <_ZN12CmdMessenger8printSciEdj+0x18a>
    205c:	10 e0       	ldi	r17, 0x00	; 0
    205e:	11 23       	and	r17, r17
    2060:	19 f0       	breq	.+6      	; 0x2068 <_ZN12CmdMessenger8printSciEdj+0x194>
		exponent = 0;
    2062:	1a 82       	std	Y+2, r1	; 0x02
    2064:	19 82       	std	Y+1, r1	; 0x01
    2066:	12 c0       	rjmp	.+36     	; 0x208c <_ZN12CmdMessenger8printSciEdj+0x1b8>
	}
	else {
		exponent = int(log10(f));
    2068:	8d a9       	ldd	r24, Y+53	; 0x35
    206a:	9e a9       	ldd	r25, Y+54	; 0x36
    206c:	af a9       	ldd	r26, Y+55	; 0x37
    206e:	b8 ad       	ldd	r27, Y+56	; 0x38
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 60 24 	call	0x48c0	; 0x48c0 <log10>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__fixsfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	}
	float g = f / pow(10, exponent);
    208c:	cd a8       	ldd	r12, Y+53	; 0x35
    208e:	de a8       	ldd	r13, Y+54	; 0x36
    2090:	ef a8       	ldd	r14, Y+55	; 0x37
    2092:	f8 ac       	ldd	r15, Y+56	; 0x38
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	09 2e       	mov	r0, r25
    209a:	00 0c       	add	r0, r0
    209c:	aa 0b       	sbc	r26, r26
    209e:	bb 0b       	sbc	r27, r27
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 ac 23 	call	0x4758	; 0x4758 <__floatsisf>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9c 01       	movw	r18, r24
    20ae:	ad 01       	movw	r20, r26
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	91 e4       	ldi	r25, 0x41	; 65
    20b8:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <pow>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9c 01       	movw	r18, r24
    20c2:	ad 01       	movw	r20, r26
    20c4:	c7 01       	movw	r24, r14
    20c6:	b6 01       	movw	r22, r12
    20c8:	0e 94 11 23 	call	0x4622	; 0x4622 <__divsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	ad 83       	std	Y+5, r26	; 0x05
    20d6:	be 83       	std	Y+6, r27	; 0x06
	if ((g < 1.0) && (g != 0.0))
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	6b 81       	ldd	r22, Y+3	; 0x03
    20e2:	7c 81       	ldd	r23, Y+4	; 0x04
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	04 f5       	brge	.+64     	; 0x2130 <_ZN12CmdMessenger8printSciEdj+0x25c>
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	6b 81       	ldd	r22, Y+3	; 0x03
    20f8:	7c 81       	ldd	r23, Y+4	; 0x04
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    2102:	88 23       	and	r24, r24
    2104:	a9 f0       	breq	.+42     	; 0x2130 <_ZN12CmdMessenger8printSciEdj+0x25c>
	{
		g *= 10;
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	6b 81       	ldd	r22, Y+3	; 0x03
    2110:	7c 81       	ldd	r23, Y+4	; 0x04
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	ad 83       	std	Y+5, r26	; 0x05
    2124:	be 83       	std	Y+6, r27	; 0x06
		exponent--;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
	}

	long whole = long(g);                     // single digit
    2130:	6b 81       	ldd	r22, Y+3	; 0x03
    2132:	7c 81       	ldd	r23, Y+4	; 0x04
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__fixsfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8f 83       	std	Y+7, r24	; 0x07
    2142:	98 87       	std	Y+8, r25	; 0x08
    2144:	a9 87       	std	Y+9, r26	; 0x09
    2146:	ba 87       	std	Y+10, r27	; 0x0a
	long part = long((g - whole)*multiplier + 0.5);  // # digits
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	0e 94 ac 23 	call	0x4758	; 0x4758 <__floatsisf>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9c 01       	movw	r18, r24
    215a:	ad 01       	movw	r20, r26
    215c:	6b 81       	ldd	r22, Y+3	; 0x03
    215e:	7c 81       	ldd	r23, Y+4	; 0x04
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	0e 94 a8 22 	call	0x4550	; 0x4550 <__subsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	6c 01       	movw	r12, r24
    216e:	7d 01       	movw	r14, r26
    2170:	6f 85       	ldd	r22, Y+15	; 0x0f
    2172:	78 89       	ldd	r23, Y+16	; 0x10
    2174:	89 89       	ldd	r24, Y+17	; 0x11
    2176:	9a 89       	ldd	r25, Y+18	; 0x12
    2178:	0e 94 ac 23 	call	0x4758	; 0x4758 <__floatsisf>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 01       	movw	r18, r24
    2182:	ad 01       	movw	r20, r26
    2184:	c7 01       	movw	r24, r14
    2186:	b6 01       	movw	r22, r12
    2188:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__addsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__fixsfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8b 87       	std	Y+11, r24	; 0x0b
    21b2:	9c 87       	std	Y+12, r25	; 0x0c
    21b4:	ad 87       	std	Y+13, r26	; 0x0d
    21b6:	be 87       	std	Y+14, r27	; 0x0e
	// Check for rounding above .99:
	if (part == 100) {
    21b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    21bc:	ad 85       	ldd	r26, Y+13	; 0x0d
    21be:	be 85       	ldd	r27, Y+14	; 0x0e
    21c0:	84 36       	cpi	r24, 0x64	; 100
    21c2:	91 05       	cpc	r25, r1
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	79 f4       	brne	.+30     	; 0x21e8 <_ZN12CmdMessenger8printSciEdj+0x314>
		whole++;
    21ca:	8f 81       	ldd	r24, Y+7	; 0x07
    21cc:	98 85       	ldd	r25, Y+8	; 0x08
    21ce:	a9 85       	ldd	r26, Y+9	; 0x09
    21d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	a1 1d       	adc	r26, r1
    21d6:	b1 1d       	adc	r27, r1
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
		part = 0;
    21e0:	1b 86       	std	Y+11, r1	; 0x0b
    21e2:	1c 86       	std	Y+12, r1	; 0x0c
    21e4:	1d 86       	std	Y+13, r1	; 0x0d
    21e6:	1e 86       	std	Y+14, r1	; 0x0e
	}
	char format[16];
	sprintf(format, "%%ld.%%0%dldE%%+d", digits);
    21e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ea:	8f 93       	push	r24
    21ec:	89 ad       	ldd	r24, Y+57	; 0x39
    21ee:	8f 93       	push	r24
    21f0:	81 e1       	ldi	r24, 0x11	; 17
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	89 2f       	mov	r24, r25
    21f6:	8f 93       	push	r24
    21f8:	81 e1       	ldi	r24, 0x11	; 17
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	8f 93       	push	r24
    21fe:	ce 01       	movw	r24, r28
    2200:	43 96       	adiw	r24, 0x13	; 19
    2202:	29 2f       	mov	r18, r25
    2204:	2f 93       	push	r18
    2206:	8f 93       	push	r24
    2208:	0e 94 76 2f 	call	0x5eec	; 0x5eec <sprintf>
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
	char output[16];
	sprintf(output, format, whole, part, exponent);
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	8f 93       	push	r24
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	8f 93       	push	r24
    2220:	8e 85       	ldd	r24, Y+14	; 0x0e
    2222:	8f 93       	push	r24
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	8f 93       	push	r24
    2228:	8c 85       	ldd	r24, Y+12	; 0x0c
    222a:	8f 93       	push	r24
    222c:	8b 85       	ldd	r24, Y+11	; 0x0b
    222e:	8f 93       	push	r24
    2230:	8a 85       	ldd	r24, Y+10	; 0x0a
    2232:	8f 93       	push	r24
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	8f 93       	push	r24
    2238:	88 85       	ldd	r24, Y+8	; 0x08
    223a:	8f 93       	push	r24
    223c:	8f 81       	ldd	r24, Y+7	; 0x07
    223e:	8f 93       	push	r24
    2240:	ce 01       	movw	r24, r28
    2242:	43 96       	adiw	r24, 0x13	; 19
    2244:	29 2f       	mov	r18, r25
    2246:	2f 93       	push	r18
    2248:	8f 93       	push	r24
    224a:	ce 01       	movw	r24, r28
    224c:	83 96       	adiw	r24, 0x23	; 35
    224e:	29 2f       	mov	r18, r25
    2250:	2f 93       	push	r18
    2252:	8f 93       	push	r24
    2254:	0e 94 76 2f 	call	0x5eec	; 0x5eec <sprintf>
    2258:	8d b7       	in	r24, 0x3d	; 61
    225a:	9e b7       	in	r25, 0x3e	; 62
    225c:	0e 96       	adiw	r24, 0x0e	; 14
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
	comms->print(output);
    2268:	8b a9       	ldd	r24, Y+51	; 0x33
    226a:	9c a9       	ldd	r25, Y+52	; 0x34
    226c:	8f 5a       	subi	r24, 0xAF	; 175
    226e:	9d 4f       	sbci	r25, 0xFD	; 253
    2270:	fc 01       	movw	r30, r24
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	9c 01       	movw	r18, r24
    2278:	ce 01       	movw	r24, r28
    227a:	83 96       	adiw	r24, 0x23	; 35
    227c:	bc 01       	movw	r22, r24
    227e:	c9 01       	movw	r24, r18
    2280:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN5Print5printEPKc>
    2284:	ea 96       	adiw	r28, 0x3a	; 58
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	08 95       	ret

000022a0 <_ZNK4erom6Access4readEj>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    22a0:	a4 e0       	ldi	r26, 0x04	; 4
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e6 e5       	ldi	r30, 0x56	; 86
    22a6:	f1 e1       	ldi	r31, 0x11	; 17
    22a8:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	7c 83       	std	Y+4, r23	; 0x04
    22b2:	6b 83       	std	Y+3, r22	; 0x03
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	b9 01       	movw	r22, r18
    22be:	04 d0       	rcall	.+8      	; 0x22c8 <_ZNK4erom6Access9read_byteEj>
    22c0:	24 96       	adiw	r28, 0x04	; 4
    22c2:	e2 e0       	ldi	r30, 0x02	; 2
    22c4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000022c8 <_ZNK4erom6Access9read_byteEj>:
    22c8:	a4 e0       	ldi	r26, 0x04	; 4
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e6       	ldi	r30, 0x6A	; 106
    22ce:	f1 e1       	ldi	r31, 0x11	; 17
    22d0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	7c 83       	std	Y+4, r23	; 0x04
    22da:	6b 83       	std	Y+3, r22	; 0x03
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	9c 01       	movw	r18, r24
    22e2:	2f 5f       	subi	r18, 0xFF	; 255
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	b9 01       	movw	r22, r18
    22ec:	50 d0       	rcall	.+160    	; 0x238e <_ZNK4erom6Access8in_rangeEj>
    22ee:	88 23       	and	r24, r24
    22f0:	59 f0       	breq	.+22     	; 0x2308 <_ZNK4erom6Access9read_byteEj+0x40>
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	6b d0       	rcall	.+214    	; 0x23ce <_ZNK4erom6Access4baseEv>
    22f8:	9c 01       	movw	r18, r24
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	0e 94 18 32 	call	0x6430	; 0x6430 <eeprom_read_byte>
    2306:	01 c0       	rjmp	.+2      	; 0x230a <_ZNK4erom6Access9read_byteEj+0x42>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	24 96       	adiw	r28, 0x04	; 4
    230c:	e2 e0       	ldi	r30, 0x02	; 2
    230e:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002312 <_ZNK4erom6Access5writeEjh>:
    2312:	a5 e0       	ldi	r26, 0x05	; 5
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ef e8       	ldi	r30, 0x8F	; 143
    2318:	f1 e1       	ldi	r31, 0x11	; 17
    231a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	7c 83       	std	Y+4, r23	; 0x04
    2324:	6b 83       	std	Y+3, r22	; 0x03
    2326:	4d 83       	std	Y+5, r20	; 0x05
    2328:	2b 81       	ldd	r18, Y+3	; 0x03
    232a:	3c 81       	ldd	r19, Y+4	; 0x04
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	4d 81       	ldd	r20, Y+5	; 0x05
    2332:	b9 01       	movw	r22, r18
    2334:	04 d0       	rcall	.+8      	; 0x233e <_ZNK4erom6Access10write_byteEjh>
    2336:	25 96       	adiw	r28, 0x05	; 5
    2338:	e2 e0       	ldi	r30, 0x02	; 2
    233a:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000233e <_ZNK4erom6Access10write_byteEjh>:
    233e:	a5 e0       	ldi	r26, 0x05	; 5
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 ea       	ldi	r30, 0xA5	; 165
    2344:	f1 e1       	ldi	r31, 0x11	; 17
    2346:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	7c 83       	std	Y+4, r23	; 0x04
    2350:	6b 83       	std	Y+3, r22	; 0x03
    2352:	4d 83       	std	Y+5, r20	; 0x05
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	9c 01       	movw	r18, r24
    235a:	2f 5f       	subi	r18, 0xFF	; 255
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	b9 01       	movw	r22, r18
    2364:	14 d0       	rcall	.+40     	; 0x238e <_ZNK4erom6Access8in_rangeEj>
    2366:	88 23       	and	r24, r24
    2368:	69 f0       	breq	.+26     	; 0x2384 <_ZNK4erom6Access10write_byteEjh+0x46>
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	2f d0       	rcall	.+94     	; 0x23ce <_ZNK4erom6Access4baseEv>
    2370:	9c 01       	movw	r18, r24
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	6d 81       	ldd	r22, Y+5	; 0x05
    237c:	0e 94 29 32 	call	0x6452	; 0x6452 <eeprom_write_byte>
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <_ZNK4erom6Access10write_byteEjh+0x48>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	25 96       	adiw	r28, 0x05	; 5
    2388:	e2 e0       	ldi	r30, 0x02	; 2
    238a:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000238e <_ZNK4erom6Access8in_rangeEj>:
    238e:	a4 e0       	ldi	r26, 0x04	; 4
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ed ec       	ldi	r30, 0xCD	; 205
    2394:	f1 e1       	ldi	r31, 0x11	; 17
    2396:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	7c 83       	std	Y+4, r23	; 0x04
    23a0:	6b 83       	std	Y+3, r22	; 0x03
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	13 d0       	rcall	.+38     	; 0x23ce <_ZNK4erom6Access4baseEv>
    23a8:	9c 01       	movw	r18, r24
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	89 01       	movw	r16, r18
    23b0:	08 0f       	add	r16, r24
    23b2:	19 1f       	adc	r17, r25
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	1b d0       	rcall	.+54     	; 0x23f0 <_ZNK4erom6Access11memory_sizeEv>
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	08 17       	cp	r16, r24
    23be:	19 07       	cpc	r17, r25
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <_ZNK4erom6Access8in_rangeEj+0x36>
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	82 2f       	mov	r24, r18
    23c6:	24 96       	adiw	r28, 0x04	; 4
    23c8:	e4 e0       	ldi	r30, 0x04	; 4
    23ca:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

000023ce <_ZNK4erom6Access4baseEv>:
    23ce:	a2 e0       	ldi	r26, 0x02	; 2
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed ee       	ldi	r30, 0xED	; 237
    23d4:	f1 e1       	ldi	r31, 0x11	; 17
    23d6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	fc 01       	movw	r30, r24
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	22 96       	adiw	r28, 0x02	; 2
    23ea:	e2 e0       	ldi	r30, 0x02	; 2
    23ec:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000023f0 <_ZNK4erom6Access11memory_sizeEv>:
    23f0:	a2 e0       	ldi	r26, 0x02	; 2
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ee ef       	ldi	r30, 0xFE	; 254
    23f6:	f1 e1       	ldi	r31, 0x11	; 17
    23f8:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	fc 01       	movw	r30, r24
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	22 96       	adiw	r28, 0x02	; 2
    240c:	e2 e0       	ldi	r30, 0x02	; 2
    240e:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002412 <_ZN4erom6Access8instanceEv>:
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    241e:	81 eb       	ldi	r24, 0xB1	; 177
    2420:	92 e0       	ldi	r25, 0x02	; 2
    2422:	fc 01       	movw	r30, r24
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	51 f4       	brne	.+20     	; 0x243e <_ZN4erom6Access8instanceEv+0x2c>
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8b eb       	ldi	r24, 0xBB	; 187
    2430:	92 e0       	ldi	r25, 0x02	; 2
    2432:	d8 d0       	rcall	.+432    	; 0x25e4 <_ZN4erom6AccessC1Ej>
    2434:	81 eb       	ldi	r24, 0xB1	; 177
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	21 e0       	ldi	r18, 0x01	; 1
    243a:	fc 01       	movw	r30, r24
    243c:	20 83       	st	Z, r18
    243e:	8b eb       	ldi	r24, 0xBB	; 187
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	e2 e0       	ldi	r30, 0x02	; 2
    2444:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002448 <_ZN4erom7Storage14_advance_issueEj>:
    2448:	a4 e0       	ldi	r26, 0x04	; 4
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ea e2       	ldi	r30, 0x2A	; 42
    244e:	f2 e1       	ldi	r31, 0x12	; 18
    2450:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	7c 83       	std	Y+4, r23	; 0x04
    245a:	6b 83       	std	Y+3, r22	; 0x03
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	fc 01       	movw	r30, r24
    2462:	04 81       	ldd	r16, Z+4	; 0x04
    2464:	15 81       	ldd	r17, Z+5	; 0x05
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	ab d0       	rcall	.+342    	; 0x25c2 <_ZN4erom7Storage6accessEv>
    246c:	c1 df       	rcall	.-126    	; 0x23f0 <_ZNK4erom6Access11memory_sizeEv>
    246e:	08 17       	cp	r16, r24
    2470:	19 07       	cpc	r17, r25
    2472:	a0 f4       	brcc	.+40     	; 0x249c <_ZN4erom7Storage14_advance_issueEj+0x54>
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	fc 01       	movw	r30, r24
    247a:	24 81       	ldd	r18, Z+4	; 0x04
    247c:	35 81       	ldd	r19, Z+5	; 0x05
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	28 0f       	add	r18, r24
    2484:	39 1f       	adc	r19, r25
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	fc 01       	movw	r30, r24
    248c:	35 83       	std	Z+5, r19	; 0x05
    248e:	24 83       	std	Z+4, r18	; 0x04
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	fc 01       	movw	r30, r24
    2496:	84 81       	ldd	r24, Z+4	; 0x04
    2498:	95 81       	ldd	r25, Z+5	; 0x05
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <_ZN4erom7Storage14_advance_issueEj+0x5e>
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	fc 01       	movw	r30, r24
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
    24a4:	95 81       	ldd	r25, Z+5	; 0x05
    24a6:	24 96       	adiw	r28, 0x04	; 4
    24a8:	e4 e0       	ldi	r30, 0x04	; 4
    24aa:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

000024ae <_ZN4erom7Storage6OnLoadEv>:
    24ae:	a2 e0       	ldi	r26, 0x02	; 2
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	22 96       	adiw	r28, 0x02	; 2
    24c0:	e2 e0       	ldi	r30, 0x02	; 2
    24c2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000024c6 <_ZN4erom7Storage6OnSaveEv>:
    24c6:	a2 e0       	ldi	r26, 0x02	; 2
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e9 e6       	ldi	r30, 0x69	; 105
    24cc:	f2 e1       	ldi	r31, 0x12	; 18
    24ce:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	22 96       	adiw	r28, 0x02	; 2
    24d8:	e2 e0       	ldi	r30, 0x02	; 2
    24da:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000024de <_ZN4erom7Storage7OnClearEv>:
    24de:	a2 e0       	ldi	r26, 0x02	; 2
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e7       	ldi	r30, 0x75	; 117
    24e4:	f2 e1       	ldi	r31, 0x12	; 18
    24e6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	22 96       	adiw	r28, 0x02	; 2
    24f0:	e2 e0       	ldi	r30, 0x02	; 2
    24f2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000024f6 <_ZN4erom7StorageC1Ev>:
    24f6:	a2 e0       	ldi	r26, 0x02	; 2
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e1 e8       	ldi	r30, 0x81	; 129
    24fc:	f2 e1       	ldi	r31, 0x12	; 18
    24fe:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	2f e4       	ldi	r18, 0x4F	; 79
    250c:	31 e0       	ldi	r19, 0x01	; 1
    250e:	fc 01       	movw	r30, r24
    2510:	31 83       	std	Z+1, r19	; 0x01
    2512:	20 83       	st	Z, r18
    2514:	7e df       	rcall	.-260    	; 0x2412 <_ZN4erom6Access8instanceEv>
    2516:	9c 01       	movw	r18, r24
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	fc 01       	movw	r30, r24
    251e:	33 83       	std	Z+3, r19	; 0x03
    2520:	22 83       	std	Z+2, r18	; 0x02
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	fc 01       	movw	r30, r24
    2528:	15 82       	std	Z+5, r1	; 0x05
    252a:	14 82       	std	Z+4, r1	; 0x04
    252c:	22 96       	adiw	r28, 0x02	; 2
    252e:	e2 e0       	ldi	r30, 0x02	; 2
    2530:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002534 <_ZN4erom7StorageD1Ev>:
    2534:	a2 e0       	ldi	r26, 0x02	; 2
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e0 ea       	ldi	r30, 0xA0	; 160
    253a:	f2 e1       	ldi	r31, 0x12	; 18
    253c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	2f e4       	ldi	r18, 0x4F	; 79
    254a:	31 e0       	ldi	r19, 0x01	; 1
    254c:	fc 01       	movw	r30, r24
    254e:	31 83       	std	Z+1, r19	; 0x01
    2550:	20 83       	st	Z, r18
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	89 2b       	or	r24, r25
    2558:	21 f0       	breq	.+8      	; 0x2562 <_ZN4erom7StorageD1Ev+0x2e>
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZdlPv>
    2562:	22 96       	adiw	r28, 0x02	; 2
    2564:	e2 e0       	ldi	r30, 0x02	; 2
    2566:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000256a <_ZN4erom7StorageD0Ev>:
    256a:	a2 e0       	ldi	r26, 0x02	; 2
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	eb eb       	ldi	r30, 0xBB	; 187
    2570:	f2 e1       	ldi	r31, 0x12	; 18
    2572:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	da df       	rcall	.-76     	; 0x2534 <_ZN4erom7StorageD1Ev>
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZdlPv>
    2588:	22 96       	adiw	r28, 0x02	; 2
    258a:	e2 e0       	ldi	r30, 0x02	; 2
    258c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002590 <_ZN4erom7Storage4saveEv>:
    2590:	a2 e0       	ldi	r26, 0x02	; 2
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	ee ec       	ldi	r30, 0xCE	; 206
    2596:	f2 e1       	ldi	r31, 0x12	; 18
    2598:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	fc 01       	movw	r30, r24
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	02 96       	adiw	r24, 0x02	; 2
    25ac:	fc 01       	movw	r30, r24
    25ae:	20 81       	ld	r18, Z
    25b0:	31 81       	ldd	r19, Z+1	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	f9 01       	movw	r30, r18
    25b8:	09 95       	icall
    25ba:	22 96       	adiw	r28, 0x02	; 2
    25bc:	e2 e0       	ldi	r30, 0x02	; 2
    25be:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000025c2 <_ZN4erom7Storage6accessEv>:
    25c2:	a2 e0       	ldi	r26, 0x02	; 2
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e7 ee       	ldi	r30, 0xE7	; 231
    25c8:	f2 e1       	ldi	r31, 0x12	; 18
    25ca:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	fc 01       	movw	r30, r24
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	22 96       	adiw	r28, 0x02	; 2
    25de:	e2 e0       	ldi	r30, 0x02	; 2
    25e0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000025e4 <_ZN4erom6AccessC1Ej>:
    25e4:	a4 e0       	ldi	r26, 0x04	; 4
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 ef       	ldi	r30, 0xF8	; 248
    25ea:	f2 e1       	ldi	r31, 0x12	; 18
    25ec:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	7c 83       	std	Y+4, r23	; 0x04
    25f6:	6b 83       	std	Y+3, r22	; 0x03
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	2b 81       	ldd	r18, Y+3	; 0x03
    25fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2600:	fc 01       	movw	r30, r24
    2602:	31 83       	std	Z+1, r19	; 0x01
    2604:	20 83       	st	Z, r18
    2606:	0a d0       	rcall	.+20     	; 0x261c <_ZN4erom6Access18device_memory_sizeEv>
    2608:	9c 01       	movw	r18, r24
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	fc 01       	movw	r30, r24
    2610:	33 83       	std	Z+3, r19	; 0x03
    2612:	22 83       	std	Z+2, r18	; 0x02
    2614:	24 96       	adiw	r28, 0x04	; 4
    2616:	e2 e0       	ldi	r30, 0x02	; 2
    2618:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000261c <_ZN4erom6Access18device_memory_sizeEv>:
    261c:	a0 e0       	ldi	r26, 0x00	; 0
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e4 e1       	ldi	r30, 0x14	; 20
    2622:	f3 e1       	ldi	r31, 0x13	; 19
    2624:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	94 e0       	ldi	r25, 0x04	; 4
    262c:	e2 e0       	ldi	r30, 0x02	; 2
    262e:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002632 <_ZNK4erom6Access10read_blockIdEEbjRT_>:
    2632:	a6 e0       	ldi	r26, 0x06	; 6
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	ef e1       	ldi	r30, 0x1F	; 31
    2638:	f3 e1       	ldi	r31, 0x13	; 19
    263a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	7c 83       	std	Y+4, r23	; 0x04
    2644:	6b 83       	std	Y+3, r22	; 0x03
    2646:	5e 83       	std	Y+6, r21	; 0x06
    2648:	4d 83       	std	Y+5, r20	; 0x05
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	9c 01       	movw	r18, r24
    2650:	2c 5f       	subi	r18, 0xFC	; 252
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	b9 01       	movw	r22, r18
    265a:	99 de       	rcall	.-718    	; 0x238e <_ZNK4erom6Access8in_rangeEj>
    265c:	98 2f       	mov	r25, r24
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	89 27       	eor	r24, r25
    2662:	88 23       	and	r24, r24
    2664:	11 f0       	breq	.+4      	; 0x266a <_ZNK4erom6Access10read_blockIdEEbjRT_+0x38>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	09 c0       	rjmp	.+18     	; 0x267c <_ZNK4erom6Access10read_blockIdEEbjRT_+0x4a>
    266a:	4d 81       	ldd	r20, Y+5	; 0x05
    266c:	5e 81       	ldd	r21, Y+6	; 0x06
    266e:	2b 81       	ldd	r18, Y+3	; 0x03
    2670:	3c 81       	ldd	r19, Y+4	; 0x04
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	b9 01       	movw	r22, r18
    2678:	05 d0       	rcall	.+10     	; 0x2684 <_ZNK4erom6Access11_read_blockIdEEvjRT_>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	26 96       	adiw	r28, 0x06	; 6
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002684 <_ZNK4erom6Access11_read_blockIdEEvjRT_>:
    2684:	a6 e0       	ldi	r26, 0x06	; 6
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e8 e4       	ldi	r30, 0x48	; 72
    268a:	f3 e1       	ldi	r31, 0x13	; 19
    268c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	7c 83       	std	Y+4, r23	; 0x04
    2696:	6b 83       	std	Y+3, r22	; 0x03
    2698:	5e 83       	std	Y+6, r21	; 0x06
    269a:	4d 83       	std	Y+5, r20	; 0x05
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	96 de       	rcall	.-724    	; 0x23ce <_ZNK4erom6Access4baseEv>
    26a2:	9c 01       	movw	r18, r24
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	9c 01       	movw	r18, r24
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	44 e0       	ldi	r20, 0x04	; 4
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	b9 01       	movw	r22, r18
    26b8:	0e 94 08 32 	call	0x6410	; 0x6410 <eeprom_read_block>
    26bc:	26 96       	adiw	r28, 0x06	; 6
    26be:	e2 e0       	ldi	r30, 0x02	; 2
    26c0:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000026c4 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    26c4:	a4 e0       	ldi	r26, 0x04	; 4
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e8 e6       	ldi	r30, 0x68	; 104
    26ca:	f3 e1       	ldi	r31, 0x13	; 19
    26cc:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
    26d4:	7c 83       	std	Y+4, r23	; 0x04
    26d6:	6b 83       	std	Y+3, r22	; 0x03
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	49 f4       	brne	.+18     	; 0x26f2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	29 f4       	brne	.+10     	; 0x26f2 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    26e8:	94 de       	rcall	.-728    	; 0x2412 <_ZN4erom6Access8instanceEv>
    26ea:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <_ZN4erom6accessE+0x1>
    26ee:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    26f2:	24 96       	adiw	r28, 0x04	; 4
    26f4:	e2 e0       	ldi	r30, 0x02	; 2
    26f6:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000026fa <_GLOBAL__sub_I__ZN4erom6accessE>:
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e3 e8       	ldi	r30, 0x83	; 131
    2700:	f3 e1       	ldi	r31, 0x13	; 19
    2702:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2706:	6f ef       	ldi	r22, 0xFF	; 255
    2708:	7f ef       	ldi	r23, 0xFF	; 255
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	da df       	rcall	.-76     	; 0x26c4 <_Z41__static_initialization_and_destruction_0ii>
    2710:	e2 e0       	ldi	r30, 0x02	; 2
    2712:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002716 <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e1 e9       	ldi	r30, 0x91	; 145
    271c:	f3 e1       	ldi	r31, 0x13	; 19
    271e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2722:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	e2 e0       	ldi	r30, 0x02	; 2
    2730:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002734 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    2734:	a8 e0       	ldi	r26, 0x08	; 8
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e0 ea       	ldi	r30, 0xA0	; 160
    273a:	f3 e1       	ldi	r31, 0x13	; 19
    273c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	8f 83       	std	Y+7, r24	; 0x07
    2744:	8f 81       	ldd	r24, Y+7	; 0x07
    2746:	98 85       	ldd	r25, Y+8	; 0x08
    2748:	2d e5       	ldi	r18, 0x5D	; 93
    274a:	31 e0       	ldi	r19, 0x01	; 1
    274c:	fc 01       	movw	r30, r24
    274e:	31 83       	std	Z+1, r19	; 0x01
    2750:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    2752:	e1 df       	rcall	.-62     	; 0x2716 <_ZL7elapsedv>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8b 83       	std	Y+3, r24	; 0x03
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	ad 83       	std	Y+5, r26	; 0x05
    275e:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    2760:	1a 82       	std	Y+2, r1	; 0x02
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	3d c0       	rjmp	.+122    	; 0x27e0 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    2766:	2f 81       	ldd	r18, Y+7	; 0x07
    2768:	38 85       	ldd	r19, Y+8	; 0x08
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	82 0f       	add	r24, r18
    2770:	93 1f       	adc	r25, r19
    2772:	82 57       	subi	r24, 0x72	; 114
    2774:	9f 4f       	sbci	r25, 0xFF	; 255
    2776:	fc 01       	movw	r30, r24
    2778:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    277a:	2f 81       	ldd	r18, Y+7	; 0x07
    277c:	38 85       	ldd	r19, Y+8	; 0x08
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	45 96       	adiw	r24, 0x15	; 21
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	82 0f       	add	r24, r18
    278a:	93 1f       	adc	r25, r19
    278c:	fc 01       	movw	r30, r24
    278e:	11 82       	std	Z+1, r1	; 0x01
    2790:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    2792:	2f 81       	ldd	r18, Y+7	; 0x07
    2794:	38 85       	ldd	r19, Y+8	; 0x08
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	9c 01       	movw	r18, r24
    27a8:	2e 5f       	subi	r18, 0xFE	; 254
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	ad 81       	ldd	r26, Y+5	; 0x05
    27b2:	be 81       	ldd	r27, Y+6	; 0x06
    27b4:	f9 01       	movw	r30, r18
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    27be:	2f 81       	ldd	r18, Y+7	; 0x07
    27c0:	38 85       	ldd	r19, Y+8	; 0x08
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	cd 96       	adiw	r24, 0x3d	; 61
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	fc 01       	movw	r30, r24
    27d2:	11 82       	std	Z+1, r1	; 0x01
    27d4:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	0a 97       	sbiw	r24, 0x0a	; 10
    27e6:	0c f4       	brge	.+2      	; 0x27ea <_ZN11SimpleTimerC1Ev+0xb6>
    27e8:	be cf       	rjmp	.-132    	; 0x2766 <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	98 85       	ldd	r25, Y+8	; 0x08
    27ee:	84 55       	subi	r24, 0x54	; 84
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	fc 01       	movw	r30, r24
    27f4:	11 82       	std	Z+1, r1	; 0x01
    27f6:	10 82       	st	Z, r1
}
    27f8:	28 96       	adiw	r28, 0x08	; 8
    27fa:	e2 e0       	ldi	r30, 0x02	; 2
    27fc:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002800 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    2800:	a8 e0       	ldi	r26, 0x08	; 8
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e6 e0       	ldi	r30, 0x06	; 6
    2806:	f4 e1       	ldi	r31, 0x14	; 20
    2808:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__prologue_saves__+0x18>
    280c:	98 87       	std	Y+8, r25	; 0x08
    280e:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    2810:	82 df       	rcall	.-252    	; 0x2716 <_ZL7elapsedv>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8b 83       	std	Y+3, r24	; 0x03
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	ad 83       	std	Y+5, r26	; 0x05
    281c:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    281e:	1a 82       	std	Y+2, r1	; 0x02
    2820:	19 82       	std	Y+1, r1	; 0x01
    2822:	25 c1       	rjmp	.+586    	; 0x2a6e <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    2824:	2f 81       	ldd	r18, Y+7	; 0x07
    2826:	38 85       	ldd	r19, Y+8	; 0x08
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	84 5b       	subi	r24, 0xB4	; 180
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	82 0f       	add	r24, r18
    2836:	93 1f       	adc	r25, r19
    2838:	fc 01       	movw	r30, r24
    283a:	11 82       	std	Z+1, r1	; 0x01
    283c:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    283e:	2f 81       	ldd	r18, Y+7	; 0x07
    2840:	38 85       	ldd	r19, Y+8	; 0x08
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	45 96       	adiw	r24, 0x15	; 21
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	82 0f       	add	r24, r18
    284e:	93 1f       	adc	r25, r19
    2850:	fc 01       	movw	r30, r24
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	89 2b       	or	r24, r25
    2858:	09 f4       	brne	.+2      	; 0x285c <_ZN11SimpleTimer3runEv+0x5c>
    285a:	04 c1       	rjmp	.+520    	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    285c:	2f 81       	ldd	r18, Y+7	; 0x07
    285e:	38 85       	ldd	r19, Y+8	; 0x08
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	82 0f       	add	r24, r18
    286e:	93 1f       	adc	r25, r19
    2870:	02 96       	adiw	r24, 0x02	; 2
    2872:	fc 01       	movw	r30, r24
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	a2 81       	ldd	r26, Z+2	; 0x02
    287a:	b3 81       	ldd	r27, Z+3	; 0x03
    287c:	2b 81       	ldd	r18, Y+3	; 0x03
    287e:	3c 81       	ldd	r19, Y+4	; 0x04
    2880:	4d 81       	ldd	r20, Y+5	; 0x05
    2882:	5e 81       	ldd	r21, Y+6	; 0x06
    2884:	79 01       	movw	r14, r18
    2886:	8a 01       	movw	r16, r20
    2888:	e8 1a       	sub	r14, r24
    288a:	f9 0a       	sbc	r15, r25
    288c:	0a 0b       	sbc	r16, r26
    288e:	1b 0b       	sbc	r17, r27
    2890:	d8 01       	movw	r26, r16
    2892:	c7 01       	movw	r24, r14
    2894:	4f 81       	ldd	r20, Y+7	; 0x07
    2896:	58 85       	ldd	r21, Y+8	; 0x08
    2898:	29 81       	ldd	r18, Y+1	; 0x01
    289a:	3a 81       	ldd	r19, Y+2	; 0x02
    289c:	22 0f       	add	r18, r18
    289e:	33 1f       	adc	r19, r19
    28a0:	22 0f       	add	r18, r18
    28a2:	33 1f       	adc	r19, r19
    28a4:	24 0f       	add	r18, r20
    28a6:	35 1f       	adc	r19, r21
    28a8:	22 5c       	subi	r18, 0xC2	; 194
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	f9 01       	movw	r30, r18
    28ae:	20 81       	ld	r18, Z
    28b0:	31 81       	ldd	r19, Z+1	; 0x01
    28b2:	42 81       	ldd	r20, Z+2	; 0x02
    28b4:	53 81       	ldd	r21, Z+3	; 0x03
    28b6:	82 17       	cp	r24, r18
    28b8:	93 07       	cpc	r25, r19
    28ba:	a4 07       	cpc	r26, r20
    28bc:	b5 07       	cpc	r27, r21
    28be:	08 f4       	brcc	.+2      	; 0x28c2 <_ZN11SimpleTimer3runEv+0xc2>
    28c0:	d1 c0       	rjmp	.+418    	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    28c2:	2f 81       	ldd	r18, Y+7	; 0x07
    28c4:	38 85       	ldd	r19, Y+8	; 0x08
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	82 0f       	add	r24, r18
    28d4:	93 1f       	adc	r25, r19
    28d6:	02 96       	adiw	r24, 0x02	; 2
    28d8:	fc 01       	movw	r30, r24
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	a2 81       	ldd	r26, Z+2	; 0x02
    28e0:	b3 81       	ldd	r27, Z+3	; 0x03
    28e2:	4f 81       	ldd	r20, Y+7	; 0x07
    28e4:	58 85       	ldd	r21, Y+8	; 0x08
    28e6:	29 81       	ldd	r18, Y+1	; 0x01
    28e8:	3a 81       	ldd	r19, Y+2	; 0x02
    28ea:	22 0f       	add	r18, r18
    28ec:	33 1f       	adc	r19, r19
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	24 0f       	add	r18, r20
    28f4:	35 1f       	adc	r19, r21
    28f6:	22 5c       	subi	r18, 0xC2	; 194
    28f8:	3f 4f       	sbci	r19, 0xFF	; 255
    28fa:	f9 01       	movw	r30, r18
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	42 81       	ldd	r20, Z+2	; 0x02
    2902:	53 81       	ldd	r21, Z+3	; 0x03
    2904:	82 0f       	add	r24, r18
    2906:	93 1f       	adc	r25, r19
    2908:	a4 1f       	adc	r26, r20
    290a:	b5 1f       	adc	r27, r21
    290c:	4f 81       	ldd	r20, Y+7	; 0x07
    290e:	58 85       	ldd	r21, Y+8	; 0x08
    2910:	29 81       	ldd	r18, Y+1	; 0x01
    2912:	3a 81       	ldd	r19, Y+2	; 0x02
    2914:	22 0f       	add	r18, r18
    2916:	33 1f       	adc	r19, r19
    2918:	22 0f       	add	r18, r18
    291a:	33 1f       	adc	r19, r19
    291c:	24 0f       	add	r18, r20
    291e:	35 1f       	adc	r19, r21
    2920:	2e 5f       	subi	r18, 0xFE	; 254
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	f9 01       	movw	r30, r18
    2926:	80 83       	st	Z, r24
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	a2 83       	std	Z+2, r26	; 0x02
    292c:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    292e:	2f 81       	ldd	r18, Y+7	; 0x07
    2930:	38 85       	ldd	r19, Y+8	; 0x08
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	82 57       	subi	r24, 0x72	; 114
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	fc 01       	movw	r30, r24
    2940:	80 81       	ld	r24, Z
    2942:	88 23       	and	r24, r24
    2944:	09 f4       	brne	.+2      	; 0x2948 <_ZN11SimpleTimer3runEv+0x148>
    2946:	8e c0       	rjmp	.+284    	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    2948:	2f 81       	ldd	r18, Y+7	; 0x07
    294a:	38 85       	ldd	r19, Y+8	; 0x08
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	c3 96       	adiw	r24, 0x33	; 51
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	fc 01       	movw	r30, r24
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	89 2b       	or	r24, r25
    2962:	81 f4       	brne	.+32     	; 0x2984 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    2964:	2f 81       	ldd	r18, Y+7	; 0x07
    2966:	38 85       	ldd	r19, Y+8	; 0x08
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	84 5b       	subi	r24, 0xB4	; 180
    296e:	9f 4f       	sbci	r25, 0xFF	; 255
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	21 e0       	ldi	r18, 0x01	; 1
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	fc 01       	movw	r30, r24
    297e:	31 83       	std	Z+1, r19	; 0x01
    2980:	20 83       	st	Z, r18
    2982:	70 c0       	rjmp	.+224    	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    2984:	2f 81       	ldd	r18, Y+7	; 0x07
    2986:	38 85       	ldd	r19, Y+8	; 0x08
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	cd 96       	adiw	r24, 0x3d	; 61
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	82 0f       	add	r24, r18
    2994:	93 1f       	adc	r25, r19
    2996:	fc 01       	movw	r30, r24
    2998:	20 81       	ld	r18, Z
    299a:	31 81       	ldd	r19, Z+1	; 0x01
    299c:	4f 81       	ldd	r20, Y+7	; 0x07
    299e:	58 85       	ldd	r21, Y+8	; 0x08
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	c3 96       	adiw	r24, 0x33	; 51
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	84 0f       	add	r24, r20
    29ac:	95 1f       	adc	r25, r21
    29ae:	fc 01       	movw	r30, r24
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	28 17       	cp	r18, r24
    29b6:	39 07       	cpc	r19, r25
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <_ZN11SimpleTimer3runEv+0x1bc>
    29ba:	54 c0       	rjmp	.+168    	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    29bc:	2f 81       	ldd	r18, Y+7	; 0x07
    29be:	38 85       	ldd	r19, Y+8	; 0x08
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	84 5b       	subi	r24, 0xB4	; 180
    29c6:	9f 4f       	sbci	r25, 0xFF	; 255
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	82 0f       	add	r24, r18
    29ce:	93 1f       	adc	r25, r19
    29d0:	21 e0       	ldi	r18, 0x01	; 1
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	fc 01       	movw	r30, r24
    29d6:	31 83       	std	Z+1, r19	; 0x01
    29d8:	20 83       	st	Z, r18
                        numRuns[i]++;
    29da:	2f 81       	ldd	r18, Y+7	; 0x07
    29dc:	38 85       	ldd	r19, Y+8	; 0x08
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	cd 96       	adiw	r24, 0x3d	; 61
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	82 0f       	add	r24, r18
    29ea:	93 1f       	adc	r25, r19
    29ec:	fc 01       	movw	r30, r24
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	9c 01       	movw	r18, r24
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	4f 81       	ldd	r20, Y+7	; 0x07
    29fa:	58 85       	ldd	r21, Y+8	; 0x08
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	cd 96       	adiw	r24, 0x3d	; 61
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	84 0f       	add	r24, r20
    2a08:	95 1f       	adc	r25, r21
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	31 83       	std	Z+1, r19	; 0x01
    2a0e:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    2a10:	2f 81       	ldd	r18, Y+7	; 0x07
    2a12:	38 85       	ldd	r19, Y+8	; 0x08
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	cd 96       	adiw	r24, 0x3d	; 61
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	82 0f       	add	r24, r18
    2a20:	93 1f       	adc	r25, r19
    2a22:	fc 01       	movw	r30, r24
    2a24:	20 81       	ld	r18, Z
    2a26:	31 81       	ldd	r19, Z+1	; 0x01
    2a28:	4f 81       	ldd	r20, Y+7	; 0x07
    2a2a:	58 85       	ldd	r21, Y+8	; 0x08
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	c3 96       	adiw	r24, 0x33	; 51
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	84 0f       	add	r24, r20
    2a38:	95 1f       	adc	r25, r21
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	28 17       	cp	r18, r24
    2a42:	39 07       	cpc	r19, r25
    2a44:	7c f0       	brlt	.+30     	; 0x2a64 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    2a46:	2f 81       	ldd	r18, Y+7	; 0x07
    2a48:	38 85       	ldd	r19, Y+8	; 0x08
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	84 5b       	subi	r24, 0xB4	; 180
    2a50:	9f 4f       	sbci	r25, 0xFF	; 255
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	82 0f       	add	r24, r18
    2a58:	93 1f       	adc	r25, r19
    2a5a:	22 e0       	ldi	r18, 0x02	; 2
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	fc 01       	movw	r30, r24
    2a60:	31 83       	std	Z+1, r19	; 0x01
    2a62:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	0a 97       	sbiw	r24, 0x0a	; 10
    2a74:	0c f4       	brge	.+2      	; 0x2a78 <_ZN11SimpleTimer3runEv+0x278>
    2a76:	d6 ce       	rjmp	.-596    	; 0x2824 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    2a78:	1a 82       	std	Y+2, r1	; 0x02
    2a7a:	19 82       	std	Y+1, r1	; 0x01
    2a7c:	46 c0       	rjmp	.+140    	; 0x2b0a <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    2a7e:	2f 81       	ldd	r18, Y+7	; 0x07
    2a80:	38 85       	ldd	r19, Y+8	; 0x08
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	84 5b       	subi	r24, 0xB4	; 180
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
    2a92:	fc 01       	movw	r30, r24
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <_ZN11SimpleTimer3runEv+0x2a4>
    2a9e:	02 97       	sbiw	r24, 0x02	; 2
    2aa0:	81 f0       	breq	.+32     	; 0x2ac2 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    2aa2:	2e c0       	rjmp	.+92     	; 0x2b00 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    2aa4:	2f 81       	ldd	r18, Y+7	; 0x07
    2aa6:	38 85       	ldd	r19, Y+8	; 0x08
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	45 96       	adiw	r24, 0x15	; 21
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	82 0f       	add	r24, r18
    2ab4:	93 1f       	adc	r25, r19
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	fc 01       	movw	r30, r24
    2abe:	09 95       	icall
                break;
    2ac0:	1f c0       	rjmp	.+62     	; 0x2b00 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    2ac2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ac4:	38 85       	ldd	r19, Y+8	; 0x08
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	45 96       	adiw	r24, 0x15	; 21
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	82 0f       	add	r24, r18
    2ad2:	93 1f       	adc	r25, r19
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	fc 01       	movw	r30, r24
    2adc:	09 95       	icall
                deleteTimer(i);
    2ade:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae0:	98 85       	ldd	r25, Y+8	; 0x08
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	08 96       	adiw	r24, 0x08	; 8
    2aea:	fc 01       	movw	r30, r24
    2aec:	20 81       	ld	r18, Z
    2aee:	31 81       	ldd	r19, Z+1	; 0x01
    2af0:	49 81       	ldd	r20, Y+1	; 0x01
    2af2:	5a 81       	ldd	r21, Y+2	; 0x02
    2af4:	8f 81       	ldd	r24, Y+7	; 0x07
    2af6:	98 85       	ldd	r25, Y+8	; 0x08
    2af8:	ba 01       	movw	r22, r20
    2afa:	f9 01       	movw	r30, r18
    2afc:	09 95       	icall
                break;
    2afe:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	0a 97       	sbiw	r24, 0x0a	; 10
    2b10:	0c f4       	brge	.+2      	; 0x2b14 <_ZN11SimpleTimer3runEv+0x314>
    2b12:	b5 cf       	rjmp	.-150    	; 0x2a7e <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    2b14:	28 96       	adiw	r28, 0x08	; 8
    2b16:	e6 e0       	ldi	r30, 0x06	; 6
    2b18:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__epilogue_restores__+0x18>

00002b1c <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    2b1c:	a4 e0       	ldi	r26, 0x04	; 4
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e4 e9       	ldi	r30, 0x94	; 148
    2b22:	f5 e1       	ldi	r31, 0x15	; 21
    2b24:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	84 55       	subi	r24, 0x54	; 84
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	fc 01       	movw	r30, r24
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	0a 97       	sbiw	r24, 0x0a	; 10
    2b3c:	1c f0       	brlt	.+6      	; 0x2b44 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    2b3e:	8f ef       	ldi	r24, 0xFF	; 255
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	1f c0       	rjmp	.+62     	; 0x2b82 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    2b44:	1a 82       	std	Y+2, r1	; 0x02
    2b46:	19 82       	std	Y+1, r1	; 0x01
    2b48:	16 c0       	rjmp	.+44     	; 0x2b76 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	45 96       	adiw	r24, 0x15	; 21
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	82 0f       	add	r24, r18
    2b5a:	93 1f       	adc	r25, r19
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	89 2b       	or	r24, r25
    2b64:	19 f4       	brne	.+6      	; 0x2b6c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	0b c0       	rjmp	.+22     	; 0x2b82 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	0a 97       	sbiw	r24, 0x0a	; 10
    2b7c:	34 f3       	brlt	.-52     	; 0x2b4a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	9f ef       	ldi	r25, 0xFF	; 255
}
    2b82:	24 96       	adiw	r28, 0x04	; 4
    2b84:	e2 e0       	ldi	r30, 0x02	; 2
    2b86:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002b8a <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    2b8a:	ac e0       	ldi	r26, 0x0C	; 12
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb ec       	ldi	r30, 0xCB	; 203
    2b90:	f5 e1       	ldi	r31, 0x15	; 21
    2b92:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	8b 83       	std	Y+3, r24	; 0x03
    2b9a:	4d 83       	std	Y+5, r20	; 0x05
    2b9c:	5e 83       	std	Y+6, r21	; 0x06
    2b9e:	6f 83       	std	Y+7, r22	; 0x07
    2ba0:	78 87       	std	Y+8, r23	; 0x08
    2ba2:	3a 87       	std	Y+10, r19	; 0x0a
    2ba4:	29 87       	std	Y+9, r18	; 0x09
    2ba6:	1c 87       	std	Y+12, r17	; 0x0c
    2ba8:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	b6 df       	rcall	.-148    	; 0x2b1c <_ZN11SimpleTimer17findFirstFreeSlotEv>
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	99 23       	and	r25, r25
    2bba:	1c f4       	brge	.+6      	; 0x2bc2 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    2bc0:	6b c0       	rjmp	.+214    	; 0x2c98 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	89 2b       	or	r24, r25
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    2bca:	8f ef       	ldi	r24, 0xFF	; 255
    2bcc:	9f ef       	ldi	r25, 0xFF	; 255
    2bce:	64 c0       	rjmp	.+200    	; 0x2c98 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    2bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	82 0f       	add	r24, r18
    2be2:	93 1f       	adc	r25, r19
    2be4:	9c 01       	movw	r18, r24
    2be6:	22 5c       	subi	r18, 0xC2	; 194
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	af 81       	ldd	r26, Y+7	; 0x07
    2bf0:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	80 83       	st	Z, r24
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	a2 83       	std	Z+2, r26	; 0x02
    2bfa:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    2bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	45 96       	adiw	r24, 0x15	; 21
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	82 0f       	add	r24, r18
    2c0c:	93 1f       	adc	r25, r19
    2c0e:	29 85       	ldd	r18, Y+9	; 0x09
    2c10:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c12:	fc 01       	movw	r30, r24
    2c14:	31 83       	std	Z+1, r19	; 0x01
    2c16:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    2c18:	2b 81       	ldd	r18, Y+3	; 0x03
    2c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	c3 96       	adiw	r24, 0x33	; 51
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	82 0f       	add	r24, r18
    2c28:	93 1f       	adc	r25, r19
    2c2a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c2e:	fc 01       	movw	r30, r24
    2c30:	31 83       	std	Z+1, r19	; 0x01
    2c32:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    2c34:	2b 81       	ldd	r18, Y+3	; 0x03
    2c36:	3c 81       	ldd	r19, Y+4	; 0x04
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	82 0f       	add	r24, r18
    2c3e:	93 1f       	adc	r25, r19
    2c40:	82 57       	subi	r24, 0x72	; 114
    2c42:	9f 4f       	sbci	r25, 0xFF	; 255
    2c44:	21 e0       	ldi	r18, 0x01	; 1
    2c46:	fc 01       	movw	r30, r24
    2c48:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    2c4a:	65 dd       	rcall	.-1334   	; 0x2716 <_ZL7elapsedv>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	4b 81       	ldd	r20, Y+3	; 0x03
    2c52:	5c 81       	ldd	r21, Y+4	; 0x04
    2c54:	29 81       	ldd	r18, Y+1	; 0x01
    2c56:	3a 81       	ldd	r19, Y+2	; 0x02
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	24 0f       	add	r18, r20
    2c62:	35 1f       	adc	r19, r21
    2c64:	2e 5f       	subi	r18, 0xFE	; 254
    2c66:	3f 4f       	sbci	r19, 0xFF	; 255
    2c68:	f9 01       	movw	r30, r18
    2c6a:	80 83       	st	Z, r24
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	a2 83       	std	Z+2, r26	; 0x02
    2c70:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	9c 81       	ldd	r25, Y+4	; 0x04
    2c76:	84 55       	subi	r24, 0x54	; 84
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	9c 01       	movw	r18, r24
    2c82:	2f 5f       	subi	r18, 0xFF	; 255
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	84 55       	subi	r24, 0x54	; 84
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	fc 01       	movw	r30, r24
    2c90:	31 83       	std	Z+1, r19	; 0x01
    2c92:	20 83       	st	Z, r18

    return freeTimer;
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c98:	2c 96       	adiw	r28, 0x0c	; 12
    2c9a:	e4 e0       	ldi	r30, 0x04	; 4
    2c9c:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00002ca0 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    2ca0:	a8 e0       	ldi	r26, 0x08	; 8
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e6 e5       	ldi	r30, 0x56	; 86
    2ca6:	f6 e1       	ldi	r31, 0x16	; 22
    2ca8:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__prologue_saves__+0x18>
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	4b 83       	std	Y+3, r20	; 0x03
    2cb2:	5c 83       	std	Y+4, r21	; 0x04
    2cb4:	6d 83       	std	Y+5, r22	; 0x05
    2cb6:	7e 83       	std	Y+6, r23	; 0x06
    2cb8:	38 87       	std	Y+8, r19	; 0x08
    2cba:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	8d 91       	ld	r24, X+
    2cc4:	9c 91       	ld	r25, X
    2cc6:	06 96       	adiw	r24, 0x06	; 6
    2cc8:	dc 01       	movw	r26, r24
    2cca:	ed 91       	ld	r30, X+
    2ccc:	fc 91       	ld	r31, X
    2cce:	2f 81       	ldd	r18, Y+7	; 0x07
    2cd0:	38 85       	ldd	r19, Y+8	; 0x08
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	ad 81       	ldd	r26, Y+5	; 0x05
    2cd8:	be 81       	ldd	r27, Y+6	; 0x06
    2cda:	e9 80       	ldd	r14, Y+1	; 0x01
    2cdc:	fa 80       	ldd	r15, Y+2	; 0x02
    2cde:	00 e0       	ldi	r16, 0x00	; 0
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
    2ce2:	ac 01       	movw	r20, r24
    2ce4:	bd 01       	movw	r22, r26
    2ce6:	c7 01       	movw	r24, r14
    2ce8:	09 95       	icall
}
    2cea:	28 96       	adiw	r28, 0x08	; 8
    2cec:	e6 e0       	ldi	r30, 0x06	; 6
    2cee:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__epilogue_restores__+0x18>

00002cf2 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    2cf2:	a8 e0       	ldi	r26, 0x08	; 8
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	ef e7       	ldi	r30, 0x7F	; 127
    2cf8:	f6 e1       	ldi	r31, 0x16	; 22
    2cfa:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__prologue_saves__+0x18>
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	4b 83       	std	Y+3, r20	; 0x03
    2d04:	5c 83       	std	Y+4, r21	; 0x04
    2d06:	6d 83       	std	Y+5, r22	; 0x05
    2d08:	7e 83       	std	Y+6, r23	; 0x06
    2d0a:	38 87       	std	Y+8, r19	; 0x08
    2d0c:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	dc 01       	movw	r26, r24
    2d14:	8d 91       	ld	r24, X+
    2d16:	9c 91       	ld	r25, X
    2d18:	06 96       	adiw	r24, 0x06	; 6
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	ed 91       	ld	r30, X+
    2d1e:	fc 91       	ld	r31, X
    2d20:	2f 81       	ldd	r18, Y+7	; 0x07
    2d22:	38 85       	ldd	r19, Y+8	; 0x08
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	ad 81       	ldd	r26, Y+5	; 0x05
    2d2a:	be 81       	ldd	r27, Y+6	; 0x06
    2d2c:	e9 80       	ldd	r14, Y+1	; 0x01
    2d2e:	fa 80       	ldd	r15, Y+2	; 0x02
    2d30:	01 e0       	ldi	r16, 0x01	; 1
    2d32:	10 e0       	ldi	r17, 0x00	; 0
    2d34:	ac 01       	movw	r20, r24
    2d36:	bd 01       	movw	r22, r26
    2d38:	c7 01       	movw	r24, r14
    2d3a:	09 95       	icall
}
    2d3c:	28 96       	adiw	r28, 0x08	; 8
    2d3e:	e6 e0       	ldi	r30, 0x06	; 6
    2d40:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__epilogue_restores__+0x18>

00002d44 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    2d44:	a4 e0       	ldi	r26, 0x04	; 4
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e8 ea       	ldi	r30, 0xA8	; 168
    2d4a:	f6 e1       	ldi	r31, 0x16	; 22
    2d4c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	7c 83       	std	Y+4, r23	; 0x04
    2d56:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	0a 97       	sbiw	r24, 0x0a	; 10
    2d5e:	0c f0       	brlt	.+2      	; 0x2d62 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    2d60:	69 c0       	rjmp	.+210    	; 0x2e34 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	84 55       	subi	r24, 0x54	; 84
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	89 2b       	or	r24, r25
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    2d74:	5f c0       	rjmp	.+190    	; 0x2e34 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    2d76:	29 81       	ldd	r18, Y+1	; 0x01
    2d78:	3a 81       	ldd	r19, Y+2	; 0x02
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	45 96       	adiw	r24, 0x15	; 21
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	82 0f       	add	r24, r18
    2d86:	93 1f       	adc	r25, r19
    2d88:	fc 01       	movw	r30, r24
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	89 2b       	or	r24, r25
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    2d92:	50 c0       	rjmp	.+160    	; 0x2e34 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    2d94:	29 81       	ldd	r18, Y+1	; 0x01
    2d96:	3a 81       	ldd	r19, Y+2	; 0x02
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	45 96       	adiw	r24, 0x15	; 21
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	82 0f       	add	r24, r18
    2da4:	93 1f       	adc	r25, r19
    2da6:	fc 01       	movw	r30, r24
    2da8:	11 82       	std	Z+1, r1	; 0x01
    2daa:	10 82       	st	Z, r1
        enabled[timerId] = false;
    2dac:	29 81       	ldd	r18, Y+1	; 0x01
    2dae:	3a 81       	ldd	r19, Y+2	; 0x02
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	82 0f       	add	r24, r18
    2db6:	93 1f       	adc	r25, r19
    2db8:	82 57       	subi	r24, 0x72	; 114
    2dba:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    2dc0:	29 81       	ldd	r18, Y+1	; 0x01
    2dc2:	3a 81       	ldd	r19, Y+2	; 0x02
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	84 5b       	subi	r24, 0xB4	; 180
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	11 82       	std	Z+1, r1	; 0x01
    2dd8:	10 82       	st	Z, r1
        delays[timerId] = 0;
    2dda:	29 81       	ldd	r18, Y+1	; 0x01
    2ddc:	3a 81       	ldd	r19, Y+2	; 0x02
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	82 0f       	add	r24, r18
    2dec:	93 1f       	adc	r25, r19
    2dee:	ce 96       	adiw	r24, 0x3e	; 62
    2df0:	fc 01       	movw	r30, r24
    2df2:	10 82       	st	Z, r1
    2df4:	11 82       	std	Z+1, r1	; 0x01
    2df6:	12 82       	std	Z+2, r1	; 0x02
    2df8:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    2dfa:	29 81       	ldd	r18, Y+1	; 0x01
    2dfc:	3a 81       	ldd	r19, Y+2	; 0x02
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	cd 96       	adiw	r24, 0x3d	; 61
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	82 0f       	add	r24, r18
    2e0a:	93 1f       	adc	r25, r19
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	84 55       	subi	r24, 0x54	; 84
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	9c 01       	movw	r18, r24
    2e22:	21 50       	subi	r18, 0x01	; 1
    2e24:	31 09       	sbc	r19, r1
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	84 55       	subi	r24, 0x54	; 84
    2e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2e:	fc 01       	movw	r30, r24
    2e30:	31 83       	std	Z+1, r19	; 0x01
    2e32:	20 83       	st	Z, r18
    }
}
    2e34:	24 96       	adiw	r28, 0x04	; 4
    2e36:	e2 e0       	ldi	r30, 0x02	; 2
    2e38:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002e3c <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    2e3c:	a4 e0       	ldi	r26, 0x04	; 4
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e4 e2       	ldi	r30, 0x24	; 36
    2e42:	f7 e1       	ldi	r31, 0x17	; 23
    2e44:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	7c 83       	std	Y+4, r23	; 0x04
    2e4e:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	0a 97       	sbiw	r24, 0x0a	; 10
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    2e5a:	5d dc       	rcall	.-1862   	; 0x2716 <_ZL7elapsedv>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	49 81       	ldd	r20, Y+1	; 0x01
    2e62:	5a 81       	ldd	r21, Y+2	; 0x02
    2e64:	2b 81       	ldd	r18, Y+3	; 0x03
    2e66:	3c 81       	ldd	r19, Y+4	; 0x04
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	22 0f       	add	r18, r18
    2e6e:	33 1f       	adc	r19, r19
    2e70:	24 0f       	add	r18, r20
    2e72:	35 1f       	adc	r19, r21
    2e74:	2e 5f       	subi	r18, 0xFE	; 254
    2e76:	3f 4f       	sbci	r19, 0xFF	; 255
    2e78:	f9 01       	movw	r30, r18
    2e7a:	80 83       	st	Z, r24
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	b3 83       	std	Z+3, r27	; 0x03
}
    2e82:	24 96       	adiw	r28, 0x04	; 4
    2e84:	e2 e0       	ldi	r30, 0x02	; 2
    2e86:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002e8a <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    2e8a:	a4 e0       	ldi	r26, 0x04	; 4
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	eb e4       	ldi	r30, 0x4B	; 75
    2e90:	f7 e1       	ldi	r31, 0x17	; 23
    2e92:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	7c 83       	std	Y+4, r23	; 0x04
    2e9c:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	0a 97       	sbiw	r24, 0x0a	; 10
    2ea4:	14 f0       	brlt	.+4      	; 0x2eaa <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	0a c0       	rjmp	.+20     	; 0x2ebe <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    2eaa:	29 81       	ldd	r18, Y+1	; 0x01
    2eac:	3a 81       	ldd	r19, Y+2	; 0x02
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	82 0f       	add	r24, r18
    2eb4:	93 1f       	adc	r25, r19
    2eb6:	82 57       	subi	r24, 0x72	; 114
    2eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eba:	fc 01       	movw	r30, r24
    2ebc:	80 81       	ld	r24, Z
}
    2ebe:	24 96       	adiw	r28, 0x04	; 4
    2ec0:	e2 e0       	ldi	r30, 0x02	; 2
    2ec2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002ec6 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    2ec6:	a4 e0       	ldi	r26, 0x04	; 4
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e9 e6       	ldi	r30, 0x69	; 105
    2ecc:	f7 e1       	ldi	r31, 0x17	; 23
    2ece:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	7c 83       	std	Y+4, r23	; 0x04
    2ed8:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ede:	0a 97       	sbiw	r24, 0x0a	; 10
    2ee0:	0c f0       	brlt	.+2      	; 0x2ee4 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    2ee2:	0b c0       	rjmp	.+22     	; 0x2efa <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    2ee4:	29 81       	ldd	r18, Y+1	; 0x01
    2ee6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9c 81       	ldd	r25, Y+4	; 0x04
    2eec:	82 0f       	add	r24, r18
    2eee:	93 1f       	adc	r25, r19
    2ef0:	82 57       	subi	r24, 0x72	; 114
    2ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef4:	21 e0       	ldi	r18, 0x01	; 1
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 83       	st	Z, r18
}
    2efa:	24 96       	adiw	r28, 0x04	; 4
    2efc:	e2 e0       	ldi	r30, 0x02	; 2
    2efe:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002f02 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    2f02:	a4 e0       	ldi	r26, 0x04	; 4
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e7 e8       	ldi	r30, 0x87	; 135
    2f08:	f7 e1       	ldi	r31, 0x17	; 23
    2f0a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	7c 83       	std	Y+4, r23	; 0x04
    2f14:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	0a 97       	sbiw	r24, 0x0a	; 10
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    2f1e:	0a c0       	rjmp	.+20     	; 0x2f34 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    2f20:	29 81       	ldd	r18, Y+1	; 0x01
    2f22:	3a 81       	ldd	r19, Y+2	; 0x02
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	82 0f       	add	r24, r18
    2f2a:	93 1f       	adc	r25, r19
    2f2c:	82 57       	subi	r24, 0x72	; 114
    2f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f30:	fc 01       	movw	r30, r24
    2f32:	10 82       	st	Z, r1
}
    2f34:	24 96       	adiw	r28, 0x04	; 4
    2f36:	e2 e0       	ldi	r30, 0x02	; 2
    2f38:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002f3c <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    2f3c:	cf 92       	push	r12
    2f3e:	ef 92       	push	r14
    2f40:	0f 93       	push	r16
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <_ZN7LCDBaseC1Ev+0xc>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	0f 2e       	mov	r0, r31
    2f56:	f7 e0       	ldi	r31, 0x07	; 7
    2f58:	cf 2e       	mov	r12, r31
    2f5a:	f0 2d       	mov	r31, r0
    2f5c:	0f 2e       	mov	r0, r31
    2f5e:	f6 e0       	ldi	r31, 0x06	; 6
    2f60:	ef 2e       	mov	r14, r31
    2f62:	f0 2d       	mov	r31, r0
    2f64:	05 e0       	ldi	r16, 0x05	; 5
    2f66:	24 e0       	ldi	r18, 0x04	; 4
    2f68:	49 e0       	ldi	r20, 0x09	; 9
    2f6a:	68 e0       	ldi	r22, 0x08	; 8
    2f6c:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN13LiquidCrystalC1Ehhhhhh>
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	23 e7       	ldi	r18, 0x73	; 115
    2f76:	31 e0       	ldi	r19, 0x01	; 1
    2f78:	fc 01       	movw	r30, r24
    2f7a:	31 83       	std	Z+1, r19	; 0x01
    2f7c:	20 83       	st	Z, r18
    Init();
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	08 d0       	rcall	.+16     	; 0x2f94 <_ZN7LCDBase4InitEv>
}
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	0f 91       	pop	r16
    2f8e:	ef 90       	pop	r14
    2f90:	cf 90       	pop	r12
    2f92:	08 95       	ret

00002f94 <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    2f94:	a2 e0       	ldi	r26, 0x02	; 2
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e0 ed       	ldi	r30, 0xD0	; 208
    2f9a:	f7 e1       	ldi	r31, 0x17	; 23
    2f9c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	42 e0       	ldi	r20, 0x02	; 2
    2fac:	60 e1       	ldi	r22, 0x10	; 16
    2fae:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN13LiquidCrystal5beginEhhh>
    clear();
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN13LiquidCrystal9setCursorEhh>

}
    2fc6:	22 96       	adiw	r28, 0x02	; 2
    2fc8:	e2 e0       	ldi	r30, 0x02	; 2
    2fca:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00002fce <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    2fce:	a4 e0       	ldi	r26, 0x04	; 4
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ed ee       	ldi	r30, 0xED	; 237
    2fd4:	f7 e1       	ldi	r31, 0x17	; 23
    2fd6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	7c 83       	std	Y+4, r23	; 0x04
    2fe0:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    2fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe8:	42 2f       	mov	r20, r18
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    2ff0:	27 eb       	ldi	r18, 0xB7	; 183
    2ff2:	32 e0       	ldi	r19, 0x02	; 2
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	b9 01       	movw	r22, r18
    2ffa:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN5Print5printEPK19__FlashStringHelper>
}
    2ffe:	24 96       	adiw	r28, 0x04	; 4
    3000:	e2 e0       	ldi	r30, 0x02	; 2
    3002:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003006 <_ZN4erom7Storage4loadEv>:
private:
  size_t _base, _memory_size;

  template<class T> inline void  _read_block(size_t aAddress, T &aValue) const {
    eeprom_read_block((void*)&aValue, reinterpret_cast<const void*>(aAddress + base()), sizeof(aValue));
  }
    3006:	a2 e0       	ldi	r26, 0x02	; 2
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e0       	ldi	r30, 0x09	; 9
    300c:	f8 e1       	ldi	r31, 0x18	; 24
    300e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	fc 01       	movw	r30, r24
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	fc 01       	movw	r30, r24
    3022:	20 81       	ld	r18, Z
    3024:	31 81       	ldd	r19, Z+1	; 0x01
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	f9 01       	movw	r30, r18
    302c:	09 95       	icall
    302e:	22 96       	adiw	r28, 0x02	; 2
    3030:	e2 e0       	ldi	r30, 0x02	; 2
    3032:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003036 <_ZN15PHSensorStorage6OnLoadEv>:
    3036:	a2 e0       	ldi	r26, 0x02	; 2
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e1 e2       	ldi	r30, 0x21	; 33
    303c:	f8 e1       	ldi	r31, 0x18	; 24
    303e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	0b 96       	adiw	r24, 0x0b	; 11
    304c:	77 d5       	rcall	.+2798   	; 0x3b3c <_ZN4erom5EntryIdE4loadEv>
    304e:	22 96       	adiw	r28, 0x02	; 2
    3050:	e2 e0       	ldi	r30, 0x02	; 2
    3052:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003056 <_ZN15PHSensorStorage6OnSaveEv>:
    3056:	a2 e0       	ldi	r26, 0x02	; 2
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e1 e3       	ldi	r30, 0x31	; 49
    305c:	f8 e1       	ldi	r31, 0x18	; 24
    305e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	9a 81       	ldd	r25, Y+2	; 0x02
    306a:	0b 96       	adiw	r24, 0x0b	; 11
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	8b d5       	rcall	.+2838   	; 0x3b86 <_ZNK4erom5EntryIdE4saveEb>
    3070:	22 96       	adiw	r28, 0x02	; 2
    3072:	e2 e0       	ldi	r30, 0x02	; 2
    3074:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003078 <_ZN15PHSensorStorageC1Ev>:
    3078:	a2 e0       	ldi	r26, 0x02	; 2
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	e2 e4       	ldi	r30, 0x42	; 66
    307e:	f8 e1       	ldi	r31, 0x18	; 24
    3080:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	34 da       	rcall	.-2968   	; 0x24f6 <_ZN4erom7StorageC1Ev>
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	9a 81       	ldd	r25, Y+2	; 0x02
    3092:	2b e7       	ldi	r18, 0x7B	; 123
    3094:	31 e0       	ldi	r19, 0x01	; 1
    3096:	fc 01       	movw	r30, r24
    3098:	31 83       	std	Z+1, r19	; 0x01
    309a:	20 83       	st	Z, r18
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	0b 96       	adiw	r24, 0x0b	; 11
    30a2:	ab d5       	rcall	.+2902   	; 0x3bfa <_ZN4erom5EntryIdEC1Ev>
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	9c 01       	movw	r18, r24
    30aa:	25 5f       	subi	r18, 0xF5	; 245
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	b9 01       	movw	r22, r18
    30b4:	b3 d5       	rcall	.+2918   	; 0x3c1c <_ZN4erom7Storage5issueIdEERNS_5EntryIT_EES5_>
    30b6:	22 96       	adiw	r28, 0x02	; 2
    30b8:	e2 e0       	ldi	r30, 0x02	; 2
    30ba:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000030be <_ZN5PrintC1ERKS_>:
    30be:	a4 e0       	ldi	r26, 0x04	; 4
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e5 e6       	ldi	r30, 0x65	; 101
    30c4:	f8 e1       	ldi	r31, 0x18	; 24
    30c6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	7c 83       	std	Y+4, r23	; 0x04
    30d0:	6b 83       	std	Y+3, r22	; 0x03
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	2a ea       	ldi	r18, 0xAA	; 170
    30d8:	31 e0       	ldi	r19, 0x01	; 1
    30da:	fc 01       	movw	r30, r24
    30dc:	31 83       	std	Z+1, r19	; 0x01
    30de:	20 83       	st	Z, r18
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	fc 01       	movw	r30, r24
    30e6:	22 81       	ldd	r18, Z+2	; 0x02
    30e8:	33 81       	ldd	r19, Z+3	; 0x03
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	9a 81       	ldd	r25, Y+2	; 0x02
    30ee:	fc 01       	movw	r30, r24
    30f0:	33 83       	std	Z+3, r19	; 0x03
    30f2:	22 83       	std	Z+2, r18	; 0x02
    30f4:	24 96       	adiw	r28, 0x04	; 4
    30f6:	e2 e0       	ldi	r30, 0x02	; 2
    30f8:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000030fc <_ZN13LiquidCrystalC1ERKS_>:
    30fc:	a4 e0       	ldi	r26, 0x04	; 4
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e4 e8       	ldi	r30, 0x84	; 132
    3102:	f8 e1       	ldi	r31, 0x18	; 24
    3104:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	7c 83       	std	Y+4, r23	; 0x04
    310e:	6b 83       	std	Y+3, r22	; 0x03
    3110:	2b 81       	ldd	r18, Y+3	; 0x03
    3112:	3c 81       	ldd	r19, Y+4	; 0x04
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	b9 01       	movw	r22, r18
    311a:	d1 df       	rcall	.-94     	; 0x30be <_ZN5PrintC1ERKS_>
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	27 e4       	ldi	r18, 0x47	; 71
    3122:	31 e0       	ldi	r19, 0x01	; 1
    3124:	fc 01       	movw	r30, r24
    3126:	31 83       	std	Z+1, r19	; 0x01
    3128:	20 83       	st	Z, r18
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	fc 01       	movw	r30, r24
    3130:	24 81       	ldd	r18, Z+4	; 0x04
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	fc 01       	movw	r30, r24
    3138:	24 83       	std	Z+4, r18	; 0x04
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	fc 01       	movw	r30, r24
    3140:	25 81       	ldd	r18, Z+5	; 0x05
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	fc 01       	movw	r30, r24
    3148:	25 83       	std	Z+5, r18	; 0x05
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	fc 01       	movw	r30, r24
    3150:	26 81       	ldd	r18, Z+6	; 0x06
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	fc 01       	movw	r30, r24
    3158:	26 83       	std	Z+6, r18	; 0x06
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	9a 81       	ldd	r25, Y+2	; 0x02
    315e:	2b 81       	ldd	r18, Y+3	; 0x03
    3160:	3c 81       	ldd	r19, Y+4	; 0x04
    3162:	48 e0       	ldi	r20, 0x08	; 8
    3164:	f9 01       	movw	r30, r18
    3166:	37 96       	adiw	r30, 0x07	; 7
    3168:	dc 01       	movw	r26, r24
    316a:	17 96       	adiw	r26, 0x07	; 7
    316c:	01 90       	ld	r0, Z+
    316e:	0d 92       	st	X+, r0
    3170:	4a 95       	dec	r20
    3172:	e1 f7       	brne	.-8      	; 0x316c <_ZN13LiquidCrystalC1ERKS_+0x70>
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	fc 01       	movw	r30, r24
    317a:	27 85       	ldd	r18, Z+15	; 0x0f
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	fc 01       	movw	r30, r24
    3182:	27 87       	std	Z+15, r18	; 0x0f
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	fc 01       	movw	r30, r24
    318a:	20 89       	ldd	r18, Z+16	; 0x10
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	fc 01       	movw	r30, r24
    3192:	20 8b       	std	Z+16, r18	; 0x10
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	fc 01       	movw	r30, r24
    319a:	21 89       	ldd	r18, Z+17	; 0x11
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	fc 01       	movw	r30, r24
    31a2:	21 8b       	std	Z+17, r18	; 0x11
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	9c 81       	ldd	r25, Y+4	; 0x04
    31a8:	fc 01       	movw	r30, r24
    31aa:	22 89       	ldd	r18, Z+18	; 0x12
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	fc 01       	movw	r30, r24
    31b2:	22 8b       	std	Z+18, r18	; 0x12
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	fc 01       	movw	r30, r24
    31ba:	23 89       	ldd	r18, Z+19	; 0x13
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	fc 01       	movw	r30, r24
    31c2:	23 8b       	std	Z+19, r18	; 0x13
    31c4:	29 81       	ldd	r18, Y+1	; 0x01
    31c6:	3a 81       	ldd	r19, Y+2	; 0x02
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	fc 01       	movw	r30, r24
    31ce:	84 89       	ldd	r24, Z+20	; 0x14
    31d0:	95 89       	ldd	r25, Z+21	; 0x15
    31d2:	a6 89       	ldd	r26, Z+22	; 0x16
    31d4:	b7 89       	ldd	r27, Z+23	; 0x17
    31d6:	f9 01       	movw	r30, r18
    31d8:	84 8b       	std	Z+20, r24	; 0x14
    31da:	95 8b       	std	Z+21, r25	; 0x15
    31dc:	a6 8b       	std	Z+22, r26	; 0x16
    31de:	b7 8b       	std	Z+23, r27	; 0x17
    31e0:	24 96       	adiw	r28, 0x04	; 4
    31e2:	e2 e0       	ldi	r30, 0x02	; 2
    31e4:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000031e8 <_ZN7LCDBaseC1ERKS_>:
    31e8:	a4 e0       	ldi	r26, 0x04	; 4
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	ea ef       	ldi	r30, 0xFA	; 250
    31ee:	f8 e1       	ldi	r31, 0x18	; 24
    31f0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	7c 83       	std	Y+4, r23	; 0x04
    31fa:	6b 83       	std	Y+3, r22	; 0x03
    31fc:	2b 81       	ldd	r18, Y+3	; 0x03
    31fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	b9 01       	movw	r22, r18
    3206:	7a df       	rcall	.-268    	; 0x30fc <_ZN13LiquidCrystalC1ERKS_>
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	23 e7       	ldi	r18, 0x73	; 115
    320e:	31 e0       	ldi	r19, 0x01	; 1
    3210:	fc 01       	movw	r30, r24
    3212:	31 83       	std	Z+1, r19	; 0x01
    3214:	20 83       	st	Z, r18
    3216:	24 96       	adiw	r28, 0x04	; 4
    3218:	e2 e0       	ldi	r30, 0x02	; 2
    321a:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000321e <_ZN8PHSensorC1Eiib7LCDBase>:
    321e:	a9 e0       	ldi	r26, 0x09	; 9
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e5 e1       	ldi	r30, 0x15	; 21
    3224:	f9 e1       	ldi	r31, 0x19	; 25
    3226:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    322a:	9a 83       	std	Y+2, r25	; 0x02
    322c:	89 83       	std	Y+1, r24	; 0x01
    322e:	7c 83       	std	Y+4, r23	; 0x04
    3230:	6b 83       	std	Y+3, r22	; 0x03
    3232:	5e 83       	std	Y+6, r21	; 0x06
    3234:	4d 83       	std	Y+5, r20	; 0x05
    3236:	2f 83       	std	Y+7, r18	; 0x07
    3238:	19 87       	std	Y+9, r17	; 0x09
    323a:	08 87       	std	Y+8, r16	; 0x08
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	2b 81       	ldd	r18, Y+3	; 0x03
    3242:	3c 81       	ldd	r19, Y+4	; 0x04
    3244:	fc 01       	movw	r30, r24
    3246:	31 83       	std	Z+1, r19	; 0x01
    3248:	20 83       	st	Z, r18
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	8e 55       	subi	r24, 0x5E	; 94
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	fc 01       	movw	r30, r24
    3254:	11 82       	std	Z+1, r1	; 0x01
    3256:	10 82       	st	Z, r1
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	9a 81       	ldd	r25, Y+2	; 0x02
    325c:	8c 55       	subi	r24, 0x5C	; 92
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	2d 81       	ldd	r18, Y+5	; 0x05
    3262:	3e 81       	ldd	r19, Y+6	; 0x06
    3264:	fc 01       	movw	r30, r24
    3266:	31 83       	std	Z+1, r19	; 0x01
    3268:	20 83       	st	Z, r18
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	82 55       	subi	r24, 0x52	; 82
    3270:	9f 4f       	sbci	r25, 0xFF	; 255
    3272:	2f 81       	ldd	r18, Y+7	; 0x07
    3274:	fc 01       	movw	r30, r24
    3276:	20 83       	st	Z, r18
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	81 55       	subi	r24, 0x51	; 81
    327e:	9f 4f       	sbci	r25, 0xFF	; 255
    3280:	fb de       	rcall	.-522    	; 0x3078 <_ZN15PHSensorStorageC1Ev>
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	9a 81       	ldd	r25, Y+2	; 0x02
    3286:	8e 53       	subi	r24, 0x3E	; 62
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	fc 01       	movw	r30, r24
    328c:	10 82       	st	Z, r1
    328e:	11 82       	std	Z+1, r1	; 0x01
    3290:	12 82       	std	Z+2, r1	; 0x02
    3292:	13 82       	std	Z+3, r1	; 0x03
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	8a 53       	subi	r24, 0x3A	; 58
    329a:	9f 4f       	sbci	r25, 0xFF	; 255
    329c:	28 85       	ldd	r18, Y+8	; 0x08
    329e:	39 85       	ldd	r19, Y+9	; 0x09
    32a0:	b9 01       	movw	r22, r18
    32a2:	a2 df       	rcall	.-188    	; 0x31e8 <_ZN7LCDBaseC1ERKS_>
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	82 52       	subi	r24, 0x22	; 34
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	fc 01       	movw	r30, r24
    32ae:	10 82       	st	Z, r1
    32b0:	11 82       	std	Z+1, r1	; 0x01
    32b2:	12 82       	std	Z+2, r1	; 0x02
    32b4:	13 82       	std	Z+3, r1	; 0x03
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	04 d0       	rcall	.+8      	; 0x32c4 <_ZN8PHSensor4InitEv>
    32bc:	29 96       	adiw	r28, 0x09	; 9
    32be:	e4 e0       	ldi	r30, 0x04	; 4
    32c0:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

000032c4 <_ZN8PHSensor4InitEv>:
    32c4:	a6 e0       	ldi	r26, 0x06	; 6
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e8 e6       	ldi	r30, 0x68	; 104
    32ca:	f9 e1       	ldi	r31, 0x19	; 25
    32cc:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__prologue_saves__+0x1e>
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	61 e0       	ldi	r22, 0x01	; 1
    32d6:	8d e0       	ldi	r24, 0x0D	; 13
    32d8:	0e 94 82 2b 	call	0x5704	; 0x5704 <pinMode>
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	81 55       	subi	r24, 0x51	; 81
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	90 de       	rcall	.-736    	; 0x3006 <_ZN4erom7Storage4loadEv>
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	86 54       	subi	r24, 0x46	; 70
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	be d4       	rcall	.+2428   	; 0x3c6c <_ZN4erom5EntryIdEcvRdEv>
    32f0:	fc 01       	movw	r30, r24
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	a2 81       	ldd	r26, Z+2	; 0x02
    32f8:	b3 81       	ldd	r27, Z+3	; 0x03
    32fa:	89 83       	std	Y+1, r24	; 0x01
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	ab 83       	std	Y+3, r26	; 0x03
    3300:	bc 83       	std	Y+4, r27	; 0x04
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	9c 01       	movw	r18, r24
    3308:	2e 53       	subi	r18, 0x3E	; 62
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	9a 81       	ldd	r25, Y+2	; 0x02
    3310:	ab 81       	ldd	r26, Y+3	; 0x03
    3312:	bc 81       	ldd	r27, Y+4	; 0x04
    3314:	f9 01       	movw	r30, r18
    3316:	80 83       	st	Z, r24
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	a2 83       	std	Z+2, r26	; 0x02
    331c:	b3 83       	std	Z+3, r27	; 0x03
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	8e 53       	subi	r24, 0x3E	; 62
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	fc 01       	movw	r30, r24
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	a2 81       	ldd	r26, Z+2	; 0x02
    332e:	b3 81       	ldd	r27, Z+3	; 0x03
    3330:	11 e0       	ldi	r17, 0x01	; 1
    3332:	9c 01       	movw	r18, r24
    3334:	ad 01       	movw	r20, r26
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__unordsf2>
    333e:	88 23       	and	r24, r24
    3340:	09 f4       	brne	.+2      	; 0x3344 <_ZN8PHSensor4InitEv+0x80>
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	11 23       	and	r17, r17
    3346:	49 f0       	breq	.+18     	; 0x335a <_ZN8PHSensor4InitEv+0x96>
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	8e 53       	subi	r24, 0x3E	; 62
    334e:	9f 4f       	sbci	r25, 0xFF	; 255
    3350:	fc 01       	movw	r30, r24
    3352:	10 82       	st	Z, r1
    3354:	11 82       	std	Z+1, r1	; 0x01
    3356:	12 82       	std	Z+2, r1	; 0x02
    3358:	13 82       	std	Z+3, r1	; 0x03
    335a:	26 96       	adiw	r28, 0x06	; 6
    335c:	e3 e0       	ldi	r30, 0x03	; 3
    335e:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <__epilogue_restores__+0x1e>

00003362 <_ZN8PHSensor6UpdateEd>:
    3362:	a6 e0       	ldi	r26, 0x06	; 6
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e7 eb       	ldi	r30, 0xB7	; 183
    3368:	f9 e1       	ldi	r31, 0x19	; 25
    336a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	4b 83       	std	Y+3, r20	; 0x03
    3374:	5c 83       	std	Y+4, r21	; 0x04
    3376:	6d 83       	std	Y+5, r22	; 0x05
    3378:	7e 83       	std	Y+6, r23	; 0x06
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	9a 81       	ldd	r25, Y+2	; 0x02
    337e:	9c 01       	movw	r18, r24
    3380:	2e 53       	subi	r18, 0x3E	; 62
    3382:	3f 4f       	sbci	r19, 0xFF	; 255
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	ad 81       	ldd	r26, Y+5	; 0x05
    338a:	be 81       	ldd	r27, Y+6	; 0x06
    338c:	f9 01       	movw	r30, r18
    338e:	80 83       	st	Z, r24
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	a2 83       	std	Z+2, r26	; 0x02
    3394:	b3 83       	std	Z+3, r27	; 0x03
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	9c 01       	movw	r18, r24
    339c:	2e 53       	subi	r18, 0x3E	; 62
    339e:	3f 4f       	sbci	r19, 0xFF	; 255
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	86 54       	subi	r24, 0x46	; 70
    33a6:	9f 4f       	sbci	r25, 0xFF	; 255
    33a8:	b9 01       	movw	r22, r18
    33aa:	6f d4       	rcall	.+2270   	; 0x3c8a <_ZN4erom5EntryIdEaSERKd>
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	9a 81       	ldd	r25, Y+2	; 0x02
    33b0:	81 55       	subi	r24, 0x51	; 81
    33b2:	9f 4f       	sbci	r25, 0xFF	; 255
    33b4:	ed d8       	rcall	.-3622   	; 0x2590 <_ZN4erom7Storage4saveEv>
    33b6:	26 96       	adiw	r28, 0x06	; 6
    33b8:	e2 e0       	ldi	r30, 0x02	; 2
    33ba:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000033be <_ZN8PHSensor5GetPHEv>:
    33be:	a6 e0       	ldi	r26, 0x06	; 6
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e5 ee       	ldi	r30, 0xE5	; 229
    33c4:	f9 e1       	ldi	r31, 0x19	; 25
    33c6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	8a 55       	subi	r24, 0x5A	; 90
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	fc 01       	movw	r30, r24
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	a2 81       	ldd	r26, Z+2	; 0x02
    33de:	b3 81       	ldd	r27, Z+3	; 0x03
    33e0:	2d 81       	ldd	r18, Y+5	; 0x05
    33e2:	3e 81       	ldd	r19, Y+6	; 0x06
    33e4:	22 52       	subi	r18, 0x22	; 34
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	f9 01       	movw	r30, r18
    33ea:	20 81       	ld	r18, Z
    33ec:	31 81       	ldd	r19, Z+1	; 0x01
    33ee:	42 81       	ldd	r20, Z+2	; 0x02
    33f0:	53 81       	ldd	r21, Z+3	; 0x03
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 a8 22 	call	0x4550	; 0x4550 <__subsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	ab 83       	std	Y+3, r26	; 0x03
    3404:	bc 83       	std	Y+4, r27	; 0x04
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	ab 81       	ldd	r26, Y+3	; 0x03
    340c:	bc 81       	ldd	r27, Y+4	; 0x04
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	26 96       	adiw	r28, 0x06	; 6
    3414:	e2 e0       	ldi	r30, 0x02	; 2
    3416:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000341a <_ZN8PHSensor11CalculatePHEv>:
    341a:	a4 e1       	ldi	r26, 0x14	; 20
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e3 e1       	ldi	r30, 0x13	; 19
    3420:	fa e1       	ldi	r31, 0x1A	; 26
    3422:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3426:	9c 8b       	std	Y+20, r25	; 0x14
    3428:	8b 8b       	std	Y+19, r24	; 0x13
    342a:	8b 89       	ldd	r24, Y+19	; 0x13
    342c:	9c 89       	ldd	r25, Y+20	; 0x14
    342e:	70 d0       	rcall	.+224    	; 0x3510 <_ZN8PHSensor10GetPHValueEv>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	ab 83       	std	Y+3, r26	; 0x03
    343a:	bc 83       	std	Y+4, r27	; 0x04
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	18 86       	std	Y+8, r1	; 0x08
    3446:	1f 82       	std	Y+7, r1	; 0x07
    3448:	33 c0       	rjmp	.+102    	; 0x34b0 <_ZN8PHSensor11CalculatePHEv+0x96>
    344a:	8f 81       	ldd	r24, Y+7	; 0x07
    344c:	98 85       	ldd	r25, Y+8	; 0x08
    344e:	8c 59       	subi	r24, 0x9C	; 156
    3450:	9f 4f       	sbci	r25, 0xFF	; 255
    3452:	9a 87       	std	Y+10, r25	; 0x0a
    3454:	89 87       	std	Y+9, r24	; 0x09
    3456:	89 85       	ldd	r24, Y+9	; 0x09
    3458:	9a 85       	ldd	r25, Y+10	; 0x0a
    345a:	09 2e       	mov	r0, r25
    345c:	00 0c       	add	r0, r0
    345e:	aa 0b       	sbc	r26, r26
    3460:	bb 0b       	sbc	r27, r27
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 bd 2a 	call	0x557a	; 0x557a <delay>
    346a:	8b 89       	ldd	r24, Y+19	; 0x13
    346c:	9c 89       	ldd	r25, Y+20	; 0x14
    346e:	50 d0       	rcall	.+160    	; 0x3510 <_ZN8PHSensor10GetPHValueEv>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
    347c:	2b 85       	ldd	r18, Y+11	; 0x0b
    347e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3480:	4d 85       	ldd	r20, Y+13	; 0x0d
    3482:	5e 85       	ldd	r21, Y+14	; 0x0e
    3484:	69 81       	ldd	r22, Y+1	; 0x01
    3486:	7a 81       	ldd	r23, Y+2	; 0x02
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	0e 94 a9 22 	call	0x4552	; 0x4552 <__addsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	ab 83       	std	Y+3, r26	; 0x03
    349a:	bc 83       	std	Y+4, r27	; 0x04
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	8f 81       	ldd	r24, Y+7	; 0x07
    34a8:	98 85       	ldd	r25, Y+8	; 0x08
    34aa:	01 96       	adiw	r24, 0x01	; 1
    34ac:	98 87       	std	Y+8, r25	; 0x08
    34ae:	8f 83       	std	Y+7, r24	; 0x07
    34b0:	8f 81       	ldd	r24, Y+7	; 0x07
    34b2:	98 85       	ldd	r25, Y+8	; 0x08
    34b4:	45 97       	sbiw	r24, 0x15	; 21
    34b6:	4c f2       	brlt	.-110    	; 0x344a <_ZN8PHSensor11CalculatePHEv+0x30>
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	9e 81       	ldd	r25, Y+6	; 0x06
    34bc:	09 2e       	mov	r0, r25
    34be:	00 0c       	add	r0, r0
    34c0:	aa 0b       	sbc	r26, r26
    34c2:	bb 0b       	sbc	r27, r27
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 ac 23 	call	0x4758	; 0x4758 <__floatsisf>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9c 01       	movw	r18, r24
    34d2:	ad 01       	movw	r20, r26
    34d4:	69 81       	ldd	r22, Y+1	; 0x01
    34d6:	7a 81       	ldd	r23, Y+2	; 0x02
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	0e 94 11 23 	call	0x4622	; 0x4622 <__divsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8f 87       	std	Y+15, r24	; 0x0f
    34e6:	98 8b       	std	Y+16, r25	; 0x10
    34e8:	a9 8b       	std	Y+17, r26	; 0x11
    34ea:	ba 8b       	std	Y+18, r27	; 0x12
    34ec:	8b 89       	ldd	r24, Y+19	; 0x13
    34ee:	9c 89       	ldd	r25, Y+20	; 0x14
    34f0:	9c 01       	movw	r18, r24
    34f2:	2a 55       	subi	r18, 0x5A	; 90
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f8:	98 89       	ldd	r25, Y+16	; 0x10
    34fa:	a9 89       	ldd	r26, Y+17	; 0x11
    34fc:	ba 89       	ldd	r27, Y+18	; 0x12
    34fe:	f9 01       	movw	r30, r18
    3500:	80 83       	st	Z, r24
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	a2 83       	std	Z+2, r26	; 0x02
    3506:	b3 83       	std	Z+3, r27	; 0x03
    3508:	64 96       	adiw	r28, 0x14	; 20
    350a:	e2 e0       	ldi	r30, 0x02	; 2
    350c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003510 <_ZN8PHSensor10GetPHValueEv>:
    3510:	a8 e0       	ldi	r26, 0x08	; 8
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	ee e8       	ldi	r30, 0x8E	; 142
    3516:	fa e1       	ldi	r31, 0x1A	; 26
    3518:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__prologue_saves__+0x18>
    351c:	98 87       	std	Y+8, r25	; 0x08
    351e:	8f 83       	std	Y+7, r24	; 0x07
    3520:	8f eb       	ldi	r24, 0xBF	; 191
    3522:	92 e0       	ldi	r25, 0x02	; 2
    3524:	fc 01       	movw	r30, r24
    3526:	80 81       	ld	r24, Z
    3528:	88 23       	and	r24, r24
    352a:	89 f4       	brne	.+34     	; 0x354e <_ZN8PHSensor10GetPHValueEv+0x3e>
    352c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    3538:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    353c:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    3540:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    3544:	8f eb       	ldi	r24, 0xBF	; 191
    3546:	92 e0       	ldi	r25, 0x02	; 2
    3548:	21 e0       	ldi	r18, 0x01	; 1
    354a:	fc 01       	movw	r30, r24
    354c:	20 83       	st	Z, r18
    354e:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    3552:	9b 01       	movw	r18, r22
    3554:	ac 01       	movw	r20, r24
    3556:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    355a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    355e:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    3562:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    3566:	79 01       	movw	r14, r18
    3568:	8a 01       	movw	r16, r20
    356a:	e8 1a       	sub	r14, r24
    356c:	f9 0a       	sbc	r15, r25
    356e:	0a 0b       	sbc	r16, r26
    3570:	1b 0b       	sbc	r17, r27
    3572:	d8 01       	movw	r26, r16
    3574:	c7 01       	movw	r24, r14
    3576:	21 e0       	ldi	r18, 0x01	; 1
    3578:	8f 36       	cpi	r24, 0x6F	; 111
    357a:	91 05       	cpc	r25, r1
    357c:	a1 05       	cpc	r26, r1
    357e:	b1 05       	cpc	r27, r1
    3580:	08 f4       	brcc	.+2      	; 0x3584 <_ZN8PHSensor10GetPHValueEv+0x74>
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	22 23       	and	r18, r18
    3586:	09 f4       	brne	.+2      	; 0x358a <_ZN8PHSensor10GetPHValueEv+0x7a>
    3588:	a3 c0       	rjmp	.+326    	; 0x36d0 <_ZN8PHSensor10GetPHValueEv+0x1c0>
    358a:	80 e5       	ldi	r24, 0x50	; 80
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	8f 81       	ldd	r24, Y+7	; 0x07
    3594:	98 85       	ldd	r25, Y+8	; 0x08
    3596:	8e 55       	subi	r24, 0x5E	; 94
    3598:	9f 4f       	sbci	r25, 0xFF	; 255
    359a:	fc 01       	movw	r30, r24
    359c:	00 81       	ld	r16, Z
    359e:	11 81       	ldd	r17, Z+1	; 0x01
    35a0:	98 01       	movw	r18, r16
    35a2:	2f 5f       	subi	r18, 0xFF	; 255
    35a4:	3f 4f       	sbci	r19, 0xFF	; 255
    35a6:	8f 81       	ldd	r24, Y+7	; 0x07
    35a8:	98 85       	ldd	r25, Y+8	; 0x08
    35aa:	8e 55       	subi	r24, 0x5E	; 94
    35ac:	9f 4f       	sbci	r25, 0xFF	; 255
    35ae:	fc 01       	movw	r30, r24
    35b0:	31 83       	std	Z+1, r19	; 0x01
    35b2:	20 83       	st	Z, r18
    35b4:	8f 81       	ldd	r24, Y+7	; 0x07
    35b6:	98 85       	ldd	r25, Y+8	; 0x08
    35b8:	fc 01       	movw	r30, r24
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	0e 94 3c 2b 	call	0x5678	; 0x5678 <analogRead>
    35c2:	ac 01       	movw	r20, r24
    35c4:	2f 81       	ldd	r18, Y+7	; 0x07
    35c6:	38 85       	ldd	r19, Y+8	; 0x08
    35c8:	c8 01       	movw	r24, r16
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	fc 01       	movw	r30, r24
    35d6:	51 83       	std	Z+1, r21	; 0x01
    35d8:	40 83       	st	Z, r20
    35da:	8f 81       	ldd	r24, Y+7	; 0x07
    35dc:	98 85       	ldd	r25, Y+8	; 0x08
    35de:	8e 55       	subi	r24, 0x5E	; 94
    35e0:	9f 4f       	sbci	r25, 0xFF	; 255
    35e2:	fc 01       	movw	r30, r24
    35e4:	20 81       	ld	r18, Z
    35e6:	31 81       	ldd	r19, Z+1	; 0x01
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	28 17       	cp	r18, r24
    35ee:	39 07       	cpc	r19, r25
    35f0:	39 f4       	brne	.+14     	; 0x3600 <_ZN8PHSensor10GetPHValueEv+0xf0>
    35f2:	8f 81       	ldd	r24, Y+7	; 0x07
    35f4:	98 85       	ldd	r25, Y+8	; 0x08
    35f6:	8e 55       	subi	r24, 0x5E	; 94
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	fc 01       	movw	r30, r24
    35fc:	11 82       	std	Z+1, r1	; 0x01
    35fe:	10 82       	st	Z, r1
    3600:	8f 81       	ldd	r24, Y+7	; 0x07
    3602:	98 85       	ldd	r25, Y+8	; 0x08
    3604:	9c 01       	movw	r18, r24
    3606:	2e 5f       	subi	r18, 0xFE	; 254
    3608:	3f 4f       	sbci	r19, 0xFF	; 255
    360a:	49 81       	ldd	r20, Y+1	; 0x01
    360c:	5a 81       	ldd	r21, Y+2	; 0x02
    360e:	8f 81       	ldd	r24, Y+7	; 0x07
    3610:	98 85       	ldd	r25, Y+8	; 0x08
    3612:	b9 01       	movw	r22, r18
    3614:	0b d1       	rcall	.+534    	; 0x382c <_ZN8PHSensor16CalculateAverageEPii>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 ea       	ldi	r20, 0xA0	; 160
    3620:	50 e4       	ldi	r21, 0x40	; 64
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	54 e4       	ldi	r21, 0x44	; 68
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	f3 d7       	rcall	.+4070   	; 0x4622 <__divsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	2f 81       	ldd	r18, Y+7	; 0x07
    3642:	38 85       	ldd	r19, Y+8	; 0x08
    3644:	26 55       	subi	r18, 0x56	; 86
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	f9 01       	movw	r30, r18
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
    3652:	8f 81       	ldd	r24, Y+7	; 0x07
    3654:	98 85       	ldd	r25, Y+8	; 0x08
    3656:	86 55       	subi	r24, 0x56	; 86
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	fc 01       	movw	r30, r24
    365c:	80 81       	ld	r24, Z
    365e:	91 81       	ldd	r25, Z+1	; 0x01
    3660:	a2 81       	ldd	r26, Z+2	; 0x02
    3662:	b3 81       	ldd	r27, Z+3	; 0x03
    3664:	9c 01       	movw	r18, r24
    3666:	ad 01       	movw	r20, r26
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	70 e0       	ldi	r23, 0x00	; 0
    366c:	80 e2       	ldi	r24, 0x20	; 32
    366e:	90 e4       	ldi	r25, 0x40	; 64
    3670:	6f d7       	rcall	.+3806   	; 0x4550 <__subsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	2c ee       	ldi	r18, 0xEC	; 236
    3678:	31 e5       	ldi	r19, 0x51	; 81
    367a:	48 e3       	ldi	r20, 0x38	; 56
    367c:	5e e3       	ldi	r21, 0x3E	; 62
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	cf d7       	rcall	.+3998   	; 0x4622 <__divsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 ee       	ldi	r20, 0xE0	; 224
    368e:	50 e4       	ldi	r21, 0x40	; 64
    3690:	bc 01       	movw	r22, r24
    3692:	cd 01       	movw	r24, r26
    3694:	5e d7       	rcall	.+3772   	; 0x4552 <__addsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	7c 01       	movw	r14, r24
    369c:	8d 01       	movw	r16, r26
    369e:	8f 81       	ldd	r24, Y+7	; 0x07
    36a0:	98 85       	ldd	r25, Y+8	; 0x08
    36a2:	8e 53       	subi	r24, 0x3E	; 62
    36a4:	9f 4f       	sbci	r25, 0xFF	; 255
    36a6:	fc 01       	movw	r30, r24
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	a2 81       	ldd	r26, Z+2	; 0x02
    36ae:	b3 81       	ldd	r27, Z+3	; 0x03
    36b0:	9c 01       	movw	r18, r24
    36b2:	ad 01       	movw	r20, r26
    36b4:	c8 01       	movw	r24, r16
    36b6:	b7 01       	movw	r22, r14
    36b8:	4c d7       	rcall	.+3736   	; 0x4552 <__addsf3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	ad 83       	std	Y+5, r26	; 0x05
    36c4:	be 83       	std	Y+6, r27	; 0x06
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	ad 81       	ldd	r26, Y+5	; 0x05
    36cc:	be 81       	ldd	r27, Y+6	; 0x06
    36ce:	09 c0       	rjmp	.+18     	; 0x36e2 <_ZN8PHSensor10GetPHValueEv+0x1d2>
    36d0:	8f 81       	ldd	r24, Y+7	; 0x07
    36d2:	98 85       	ldd	r25, Y+8	; 0x08
    36d4:	8a 55       	subi	r24, 0x5A	; 90
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	fc 01       	movw	r30, r24
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	a2 81       	ldd	r26, Z+2	; 0x02
    36e0:	b3 81       	ldd	r27, Z+3	; 0x03
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	28 96       	adiw	r28, 0x08	; 8
    36e8:	e6 e0       	ldi	r30, 0x06	; 6
    36ea:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__epilogue_restores__+0x18>

000036ee <_ZN8PHSensor10GetVoltageEv>:
    36ee:	a2 e0       	ldi	r26, 0x02	; 2
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	ed e7       	ldi	r30, 0x7D	; 125
    36f4:	fb e1       	ldi	r31, 0x1B	; 27
    36f6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    36fa:	9a 83       	std	Y+2, r25	; 0x02
    36fc:	89 83       	std	Y+1, r24	; 0x01
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	86 55       	subi	r24, 0x56	; 86
    3704:	9f 4f       	sbci	r25, 0xFF	; 255
    3706:	fc 01       	movw	r30, r24
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	a2 81       	ldd	r26, Z+2	; 0x02
    370e:	b3 81       	ldd	r27, Z+3	; 0x03
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	22 96       	adiw	r28, 0x02	; 2
    3716:	e2 e0       	ldi	r30, 0x02	; 2
    3718:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000371c <_ZN8PHSensor12PrintPHToLCDEv>:
    371c:	a6 e0       	ldi	r26, 0x06	; 6
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e4 e9       	ldi	r30, 0x94	; 148
    3722:	fb e1       	ldi	r31, 0x1B	; 27
    3724:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	46 de       	rcall	.-884    	; 0x33be <_ZN8PHSensor5GetPHEv>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	ab 83       	std	Y+3, r26	; 0x03
    373c:	bc 83       	std	Y+4, r27	; 0x04
    373e:	87 ec       	ldi	r24, 0xC7	; 199
    3740:	92 e0       	ldi	r25, 0x02	; 2
    3742:	fc 01       	movw	r30, r24
    3744:	80 81       	ld	r24, Z
    3746:	88 23       	and	r24, r24
    3748:	89 f4       	brne	.+34     	; 0x376c <_ZN8PHSensor12PrintPHToLCDEv+0x50>
    374a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    3756:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    375a:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    375e:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    3762:	87 ec       	ldi	r24, 0xC7	; 199
    3764:	92 e0       	ldi	r25, 0x02	; 2
    3766:	21 e0       	ldi	r18, 0x01	; 1
    3768:	fc 01       	movw	r30, r24
    376a:	20 83       	st	Z, r18
    376c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    3770:	9b 01       	movw	r18, r22
    3772:	ac 01       	movw	r20, r24
    3774:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    3778:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    377c:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    3780:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    3784:	28 1b       	sub	r18, r24
    3786:	39 0b       	sbc	r19, r25
    3788:	4a 0b       	sbc	r20, r26
    378a:	5b 0b       	sbc	r21, r27
    378c:	8d 81       	ldd	r24, Y+5	; 0x05
    378e:	9e 81       	ldd	r25, Y+6	; 0x06
    3790:	8c 55       	subi	r24, 0x5C	; 92
    3792:	9f 4f       	sbci	r25, 0xFF	; 255
    3794:	fc 01       	movw	r30, r24
    3796:	80 81       	ld	r24, Z
    3798:	91 81       	ldd	r25, Z+1	; 0x01
    379a:	80 57       	subi	r24, 0x70	; 112
    379c:	9e 4f       	sbci	r25, 0xFE	; 254
    379e:	09 2e       	mov	r0, r25
    37a0:	00 0c       	add	r0, r0
    37a2:	aa 0b       	sbc	r26, r26
    37a4:	bb 0b       	sbc	r27, r27
    37a6:	61 e0       	ldi	r22, 0x01	; 1
    37a8:	82 17       	cp	r24, r18
    37aa:	93 07       	cpc	r25, r19
    37ac:	a4 07       	cpc	r26, r20
    37ae:	b5 07       	cpc	r27, r21
    37b0:	08 f0       	brcs	.+2      	; 0x37b4 <_ZN8PHSensor12PrintPHToLCDEv+0x98>
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	66 23       	and	r22, r22
    37b6:	b1 f1       	breq	.+108    	; 0x3824 <_ZN8PHSensor12PrintPHToLCDEv+0x108>
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	82 55       	subi	r24, 0x52	; 82
    37be:	9f 4f       	sbci	r25, 0xFF	; 255
    37c0:	fc 01       	movw	r30, r24
    37c2:	80 81       	ld	r24, Z
    37c4:	88 23       	and	r24, r24
    37c6:	c1 f0       	breq	.+48     	; 0x37f8 <_ZN8PHSensor12PrintPHToLCDEv+0xdc>
    37c8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ca:	9e 81       	ldd	r25, Y+6	; 0x06
    37cc:	8a 53       	subi	r24, 0x3A	; 58
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	fc db       	rcall	.-2056   	; 0x2fce <_ZN7LCDBase9ClearLineEs>
    37d6:	8d 81       	ldd	r24, Y+5	; 0x05
    37d8:	9e 81       	ldd	r25, Y+6	; 0x06
    37da:	8a 53       	subi	r24, 0x3A	; 58
    37dc:	9f 4f       	sbci	r25, 0xFF	; 255
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN13LiquidCrystal9setCursorEhh>
    37e6:	28 ec       	ldi	r18, 0xC8	; 200
    37e8:	32 e0       	ldi	r19, 0x02	; 2
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	8a 53       	subi	r24, 0x3A	; 58
    37f0:	9f 4f       	sbci	r25, 0xFF	; 255
    37f2:	b9 01       	movw	r22, r18
    37f4:	0e 94 33 28 	call	0x5066	; 0x5066 <_ZN5Print5printEPK19__FlashStringHelper>
    37f8:	8d e0       	ldi	r24, 0x0D	; 13
    37fa:	0e 94 ed 2b 	call	0x57da	; 0x57da <digitalRead>
    37fe:	98 2f       	mov	r25, r24
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	89 27       	eor	r24, r25
    3804:	68 2f       	mov	r22, r24
    3806:	8d e0       	ldi	r24, 0x0D	; 13
    3808:	0e 94 be 2b 	call	0x577c	; 0x577c <digitalWrite>
    380c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    3818:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    381c:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    3820:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    3824:	26 96       	adiw	r28, 0x06	; 6
    3826:	e2 e0       	ldi	r30, 0x02	; 2
    3828:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000382c <_ZN8PHSensor16CalculateAverageEPii>:
    382c:	cf 92       	push	r12
    382e:	df 92       	push	r13
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	68 97       	sbiw	r28, 0x18	; 24
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	98 8b       	std	Y+16, r25	; 0x10
    384a:	8f 87       	std	Y+15, r24	; 0x0f
    384c:	7a 8b       	std	Y+18, r23	; 0x12
    384e:	69 8b       	std	Y+17, r22	; 0x11
    3850:	5c 8b       	std	Y+20, r21	; 0x14
    3852:	4b 8b       	std	Y+19, r20	; 0x13
    3854:	1f 82       	std	Y+7, r1	; 0x07
    3856:	18 86       	std	Y+8, r1	; 0x08
    3858:	19 86       	std	Y+9, r1	; 0x09
    385a:	1a 86       	std	Y+10, r1	; 0x0a
    385c:	8b 89       	ldd	r24, Y+19	; 0x13
    385e:	9c 89       	ldd	r25, Y+20	; 0x14
    3860:	18 16       	cp	r1, r24
    3862:	19 06       	cpc	r1, r25
    3864:	5c f0       	brlt	.+22     	; 0x387c <_ZN8PHSensor16CalculateAverageEPii+0x50>
    3866:	8d ec       	ldi	r24, 0xCD	; 205
    3868:	92 e0       	ldi	r25, 0x02	; 2
    386a:	bc 01       	movw	r22, r24
    386c:	84 e4       	ldi	r24, 0x44	; 68
    386e:	97 e0       	ldi	r25, 0x07	; 7
    3870:	0e 94 62 28 	call	0x50c4	; 0x50c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	dc 01       	movw	r26, r24
    387a:	27 c1       	rjmp	.+590    	; 0x3aca <_ZN8PHSensor16CalculateAverageEPii+0x29e>
    387c:	8b 89       	ldd	r24, Y+19	; 0x13
    387e:	9c 89       	ldd	r25, Y+20	; 0x14
    3880:	05 97       	sbiw	r24, 0x05	; 5
    3882:	0c f0       	brlt	.+2      	; 0x3886 <_ZN8PHSensor16CalculateAverageEPii+0x5a>
    3884:	48 c0       	rjmp	.+144    	; 0x3916 <_ZN8PHSensor16CalculateAverageEPii+0xea>
    3886:	1a 82       	std	Y+2, r1	; 0x02
    3888:	19 82       	std	Y+1, r1	; 0x01
    388a:	20 c0       	rjmp	.+64     	; 0x38cc <_ZN8PHSensor16CalculateAverageEPii+0xa0>
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	9a 81       	ldd	r25, Y+2	; 0x02
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	29 89       	ldd	r18, Y+17	; 0x11
    3896:	3a 89       	ldd	r19, Y+18	; 0x12
    3898:	82 0f       	add	r24, r18
    389a:	93 1f       	adc	r25, r19
    389c:	fc 01       	movw	r30, r24
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	09 2e       	mov	r0, r25
    38a4:	00 0c       	add	r0, r0
    38a6:	aa 0b       	sbc	r26, r26
    38a8:	bb 0b       	sbc	r27, r27
    38aa:	2f 81       	ldd	r18, Y+7	; 0x07
    38ac:	38 85       	ldd	r19, Y+8	; 0x08
    38ae:	49 85       	ldd	r20, Y+9	; 0x09
    38b0:	5a 85       	ldd	r21, Y+10	; 0x0a
    38b2:	82 0f       	add	r24, r18
    38b4:	93 1f       	adc	r25, r19
    38b6:	a4 1f       	adc	r26, r20
    38b8:	b5 1f       	adc	r27, r21
    38ba:	8f 83       	std	Y+7, r24	; 0x07
    38bc:	98 87       	std	Y+8, r25	; 0x08
    38be:	a9 87       	std	Y+9, r26	; 0x09
    38c0:	ba 87       	std	Y+10, r27	; 0x0a
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	9a 81       	ldd	r25, Y+2	; 0x02
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	9a 83       	std	Y+2, r25	; 0x02
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	29 81       	ldd	r18, Y+1	; 0x01
    38ce:	3a 81       	ldd	r19, Y+2	; 0x02
    38d0:	8b 89       	ldd	r24, Y+19	; 0x13
    38d2:	9c 89       	ldd	r25, Y+20	; 0x14
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	cc f2       	brlt	.-78     	; 0x388c <_ZN8PHSensor16CalculateAverageEPii+0x60>
    38da:	8b 89       	ldd	r24, Y+19	; 0x13
    38dc:	9c 89       	ldd	r25, Y+20	; 0x14
    38de:	9c 01       	movw	r18, r24
    38e0:	99 0f       	add	r25, r25
    38e2:	44 0b       	sbc	r20, r20
    38e4:	55 0b       	sbc	r21, r21
    38e6:	8f 81       	ldd	r24, Y+7	; 0x07
    38e8:	98 85       	ldd	r25, Y+8	; 0x08
    38ea:	a9 85       	ldd	r26, Y+9	; 0x09
    38ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    38ee:	bc 01       	movw	r22, r24
    38f0:	cd 01       	movw	r24, r26
    38f2:	0e 94 38 2c 	call	0x5870	; 0x5870 <__divmodsi4>
    38f6:	da 01       	movw	r26, r20
    38f8:	c9 01       	movw	r24, r18
    38fa:	bc 01       	movw	r22, r24
    38fc:	cd 01       	movw	r24, r26
    38fe:	2c d7       	rcall	.+3672   	; 0x4758 <__floatsisf>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	8b 87       	std	Y+11, r24	; 0x0b
    3906:	9c 87       	std	Y+12, r25	; 0x0c
    3908:	ad 87       	std	Y+13, r26	; 0x0d
    390a:	be 87       	std	Y+14, r27	; 0x0e
    390c:	8b 85       	ldd	r24, Y+11	; 0x0b
    390e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3910:	ad 85       	ldd	r26, Y+13	; 0x0d
    3912:	be 85       	ldd	r27, Y+14	; 0x0e
    3914:	da c0       	rjmp	.+436    	; 0x3aca <_ZN8PHSensor16CalculateAverageEPii+0x29e>
    3916:	89 89       	ldd	r24, Y+17	; 0x11
    3918:	9a 89       	ldd	r25, Y+18	; 0x12
    391a:	fc 01       	movw	r30, r24
    391c:	20 81       	ld	r18, Z
    391e:	31 81       	ldd	r19, Z+1	; 0x01
    3920:	89 89       	ldd	r24, Y+17	; 0x11
    3922:	9a 89       	ldd	r25, Y+18	; 0x12
    3924:	02 96       	adiw	r24, 0x02	; 2
    3926:	fc 01       	movw	r30, r24
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	28 17       	cp	r18, r24
    392e:	39 07       	cpc	r19, r25
    3930:	7c f4       	brge	.+30     	; 0x3950 <_ZN8PHSensor16CalculateAverageEPii+0x124>
    3932:	89 89       	ldd	r24, Y+17	; 0x11
    3934:	9a 89       	ldd	r25, Y+18	; 0x12
    3936:	fc 01       	movw	r30, r24
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	9e 83       	std	Y+6, r25	; 0x06
    393e:	8d 83       	std	Y+5, r24	; 0x05
    3940:	89 89       	ldd	r24, Y+17	; 0x11
    3942:	9a 89       	ldd	r25, Y+18	; 0x12
    3944:	fc 01       	movw	r30, r24
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	8b 83       	std	Y+3, r24	; 0x03
    394e:	0e c0       	rjmp	.+28     	; 0x396c <_ZN8PHSensor16CalculateAverageEPii+0x140>
    3950:	89 89       	ldd	r24, Y+17	; 0x11
    3952:	9a 89       	ldd	r25, Y+18	; 0x12
    3954:	fc 01       	movw	r30, r24
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	8d 83       	std	Y+5, r24	; 0x05
    395e:	89 89       	ldd	r24, Y+17	; 0x11
    3960:	9a 89       	ldd	r25, Y+18	; 0x12
    3962:	fc 01       	movw	r30, r24
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	82 e0       	ldi	r24, 0x02	; 2
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	80 c0       	rjmp	.+256    	; 0x3a76 <_ZN8PHSensor16CalculateAverageEPii+0x24a>
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	9a 81       	ldd	r25, Y+2	; 0x02
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	29 89       	ldd	r18, Y+17	; 0x11
    3980:	3a 89       	ldd	r19, Y+18	; 0x12
    3982:	82 0f       	add	r24, r18
    3984:	93 1f       	adc	r25, r19
    3986:	fc 01       	movw	r30, r24
    3988:	20 81       	ld	r18, Z
    398a:	31 81       	ldd	r19, Z+1	; 0x01
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	9e 81       	ldd	r25, Y+6	; 0x06
    3990:	28 17       	cp	r18, r24
    3992:	39 07       	cpc	r19, r25
    3994:	04 f5       	brge	.+64     	; 0x39d6 <_ZN8PHSensor16CalculateAverageEPii+0x1aa>
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	09 2e       	mov	r0, r25
    399c:	00 0c       	add	r0, r0
    399e:	aa 0b       	sbc	r26, r26
    39a0:	bb 0b       	sbc	r27, r27
    39a2:	2f 81       	ldd	r18, Y+7	; 0x07
    39a4:	38 85       	ldd	r19, Y+8	; 0x08
    39a6:	49 85       	ldd	r20, Y+9	; 0x09
    39a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    39aa:	82 0f       	add	r24, r18
    39ac:	93 1f       	adc	r25, r19
    39ae:	a4 1f       	adc	r26, r20
    39b0:	b5 1f       	adc	r27, r21
    39b2:	8f 83       	std	Y+7, r24	; 0x07
    39b4:	98 87       	std	Y+8, r25	; 0x08
    39b6:	a9 87       	std	Y+9, r26	; 0x09
    39b8:	ba 87       	std	Y+10, r27	; 0x0a
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	29 89       	ldd	r18, Y+17	; 0x11
    39c4:	3a 89       	ldd	r19, Y+18	; 0x12
    39c6:	82 0f       	add	r24, r18
    39c8:	93 1f       	adc	r25, r19
    39ca:	fc 01       	movw	r30, r24
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	9e 83       	std	Y+6, r25	; 0x06
    39d2:	8d 83       	std	Y+5, r24	; 0x05
    39d4:	4b c0       	rjmp	.+150    	; 0x3a6c <_ZN8PHSensor16CalculateAverageEPii+0x240>
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	29 89       	ldd	r18, Y+17	; 0x11
    39e0:	3a 89       	ldd	r19, Y+18	; 0x12
    39e2:	82 0f       	add	r24, r18
    39e4:	93 1f       	adc	r25, r19
    39e6:	fc 01       	movw	r30, r24
    39e8:	20 81       	ld	r18, Z
    39ea:	31 81       	ldd	r19, Z+1	; 0x01
    39ec:	8b 81       	ldd	r24, Y+3	; 0x03
    39ee:	9c 81       	ldd	r25, Y+4	; 0x04
    39f0:	82 17       	cp	r24, r18
    39f2:	93 07       	cpc	r25, r19
    39f4:	04 f5       	brge	.+64     	; 0x3a36 <_ZN8PHSensor16CalculateAverageEPii+0x20a>
    39f6:	8b 81       	ldd	r24, Y+3	; 0x03
    39f8:	9c 81       	ldd	r25, Y+4	; 0x04
    39fa:	09 2e       	mov	r0, r25
    39fc:	00 0c       	add	r0, r0
    39fe:	aa 0b       	sbc	r26, r26
    3a00:	bb 0b       	sbc	r27, r27
    3a02:	2f 81       	ldd	r18, Y+7	; 0x07
    3a04:	38 85       	ldd	r19, Y+8	; 0x08
    3a06:	49 85       	ldd	r20, Y+9	; 0x09
    3a08:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a0a:	82 0f       	add	r24, r18
    3a0c:	93 1f       	adc	r25, r19
    3a0e:	a4 1f       	adc	r26, r20
    3a10:	b5 1f       	adc	r27, r21
    3a12:	8f 83       	std	Y+7, r24	; 0x07
    3a14:	98 87       	std	Y+8, r25	; 0x08
    3a16:	a9 87       	std	Y+9, r26	; 0x09
    3a18:	ba 87       	std	Y+10, r27	; 0x0a
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	29 89       	ldd	r18, Y+17	; 0x11
    3a24:	3a 89       	ldd	r19, Y+18	; 0x12
    3a26:	82 0f       	add	r24, r18
    3a28:	93 1f       	adc	r25, r19
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	80 81       	ld	r24, Z
    3a2e:	91 81       	ldd	r25, Z+1	; 0x01
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
    3a34:	1b c0       	rjmp	.+54     	; 0x3a6c <_ZN8PHSensor16CalculateAverageEPii+0x240>
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3a:	88 0f       	add	r24, r24
    3a3c:	99 1f       	adc	r25, r25
    3a3e:	29 89       	ldd	r18, Y+17	; 0x11
    3a40:	3a 89       	ldd	r19, Y+18	; 0x12
    3a42:	82 0f       	add	r24, r18
    3a44:	93 1f       	adc	r25, r19
    3a46:	fc 01       	movw	r30, r24
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	09 2e       	mov	r0, r25
    3a4e:	00 0c       	add	r0, r0
    3a50:	aa 0b       	sbc	r26, r26
    3a52:	bb 0b       	sbc	r27, r27
    3a54:	2f 81       	ldd	r18, Y+7	; 0x07
    3a56:	38 85       	ldd	r19, Y+8	; 0x08
    3a58:	49 85       	ldd	r20, Y+9	; 0x09
    3a5a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a5c:	82 0f       	add	r24, r18
    3a5e:	93 1f       	adc	r25, r19
    3a60:	a4 1f       	adc	r26, r20
    3a62:	b5 1f       	adc	r27, r21
    3a64:	8f 83       	std	Y+7, r24	; 0x07
    3a66:	98 87       	std	Y+8, r25	; 0x08
    3a68:	a9 87       	std	Y+9, r26	; 0x09
    3a6a:	ba 87       	std	Y+10, r27	; 0x0a
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	29 81       	ldd	r18, Y+1	; 0x01
    3a78:	3a 81       	ldd	r19, Y+2	; 0x02
    3a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7e:	28 17       	cp	r18, r24
    3a80:	39 07       	cpc	r19, r25
    3a82:	0c f4       	brge	.+2      	; 0x3a86 <_ZN8PHSensor16CalculateAverageEPii+0x25a>
    3a84:	78 cf       	rjmp	.-272    	; 0x3976 <_ZN8PHSensor16CalculateAverageEPii+0x14a>
    3a86:	6f 81       	ldd	r22, Y+7	; 0x07
    3a88:	78 85       	ldd	r23, Y+8	; 0x08
    3a8a:	89 85       	ldd	r24, Y+9	; 0x09
    3a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8e:	64 d6       	rcall	.+3272   	; 0x4758 <__floatsisf>
    3a90:	6b 01       	movw	r12, r22
    3a92:	7c 01       	movw	r14, r24
    3a94:	8b 89       	ldd	r24, Y+19	; 0x13
    3a96:	9c 89       	ldd	r25, Y+20	; 0x14
    3a98:	02 97       	sbiw	r24, 0x02	; 2
    3a9a:	09 2e       	mov	r0, r25
    3a9c:	00 0c       	add	r0, r0
    3a9e:	aa 0b       	sbc	r26, r26
    3aa0:	bb 0b       	sbc	r27, r27
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	58 d6       	rcall	.+3248   	; 0x4758 <__floatsisf>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9c 01       	movw	r18, r24
    3aae:	ad 01       	movw	r20, r26
    3ab0:	c7 01       	movw	r24, r14
    3ab2:	b6 01       	movw	r22, r12
    3ab4:	b6 d5       	rcall	.+2924   	; 0x4622 <__divsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	8b 87       	std	Y+11, r24	; 0x0b
    3abc:	9c 87       	std	Y+12, r25	; 0x0c
    3abe:	ad 87       	std	Y+13, r26	; 0x0d
    3ac0:	be 87       	std	Y+14, r27	; 0x0e
    3ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ac4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ac6:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ac8:	be 85       	ldd	r27, Y+14	; 0x0e
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	68 96       	adiw	r28, 0x18	; 24
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	08 95       	ret

00003ae8 <_ZNK4erom6Access11write_blockIdEEbjRKT_>:
    3ae8:	a6 e0       	ldi	r26, 0x06	; 6
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	ea e7       	ldi	r30, 0x7A	; 122
    3aee:	fd e1       	ldi	r31, 0x1D	; 29
    3af0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	7c 83       	std	Y+4, r23	; 0x04
    3afa:	6b 83       	std	Y+3, r22	; 0x03
    3afc:	5e 83       	std	Y+6, r21	; 0x06
    3afe:	4d 83       	std	Y+5, r20	; 0x05
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	9c 01       	movw	r18, r24
    3b06:	2c 5f       	subi	r18, 0xFC	; 252
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	89 81       	ldd	r24, Y+1	; 0x01
    3b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0e:	b9 01       	movw	r22, r18
    3b10:	0e 94 c7 11 	call	0x238e	; 0x238e <_ZNK4erom6Access8in_rangeEj>
    3b14:	98 2f       	mov	r25, r24
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	89 27       	eor	r24, r25
    3b1a:	88 23       	and	r24, r24
    3b1c:	11 f0       	breq	.+4      	; 0x3b22 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x3a>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	09 c0       	rjmp	.+18     	; 0x3b34 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x4c>
    3b22:	4d 81       	ldd	r20, Y+5	; 0x05
    3b24:	5e 81       	ldd	r21, Y+6	; 0x06
    3b26:	2b 81       	ldd	r18, Y+3	; 0x03
    3b28:	3c 81       	ldd	r19, Y+4	; 0x04
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2e:	b9 01       	movw	r22, r18
    3b30:	ca d0       	rcall	.+404    	; 0x3cc6 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	26 96       	adiw	r28, 0x06	; 6
    3b36:	e2 e0       	ldi	r30, 0x02	; 2
    3b38:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003b3c <_ZN4erom5EntryIdE4loadEv>:
    3b3c:	a2 e0       	ldi	r26, 0x02	; 2
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e4 ea       	ldi	r30, 0xA4	; 164
    3b42:	fd e1       	ldi	r31, 0x1D	; 29
    3b44:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	fc 01       	movw	r30, r24
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	89 2b       	or	r24, r25
    3b58:	91 f0       	breq	.+36     	; 0x3b7e <_ZN4erom5EntryIdE4loadEv+0x42>
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	8c 01       	movw	r16, r24
    3b60:	0c 5f       	subi	r16, 0xFC	; 252
    3b62:	1f 4f       	sbci	r17, 0xFF	; 255
    3b64:	89 81       	ldd	r24, Y+1	; 0x01
    3b66:	9a 81       	ldd	r25, Y+2	; 0x02
    3b68:	cf d0       	rcall	.+414    	; 0x3d08 <_ZNK4erom5EntryIdE7addressEv>
    3b6a:	9c 01       	movw	r18, r24
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b70:	fc 01       	movw	r30, r24
    3b72:	80 81       	ld	r24, Z
    3b74:	91 81       	ldd	r25, Z+1	; 0x01
    3b76:	a8 01       	movw	r20, r16
    3b78:	b9 01       	movw	r22, r18
    3b7a:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZNK4erom6Access10read_blockIdEEbjRT_>
    3b7e:	22 96       	adiw	r28, 0x02	; 2
    3b80:	e4 e0       	ldi	r30, 0x04	; 4
    3b82:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00003b86 <_ZNK4erom5EntryIdE4saveEb>:
    3b86:	a3 e0       	ldi	r26, 0x03	; 3
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3b8c:	fd e1       	ldi	r31, 0x1D	; 29
    3b8e:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	6b 83       	std	Y+3, r22	; 0x03
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	80 81       	ld	r24, Z
    3ba0:	91 81       	ldd	r25, Z+1	; 0x01
    3ba2:	89 2b       	or	r24, r25
    3ba4:	31 f1       	breq	.+76     	; 0x3bf2 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	88 23       	and	r24, r24
    3baa:	91 f0       	breq	.+36     	; 0x3bd0 <_ZNK4erom5EntryIdE4saveEb+0x4a>
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	8c 01       	movw	r16, r24
    3bb2:	0c 5f       	subi	r16, 0xFC	; 252
    3bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	a6 d0       	rcall	.+332    	; 0x3d08 <_ZNK4erom5EntryIdE7addressEv>
    3bbc:	9c 01       	movw	r18, r24
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	a8 01       	movw	r20, r16
    3bca:	b9 01       	movw	r22, r18
    3bcc:	8d df       	rcall	.-230    	; 0x3ae8 <_ZNK4erom6Access11write_blockIdEEbjRKT_>
    3bce:	11 c0       	rjmp	.+34     	; 0x3bf2 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd4:	8c 01       	movw	r16, r24
    3bd6:	0c 5f       	subi	r16, 0xFC	; 252
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	94 d0       	rcall	.+296    	; 0x3d08 <_ZNK4erom5EntryIdE7addressEv>
    3be0:	9c 01       	movw	r18, r24
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	fc 01       	movw	r30, r24
    3be8:	80 81       	ld	r24, Z
    3bea:	91 81       	ldd	r25, Z+1	; 0x01
    3bec:	a8 01       	movw	r20, r16
    3bee:	b9 01       	movw	r22, r18
    3bf0:	9c d0       	rcall	.+312    	; 0x3d2a <_ZNK4erom6Access12update_blockIdEEjjRKT_>
    3bf2:	23 96       	adiw	r28, 0x03	; 3
    3bf4:	e4 e0       	ldi	r30, 0x04	; 4
    3bf6:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00003bfa <_ZN4erom5EntryIdEC1Ev>:
    3bfa:	a2 e0       	ldi	r26, 0x02	; 2
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	e3 e0       	ldi	r30, 0x03	; 3
    3c00:	fe e1       	ldi	r31, 0x1E	; 30
    3c02:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	fc 01       	movw	r30, r24
    3c10:	11 82       	std	Z+1, r1	; 0x01
    3c12:	10 82       	st	Z, r1
    3c14:	22 96       	adiw	r28, 0x02	; 2
    3c16:	e2 e0       	ldi	r30, 0x02	; 2
    3c18:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003c1c <_ZN4erom7Storage5issueIdEERNS_5EntryIT_EES5_>:
    3c1c:	a4 e0       	ldi	r26, 0x04	; 4
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e4 e1       	ldi	r30, 0x14	; 20
    3c22:	fe e1       	ldi	r31, 0x1E	; 30
    3c24:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3c28:	9a 83       	std	Y+2, r25	; 0x02
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    3c2c:	7c 83       	std	Y+4, r23	; 0x04
    3c2e:	6b 83       	std	Y+3, r22	; 0x03
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	fc 01       	movw	r30, r24
    3c36:	22 81       	ldd	r18, Z+2	; 0x02
    3c38:	33 81       	ldd	r19, Z+3	; 0x03
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3e:	b9 01       	movw	r22, r18
    3c40:	d6 d0       	rcall	.+428    	; 0x3dee <_ZN4erom5EntryIdE10set_accessEPNS_6AccessE>
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
    3c46:	fc 01       	movw	r30, r24
    3c48:	24 81       	ldd	r18, Z+4	; 0x04
    3c4a:	35 81       	ldd	r19, Z+5	; 0x05
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	b9 01       	movw	r22, r18
    3c52:	e2 d0       	rcall	.+452    	; 0x3e18 <_ZN4erom5EntryIdE11set_addressEj>
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	64 e0       	ldi	r22, 0x04	; 4
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN4erom7Storage14_advance_issueEj>
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	24 96       	adiw	r28, 0x04	; 4
    3c66:	e2 e0       	ldi	r30, 0x02	; 2
    3c68:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003c6c <_ZN4erom5EntryIdEcvRdEv>:
    3c6c:	a2 e0       	ldi	r26, 0x02	; 2
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	ec e3       	ldi	r30, 0x3C	; 60
    3c72:	fe e1       	ldi	r31, 0x1E	; 30
    3c74:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	04 96       	adiw	r24, 0x04	; 4
    3c82:	22 96       	adiw	r28, 0x02	; 2
    3c84:	e2 e0       	ldi	r30, 0x02	; 2
    3c86:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003c8a <_ZN4erom5EntryIdEaSERKd>:
    3c8a:	a4 e0       	ldi	r26, 0x04	; 4
    3c8c:	b0 e0       	ldi	r27, 0x00	; 0
    3c8e:	eb e4       	ldi	r30, 0x4B	; 75
    3c90:	fe e1       	ldi	r31, 0x1E	; 30
    3c92:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3c96:	9a 83       	std	Y+2, r25	; 0x02
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	7c 83       	std	Y+4, r23	; 0x04
    3c9c:	6b 83       	std	Y+3, r22	; 0x03
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	80 81       	ld	r24, Z
    3ca6:	91 81       	ldd	r25, Z+1	; 0x01
    3ca8:	a2 81       	ldd	r26, Z+2	; 0x02
    3caa:	b3 81       	ldd	r27, Z+3	; 0x03
    3cac:	29 81       	ldd	r18, Y+1	; 0x01
    3cae:	3a 81       	ldd	r19, Y+2	; 0x02
    3cb0:	f9 01       	movw	r30, r18
    3cb2:	84 83       	std	Z+4, r24	; 0x04
    3cb4:	95 83       	std	Z+5, r25	; 0x05
    3cb6:	a6 83       	std	Z+6, r26	; 0x06
    3cb8:	b7 83       	std	Z+7, r27	; 0x07
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbe:	24 96       	adiw	r28, 0x04	; 4
    3cc0:	e2 e0       	ldi	r30, 0x02	; 2
    3cc2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003cc6 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>:
    3cc6:	a6 e0       	ldi	r26, 0x06	; 6
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	e9 e6       	ldi	r30, 0x69	; 105
    3ccc:	fe e1       	ldi	r31, 0x1E	; 30
    3cce:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3cd2:	9a 83       	std	Y+2, r25	; 0x02
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	7c 83       	std	Y+4, r23	; 0x04
    3cd8:	6b 83       	std	Y+3, r22	; 0x03
    3cda:	5e 83       	std	Y+6, r21	; 0x06
    3cdc:	4d 83       	std	Y+5, r20	; 0x05
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce2:	0e 94 e7 11 	call	0x23ce	; 0x23ce <_ZNK4erom6Access4baseEv>
    3ce6:	9c 01       	movw	r18, r24
    3ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cea:	9c 81       	ldd	r25, Y+4	; 0x04
    3cec:	82 0f       	add	r24, r18
    3cee:	93 1f       	adc	r25, r19
    3cf0:	9c 01       	movw	r18, r24
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	44 e0       	ldi	r20, 0x04	; 4
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	b9 01       	movw	r22, r18
    3cfc:	0e 94 20 32 	call	0x6440	; 0x6440 <eeprom_write_block>
    3d00:	26 96       	adiw	r28, 0x06	; 6
    3d02:	e2 e0       	ldi	r30, 0x02	; 2
    3d04:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003d08 <_ZNK4erom5EntryIdE7addressEv>:
    3d08:	a2 e0       	ldi	r26, 0x02	; 2
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	ea e8       	ldi	r30, 0x8A	; 138
    3d0e:	fe e1       	ldi	r31, 0x1E	; 30
    3d10:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
    3d20:	93 81       	ldd	r25, Z+3	; 0x03
    3d22:	22 96       	adiw	r28, 0x02	; 2
    3d24:	e2 e0       	ldi	r30, 0x02	; 2
    3d26:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003d2a <_ZNK4erom6Access12update_blockIdEEjjRKT_>:
    3d2a:	ac e0       	ldi	r26, 0x0C	; 12
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	eb e9       	ldi	r30, 0x9B	; 155
    3d30:	fe e1       	ldi	r31, 0x1E	; 30
    3d32:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3d36:	98 87       	std	Y+8, r25	; 0x08
    3d38:	8f 83       	std	Y+7, r24	; 0x07
    3d3a:	7a 87       	std	Y+10, r23	; 0x0a
    3d3c:	69 87       	std	Y+9, r22	; 0x09
    3d3e:	5c 87       	std	Y+12, r21	; 0x0c
    3d40:	4b 87       	std	Y+11, r20	; 0x0b
    3d42:	89 85       	ldd	r24, Y+9	; 0x09
    3d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d46:	9c 01       	movw	r18, r24
    3d48:	2c 5f       	subi	r18, 0xFC	; 252
    3d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d4e:	98 85       	ldd	r25, Y+8	; 0x08
    3d50:	b9 01       	movw	r22, r18
    3d52:	0e 94 c7 11 	call	0x238e	; 0x238e <_ZNK4erom6Access8in_rangeEj>
    3d56:	98 2f       	mov	r25, r24
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	89 27       	eor	r24, r25
    3d5c:	88 23       	and	r24, r24
    3d5e:	19 f0       	breq	.+6      	; 0x3d66 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x3c>
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	40 c0       	rjmp	.+128    	; 0x3de6 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xbc>
    3d66:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d68:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d6a:	9a 83       	std	Y+2, r25	; 0x02
    3d6c:	89 83       	std	Y+1, r24	; 0x01
    3d6e:	1c 82       	std	Y+4, r1	; 0x04
    3d70:	1b 82       	std	Y+3, r1	; 0x03
    3d72:	1e 82       	std	Y+6, r1	; 0x06
    3d74:	1d 82       	std	Y+5, r1	; 0x05
    3d76:	31 c0       	rjmp	.+98     	; 0x3dda <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xb0>
    3d78:	29 85       	ldd	r18, Y+9	; 0x09
    3d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d7e:	98 85       	ldd	r25, Y+8	; 0x08
    3d80:	b9 01       	movw	r22, r18
    3d82:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_ZNK4erom6Access4readEj>
    3d86:	28 2f       	mov	r18, r24
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	90 81       	ld	r25, Z
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	29 17       	cp	r18, r25
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x6e>
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	88 23       	and	r24, r24
    3d9a:	81 f0       	breq	.+32     	; 0x3dbc <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x92>
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3da0:	fc 01       	movw	r30, r24
    3da2:	40 81       	ld	r20, Z
    3da4:	29 85       	ldd	r18, Y+9	; 0x09
    3da6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3da8:	8f 81       	ldd	r24, Y+7	; 0x07
    3daa:	98 85       	ldd	r25, Y+8	; 0x08
    3dac:	b9 01       	movw	r22, r18
    3dae:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZNK4erom6Access5writeEjh>
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	9c 81       	ldd	r25, Y+4	; 0x04
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	9c 83       	std	Y+4, r25	; 0x04
    3dba:	8b 83       	std	Y+3, r24	; 0x03
    3dbc:	89 85       	ldd	r24, Y+9	; 0x09
    3dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc0:	01 96       	adiw	r24, 0x01	; 1
    3dc2:	9a 87       	std	Y+10, r25	; 0x0a
    3dc4:	89 87       	std	Y+9, r24	; 0x09
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dca:	01 96       	adiw	r24, 0x01	; 1
    3dcc:	9a 83       	std	Y+2, r25	; 0x02
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd4:	01 96       	adiw	r24, 0x01	; 1
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	04 97       	sbiw	r24, 0x04	; 4
    3de0:	58 f2       	brcs	.-106    	; 0x3d78 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x4e>
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	9c 81       	ldd	r25, Y+4	; 0x04
    3de6:	2c 96       	adiw	r28, 0x0c	; 12
    3de8:	e2 e0       	ldi	r30, 0x02	; 2
    3dea:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003dee <_ZN4erom5EntryIdE10set_accessEPNS_6AccessE>:
    3dee:	a4 e0       	ldi	r26, 0x04	; 4
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	ed ef       	ldi	r30, 0xFD	; 253
    3df4:	fe e1       	ldi	r31, 0x1E	; 30
    3df6:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
    3dfe:	7c 83       	std	Y+4, r23	; 0x04
    3e00:	6b 83       	std	Y+3, r22	; 0x03
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	9a 81       	ldd	r25, Y+2	; 0x02
    3e06:	2b 81       	ldd	r18, Y+3	; 0x03
    3e08:	3c 81       	ldd	r19, Y+4	; 0x04
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	31 83       	std	Z+1, r19	; 0x01
    3e0e:	20 83       	st	Z, r18
    3e10:	24 96       	adiw	r28, 0x04	; 4
    3e12:	e2 e0       	ldi	r30, 0x02	; 2
    3e14:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003e18 <_ZN4erom5EntryIdE11set_addressEj>:
    3e18:	a4 e0       	ldi	r26, 0x04	; 4
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e2 e1       	ldi	r30, 0x12	; 18
    3e1e:	ff e1       	ldi	r31, 0x1F	; 31
    3e20:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	89 83       	std	Y+1, r24	; 0x01
    3e28:	7c 83       	std	Y+4, r23	; 0x04
    3e2a:	6b 83       	std	Y+3, r22	; 0x03
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e30:	2b 81       	ldd	r18, Y+3	; 0x03
    3e32:	3c 81       	ldd	r19, Y+4	; 0x04
    3e34:	fc 01       	movw	r30, r24
    3e36:	33 83       	std	Z+3, r19	; 0x03
    3e38:	22 83       	std	Z+2, r18	; 0x02
    3e3a:	24 96       	adiw	r28, 0x04	; 4
    3e3c:	e2 e0       	ldi	r30, 0x02	; 2
    3e3e:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003e42 <_ZN15PHSensorStorageD1Ev>:


#include "LCDBase.h"

// Define a 'Storage' class that will manage EEPROM related data
class PHSensorStorage : public erom::Storage {
    3e42:	a2 e0       	ldi	r26, 0x02	; 2
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	e7 e2       	ldi	r30, 0x27	; 39
    3e48:	ff e1       	ldi	r31, 0x1F	; 31
    3e4a:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3e4e:	9a 83       	std	Y+2, r25	; 0x02
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	2b e7       	ldi	r18, 0x7B	; 123
    3e58:	31 e0       	ldi	r19, 0x01	; 1
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	31 83       	std	Z+1, r19	; 0x01
    3e5e:	20 83       	st	Z, r18
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	9a 81       	ldd	r25, Y+2	; 0x02
    3e64:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN4erom7StorageD1Ev>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	89 2b       	or	r24, r25
    3e6e:	21 f0       	breq	.+8      	; 0x3e78 <_ZN15PHSensorStorageD1Ev+0x36>
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	9a 81       	ldd	r25, Y+2	; 0x02
    3e74:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZdlPv>
    3e78:	22 96       	adiw	r28, 0x02	; 2
    3e7a:	e2 e0       	ldi	r30, 0x02	; 2
    3e7c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003e80 <_ZN15PHSensorStorageD0Ev>:
    3e80:	a2 e0       	ldi	r26, 0x02	; 2
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	e6 e4       	ldi	r30, 0x46	; 70
    3e86:	ff e1       	ldi	r31, 0x1F	; 31
    3e88:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3e8c:	9a 83       	std	Y+2, r25	; 0x02
    3e8e:	89 83       	std	Y+1, r24	; 0x01
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	9a 81       	ldd	r25, Y+2	; 0x02
    3e94:	d6 df       	rcall	.-84     	; 0x3e42 <_ZN15PHSensorStorageD1Ev>
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9a:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZdlPv>
    3e9e:	22 96       	adiw	r28, 0x02	; 2
    3ea0:	e2 e0       	ldi	r30, 0x02	; 2
    3ea2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003ea6 <_ZN14HardwareSerial5beginEm>:
    3ea6:	a6 e0       	ldi	r26, 0x06	; 6
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	e9 e5       	ldi	r30, 0x59	; 89
    3eac:	ff e1       	ldi	r31, 0x1F	; 31
    3eae:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    3eb6:	4b 83       	std	Y+3, r20	; 0x03
    3eb8:	5c 83       	std	Y+4, r21	; 0x04
    3eba:	6d 83       	std	Y+5, r22	; 0x05
    3ebc:	7e 83       	std	Y+6, r23	; 0x06
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ec4:	be 81       	ldd	r27, Y+6	; 0x06
    3ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eca:	26 e0       	ldi	r18, 0x06	; 6
    3ecc:	ac 01       	movw	r20, r24
    3ece:	bd 01       	movw	r22, r26
    3ed0:	cf 01       	movw	r24, r30
    3ed2:	8d d7       	rcall	.+3866   	; 0x4dee <_ZN14HardwareSerial5beginEmh>
    3ed4:	26 96       	adiw	r28, 0x06	; 6
    3ed6:	e2 e0       	ldi	r30, 0x02	; 2
    3ed8:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003edc <_ZN14HardwareSerialcvbEv>:
    3edc:	a2 e0       	ldi	r26, 0x02	; 2
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	e4 e7       	ldi	r30, 0x74	; 116
    3ee2:	ff e1       	ldi	r31, 0x1F	; 31
    3ee4:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3ee8:	9a 83       	std	Y+2, r25	; 0x02
    3eea:	89 83       	std	Y+1, r24	; 0x01
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	22 96       	adiw	r28, 0x02	; 2
    3ef0:	e2 e0       	ldi	r30, 0x02	; 2
    3ef2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003ef6 <_ZN15CmdMessengerExt4InitEv>:
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e1 e8       	ldi	r30, 0x81	; 129
    3efc:	ff e1       	ldi	r31, 0x1F	; 31
    3efe:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3f02:	1e d0       	rcall	.+60     	; 0x3f40 <_ZN15CmdMessengerExt22AttachCommandCallbacksEv>
    3f04:	e2 e0       	ldi	r30, 0x02	; 2
    3f06:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003f0a <_ZN15CmdMessengerExt4LoopEv>:
    3f0a:	a0 e0       	ldi	r26, 0x00	; 0
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	eb e8       	ldi	r30, 0x8B	; 139
    3f10:	ff e1       	ldi	r31, 0x1F	; 31
    3f12:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3f16:	81 ed       	ldi	r24, 0xD1	; 209
    3f18:	93 e0       	ldi	r25, 0x03	; 3
    3f1a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN12CmdMessenger16feedinSerialDataEv>
    3f1e:	48 ee       	ldi	r20, 0xE8	; 232
    3f20:	53 e0       	ldi	r21, 0x03	; 3
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	70 e0       	ldi	r23, 0x00	; 0
    3f26:	8e e8       	ldi	r24, 0x8E	; 142
    3f28:	96 e0       	ldi	r25, 0x06	; 6
    3f2a:	36 d1       	rcall	.+620    	; 0x4198 <_ZN15CmdMessengerExt10HasExpiredERmm>
    3f2c:	88 23       	and	r24, r24
    3f2e:	29 f0       	breq	.+10     	; 0x3f3a <_ZN15CmdMessengerExt4LoopEv+0x30>
    3f30:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <_ZN15CmdMessengerExt12_acquireDataE>
    3f34:	88 23       	and	r24, r24
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <_ZN15CmdMessengerExt4LoopEv+0x30>
    3f38:	43 d0       	rcall	.+134    	; 0x3fc0 <_ZN15CmdMessengerExt6SendPHEv>
    3f3a:	e2 e0       	ldi	r30, 0x02	; 2
    3f3c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003f40 <_ZN15CmdMessengerExt22AttachCommandCallbacksEv>:
    3f40:	a0 e0       	ldi	r26, 0x00	; 0
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e6 ea       	ldi	r30, 0xA6	; 166
    3f46:	ff e1       	ldi	r31, 0x1F	; 31
    3f48:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    3f4c:	65 e8       	ldi	r22, 0x85	; 133
    3f4e:	70 e2       	ldi	r23, 0x20	; 32
    3f50:	81 ed       	ldi	r24, 0xD1	; 209
    3f52:	93 e0       	ldi	r25, 0x03	; 3
    3f54:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN12CmdMessenger6attachEPFvvE>
    3f58:	41 ea       	ldi	r20, 0xA1	; 161
    3f5a:	50 e2       	ldi	r21, 0x20	; 32
    3f5c:	62 e0       	ldi	r22, 0x02	; 2
    3f5e:	81 ed       	ldi	r24, 0xD1	; 209
    3f60:	93 e0       	ldi	r25, 0x03	; 3
    3f62:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN12CmdMessenger6attachEhPFvvE>
    3f66:	42 e5       	ldi	r20, 0x52	; 82
    3f68:	50 e2       	ldi	r21, 0x20	; 32
    3f6a:	64 e0       	ldi	r22, 0x04	; 4
    3f6c:	81 ed       	ldi	r24, 0xD1	; 209
    3f6e:	93 e0       	ldi	r25, 0x03	; 3
    3f70:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN12CmdMessenger6attachEhPFvvE>
    3f74:	44 ec       	ldi	r20, 0xC4	; 196
    3f76:	5f e1       	ldi	r21, 0x1F	; 31
    3f78:	66 e0       	ldi	r22, 0x06	; 6
    3f7a:	81 ed       	ldi	r24, 0xD1	; 209
    3f7c:	93 e0       	ldi	r25, 0x03	; 3
    3f7e:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN12CmdMessenger6attachEhPFvvE>
    3f82:	e2 e0       	ldi	r30, 0x02	; 2
    3f84:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00003f88 <_ZN15CmdMessengerExt17OnIdentifyRequestEv>:
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	87 ef       	ldi	r24, 0xF7	; 247
    3f98:	92 e0       	ldi	r25, 0x02	; 2
    3f9a:	0f 2e       	mov	r0, r31
    3f9c:	f8 e8       	ldi	r31, 0x88	; 136
    3f9e:	ef 2e       	mov	r14, r31
    3fa0:	f3 e1       	ldi	r31, 0x13	; 19
    3fa2:	ff 2e       	mov	r15, r31
    3fa4:	f0 2d       	mov	r31, r0
    3fa6:	01 e0       	ldi	r16, 0x01	; 1
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	ac 01       	movw	r20, r24
    3fac:	66 e0       	ldi	r22, 0x06	; 6
    3fae:	81 ed       	ldi	r24, 0xD1	; 209
    3fb0:	93 e0       	ldi	r25, 0x03	; 3
    3fb2:	79 d1       	rcall	.+754    	; 0x42a6 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	ef 90       	pop	r14
    3fbe:	08 95       	ret

00003fc0 <_ZN15CmdMessengerExt6SendPHEv>:
    3fc0:	ac e0       	ldi	r26, 0x0C	; 12
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    3fc6:	ff e1       	ldi	r31, 0x1F	; 31
    3fc8:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__prologue_saves__+0x18>
    3fcc:	8f ee       	ldi	r24, 0xEF	; 239
    3fce:	92 e0       	ldi	r25, 0x02	; 2
    3fd0:	f6 d9       	rcall	.-3092   	; 0x33be <_ZN8PHSensor5GetPHEv>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	9a 83       	std	Y+2, r25	; 0x02
    3fda:	ab 83       	std	Y+3, r26	; 0x03
    3fdc:	bc 83       	std	Y+4, r27	; 0x04
    3fde:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    3fe2:	9b 01       	movw	r18, r22
    3fe4:	ac 01       	movw	r20, r24
    3fe6:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <_ZN15CmdMessengerExt15_startAcqMillisE>
    3fea:	90 91 93 06 	lds	r25, 0x0693	; 0x800693 <_ZN15CmdMessengerExt15_startAcqMillisE+0x1>
    3fee:	a0 91 94 06 	lds	r26, 0x0694	; 0x800694 <_ZN15CmdMessengerExt15_startAcqMillisE+0x2>
    3ff2:	b0 91 95 06 	lds	r27, 0x0695	; 0x800695 <_ZN15CmdMessengerExt15_startAcqMillisE+0x3>
    3ff6:	79 01       	movw	r14, r18
    3ff8:	8a 01       	movw	r16, r20
    3ffa:	e8 1a       	sub	r14, r24
    3ffc:	f9 0a       	sbc	r15, r25
    3ffe:	0a 0b       	sbc	r16, r26
    4000:	1b 0b       	sbc	r17, r27
    4002:	d8 01       	movw	r26, r16
    4004:	c7 01       	movw	r24, r14
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	a4 d3       	rcall	.+1864   	; 0x4754 <__floatunsisf>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	4a e7       	ldi	r20, 0x7A	; 122
    4016:	54 e4       	ldi	r21, 0x44	; 68
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	02 d3       	rcall	.+1540   	; 0x4622 <__divsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	8d 83       	std	Y+5, r24	; 0x05
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	af 83       	std	Y+7, r26	; 0x07
    4028:	b8 87       	std	Y+8, r27	; 0x08
    402a:	8f ee       	ldi	r24, 0xEF	; 239
    402c:	92 e0       	ldi	r25, 0x02	; 2
    402e:	5f db       	rcall	.-2370   	; 0x36ee <_ZN8PHSensor10GetVoltageEv>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	89 87       	std	Y+9, r24	; 0x09
    4036:	9a 87       	std	Y+10, r25	; 0x0a
    4038:	ab 87       	std	Y+11, r26	; 0x0b
    403a:	bc 87       	std	Y+12, r27	; 0x0c
    403c:	63 e0       	ldi	r22, 0x03	; 3
    403e:	81 ed       	ldi	r24, 0xD1	; 209
    4040:	93 e0       	ldi	r25, 0x03	; 3
    4042:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN12CmdMessenger12sendCmdStartEh>
    4046:	8d 81       	ldd	r24, Y+5	; 0x05
    4048:	9e 81       	ldd	r25, Y+6	; 0x06
    404a:	af 81       	ldd	r26, Y+7	; 0x07
    404c:	b8 85       	ldd	r27, Y+8	; 0x08
    404e:	24 e0       	ldi	r18, 0x04	; 4
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	ac 01       	movw	r20, r24
    4054:	bd 01       	movw	r22, r26
    4056:	81 ed       	ldi	r24, 0xD1	; 209
    4058:	93 e0       	ldi	r25, 0x03	; 3
    405a:	64 d1       	rcall	.+712    	; 0x4324 <_ZN12CmdMessenger10sendCmdArgIfEEvT_j>
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	ab 81       	ldd	r26, Y+3	; 0x03
    4062:	bc 81       	ldd	r27, Y+4	; 0x04
    4064:	22 e0       	ldi	r18, 0x02	; 2
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	ac 01       	movw	r20, r24
    406a:	bd 01       	movw	r22, r26
    406c:	81 ed       	ldi	r24, 0xD1	; 209
    406e:	93 e0       	ldi	r25, 0x03	; 3
    4070:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN12CmdMessenger13sendCmdSciArgEdj>
    4074:	89 85       	ldd	r24, Y+9	; 0x09
    4076:	9a 85       	ldd	r25, Y+10	; 0x0a
    4078:	ab 85       	ldd	r26, Y+11	; 0x0b
    407a:	bc 85       	ldd	r27, Y+12	; 0x0c
    407c:	22 e0       	ldi	r18, 0x02	; 2
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	ac 01       	movw	r20, r24
    4082:	bd 01       	movw	r22, r26
    4084:	81 ed       	ldi	r24, 0xD1	; 209
    4086:	93 e0       	ldi	r25, 0x03	; 3
    4088:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN12CmdMessenger13sendCmdSciArgEdj>
    408c:	28 e8       	ldi	r18, 0x88	; 136
    408e:	33 e1       	ldi	r19, 0x13	; 19
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	81 ed       	ldi	r24, 0xD1	; 209
    4096:	93 e0       	ldi	r25, 0x03	; 3
    4098:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN12CmdMessenger10sendCmdEndEbhj>
    409c:	2c 96       	adiw	r28, 0x0c	; 12
    409e:	e6 e0       	ldi	r30, 0x06	; 6
    40a0:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <__epilogue_restores__+0x18>

000040a4 <_ZN15CmdMessengerExt13OnSetPHOffsetEv>:
    40a4:	a4 e0       	ldi	r26, 0x04	; 4
    40a6:	b0 e0       	ldi	r27, 0x00	; 0
    40a8:	e8 e5       	ldi	r30, 0x58	; 88
    40aa:	f0 e2       	ldi	r31, 0x20	; 32
    40ac:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    40b0:	81 ed       	ldi	r24, 0xD1	; 209
    40b2:	93 e0       	ldi	r25, 0x03	; 3
    40b4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN12CmdMessenger12readFloatArgEv>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	89 83       	std	Y+1, r24	; 0x01
    40be:	9a 83       	std	Y+2, r25	; 0x02
    40c0:	ab 83       	std	Y+3, r26	; 0x03
    40c2:	bc 83       	std	Y+4, r27	; 0x04
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	ab 81       	ldd	r26, Y+3	; 0x03
    40ca:	bc 81       	ldd	r27, Y+4	; 0x04
    40cc:	ac 01       	movw	r20, r24
    40ce:	bd 01       	movw	r22, r26
    40d0:	8f ee       	ldi	r24, 0xEF	; 239
    40d2:	92 e0       	ldi	r25, 0x02	; 2
    40d4:	46 d9       	rcall	.-3444   	; 0x3362 <_ZN8PHSensor6UpdateEd>
    40d6:	65 e0       	ldi	r22, 0x05	; 5
    40d8:	81 ed       	ldi	r24, 0xD1	; 209
    40da:	93 e0       	ldi	r25, 0x03	; 3
    40dc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN12CmdMessenger12sendCmdStartEh>
    40e0:	89 81       	ldd	r24, Y+1	; 0x01
    40e2:	9a 81       	ldd	r25, Y+2	; 0x02
    40e4:	ab 81       	ldd	r26, Y+3	; 0x03
    40e6:	bc 81       	ldd	r27, Y+4	; 0x04
    40e8:	ac 01       	movw	r20, r24
    40ea:	bd 01       	movw	r22, r26
    40ec:	81 ed       	ldi	r24, 0xD1	; 209
    40ee:	93 e0       	ldi	r25, 0x03	; 3
    40f0:	53 d1       	rcall	.+678    	; 0x4398 <_ZN12CmdMessenger10sendCmdArgIfEEvT_>
    40f2:	28 e8       	ldi	r18, 0x88	; 136
    40f4:	33 e1       	ldi	r19, 0x13	; 19
    40f6:	41 e0       	ldi	r20, 0x01	; 1
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	81 ed       	ldi	r24, 0xD1	; 209
    40fc:	93 e0       	ldi	r25, 0x03	; 3
    40fe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN12CmdMessenger10sendCmdEndEbhj>
    4102:	24 96       	adiw	r28, 0x04	; 4
    4104:	e2 e0       	ldi	r30, 0x02	; 2
    4106:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000410a <_ZN15CmdMessengerExt16OnUnknownCommandEv>:
    410a:	ef 92       	push	r14
    410c:	ff 92       	push	r15
    410e:	0f 93       	push	r16
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	84 e0       	ldi	r24, 0x04	; 4
    411a:	93 e0       	ldi	r25, 0x03	; 3
    411c:	0f 2e       	mov	r0, r31
    411e:	f8 e8       	ldi	r31, 0x88	; 136
    4120:	ef 2e       	mov	r14, r31
    4122:	f3 e1       	ldi	r31, 0x13	; 19
    4124:	ff 2e       	mov	r15, r31
    4126:	f0 2d       	mov	r31, r0
    4128:	01 e0       	ldi	r16, 0x01	; 1
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	ac 01       	movw	r20, r24
    412e:	61 e0       	ldi	r22, 0x01	; 1
    4130:	81 ed       	ldi	r24, 0xD1	; 209
    4132:	93 e0       	ldi	r25, 0x03	; 3
    4134:	b8 d0       	rcall	.+368    	; 0x42a6 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	0f 91       	pop	r16
    413c:	ff 90       	pop	r15
    413e:	ef 90       	pop	r14
    4140:	08 95       	ret

00004142 <_ZN15CmdMessengerExt14OnStartLoggingEv>:
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <_ZN15CmdMessengerExt15_startAcqMillisE>
    415c:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <_ZN15CmdMessengerExt15_startAcqMillisE+0x1>
    4160:	a0 93 94 06 	sts	0x0694, r26	; 0x800694 <_ZN15CmdMessengerExt15_startAcqMillisE+0x2>
    4164:	b0 93 95 06 	sts	0x0695, r27	; 0x800695 <_ZN15CmdMessengerExt15_startAcqMillisE+0x3>
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <_ZN15CmdMessengerExt12_acquireDataE>
    416e:	86 e2       	ldi	r24, 0x26	; 38
    4170:	93 e0       	ldi	r25, 0x03	; 3
    4172:	0f 2e       	mov	r0, r31
    4174:	f8 e8       	ldi	r31, 0x88	; 136
    4176:	ef 2e       	mov	r14, r31
    4178:	f3 e1       	ldi	r31, 0x13	; 19
    417a:	ff 2e       	mov	r15, r31
    417c:	f0 2d       	mov	r31, r0
    417e:	01 e0       	ldi	r16, 0x01	; 1
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	ac 01       	movw	r20, r24
    4184:	60 e0       	ldi	r22, 0x00	; 0
    4186:	81 ed       	ldi	r24, 0xD1	; 209
    4188:	93 e0       	ldi	r25, 0x03	; 3
    418a:	8d d0       	rcall	.+282    	; 0x42a6 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	0f 91       	pop	r16
    4192:	ff 90       	pop	r15
    4194:	ef 90       	pop	r14
    4196:	08 95       	ret

00004198 <_ZN15CmdMessengerExt10HasExpiredERmm>:
    4198:	a6 e0       	ldi	r26, 0x06	; 6
    419a:	b0 e0       	ldi	r27, 0x00	; 0
    419c:	e2 ed       	ldi	r30, 0xD2	; 210
    419e:	f0 e2       	ldi	r31, 0x20	; 32
    41a0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    41a4:	9a 83       	std	Y+2, r25	; 0x02
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	4b 83       	std	Y+3, r20	; 0x03
    41aa:	5c 83       	std	Y+4, r21	; 0x04
    41ac:	6d 83       	std	Y+5, r22	; 0x05
    41ae:	7e 83       	std	Y+6, r23	; 0x06
    41b0:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    41b4:	9b 01       	movw	r18, r22
    41b6:	ac 01       	movw	r20, r24
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	9a 81       	ldd	r25, Y+2	; 0x02
    41bc:	fc 01       	movw	r30, r24
    41be:	80 81       	ld	r24, Z
    41c0:	91 81       	ldd	r25, Z+1	; 0x01
    41c2:	a2 81       	ldd	r26, Z+2	; 0x02
    41c4:	b3 81       	ldd	r27, Z+3	; 0x03
    41c6:	28 1b       	sub	r18, r24
    41c8:	39 0b       	sbc	r19, r25
    41ca:	4a 0b       	sbc	r20, r26
    41cc:	5b 0b       	sbc	r21, r27
    41ce:	61 e0       	ldi	r22, 0x01	; 1
    41d0:	8b 81       	ldd	r24, Y+3	; 0x03
    41d2:	9c 81       	ldd	r25, Y+4	; 0x04
    41d4:	ad 81       	ldd	r26, Y+5	; 0x05
    41d6:	be 81       	ldd	r27, Y+6	; 0x06
    41d8:	82 17       	cp	r24, r18
    41da:	93 07       	cpc	r25, r19
    41dc:	a4 07       	cpc	r26, r20
    41de:	b5 07       	cpc	r27, r21
    41e0:	08 f0       	brcs	.+2      	; 0x41e4 <_ZN15CmdMessengerExt10HasExpiredERmm+0x4c>
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	66 23       	and	r22, r22
    41e6:	69 f0       	breq	.+26     	; 0x4202 <_ZN15CmdMessengerExt10HasExpiredERmm+0x6a>
    41e8:	0e 94 8c 2a 	call	0x5518	; 0x5518 <millis>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	29 81       	ldd	r18, Y+1	; 0x01
    41f2:	3a 81       	ldd	r19, Y+2	; 0x02
    41f4:	f9 01       	movw	r30, r18
    41f6:	80 83       	st	Z, r24
    41f8:	91 83       	std	Z+1, r25	; 0x01
    41fa:	a2 83       	std	Z+2, r26	; 0x02
    41fc:	b3 83       	std	Z+3, r27	; 0x03
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	01 c0       	rjmp	.+2      	; 0x4204 <_ZN15CmdMessengerExt10HasExpiredERmm+0x6c>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	26 96       	adiw	r28, 0x06	; 6
    4206:	e2 e0       	ldi	r30, 0x02	; 2
    4208:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000420c <setup>:
    420c:	a0 e0       	ldi	r26, 0x00	; 0
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	ec e0       	ldi	r30, 0x0C	; 12
    4212:	f1 e2       	ldi	r31, 0x21	; 33
    4214:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4218:	40 e8       	ldi	r20, 0x80	; 128
    421a:	55 e2       	ldi	r21, 0x25	; 37
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	84 e4       	ldi	r24, 0x44	; 68
    4222:	97 e0       	ldi	r25, 0x07	; 7
    4224:	40 de       	rcall	.-896    	; 0x3ea6 <_ZN14HardwareSerial5beginEm>
    4226:	00 00       	nop
    4228:	84 e4       	ldi	r24, 0x44	; 68
    422a:	97 e0       	ldi	r25, 0x07	; 7
    422c:	57 de       	rcall	.-850    	; 0x3edc <_ZN14HardwareSerialcvbEv>
    422e:	98 2f       	mov	r25, r24
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	89 27       	eor	r24, r25
    4234:	88 23       	and	r24, r24
    4236:	c1 f7       	brne	.-16     	; 0x4228 <setup+0x1c>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	a0 ef       	ldi	r26, 0xF0	; 240
    423e:	b0 e4       	ldi	r27, 0x40	; 64
    4240:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_ZN7Globals11ThePHSensorE+0xde>
    4244:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZN7Globals11ThePHSensorE+0xdf>
    4248:	a0 93 cf 03 	sts	0x03CF, r26	; 0x8003cf <_ZN7Globals11ThePHSensorE+0xe0>
    424c:	b0 93 d0 03 	sts	0x03D0, r27	; 0x8003d0 <_ZN7Globals11ThePHSensorE+0xe1>
    4250:	27 e4       	ldi	r18, 0x47	; 71
    4252:	31 e2       	ldi	r19, 0x21	; 33
    4254:	48 ee       	ldi	r20, 0xE8	; 232
    4256:	53 e0       	ldi	r21, 0x03	; 3
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	86 e9       	ldi	r24, 0x96	; 150
    425e:	96 e0       	ldi	r25, 0x06	; 6
    4260:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN11SimpleTimer11setIntervalElPFvvE>
    4264:	48 de       	rcall	.-880    	; 0x3ef6 <_ZN15CmdMessengerExt4InitEv>
    4266:	e2 e0       	ldi	r30, 0x02	; 2
    4268:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000426c <loop>:
    426c:	a0 e0       	ldi	r26, 0x00	; 0
    426e:	b0 e0       	ldi	r27, 0x00	; 0
    4270:	ec e3       	ldi	r30, 0x3C	; 60
    4272:	f1 e2       	ldi	r31, 0x21	; 33
    4274:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4278:	86 e9       	ldi	r24, 0x96	; 150
    427a:	96 e0       	ldi	r25, 0x06	; 6
    427c:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN11SimpleTimer3runEv>
    4280:	8f ee       	ldi	r24, 0xEF	; 239
    4282:	92 e0       	ldi	r25, 0x02	; 2
    4284:	4b da       	rcall	.-2922   	; 0x371c <_ZN8PHSensor12PrintPHToLCDEv>
    4286:	41 de       	rcall	.-894    	; 0x3f0a <_ZN15CmdMessengerExt4LoopEv>
    4288:	e2 e0       	ldi	r30, 0x02	; 2
    428a:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

0000428e <_Z11AsyncDoWorkv>:
    428e:	a0 e0       	ldi	r26, 0x00	; 0
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	ed e4       	ldi	r30, 0x4D	; 77
    4294:	f1 e2       	ldi	r31, 0x21	; 33
    4296:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    429a:	8f ee       	ldi	r24, 0xEF	; 239
    429c:	92 e0       	ldi	r25, 0x02	; 2
    429e:	bd d8       	rcall	.-3718   	; 0x341a <_ZN8PHSensor11CalculatePHEv>
    42a0:	e2 e0       	ldi	r30, 0x02	; 2
    42a2:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

000042a6 <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj>:
    42a6:	ef 92       	push	r14
    42a8:	ff 92       	push	r15
    42aa:	0f 93       	push	r16
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	29 97       	sbiw	r28, 0x09	; 9
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	6b 83       	std	Y+3, r22	; 0x03
    42c6:	5d 83       	std	Y+5, r21	; 0x05
    42c8:	4c 83       	std	Y+4, r20	; 0x04
    42ca:	2e 83       	std	Y+6, r18	; 0x06
    42cc:	0f 83       	std	Y+7, r16	; 0x07
    42ce:	f9 86       	std	Y+9, r15	; 0x09
    42d0:	e8 86       	std	Y+8, r14	; 0x08
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	fc 01       	movw	r30, r24
    42d8:	90 81       	ld	r25, Z
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	89 27       	eor	r24, r25
    42de:	88 23       	and	r24, r24
    42e0:	a1 f0       	breq	.+40     	; 0x430a <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj+0x64>
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	6b 81       	ldd	r22, Y+3	; 0x03
    42e8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN12CmdMessenger12sendCmdStartEh>
    42ec:	2c 81       	ldd	r18, Y+4	; 0x04
    42ee:	3d 81       	ldd	r19, Y+5	; 0x05
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	b9 01       	movw	r22, r18
    42f6:	87 d0       	rcall	.+270    	; 0x4406 <_ZN12CmdMessenger10sendCmdArgIPK19__FlashStringHelperEEvT_>
    42f8:	28 85       	ldd	r18, Y+8	; 0x08
    42fa:	39 85       	ldd	r19, Y+9	; 0x09
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4300:	4f 81       	ldd	r20, Y+7	; 0x07
    4302:	6e 81       	ldd	r22, Y+6	; 0x06
    4304:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN12CmdMessenger10sendCmdEndEbhj>
    4308:	01 c0       	rjmp	.+2      	; 0x430c <_ZN12CmdMessenger7sendCmdIPK19__FlashStringHelperEEbhT_bhj+0x66>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	29 96       	adiw	r28, 0x09	; 9
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	0f 91       	pop	r16
    431e:	ff 90       	pop	r15
    4320:	ef 90       	pop	r14
    4322:	08 95       	ret

00004324 <_ZN12CmdMessenger10sendCmdArgIfEEvT_j>:
    4324:	a8 e0       	ldi	r26, 0x08	; 8
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	e8 e9       	ldi	r30, 0x98	; 152
    432a:	f1 e2       	ldi	r31, 0x21	; 33
    432c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	4b 83       	std	Y+3, r20	; 0x03
    4336:	5c 83       	std	Y+4, r21	; 0x04
    4338:	6d 83       	std	Y+5, r22	; 0x05
    433a:	7e 83       	std	Y+6, r23	; 0x06
    433c:	38 87       	std	Y+8, r19	; 0x08
    433e:	2f 83       	std	Y+7, r18	; 0x07
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	9a 81       	ldd	r25, Y+2	; 0x02
    4344:	fc 01       	movw	r30, r24
    4346:	80 81       	ld	r24, Z
    4348:	88 23       	and	r24, r24
    434a:	11 f1       	breq	.+68     	; 0x4390 <_ZN12CmdMessenger10sendCmdArgIfEEvT_j+0x6c>
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	9a 81       	ldd	r25, Y+2	; 0x02
    4350:	8c 5a       	subi	r24, 0xAC	; 172
    4352:	9d 4f       	sbci	r25, 0xFD	; 253
    4354:	fc 01       	movw	r30, r24
    4356:	20 81       	ld	r18, Z
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	9a 81       	ldd	r25, Y+2	; 0x02
    435c:	8f 5a       	subi	r24, 0xAF	; 175
    435e:	9d 4f       	sbci	r25, 0xFD	; 253
    4360:	fc 01       	movw	r30, r24
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	62 2f       	mov	r22, r18
    4368:	a3 d6       	rcall	.+3398   	; 0x50b0 <_ZN5Print5printEc>
    436a:	2f 81       	ldd	r18, Y+7	; 0x07
    436c:	38 85       	ldd	r19, Y+8	; 0x08
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	8f 5a       	subi	r24, 0xAF	; 175
    4374:	9d 4f       	sbci	r25, 0xFD	; 253
    4376:	fc 01       	movw	r30, r24
    4378:	80 81       	ld	r24, Z
    437a:	91 81       	ldd	r25, Z+1	; 0x01
    437c:	fc 01       	movw	r30, r24
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	9c 81       	ldd	r25, Y+4	; 0x04
    4382:	ad 81       	ldd	r26, Y+5	; 0x05
    4384:	be 81       	ldd	r27, Y+6	; 0x06
    4386:	ac 01       	movw	r20, r24
    4388:	bd 01       	movw	r22, r26
    438a:	cf 01       	movw	r24, r30
    438c:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN5Print5printEdi>
    4390:	28 96       	adiw	r28, 0x08	; 8
    4392:	e2 e0       	ldi	r30, 0x02	; 2
    4394:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004398 <_ZN12CmdMessenger10sendCmdArgIfEEvT_>:
    4398:	a6 e0       	ldi	r26, 0x06	; 6
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e2 ed       	ldi	r30, 0xD2	; 210
    439e:	f1 e2       	ldi	r31, 0x21	; 33
    43a0:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	4b 83       	std	Y+3, r20	; 0x03
    43aa:	5c 83       	std	Y+4, r21	; 0x04
    43ac:	6d 83       	std	Y+5, r22	; 0x05
    43ae:	7e 83       	std	Y+6, r23	; 0x06
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	9a 81       	ldd	r25, Y+2	; 0x02
    43b4:	fc 01       	movw	r30, r24
    43b6:	80 81       	ld	r24, Z
    43b8:	88 23       	and	r24, r24
    43ba:	09 f1       	breq	.+66     	; 0x43fe <_ZN12CmdMessenger10sendCmdArgIfEEvT_+0x66>
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	8c 5a       	subi	r24, 0xAC	; 172
    43c2:	9d 4f       	sbci	r25, 0xFD	; 253
    43c4:	fc 01       	movw	r30, r24
    43c6:	20 81       	ld	r18, Z
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	9a 81       	ldd	r25, Y+2	; 0x02
    43cc:	8f 5a       	subi	r24, 0xAF	; 175
    43ce:	9d 4f       	sbci	r25, 0xFD	; 253
    43d0:	fc 01       	movw	r30, r24
    43d2:	80 81       	ld	r24, Z
    43d4:	91 81       	ldd	r25, Z+1	; 0x01
    43d6:	62 2f       	mov	r22, r18
    43d8:	6b d6       	rcall	.+3286   	; 0x50b0 <_ZN5Print5printEc>
    43da:	89 81       	ldd	r24, Y+1	; 0x01
    43dc:	9a 81       	ldd	r25, Y+2	; 0x02
    43de:	8f 5a       	subi	r24, 0xAF	; 175
    43e0:	9d 4f       	sbci	r25, 0xFD	; 253
    43e2:	fc 01       	movw	r30, r24
    43e4:	80 81       	ld	r24, Z
    43e6:	91 81       	ldd	r25, Z+1	; 0x01
    43e8:	fc 01       	movw	r30, r24
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	9c 81       	ldd	r25, Y+4	; 0x04
    43ee:	ad 81       	ldd	r26, Y+5	; 0x05
    43f0:	be 81       	ldd	r27, Y+6	; 0x06
    43f2:	22 e0       	ldi	r18, 0x02	; 2
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	ac 01       	movw	r20, r24
    43f8:	bd 01       	movw	r22, r26
    43fa:	cf 01       	movw	r24, r30
    43fc:	ef d7       	rcall	.+4062   	; 0x53dc <_ZN5Print5printEdi>
    43fe:	26 96       	adiw	r28, 0x06	; 6
    4400:	e2 e0       	ldi	r30, 0x02	; 2
    4402:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004406 <_ZN12CmdMessenger10sendCmdArgIPK19__FlashStringHelperEEvT_>:
    4406:	a4 e0       	ldi	r26, 0x04	; 4
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	e9 e0       	ldi	r30, 0x09	; 9
    440c:	f2 e2       	ldi	r31, 0x22	; 34
    440e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
    4416:	7c 83       	std	Y+4, r23	; 0x04
    4418:	6b 83       	std	Y+3, r22	; 0x03
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	9a 81       	ldd	r25, Y+2	; 0x02
    441e:	fc 01       	movw	r30, r24
    4420:	80 81       	ld	r24, Z
    4422:	88 23       	and	r24, r24
    4424:	e1 f0       	breq	.+56     	; 0x445e <_ZN12CmdMessenger10sendCmdArgIPK19__FlashStringHelperEEvT_+0x58>
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	9a 81       	ldd	r25, Y+2	; 0x02
    442a:	8c 5a       	subi	r24, 0xAC	; 172
    442c:	9d 4f       	sbci	r25, 0xFD	; 253
    442e:	fc 01       	movw	r30, r24
    4430:	20 81       	ld	r18, Z
    4432:	89 81       	ldd	r24, Y+1	; 0x01
    4434:	9a 81       	ldd	r25, Y+2	; 0x02
    4436:	8f 5a       	subi	r24, 0xAF	; 175
    4438:	9d 4f       	sbci	r25, 0xFD	; 253
    443a:	fc 01       	movw	r30, r24
    443c:	80 81       	ld	r24, Z
    443e:	91 81       	ldd	r25, Z+1	; 0x01
    4440:	62 2f       	mov	r22, r18
    4442:	36 d6       	rcall	.+3180   	; 0x50b0 <_ZN5Print5printEc>
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	9a 81       	ldd	r25, Y+2	; 0x02
    4448:	8f 5a       	subi	r24, 0xAF	; 175
    444a:	9d 4f       	sbci	r25, 0xFD	; 253
    444c:	fc 01       	movw	r30, r24
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	9c 01       	movw	r18, r24
    4454:	8b 81       	ldd	r24, Y+3	; 0x03
    4456:	9c 81       	ldd	r25, Y+4	; 0x04
    4458:	bc 01       	movw	r22, r24
    445a:	c9 01       	movw	r24, r18
    445c:	04 d6       	rcall	.+3080   	; 0x5066 <_ZN5Print5printEPK19__FlashStringHelper>
    445e:	24 96       	adiw	r28, 0x04	; 4
    4460:	e2 e0       	ldi	r30, 0x02	; 2
    4462:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004466 <_ZN8PHSensorD1Ev>:
            issue(Offset);
            //issue(brightness);
        }
};

class PHSensor {
    4466:	a2 e0       	ldi	r26, 0x02	; 2
    4468:	b0 e0       	ldi	r27, 0x00	; 0
    446a:	e9 e3       	ldi	r30, 0x39	; 57
    446c:	f2 e2       	ldi	r31, 0x22	; 34
    446e:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4472:	9a 83       	std	Y+2, r25	; 0x02
    4474:	89 83       	std	Y+1, r24	; 0x01
    4476:	89 81       	ldd	r24, Y+1	; 0x01
    4478:	9a 81       	ldd	r25, Y+2	; 0x02
    447a:	81 55       	subi	r24, 0x51	; 81
    447c:	9f 4f       	sbci	r25, 0xFF	; 255
    447e:	e1 dc       	rcall	.-1598   	; 0x3e42 <_ZN15PHSensorStorageD1Ev>
    4480:	22 96       	adiw	r28, 0x02	; 2
    4482:	e2 e0       	ldi	r30, 0x02	; 2
    4484:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004488 <_Z41__static_initialization_and_destruction_0ii>:
    CmdMessengerExt::Loop();
}

void AsyncDoWork() {
    ThePHSensor.CalculatePH();
}
    4488:	ac e1       	ldi	r26, 0x1C	; 28
    448a:	b0 e0       	ldi	r27, 0x00	; 0
    448c:	ea e4       	ldi	r30, 0x4A	; 74
    448e:	f2 e2       	ldi	r31, 0x22	; 34
    4490:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__prologue_saves__+0x1c>
    4494:	9a 8f       	std	Y+26, r25	; 0x1a
    4496:	89 8f       	std	Y+25, r24	; 0x19
    4498:	7c 8f       	std	Y+28, r23	; 0x1c
    449a:	6b 8f       	std	Y+27, r22	; 0x1b
    449c:	89 8d       	ldd	r24, Y+25	; 0x19
    449e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	59 f5       	brne	.+86     	; 0x44fa <_Z41__static_initialization_and_destruction_0ii+0x72>
    44a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	39 f5       	brne	.+78     	; 0x44fa <_Z41__static_initialization_and_destruction_0ii+0x72>
#include "LCDBase.h"
#include "PhSensor.h"

namespace Globals {

    LCDBase TheLCD;
    44ac:	87 ed       	ldi	r24, 0xD7	; 215
    44ae:	92 e0       	ldi	r25, 0x02	; 2
    44b0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN7LCDBaseC1Ev>

    int _phSensorPin = A5;//A15;
    PHSensor ThePHSensor(_phSensorPin, 2000, true, TheLCD);
    44b4:	67 ed       	ldi	r22, 0xD7	; 215
    44b6:	72 e0       	ldi	r23, 0x02	; 2
    44b8:	ce 01       	movw	r24, r28
    44ba:	01 96       	adiw	r24, 0x01	; 1
    44bc:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_ZN7LCDBaseC1ERKS_>
    44c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN7Globals12_phSensorPinE>
    44c4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN7Globals12_phSensorPinE+0x1>
    44c8:	9e 01       	movw	r18, r28
    44ca:	2f 5f       	subi	r18, 0xFF	; 255
    44cc:	3f 4f       	sbci	r19, 0xFF	; 255
    44ce:	89 01       	movw	r16, r18
    44d0:	21 e0       	ldi	r18, 0x01	; 1
    44d2:	40 ed       	ldi	r20, 0xD0	; 208
    44d4:	57 e0       	ldi	r21, 0x07	; 7
    44d6:	bc 01       	movw	r22, r24
    44d8:	8f ee       	ldi	r24, 0xEF	; 239
    44da:	92 e0       	ldi	r25, 0x02	; 2
    44dc:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN8PHSensorC1Eiib7LCDBase>

////remeber: dependant functions must be defined first in namespace.
///**Better to use template functions.
namespace CmdMessengerExt {

    CmdMessenger _cmdMessenger = CmdMessenger(Serial);
    44e0:	0f e2       	ldi	r16, 0x2F	; 47
    44e2:	2b e3       	ldi	r18, 0x3B	; 59
    44e4:	4c e2       	ldi	r20, 0x2C	; 44
    44e6:	64 e4       	ldi	r22, 0x44	; 68
    44e8:	77 e0       	ldi	r23, 0x07	; 7
    44ea:	81 ed       	ldi	r24, 0xD1	; 209
    44ec:	93 e0       	ldi	r25, 0x03	; 3
    44ee:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN12CmdMessengerC1ER6Streamccc>

#include "_globalsWaterSensors.h"
#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    44f2:	86 e9       	ldi	r24, 0x96	; 150
    44f4:	96 e0       	ldi	r25, 0x06	; 6
    44f6:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN11SimpleTimerC1Ev>
    44fa:	89 8d       	ldd	r24, Y+25	; 0x19
    44fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    44fe:	89 2b       	or	r24, r25
    4500:	39 f4       	brne	.+14     	; 0x4510 <_Z41__static_initialization_and_destruction_0ii+0x88>
    4502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4506:	01 96       	adiw	r24, 0x01	; 1
    4508:	19 f4       	brne	.+6      	; 0x4510 <_Z41__static_initialization_and_destruction_0ii+0x88>
    450a:	8f ee       	ldi	r24, 0xEF	; 239
    450c:	92 e0       	ldi	r25, 0x02	; 2
    450e:	ab df       	rcall	.-170    	; 0x4466 <_ZN8PHSensorD1Ev>
    CmdMessengerExt::Loop();
}

void AsyncDoWork() {
    ThePHSensor.CalculatePH();
}
    4510:	6c 96       	adiw	r28, 0x1c	; 28
    4512:	e4 e0       	ldi	r30, 0x04	; 4
    4514:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__epilogue_restores__+0x1c>

00004518 <_GLOBAL__sub_I__ZN7Globals6TheLCDE>:
    4518:	a0 e0       	ldi	r26, 0x00	; 0
    451a:	b0 e0       	ldi	r27, 0x00	; 0
    451c:	e2 e9       	ldi	r30, 0x92	; 146
    451e:	f2 e2       	ldi	r31, 0x22	; 34
    4520:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4524:	6f ef       	ldi	r22, 0xFF	; 255
    4526:	7f ef       	ldi	r23, 0xFF	; 255
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	ad df       	rcall	.-166    	; 0x4488 <_Z41__static_initialization_and_destruction_0ii>
    452e:	e2 e0       	ldi	r30, 0x02	; 2
    4530:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004534 <_GLOBAL__sub_D__ZN7Globals6TheLCDE>:
    4534:	a0 e0       	ldi	r26, 0x00	; 0
    4536:	b0 e0       	ldi	r27, 0x00	; 0
    4538:	e0 ea       	ldi	r30, 0xA0	; 160
    453a:	f2 e2       	ldi	r31, 0x22	; 34
    453c:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__prologue_saves__+0x20>
    4540:	6f ef       	ldi	r22, 0xFF	; 255
    4542:	7f ef       	ldi	r23, 0xFF	; 255
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	9f df       	rcall	.-194    	; 0x4488 <_Z41__static_initialization_and_destruction_0ii>
    454a:	e2 e0       	ldi	r30, 0x02	; 2
    454c:	0c 94 90 2c 	jmp	0x5920	; 0x5920 <__epilogue_restores__+0x20>

00004550 <__subsf3>:
    4550:	50 58       	subi	r21, 0x80	; 128

00004552 <__addsf3>:
    4552:	bb 27       	eor	r27, r27
    4554:	aa 27       	eor	r26, r26
    4556:	0e d0       	rcall	.+28     	; 0x4574 <__addsf3x>
    4558:	75 c1       	rjmp	.+746    	; 0x4844 <__fp_round>
    455a:	66 d1       	rcall	.+716    	; 0x4828 <__fp_pscA>
    455c:	30 f0       	brcs	.+12     	; 0x456a <__addsf3+0x18>
    455e:	6b d1       	rcall	.+726    	; 0x4836 <__fp_pscB>
    4560:	20 f0       	brcs	.+8      	; 0x456a <__addsf3+0x18>
    4562:	31 f4       	brne	.+12     	; 0x4570 <__addsf3+0x1e>
    4564:	9f 3f       	cpi	r25, 0xFF	; 255
    4566:	11 f4       	brne	.+4      	; 0x456c <__addsf3+0x1a>
    4568:	1e f4       	brtc	.+6      	; 0x4570 <__addsf3+0x1e>
    456a:	5b c1       	rjmp	.+694    	; 0x4822 <__fp_nan>
    456c:	0e f4       	brtc	.+2      	; 0x4570 <__addsf3+0x1e>
    456e:	e0 95       	com	r30
    4570:	e7 fb       	bst	r30, 7
    4572:	51 c1       	rjmp	.+674    	; 0x4816 <__fp_inf>

00004574 <__addsf3x>:
    4574:	e9 2f       	mov	r30, r25
    4576:	77 d1       	rcall	.+750    	; 0x4866 <__fp_split3>
    4578:	80 f3       	brcs	.-32     	; 0x455a <__addsf3+0x8>
    457a:	ba 17       	cp	r27, r26
    457c:	62 07       	cpc	r22, r18
    457e:	73 07       	cpc	r23, r19
    4580:	84 07       	cpc	r24, r20
    4582:	95 07       	cpc	r25, r21
    4584:	18 f0       	brcs	.+6      	; 0x458c <__addsf3x+0x18>
    4586:	71 f4       	brne	.+28     	; 0x45a4 <__addsf3x+0x30>
    4588:	9e f5       	brtc	.+102    	; 0x45f0 <__addsf3x+0x7c>
    458a:	8f c1       	rjmp	.+798    	; 0x48aa <__fp_zero>
    458c:	0e f4       	brtc	.+2      	; 0x4590 <__addsf3x+0x1c>
    458e:	e0 95       	com	r30
    4590:	0b 2e       	mov	r0, r27
    4592:	ba 2f       	mov	r27, r26
    4594:	a0 2d       	mov	r26, r0
    4596:	0b 01       	movw	r0, r22
    4598:	b9 01       	movw	r22, r18
    459a:	90 01       	movw	r18, r0
    459c:	0c 01       	movw	r0, r24
    459e:	ca 01       	movw	r24, r20
    45a0:	a0 01       	movw	r20, r0
    45a2:	11 24       	eor	r1, r1
    45a4:	ff 27       	eor	r31, r31
    45a6:	59 1b       	sub	r21, r25
    45a8:	99 f0       	breq	.+38     	; 0x45d0 <__addsf3x+0x5c>
    45aa:	59 3f       	cpi	r21, 0xF9	; 249
    45ac:	50 f4       	brcc	.+20     	; 0x45c2 <__addsf3x+0x4e>
    45ae:	50 3e       	cpi	r21, 0xE0	; 224
    45b0:	68 f1       	brcs	.+90     	; 0x460c <__addsf3x+0x98>
    45b2:	1a 16       	cp	r1, r26
    45b4:	f0 40       	sbci	r31, 0x00	; 0
    45b6:	a2 2f       	mov	r26, r18
    45b8:	23 2f       	mov	r18, r19
    45ba:	34 2f       	mov	r19, r20
    45bc:	44 27       	eor	r20, r20
    45be:	58 5f       	subi	r21, 0xF8	; 248
    45c0:	f3 cf       	rjmp	.-26     	; 0x45a8 <__addsf3x+0x34>
    45c2:	46 95       	lsr	r20
    45c4:	37 95       	ror	r19
    45c6:	27 95       	ror	r18
    45c8:	a7 95       	ror	r26
    45ca:	f0 40       	sbci	r31, 0x00	; 0
    45cc:	53 95       	inc	r21
    45ce:	c9 f7       	brne	.-14     	; 0x45c2 <__addsf3x+0x4e>
    45d0:	7e f4       	brtc	.+30     	; 0x45f0 <__addsf3x+0x7c>
    45d2:	1f 16       	cp	r1, r31
    45d4:	ba 0b       	sbc	r27, r26
    45d6:	62 0b       	sbc	r22, r18
    45d8:	73 0b       	sbc	r23, r19
    45da:	84 0b       	sbc	r24, r20
    45dc:	ba f0       	brmi	.+46     	; 0x460c <__addsf3x+0x98>
    45de:	91 50       	subi	r25, 0x01	; 1
    45e0:	a1 f0       	breq	.+40     	; 0x460a <__addsf3x+0x96>
    45e2:	ff 0f       	add	r31, r31
    45e4:	bb 1f       	adc	r27, r27
    45e6:	66 1f       	adc	r22, r22
    45e8:	77 1f       	adc	r23, r23
    45ea:	88 1f       	adc	r24, r24
    45ec:	c2 f7       	brpl	.-16     	; 0x45de <__addsf3x+0x6a>
    45ee:	0e c0       	rjmp	.+28     	; 0x460c <__addsf3x+0x98>
    45f0:	ba 0f       	add	r27, r26
    45f2:	62 1f       	adc	r22, r18
    45f4:	73 1f       	adc	r23, r19
    45f6:	84 1f       	adc	r24, r20
    45f8:	48 f4       	brcc	.+18     	; 0x460c <__addsf3x+0x98>
    45fa:	87 95       	ror	r24
    45fc:	77 95       	ror	r23
    45fe:	67 95       	ror	r22
    4600:	b7 95       	ror	r27
    4602:	f7 95       	ror	r31
    4604:	9e 3f       	cpi	r25, 0xFE	; 254
    4606:	08 f0       	brcs	.+2      	; 0x460a <__addsf3x+0x96>
    4608:	b3 cf       	rjmp	.-154    	; 0x4570 <__addsf3+0x1e>
    460a:	93 95       	inc	r25
    460c:	88 0f       	add	r24, r24
    460e:	08 f0       	brcs	.+2      	; 0x4612 <__addsf3x+0x9e>
    4610:	99 27       	eor	r25, r25
    4612:	ee 0f       	add	r30, r30
    4614:	97 95       	ror	r25
    4616:	87 95       	ror	r24
    4618:	08 95       	ret

0000461a <__cmpsf2>:
    461a:	d9 d0       	rcall	.+434    	; 0x47ce <__fp_cmp>
    461c:	08 f4       	brcc	.+2      	; 0x4620 <__cmpsf2+0x6>
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	08 95       	ret

00004622 <__divsf3>:
    4622:	0c d0       	rcall	.+24     	; 0x463c <__divsf3x>
    4624:	0f c1       	rjmp	.+542    	; 0x4844 <__fp_round>
    4626:	07 d1       	rcall	.+526    	; 0x4836 <__fp_pscB>
    4628:	40 f0       	brcs	.+16     	; 0x463a <__divsf3+0x18>
    462a:	fe d0       	rcall	.+508    	; 0x4828 <__fp_pscA>
    462c:	30 f0       	brcs	.+12     	; 0x463a <__divsf3+0x18>
    462e:	21 f4       	brne	.+8      	; 0x4638 <__divsf3+0x16>
    4630:	5f 3f       	cpi	r21, 0xFF	; 255
    4632:	19 f0       	breq	.+6      	; 0x463a <__divsf3+0x18>
    4634:	f0 c0       	rjmp	.+480    	; 0x4816 <__fp_inf>
    4636:	51 11       	cpse	r21, r1
    4638:	39 c1       	rjmp	.+626    	; 0x48ac <__fp_szero>
    463a:	f3 c0       	rjmp	.+486    	; 0x4822 <__fp_nan>

0000463c <__divsf3x>:
    463c:	14 d1       	rcall	.+552    	; 0x4866 <__fp_split3>
    463e:	98 f3       	brcs	.-26     	; 0x4626 <__divsf3+0x4>

00004640 <__divsf3_pse>:
    4640:	99 23       	and	r25, r25
    4642:	c9 f3       	breq	.-14     	; 0x4636 <__divsf3+0x14>
    4644:	55 23       	and	r21, r21
    4646:	b1 f3       	breq	.-20     	; 0x4634 <__divsf3+0x12>
    4648:	95 1b       	sub	r25, r21
    464a:	55 0b       	sbc	r21, r21
    464c:	bb 27       	eor	r27, r27
    464e:	aa 27       	eor	r26, r26
    4650:	62 17       	cp	r22, r18
    4652:	73 07       	cpc	r23, r19
    4654:	84 07       	cpc	r24, r20
    4656:	38 f0       	brcs	.+14     	; 0x4666 <__divsf3_pse+0x26>
    4658:	9f 5f       	subi	r25, 0xFF	; 255
    465a:	5f 4f       	sbci	r21, 0xFF	; 255
    465c:	22 0f       	add	r18, r18
    465e:	33 1f       	adc	r19, r19
    4660:	44 1f       	adc	r20, r20
    4662:	aa 1f       	adc	r26, r26
    4664:	a9 f3       	breq	.-22     	; 0x4650 <__divsf3_pse+0x10>
    4666:	33 d0       	rcall	.+102    	; 0x46ce <__divsf3_pse+0x8e>
    4668:	0e 2e       	mov	r0, r30
    466a:	3a f0       	brmi	.+14     	; 0x467a <__divsf3_pse+0x3a>
    466c:	e0 e8       	ldi	r30, 0x80	; 128
    466e:	30 d0       	rcall	.+96     	; 0x46d0 <__divsf3_pse+0x90>
    4670:	91 50       	subi	r25, 0x01	; 1
    4672:	50 40       	sbci	r21, 0x00	; 0
    4674:	e6 95       	lsr	r30
    4676:	00 1c       	adc	r0, r0
    4678:	ca f7       	brpl	.-14     	; 0x466c <__divsf3_pse+0x2c>
    467a:	29 d0       	rcall	.+82     	; 0x46ce <__divsf3_pse+0x8e>
    467c:	fe 2f       	mov	r31, r30
    467e:	27 d0       	rcall	.+78     	; 0x46ce <__divsf3_pse+0x8e>
    4680:	66 0f       	add	r22, r22
    4682:	77 1f       	adc	r23, r23
    4684:	88 1f       	adc	r24, r24
    4686:	bb 1f       	adc	r27, r27
    4688:	26 17       	cp	r18, r22
    468a:	37 07       	cpc	r19, r23
    468c:	48 07       	cpc	r20, r24
    468e:	ab 07       	cpc	r26, r27
    4690:	b0 e8       	ldi	r27, 0x80	; 128
    4692:	09 f0       	breq	.+2      	; 0x4696 <__divsf3_pse+0x56>
    4694:	bb 0b       	sbc	r27, r27
    4696:	80 2d       	mov	r24, r0
    4698:	bf 01       	movw	r22, r30
    469a:	ff 27       	eor	r31, r31
    469c:	93 58       	subi	r25, 0x83	; 131
    469e:	5f 4f       	sbci	r21, 0xFF	; 255
    46a0:	2a f0       	brmi	.+10     	; 0x46ac <__divsf3_pse+0x6c>
    46a2:	9e 3f       	cpi	r25, 0xFE	; 254
    46a4:	51 05       	cpc	r21, r1
    46a6:	68 f0       	brcs	.+26     	; 0x46c2 <__divsf3_pse+0x82>
    46a8:	b6 c0       	rjmp	.+364    	; 0x4816 <__fp_inf>
    46aa:	00 c1       	rjmp	.+512    	; 0x48ac <__fp_szero>
    46ac:	5f 3f       	cpi	r21, 0xFF	; 255
    46ae:	ec f3       	brlt	.-6      	; 0x46aa <__divsf3_pse+0x6a>
    46b0:	98 3e       	cpi	r25, 0xE8	; 232
    46b2:	dc f3       	brlt	.-10     	; 0x46aa <__divsf3_pse+0x6a>
    46b4:	86 95       	lsr	r24
    46b6:	77 95       	ror	r23
    46b8:	67 95       	ror	r22
    46ba:	b7 95       	ror	r27
    46bc:	f7 95       	ror	r31
    46be:	9f 5f       	subi	r25, 0xFF	; 255
    46c0:	c9 f7       	brne	.-14     	; 0x46b4 <__divsf3_pse+0x74>
    46c2:	88 0f       	add	r24, r24
    46c4:	91 1d       	adc	r25, r1
    46c6:	96 95       	lsr	r25
    46c8:	87 95       	ror	r24
    46ca:	97 f9       	bld	r25, 7
    46cc:	08 95       	ret
    46ce:	e1 e0       	ldi	r30, 0x01	; 1
    46d0:	66 0f       	add	r22, r22
    46d2:	77 1f       	adc	r23, r23
    46d4:	88 1f       	adc	r24, r24
    46d6:	bb 1f       	adc	r27, r27
    46d8:	62 17       	cp	r22, r18
    46da:	73 07       	cpc	r23, r19
    46dc:	84 07       	cpc	r24, r20
    46de:	ba 07       	cpc	r27, r26
    46e0:	20 f0       	brcs	.+8      	; 0x46ea <__divsf3_pse+0xaa>
    46e2:	62 1b       	sub	r22, r18
    46e4:	73 0b       	sbc	r23, r19
    46e6:	84 0b       	sbc	r24, r20
    46e8:	ba 0b       	sbc	r27, r26
    46ea:	ee 1f       	adc	r30, r30
    46ec:	88 f7       	brcc	.-30     	; 0x46d0 <__divsf3_pse+0x90>
    46ee:	e0 95       	com	r30
    46f0:	08 95       	ret

000046f2 <__fixsfsi>:
    46f2:	04 d0       	rcall	.+8      	; 0x46fc <__fixunssfsi>
    46f4:	68 94       	set
    46f6:	b1 11       	cpse	r27, r1
    46f8:	d9 c0       	rjmp	.+434    	; 0x48ac <__fp_szero>
    46fa:	08 95       	ret

000046fc <__fixunssfsi>:
    46fc:	bc d0       	rcall	.+376    	; 0x4876 <__fp_splitA>
    46fe:	88 f0       	brcs	.+34     	; 0x4722 <__fixunssfsi+0x26>
    4700:	9f 57       	subi	r25, 0x7F	; 127
    4702:	90 f0       	brcs	.+36     	; 0x4728 <__fixunssfsi+0x2c>
    4704:	b9 2f       	mov	r27, r25
    4706:	99 27       	eor	r25, r25
    4708:	b7 51       	subi	r27, 0x17	; 23
    470a:	a0 f0       	brcs	.+40     	; 0x4734 <__fixunssfsi+0x38>
    470c:	d1 f0       	breq	.+52     	; 0x4742 <__fixunssfsi+0x46>
    470e:	66 0f       	add	r22, r22
    4710:	77 1f       	adc	r23, r23
    4712:	88 1f       	adc	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	1a f0       	brmi	.+6      	; 0x471e <__fixunssfsi+0x22>
    4718:	ba 95       	dec	r27
    471a:	c9 f7       	brne	.-14     	; 0x470e <__fixunssfsi+0x12>
    471c:	12 c0       	rjmp	.+36     	; 0x4742 <__fixunssfsi+0x46>
    471e:	b1 30       	cpi	r27, 0x01	; 1
    4720:	81 f0       	breq	.+32     	; 0x4742 <__fixunssfsi+0x46>
    4722:	c3 d0       	rcall	.+390    	; 0x48aa <__fp_zero>
    4724:	b1 e0       	ldi	r27, 0x01	; 1
    4726:	08 95       	ret
    4728:	c0 c0       	rjmp	.+384    	; 0x48aa <__fp_zero>
    472a:	67 2f       	mov	r22, r23
    472c:	78 2f       	mov	r23, r24
    472e:	88 27       	eor	r24, r24
    4730:	b8 5f       	subi	r27, 0xF8	; 248
    4732:	39 f0       	breq	.+14     	; 0x4742 <__fixunssfsi+0x46>
    4734:	b9 3f       	cpi	r27, 0xF9	; 249
    4736:	cc f3       	brlt	.-14     	; 0x472a <__fixunssfsi+0x2e>
    4738:	86 95       	lsr	r24
    473a:	77 95       	ror	r23
    473c:	67 95       	ror	r22
    473e:	b3 95       	inc	r27
    4740:	d9 f7       	brne	.-10     	; 0x4738 <__fixunssfsi+0x3c>
    4742:	3e f4       	brtc	.+14     	; 0x4752 <__fixunssfsi+0x56>
    4744:	90 95       	com	r25
    4746:	80 95       	com	r24
    4748:	70 95       	com	r23
    474a:	61 95       	neg	r22
    474c:	7f 4f       	sbci	r23, 0xFF	; 255
    474e:	8f 4f       	sbci	r24, 0xFF	; 255
    4750:	9f 4f       	sbci	r25, 0xFF	; 255
    4752:	08 95       	ret

00004754 <__floatunsisf>:
    4754:	e8 94       	clt
    4756:	09 c0       	rjmp	.+18     	; 0x476a <__floatsisf+0x12>

00004758 <__floatsisf>:
    4758:	97 fb       	bst	r25, 7
    475a:	3e f4       	brtc	.+14     	; 0x476a <__floatsisf+0x12>
    475c:	90 95       	com	r25
    475e:	80 95       	com	r24
    4760:	70 95       	com	r23
    4762:	61 95       	neg	r22
    4764:	7f 4f       	sbci	r23, 0xFF	; 255
    4766:	8f 4f       	sbci	r24, 0xFF	; 255
    4768:	9f 4f       	sbci	r25, 0xFF	; 255
    476a:	99 23       	and	r25, r25
    476c:	a9 f0       	breq	.+42     	; 0x4798 <__floatsisf+0x40>
    476e:	f9 2f       	mov	r31, r25
    4770:	96 e9       	ldi	r25, 0x96	; 150
    4772:	bb 27       	eor	r27, r27
    4774:	93 95       	inc	r25
    4776:	f6 95       	lsr	r31
    4778:	87 95       	ror	r24
    477a:	77 95       	ror	r23
    477c:	67 95       	ror	r22
    477e:	b7 95       	ror	r27
    4780:	f1 11       	cpse	r31, r1
    4782:	f8 cf       	rjmp	.-16     	; 0x4774 <__floatsisf+0x1c>
    4784:	fa f4       	brpl	.+62     	; 0x47c4 <__floatsisf+0x6c>
    4786:	bb 0f       	add	r27, r27
    4788:	11 f4       	brne	.+4      	; 0x478e <__floatsisf+0x36>
    478a:	60 ff       	sbrs	r22, 0
    478c:	1b c0       	rjmp	.+54     	; 0x47c4 <__floatsisf+0x6c>
    478e:	6f 5f       	subi	r22, 0xFF	; 255
    4790:	7f 4f       	sbci	r23, 0xFF	; 255
    4792:	8f 4f       	sbci	r24, 0xFF	; 255
    4794:	9f 4f       	sbci	r25, 0xFF	; 255
    4796:	16 c0       	rjmp	.+44     	; 0x47c4 <__floatsisf+0x6c>
    4798:	88 23       	and	r24, r24
    479a:	11 f0       	breq	.+4      	; 0x47a0 <__floatsisf+0x48>
    479c:	96 e9       	ldi	r25, 0x96	; 150
    479e:	11 c0       	rjmp	.+34     	; 0x47c2 <__floatsisf+0x6a>
    47a0:	77 23       	and	r23, r23
    47a2:	21 f0       	breq	.+8      	; 0x47ac <__floatsisf+0x54>
    47a4:	9e e8       	ldi	r25, 0x8E	; 142
    47a6:	87 2f       	mov	r24, r23
    47a8:	76 2f       	mov	r23, r22
    47aa:	05 c0       	rjmp	.+10     	; 0x47b6 <__floatsisf+0x5e>
    47ac:	66 23       	and	r22, r22
    47ae:	71 f0       	breq	.+28     	; 0x47cc <__floatsisf+0x74>
    47b0:	96 e8       	ldi	r25, 0x86	; 134
    47b2:	86 2f       	mov	r24, r22
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	2a f0       	brmi	.+10     	; 0x47c4 <__floatsisf+0x6c>
    47ba:	9a 95       	dec	r25
    47bc:	66 0f       	add	r22, r22
    47be:	77 1f       	adc	r23, r23
    47c0:	88 1f       	adc	r24, r24
    47c2:	da f7       	brpl	.-10     	; 0x47ba <__floatsisf+0x62>
    47c4:	88 0f       	add	r24, r24
    47c6:	96 95       	lsr	r25
    47c8:	87 95       	ror	r24
    47ca:	97 f9       	bld	r25, 7
    47cc:	08 95       	ret

000047ce <__fp_cmp>:
    47ce:	99 0f       	add	r25, r25
    47d0:	00 08       	sbc	r0, r0
    47d2:	55 0f       	add	r21, r21
    47d4:	aa 0b       	sbc	r26, r26
    47d6:	e0 e8       	ldi	r30, 0x80	; 128
    47d8:	fe ef       	ldi	r31, 0xFE	; 254
    47da:	16 16       	cp	r1, r22
    47dc:	17 06       	cpc	r1, r23
    47de:	e8 07       	cpc	r30, r24
    47e0:	f9 07       	cpc	r31, r25
    47e2:	c0 f0       	brcs	.+48     	; 0x4814 <__fp_cmp+0x46>
    47e4:	12 16       	cp	r1, r18
    47e6:	13 06       	cpc	r1, r19
    47e8:	e4 07       	cpc	r30, r20
    47ea:	f5 07       	cpc	r31, r21
    47ec:	98 f0       	brcs	.+38     	; 0x4814 <__fp_cmp+0x46>
    47ee:	62 1b       	sub	r22, r18
    47f0:	73 0b       	sbc	r23, r19
    47f2:	84 0b       	sbc	r24, r20
    47f4:	95 0b       	sbc	r25, r21
    47f6:	39 f4       	brne	.+14     	; 0x4806 <__fp_cmp+0x38>
    47f8:	0a 26       	eor	r0, r26
    47fa:	61 f0       	breq	.+24     	; 0x4814 <__fp_cmp+0x46>
    47fc:	23 2b       	or	r18, r19
    47fe:	24 2b       	or	r18, r20
    4800:	25 2b       	or	r18, r21
    4802:	21 f4       	brne	.+8      	; 0x480c <__fp_cmp+0x3e>
    4804:	08 95       	ret
    4806:	0a 26       	eor	r0, r26
    4808:	09 f4       	brne	.+2      	; 0x480c <__fp_cmp+0x3e>
    480a:	a1 40       	sbci	r26, 0x01	; 1
    480c:	a6 95       	lsr	r26
    480e:	8f ef       	ldi	r24, 0xFF	; 255
    4810:	81 1d       	adc	r24, r1
    4812:	81 1d       	adc	r24, r1
    4814:	08 95       	ret

00004816 <__fp_inf>:
    4816:	97 f9       	bld	r25, 7
    4818:	9f 67       	ori	r25, 0x7F	; 127
    481a:	80 e8       	ldi	r24, 0x80	; 128
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	08 95       	ret

00004822 <__fp_nan>:
    4822:	9f ef       	ldi	r25, 0xFF	; 255
    4824:	80 ec       	ldi	r24, 0xC0	; 192
    4826:	08 95       	ret

00004828 <__fp_pscA>:
    4828:	00 24       	eor	r0, r0
    482a:	0a 94       	dec	r0
    482c:	16 16       	cp	r1, r22
    482e:	17 06       	cpc	r1, r23
    4830:	18 06       	cpc	r1, r24
    4832:	09 06       	cpc	r0, r25
    4834:	08 95       	ret

00004836 <__fp_pscB>:
    4836:	00 24       	eor	r0, r0
    4838:	0a 94       	dec	r0
    483a:	12 16       	cp	r1, r18
    483c:	13 06       	cpc	r1, r19
    483e:	14 06       	cpc	r1, r20
    4840:	05 06       	cpc	r0, r21
    4842:	08 95       	ret

00004844 <__fp_round>:
    4844:	09 2e       	mov	r0, r25
    4846:	03 94       	inc	r0
    4848:	00 0c       	add	r0, r0
    484a:	11 f4       	brne	.+4      	; 0x4850 <__fp_round+0xc>
    484c:	88 23       	and	r24, r24
    484e:	52 f0       	brmi	.+20     	; 0x4864 <__fp_round+0x20>
    4850:	bb 0f       	add	r27, r27
    4852:	40 f4       	brcc	.+16     	; 0x4864 <__fp_round+0x20>
    4854:	bf 2b       	or	r27, r31
    4856:	11 f4       	brne	.+4      	; 0x485c <__fp_round+0x18>
    4858:	60 ff       	sbrs	r22, 0
    485a:	04 c0       	rjmp	.+8      	; 0x4864 <__fp_round+0x20>
    485c:	6f 5f       	subi	r22, 0xFF	; 255
    485e:	7f 4f       	sbci	r23, 0xFF	; 255
    4860:	8f 4f       	sbci	r24, 0xFF	; 255
    4862:	9f 4f       	sbci	r25, 0xFF	; 255
    4864:	08 95       	ret

00004866 <__fp_split3>:
    4866:	57 fd       	sbrc	r21, 7
    4868:	90 58       	subi	r25, 0x80	; 128
    486a:	44 0f       	add	r20, r20
    486c:	55 1f       	adc	r21, r21
    486e:	59 f0       	breq	.+22     	; 0x4886 <__fp_splitA+0x10>
    4870:	5f 3f       	cpi	r21, 0xFF	; 255
    4872:	71 f0       	breq	.+28     	; 0x4890 <__fp_splitA+0x1a>
    4874:	47 95       	ror	r20

00004876 <__fp_splitA>:
    4876:	88 0f       	add	r24, r24
    4878:	97 fb       	bst	r25, 7
    487a:	99 1f       	adc	r25, r25
    487c:	61 f0       	breq	.+24     	; 0x4896 <__fp_splitA+0x20>
    487e:	9f 3f       	cpi	r25, 0xFF	; 255
    4880:	79 f0       	breq	.+30     	; 0x48a0 <__fp_splitA+0x2a>
    4882:	87 95       	ror	r24
    4884:	08 95       	ret
    4886:	12 16       	cp	r1, r18
    4888:	13 06       	cpc	r1, r19
    488a:	14 06       	cpc	r1, r20
    488c:	55 1f       	adc	r21, r21
    488e:	f2 cf       	rjmp	.-28     	; 0x4874 <__fp_split3+0xe>
    4890:	46 95       	lsr	r20
    4892:	f1 df       	rcall	.-30     	; 0x4876 <__fp_splitA>
    4894:	08 c0       	rjmp	.+16     	; 0x48a6 <__fp_splitA+0x30>
    4896:	16 16       	cp	r1, r22
    4898:	17 06       	cpc	r1, r23
    489a:	18 06       	cpc	r1, r24
    489c:	99 1f       	adc	r25, r25
    489e:	f1 cf       	rjmp	.-30     	; 0x4882 <__fp_splitA+0xc>
    48a0:	86 95       	lsr	r24
    48a2:	71 05       	cpc	r23, r1
    48a4:	61 05       	cpc	r22, r1
    48a6:	08 94       	sec
    48a8:	08 95       	ret

000048aa <__fp_zero>:
    48aa:	e8 94       	clt

000048ac <__fp_szero>:
    48ac:	bb 27       	eor	r27, r27
    48ae:	66 27       	eor	r22, r22
    48b0:	77 27       	eor	r23, r23
    48b2:	cb 01       	movw	r24, r22
    48b4:	97 f9       	bld	r25, 7
    48b6:	08 95       	ret

000048b8 <__gesf2>:
    48b8:	8a df       	rcall	.-236    	; 0x47ce <__fp_cmp>
    48ba:	08 f4       	brcc	.+2      	; 0x48be <__gesf2+0x6>
    48bc:	8f ef       	ldi	r24, 0xFF	; 255
    48be:	08 95       	ret

000048c0 <log10>:
    48c0:	0a d0       	rcall	.+20     	; 0x48d6 <log>
    48c2:	29 ed       	ldi	r18, 0xD9	; 217
    48c4:	3b e5       	ldi	r19, 0x5B	; 91
    48c6:	4e ed       	ldi	r20, 0xDE	; 222
    48c8:	5e e3       	ldi	r21, 0x3E	; 62
    48ca:	45 c0       	rjmp	.+138    	; 0x4956 <__mulsf3>
    48cc:	0e f0       	brts	.+2      	; 0x48d0 <log10+0x10>
    48ce:	27 c1       	rjmp	.+590    	; 0x4b1e <__fp_mpack>
    48d0:	a8 cf       	rjmp	.-176    	; 0x4822 <__fp_nan>
    48d2:	68 94       	set
    48d4:	a0 cf       	rjmp	.-192    	; 0x4816 <__fp_inf>

000048d6 <log>:
    48d6:	cf df       	rcall	.-98     	; 0x4876 <__fp_splitA>
    48d8:	c8 f3       	brcs	.-14     	; 0x48cc <log10+0xc>
    48da:	99 23       	and	r25, r25
    48dc:	d1 f3       	breq	.-12     	; 0x48d2 <log10+0x12>
    48de:	c6 f3       	brts	.-16     	; 0x48d0 <log10+0x10>
    48e0:	df 93       	push	r29
    48e2:	cf 93       	push	r28
    48e4:	1f 93       	push	r17
    48e6:	0f 93       	push	r16
    48e8:	ff 92       	push	r15
    48ea:	c9 2f       	mov	r28, r25
    48ec:	dd 27       	eor	r29, r29
    48ee:	88 23       	and	r24, r24
    48f0:	2a f0       	brmi	.+10     	; 0x48fc <log+0x26>
    48f2:	21 97       	sbiw	r28, 0x01	; 1
    48f4:	66 0f       	add	r22, r22
    48f6:	77 1f       	adc	r23, r23
    48f8:	88 1f       	adc	r24, r24
    48fa:	da f7       	brpl	.-10     	; 0x48f2 <log+0x1c>
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	40 e8       	ldi	r20, 0x80	; 128
    4902:	5f eb       	ldi	r21, 0xBF	; 191
    4904:	9f e3       	ldi	r25, 0x3F	; 63
    4906:	88 39       	cpi	r24, 0x98	; 152
    4908:	20 f0       	brcs	.+8      	; 0x4912 <log+0x3c>
    490a:	80 3e       	cpi	r24, 0xE0	; 224
    490c:	30 f0       	brcs	.+12     	; 0x491a <log+0x44>
    490e:	21 96       	adiw	r28, 0x01	; 1
    4910:	8f 77       	andi	r24, 0x7F	; 127
    4912:	1f de       	rcall	.-962    	; 0x4552 <__addsf3>
    4914:	ea ef       	ldi	r30, 0xFA	; 250
    4916:	f1 e0       	ldi	r31, 0x01	; 1
    4918:	03 c0       	rjmp	.+6      	; 0x4920 <log+0x4a>
    491a:	1b de       	rcall	.-970    	; 0x4552 <__addsf3>
    491c:	e7 e2       	ldi	r30, 0x27	; 39
    491e:	f2 e0       	ldi	r31, 0x02	; 2
    4920:	0c d1       	rcall	.+536    	; 0x4b3a <__fp_powser>
    4922:	8b 01       	movw	r16, r22
    4924:	be 01       	movw	r22, r28
    4926:	ec 01       	movw	r28, r24
    4928:	fb 2e       	mov	r15, r27
    492a:	6f 57       	subi	r22, 0x7F	; 127
    492c:	71 09       	sbc	r23, r1
    492e:	75 95       	asr	r23
    4930:	77 1f       	adc	r23, r23
    4932:	88 0b       	sbc	r24, r24
    4934:	99 0b       	sbc	r25, r25
    4936:	10 df       	rcall	.-480    	; 0x4758 <__floatsisf>
    4938:	28 e1       	ldi	r18, 0x18	; 24
    493a:	32 e7       	ldi	r19, 0x72	; 114
    493c:	41 e3       	ldi	r20, 0x31	; 49
    493e:	5f e3       	ldi	r21, 0x3F	; 63
    4940:	16 d0       	rcall	.+44     	; 0x496e <__mulsf3x>
    4942:	af 2d       	mov	r26, r15
    4944:	98 01       	movw	r18, r16
    4946:	ae 01       	movw	r20, r28
    4948:	ff 90       	pop	r15
    494a:	0f 91       	pop	r16
    494c:	1f 91       	pop	r17
    494e:	cf 91       	pop	r28
    4950:	df 91       	pop	r29
    4952:	10 de       	rcall	.-992    	; 0x4574 <__addsf3x>
    4954:	77 cf       	rjmp	.-274    	; 0x4844 <__fp_round>

00004956 <__mulsf3>:
    4956:	0b d0       	rcall	.+22     	; 0x496e <__mulsf3x>
    4958:	75 cf       	rjmp	.-278    	; 0x4844 <__fp_round>
    495a:	66 df       	rcall	.-308    	; 0x4828 <__fp_pscA>
    495c:	28 f0       	brcs	.+10     	; 0x4968 <__mulsf3+0x12>
    495e:	6b df       	rcall	.-298    	; 0x4836 <__fp_pscB>
    4960:	18 f0       	brcs	.+6      	; 0x4968 <__mulsf3+0x12>
    4962:	95 23       	and	r25, r21
    4964:	09 f0       	breq	.+2      	; 0x4968 <__mulsf3+0x12>
    4966:	57 cf       	rjmp	.-338    	; 0x4816 <__fp_inf>
    4968:	5c cf       	rjmp	.-328    	; 0x4822 <__fp_nan>
    496a:	11 24       	eor	r1, r1
    496c:	9f cf       	rjmp	.-194    	; 0x48ac <__fp_szero>

0000496e <__mulsf3x>:
    496e:	7b df       	rcall	.-266    	; 0x4866 <__fp_split3>
    4970:	a0 f3       	brcs	.-24     	; 0x495a <__mulsf3+0x4>

00004972 <__mulsf3_pse>:
    4972:	95 9f       	mul	r25, r21
    4974:	d1 f3       	breq	.-12     	; 0x496a <__mulsf3+0x14>
    4976:	95 0f       	add	r25, r21
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	55 1f       	adc	r21, r21
    497c:	62 9f       	mul	r22, r18
    497e:	f0 01       	movw	r30, r0
    4980:	72 9f       	mul	r23, r18
    4982:	bb 27       	eor	r27, r27
    4984:	f0 0d       	add	r31, r0
    4986:	b1 1d       	adc	r27, r1
    4988:	63 9f       	mul	r22, r19
    498a:	aa 27       	eor	r26, r26
    498c:	f0 0d       	add	r31, r0
    498e:	b1 1d       	adc	r27, r1
    4990:	aa 1f       	adc	r26, r26
    4992:	64 9f       	mul	r22, r20
    4994:	66 27       	eor	r22, r22
    4996:	b0 0d       	add	r27, r0
    4998:	a1 1d       	adc	r26, r1
    499a:	66 1f       	adc	r22, r22
    499c:	82 9f       	mul	r24, r18
    499e:	22 27       	eor	r18, r18
    49a0:	b0 0d       	add	r27, r0
    49a2:	a1 1d       	adc	r26, r1
    49a4:	62 1f       	adc	r22, r18
    49a6:	73 9f       	mul	r23, r19
    49a8:	b0 0d       	add	r27, r0
    49aa:	a1 1d       	adc	r26, r1
    49ac:	62 1f       	adc	r22, r18
    49ae:	83 9f       	mul	r24, r19
    49b0:	a0 0d       	add	r26, r0
    49b2:	61 1d       	adc	r22, r1
    49b4:	22 1f       	adc	r18, r18
    49b6:	74 9f       	mul	r23, r20
    49b8:	33 27       	eor	r19, r19
    49ba:	a0 0d       	add	r26, r0
    49bc:	61 1d       	adc	r22, r1
    49be:	23 1f       	adc	r18, r19
    49c0:	84 9f       	mul	r24, r20
    49c2:	60 0d       	add	r22, r0
    49c4:	21 1d       	adc	r18, r1
    49c6:	82 2f       	mov	r24, r18
    49c8:	76 2f       	mov	r23, r22
    49ca:	6a 2f       	mov	r22, r26
    49cc:	11 24       	eor	r1, r1
    49ce:	9f 57       	subi	r25, 0x7F	; 127
    49d0:	50 40       	sbci	r21, 0x00	; 0
    49d2:	8a f0       	brmi	.+34     	; 0x49f6 <__mulsf3_pse+0x84>
    49d4:	e1 f0       	breq	.+56     	; 0x4a0e <__mulsf3_pse+0x9c>
    49d6:	88 23       	and	r24, r24
    49d8:	4a f0       	brmi	.+18     	; 0x49ec <__mulsf3_pse+0x7a>
    49da:	ee 0f       	add	r30, r30
    49dc:	ff 1f       	adc	r31, r31
    49de:	bb 1f       	adc	r27, r27
    49e0:	66 1f       	adc	r22, r22
    49e2:	77 1f       	adc	r23, r23
    49e4:	88 1f       	adc	r24, r24
    49e6:	91 50       	subi	r25, 0x01	; 1
    49e8:	50 40       	sbci	r21, 0x00	; 0
    49ea:	a9 f7       	brne	.-22     	; 0x49d6 <__mulsf3_pse+0x64>
    49ec:	9e 3f       	cpi	r25, 0xFE	; 254
    49ee:	51 05       	cpc	r21, r1
    49f0:	70 f0       	brcs	.+28     	; 0x4a0e <__mulsf3_pse+0x9c>
    49f2:	11 cf       	rjmp	.-478    	; 0x4816 <__fp_inf>
    49f4:	5b cf       	rjmp	.-330    	; 0x48ac <__fp_szero>
    49f6:	5f 3f       	cpi	r21, 0xFF	; 255
    49f8:	ec f3       	brlt	.-6      	; 0x49f4 <__mulsf3_pse+0x82>
    49fa:	98 3e       	cpi	r25, 0xE8	; 232
    49fc:	dc f3       	brlt	.-10     	; 0x49f4 <__mulsf3_pse+0x82>
    49fe:	86 95       	lsr	r24
    4a00:	77 95       	ror	r23
    4a02:	67 95       	ror	r22
    4a04:	b7 95       	ror	r27
    4a06:	f7 95       	ror	r31
    4a08:	e7 95       	ror	r30
    4a0a:	9f 5f       	subi	r25, 0xFF	; 255
    4a0c:	c1 f7       	brne	.-16     	; 0x49fe <__mulsf3_pse+0x8c>
    4a0e:	fe 2b       	or	r31, r30
    4a10:	88 0f       	add	r24, r24
    4a12:	91 1d       	adc	r25, r1
    4a14:	96 95       	lsr	r25
    4a16:	87 95       	ror	r24
    4a18:	97 f9       	bld	r25, 7
    4a1a:	08 95       	ret

00004a1c <pow>:
    4a1c:	fa 01       	movw	r30, r20
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	30 96       	adiw	r30, 0x00	; 0
    4a24:	21 05       	cpc	r18, r1
    4a26:	31 05       	cpc	r19, r1
    4a28:	99 f1       	breq	.+102    	; 0x4a90 <pow+0x74>
    4a2a:	61 15       	cp	r22, r1
    4a2c:	71 05       	cpc	r23, r1
    4a2e:	61 f4       	brne	.+24     	; 0x4a48 <pow+0x2c>
    4a30:	80 38       	cpi	r24, 0x80	; 128
    4a32:	bf e3       	ldi	r27, 0x3F	; 63
    4a34:	9b 07       	cpc	r25, r27
    4a36:	49 f1       	breq	.+82     	; 0x4a8a <pow+0x6e>
    4a38:	68 94       	set
    4a3a:	90 38       	cpi	r25, 0x80	; 128
    4a3c:	81 05       	cpc	r24, r1
    4a3e:	61 f0       	breq	.+24     	; 0x4a58 <pow+0x3c>
    4a40:	80 38       	cpi	r24, 0x80	; 128
    4a42:	bf ef       	ldi	r27, 0xFF	; 255
    4a44:	9b 07       	cpc	r25, r27
    4a46:	41 f0       	breq	.+16     	; 0x4a58 <pow+0x3c>
    4a48:	99 23       	and	r25, r25
    4a4a:	42 f5       	brpl	.+80     	; 0x4a9c <pow+0x80>
    4a4c:	ff 3f       	cpi	r31, 0xFF	; 255
    4a4e:	e1 05       	cpc	r30, r1
    4a50:	31 05       	cpc	r19, r1
    4a52:	21 05       	cpc	r18, r1
    4a54:	11 f1       	breq	.+68     	; 0x4a9a <pow+0x7e>
    4a56:	e8 94       	clt
    4a58:	08 94       	sec
    4a5a:	e7 95       	ror	r30
    4a5c:	d9 01       	movw	r26, r18
    4a5e:	aa 23       	and	r26, r26
    4a60:	29 f4       	brne	.+10     	; 0x4a6c <pow+0x50>
    4a62:	ab 2f       	mov	r26, r27
    4a64:	be 2f       	mov	r27, r30
    4a66:	f8 5f       	subi	r31, 0xF8	; 248
    4a68:	d0 f3       	brcs	.-12     	; 0x4a5e <pow+0x42>
    4a6a:	10 c0       	rjmp	.+32     	; 0x4a8c <pow+0x70>
    4a6c:	ff 5f       	subi	r31, 0xFF	; 255
    4a6e:	70 f4       	brcc	.+28     	; 0x4a8c <pow+0x70>
    4a70:	a6 95       	lsr	r26
    4a72:	e0 f7       	brcc	.-8      	; 0x4a6c <pow+0x50>
    4a74:	f7 39       	cpi	r31, 0x97	; 151
    4a76:	50 f0       	brcs	.+20     	; 0x4a8c <pow+0x70>
    4a78:	19 f0       	breq	.+6      	; 0x4a80 <pow+0x64>
    4a7a:	ff 3a       	cpi	r31, 0xAF	; 175
    4a7c:	38 f4       	brcc	.+14     	; 0x4a8c <pow+0x70>
    4a7e:	9f 77       	andi	r25, 0x7F	; 127
    4a80:	9f 93       	push	r25
    4a82:	0c d0       	rcall	.+24     	; 0x4a9c <pow+0x80>
    4a84:	0f 90       	pop	r0
    4a86:	07 fc       	sbrc	r0, 7
    4a88:	90 58       	subi	r25, 0x80	; 128
    4a8a:	08 95       	ret
    4a8c:	3e f0       	brts	.+14     	; 0x4a9c <pow+0x80>
    4a8e:	c9 ce       	rjmp	.-622    	; 0x4822 <__fp_nan>
    4a90:	60 e0       	ldi	r22, 0x00	; 0
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	80 e8       	ldi	r24, 0x80	; 128
    4a96:	9f e3       	ldi	r25, 0x3F	; 63
    4a98:	08 95       	ret
    4a9a:	4f e7       	ldi	r20, 0x7F	; 127
    4a9c:	9f 77       	andi	r25, 0x7F	; 127
    4a9e:	5f 93       	push	r21
    4aa0:	4f 93       	push	r20
    4aa2:	3f 93       	push	r19
    4aa4:	2f 93       	push	r18
    4aa6:	17 df       	rcall	.-466    	; 0x48d6 <log>
    4aa8:	2f 91       	pop	r18
    4aaa:	3f 91       	pop	r19
    4aac:	4f 91       	pop	r20
    4aae:	5f 91       	pop	r21
    4ab0:	52 df       	rcall	.-348    	; 0x4956 <__mulsf3>
    4ab2:	09 c0       	rjmp	.+18     	; 0x4ac6 <exp>

00004ab4 <__unordsf2>:
    4ab4:	8c de       	rcall	.-744    	; 0x47ce <__fp_cmp>
    4ab6:	88 0b       	sbc	r24, r24
    4ab8:	99 0b       	sbc	r25, r25
    4aba:	08 95       	ret
    4abc:	19 f4       	brne	.+6      	; 0x4ac4 <__unordsf2+0x10>
    4abe:	0e f0       	brts	.+2      	; 0x4ac2 <__unordsf2+0xe>
    4ac0:	aa ce       	rjmp	.-684    	; 0x4816 <__fp_inf>
    4ac2:	f3 ce       	rjmp	.-538    	; 0x48aa <__fp_zero>
    4ac4:	ae ce       	rjmp	.-676    	; 0x4822 <__fp_nan>

00004ac6 <exp>:
    4ac6:	d7 de       	rcall	.-594    	; 0x4876 <__fp_splitA>
    4ac8:	c8 f3       	brcs	.-14     	; 0x4abc <__unordsf2+0x8>
    4aca:	96 38       	cpi	r25, 0x86	; 134
    4acc:	c0 f7       	brcc	.-16     	; 0x4abe <__unordsf2+0xa>
    4ace:	07 f8       	bld	r0, 7
    4ad0:	0f 92       	push	r0
    4ad2:	e8 94       	clt
    4ad4:	2b e3       	ldi	r18, 0x3B	; 59
    4ad6:	3a ea       	ldi	r19, 0xAA	; 170
    4ad8:	48 eb       	ldi	r20, 0xB8	; 184
    4ada:	5f e7       	ldi	r21, 0x7F	; 127
    4adc:	4a df       	rcall	.-364    	; 0x4972 <__mulsf3_pse>
    4ade:	0f 92       	push	r0
    4ae0:	0f 92       	push	r0
    4ae2:	0f 92       	push	r0
    4ae4:	4d b7       	in	r20, 0x3d	; 61
    4ae6:	5e b7       	in	r21, 0x3e	; 62
    4ae8:	0f 92       	push	r0
    4aea:	89 d0       	rcall	.+274    	; 0x4bfe <modf>
    4aec:	e4 e5       	ldi	r30, 0x54	; 84
    4aee:	f2 e0       	ldi	r31, 0x02	; 2
    4af0:	24 d0       	rcall	.+72     	; 0x4b3a <__fp_powser>
    4af2:	4f 91       	pop	r20
    4af4:	5f 91       	pop	r21
    4af6:	ef 91       	pop	r30
    4af8:	ff 91       	pop	r31
    4afa:	e5 95       	asr	r30
    4afc:	ee 1f       	adc	r30, r30
    4afe:	ff 1f       	adc	r31, r31
    4b00:	49 f0       	breq	.+18     	; 0x4b14 <exp+0x4e>
    4b02:	fe 57       	subi	r31, 0x7E	; 126
    4b04:	e0 68       	ori	r30, 0x80	; 128
    4b06:	44 27       	eor	r20, r20
    4b08:	ee 0f       	add	r30, r30
    4b0a:	44 1f       	adc	r20, r20
    4b0c:	fa 95       	dec	r31
    4b0e:	e1 f7       	brne	.-8      	; 0x4b08 <exp+0x42>
    4b10:	41 95       	neg	r20
    4b12:	55 0b       	sbc	r21, r21
    4b14:	40 d0       	rcall	.+128    	; 0x4b96 <ldexp>
    4b16:	0f 90       	pop	r0
    4b18:	07 fe       	sbrs	r0, 7
    4b1a:	34 c0       	rjmp	.+104    	; 0x4b84 <inverse>
    4b1c:	08 95       	ret

00004b1e <__fp_mpack>:
    4b1e:	9f 3f       	cpi	r25, 0xFF	; 255
    4b20:	31 f0       	breq	.+12     	; 0x4b2e <__fp_mpack_finite+0xc>

00004b22 <__fp_mpack_finite>:
    4b22:	91 50       	subi	r25, 0x01	; 1
    4b24:	20 f4       	brcc	.+8      	; 0x4b2e <__fp_mpack_finite+0xc>
    4b26:	87 95       	ror	r24
    4b28:	77 95       	ror	r23
    4b2a:	67 95       	ror	r22
    4b2c:	b7 95       	ror	r27
    4b2e:	88 0f       	add	r24, r24
    4b30:	91 1d       	adc	r25, r1
    4b32:	96 95       	lsr	r25
    4b34:	87 95       	ror	r24
    4b36:	97 f9       	bld	r25, 7
    4b38:	08 95       	ret

00004b3a <__fp_powser>:
    4b3a:	df 93       	push	r29
    4b3c:	cf 93       	push	r28
    4b3e:	1f 93       	push	r17
    4b40:	0f 93       	push	r16
    4b42:	ff 92       	push	r15
    4b44:	ef 92       	push	r14
    4b46:	df 92       	push	r13
    4b48:	7b 01       	movw	r14, r22
    4b4a:	8c 01       	movw	r16, r24
    4b4c:	68 94       	set
    4b4e:	05 c0       	rjmp	.+10     	; 0x4b5a <__fp_powser+0x20>
    4b50:	da 2e       	mov	r13, r26
    4b52:	ef 01       	movw	r28, r30
    4b54:	0c df       	rcall	.-488    	; 0x496e <__mulsf3x>
    4b56:	fe 01       	movw	r30, r28
    4b58:	e8 94       	clt
    4b5a:	a5 91       	lpm	r26, Z+
    4b5c:	25 91       	lpm	r18, Z+
    4b5e:	35 91       	lpm	r19, Z+
    4b60:	45 91       	lpm	r20, Z+
    4b62:	55 91       	lpm	r21, Z+
    4b64:	ae f3       	brts	.-22     	; 0x4b50 <__fp_powser+0x16>
    4b66:	ef 01       	movw	r28, r30
    4b68:	05 dd       	rcall	.-1526   	; 0x4574 <__addsf3x>
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	97 01       	movw	r18, r14
    4b6e:	a8 01       	movw	r20, r16
    4b70:	da 94       	dec	r13
    4b72:	79 f7       	brne	.-34     	; 0x4b52 <__fp_powser+0x18>
    4b74:	df 90       	pop	r13
    4b76:	ef 90       	pop	r14
    4b78:	ff 90       	pop	r15
    4b7a:	0f 91       	pop	r16
    4b7c:	1f 91       	pop	r17
    4b7e:	cf 91       	pop	r28
    4b80:	df 91       	pop	r29
    4b82:	08 95       	ret

00004b84 <inverse>:
    4b84:	9b 01       	movw	r18, r22
    4b86:	ac 01       	movw	r20, r24
    4b88:	60 e0       	ldi	r22, 0x00	; 0
    4b8a:	70 e0       	ldi	r23, 0x00	; 0
    4b8c:	80 e8       	ldi	r24, 0x80	; 128
    4b8e:	9f e3       	ldi	r25, 0x3F	; 63
    4b90:	48 cd       	rjmp	.-1392   	; 0x4622 <__divsf3>
    4b92:	41 ce       	rjmp	.-894    	; 0x4816 <__fp_inf>
    4b94:	c4 cf       	rjmp	.-120    	; 0x4b1e <__fp_mpack>

00004b96 <ldexp>:
    4b96:	6f de       	rcall	.-802    	; 0x4876 <__fp_splitA>
    4b98:	e8 f3       	brcs	.-6      	; 0x4b94 <inverse+0x10>
    4b9a:	99 23       	and	r25, r25
    4b9c:	d9 f3       	breq	.-10     	; 0x4b94 <inverse+0x10>
    4b9e:	94 0f       	add	r25, r20
    4ba0:	51 1d       	adc	r21, r1
    4ba2:	bb f3       	brvs	.-18     	; 0x4b92 <inverse+0xe>
    4ba4:	91 50       	subi	r25, 0x01	; 1
    4ba6:	50 40       	sbci	r21, 0x00	; 0
    4ba8:	94 f0       	brlt	.+36     	; 0x4bce <ldexp+0x38>
    4baa:	59 f0       	breq	.+22     	; 0x4bc2 <ldexp+0x2c>
    4bac:	88 23       	and	r24, r24
    4bae:	32 f0       	brmi	.+12     	; 0x4bbc <ldexp+0x26>
    4bb0:	66 0f       	add	r22, r22
    4bb2:	77 1f       	adc	r23, r23
    4bb4:	88 1f       	adc	r24, r24
    4bb6:	91 50       	subi	r25, 0x01	; 1
    4bb8:	50 40       	sbci	r21, 0x00	; 0
    4bba:	c1 f7       	brne	.-16     	; 0x4bac <ldexp+0x16>
    4bbc:	9e 3f       	cpi	r25, 0xFE	; 254
    4bbe:	51 05       	cpc	r21, r1
    4bc0:	44 f7       	brge	.-48     	; 0x4b92 <inverse+0xe>
    4bc2:	88 0f       	add	r24, r24
    4bc4:	91 1d       	adc	r25, r1
    4bc6:	96 95       	lsr	r25
    4bc8:	87 95       	ror	r24
    4bca:	97 f9       	bld	r25, 7
    4bcc:	08 95       	ret
    4bce:	5f 3f       	cpi	r21, 0xFF	; 255
    4bd0:	ac f0       	brlt	.+42     	; 0x4bfc <ldexp+0x66>
    4bd2:	98 3e       	cpi	r25, 0xE8	; 232
    4bd4:	9c f0       	brlt	.+38     	; 0x4bfc <ldexp+0x66>
    4bd6:	bb 27       	eor	r27, r27
    4bd8:	86 95       	lsr	r24
    4bda:	77 95       	ror	r23
    4bdc:	67 95       	ror	r22
    4bde:	b7 95       	ror	r27
    4be0:	08 f4       	brcc	.+2      	; 0x4be4 <ldexp+0x4e>
    4be2:	b1 60       	ori	r27, 0x01	; 1
    4be4:	93 95       	inc	r25
    4be6:	c1 f7       	brne	.-16     	; 0x4bd8 <ldexp+0x42>
    4be8:	bb 0f       	add	r27, r27
    4bea:	58 f7       	brcc	.-42     	; 0x4bc2 <ldexp+0x2c>
    4bec:	11 f4       	brne	.+4      	; 0x4bf2 <ldexp+0x5c>
    4bee:	60 ff       	sbrs	r22, 0
    4bf0:	e8 cf       	rjmp	.-48     	; 0x4bc2 <ldexp+0x2c>
    4bf2:	6f 5f       	subi	r22, 0xFF	; 255
    4bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bfa:	e3 cf       	rjmp	.-58     	; 0x4bc2 <ldexp+0x2c>
    4bfc:	57 ce       	rjmp	.-850    	; 0x48ac <__fp_szero>

00004bfe <modf>:
    4bfe:	fa 01       	movw	r30, r20
    4c00:	dc 01       	movw	r26, r24
    4c02:	aa 0f       	add	r26, r26
    4c04:	bb 1f       	adc	r27, r27
    4c06:	9b 01       	movw	r18, r22
    4c08:	ac 01       	movw	r20, r24
    4c0a:	bf 57       	subi	r27, 0x7F	; 127
    4c0c:	28 f4       	brcc	.+10     	; 0x4c18 <modf+0x1a>
    4c0e:	22 27       	eor	r18, r18
    4c10:	33 27       	eor	r19, r19
    4c12:	44 27       	eor	r20, r20
    4c14:	50 78       	andi	r21, 0x80	; 128
    4c16:	1f c0       	rjmp	.+62     	; 0x4c56 <modf+0x58>
    4c18:	b7 51       	subi	r27, 0x17	; 23
    4c1a:	88 f4       	brcc	.+34     	; 0x4c3e <modf+0x40>
    4c1c:	ab 2f       	mov	r26, r27
    4c1e:	00 24       	eor	r0, r0
    4c20:	46 95       	lsr	r20
    4c22:	37 95       	ror	r19
    4c24:	27 95       	ror	r18
    4c26:	01 1c       	adc	r0, r1
    4c28:	a3 95       	inc	r26
    4c2a:	d2 f3       	brmi	.-12     	; 0x4c20 <modf+0x22>
    4c2c:	00 20       	and	r0, r0
    4c2e:	69 f0       	breq	.+26     	; 0x4c4a <modf+0x4c>
    4c30:	22 0f       	add	r18, r18
    4c32:	33 1f       	adc	r19, r19
    4c34:	44 1f       	adc	r20, r20
    4c36:	b3 95       	inc	r27
    4c38:	da f3       	brmi	.-10     	; 0x4c30 <modf+0x32>
    4c3a:	0d d0       	rcall	.+26     	; 0x4c56 <modf+0x58>
    4c3c:	89 cc       	rjmp	.-1774   	; 0x4550 <__subsf3>
    4c3e:	61 30       	cpi	r22, 0x01	; 1
    4c40:	71 05       	cpc	r23, r1
    4c42:	a0 e8       	ldi	r26, 0x80	; 128
    4c44:	8a 07       	cpc	r24, r26
    4c46:	b9 46       	sbci	r27, 0x69	; 105
    4c48:	30 f4       	brcc	.+12     	; 0x4c56 <modf+0x58>
    4c4a:	9b 01       	movw	r18, r22
    4c4c:	ac 01       	movw	r20, r24
    4c4e:	66 27       	eor	r22, r22
    4c50:	77 27       	eor	r23, r23
    4c52:	88 27       	eor	r24, r24
    4c54:	90 78       	andi	r25, 0x80	; 128
    4c56:	30 96       	adiw	r30, 0x00	; 0
    4c58:	21 f0       	breq	.+8      	; 0x4c62 <modf+0x64>
    4c5a:	20 83       	st	Z, r18
    4c5c:	31 83       	std	Z+1, r19	; 0x01
    4c5e:	42 83       	std	Z+2, r20	; 0x02
    4c60:	53 83       	std	Z+3, r21	; 0x03
    4c62:	08 95       	ret

00004c64 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4c64:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <abort>

00004c68 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4c68:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4c6a:	91 8d       	ldd	r25, Z+25	; 0x19
    4c6c:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c6e:	89 2f       	mov	r24, r25
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	80 5c       	subi	r24, 0xC0	; 192
    4c74:	9f 4f       	sbci	r25, 0xFF	; 255
    4c76:	82 1b       	sub	r24, r18
    4c78:	91 09       	sbc	r25, r1
}
    4c7a:	8f 73       	andi	r24, 0x3F	; 63
    4c7c:	99 27       	eor	r25, r25
    4c7e:	08 95       	ret

00004c80 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4c80:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4c82:	91 8d       	ldd	r25, Z+25	; 0x19
    4c84:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c86:	98 17       	cp	r25, r24
    4c88:	31 f0       	breq	.+12     	; 0x4c96 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4c8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c8c:	e8 0f       	add	r30, r24
    4c8e:	f1 1d       	adc	r31, r1
    4c90:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4c96:	8f ef       	ldi	r24, 0xFF	; 255
    4c98:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4c9a:	08 95       	ret

00004c9c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4c9c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4c9e:	91 8d       	ldd	r25, Z+25	; 0x19
    4ca0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ca2:	98 17       	cp	r25, r24
    4ca4:	61 f0       	breq	.+24     	; 0x4cbe <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4ca6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ca8:	df 01       	movw	r26, r30
    4caa:	a8 0f       	add	r26, r24
    4cac:	b1 1d       	adc	r27, r1
    4cae:	5d 96       	adiw	r26, 0x1d	; 29
    4cb0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4cb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4cb4:	9f 5f       	subi	r25, 0xFF	; 255
    4cb6:	9f 73       	andi	r25, 0x3F	; 63
    4cb8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4cbe:	8f ef       	ldi	r24, 0xFF	; 255
    4cc0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4cc2:	08 95       	ret

00004cc4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4cc4:	81 eb       	ldi	r24, 0xB1	; 177
    4cc6:	97 e2       	ldi	r25, 0x27	; 39
    4cc8:	89 2b       	or	r24, r25
    4cca:	41 f0       	breq	.+16     	; 0x4cdc <_Z14serialEventRunv+0x18>
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	89 2b       	or	r24, r25
    4cd2:	21 f0       	breq	.+8      	; 0x4cdc <_Z14serialEventRunv+0x18>
    4cd4:	46 d1       	rcall	.+652    	; 0x4f62 <_Z17Serial0_availablev>
    4cd6:	81 11       	cpse	r24, r1
    4cd8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4cdc:	08 95       	ret

00004cde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4cde:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4ce0:	84 8d       	ldd	r24, Z+28	; 0x1c
    4ce2:	df 01       	movw	r26, r30
    4ce4:	a8 0f       	add	r26, r24
    4ce6:	b1 1d       	adc	r27, r1
    4ce8:	a3 5a       	subi	r26, 0xA3	; 163
    4cea:	bf 4f       	sbci	r27, 0xFF	; 255
    4cec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4cee:	84 8d       	ldd	r24, Z+28	; 0x1c
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	8f 73       	andi	r24, 0x3F	; 63
    4cf6:	99 27       	eor	r25, r25
    4cf8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    4cfa:	a6 89       	ldd	r26, Z+22	; 0x16
    4cfc:	b7 89       	ldd	r27, Z+23	; 0x17
    4cfe:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4d00:	a0 89       	ldd	r26, Z+16	; 0x10
    4d02:	b1 89       	ldd	r27, Z+17	; 0x11
    4d04:	8c 91       	ld	r24, X
    4d06:	80 64       	ori	r24, 0x40	; 64
    4d08:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    4d0a:	93 8d       	ldd	r25, Z+27	; 0x1b
    4d0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    4d0e:	98 13       	cpse	r25, r24
    4d10:	06 c0       	rjmp	.+12     	; 0x4d1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4d12:	02 88       	ldd	r0, Z+18	; 0x12
    4d14:	f3 89       	ldd	r31, Z+19	; 0x13
    4d16:	e0 2d       	mov	r30, r0
    4d18:	80 81       	ld	r24, Z
    4d1a:	8f 7d       	andi	r24, 0xDF	; 223
    4d1c:	80 83       	st	Z, r24
    4d1e:	08 95       	ret

00004d20 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4d26:	88 8d       	ldd	r24, Y+24	; 0x18
    4d28:	88 23       	and	r24, r24
    4d2a:	c1 f0       	breq	.+48     	; 0x4d5c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4d2c:	ea 89       	ldd	r30, Y+18	; 0x12
    4d2e:	fb 89       	ldd	r31, Y+19	; 0x13
    4d30:	80 81       	ld	r24, Z
    4d32:	85 fd       	sbrc	r24, 5
    4d34:	05 c0       	rjmp	.+10     	; 0x4d40 <_ZN14HardwareSerial5flushEv+0x20>
    4d36:	a8 89       	ldd	r26, Y+16	; 0x10
    4d38:	b9 89       	ldd	r27, Y+17	; 0x11
    4d3a:	8c 91       	ld	r24, X
    4d3c:	86 fd       	sbrc	r24, 6
    4d3e:	0e c0       	rjmp	.+28     	; 0x4d5c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4d40:	0f b6       	in	r0, 0x3f	; 63
    4d42:	07 fc       	sbrc	r0, 7
    4d44:	f5 cf       	rjmp	.-22     	; 0x4d30 <_ZN14HardwareSerial5flushEv+0x10>
    4d46:	80 81       	ld	r24, Z
    4d48:	85 ff       	sbrs	r24, 5
    4d4a:	f2 cf       	rjmp	.-28     	; 0x4d30 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4d4c:	a8 89       	ldd	r26, Y+16	; 0x10
    4d4e:	b9 89       	ldd	r27, Y+17	; 0x11
    4d50:	8c 91       	ld	r24, X
    4d52:	85 ff       	sbrs	r24, 5
    4d54:	ed cf       	rjmp	.-38     	; 0x4d30 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4d56:	ce 01       	movw	r24, r28
    4d58:	c2 df       	rcall	.-124    	; 0x4cde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4d5a:	e8 cf       	rjmp	.-48     	; 0x4d2c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	08 95       	ret

00004d62 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	ec 01       	movw	r28, r24
  _written = true;
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4d74:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d78:	98 13       	cpse	r25, r24
    4d7a:	05 c0       	rjmp	.+10     	; 0x4d86 <_ZN14HardwareSerial5writeEh+0x24>
    4d7c:	e8 89       	ldd	r30, Y+16	; 0x10
    4d7e:	f9 89       	ldd	r31, Y+17	; 0x11
    4d80:	80 81       	ld	r24, Z
    4d82:	85 fd       	sbrc	r24, 5
    4d84:	23 c0       	rjmp	.+70     	; 0x4dcc <_ZN14HardwareSerial5writeEh+0x6a>
    4d86:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4d88:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4d8a:	10 e0       	ldi	r17, 0x00	; 0
    4d8c:	0f 5f       	subi	r16, 0xFF	; 255
    4d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d90:	0f 73       	andi	r16, 0x3F	; 63
    4d92:	11 27       	eor	r17, r17
    4d94:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4d96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d98:	e8 12       	cpse	r14, r24
    4d9a:	0b c0       	rjmp	.+22     	; 0x4db2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	07 fc       	sbrc	r0, 7
    4da0:	fa cf       	rjmp	.-12     	; 0x4d96 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4da2:	e8 89       	ldd	r30, Y+16	; 0x10
    4da4:	f9 89       	ldd	r31, Y+17	; 0x11
    4da6:	80 81       	ld	r24, Z
    4da8:	85 ff       	sbrs	r24, 5
    4daa:	f5 cf       	rjmp	.-22     	; 0x4d96 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4dac:	ce 01       	movw	r24, r28
    4dae:	97 df       	rcall	.-210    	; 0x4cde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4db0:	f2 cf       	rjmp	.-28     	; 0x4d96 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4db4:	fe 01       	movw	r30, r28
    4db6:	e8 0f       	add	r30, r24
    4db8:	f1 1d       	adc	r31, r1
    4dba:	e3 5a       	subi	r30, 0xA3	; 163
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    4dc0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    4dc2:	ea 89       	ldd	r30, Y+18	; 0x12
    4dc4:	fb 89       	ldd	r31, Y+19	; 0x13
    4dc6:	80 81       	ld	r24, Z
    4dc8:	80 62       	ori	r24, 0x20	; 32
    4dca:	07 c0       	rjmp	.+14     	; 0x4dda <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4dcc:	ee 89       	ldd	r30, Y+22	; 0x16
    4dce:	ff 89       	ldd	r31, Y+23	; 0x17
    4dd0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4dd2:	e8 89       	ldd	r30, Y+16	; 0x10
    4dd4:	f9 89       	ldd	r31, Y+17	; 0x11
    4dd6:	80 81       	ld	r24, Z
    4dd8:	80 64       	ori	r24, 0x40	; 64
    4dda:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4ddc:	81 e0       	ldi	r24, 0x01	; 1
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	df 91       	pop	r29
    4de2:	cf 91       	pop	r28
    4de4:	1f 91       	pop	r17
    4de6:	0f 91       	pop	r16
    4de8:	ff 90       	pop	r15
    4dea:	ef 90       	pop	r14
    4dec:	08 95       	ret

00004dee <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	1f 93       	push	r17
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	ec 01       	movw	r28, r24
    4dfe:	6a 01       	movw	r12, r20
    4e00:	7b 01       	movw	r14, r22
    4e02:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4e04:	e8 89       	ldd	r30, Y+16	; 0x10
    4e06:	f9 89       	ldd	r31, Y+17	; 0x11
    4e08:	82 e0       	ldi	r24, 0x02	; 2
    4e0a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4e0c:	41 15       	cp	r20, r1
    4e0e:	51 4e       	sbci	r21, 0xE1	; 225
    4e10:	61 05       	cpc	r22, r1
    4e12:	71 05       	cpc	r23, r1
    4e14:	a9 f0       	breq	.+42     	; 0x4e40 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4e16:	60 e0       	ldi	r22, 0x00	; 0
    4e18:	79 e0       	ldi	r23, 0x09	; 9
    4e1a:	8d e3       	ldi	r24, 0x3D	; 61
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	a7 01       	movw	r20, r14
    4e20:	96 01       	movw	r18, r12
    4e22:	04 d5       	rcall	.+2568   	; 0x582c <__udivmodsi4>
    4e24:	da 01       	movw	r26, r20
    4e26:	c9 01       	movw	r24, r18
    4e28:	01 97       	sbiw	r24, 0x01	; 1
    4e2a:	a1 09       	sbc	r26, r1
    4e2c:	b1 09       	sbc	r27, r1
    4e2e:	b6 95       	lsr	r27
    4e30:	a7 95       	ror	r26
    4e32:	97 95       	ror	r25
    4e34:	87 95       	ror	r24
    4e36:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4e38:	41 15       	cp	r20, r1
    4e3a:	80 e1       	ldi	r24, 0x10	; 16
    4e3c:	58 07       	cpc	r21, r24
    4e3e:	a0 f0       	brcs	.+40     	; 0x4e68 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4e40:	e8 89       	ldd	r30, Y+16	; 0x10
    4e42:	f9 89       	ldd	r31, Y+17	; 0x11
    4e44:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4e46:	60 e8       	ldi	r22, 0x80	; 128
    4e48:	74 e8       	ldi	r23, 0x84	; 132
    4e4a:	8e e1       	ldi	r24, 0x1E	; 30
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	a7 01       	movw	r20, r14
    4e50:	96 01       	movw	r18, r12
    4e52:	ec d4       	rcall	.+2520   	; 0x582c <__udivmodsi4>
    4e54:	ba 01       	movw	r22, r20
    4e56:	a9 01       	movw	r20, r18
    4e58:	41 50       	subi	r20, 0x01	; 1
    4e5a:	51 09       	sbc	r21, r1
    4e5c:	61 09       	sbc	r22, r1
    4e5e:	71 09       	sbc	r23, r1
    4e60:	76 95       	lsr	r23
    4e62:	67 95       	ror	r22
    4e64:	57 95       	ror	r21
    4e66:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4e68:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e6a:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e6c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4e6e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4e70:	ff 85       	ldd	r31, Y+15	; 0x0f
    4e72:	40 83       	st	Z, r20

  _written = false;
    4e74:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4e76:	ec 89       	ldd	r30, Y+20	; 0x14
    4e78:	fd 89       	ldd	r31, Y+21	; 0x15
    4e7a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4e7c:	ea 89       	ldd	r30, Y+18	; 0x12
    4e7e:	fb 89       	ldd	r31, Y+19	; 0x13
    4e80:	80 81       	ld	r24, Z
    4e82:	80 61       	ori	r24, 0x10	; 16
    4e84:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4e86:	ea 89       	ldd	r30, Y+18	; 0x12
    4e88:	fb 89       	ldd	r31, Y+19	; 0x13
    4e8a:	80 81       	ld	r24, Z
    4e8c:	88 60       	ori	r24, 0x08	; 8
    4e8e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4e90:	ea 89       	ldd	r30, Y+18	; 0x12
    4e92:	fb 89       	ldd	r31, Y+19	; 0x13
    4e94:	80 81       	ld	r24, Z
    4e96:	80 68       	ori	r24, 0x80	; 128
    4e98:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4e9a:	ea 89       	ldd	r30, Y+18	; 0x12
    4e9c:	fb 89       	ldd	r31, Y+19	; 0x13
    4e9e:	80 81       	ld	r24, Z
    4ea0:	8f 7d       	andi	r24, 0xDF	; 223
    4ea2:	80 83       	st	Z, r24
}
    4ea4:	df 91       	pop	r29
    4ea6:	cf 91       	pop	r28
    4ea8:	1f 91       	pop	r17
    4eaa:	ff 90       	pop	r15
    4eac:	ef 90       	pop	r14
    4eae:	df 90       	pop	r13
    4eb0:	cf 90       	pop	r12
    4eb2:	08 95       	ret

00004eb4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4eb4:	1f 92       	push	r1
    4eb6:	0f 92       	push	r0
    4eb8:	0f b6       	in	r0, 0x3f	; 63
    4eba:	0f 92       	push	r0
    4ebc:	11 24       	eor	r1, r1
    4ebe:	2f 93       	push	r18
    4ec0:	8f 93       	push	r24
    4ec2:	9f 93       	push	r25
    4ec4:	ef 93       	push	r30
    4ec6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4ec8:	e0 91 54 07 	lds	r30, 0x0754	; 0x800754 <Serial+0x10>
    4ecc:	f0 91 55 07 	lds	r31, 0x0755	; 0x800755 <Serial+0x11>
    4ed0:	80 81       	ld	r24, Z
    4ed2:	e0 91 5a 07 	lds	r30, 0x075A	; 0x80075a <Serial+0x16>
    4ed6:	f0 91 5b 07 	lds	r31, 0x075B	; 0x80075b <Serial+0x17>
    4eda:	82 fd       	sbrc	r24, 2
    4edc:	12 c0       	rjmp	.+36     	; 0x4f02 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4ede:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4ee0:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <Serial+0x19>
    4ee4:	8f 5f       	subi	r24, 0xFF	; 255
    4ee6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4ee8:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <Serial+0x1a>
    4eec:	82 17       	cp	r24, r18
    4eee:	51 f0       	breq	.+20     	; 0x4f04 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4ef0:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <Serial+0x19>
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	ec 5b       	subi	r30, 0xBC	; 188
    4ef8:	f8 4f       	sbci	r31, 0xF8	; 248
    4efa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4efc:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <Serial+0x19>
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4f02:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4f04:	ff 91       	pop	r31
    4f06:	ef 91       	pop	r30
    4f08:	9f 91       	pop	r25
    4f0a:	8f 91       	pop	r24
    4f0c:	2f 91       	pop	r18
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	0f 90       	pop	r0
    4f14:	1f 90       	pop	r1
    4f16:	18 95       	reti

00004f18 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4f18:	1f 92       	push	r1
    4f1a:	0f 92       	push	r0
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	0f 92       	push	r0
    4f20:	11 24       	eor	r1, r1
    4f22:	2f 93       	push	r18
    4f24:	3f 93       	push	r19
    4f26:	4f 93       	push	r20
    4f28:	5f 93       	push	r21
    4f2a:	6f 93       	push	r22
    4f2c:	7f 93       	push	r23
    4f2e:	8f 93       	push	r24
    4f30:	9f 93       	push	r25
    4f32:	af 93       	push	r26
    4f34:	bf 93       	push	r27
    4f36:	ef 93       	push	r30
    4f38:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4f3a:	84 e4       	ldi	r24, 0x44	; 68
    4f3c:	97 e0       	ldi	r25, 0x07	; 7
    4f3e:	cf de       	rcall	.-610    	; 0x4cde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4f40:	ff 91       	pop	r31
    4f42:	ef 91       	pop	r30
    4f44:	bf 91       	pop	r27
    4f46:	af 91       	pop	r26
    4f48:	9f 91       	pop	r25
    4f4a:	8f 91       	pop	r24
    4f4c:	7f 91       	pop	r23
    4f4e:	6f 91       	pop	r22
    4f50:	5f 91       	pop	r21
    4f52:	4f 91       	pop	r20
    4f54:	3f 91       	pop	r19
    4f56:	2f 91       	pop	r18
    4f58:	0f 90       	pop	r0
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	0f 90       	pop	r0
    4f5e:	1f 90       	pop	r1
    4f60:	18 95       	reti

00004f62 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4f62:	84 e4       	ldi	r24, 0x44	; 68
    4f64:	97 e0       	ldi	r25, 0x07	; 7
    4f66:	80 de       	rcall	.-768    	; 0x4c68 <_ZN14HardwareSerial9availableEv>
    4f68:	21 e0       	ldi	r18, 0x01	; 1
    4f6a:	89 2b       	or	r24, r25
    4f6c:	09 f4       	brne	.+2      	; 0x4f70 <_Z17Serial0_availablev+0xe>
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
}
    4f70:	82 2f       	mov	r24, r18
    4f72:	08 95       	ret

00004f74 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4f74:	e4 e4       	ldi	r30, 0x44	; 68
    4f76:	f7 e0       	ldi	r31, 0x07	; 7
    4f78:	13 82       	std	Z+3, r1	; 0x03
    4f7a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4f7c:	88 ee       	ldi	r24, 0xE8	; 232
    4f7e:	93 e0       	ldi	r25, 0x03	; 3
    4f80:	a0 e0       	ldi	r26, 0x00	; 0
    4f82:	b0 e0       	ldi	r27, 0x00	; 0
    4f84:	84 83       	std	Z+4, r24	; 0x04
    4f86:	95 83       	std	Z+5, r25	; 0x05
    4f88:	a6 83       	std	Z+6, r26	; 0x06
    4f8a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4f8c:	89 e8       	ldi	r24, 0x89	; 137
    4f8e:	91 e0       	ldi	r25, 0x01	; 1
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
    4f94:	85 ec       	ldi	r24, 0xC5	; 197
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	95 87       	std	Z+13, r25	; 0x0d
    4f9a:	84 87       	std	Z+12, r24	; 0x0c
    4f9c:	84 ec       	ldi	r24, 0xC4	; 196
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	97 87       	std	Z+15, r25	; 0x0f
    4fa2:	86 87       	std	Z+14, r24	; 0x0e
    4fa4:	80 ec       	ldi	r24, 0xC0	; 192
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	91 8b       	std	Z+17, r25	; 0x11
    4faa:	80 8b       	std	Z+16, r24	; 0x10
    4fac:	81 ec       	ldi	r24, 0xC1	; 193
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	93 8b       	std	Z+19, r25	; 0x13
    4fb2:	82 8b       	std	Z+18, r24	; 0x12
    4fb4:	82 ec       	ldi	r24, 0xC2	; 194
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	95 8b       	std	Z+21, r25	; 0x15
    4fba:	84 8b       	std	Z+20, r24	; 0x14
    4fbc:	86 ec       	ldi	r24, 0xC6	; 198
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	97 8b       	std	Z+23, r25	; 0x17
    4fc2:	86 8b       	std	Z+22, r24	; 0x16
    4fc4:	11 8e       	std	Z+25, r1	; 0x19
    4fc6:	12 8e       	std	Z+26, r1	; 0x1a
    4fc8:	13 8e       	std	Z+27, r1	; 0x1b
    4fca:	14 8e       	std	Z+28, r1	; 0x1c
    4fcc:	08 95       	ret

00004fce <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4fce:	08 95       	ret

00004fd0 <main>:

int main(void)
{
	init();
    4fd0:	18 d3       	rcall	.+1584   	; 0x5602 <init>

	initVariant();
    4fd2:	fd df       	rcall	.-6      	; 0x4fce <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4fd4:	1b d9       	rcall	.-3530   	; 0x420c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4fd6:	c2 e6       	ldi	r28, 0x62	; 98
    4fd8:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    4fda:	48 d9       	rcall	.-3440   	; 0x426c <loop>
		if (serialEventRun) serialEventRun();
    4fdc:	20 97       	sbiw	r28, 0x00	; 0
    4fde:	e9 f3       	breq	.-6      	; 0x4fda <main+0xa>
    4fe0:	71 de       	rcall	.-798    	; 0x4cc4 <_Z14serialEventRunv>
    4fe2:	fb cf       	rjmp	.-10     	; 0x4fda <main+0xa>

00004fe4 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    4fe4:	4c c5       	rjmp	.+2712   	; 0x5a7e <free>

00004fe6 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    4fe6:	cf 92       	push	r12
    4fe8:	df 92       	push	r13
    4fea:	ef 92       	push	r14
    4fec:	ff 92       	push	r15
    4fee:	0f 93       	push	r16
    4ff0:	1f 93       	push	r17
    4ff2:	cf 93       	push	r28
    4ff4:	df 93       	push	r29
    4ff6:	6c 01       	movw	r12, r24
    4ff8:	7a 01       	movw	r14, r20
    4ffa:	8b 01       	movw	r16, r22
    4ffc:	c0 e0       	ldi	r28, 0x00	; 0
    4ffe:	d0 e0       	ldi	r29, 0x00	; 0
    5000:	ce 15       	cp	r28, r14
    5002:	df 05       	cpc	r29, r15
    5004:	89 f0       	breq	.+34     	; 0x5028 <_ZN5Print5writeEPKhj+0x42>
    5006:	d8 01       	movw	r26, r16
    5008:	6d 91       	ld	r22, X+
    500a:	8d 01       	movw	r16, r26
    500c:	d6 01       	movw	r26, r12
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	01 90       	ld	r0, Z+
    5014:	f0 81       	ld	r31, Z
    5016:	e0 2d       	mov	r30, r0
    5018:	c6 01       	movw	r24, r12
    501a:	09 95       	icall
    501c:	89 2b       	or	r24, r25
    501e:	11 f4       	brne	.+4      	; 0x5024 <_ZN5Print5writeEPKhj+0x3e>
    5020:	7e 01       	movw	r14, r28
    5022:	02 c0       	rjmp	.+4      	; 0x5028 <_ZN5Print5writeEPKhj+0x42>
    5024:	21 96       	adiw	r28, 0x01	; 1
    5026:	ec cf       	rjmp	.-40     	; 0x5000 <_ZN5Print5writeEPKhj+0x1a>
    5028:	c7 01       	movw	r24, r14
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	1f 91       	pop	r17
    5030:	0f 91       	pop	r16
    5032:	ff 90       	pop	r15
    5034:	ef 90       	pop	r14
    5036:	df 90       	pop	r13
    5038:	cf 90       	pop	r12
    503a:	08 95       	ret

0000503c <_ZN5Print5writeEPKc>:
    503c:	61 15       	cp	r22, r1
    503e:	71 05       	cpc	r23, r1
    5040:	79 f0       	breq	.+30     	; 0x5060 <_ZN5Print5writeEPKc+0x24>
    5042:	fb 01       	movw	r30, r22
    5044:	01 90       	ld	r0, Z+
    5046:	00 20       	and	r0, r0
    5048:	e9 f7       	brne	.-6      	; 0x5044 <_ZN5Print5writeEPKc+0x8>
    504a:	31 97       	sbiw	r30, 0x01	; 1
    504c:	af 01       	movw	r20, r30
    504e:	46 1b       	sub	r20, r22
    5050:	57 0b       	sbc	r21, r23
    5052:	dc 01       	movw	r26, r24
    5054:	ed 91       	ld	r30, X+
    5056:	fc 91       	ld	r31, X
    5058:	02 80       	ldd	r0, Z+2	; 0x02
    505a:	f3 81       	ldd	r31, Z+3	; 0x03
    505c:	e0 2d       	mov	r30, r0
    505e:	09 94       	ijmp
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	08 95       	ret

00005066 <_ZN5Print5printEPK19__FlashStringHelper>:
    5066:	ef 92       	push	r14
    5068:	ff 92       	push	r15
    506a:	0f 93       	push	r16
    506c:	1f 93       	push	r17
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	8c 01       	movw	r16, r24
    5074:	7b 01       	movw	r14, r22
    5076:	c0 e0       	ldi	r28, 0x00	; 0
    5078:	d0 e0       	ldi	r29, 0x00	; 0
    507a:	f7 01       	movw	r30, r14
    507c:	ec 0f       	add	r30, r28
    507e:	fd 1f       	adc	r31, r29
    5080:	64 91       	lpm	r22, Z
    5082:	66 23       	and	r22, r22
    5084:	61 f0       	breq	.+24     	; 0x509e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5086:	d8 01       	movw	r26, r16
    5088:	ed 91       	ld	r30, X+
    508a:	fc 91       	ld	r31, X
    508c:	01 90       	ld	r0, Z+
    508e:	f0 81       	ld	r31, Z
    5090:	e0 2d       	mov	r30, r0
    5092:	c8 01       	movw	r24, r16
    5094:	09 95       	icall
    5096:	89 2b       	or	r24, r25
    5098:	11 f0       	breq	.+4      	; 0x509e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    509a:	21 96       	adiw	r28, 0x01	; 1
    509c:	ee cf       	rjmp	.-36     	; 0x507a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    509e:	ce 01       	movw	r24, r28
    50a0:	df 91       	pop	r29
    50a2:	cf 91       	pop	r28
    50a4:	1f 91       	pop	r17
    50a6:	0f 91       	pop	r16
    50a8:	ff 90       	pop	r15
    50aa:	ef 90       	pop	r14
    50ac:	08 95       	ret

000050ae <_ZN5Print5printEPKc>:
    50ae:	c6 cf       	rjmp	.-116    	; 0x503c <_ZN5Print5writeEPKc>

000050b0 <_ZN5Print5printEc>:
    50b0:	dc 01       	movw	r26, r24
    50b2:	ed 91       	ld	r30, X+
    50b4:	fc 91       	ld	r31, X
    50b6:	01 90       	ld	r0, Z+
    50b8:	f0 81       	ld	r31, Z
    50ba:	e0 2d       	mov	r30, r0
    50bc:	09 94       	ijmp

000050be <_ZN5Print7printlnEv>:
    50be:	65 e9       	ldi	r22, 0x95	; 149
    50c0:	71 e0       	ldi	r23, 0x01	; 1
    50c2:	bc cf       	rjmp	.-136    	; 0x503c <_ZN5Print5writeEPKc>

000050c4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    50c4:	0f 93       	push	r16
    50c6:	1f 93       	push	r17
    50c8:	cf 93       	push	r28
    50ca:	df 93       	push	r29
    50cc:	ec 01       	movw	r28, r24
    50ce:	cb df       	rcall	.-106    	; 0x5066 <_ZN5Print5printEPK19__FlashStringHelper>
    50d0:	8c 01       	movw	r16, r24
    50d2:	ce 01       	movw	r24, r28
    50d4:	f4 df       	rcall	.-24     	; 0x50be <_ZN5Print7printlnEv>
    50d6:	80 0f       	add	r24, r16
    50d8:	91 1f       	adc	r25, r17
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	1f 91       	pop	r17
    50e0:	0f 91       	pop	r16
    50e2:	08 95       	ret

000050e4 <_ZN5Print11printNumberEmh>:
    50e4:	8f 92       	push	r8
    50e6:	9f 92       	push	r9
    50e8:	af 92       	push	r10
    50ea:	bf 92       	push	r11
    50ec:	cf 92       	push	r12
    50ee:	df 92       	push	r13
    50f0:	ef 92       	push	r14
    50f2:	ff 92       	push	r15
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	cd b7       	in	r28, 0x3d	; 61
    50fe:	de b7       	in	r29, 0x3e	; 62
    5100:	a1 97       	sbiw	r28, 0x21	; 33
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	f8 94       	cli
    5106:	de bf       	out	0x3e, r29	; 62
    5108:	0f be       	out	0x3f, r0	; 63
    510a:	cd bf       	out	0x3d, r28	; 61
    510c:	7c 01       	movw	r14, r24
    510e:	d4 2e       	mov	r13, r20
    5110:	c5 2e       	mov	r12, r21
    5112:	db 01       	movw	r26, r22
    5114:	19 a2       	std	Y+33, r1	; 0x21
    5116:	22 30       	cpi	r18, 0x02	; 2
    5118:	08 f4       	brcc	.+2      	; 0x511c <_ZN5Print11printNumberEmh+0x38>
    511a:	2a e0       	ldi	r18, 0x0A	; 10
    511c:	8e 01       	movw	r16, r28
    511e:	0f 5d       	subi	r16, 0xDF	; 223
    5120:	1f 4f       	sbci	r17, 0xFF	; 255
    5122:	82 2e       	mov	r8, r18
    5124:	91 2c       	mov	r9, r1
    5126:	a1 2c       	mov	r10, r1
    5128:	b1 2c       	mov	r11, r1
    512a:	6d 2d       	mov	r22, r13
    512c:	7c 2d       	mov	r23, r12
    512e:	cd 01       	movw	r24, r26
    5130:	a5 01       	movw	r20, r10
    5132:	94 01       	movw	r18, r8
    5134:	7b d3       	rcall	.+1782   	; 0x582c <__udivmodsi4>
    5136:	d2 2e       	mov	r13, r18
    5138:	c3 2e       	mov	r12, r19
    513a:	da 01       	movw	r26, r20
    513c:	01 50       	subi	r16, 0x01	; 1
    513e:	11 09       	sbc	r17, r1
    5140:	6a 30       	cpi	r22, 0x0A	; 10
    5142:	71 05       	cpc	r23, r1
    5144:	81 05       	cpc	r24, r1
    5146:	91 05       	cpc	r25, r1
    5148:	10 f4       	brcc	.+4      	; 0x514e <_ZN5Print11printNumberEmh+0x6a>
    514a:	60 5d       	subi	r22, 0xD0	; 208
    514c:	01 c0       	rjmp	.+2      	; 0x5150 <_ZN5Print11printNumberEmh+0x6c>
    514e:	69 5c       	subi	r22, 0xC9	; 201
    5150:	f8 01       	movw	r30, r16
    5152:	60 83       	st	Z, r22
    5154:	23 2b       	or	r18, r19
    5156:	24 2b       	or	r18, r20
    5158:	25 2b       	or	r18, r21
    515a:	39 f7       	brne	.-50     	; 0x512a <_ZN5Print11printNumberEmh+0x46>
    515c:	b8 01       	movw	r22, r16
    515e:	c7 01       	movw	r24, r14
    5160:	6d df       	rcall	.-294    	; 0x503c <_ZN5Print5writeEPKc>
    5162:	a1 96       	adiw	r28, 0x21	; 33
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	ef 90       	pop	r14
    517a:	df 90       	pop	r13
    517c:	cf 90       	pop	r12
    517e:	bf 90       	pop	r11
    5180:	af 90       	pop	r10
    5182:	9f 90       	pop	r9
    5184:	8f 90       	pop	r8
    5186:	08 95       	ret

00005188 <_ZN5Print5printEli>:
    5188:	cf 92       	push	r12
    518a:	df 92       	push	r13
    518c:	ef 92       	push	r14
    518e:	ff 92       	push	r15
    5190:	0f 93       	push	r16
    5192:	1f 93       	push	r17
    5194:	cf 93       	push	r28
    5196:	df 93       	push	r29
    5198:	ec 01       	movw	r28, r24
    519a:	6a 01       	movw	r12, r20
    519c:	7b 01       	movw	r14, r22
    519e:	21 15       	cp	r18, r1
    51a0:	31 05       	cpc	r19, r1
    51a2:	79 f4       	brne	.+30     	; 0x51c2 <_ZN5Print5printEli+0x3a>
    51a4:	e8 81       	ld	r30, Y
    51a6:	f9 81       	ldd	r31, Y+1	; 0x01
    51a8:	01 90       	ld	r0, Z+
    51aa:	f0 81       	ld	r31, Z
    51ac:	e0 2d       	mov	r30, r0
    51ae:	64 2f       	mov	r22, r20
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	0f 91       	pop	r16
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	df 90       	pop	r13
    51be:	cf 90       	pop	r12
    51c0:	09 94       	ijmp
    51c2:	2a 30       	cpi	r18, 0x0A	; 10
    51c4:	31 05       	cpc	r19, r1
    51c6:	d9 f4       	brne	.+54     	; 0x51fe <_ZN5Print5printEli+0x76>
    51c8:	77 ff       	sbrs	r23, 7
    51ca:	18 c0       	rjmp	.+48     	; 0x51fc <_ZN5Print5printEli+0x74>
    51cc:	6d e2       	ldi	r22, 0x2D	; 45
    51ce:	70 df       	rcall	.-288    	; 0x50b0 <_ZN5Print5printEc>
    51d0:	8c 01       	movw	r16, r24
    51d2:	44 27       	eor	r20, r20
    51d4:	55 27       	eor	r21, r21
    51d6:	ba 01       	movw	r22, r20
    51d8:	4c 19       	sub	r20, r12
    51da:	5d 09       	sbc	r21, r13
    51dc:	6e 09       	sbc	r22, r14
    51de:	7f 09       	sbc	r23, r15
    51e0:	2a e0       	ldi	r18, 0x0A	; 10
    51e2:	ce 01       	movw	r24, r28
    51e4:	7f df       	rcall	.-258    	; 0x50e4 <_ZN5Print11printNumberEmh>
    51e6:	80 0f       	add	r24, r16
    51e8:	91 1f       	adc	r25, r17
    51ea:	df 91       	pop	r29
    51ec:	cf 91       	pop	r28
    51ee:	1f 91       	pop	r17
    51f0:	0f 91       	pop	r16
    51f2:	ff 90       	pop	r15
    51f4:	ef 90       	pop	r14
    51f6:	df 90       	pop	r13
    51f8:	cf 90       	pop	r12
    51fa:	08 95       	ret
    51fc:	2a e0       	ldi	r18, 0x0A	; 10
    51fe:	b7 01       	movw	r22, r14
    5200:	a6 01       	movw	r20, r12
    5202:	ce 01       	movw	r24, r28
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	1f 91       	pop	r17
    520a:	0f 91       	pop	r16
    520c:	ff 90       	pop	r15
    520e:	ef 90       	pop	r14
    5210:	df 90       	pop	r13
    5212:	cf 90       	pop	r12
    5214:	67 cf       	rjmp	.-306    	; 0x50e4 <_ZN5Print11printNumberEmh>

00005216 <_ZN5Print5printEmi>:
    5216:	21 15       	cp	r18, r1
    5218:	31 05       	cpc	r19, r1
    521a:	41 f4       	brne	.+16     	; 0x522c <_ZN5Print5printEmi+0x16>
    521c:	dc 01       	movw	r26, r24
    521e:	ed 91       	ld	r30, X+
    5220:	fc 91       	ld	r31, X
    5222:	01 90       	ld	r0, Z+
    5224:	f0 81       	ld	r31, Z
    5226:	e0 2d       	mov	r30, r0
    5228:	64 2f       	mov	r22, r20
    522a:	09 94       	ijmp
    522c:	5b cf       	rjmp	.-330    	; 0x50e4 <_ZN5Print11printNumberEmh>

0000522e <_ZN5Print5printEhi>:
    522e:	9a 01       	movw	r18, r20
    5230:	46 2f       	mov	r20, r22
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	60 e0       	ldi	r22, 0x00	; 0
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	ee cf       	rjmp	.-36     	; 0x5216 <_ZN5Print5printEmi>

0000523a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    523a:	4f 92       	push	r4
    523c:	5f 92       	push	r5
    523e:	6f 92       	push	r6
    5240:	7f 92       	push	r7
    5242:	8f 92       	push	r8
    5244:	9f 92       	push	r9
    5246:	af 92       	push	r10
    5248:	bf 92       	push	r11
    524a:	cf 92       	push	r12
    524c:	df 92       	push	r13
    524e:	ef 92       	push	r14
    5250:	ff 92       	push	r15
    5252:	cf 93       	push	r28
    5254:	df 93       	push	r29
    5256:	ec 01       	movw	r28, r24
    5258:	6a 01       	movw	r12, r20
    525a:	7b 01       	movw	r14, r22
    525c:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    525e:	9a 01       	movw	r18, r20
    5260:	ab 01       	movw	r20, r22
    5262:	c7 01       	movw	r24, r14
    5264:	b6 01       	movw	r22, r12
    5266:	26 dc       	rcall	.-1972   	; 0x4ab4 <__unordsf2>
    5268:	88 23       	and	r24, r24
    526a:	19 f0       	breq	.+6      	; 0x5272 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    526c:	68 e9       	ldi	r22, 0x98	; 152
    526e:	71 e0       	ldi	r23, 0x01	; 1
    5270:	24 c0       	rjmp	.+72     	; 0x52ba <_ZN5Print10printFloatEdh+0x80>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    5272:	26 01       	movw	r4, r12
    5274:	37 01       	movw	r6, r14
    5276:	e8 94       	clt
    5278:	77 f8       	bld	r7, 7
    527a:	2f ef       	ldi	r18, 0xFF	; 255
    527c:	3f ef       	ldi	r19, 0xFF	; 255
    527e:	4f e7       	ldi	r20, 0x7F	; 127
    5280:	5f e7       	ldi	r21, 0x7F	; 127
    5282:	c3 01       	movw	r24, r6
    5284:	b2 01       	movw	r22, r4
    5286:	16 dc       	rcall	.-2004   	; 0x4ab4 <__unordsf2>
    5288:	81 11       	cpse	r24, r1
    528a:	0c c0       	rjmp	.+24     	; 0x52a4 <_ZN5Print10printFloatEdh+0x6a>
    528c:	2f ef       	ldi	r18, 0xFF	; 255
    528e:	3f ef       	ldi	r19, 0xFF	; 255
    5290:	4f e7       	ldi	r20, 0x7F	; 127
    5292:	5f e7       	ldi	r21, 0x7F	; 127
    5294:	c3 01       	movw	r24, r6
    5296:	b2 01       	movw	r22, r4
    5298:	c0 d9       	rcall	.-3200   	; 0x461a <__cmpsf2>
    529a:	18 16       	cp	r1, r24
    529c:	1c f4       	brge	.+6      	; 0x52a4 <_ZN5Print10printFloatEdh+0x6a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    529e:	6c e9       	ldi	r22, 0x9C	; 156
    52a0:	71 e0       	ldi	r23, 0x01	; 1
    52a2:	0b c0       	rjmp	.+22     	; 0x52ba <_ZN5Print10printFloatEdh+0x80>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    52a4:	2f ef       	ldi	r18, 0xFF	; 255
    52a6:	3f ef       	ldi	r19, 0xFF	; 255
    52a8:	4f e7       	ldi	r20, 0x7F	; 127
    52aa:	5f e4       	ldi	r21, 0x4F	; 79
    52ac:	c7 01       	movw	r24, r14
    52ae:	b6 01       	movw	r22, r12
    52b0:	03 db       	rcall	.-2554   	; 0x48b8 <__gesf2>
    52b2:	18 16       	cp	r1, r24
    52b4:	94 f4       	brge	.+36     	; 0x52da <_ZN5Print10printFloatEdh+0xa0>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    52b6:	60 ea       	ldi	r22, 0xA0	; 160
    52b8:	71 e0       	ldi	r23, 0x01	; 1
    52ba:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    52bc:	df 91       	pop	r29
    52be:	cf 91       	pop	r28
    52c0:	ff 90       	pop	r15
    52c2:	ef 90       	pop	r14
    52c4:	df 90       	pop	r13
    52c6:	cf 90       	pop	r12
    52c8:	bf 90       	pop	r11
    52ca:	af 90       	pop	r10
    52cc:	9f 90       	pop	r9
    52ce:	8f 90       	pop	r8
    52d0:	7f 90       	pop	r7
    52d2:	6f 90       	pop	r6
    52d4:	5f 90       	pop	r5
    52d6:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    52d8:	b1 ce       	rjmp	.-670    	; 0x503c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    52da:	2f ef       	ldi	r18, 0xFF	; 255
    52dc:	3f ef       	ldi	r19, 0xFF	; 255
    52de:	4f e7       	ldi	r20, 0x7F	; 127
    52e0:	5f ec       	ldi	r21, 0xCF	; 207
    52e2:	c7 01       	movw	r24, r14
    52e4:	b6 01       	movw	r22, r12
    52e6:	99 d9       	rcall	.-3278   	; 0x461a <__cmpsf2>
    52e8:	87 fd       	sbrc	r24, 7
    52ea:	e5 cf       	rjmp	.-54     	; 0x52b6 <_ZN5Print10printFloatEdh+0x7c>
  
  // Handle negative numbers
  if (number < 0.0)
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	30 e0       	ldi	r19, 0x00	; 0
    52f0:	a9 01       	movw	r20, r18
    52f2:	c7 01       	movw	r24, r14
    52f4:	b6 01       	movw	r22, r12
    52f6:	91 d9       	rcall	.-3294   	; 0x461a <__cmpsf2>
    52f8:	87 ff       	sbrs	r24, 7
    52fa:	09 c0       	rjmp	.+18     	; 0x530e <_ZN5Print10printFloatEdh+0xd4>
  {
     n += print('-');
    52fc:	6d e2       	ldi	r22, 0x2D	; 45
    52fe:	ce 01       	movw	r24, r28
    5300:	d7 de       	rcall	.-594    	; 0x50b0 <_ZN5Print5printEc>
    5302:	4c 01       	movw	r8, r24
     number = -number;
    5304:	f7 fa       	bst	r15, 7
    5306:	f0 94       	com	r15
    5308:	f7 f8       	bld	r15, 7
    530a:	f0 94       	com	r15
    530c:	02 c0       	rjmp	.+4      	; 0x5312 <_ZN5Print10printFloatEdh+0xd8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    530e:	81 2c       	mov	r8, r1
    5310:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    5312:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	70 e0       	ldi	r23, 0x00	; 0
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    531c:	ab 14       	cp	r10, r11
    531e:	39 f0       	breq	.+14     	; 0x532e <_ZN5Print10printFloatEdh+0xf4>
    rounding /= 10.0;
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	30 e0       	ldi	r19, 0x00	; 0
    5324:	40 e2       	ldi	r20, 0x20	; 32
    5326:	51 e4       	ldi	r21, 0x41	; 65
    5328:	7c d9       	rcall	.-3336   	; 0x4622 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    532a:	a3 94       	inc	r10
    532c:	f7 cf       	rjmp	.-18     	; 0x531c <_ZN5Print10printFloatEdh+0xe2>
    rounding /= 10.0;
  
  number += rounding;
    532e:	9b 01       	movw	r18, r22
    5330:	ac 01       	movw	r20, r24
    5332:	c7 01       	movw	r24, r14
    5334:	b6 01       	movw	r22, r12
    5336:	0d d9       	rcall	.-3558   	; 0x4552 <__addsf3>
    5338:	2b 01       	movw	r4, r22
    533a:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    533c:	df d9       	rcall	.-3138   	; 0x46fc <__fixunssfsi>
    533e:	6b 01       	movw	r12, r22
    5340:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    5342:	08 da       	rcall	.-3056   	; 0x4754 <__floatunsisf>
    5344:	9b 01       	movw	r18, r22
    5346:	ac 01       	movw	r20, r24
    5348:	c3 01       	movw	r24, r6
    534a:	b2 01       	movw	r22, r4
    534c:	01 d9       	rcall	.-3582   	; 0x4550 <__subsf3>
    534e:	2b 01       	movw	r4, r22
    5350:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    5352:	2a e0       	ldi	r18, 0x0A	; 10
    5354:	b7 01       	movw	r22, r14
    5356:	a6 01       	movw	r20, r12
    5358:	ce 01       	movw	r24, r28
    535a:	c4 de       	rcall	.-632    	; 0x50e4 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    535c:	7c 01       	movw	r14, r24
    535e:	e8 0c       	add	r14, r8
    5360:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    5362:	bb 20       	and	r11, r11
    5364:	31 f0       	breq	.+12     	; 0x5372 <_ZN5Print10printFloatEdh+0x138>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5366:	64 ea       	ldi	r22, 0xA4	; 164
    5368:	71 e0       	ldi	r23, 0x01	; 1
    536a:	ce 01       	movw	r24, r28
    536c:	67 de       	rcall	.-818    	; 0x503c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    536e:	e8 0e       	add	r14, r24
    5370:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    5372:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5374:	dd 20       	and	r13, r13
    5376:	11 f1       	breq	.+68     	; 0x53bc <_ZN5Print10printFloatEdh+0x182>
  {
    remainder *= 10.0;
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	40 e2       	ldi	r20, 0x20	; 32
    537e:	51 e4       	ldi	r21, 0x41	; 65
    5380:	c3 01       	movw	r24, r6
    5382:	b2 01       	movw	r22, r4
    5384:	e8 da       	rcall	.-2608   	; 0x4956 <__mulsf3>
    5386:	2b 01       	movw	r4, r22
    5388:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    538a:	b3 d9       	rcall	.-3226   	; 0x46f2 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    538c:	4b 01       	movw	r8, r22
    538e:	77 0f       	add	r23, r23
    5390:	aa 08       	sbc	r10, r10
    5392:	bb 08       	sbc	r11, r11
    5394:	2a e0       	ldi	r18, 0x0A	; 10
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	b5 01       	movw	r22, r10
    539a:	a4 01       	movw	r20, r8
    539c:	ce 01       	movw	r24, r28
    539e:	f4 de       	rcall	.-536    	; 0x5188 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    53a0:	e8 0e       	add	r14, r24
    53a2:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    53a4:	c5 01       	movw	r24, r10
    53a6:	b4 01       	movw	r22, r8
    53a8:	d7 d9       	rcall	.-3154   	; 0x4758 <__floatsisf>
    53aa:	9b 01       	movw	r18, r22
    53ac:	ac 01       	movw	r20, r24
    53ae:	c3 01       	movw	r24, r6
    53b0:	b2 01       	movw	r22, r4
    53b2:	ce d8       	rcall	.-3684   	; 0x4550 <__subsf3>
    53b4:	2b 01       	movw	r4, r22
    53b6:	3c 01       	movw	r6, r24
    53b8:	da 94       	dec	r13
    53ba:	dc cf       	rjmp	.-72     	; 0x5374 <_ZN5Print10printFloatEdh+0x13a>
  } 
  
  return n;
}
    53bc:	c7 01       	movw	r24, r14
    53be:	df 91       	pop	r29
    53c0:	cf 91       	pop	r28
    53c2:	ff 90       	pop	r15
    53c4:	ef 90       	pop	r14
    53c6:	df 90       	pop	r13
    53c8:	cf 90       	pop	r12
    53ca:	bf 90       	pop	r11
    53cc:	af 90       	pop	r10
    53ce:	9f 90       	pop	r9
    53d0:	8f 90       	pop	r8
    53d2:	7f 90       	pop	r7
    53d4:	6f 90       	pop	r6
    53d6:	5f 90       	pop	r5
    53d8:	4f 90       	pop	r4
    53da:	08 95       	ret

000053dc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    53dc:	2e cf       	rjmp	.-420    	; 0x523a <_ZN5Print10printFloatEdh>

000053de <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    53de:	0f 93       	push	r16
    53e0:	1f 93       	push	r17
    53e2:	cf 93       	push	r28
    53e4:	df 93       	push	r29
    53e6:	ec 01       	movw	r28, r24
    53e8:	97 d0       	rcall	.+302    	; 0x5518 <millis>
    53ea:	68 87       	std	Y+8, r22	; 0x08
    53ec:	79 87       	std	Y+9, r23	; 0x09
    53ee:	8a 87       	std	Y+10, r24	; 0x0a
    53f0:	9b 87       	std	Y+11, r25	; 0x0b
    53f2:	e8 81       	ld	r30, Y
    53f4:	f9 81       	ldd	r31, Y+1	; 0x01
    53f6:	06 80       	ldd	r0, Z+6	; 0x06
    53f8:	f7 81       	ldd	r31, Z+7	; 0x07
    53fa:	e0 2d       	mov	r30, r0
    53fc:	ce 01       	movw	r24, r28
    53fe:	09 95       	icall
    5400:	97 ff       	sbrs	r25, 7
    5402:	16 c0       	rjmp	.+44     	; 0x5430 <_ZN6Stream9timedReadEv+0x52>
    5404:	89 d0       	rcall	.+274    	; 0x5518 <millis>
    5406:	08 85       	ldd	r16, Y+8	; 0x08
    5408:	19 85       	ldd	r17, Y+9	; 0x09
    540a:	2a 85       	ldd	r18, Y+10	; 0x0a
    540c:	3b 85       	ldd	r19, Y+11	; 0x0b
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	80 1b       	sub	r24, r16
    5414:	91 0b       	sbc	r25, r17
    5416:	a2 0b       	sbc	r26, r18
    5418:	b3 0b       	sbc	r27, r19
    541a:	0c 81       	ldd	r16, Y+4	; 0x04
    541c:	1d 81       	ldd	r17, Y+5	; 0x05
    541e:	2e 81       	ldd	r18, Y+6	; 0x06
    5420:	3f 81       	ldd	r19, Y+7	; 0x07
    5422:	80 17       	cp	r24, r16
    5424:	91 07       	cpc	r25, r17
    5426:	a2 07       	cpc	r26, r18
    5428:	b3 07       	cpc	r27, r19
    542a:	18 f3       	brcs	.-58     	; 0x53f2 <_ZN6Stream9timedReadEv+0x14>
    542c:	8f ef       	ldi	r24, 0xFF	; 255
    542e:	9f ef       	ldi	r25, 0xFF	; 255
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	1f 91       	pop	r17
    5436:	0f 91       	pop	r16
    5438:	08 95       	ret

0000543a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    543a:	cf 92       	push	r12
    543c:	df 92       	push	r13
    543e:	ef 92       	push	r14
    5440:	ff 92       	push	r15
    5442:	0f 93       	push	r16
    5444:	1f 93       	push	r17
    5446:	cf 93       	push	r28
    5448:	df 93       	push	r29
    544a:	6c 01       	movw	r12, r24
    544c:	7a 01       	movw	r14, r20
    544e:	8b 01       	movw	r16, r22
  size_t count = 0;
    5450:	c0 e0       	ldi	r28, 0x00	; 0
    5452:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    5454:	ce 15       	cp	r28, r14
    5456:	df 05       	cpc	r29, r15
    5458:	59 f0       	breq	.+22     	; 0x5470 <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    545a:	c6 01       	movw	r24, r12
    545c:	c0 df       	rcall	.-128    	; 0x53de <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    545e:	97 ff       	sbrs	r25, 7
    5460:	02 c0       	rjmp	.+4      	; 0x5466 <_ZN6Stream9readBytesEPcj+0x2c>
    5462:	7e 01       	movw	r14, r28
    5464:	05 c0       	rjmp	.+10     	; 0x5470 <_ZN6Stream9readBytesEPcj+0x36>
    *buffer++ = (char)c;
    5466:	f8 01       	movw	r30, r16
    5468:	81 93       	st	Z+, r24
    546a:	8f 01       	movw	r16, r30
    count++;
    546c:	21 96       	adiw	r28, 0x01	; 1
    546e:	f2 cf       	rjmp	.-28     	; 0x5454 <_ZN6Stream9readBytesEPcj+0x1a>
  }
  return count;
}
    5470:	c7 01       	movw	r24, r14
    5472:	df 91       	pop	r29
    5474:	cf 91       	pop	r28
    5476:	1f 91       	pop	r17
    5478:	0f 91       	pop	r16
    547a:	ff 90       	pop	r15
    547c:	ef 90       	pop	r14
    547e:	df 90       	pop	r13
    5480:	cf 90       	pop	r12
    5482:	08 95       	ret

00005484 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5484:	1f 92       	push	r1
    5486:	0f 92       	push	r0
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	0f 92       	push	r0
    548c:	11 24       	eor	r1, r1
    548e:	2f 93       	push	r18
    5490:	3f 93       	push	r19
    5492:	8f 93       	push	r24
    5494:	9f 93       	push	r25
    5496:	af 93       	push	r26
    5498:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    549a:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <timer0_millis>
    549e:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <timer0_millis+0x1>
    54a2:	a0 91 e4 07 	lds	r26, 0x07E4	; 0x8007e4 <timer0_millis+0x2>
    54a6:	b0 91 e5 07 	lds	r27, 0x07E5	; 0x8007e5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    54aa:	30 91 e1 07 	lds	r19, 0x07E1	; 0x8007e1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    54ae:	23 e0       	ldi	r18, 0x03	; 3
    54b0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    54b2:	2d 37       	cpi	r18, 0x7D	; 125
    54b4:	20 f4       	brcc	.+8      	; 0x54be <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    54b6:	01 96       	adiw	r24, 0x01	; 1
    54b8:	a1 1d       	adc	r26, r1
    54ba:	b1 1d       	adc	r27, r1
    54bc:	05 c0       	rjmp	.+10     	; 0x54c8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    54be:	26 e8       	ldi	r18, 0x86	; 134
    54c0:	23 0f       	add	r18, r19
		m += 1;
    54c2:	02 96       	adiw	r24, 0x02	; 2
    54c4:	a1 1d       	adc	r26, r1
    54c6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    54c8:	20 93 e1 07 	sts	0x07E1, r18	; 0x8007e1 <timer0_fract>
	timer0_millis = m;
    54cc:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <timer0_millis>
    54d0:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <timer0_millis+0x1>
    54d4:	a0 93 e4 07 	sts	0x07E4, r26	; 0x8007e4 <timer0_millis+0x2>
    54d8:	b0 93 e5 07 	sts	0x07E5, r27	; 0x8007e5 <timer0_millis+0x3>
	timer0_overflow_count++;
    54dc:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <timer0_overflow_count>
    54e0:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <timer0_overflow_count+0x1>
    54e4:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <timer0_overflow_count+0x2>
    54e8:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <timer0_overflow_count+0x3>
    54ec:	01 96       	adiw	r24, 0x01	; 1
    54ee:	a1 1d       	adc	r26, r1
    54f0:	b1 1d       	adc	r27, r1
    54f2:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <timer0_overflow_count>
    54f6:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <timer0_overflow_count+0x1>
    54fa:	a0 93 e8 07 	sts	0x07E8, r26	; 0x8007e8 <timer0_overflow_count+0x2>
    54fe:	b0 93 e9 07 	sts	0x07E9, r27	; 0x8007e9 <timer0_overflow_count+0x3>
}
    5502:	bf 91       	pop	r27
    5504:	af 91       	pop	r26
    5506:	9f 91       	pop	r25
    5508:	8f 91       	pop	r24
    550a:	3f 91       	pop	r19
    550c:	2f 91       	pop	r18
    550e:	0f 90       	pop	r0
    5510:	0f be       	out	0x3f, r0	; 63
    5512:	0f 90       	pop	r0
    5514:	1f 90       	pop	r1
    5516:	18 95       	reti

00005518 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5518:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    551a:	f8 94       	cli
	m = timer0_millis;
    551c:	60 91 e2 07 	lds	r22, 0x07E2	; 0x8007e2 <timer0_millis>
    5520:	70 91 e3 07 	lds	r23, 0x07E3	; 0x8007e3 <timer0_millis+0x1>
    5524:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <timer0_millis+0x2>
    5528:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <timer0_millis+0x3>
	SREG = oldSREG;
    552c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    552e:	08 95       	ret

00005530 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5530:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5532:	f8 94       	cli
	m = timer0_overflow_count;
    5534:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <timer0_overflow_count>
    5538:	90 91 e7 07 	lds	r25, 0x07E7	; 0x8007e7 <timer0_overflow_count+0x1>
    553c:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <timer0_overflow_count+0x2>
    5540:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5544:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5546:	a8 9b       	sbis	0x15, 0	; 21
    5548:	05 c0       	rjmp	.+10     	; 0x5554 <micros+0x24>
    554a:	2f 3f       	cpi	r18, 0xFF	; 255
    554c:	19 f0       	breq	.+6      	; 0x5554 <micros+0x24>
		m++;
    554e:	01 96       	adiw	r24, 0x01	; 1
    5550:	a1 1d       	adc	r26, r1
    5552:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5554:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5556:	ba 2f       	mov	r27, r26
    5558:	a9 2f       	mov	r26, r25
    555a:	98 2f       	mov	r25, r24
    555c:	88 27       	eor	r24, r24
    555e:	82 0f       	add	r24, r18
    5560:	91 1d       	adc	r25, r1
    5562:	a1 1d       	adc	r26, r1
    5564:	b1 1d       	adc	r27, r1
    5566:	bc 01       	movw	r22, r24
    5568:	cd 01       	movw	r24, r26
    556a:	42 e0       	ldi	r20, 0x02	; 2
    556c:	66 0f       	add	r22, r22
    556e:	77 1f       	adc	r23, r23
    5570:	88 1f       	adc	r24, r24
    5572:	99 1f       	adc	r25, r25
    5574:	4a 95       	dec	r20
    5576:	d1 f7       	brne	.-12     	; 0x556c <micros+0x3c>
}
    5578:	08 95       	ret

0000557a <delay>:

void delay(unsigned long ms)
{
    557a:	8f 92       	push	r8
    557c:	9f 92       	push	r9
    557e:	af 92       	push	r10
    5580:	bf 92       	push	r11
    5582:	cf 92       	push	r12
    5584:	df 92       	push	r13
    5586:	ef 92       	push	r14
    5588:	ff 92       	push	r15
    558a:	6b 01       	movw	r12, r22
    558c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    558e:	d0 df       	rcall	.-96     	; 0x5530 <micros>
    5590:	4b 01       	movw	r8, r22
    5592:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5594:	c1 14       	cp	r12, r1
    5596:	d1 04       	cpc	r13, r1
    5598:	e1 04       	cpc	r14, r1
    559a:	f1 04       	cpc	r15, r1
    559c:	f1 f0       	breq	.+60     	; 0x55da <delay+0x60>
		yield();
    559e:	45 d1       	rcall	.+650    	; 0x582a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    55a0:	c7 df       	rcall	.-114    	; 0x5530 <micros>
    55a2:	dc 01       	movw	r26, r24
    55a4:	cb 01       	movw	r24, r22
    55a6:	88 19       	sub	r24, r8
    55a8:	99 09       	sbc	r25, r9
    55aa:	aa 09       	sbc	r26, r10
    55ac:	bb 09       	sbc	r27, r11
    55ae:	88 3e       	cpi	r24, 0xE8	; 232
    55b0:	93 40       	sbci	r25, 0x03	; 3
    55b2:	a1 05       	cpc	r26, r1
    55b4:	b1 05       	cpc	r27, r1
    55b6:	70 f3       	brcs	.-36     	; 0x5594 <delay+0x1a>
			ms--;
    55b8:	21 e0       	ldi	r18, 0x01	; 1
    55ba:	c2 1a       	sub	r12, r18
    55bc:	d1 08       	sbc	r13, r1
    55be:	e1 08       	sbc	r14, r1
    55c0:	f1 08       	sbc	r15, r1
			start += 1000;
    55c2:	88 ee       	ldi	r24, 0xE8	; 232
    55c4:	88 0e       	add	r8, r24
    55c6:	83 e0       	ldi	r24, 0x03	; 3
    55c8:	98 1e       	adc	r9, r24
    55ca:	a1 1c       	adc	r10, r1
    55cc:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    55ce:	c1 14       	cp	r12, r1
    55d0:	d1 04       	cpc	r13, r1
    55d2:	e1 04       	cpc	r14, r1
    55d4:	f1 04       	cpc	r15, r1
    55d6:	21 f7       	brne	.-56     	; 0x55a0 <delay+0x26>
    55d8:	dd cf       	rjmp	.-70     	; 0x5594 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    55da:	ff 90       	pop	r15
    55dc:	ef 90       	pop	r14
    55de:	df 90       	pop	r13
    55e0:	cf 90       	pop	r12
    55e2:	bf 90       	pop	r11
    55e4:	af 90       	pop	r10
    55e6:	9f 90       	pop	r9
    55e8:	8f 90       	pop	r8
    55ea:	08 95       	ret

000055ec <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    55ec:	82 30       	cpi	r24, 0x02	; 2
    55ee:	91 05       	cpc	r25, r1
    55f0:	38 f0       	brcs	.+14     	; 0x5600 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    55f2:	88 0f       	add	r24, r24
    55f4:	99 1f       	adc	r25, r25
    55f6:	88 0f       	add	r24, r24
    55f8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    55fa:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <delayMicroseconds+0x10>
    5600:	08 95       	ret

00005602 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5602:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5604:	84 b5       	in	r24, 0x24	; 36
    5606:	82 60       	ori	r24, 0x02	; 2
    5608:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    560a:	84 b5       	in	r24, 0x24	; 36
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5610:	85 b5       	in	r24, 0x25	; 37
    5612:	82 60       	ori	r24, 0x02	; 2
    5614:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5616:	85 b5       	in	r24, 0x25	; 37
    5618:	81 60       	ori	r24, 0x01	; 1
    561a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    561c:	ee e6       	ldi	r30, 0x6E	; 110
    561e:	f0 e0       	ldi	r31, 0x00	; 0
    5620:	80 81       	ld	r24, Z
    5622:	81 60       	ori	r24, 0x01	; 1
    5624:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5626:	e1 e8       	ldi	r30, 0x81	; 129
    5628:	f0 e0       	ldi	r31, 0x00	; 0
    562a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    562c:	80 81       	ld	r24, Z
    562e:	82 60       	ori	r24, 0x02	; 2
    5630:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5632:	80 81       	ld	r24, Z
    5634:	81 60       	ori	r24, 0x01	; 1
    5636:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5638:	e0 e8       	ldi	r30, 0x80	; 128
    563a:	f0 e0       	ldi	r31, 0x00	; 0
    563c:	80 81       	ld	r24, Z
    563e:	81 60       	ori	r24, 0x01	; 1
    5640:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5642:	e1 eb       	ldi	r30, 0xB1	; 177
    5644:	f0 e0       	ldi	r31, 0x00	; 0
    5646:	80 81       	ld	r24, Z
    5648:	84 60       	ori	r24, 0x04	; 4
    564a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    564c:	e0 eb       	ldi	r30, 0xB0	; 176
    564e:	f0 e0       	ldi	r31, 0x00	; 0
    5650:	80 81       	ld	r24, Z
    5652:	81 60       	ori	r24, 0x01	; 1
    5654:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5656:	ea e7       	ldi	r30, 0x7A	; 122
    5658:	f0 e0       	ldi	r31, 0x00	; 0
    565a:	80 81       	ld	r24, Z
    565c:	84 60       	ori	r24, 0x04	; 4
    565e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5660:	80 81       	ld	r24, Z
    5662:	82 60       	ori	r24, 0x02	; 2
    5664:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5666:	80 81       	ld	r24, Z
    5668:	81 60       	ori	r24, 0x01	; 1
    566a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    566c:	80 81       	ld	r24, Z
    566e:	80 68       	ori	r24, 0x80	; 128
    5670:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5672:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5676:	08 95       	ret

00005678 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5678:	8e 30       	cpi	r24, 0x0E	; 14
    567a:	08 f0       	brcs	.+2      	; 0x567e <analogRead+0x6>
    567c:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    567e:	87 70       	andi	r24, 0x07	; 7
    5680:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    5684:	90 e4       	ldi	r25, 0x40	; 64
    5686:	29 9f       	mul	r18, r25
    5688:	90 01       	movw	r18, r0
    568a:	11 24       	eor	r1, r1
    568c:	82 2b       	or	r24, r18
    568e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5692:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5696:	80 64       	ori	r24, 0x40	; 64
    5698:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    569c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    56a0:	86 fd       	sbrc	r24, 6
    56a2:	fc cf       	rjmp	.-8      	; 0x569c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    56a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    56a8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    56ac:	90 e0       	ldi	r25, 0x00	; 0
}
    56ae:	92 2b       	or	r25, r18
    56b0:	08 95       	ret

000056b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    56b2:	83 30       	cpi	r24, 0x03	; 3
    56b4:	81 f0       	breq	.+32     	; 0x56d6 <turnOffPWM+0x24>
    56b6:	28 f4       	brcc	.+10     	; 0x56c2 <turnOffPWM+0x10>
    56b8:	81 30       	cpi	r24, 0x01	; 1
    56ba:	99 f0       	breq	.+38     	; 0x56e2 <turnOffPWM+0x30>
    56bc:	82 30       	cpi	r24, 0x02	; 2
    56be:	a1 f0       	breq	.+40     	; 0x56e8 <turnOffPWM+0x36>
    56c0:	08 95       	ret
    56c2:	87 30       	cpi	r24, 0x07	; 7
    56c4:	a9 f0       	breq	.+42     	; 0x56f0 <turnOffPWM+0x3e>
    56c6:	88 30       	cpi	r24, 0x08	; 8
    56c8:	b9 f0       	breq	.+46     	; 0x56f8 <turnOffPWM+0x46>
    56ca:	84 30       	cpi	r24, 0x04	; 4
    56cc:	d1 f4       	brne	.+52     	; 0x5702 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    56ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    56d2:	8f 7d       	andi	r24, 0xDF	; 223
    56d4:	03 c0       	rjmp	.+6      	; 0x56dc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    56d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    56da:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    56dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    56e0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    56e2:	84 b5       	in	r24, 0x24	; 36
    56e4:	8f 77       	andi	r24, 0x7F	; 127
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    56e8:	84 b5       	in	r24, 0x24	; 36
    56ea:	8f 7d       	andi	r24, 0xDF	; 223
    56ec:	84 bd       	out	0x24, r24	; 36
    56ee:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    56f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    56f4:	8f 77       	andi	r24, 0x7F	; 127
    56f6:	03 c0       	rjmp	.+6      	; 0x56fe <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    56f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    56fc:	8f 7d       	andi	r24, 0xDF	; 223
    56fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5702:	08 95       	ret

00005704 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5704:	cf 93       	push	r28
    5706:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	fc 01       	movw	r30, r24
    570c:	e8 5b       	subi	r30, 0xB8	; 184
    570e:	fc 4f       	sbci	r31, 0xFC	; 252
    5710:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5712:	fc 01       	movw	r30, r24
    5714:	e4 5a       	subi	r30, 0xA4	; 164
    5716:	fc 4f       	sbci	r31, 0xFC	; 252
    5718:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    571a:	88 23       	and	r24, r24
    571c:	61 f1       	breq	.+88     	; 0x5776 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	88 0f       	add	r24, r24
    5722:	99 1f       	adc	r25, r25
    5724:	fc 01       	movw	r30, r24
    5726:	ec 57       	subi	r30, 0x7C	; 124
    5728:	fc 4f       	sbci	r31, 0xFC	; 252
    572a:	c5 91       	lpm	r28, Z+
    572c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    572e:	fc 01       	movw	r30, r24
    5730:	e6 58       	subi	r30, 0x86	; 134
    5732:	fc 4f       	sbci	r31, 0xFC	; 252
    5734:	a5 91       	lpm	r26, Z+
    5736:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5738:	61 11       	cpse	r22, r1
    573a:	09 c0       	rjmp	.+18     	; 0x574e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    573c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    573e:	f8 94       	cli
		*reg &= ~bit;
    5740:	88 81       	ld	r24, Y
    5742:	20 95       	com	r18
    5744:	82 23       	and	r24, r18
    5746:	88 83       	st	Y, r24
		*out &= ~bit;
    5748:	ec 91       	ld	r30, X
    574a:	2e 23       	and	r18, r30
    574c:	0b c0       	rjmp	.+22     	; 0x5764 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    574e:	62 30       	cpi	r22, 0x02	; 2
    5750:	61 f4       	brne	.+24     	; 0x576a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5752:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5754:	f8 94       	cli
		*reg &= ~bit;
    5756:	38 81       	ld	r19, Y
    5758:	82 2f       	mov	r24, r18
    575a:	80 95       	com	r24
    575c:	83 23       	and	r24, r19
    575e:	88 83       	st	Y, r24
		*out |= bit;
    5760:	ec 91       	ld	r30, X
    5762:	2e 2b       	or	r18, r30
    5764:	2c 93       	st	X, r18
		SREG = oldSREG;
    5766:	9f bf       	out	0x3f, r25	; 63
    5768:	06 c0       	rjmp	.+12     	; 0x5776 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    576a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    576c:	f8 94       	cli
		*reg |= bit;
    576e:	e8 81       	ld	r30, Y
    5770:	2e 2b       	or	r18, r30
    5772:	28 83       	st	Y, r18
		SREG = oldSREG;
    5774:	8f bf       	out	0x3f, r24	; 63
	}
}
    5776:	df 91       	pop	r29
    5778:	cf 91       	pop	r28
    577a:	08 95       	ret

0000577c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    577c:	1f 93       	push	r17
    577e:	cf 93       	push	r28
    5780:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5782:	28 2f       	mov	r18, r24
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	f9 01       	movw	r30, r18
    5788:	ec 5c       	subi	r30, 0xCC	; 204
    578a:	fc 4f       	sbci	r31, 0xFC	; 252
    578c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    578e:	f9 01       	movw	r30, r18
    5790:	e8 5b       	subi	r30, 0xB8	; 184
    5792:	fc 4f       	sbci	r31, 0xFC	; 252
    5794:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5796:	f9 01       	movw	r30, r18
    5798:	e4 5a       	subi	r30, 0xA4	; 164
    579a:	fc 4f       	sbci	r31, 0xFC	; 252
    579c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    579e:	cc 23       	and	r28, r28
    57a0:	c1 f0       	breq	.+48     	; 0x57d2 <digitalWrite+0x56>
    57a2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    57a4:	81 11       	cpse	r24, r1
    57a6:	85 df       	rcall	.-246    	; 0x56b2 <turnOffPWM>

	out = portOutputRegister(port);
    57a8:	ec 2f       	mov	r30, r28
    57aa:	f0 e0       	ldi	r31, 0x00	; 0
    57ac:	ee 0f       	add	r30, r30
    57ae:	ff 1f       	adc	r31, r31
    57b0:	e6 58       	subi	r30, 0x86	; 134
    57b2:	fc 4f       	sbci	r31, 0xFC	; 252
    57b4:	a5 91       	lpm	r26, Z+
    57b6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    57b8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    57ba:	f8 94       	cli

	if (val == LOW) {
    57bc:	11 11       	cpse	r17, r1
    57be:	05 c0       	rjmp	.+10     	; 0x57ca <digitalWrite+0x4e>
		*out &= ~bit;
    57c0:	9c 91       	ld	r25, X
    57c2:	ed 2f       	mov	r30, r29
    57c4:	e0 95       	com	r30
    57c6:	e9 23       	and	r30, r25
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <digitalWrite+0x52>
	} else {
		*out |= bit;
    57ca:	ec 91       	ld	r30, X
    57cc:	ed 2b       	or	r30, r29
    57ce:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    57d0:	8f bf       	out	0x3f, r24	; 63
}
    57d2:	df 91       	pop	r29
    57d4:	cf 91       	pop	r28
    57d6:	1f 91       	pop	r17
    57d8:	08 95       	ret

000057da <digitalRead>:

int digitalRead(uint8_t pin)
{
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    57de:	28 2f       	mov	r18, r24
    57e0:	30 e0       	ldi	r19, 0x00	; 0
    57e2:	f9 01       	movw	r30, r18
    57e4:	ec 5c       	subi	r30, 0xCC	; 204
    57e6:	fc 4f       	sbci	r31, 0xFC	; 252
    57e8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    57ea:	f9 01       	movw	r30, r18
    57ec:	e8 5b       	subi	r30, 0xB8	; 184
    57ee:	fc 4f       	sbci	r31, 0xFC	; 252
    57f0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    57f2:	f9 01       	movw	r30, r18
    57f4:	e4 5a       	subi	r30, 0xA4	; 164
    57f6:	fc 4f       	sbci	r31, 0xFC	; 252
    57f8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    57fa:	cc 23       	and	r28, r28
    57fc:	89 f0       	breq	.+34     	; 0x5820 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    57fe:	81 11       	cpse	r24, r1
    5800:	58 df       	rcall	.-336    	; 0x56b2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5802:	ec 2f       	mov	r30, r28
    5804:	f0 e0       	ldi	r31, 0x00	; 0
    5806:	ee 0f       	add	r30, r30
    5808:	ff 1f       	adc	r31, r31
    580a:	e0 59       	subi	r30, 0x90	; 144
    580c:	fc 4f       	sbci	r31, 0xFC	; 252
    580e:	a5 91       	lpm	r26, Z+
    5810:	b4 91       	lpm	r27, Z
    5812:	ec 91       	ld	r30, X
    5814:	ed 23       	and	r30, r29
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	21 f4       	brne	.+8      	; 0x5824 <digitalRead+0x4a>
    581c:	80 e0       	ldi	r24, 0x00	; 0
    581e:	02 c0       	rjmp	.+4      	; 0x5824 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5820:	80 e0       	ldi	r24, 0x00	; 0
    5822:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	08 95       	ret

0000582a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    582a:	08 95       	ret

0000582c <__udivmodsi4>:
    582c:	a1 e2       	ldi	r26, 0x21	; 33
    582e:	1a 2e       	mov	r1, r26
    5830:	aa 1b       	sub	r26, r26
    5832:	bb 1b       	sub	r27, r27
    5834:	fd 01       	movw	r30, r26
    5836:	0d c0       	rjmp	.+26     	; 0x5852 <__udivmodsi4_ep>

00005838 <__udivmodsi4_loop>:
    5838:	aa 1f       	adc	r26, r26
    583a:	bb 1f       	adc	r27, r27
    583c:	ee 1f       	adc	r30, r30
    583e:	ff 1f       	adc	r31, r31
    5840:	a2 17       	cp	r26, r18
    5842:	b3 07       	cpc	r27, r19
    5844:	e4 07       	cpc	r30, r20
    5846:	f5 07       	cpc	r31, r21
    5848:	20 f0       	brcs	.+8      	; 0x5852 <__udivmodsi4_ep>
    584a:	a2 1b       	sub	r26, r18
    584c:	b3 0b       	sbc	r27, r19
    584e:	e4 0b       	sbc	r30, r20
    5850:	f5 0b       	sbc	r31, r21

00005852 <__udivmodsi4_ep>:
    5852:	66 1f       	adc	r22, r22
    5854:	77 1f       	adc	r23, r23
    5856:	88 1f       	adc	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	1a 94       	dec	r1
    585c:	69 f7       	brne	.-38     	; 0x5838 <__udivmodsi4_loop>
    585e:	60 95       	com	r22
    5860:	70 95       	com	r23
    5862:	80 95       	com	r24
    5864:	90 95       	com	r25
    5866:	9b 01       	movw	r18, r22
    5868:	ac 01       	movw	r20, r24
    586a:	bd 01       	movw	r22, r26
    586c:	cf 01       	movw	r24, r30
    586e:	08 95       	ret

00005870 <__divmodsi4>:
    5870:	05 2e       	mov	r0, r21
    5872:	97 fb       	bst	r25, 7
    5874:	16 f4       	brtc	.+4      	; 0x587a <__divmodsi4+0xa>
    5876:	00 94       	com	r0
    5878:	0f d0       	rcall	.+30     	; 0x5898 <__negsi2>
    587a:	57 fd       	sbrc	r21, 7
    587c:	05 d0       	rcall	.+10     	; 0x5888 <__divmodsi4_neg2>
    587e:	d6 df       	rcall	.-84     	; 0x582c <__udivmodsi4>
    5880:	07 fc       	sbrc	r0, 7
    5882:	02 d0       	rcall	.+4      	; 0x5888 <__divmodsi4_neg2>
    5884:	46 f4       	brtc	.+16     	; 0x5896 <__divmodsi4_exit>
    5886:	08 c0       	rjmp	.+16     	; 0x5898 <__negsi2>

00005888 <__divmodsi4_neg2>:
    5888:	50 95       	com	r21
    588a:	40 95       	com	r20
    588c:	30 95       	com	r19
    588e:	21 95       	neg	r18
    5890:	3f 4f       	sbci	r19, 0xFF	; 255
    5892:	4f 4f       	sbci	r20, 0xFF	; 255
    5894:	5f 4f       	sbci	r21, 0xFF	; 255

00005896 <__divmodsi4_exit>:
    5896:	08 95       	ret

00005898 <__negsi2>:
    5898:	90 95       	com	r25
    589a:	80 95       	com	r24
    589c:	70 95       	com	r23
    589e:	61 95       	neg	r22
    58a0:	7f 4f       	sbci	r23, 0xFF	; 255
    58a2:	8f 4f       	sbci	r24, 0xFF	; 255
    58a4:	9f 4f       	sbci	r25, 0xFF	; 255
    58a6:	08 95       	ret

000058a8 <__tablejump2__>:
    58a8:	ee 0f       	add	r30, r30
    58aa:	ff 1f       	adc	r31, r31
    58ac:	05 90       	lpm	r0, Z+
    58ae:	f4 91       	lpm	r31, Z
    58b0:	e0 2d       	mov	r30, r0
    58b2:	09 94       	ijmp

000058b4 <__muluhisi3>:
    58b4:	40 d0       	rcall	.+128    	; 0x5936 <__umulhisi3>
    58b6:	a5 9f       	mul	r26, r21
    58b8:	90 0d       	add	r25, r0
    58ba:	b4 9f       	mul	r27, r20
    58bc:	90 0d       	add	r25, r0
    58be:	a4 9f       	mul	r26, r20
    58c0:	80 0d       	add	r24, r0
    58c2:	91 1d       	adc	r25, r1
    58c4:	11 24       	eor	r1, r1
    58c6:	08 95       	ret

000058c8 <__prologue_saves__>:
    58c8:	2f 92       	push	r2
    58ca:	3f 92       	push	r3
    58cc:	4f 92       	push	r4
    58ce:	5f 92       	push	r5
    58d0:	6f 92       	push	r6
    58d2:	7f 92       	push	r7
    58d4:	8f 92       	push	r8
    58d6:	9f 92       	push	r9
    58d8:	af 92       	push	r10
    58da:	bf 92       	push	r11
    58dc:	cf 92       	push	r12
    58de:	df 92       	push	r13
    58e0:	ef 92       	push	r14
    58e2:	ff 92       	push	r15
    58e4:	0f 93       	push	r16
    58e6:	1f 93       	push	r17
    58e8:	cf 93       	push	r28
    58ea:	df 93       	push	r29
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	ca 1b       	sub	r28, r26
    58f2:	db 0b       	sbc	r29, r27
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	f8 94       	cli
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	0f be       	out	0x3f, r0	; 63
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	09 94       	ijmp

00005900 <__epilogue_restores__>:
    5900:	2a 88       	ldd	r2, Y+18	; 0x12
    5902:	39 88       	ldd	r3, Y+17	; 0x11
    5904:	48 88       	ldd	r4, Y+16	; 0x10
    5906:	5f 84       	ldd	r5, Y+15	; 0x0f
    5908:	6e 84       	ldd	r6, Y+14	; 0x0e
    590a:	7d 84       	ldd	r7, Y+13	; 0x0d
    590c:	8c 84       	ldd	r8, Y+12	; 0x0c
    590e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5910:	aa 84       	ldd	r10, Y+10	; 0x0a
    5912:	b9 84       	ldd	r11, Y+9	; 0x09
    5914:	c8 84       	ldd	r12, Y+8	; 0x08
    5916:	df 80       	ldd	r13, Y+7	; 0x07
    5918:	ee 80       	ldd	r14, Y+6	; 0x06
    591a:	fd 80       	ldd	r15, Y+5	; 0x05
    591c:	0c 81       	ldd	r16, Y+4	; 0x04
    591e:	1b 81       	ldd	r17, Y+3	; 0x03
    5920:	aa 81       	ldd	r26, Y+2	; 0x02
    5922:	b9 81       	ldd	r27, Y+1	; 0x01
    5924:	ce 0f       	add	r28, r30
    5926:	d1 1d       	adc	r29, r1
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	f8 94       	cli
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	cd bf       	out	0x3d, r28	; 61
    5932:	ed 01       	movw	r28, r26
    5934:	08 95       	ret

00005936 <__umulhisi3>:
    5936:	a2 9f       	mul	r26, r18
    5938:	b0 01       	movw	r22, r0
    593a:	b3 9f       	mul	r27, r19
    593c:	c0 01       	movw	r24, r0
    593e:	a3 9f       	mul	r26, r19
    5940:	70 0d       	add	r23, r0
    5942:	81 1d       	adc	r24, r1
    5944:	11 24       	eor	r1, r1
    5946:	91 1d       	adc	r25, r1
    5948:	b2 9f       	mul	r27, r18
    594a:	70 0d       	add	r23, r0
    594c:	81 1d       	adc	r24, r1
    594e:	11 24       	eor	r1, r1
    5950:	91 1d       	adc	r25, r1
    5952:	08 95       	ret

00005954 <malloc>:
    5954:	cf 93       	push	r28
    5956:	df 93       	push	r29
    5958:	82 30       	cpi	r24, 0x02	; 2
    595a:	91 05       	cpc	r25, r1
    595c:	10 f4       	brcc	.+4      	; 0x5962 <malloc+0xe>
    595e:	82 e0       	ldi	r24, 0x02	; 2
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <__flp>
    5966:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <__flp+0x1>
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	c0 e0       	ldi	r28, 0x00	; 0
    5970:	d0 e0       	ldi	r29, 0x00	; 0
    5972:	30 97       	sbiw	r30, 0x00	; 0
    5974:	11 f1       	breq	.+68     	; 0x59ba <malloc+0x66>
    5976:	40 81       	ld	r20, Z
    5978:	51 81       	ldd	r21, Z+1	; 0x01
    597a:	48 17       	cp	r20, r24
    597c:	59 07       	cpc	r21, r25
    597e:	c0 f0       	brcs	.+48     	; 0x59b0 <malloc+0x5c>
    5980:	48 17       	cp	r20, r24
    5982:	59 07       	cpc	r21, r25
    5984:	61 f4       	brne	.+24     	; 0x599e <malloc+0x4a>
    5986:	82 81       	ldd	r24, Z+2	; 0x02
    5988:	93 81       	ldd	r25, Z+3	; 0x03
    598a:	20 97       	sbiw	r28, 0x00	; 0
    598c:	19 f0       	breq	.+6      	; 0x5994 <malloc+0x40>
    598e:	9b 83       	std	Y+3, r25	; 0x03
    5990:	8a 83       	std	Y+2, r24	; 0x02
    5992:	2b c0       	rjmp	.+86     	; 0x59ea <malloc+0x96>
    5994:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <__flp+0x1>
    5998:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <__flp>
    599c:	26 c0       	rjmp	.+76     	; 0x59ea <malloc+0x96>
    599e:	21 15       	cp	r18, r1
    59a0:	31 05       	cpc	r19, r1
    59a2:	19 f0       	breq	.+6      	; 0x59aa <malloc+0x56>
    59a4:	42 17       	cp	r20, r18
    59a6:	53 07       	cpc	r21, r19
    59a8:	18 f4       	brcc	.+6      	; 0x59b0 <malloc+0x5c>
    59aa:	9a 01       	movw	r18, r20
    59ac:	be 01       	movw	r22, r28
    59ae:	df 01       	movw	r26, r30
    59b0:	ef 01       	movw	r28, r30
    59b2:	02 80       	ldd	r0, Z+2	; 0x02
    59b4:	f3 81       	ldd	r31, Z+3	; 0x03
    59b6:	e0 2d       	mov	r30, r0
    59b8:	dc cf       	rjmp	.-72     	; 0x5972 <malloc+0x1e>
    59ba:	21 15       	cp	r18, r1
    59bc:	31 05       	cpc	r19, r1
    59be:	09 f1       	breq	.+66     	; 0x5a02 <malloc+0xae>
    59c0:	28 1b       	sub	r18, r24
    59c2:	39 0b       	sbc	r19, r25
    59c4:	24 30       	cpi	r18, 0x04	; 4
    59c6:	31 05       	cpc	r19, r1
    59c8:	90 f4       	brcc	.+36     	; 0x59ee <malloc+0x9a>
    59ca:	12 96       	adiw	r26, 0x02	; 2
    59cc:	8d 91       	ld	r24, X+
    59ce:	9c 91       	ld	r25, X
    59d0:	13 97       	sbiw	r26, 0x03	; 3
    59d2:	61 15       	cp	r22, r1
    59d4:	71 05       	cpc	r23, r1
    59d6:	21 f0       	breq	.+8      	; 0x59e0 <malloc+0x8c>
    59d8:	fb 01       	movw	r30, r22
    59da:	93 83       	std	Z+3, r25	; 0x03
    59dc:	82 83       	std	Z+2, r24	; 0x02
    59de:	04 c0       	rjmp	.+8      	; 0x59e8 <malloc+0x94>
    59e0:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <__flp+0x1>
    59e4:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <__flp>
    59e8:	fd 01       	movw	r30, r26
    59ea:	32 96       	adiw	r30, 0x02	; 2
    59ec:	44 c0       	rjmp	.+136    	; 0x5a76 <malloc+0x122>
    59ee:	fd 01       	movw	r30, r26
    59f0:	e2 0f       	add	r30, r18
    59f2:	f3 1f       	adc	r31, r19
    59f4:	81 93       	st	Z+, r24
    59f6:	91 93       	st	Z+, r25
    59f8:	22 50       	subi	r18, 0x02	; 2
    59fa:	31 09       	sbc	r19, r1
    59fc:	2d 93       	st	X+, r18
    59fe:	3c 93       	st	X, r19
    5a00:	3a c0       	rjmp	.+116    	; 0x5a76 <malloc+0x122>
    5a02:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <__brkval>
    5a06:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <__brkval+0x1>
    5a0a:	23 2b       	or	r18, r19
    5a0c:	41 f4       	brne	.+16     	; 0x5a1e <malloc+0xca>
    5a0e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5a12:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5a16:	30 93 eb 07 	sts	0x07EB, r19	; 0x8007eb <__brkval+0x1>
    5a1a:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__brkval>
    5a1e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5a22:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5a26:	21 15       	cp	r18, r1
    5a28:	31 05       	cpc	r19, r1
    5a2a:	41 f4       	brne	.+16     	; 0x5a3c <malloc+0xe8>
    5a2c:	2d b7       	in	r18, 0x3d	; 61
    5a2e:	3e b7       	in	r19, 0x3e	; 62
    5a30:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5a34:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5a38:	24 1b       	sub	r18, r20
    5a3a:	35 0b       	sbc	r19, r21
    5a3c:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <__brkval>
    5a40:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <__brkval+0x1>
    5a44:	e2 17       	cp	r30, r18
    5a46:	f3 07       	cpc	r31, r19
    5a48:	a0 f4       	brcc	.+40     	; 0x5a72 <malloc+0x11e>
    5a4a:	2e 1b       	sub	r18, r30
    5a4c:	3f 0b       	sbc	r19, r31
    5a4e:	28 17       	cp	r18, r24
    5a50:	39 07       	cpc	r19, r25
    5a52:	78 f0       	brcs	.+30     	; 0x5a72 <malloc+0x11e>
    5a54:	ac 01       	movw	r20, r24
    5a56:	4e 5f       	subi	r20, 0xFE	; 254
    5a58:	5f 4f       	sbci	r21, 0xFF	; 255
    5a5a:	24 17       	cp	r18, r20
    5a5c:	35 07       	cpc	r19, r21
    5a5e:	48 f0       	brcs	.+18     	; 0x5a72 <malloc+0x11e>
    5a60:	4e 0f       	add	r20, r30
    5a62:	5f 1f       	adc	r21, r31
    5a64:	50 93 eb 07 	sts	0x07EB, r21	; 0x8007eb <__brkval+0x1>
    5a68:	40 93 ea 07 	sts	0x07EA, r20	; 0x8007ea <__brkval>
    5a6c:	81 93       	st	Z+, r24
    5a6e:	91 93       	st	Z+, r25
    5a70:	02 c0       	rjmp	.+4      	; 0x5a76 <malloc+0x122>
    5a72:	e0 e0       	ldi	r30, 0x00	; 0
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	cf 01       	movw	r24, r30
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	08 95       	ret

00005a7e <free>:
    5a7e:	0f 93       	push	r16
    5a80:	1f 93       	push	r17
    5a82:	cf 93       	push	r28
    5a84:	df 93       	push	r29
    5a86:	00 97       	sbiw	r24, 0x00	; 0
    5a88:	09 f4       	brne	.+2      	; 0x5a8c <free+0xe>
    5a8a:	8c c0       	rjmp	.+280    	; 0x5ba4 <free+0x126>
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	32 97       	sbiw	r30, 0x02	; 2
    5a90:	13 82       	std	Z+3, r1	; 0x03
    5a92:	12 82       	std	Z+2, r1	; 0x02
    5a94:	00 91 ec 07 	lds	r16, 0x07EC	; 0x8007ec <__flp>
    5a98:	10 91 ed 07 	lds	r17, 0x07ED	; 0x8007ed <__flp+0x1>
    5a9c:	01 15       	cp	r16, r1
    5a9e:	11 05       	cpc	r17, r1
    5aa0:	81 f4       	brne	.+32     	; 0x5ac2 <free+0x44>
    5aa2:	20 81       	ld	r18, Z
    5aa4:	31 81       	ldd	r19, Z+1	; 0x01
    5aa6:	82 0f       	add	r24, r18
    5aa8:	93 1f       	adc	r25, r19
    5aaa:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <__brkval>
    5aae:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <__brkval+0x1>
    5ab2:	28 17       	cp	r18, r24
    5ab4:	39 07       	cpc	r19, r25
    5ab6:	79 f5       	brne	.+94     	; 0x5b16 <free+0x98>
    5ab8:	f0 93 eb 07 	sts	0x07EB, r31	; 0x8007eb <__brkval+0x1>
    5abc:	e0 93 ea 07 	sts	0x07EA, r30	; 0x8007ea <__brkval>
    5ac0:	71 c0       	rjmp	.+226    	; 0x5ba4 <free+0x126>
    5ac2:	d8 01       	movw	r26, r16
    5ac4:	40 e0       	ldi	r20, 0x00	; 0
    5ac6:	50 e0       	ldi	r21, 0x00	; 0
    5ac8:	ae 17       	cp	r26, r30
    5aca:	bf 07       	cpc	r27, r31
    5acc:	50 f4       	brcc	.+20     	; 0x5ae2 <free+0x64>
    5ace:	12 96       	adiw	r26, 0x02	; 2
    5ad0:	2d 91       	ld	r18, X+
    5ad2:	3c 91       	ld	r19, X
    5ad4:	13 97       	sbiw	r26, 0x03	; 3
    5ad6:	ad 01       	movw	r20, r26
    5ad8:	21 15       	cp	r18, r1
    5ada:	31 05       	cpc	r19, r1
    5adc:	09 f1       	breq	.+66     	; 0x5b20 <free+0xa2>
    5ade:	d9 01       	movw	r26, r18
    5ae0:	f3 cf       	rjmp	.-26     	; 0x5ac8 <free+0x4a>
    5ae2:	9d 01       	movw	r18, r26
    5ae4:	da 01       	movw	r26, r20
    5ae6:	33 83       	std	Z+3, r19	; 0x03
    5ae8:	22 83       	std	Z+2, r18	; 0x02
    5aea:	60 81       	ld	r22, Z
    5aec:	71 81       	ldd	r23, Z+1	; 0x01
    5aee:	86 0f       	add	r24, r22
    5af0:	97 1f       	adc	r25, r23
    5af2:	82 17       	cp	r24, r18
    5af4:	93 07       	cpc	r25, r19
    5af6:	69 f4       	brne	.+26     	; 0x5b12 <free+0x94>
    5af8:	ec 01       	movw	r28, r24
    5afa:	28 81       	ld	r18, Y
    5afc:	39 81       	ldd	r19, Y+1	; 0x01
    5afe:	26 0f       	add	r18, r22
    5b00:	37 1f       	adc	r19, r23
    5b02:	2e 5f       	subi	r18, 0xFE	; 254
    5b04:	3f 4f       	sbci	r19, 0xFF	; 255
    5b06:	31 83       	std	Z+1, r19	; 0x01
    5b08:	20 83       	st	Z, r18
    5b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b0e:	93 83       	std	Z+3, r25	; 0x03
    5b10:	82 83       	std	Z+2, r24	; 0x02
    5b12:	45 2b       	or	r20, r21
    5b14:	29 f4       	brne	.+10     	; 0x5b20 <free+0xa2>
    5b16:	f0 93 ed 07 	sts	0x07ED, r31	; 0x8007ed <__flp+0x1>
    5b1a:	e0 93 ec 07 	sts	0x07EC, r30	; 0x8007ec <__flp>
    5b1e:	42 c0       	rjmp	.+132    	; 0x5ba4 <free+0x126>
    5b20:	13 96       	adiw	r26, 0x03	; 3
    5b22:	fc 93       	st	X, r31
    5b24:	ee 93       	st	-X, r30
    5b26:	12 97       	sbiw	r26, 0x02	; 2
    5b28:	ed 01       	movw	r28, r26
    5b2a:	49 91       	ld	r20, Y+
    5b2c:	59 91       	ld	r21, Y+
    5b2e:	9e 01       	movw	r18, r28
    5b30:	24 0f       	add	r18, r20
    5b32:	35 1f       	adc	r19, r21
    5b34:	e2 17       	cp	r30, r18
    5b36:	f3 07       	cpc	r31, r19
    5b38:	71 f4       	brne	.+28     	; 0x5b56 <free+0xd8>
    5b3a:	80 81       	ld	r24, Z
    5b3c:	91 81       	ldd	r25, Z+1	; 0x01
    5b3e:	84 0f       	add	r24, r20
    5b40:	95 1f       	adc	r25, r21
    5b42:	02 96       	adiw	r24, 0x02	; 2
    5b44:	11 96       	adiw	r26, 0x01	; 1
    5b46:	9c 93       	st	X, r25
    5b48:	8e 93       	st	-X, r24
    5b4a:	82 81       	ldd	r24, Z+2	; 0x02
    5b4c:	93 81       	ldd	r25, Z+3	; 0x03
    5b4e:	13 96       	adiw	r26, 0x03	; 3
    5b50:	9c 93       	st	X, r25
    5b52:	8e 93       	st	-X, r24
    5b54:	12 97       	sbiw	r26, 0x02	; 2
    5b56:	e0 e0       	ldi	r30, 0x00	; 0
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
    5b5a:	d8 01       	movw	r26, r16
    5b5c:	12 96       	adiw	r26, 0x02	; 2
    5b5e:	8d 91       	ld	r24, X+
    5b60:	9c 91       	ld	r25, X
    5b62:	13 97       	sbiw	r26, 0x03	; 3
    5b64:	00 97       	sbiw	r24, 0x00	; 0
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <free+0xf0>
    5b68:	f8 01       	movw	r30, r16
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	f6 cf       	rjmp	.-20     	; 0x5b5a <free+0xdc>
    5b6e:	8d 91       	ld	r24, X+
    5b70:	9c 91       	ld	r25, X
    5b72:	98 01       	movw	r18, r16
    5b74:	2e 5f       	subi	r18, 0xFE	; 254
    5b76:	3f 4f       	sbci	r19, 0xFF	; 255
    5b78:	82 0f       	add	r24, r18
    5b7a:	93 1f       	adc	r25, r19
    5b7c:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <__brkval>
    5b80:	30 91 eb 07 	lds	r19, 0x07EB	; 0x8007eb <__brkval+0x1>
    5b84:	28 17       	cp	r18, r24
    5b86:	39 07       	cpc	r19, r25
    5b88:	69 f4       	brne	.+26     	; 0x5ba4 <free+0x126>
    5b8a:	30 97       	sbiw	r30, 0x00	; 0
    5b8c:	29 f4       	brne	.+10     	; 0x5b98 <free+0x11a>
    5b8e:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__flp+0x1>
    5b92:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__flp>
    5b96:	02 c0       	rjmp	.+4      	; 0x5b9c <free+0x11e>
    5b98:	13 82       	std	Z+3, r1	; 0x03
    5b9a:	12 82       	std	Z+2, r1	; 0x02
    5b9c:	10 93 eb 07 	sts	0x07EB, r17	; 0x8007eb <__brkval+0x1>
    5ba0:	00 93 ea 07 	sts	0x07EA, r16	; 0x8007ea <__brkval>
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	08 95       	ret

00005bae <strtod>:
    5bae:	a0 e0       	ldi	r26, 0x00	; 0
    5bb0:	b0 e0       	ldi	r27, 0x00	; 0
    5bb2:	ec ed       	ldi	r30, 0xDC	; 220
    5bb4:	fd e2       	ldi	r31, 0x2D	; 45
    5bb6:	8c ce       	rjmp	.-744    	; 0x58d0 <__prologue_saves__+0x8>
    5bb8:	ec 01       	movw	r28, r24
    5bba:	7b 01       	movw	r14, r22
    5bbc:	61 15       	cp	r22, r1
    5bbe:	71 05       	cpc	r23, r1
    5bc0:	19 f0       	breq	.+6      	; 0x5bc8 <strtod+0x1a>
    5bc2:	db 01       	movw	r26, r22
    5bc4:	8d 93       	st	X+, r24
    5bc6:	9c 93       	st	X, r25
    5bc8:	8e 01       	movw	r16, r28
    5bca:	0f 5f       	subi	r16, 0xFF	; 255
    5bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bce:	78 80       	ld	r7, Y
    5bd0:	87 2d       	mov	r24, r7
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	63 d1       	rcall	.+710    	; 0x5e9c <isspace>
    5bd6:	89 2b       	or	r24, r25
    5bd8:	11 f0       	breq	.+4      	; 0x5bde <strtod+0x30>
    5bda:	e8 01       	movw	r28, r16
    5bdc:	f5 cf       	rjmp	.-22     	; 0x5bc8 <strtod+0x1a>
    5bde:	bd e2       	ldi	r27, 0x2D	; 45
    5be0:	7b 12       	cpse	r7, r27
    5be2:	05 c0       	rjmp	.+10     	; 0x5bee <strtod+0x40>
    5be4:	0f 5f       	subi	r16, 0xFF	; 255
    5be6:	1f 4f       	sbci	r17, 0xFF	; 255
    5be8:	79 80       	ldd	r7, Y+1	; 0x01
    5bea:	c1 e0       	ldi	r28, 0x01	; 1
    5bec:	08 c0       	rjmp	.+16     	; 0x5bfe <strtod+0x50>
    5bee:	eb e2       	ldi	r30, 0x2B	; 43
    5bf0:	7e 12       	cpse	r7, r30
    5bf2:	04 c0       	rjmp	.+8      	; 0x5bfc <strtod+0x4e>
    5bf4:	8e 01       	movw	r16, r28
    5bf6:	0e 5f       	subi	r16, 0xFE	; 254
    5bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    5bfa:	79 80       	ldd	r7, Y+1	; 0x01
    5bfc:	c0 e0       	ldi	r28, 0x00	; 0
    5bfe:	68 01       	movw	r12, r16
    5c00:	f1 e0       	ldi	r31, 0x01	; 1
    5c02:	cf 1a       	sub	r12, r31
    5c04:	d1 08       	sbc	r13, r1
    5c06:	43 e0       	ldi	r20, 0x03	; 3
    5c08:	50 e0       	ldi	r21, 0x00	; 0
    5c0a:	64 e8       	ldi	r22, 0x84	; 132
    5c0c:	72 e0       	ldi	r23, 0x02	; 2
    5c0e:	c6 01       	movw	r24, r12
    5c10:	4d d1       	rcall	.+666    	; 0x5eac <strncasecmp_P>
    5c12:	89 2b       	or	r24, r25
    5c14:	e9 f4       	brne	.+58     	; 0x5c50 <strtod+0xa2>
    5c16:	68 01       	movw	r12, r16
    5c18:	22 e0       	ldi	r18, 0x02	; 2
    5c1a:	c2 0e       	add	r12, r18
    5c1c:	d1 1c       	adc	r13, r1
    5c1e:	45 e0       	ldi	r20, 0x05	; 5
    5c20:	50 e0       	ldi	r21, 0x00	; 0
    5c22:	6f e7       	ldi	r22, 0x7F	; 127
    5c24:	72 e0       	ldi	r23, 0x02	; 2
    5c26:	c6 01       	movw	r24, r12
    5c28:	41 d1       	rcall	.+642    	; 0x5eac <strncasecmp_P>
    5c2a:	89 2b       	or	r24, r25
    5c2c:	21 f4       	brne	.+8      	; 0x5c36 <strtod+0x88>
    5c2e:	68 01       	movw	r12, r16
    5c30:	87 e0       	ldi	r24, 0x07	; 7
    5c32:	c8 0e       	add	r12, r24
    5c34:	d1 1c       	adc	r13, r1
    5c36:	e1 14       	cp	r14, r1
    5c38:	f1 04       	cpc	r15, r1
    5c3a:	19 f0       	breq	.+6      	; 0x5c42 <strtod+0x94>
    5c3c:	d7 01       	movw	r26, r14
    5c3e:	cd 92       	st	X+, r12
    5c40:	dc 92       	st	X, r13
    5c42:	c1 11       	cpse	r28, r1
    5c44:	fd c0       	rjmp	.+506    	; 0x5e40 <strtod+0x292>
    5c46:	60 e0       	ldi	r22, 0x00	; 0
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	80 e8       	ldi	r24, 0x80	; 128
    5c4c:	9f e7       	ldi	r25, 0x7F	; 127
    5c4e:	01 c1       	rjmp	.+514    	; 0x5e52 <strtod+0x2a4>
    5c50:	43 e0       	ldi	r20, 0x03	; 3
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	6c e7       	ldi	r22, 0x7C	; 124
    5c56:	72 e0       	ldi	r23, 0x02	; 2
    5c58:	c6 01       	movw	r24, r12
    5c5a:	28 d1       	rcall	.+592    	; 0x5eac <strncasecmp_P>
    5c5c:	89 2b       	or	r24, r25
    5c5e:	51 f4       	brne	.+20     	; 0x5c74 <strtod+0xc6>
    5c60:	e1 14       	cp	r14, r1
    5c62:	f1 04       	cpc	r15, r1
    5c64:	09 f4       	brne	.+2      	; 0x5c68 <strtod+0xba>
    5c66:	f1 c0       	rjmp	.+482    	; 0x5e4a <strtod+0x29c>
    5c68:	0e 5f       	subi	r16, 0xFE	; 254
    5c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c6c:	f7 01       	movw	r30, r14
    5c6e:	11 83       	std	Z+1, r17	; 0x01
    5c70:	00 83       	st	Z, r16
    5c72:	eb c0       	rjmp	.+470    	; 0x5e4a <strtod+0x29c>
    5c74:	68 01       	movw	r12, r16
    5c76:	60 e0       	ldi	r22, 0x00	; 0
    5c78:	70 e0       	ldi	r23, 0x00	; 0
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	00 e0       	ldi	r16, 0x00	; 0
    5c7e:	10 e0       	ldi	r17, 0x00	; 0
    5c80:	f6 01       	movw	r30, r12
    5c82:	d0 ed       	ldi	r29, 0xD0	; 208
    5c84:	d7 0d       	add	r29, r7
    5c86:	da 30       	cpi	r29, 0x0A	; 10
    5c88:	50 f5       	brcc	.+84     	; 0x5cde <strtod+0x130>
    5c8a:	2c 2f       	mov	r18, r28
    5c8c:	22 60       	ori	r18, 0x02	; 2
    5c8e:	62 2e       	mov	r6, r18
    5c90:	2c 2f       	mov	r18, r28
    5c92:	28 70       	andi	r18, 0x08	; 8
    5c94:	c2 ff       	sbrs	r28, 2
    5c96:	05 c0       	rjmp	.+10     	; 0x5ca2 <strtod+0xf4>
    5c98:	21 11       	cpse	r18, r1
    5c9a:	27 c0       	rjmp	.+78     	; 0x5cea <strtod+0x13c>
    5c9c:	0f 5f       	subi	r16, 0xFF	; 255
    5c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca0:	24 c0       	rjmp	.+72     	; 0x5cea <strtod+0x13c>
    5ca2:	22 23       	and	r18, r18
    5ca4:	11 f0       	breq	.+4      	; 0x5caa <strtod+0xfc>
    5ca6:	01 50       	subi	r16, 0x01	; 1
    5ca8:	11 09       	sbc	r17, r1
    5caa:	a5 e0       	ldi	r26, 0x05	; 5
    5cac:	b0 e0       	ldi	r27, 0x00	; 0
    5cae:	9b 01       	movw	r18, r22
    5cb0:	ac 01       	movw	r20, r24
    5cb2:	00 de       	rcall	.-1024   	; 0x58b4 <__muluhisi3>
    5cb4:	4b 01       	movw	r8, r22
    5cb6:	5c 01       	movw	r10, r24
    5cb8:	88 0c       	add	r8, r8
    5cba:	99 1c       	adc	r9, r9
    5cbc:	aa 1c       	adc	r10, r10
    5cbe:	bb 1c       	adc	r11, r11
    5cc0:	c5 01       	movw	r24, r10
    5cc2:	b4 01       	movw	r22, r8
    5cc4:	6d 0f       	add	r22, r29
    5cc6:	71 1d       	adc	r23, r1
    5cc8:	81 1d       	adc	r24, r1
    5cca:	91 1d       	adc	r25, r1
    5ccc:	68 39       	cpi	r22, 0x98	; 152
    5cce:	a9 e9       	ldi	r26, 0x99	; 153
    5cd0:	7a 07       	cpc	r23, r26
    5cd2:	8a 07       	cpc	r24, r26
    5cd4:	a9 e1       	ldi	r26, 0x19	; 25
    5cd6:	9a 07       	cpc	r25, r26
    5cd8:	40 f0       	brcs	.+16     	; 0x5cea <strtod+0x13c>
    5cda:	c6 60       	ori	r28, 0x06	; 6
    5cdc:	05 c0       	rjmp	.+10     	; 0x5ce8 <strtod+0x13a>
    5cde:	de 3f       	cpi	r29, 0xFE	; 254
    5ce0:	51 f4       	brne	.+20     	; 0x5cf6 <strtod+0x148>
    5ce2:	c3 fd       	sbrc	r28, 3
    5ce4:	44 c0       	rjmp	.+136    	; 0x5d6e <strtod+0x1c0>
    5ce6:	c8 60       	ori	r28, 0x08	; 8
    5ce8:	6c 2e       	mov	r6, r28
    5cea:	bf ef       	ldi	r27, 0xFF	; 255
    5cec:	cb 1a       	sub	r12, r27
    5cee:	db 0a       	sbc	r13, r27
    5cf0:	70 80       	ld	r7, Z
    5cf2:	c6 2d       	mov	r28, r6
    5cf4:	c5 cf       	rjmp	.-118    	; 0x5c80 <strtod+0xd2>
    5cf6:	2d 2f       	mov	r18, r29
    5cf8:	2f 7d       	andi	r18, 0xDF	; 223
    5cfa:	25 31       	cpi	r18, 0x15	; 21
    5cfc:	c1 f5       	brne	.+112    	; 0x5d6e <strtod+0x1c0>
    5cfe:	40 81       	ld	r20, Z
    5d00:	4d 32       	cpi	r20, 0x2D	; 45
    5d02:	11 f4       	brne	.+4      	; 0x5d08 <strtod+0x15a>
    5d04:	c0 61       	ori	r28, 0x10	; 16
    5d06:	06 c0       	rjmp	.+12     	; 0x5d14 <strtod+0x166>
    5d08:	4b 32       	cpi	r20, 0x2B	; 43
    5d0a:	21 f0       	breq	.+8      	; 0x5d14 <strtod+0x166>
    5d0c:	31 96       	adiw	r30, 0x01	; 1
    5d0e:	21 e0       	ldi	r18, 0x01	; 1
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	06 c0       	rjmp	.+12     	; 0x5d20 <strtod+0x172>
    5d14:	32 96       	adiw	r30, 0x02	; 2
    5d16:	d6 01       	movw	r26, r12
    5d18:	11 96       	adiw	r26, 0x01	; 1
    5d1a:	4c 91       	ld	r20, X
    5d1c:	22 e0       	ldi	r18, 0x02	; 2
    5d1e:	30 e0       	ldi	r19, 0x00	; 0
    5d20:	a0 ed       	ldi	r26, 0xD0	; 208
    5d22:	a4 0f       	add	r26, r20
    5d24:	aa 30       	cpi	r26, 0x0A	; 10
    5d26:	18 f0       	brcs	.+6      	; 0x5d2e <strtod+0x180>
    5d28:	e2 1b       	sub	r30, r18
    5d2a:	f3 0b       	sbc	r31, r19
    5d2c:	20 c0       	rjmp	.+64     	; 0x5d6e <strtod+0x1c0>
    5d2e:	40 e0       	ldi	r20, 0x00	; 0
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	40 38       	cpi	r20, 0x80	; 128
    5d34:	bc e0       	ldi	r27, 0x0C	; 12
    5d36:	5b 07       	cpc	r21, r27
    5d38:	5c f4       	brge	.+22     	; 0x5d50 <strtod+0x1a2>
    5d3a:	9a 01       	movw	r18, r20
    5d3c:	22 0f       	add	r18, r18
    5d3e:	33 1f       	adc	r19, r19
    5d40:	22 0f       	add	r18, r18
    5d42:	33 1f       	adc	r19, r19
    5d44:	42 0f       	add	r20, r18
    5d46:	53 1f       	adc	r21, r19
    5d48:	44 0f       	add	r20, r20
    5d4a:	55 1f       	adc	r21, r21
    5d4c:	4a 0f       	add	r20, r26
    5d4e:	51 1d       	adc	r21, r1
    5d50:	31 96       	adiw	r30, 0x01	; 1
    5d52:	df 01       	movw	r26, r30
    5d54:	11 97       	sbiw	r26, 0x01	; 1
    5d56:	2c 91       	ld	r18, X
    5d58:	a0 ed       	ldi	r26, 0xD0	; 208
    5d5a:	a2 0f       	add	r26, r18
    5d5c:	aa 30       	cpi	r26, 0x0A	; 10
    5d5e:	48 f3       	brcs	.-46     	; 0x5d32 <strtod+0x184>
    5d60:	c4 ff       	sbrs	r28, 4
    5d62:	03 c0       	rjmp	.+6      	; 0x5d6a <strtod+0x1bc>
    5d64:	51 95       	neg	r21
    5d66:	41 95       	neg	r20
    5d68:	51 09       	sbc	r21, r1
    5d6a:	04 0f       	add	r16, r20
    5d6c:	15 1f       	adc	r17, r21
    5d6e:	c1 ff       	sbrs	r28, 1
    5d70:	07 c0       	rjmp	.+14     	; 0x5d80 <strtod+0x1d2>
    5d72:	e1 14       	cp	r14, r1
    5d74:	f1 04       	cpc	r15, r1
    5d76:	21 f0       	breq	.+8      	; 0x5d80 <strtod+0x1d2>
    5d78:	31 97       	sbiw	r30, 0x01	; 1
    5d7a:	d7 01       	movw	r26, r14
    5d7c:	ed 93       	st	X+, r30
    5d7e:	fc 93       	st	X, r31
    5d80:	0e 94 aa 23 	call	0x4754	; 0x4754 <__floatunsisf>
    5d84:	c3 70       	andi	r28, 0x03	; 3
    5d86:	c3 30       	cpi	r28, 0x03	; 3
    5d88:	19 f0       	breq	.+6      	; 0x5d90 <strtod+0x1e2>
    5d8a:	6b 01       	movw	r12, r22
    5d8c:	7c 01       	movw	r14, r24
    5d8e:	06 c0       	rjmp	.+12     	; 0x5d9c <strtod+0x1ee>
    5d90:	6b 01       	movw	r12, r22
    5d92:	7c 01       	movw	r14, r24
    5d94:	f7 fa       	bst	r15, 7
    5d96:	f0 94       	com	r15
    5d98:	f7 f8       	bld	r15, 7
    5d9a:	f0 94       	com	r15
    5d9c:	20 e0       	ldi	r18, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	a9 01       	movw	r20, r18
    5da2:	c7 01       	movw	r24, r14
    5da4:	b6 01       	movw	r22, r12
    5da6:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    5daa:	88 23       	and	r24, r24
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <strtod+0x202>
    5dae:	45 c0       	rjmp	.+138    	; 0x5e3a <strtod+0x28c>
    5db0:	17 ff       	sbrs	r17, 7
    5db2:	06 c0       	rjmp	.+12     	; 0x5dc0 <strtod+0x212>
    5db4:	11 95       	neg	r17
    5db6:	01 95       	neg	r16
    5db8:	11 09       	sbc	r17, r1
    5dba:	cb e9       	ldi	r28, 0x9B	; 155
    5dbc:	d2 e0       	ldi	r29, 0x02	; 2
    5dbe:	02 c0       	rjmp	.+4      	; 0x5dc4 <strtod+0x216>
    5dc0:	c3 eb       	ldi	r28, 0xB3	; 179
    5dc2:	d2 e0       	ldi	r29, 0x02	; 2
    5dc4:	5e 01       	movw	r10, r28
    5dc6:	b8 e1       	ldi	r27, 0x18	; 24
    5dc8:	ab 1a       	sub	r10, r27
    5dca:	b1 08       	sbc	r11, r1
    5dcc:	46 01       	movw	r8, r12
    5dce:	be 2d       	mov	r27, r14
    5dd0:	af 2d       	mov	r26, r15
    5dd2:	90 e2       	ldi	r25, 0x20	; 32
    5dd4:	e9 2e       	mov	r14, r25
    5dd6:	f1 2c       	mov	r15, r1
    5dd8:	0e 15       	cp	r16, r14
    5dda:	1f 05       	cpc	r17, r15
    5ddc:	84 f0       	brlt	.+32     	; 0x5dfe <strtod+0x250>
    5dde:	fe 01       	movw	r30, r28
    5de0:	25 91       	lpm	r18, Z+
    5de2:	35 91       	lpm	r19, Z+
    5de4:	45 91       	lpm	r20, Z+
    5de6:	54 91       	lpm	r21, Z
    5de8:	b4 01       	movw	r22, r8
    5dea:	8b 2f       	mov	r24, r27
    5dec:	9a 2f       	mov	r25, r26
    5dee:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    5df2:	4b 01       	movw	r8, r22
    5df4:	b8 2f       	mov	r27, r24
    5df6:	a9 2f       	mov	r26, r25
    5df8:	0e 19       	sub	r16, r14
    5dfa:	1f 09       	sbc	r17, r15
    5dfc:	ed cf       	rjmp	.-38     	; 0x5dd8 <strtod+0x22a>
    5dfe:	24 97       	sbiw	r28, 0x04	; 4
    5e00:	f5 94       	asr	r15
    5e02:	e7 94       	ror	r14
    5e04:	ca 15       	cp	r28, r10
    5e06:	db 05       	cpc	r29, r11
    5e08:	39 f7       	brne	.-50     	; 0x5dd8 <strtod+0x22a>
    5e0a:	64 01       	movw	r12, r8
    5e0c:	eb 2e       	mov	r14, r27
    5e0e:	fa 2e       	mov	r15, r26
    5e10:	8e 2d       	mov	r24, r14
    5e12:	88 0f       	add	r24, r24
    5e14:	8f 2d       	mov	r24, r15
    5e16:	88 1f       	adc	r24, r24
    5e18:	8f 3f       	cpi	r24, 0xFF	; 255
    5e1a:	49 f0       	breq	.+18     	; 0x5e2e <strtod+0x280>
    5e1c:	20 e0       	ldi	r18, 0x00	; 0
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	a9 01       	movw	r20, r18
    5e22:	c7 01       	movw	r24, r14
    5e24:	b6 01       	movw	r22, r12
    5e26:	0e 94 0d 23 	call	0x461a	; 0x461a <__cmpsf2>
    5e2a:	81 11       	cpse	r24, r1
    5e2c:	06 c0       	rjmp	.+12     	; 0x5e3a <strtod+0x28c>
    5e2e:	82 e2       	ldi	r24, 0x22	; 34
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <errno+0x1>
    5e36:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <errno>
    5e3a:	c7 01       	movw	r24, r14
    5e3c:	b6 01       	movw	r22, r12
    5e3e:	09 c0       	rjmp	.+18     	; 0x5e52 <strtod+0x2a4>
    5e40:	60 e0       	ldi	r22, 0x00	; 0
    5e42:	70 e0       	ldi	r23, 0x00	; 0
    5e44:	80 e8       	ldi	r24, 0x80	; 128
    5e46:	9f ef       	ldi	r25, 0xFF	; 255
    5e48:	04 c0       	rjmp	.+8      	; 0x5e52 <strtod+0x2a4>
    5e4a:	60 e0       	ldi	r22, 0x00	; 0
    5e4c:	70 e0       	ldi	r23, 0x00	; 0
    5e4e:	80 ec       	ldi	r24, 0xC0	; 192
    5e50:	9f e7       	ldi	r25, 0x7F	; 127
    5e52:	cd b7       	in	r28, 0x3d	; 61
    5e54:	de b7       	in	r29, 0x3e	; 62
    5e56:	ee e0       	ldi	r30, 0x0E	; 14
    5e58:	57 cd       	rjmp	.-1362   	; 0x5908 <__epilogue_restores__+0x8>

00005e5a <abort>:
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	f8 94       	cli
    5e60:	06 c3       	rjmp	.+1548   	; 0x646e <__do_global_dtors>

00005e62 <atoi>:
    5e62:	fc 01       	movw	r30, r24
    5e64:	88 27       	eor	r24, r24
    5e66:	99 27       	eor	r25, r25
    5e68:	e8 94       	clt
    5e6a:	21 91       	ld	r18, Z+
    5e6c:	20 32       	cpi	r18, 0x20	; 32
    5e6e:	e9 f3       	breq	.-6      	; 0x5e6a <atoi+0x8>
    5e70:	29 30       	cpi	r18, 0x09	; 9
    5e72:	10 f0       	brcs	.+4      	; 0x5e78 <atoi+0x16>
    5e74:	2e 30       	cpi	r18, 0x0E	; 14
    5e76:	c8 f3       	brcs	.-14     	; 0x5e6a <atoi+0x8>
    5e78:	2b 32       	cpi	r18, 0x2B	; 43
    5e7a:	39 f0       	breq	.+14     	; 0x5e8a <atoi+0x28>
    5e7c:	2d 32       	cpi	r18, 0x2D	; 45
    5e7e:	31 f4       	brne	.+12     	; 0x5e8c <atoi+0x2a>
    5e80:	68 94       	set
    5e82:	03 c0       	rjmp	.+6      	; 0x5e8a <atoi+0x28>
    5e84:	2b d0       	rcall	.+86     	; 0x5edc <__mulhi_const_10>
    5e86:	82 0f       	add	r24, r18
    5e88:	91 1d       	adc	r25, r1
    5e8a:	21 91       	ld	r18, Z+
    5e8c:	20 53       	subi	r18, 0x30	; 48
    5e8e:	2a 30       	cpi	r18, 0x0A	; 10
    5e90:	c8 f3       	brcs	.-14     	; 0x5e84 <atoi+0x22>
    5e92:	1e f4       	brtc	.+6      	; 0x5e9a <atoi+0x38>
    5e94:	90 95       	com	r25
    5e96:	81 95       	neg	r24
    5e98:	9f 4f       	sbci	r25, 0xFF	; 255
    5e9a:	08 95       	ret

00005e9c <isspace>:
    5e9c:	91 11       	cpse	r25, r1
    5e9e:	09 c2       	rjmp	.+1042   	; 0x62b2 <__ctype_isfalse>
    5ea0:	80 32       	cpi	r24, 0x20	; 32
    5ea2:	19 f0       	breq	.+6      	; 0x5eaa <isspace+0xe>
    5ea4:	89 50       	subi	r24, 0x09	; 9
    5ea6:	85 50       	subi	r24, 0x05	; 5
    5ea8:	d0 f7       	brcc	.-12     	; 0x5e9e <isspace+0x2>
    5eaa:	08 95       	ret

00005eac <strncasecmp_P>:
    5eac:	fb 01       	movw	r30, r22
    5eae:	dc 01       	movw	r26, r24
    5eb0:	41 50       	subi	r20, 0x01	; 1
    5eb2:	50 40       	sbci	r21, 0x00	; 0
    5eb4:	88 f0       	brcs	.+34     	; 0x5ed8 <strncasecmp_P+0x2c>
    5eb6:	8d 91       	ld	r24, X+
    5eb8:	81 34       	cpi	r24, 0x41	; 65
    5eba:	1c f0       	brlt	.+6      	; 0x5ec2 <strncasecmp_P+0x16>
    5ebc:	8b 35       	cpi	r24, 0x5B	; 91
    5ebe:	0c f4       	brge	.+2      	; 0x5ec2 <strncasecmp_P+0x16>
    5ec0:	80 5e       	subi	r24, 0xE0	; 224
    5ec2:	65 91       	lpm	r22, Z+
    5ec4:	61 34       	cpi	r22, 0x41	; 65
    5ec6:	1c f0       	brlt	.+6      	; 0x5ece <strncasecmp_P+0x22>
    5ec8:	6b 35       	cpi	r22, 0x5B	; 91
    5eca:	0c f4       	brge	.+2      	; 0x5ece <strncasecmp_P+0x22>
    5ecc:	60 5e       	subi	r22, 0xE0	; 224
    5ece:	86 1b       	sub	r24, r22
    5ed0:	61 11       	cpse	r22, r1
    5ed2:	71 f3       	breq	.-36     	; 0x5eb0 <strncasecmp_P+0x4>
    5ed4:	99 0b       	sbc	r25, r25
    5ed6:	08 95       	ret
    5ed8:	88 1b       	sub	r24, r24
    5eda:	fc cf       	rjmp	.-8      	; 0x5ed4 <strncasecmp_P+0x28>

00005edc <__mulhi_const_10>:
    5edc:	7a e0       	ldi	r23, 0x0A	; 10
    5ede:	97 9f       	mul	r25, r23
    5ee0:	90 2d       	mov	r25, r0
    5ee2:	87 9f       	mul	r24, r23
    5ee4:	80 2d       	mov	r24, r0
    5ee6:	91 0d       	add	r25, r1
    5ee8:	11 24       	eor	r1, r1
    5eea:	08 95       	ret

00005eec <sprintf>:
    5eec:	ae e0       	ldi	r26, 0x0E	; 14
    5eee:	b0 e0       	ldi	r27, 0x00	; 0
    5ef0:	eb e7       	ldi	r30, 0x7B	; 123
    5ef2:	ff e2       	ldi	r31, 0x2F	; 47
    5ef4:	f7 cc       	rjmp	.-1554   	; 0x58e4 <__prologue_saves__+0x1c>
    5ef6:	0d 89       	ldd	r16, Y+21	; 0x15
    5ef8:	1e 89       	ldd	r17, Y+22	; 0x16
    5efa:	86 e0       	ldi	r24, 0x06	; 6
    5efc:	8c 83       	std	Y+4, r24	; 0x04
    5efe:	1a 83       	std	Y+2, r17	; 0x02
    5f00:	09 83       	std	Y+1, r16	; 0x01
    5f02:	8f ef       	ldi	r24, 0xFF	; 255
    5f04:	9f e7       	ldi	r25, 0x7F	; 127
    5f06:	9e 83       	std	Y+6, r25	; 0x06
    5f08:	8d 83       	std	Y+5, r24	; 0x05
    5f0a:	ae 01       	movw	r20, r28
    5f0c:	47 5e       	subi	r20, 0xE7	; 231
    5f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f10:	6f 89       	ldd	r22, Y+23	; 0x17
    5f12:	78 8d       	ldd	r23, Y+24	; 0x18
    5f14:	ce 01       	movw	r24, r28
    5f16:	01 96       	adiw	r24, 0x01	; 1
    5f18:	09 d0       	rcall	.+18     	; 0x5f2c <vfprintf>
    5f1a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f1c:	38 85       	ldd	r19, Y+8	; 0x08
    5f1e:	f8 01       	movw	r30, r16
    5f20:	e2 0f       	add	r30, r18
    5f22:	f3 1f       	adc	r31, r19
    5f24:	10 82       	st	Z, r1
    5f26:	2e 96       	adiw	r28, 0x0e	; 14
    5f28:	e4 e0       	ldi	r30, 0x04	; 4
    5f2a:	f8 cc       	rjmp	.-1552   	; 0x591c <__epilogue_restores__+0x1c>

00005f2c <vfprintf>:
    5f2c:	ac e0       	ldi	r26, 0x0C	; 12
    5f2e:	b0 e0       	ldi	r27, 0x00	; 0
    5f30:	eb e9       	ldi	r30, 0x9B	; 155
    5f32:	ff e2       	ldi	r31, 0x2F	; 47
    5f34:	c9 cc       	rjmp	.-1646   	; 0x58c8 <__prologue_saves__>
    5f36:	7c 01       	movw	r14, r24
    5f38:	6b 01       	movw	r12, r22
    5f3a:	8a 01       	movw	r16, r20
    5f3c:	fc 01       	movw	r30, r24
    5f3e:	17 82       	std	Z+7, r1	; 0x07
    5f40:	16 82       	std	Z+6, r1	; 0x06
    5f42:	83 81       	ldd	r24, Z+3	; 0x03
    5f44:	81 ff       	sbrs	r24, 1
    5f46:	b0 c1       	rjmp	.+864    	; 0x62a8 <vfprintf+0x37c>
    5f48:	ce 01       	movw	r24, r28
    5f4a:	01 96       	adiw	r24, 0x01	; 1
    5f4c:	4c 01       	movw	r8, r24
    5f4e:	f7 01       	movw	r30, r14
    5f50:	93 81       	ldd	r25, Z+3	; 0x03
    5f52:	f6 01       	movw	r30, r12
    5f54:	93 fd       	sbrc	r25, 3
    5f56:	85 91       	lpm	r24, Z+
    5f58:	93 ff       	sbrs	r25, 3
    5f5a:	81 91       	ld	r24, Z+
    5f5c:	6f 01       	movw	r12, r30
    5f5e:	88 23       	and	r24, r24
    5f60:	09 f4       	brne	.+2      	; 0x5f64 <vfprintf+0x38>
    5f62:	9e c1       	rjmp	.+828    	; 0x62a0 <vfprintf+0x374>
    5f64:	85 32       	cpi	r24, 0x25	; 37
    5f66:	39 f4       	brne	.+14     	; 0x5f76 <vfprintf+0x4a>
    5f68:	93 fd       	sbrc	r25, 3
    5f6a:	85 91       	lpm	r24, Z+
    5f6c:	93 ff       	sbrs	r25, 3
    5f6e:	81 91       	ld	r24, Z+
    5f70:	6f 01       	movw	r12, r30
    5f72:	85 32       	cpi	r24, 0x25	; 37
    5f74:	21 f4       	brne	.+8      	; 0x5f7e <vfprintf+0x52>
    5f76:	b7 01       	movw	r22, r14
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	b4 d1       	rcall	.+872    	; 0x62e4 <fputc>
    5f7c:	e8 cf       	rjmp	.-48     	; 0x5f4e <vfprintf+0x22>
    5f7e:	51 2c       	mov	r5, r1
    5f80:	31 2c       	mov	r3, r1
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	20 32       	cpi	r18, 0x20	; 32
    5f86:	a0 f4       	brcc	.+40     	; 0x5fb0 <vfprintf+0x84>
    5f88:	8b 32       	cpi	r24, 0x2B	; 43
    5f8a:	69 f0       	breq	.+26     	; 0x5fa6 <vfprintf+0x7a>
    5f8c:	30 f4       	brcc	.+12     	; 0x5f9a <vfprintf+0x6e>
    5f8e:	80 32       	cpi	r24, 0x20	; 32
    5f90:	59 f0       	breq	.+22     	; 0x5fa8 <vfprintf+0x7c>
    5f92:	83 32       	cpi	r24, 0x23	; 35
    5f94:	69 f4       	brne	.+26     	; 0x5fb0 <vfprintf+0x84>
    5f96:	20 61       	ori	r18, 0x10	; 16
    5f98:	2c c0       	rjmp	.+88     	; 0x5ff2 <vfprintf+0xc6>
    5f9a:	8d 32       	cpi	r24, 0x2D	; 45
    5f9c:	39 f0       	breq	.+14     	; 0x5fac <vfprintf+0x80>
    5f9e:	80 33       	cpi	r24, 0x30	; 48
    5fa0:	39 f4       	brne	.+14     	; 0x5fb0 <vfprintf+0x84>
    5fa2:	21 60       	ori	r18, 0x01	; 1
    5fa4:	26 c0       	rjmp	.+76     	; 0x5ff2 <vfprintf+0xc6>
    5fa6:	22 60       	ori	r18, 0x02	; 2
    5fa8:	24 60       	ori	r18, 0x04	; 4
    5faa:	23 c0       	rjmp	.+70     	; 0x5ff2 <vfprintf+0xc6>
    5fac:	28 60       	ori	r18, 0x08	; 8
    5fae:	21 c0       	rjmp	.+66     	; 0x5ff2 <vfprintf+0xc6>
    5fb0:	27 fd       	sbrc	r18, 7
    5fb2:	27 c0       	rjmp	.+78     	; 0x6002 <vfprintf+0xd6>
    5fb4:	30 ed       	ldi	r19, 0xD0	; 208
    5fb6:	38 0f       	add	r19, r24
    5fb8:	3a 30       	cpi	r19, 0x0A	; 10
    5fba:	78 f4       	brcc	.+30     	; 0x5fda <vfprintf+0xae>
    5fbc:	26 ff       	sbrs	r18, 6
    5fbe:	06 c0       	rjmp	.+12     	; 0x5fcc <vfprintf+0xa0>
    5fc0:	fa e0       	ldi	r31, 0x0A	; 10
    5fc2:	5f 9e       	mul	r5, r31
    5fc4:	30 0d       	add	r19, r0
    5fc6:	11 24       	eor	r1, r1
    5fc8:	53 2e       	mov	r5, r19
    5fca:	13 c0       	rjmp	.+38     	; 0x5ff2 <vfprintf+0xc6>
    5fcc:	8a e0       	ldi	r24, 0x0A	; 10
    5fce:	38 9e       	mul	r3, r24
    5fd0:	30 0d       	add	r19, r0
    5fd2:	11 24       	eor	r1, r1
    5fd4:	33 2e       	mov	r3, r19
    5fd6:	20 62       	ori	r18, 0x20	; 32
    5fd8:	0c c0       	rjmp	.+24     	; 0x5ff2 <vfprintf+0xc6>
    5fda:	8e 32       	cpi	r24, 0x2E	; 46
    5fdc:	21 f4       	brne	.+8      	; 0x5fe6 <vfprintf+0xba>
    5fde:	26 fd       	sbrc	r18, 6
    5fe0:	5f c1       	rjmp	.+702    	; 0x62a0 <vfprintf+0x374>
    5fe2:	20 64       	ori	r18, 0x40	; 64
    5fe4:	06 c0       	rjmp	.+12     	; 0x5ff2 <vfprintf+0xc6>
    5fe6:	8c 36       	cpi	r24, 0x6C	; 108
    5fe8:	11 f4       	brne	.+4      	; 0x5fee <vfprintf+0xc2>
    5fea:	20 68       	ori	r18, 0x80	; 128
    5fec:	02 c0       	rjmp	.+4      	; 0x5ff2 <vfprintf+0xc6>
    5fee:	88 36       	cpi	r24, 0x68	; 104
    5ff0:	41 f4       	brne	.+16     	; 0x6002 <vfprintf+0xd6>
    5ff2:	f6 01       	movw	r30, r12
    5ff4:	93 fd       	sbrc	r25, 3
    5ff6:	85 91       	lpm	r24, Z+
    5ff8:	93 ff       	sbrs	r25, 3
    5ffa:	81 91       	ld	r24, Z+
    5ffc:	6f 01       	movw	r12, r30
    5ffe:	81 11       	cpse	r24, r1
    6000:	c1 cf       	rjmp	.-126    	; 0x5f84 <vfprintf+0x58>
    6002:	98 2f       	mov	r25, r24
    6004:	9f 7d       	andi	r25, 0xDF	; 223
    6006:	95 54       	subi	r25, 0x45	; 69
    6008:	93 30       	cpi	r25, 0x03	; 3
    600a:	28 f4       	brcc	.+10     	; 0x6016 <vfprintf+0xea>
    600c:	0c 5f       	subi	r16, 0xFC	; 252
    600e:	1f 4f       	sbci	r17, 0xFF	; 255
    6010:	ff e3       	ldi	r31, 0x3F	; 63
    6012:	f9 83       	std	Y+1, r31	; 0x01
    6014:	0d c0       	rjmp	.+26     	; 0x6030 <vfprintf+0x104>
    6016:	83 36       	cpi	r24, 0x63	; 99
    6018:	31 f0       	breq	.+12     	; 0x6026 <vfprintf+0xfa>
    601a:	83 37       	cpi	r24, 0x73	; 115
    601c:	71 f0       	breq	.+28     	; 0x603a <vfprintf+0x10e>
    601e:	83 35       	cpi	r24, 0x53	; 83
    6020:	09 f0       	breq	.+2      	; 0x6024 <vfprintf+0xf8>
    6022:	57 c0       	rjmp	.+174    	; 0x60d2 <vfprintf+0x1a6>
    6024:	21 c0       	rjmp	.+66     	; 0x6068 <vfprintf+0x13c>
    6026:	f8 01       	movw	r30, r16
    6028:	80 81       	ld	r24, Z
    602a:	89 83       	std	Y+1, r24	; 0x01
    602c:	0e 5f       	subi	r16, 0xFE	; 254
    602e:	1f 4f       	sbci	r17, 0xFF	; 255
    6030:	44 24       	eor	r4, r4
    6032:	43 94       	inc	r4
    6034:	51 2c       	mov	r5, r1
    6036:	54 01       	movw	r10, r8
    6038:	14 c0       	rjmp	.+40     	; 0x6062 <vfprintf+0x136>
    603a:	38 01       	movw	r6, r16
    603c:	f2 e0       	ldi	r31, 0x02	; 2
    603e:	6f 0e       	add	r6, r31
    6040:	71 1c       	adc	r7, r1
    6042:	f8 01       	movw	r30, r16
    6044:	a0 80       	ld	r10, Z
    6046:	b1 80       	ldd	r11, Z+1	; 0x01
    6048:	26 ff       	sbrs	r18, 6
    604a:	03 c0       	rjmp	.+6      	; 0x6052 <vfprintf+0x126>
    604c:	65 2d       	mov	r22, r5
    604e:	70 e0       	ldi	r23, 0x00	; 0
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <vfprintf+0x12a>
    6052:	6f ef       	ldi	r22, 0xFF	; 255
    6054:	7f ef       	ldi	r23, 0xFF	; 255
    6056:	c5 01       	movw	r24, r10
    6058:	2c 87       	std	Y+12, r18	; 0x0c
    605a:	39 d1       	rcall	.+626    	; 0x62ce <strnlen>
    605c:	2c 01       	movw	r4, r24
    605e:	83 01       	movw	r16, r6
    6060:	2c 85       	ldd	r18, Y+12	; 0x0c
    6062:	2f 77       	andi	r18, 0x7F	; 127
    6064:	22 2e       	mov	r2, r18
    6066:	16 c0       	rjmp	.+44     	; 0x6094 <vfprintf+0x168>
    6068:	38 01       	movw	r6, r16
    606a:	f2 e0       	ldi	r31, 0x02	; 2
    606c:	6f 0e       	add	r6, r31
    606e:	71 1c       	adc	r7, r1
    6070:	f8 01       	movw	r30, r16
    6072:	a0 80       	ld	r10, Z
    6074:	b1 80       	ldd	r11, Z+1	; 0x01
    6076:	26 ff       	sbrs	r18, 6
    6078:	03 c0       	rjmp	.+6      	; 0x6080 <vfprintf+0x154>
    607a:	65 2d       	mov	r22, r5
    607c:	70 e0       	ldi	r23, 0x00	; 0
    607e:	02 c0       	rjmp	.+4      	; 0x6084 <vfprintf+0x158>
    6080:	6f ef       	ldi	r22, 0xFF	; 255
    6082:	7f ef       	ldi	r23, 0xFF	; 255
    6084:	c5 01       	movw	r24, r10
    6086:	2c 87       	std	Y+12, r18	; 0x0c
    6088:	17 d1       	rcall	.+558    	; 0x62b8 <strnlen_P>
    608a:	2c 01       	movw	r4, r24
    608c:	2c 85       	ldd	r18, Y+12	; 0x0c
    608e:	20 68       	ori	r18, 0x80	; 128
    6090:	22 2e       	mov	r2, r18
    6092:	83 01       	movw	r16, r6
    6094:	23 fc       	sbrc	r2, 3
    6096:	19 c0       	rjmp	.+50     	; 0x60ca <vfprintf+0x19e>
    6098:	83 2d       	mov	r24, r3
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	48 16       	cp	r4, r24
    609e:	59 06       	cpc	r5, r25
    60a0:	a0 f4       	brcc	.+40     	; 0x60ca <vfprintf+0x19e>
    60a2:	b7 01       	movw	r22, r14
    60a4:	80 e2       	ldi	r24, 0x20	; 32
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	1d d1       	rcall	.+570    	; 0x62e4 <fputc>
    60aa:	3a 94       	dec	r3
    60ac:	f5 cf       	rjmp	.-22     	; 0x6098 <vfprintf+0x16c>
    60ae:	f5 01       	movw	r30, r10
    60b0:	27 fc       	sbrc	r2, 7
    60b2:	85 91       	lpm	r24, Z+
    60b4:	27 fe       	sbrs	r2, 7
    60b6:	81 91       	ld	r24, Z+
    60b8:	5f 01       	movw	r10, r30
    60ba:	b7 01       	movw	r22, r14
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	12 d1       	rcall	.+548    	; 0x62e4 <fputc>
    60c0:	31 10       	cpse	r3, r1
    60c2:	3a 94       	dec	r3
    60c4:	f1 e0       	ldi	r31, 0x01	; 1
    60c6:	4f 1a       	sub	r4, r31
    60c8:	51 08       	sbc	r5, r1
    60ca:	41 14       	cp	r4, r1
    60cc:	51 04       	cpc	r5, r1
    60ce:	79 f7       	brne	.-34     	; 0x60ae <vfprintf+0x182>
    60d0:	de c0       	rjmp	.+444    	; 0x628e <vfprintf+0x362>
    60d2:	84 36       	cpi	r24, 0x64	; 100
    60d4:	11 f0       	breq	.+4      	; 0x60da <vfprintf+0x1ae>
    60d6:	89 36       	cpi	r24, 0x69	; 105
    60d8:	31 f5       	brne	.+76     	; 0x6126 <vfprintf+0x1fa>
    60da:	f8 01       	movw	r30, r16
    60dc:	27 ff       	sbrs	r18, 7
    60de:	07 c0       	rjmp	.+14     	; 0x60ee <vfprintf+0x1c2>
    60e0:	60 81       	ld	r22, Z
    60e2:	71 81       	ldd	r23, Z+1	; 0x01
    60e4:	82 81       	ldd	r24, Z+2	; 0x02
    60e6:	93 81       	ldd	r25, Z+3	; 0x03
    60e8:	0c 5f       	subi	r16, 0xFC	; 252
    60ea:	1f 4f       	sbci	r17, 0xFF	; 255
    60ec:	08 c0       	rjmp	.+16     	; 0x60fe <vfprintf+0x1d2>
    60ee:	60 81       	ld	r22, Z
    60f0:	71 81       	ldd	r23, Z+1	; 0x01
    60f2:	07 2e       	mov	r0, r23
    60f4:	00 0c       	add	r0, r0
    60f6:	88 0b       	sbc	r24, r24
    60f8:	99 0b       	sbc	r25, r25
    60fa:	0e 5f       	subi	r16, 0xFE	; 254
    60fc:	1f 4f       	sbci	r17, 0xFF	; 255
    60fe:	2f 76       	andi	r18, 0x6F	; 111
    6100:	72 2e       	mov	r7, r18
    6102:	97 ff       	sbrs	r25, 7
    6104:	09 c0       	rjmp	.+18     	; 0x6118 <vfprintf+0x1ec>
    6106:	90 95       	com	r25
    6108:	80 95       	com	r24
    610a:	70 95       	com	r23
    610c:	61 95       	neg	r22
    610e:	7f 4f       	sbci	r23, 0xFF	; 255
    6110:	8f 4f       	sbci	r24, 0xFF	; 255
    6112:	9f 4f       	sbci	r25, 0xFF	; 255
    6114:	20 68       	ori	r18, 0x80	; 128
    6116:	72 2e       	mov	r7, r18
    6118:	2a e0       	ldi	r18, 0x0A	; 10
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	a4 01       	movw	r20, r8
    611e:	1a d1       	rcall	.+564    	; 0x6354 <__ultoa_invert>
    6120:	a8 2e       	mov	r10, r24
    6122:	a8 18       	sub	r10, r8
    6124:	43 c0       	rjmp	.+134    	; 0x61ac <vfprintf+0x280>
    6126:	85 37       	cpi	r24, 0x75	; 117
    6128:	29 f4       	brne	.+10     	; 0x6134 <vfprintf+0x208>
    612a:	2f 7e       	andi	r18, 0xEF	; 239
    612c:	b2 2e       	mov	r11, r18
    612e:	2a e0       	ldi	r18, 0x0A	; 10
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	25 c0       	rjmp	.+74     	; 0x617e <vfprintf+0x252>
    6134:	f2 2f       	mov	r31, r18
    6136:	f9 7f       	andi	r31, 0xF9	; 249
    6138:	bf 2e       	mov	r11, r31
    613a:	8f 36       	cpi	r24, 0x6F	; 111
    613c:	c1 f0       	breq	.+48     	; 0x616e <vfprintf+0x242>
    613e:	18 f4       	brcc	.+6      	; 0x6146 <vfprintf+0x21a>
    6140:	88 35       	cpi	r24, 0x58	; 88
    6142:	79 f0       	breq	.+30     	; 0x6162 <vfprintf+0x236>
    6144:	ad c0       	rjmp	.+346    	; 0x62a0 <vfprintf+0x374>
    6146:	80 37       	cpi	r24, 0x70	; 112
    6148:	19 f0       	breq	.+6      	; 0x6150 <vfprintf+0x224>
    614a:	88 37       	cpi	r24, 0x78	; 120
    614c:	21 f0       	breq	.+8      	; 0x6156 <vfprintf+0x22a>
    614e:	a8 c0       	rjmp	.+336    	; 0x62a0 <vfprintf+0x374>
    6150:	2f 2f       	mov	r18, r31
    6152:	20 61       	ori	r18, 0x10	; 16
    6154:	b2 2e       	mov	r11, r18
    6156:	b4 fe       	sbrs	r11, 4
    6158:	0d c0       	rjmp	.+26     	; 0x6174 <vfprintf+0x248>
    615a:	8b 2d       	mov	r24, r11
    615c:	84 60       	ori	r24, 0x04	; 4
    615e:	b8 2e       	mov	r11, r24
    6160:	09 c0       	rjmp	.+18     	; 0x6174 <vfprintf+0x248>
    6162:	24 ff       	sbrs	r18, 4
    6164:	0a c0       	rjmp	.+20     	; 0x617a <vfprintf+0x24e>
    6166:	9f 2f       	mov	r25, r31
    6168:	96 60       	ori	r25, 0x06	; 6
    616a:	b9 2e       	mov	r11, r25
    616c:	06 c0       	rjmp	.+12     	; 0x617a <vfprintf+0x24e>
    616e:	28 e0       	ldi	r18, 0x08	; 8
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	05 c0       	rjmp	.+10     	; 0x617e <vfprintf+0x252>
    6174:	20 e1       	ldi	r18, 0x10	; 16
    6176:	30 e0       	ldi	r19, 0x00	; 0
    6178:	02 c0       	rjmp	.+4      	; 0x617e <vfprintf+0x252>
    617a:	20 e1       	ldi	r18, 0x10	; 16
    617c:	32 e0       	ldi	r19, 0x02	; 2
    617e:	f8 01       	movw	r30, r16
    6180:	b7 fe       	sbrs	r11, 7
    6182:	07 c0       	rjmp	.+14     	; 0x6192 <vfprintf+0x266>
    6184:	60 81       	ld	r22, Z
    6186:	71 81       	ldd	r23, Z+1	; 0x01
    6188:	82 81       	ldd	r24, Z+2	; 0x02
    618a:	93 81       	ldd	r25, Z+3	; 0x03
    618c:	0c 5f       	subi	r16, 0xFC	; 252
    618e:	1f 4f       	sbci	r17, 0xFF	; 255
    6190:	06 c0       	rjmp	.+12     	; 0x619e <vfprintf+0x272>
    6192:	60 81       	ld	r22, Z
    6194:	71 81       	ldd	r23, Z+1	; 0x01
    6196:	80 e0       	ldi	r24, 0x00	; 0
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	0e 5f       	subi	r16, 0xFE	; 254
    619c:	1f 4f       	sbci	r17, 0xFF	; 255
    619e:	a4 01       	movw	r20, r8
    61a0:	d9 d0       	rcall	.+434    	; 0x6354 <__ultoa_invert>
    61a2:	a8 2e       	mov	r10, r24
    61a4:	a8 18       	sub	r10, r8
    61a6:	fb 2d       	mov	r31, r11
    61a8:	ff 77       	andi	r31, 0x7F	; 127
    61aa:	7f 2e       	mov	r7, r31
    61ac:	76 fe       	sbrs	r7, 6
    61ae:	0b c0       	rjmp	.+22     	; 0x61c6 <vfprintf+0x29a>
    61b0:	37 2d       	mov	r19, r7
    61b2:	3e 7f       	andi	r19, 0xFE	; 254
    61b4:	a5 14       	cp	r10, r5
    61b6:	50 f4       	brcc	.+20     	; 0x61cc <vfprintf+0x2a0>
    61b8:	74 fe       	sbrs	r7, 4
    61ba:	0a c0       	rjmp	.+20     	; 0x61d0 <vfprintf+0x2a4>
    61bc:	72 fc       	sbrc	r7, 2
    61be:	08 c0       	rjmp	.+16     	; 0x61d0 <vfprintf+0x2a4>
    61c0:	37 2d       	mov	r19, r7
    61c2:	3e 7e       	andi	r19, 0xEE	; 238
    61c4:	05 c0       	rjmp	.+10     	; 0x61d0 <vfprintf+0x2a4>
    61c6:	ba 2c       	mov	r11, r10
    61c8:	37 2d       	mov	r19, r7
    61ca:	03 c0       	rjmp	.+6      	; 0x61d2 <vfprintf+0x2a6>
    61cc:	ba 2c       	mov	r11, r10
    61ce:	01 c0       	rjmp	.+2      	; 0x61d2 <vfprintf+0x2a6>
    61d0:	b5 2c       	mov	r11, r5
    61d2:	34 ff       	sbrs	r19, 4
    61d4:	0d c0       	rjmp	.+26     	; 0x61f0 <vfprintf+0x2c4>
    61d6:	fe 01       	movw	r30, r28
    61d8:	ea 0d       	add	r30, r10
    61da:	f1 1d       	adc	r31, r1
    61dc:	80 81       	ld	r24, Z
    61de:	80 33       	cpi	r24, 0x30	; 48
    61e0:	11 f4       	brne	.+4      	; 0x61e6 <vfprintf+0x2ba>
    61e2:	39 7e       	andi	r19, 0xE9	; 233
    61e4:	09 c0       	rjmp	.+18     	; 0x61f8 <vfprintf+0x2cc>
    61e6:	32 ff       	sbrs	r19, 2
    61e8:	06 c0       	rjmp	.+12     	; 0x61f6 <vfprintf+0x2ca>
    61ea:	b3 94       	inc	r11
    61ec:	b3 94       	inc	r11
    61ee:	04 c0       	rjmp	.+8      	; 0x61f8 <vfprintf+0x2cc>
    61f0:	83 2f       	mov	r24, r19
    61f2:	86 78       	andi	r24, 0x86	; 134
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <vfprintf+0x2cc>
    61f6:	b3 94       	inc	r11
    61f8:	33 fd       	sbrc	r19, 3
    61fa:	12 c0       	rjmp	.+36     	; 0x6220 <vfprintf+0x2f4>
    61fc:	30 ff       	sbrs	r19, 0
    61fe:	06 c0       	rjmp	.+12     	; 0x620c <vfprintf+0x2e0>
    6200:	5a 2c       	mov	r5, r10
    6202:	b3 14       	cp	r11, r3
    6204:	18 f4       	brcc	.+6      	; 0x620c <vfprintf+0x2e0>
    6206:	53 0c       	add	r5, r3
    6208:	5b 18       	sub	r5, r11
    620a:	b3 2c       	mov	r11, r3
    620c:	b3 14       	cp	r11, r3
    620e:	60 f4       	brcc	.+24     	; 0x6228 <vfprintf+0x2fc>
    6210:	b7 01       	movw	r22, r14
    6212:	80 e2       	ldi	r24, 0x20	; 32
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	3c 87       	std	Y+12, r19	; 0x0c
    6218:	65 d0       	rcall	.+202    	; 0x62e4 <fputc>
    621a:	b3 94       	inc	r11
    621c:	3c 85       	ldd	r19, Y+12	; 0x0c
    621e:	f6 cf       	rjmp	.-20     	; 0x620c <vfprintf+0x2e0>
    6220:	b3 14       	cp	r11, r3
    6222:	10 f4       	brcc	.+4      	; 0x6228 <vfprintf+0x2fc>
    6224:	3b 18       	sub	r3, r11
    6226:	01 c0       	rjmp	.+2      	; 0x622a <vfprintf+0x2fe>
    6228:	31 2c       	mov	r3, r1
    622a:	34 ff       	sbrs	r19, 4
    622c:	11 c0       	rjmp	.+34     	; 0x6250 <vfprintf+0x324>
    622e:	b7 01       	movw	r22, r14
    6230:	80 e3       	ldi	r24, 0x30	; 48
    6232:	90 e0       	ldi	r25, 0x00	; 0
    6234:	3c 87       	std	Y+12, r19	; 0x0c
    6236:	56 d0       	rcall	.+172    	; 0x62e4 <fputc>
    6238:	3c 85       	ldd	r19, Y+12	; 0x0c
    623a:	32 ff       	sbrs	r19, 2
    623c:	16 c0       	rjmp	.+44     	; 0x626a <vfprintf+0x33e>
    623e:	31 fd       	sbrc	r19, 1
    6240:	03 c0       	rjmp	.+6      	; 0x6248 <vfprintf+0x31c>
    6242:	88 e7       	ldi	r24, 0x78	; 120
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	02 c0       	rjmp	.+4      	; 0x624c <vfprintf+0x320>
    6248:	88 e5       	ldi	r24, 0x58	; 88
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	b7 01       	movw	r22, r14
    624e:	0c c0       	rjmp	.+24     	; 0x6268 <vfprintf+0x33c>
    6250:	83 2f       	mov	r24, r19
    6252:	86 78       	andi	r24, 0x86	; 134
    6254:	51 f0       	breq	.+20     	; 0x626a <vfprintf+0x33e>
    6256:	31 ff       	sbrs	r19, 1
    6258:	02 c0       	rjmp	.+4      	; 0x625e <vfprintf+0x332>
    625a:	8b e2       	ldi	r24, 0x2B	; 43
    625c:	01 c0       	rjmp	.+2      	; 0x6260 <vfprintf+0x334>
    625e:	80 e2       	ldi	r24, 0x20	; 32
    6260:	37 fd       	sbrc	r19, 7
    6262:	8d e2       	ldi	r24, 0x2D	; 45
    6264:	b7 01       	movw	r22, r14
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	3d d0       	rcall	.+122    	; 0x62e4 <fputc>
    626a:	a5 14       	cp	r10, r5
    626c:	30 f4       	brcc	.+12     	; 0x627a <vfprintf+0x34e>
    626e:	b7 01       	movw	r22, r14
    6270:	80 e3       	ldi	r24, 0x30	; 48
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	37 d0       	rcall	.+110    	; 0x62e4 <fputc>
    6276:	5a 94       	dec	r5
    6278:	f8 cf       	rjmp	.-16     	; 0x626a <vfprintf+0x33e>
    627a:	aa 94       	dec	r10
    627c:	f4 01       	movw	r30, r8
    627e:	ea 0d       	add	r30, r10
    6280:	f1 1d       	adc	r31, r1
    6282:	80 81       	ld	r24, Z
    6284:	b7 01       	movw	r22, r14
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	2d d0       	rcall	.+90     	; 0x62e4 <fputc>
    628a:	a1 10       	cpse	r10, r1
    628c:	f6 cf       	rjmp	.-20     	; 0x627a <vfprintf+0x34e>
    628e:	33 20       	and	r3, r3
    6290:	09 f4       	brne	.+2      	; 0x6294 <vfprintf+0x368>
    6292:	5d ce       	rjmp	.-838    	; 0x5f4e <vfprintf+0x22>
    6294:	b7 01       	movw	r22, r14
    6296:	80 e2       	ldi	r24, 0x20	; 32
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	24 d0       	rcall	.+72     	; 0x62e4 <fputc>
    629c:	3a 94       	dec	r3
    629e:	f7 cf       	rjmp	.-18     	; 0x628e <vfprintf+0x362>
    62a0:	f7 01       	movw	r30, r14
    62a2:	86 81       	ldd	r24, Z+6	; 0x06
    62a4:	97 81       	ldd	r25, Z+7	; 0x07
    62a6:	02 c0       	rjmp	.+4      	; 0x62ac <vfprintf+0x380>
    62a8:	8f ef       	ldi	r24, 0xFF	; 255
    62aa:	9f ef       	ldi	r25, 0xFF	; 255
    62ac:	2c 96       	adiw	r28, 0x0c	; 12
    62ae:	e2 e1       	ldi	r30, 0x12	; 18
    62b0:	27 cb       	rjmp	.-2482   	; 0x5900 <__epilogue_restores__>

000062b2 <__ctype_isfalse>:
    62b2:	99 27       	eor	r25, r25
    62b4:	88 27       	eor	r24, r24

000062b6 <__ctype_istrue>:
    62b6:	08 95       	ret

000062b8 <strnlen_P>:
    62b8:	fc 01       	movw	r30, r24
    62ba:	05 90       	lpm	r0, Z+
    62bc:	61 50       	subi	r22, 0x01	; 1
    62be:	70 40       	sbci	r23, 0x00	; 0
    62c0:	01 10       	cpse	r0, r1
    62c2:	d8 f7       	brcc	.-10     	; 0x62ba <strnlen_P+0x2>
    62c4:	80 95       	com	r24
    62c6:	90 95       	com	r25
    62c8:	8e 0f       	add	r24, r30
    62ca:	9f 1f       	adc	r25, r31
    62cc:	08 95       	ret

000062ce <strnlen>:
    62ce:	fc 01       	movw	r30, r24
    62d0:	61 50       	subi	r22, 0x01	; 1
    62d2:	70 40       	sbci	r23, 0x00	; 0
    62d4:	01 90       	ld	r0, Z+
    62d6:	01 10       	cpse	r0, r1
    62d8:	d8 f7       	brcc	.-10     	; 0x62d0 <strnlen+0x2>
    62da:	80 95       	com	r24
    62dc:	90 95       	com	r25
    62de:	8e 0f       	add	r24, r30
    62e0:	9f 1f       	adc	r25, r31
    62e2:	08 95       	ret

000062e4 <fputc>:
    62e4:	0f 93       	push	r16
    62e6:	1f 93       	push	r17
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
    62ec:	fb 01       	movw	r30, r22
    62ee:	23 81       	ldd	r18, Z+3	; 0x03
    62f0:	21 fd       	sbrc	r18, 1
    62f2:	03 c0       	rjmp	.+6      	; 0x62fa <fputc+0x16>
    62f4:	8f ef       	ldi	r24, 0xFF	; 255
    62f6:	9f ef       	ldi	r25, 0xFF	; 255
    62f8:	28 c0       	rjmp	.+80     	; 0x634a <fputc+0x66>
    62fa:	22 ff       	sbrs	r18, 2
    62fc:	16 c0       	rjmp	.+44     	; 0x632a <fputc+0x46>
    62fe:	46 81       	ldd	r20, Z+6	; 0x06
    6300:	57 81       	ldd	r21, Z+7	; 0x07
    6302:	24 81       	ldd	r18, Z+4	; 0x04
    6304:	35 81       	ldd	r19, Z+5	; 0x05
    6306:	42 17       	cp	r20, r18
    6308:	53 07       	cpc	r21, r19
    630a:	44 f4       	brge	.+16     	; 0x631c <fputc+0x38>
    630c:	a0 81       	ld	r26, Z
    630e:	b1 81       	ldd	r27, Z+1	; 0x01
    6310:	9d 01       	movw	r18, r26
    6312:	2f 5f       	subi	r18, 0xFF	; 255
    6314:	3f 4f       	sbci	r19, 0xFF	; 255
    6316:	31 83       	std	Z+1, r19	; 0x01
    6318:	20 83       	st	Z, r18
    631a:	8c 93       	st	X, r24
    631c:	26 81       	ldd	r18, Z+6	; 0x06
    631e:	37 81       	ldd	r19, Z+7	; 0x07
    6320:	2f 5f       	subi	r18, 0xFF	; 255
    6322:	3f 4f       	sbci	r19, 0xFF	; 255
    6324:	37 83       	std	Z+7, r19	; 0x07
    6326:	26 83       	std	Z+6, r18	; 0x06
    6328:	10 c0       	rjmp	.+32     	; 0x634a <fputc+0x66>
    632a:	eb 01       	movw	r28, r22
    632c:	09 2f       	mov	r16, r25
    632e:	18 2f       	mov	r17, r24
    6330:	00 84       	ldd	r0, Z+8	; 0x08
    6332:	f1 85       	ldd	r31, Z+9	; 0x09
    6334:	e0 2d       	mov	r30, r0
    6336:	09 95       	icall
    6338:	89 2b       	or	r24, r25
    633a:	e1 f6       	brne	.-72     	; 0x62f4 <fputc+0x10>
    633c:	8e 81       	ldd	r24, Y+6	; 0x06
    633e:	9f 81       	ldd	r25, Y+7	; 0x07
    6340:	01 96       	adiw	r24, 0x01	; 1
    6342:	9f 83       	std	Y+7, r25	; 0x07
    6344:	8e 83       	std	Y+6, r24	; 0x06
    6346:	81 2f       	mov	r24, r17
    6348:	90 2f       	mov	r25, r16
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	1f 91       	pop	r17
    6350:	0f 91       	pop	r16
    6352:	08 95       	ret

00006354 <__ultoa_invert>:
    6354:	fa 01       	movw	r30, r20
    6356:	aa 27       	eor	r26, r26
    6358:	28 30       	cpi	r18, 0x08	; 8
    635a:	51 f1       	breq	.+84     	; 0x63b0 <__ultoa_invert+0x5c>
    635c:	20 31       	cpi	r18, 0x10	; 16
    635e:	81 f1       	breq	.+96     	; 0x63c0 <__ultoa_invert+0x6c>
    6360:	e8 94       	clt
    6362:	6f 93       	push	r22
    6364:	6e 7f       	andi	r22, 0xFE	; 254
    6366:	6e 5f       	subi	r22, 0xFE	; 254
    6368:	7f 4f       	sbci	r23, 0xFF	; 255
    636a:	8f 4f       	sbci	r24, 0xFF	; 255
    636c:	9f 4f       	sbci	r25, 0xFF	; 255
    636e:	af 4f       	sbci	r26, 0xFF	; 255
    6370:	b1 e0       	ldi	r27, 0x01	; 1
    6372:	3e d0       	rcall	.+124    	; 0x63f0 <__ultoa_invert+0x9c>
    6374:	b4 e0       	ldi	r27, 0x04	; 4
    6376:	3c d0       	rcall	.+120    	; 0x63f0 <__ultoa_invert+0x9c>
    6378:	67 0f       	add	r22, r23
    637a:	78 1f       	adc	r23, r24
    637c:	89 1f       	adc	r24, r25
    637e:	9a 1f       	adc	r25, r26
    6380:	a1 1d       	adc	r26, r1
    6382:	68 0f       	add	r22, r24
    6384:	79 1f       	adc	r23, r25
    6386:	8a 1f       	adc	r24, r26
    6388:	91 1d       	adc	r25, r1
    638a:	a1 1d       	adc	r26, r1
    638c:	6a 0f       	add	r22, r26
    638e:	71 1d       	adc	r23, r1
    6390:	81 1d       	adc	r24, r1
    6392:	91 1d       	adc	r25, r1
    6394:	a1 1d       	adc	r26, r1
    6396:	20 d0       	rcall	.+64     	; 0x63d8 <__ultoa_invert+0x84>
    6398:	09 f4       	brne	.+2      	; 0x639c <__ultoa_invert+0x48>
    639a:	68 94       	set
    639c:	3f 91       	pop	r19
    639e:	2a e0       	ldi	r18, 0x0A	; 10
    63a0:	26 9f       	mul	r18, r22
    63a2:	11 24       	eor	r1, r1
    63a4:	30 19       	sub	r19, r0
    63a6:	30 5d       	subi	r19, 0xD0	; 208
    63a8:	31 93       	st	Z+, r19
    63aa:	de f6       	brtc	.-74     	; 0x6362 <__ultoa_invert+0xe>
    63ac:	cf 01       	movw	r24, r30
    63ae:	08 95       	ret
    63b0:	46 2f       	mov	r20, r22
    63b2:	47 70       	andi	r20, 0x07	; 7
    63b4:	40 5d       	subi	r20, 0xD0	; 208
    63b6:	41 93       	st	Z+, r20
    63b8:	b3 e0       	ldi	r27, 0x03	; 3
    63ba:	0f d0       	rcall	.+30     	; 0x63da <__ultoa_invert+0x86>
    63bc:	c9 f7       	brne	.-14     	; 0x63b0 <__ultoa_invert+0x5c>
    63be:	f6 cf       	rjmp	.-20     	; 0x63ac <__ultoa_invert+0x58>
    63c0:	46 2f       	mov	r20, r22
    63c2:	4f 70       	andi	r20, 0x0F	; 15
    63c4:	40 5d       	subi	r20, 0xD0	; 208
    63c6:	4a 33       	cpi	r20, 0x3A	; 58
    63c8:	18 f0       	brcs	.+6      	; 0x63d0 <__ultoa_invert+0x7c>
    63ca:	49 5d       	subi	r20, 0xD9	; 217
    63cc:	31 fd       	sbrc	r19, 1
    63ce:	40 52       	subi	r20, 0x20	; 32
    63d0:	41 93       	st	Z+, r20
    63d2:	02 d0       	rcall	.+4      	; 0x63d8 <__ultoa_invert+0x84>
    63d4:	a9 f7       	brne	.-22     	; 0x63c0 <__ultoa_invert+0x6c>
    63d6:	ea cf       	rjmp	.-44     	; 0x63ac <__ultoa_invert+0x58>
    63d8:	b4 e0       	ldi	r27, 0x04	; 4
    63da:	a6 95       	lsr	r26
    63dc:	97 95       	ror	r25
    63de:	87 95       	ror	r24
    63e0:	77 95       	ror	r23
    63e2:	67 95       	ror	r22
    63e4:	ba 95       	dec	r27
    63e6:	c9 f7       	brne	.-14     	; 0x63da <__ultoa_invert+0x86>
    63e8:	00 97       	sbiw	r24, 0x00	; 0
    63ea:	61 05       	cpc	r22, r1
    63ec:	71 05       	cpc	r23, r1
    63ee:	08 95       	ret
    63f0:	9b 01       	movw	r18, r22
    63f2:	ac 01       	movw	r20, r24
    63f4:	0a 2e       	mov	r0, r26
    63f6:	06 94       	lsr	r0
    63f8:	57 95       	ror	r21
    63fa:	47 95       	ror	r20
    63fc:	37 95       	ror	r19
    63fe:	27 95       	ror	r18
    6400:	ba 95       	dec	r27
    6402:	c9 f7       	brne	.-14     	; 0x63f6 <__ultoa_invert+0xa2>
    6404:	62 0f       	add	r22, r18
    6406:	73 1f       	adc	r23, r19
    6408:	84 1f       	adc	r24, r20
    640a:	95 1f       	adc	r25, r21
    640c:	a0 1d       	adc	r26, r0
    640e:	08 95       	ret

00006410 <eeprom_read_block>:
    6410:	dc 01       	movw	r26, r24
    6412:	cb 01       	movw	r24, r22

00006414 <eeprom_read_blraw>:
    6414:	fc 01       	movw	r30, r24
    6416:	f9 99       	sbic	0x1f, 1	; 31
    6418:	fe cf       	rjmp	.-4      	; 0x6416 <eeprom_read_blraw+0x2>
    641a:	06 c0       	rjmp	.+12     	; 0x6428 <eeprom_read_blraw+0x14>
    641c:	f2 bd       	out	0x22, r31	; 34
    641e:	e1 bd       	out	0x21, r30	; 33
    6420:	f8 9a       	sbi	0x1f, 0	; 31
    6422:	31 96       	adiw	r30, 0x01	; 1
    6424:	00 b4       	in	r0, 0x20	; 32
    6426:	0d 92       	st	X+, r0
    6428:	41 50       	subi	r20, 0x01	; 1
    642a:	50 40       	sbci	r21, 0x00	; 0
    642c:	b8 f7       	brcc	.-18     	; 0x641c <eeprom_read_blraw+0x8>
    642e:	08 95       	ret

00006430 <eeprom_read_byte>:
    6430:	f9 99       	sbic	0x1f, 1	; 31
    6432:	fe cf       	rjmp	.-4      	; 0x6430 <eeprom_read_byte>
    6434:	92 bd       	out	0x22, r25	; 34
    6436:	81 bd       	out	0x21, r24	; 33
    6438:	f8 9a       	sbi	0x1f, 0	; 31
    643a:	99 27       	eor	r25, r25
    643c:	80 b5       	in	r24, 0x20	; 32
    643e:	08 95       	ret

00006440 <eeprom_write_block>:
    6440:	dc 01       	movw	r26, r24
    6442:	cb 01       	movw	r24, r22
    6444:	02 c0       	rjmp	.+4      	; 0x644a <eeprom_write_block+0xa>
    6446:	2d 91       	ld	r18, X+
    6448:	05 d0       	rcall	.+10     	; 0x6454 <eeprom_write_r18>
    644a:	41 50       	subi	r20, 0x01	; 1
    644c:	50 40       	sbci	r21, 0x00	; 0
    644e:	d8 f7       	brcc	.-10     	; 0x6446 <eeprom_write_block+0x6>
    6450:	08 95       	ret

00006452 <eeprom_write_byte>:
    6452:	26 2f       	mov	r18, r22

00006454 <eeprom_write_r18>:
    6454:	f9 99       	sbic	0x1f, 1	; 31
    6456:	fe cf       	rjmp	.-4      	; 0x6454 <eeprom_write_r18>
    6458:	1f ba       	out	0x1f, r1	; 31
    645a:	92 bd       	out	0x22, r25	; 34
    645c:	81 bd       	out	0x21, r24	; 33
    645e:	20 bd       	out	0x20, r18	; 32
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	f8 94       	cli
    6464:	fa 9a       	sbi	0x1f, 2	; 31
    6466:	f9 9a       	sbi	0x1f, 1	; 31
    6468:	0f be       	out	0x3f, r0	; 63
    646a:	01 96       	adiw	r24, 0x01	; 1
    646c:	08 95       	ret

0000646e <__do_global_dtors>:
    646e:	11 e0       	ldi	r17, 0x01	; 1
    6470:	cb ec       	ldi	r28, 0xCB	; 203
    6472:	d1 e0       	ldi	r29, 0x01	; 1
    6474:	03 c0       	rjmp	.+6      	; 0x647c <__do_global_dtors+0xe>
    6476:	fe 01       	movw	r30, r28
    6478:	17 da       	rcall	.-3026   	; 0x58a8 <__tablejump2__>
    647a:	21 96       	adiw	r28, 0x01	; 1
    647c:	cc 3c       	cpi	r28, 0xCC	; 204
    647e:	d1 07       	cpc	r29, r17
    6480:	d1 f7       	brne	.-12     	; 0x6476 <__do_global_dtors+0x8>
    6482:	f8 94       	cli

00006484 <__stop_program>:
    6484:	ff cf       	rjmp	.-2      	; 0x6484 <__stop_program>
