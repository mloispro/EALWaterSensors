
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  00006bba  00006c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041a  008001e6  008001e6  00006d34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006d34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000010c8  00000000  00000000  00006dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023925  00000000  00000000  00007e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049f3  00000000  00000000  0002b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a961  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003374  00000000  00000000  0003ab14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001222b  00000000  00000000  0003de88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2a3  00000000  00000000  000500b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001020  00000000  00000000  0005a356  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b990  00000000  00000000  0005b376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c2       	rjmp	.+1140   	; 0x476 <__dtors_end>
       2:	00 00       	nop
       4:	60 c2       	rjmp	.+1216   	; 0x4c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c2       	rjmp	.+1212   	; 0x4c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c6       	rjmp	.+3178   	; 0xc78 <__vector_3>
       e:	00 00       	nop
      10:	33 c6       	rjmp	.+3174   	; 0xc78 <__vector_3>
      12:	00 00       	nop
      14:	31 c6       	rjmp	.+3170   	; 0xc78 <__vector_3>
      16:	00 00       	nop
      18:	56 c2       	rjmp	.+1196   	; 0x4c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c2       	rjmp	.+1192   	; 0x4c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c2       	rjmp	.+1188   	; 0x4c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c2       	rjmp	.+1184   	; 0x4c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c2       	rjmp	.+1180   	; 0x4c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c2       	rjmp	.+1176   	; 0x4c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c2       	rjmp	.+1172   	; 0x4c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c2       	rjmp	.+1168   	; 0x4c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c2       	rjmp	.+1164   	; 0x4c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c2       	rjmp	.+1160   	; 0x4c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 b1 2a 	jmp	0x5562	; 0x5562 <__vector_16>
      44:	40 c2       	rjmp	.+1152   	; 0x4c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <__vector_18>
      4c:	0c 94 fd 27 	jmp	0x4ffa	; 0x4ffa <__vector_19>
      50:	3a c2       	rjmp	.+1140   	; 0x4c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c2       	rjmp	.+1136   	; 0x4c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c2       	rjmp	.+1132   	; 0x4c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c2       	rjmp	.+1128   	; 0x4c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c2       	rjmp	.+1314   	; 0x584 <__vector_24>
      62:	00 00       	nop
      64:	30 c2       	rjmp	.+1120   	; 0x4c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 03       	fmuls	r20, r23
      6a:	ca 03       	fmulsu	r20, r18
      6c:	ca 03       	fmulsu	r20, r18
      6e:	ca 03       	fmulsu	r20, r18
      70:	ca 03       	fmulsu	r20, r18
      72:	ca 03       	fmulsu	r20, r18
      74:	ca 03       	fmulsu	r20, r18
      76:	ca 03       	fmulsu	r20, r18
      78:	e2 02       	muls	r30, r18
      7a:	ca 03       	fmulsu	r20, r18
      7c:	ca 03       	fmulsu	r20, r18
      7e:	ca 03       	fmulsu	r20, r18
      80:	ca 03       	fmulsu	r20, r18
      82:	ca 03       	fmulsu	r20, r18
      84:	ca 03       	fmulsu	r20, r18
      86:	ca 03       	fmulsu	r20, r18
      88:	e2 02       	muls	r30, r18
      8a:	ca 03       	fmulsu	r20, r18
      8c:	ca 03       	fmulsu	r20, r18
      8e:	ca 03       	fmulsu	r20, r18
      90:	ca 03       	fmulsu	r20, r18
      92:	ca 03       	fmulsu	r20, r18
      94:	ca 03       	fmulsu	r20, r18
      96:	ca 03       	fmulsu	r20, r18
      98:	ea 02       	muls	r30, r26
      9a:	ca 03       	fmulsu	r20, r18
      9c:	ca 03       	fmulsu	r20, r18
      9e:	ca 03       	fmulsu	r20, r18
      a0:	ca 03       	fmulsu	r20, r18
      a2:	ca 03       	fmulsu	r20, r18
      a4:	ca 03       	fmulsu	r20, r18
      a6:	ca 03       	fmulsu	r20, r18
      a8:	0f 03       	fmul	r16, r23
      aa:	ca 03       	fmulsu	r20, r18
      ac:	ca 03       	fmulsu	r20, r18
      ae:	ca 03       	fmulsu	r20, r18
      b0:	ca 03       	fmulsu	r20, r18
      b2:	ca 03       	fmulsu	r20, r18
      b4:	ca 03       	fmulsu	r20, r18
      b6:	ca 03       	fmulsu	r20, r18
      b8:	ea 02       	muls	r30, r26
      ba:	ca 03       	fmulsu	r20, r18
      bc:	ca 03       	fmulsu	r20, r18
      be:	ca 03       	fmulsu	r20, r18
      c0:	ca 03       	fmulsu	r20, r18
      c2:	ca 03       	fmulsu	r20, r18
      c4:	ca 03       	fmulsu	r20, r18
      c6:	ca 03       	fmulsu	r20, r18
      c8:	14 03       	mulsu	r17, r20
      ca:	ca 03       	fmulsu	r20, r18
      cc:	ca 03       	fmulsu	r20, r18
      ce:	ca 03       	fmulsu	r20, r18
      d0:	ca 03       	fmulsu	r20, r18
      d2:	ca 03       	fmulsu	r20, r18
      d4:	ca 03       	fmulsu	r20, r18
      d6:	ca 03       	fmulsu	r20, r18
      d8:	19 03       	fmul	r17, r17
      da:	ca 03       	fmulsu	r20, r18
      dc:	ca 03       	fmulsu	r20, r18
      de:	ca 03       	fmulsu	r20, r18
      e0:	ca 03       	fmulsu	r20, r18
      e2:	ca 03       	fmulsu	r20, r18
      e4:	ca 03       	fmulsu	r20, r18
      e6:	ca 03       	fmulsu	r20, r18
      e8:	2a 03       	fmul	r18, r18
      ea:	ca 03       	fmulsu	r20, r18
      ec:	ca 03       	fmulsu	r20, r18
      ee:	ca 03       	fmulsu	r20, r18
      f0:	ca 03       	fmulsu	r20, r18
      f2:	ca 03       	fmulsu	r20, r18
      f4:	ca 03       	fmulsu	r20, r18
      f6:	ca 03       	fmulsu	r20, r18
      f8:	53 03       	mulsu	r21, r19
      fa:	ca 03       	fmulsu	r20, r18
      fc:	ca 03       	fmulsu	r20, r18
      fe:	ca 03       	fmulsu	r20, r18
     100:	ca 03       	fmulsu	r20, r18
     102:	ca 03       	fmulsu	r20, r18
     104:	ca 03       	fmulsu	r20, r18
     106:	ca 03       	fmulsu	r20, r18
     108:	1e 03       	fmul	r17, r22
     10a:	ca 03       	fmulsu	r20, r18
     10c:	ca 03       	fmulsu	r20, r18
     10e:	ca 03       	fmulsu	r20, r18
     110:	ca 03       	fmulsu	r20, r18
     112:	ca 03       	fmulsu	r20, r18
     114:	ca 03       	fmulsu	r20, r18
     116:	ca 03       	fmulsu	r20, r18
     118:	38 03       	fmul	r19, r16
     11a:	ca 03       	fmulsu	r20, r18
     11c:	ca 03       	fmulsu	r20, r18
     11e:	ca 03       	fmulsu	r20, r18
     120:	ca 03       	fmulsu	r20, r18
     122:	ca 03       	fmulsu	r20, r18
     124:	ca 03       	fmulsu	r20, r18
     126:	ca 03       	fmulsu	r20, r18
     128:	55 03       	mulsu	r21, r21
     12a:	ca 03       	fmulsu	r20, r18
     12c:	ca 03       	fmulsu	r20, r18
     12e:	ca 03       	fmulsu	r20, r18
     130:	ca 03       	fmulsu	r20, r18
     132:	ca 03       	fmulsu	r20, r18
     134:	ca 03       	fmulsu	r20, r18
     136:	ca 03       	fmulsu	r20, r18
     138:	55 03       	mulsu	r21, r21
     13a:	ca 03       	fmulsu	r20, r18
     13c:	ca 03       	fmulsu	r20, r18
     13e:	ca 03       	fmulsu	r20, r18
     140:	ca 03       	fmulsu	r20, r18
     142:	ca 03       	fmulsu	r20, r18
     144:	ca 03       	fmulsu	r20, r18
     146:	ca 03       	fmulsu	r20, r18
     148:	55 03       	mulsu	r21, r21
     14a:	ca 03       	fmulsu	r20, r18
     14c:	ca 03       	fmulsu	r20, r18
     14e:	ca 03       	fmulsu	r20, r18
     150:	ca 03       	fmulsu	r20, r18
     152:	ca 03       	fmulsu	r20, r18
     154:	ca 03       	fmulsu	r20, r18
     156:	ca 03       	fmulsu	r20, r18
     158:	55 03       	mulsu	r21, r21
     15a:	ca 03       	fmulsu	r20, r18
     15c:	ca 03       	fmulsu	r20, r18
     15e:	ca 03       	fmulsu	r20, r18
     160:	ca 03       	fmulsu	r20, r18
     162:	ca 03       	fmulsu	r20, r18
     164:	ca 03       	fmulsu	r20, r18
     166:	ca 03       	fmulsu	r20, r18
     168:	5e 03       	fmul	r21, r22
     16a:	ca 03       	fmulsu	r20, r18
     16c:	ca 03       	fmulsu	r20, r18
     16e:	ca 03       	fmulsu	r20, r18
     170:	ca 03       	fmulsu	r20, r18
     172:	ca 03       	fmulsu	r20, r18
     174:	ca 03       	fmulsu	r20, r18
     176:	ca 03       	fmulsu	r20, r18
     178:	8e 03       	fmulsu	r16, r22
     17a:	ca 03       	fmulsu	r20, r18
     17c:	ca 03       	fmulsu	r20, r18
     17e:	ca 03       	fmulsu	r20, r18
     180:	ca 03       	fmulsu	r20, r18
     182:	ca 03       	fmulsu	r20, r18
     184:	ca 03       	fmulsu	r20, r18
     186:	ca 03       	fmulsu	r20, r18
     188:	5e 03       	fmul	r21, r22
     18a:	ca 03       	fmulsu	r20, r18
     18c:	ca 03       	fmulsu	r20, r18
     18e:	ca 03       	fmulsu	r20, r18
     190:	ca 03       	fmulsu	r20, r18
     192:	ca 03       	fmulsu	r20, r18
     194:	ca 03       	fmulsu	r20, r18
     196:	ca 03       	fmulsu	r20, r18
     198:	8e 03       	fmulsu	r16, r22
     19a:	ca 03       	fmulsu	r20, r18
     19c:	ca 03       	fmulsu	r20, r18
     19e:	ca 03       	fmulsu	r20, r18
     1a0:	ca 03       	fmulsu	r20, r18
     1a2:	ca 03       	fmulsu	r20, r18
     1a4:	ca 03       	fmulsu	r20, r18
     1a6:	ca 03       	fmulsu	r20, r18
     1a8:	76 03       	mulsu	r23, r22
     1aa:	ca 03       	fmulsu	r20, r18
     1ac:	ca 03       	fmulsu	r20, r18
     1ae:	ca 03       	fmulsu	r20, r18
     1b0:	ca 03       	fmulsu	r20, r18
     1b2:	ca 03       	fmulsu	r20, r18
     1b4:	ca 03       	fmulsu	r20, r18
     1b6:	ca 03       	fmulsu	r20, r18
     1b8:	92 03       	fmuls	r17, r18
     1ba:	ca 03       	fmulsu	r20, r18
     1bc:	ca 03       	fmulsu	r20, r18
     1be:	ca 03       	fmulsu	r20, r18
     1c0:	ca 03       	fmulsu	r20, r18
     1c2:	ca 03       	fmulsu	r20, r18
     1c4:	ca 03       	fmulsu	r20, r18
     1c6:	ca 03       	fmulsu	r20, r18
     1c8:	92 03       	fmuls	r17, r18
     1ca:	ca 03       	fmulsu	r20, r18
     1cc:	ca 03       	fmulsu	r20, r18
     1ce:	ca 03       	fmulsu	r20, r18
     1d0:	ca 03       	fmulsu	r20, r18
     1d2:	ca 03       	fmulsu	r20, r18
     1d4:	ca 03       	fmulsu	r20, r18
     1d6:	ca 03       	fmulsu	r20, r18
     1d8:	a7 03       	fmuls	r18, r23
     1da:	ca 03       	fmulsu	r20, r18
     1dc:	ca 03       	fmulsu	r20, r18
     1de:	ca 03       	fmulsu	r20, r18
     1e0:	ca 03       	fmulsu	r20, r18
     1e2:	ca 03       	fmulsu	r20, r18
     1e4:	ca 03       	fmulsu	r20, r18
     1e6:	ca 03       	fmulsu	r20, r18
     1e8:	c1 03       	fmuls	r20, r17
     1ea:	ca 03       	fmulsu	r20, r18
     1ec:	ca 03       	fmulsu	r20, r18
     1ee:	ca 03       	fmulsu	r20, r18
     1f0:	ca 03       	fmulsu	r20, r18
     1f2:	ca 03       	fmulsu	r20, r18
     1f4:	ca 03       	fmulsu	r20, r18
     1f6:	ca 03       	fmulsu	r20, r18
     1f8:	c1 03       	fmuls	r20, r17

000001fa <__trampolines_end>:
     1fa:	4e 41       	sbci	r20, 0x1E	; 30
     1fc:	4e 49       	Address 0x000001fc is out of bounds.
.word	0xffff	; ????

000001fd <pstr_inity>:
     1fd:	49 4e 49 54 59                                      INITY

00000202 <pstr_inf>:
     202:	49 4e 46                                            INF

00000205 <pwr_m10>:
     205:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     215:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021d <pwr_p10>:
     21d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     23d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     24d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     25d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     26d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     27d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     28d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     29d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2ad:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2bd:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2cd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2dd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2ed:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2fd:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     30d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     31d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     32d:	3d 27                                               ='

0000032f <_ZZN7LCDBase9ClearLineEsE3__c>:
     32f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000340 <_ZZN8PHSensor11CalculatePHEvE3__c>:
     340:	73 61 6d 70 6c 69 6e 67 54 69 6d 65 3a 20 00        samplingTime: .

0000034f <_ZZN8PHSensor11CalculatePHEvE3__c_0>:
     34f:	5f 70 48 48 6f 75 72 41 76 65 72 61 67 65 2e 73     _pHHourAverage.s
     35f:	69 7a 65 3a 20 00                                   ize: .

00000365 <_ZZN8PHSensor11CalculatePHEvE3__c_1>:
     365:	5f 70 48 48 6f 75 72 41 72 72 61 79 49 6e 64 65     _pHHourArrayInde
     375:	78 3a 20 00                                         x: .

00000379 <_ZZN8PHSensor11CalculatePHEvE3__c_2>:
     379:	5f 70 48 41 76 67 56 61 6c 75 65 3a 20 00           _pHAvgValue: .

00000387 <_ZZN8PHSensor11CalculatePHEvE3__c_3>:
     387:	5f 70 48 56 61 6c 75 65 3a 20 00                    _pHValue: .

00000392 <_ZZN8PHSensor16CalculateAverageEPiiE3__c>:
     392:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3a2:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3b2:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003bc <_ZZN9TDSSensor16CalculateAverageEPiiE3__c>:
     3bc:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     3cc:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     3dc:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

000003e6 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     3e6:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     3f6:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     406:	76 65 64 3a 20 00                                   ved: .

0000040c <digital_pin_to_timer_PGM>:
     40c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     41c:	00 00 00 00                                         ....

00000420 <digital_pin_to_bit_mask_PGM>:
     420:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     430:	04 08 10 20                                         ... 

00000434 <digital_pin_to_port_PGM>:
     434:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     444:	03 03 03 03                                         ....

00000448 <port_to_input_PGM>:
     448:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000452 <port_to_output_PGM>:
     452:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000045c <port_to_mode_PGM>:
     45c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000466 <__ctors_start>:
     466:	f4 05       	cpc	r31, r4
     468:	92 0c       	add	r9, r2
     46a:	5f 23       	and	r21, r31
     46c:	d0 23       	and	r29, r16
     46e:	76 24       	eor	r7, r6
     470:	2b 28       	or	r2, r11

00000472 <__ctors_end>:
     472:	6d 23       	and	r22, r29
     474:	de 23       	and	r29, r30

00000476 <__dtors_end>:
     476:	11 24       	eor	r1, r1
     478:	1f be       	out	0x3f, r1	; 63
     47a:	cf ef       	ldi	r28, 0xFF	; 255
     47c:	d8 e0       	ldi	r29, 0x08	; 8
     47e:	de bf       	out	0x3e, r29	; 62
     480:	cd bf       	out	0x3d, r28	; 61

00000482 <__do_copy_data>:
     482:	11 e0       	ldi	r17, 0x01	; 1
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b1 e0       	ldi	r27, 0x01	; 1
     488:	ea eb       	ldi	r30, 0xBA	; 186
     48a:	fb e6       	ldi	r31, 0x6B	; 107
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__do_copy_data+0x10>
     48e:	05 90       	lpm	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	a6 3e       	cpi	r26, 0xE6	; 230
     494:	b1 07       	cpc	r27, r17
     496:	d9 f7       	brne	.-10     	; 0x48e <__do_copy_data+0xc>

00000498 <__do_clear_bss>:
     498:	26 e0       	ldi	r18, 0x06	; 6
     49a:	a6 ee       	ldi	r26, 0xE6	; 230
     49c:	b1 e0       	ldi	r27, 0x01	; 1
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <.do_clear_bss_start>

000004a0 <.do_clear_bss_loop>:
     4a0:	1d 92       	st	X+, r1

000004a2 <.do_clear_bss_start>:
     4a2:	a0 30       	cpi	r26, 0x00	; 0
     4a4:	b2 07       	cpc	r27, r18
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <.do_clear_bss_loop>

000004a8 <__do_global_ctors>:
     4a8:	12 e0       	ldi	r17, 0x02	; 2
     4aa:	c9 e3       	ldi	r28, 0x39	; 57
     4ac:	d2 e0       	ldi	r29, 0x02	; 2
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__do_global_ctors+0x10>
     4b0:	21 97       	sbiw	r28, 0x01	; 1
     4b2:	fe 01       	movw	r30, r28
     4b4:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__tablejump2__>
     4b8:	c3 33       	cpi	r28, 0x33	; 51
     4ba:	d1 07       	cpc	r29, r17
     4bc:	c9 f7       	brne	.-14     	; 0x4b0 <__do_global_ctors+0x8>
     4be:	0e 94 59 28 	call	0x50b2	; 0x50b2 <main>
     4c2:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__do_global_dtors>

000004c6 <__bad_interrupt>:
     4c6:	9c cd       	rjmp	.-1224   	; 0x0 <__vectors>

000004c8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4c8:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <twi_sendStop>
     4d2:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <twi_inRepStart>
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	82 e1       	ldi	r24, 0x12	; 18
     4da:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	83 e1       	ldi	r24, 0x13	; 19
     4e2:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
     4e6:	e9 eb       	ldi	r30, 0xB9	; 185
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 83       	st	Z, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
     4f4:	80 83       	st	Z, r24
     4f6:	88 e4       	ldi	r24, 0x48	; 72
     4f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4fc:	85 e4       	ldi	r24, 0x45	; 69
     4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     502:	08 95       	ret

00000504 <twi_setAddress>:
     504:	88 0f       	add	r24, r24
     506:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     50a:	08 95       	ret

0000050c <twi_transmit>:
     50c:	61 32       	cpi	r22, 0x21	; 33
     50e:	c8 f4       	brcc	.+50     	; 0x542 <twi_transmit+0x36>
     510:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <twi_state>
     514:	24 30       	cpi	r18, 0x04	; 4
     516:	b9 f4       	brne	.+46     	; 0x546 <twi_transmit+0x3a>
     518:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <twi_txBufferLength>
     51c:	66 23       	and	r22, r22
     51e:	a9 f0       	breq	.+42     	; 0x54a <twi_transmit+0x3e>
     520:	fc 01       	movw	r30, r24
     522:	aa e0       	ldi	r26, 0x0A	; 10
     524:	b2 e0       	ldi	r27, 0x02	; 2
     526:	61 50       	subi	r22, 0x01	; 1
     528:	26 2f       	mov	r18, r22
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	28 0f       	add	r18, r24
     532:	39 1f       	adc	r19, r25
     534:	91 91       	ld	r25, Z+
     536:	9d 93       	st	X+, r25
     538:	e2 17       	cp	r30, r18
     53a:	f3 07       	cpc	r31, r19
     53c:	d9 f7       	brne	.-10     	; 0x534 <twi_transmit+0x28>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	08 95       	ret
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	08 95       	ret
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret

0000054e <twi_attachSlaveRxEvent>:
     54e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <twi_onSlaveReceive+0x1>
     552:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <twi_onSlaveReceive>
     556:	08 95       	ret

00000558 <twi_attachSlaveTxEvent>:
     558:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <twi_onSlaveTransmit+0x1>
     55c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <twi_onSlaveTransmit>
     560:	08 95       	ret

00000562 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     562:	85 ed       	ldi	r24, 0xD5	; 213
     564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     568:	ec eb       	ldi	r30, 0xBC	; 188
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	84 fd       	sbrc	r24, 4
     570:	fd cf       	rjmp	.-6      	; 0x56c <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     572:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     576:	08 95       	ret

00000578 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     578:	85 ec       	ldi	r24, 0xC5	; 197
     57a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     57e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     582:	08 95       	ret

00000584 <__vector_24>:
}

ISR(TWI_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
  switch(TW_STATUS){
     5a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5aa:	e8 2f       	mov	r30, r24
     5ac:	e8 7f       	andi	r30, 0xF8	; 248
     5ae:	8e 2f       	mov	r24, r30
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	89 3c       	cpi	r24, 0xC9	; 201
     5b4:	91 05       	cpc	r25, r1
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <__vector_24+0x36>
     5b8:	ed c0       	rjmp	.+474    	; 0x794 <__vector_24+0x210>
     5ba:	fc 01       	movw	r30, r24
     5bc:	ec 5c       	subi	r30, 0xCC	; 204
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	0c 94 31 2f 	jmp	0x5e62	; 0x5e62 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5c4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <twi_slarw>
     5c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5cc:	85 ec       	ldi	r24, 0xC5	; 197
     5ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5d2:	e0 c0       	rjmp	.+448    	; 0x794 <__vector_24+0x210>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5d4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <twi_masterBufferIndex>
     5d8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_masterBufferLength>
     5dc:	98 17       	cp	r25, r24
     5de:	80 f4       	brcc	.+32     	; 0x600 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5e0:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	8e 0f       	add	r24, r30
     5e8:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	e4 5d       	subi	r30, 0xD4	; 212
     5f0:	fd 4f       	sbci	r31, 0xFD	; 253
     5f2:	80 81       	ld	r24, Z
     5f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5f8:	85 ec       	ldi	r24, 0xC5	; 197
     5fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5fe:	ca c0       	rjmp	.+404    	; 0x794 <__vector_24+0x210>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     600:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <twi_sendStop>
     604:	88 23       	and	r24, r24
     606:	11 f0       	breq	.+4      	; 0x60c <__vector_24+0x88>
          twi_stop();
     608:	ac df       	rcall	.-168    	; 0x562 <twi_stop>
     60a:	c4 c0       	rjmp	.+392    	; 0x794 <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     612:	84 ea       	ldi	r24, 0xA4	; 164
     614:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     618:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     61c:	bb c0       	rjmp	.+374    	; 0x794 <__vector_24+0x210>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     61e:	80 e2       	ldi	r24, 0x20	; 32
     620:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_stop();
     624:	9e df       	rcall	.-196    	; 0x562 <twi_stop>
      break;
     626:	b6 c0       	rjmp	.+364    	; 0x794 <__vector_24+0x210>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     628:	80 e3       	ldi	r24, 0x30	; 48
     62a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_stop();
     62e:	99 df       	rcall	.-206    	; 0x562 <twi_stop>
      break;
     630:	b1 c0       	rjmp	.+354    	; 0x794 <__vector_24+0x210>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     632:	88 e3       	ldi	r24, 0x38	; 56
     634:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
      twi_releaseBus();
     638:	9f df       	rcall	.-194    	; 0x578 <twi_releaseBus>
      break;
     63a:	ac c0       	rjmp	.+344    	; 0x794 <__vector_24+0x210>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     63c:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	8e 0f       	add	r24, r30
     644:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     648:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e4 5d       	subi	r30, 0xD4	; 212
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     654:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <twi_masterBufferIndex>
     658:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_masterBufferLength>
     65c:	98 17       	cp	r25, r24
     65e:	20 f4       	brcc	.+8      	; 0x668 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     660:	85 ec       	ldi	r24, 0xC5	; 197
     662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     666:	96 c0       	rjmp	.+300    	; 0x794 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     668:	85 e8       	ldi	r24, 0x85	; 133
     66a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     66e:	92 c0       	rjmp	.+292    	; 0x794 <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     670:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_masterBufferIndex>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	8e 0f       	add	r24, r30
     678:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_masterBufferIndex>
     67c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	e4 5d       	subi	r30, 0xD4	; 212
     684:	fd 4f       	sbci	r31, 0xFD	; 253
     686:	80 83       	st	Z, r24
	if (twi_sendStop)
     688:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <twi_sendStop>
     68c:	88 23       	and	r24, r24
     68e:	11 f0       	breq	.+4      	; 0x694 <__vector_24+0x110>
          twi_stop();
     690:	68 df       	rcall	.-304    	; 0x562 <twi_stop>
     692:	80 c0       	rjmp	.+256    	; 0x794 <__vector_24+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     69a:	84 ea       	ldi	r24, 0xA4	; 164
     69c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     6a0:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
     6a4:	77 c0       	rjmp	.+238    	; 0x794 <__vector_24+0x210>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     6a6:	5d df       	rcall	.-326    	; 0x562 <twi_stop>
      break;
     6a8:	75 c0       	rjmp	.+234    	; 0x794 <__vector_24+0x210>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     6b0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6b4:	85 ec       	ldi	r24, 0xC5	; 197
     6b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6ba:	6c c0       	rjmp	.+216    	; 0x794 <__vector_24+0x210>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6bc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6c0:	80 32       	cpi	r24, 0x20	; 32
     6c2:	80 f4       	brcc	.+32     	; 0x6e4 <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     6c4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8e 0f       	add	r24, r30
     6cc:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <twi_rxBufferIndex>
     6d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	e8 51       	subi	r30, 0x18	; 24
     6d8:	fe 4f       	sbci	r31, 0xFE	; 254
     6da:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6dc:	85 ec       	ldi	r24, 0xC5	; 197
     6de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6e2:	58 c0       	rjmp	.+176    	; 0x794 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     6e4:	85 e8       	ldi	r24, 0x85	; 133
     6e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6ea:	54 c0       	rjmp	.+168    	; 0x794 <__vector_24+0x210>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     6ec:	45 df       	rcall	.-374    	; 0x578 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6ee:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6f2:	80 32       	cpi	r24, 0x20	; 32
     6f4:	30 f4       	brcc	.+12     	; 0x702 <__vector_24+0x17e>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6f6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	e8 51       	subi	r30, 0x18	; 24
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     702:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <twi_rxBufferIndex>
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <twi_onSlaveReceive>
     70c:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <twi_onSlaveReceive+0x1>
     710:	88 ee       	ldi	r24, 0xE8	; 232
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     716:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <twi_rxBufferIndex>
      break;
     71a:	3c c0       	rjmp	.+120    	; 0x794 <__vector_24+0x210>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     71c:	85 e8       	ldi	r24, 0x85	; 133
     71e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     722:	38 c0       	rjmp	.+112    	; 0x794 <__vector_24+0x210>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     72a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     72e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     732:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <twi_onSlaveTransmit>
     736:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <twi_onSlaveTransmit+0x1>
     73a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     73c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_txBufferLength>
     740:	81 11       	cpse	r24, r1
     742:	05 c0       	rjmp	.+10     	; 0x74e <__vector_24+0x1ca>
        twi_txBufferLength = 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     74a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     74e:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <twi_txBufferIndex>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	8e 0f       	add	r24, r30
     756:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <twi_txBufferIndex>
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e6 5f       	subi	r30, 0xF6	; 246
     75e:	fd 4f       	sbci	r31, 0xFD	; 253
     760:	80 81       	ld	r24, Z
     762:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     766:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <twi_txBufferIndex>
     76a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_txBufferLength>
     76e:	98 17       	cp	r25, r24
     770:	20 f4       	brcc	.+8      	; 0x77a <__vector_24+0x1f6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     772:	85 ec       	ldi	r24, 0xC5	; 197
     774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     778:	0d c0       	rjmp	.+26     	; 0x794 <__vector_24+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     77a:	85 e8       	ldi	r24, 0x85	; 133
     77c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     780:	09 c0       	rjmp	.+18     	; 0x794 <__vector_24+0x210>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     782:	85 ec       	ldi	r24, 0xC5	; 197
     784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     788:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_state>
      break;
     78c:	03 c0       	rjmp	.+6      	; 0x794 <__vector_24+0x210>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     78e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <__data_end>
      twi_stop();
     792:	e7 de       	rcall	.-562    	; 0x562 <twi_stop>
      break;
  }
}
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     7b6:	a4 e0       	ldi	r26, 0x04	; 4
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e1 ee       	ldi	r30, 0xE1	; 225
     7bc:	f3 e0       	ldi	r31, 0x03	; 3
     7be:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	7c 83       	std	Y+4, r23	; 0x04
     7c8:	6b 83       	std	Y+3, r22	; 0x03
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	2b 81       	ldd	r18, Y+3	; 0x03
     7d0:	3c 81       	ldd	r19, Y+4	; 0x04
     7d2:	fc 01       	movw	r30, r24
     7d4:	33 83       	std	Z+3, r19	; 0x03
     7d6:	22 83       	std	Z+2, r18	; 0x02
     7d8:	24 96       	adiw	r28, 0x04	; 4
     7da:	e2 e0       	ldi	r30, 0x02	; 2
     7dc:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000007e0 <_ZN5PrintC1Ev>:
     7e0:	a2 e0       	ldi	r26, 0x02	; 2
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	e6 ef       	ldi	r30, 0xF6	; 246
     7e6:	f3 e0       	ldi	r31, 0x03	; 3
     7e8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	22 ee       	ldi	r18, 0xE2	; 226
     7f6:	31 e0       	ldi	r19, 0x01	; 1
     7f8:	fc 01       	movw	r30, r24
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	fc 01       	movw	r30, r24
     804:	13 82       	std	Z+3, r1	; 0x03
     806:	12 82       	std	Z+2, r1	; 0x02
     808:	22 96       	adiw	r28, 0x02	; 2
     80a:	e2 e0       	ldi	r30, 0x02	; 2
     80c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000810 <_ZN6StreamC1Ev>:
     810:	a2 e0       	ldi	r26, 0x02	; 2
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	ee e0       	ldi	r30, 0x0E	; 14
     816:	f4 e0       	ldi	r31, 0x04	; 4
     818:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	dd df       	rcall	.-70     	; 0x7e0 <_ZN5PrintC1Ev>
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	21 e6       	ldi	r18, 0x61	; 97
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	fc 01       	movw	r30, r24
     830:	31 83       	std	Z+1, r19	; 0x01
     832:	20 83       	st	Z, r18
     834:	29 81       	ldd	r18, Y+1	; 0x01
     836:	3a 81       	ldd	r19, Y+2	; 0x02
     838:	88 ee       	ldi	r24, 0xE8	; 232
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	a0 e0       	ldi	r26, 0x00	; 0
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	84 83       	std	Z+4, r24	; 0x04
     844:	95 83       	std	Z+5, r25	; 0x05
     846:	a6 83       	std	Z+6, r26	; 0x06
     848:	b7 83       	std	Z+7, r27	; 0x07
     84a:	22 96       	adiw	r28, 0x02	; 2
     84c:	e2 e0       	ldi	r30, 0x02	; 2
     84e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000852 <_ZN7TwoWireC1Ev>:
     852:	a2 e0       	ldi	r26, 0x02	; 2
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	ef e2       	ldi	r30, 0x2F	; 47
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     85e:	9a 83       	std	Y+2, r25	; 0x02
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	d4 df       	rcall	.-88     	; 0x810 <_ZN6StreamC1Ev>
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	21 e5       	ldi	r18, 0x51	; 81
     86e:	31 e0       	ldi	r19, 0x01	; 1
     870:	fc 01       	movw	r30, r24
     872:	31 83       	std	Z+1, r19	; 0x01
     874:	20 83       	st	Z, r18
     876:	22 96       	adiw	r28, 0x02	; 2
     878:	e2 e0       	ldi	r30, 0x02	; 2
     87a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000087e <_ZN7TwoWire5beginEv>:
     87e:	a2 e0       	ldi	r26, 0x02	; 2
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	e5 e4       	ldi	r30, 0x45	; 69
     884:	f4 e0       	ldi	r31, 0x04	; 4
     886:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     88a:	9a 83       	std	Y+2, r25	; 0x02
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     892:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     896:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     89a:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     89e:	14 de       	rcall	.-984    	; 0x4c8 <twi_init>
     8a0:	22 96       	adiw	r28, 0x02	; 2
     8a2:	e2 e0       	ldi	r30, 0x02	; 2
     8a4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000008a8 <_ZN7TwoWire5beginEh>:
     8a8:	a3 e0       	ldi	r26, 0x03	; 3
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	ea e5       	ldi	r30, 0x5A	; 90
     8ae:	f4 e0       	ldi	r31, 0x04	; 4
     8b0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	6b 83       	std	Y+3, r22	; 0x03
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
     8bc:	23 de       	rcall	.-954    	; 0x504 <twi_setAddress>
     8be:	89 e9       	ldi	r24, 0x99	; 153
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	4a de       	rcall	.-876    	; 0x558 <twi_attachSlaveTxEvent>
     8c4:	83 e5       	ldi	r24, 0x53	; 83
     8c6:	95 e0       	ldi	r25, 0x05	; 5
     8c8:	42 de       	rcall	.-892    	; 0x54e <twi_attachSlaveRxEvent>
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	d7 df       	rcall	.-82     	; 0x87e <_ZN7TwoWire5beginEv>
     8d0:	23 96       	adiw	r28, 0x03	; 3
     8d2:	e2 e0       	ldi	r30, 0x02	; 2
     8d4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000008d8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8d8:	a3 e0       	ldi	r26, 0x03	; 3
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e2 e7       	ldi	r30, 0x72	; 114
     8de:	f4 e0       	ldi	r31, 0x04	; 4
     8e0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     8ea:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <_ZN7TwoWire12transmittingE>
     8ee:	88 23       	and	r24, r24
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__stack+0x31>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8f2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     8f6:	80 32       	cpi	r24, 0x20	; 32
     8f8:	40 f0       	brcs	.+16     	; 0x90a <__stack+0xb>
      setWriteError();
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	59 df       	rcall	.-334    	; 0x7b6 <_ZN5Print13setWriteErrorEi>
      return 0;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	19 c0       	rjmp	.+50     	; 0x93c <__stack+0x3d>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     90a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	8a 58       	subi	r24, 0x8A	; 138
     916:	9d 4f       	sbci	r25, 0xFD	; 253
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
    ++txBufferIndex;
     91c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     926:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
     92a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
     92e:	04 c0       	rjmp	.+8      	; 0x938 <__stack+0x39>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     930:	ce 01       	movw	r24, r28
     932:	03 96       	adiw	r24, 0x03	; 3
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	ea dd       	rcall	.-1068   	; 0x50c <twi_transmit>
  }
  return 1;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
}
     93c:	23 96       	adiw	r28, 0x03	; 3
     93e:	e2 e0       	ldi	r30, 0x02	; 2
     940:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000944 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     944:	a8 e0       	ldi	r26, 0x08	; 8
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     950:	9c 83       	std	Y+4, r25	; 0x04
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	7e 83       	std	Y+6, r23	; 0x06
     956:	6d 83       	std	Y+5, r22	; 0x05
     958:	58 87       	std	Y+8, r21	; 0x08
     95a:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     95c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <_ZN7TwoWire12transmittingE>
     960:	88 23       	and	r24, r24
     962:	29 f1       	breq	.+74     	; 0x9ae <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     964:	1a 82       	std	Y+2, r1	; 0x02
     966:	19 82       	std	Y+1, r1	; 0x01
     968:	1a c0       	rjmp	.+52     	; 0x99e <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	fc 01       	movw	r30, r24
     976:	20 81       	ld	r18, Z
     978:	31 81       	ldd	r19, Z+1	; 0x01
     97a:	4d 81       	ldd	r20, Y+5	; 0x05
     97c:	5e 81       	ldd	r21, Y+6	; 0x06
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	84 0f       	add	r24, r20
     984:	95 1f       	adc	r25, r21
     986:	fc 01       	movw	r30, r24
     988:	40 81       	ld	r20, Z
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	64 2f       	mov	r22, r20
     990:	f9 01       	movw	r30, r18
     992:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	29 81       	ldd	r18, Y+1	; 0x01
     9a0:	3a 81       	ldd	r19, Y+2	; 0x02
     9a2:	8f 81       	ldd	r24, Y+7	; 0x07
     9a4:	98 85       	ldd	r25, Y+8	; 0x08
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	f8 f2       	brcs	.-66     	; 0x96a <_ZN7TwoWire5writeEPKhj+0x26>
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     9ae:	2f 81       	ldd	r18, Y+7	; 0x07
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	9e 81       	ldd	r25, Y+6	; 0x06
     9b4:	62 2f       	mov	r22, r18
     9b6:	aa dd       	rcall	.-1196   	; 0x50c <twi_transmit>
  }
  return quantity;
     9b8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ba:	98 85       	ldd	r25, Y+8	; 0x08
}
     9bc:	28 96       	adiw	r28, 0x08	; 8
     9be:	e2 e0       	ldi	r30, 0x02	; 2
     9c0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000009c4 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     9c4:	a2 e0       	ldi	r26, 0x02	; 2
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	e8 ee       	ldi	r30, 0xE8	; 232
     9ca:	f4 e0       	ldi	r31, 0x04	; 4
     9cc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     9d4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a9 01       	movw	r20, r18
     9e6:	48 1b       	sub	r20, r24
     9e8:	59 0b       	sbc	r21, r25
     9ea:	ca 01       	movw	r24, r20
}
     9ec:	22 96       	adiw	r28, 0x02	; 2
     9ee:	e2 e0       	ldi	r30, 0x02	; 2
     9f0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000009f4 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     9f4:	a4 e0       	ldi	r26, 0x04	; 4
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f5 e0       	ldi	r31, 0x05	; 5
     9fc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a0c:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a10:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     a14:	98 17       	cp	r25, r24
     a16:	88 f4       	brcc	.+34     	; 0xa3a <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     a18:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	8c 5a       	subi	r24, 0xAC	; 172
     a22:	9d 4f       	sbci	r25, 0xFD	; 253
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9a 83       	std	Y+2, r25	; 0x02
     a2e:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     a30:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a3e:	24 96       	adiw	r28, 0x04	; 4
     a40:	e2 e0       	ldi	r30, 0x02	; 2
     a42:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000a46 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     a46:	a4 e0       	ldi	r26, 0x04	; 4
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     a5e:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a62:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     a66:	98 17       	cp	r25, r24
     a68:	60 f4       	brcc	.+24     	; 0xa82 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     a6a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	8c 5a       	subi	r24, 0xAC	; 172
     a74:	9d 4f       	sbci	r25, 0xFD	; 253
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a86:	24 96       	adiw	r28, 0x04	; 4
     a88:	e2 e0       	ldi	r30, 0x02	; 2
     a8a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000a8e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a8e:	a2 e0       	ldi	r26, 0x02	; 2
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	ed e4       	ldi	r30, 0x4D	; 77
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     a9e:	22 96       	adiw	r28, 0x02	; 2
     aa0:	e2 e0       	ldi	r30, 0x02	; 2
     aa2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000aa6 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     aa6:	a5 e0       	ldi	r26, 0x05	; 5
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     ab2:	9b 83       	std	Y+3, r25	; 0x03
     ab4:	8a 83       	std	Y+2, r24	; 0x02
     ab6:	7d 83       	std	Y+5, r23	; 0x05
     ab8:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     aba:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
     abe:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f4       	brne	.+2      	; 0xac8 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     ac6:	31 c0       	rjmp	.+98     	; 0xb2a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     ac8:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
     acc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
     ad0:	98 17       	cp	r25, r24
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     ad4:	2a c0       	rjmp	.+84     	; 0xb2a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	29 81       	ldd	r18, Y+1	; 0x01
     ae2:	22 2f       	mov	r18, r18
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	4a 81       	ldd	r20, Y+2	; 0x02
     ae8:	5b 81       	ldd	r21, Y+3	; 0x03
     aea:	24 0f       	add	r18, r20
     aec:	35 1f       	adc	r19, r21
     aee:	f9 01       	movw	r30, r18
     af0:	20 81       	ld	r18, Z
     af2:	8c 5a       	subi	r24, 0xAC	; 172
     af4:	9d 4f       	sbci	r25, 0xFD	; 253
     af6:	fc 01       	movw	r30, r24
     af8:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	28 17       	cp	r18, r24
     b0c:	39 07       	cpc	r19, r25
     b0e:	2c f3       	brlt	.-54     	; 0xada <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     b10:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     b14:	8c 81       	ldd	r24, Y+4	; 0x04
     b16:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     b1a:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
     b1e:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     b22:	8c 81       	ldd	r24, Y+4	; 0x04
     b24:	9d 81       	ldd	r25, Y+5	; 0x05
     b26:	f9 01       	movw	r30, r18
     b28:	09 95       	icall
}
     b2a:	25 96       	adiw	r28, 0x05	; 5
     b2c:	e2 e0       	ldi	r30, 0x02	; 2
     b2e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000b32 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ef e9       	ldi	r30, 0x9F	; 159
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     b3e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_ZN7TwoWire14user_onRequestE>
     b42:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     b46:	89 2b       	or	r24, r25
     b48:	09 f4       	brne	.+2      	; 0xb4c <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     b4a:	0a c0       	rjmp	.+20     	; 0xb60 <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     b4c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     b50:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     b54:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_ZN7TwoWire14user_onRequestE>
     b58:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     b5c:	fc 01       	movw	r30, r24
     b5e:	09 95       	icall
}
     b60:	e2 e0       	ldi	r30, 0x02	; 2
     b62:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000b66 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     b66:	a4 e0       	ldi	r26, 0x04	; 4
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 eb       	ldi	r30, 0xB9	; 185
     b6c:	f5 e0       	ldi	r31, 0x05	; 5
     b6e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	7c 83       	std	Y+4, r23	; 0x04
     b78:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
     b82:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
}
     b86:	24 96       	adiw	r28, 0x04	; 4
     b88:	e2 e0       	ldi	r30, 0x02	; 2
     b8a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000b8e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     b8e:	a4 e0       	ldi	r26, 0x04	; 4
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ed ec       	ldi	r30, 0xCD	; 205
     b94:	f5 e0       	ldi	r31, 0x05	; 5
     b96:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	7c 83       	std	Y+4, r23	; 0x04
     ba0:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <_ZN7TwoWire14user_onRequestE+0x1>
     baa:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_ZN7TwoWire14user_onRequestE>
}
     bae:	24 96       	adiw	r28, 0x04	; 4
     bb0:	e2 e0       	ldi	r30, 0x02	; 2
     bb2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000bb6 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     bb6:	a4 e0       	ldi	r26, 0x04	; 4
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e1 ee       	ldi	r30, 0xE1	; 225
     bbc:	f5 e0       	ldi	r31, 0x05	; 5
     bbe:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	7c 83       	std	Y+4, r23	; 0x04
     bc8:	6b 83       	std	Y+3, r22	; 0x03
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bda:	8d e9       	ldi	r24, 0x9D	; 157
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	39 de       	rcall	.-910    	; 0x852 <_ZN7TwoWireC1Ev>
     be0:	24 96       	adiw	r28, 0x04	; 4
     be2:	e2 e0       	ldi	r30, 0x02	; 2
     be4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000be8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea ef       	ldi	r30, 0xFA	; 250
     bee:	f5 e0       	ldi	r31, 0x05	; 5
     bf0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     bf4:	6f ef       	ldi	r22, 0xFF	; 255
     bf6:	7f ef       	ldi	r23, 0xFF	; 255
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	dc df       	rcall	.-72     	; 0xbb6 <_Z41__static_initialization_and_destruction_0ii>
     bfe:	e2 e0       	ldi	r30, 0x02	; 2
     c00:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000c04 <_Z10DebugPulsehh>:
    setRxIntMsk(false);
    active_object = NULL;
    return true;
  }
  return false;
}
     c04:	a2 e0       	ldi	r26, 0x02	; 2
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e0       	ldi	r30, 0x08	; 8
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	6a 83       	std	Y+2, r22	; 0x02
     c14:	22 96       	adiw	r28, 0x02	; 2
     c16:	e2 e0       	ldi	r30, 0x02	; 2
     c18:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000c1c <_ZN14SoftwareSerial10tunedDelayEj>:
     c1c:	a4 e0       	ldi	r26, 0x04	; 4
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e4 e1       	ldi	r30, 0x14	; 20
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	24 96       	adiw	r28, 0x04	; 4
     c42:	e2 e0       	ldi	r30, 0x02	; 2
     c44:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000c48 <_ZN14SoftwareSerial11rx_pin_readEv>:
    ::);
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
     c48:	a2 e0       	ldi	r26, 0x02	; 2
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea e2       	ldi	r30, 0x2A	; 42
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	86 85       	ldd	r24, Z+14	; 0x0e
     c60:	97 85       	ldd	r25, Z+15	; 0x0f
     c62:	fc 01       	movw	r30, r24
     c64:	20 81       	ld	r18, Z
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	fc 01       	movw	r30, r24
     c6c:	85 85       	ldd	r24, Z+13	; 0x0d
     c6e:	82 23       	and	r24, r18
}
     c70:	22 96       	adiw	r28, 0x02	; 2
     c72:	e2 e0       	ldi	r30, 0x02	; 2
     c74:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00000c78 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2b 97       	sbiw	r28, 0x0b	; 11
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     caa:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZN14SoftwareSerial13active_objectE>
     cae:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_ZN14SoftwareSerial13active_objectE+0x1>
     cb2:	89 2b       	or	r24, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <__vector_3+0x40>
     cb6:	f4 c0       	rjmp	.+488    	; 0xea0 <__vector_3+0x228>
  {
    active_object->recv();
     cb8:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <_ZN14SoftwareSerial13active_objectE>
     cbc:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <_ZN14SoftwareSerial13active_objectE+0x1>
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     cc4:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	fc 01       	movw	r30, r24
     ccc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cce:	82 70       	andi	r24, 0x02	; 2
     cd0:	88 23       	and	r24, r24
     cd2:	49 f0       	breq	.+18     	; 0xce6 <__vector_3+0x6e>
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	b7 df       	rcall	.-146    	; 0xc48 <_ZN14SoftwareSerial11rx_pin_readEv>
     cda:	98 2f       	mov	r25, r24
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	99 23       	and	r25, r25
     ce0:	51 f4       	brne	.+20     	; 0xcf6 <__vector_3+0x7e>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <__vector_3+0x7e>
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	ae df       	rcall	.-164    	; 0xc48 <_ZN14SoftwareSerial11rx_pin_readEv>
     cec:	98 2f       	mov	r25, r24
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	99 23       	and	r25, r25
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <__vector_3+0x7e>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <__vector_3+0x84>
     cfa:	d2 c0       	rjmp	.+420    	; 0xea0 <__vector_3+0x228>
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	9d 83       	std	Y+5, r25	; 0x05
     d02:	8c 83       	std	Y+4, r24	; 0x04
     d04:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	88 23       	and	r24, r24
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	fc 01       	movw	r30, r24
     d12:	83 89       	ldd	r24, Z+19	; 0x13
     d14:	94 89       	ldd	r25, Z+20	; 0x14
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	f9 01       	movw	r30, r18
     d1c:	23 89       	ldd	r18, Z+19	; 0x13
     d1e:	34 89       	ldd	r19, Z+20	; 0x14
     d20:	f9 01       	movw	r30, r18
     d22:	40 81       	ld	r20, Z
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	f9 01       	movw	r30, r18
     d2a:	25 89       	ldd	r18, Z+21	; 0x15
     d2c:	24 2b       	or	r18, r20
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
     d32:	15 c0       	rjmp	.+42     	; 0xd5e <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	fc 01       	movw	r30, r24
     d3a:	83 89       	ldd	r24, Z+19	; 0x13
     d3c:	94 89       	ldd	r25, Z+20	; 0x14
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	f9 01       	movw	r30, r18
     d44:	23 89       	ldd	r18, Z+19	; 0x13
     d46:	34 89       	ldd	r19, Z+20	; 0x14
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	42 2f       	mov	r20, r18
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	f9 01       	movw	r30, r18
     d54:	25 89       	ldd	r18, Z+21	; 0x15
     d56:	20 95       	com	r18
     d58:	24 23       	and	r18, r20
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	86 89       	ldd	r24, Z+22	; 0x16
     d66:	97 89       	ldd	r25, Z+23	; 0x17
     d68:	59 df       	rcall	.-334    	; 0xc1c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	8d e0       	ldi	r24, 0x0D	; 13
     d6e:	4a df       	rcall	.-364    	; 0xc04 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	8f 83       	std	Y+7, r24	; 0x07
     d74:	1f c0       	rjmp	.+62     	; 0xdb4 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 8d       	ldd	r24, Z+24	; 0x18
     d7e:	91 8d       	ldd	r25, Z+25	; 0x19
     d80:	4d df       	rcall	.-358    	; 0xc1c <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	95 95       	asr	r25
     d8a:	87 95       	ror	r24
     d8c:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	8d e0       	ldi	r24, 0x0D	; 13
     d92:	38 df       	rcall	.-400    	; 0xc04 <_Z10DebugPulsehh>
      if (rx_pin_read())
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	57 df       	rcall	.-338    	; 0xc48 <_ZN14SoftwareSerial11rx_pin_readEv>
     d9a:	98 2f       	mov	r25, r24
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	99 23       	and	r25, r25
     da0:	09 f4       	brne	.+2      	; 0xda4 <__vector_3+0x12c>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	88 23       	and	r24, r24
     da6:	19 f0       	breq	.+6      	; 0xdae <__vector_3+0x136>
        d |= 0x80;
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     dae:	8f 81       	ldd	r24, Y+7	; 0x07
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	8f 83       	std	Y+7, r24	; 0x07
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	88 23       	and	r24, r24
     db8:	f1 f6       	brne	.-68     	; 0xd76 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	fc 01       	movw	r30, r24
     dc0:	86 8d       	ldd	r24, Z+30	; 0x1e
     dc2:	82 70       	andi	r24, 0x02	; 2
     dc4:	88 23       	and	r24, r24
     dc6:	19 f0       	breq	.+6      	; 0xdce <__vector_3+0x156>
      d = ~d;
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	80 95       	com	r24
     dcc:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     dce:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	8f 73       	andi	r24, 0x3F	; 63
     dda:	90 78       	andi	r25, 0x80	; 128
     ddc:	99 23       	and	r25, r25
     dde:	24 f4       	brge	.+8      	; 0xde8 <__vector_3+0x170>
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	80 6c       	ori	r24, 0xC0	; 192
     de4:	9f 6f       	ori	r25, 0xFF	; 255
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     dea:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_headE>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	28 85       	ldd	r18, Y+8	; 0x08
     df2:	29 17       	cp	r18, r25
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__vector_3+0x180>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	88 23       	and	r24, r24
     dfa:	69 f0       	breq	.+26     	; 0xe16 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     dfc:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	85 55       	subi	r24, 0x55	; 85
     e06:	9d 4f       	sbci	r25, 0xFD	; 253
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     e0e:	88 85       	ldd	r24, Y+8	; 0x08
     e10:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	8b e0       	ldi	r24, 0x0B	; 11
     e1a:	f4 de       	rcall	.-536    	; 0xc04 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	fc 01       	movw	r30, r24
     e22:	26 8d       	ldd	r18, Z+30	; 0x1e
     e24:	21 60       	ori	r18, 0x01	; 1
     e26:	fc 01       	movw	r30, r24
     e28:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	fc 01       	movw	r30, r24
     e30:	82 8d       	ldd	r24, Z+26	; 0x1a
     e32:	93 8d       	ldd	r25, Z+27	; 0x1b
     e34:	f3 de       	rcall	.-538    	; 0xc1c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	8b e0       	ldi	r24, 0x0B	; 11
     e3a:	e4 de       	rcall	.-568    	; 0xc04 <_Z10DebugPulsehh>
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	9a 87       	std	Y+10, r25	; 0x0a
     e42:	89 87       	std	Y+9, r24	; 0x09
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     e48:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4a:	88 23       	and	r24, r24
     e4c:	a1 f0       	breq	.+40     	; 0xe76 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	fc 01       	movw	r30, r24
     e54:	83 89       	ldd	r24, Z+19	; 0x13
     e56:	94 89       	ldd	r25, Z+20	; 0x14
     e58:	29 85       	ldd	r18, Y+9	; 0x09
     e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5c:	f9 01       	movw	r30, r18
     e5e:	23 89       	ldd	r18, Z+19	; 0x13
     e60:	34 89       	ldd	r19, Z+20	; 0x14
     e62:	f9 01       	movw	r30, r18
     e64:	40 81       	ld	r20, Z
     e66:	29 85       	ldd	r18, Y+9	; 0x09
     e68:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6a:	f9 01       	movw	r30, r18
     e6c:	25 89       	ldd	r18, Z+21	; 0x15
     e6e:	24 2b       	or	r18, r20
     e70:	fc 01       	movw	r30, r24
     e72:	20 83       	st	Z, r18
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	fc 01       	movw	r30, r24
     e7c:	83 89       	ldd	r24, Z+19	; 0x13
     e7e:	94 89       	ldd	r25, Z+20	; 0x14
     e80:	29 85       	ldd	r18, Y+9	; 0x09
     e82:	3a 85       	ldd	r19, Y+10	; 0x0a
     e84:	f9 01       	movw	r30, r18
     e86:	23 89       	ldd	r18, Z+19	; 0x13
     e88:	34 89       	ldd	r19, Z+20	; 0x14
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	42 2f       	mov	r20, r18
     e90:	29 85       	ldd	r18, Y+9	; 0x09
     e92:	3a 85       	ldd	r19, Y+10	; 0x0a
     e94:	f9 01       	movw	r30, r18
     e96:	25 89       	ldd	r18, Z+21	; 0x15
     e98:	20 95       	com	r18
     e9a:	24 23       	and	r18, r20
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     ea0:	2b 96       	adiw	r28, 0x0b	; 11
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     ed4:	8f 92       	push	r8
     ed6:	af 92       	push	r10
     ed8:	cf 92       	push	r12
     eda:	ef 92       	push	r14
     edc:	0f 93       	push	r16
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	28 97       	sbiw	r28, 0x08	; 8
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6b 83       	std	Y+3, r22	; 0x03
     ef8:	4c 83       	std	Y+4, r20	; 0x04
     efa:	2d 83       	std	Y+5, r18	; 0x05
     efc:	0e 83       	std	Y+6, r16	; 0x06
     efe:	ef 82       	std	Y+7, r14	; 0x07
     f00:	c8 86       	std	Y+8, r12	; 0x08
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	6c dc       	rcall	.-1832   	; 0x7e0 <_ZN5PrintC1Ev>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	21 e7       	ldi	r18, 0x71	; 113
     f0e:	31 e0       	ldi	r19, 0x01	; 1
     f10:	fc 01       	movw	r30, r24
     f12:	31 83       	std	Z+1, r19	; 0x01
     f14:	20 83       	st	Z, r18
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	1f 92       	push	r1
     f1c:	1f 92       	push	r1
     f1e:	1f 92       	push	r1
     f20:	1f 92       	push	r1
     f22:	88 84       	ldd	r8, Y+8	; 0x08
     f24:	af 80       	ldd	r10, Y+7	; 0x07
     f26:	ce 80       	ldd	r12, Y+6	; 0x06
     f28:	ed 80       	ldd	r14, Y+5	; 0x05
     f2a:	0c 81       	ldd	r16, Y+4	; 0x04
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	4b 81       	ldd	r20, Y+3	; 0x03
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	12 d0       	rcall	.+36     	; 0xf58 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	28 96       	adiw	r28, 0x08	; 8
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	0f 91       	pop	r16
     f4e:	ef 90       	pop	r14
     f50:	cf 90       	pop	r12
     f52:	af 90       	pop	r10
     f54:	8f 90       	pop	r8
     f56:	08 95       	ret

00000f58 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     f58:	8f 92       	push	r8
     f5a:	af 92       	push	r10
     f5c:	cf 92       	push	r12
     f5e:	ef 92       	push	r14
     f60:	0f 93       	push	r16
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	2a 97       	sbiw	r28, 0x0a	; 10
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	6b 83       	std	Y+3, r22	; 0x03
     f7c:	4c 83       	std	Y+4, r20	; 0x04
     f7e:	2d 83       	std	Y+5, r18	; 0x05
     f80:	0e 83       	std	Y+6, r16	; 0x06
     f82:	ef 82       	std	Y+7, r14	; 0x07
     f84:	c8 86       	std	Y+8, r12	; 0x08
     f86:	a9 86       	std	Y+9, r10	; 0x09
     f88:	8a 86       	std	Y+10, r8	; 0x0a
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	fc 01       	movw	r30, r24
     f92:	24 83       	std	Z+4, r18	; 0x04
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	2d 81       	ldd	r18, Y+5	; 0x05
     f9a:	fc 01       	movw	r30, r24
     f9c:	25 83       	std	Z+5, r18	; 0x05
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	2e 81       	ldd	r18, Y+6	; 0x06
     fa4:	fc 01       	movw	r30, r24
     fa6:	26 83       	std	Z+6, r18	; 0x06
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	2f 81       	ldd	r18, Y+7	; 0x07
     fae:	fc 01       	movw	r30, r24
     fb0:	27 83       	std	Z+7, r18	; 0x07
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	28 85       	ldd	r18, Y+8	; 0x08
     fb8:	fc 01       	movw	r30, r24
     fba:	20 87       	std	Z+8, r18	; 0x08
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	29 85       	ldd	r18, Y+9	; 0x09
     fc2:	fc 01       	movw	r30, r24
     fc4:	21 87       	std	Z+9, r18	; 0x09
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	2a 85       	ldd	r18, Y+10	; 0x0a
     fcc:	fc 01       	movw	r30, r24
     fce:	22 87       	std	Z+10, r18	; 0x0a
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	2c 89       	ldd	r18, Y+20	; 0x14
     fd6:	fc 01       	movw	r30, r24
     fd8:	23 87       	std	Z+11, r18	; 0x0b
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	2d 89       	ldd	r18, Y+21	; 0x15
     fe0:	fc 01       	movw	r30, r24
     fe2:	24 87       	std	Z+12, r18	; 0x0c
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	2e 89       	ldd	r18, Y+22	; 0x16
     fea:	fc 01       	movw	r30, r24
     fec:	25 87       	std	Z+13, r18	; 0x0d
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	2f 89       	ldd	r18, Y+23	; 0x17
     ff4:	fc 01       	movw	r30, r24
     ff6:	26 87       	std	Z+14, r18	; 0x0e
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 23       	and	r24, r24
     ffc:	29 f0       	breq	.+10     	; 0x1008 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	fc 01       	movw	r30, r24
    1004:	17 86       	std	Z+15, r1	; 0x0f
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	20 e1       	ldi	r18, 0x10	; 16
    100e:	fc 01       	movw	r30, r24
    1010:	27 87       	std	Z+15, r18	; 0x0f
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	60 e1       	ldi	r22, 0x10	; 16
    101c:	0e d0       	rcall	.+28     	; 0x103a <_ZN13LiquidCrystal5beginEhhh>
    101e:	2a 96       	adiw	r28, 0x0a	; 10
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	0f 91       	pop	r16
    1030:	ef 90       	pop	r14
    1032:	cf 90       	pop	r12
    1034:	af 90       	pop	r10
    1036:	8f 90       	pop	r8
    1038:	08 95       	ret

0000103a <_ZN13LiquidCrystal5beginEhhh>:
    103a:	a7 e0       	ldi	r26, 0x07	; 7
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e3 e2       	ldi	r30, 0x23	; 35
    1040:	f8 e0       	ldi	r31, 0x08	; 8
    1042:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	6d 83       	std	Y+5, r22	; 0x05
    104c:	4e 83       	std	Y+6, r20	; 0x06
    104e:	2f 83       	std	Y+7, r18	; 0x07
    1050:	8e 81       	ldd	r24, Y+6	; 0x06
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	50 f0       	brcs	.+20     	; 0x106a <_ZN13LiquidCrystal5beginEhhh+0x30>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	fc 01       	movw	r30, r24
    105c:	87 85       	ldd	r24, Z+15	; 0x0f
    105e:	28 2f       	mov	r18, r24
    1060:	28 60       	ori	r18, 0x08	; 8
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	fc 01       	movw	r30, r24
    1068:	27 87       	std	Z+15, r18	; 0x0f
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	2e 81       	ldd	r18, Y+6	; 0x06
    1070:	fc 01       	movw	r30, r24
    1072:	23 8b       	std	Z+19, r18	; 0x13
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	ac 01       	movw	r20, r24
    107c:	40 5c       	subi	r20, 0xC0	; 192
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	8a 01       	movw	r16, r20
    108c:	40 e4       	ldi	r20, 0x40	; 64
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	e7 d0       	rcall	.+462    	; 0x1264 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	88 23       	and	r24, r24
    109a:	69 f0       	breq	.+26     	; 0x10b6 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	51 f4       	brne	.+20     	; 0x10b6 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	fc 01       	movw	r30, r24
    10a8:	87 85       	ldd	r24, Z+15	; 0x0f
    10aa:	28 2f       	mov	r18, r24
    10ac:	24 60       	ori	r18, 0x04	; 4
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	27 87       	std	Z+15, r18	; 0x0f
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	fc 01       	movw	r30, r24
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	fc 01       	movw	r30, r24
    10ca:	85 81       	ldd	r24, Z+5	; 0x05
    10cc:	8f 3f       	cpi	r24, 0xFF	; 255
    10ce:	39 f0       	breq	.+14     	; 0x10de <_ZN13LiquidCrystal5beginEhhh+0xa4>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	fc 01       	movw	r30, r24
    10d6:	85 81       	ldd	r24, Z+5	; 0x05
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	fc 01       	movw	r30, r24
    10e4:	86 81       	ldd	r24, Z+6	; 0x06
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    10ec:	1a 82       	std	Y+2, r1	; 0x02
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <_ZN13LiquidCrystal5beginEhhh+0xda>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	07 96       	adiw	r24, 0x07	; 7
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	fc 01       	movw	r30, r24
    111a:	87 85       	ldd	r24, Z+15	; 0x0f
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	80 71       	andi	r24, 0x10	; 16
    1122:	99 27       	eor	r25, r25
    1124:	89 2b       	or	r24, r25
    1126:	19 f0       	breq	.+6      	; 0x112e <_ZN13LiquidCrystal5beginEhhh+0xf4>
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <_ZN13LiquidCrystal5beginEhhh+0xf8>
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	29 81       	ldd	r18, Y+1	; 0x01
    1134:	3a 81       	ldd	r19, Y+2	; 0x02
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	dc f2       	brlt	.-74     	; 0x10f2 <_ZN13LiquidCrystal5beginEhhh+0xb8>
    113c:	80 e5       	ldi	r24, 0x50	; 80
    113e:	93 ec       	ldi	r25, 0xC3	; 195
    1140:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	fc 01       	movw	r30, r24
    114a:	84 81       	ldd	r24, Z+4	; 0x04
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	fc 01       	movw	r30, r24
    1158:	86 81       	ldd	r24, Z+6	; 0x06
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	fc 01       	movw	r30, r24
    1166:	85 81       	ldd	r24, Z+5	; 0x05
    1168:	8f 3f       	cpi	r24, 0xFF	; 255
    116a:	39 f0       	breq	.+14     	; 0x117a <_ZN13LiquidCrystal5beginEhhh+0x140>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	fc 01       	movw	r30, r24
    1172:	85 81       	ldd	r24, Z+5	; 0x05
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	fc 01       	movw	r30, r24
    1180:	87 85       	ldd	r24, Z+15	; 0x0f
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	80 71       	andi	r24, 0x10	; 16
    1188:	99 27       	eor	r25, r25
    118a:	89 2b       	or	r24, r25
    118c:	e9 f4       	brne	.+58     	; 0x11c8 <_ZN13LiquidCrystal5beginEhhh+0x18e>
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	63 e0       	ldi	r22, 0x03	; 3
    1194:	91 d1       	rcall	.+802    	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
    1196:	84 e9       	ldi	r24, 0x94	; 148
    1198:	91 e1       	ldi	r25, 0x11	; 17
    119a:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	63 e0       	ldi	r22, 0x03	; 3
    11a4:	89 d1       	rcall	.+786    	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
    11a6:	84 e9       	ldi	r24, 0x94	; 148
    11a8:	91 e1       	ldi	r25, 0x11	; 17
    11aa:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	63 e0       	ldi	r22, 0x03	; 3
    11b4:	81 d1       	rcall	.+770    	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
    11b6:	86 e9       	ldi	r24, 0x96	; 150
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	79 d1       	rcall	.+754    	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
    11c6:	26 c0       	rjmp	.+76     	; 0x1214 <_ZN13LiquidCrystal5beginEhhh+0x1da>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	87 85       	ldd	r24, Z+15	; 0x0f
    11d0:	28 2f       	mov	r18, r24
    11d2:	20 62       	ori	r18, 0x20	; 32
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	62 2f       	mov	r22, r18
    11da:	d6 d0       	rcall	.+428    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    11dc:	84 e9       	ldi	r24, 0x94	; 148
    11de:	91 e1       	ldi	r25, 0x11	; 17
    11e0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	fc 01       	movw	r30, r24
    11ea:	87 85       	ldd	r24, Z+15	; 0x0f
    11ec:	28 2f       	mov	r18, r24
    11ee:	20 62       	ori	r18, 0x20	; 32
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	62 2f       	mov	r22, r18
    11f6:	c8 d0       	rcall	.+400    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    11f8:	86 e9       	ldi	r24, 0x96	; 150
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	fc 01       	movw	r30, r24
    1206:	87 85       	ldd	r24, Z+15	; 0x0f
    1208:	28 2f       	mov	r18, r24
    120a:	20 62       	ori	r18, 0x20	; 32
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	62 2f       	mov	r22, r18
    1212:	ba d0       	rcall	.+372    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	87 85       	ldd	r24, Z+15	; 0x0f
    121c:	28 2f       	mov	r18, r24
    121e:	20 62       	ori	r18, 0x20	; 32
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	62 2f       	mov	r22, r18
    1226:	b0 d0       	rcall	.+352    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	24 e0       	ldi	r18, 0x04	; 4
    122e:	fc 01       	movw	r30, r24
    1230:	20 8b       	std	Z+16, r18	; 0x10
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	88 d0       	rcall	.+272    	; 0x1348 <_ZN13LiquidCrystal7displayEv>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	3b d0       	rcall	.+118    	; 0x12b4 <_ZN13LiquidCrystal5clearEv>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	22 e0       	ldi	r18, 0x02	; 2
    1244:	fc 01       	movw	r30, r24
    1246:	21 8b       	std	Z+17, r18	; 0x11
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	fc 01       	movw	r30, r24
    124e:	81 89       	ldd	r24, Z+17	; 0x11
    1250:	28 2f       	mov	r18, r24
    1252:	24 60       	ori	r18, 0x04	; 4
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	62 2f       	mov	r22, r18
    125a:	96 d0       	rcall	.+300    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    125c:	27 96       	adiw	r28, 0x07	; 7
    125e:	e4 e0       	ldi	r30, 0x04	; 4
    1260:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

00001264 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    1264:	aa e0       	ldi	r26, 0x0A	; 10
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f9 e0       	ldi	r31, 0x09	; 9
    126c:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	7c 83       	std	Y+4, r23	; 0x04
    1276:	6b 83       	std	Y+3, r22	; 0x03
    1278:	5e 83       	std	Y+6, r21	; 0x06
    127a:	4d 83       	std	Y+5, r20	; 0x05
    127c:	38 87       	std	Y+8, r19	; 0x08
    127e:	2f 83       	std	Y+7, r18	; 0x07
    1280:	1a 87       	std	Y+10, r17	; 0x0a
    1282:	09 87       	std	Y+9, r16	; 0x09
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	fc 01       	movw	r30, r24
    128c:	24 8b       	std	Z+20, r18	; 0x14
    128e:	2d 81       	ldd	r18, Y+5	; 0x05
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	fc 01       	movw	r30, r24
    1296:	25 8b       	std	Z+21, r18	; 0x15
    1298:	2f 81       	ldd	r18, Y+7	; 0x07
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	fc 01       	movw	r30, r24
    12a0:	26 8b       	std	Z+22, r18	; 0x16
    12a2:	29 85       	ldd	r18, Y+9	; 0x09
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	fc 01       	movw	r30, r24
    12aa:	27 8b       	std	Z+23, r18	; 0x17
    12ac:	2a 96       	adiw	r28, 0x0a	; 10
    12ae:	e4 e0       	ldi	r30, 0x04	; 4
    12b0:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

000012b4 <_ZN13LiquidCrystal5clearEv>:
    12b4:	a2 e0       	ldi	r26, 0x02	; 2
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e0 e6       	ldi	r30, 0x60	; 96
    12ba:	f9 e0       	ldi	r31, 0x09	; 9
    12bc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	5e d0       	rcall	.+188    	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    12cc:	80 ed       	ldi	r24, 0xD0	; 208
    12ce:	97 e0       	ldi	r25, 0x07	; 7
    12d0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
    12d4:	22 96       	adiw	r28, 0x02	; 2
    12d6:	e2 e0       	ldi	r30, 0x02	; 2
    12d8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000012dc <_ZN13LiquidCrystal9setCursorEhh>:
    12dc:	a6 e0       	ldi	r26, 0x06	; 6
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e7       	ldi	r30, 0x74	; 116
    12e2:	f9 e0       	ldi	r31, 0x09	; 9
    12e4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	6d 83       	std	Y+5, r22	; 0x05
    12ee:	4e 83       	std	Y+6, r20	; 0x06
    12f0:	84 e0       	ldi	r24, 0x04	; 4
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	10 f0       	brcs	.+4      	; 0x1302 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	8e 83       	std	Y+6, r24	; 0x06
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	fc 01       	movw	r30, r24
    1308:	93 89       	ldd	r25, Z+19	; 0x13
    130a:	8e 81       	ldd	r24, Y+6	; 0x06
    130c:	89 17       	cp	r24, r25
    130e:	30 f0       	brcs	.+12     	; 0x131c <_ZN13LiquidCrystal9setCursorEhh+0x40>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	fc 01       	movw	r30, r24
    1316:	83 89       	ldd	r24, Z+19	; 0x13
    1318:	81 50       	subi	r24, 0x01	; 1
    131a:	8e 83       	std	Y+6, r24	; 0x06
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	44 96       	adiw	r24, 0x14	; 20
    132c:	fc 01       	movw	r30, r24
    132e:	90 81       	ld	r25, Z
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	89 0f       	add	r24, r25
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	28 2f       	mov	r18, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	62 2f       	mov	r22, r18
    133e:	24 d0       	rcall	.+72     	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    1340:	26 96       	adiw	r28, 0x06	; 6
    1342:	e2 e0       	ldi	r30, 0x02	; 2
    1344:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001348 <_ZN13LiquidCrystal7displayEv>:
    1348:	a2 e0       	ldi	r26, 0x02	; 2
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ea ea       	ldi	r30, 0xAA	; 170
    134e:	f9 e0       	ldi	r31, 0x09	; 9
    1350:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	fc 01       	movw	r30, r24
    135e:	80 89       	ldd	r24, Z+16	; 0x10
    1360:	28 2f       	mov	r18, r24
    1362:	24 60       	ori	r18, 0x04	; 4
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	fc 01       	movw	r30, r24
    136a:	20 8b       	std	Z+16, r18	; 0x10
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	fc 01       	movw	r30, r24
    1372:	80 89       	ldd	r24, Z+16	; 0x10
    1374:	28 2f       	mov	r18, r24
    1376:	28 60       	ori	r18, 0x08	; 8
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	62 2f       	mov	r22, r18
    137e:	04 d0       	rcall	.+8      	; 0x1388 <_ZN13LiquidCrystal7commandEh>
    1380:	22 96       	adiw	r28, 0x02	; 2
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001388 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    1388:	a3 e0       	ldi	r26, 0x03	; 3
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	6b 81       	ldd	r22, Y+3	; 0x03
    13a2:	18 d0       	rcall	.+48     	; 0x13d4 <_ZN13LiquidCrystal4sendEhh>
}
    13a4:	23 96       	adiw	r28, 0x03	; 3
    13a6:	e2 e0       	ldi	r30, 0x02	; 2
    13a8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000013ac <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    13ac:	a3 e0       	ldi	r26, 0x03	; 3
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ec ed       	ldi	r30, 0xDC	; 220
    13b2:	f9 e0       	ldi	r31, 0x09	; 9
    13b4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	6b 81       	ldd	r22, Y+3	; 0x03
    13c6:	06 d0       	rcall	.+12     	; 0x13d4 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
}
    13cc:	23 96       	adiw	r28, 0x03	; 3
    13ce:	e2 e0       	ldi	r30, 0x02	; 2
    13d0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000013d4 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    13d4:	a4 e0       	ldi	r26, 0x04	; 4
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e0 ef       	ldi	r30, 0xF0	; 240
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	fc 01       	movw	r30, r24
    13ee:	84 81       	ldd	r24, Z+4	; 0x04
    13f0:	6c 81       	ldd	r22, Y+4	; 0x04
    13f2:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	fc 01       	movw	r30, r24
    13fc:	85 81       	ldd	r24, Z+5	; 0x05
    13fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1400:	39 f0       	breq	.+14     	; 0x1410 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	fc 01       	movw	r30, r24
    1408:	85 81       	ldd	r24, Z+5	; 0x05
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	fc 01       	movw	r30, r24
    1416:	87 85       	ldd	r24, Z+15	; 0x0f
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	80 71       	andi	r24, 0x10	; 16
    141e:	99 27       	eor	r25, r25
    1420:	89 2b       	or	r24, r25
    1422:	29 f0       	breq	.+10     	; 0x142e <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	6b 81       	ldd	r22, Y+3	; 0x03
    142a:	79 d0       	rcall	.+242    	; 0x151e <_ZN13LiquidCrystal10write8bitsEh>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	95 95       	asr	r25
    1436:	87 95       	ror	r24
    1438:	95 95       	asr	r25
    143a:	87 95       	ror	r24
    143c:	95 95       	asr	r25
    143e:	87 95       	ror	r24
    1440:	95 95       	asr	r25
    1442:	87 95       	ror	r24
    1444:	28 2f       	mov	r18, r24
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	62 2f       	mov	r22, r18
    144c:	35 d0       	rcall	.+106    	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	6b 81       	ldd	r22, Y+3	; 0x03
    1454:	31 d0       	rcall	.+98     	; 0x14b8 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    1456:	24 96       	adiw	r28, 0x04	; 4
    1458:	e2 e0       	ldi	r30, 0x02	; 2
    145a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000145e <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    145e:	a2 e0       	ldi	r26, 0x02	; 2
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	fc 01       	movw	r30, r24
    1474:	86 81       	ldd	r24, Z+6	; 0x06
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
  delayMicroseconds(1);    
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	fc 01       	movw	r30, r24
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	fc 01       	movw	r30, r24
    14a0:	86 81       	ldd	r24, Z+6	; 0x06
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    14a8:	84 e6       	ldi	r24, 0x64	; 100
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 65 2b 	call	0x56ca	; 0x56ca <delayMicroseconds>
}
    14b0:	22 96       	adiw	r28, 0x02	; 2
    14b2:	e2 e0       	ldi	r30, 0x02	; 2
    14b4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000014b8 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    14b8:	a5 e0       	ldi	r26, 0x05	; 5
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e6       	ldi	r30, 0x62	; 98
    14be:	fa e0       	ldi	r31, 0x0A	; 10
    14c0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    14c4:	9c 83       	std	Y+4, r25	; 0x04
    14c6:	8b 83       	std	Y+3, r24	; 0x03
    14c8:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    14ca:	1a 82       	std	Y+2, r1	; 0x02
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	1c c0       	rjmp	.+56     	; 0x1508 <_ZN13LiquidCrystal10write4bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	09 80       	ldd	r0, Y+1	; 0x01
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_ZN13LiquidCrystal10write4bitsEh+0x26>
    14da:	95 95       	asr	r25
    14dc:	87 95       	ror	r24
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <_ZN13LiquidCrystal10write4bitsEh+0x22>
    14e2:	48 2f       	mov	r20, r24
    14e4:	41 70       	andi	r20, 0x01	; 1
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	82 0f       	add	r24, r18
    14f0:	93 1f       	adc	r25, r19
    14f2:	07 96       	adiw	r24, 0x07	; 7
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	64 2f       	mov	r22, r20
    14fa:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	04 97       	sbiw	r24, 0x04	; 4
    150e:	04 f3       	brlt	.-64     	; 0x14d0 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	a4 df       	rcall	.-184    	; 0x145e <_ZN13LiquidCrystal11pulseEnableEv>
}
    1516:	25 96       	adiw	r28, 0x05	; 5
    1518:	e2 e0       	ldi	r30, 0x02	; 2
    151a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000151e <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    151e:	a5 e0       	ldi	r26, 0x05	; 5
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e9       	ldi	r30, 0x95	; 149
    1524:	fa e0       	ldi	r31, 0x0A	; 10
    1526:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    1530:	1a 82       	std	Y+2, r1	; 0x02
    1532:	19 82       	std	Y+1, r1	; 0x01
    1534:	1c c0       	rjmp	.+56     	; 0x156e <_ZN13LiquidCrystal10write8bitsEh+0x50>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	09 80       	ldd	r0, Y+1	; 0x01
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <_ZN13LiquidCrystal10write8bitsEh+0x26>
    1540:	95 95       	asr	r25
    1542:	87 95       	ror	r24
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1548:	48 2f       	mov	r20, r24
    154a:	41 70       	andi	r20, 0x01	; 1
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	82 0f       	add	r24, r18
    1556:	93 1f       	adc	r25, r19
    1558:	07 96       	adiw	r24, 0x07	; 7
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
    155e:	64 2f       	mov	r22, r20
    1560:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	08 97       	sbiw	r24, 0x08	; 8
    1574:	04 f3       	brlt	.-64     	; 0x1536 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	71 df       	rcall	.-286    	; 0x145e <_ZN13LiquidCrystal11pulseEnableEv>
}
    157c:	25 96       	adiw	r28, 0x05	; 5
    157e:	e2 e0       	ldi	r30, 0x02	; 2
    1580:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001584 <_ZNK4erom6Access4readEj>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1584:	a4 e0       	ldi	r26, 0x04	; 4
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	7c 83       	std	Y+4, r23	; 0x04
    1596:	6b 83       	std	Y+3, r22	; 0x03
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	b9 01       	movw	r22, r18
    15a2:	04 d0       	rcall	.+8      	; 0x15ac <_ZNK4erom6Access9read_byteEj>
    15a4:	24 96       	adiw	r28, 0x04	; 4
    15a6:	e2 e0       	ldi	r30, 0x02	; 2
    15a8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000015ac <_ZNK4erom6Access9read_byteEj>:
    15ac:	a4 e0       	ldi	r26, 0x04	; 4
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ec ed       	ldi	r30, 0xDC	; 220
    15b2:	fa e0       	ldi	r31, 0x0A	; 10
    15b4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	7c 83       	std	Y+4, r23	; 0x04
    15be:	6b 83       	std	Y+3, r22	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	9c 01       	movw	r18, r24
    15c6:	2f 5f       	subi	r18, 0xFF	; 255
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	b9 01       	movw	r22, r18
    15d0:	50 d0       	rcall	.+160    	; 0x1672 <_ZNK4erom6Access8in_rangeEj>
    15d2:	88 23       	and	r24, r24
    15d4:	59 f0       	breq	.+22     	; 0x15ec <_ZNK4erom6Access9read_byteEj+0x40>
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	6b d0       	rcall	.+214    	; 0x16b2 <_ZNK4erom6Access4baseEv>
    15dc:	9c 01       	movw	r18, r24
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <eeprom_read_byte>
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <_ZNK4erom6Access9read_byteEj+0x42>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	24 96       	adiw	r28, 0x04	; 4
    15f0:	e2 e0       	ldi	r30, 0x02	; 2
    15f2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000015f6 <_ZNK4erom6Access5writeEjh>:
    15f6:	a5 e0       	ldi	r26, 0x05	; 5
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	7c 83       	std	Y+4, r23	; 0x04
    1608:	6b 83       	std	Y+3, r22	; 0x03
    160a:	4d 83       	std	Y+5, r20	; 0x05
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	4d 81       	ldd	r20, Y+5	; 0x05
    1616:	b9 01       	movw	r22, r18
    1618:	04 d0       	rcall	.+8      	; 0x1622 <_ZNK4erom6Access10write_byteEjh>
    161a:	25 96       	adiw	r28, 0x05	; 5
    161c:	e2 e0       	ldi	r30, 0x02	; 2
    161e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001622 <_ZNK4erom6Access10write_byteEjh>:
    1622:	a5 e0       	ldi	r26, 0x05	; 5
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e1       	ldi	r30, 0x17	; 23
    1628:	fb e0       	ldi	r31, 0x0B	; 11
    162a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	7c 83       	std	Y+4, r23	; 0x04
    1634:	6b 83       	std	Y+3, r22	; 0x03
    1636:	4d 83       	std	Y+5, r20	; 0x05
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	9c 01       	movw	r18, r24
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	b9 01       	movw	r22, r18
    1648:	14 d0       	rcall	.+40     	; 0x1672 <_ZNK4erom6Access8in_rangeEj>
    164a:	88 23       	and	r24, r24
    164c:	69 f0       	breq	.+26     	; 0x1668 <_ZNK4erom6Access10write_byteEjh+0x46>
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	2f d0       	rcall	.+94     	; 0x16b2 <_ZNK4erom6Access4baseEv>
    1654:	9c 01       	movw	r18, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	82 0f       	add	r24, r18
    165c:	93 1f       	adc	r25, r19
    165e:	6d 81       	ldd	r22, Y+5	; 0x05
    1660:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <eeprom_write_byte>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	01 c0       	rjmp	.+2      	; 0x166a <_ZNK4erom6Access10write_byteEjh+0x48>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	25 96       	adiw	r28, 0x05	; 5
    166c:	e2 e0       	ldi	r30, 0x02	; 2
    166e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001672 <_ZNK4erom6Access8in_rangeEj>:
    1672:	a4 e0       	ldi	r26, 0x04	; 4
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e3       	ldi	r30, 0x3F	; 63
    1678:	fb e0       	ldi	r31, 0x0B	; 11
    167a:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	7c 83       	std	Y+4, r23	; 0x04
    1684:	6b 83       	std	Y+3, r22	; 0x03
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	13 d0       	rcall	.+38     	; 0x16b2 <_ZNK4erom6Access4baseEv>
    168c:	9c 01       	movw	r18, r24
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	89 01       	movw	r16, r18
    1694:	08 0f       	add	r16, r24
    1696:	19 1f       	adc	r17, r25
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	1b d0       	rcall	.+54     	; 0x16d4 <_ZNK4erom6Access11memory_sizeEv>
    169e:	21 e0       	ldi	r18, 0x01	; 1
    16a0:	08 17       	cp	r16, r24
    16a2:	19 07       	cpc	r17, r25
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <_ZNK4erom6Access8in_rangeEj+0x36>
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	82 2f       	mov	r24, r18
    16aa:	24 96       	adiw	r28, 0x04	; 4
    16ac:	e4 e0       	ldi	r30, 0x04	; 4
    16ae:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

000016b2 <_ZNK4erom6Access4baseEv>:
    16b2:	a2 e0       	ldi	r26, 0x02	; 2
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ef e5       	ldi	r30, 0x5F	; 95
    16b8:	fb e0       	ldi	r31, 0x0B	; 11
    16ba:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	fc 01       	movw	r30, r24
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	22 96       	adiw	r28, 0x02	; 2
    16ce:	e2 e0       	ldi	r30, 0x02	; 2
    16d0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000016d4 <_ZNK4erom6Access11memory_sizeEv>:
    16d4:	a2 e0       	ldi	r26, 0x02	; 2
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e0 e7       	ldi	r30, 0x70	; 112
    16da:	fb e0       	ldi	r31, 0x0B	; 11
    16dc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	fc 01       	movw	r30, r24
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	22 96       	adiw	r28, 0x02	; 2
    16f0:	e2 e0       	ldi	r30, 0x02	; 2
    16f2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000016f6 <_ZN4erom6Access8instanceEv>:
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1702:	8d ee       	ldi	r24, 0xED	; 237
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	fc 01       	movw	r30, r24
    1708:	80 81       	ld	r24, Z
    170a:	88 23       	and	r24, r24
    170c:	51 f4       	brne	.+20     	; 0x1722 <_ZN4erom6Access8instanceEv+0x2c>
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	87 ef       	ldi	r24, 0xF7	; 247
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	7b d0       	rcall	.+246    	; 0x180e <_ZN4erom6AccessC1Ej>
    1718:	8d ee       	ldi	r24, 0xED	; 237
    171a:	92 e0       	ldi	r25, 0x02	; 2
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
    1722:	87 ef       	ldi	r24, 0xF7	; 247
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	e2 e0       	ldi	r30, 0x02	; 2
    1728:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000172c <_ZN4erom7Storage6OnLoadEv>:
    172c:	a2 e0       	ldi	r26, 0x02	; 2
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ec e9       	ldi	r30, 0x9C	; 156
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	22 96       	adiw	r28, 0x02	; 2
    173e:	e2 e0       	ldi	r30, 0x02	; 2
    1740:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001744 <_ZN4erom7Storage6OnSaveEv>:
    1744:	a2 e0       	ldi	r26, 0x02	; 2
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 ea       	ldi	r30, 0xA8	; 168
    174a:	fb e0       	ldi	r31, 0x0B	; 11
    174c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	22 96       	adiw	r28, 0x02	; 2
    1756:	e2 e0       	ldi	r30, 0x02	; 2
    1758:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000175c <_ZN4erom7Storage7OnClearEv>:
    175c:	a2 e0       	ldi	r26, 0x02	; 2
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e4 eb       	ldi	r30, 0xB4	; 180
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	22 96       	adiw	r28, 0x02	; 2
    176e:	e2 e0       	ldi	r30, 0x02	; 2
    1770:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001774 <_ZN4erom7StorageC1Ev>:
    1774:	a2 e0       	ldi	r26, 0x02	; 2
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 ec       	ldi	r30, 0xC0	; 192
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	29 e7       	ldi	r18, 0x79	; 121
    178a:	31 e0       	ldi	r19, 0x01	; 1
    178c:	fc 01       	movw	r30, r24
    178e:	31 83       	std	Z+1, r19	; 0x01
    1790:	20 83       	st	Z, r18
    1792:	b1 df       	rcall	.-158    	; 0x16f6 <_ZN4erom6Access8instanceEv>
    1794:	9c 01       	movw	r18, r24
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	fc 01       	movw	r30, r24
    179c:	33 83       	std	Z+3, r19	; 0x03
    179e:	22 83       	std	Z+2, r18	; 0x02
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	fc 01       	movw	r30, r24
    17a6:	15 82       	std	Z+5, r1	; 0x05
    17a8:	14 82       	std	Z+4, r1	; 0x04
    17aa:	22 96       	adiw	r28, 0x02	; 2
    17ac:	e2 e0       	ldi	r30, 0x02	; 2
    17ae:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000017b2 <_ZN4erom7StorageD1Ev>:
    17b2:	a2 e0       	ldi	r26, 0x02	; 2
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	ef ed       	ldi	r30, 0xDF	; 223
    17b8:	fb e0       	ldi	r31, 0x0B	; 11
    17ba:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	29 e7       	ldi	r18, 0x79	; 121
    17c8:	31 e0       	ldi	r19, 0x01	; 1
    17ca:	fc 01       	movw	r30, r24
    17cc:	31 83       	std	Z+1, r19	; 0x01
    17ce:	20 83       	st	Z, r18
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	89 2b       	or	r24, r25
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <_ZN4erom7StorageD1Ev+0x2e>
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    17e0:	22 96       	adiw	r28, 0x02	; 2
    17e2:	e2 e0       	ldi	r30, 0x02	; 2
    17e4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000017e8 <_ZN4erom7StorageD0Ev>:
    17e8:	a2 e0       	ldi	r26, 0x02	; 2
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ea ef       	ldi	r30, 0xFA	; 250
    17ee:	fb e0       	ldi	r31, 0x0B	; 11
    17f0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	9a 81       	ldd	r25, Y+2	; 0x02
    17fc:	da df       	rcall	.-76     	; 0x17b2 <_ZN4erom7StorageD1Ev>
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    1806:	22 96       	adiw	r28, 0x02	; 2
    1808:	e2 e0       	ldi	r30, 0x02	; 2
    180a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000180e <_ZN4erom6AccessC1Ej>:
    180e:	a4 e0       	ldi	r26, 0x04	; 4
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ed e0       	ldi	r30, 0x0D	; 13
    1814:	fc e0       	ldi	r31, 0x0C	; 12
    1816:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	7c 83       	std	Y+4, r23	; 0x04
    1820:	6b 83       	std	Y+3, r22	; 0x03
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	fc 01       	movw	r30, r24
    182c:	31 83       	std	Z+1, r19	; 0x01
    182e:	20 83       	st	Z, r18
    1830:	0a d0       	rcall	.+20     	; 0x1846 <_ZN4erom6Access18device_memory_sizeEv>
    1832:	9c 01       	movw	r18, r24
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	fc 01       	movw	r30, r24
    183a:	33 83       	std	Z+3, r19	; 0x03
    183c:	22 83       	std	Z+2, r18	; 0x02
    183e:	24 96       	adiw	r28, 0x04	; 4
    1840:	e2 e0       	ldi	r30, 0x02	; 2
    1842:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001846 <_ZN4erom6Access18device_memory_sizeEv>:
    1846:	a0 e0       	ldi	r26, 0x00	; 0
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e9 e2       	ldi	r30, 0x29	; 41
    184c:	fc e0       	ldi	r31, 0x0C	; 12
    184e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	94 e0       	ldi	r25, 0x04	; 4
    1856:	e2 e0       	ldi	r30, 0x02	; 2
    1858:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000185c <_ZNK4erom6Access10read_blockIdEEbjRT_>:
    185c:	a6 e0       	ldi	r26, 0x06	; 6
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	7c 83       	std	Y+4, r23	; 0x04
    186e:	6b 83       	std	Y+3, r22	; 0x03
    1870:	5e 83       	std	Y+6, r21	; 0x06
    1872:	4d 83       	std	Y+5, r20	; 0x05
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	9c 01       	movw	r18, r24
    187a:	2c 5f       	subi	r18, 0xFC	; 252
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	b9 01       	movw	r22, r18
    1884:	f6 de       	rcall	.-532    	; 0x1672 <_ZNK4erom6Access8in_rangeEj>
    1886:	98 2f       	mov	r25, r24
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 27       	eor	r24, r25
    188c:	88 23       	and	r24, r24
    188e:	11 f0       	breq	.+4      	; 0x1894 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x38>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <_ZNK4erom6Access10read_blockIdEEbjRT_+0x4a>
    1894:	4d 81       	ldd	r20, Y+5	; 0x05
    1896:	5e 81       	ldd	r21, Y+6	; 0x06
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	b9 01       	movw	r22, r18
    18a2:	05 d0       	rcall	.+10     	; 0x18ae <_ZNK4erom6Access11_read_blockIdEEvjRT_>
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	26 96       	adiw	r28, 0x06	; 6
    18a8:	e2 e0       	ldi	r30, 0x02	; 2
    18aa:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000018ae <_ZNK4erom6Access11_read_blockIdEEvjRT_>:
    18ae:	a6 e0       	ldi	r26, 0x06	; 6
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e5       	ldi	r30, 0x5D	; 93
    18b4:	fc e0       	ldi	r31, 0x0C	; 12
    18b6:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	7c 83       	std	Y+4, r23	; 0x04
    18c0:	6b 83       	std	Y+3, r22	; 0x03
    18c2:	5e 83       	std	Y+6, r21	; 0x06
    18c4:	4d 83       	std	Y+5, r20	; 0x05
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	f3 de       	rcall	.-538    	; 0x16b2 <_ZNK4erom6Access4baseEv>
    18cc:	9c 01       	movw	r18, r24
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	9c 01       	movw	r18, r24
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	44 e0       	ldi	r20, 0x04	; 4
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	b9 01       	movw	r22, r18
    18e2:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <eeprom_read_block>
    18e6:	26 96       	adiw	r28, 0x06	; 6
    18e8:	e2 e0       	ldi	r30, 0x02	; 2
    18ea:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000018ee <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    18ee:	a4 e0       	ldi	r26, 0x04	; 4
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ed e7       	ldi	r30, 0x7D	; 125
    18f4:	fc e0       	ldi	r31, 0x0C	; 12
    18f6:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	7c 83       	std	Y+4, r23	; 0x04
    1900:	6b 83       	std	Y+3, r22	; 0x03
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	49 f4       	brne	.+18     	; 0x191c <_Z41__static_initialization_and_destruction_0ii+0x2e>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	29 f4       	brne	.+10     	; 0x191c <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    1912:	f1 de       	rcall	.-542    	; 0x16f6 <_ZN4erom6Access8instanceEv>
    1914:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <_ZN4erom6accessE+0x1>
    1918:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    191c:	24 96       	adiw	r28, 0x04	; 4
    191e:	e2 e0       	ldi	r30, 0x02	; 2
    1920:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001924 <_GLOBAL__sub_I__ZN4erom6accessE>:
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e9       	ldi	r30, 0x98	; 152
    192a:	fc e0       	ldi	r31, 0x0C	; 12
    192c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1930:	6f ef       	ldi	r22, 0xFF	; 255
    1932:	7f ef       	ldi	r23, 0xFF	; 255
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	da df       	rcall	.-76     	; 0x18ee <_Z41__static_initialization_and_destruction_0ii>
    193a:	e2 e0       	ldi	r30, 0x02	; 2
    193c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001940 <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e6 ea       	ldi	r30, 0xA6	; 166
    1946:	fc e0       	ldi	r31, 0x0C	; 12
    1948:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    194c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	e2 e0       	ldi	r30, 0x02	; 2
    195a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000195e <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    195e:	a8 e0       	ldi	r26, 0x08	; 8
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 eb       	ldi	r30, 0xB5	; 181
    1964:	fc e0       	ldi	r31, 0x0C	; 12
    1966:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    196a:	98 87       	std	Y+8, r25	; 0x08
    196c:	8f 83       	std	Y+7, r24	; 0x07
    196e:	8f 81       	ldd	r24, Y+7	; 0x07
    1970:	98 85       	ldd	r25, Y+8	; 0x08
    1972:	27 e8       	ldi	r18, 0x87	; 135
    1974:	31 e0       	ldi	r19, 0x01	; 1
    1976:	fc 01       	movw	r30, r24
    1978:	31 83       	std	Z+1, r19	; 0x01
    197a:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    197c:	e1 df       	rcall	.-62     	; 0x1940 <_ZL7elapsedv>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	9c 83       	std	Y+4, r25	; 0x04
    1986:	ad 83       	std	Y+5, r26	; 0x05
    1988:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    198a:	1a 82       	std	Y+2, r1	; 0x02
    198c:	19 82       	std	Y+1, r1	; 0x01
    198e:	3d c0       	rjmp	.+122    	; 0x1a0a <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    1990:	2f 81       	ldd	r18, Y+7	; 0x07
    1992:	38 85       	ldd	r19, Y+8	; 0x08
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	82 57       	subi	r24, 0x72	; 114
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	fc 01       	movw	r30, r24
    19a2:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    19a4:	2f 81       	ldd	r18, Y+7	; 0x07
    19a6:	38 85       	ldd	r19, Y+8	; 0x08
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	45 96       	adiw	r24, 0x15	; 21
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	fc 01       	movw	r30, r24
    19b8:	11 82       	std	Z+1, r1	; 0x01
    19ba:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    19bc:	2f 81       	ldd	r18, Y+7	; 0x07
    19be:	38 85       	ldd	r19, Y+8	; 0x08
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	9c 01       	movw	r18, r24
    19d2:	2e 5f       	subi	r18, 0xFE	; 254
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	ad 81       	ldd	r26, Y+5	; 0x05
    19dc:	be 81       	ldd	r27, Y+6	; 0x06
    19de:	f9 01       	movw	r30, r18
    19e0:	80 83       	st	Z, r24
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    19e8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ea:	38 85       	ldd	r19, Y+8	; 0x08
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	cd 96       	adiw	r24, 0x3d	; 61
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	fc 01       	movw	r30, r24
    19fc:	11 82       	std	Z+1, r1	; 0x01
    19fe:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a10:	0c f4       	brge	.+2      	; 0x1a14 <_ZN11SimpleTimerC1Ev+0xb6>
    1a12:	be cf       	rjmp	.-132    	; 0x1990 <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    1a14:	8f 81       	ldd	r24, Y+7	; 0x07
    1a16:	98 85       	ldd	r25, Y+8	; 0x08
    1a18:	84 55       	subi	r24, 0x54	; 84
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	11 82       	std	Z+1, r1	; 0x01
    1a20:	10 82       	st	Z, r1
}
    1a22:	28 96       	adiw	r28, 0x08	; 8
    1a24:	e2 e0       	ldi	r30, 0x02	; 2
    1a26:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001a2a <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    1a2a:	a8 e0       	ldi	r26, 0x08	; 8
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e1       	ldi	r30, 0x1B	; 27
    1a30:	fd e0       	ldi	r31, 0x0D	; 13
    1a32:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x18>
    1a36:	98 87       	std	Y+8, r25	; 0x08
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    1a3a:	82 df       	rcall	.-252    	; 0x1940 <_ZL7elapsedv>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	ad 83       	std	Y+5, r26	; 0x05
    1a46:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	25 c1       	rjmp	.+586    	; 0x1c98 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1a4e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a50:	38 85       	ldd	r19, Y+8	; 0x08
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	84 5b       	subi	r24, 0xB4	; 180
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	fc 01       	movw	r30, r24
    1a64:	11 82       	std	Z+1, r1	; 0x01
    1a66:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1a68:	2f 81       	ldd	r18, Y+7	; 0x07
    1a6a:	38 85       	ldd	r19, Y+8	; 0x08
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	45 96       	adiw	r24, 0x15	; 21
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	82 0f       	add	r24, r18
    1a78:	93 1f       	adc	r25, r19
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	89 2b       	or	r24, r25
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <_ZN11SimpleTimer3runEv+0x5c>
    1a84:	04 c1       	rjmp	.+520    	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1a86:	2f 81       	ldd	r18, Y+7	; 0x07
    1a88:	38 85       	ldd	r19, Y+8	; 0x08
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	82 0f       	add	r24, r18
    1a98:	93 1f       	adc	r25, r19
    1a9a:	02 96       	adiw	r24, 0x02	; 2
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	a2 81       	ldd	r26, Z+2	; 0x02
    1aa4:	b3 81       	ldd	r27, Z+3	; 0x03
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	4d 81       	ldd	r20, Y+5	; 0x05
    1aac:	5e 81       	ldd	r21, Y+6	; 0x06
    1aae:	79 01       	movw	r14, r18
    1ab0:	8a 01       	movw	r16, r20
    1ab2:	e8 1a       	sub	r14, r24
    1ab4:	f9 0a       	sbc	r15, r25
    1ab6:	0a 0b       	sbc	r16, r26
    1ab8:	1b 0b       	sbc	r17, r27
    1aba:	d8 01       	movw	r26, r16
    1abc:	c7 01       	movw	r24, r14
    1abe:	4f 81       	ldd	r20, Y+7	; 0x07
    1ac0:	58 85       	ldd	r21, Y+8	; 0x08
    1ac2:	29 81       	ldd	r18, Y+1	; 0x01
    1ac4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	22 0f       	add	r18, r18
    1acc:	33 1f       	adc	r19, r19
    1ace:	24 0f       	add	r18, r20
    1ad0:	35 1f       	adc	r19, r21
    1ad2:	22 5c       	subi	r18, 0xC2	; 194
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	20 81       	ld	r18, Z
    1ada:	31 81       	ldd	r19, Z+1	; 0x01
    1adc:	42 81       	ldd	r20, Z+2	; 0x02
    1ade:	53 81       	ldd	r21, Z+3	; 0x03
    1ae0:	82 17       	cp	r24, r18
    1ae2:	93 07       	cpc	r25, r19
    1ae4:	a4 07       	cpc	r26, r20
    1ae6:	b5 07       	cpc	r27, r21
    1ae8:	08 f4       	brcc	.+2      	; 0x1aec <_ZN11SimpleTimer3runEv+0xc2>
    1aea:	d1 c0       	rjmp	.+418    	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    1aec:	2f 81       	ldd	r18, Y+7	; 0x07
    1aee:	38 85       	ldd	r19, Y+8	; 0x08
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	82 0f       	add	r24, r18
    1afe:	93 1f       	adc	r25, r19
    1b00:	02 96       	adiw	r24, 0x02	; 2
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	a2 81       	ldd	r26, Z+2	; 0x02
    1b0a:	b3 81       	ldd	r27, Z+3	; 0x03
    1b0c:	4f 81       	ldd	r20, Y+7	; 0x07
    1b0e:	58 85       	ldd	r21, Y+8	; 0x08
    1b10:	29 81       	ldd	r18, Y+1	; 0x01
    1b12:	3a 81       	ldd	r19, Y+2	; 0x02
    1b14:	22 0f       	add	r18, r18
    1b16:	33 1f       	adc	r19, r19
    1b18:	22 0f       	add	r18, r18
    1b1a:	33 1f       	adc	r19, r19
    1b1c:	24 0f       	add	r18, r20
    1b1e:	35 1f       	adc	r19, r21
    1b20:	22 5c       	subi	r18, 0xC2	; 194
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	f9 01       	movw	r30, r18
    1b26:	20 81       	ld	r18, Z
    1b28:	31 81       	ldd	r19, Z+1	; 0x01
    1b2a:	42 81       	ldd	r20, Z+2	; 0x02
    1b2c:	53 81       	ldd	r21, Z+3	; 0x03
    1b2e:	82 0f       	add	r24, r18
    1b30:	93 1f       	adc	r25, r19
    1b32:	a4 1f       	adc	r26, r20
    1b34:	b5 1f       	adc	r27, r21
    1b36:	4f 81       	ldd	r20, Y+7	; 0x07
    1b38:	58 85       	ldd	r21, Y+8	; 0x08
    1b3a:	29 81       	ldd	r18, Y+1	; 0x01
    1b3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b3e:	22 0f       	add	r18, r18
    1b40:	33 1f       	adc	r19, r19
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	24 0f       	add	r18, r20
    1b48:	35 1f       	adc	r19, r21
    1b4a:	2e 5f       	subi	r18, 0xFE	; 254
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	f9 01       	movw	r30, r18
    1b50:	80 83       	st	Z, r24
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	a2 83       	std	Z+2, r26	; 0x02
    1b56:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1b58:	2f 81       	ldd	r18, Y+7	; 0x07
    1b5a:	38 85       	ldd	r19, Y+8	; 0x08
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	82 0f       	add	r24, r18
    1b62:	93 1f       	adc	r25, r19
    1b64:	82 57       	subi	r24, 0x72	; 114
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	fc 01       	movw	r30, r24
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <_ZN11SimpleTimer3runEv+0x148>
    1b70:	8e c0       	rjmp	.+284    	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1b72:	2f 81       	ldd	r18, Y+7	; 0x07
    1b74:	38 85       	ldd	r19, Y+8	; 0x08
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	c3 96       	adiw	r24, 0x33	; 51
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	fc 01       	movw	r30, r24
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	89 2b       	or	r24, r25
    1b8c:	81 f4       	brne	.+32     	; 0x1bae <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1b8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b90:	38 85       	ldd	r19, Y+8	; 0x08
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	84 5b       	subi	r24, 0xB4	; 180
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	21 e0       	ldi	r18, 0x01	; 1
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	31 83       	std	Z+1, r19	; 0x01
    1baa:	20 83       	st	Z, r18
    1bac:	70 c0       	rjmp	.+224    	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1bae:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb0:	38 85       	ldd	r19, Y+8	; 0x08
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	cd 96       	adiw	r24, 0x3d	; 61
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	82 0f       	add	r24, r18
    1bbe:	93 1f       	adc	r25, r19
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 81       	ld	r18, Z
    1bc4:	31 81       	ldd	r19, Z+1	; 0x01
    1bc6:	4f 81       	ldd	r20, Y+7	; 0x07
    1bc8:	58 85       	ldd	r21, Y+8	; 0x08
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	c3 96       	adiw	r24, 0x33	; 51
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	84 0f       	add	r24, r20
    1bd6:	95 1f       	adc	r25, r21
    1bd8:	fc 01       	movw	r30, r24
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	28 17       	cp	r18, r24
    1be0:	39 07       	cpc	r19, r25
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <_ZN11SimpleTimer3runEv+0x1bc>
    1be4:	54 c0       	rjmp	.+168    	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1be6:	2f 81       	ldd	r18, Y+7	; 0x07
    1be8:	38 85       	ldd	r19, Y+8	; 0x08
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	84 5b       	subi	r24, 0xB4	; 180
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	fc 01       	movw	r30, r24
    1c00:	31 83       	std	Z+1, r19	; 0x01
    1c02:	20 83       	st	Z, r18
                        numRuns[i]++;
    1c04:	2f 81       	ldd	r18, Y+7	; 0x07
    1c06:	38 85       	ldd	r19, Y+8	; 0x08
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	cd 96       	adiw	r24, 0x3d	; 61
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	fc 01       	movw	r30, r24
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	4f 81       	ldd	r20, Y+7	; 0x07
    1c24:	58 85       	ldd	r21, Y+8	; 0x08
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	cd 96       	adiw	r24, 0x3d	; 61
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	84 0f       	add	r24, r20
    1c32:	95 1f       	adc	r25, r21
    1c34:	fc 01       	movw	r30, r24
    1c36:	31 83       	std	Z+1, r19	; 0x01
    1c38:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1c3a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c3c:	38 85       	ldd	r19, Y+8	; 0x08
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	cd 96       	adiw	r24, 0x3d	; 61
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 81       	ld	r18, Z
    1c50:	31 81       	ldd	r19, Z+1	; 0x01
    1c52:	4f 81       	ldd	r20, Y+7	; 0x07
    1c54:	58 85       	ldd	r21, Y+8	; 0x08
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	c3 96       	adiw	r24, 0x33	; 51
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	84 0f       	add	r24, r20
    1c62:	95 1f       	adc	r25, r21
    1c64:	fc 01       	movw	r30, r24
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	28 17       	cp	r18, r24
    1c6c:	39 07       	cpc	r19, r25
    1c6e:	7c f0       	brlt	.+30     	; 0x1c8e <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1c70:	2f 81       	ldd	r18, Y+7	; 0x07
    1c72:	38 85       	ldd	r19, Y+8	; 0x08
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	84 5b       	subi	r24, 0xB4	; 180
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	22 e0       	ldi	r18, 0x02	; 2
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	fc 01       	movw	r30, r24
    1c8a:	31 83       	std	Z+1, r19	; 0x01
    1c8c:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	0a 97       	sbiw	r24, 0x0a	; 10
    1c9e:	0c f4       	brge	.+2      	; 0x1ca2 <_ZN11SimpleTimer3runEv+0x278>
    1ca0:	d6 ce       	rjmp	.-596    	; 0x1a4e <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1ca2:	1a 82       	std	Y+2, r1	; 0x02
    1ca4:	19 82       	std	Y+1, r1	; 0x01
    1ca6:	46 c0       	rjmp	.+140    	; 0x1d34 <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1ca8:	2f 81       	ldd	r18, Y+7	; 0x07
    1caa:	38 85       	ldd	r19, Y+8	; 0x08
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	84 5b       	subi	r24, 0xB4	; 180
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	19 f0       	breq	.+6      	; 0x1cce <_ZN11SimpleTimer3runEv+0x2a4>
    1cc8:	02 97       	sbiw	r24, 0x02	; 2
    1cca:	81 f0       	breq	.+32     	; 0x1cec <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    1ccc:	2e c0       	rjmp	.+92     	; 0x1d2a <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    1cce:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd0:	38 85       	ldd	r19, Y+8	; 0x08
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	45 96       	adiw	r24, 0x15	; 21
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	82 0f       	add	r24, r18
    1cde:	93 1f       	adc	r25, r19
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	09 95       	icall
                break;
    1cea:	1f c0       	rjmp	.+62     	; 0x1d2a <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    1cec:	2f 81       	ldd	r18, Y+7	; 0x07
    1cee:	38 85       	ldd	r19, Y+8	; 0x08
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	45 96       	adiw	r24, 0x15	; 21
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	fc 01       	movw	r30, r24
    1d06:	09 95       	icall
                deleteTimer(i);
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	98 85       	ldd	r25, Y+8	; 0x08
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	08 96       	adiw	r24, 0x08	; 8
    1d14:	fc 01       	movw	r30, r24
    1d16:	20 81       	ld	r18, Z
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
    1d1a:	49 81       	ldd	r20, Y+1	; 0x01
    1d1c:	5a 81       	ldd	r21, Y+2	; 0x02
    1d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d20:	98 85       	ldd	r25, Y+8	; 0x08
    1d22:	ba 01       	movw	r22, r20
    1d24:	f9 01       	movw	r30, r18
    1d26:	09 95       	icall
                break;
    1d28:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	0a 97       	sbiw	r24, 0x0a	; 10
    1d3a:	0c f4       	brge	.+2      	; 0x1d3e <_ZN11SimpleTimer3runEv+0x314>
    1d3c:	b5 cf       	rjmp	.-150    	; 0x1ca8 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1d3e:	28 96       	adiw	r28, 0x08	; 8
    1d40:	e6 e0       	ldi	r30, 0x06	; 6
    1d42:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x18>

00001d46 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1d46:	a4 e0       	ldi	r26, 0x04	; 4
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1d4c:	fe e0       	ldi	r31, 0x0E	; 14
    1d4e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	84 55       	subi	r24, 0x54	; 84
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	fc 01       	movw	r30, r24
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	0a 97       	sbiw	r24, 0x0a	; 10
    1d66:	1c f0       	brlt	.+6      	; 0x1d6e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	9f ef       	ldi	r25, 0xFF	; 255
    1d6c:	1f c0       	rjmp	.+62     	; 0x1dac <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1d6e:	1a 82       	std	Y+2, r1	; 0x02
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	16 c0       	rjmp	.+44     	; 0x1da0 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	45 96       	adiw	r24, 0x15	; 21
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	82 0f       	add	r24, r18
    1d84:	93 1f       	adc	r25, r19
    1d86:	fc 01       	movw	r30, r24
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	89 2b       	or	r24, r25
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	0a 97       	sbiw	r24, 0x0a	; 10
    1da6:	34 f3       	brlt	.-52     	; 0x1d74 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
}
    1dac:	24 96       	adiw	r28, 0x04	; 4
    1dae:	e2 e0       	ldi	r30, 0x02	; 2
    1db0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00001db4 <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1db4:	ac e0       	ldi	r26, 0x0C	; 12
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e0 ee       	ldi	r30, 0xE0	; 224
    1dba:	fe e0       	ldi	r31, 0x0E	; 14
    1dbc:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	4d 83       	std	Y+5, r20	; 0x05
    1dc6:	5e 83       	std	Y+6, r21	; 0x06
    1dc8:	6f 83       	std	Y+7, r22	; 0x07
    1dca:	78 87       	std	Y+8, r23	; 0x08
    1dcc:	3a 87       	std	Y+10, r19	; 0x0a
    1dce:	29 87       	std	Y+9, r18	; 0x09
    1dd0:	1c 87       	std	Y+12, r17	; 0x0c
    1dd2:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	b6 df       	rcall	.-148    	; 0x1d46 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	99 23       	and	r25, r25
    1de4:	1c f4       	brge	.+6      	; 0x1dec <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	9f ef       	ldi	r25, 0xFF	; 255
    1dea:	6b c0       	rjmp	.+214    	; 0x1ec2 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	89 2b       	or	r24, r25
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	9f ef       	ldi	r25, 0xFF	; 255
    1df8:	64 c0       	rjmp	.+200    	; 0x1ec2 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	9c 01       	movw	r18, r24
    1e10:	22 5c       	subi	r18, 0xC2	; 194
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	af 81       	ldd	r26, Y+7	; 0x07
    1e1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	80 83       	st	Z, r24
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	a2 83       	std	Z+2, r26	; 0x02
    1e24:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1e26:	2b 81       	ldd	r18, Y+3	; 0x03
    1e28:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	45 96       	adiw	r24, 0x15	; 21
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	82 0f       	add	r24, r18
    1e36:	93 1f       	adc	r25, r19
    1e38:	29 85       	ldd	r18, Y+9	; 0x09
    1e3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	31 83       	std	Z+1, r19	; 0x01
    1e40:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	c3 96       	adiw	r24, 0x33	; 51
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e56:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e58:	fc 01       	movw	r30, r24
    1e5a:	31 83       	std	Z+1, r19	; 0x01
    1e5c:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	82 0f       	add	r24, r18
    1e68:	93 1f       	adc	r25, r19
    1e6a:	82 57       	subi	r24, 0x72	; 114
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	21 e0       	ldi	r18, 0x01	; 1
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1e74:	65 dd       	rcall	.-1334   	; 0x1940 <_ZL7elapsedv>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1e7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1e7e:	29 81       	ldd	r18, Y+1	; 0x01
    1e80:	3a 81       	ldd	r19, Y+2	; 0x02
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	24 0f       	add	r18, r20
    1e8c:	35 1f       	adc	r19, r21
    1e8e:	2e 5f       	subi	r18, 0xFE	; 254
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	f9 01       	movw	r30, r18
    1e94:	80 83       	st	Z, r24
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	a2 83       	std	Z+2, r26	; 0x02
    1e9a:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	84 55       	subi	r24, 0x54	; 84
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	9c 01       	movw	r18, r24
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	84 55       	subi	r24, 0x54	; 84
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	fc 01       	movw	r30, r24
    1eba:	31 83       	std	Z+1, r19	; 0x01
    1ebc:	20 83       	st	Z, r18

    return freeTimer;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ec2:	2c 96       	adiw	r28, 0x0c	; 12
    1ec4:	e4 e0       	ldi	r30, 0x04	; 4
    1ec6:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

00001eca <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1eca:	a8 e0       	ldi	r26, 0x08	; 8
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x18>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	4b 83       	std	Y+3, r20	; 0x03
    1edc:	5c 83       	std	Y+4, r21	; 0x04
    1ede:	6d 83       	std	Y+5, r22	; 0x05
    1ee0:	7e 83       	std	Y+6, r23	; 0x06
    1ee2:	38 87       	std	Y+8, r19	; 0x08
    1ee4:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	dc 01       	movw	r26, r24
    1eec:	8d 91       	ld	r24, X+
    1eee:	9c 91       	ld	r25, X
    1ef0:	06 96       	adiw	r24, 0x06	; 6
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	2f 81       	ldd	r18, Y+7	; 0x07
    1efa:	38 85       	ldd	r19, Y+8	; 0x08
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	ad 81       	ldd	r26, Y+5	; 0x05
    1f02:	be 81       	ldd	r27, Y+6	; 0x06
    1f04:	e9 80       	ldd	r14, Y+1	; 0x01
    1f06:	fa 80       	ldd	r15, Y+2	; 0x02
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	bd 01       	movw	r22, r26
    1f10:	c7 01       	movw	r24, r14
    1f12:	09 95       	icall
}
    1f14:	28 96       	adiw	r28, 0x08	; 8
    1f16:	e6 e0       	ldi	r30, 0x06	; 6
    1f18:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x18>

00001f1c <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1f1c:	a8 e0       	ldi	r26, 0x08	; 8
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x18>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	4b 83       	std	Y+3, r20	; 0x03
    1f2e:	5c 83       	std	Y+4, r21	; 0x04
    1f30:	6d 83       	std	Y+5, r22	; 0x05
    1f32:	7e 83       	std	Y+6, r23	; 0x06
    1f34:	38 87       	std	Y+8, r19	; 0x08
    1f36:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	8d 91       	ld	r24, X+
    1f40:	9c 91       	ld	r25, X
    1f42:	06 96       	adiw	r24, 0x06	; 6
    1f44:	dc 01       	movw	r26, r24
    1f46:	ed 91       	ld	r30, X+
    1f48:	fc 91       	ld	r31, X
    1f4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1f4c:	38 85       	ldd	r19, Y+8	; 0x08
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	ad 81       	ldd	r26, Y+5	; 0x05
    1f54:	be 81       	ldd	r27, Y+6	; 0x06
    1f56:	e9 80       	ldd	r14, Y+1	; 0x01
    1f58:	fa 80       	ldd	r15, Y+2	; 0x02
    1f5a:	01 e0       	ldi	r16, 0x01	; 1
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	ac 01       	movw	r20, r24
    1f60:	bd 01       	movw	r22, r26
    1f62:	c7 01       	movw	r24, r14
    1f64:	09 95       	icall
}
    1f66:	28 96       	adiw	r28, 0x08	; 8
    1f68:	e6 e0       	ldi	r30, 0x06	; 6
    1f6a:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x18>

00001f6e <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1f6e:	a4 e0       	ldi	r26, 0x04	; 4
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	ed eb       	ldi	r30, 0xBD	; 189
    1f74:	ff e0       	ldi	r31, 0x0F	; 15
    1f76:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	7c 83       	std	Y+4, r23	; 0x04
    1f80:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	0a 97       	sbiw	r24, 0x0a	; 10
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1f8a:	69 c0       	rjmp	.+210    	; 0x205e <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	84 55       	subi	r24, 0x54	; 84
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	fc 01       	movw	r30, r24
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	89 2b       	or	r24, r25
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1f9e:	5f c0       	rjmp	.+190    	; 0x205e <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1fa0:	29 81       	ldd	r18, Y+1	; 0x01
    1fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	45 96       	adiw	r24, 0x15	; 21
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	89 2b       	or	r24, r25
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1fbc:	50 c0       	rjmp	.+160    	; 0x205e <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	45 96       	adiw	r24, 0x15	; 21
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	11 82       	std	Z+1, r1	; 0x01
    1fd4:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1fd6:	29 81       	ldd	r18, Y+1	; 0x01
    1fd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	82 0f       	add	r24, r18
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	82 57       	subi	r24, 0x72	; 114
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1fea:	29 81       	ldd	r18, Y+1	; 0x01
    1fec:	3a 81       	ldd	r19, Y+2	; 0x02
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	84 5b       	subi	r24, 0xB4	; 180
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	82 0f       	add	r24, r18
    1ffc:	93 1f       	adc	r25, r19
    1ffe:	fc 01       	movw	r30, r24
    2000:	11 82       	std	Z+1, r1	; 0x01
    2002:	10 82       	st	Z, r1
        delays[timerId] = 0;
    2004:	29 81       	ldd	r18, Y+1	; 0x01
    2006:	3a 81       	ldd	r19, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	ce 96       	adiw	r24, 0x3e	; 62
    201a:	fc 01       	movw	r30, r24
    201c:	10 82       	st	Z, r1
    201e:	11 82       	std	Z+1, r1	; 0x01
    2020:	12 82       	std	Z+2, r1	; 0x02
    2022:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    2024:	29 81       	ldd	r18, Y+1	; 0x01
    2026:	3a 81       	ldd	r19, Y+2	; 0x02
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	cd 96       	adiw	r24, 0x3d	; 61
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	82 0f       	add	r24, r18
    2034:	93 1f       	adc	r25, r19
    2036:	fc 01       	movw	r30, r24
    2038:	11 82       	std	Z+1, r1	; 0x01
    203a:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	84 55       	subi	r24, 0x54	; 84
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	fc 01       	movw	r30, r24
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	9c 01       	movw	r18, r24
    204c:	21 50       	subi	r18, 0x01	; 1
    204e:	31 09       	sbc	r19, r1
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	84 55       	subi	r24, 0x54	; 84
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	20 83       	st	Z, r18
    }
}
    205e:	24 96       	adiw	r28, 0x04	; 4
    2060:	e2 e0       	ldi	r30, 0x02	; 2
    2062:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002066 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    2066:	a4 e0       	ldi	r26, 0x04	; 4
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e9 e3       	ldi	r30, 0x39	; 57
    206c:	f0 e1       	ldi	r31, 0x10	; 16
    206e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	7c 83       	std	Y+4, r23	; 0x04
    2078:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	0a 97       	sbiw	r24, 0x0a	; 10
    2080:	0c f0       	brlt	.+2      	; 0x2084 <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    2084:	5d dc       	rcall	.-1862   	; 0x1940 <_ZL7elapsedv>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	49 81       	ldd	r20, Y+1	; 0x01
    208c:	5a 81       	ldd	r21, Y+2	; 0x02
    208e:	2b 81       	ldd	r18, Y+3	; 0x03
    2090:	3c 81       	ldd	r19, Y+4	; 0x04
    2092:	22 0f       	add	r18, r18
    2094:	33 1f       	adc	r19, r19
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	24 0f       	add	r18, r20
    209c:	35 1f       	adc	r19, r21
    209e:	2e 5f       	subi	r18, 0xFE	; 254
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	f9 01       	movw	r30, r18
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	a2 83       	std	Z+2, r26	; 0x02
    20aa:	b3 83       	std	Z+3, r27	; 0x03
}
    20ac:	24 96       	adiw	r28, 0x04	; 4
    20ae:	e2 e0       	ldi	r30, 0x02	; 2
    20b0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000020b4 <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    20b4:	a4 e0       	ldi	r26, 0x04	; 4
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e0 e6       	ldi	r30, 0x60	; 96
    20ba:	f0 e1       	ldi	r31, 0x10	; 16
    20bc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	7c 83       	std	Y+4, r23	; 0x04
    20c6:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	0a 97       	sbiw	r24, 0x0a	; 10
    20ce:	14 f0       	brlt	.+4      	; 0x20d4 <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    20d4:	29 81       	ldd	r18, Y+1	; 0x01
    20d6:	3a 81       	ldd	r19, Y+2	; 0x02
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	82 57       	subi	r24, 0x72	; 114
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
}
    20e8:	24 96       	adiw	r28, 0x04	; 4
    20ea:	e2 e0       	ldi	r30, 0x02	; 2
    20ec:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000020f0 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    20f0:	a4 e0       	ldi	r26, 0x04	; 4
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e7       	ldi	r30, 0x7E	; 126
    20f6:	f0 e1       	ldi	r31, 0x10	; 16
    20f8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	7c 83       	std	Y+4, r23	; 0x04
    2102:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	0a 97       	sbiw	r24, 0x0a	; 10
    210a:	0c f0       	brlt	.+2      	; 0x210e <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    210e:	29 81       	ldd	r18, Y+1	; 0x01
    2110:	3a 81       	ldd	r19, Y+2	; 0x02
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	82 0f       	add	r24, r18
    2118:	93 1f       	adc	r25, r19
    211a:	82 57       	subi	r24, 0x72	; 114
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	fc 01       	movw	r30, r24
    2122:	20 83       	st	Z, r18
}
    2124:	24 96       	adiw	r28, 0x04	; 4
    2126:	e2 e0       	ldi	r30, 0x02	; 2
    2128:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000212c <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    212c:	a4 e0       	ldi	r26, 0x04	; 4
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ec e9       	ldi	r30, 0x9C	; 156
    2132:	f0 e1       	ldi	r31, 0x10	; 16
    2134:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	7c 83       	std	Y+4, r23	; 0x04
    213e:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	0a 97       	sbiw	r24, 0x0a	; 10
    2146:	0c f0       	brlt	.+2      	; 0x214a <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    2148:	0a c0       	rjmp	.+20     	; 0x215e <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    214a:	29 81       	ldd	r18, Y+1	; 0x01
    214c:	3a 81       	ldd	r19, Y+2	; 0x02
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	82 0f       	add	r24, r18
    2154:	93 1f       	adc	r25, r19
    2156:	82 57       	subi	r24, 0x72	; 114
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	fc 01       	movw	r30, r24
    215c:	10 82       	st	Z, r1
}
    215e:	24 96       	adiw	r28, 0x04	; 4
    2160:	e2 e0       	ldi	r30, 0x02	; 2
    2162:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002166 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    2166:	cf 92       	push	r12
    2168:	ef 92       	push	r14
    216a:	0f 93       	push	r16
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	00 d0       	rcall	.+0      	; 0x2172 <_ZN7LCDBaseC1Ev+0xc>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	0f 2e       	mov	r0, r31
    2180:	f7 e0       	ldi	r31, 0x07	; 7
    2182:	cf 2e       	mov	r12, r31
    2184:	f0 2d       	mov	r31, r0
    2186:	0f 2e       	mov	r0, r31
    2188:	f6 e0       	ldi	r31, 0x06	; 6
    218a:	ef 2e       	mov	r14, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	05 e0       	ldi	r16, 0x05	; 5
    2190:	24 e0       	ldi	r18, 0x04	; 4
    2192:	49 e0       	ldi	r20, 0x09	; 9
    2194:	68 e0       	ldi	r22, 0x08	; 8
    2196:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN13LiquidCrystalC1Ehhhhhh>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	2d e9       	ldi	r18, 0x9D	; 157
    21a0:	31 e0       	ldi	r19, 0x01	; 1
    21a2:	fc 01       	movw	r30, r24
    21a4:	31 83       	std	Z+1, r19	; 0x01
    21a6:	20 83       	st	Z, r18
    Init();
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	08 d0       	rcall	.+16     	; 0x21be <_ZN7LCDBase4InitEv>
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	0f 91       	pop	r16
    21b8:	ef 90       	pop	r14
    21ba:	cf 90       	pop	r12
    21bc:	08 95       	ret

000021be <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    21be:	a2 e0       	ldi	r26, 0x02	; 2
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 ee       	ldi	r30, 0xE5	; 229
    21c4:	f0 e1       	ldi	r31, 0x10	; 16
    21c6:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	42 e0       	ldi	r20, 0x02	; 2
    21d6:	60 e1       	ldi	r22, 0x10	; 16
    21d8:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN13LiquidCrystal5beginEhhh>
    clear();
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	69 d8       	rcall	.-3886   	; 0x12b4 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	78 d8       	rcall	.-3856   	; 0x12dc <_ZN13LiquidCrystal9setCursorEhh>

}
    21ec:	22 96       	adiw	r28, 0x02	; 2
    21ee:	e2 e0       	ldi	r30, 0x02	; 2
    21f0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000021f4 <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    21f4:	a4 e0       	ldi	r26, 0x04	; 4
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e0 e0       	ldi	r30, 0x00	; 0
    21fa:	f1 e1       	ldi	r31, 0x11	; 17
    21fc:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	7c 83       	std	Y+4, r23	; 0x04
    2206:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	42 2f       	mov	r20, r18
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	64 d8       	rcall	.-3896   	; 0x12dc <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    2214:	2f e2       	ldi	r18, 0x2F	; 47
    2216:	33 e0       	ldi	r19, 0x03	; 3
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	b9 01       	movw	r22, r18
    221e:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
}
    2222:	24 96       	adiw	r28, 0x04	; 4
    2224:	e2 e0       	ldi	r30, 0x02	; 2
    2226:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000222a <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    222a:	a6 e0       	ldi	r26, 0x06	; 6
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	eb e1       	ldi	r30, 0x1B	; 27
    2230:	f1 e1       	ldi	r31, 0x11	; 17
    2232:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	7c 83       	std	Y+4, r23	; 0x04
    223c:	6b 83       	std	Y+3, r22	; 0x03
    223e:	5e 83       	std	Y+6, r21	; 0x06
    2240:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	b9 01       	movw	r22, r18
    224c:	d3 df       	rcall	.-90     	; 0x21f4 <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    224e:	2b 81       	ldd	r18, Y+3	; 0x03
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	42 2f       	mov	r20, r18
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	41 d8       	rcall	.-3966   	; 0x12dc <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	2d 81       	ldd	r18, Y+5	; 0x05
    2260:	3e 81       	ldd	r19, Y+6	; 0x06
    2262:	b9 01       	movw	r22, r18
    2264:	0e 94 c9 28 	call	0x5192	; 0x5192 <_ZN5Print5printERK6String>
}
    2268:	26 96       	adiw	r28, 0x06	; 6
    226a:	e2 e0       	ldi	r30, 0x02	; 2
    226c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002270 <_ZNK6String5c_strEv>:
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
    2270:	a2 e0       	ldi	r26, 0x02	; 2
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ee e3       	ldi	r30, 0x3E	; 62
    2276:	f1 e1       	ldi	r31, 0x11	; 17
    2278:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	fc 01       	movw	r30, r24
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	22 96       	adiw	r28, 0x02	; 2
    228c:	e2 e0       	ldi	r30, 0x02	; 2
    228e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002292 <_ZN15StringSumHelperC1EPKc>:
private:
  size_t _base, _memory_size;

  template<class T> inline void  _read_block(size_t aAddress, T &aValue) const {
    eeprom_read_block((void*)&aValue, reinterpret_cast<const void*>(aAddress + base()), sizeof(aValue));
  }
    2292:	a4 e0       	ldi	r26, 0x04	; 4
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f1 e1       	ldi	r31, 0x11	; 17
    229a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	7c 83       	std	Y+4, r23	; 0x04
    22a4:	6b 83       	std	Y+3, r22	; 0x03
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	2b 81       	ldd	r18, Y+3	; 0x03
    22ac:	3c 81       	ldd	r19, Y+4	; 0x04
    22ae:	b9 01       	movw	r22, r18
    22b0:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    22b4:	24 96       	adiw	r28, 0x04	; 4
    22b6:	e2 e0       	ldi	r30, 0x02	; 2
    22b8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000022bc <_ZnwjPv>:
    22bc:	a4 e0       	ldi	r26, 0x04	; 4
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e4 e6       	ldi	r30, 0x64	; 100
    22c2:	f1 e1       	ldi	r31, 0x11	; 17
    22c4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	7c 83       	std	Y+4, r23	; 0x04
    22ce:	6b 83       	std	Y+3, r22	; 0x03
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	24 96       	adiw	r28, 0x04	; 4
    22d6:	e2 e0       	ldi	r30, 0x02	; 2
    22d8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000022dc <_ZN5PrintC1ERKS_>:
    22dc:	a4 e0       	ldi	r26, 0x04	; 4
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e7       	ldi	r30, 0x74	; 116
    22e2:	f1 e1       	ldi	r31, 0x11	; 17
    22e4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	7c 83       	std	Y+4, r23	; 0x04
    22ee:	6b 83       	std	Y+3, r22	; 0x03
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	22 ee       	ldi	r18, 0xE2	; 226
    22f6:	31 e0       	ldi	r19, 0x01	; 1
    22f8:	fc 01       	movw	r30, r24
    22fa:	31 83       	std	Z+1, r19	; 0x01
    22fc:	20 83       	st	Z, r18
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	fc 01       	movw	r30, r24
    2304:	22 81       	ldd	r18, Z+2	; 0x02
    2306:	33 81       	ldd	r19, Z+3	; 0x03
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	fc 01       	movw	r30, r24
    230e:	33 83       	std	Z+3, r19	; 0x03
    2310:	22 83       	std	Z+2, r18	; 0x02
    2312:	24 96       	adiw	r28, 0x04	; 4
    2314:	e2 e0       	ldi	r30, 0x02	; 2
    2316:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000231a <_ZN13LiquidCrystalC1ERKS_>:
    231a:	a4 e0       	ldi	r26, 0x04	; 4
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e9       	ldi	r30, 0x93	; 147
    2320:	f1 e1       	ldi	r31, 0x11	; 17
    2322:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	7c 83       	std	Y+4, r23	; 0x04
    232c:	6b 83       	std	Y+3, r22	; 0x03
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	b9 01       	movw	r22, r18
    2338:	d1 df       	rcall	.-94     	; 0x22dc <_ZN5PrintC1ERKS_>
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	21 e7       	ldi	r18, 0x71	; 113
    2340:	31 e0       	ldi	r19, 0x01	; 1
    2342:	fc 01       	movw	r30, r24
    2344:	31 83       	std	Z+1, r19	; 0x01
    2346:	20 83       	st	Z, r18
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	fc 01       	movw	r30, r24
    234e:	24 81       	ldd	r18, Z+4	; 0x04
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	24 83       	std	Z+4, r18	; 0x04
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	fc 01       	movw	r30, r24
    235e:	25 81       	ldd	r18, Z+5	; 0x05
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	fc 01       	movw	r30, r24
    2366:	25 83       	std	Z+5, r18	; 0x05
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	fc 01       	movw	r30, r24
    236e:	26 81       	ldd	r18, Z+6	; 0x06
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	fc 01       	movw	r30, r24
    2376:	26 83       	std	Z+6, r18	; 0x06
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	2b 81       	ldd	r18, Y+3	; 0x03
    237e:	3c 81       	ldd	r19, Y+4	; 0x04
    2380:	48 e0       	ldi	r20, 0x08	; 8
    2382:	f9 01       	movw	r30, r18
    2384:	37 96       	adiw	r30, 0x07	; 7
    2386:	dc 01       	movw	r26, r24
    2388:	17 96       	adiw	r26, 0x07	; 7
    238a:	01 90       	ld	r0, Z+
    238c:	0d 92       	st	X+, r0
    238e:	4a 95       	dec	r20
    2390:	e1 f7       	brne	.-8      	; 0x238a <_ZN13LiquidCrystalC1ERKS_+0x70>
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	fc 01       	movw	r30, r24
    2398:	27 85       	ldd	r18, Z+15	; 0x0f
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	fc 01       	movw	r30, r24
    23a0:	27 87       	std	Z+15, r18	; 0x0f
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 89       	ldd	r18, Z+16	; 0x10
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 8b       	std	Z+16, r18	; 0x10
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	fc 01       	movw	r30, r24
    23b8:	21 89       	ldd	r18, Z+17	; 0x11
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	fc 01       	movw	r30, r24
    23c0:	21 8b       	std	Z+17, r18	; 0x11
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	fc 01       	movw	r30, r24
    23c8:	22 89       	ldd	r18, Z+18	; 0x12
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	fc 01       	movw	r30, r24
    23d0:	22 8b       	std	Z+18, r18	; 0x12
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	fc 01       	movw	r30, r24
    23d8:	23 89       	ldd	r18, Z+19	; 0x13
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	fc 01       	movw	r30, r24
    23e0:	23 8b       	std	Z+19, r18	; 0x13
    23e2:	29 81       	ldd	r18, Y+1	; 0x01
    23e4:	3a 81       	ldd	r19, Y+2	; 0x02
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	fc 01       	movw	r30, r24
    23ec:	84 89       	ldd	r24, Z+20	; 0x14
    23ee:	95 89       	ldd	r25, Z+21	; 0x15
    23f0:	a6 89       	ldd	r26, Z+22	; 0x16
    23f2:	b7 89       	ldd	r27, Z+23	; 0x17
    23f4:	f9 01       	movw	r30, r18
    23f6:	84 8b       	std	Z+20, r24	; 0x14
    23f8:	95 8b       	std	Z+21, r25	; 0x15
    23fa:	a6 8b       	std	Z+22, r26	; 0x16
    23fc:	b7 8b       	std	Z+23, r27	; 0x17
    23fe:	24 96       	adiw	r28, 0x04	; 4
    2400:	e2 e0       	ldi	r30, 0x02	; 2
    2402:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002406 <_ZN7LCDBaseC1ERKS_>:
    2406:	a4 e0       	ldi	r26, 0x04	; 4
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e0       	ldi	r30, 0x09	; 9
    240c:	f2 e1       	ldi	r31, 0x12	; 18
    240e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	7c 83       	std	Y+4, r23	; 0x04
    2418:	6b 83       	std	Y+3, r22	; 0x03
    241a:	2b 81       	ldd	r18, Y+3	; 0x03
    241c:	3c 81       	ldd	r19, Y+4	; 0x04
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	b9 01       	movw	r22, r18
    2424:	7a df       	rcall	.-268    	; 0x231a <_ZN13LiquidCrystalC1ERKS_>
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	2d e9       	ldi	r18, 0x9D	; 157
    242c:	31 e0       	ldi	r19, 0x01	; 1
    242e:	fc 01       	movw	r30, r24
    2430:	31 83       	std	Z+1, r19	; 0x01
    2432:	20 83       	st	Z, r18
    2434:	24 96       	adiw	r28, 0x04	; 4
    2436:	e2 e0       	ldi	r30, 0x02	; 2
    2438:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000243c <_ZN8PHSensorC1Eiib7LCDBase>:
    243c:	aa e0       	ldi	r26, 0x0A	; 10
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e4 e2       	ldi	r30, 0x24	; 36
    2442:	f2 e1       	ldi	r31, 0x12	; 18
    2444:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    2448:	9b 83       	std	Y+3, r25	; 0x03
    244a:	8a 83       	std	Y+2, r24	; 0x02
    244c:	7d 83       	std	Y+5, r23	; 0x05
    244e:	6c 83       	std	Y+4, r22	; 0x04
    2450:	5f 83       	std	Y+7, r21	; 0x07
    2452:	4e 83       	std	Y+6, r20	; 0x06
    2454:	28 87       	std	Y+8, r18	; 0x08
    2456:	1a 87       	std	Y+10, r17	; 0x0a
    2458:	09 87       	std	Y+9, r16	; 0x09
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	9b 81       	ldd	r25, Y+3	; 0x03
    245e:	8a d9       	rcall	.-3308   	; 0x1774 <_ZN4erom7StorageC1Ev>
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	25 ea       	ldi	r18, 0xA5	; 165
    2466:	31 e0       	ldi	r19, 0x01	; 1
    2468:	fc 01       	movw	r30, r24
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	9b 81       	ldd	r25, Y+3	; 0x03
    2472:	2c 81       	ldd	r18, Y+4	; 0x04
    2474:	3d 81       	ldd	r19, Y+5	; 0x05
    2476:	fc 01       	movw	r30, r24
    2478:	34 87       	std	Z+12, r19	; 0x0c
    247a:	23 87       	std	Z+11, r18	; 0x0b
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	83 5a       	subi	r24, 0xA3	; 163
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	fc 01       	movw	r30, r24
    2486:	11 82       	std	Z+1, r1	; 0x01
    2488:	10 82       	st	Z, r1
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	9b 81       	ldd	r25, Y+3	; 0x03
    248e:	81 5a       	subi	r24, 0xA1	; 161
    2490:	9f 4f       	sbci	r25, 0xFF	; 255
    2492:	2e 81       	ldd	r18, Y+6	; 0x06
    2494:	3f 81       	ldd	r19, Y+7	; 0x07
    2496:	fc 01       	movw	r30, r24
    2498:	31 83       	std	Z+1, r19	; 0x01
    249a:	20 83       	st	Z, r18
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	b5 d5       	rcall	.+2922   	; 0x300c <_ZNSaIiEC1Ev>
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	8f 59       	subi	r24, 0x9F	; 159
    24a8:	9f 4f       	sbci	r25, 0xFF	; 255
    24aa:	9e 01       	movw	r18, r28
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	b9 01       	movw	r22, r18
    24b2:	c4 d5       	rcall	.+2952   	; 0x303c <_ZNSt6vectorIiSaIiEEC1ERKS0_>
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	b5 d5       	rcall	.+2922   	; 0x3024 <_ZNSaIiED1Ev>
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	88 59       	subi	r24, 0x98	; 152
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	fc 01       	movw	r30, r24
    24c4:	11 82       	std	Z+1, r1	; 0x01
    24c6:	10 82       	st	Z, r1
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	8a 58       	subi	r24, 0x8A	; 138
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	28 85       	ldd	r18, Y+8	; 0x08
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	89 58       	subi	r24, 0x89	; 137
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	29 85       	ldd	r18, Y+9	; 0x09
    24e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    24e2:	b9 01       	movw	r22, r18
    24e4:	90 df       	rcall	.-224    	; 0x2406 <_ZN7LCDBaseC1ERKS_>
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ea:	81 57       	subi	r24, 0x71	; 113
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	6d e0       	ldi	r22, 0x0D	; 13
    24f0:	71 e0       	ldi	r23, 0x01	; 1
    24f2:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	9b 81       	ldd	r25, Y+3	; 0x03
    24fa:	8b 56       	subi	r24, 0x6B	; 107
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	6d e0       	ldi	r22, 0x0D	; 13
    2500:	71 e0       	ldi	r23, 0x01	; 1
    2502:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	85 56       	subi	r24, 0x65	; 101
    250c:	9f 4f       	sbci	r25, 0xFF	; 255
    250e:	63 e0       	ldi	r22, 0x03	; 3
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	5c d5       	rcall	.+2744   	; 0x2fcc <_ZN4erom5EntryIdEC1Ej>
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	04 d0       	rcall	.+8      	; 0x2522 <_ZN8PHSensor4InitEv>
    251a:	2a 96       	adiw	r28, 0x0a	; 10
    251c:	e4 e0       	ldi	r30, 0x04	; 4
    251e:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

00002522 <_ZN8PHSensor4InitEv>:
    2522:	a6 e0       	ldi	r26, 0x06	; 6
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e9       	ldi	r30, 0x97	; 151
    2528:	f2 e1       	ldi	r31, 0x12	; 18
    252a:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__prologue_saves__+0x1e>
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	8d e0       	ldi	r24, 0x0D	; 13
    2536:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	85 56       	subi	r24, 0x65	; 101
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	ee d5       	rcall	.+3036   	; 0x3120 <_ZN4erom5EntryIdE4loadEv>
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	85 56       	subi	r24, 0x65	; 101
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	0e d6       	rcall	.+3100   	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    254e:	fc 01       	movw	r30, r24
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	a2 81       	ldd	r26, Z+2	; 0x02
    2556:	b3 81       	ldd	r27, Z+3	; 0x03
    2558:	11 e0       	ldi	r17, 0x01	; 1
    255a:	9c 01       	movw	r18, r24
    255c:	ad 01       	movw	r20, r26
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <__unordsf2>
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <_ZN8PHSensor4InitEv+0x4a>
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	11 23       	and	r17, r17
    256e:	89 f0       	breq	.+34     	; 0x2592 <_ZN8PHSensor4InitEv+0x70>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e4       	ldi	r26, 0x40	; 64
    2576:	b0 e4       	ldi	r27, 0x40	; 64
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	ab 83       	std	Y+3, r26	; 0x03
    257e:	bc 83       	std	Y+4, r27	; 0x04
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	85 56       	subi	r24, 0x65	; 101
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	9e 01       	movw	r18, r28
    258a:	2f 5f       	subi	r18, 0xFF	; 255
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	b9 01       	movw	r22, r18
    2590:	fb d5       	rcall	.+3062   	; 0x3188 <_ZN4erom5EntryIdEaSERKd>
    2592:	26 96       	adiw	r28, 0x06	; 6
    2594:	e3 e0       	ldi	r30, 0x03	; 3
    2596:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__epilogue_restores__+0x1e>

0000259a <_ZN8PHSensor6UpdateEd>:
    259a:	a6 e0       	ldi	r26, 0x06	; 6
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e3 ed       	ldi	r30, 0xD3	; 211
    25a0:	f2 e1       	ldi	r31, 0x12	; 18
    25a2:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	4b 83       	std	Y+3, r20	; 0x03
    25ac:	5c 83       	std	Y+4, r21	; 0x04
    25ae:	6d 83       	std	Y+5, r22	; 0x05
    25b0:	7e 83       	std	Y+6, r23	; 0x06
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	85 56       	subi	r24, 0x65	; 101
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	9e 01       	movw	r18, r28
    25bc:	2d 5f       	subi	r18, 0xFD	; 253
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	b9 01       	movw	r22, r18
    25c2:	e2 d5       	rcall	.+3012   	; 0x3188 <_ZN4erom5EntryIdEaSERKd>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	85 56       	subi	r24, 0x65	; 101
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	fa d5       	rcall	.+3060   	; 0x31c4 <_ZNK4erom5EntryIdE4saveEb>
    25d0:	26 96       	adiw	r28, 0x06	; 6
    25d2:	e2 e0       	ldi	r30, 0x02	; 2
    25d4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000025d8 <_ZN8PHSensor5GetPHEv>:
    25d8:	ae e0       	ldi	r26, 0x0E	; 14
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e2 ef       	ldi	r30, 0xF2	; 242
    25de:	f2 e1       	ldi	r31, 0x12	; 18
    25e0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    25e4:	9e 87       	std	Y+14, r25	; 0x0e
    25e6:	8d 87       	std	Y+13, r24	; 0x0d
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	86 59       	subi	r24, 0x96	; 150
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	fc 01       	movw	r30, r24
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	a2 81       	ldd	r26, Z+2	; 0x02
    25f8:	b3 81       	ldd	r27, Z+3	; 0x03
    25fa:	fe 01       	movw	r30, r28
    25fc:	37 96       	adiw	r30, 0x07	; 7
    25fe:	22 e0       	ldi	r18, 0x02	; 2
    2600:	ac 01       	movw	r20, r24
    2602:	bd 01       	movw	r22, r26
    2604:	cf 01       	movw	r24, r30
    2606:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN6StringC1Efh>
    260a:	ce 01       	movw	r24, r28
    260c:	07 96       	adiw	r24, 0x07	; 7
    260e:	30 de       	rcall	.-928    	; 0x2270 <_ZNK6String5c_strEv>
    2610:	9c 01       	movw	r18, r24
    2612:	8d 85       	ldd	r24, Y+13	; 0x0d
    2614:	9e 85       	ldd	r25, Y+14	; 0x0e
    2616:	81 57       	subi	r24, 0x71	; 113
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	b9 01       	movw	r22, r18
    261c:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    2620:	ce 01       	movw	r24, r28
    2622:	07 96       	adiw	r24, 0x07	; 7
    2624:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	82 59       	subi	r24, 0x92	; 146
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	fc 01       	movw	r30, r24
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	a2 81       	ldd	r26, Z+2	; 0x02
    2638:	b3 81       	ldd	r27, Z+3	; 0x03
    263a:	22 e0       	ldi	r18, 0x02	; 2
    263c:	ac 01       	movw	r20, r24
    263e:	bd 01       	movw	r22, r26
    2640:	ce 01       	movw	r24, r28
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN6StringC1Efh>
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	11 de       	rcall	.-990    	; 0x2270 <_ZNK6String5c_strEv>
    264e:	9c 01       	movw	r18, r24
    2650:	8d 85       	ldd	r24, Y+13	; 0x0d
    2652:	9e 85       	ldd	r25, Y+14	; 0x0e
    2654:	8b 56       	subi	r24, 0x6B	; 107
    2656:	9f 4f       	sbci	r25, 0xFF	; 255
    2658:	b9 01       	movw	r22, r18
    265a:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	86 59       	subi	r24, 0x96	; 150
    266c:	9f 4f       	sbci	r25, 0xFF	; 255
    266e:	fc 01       	movw	r30, r24
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	a2 81       	ldd	r26, Z+2	; 0x02
    2676:	b3 81       	ldd	r27, Z+3	; 0x03
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	2e 96       	adiw	r28, 0x0e	; 14
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002684 <_ZN8PHSensor11CalculatePHEv>:
    2684:	a8 e0       	ldi	r26, 0x08	; 8
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e8 e4       	ldi	r30, 0x48	; 72
    268a:	f3 e1       	ldi	r31, 0x13	; 19
    268c:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x18>
    2690:	98 87       	std	Y+8, r25	; 0x08
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	8f 81       	ldd	r24, Y+7	; 0x07
    2696:	98 85       	ldd	r25, Y+8	; 0x08
    2698:	4f d1       	rcall	.+670    	; 0x2938 <_ZN8PHSensor10GetPHValueEv>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	2f 81       	ldd	r18, Y+7	; 0x07
    26a0:	38 85       	ldd	r19, Y+8	; 0x08
    26a2:	26 59       	subi	r18, 0x96	; 150
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	f9 01       	movw	r30, r18
    26a8:	80 83       	st	Z, r24
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	a2 83       	std	Z+2, r26	; 0x02
    26ae:	b3 83       	std	Z+3, r27	; 0x03
    26b0:	8b ef       	ldi	r24, 0xFB	; 251
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	fc 01       	movw	r30, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	89 f4       	brne	.+34     	; 0x26de <_ZN8PHSensor11CalculatePHEv+0x5a>
    26bc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    26c8:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    26cc:	a0 93 15 03 	sts	0x0315, r26	; 0x800315 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    26d0:	b0 93 16 03 	sts	0x0316, r27	; 0x800316 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    26d4:	8b ef       	ldi	r24, 0xFB	; 251
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	21 e0       	ldi	r18, 0x01	; 1
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
    26de:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    26e2:	9b 01       	movw	r18, r22
    26e4:	ac 01       	movw	r20, r24
    26e6:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    26ea:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    26ee:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    26f2:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    26f6:	79 01       	movw	r14, r18
    26f8:	8a 01       	movw	r16, r20
    26fa:	e8 1a       	sub	r14, r24
    26fc:	f9 0a       	sbc	r15, r25
    26fe:	0a 0b       	sbc	r16, r26
    2700:	1b 0b       	sbc	r17, r27
    2702:	d8 01       	movw	r26, r16
    2704:	c7 01       	movw	r24, r14
    2706:	21 e0       	ldi	r18, 0x01	; 1
    2708:	81 36       	cpi	r24, 0x61	; 97
    270a:	9a 4e       	sbci	r25, 0xEA	; 234
    270c:	a1 05       	cpc	r26, r1
    270e:	b1 05       	cpc	r27, r1
    2710:	08 f4       	brcc	.+2      	; 0x2714 <_ZN8PHSensor11CalculatePHEv+0x90>
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	22 23       	and	r18, r18
    2716:	09 f4       	brne	.+2      	; 0x271a <_ZN8PHSensor11CalculatePHEv+0x96>
    2718:	90 c0       	rjmp	.+288    	; 0x283a <_ZN8PHSensor11CalculatePHEv+0x1b6>
    271a:	8c e3       	ldi	r24, 0x3C	; 60
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	8f 81       	ldd	r24, Y+7	; 0x07
    2724:	98 85       	ldd	r25, Y+8	; 0x08
    2726:	8f 59       	subi	r24, 0x9F	; 159
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	86 d5       	rcall	.+2828   	; 0x3238 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	8b 83       	std	Y+3, r24	; 0x03
    2730:	2b 81       	ldd	r18, Y+3	; 0x03
    2732:	3c 81       	ldd	r19, Y+4	; 0x04
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	82 17       	cp	r24, r18
    273a:	93 07       	cpc	r25, r19
    273c:	dc f0       	brlt	.+54     	; 0x2774 <_ZN8PHSensor11CalculatePHEv+0xf0>
    273e:	8f 81       	ldd	r24, Y+7	; 0x07
    2740:	98 85       	ldd	r25, Y+8	; 0x08
    2742:	86 59       	subi	r24, 0x96	; 150
    2744:	9f 4f       	sbci	r25, 0xFF	; 255
    2746:	fc 01       	movw	r30, r24
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	a2 81       	ldd	r26, Z+2	; 0x02
    274e:	b3 81       	ldd	r27, Z+3	; 0x03
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__fixsfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	8f 81       	ldd	r24, Y+7	; 0x07
    2762:	98 85       	ldd	r25, Y+8	; 0x08
    2764:	8f 59       	subi	r24, 0x9F	; 159
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	9e 01       	movw	r18, r28
    276a:	2b 5f       	subi	r18, 0xFB	; 251
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	b9 01       	movw	r22, r18
    2770:	74 d5       	rcall	.+2792   	; 0x325a <_ZNSt6vectorIiSaIiEE9push_backERKi>
    2772:	2b c0       	rjmp	.+86     	; 0x27ca <_ZN8PHSensor11CalculatePHEv+0x146>
    2774:	8f 81       	ldd	r24, Y+7	; 0x07
    2776:	98 85       	ldd	r25, Y+8	; 0x08
    2778:	88 59       	subi	r24, 0x98	; 152
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	fc 01       	movw	r30, r24
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	ac 01       	movw	r20, r24
    2784:	4f 5f       	subi	r20, 0xFF	; 255
    2786:	5f 4f       	sbci	r21, 0xFF	; 255
    2788:	2f 81       	ldd	r18, Y+7	; 0x07
    278a:	38 85       	ldd	r19, Y+8	; 0x08
    278c:	28 59       	subi	r18, 0x98	; 152
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	f9 01       	movw	r30, r18
    2792:	51 83       	std	Z+1, r21	; 0x01
    2794:	40 83       	st	Z, r20
    2796:	9c 01       	movw	r18, r24
    2798:	8f 81       	ldd	r24, Y+7	; 0x07
    279a:	98 85       	ldd	r25, Y+8	; 0x08
    279c:	8f 59       	subi	r24, 0x9F	; 159
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	b9 01       	movw	r22, r18
    27a2:	75 d5       	rcall	.+2794   	; 0x328e <_ZNSt6vectorIiSaIiEEixEj>
    27a4:	8c 01       	movw	r16, r24
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	86 59       	subi	r24, 0x96	; 150
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	fc 01       	movw	r30, r24
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	a2 81       	ldd	r26, Z+2	; 0x02
    27b6:	b3 81       	ldd	r27, Z+3	; 0x03
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__fixsfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	f8 01       	movw	r30, r16
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	98 85       	ldd	r25, Y+8	; 0x08
    27ce:	88 59       	subi	r24, 0x98	; 152
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	fc 01       	movw	r30, r24
    27d4:	20 81       	ld	r18, Z
    27d6:	31 81       	ldd	r19, Z+1	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	28 17       	cp	r18, r24
    27de:	39 07       	cpc	r19, r25
    27e0:	39 f4       	brne	.+14     	; 0x27f0 <_ZN8PHSensor11CalculatePHEv+0x16c>
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
    27e4:	98 85       	ldd	r25, Y+8	; 0x08
    27e6:	88 59       	subi	r24, 0x98	; 152
    27e8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ea:	fc 01       	movw	r30, r24
    27ec:	11 82       	std	Z+1, r1	; 0x01
    27ee:	10 82       	st	Z, r1
    27f0:	8f 81       	ldd	r24, Y+7	; 0x07
    27f2:	98 85       	ldd	r25, Y+8	; 0x08
    27f4:	8f 59       	subi	r24, 0x9F	; 159
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	48 d5       	rcall	.+2704   	; 0x328e <_ZNSt6vectorIiSaIiEEixEj>
    27fe:	bc 01       	movw	r22, r24
    2800:	2b 81       	ldd	r18, Y+3	; 0x03
    2802:	3c 81       	ldd	r19, Y+4	; 0x04
    2804:	8f 81       	ldd	r24, Y+7	; 0x07
    2806:	98 85       	ldd	r25, Y+8	; 0x08
    2808:	a9 01       	movw	r20, r18
    280a:	54 d2       	rcall	.+1192   	; 0x2cb4 <_ZN8PHSensor16CalculateAverageEPii>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	2f 81       	ldd	r18, Y+7	; 0x07
    2812:	38 85       	ldd	r19, Y+8	; 0x08
    2814:	22 59       	subi	r18, 0x92	; 146
    2816:	3f 4f       	sbci	r19, 0xFF	; 255
    2818:	f9 01       	movw	r30, r18
    281a:	80 83       	st	Z, r24
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	a2 83       	std	Z+2, r26	; 0x02
    2820:	b3 83       	std	Z+3, r27	; 0x03
    2822:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    282e:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    2832:	a0 93 15 03 	sts	0x0315, r26	; 0x800315 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    2836:	b0 93 16 03 	sts	0x0316, r27	; 0x800316 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    283a:	80 e4       	ldi	r24, 0x40	; 64
    283c:	93 e0       	ldi	r25, 0x03	; 3
    283e:	bc 01       	movw	r22, r24
    2840:	84 e5       	ldi	r24, 0x54	; 84
    2842:	95 e0       	ldi	r25, 0x05	; 5
    2844:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    2848:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2854:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    2858:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    285c:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2860:	79 01       	movw	r14, r18
    2862:	8a 01       	movw	r16, r20
    2864:	e8 1a       	sub	r14, r24
    2866:	f9 0a       	sbc	r15, r25
    2868:	0a 0b       	sbc	r16, r26
    286a:	1b 0b       	sbc	r17, r27
    286c:	d8 01       	movw	r26, r16
    286e:	c7 01       	movw	r24, r14
    2870:	2a e0       	ldi	r18, 0x0A	; 10
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	ac 01       	movw	r20, r24
    2876:	bd 01       	movw	r22, r26
    2878:	84 e5       	ldi	r24, 0x54	; 84
    287a:	95 e0       	ldi	r25, 0x05	; 5
    287c:	0e 94 c0 29 	call	0x5380	; 0x5380 <_ZN5Print7printlnEmi>
    2880:	8f e4       	ldi	r24, 0x4F	; 79
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	bc 01       	movw	r22, r24
    2886:	84 e5       	ldi	r24, 0x54	; 84
    2888:	95 e0       	ldi	r25, 0x05	; 5
    288a:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	98 85       	ldd	r25, Y+8	; 0x08
    2892:	8f 59       	subi	r24, 0x9F	; 159
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	d0 d4       	rcall	.+2464   	; 0x3238 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    2898:	4a e0       	ldi	r20, 0x0A	; 10
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	bc 01       	movw	r22, r24
    289e:	84 e5       	ldi	r24, 0x54	; 84
    28a0:	95 e0       	ldi	r25, 0x05	; 5
    28a2:	0e 94 ac 29 	call	0x5358	; 0x5358 <_ZN5Print7printlnEji>
    28a6:	85 e6       	ldi	r24, 0x65	; 101
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	bc 01       	movw	r22, r24
    28ac:	84 e5       	ldi	r24, 0x54	; 84
    28ae:	95 e0       	ldi	r25, 0x05	; 5
    28b0:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	98 85       	ldd	r25, Y+8	; 0x08
    28b8:	88 59       	subi	r24, 0x98	; 152
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	fc 01       	movw	r30, r24
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	4a e0       	ldi	r20, 0x0A	; 10
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	bc 01       	movw	r22, r24
    28c8:	84 e5       	ldi	r24, 0x54	; 84
    28ca:	95 e0       	ldi	r25, 0x05	; 5
    28cc:	0e 94 8b 29 	call	0x5316	; 0x5316 <_ZN5Print7printlnEii>
    28d0:	89 e7       	ldi	r24, 0x79	; 121
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	bc 01       	movw	r22, r24
    28d6:	84 e5       	ldi	r24, 0x54	; 84
    28d8:	95 e0       	ldi	r25, 0x05	; 5
    28da:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    28de:	8f 81       	ldd	r24, Y+7	; 0x07
    28e0:	98 85       	ldd	r25, Y+8	; 0x08
    28e2:	82 59       	subi	r24, 0x92	; 146
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	fc 01       	movw	r30, r24
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	a2 81       	ldd	r26, Z+2	; 0x02
    28ee:	b3 81       	ldd	r27, Z+3	; 0x03
    28f0:	22 e0       	ldi	r18, 0x02	; 2
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	ac 01       	movw	r20, r24
    28f6:	bd 01       	movw	r22, r26
    28f8:	84 e5       	ldi	r24, 0x54	; 84
    28fa:	95 e0       	ldi	r25, 0x05	; 5
    28fc:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_ZN5Print7printlnEdi>
    2900:	87 e8       	ldi	r24, 0x87	; 135
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	bc 01       	movw	r22, r24
    2906:	84 e5       	ldi	r24, 0x54	; 84
    2908:	95 e0       	ldi	r25, 0x05	; 5
    290a:	0e 94 a5 28 	call	0x514a	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    290e:	8f 81       	ldd	r24, Y+7	; 0x07
    2910:	98 85       	ldd	r25, Y+8	; 0x08
    2912:	86 59       	subi	r24, 0x96	; 150
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	fc 01       	movw	r30, r24
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	a2 81       	ldd	r26, Z+2	; 0x02
    291e:	b3 81       	ldd	r27, Z+3	; 0x03
    2920:	22 e0       	ldi	r18, 0x02	; 2
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	ac 01       	movw	r20, r24
    2926:	bd 01       	movw	r22, r26
    2928:	84 e5       	ldi	r24, 0x54	; 84
    292a:	95 e0       	ldi	r25, 0x05	; 5
    292c:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_ZN5Print7printlnEdi>
    2930:	28 96       	adiw	r28, 0x08	; 8
    2932:	e6 e0       	ldi	r30, 0x06	; 6
    2934:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x18>

00002938 <_ZN8PHSensor10GetPHValueEv>:
    2938:	ac e0       	ldi	r26, 0x0C	; 12
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e2 ea       	ldi	r30, 0xA2	; 162
    293e:	f4 e1       	ldi	r31, 0x14	; 20
    2940:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <__prologue_saves__+0x14>
    2944:	9c 87       	std	Y+12, r25	; 0x0c
    2946:	8b 87       	std	Y+11, r24	; 0x0b
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	fc 01       	movw	r30, r24
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	89 f4       	brne	.+34     	; 0x2976 <_ZN8PHSensor10GetPHValueEv+0x3e>
    2954:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    2960:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    2964:	a0 93 19 03 	sts	0x0319, r26	; 0x800319 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    2968:	b0 93 1a 03 	sts	0x031A, r27	; 0x80031a <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    296c:	83 e0       	ldi	r24, 0x03	; 3
    296e:	93 e0       	ldi	r25, 0x03	; 3
    2970:	21 e0       	ldi	r18, 0x01	; 1
    2972:	fc 01       	movw	r30, r24
    2974:	20 83       	st	Z, r18
    2976:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    297a:	9b 01       	movw	r18, r22
    297c:	ac 01       	movw	r20, r24
    297e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZN8PHSensor10GetPHValueEvE12samplingTime>
    2982:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x1>
    2986:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x2>
    298a:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <_ZZN8PHSensor10GetPHValueEvE12samplingTime+0x3>
    298e:	79 01       	movw	r14, r18
    2990:	8a 01       	movw	r16, r20
    2992:	e8 1a       	sub	r14, r24
    2994:	f9 0a       	sbc	r15, r25
    2996:	0a 0b       	sbc	r16, r26
    2998:	1b 0b       	sbc	r17, r27
    299a:	d8 01       	movw	r26, r16
    299c:	c7 01       	movw	r24, r14
    299e:	21 e0       	ldi	r18, 0x01	; 1
    29a0:	89 3e       	cpi	r24, 0xE9	; 233
    29a2:	93 40       	sbci	r25, 0x03	; 3
    29a4:	a1 05       	cpc	r26, r1
    29a6:	b1 05       	cpc	r27, r1
    29a8:	08 f4       	brcc	.+2      	; 0x29ac <_ZN8PHSensor10GetPHValueEv+0x74>
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	22 23       	and	r18, r18
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <_ZN8PHSensor10GetPHValueEv+0x7a>
    29b0:	af c0       	rjmp	.+350    	; 0x2b10 <_ZN8PHSensor10GetPHValueEv+0x1d8>
    29b2:	88 e2       	ldi	r24, 0x28	; 40
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    29bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    29be:	83 5a       	subi	r24, 0xA3	; 163
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	fc 01       	movw	r30, r24
    29c4:	00 81       	ld	r16, Z
    29c6:	11 81       	ldd	r17, Z+1	; 0x01
    29c8:	98 01       	movw	r18, r16
    29ca:	2f 5f       	subi	r18, 0xFF	; 255
    29cc:	3f 4f       	sbci	r19, 0xFF	; 255
    29ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d2:	83 5a       	subi	r24, 0xA3	; 163
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	fc 01       	movw	r30, r24
    29d8:	31 83       	std	Z+1, r19	; 0x01
    29da:	20 83       	st	Z, r18
    29dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    29de:	9c 85       	ldd	r25, Y+12	; 0x0c
    29e0:	fc 01       	movw	r30, r24
    29e2:	83 85       	ldd	r24, Z+11	; 0x0b
    29e4:	94 85       	ldd	r25, Z+12	; 0x0c
    29e6:	0e 94 ab 2b 	call	0x5756	; 0x5756 <analogRead>
    29ea:	ac 01       	movw	r20, r24
    29ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    29ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    29f0:	c8 01       	movw	r24, r16
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	82 0f       	add	r24, r18
    29f8:	93 1f       	adc	r25, r19
    29fa:	0d 96       	adiw	r24, 0x0d	; 13
    29fc:	fc 01       	movw	r30, r24
    29fe:	51 83       	std	Z+1, r21	; 0x01
    2a00:	40 83       	st	Z, r20
    2a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a04:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a06:	83 5a       	subi	r24, 0xA3	; 163
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 81       	ld	r18, Z
    2a0e:	31 81       	ldd	r19, Z+1	; 0x01
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	28 17       	cp	r18, r24
    2a16:	39 07       	cpc	r19, r25
    2a18:	39 f4       	brne	.+14     	; 0x2a28 <_ZN8PHSensor10GetPHValueEv+0xf0>
    2a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a1e:	83 5a       	subi	r24, 0xA3	; 163
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	fc 01       	movw	r30, r24
    2a24:	11 82       	std	Z+1, r1	; 0x01
    2a26:	10 82       	st	Z, r1
    2a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a2c:	9c 01       	movw	r18, r24
    2a2e:	23 5f       	subi	r18, 0xF3	; 243
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	49 81       	ldd	r20, Y+1	; 0x01
    2a34:	5a 81       	ldd	r21, Y+2	; 0x02
    2a36:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a38:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	3b d1       	rcall	.+630    	; 0x2cb4 <_ZN8PHSensor16CalculateAverageEPii>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	ad 83       	std	Y+5, r26	; 0x05
    2a48:	be 83       	std	Y+6, r27	; 0x06
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 ea       	ldi	r20, 0xA0	; 160
    2a50:	50 e4       	ldi	r21, 0x40	; 64
    2a52:	6b 81       	ldd	r22, Y+3	; 0x03
    2a54:	7c 81       	ldd	r23, Y+4	; 0x04
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 ed 24 	call	0x49da	; 0x49da <__divsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a78:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a7a:	2e 58       	subi	r18, 0x8E	; 142
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	f9 01       	movw	r30, r18
    2a80:	80 83       	st	Z, r24
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	a2 83       	std	Z+2, r26	; 0x02
    2a86:	b3 83       	std	Z+3, r27	; 0x03
    2a88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a8c:	8e 58       	subi	r24, 0x8E	; 142
    2a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a90:	fc 01       	movw	r30, r24
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	a2 81       	ldd	r26, Z+2	; 0x02
    2a98:	b3 81       	ldd	r27, Z+3	; 0x03
    2a9a:	9c 01       	movw	r18, r24
    2a9c:	ad 01       	movw	r20, r26
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	80 e2       	ldi	r24, 0x20	; 32
    2aa4:	90 e4       	ldi	r25, 0x40	; 64
    2aa6:	0e 94 84 24 	call	0x4908	; 0x4908 <__subsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	2c ee       	ldi	r18, 0xEC	; 236
    2ab0:	31 e5       	ldi	r19, 0x51	; 81
    2ab2:	48 e3       	ldi	r20, 0x38	; 56
    2ab4:	5e e3       	ldi	r21, 0x3E	; 62
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 ed 24 	call	0x49da	; 0x49da <__divsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 ee       	ldi	r20, 0xE0	; 224
    2ac8:	50 e4       	ldi	r21, 0x40	; 64
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 85 24 	call	0x490a	; 0x490a <__addsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	6c 01       	movw	r12, r24
    2ad8:	7d 01       	movw	r14, r26
    2ada:	8b 85       	ldd	r24, Y+11	; 0x0b
    2adc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ade:	85 56       	subi	r24, 0x65	; 101
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	43 d3       	rcall	.+1670   	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	a2 81       	ldd	r26, Z+2	; 0x02
    2aec:	b3 81       	ldd	r27, Z+3	; 0x03
    2aee:	9c 01       	movw	r18, r24
    2af0:	ad 01       	movw	r20, r26
    2af2:	c7 01       	movw	r24, r14
    2af4:	b6 01       	movw	r22, r12
    2af6:	0e 94 85 24 	call	0x490a	; 0x490a <__addsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8f 83       	std	Y+7, r24	; 0x07
    2b00:	98 87       	std	Y+8, r25	; 0x08
    2b02:	a9 87       	std	Y+9, r26	; 0x09
    2b04:	ba 87       	std	Y+10, r27	; 0x0a
    2b06:	8f 81       	ldd	r24, Y+7	; 0x07
    2b08:	98 85       	ldd	r25, Y+8	; 0x08
    2b0a:	a9 85       	ldd	r26, Y+9	; 0x09
    2b0c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <_ZN8PHSensor10GetPHValueEv+0x1ea>
    2b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b14:	86 59       	subi	r24, 0x96	; 150
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b20:	b3 81       	ldd	r27, Z+3	; 0x03
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	2c 96       	adiw	r28, 0x0c	; 12
    2b28:	e8 e0       	ldi	r30, 0x08	; 8
    2b2a:	0c 94 67 2f 	jmp	0x5ece	; 0x5ece <__epilogue_restores__+0x14>

00002b2e <_ZN15StringSumHelperD1Ev>:
    2b2e:	a2 e0       	ldi	r26, 0x02	; 2
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ed e9       	ldi	r30, 0x9D	; 157
    2b34:	f5 e1       	ldi	r31, 0x15	; 21
    2b36:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2b46:	22 96       	adiw	r28, 0x02	; 2
    2b48:	e2 e0       	ldi	r30, 0x02	; 2
    2b4a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002b4e <_ZN8PHSensor12PrintPHToLCDEv>:
    2b4e:	ae e1       	ldi	r26, 0x1E	; 30
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	ed ea       	ldi	r30, 0xAD	; 173
    2b54:	f5 e1       	ldi	r31, 0x15	; 21
    2b56:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b62:	3a dd       	rcall	.-1420   	; 0x25d8 <_ZN8PHSensor5GetPHEv>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	ab 83       	std	Y+3, r26	; 0x03
    2b6e:	bc 83       	std	Y+4, r27	; 0x04
    2b70:	8b e0       	ldi	r24, 0x0B	; 11
    2b72:	93 e0       	ldi	r25, 0x03	; 3
    2b74:	fc 01       	movw	r30, r24
    2b76:	80 81       	ld	r24, Z
    2b78:	88 23       	and	r24, r24
    2b7a:	89 f4       	brne	.+34     	; 0x2b9e <_ZN8PHSensor12PrintPHToLCDEv+0x50>
    2b7c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2b88:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2b8c:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2b90:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2b94:	8b e0       	ldi	r24, 0x0B	; 11
    2b96:	93 e0       	ldi	r25, 0x03	; 3
    2b98:	21 e0       	ldi	r18, 0x01	; 1
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	20 83       	st	Z, r18
    2b9e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    2ba2:	9b 01       	movw	r18, r22
    2ba4:	ac 01       	movw	r20, r24
    2ba6:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2baa:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2bae:	a0 91 1d 03 	lds	r26, 0x031D	; 0x80031d <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2bb2:	b0 91 1e 03 	lds	r27, 0x031E	; 0x80031e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2bb6:	28 1b       	sub	r18, r24
    2bb8:	39 0b       	sbc	r19, r25
    2bba:	4a 0b       	sbc	r20, r26
    2bbc:	5b 0b       	sbc	r21, r27
    2bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc2:	81 5a       	subi	r24, 0xA1	; 161
    2bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	80 57       	subi	r24, 0x70	; 112
    2bce:	9e 4f       	sbci	r25, 0xFE	; 254
    2bd0:	09 2e       	mov	r0, r25
    2bd2:	00 0c       	add	r0, r0
    2bd4:	aa 0b       	sbc	r26, r26
    2bd6:	bb 0b       	sbc	r27, r27
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	82 17       	cp	r24, r18
    2bdc:	93 07       	cpc	r25, r19
    2bde:	a4 07       	cpc	r26, r20
    2be0:	b5 07       	cpc	r27, r21
    2be2:	08 f0       	brcs	.+2      	; 0x2be6 <_ZN8PHSensor12PrintPHToLCDEv+0x98>
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	66 23       	and	r22, r22
    2be8:	09 f4       	brne	.+2      	; 0x2bec <_ZN8PHSensor12PrintPHToLCDEv+0x9e>
    2bea:	60 c0       	rjmp	.+192    	; 0x2cac <_ZN8PHSensor12PrintPHToLCDEv+0x15e>
    2bec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bf0:	8a 58       	subi	r24, 0x8A	; 138
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <_ZN8PHSensor12PrintPHToLCDEv+0xb0>
    2bfc:	41 c0       	rjmp	.+130    	; 0x2c80 <_ZN8PHSensor12PrintPHToLCDEv+0x132>
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	ab 81       	ldd	r26, Y+3	; 0x03
    2c04:	bc 81       	ldd	r27, Y+4	; 0x04
    2c06:	fe 01       	movw	r30, r28
    2c08:	71 96       	adiw	r30, 0x11	; 17
    2c0a:	22 e0       	ldi	r18, 0x02	; 2
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	bd 01       	movw	r22, r26
    2c10:	cf 01       	movw	r24, r30
    2c12:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN6StringC1Edh>
    2c16:	ce 01       	movw	r24, r28
    2c18:	0b 96       	adiw	r24, 0x0b	; 11
    2c1a:	6e e0       	ldi	r22, 0x0E	; 14
    2c1c:	71 e0       	ldi	r23, 0x01	; 1
    2c1e:	39 db       	rcall	.-2446   	; 0x2292 <_ZN15StringSumHelperC1EPKc>
    2c20:	9e 01       	movw	r18, r28
    2c22:	2f 5e       	subi	r18, 0xEF	; 239
    2c24:	3f 4f       	sbci	r19, 0xFF	; 255
    2c26:	ce 01       	movw	r24, r28
    2c28:	0b 96       	adiw	r24, 0x0b	; 11
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <_ZplRK15StringSumHelperRK6String>
    2c30:	9c 01       	movw	r18, r24
    2c32:	ce 01       	movw	r24, r28
    2c34:	47 96       	adiw	r24, 0x17	; 23
    2c36:	b9 01       	movw	r22, r18
    2c38:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	0b 96       	adiw	r24, 0x0b	; 11
    2c40:	76 df       	rcall	.-276    	; 0x2b2e <_ZN15StringSumHelperD1Ev>
    2c42:	ce 01       	movw	r24, r28
    2c44:	41 96       	adiw	r24, 0x11	; 17
    2c46:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2c4a:	9e 01       	movw	r18, r28
    2c4c:	29 5e       	subi	r18, 0xE9	; 233
    2c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c50:	ce 01       	movw	r24, r28
    2c52:	05 96       	adiw	r24, 0x05	; 5
    2c54:	b9 01       	movw	r22, r18
    2c56:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    2c5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c5e:	89 58       	subi	r24, 0x89	; 137
    2c60:	9f 4f       	sbci	r25, 0xFF	; 255
    2c62:	9e 01       	movw	r18, r28
    2c64:	2b 5f       	subi	r18, 0xFB	; 251
    2c66:	3f 4f       	sbci	r19, 0xFF	; 255
    2c68:	a9 01       	movw	r20, r18
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	dd da       	rcall	.-2630   	; 0x222a <_ZN7LCDBase9PrintLineEs6String>
    2c70:	ce 01       	movw	r24, r28
    2c72:	05 96       	adiw	r24, 0x05	; 5
    2c74:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2c78:	ce 01       	movw	r24, r28
    2c7a:	47 96       	adiw	r24, 0x17	; 23
    2c7c:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    2c80:	8d e0       	ldi	r24, 0x0D	; 13
    2c82:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <digitalRead>
    2c86:	98 2f       	mov	r25, r24
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	89 27       	eor	r24, r25
    2c8c:	68 2f       	mov	r22, r24
    2c8e:	8d e0       	ldi	r24, 0x0D	; 13
    2c90:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
    2c94:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2ca0:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2ca4:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2ca8:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2cac:	6e 96       	adiw	r28, 0x1e	; 30
    2cae:	e2 e0       	ldi	r30, 0x02	; 2
    2cb0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002cb4 <_ZN8PHSensor16CalculateAverageEPii>:
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	68 97       	sbiw	r28, 0x18	; 24
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	98 8b       	std	Y+16, r25	; 0x10
    2cd2:	8f 87       	std	Y+15, r24	; 0x0f
    2cd4:	7a 8b       	std	Y+18, r23	; 0x12
    2cd6:	69 8b       	std	Y+17, r22	; 0x11
    2cd8:	5c 8b       	std	Y+20, r21	; 0x14
    2cda:	4b 8b       	std	Y+19, r20	; 0x13
    2cdc:	1f 82       	std	Y+7, r1	; 0x07
    2cde:	18 86       	std	Y+8, r1	; 0x08
    2ce0:	19 86       	std	Y+9, r1	; 0x09
    2ce2:	1a 86       	std	Y+10, r1	; 0x0a
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	18 16       	cp	r1, r24
    2cea:	19 06       	cpc	r1, r25
    2cec:	5c f0       	brlt	.+22     	; 0x2d04 <_ZN8PHSensor16CalculateAverageEPii+0x50>
    2cee:	82 e9       	ldi	r24, 0x92	; 146
    2cf0:	93 e0       	ldi	r25, 0x03	; 3
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	84 e5       	ldi	r24, 0x54	; 84
    2cf6:	95 e0       	ldi	r25, 0x05	; 5
    2cf8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	dc 01       	movw	r26, r24
    2d02:	2b c1       	rjmp	.+598    	; 0x2f5a <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2d04:	8b 89       	ldd	r24, Y+19	; 0x13
    2d06:	9c 89       	ldd	r25, Y+20	; 0x14
    2d08:	05 97       	sbiw	r24, 0x05	; 5
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <_ZN8PHSensor16CalculateAverageEPii+0x5a>
    2d0c:	49 c0       	rjmp	.+146    	; 0x2da0 <_ZN8PHSensor16CalculateAverageEPii+0xec>
    2d0e:	1a 82       	std	Y+2, r1	; 0x02
    2d10:	19 82       	std	Y+1, r1	; 0x01
    2d12:	20 c0       	rjmp	.+64     	; 0x2d54 <_ZN8PHSensor16CalculateAverageEPii+0xa0>
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	9a 81       	ldd	r25, Y+2	; 0x02
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	29 89       	ldd	r18, Y+17	; 0x11
    2d1e:	3a 89       	ldd	r19, Y+18	; 0x12
    2d20:	82 0f       	add	r24, r18
    2d22:	93 1f       	adc	r25, r19
    2d24:	fc 01       	movw	r30, r24
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	09 2e       	mov	r0, r25
    2d2c:	00 0c       	add	r0, r0
    2d2e:	aa 0b       	sbc	r26, r26
    2d30:	bb 0b       	sbc	r27, r27
    2d32:	2f 81       	ldd	r18, Y+7	; 0x07
    2d34:	38 85       	ldd	r19, Y+8	; 0x08
    2d36:	49 85       	ldd	r20, Y+9	; 0x09
    2d38:	5a 85       	ldd	r21, Y+10	; 0x0a
    2d3a:	82 0f       	add	r24, r18
    2d3c:	93 1f       	adc	r25, r19
    2d3e:	a4 1f       	adc	r26, r20
    2d40:	b5 1f       	adc	r27, r21
    2d42:	8f 83       	std	Y+7, r24	; 0x07
    2d44:	98 87       	std	Y+8, r25	; 0x08
    2d46:	a9 87       	std	Y+9, r26	; 0x09
    2d48:	ba 87       	std	Y+10, r27	; 0x0a
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	29 81       	ldd	r18, Y+1	; 0x01
    2d56:	3a 81       	ldd	r19, Y+2	; 0x02
    2d58:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5c:	28 17       	cp	r18, r24
    2d5e:	39 07       	cpc	r19, r25
    2d60:	cc f2       	brlt	.-78     	; 0x2d14 <_ZN8PHSensor16CalculateAverageEPii+0x60>
    2d62:	8b 89       	ldd	r24, Y+19	; 0x13
    2d64:	9c 89       	ldd	r25, Y+20	; 0x14
    2d66:	9c 01       	movw	r18, r24
    2d68:	99 0f       	add	r25, r25
    2d6a:	44 0b       	sbc	r20, r20
    2d6c:	55 0b       	sbc	r21, r21
    2d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d70:	98 85       	ldd	r25, Y+8	; 0x08
    2d72:	a9 85       	ldd	r26, Y+9	; 0x09
    2d74:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodsi4>
    2d7e:	da 01       	movw	r26, r20
    2d80:	c9 01       	movw	r24, r18
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__floatsisf>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8b 87       	std	Y+11, r24	; 0x0b
    2d90:	9c 87       	std	Y+12, r25	; 0x0c
    2d92:	ad 87       	std	Y+13, r26	; 0x0d
    2d94:	be 87       	std	Y+14, r27	; 0x0e
    2d96:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d98:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d9a:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d9c:	be 85       	ldd	r27, Y+14	; 0x0e
    2d9e:	dd c0       	rjmp	.+442    	; 0x2f5a <_ZN8PHSensor16CalculateAverageEPii+0x2a6>
    2da0:	89 89       	ldd	r24, Y+17	; 0x11
    2da2:	9a 89       	ldd	r25, Y+18	; 0x12
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 81       	ld	r18, Z
    2da8:	31 81       	ldd	r19, Z+1	; 0x01
    2daa:	89 89       	ldd	r24, Y+17	; 0x11
    2dac:	9a 89       	ldd	r25, Y+18	; 0x12
    2dae:	02 96       	adiw	r24, 0x02	; 2
    2db0:	fc 01       	movw	r30, r24
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	28 17       	cp	r18, r24
    2db8:	39 07       	cpc	r19, r25
    2dba:	7c f4       	brge	.+30     	; 0x2dda <_ZN8PHSensor16CalculateAverageEPii+0x126>
    2dbc:	89 89       	ldd	r24, Y+17	; 0x11
    2dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	89 89       	ldd	r24, Y+17	; 0x11
    2dcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dce:	fc 01       	movw	r30, r24
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	0e c0       	rjmp	.+28     	; 0x2df6 <_ZN8PHSensor16CalculateAverageEPii+0x142>
    2dda:	89 89       	ldd	r24, Y+17	; 0x11
    2ddc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dde:	fc 01       	movw	r30, r24
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	89 89       	ldd	r24, Y+17	; 0x11
    2dea:	9a 89       	ldd	r25, Y+18	; 0x12
    2dec:	fc 01       	movw	r30, r24
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	80 c0       	rjmp	.+256    	; 0x2f00 <_ZN8PHSensor16CalculateAverageEPii+0x24c>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	29 89       	ldd	r18, Y+17	; 0x11
    2e0a:	3a 89       	ldd	r19, Y+18	; 0x12
    2e0c:	82 0f       	add	r24, r18
    2e0e:	93 1f       	adc	r25, r19
    2e10:	fc 01       	movw	r30, r24
    2e12:	20 81       	ld	r18, Z
    2e14:	31 81       	ldd	r19, Z+1	; 0x01
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	28 17       	cp	r18, r24
    2e1c:	39 07       	cpc	r19, r25
    2e1e:	04 f5       	brge	.+64     	; 0x2e60 <_ZN8PHSensor16CalculateAverageEPii+0x1ac>
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	09 2e       	mov	r0, r25
    2e26:	00 0c       	add	r0, r0
    2e28:	aa 0b       	sbc	r26, r26
    2e2a:	bb 0b       	sbc	r27, r27
    2e2c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e2e:	38 85       	ldd	r19, Y+8	; 0x08
    2e30:	49 85       	ldd	r20, Y+9	; 0x09
    2e32:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e34:	82 0f       	add	r24, r18
    2e36:	93 1f       	adc	r25, r19
    2e38:	a4 1f       	adc	r26, r20
    2e3a:	b5 1f       	adc	r27, r21
    2e3c:	8f 83       	std	Y+7, r24	; 0x07
    2e3e:	98 87       	std	Y+8, r25	; 0x08
    2e40:	a9 87       	std	Y+9, r26	; 0x09
    2e42:	ba 87       	std	Y+10, r27	; 0x0a
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	29 89       	ldd	r18, Y+17	; 0x11
    2e4e:	3a 89       	ldd	r19, Y+18	; 0x12
    2e50:	82 0f       	add	r24, r18
    2e52:	93 1f       	adc	r25, r19
    2e54:	fc 01       	movw	r30, r24
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
    2e5e:	4b c0       	rjmp	.+150    	; 0x2ef6 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	29 89       	ldd	r18, Y+17	; 0x11
    2e6a:	3a 89       	ldd	r19, Y+18	; 0x12
    2e6c:	82 0f       	add	r24, r18
    2e6e:	93 1f       	adc	r25, r19
    2e70:	fc 01       	movw	r30, r24
    2e72:	20 81       	ld	r18, Z
    2e74:	31 81       	ldd	r19, Z+1	; 0x01
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	82 17       	cp	r24, r18
    2e7c:	93 07       	cpc	r25, r19
    2e7e:	04 f5       	brge	.+64     	; 0x2ec0 <_ZN8PHSensor16CalculateAverageEPii+0x20c>
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	09 2e       	mov	r0, r25
    2e86:	00 0c       	add	r0, r0
    2e88:	aa 0b       	sbc	r26, r26
    2e8a:	bb 0b       	sbc	r27, r27
    2e8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2e8e:	38 85       	ldd	r19, Y+8	; 0x08
    2e90:	49 85       	ldd	r20, Y+9	; 0x09
    2e92:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e94:	82 0f       	add	r24, r18
    2e96:	93 1f       	adc	r25, r19
    2e98:	a4 1f       	adc	r26, r20
    2e9a:	b5 1f       	adc	r27, r21
    2e9c:	8f 83       	std	Y+7, r24	; 0x07
    2e9e:	98 87       	std	Y+8, r25	; 0x08
    2ea0:	a9 87       	std	Y+9, r26	; 0x09
    2ea2:	ba 87       	std	Y+10, r27	; 0x0a
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	29 89       	ldd	r18, Y+17	; 0x11
    2eae:	3a 89       	ldd	r19, Y+18	; 0x12
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	9c 83       	std	Y+4, r25	; 0x04
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
    2ebe:	1b c0       	rjmp	.+54     	; 0x2ef6 <_ZN8PHSensor16CalculateAverageEPii+0x242>
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	29 89       	ldd	r18, Y+17	; 0x11
    2eca:	3a 89       	ldd	r19, Y+18	; 0x12
    2ecc:	82 0f       	add	r24, r18
    2ece:	93 1f       	adc	r25, r19
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	09 2e       	mov	r0, r25
    2ed8:	00 0c       	add	r0, r0
    2eda:	aa 0b       	sbc	r26, r26
    2edc:	bb 0b       	sbc	r27, r27
    2ede:	2f 81       	ldd	r18, Y+7	; 0x07
    2ee0:	38 85       	ldd	r19, Y+8	; 0x08
    2ee2:	49 85       	ldd	r20, Y+9	; 0x09
    2ee4:	5a 85       	ldd	r21, Y+10	; 0x0a
    2ee6:	82 0f       	add	r24, r18
    2ee8:	93 1f       	adc	r25, r19
    2eea:	a4 1f       	adc	r26, r20
    2eec:	b5 1f       	adc	r27, r21
    2eee:	8f 83       	std	Y+7, r24	; 0x07
    2ef0:	98 87       	std	Y+8, r25	; 0x08
    2ef2:	a9 87       	std	Y+9, r26	; 0x09
    2ef4:	ba 87       	std	Y+10, r27	; 0x0a
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	29 81       	ldd	r18, Y+1	; 0x01
    2f02:	3a 81       	ldd	r19, Y+2	; 0x02
    2f04:	8b 89       	ldd	r24, Y+19	; 0x13
    2f06:	9c 89       	ldd	r25, Y+20	; 0x14
    2f08:	28 17       	cp	r18, r24
    2f0a:	39 07       	cpc	r19, r25
    2f0c:	0c f4       	brge	.+2      	; 0x2f10 <_ZN8PHSensor16CalculateAverageEPii+0x25c>
    2f0e:	78 cf       	rjmp	.-272    	; 0x2e00 <_ZN8PHSensor16CalculateAverageEPii+0x14c>
    2f10:	6f 81       	ldd	r22, Y+7	; 0x07
    2f12:	78 85       	ldd	r23, Y+8	; 0x08
    2f14:	89 85       	ldd	r24, Y+9	; 0x09
    2f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f18:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__floatsisf>
    2f1c:	6b 01       	movw	r12, r22
    2f1e:	7c 01       	movw	r14, r24
    2f20:	8b 89       	ldd	r24, Y+19	; 0x13
    2f22:	9c 89       	ldd	r25, Y+20	; 0x14
    2f24:	02 97       	sbiw	r24, 0x02	; 2
    2f26:	09 2e       	mov	r0, r25
    2f28:	00 0c       	add	r0, r0
    2f2a:	aa 0b       	sbc	r26, r26
    2f2c:	bb 0b       	sbc	r27, r27
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__floatsisf>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9c 01       	movw	r18, r24
    2f3c:	ad 01       	movw	r20, r26
    2f3e:	c7 01       	movw	r24, r14
    2f40:	b6 01       	movw	r22, r12
    2f42:	0e 94 ed 24 	call	0x49da	; 0x49da <__divsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8b 87       	std	Y+11, r24	; 0x0b
    2f4c:	9c 87       	std	Y+12, r25	; 0x0c
    2f4e:	ad 87       	std	Y+13, r26	; 0x0d
    2f50:	be 87       	std	Y+14, r27	; 0x0e
    2f52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f54:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f56:	ad 85       	ldd	r26, Y+13	; 0x0d
    2f58:	be 85       	ldd	r27, Y+14	; 0x0e
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	68 96       	adiw	r28, 0x18	; 24
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	df 90       	pop	r13
    2f74:	cf 90       	pop	r12
    2f76:	08 95       	ret

00002f78 <_ZNK4erom6Access11write_blockIdEEbjRKT_>:
    2f78:	a6 e0       	ldi	r26, 0x06	; 6
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e2 ec       	ldi	r30, 0xC2	; 194
    2f7e:	f7 e1       	ldi	r31, 0x17	; 23
    2f80:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	7c 83       	std	Y+4, r23	; 0x04
    2f8a:	6b 83       	std	Y+3, r22	; 0x03
    2f8c:	5e 83       	std	Y+6, r21	; 0x06
    2f8e:	4d 83       	std	Y+5, r20	; 0x05
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	9c 01       	movw	r18, r24
    2f96:	2c 5f       	subi	r18, 0xFC	; 252
    2f98:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZNK4erom6Access8in_rangeEj>
    2fa4:	98 2f       	mov	r25, r24
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	89 27       	eor	r24, r25
    2faa:	88 23       	and	r24, r24
    2fac:	11 f0       	breq	.+4      	; 0x2fb2 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x3a>
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <_ZNK4erom6Access11write_blockIdEEbjRKT_+0x4c>
    2fb2:	4d 81       	ldd	r20, Y+5	; 0x05
    2fb4:	5e 81       	ldd	r21, Y+6	; 0x06
    2fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	b9 01       	movw	r22, r18
    2fc0:	7f d1       	rcall	.+766    	; 0x32c0 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	26 96       	adiw	r28, 0x06	; 6
    2fc6:	e2 e0       	ldi	r30, 0x02	; 2
    2fc8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00002fcc <_ZN4erom5EntryIdEC1Ej>:
    2fcc:	a4 e0       	ldi	r26, 0x04	; 4
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	ec ee       	ldi	r30, 0xEC	; 236
    2fd2:	f7 e1       	ldi	r31, 0x17	; 23
    2fd4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    2fd8:	9a 83       	std	Y+2, r25	; 0x02
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	7c 83       	std	Y+4, r23	; 0x04
    2fde:	6b 83       	std	Y+3, r22	; 0x03
    2fe0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN4erom6Access8instanceEv>
    2fe4:	9c 01       	movw	r18, r24
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	fc 01       	movw	r30, r24
    2fec:	31 83       	std	Z+1, r19	; 0x01
    2fee:	20 83       	st	Z, r18
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	33 83       	std	Z+3, r19	; 0x03
    2ffc:	22 83       	std	Z+2, r18	; 0x02
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
    3002:	8e d0       	rcall	.+284    	; 0x3120 <_ZN4erom5EntryIdE4loadEv>
    3004:	24 96       	adiw	r28, 0x04	; 4
    3006:	e2 e0       	ldi	r30, 0x02	; 2
    3008:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000300c <_ZNSaIiEC1Ev>:
    300c:	a2 e0       	ldi	r26, 0x02	; 2
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	ec e0       	ldi	r30, 0x0C	; 12
    3012:	f8 e1       	ldi	r31, 0x18	; 24
    3014:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	22 96       	adiw	r28, 0x02	; 2
    301e:	e2 e0       	ldi	r30, 0x02	; 2
    3020:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003024 <_ZNSaIiED1Ev>:
    3024:	a2 e0       	ldi	r26, 0x02	; 2
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e8 e1       	ldi	r30, 0x18	; 24
    302a:	f8 e1       	ldi	r31, 0x18	; 24
    302c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	22 96       	adiw	r28, 0x02	; 2
    3036:	e2 e0       	ldi	r30, 0x02	; 2
    3038:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000303c <_ZNSt6vectorIiSaIiEEC1ERKS0_>:
    303c:	a4 e0       	ldi	r26, 0x04	; 4
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e4 e2       	ldi	r30, 0x24	; 36
    3042:	f8 e1       	ldi	r31, 0x18	; 24
    3044:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	89 83       	std	Y+1, r24	; 0x01
    304c:	7c 83       	std	Y+4, r23	; 0x04
    304e:	6b 83       	std	Y+3, r22	; 0x03
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	fc 01       	movw	r30, r24
    3056:	11 82       	std	Z+1, r1	; 0x01
    3058:	10 82       	st	Z, r1
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	28 e0       	ldi	r18, 0x08	; 8
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	fc 01       	movw	r30, r24
    3064:	33 83       	std	Z+3, r19	; 0x03
    3066:	22 83       	std	Z+2, r18	; 0x02
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	fc 01       	movw	r30, r24
    306e:	15 82       	std	Z+5, r1	; 0x05
    3070:	14 82       	std	Z+4, r1	; 0x04
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	fc 01       	movw	r30, r24
    3078:	22 81       	ldd	r18, Z+2	; 0x02
    307a:	33 81       	ldd	r19, Z+3	; 0x03
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	06 96       	adiw	r24, 0x06	; 6
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	b9 01       	movw	r22, r18
    3088:	3c d1       	rcall	.+632    	; 0x3302 <_ZNSaIiE8allocateEjPKv>
    308a:	9c 01       	movw	r18, r24
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	fc 01       	movw	r30, r24
    3092:	31 83       	std	Z+1, r19	; 0x01
    3094:	20 83       	st	Z, r18
    3096:	24 96       	adiw	r28, 0x04	; 4
    3098:	e2 e0       	ldi	r30, 0x02	; 2
    309a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000309e <_ZNSt6vectorIiSaIiEED1Ev>:
    309e:	a4 e0       	ldi	r26, 0x04	; 4
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e5 e5       	ldi	r30, 0x55	; 85
    30a4:	f8 e1       	ldi	r31, 0x18	; 24
    30a6:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    30aa:	9c 83       	std	Y+4, r25	; 0x04
    30ac:	8b 83       	std	Y+3, r24	; 0x03
    30ae:	1a 82       	std	Y+2, r1	; 0x02
    30b0:	19 82       	std	Y+1, r1	; 0x01
    30b2:	15 c0       	rjmp	.+42     	; 0x30de <_ZNSt6vectorIiSaIiEED1Ev+0x40>
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	fc 01       	movw	r30, r24
    30ba:	20 81       	ld	r18, Z
    30bc:	31 81       	ldd	r19, Z+1	; 0x01
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	28 0f       	add	r18, r24
    30c8:	39 1f       	adc	r19, r25
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	06 96       	adiw	r24, 0x06	; 6
    30d0:	b9 01       	movw	r22, r18
    30d2:	2d d1       	rcall	.+602    	; 0x332e <_ZNSaIiE7destroyEPi>
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	9c 81       	ldd	r25, Y+4	; 0x04
    30e2:	fc 01       	movw	r30, r24
    30e4:	24 81       	ldd	r18, Z+4	; 0x04
    30e6:	35 81       	ldd	r19, Z+5	; 0x05
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	82 17       	cp	r24, r18
    30ee:	93 07       	cpc	r25, r19
    30f0:	08 f3       	brcs	.-62     	; 0x30b4 <_ZNSt6vectorIiSaIiEED1Ev+0x16>
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	fc 01       	movw	r30, r24
    30f8:	42 81       	ldd	r20, Z+2	; 0x02
    30fa:	53 81       	ldd	r21, Z+3	; 0x03
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	fc 01       	movw	r30, r24
    3102:	20 81       	ld	r18, Z
    3104:	31 81       	ldd	r19, Z+1	; 0x01
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	06 96       	adiw	r24, 0x06	; 6
    310c:	b9 01       	movw	r22, r18
    310e:	1d d1       	rcall	.+570    	; 0x334a <_ZNSaIiE10deallocateEPij>
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	06 96       	adiw	r24, 0x06	; 6
    3116:	86 df       	rcall	.-244    	; 0x3024 <_ZNSaIiED1Ev>
    3118:	24 96       	adiw	r28, 0x04	; 4
    311a:	e2 e0       	ldi	r30, 0x02	; 2
    311c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003120 <_ZN4erom5EntryIdE4loadEv>:
    3120:	a2 e0       	ldi	r26, 0x02	; 2
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e6 e9       	ldi	r30, 0x96	; 150
    3126:	f8 e1       	ldi	r31, 0x18	; 24
    3128:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    312c:	9a 83       	std	Y+2, r25	; 0x02
    312e:	89 83       	std	Y+1, r24	; 0x01
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	fc 01       	movw	r30, r24
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	89 2b       	or	r24, r25
    313c:	91 f0       	breq	.+36     	; 0x3162 <_ZN4erom5EntryIdE4loadEv+0x42>
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	8c 01       	movw	r16, r24
    3144:	0c 5f       	subi	r16, 0xFC	; 252
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	12 d1       	rcall	.+548    	; 0x3372 <_ZNK4erom5EntryIdE7addressEv>
    314e:	9c 01       	movw	r18, r24
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	fc 01       	movw	r30, r24
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	a8 01       	movw	r20, r16
    315c:	b9 01       	movw	r22, r18
    315e:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZNK4erom6Access10read_blockIdEEbjRT_>
    3162:	22 96       	adiw	r28, 0x02	; 2
    3164:	e4 e0       	ldi	r30, 0x04	; 4
    3166:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

0000316a <_ZN4erom5EntryIdEcvRdEv>:
  //  v = 0;                // Set RAM value to '0'
  //  v.load();             // Load value from EEPROM
  //  if (v != 100) Serial.print("EEPROM write error!");
  inline operator type() const { return value; }
  inline operator const type&() const { return value; }
  inline operator type&() { return value; }
    316a:	a2 e0       	ldi	r26, 0x02	; 2
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	eb eb       	ldi	r30, 0xBB	; 187
    3170:	f8 e1       	ldi	r31, 0x18	; 24
    3172:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	04 96       	adiw	r24, 0x04	; 4
    3180:	22 96       	adiw	r28, 0x02	; 2
    3182:	e2 e0       	ldi	r30, 0x02	; 2
    3184:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003188 <_ZN4erom5EntryIdEaSERKd>:
    3188:	a4 e0       	ldi	r26, 0x04	; 4
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ea ec       	ldi	r30, 0xCA	; 202
    318e:	f8 e1       	ldi	r31, 0x18	; 24
    3190:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	7c 83       	std	Y+4, r23	; 0x04
    319a:	6b 83       	std	Y+3, r22	; 0x03
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	fc 01       	movw	r30, r24
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	a2 81       	ldd	r26, Z+2	; 0x02
    31a8:	b3 81       	ldd	r27, Z+3	; 0x03
    31aa:	29 81       	ldd	r18, Y+1	; 0x01
    31ac:	3a 81       	ldd	r19, Y+2	; 0x02
    31ae:	f9 01       	movw	r30, r18
    31b0:	84 83       	std	Z+4, r24	; 0x04
    31b2:	95 83       	std	Z+5, r25	; 0x05
    31b4:	a6 83       	std	Z+6, r26	; 0x06
    31b6:	b7 83       	std	Z+7, r27	; 0x07
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	24 96       	adiw	r28, 0x04	; 4
    31be:	e2 e0       	ldi	r30, 0x02	; 2
    31c0:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000031c4 <_ZNK4erom5EntryIdE4saveEb>:
    31c4:	a3 e0       	ldi	r26, 0x03	; 3
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e8 ee       	ldi	r30, 0xE8	; 232
    31ca:	f8 e1       	ldi	r31, 0x18	; 24
    31cc:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	6b 83       	std	Y+3, r22	; 0x03
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	fc 01       	movw	r30, r24
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	89 2b       	or	r24, r25
    31e2:	31 f1       	breq	.+76     	; 0x3230 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	88 23       	and	r24, r24
    31e8:	91 f0       	breq	.+36     	; 0x320e <_ZNK4erom5EntryIdE4saveEb+0x4a>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	8c 01       	movw	r16, r24
    31f0:	0c 5f       	subi	r16, 0xFC	; 252
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	bc d0       	rcall	.+376    	; 0x3372 <_ZNK4erom5EntryIdE7addressEv>
    31fa:	9c 01       	movw	r18, r24
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	fc 01       	movw	r30, r24
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	a8 01       	movw	r20, r16
    3208:	b9 01       	movw	r22, r18
    320a:	b6 de       	rcall	.-660    	; 0x2f78 <_ZNK4erom6Access11write_blockIdEEbjRKT_>
    320c:	11 c0       	rjmp	.+34     	; 0x3230 <_ZNK4erom5EntryIdE4saveEb+0x6c>
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	8c 01       	movw	r16, r24
    3214:	0c 5f       	subi	r16, 0xFC	; 252
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	aa d0       	rcall	.+340    	; 0x3372 <_ZNK4erom5EntryIdE7addressEv>
    321e:	9c 01       	movw	r18, r24
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	fc 01       	movw	r30, r24
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	a8 01       	movw	r20, r16
    322c:	b9 01       	movw	r22, r18
    322e:	b2 d0       	rcall	.+356    	; 0x3394 <_ZNK4erom6Access12update_blockIdEEjjRKT_>
    3230:	23 96       	adiw	r28, 0x03	; 3
    3232:	e4 e0       	ldi	r30, 0x04	; 4
    3234:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

00003238 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
    3238:	a2 e0       	ldi	r26, 0x02	; 2
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e2 e2       	ldi	r30, 0x22	; 34
    323e:	f9 e1       	ldi	r31, 0x19	; 25
    3240:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3244:	9a 83       	std	Y+2, r25	; 0x02
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	fc 01       	movw	r30, r24
    324e:	84 81       	ldd	r24, Z+4	; 0x04
    3250:	95 81       	ldd	r25, Z+5	; 0x05
    3252:	22 96       	adiw	r28, 0x02	; 2
    3254:	e2 e0       	ldi	r30, 0x02	; 2
    3256:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000325a <_ZNSt6vectorIiSaIiEE9push_backERKi>:
    325a:	a4 e0       	ldi	r26, 0x04	; 4
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e3 e3       	ldi	r30, 0x33	; 51
    3260:	f9 e1       	ldi	r31, 0x19	; 25
    3262:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	7c 83       	std	Y+4, r23	; 0x04
    326c:	6b 83       	std	Y+3, r22	; 0x03
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	e2 df       	rcall	.-60     	; 0x3238 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    3274:	9c 01       	movw	r18, r24
    3276:	2f 5f       	subi	r18, 0xFF	; 255
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	4b 81       	ldd	r20, Y+3	; 0x03
    327c:	5c 81       	ldd	r21, Y+4	; 0x04
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	b9 01       	movw	r22, r18
    3284:	e9 d0       	rcall	.+466    	; 0x3458 <_ZNSt6vectorIiSaIiEE6resizeEjRKi>
    3286:	24 96       	adiw	r28, 0x04	; 4
    3288:	e2 e0       	ldi	r30, 0x02	; 2
    328a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000328e <_ZNSt6vectorIiSaIiEEixEj>:
    328e:	a4 e0       	ldi	r26, 0x04	; 4
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	ed e4       	ldi	r30, 0x4D	; 77
    3294:	f9 e1       	ldi	r31, 0x19	; 25
    3296:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	7c 83       	std	Y+4, r23	; 0x04
    32a0:	6b 83       	std	Y+3, r22	; 0x03
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	fc 01       	movw	r30, r24
    32a8:	20 81       	ld	r18, Z
    32aa:	31 81       	ldd	r19, Z+1	; 0x01
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	82 0f       	add	r24, r18
    32b6:	93 1f       	adc	r25, r19
    32b8:	24 96       	adiw	r28, 0x04	; 4
    32ba:	e2 e0       	ldi	r30, 0x02	; 2
    32bc:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000032c0 <_ZNK4erom6Access12_write_blockIdEEvjRKT_>:
    32c0:	a6 e0       	ldi	r26, 0x06	; 6
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e6 e6       	ldi	r30, 0x66	; 102
    32c6:	f9 e1       	ldi	r31, 0x19	; 25
    32c8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    32cc:	9a 83       	std	Y+2, r25	; 0x02
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	7c 83       	std	Y+4, r23	; 0x04
    32d2:	6b 83       	std	Y+3, r22	; 0x03
    32d4:	5e 83       	std	Y+6, r21	; 0x06
    32d6:	4d 83       	std	Y+5, r20	; 0x05
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZNK4erom6Access4baseEv>
    32e0:	9c 01       	movw	r18, r24
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	82 0f       	add	r24, r18
    32e8:	93 1f       	adc	r25, r19
    32ea:	9c 01       	movw	r18, r24
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	44 e0       	ldi	r20, 0x04	; 4
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	b9 01       	movw	r22, r18
    32f6:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <eeprom_write_block>
    32fa:	26 96       	adiw	r28, 0x06	; 6
    32fc:	e2 e0       	ldi	r30, 0x02	; 2
    32fe:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003302 <_ZNSaIiE8allocateEjPKv>:
    3302:	a6 e0       	ldi	r26, 0x06	; 6
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	e7 e8       	ldi	r30, 0x87	; 135
    3308:	f9 e1       	ldi	r31, 0x19	; 25
    330a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	7c 83       	std	Y+4, r23	; 0x04
    3314:	6b 83       	std	Y+3, r22	; 0x03
    3316:	5e 83       	std	Y+6, r21	; 0x06
    3318:	4d 83       	std	Y+5, r20	; 0x05
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	9c 81       	ldd	r25, Y+4	; 0x04
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_Znwj>
    3326:	26 96       	adiw	r28, 0x06	; 6
    3328:	e2 e0       	ldi	r30, 0x02	; 2
    332a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000332e <_ZNSaIiE7destroyEPi>:
    332e:	a4 e0       	ldi	r26, 0x04	; 4
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	ed e9       	ldi	r30, 0x9D	; 157
    3334:	f9 e1       	ldi	r31, 0x19	; 25
    3336:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	7c 83       	std	Y+4, r23	; 0x04
    3340:	6b 83       	std	Y+3, r22	; 0x03
    3342:	24 96       	adiw	r28, 0x04	; 4
    3344:	e2 e0       	ldi	r30, 0x02	; 2
    3346:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000334a <_ZNSaIiE10deallocateEPij>:
    334a:	a6 e0       	ldi	r26, 0x06	; 6
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	eb ea       	ldi	r30, 0xAB	; 171
    3350:	f9 e1       	ldi	r31, 0x19	; 25
    3352:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	7c 83       	std	Y+4, r23	; 0x04
    335c:	6b 83       	std	Y+3, r22	; 0x03
    335e:	5e 83       	std	Y+6, r21	; 0x06
    3360:	4d 83       	std	Y+5, r20	; 0x05
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    336a:	26 96       	adiw	r28, 0x06	; 6
    336c:	e2 e0       	ldi	r30, 0x02	; 2
    336e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003372 <_ZNK4erom5EntryIdE7addressEv>:
    3372:	a2 e0       	ldi	r26, 0x02	; 2
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ef eb       	ldi	r30, 0xBF	; 191
    3378:	f9 e1       	ldi	r31, 0x19	; 25
    337a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	9a 81       	ldd	r25, Y+2	; 0x02
    3386:	fc 01       	movw	r30, r24
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	22 96       	adiw	r28, 0x02	; 2
    338e:	e2 e0       	ldi	r30, 0x02	; 2
    3390:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003394 <_ZNK4erom6Access12update_blockIdEEjjRKT_>:
    3394:	ac e0       	ldi	r26, 0x0C	; 12
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e0 ed       	ldi	r30, 0xD0	; 208
    339a:	f9 e1       	ldi	r31, 0x19	; 25
    339c:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    33a0:	98 87       	std	Y+8, r25	; 0x08
    33a2:	8f 83       	std	Y+7, r24	; 0x07
    33a4:	7a 87       	std	Y+10, r23	; 0x0a
    33a6:	69 87       	std	Y+9, r22	; 0x09
    33a8:	5c 87       	std	Y+12, r21	; 0x0c
    33aa:	4b 87       	std	Y+11, r20	; 0x0b
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	9c 01       	movw	r18, r24
    33b2:	2c 5f       	subi	r18, 0xFC	; 252
    33b4:	3f 4f       	sbci	r19, 0xFF	; 255
    33b6:	8f 81       	ldd	r24, Y+7	; 0x07
    33b8:	98 85       	ldd	r25, Y+8	; 0x08
    33ba:	b9 01       	movw	r22, r18
    33bc:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZNK4erom6Access8in_rangeEj>
    33c0:	98 2f       	mov	r25, r24
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	89 27       	eor	r24, r25
    33c6:	88 23       	and	r24, r24
    33c8:	19 f0       	breq	.+6      	; 0x33d0 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x3c>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	40 c0       	rjmp	.+128    	; 0x3450 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xbc>
    33d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	1c 82       	std	Y+4, r1	; 0x04
    33da:	1b 82       	std	Y+3, r1	; 0x03
    33dc:	1e 82       	std	Y+6, r1	; 0x06
    33de:	1d 82       	std	Y+5, r1	; 0x05
    33e0:	31 c0       	rjmp	.+98     	; 0x3444 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0xb0>
    33e2:	29 85       	ldd	r18, Y+9	; 0x09
    33e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    33e6:	8f 81       	ldd	r24, Y+7	; 0x07
    33e8:	98 85       	ldd	r25, Y+8	; 0x08
    33ea:	b9 01       	movw	r22, r18
    33ec:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZNK4erom6Access4readEj>
    33f0:	28 2f       	mov	r18, r24
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	9a 81       	ldd	r25, Y+2	; 0x02
    33f6:	fc 01       	movw	r30, r24
    33f8:	90 81       	ld	r25, Z
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	29 17       	cp	r18, r25
    33fe:	09 f4       	brne	.+2      	; 0x3402 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x6e>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	88 23       	and	r24, r24
    3404:	81 f0       	breq	.+32     	; 0x3426 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x92>
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	fc 01       	movw	r30, r24
    340c:	40 81       	ld	r20, Z
    340e:	29 85       	ldd	r18, Y+9	; 0x09
    3410:	3a 85       	ldd	r19, Y+10	; 0x0a
    3412:	8f 81       	ldd	r24, Y+7	; 0x07
    3414:	98 85       	ldd	r25, Y+8	; 0x08
    3416:	b9 01       	movw	r22, r18
    3418:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZNK4erom6Access5writeEjh>
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	9c 83       	std	Y+4, r25	; 0x04
    3424:	8b 83       	std	Y+3, r24	; 0x03
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	9a 87       	std	Y+10, r25	; 0x0a
    342e:	89 87       	std	Y+9, r24	; 0x09
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	9e 81       	ldd	r25, Y+6	; 0x06
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	04 97       	sbiw	r24, 0x04	; 4
    344a:	58 f2       	brcs	.-106    	; 0x33e2 <_ZNK4erom6Access12update_blockIdEEjjRKT_+0x4e>
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	2c 96       	adiw	r28, 0x0c	; 12
    3452:	e2 e0       	ldi	r30, 0x02	; 2
    3454:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003458 <_ZNSt6vectorIiSaIiEE6resizeEjRKi>:
    3458:	a8 e0       	ldi	r26, 0x08	; 8
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e2 e3       	ldi	r30, 0x32	; 50
    345e:	fa e1       	ldi	r31, 0x1A	; 26
    3460:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
    3468:	7e 83       	std	Y+6, r23	; 0x06
    346a:	6d 83       	std	Y+5, r22	; 0x05
    346c:	58 87       	std	Y+8, r21	; 0x08
    346e:	4f 83       	std	Y+7, r20	; 0x07
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	fc 01       	movw	r30, r24
    3476:	24 81       	ldd	r18, Z+4	; 0x04
    3478:	35 81       	ldd	r19, Z+5	; 0x05
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	28 17       	cp	r18, r24
    3480:	39 07       	cpc	r19, r25
    3482:	08 f0       	brcs	.+2      	; 0x3486 <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0x2e>
    3484:	41 c0       	rjmp	.+130    	; 0x3508 <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0xb0>
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	fc 01       	movw	r30, r24
    348c:	22 81       	ldd	r18, Z+2	; 0x02
    348e:	33 81       	ldd	r19, Z+3	; 0x03
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	28 17       	cp	r18, r24
    3496:	39 07       	cpc	r19, r25
    3498:	48 f4       	brcc	.+18     	; 0x34ac <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0x54>
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	9c 01       	movw	r18, r24
    34a0:	28 5f       	subi	r18, 0xF8	; 248
    34a2:	3f 4f       	sbci	r19, 0xFF	; 255
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	9c 81       	ldd	r25, Y+4	; 0x04
    34a8:	b9 01       	movw	r22, r18
    34aa:	38 d0       	rcall	.+112    	; 0x351c <_ZNSt6vectorIiSaIiEE7reserveEj>
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	fc 01       	movw	r30, r24
    34b2:	84 81       	ldd	r24, Z+4	; 0x04
    34b4:	95 81       	ldd	r25, Z+5	; 0x05
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	17 c0       	rjmp	.+46     	; 0x34ea <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0x92>
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	fc 01       	movw	r30, r24
    34c2:	20 81       	ld	r18, Z
    34c4:	31 81       	ldd	r19, Z+1	; 0x01
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	28 0f       	add	r18, r24
    34d0:	39 1f       	adc	r19, r25
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	06 96       	adiw	r24, 0x06	; 6
    34d8:	4f 81       	ldd	r20, Y+7	; 0x07
    34da:	58 85       	ldd	r21, Y+8	; 0x08
    34dc:	b9 01       	movw	r22, r18
    34de:	9f d0       	rcall	.+318    	; 0x361e <_ZNSaIiE9constructEPiRKi>
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	29 81       	ldd	r18, Y+1	; 0x01
    34ec:	3a 81       	ldd	r19, Y+2	; 0x02
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	28 17       	cp	r18, r24
    34f4:	39 07       	cpc	r19, r25
    34f6:	10 f3       	brcs	.-60     	; 0x34bc <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0x64>
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	9c 81       	ldd	r25, Y+4	; 0x04
    34fc:	2d 81       	ldd	r18, Y+5	; 0x05
    34fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3500:	fc 01       	movw	r30, r24
    3502:	35 83       	std	Z+5, r19	; 0x05
    3504:	24 83       	std	Z+4, r18	; 0x04
    3506:	06 c0       	rjmp	.+12     	; 0x3514 <_ZNSt6vectorIiSaIiEE6resizeEjRKi+0xbc>
    3508:	2d 81       	ldd	r18, Y+5	; 0x05
    350a:	3e 81       	ldd	r19, Y+6	; 0x06
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	b9 01       	movw	r22, r18
    3512:	a6 d0       	rcall	.+332    	; 0x3660 <_ZNSt6vectorIiSaIiEE8downsizeEj>
    3514:	28 96       	adiw	r28, 0x08	; 8
    3516:	e2 e0       	ldi	r30, 0x02	; 2
    3518:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000351c <_ZNSt6vectorIiSaIiEE7reserveEj>:
		}
		a.deallocate(data, data_size);
	}


	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::reserve(size_type n){
    351c:	aa e0       	ldi	r26, 0x0A	; 10
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	e4 e9       	ldi	r30, 0x94	; 148
    3522:	fa e1       	ldi	r31, 0x1A	; 26
    3524:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3528:	98 87       	std	Y+8, r25	; 0x08
    352a:	8f 83       	std	Y+7, r24	; 0x07
    352c:	7a 87       	std	Y+10, r23	; 0x0a
    352e:	69 87       	std	Y+9, r22	; 0x09
		if(n > data_size){              //We never shrink...
    3530:	8f 81       	ldd	r24, Y+7	; 0x07
    3532:	98 85       	ldd	r25, Y+8	; 0x08
    3534:	fc 01       	movw	r30, r24
    3536:	22 81       	ldd	r18, Z+2	; 0x02
    3538:	33 81       	ldd	r19, Z+3	; 0x03
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	28 17       	cp	r18, r24
    3540:	39 07       	cpc	r19, r25
    3542:	08 f0       	brcs	.+2      	; 0x3546 <_ZNSt6vectorIiSaIiEE7reserveEj+0x2a>
    3544:	68 c0       	rjmp	.+208    	; 0x3616 <_ZNSt6vectorIiSaIiEE7reserveEj+0xfa>
			T * temp_ptr = data;
    3546:	8f 81       	ldd	r24, Y+7	; 0x07
    3548:	98 85       	ldd	r25, Y+8	; 0x08
    354a:	fc 01       	movw	r30, r24
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	9c 83       	std	Y+4, r25	; 0x04
    3552:	8b 83       	std	Y+3, r24	; 0x03
			size_type temp_size = data_size;
    3554:	8f 81       	ldd	r24, Y+7	; 0x07
    3556:	98 85       	ldd	r25, Y+8	; 0x08
    3558:	fc 01       	movw	r30, r24
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	8d 83       	std	Y+5, r24	; 0x05

			data_size = n;
    3562:	8f 81       	ldd	r24, Y+7	; 0x07
    3564:	98 85       	ldd	r25, Y+8	; 0x08
    3566:	29 85       	ldd	r18, Y+9	; 0x09
    3568:	3a 85       	ldd	r19, Y+10	; 0x0a
    356a:	fc 01       	movw	r30, r24
    356c:	33 83       	std	Z+3, r19	; 0x03
    356e:	22 83       	std	Z+2, r18	; 0x02
			data = a.allocate(data_size);
    3570:	8f 81       	ldd	r24, Y+7	; 0x07
    3572:	98 85       	ldd	r25, Y+8	; 0x08
    3574:	fc 01       	movw	r30, r24
    3576:	22 81       	ldd	r18, Z+2	; 0x02
    3578:	33 81       	ldd	r19, Z+3	; 0x03
    357a:	8f 81       	ldd	r24, Y+7	; 0x07
    357c:	98 85       	ldd	r25, Y+8	; 0x08
    357e:	06 96       	adiw	r24, 0x06	; 6
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	b9 01       	movw	r22, r18
    3586:	bd de       	rcall	.-646    	; 0x3302 <_ZNSaIiE8allocateEjPKv>
    3588:	9c 01       	movw	r18, r24
    358a:	8f 81       	ldd	r24, Y+7	; 0x07
    358c:	98 85       	ldd	r25, Y+8	; 0x08
    358e:	fc 01       	movw	r30, r24
    3590:	31 83       	std	Z+1, r19	; 0x01
    3592:	20 83       	st	Z, r18

			for(size_type i = 0; i<elements; ++i){
    3594:	1a 82       	std	Y+2, r1	; 0x02
    3596:	19 82       	std	Y+1, r1	; 0x01
    3598:	2b c0       	rjmp	.+86     	; 0x35f0 <_ZNSt6vectorIiSaIiEE7reserveEj+0xd4>
				a.construct(data+i, temp_ptr[i]);
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	2b 81       	ldd	r18, Y+3	; 0x03
    35a4:	3c 81       	ldd	r19, Y+4	; 0x04
    35a6:	a9 01       	movw	r20, r18
    35a8:	48 0f       	add	r20, r24
    35aa:	59 1f       	adc	r21, r25
    35ac:	8f 81       	ldd	r24, Y+7	; 0x07
    35ae:	98 85       	ldd	r25, Y+8	; 0x08
    35b0:	fc 01       	movw	r30, r24
    35b2:	20 81       	ld	r18, Z
    35b4:	31 81       	ldd	r19, Z+1	; 0x01
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	28 0f       	add	r18, r24
    35c0:	39 1f       	adc	r19, r25
    35c2:	8f 81       	ldd	r24, Y+7	; 0x07
    35c4:	98 85       	ldd	r25, Y+8	; 0x08
    35c6:	06 96       	adiw	r24, 0x06	; 6
    35c8:	b9 01       	movw	r22, r18
    35ca:	29 d0       	rcall	.+82     	; 0x361e <_ZNSaIiE9constructEPiRKi>
				a.destroy(temp_ptr+i);
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	2b 81       	ldd	r18, Y+3	; 0x03
    35d6:	3c 81       	ldd	r19, Y+4	; 0x04
    35d8:	28 0f       	add	r18, r24
    35da:	39 1f       	adc	r19, r25
    35dc:	8f 81       	ldd	r24, Y+7	; 0x07
    35de:	98 85       	ldd	r25, Y+8	; 0x08
    35e0:	06 96       	adiw	r24, 0x06	; 6
    35e2:	b9 01       	movw	r22, r18
    35e4:	a4 de       	rcall	.-696    	; 0x332e <_ZNSaIiE7destroyEPi>
			size_type temp_size = data_size;

			data_size = n;
			data = a.allocate(data_size);

			for(size_type i = 0; i<elements; ++i){
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	8f 81       	ldd	r24, Y+7	; 0x07
    35f2:	98 85       	ldd	r25, Y+8	; 0x08
    35f4:	fc 01       	movw	r30, r24
    35f6:	24 81       	ldd	r18, Z+4	; 0x04
    35f8:	35 81       	ldd	r19, Z+5	; 0x05
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	82 17       	cp	r24, r18
    3600:	93 07       	cpc	r25, r19
    3602:	58 f2       	brcs	.-106    	; 0x359a <_ZNSt6vectorIiSaIiEE7reserveEj+0x7e>
				a.construct(data+i, temp_ptr[i]);
				a.destroy(temp_ptr+i);
			}
			a.deallocate(temp_ptr, temp_size);
    3604:	8f 81       	ldd	r24, Y+7	; 0x07
    3606:	98 85       	ldd	r25, Y+8	; 0x08
    3608:	06 96       	adiw	r24, 0x06	; 6
    360a:	4d 81       	ldd	r20, Y+5	; 0x05
    360c:	5e 81       	ldd	r21, Y+6	; 0x06
    360e:	2b 81       	ldd	r18, Y+3	; 0x03
    3610:	3c 81       	ldd	r19, Y+4	; 0x04
    3612:	b9 01       	movw	r22, r18
    3614:	9a de       	rcall	.-716    	; 0x334a <_ZNSaIiE10deallocateEPij>
		}
	}
    3616:	2a 96       	adiw	r28, 0x0a	; 10
    3618:	e2 e0       	ldi	r30, 0x02	; 2
    361a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000361e <_ZNSaIiE9constructEPiRKi>:
	void deallocate(pointer p, size_type){
		::operator delete(p);
	}

	//Use placement new to engage the constructor
	void construct(pointer p, const T& val) { new((void*)p) T(val); }
    361e:	a6 e0       	ldi	r26, 0x06	; 6
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e5 e1       	ldi	r30, 0x15	; 21
    3624:	fb e1       	ldi	r31, 0x1B	; 27
    3626:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	7c 83       	std	Y+4, r23	; 0x04
    3630:	6b 83       	std	Y+3, r22	; 0x03
    3632:	5e 83       	std	Y+6, r21	; 0x06
    3634:	4d 83       	std	Y+5, r20	; 0x05
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	bc 01       	movw	r22, r24
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZnwjPv>
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	41 f0       	breq	.+16     	; 0x3658 <_ZNSaIiE9constructEPiRKi+0x3a>
    3648:	2d 81       	ldd	r18, Y+5	; 0x05
    364a:	3e 81       	ldd	r19, Y+6	; 0x06
    364c:	f9 01       	movw	r30, r18
    364e:	20 81       	ld	r18, Z
    3650:	31 81       	ldd	r19, Z+1	; 0x01
    3652:	fc 01       	movw	r30, r24
    3654:	31 83       	std	Z+1, r19	; 0x01
    3656:	20 83       	st	Z, r18
    3658:	26 96       	adiw	r28, 0x06	; 6
    365a:	e2 e0       	ldi	r30, 0x02	; 2
    365c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003660 <_ZNSt6vectorIiSaIiEE8downsizeEj>:
		}else{
			downsize(sz);
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
    3660:	a6 e0       	ldi	r26, 0x06	; 6
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	e6 e3       	ldi	r30, 0x36	; 54
    3666:	fb e1       	ldi	r31, 0x1B	; 27
    3668:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
    3670:	7e 83       	std	Y+6, r23	; 0x06
    3672:	6d 83       	std	Y+5, r22	; 0x05
		if(sz < elements){      //Actually are downsizing
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	9c 81       	ldd	r25, Y+4	; 0x04
    3678:	fc 01       	movw	r30, r24
    367a:	24 81       	ldd	r18, Z+4	; 0x04
    367c:	35 81       	ldd	r19, Z+5	; 0x05
    367e:	8d 81       	ldd	r24, Y+5	; 0x05
    3680:	9e 81       	ldd	r25, Y+6	; 0x06
    3682:	82 17       	cp	r24, r18
    3684:	93 07       	cpc	r25, r19
    3686:	58 f5       	brcc	.+86     	; 0x36de <_ZNSt6vectorIiSaIiEE8downsizeEj+0x7e>
			for(size_t i = sz; i< elements; ++i){
    3688:	8d 81       	ldd	r24, Y+5	; 0x05
    368a:	9e 81       	ldd	r25, Y+6	; 0x06
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	15 c0       	rjmp	.+42     	; 0x36bc <_ZNSt6vectorIiSaIiEE8downsizeEj+0x5c>
				a.destroy(data+i);
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	9c 81       	ldd	r25, Y+4	; 0x04
    3696:	fc 01       	movw	r30, r24
    3698:	20 81       	ld	r18, Z
    369a:	31 81       	ldd	r19, Z+1	; 0x01
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	28 0f       	add	r18, r24
    36a6:	39 1f       	adc	r19, r25
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	9c 81       	ldd	r25, Y+4	; 0x04
    36ac:	06 96       	adiw	r24, 0x06	; 6
    36ae:	b9 01       	movw	r22, r18
    36b0:	3e de       	rcall	.-900    	; 0x332e <_ZNSaIiE7destroyEPi>
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
		if(sz < elements){      //Actually are downsizing
			for(size_t i = sz; i< elements; ++i){
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	9c 81       	ldd	r25, Y+4	; 0x04
    36c0:	fc 01       	movw	r30, r24
    36c2:	24 81       	ldd	r18, Z+4	; 0x04
    36c4:	35 81       	ldd	r19, Z+5	; 0x05
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	82 17       	cp	r24, r18
    36cc:	93 07       	cpc	r25, r19
    36ce:	08 f3       	brcs	.-62     	; 0x3692 <_ZNSt6vectorIiSaIiEE8downsizeEj+0x32>
				a.destroy(data+i);
			}
			elements = sz;
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	9c 81       	ldd	r25, Y+4	; 0x04
    36d4:	2d 81       	ldd	r18, Y+5	; 0x05
    36d6:	3e 81       	ldd	r19, Y+6	; 0x06
    36d8:	fc 01       	movw	r30, r24
    36da:	35 83       	std	Z+5, r19	; 0x05
    36dc:	24 83       	std	Z+4, r18	; 0x04
		}
	}
    36de:	26 96       	adiw	r28, 0x06	; 6
    36e0:	e2 e0       	ldi	r30, 0x02	; 2
    36e2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000036e6 <_ZN8PHSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class PHSensor : public erom::Storage {
    36e6:	a2 e0       	ldi	r26, 0x02	; 2
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e9 e7       	ldi	r30, 0x79	; 121
    36ec:	fb e1       	ldi	r31, 0x1B	; 27
    36ee:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    36f2:	9a 83       	std	Y+2, r25	; 0x02
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	9a 81       	ldd	r25, Y+2	; 0x02
    36fa:	25 ea       	ldi	r18, 0xA5	; 165
    36fc:	31 e0       	ldi	r19, 0x01	; 1
    36fe:	fc 01       	movw	r30, r24
    3700:	31 83       	std	Z+1, r19	; 0x01
    3702:	20 83       	st	Z, r18
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	9a 81       	ldd	r25, Y+2	; 0x02
    3708:	8b 56       	subi	r24, 0x6B	; 107
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	9a 81       	ldd	r25, Y+2	; 0x02
    3714:	81 57       	subi	r24, 0x71	; 113
    3716:	9f 4f       	sbci	r25, 0xFF	; 255
    3718:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	9a 81       	ldd	r25, Y+2	; 0x02
    3720:	8f 59       	subi	r24, 0x9F	; 159
    3722:	9f 4f       	sbci	r25, 0xFF	; 255
    3724:	bc dc       	rcall	.-1672   	; 0x309e <_ZNSt6vectorIiSaIiEED1Ev>
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN4erom7StorageD1Ev>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	89 2b       	or	r24, r25
    3734:	21 f0       	breq	.+8      	; 0x373e <_ZN8PHSensorD1Ev+0x58>
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    373e:	22 96       	adiw	r28, 0x02	; 2
    3740:	e2 e0       	ldi	r30, 0x02	; 2
    3742:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003746 <_ZN8PHSensorD0Ev>:
    3746:	a2 e0       	ldi	r26, 0x02	; 2
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	e9 ea       	ldi	r30, 0xA9	; 169
    374c:	fb e1       	ldi	r31, 0x1B	; 27
    374e:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3752:	9a 83       	std	Y+2, r25	; 0x02
    3754:	89 83       	std	Y+1, r24	; 0x01
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	c5 df       	rcall	.-118    	; 0x36e6 <_ZN8PHSensorD1Ev>
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    3764:	22 96       	adiw	r28, 0x02	; 2
    3766:	e2 e0       	ldi	r30, 0x02	; 2
    3768:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000376c <_ZN9TDSSensorC1Eiib7LCDBase>:
    376c:	a9 e0       	ldi	r26, 0x09	; 9
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	ec eb       	ldi	r30, 0xBC	; 188
    3772:	fb e1       	ldi	r31, 0x1B	; 27
    3774:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    3778:	9a 83       	std	Y+2, r25	; 0x02
    377a:	89 83       	std	Y+1, r24	; 0x01
    377c:	7c 83       	std	Y+4, r23	; 0x04
    377e:	6b 83       	std	Y+3, r22	; 0x03
    3780:	5e 83       	std	Y+6, r21	; 0x06
    3782:	4d 83       	std	Y+5, r20	; 0x05
    3784:	2f 83       	std	Y+7, r18	; 0x07
    3786:	19 87       	std	Y+9, r17	; 0x09
    3788:	08 87       	std	Y+8, r16	; 0x08
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN4erom7StorageC1Ev>
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	23 eb       	ldi	r18, 0xB3	; 179
    3798:	31 e0       	ldi	r19, 0x01	; 1
    379a:	fc 01       	movw	r30, r24
    379c:	31 83       	std	Z+1, r19	; 0x01
    379e:	20 83       	st	Z, r18
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	2b 81       	ldd	r18, Y+3	; 0x03
    37a6:	3c 81       	ldd	r19, Y+4	; 0x04
    37a8:	fc 01       	movw	r30, r24
    37aa:	34 87       	std	Z+12, r19	; 0x0c
    37ac:	23 87       	std	Z+11, r18	; 0x0b
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	83 5a       	subi	r24, 0xA3	; 163
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	fc 01       	movw	r30, r24
    37b8:	11 82       	std	Z+1, r1	; 0x01
    37ba:	10 82       	st	Z, r1
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	81 5a       	subi	r24, 0xA1	; 161
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	2d 81       	ldd	r18, Y+5	; 0x05
    37c6:	3e 81       	ldd	r19, Y+6	; 0x06
    37c8:	fc 01       	movw	r30, r24
    37ca:	31 83       	std	Z+1, r19	; 0x01
    37cc:	20 83       	st	Z, r18
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	9a 81       	ldd	r25, Y+2	; 0x02
    37d2:	87 59       	subi	r24, 0x97	; 151
    37d4:	9f 4f       	sbci	r25, 0xFF	; 255
    37d6:	2f 81       	ldd	r18, Y+7	; 0x07
    37d8:	fc 01       	movw	r30, r24
    37da:	20 83       	st	Z, r18
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	9a 81       	ldd	r25, Y+2	; 0x02
    37e0:	86 59       	subi	r24, 0x96	; 150
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	28 85       	ldd	r18, Y+8	; 0x08
    37e6:	39 85       	ldd	r19, Y+9	; 0x09
    37e8:	b9 01       	movw	r22, r18
    37ea:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN7LCDBaseC1ERKS_>
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	9a 81       	ldd	r25, Y+2	; 0x02
    37f2:	8e 57       	subi	r24, 0x7E	; 126
    37f4:	9f 4f       	sbci	r25, 0xFF	; 255
    37f6:	63 e1       	ldi	r22, 0x13	; 19
    37f8:	71 e0       	ldi	r23, 0x01	; 1
    37fa:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	88 57       	subi	r24, 0x78	; 120
    3804:	9f 4f       	sbci	r25, 0xFF	; 255
    3806:	63 e1       	ldi	r22, 0x13	; 19
    3808:	71 e0       	ldi	r23, 0x01	; 1
    380a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	9a 81       	ldd	r25, Y+2	; 0x02
    3812:	82 57       	subi	r24, 0x72	; 114
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	6a eb       	ldi	r22, 0xBA	; 186
    3818:	74 e0       	ldi	r23, 0x04	; 4
    381a:	d8 db       	rcall	.-2128   	; 0x2fcc <_ZN4erom5EntryIdEC1Ej>
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	9a 81       	ldd	r25, Y+2	; 0x02
    3820:	04 d0       	rcall	.+8      	; 0x382a <_ZN9TDSSensor4InitEv>
    3822:	29 96       	adiw	r28, 0x09	; 9
    3824:	e4 e0       	ldi	r30, 0x04	; 4
    3826:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

0000382a <_ZN9TDSSensor4InitEv>:
    382a:	a6 e0       	ldi	r26, 0x06	; 6
    382c:	b0 e0       	ldi	r27, 0x00	; 0
    382e:	eb e1       	ldi	r30, 0x1B	; 27
    3830:	fc e1       	ldi	r31, 0x1C	; 28
    3832:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__prologue_saves__+0x1e>
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	8d e0       	ldi	r24, 0x0D	; 13
    383e:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <pinMode>
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	82 57       	subi	r24, 0x72	; 114
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	6a dc       	rcall	.-1836   	; 0x3120 <_ZN4erom5EntryIdE4loadEv>
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	82 57       	subi	r24, 0x72	; 114
    3852:	9f 4f       	sbci	r25, 0xFF	; 255
    3854:	8a dc       	rcall	.-1772   	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    3856:	fc 01       	movw	r30, r24
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	a2 81       	ldd	r26, Z+2	; 0x02
    385e:	b3 81       	ldd	r27, Z+3	; 0x03
    3860:	11 e0       	ldi	r17, 0x01	; 1
    3862:	9c 01       	movw	r18, r24
    3864:	ad 01       	movw	r20, r26
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <__unordsf2>
    386e:	88 23       	and	r24, r24
    3870:	09 f4       	brne	.+2      	; 0x3874 <_ZN9TDSSensor4InitEv+0x4a>
    3872:	10 e0       	ldi	r17, 0x00	; 0
    3874:	11 23       	and	r17, r17
    3876:	89 f0       	breq	.+34     	; 0x389a <_ZN9TDSSensor4InitEv+0x70>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e4       	ldi	r25, 0x40	; 64
    387c:	a7 e9       	ldi	r26, 0x97	; 151
    387e:	b4 e4       	ldi	r27, 0x44	; 68
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	ab 83       	std	Y+3, r26	; 0x03
    3886:	bc 83       	std	Y+4, r27	; 0x04
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	9e 81       	ldd	r25, Y+6	; 0x06
    388c:	82 57       	subi	r24, 0x72	; 114
    388e:	9f 4f       	sbci	r25, 0xFF	; 255
    3890:	9e 01       	movw	r18, r28
    3892:	2f 5f       	subi	r18, 0xFF	; 255
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	b9 01       	movw	r22, r18
    3898:	77 dc       	rcall	.-1810   	; 0x3188 <_ZN4erom5EntryIdEaSERKd>
    389a:	26 96       	adiw	r28, 0x06	; 6
    389c:	e3 e0       	ldi	r30, 0x03	; 3
    389e:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__epilogue_restores__+0x1e>

000038a2 <_ZN9TDSSensor6UpdateEd>:
    38a2:	a6 e0       	ldi	r26, 0x06	; 6
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e7 e5       	ldi	r30, 0x57	; 87
    38a8:	fc e1       	ldi	r31, 0x1C	; 28
    38aa:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
    38b2:	4b 83       	std	Y+3, r20	; 0x03
    38b4:	5c 83       	std	Y+4, r21	; 0x04
    38b6:	6d 83       	std	Y+5, r22	; 0x05
    38b8:	7e 83       	std	Y+6, r23	; 0x06
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	9a 81       	ldd	r25, Y+2	; 0x02
    38be:	82 57       	subi	r24, 0x72	; 114
    38c0:	9f 4f       	sbci	r25, 0xFF	; 255
    38c2:	9e 01       	movw	r18, r28
    38c4:	2d 5f       	subi	r18, 0xFD	; 253
    38c6:	3f 4f       	sbci	r19, 0xFF	; 255
    38c8:	b9 01       	movw	r22, r18
    38ca:	5e dc       	rcall	.-1860   	; 0x3188 <_ZN4erom5EntryIdEaSERKd>
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02
    38d0:	82 57       	subi	r24, 0x72	; 114
    38d2:	9f 4f       	sbci	r25, 0xFF	; 255
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	76 dc       	rcall	.-1812   	; 0x31c4 <_ZNK4erom5EntryIdE4saveEb>
    38d8:	26 96       	adiw	r28, 0x06	; 6
    38da:	e2 e0       	ldi	r30, 0x02	; 2
    38dc:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000038e0 <_ZN9TDSSensor6GetTDSEv>:
    38e0:	ae e0       	ldi	r26, 0x0E	; 14
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	e6 e7       	ldi	r30, 0x76	; 118
    38e6:	fc e1       	ldi	r31, 0x1C	; 28
    38e8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    38ec:	9e 87       	std	Y+14, r25	; 0x0e
    38ee:	8d 87       	std	Y+13, r24	; 0x0d
    38f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f4:	8f 59       	subi	r24, 0x9F	; 159
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	fc 01       	movw	r30, r24
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3900:	b3 81       	ldd	r27, Z+3	; 0x03
    3902:	fe 01       	movw	r30, r28
    3904:	37 96       	adiw	r30, 0x07	; 7
    3906:	22 e0       	ldi	r18, 0x02	; 2
    3908:	ac 01       	movw	r20, r24
    390a:	bd 01       	movw	r22, r26
    390c:	cf 01       	movw	r24, r30
    390e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN6StringC1Efh>
    3912:	ce 01       	movw	r24, r28
    3914:	07 96       	adiw	r24, 0x07	; 7
    3916:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZNK6String5c_strEv>
    391a:	9c 01       	movw	r18, r24
    391c:	8d 85       	ldd	r24, Y+13	; 0x0d
    391e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3920:	8e 57       	subi	r24, 0x7E	; 126
    3922:	9f 4f       	sbci	r25, 0xFF	; 255
    3924:	b9 01       	movw	r22, r18
    3926:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    392a:	ce 01       	movw	r24, r28
    392c:	07 96       	adiw	r24, 0x07	; 7
    392e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3932:	8d 85       	ldd	r24, Y+13	; 0x0d
    3934:	9e 85       	ldd	r25, Y+14	; 0x0e
    3936:	8b 59       	subi	r24, 0x9B	; 155
    3938:	9f 4f       	sbci	r25, 0xFF	; 255
    393a:	fc 01       	movw	r30, r24
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	a2 81       	ldd	r26, Z+2	; 0x02
    3942:	b3 81       	ldd	r27, Z+3	; 0x03
    3944:	22 e0       	ldi	r18, 0x02	; 2
    3946:	ac 01       	movw	r20, r24
    3948:	bd 01       	movw	r22, r26
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN6StringC1Efh>
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZNK6String5c_strEv>
    395a:	9c 01       	movw	r18, r24
    395c:	8d 85       	ldd	r24, Y+13	; 0x0d
    395e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3960:	88 57       	subi	r24, 0x78	; 120
    3962:	9f 4f       	sbci	r25, 0xFF	; 255
    3964:	b9 01       	movw	r22, r18
    3966:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    396a:	ce 01       	movw	r24, r28
    396c:	01 96       	adiw	r24, 0x01	; 1
    396e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3972:	8d 85       	ldd	r24, Y+13	; 0x0d
    3974:	9e 85       	ldd	r25, Y+14	; 0x0e
    3976:	8f 59       	subi	r24, 0x9F	; 159
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	fc 01       	movw	r30, r24
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	a2 81       	ldd	r26, Z+2	; 0x02
    3982:	b3 81       	ldd	r27, Z+3	; 0x03
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	2e 96       	adiw	r28, 0x0e	; 14
    398a:	e2 e0       	ldi	r30, 0x02	; 2
    398c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003990 <_ZN9TDSSensor13PrintTDSToLCDEv>:
    3990:	ae e1       	ldi	r26, 0x1E	; 30
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	ee ec       	ldi	r30, 0xCE	; 206
    3996:	fc e1       	ldi	r31, 0x1C	; 28
    3998:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    399c:	9e 8f       	std	Y+30, r25	; 0x1e
    399e:	8d 8f       	std	Y+29, r24	; 0x1d
    39a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39a4:	9d df       	rcall	.-198    	; 0x38e0 <_ZN9TDSSensor6GetTDSEv>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	89 83       	std	Y+1, r24	; 0x01
    39ac:	9a 83       	std	Y+2, r25	; 0x02
    39ae:	ab 83       	std	Y+3, r26	; 0x03
    39b0:	bc 83       	std	Y+4, r27	; 0x04
    39b2:	8f e1       	ldi	r24, 0x1F	; 31
    39b4:	93 e0       	ldi	r25, 0x03	; 3
    39b6:	fc 01       	movw	r30, r24
    39b8:	80 81       	ld	r24, Z
    39ba:	88 23       	and	r24, r24
    39bc:	89 f4       	brne	.+34     	; 0x39e0 <_ZN9TDSSensor13PrintTDSToLCDEv+0x50>
    39be:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    39ca:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    39ce:	a0 93 31 03 	sts	0x0331, r26	; 0x800331 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    39d2:	b0 93 32 03 	sts	0x0332, r27	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    39d6:	8f e1       	ldi	r24, 0x1F	; 31
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	21 e0       	ldi	r18, 0x01	; 1
    39dc:	fc 01       	movw	r30, r24
    39de:	20 83       	st	Z, r18
    39e0:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    39e4:	9b 01       	movw	r18, r22
    39e6:	ac 01       	movw	r20, r24
    39e8:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    39ec:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    39f0:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    39f4:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    39f8:	28 1b       	sub	r18, r24
    39fa:	39 0b       	sbc	r19, r25
    39fc:	4a 0b       	sbc	r20, r26
    39fe:	5b 0b       	sbc	r21, r27
    3a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a04:	81 5a       	subi	r24, 0xA1	; 161
    3a06:	9f 4f       	sbci	r25, 0xFF	; 255
    3a08:	fc 01       	movw	r30, r24
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	80 57       	subi	r24, 0x70	; 112
    3a10:	9e 4f       	sbci	r25, 0xFE	; 254
    3a12:	09 2e       	mov	r0, r25
    3a14:	00 0c       	add	r0, r0
    3a16:	aa 0b       	sbc	r26, r26
    3a18:	bb 0b       	sbc	r27, r27
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	82 17       	cp	r24, r18
    3a1e:	93 07       	cpc	r25, r19
    3a20:	a4 07       	cpc	r26, r20
    3a22:	b5 07       	cpc	r27, r21
    3a24:	08 f0       	brcs	.+2      	; 0x3a28 <_ZN9TDSSensor13PrintTDSToLCDEv+0x98>
    3a26:	60 e0       	ldi	r22, 0x00	; 0
    3a28:	66 23       	and	r22, r22
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <_ZN9TDSSensor13PrintTDSToLCDEv+0x9e>
    3a2c:	62 c0       	rjmp	.+196    	; 0x3af2 <_ZN9TDSSensor13PrintTDSToLCDEv+0x162>
    3a2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a32:	87 59       	subi	r24, 0x97	; 151
    3a34:	9f 4f       	sbci	r25, 0xFF	; 255
    3a36:	fc 01       	movw	r30, r24
    3a38:	80 81       	ld	r24, Z
    3a3a:	88 23       	and	r24, r24
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <_ZN9TDSSensor13PrintTDSToLCDEv+0xb0>
    3a3e:	43 c0       	rjmp	.+134    	; 0x3ac6 <_ZN9TDSSensor13PrintTDSToLCDEv+0x136>
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	9a 81       	ldd	r25, Y+2	; 0x02
    3a44:	ab 81       	ldd	r26, Y+3	; 0x03
    3a46:	bc 81       	ldd	r27, Y+4	; 0x04
    3a48:	fe 01       	movw	r30, r28
    3a4a:	71 96       	adiw	r30, 0x11	; 17
    3a4c:	22 e0       	ldi	r18, 0x02	; 2
    3a4e:	ac 01       	movw	r20, r24
    3a50:	bd 01       	movw	r22, r26
    3a52:	cf 01       	movw	r24, r30
    3a54:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN6StringC1Edh>
    3a58:	ce 01       	movw	r24, r28
    3a5a:	0b 96       	adiw	r24, 0x0b	; 11
    3a5c:	64 e1       	ldi	r22, 0x14	; 20
    3a5e:	71 e0       	ldi	r23, 0x01	; 1
    3a60:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN15StringSumHelperC1EPKc>
    3a64:	9e 01       	movw	r18, r28
    3a66:	2f 5e       	subi	r18, 0xEF	; 239
    3a68:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	0b 96       	adiw	r24, 0x0b	; 11
    3a6e:	b9 01       	movw	r22, r18
    3a70:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <_ZplRK15StringSumHelperRK6String>
    3a74:	9c 01       	movw	r18, r24
    3a76:	ce 01       	movw	r24, r28
    3a78:	47 96       	adiw	r24, 0x17	; 23
    3a7a:	b9 01       	movw	r22, r18
    3a7c:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    3a80:	ce 01       	movw	r24, r28
    3a82:	0b 96       	adiw	r24, 0x0b	; 11
    3a84:	54 d8       	rcall	.-3928   	; 0x2b2e <_ZN15StringSumHelperD1Ev>
    3a86:	ce 01       	movw	r24, r28
    3a88:	41 96       	adiw	r24, 0x11	; 17
    3a8a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3a8e:	9e 01       	movw	r18, r28
    3a90:	29 5e       	subi	r18, 0xE9	; 233
    3a92:	3f 4f       	sbci	r19, 0xFF	; 255
    3a94:	ce 01       	movw	r24, r28
    3a96:	05 96       	adiw	r24, 0x05	; 5
    3a98:	b9 01       	movw	r22, r18
    3a9a:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    3a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3aa2:	86 59       	subi	r24, 0x96	; 150
    3aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa6:	9e 01       	movw	r18, r28
    3aa8:	2b 5f       	subi	r18, 0xFB	; 251
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	a9 01       	movw	r20, r18
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	70 e0       	ldi	r23, 0x00	; 0
    3ab2:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN7LCDBase9PrintLineEs6String>
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	05 96       	adiw	r24, 0x05	; 5
    3aba:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3abe:	ce 01       	movw	r24, r28
    3ac0:	47 96       	adiw	r24, 0x17	; 23
    3ac2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    3ac6:	8d e0       	ldi	r24, 0x0D	; 13
    3ac8:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <digitalRead>
    3acc:	98 2f       	mov	r25, r24
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	89 27       	eor	r24, r25
    3ad2:	68 2f       	mov	r22, r24
    3ad4:	8d e0       	ldi	r24, 0x0D	; 13
    3ad6:	0e 94 2d 2c 	call	0x585a	; 0x585a <digitalWrite>
    3ada:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3ae6:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3aea:	a0 93 31 03 	sts	0x0331, r26	; 0x800331 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3aee:	b0 93 32 03 	sts	0x0332, r27	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3af2:	6e 96       	adiw	r28, 0x1e	; 30
    3af4:	e2 e0       	ldi	r30, 0x02	; 2
    3af6:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003afa <_ZN9TDSSensor12CalculateTDSEv>:
    3afa:	a4 e1       	ldi	r26, 0x14	; 20
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	e3 e8       	ldi	r30, 0x83	; 131
    3b00:	fd e1       	ldi	r31, 0x1D	; 29
    3b02:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    3b06:	9c 8b       	std	Y+20, r25	; 0x14
    3b08:	8b 8b       	std	Y+19, r24	; 0x13
    3b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0e:	6d d0       	rcall	.+218    	; 0x3bea <_ZN9TDSSensor11GetTDSValueEv>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	ab 83       	std	Y+3, r26	; 0x03
    3b1a:	bc 83       	std	Y+4, r27	; 0x04
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	9e 83       	std	Y+6, r25	; 0x06
    3b22:	8d 83       	std	Y+5, r24	; 0x05
    3b24:	18 86       	std	Y+8, r1	; 0x08
    3b26:	1f 82       	std	Y+7, r1	; 0x07
    3b28:	32 c0       	rjmp	.+100    	; 0x3b8e <_ZN9TDSSensor12CalculateTDSEv+0x94>
    3b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b2c:	98 85       	ldd	r25, Y+8	; 0x08
    3b2e:	8c 59       	subi	r24, 0x9C	; 156
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	9a 87       	std	Y+10, r25	; 0x0a
    3b34:	89 87       	std	Y+9, r24	; 0x09
    3b36:	89 85       	ldd	r24, Y+9	; 0x09
    3b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3a:	09 2e       	mov	r0, r25
    3b3c:	00 0c       	add	r0, r0
    3b3e:	aa 0b       	sbc	r26, r26
    3b40:	bb 0b       	sbc	r27, r27
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 2c 2b 	call	0x5658	; 0x5658 <delay>
    3b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b4e:	4d d0       	rcall	.+154    	; 0x3bea <_ZN9TDSSensor11GetTDSValueEv>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	8b 87       	std	Y+11, r24	; 0x0b
    3b56:	9c 87       	std	Y+12, r25	; 0x0c
    3b58:	ad 87       	std	Y+13, r26	; 0x0d
    3b5a:	be 87       	std	Y+14, r27	; 0x0e
    3b5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b60:	4d 85       	ldd	r20, Y+13	; 0x0d
    3b62:	5e 85       	ldd	r21, Y+14	; 0x0e
    3b64:	69 81       	ldd	r22, Y+1	; 0x01
    3b66:	7a 81       	ldd	r23, Y+2	; 0x02
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	ce d6       	rcall	.+3484   	; 0x490a <__addsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	ab 83       	std	Y+3, r26	; 0x03
    3b78:	bc 83       	std	Y+4, r27	; 0x04
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	8f 81       	ldd	r24, Y+7	; 0x07
    3b86:	98 85       	ldd	r25, Y+8	; 0x08
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	98 87       	std	Y+8, r25	; 0x08
    3b8c:	8f 83       	std	Y+7, r24	; 0x07
    3b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3b90:	98 85       	ldd	r25, Y+8	; 0x08
    3b92:	0b 97       	sbiw	r24, 0x0b	; 11
    3b94:	54 f2       	brlt	.-108    	; 0x3b2a <_ZN9TDSSensor12CalculateTDSEv+0x30>
    3b96:	8d 81       	ldd	r24, Y+5	; 0x05
    3b98:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9a:	09 2e       	mov	r0, r25
    3b9c:	00 0c       	add	r0, r0
    3b9e:	aa 0b       	sbc	r26, r26
    3ba0:	bb 0b       	sbc	r27, r27
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	b4 d7       	rcall	.+3944   	; 0x4b10 <__floatsisf>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	9c 01       	movw	r18, r24
    3bae:	ad 01       	movw	r20, r26
    3bb0:	69 81       	ldd	r22, Y+1	; 0x01
    3bb2:	7a 81       	ldd	r23, Y+2	; 0x02
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb8:	10 d7       	rcall	.+3616   	; 0x49da <__divsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	8f 87       	std	Y+15, r24	; 0x0f
    3bc0:	98 8b       	std	Y+16, r25	; 0x10
    3bc2:	a9 8b       	std	Y+17, r26	; 0x11
    3bc4:	ba 8b       	std	Y+18, r27	; 0x12
    3bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bca:	9c 01       	movw	r18, r24
    3bcc:	2f 59       	subi	r18, 0x9F	; 159
    3bce:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd2:	98 89       	ldd	r25, Y+16	; 0x10
    3bd4:	a9 89       	ldd	r26, Y+17	; 0x11
    3bd6:	ba 89       	ldd	r27, Y+18	; 0x12
    3bd8:	f9 01       	movw	r30, r18
    3bda:	80 83       	st	Z, r24
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	a2 83       	std	Z+2, r26	; 0x02
    3be0:	b3 83       	std	Z+3, r27	; 0x03
    3be2:	64 96       	adiw	r28, 0x14	; 20
    3be4:	e2 e0       	ldi	r30, 0x02	; 2
    3be6:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00003bea <_ZN9TDSSensor11GetTDSValueEv>:
    3bea:	a0 e1       	ldi	r26, 0x10	; 16
    3bec:	b0 e0       	ldi	r27, 0x00	; 0
    3bee:	eb ef       	ldi	r30, 0xFB	; 251
    3bf0:	fd e1       	ldi	r31, 0x1D	; 29
    3bf2:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__prologue_saves__+0x18>
    3bf6:	98 8b       	std	Y+16, r25	; 0x10
    3bf8:	8f 87       	std	Y+15, r24	; 0x0f
    3bfa:	87 e2       	ldi	r24, 0x27	; 39
    3bfc:	93 e0       	ldi	r25, 0x03	; 3
    3bfe:	fc 01       	movw	r30, r24
    3c00:	80 81       	ld	r24, Z
    3c02:	88 23       	and	r24, r24
    3c04:	89 f4       	brne	.+34     	; 0x3c28 <_ZN9TDSSensor11GetTDSValueEv+0x3e>
    3c06:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    3c12:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    3c16:	a0 93 35 03 	sts	0x0335, r26	; 0x800335 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    3c1a:	b0 93 36 03 	sts	0x0336, r27	; 0x800336 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    3c1e:	87 e2       	ldi	r24, 0x27	; 39
    3c20:	93 e0       	ldi	r25, 0x03	; 3
    3c22:	21 e0       	ldi	r18, 0x01	; 1
    3c24:	fc 01       	movw	r30, r24
    3c26:	20 83       	st	Z, r18
    3c28:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <millis>
    3c2c:	9b 01       	movw	r18, r22
    3c2e:	ac 01       	movw	r20, r24
    3c30:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime>
    3c34:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x1>
    3c38:	a0 91 35 03 	lds	r26, 0x0335	; 0x800335 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x2>
    3c3c:	b0 91 36 03 	lds	r27, 0x0336	; 0x800336 <_ZZN9TDSSensor11GetTDSValueEvE12samplingTime+0x3>
    3c40:	79 01       	movw	r14, r18
    3c42:	8a 01       	movw	r16, r20
    3c44:	e8 1a       	sub	r14, r24
    3c46:	f9 0a       	sbc	r15, r25
    3c48:	0a 0b       	sbc	r16, r26
    3c4a:	1b 0b       	sbc	r17, r27
    3c4c:	d8 01       	movw	r26, r16
    3c4e:	c7 01       	movw	r24, r14
    3c50:	21 e0       	ldi	r18, 0x01	; 1
    3c52:	8f 36       	cpi	r24, 0x6F	; 111
    3c54:	91 05       	cpc	r25, r1
    3c56:	a1 05       	cpc	r26, r1
    3c58:	b1 05       	cpc	r27, r1
    3c5a:	08 f4       	brcc	.+2      	; 0x3c5e <_ZN9TDSSensor11GetTDSValueEv+0x74>
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	22 23       	and	r18, r18
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <_ZN9TDSSensor11GetTDSValueEv+0x7a>
    3c62:	77 c0       	rjmp	.+238    	; 0x3d52 <_ZN9TDSSensor11GetTDSValueEv+0x168>
    3c64:	88 e2       	ldi	r24, 0x28	; 40
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	9a 83       	std	Y+2, r25	; 0x02
    3c6a:	89 83       	std	Y+1, r24	; 0x01
    3c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6e:	98 89       	ldd	r25, Y+16	; 0x10
    3c70:	83 5a       	subi	r24, 0xA3	; 163
    3c72:	9f 4f       	sbci	r25, 0xFF	; 255
    3c74:	fc 01       	movw	r30, r24
    3c76:	00 81       	ld	r16, Z
    3c78:	11 81       	ldd	r17, Z+1	; 0x01
    3c7a:	98 01       	movw	r18, r16
    3c7c:	2f 5f       	subi	r18, 0xFF	; 255
    3c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c82:	98 89       	ldd	r25, Y+16	; 0x10
    3c84:	83 5a       	subi	r24, 0xA3	; 163
    3c86:	9f 4f       	sbci	r25, 0xFF	; 255
    3c88:	fc 01       	movw	r30, r24
    3c8a:	31 83       	std	Z+1, r19	; 0x01
    3c8c:	20 83       	st	Z, r18
    3c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c90:	98 89       	ldd	r25, Y+16	; 0x10
    3c92:	fc 01       	movw	r30, r24
    3c94:	83 85       	ldd	r24, Z+11	; 0x0b
    3c96:	94 85       	ldd	r25, Z+12	; 0x0c
    3c98:	0e 94 ab 2b 	call	0x5756	; 0x5756 <analogRead>
    3c9c:	ac 01       	movw	r20, r24
    3c9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3ca0:	38 89       	ldd	r19, Y+16	; 0x10
    3ca2:	c8 01       	movw	r24, r16
    3ca4:	88 0f       	add	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	82 0f       	add	r24, r18
    3caa:	93 1f       	adc	r25, r19
    3cac:	0d 96       	adiw	r24, 0x0d	; 13
    3cae:	fc 01       	movw	r30, r24
    3cb0:	51 83       	std	Z+1, r21	; 0x01
    3cb2:	40 83       	st	Z, r20
    3cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb6:	98 89       	ldd	r25, Y+16	; 0x10
    3cb8:	83 5a       	subi	r24, 0xA3	; 163
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	20 81       	ld	r18, Z
    3cc0:	31 81       	ldd	r19, Z+1	; 0x01
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc6:	28 17       	cp	r18, r24
    3cc8:	39 07       	cpc	r19, r25
    3cca:	39 f4       	brne	.+14     	; 0x3cda <_ZN9TDSSensor11GetTDSValueEv+0xf0>
    3ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cce:	98 89       	ldd	r25, Y+16	; 0x10
    3cd0:	83 5a       	subi	r24, 0xA3	; 163
    3cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	11 82       	std	Z+1, r1	; 0x01
    3cd8:	10 82       	st	Z, r1
    3cda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cdc:	98 89       	ldd	r25, Y+16	; 0x10
    3cde:	9c 01       	movw	r18, r24
    3ce0:	23 5f       	subi	r18, 0xF3	; 243
    3ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce4:	49 81       	ldd	r20, Y+1	; 0x01
    3ce6:	5a 81       	ldd	r21, Y+2	; 0x02
    3ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cea:	98 89       	ldd	r25, Y+16	; 0x10
    3cec:	b9 01       	movw	r22, r18
    3cee:	40 d0       	rcall	.+128    	; 0x3d70 <_ZN9TDSSensor16CalculateAverageEPii>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	8b 83       	std	Y+3, r24	; 0x03
    3cf6:	9c 83       	std	Y+4, r25	; 0x04
    3cf8:	ad 83       	std	Y+5, r26	; 0x05
    3cfa:	be 83       	std	Y+6, r27	; 0x06
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	40 ea       	ldi	r20, 0xA0	; 160
    3d02:	5b e3       	ldi	r21, 0x3B	; 59
    3d04:	6b 81       	ldd	r22, Y+3	; 0x03
    3d06:	7c 81       	ldd	r23, Y+4	; 0x04
    3d08:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0c:	b5 d7       	rcall	.+3946   	; 0x4c78 <__mulsf3>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	8f 83       	std	Y+7, r24	; 0x07
    3d14:	98 87       	std	Y+8, r25	; 0x08
    3d16:	a9 87       	std	Y+9, r26	; 0x09
    3d18:	ba 87       	std	Y+10, r27	; 0x0a
    3d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d1c:	98 89       	ldd	r25, Y+16	; 0x10
    3d1e:	82 57       	subi	r24, 0x72	; 114
    3d20:	9f 4f       	sbci	r25, 0xFF	; 255
    3d22:	23 da       	rcall	.-3002   	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    3d24:	fc 01       	movw	r30, r24
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d2c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d2e:	2f 81       	ldd	r18, Y+7	; 0x07
    3d30:	38 85       	ldd	r19, Y+8	; 0x08
    3d32:	49 85       	ldd	r20, Y+9	; 0x09
    3d34:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	9e d7       	rcall	.+3900   	; 0x4c78 <__mulsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8b 87       	std	Y+11, r24	; 0x0b
    3d42:	9c 87       	std	Y+12, r25	; 0x0c
    3d44:	ad 87       	std	Y+13, r26	; 0x0d
    3d46:	be 87       	std	Y+14, r27	; 0x0e
    3d48:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d4c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d4e:	be 85       	ldd	r27, Y+14	; 0x0e
    3d50:	09 c0       	rjmp	.+18     	; 0x3d64 <_ZN9TDSSensor11GetTDSValueEv+0x17a>
    3d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d54:	98 89       	ldd	r25, Y+16	; 0x10
    3d56:	8f 59       	subi	r24, 0x9F	; 159
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	a2 81       	ldd	r26, Z+2	; 0x02
    3d62:	b3 81       	ldd	r27, Z+3	; 0x03
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	60 96       	adiw	r28, 0x10	; 16
    3d6a:	e6 e0       	ldi	r30, 0x06	; 6
    3d6c:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__epilogue_restores__+0x18>

00003d70 <_ZN9TDSSensor16CalculateAverageEPii>:
    3d70:	cf 92       	push	r12
    3d72:	df 92       	push	r13
    3d74:	ef 92       	push	r14
    3d76:	ff 92       	push	r15
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	68 97       	sbiw	r28, 0x18	; 24
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	98 8b       	std	Y+16, r25	; 0x10
    3d8e:	8f 87       	std	Y+15, r24	; 0x0f
    3d90:	7a 8b       	std	Y+18, r23	; 0x12
    3d92:	69 8b       	std	Y+17, r22	; 0x11
    3d94:	5c 8b       	std	Y+20, r21	; 0x14
    3d96:	4b 8b       	std	Y+19, r20	; 0x13
    3d98:	1f 82       	std	Y+7, r1	; 0x07
    3d9a:	18 86       	std	Y+8, r1	; 0x08
    3d9c:	19 86       	std	Y+9, r1	; 0x09
    3d9e:	1a 86       	std	Y+10, r1	; 0x0a
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	9c 89       	ldd	r25, Y+20	; 0x14
    3da4:	18 16       	cp	r1, r24
    3da6:	19 06       	cpc	r1, r25
    3da8:	5c f0       	brlt	.+22     	; 0x3dc0 <_ZN9TDSSensor16CalculateAverageEPii+0x50>
    3daa:	8c eb       	ldi	r24, 0xBC	; 188
    3dac:	93 e0       	ldi	r25, 0x03	; 3
    3dae:	bc 01       	movw	r22, r24
    3db0:	84 e5       	ldi	r24, 0x54	; 84
    3db2:	95 e0       	ldi	r25, 0x05	; 5
    3db4:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	27 c1       	rjmp	.+590    	; 0x400e <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    3dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc4:	05 97       	sbiw	r24, 0x05	; 5
    3dc6:	0c f0       	brlt	.+2      	; 0x3dca <_ZN9TDSSensor16CalculateAverageEPii+0x5a>
    3dc8:	48 c0       	rjmp	.+144    	; 0x3e5a <_ZN9TDSSensor16CalculateAverageEPii+0xea>
    3dca:	1a 82       	std	Y+2, r1	; 0x02
    3dcc:	19 82       	std	Y+1, r1	; 0x01
    3dce:	20 c0       	rjmp	.+64     	; 0x3e10 <_ZN9TDSSensor16CalculateAverageEPii+0xa0>
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd4:	88 0f       	add	r24, r24
    3dd6:	99 1f       	adc	r25, r25
    3dd8:	29 89       	ldd	r18, Y+17	; 0x11
    3dda:	3a 89       	ldd	r19, Y+18	; 0x12
    3ddc:	82 0f       	add	r24, r18
    3dde:	93 1f       	adc	r25, r19
    3de0:	fc 01       	movw	r30, r24
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	09 2e       	mov	r0, r25
    3de8:	00 0c       	add	r0, r0
    3dea:	aa 0b       	sbc	r26, r26
    3dec:	bb 0b       	sbc	r27, r27
    3dee:	2f 81       	ldd	r18, Y+7	; 0x07
    3df0:	38 85       	ldd	r19, Y+8	; 0x08
    3df2:	49 85       	ldd	r20, Y+9	; 0x09
    3df4:	5a 85       	ldd	r21, Y+10	; 0x0a
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	a4 1f       	adc	r26, r20
    3dfc:	b5 1f       	adc	r27, r21
    3dfe:	8f 83       	std	Y+7, r24	; 0x07
    3e00:	98 87       	std	Y+8, r25	; 0x08
    3e02:	a9 87       	std	Y+9, r26	; 0x09
    3e04:	ba 87       	std	Y+10, r27	; 0x0a
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	29 81       	ldd	r18, Y+1	; 0x01
    3e12:	3a 81       	ldd	r19, Y+2	; 0x02
    3e14:	8b 89       	ldd	r24, Y+19	; 0x13
    3e16:	9c 89       	ldd	r25, Y+20	; 0x14
    3e18:	28 17       	cp	r18, r24
    3e1a:	39 07       	cpc	r19, r25
    3e1c:	cc f2       	brlt	.-78     	; 0x3dd0 <_ZN9TDSSensor16CalculateAverageEPii+0x60>
    3e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e20:	9c 89       	ldd	r25, Y+20	; 0x14
    3e22:	9c 01       	movw	r18, r24
    3e24:	99 0f       	add	r25, r25
    3e26:	44 0b       	sbc	r20, r20
    3e28:	55 0b       	sbc	r21, r21
    3e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e2c:	98 85       	ldd	r25, Y+8	; 0x08
    3e2e:	a9 85       	ldd	r26, Y+9	; 0x09
    3e30:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e32:	bc 01       	movw	r22, r24
    3e34:	cd 01       	movw	r24, r26
    3e36:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <__divmodsi4>
    3e3a:	da 01       	movw	r26, r20
    3e3c:	c9 01       	movw	r24, r18
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	66 d6       	rcall	.+3276   	; 0x4b10 <__floatsisf>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	8b 87       	std	Y+11, r24	; 0x0b
    3e4a:	9c 87       	std	Y+12, r25	; 0x0c
    3e4c:	ad 87       	std	Y+13, r26	; 0x0d
    3e4e:	be 87       	std	Y+14, r27	; 0x0e
    3e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e52:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e54:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e56:	be 85       	ldd	r27, Y+14	; 0x0e
    3e58:	da c0       	rjmp	.+436    	; 0x400e <_ZN9TDSSensor16CalculateAverageEPii+0x29e>
    3e5a:	89 89       	ldd	r24, Y+17	; 0x11
    3e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e5e:	fc 01       	movw	r30, r24
    3e60:	20 81       	ld	r18, Z
    3e62:	31 81       	ldd	r19, Z+1	; 0x01
    3e64:	89 89       	ldd	r24, Y+17	; 0x11
    3e66:	9a 89       	ldd	r25, Y+18	; 0x12
    3e68:	02 96       	adiw	r24, 0x02	; 2
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	28 17       	cp	r18, r24
    3e72:	39 07       	cpc	r19, r25
    3e74:	7c f4       	brge	.+30     	; 0x3e94 <_ZN9TDSSensor16CalculateAverageEPii+0x124>
    3e76:	89 89       	ldd	r24, Y+17	; 0x11
    3e78:	9a 89       	ldd	r25, Y+18	; 0x12
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	80 81       	ld	r24, Z
    3e7e:	91 81       	ldd	r25, Z+1	; 0x01
    3e80:	9e 83       	std	Y+6, r25	; 0x06
    3e82:	8d 83       	std	Y+5, r24	; 0x05
    3e84:	89 89       	ldd	r24, Y+17	; 0x11
    3e86:	9a 89       	ldd	r25, Y+18	; 0x12
    3e88:	fc 01       	movw	r30, r24
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	9c 83       	std	Y+4, r25	; 0x04
    3e90:	8b 83       	std	Y+3, r24	; 0x03
    3e92:	0e c0       	rjmp	.+28     	; 0x3eb0 <_ZN9TDSSensor16CalculateAverageEPii+0x140>
    3e94:	89 89       	ldd	r24, Y+17	; 0x11
    3e96:	9a 89       	ldd	r25, Y+18	; 0x12
    3e98:	fc 01       	movw	r30, r24
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	89 89       	ldd	r24, Y+17	; 0x11
    3ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	80 81       	ld	r24, Z
    3eaa:	91 81       	ldd	r25, Z+1	; 0x01
    3eac:	9c 83       	std	Y+4, r25	; 0x04
    3eae:	8b 83       	std	Y+3, r24	; 0x03
    3eb0:	82 e0       	ldi	r24, 0x02	; 2
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	9a 83       	std	Y+2, r25	; 0x02
    3eb6:	89 83       	std	Y+1, r24	; 0x01
    3eb8:	80 c0       	rjmp	.+256    	; 0x3fba <_ZN9TDSSensor16CalculateAverageEPii+0x24a>
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	29 89       	ldd	r18, Y+17	; 0x11
    3ec4:	3a 89       	ldd	r19, Y+18	; 0x12
    3ec6:	82 0f       	add	r24, r18
    3ec8:	93 1f       	adc	r25, r19
    3eca:	fc 01       	movw	r30, r24
    3ecc:	20 81       	ld	r18, Z
    3ece:	31 81       	ldd	r19, Z+1	; 0x01
    3ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed4:	28 17       	cp	r18, r24
    3ed6:	39 07       	cpc	r19, r25
    3ed8:	04 f5       	brge	.+64     	; 0x3f1a <_ZN9TDSSensor16CalculateAverageEPii+0x1aa>
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ede:	09 2e       	mov	r0, r25
    3ee0:	00 0c       	add	r0, r0
    3ee2:	aa 0b       	sbc	r26, r26
    3ee4:	bb 0b       	sbc	r27, r27
    3ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    3ee8:	38 85       	ldd	r19, Y+8	; 0x08
    3eea:	49 85       	ldd	r20, Y+9	; 0x09
    3eec:	5a 85       	ldd	r21, Y+10	; 0x0a
    3eee:	82 0f       	add	r24, r18
    3ef0:	93 1f       	adc	r25, r19
    3ef2:	a4 1f       	adc	r26, r20
    3ef4:	b5 1f       	adc	r27, r21
    3ef6:	8f 83       	std	Y+7, r24	; 0x07
    3ef8:	98 87       	std	Y+8, r25	; 0x08
    3efa:	a9 87       	std	Y+9, r26	; 0x09
    3efc:	ba 87       	std	Y+10, r27	; 0x0a
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	9a 81       	ldd	r25, Y+2	; 0x02
    3f02:	88 0f       	add	r24, r24
    3f04:	99 1f       	adc	r25, r25
    3f06:	29 89       	ldd	r18, Y+17	; 0x11
    3f08:	3a 89       	ldd	r19, Y+18	; 0x12
    3f0a:	82 0f       	add	r24, r18
    3f0c:	93 1f       	adc	r25, r19
    3f0e:	fc 01       	movw	r30, r24
    3f10:	80 81       	ld	r24, Z
    3f12:	91 81       	ldd	r25, Z+1	; 0x01
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
    3f18:	4b c0       	rjmp	.+150    	; 0x3fb0 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	29 89       	ldd	r18, Y+17	; 0x11
    3f24:	3a 89       	ldd	r19, Y+18	; 0x12
    3f26:	82 0f       	add	r24, r18
    3f28:	93 1f       	adc	r25, r19
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	20 81       	ld	r18, Z
    3f2e:	31 81       	ldd	r19, Z+1	; 0x01
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	9c 81       	ldd	r25, Y+4	; 0x04
    3f34:	82 17       	cp	r24, r18
    3f36:	93 07       	cpc	r25, r19
    3f38:	04 f5       	brge	.+64     	; 0x3f7a <_ZN9TDSSensor16CalculateAverageEPii+0x20a>
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3e:	09 2e       	mov	r0, r25
    3f40:	00 0c       	add	r0, r0
    3f42:	aa 0b       	sbc	r26, r26
    3f44:	bb 0b       	sbc	r27, r27
    3f46:	2f 81       	ldd	r18, Y+7	; 0x07
    3f48:	38 85       	ldd	r19, Y+8	; 0x08
    3f4a:	49 85       	ldd	r20, Y+9	; 0x09
    3f4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f4e:	82 0f       	add	r24, r18
    3f50:	93 1f       	adc	r25, r19
    3f52:	a4 1f       	adc	r26, r20
    3f54:	b5 1f       	adc	r27, r21
    3f56:	8f 83       	std	Y+7, r24	; 0x07
    3f58:	98 87       	std	Y+8, r25	; 0x08
    3f5a:	a9 87       	std	Y+9, r26	; 0x09
    3f5c:	ba 87       	std	Y+10, r27	; 0x0a
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	9a 81       	ldd	r25, Y+2	; 0x02
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	29 89       	ldd	r18, Y+17	; 0x11
    3f68:	3a 89       	ldd	r19, Y+18	; 0x12
    3f6a:	82 0f       	add	r24, r18
    3f6c:	93 1f       	adc	r25, r19
    3f6e:	fc 01       	movw	r30, r24
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	8b 83       	std	Y+3, r24	; 0x03
    3f78:	1b c0       	rjmp	.+54     	; 0x3fb0 <_ZN9TDSSensor16CalculateAverageEPii+0x240>
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	88 0f       	add	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	29 89       	ldd	r18, Y+17	; 0x11
    3f84:	3a 89       	ldd	r19, Y+18	; 0x12
    3f86:	82 0f       	add	r24, r18
    3f88:	93 1f       	adc	r25, r19
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	09 2e       	mov	r0, r25
    3f92:	00 0c       	add	r0, r0
    3f94:	aa 0b       	sbc	r26, r26
    3f96:	bb 0b       	sbc	r27, r27
    3f98:	2f 81       	ldd	r18, Y+7	; 0x07
    3f9a:	38 85       	ldd	r19, Y+8	; 0x08
    3f9c:	49 85       	ldd	r20, Y+9	; 0x09
    3f9e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fa0:	82 0f       	add	r24, r18
    3fa2:	93 1f       	adc	r25, r19
    3fa4:	a4 1f       	adc	r26, r20
    3fa6:	b5 1f       	adc	r27, r21
    3fa8:	8f 83       	std	Y+7, r24	; 0x07
    3faa:	98 87       	std	Y+8, r25	; 0x08
    3fac:	a9 87       	std	Y+9, r26	; 0x09
    3fae:	ba 87       	std	Y+10, r27	; 0x0a
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb4:	01 96       	adiw	r24, 0x01	; 1
    3fb6:	9a 83       	std	Y+2, r25	; 0x02
    3fb8:	89 83       	std	Y+1, r24	; 0x01
    3fba:	29 81       	ldd	r18, Y+1	; 0x01
    3fbc:	3a 81       	ldd	r19, Y+2	; 0x02
    3fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc2:	28 17       	cp	r18, r24
    3fc4:	39 07       	cpc	r19, r25
    3fc6:	0c f4       	brge	.+2      	; 0x3fca <_ZN9TDSSensor16CalculateAverageEPii+0x25a>
    3fc8:	78 cf       	rjmp	.-272    	; 0x3eba <_ZN9TDSSensor16CalculateAverageEPii+0x14a>
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	9e d5       	rcall	.+2876   	; 0x4b10 <__floatsisf>
    3fd4:	6b 01       	movw	r12, r22
    3fd6:	7c 01       	movw	r14, r24
    3fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fda:	9c 89       	ldd	r25, Y+20	; 0x14
    3fdc:	02 97       	sbiw	r24, 0x02	; 2
    3fde:	09 2e       	mov	r0, r25
    3fe0:	00 0c       	add	r0, r0
    3fe2:	aa 0b       	sbc	r26, r26
    3fe4:	bb 0b       	sbc	r27, r27
    3fe6:	bc 01       	movw	r22, r24
    3fe8:	cd 01       	movw	r24, r26
    3fea:	92 d5       	rcall	.+2852   	; 0x4b10 <__floatsisf>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9c 01       	movw	r18, r24
    3ff2:	ad 01       	movw	r20, r26
    3ff4:	c7 01       	movw	r24, r14
    3ff6:	b6 01       	movw	r22, r12
    3ff8:	f0 d4       	rcall	.+2528   	; 0x49da <__divsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	8b 87       	std	Y+11, r24	; 0x0b
    4000:	9c 87       	std	Y+12, r25	; 0x0c
    4002:	ad 87       	std	Y+13, r26	; 0x0d
    4004:	be 87       	std	Y+14, r27	; 0x0e
    4006:	8b 85       	ldd	r24, Y+11	; 0x0b
    4008:	9c 85       	ldd	r25, Y+12	; 0x0c
    400a:	ad 85       	ldd	r26, Y+13	; 0x0d
    400c:	be 85       	ldd	r27, Y+14	; 0x0e
    400e:	bc 01       	movw	r22, r24
    4010:	cd 01       	movw	r24, r26
    4012:	68 96       	adiw	r28, 0x18	; 24
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	f8 94       	cli
    4018:	de bf       	out	0x3e, r29	; 62
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	ff 90       	pop	r15
    4024:	ef 90       	pop	r14
    4026:	df 90       	pop	r13
    4028:	cf 90       	pop	r12
    402a:	08 95       	ret

0000402c <_ZN9TDSSensorD1Ev>:
using namespace std;


#include "LCDBase.h"

class TDSSensor : public erom::Storage {
    402c:	a2 e0       	ldi	r26, 0x02	; 2
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	ec e1       	ldi	r30, 0x1C	; 28
    4032:	f0 e2       	ldi	r31, 0x20	; 32
    4034:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	89 83       	std	Y+1, r24	; 0x01
    403c:	89 81       	ldd	r24, Y+1	; 0x01
    403e:	9a 81       	ldd	r25, Y+2	; 0x02
    4040:	23 eb       	ldi	r18, 0xB3	; 179
    4042:	31 e0       	ldi	r19, 0x01	; 1
    4044:	fc 01       	movw	r30, r24
    4046:	31 83       	std	Z+1, r19	; 0x01
    4048:	20 83       	st	Z, r18
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	88 57       	subi	r24, 0x78	; 120
    4050:	9f 4f       	sbci	r25, 0xFF	; 255
    4052:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	8e 57       	subi	r24, 0x7E	; 126
    405c:	9f 4f       	sbci	r25, 0xFF	; 255
    405e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN4erom7StorageD1Ev>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	89 2b       	or	r24, r25
    4070:	21 f0       	breq	.+8      	; 0x407a <_ZN9TDSSensorD1Ev+0x4e>
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    407a:	22 96       	adiw	r28, 0x02	; 2
    407c:	e2 e0       	ldi	r30, 0x02	; 2
    407e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004082 <_ZN9TDSSensorD0Ev>:
    4082:	a2 e0       	ldi	r26, 0x02	; 2
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	e7 e4       	ldi	r30, 0x47	; 71
    4088:	f0 e2       	ldi	r31, 0x20	; 32
    408a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    408e:	9a 83       	std	Y+2, r25	; 0x02
    4090:	89 83       	std	Y+1, r24	; 0x01
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	ca df       	rcall	.-108    	; 0x402c <_ZN9TDSSensorD1Ev>
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	9a 81       	ldd	r25, Y+2	; 0x02
    409c:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_ZdlPv>
    40a0:	22 96       	adiw	r28, 0x02	; 2
    40a2:	e2 e0       	ldi	r30, 0x02	; 2
    40a4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000040a8 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    40a8:	a2 e0       	ldi	r26, 0x02	; 2
    40aa:	b0 e0       	ldi	r27, 0x00	; 0
    40ac:	ea e5       	ldi	r30, 0x5A	; 90
    40ae:	f0 e2       	ldi	r31, 0x20	; 32
    40b0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    40b4:	9a 83       	std	Y+2, r25	; 0x02
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	9a 81       	ldd	r25, Y+2	; 0x02
    40bc:	fc 01       	movw	r30, r24
    40be:	84 81       	ldd	r24, Z+4	; 0x04
    40c0:	95 81       	ldd	r25, Z+5	; 0x05
    40c2:	22 96       	adiw	r28, 0x02	; 2
    40c4:	e2 e0       	ldi	r30, 0x02	; 2
    40c6:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000040ca <_ZN6StringpLEPKc>:
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    40ca:	a4 e0       	ldi	r26, 0x04	; 4
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	eb e6       	ldi	r30, 0x6B	; 107
    40d0:	f0 e2       	ldi	r31, 0x20	; 32
    40d2:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    40d6:	9a 83       	std	Y+2, r25	; 0x02
    40d8:	89 83       	std	Y+1, r24	; 0x01
    40da:	7c 83       	std	Y+4, r23	; 0x04
    40dc:	6b 83       	std	Y+3, r22	; 0x03
    40de:	2b 81       	ldd	r18, Y+3	; 0x03
    40e0:	3c 81       	ldd	r19, Y+4	; 0x04
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	b9 01       	movw	r22, r18
    40e8:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <_ZN6String6concatEPKc>
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	9a 81       	ldd	r25, Y+2	; 0x02
    40f0:	24 96       	adiw	r28, 0x04	; 4
    40f2:	e2 e0       	ldi	r30, 0x02	; 2
    40f4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000040f8 <_ZNK6StringeqEPKc>:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    40f8:	a4 e0       	ldi	r26, 0x04	; 4
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	e2 e8       	ldi	r30, 0x82	; 130
    40fe:	f0 e2       	ldi	r31, 0x20	; 32
    4100:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    4104:	9a 83       	std	Y+2, r25	; 0x02
    4106:	89 83       	std	Y+1, r24	; 0x01
    4108:	7c 83       	std	Y+4, r23	; 0x04
    410a:	6b 83       	std	Y+3, r22	; 0x03
    410c:	2b 81       	ldd	r18, Y+3	; 0x03
    410e:	3c 81       	ldd	r19, Y+4	; 0x04
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	b9 01       	movw	r22, r18
    4116:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZNK6String6equalsEPKc>
    411a:	24 96       	adiw	r28, 0x04	; 4
    411c:	e2 e0       	ldi	r30, 0x02	; 2
    411e:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004122 <_ZN15WaterSensorWire5SetupEv>:
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";

void WaterSensorWire::Setup() {
    4122:	a0 e0       	ldi	r26, 0x00	; 0
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	e7 e9       	ldi	r30, 0x97	; 151
    4128:	f0 e2       	ldi	r31, 0x20	; 32
    412a:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    Wire.begin(_slave); //attached to esp8266 wifi
    412e:	62 e1       	ldi	r22, 0x12	; 18
    4130:	8d e9       	ldi	r24, 0x9D	; 157
    4132:	92 e0       	ldi	r25, 0x02	; 2
    4134:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN7TwoWire5beginEh>
    Wire.onRequest(Request);
    4138:	6a e8       	ldi	r22, 0x8A	; 138
    413a:	71 e2       	ldi	r23, 0x21	; 33
    413c:	8d e9       	ldi	r24, 0x9D	; 157
    413e:	92 e0       	ldi	r25, 0x02	; 2
    4140:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN7TwoWire9onRequestEPFvvE>
    Wire.onReceive(Receive);
    4144:	6b ea       	ldi	r22, 0xAB	; 171
    4146:	70 e2       	ldi	r23, 0x20	; 32
    4148:	8d e9       	ldi	r24, 0x9D	; 157
    414a:	92 e0       	ldi	r25, 0x02	; 2
    414c:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN7TwoWire9onReceiveEPFviE>

}
    4150:	e2 e0       	ldi	r30, 0x02	; 2
    4152:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004156 <_ZN15WaterSensorWire7ReceiveEi>:
void WaterSensorWire::Receive(int bytes) {
    4156:	a9 e2       	ldi	r26, 0x29	; 41
    4158:	b0 e0       	ldi	r27, 0x00	; 0
    415a:	e1 eb       	ldi	r30, 0xB1	; 177
    415c:	f0 e2       	ldi	r31, 0x20	; 32
    415e:	0c 94 50 2f 	jmp	0x5ea0	; 0x5ea0 <__prologue_saves__+0x1e>
    4162:	99 a7       	std	Y+41, r25	; 0x29
    4164:	88 a7       	std	Y+40, r24	; 0x28
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!
    _wireRequest = "";
    4166:	6a e1       	ldi	r22, 0x1A	; 26
    4168:	71 e0       	ldi	r23, 0x01	; 1
    416a:	87 e3       	ldi	r24, 0x37	; 55
    416c:	93 e0       	ldi	r25, 0x03	; 3
    416e:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    _cmd = "";
    4172:	6a e1       	ldi	r22, 0x1A	; 26
    4174:	71 e0       	ldi	r23, 0x01	; 1
    4176:	83 e4       	ldi	r24, 0x43	; 67
    4178:	93 e0       	ldi	r25, 0x03	; 3
    417a:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    _cmdData = "";
    417e:	6a e1       	ldi	r22, 0x1A	; 26
    4180:	71 e0       	ldi	r23, 0x01	; 1
    4182:	89 e4       	ldi	r24, 0x49	; 73
    4184:	93 e0       	ldi	r25, 0x03	; 3
    4186:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    if(bytes == _wireReqLength) {
    418a:	88 a5       	ldd	r24, Y+40	; 0x28
    418c:	99 a5       	ldd	r25, Y+41	; 0x29
    418e:	44 97       	sbiw	r24, 0x14	; 20
    4190:	09 f0       	breq	.+2      	; 0x4194 <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    4192:	ad c0       	rjmp	.+346    	; 0x42ee <_ZN15WaterSensorWire7ReceiveEi+0x198>
        while (0 < Wire.available()) {
    4194:	0a c0       	rjmp	.+20     	; 0x41aa <_ZN15WaterSensorWire7ReceiveEi+0x54>
            char c = Wire.read();
    4196:	8d e9       	ldi	r24, 0x9D	; 157
    4198:	92 e0       	ldi	r25, 0x02	; 2
    419a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN7TwoWire4readEv>
    419e:	89 83       	std	Y+1, r24	; 0x01
            _wireRequest.concat(c);
    41a0:	69 81       	ldd	r22, Y+1	; 0x01
    41a2:	87 e3       	ldi	r24, 0x37	; 55
    41a4:	93 e0       	ldi	r25, 0x03	; 3
    41a6:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN6String6concatEc>
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!
    _wireRequest = "";
    _cmd = "";
    _cmdData = "";
    if(bytes == _wireReqLength) {
        while (0 < Wire.available()) {
    41aa:	8d e9       	ldi	r24, 0x9D	; 157
    41ac:	92 e0       	ldi	r25, 0x02	; 2
    41ae:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7TwoWire9availableEv>
    41b2:	21 e0       	ldi	r18, 0x01	; 1
    41b4:	18 16       	cp	r1, r24
    41b6:	19 06       	cpc	r1, r25
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <_ZN15WaterSensorWire7ReceiveEi+0x66>
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	22 23       	and	r18, r18
    41be:	59 f7       	brne	.-42     	; 0x4196 <_ZN15WaterSensorWire7ReceiveEi+0x40>
            char c = Wire.read();
            _wireRequest.concat(c);
        }
        //Serial.println("Wire Request: " + _wireRequest);
        _wireRequest.trim();
    41c0:	87 e3       	ldi	r24, 0x37	; 55
    41c2:	93 e0       	ldi	r25, 0x03	; 3
    41c4:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <_ZN6String4trimEv>
        if(_wireRequest.startsWith("/")) {
    41c8:	ce 01       	movw	r24, r28
    41ca:	46 96       	adiw	r24, 0x16	; 22
    41cc:	6b e1       	ldi	r22, 0x1B	; 27
    41ce:	71 e0       	ldi	r23, 0x01	; 1
    41d0:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    41d4:	ce 01       	movw	r24, r28
    41d6:	46 96       	adiw	r24, 0x16	; 22
    41d8:	bc 01       	movw	r22, r24
    41da:	87 e3       	ldi	r24, 0x37	; 55
    41dc:	93 e0       	ldi	r25, 0x03	; 3
    41de:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <_ZNK6String10startsWithERKS_>
    41e2:	11 e0       	ldi	r17, 0x01	; 1
    41e4:	88 23       	and	r24, r24
    41e6:	09 f4       	brne	.+2      	; 0x41ea <_ZN15WaterSensorWire7ReceiveEi+0x94>
    41e8:	10 e0       	ldi	r17, 0x00	; 0
    41ea:	ce 01       	movw	r24, r28
    41ec:	46 96       	adiw	r24, 0x16	; 22
    41ee:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    41f2:	11 23       	and	r17, r17
    41f4:	39 f0       	breq	.+14     	; 0x4204 <_ZN15WaterSensorWire7ReceiveEi+0xae>
            _cmd = _wireRequest;
    41f6:	67 e3       	ldi	r22, 0x37	; 55
    41f8:	73 e0       	ldi	r23, 0x03	; 3
    41fa:	83 e4       	ldi	r24, 0x43	; 67
    41fc:	93 e0       	ldi	r25, 0x03	; 3
    41fe:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
    4202:	84 c0       	rjmp	.+264    	; 0x430c <_ZN15WaterSensorWire7ReceiveEi+0x1b6>
            //Serial.println("cmd: " + _cmd);
        }
        else {
            _cmdData = _wireRequest;
    4204:	67 e3       	ldi	r22, 0x37	; 55
    4206:	73 e0       	ldi	r23, 0x03	; 3
    4208:	89 e4       	ldi	r24, 0x49	; 73
    420a:	93 e0       	ldi	r25, 0x03	; 3
    420c:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
    4210:	ce 01       	movw	r24, r28
    4212:	40 96       	adiw	r24, 0x10	; 16
    4214:	69 e4       	ldi	r22, 0x49	; 73
    4216:	73 e0       	ldi	r23, 0x03	; 3
    4218:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    421c:	ce 01       	movw	r24, r28
    421e:	4c 96       	adiw	r24, 0x1c	; 28
    4220:	be 01       	movw	r22, r28
    4222:	60 5f       	subi	r22, 0xF0	; 240
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	4d e3       	ldi	r20, 0x3D	; 61
    422c:	75 d1       	rcall	.+746    	; 0x4518 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    422e:	ce 01       	movw	r24, r28
    4230:	40 96       	adiw	r24, 0x10	; 16
    4232:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
            String val = SplitString(_cmdData, '=', 1);
    4236:	ce 01       	movw	r24, r28
    4238:	0a 96       	adiw	r24, 0x0a	; 10
    423a:	69 e4       	ldi	r22, 0x49	; 73
    423c:	73 e0       	ldi	r23, 0x03	; 3
    423e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN6StringC1ERKS_>
    4242:	ce 01       	movw	r24, r28
    4244:	82 96       	adiw	r24, 0x22	; 34
    4246:	be 01       	movw	r22, r28
    4248:	66 5f       	subi	r22, 0xF6	; 246
    424a:	7f 4f       	sbci	r23, 0xFF	; 255
    424c:	21 e0       	ldi	r18, 0x01	; 1
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	4d e3       	ldi	r20, 0x3D	; 61
    4252:	62 d1       	rcall	.+708    	; 0x4518 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    4254:	ce 01       	movw	r24, r28
    4256:	0a 96       	adiw	r24, 0x0a	; 10
    4258:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
            if(var == "tdsoffset") {
    425c:	ce 01       	movw	r24, r28
    425e:	4c 96       	adiw	r24, 0x1c	; 28
    4260:	6d e1       	ldi	r22, 0x1D	; 29
    4262:	71 e0       	ldi	r23, 0x01	; 1
    4264:	49 df       	rcall	.-366    	; 0x40f8 <_ZNK6StringeqEPKc>
    4266:	98 2f       	mov	r25, r24
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	99 23       	and	r25, r25
    426c:	09 f4       	brne	.+2      	; 0x4270 <_ZN15WaterSensorWire7ReceiveEi+0x11a>
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	88 23       	and	r24, r24
    4272:	a1 f0       	breq	.+40     	; 0x429c <_ZN15WaterSensorWire7ReceiveEi+0x146>
                double offset = val.toFloat();
    4274:	ce 01       	movw	r24, r28
    4276:	82 96       	adiw	r24, 0x22	; 34
    4278:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <_ZNK6String7toFloatEv>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	8a 83       	std	Y+2, r24	; 0x02
    4282:	9b 83       	std	Y+3, r25	; 0x03
    4284:	ac 83       	std	Y+4, r26	; 0x04
    4286:	bd 83       	std	Y+5, r27	; 0x05
                TheTDSSensor.Update(offset);
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	9b 81       	ldd	r25, Y+3	; 0x03
    428c:	ac 81       	ldd	r26, Y+4	; 0x04
    428e:	bd 81       	ldd	r27, Y+5	; 0x05
    4290:	ac 01       	movw	r20, r24
    4292:	bd 01       	movw	r22, r26
    4294:	80 e1       	ldi	r24, 0x10	; 16
    4296:	94 e0       	ldi	r25, 0x04	; 4
    4298:	04 db       	rcall	.-2552   	; 0x38a2 <_ZN9TDSSensor6UpdateEd>
    429a:	20 c0       	rjmp	.+64     	; 0x42dc <_ZN15WaterSensorWire7ReceiveEi+0x186>
            }
            else if(var == "phoffset") {
    429c:	ce 01       	movw	r24, r28
    429e:	4c 96       	adiw	r24, 0x1c	; 28
    42a0:	67 e2       	ldi	r22, 0x27	; 39
    42a2:	71 e0       	ldi	r23, 0x01	; 1
    42a4:	29 df       	rcall	.-430    	; 0x40f8 <_ZNK6StringeqEPKc>
    42a6:	98 2f       	mov	r25, r24
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	99 23       	and	r25, r25
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <_ZN15WaterSensorWire7ReceiveEi+0x15a>
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	88 23       	and	r24, r24
    42b2:	a1 f0       	breq	.+40     	; 0x42dc <_ZN15WaterSensorWire7ReceiveEi+0x186>
                double offset = val.toFloat();
    42b4:	ce 01       	movw	r24, r28
    42b6:	82 96       	adiw	r24, 0x22	; 34
    42b8:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <_ZNK6String7toFloatEv>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	8e 83       	std	Y+6, r24	; 0x06
    42c2:	9f 83       	std	Y+7, r25	; 0x07
    42c4:	a8 87       	std	Y+8, r26	; 0x08
    42c6:	b9 87       	std	Y+9, r27	; 0x09
                ThePHSensor.Update(offset);
    42c8:	8e 81       	ldd	r24, Y+6	; 0x06
    42ca:	9f 81       	ldd	r25, Y+7	; 0x07
    42cc:	a8 85       	ldd	r26, Y+8	; 0x08
    42ce:	b9 85       	ldd	r27, Y+9	; 0x09
    42d0:	ac 01       	movw	r20, r24
    42d2:	bd 01       	movw	r22, r26
    42d4:	8d e6       	ldi	r24, 0x6D	; 109
    42d6:	93 e0       	ldi	r25, 0x03	; 3
    42d8:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN8PHSensor6UpdateEd>
        }
        else {
            _cmdData = _wireRequest;
            //Serial.println("cmdData: " + _cmdData);
            String var = SplitString(_cmdData, '=', 0);
            String val = SplitString(_cmdData, '=', 1);
    42dc:	ce 01       	movw	r24, r28
    42de:	82 96       	adiw	r24, 0x22	; 34
    42e0:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
                TheTDSSensor.Update(offset);
            }
            else if(var == "phoffset") {
                double offset = val.toFloat();
                ThePHSensor.Update(offset);
            }
    42e4:	ce 01       	movw	r24, r28
    42e6:	4c 96       	adiw	r24, 0x1c	; 28
    42e8:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    42ec:	0f c0       	rjmp	.+30     	; 0x430c <_ZN15WaterSensorWire7ReceiveEi+0x1b6>
        }
    }
    else {
        Serial.print(F("Unexpected number of bytes received: "));
    42ee:	86 ee       	ldi	r24, 0xE6	; 230
    42f0:	93 e0       	ldi	r25, 0x03	; 3
    42f2:	bc 01       	movw	r22, r24
    42f4:	84 e5       	ldi	r24, 0x54	; 84
    42f6:	95 e0       	ldi	r25, 0x05	; 5
    42f8:	28 d7       	rcall	.+3664   	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(bytes);
    42fa:	88 a5       	ldd	r24, Y+40	; 0x28
    42fc:	99 a5       	ldd	r25, Y+41	; 0x29
    42fe:	4a e0       	ldi	r20, 0x0A	; 10
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	bc 01       	movw	r22, r24
    4304:	84 e5       	ldi	r24, 0x54	; 84
    4306:	95 e0       	ldi	r25, 0x05	; 5
    4308:	0e 94 8b 29 	call	0x5316	; 0x5316 <_ZN5Print7printlnEii>
    }
}
    430c:	a9 96       	adiw	r28, 0x29	; 41
    430e:	e3 e0       	ldi	r30, 0x03	; 3
    4310:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__epilogue_restores__+0x1e>

00004314 <_ZN15WaterSensorWire7RequestEv>:
void WaterSensorWire::Request() {
    4314:	a1 e2       	ldi	r26, 0x21	; 33
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	e0 e9       	ldi	r30, 0x90	; 144
    431a:	f1 e2       	ldi	r31, 0x21	; 33
    431c:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    //!!DONT PUT SERIAL.PRINTS IN HERE IT WILL SCREW UP WIRE COMM!!

    _responseIndex++;
    4320:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4324:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4328:	01 96       	adiw	r24, 0x01	; 1
    432a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    432e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    String partialResponse = "";
    4332:	ce 01       	movw	r24, r28
    4334:	42 96       	adiw	r24, 0x12	; 18
    4336:	6a e1       	ldi	r22, 0x1A	; 26
    4338:	71 e0       	ldi	r23, 0x01	; 1
    433a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    if(_responseIndex == 0) {
    433e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4342:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4346:	89 2b       	or	r24, r25
    4348:	39 f4       	brne	.+14     	; 0x4358 <_ZN15WaterSensorWire7RequestEv+0x44>
        partialResponse = ThePHSensor.PhString;
    434a:	ce 01       	movw	r24, r28
    434c:	42 96       	adiw	r24, 0x12	; 18
    434e:	6c ef       	ldi	r22, 0xFC	; 252
    4350:	73 e0       	ldi	r23, 0x03	; 3
    4352:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
    4356:	91 c0       	rjmp	.+290    	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else if(_responseIndex == 1) {
    4358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    435c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	39 f4       	brne	.+14     	; 0x4372 <_ZN15WaterSensorWire7RequestEv+0x5e>
        partialResponse = ThePHSensor.PhAvgString;
    4364:	ce 01       	movw	r24, r28
    4366:	42 96       	adiw	r24, 0x12	; 18
    4368:	62 e0       	ldi	r22, 0x02	; 2
    436a:	74 e0       	ldi	r23, 0x04	; 4
    436c:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
    4370:	84 c0       	rjmp	.+264    	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else if(_responseIndex == 2) {
    4372:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4376:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    437a:	02 97       	sbiw	r24, 0x02	; 2
    437c:	39 f4       	brne	.+14     	; 0x438c <_ZN15WaterSensorWire7RequestEv+0x78>
        partialResponse = TheTDSSensor.TdsString;
    437e:	ce 01       	movw	r24, r28
    4380:	42 96       	adiw	r24, 0x12	; 18
    4382:	62 e9       	ldi	r22, 0x92	; 146
    4384:	74 e0       	ldi	r23, 0x04	; 4
    4386:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
    438a:	77 c0       	rjmp	.+238    	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else if(_responseIndex == 3) {
    438c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4390:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4394:	03 97       	sbiw	r24, 0x03	; 3
    4396:	39 f4       	brne	.+14     	; 0x43a6 <_ZN15WaterSensorWire7RequestEv+0x92>
        partialResponse = TheTDSSensor.TdsAvgString;
    4398:	ce 01       	movw	r24, r28
    439a:	42 96       	adiw	r24, 0x12	; 18
    439c:	68 e9       	ldi	r22, 0x98	; 152
    439e:	74 e0       	ldi	r23, 0x04	; 4
    43a0:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN6StringaSERKS_>
    43a4:	6a c0       	rjmp	.+212    	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else if(_responseIndex == 4) {
    43a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    43aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    43ae:	04 97       	sbiw	r24, 0x04	; 4
    43b0:	01 f5       	brne	.+64     	; 0x43f2 <_ZN15WaterSensorWire7RequestEv+0xde>
        partialResponse = String(ThePHSensor.Offset, 2).c_str();
    43b2:	88 e0       	ldi	r24, 0x08	; 8
    43b4:	94 e0       	ldi	r25, 0x04	; 4
    43b6:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    43ba:	fc 01       	movw	r30, r24
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	a2 81       	ldd	r26, Z+2	; 0x02
    43c2:	b3 81       	ldd	r27, Z+3	; 0x03
    43c4:	fe 01       	movw	r30, r28
    43c6:	3c 96       	adiw	r30, 0x0c	; 12
    43c8:	22 e0       	ldi	r18, 0x02	; 2
    43ca:	ac 01       	movw	r20, r24
    43cc:	bd 01       	movw	r22, r26
    43ce:	cf 01       	movw	r24, r30
    43d0:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN6StringC1Edh>
    43d4:	ce 01       	movw	r24, r28
    43d6:	0c 96       	adiw	r24, 0x0c	; 12
    43d8:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZNK6String5c_strEv>
    43dc:	9c 01       	movw	r18, r24
    43de:	ce 01       	movw	r24, r28
    43e0:	42 96       	adiw	r24, 0x12	; 18
    43e2:	b9 01       	movw	r22, r18
    43e4:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    43e8:	ce 01       	movw	r24, r28
    43ea:	0c 96       	adiw	r24, 0x0c	; 12
    43ec:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    43f0:	44 c0       	rjmp	.+136    	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else if(_responseIndex == 5) {
    43f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    43f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    43fa:	05 97       	sbiw	r24, 0x05	; 5
    43fc:	31 f5       	brne	.+76     	; 0x444a <_ZN15WaterSensorWire7RequestEv+0x136>
        partialResponse = String(TheTDSSensor.Offset, 2).c_str();
    43fe:	8e e9       	ldi	r24, 0x9E	; 158
    4400:	94 e0       	ldi	r25, 0x04	; 4
    4402:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN4erom5EntryIdEcvRdEv>
    4406:	fc 01       	movw	r30, r24
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	a2 81       	ldd	r26, Z+2	; 0x02
    440e:	b3 81       	ldd	r27, Z+3	; 0x03
    4410:	fe 01       	movw	r30, r28
    4412:	36 96       	adiw	r30, 0x06	; 6
    4414:	22 e0       	ldi	r18, 0x02	; 2
    4416:	ac 01       	movw	r20, r24
    4418:	bd 01       	movw	r22, r26
    441a:	cf 01       	movw	r24, r30
    441c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN6StringC1Edh>
    4420:	ce 01       	movw	r24, r28
    4422:	06 96       	adiw	r24, 0x06	; 6
    4424:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZNK6String5c_strEv>
    4428:	9c 01       	movw	r18, r24
    442a:	ce 01       	movw	r24, r28
    442c:	42 96       	adiw	r24, 0x12	; 18
    442e:	b9 01       	movw	r22, r18
    4430:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <_ZN6StringaSEPKc>
    4434:	ce 01       	movw	r24, r28
    4436:	06 96       	adiw	r24, 0x06	; 6
    4438:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
        _responseIndex = -1; //need to keep this in last if always
    443c:	8f ef       	ldi	r24, 0xFF	; 255
    443e:	9f ef       	ldi	r25, 0xFF	; 255
    4440:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4444:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4448:	18 c0       	rjmp	.+48     	; 0x447a <_ZN15WaterSensorWire7RequestEv+0x166>
    }
    else {
        Serial.print("~responseIndex not found: ");
    444a:	60 e3       	ldi	r22, 0x30	; 48
    444c:	71 e0       	ldi	r23, 0x01	; 1
    444e:	84 e5       	ldi	r24, 0x54	; 84
    4450:	95 e0       	ldi	r25, 0x05	; 5
    4452:	ad d6       	rcall	.+3418   	; 0x51ae <_ZN5Print5printEPKc>
        Serial.println(_responseIndex);
    4454:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4458:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    445c:	4a e0       	ldi	r20, 0x0A	; 10
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	bc 01       	movw	r22, r24
    4462:	84 e5       	ldi	r24, 0x54	; 84
    4464:	95 e0       	ldi	r25, 0x05	; 5
    4466:	57 d7       	rcall	.+3758   	; 0x5316 <_ZN5Print7printlnEii>
        _responseIndex = -1;
    4468:	8f ef       	ldi	r24, 0xFF	; 255
    446a:	9f ef       	ldi	r25, 0xFF	; 255
    446c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4470:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4474:	00 e0       	ldi	r16, 0x00	; 0
    4476:	10 e0       	ldi	r17, 0x00	; 0
        return;
    4478:	43 c0       	rjmp	.+134    	; 0x4500 <_ZN15WaterSensorWire7RequestEv+0x1ec>
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    447a:	ce 01       	movw	r24, r28
    447c:	42 96       	adiw	r24, 0x12	; 18
    447e:	14 de       	rcall	.-984    	; 0x40a8 <_ZNK6String6lengthEv>
    4480:	9c 01       	movw	r18, r24
    4482:	8a e0       	ldi	r24, 0x0A	; 10
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	82 1b       	sub	r24, r18
    4488:	93 0b       	sbc	r25, r19
    448a:	9d 83       	std	Y+5, r25	; 0x05
    448c:	8c 83       	std	Y+4, r24	; 0x04
    for(int i = 0; i < diff; i++) {
    448e:	1a 82       	std	Y+2, r1	; 0x02
    4490:	19 82       	std	Y+1, r1	; 0x01
    4492:	0a c0       	rjmp	.+20     	; 0x44a8 <_ZN15WaterSensorWire7RequestEv+0x194>
        partialResponse += " ";
    4494:	ce 01       	movw	r24, r28
    4496:	42 96       	adiw	r24, 0x12	; 18
    4498:	6b e4       	ldi	r22, 0x4B	; 75
    449a:	71 e0       	ldi	r23, 0x01	; 1
    449c:	16 de       	rcall	.-980    	; 0x40ca <_ZN6StringpLEPKc>
        return;
    }

    //Pad
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	9a 83       	std	Y+2, r25	; 0x02
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	29 81       	ldd	r18, Y+1	; 0x01
    44aa:	3a 81       	ldd	r19, Y+2	; 0x02
    44ac:	8c 81       	ldd	r24, Y+4	; 0x04
    44ae:	9d 81       	ldd	r25, Y+5	; 0x05
    44b0:	28 17       	cp	r18, r24
    44b2:	39 07       	cpc	r19, r25
    44b4:	7c f3       	brlt	.-34     	; 0x4494 <_ZN15WaterSensorWire7RequestEv+0x180>
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    44b6:	1b 82       	std	Y+3, r1	; 0x03
    44b8:	15 c0       	rjmp	.+42     	; 0x44e4 <_ZN15WaterSensorWire7RequestEv+0x1d0>
        response[i] = (byte)partialResponse.charAt(i);
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	08 2f       	mov	r16, r24
    44be:	10 e0       	ldi	r17, 0x00	; 0
    44c0:	8b 81       	ldd	r24, Y+3	; 0x03
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	ce 01       	movw	r24, r28
    44c8:	42 96       	adiw	r24, 0x12	; 18
    44ca:	b9 01       	movw	r22, r18
    44cc:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZNK6String6charAtEj>
    44d0:	28 2f       	mov	r18, r24
    44d2:	ce 01       	movw	r24, r28
    44d4:	48 96       	adiw	r24, 0x18	; 24
    44d6:	80 0f       	add	r24, r16
    44d8:	91 1f       	adc	r25, r17
    44da:	fc 01       	movw	r30, r24
    44dc:	20 83       	st	Z, r18
    int diff = _wireRespLength - partialResponse.length();
    for(int i = 0; i < diff; i++) {
        partialResponse += " ";
    }
    byte response[_wireRespLength];
    for (byte i = 0; i < _wireRespLength; i++) {
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	8f 5f       	subi	r24, 0xFF	; 255
    44e2:	8b 83       	std	Y+3, r24	; 0x03
    44e4:	8b 81       	ldd	r24, Y+3	; 0x03
    44e6:	8a 30       	cpi	r24, 0x0A	; 10
    44e8:	40 f3       	brcs	.-48     	; 0x44ba <_ZN15WaterSensorWire7RequestEv+0x1a6>
        response[i] = (byte)partialResponse.charAt(i);
    }
    Wire.write(response, sizeof(response));
    44ea:	ce 01       	movw	r24, r28
    44ec:	48 96       	adiw	r24, 0x18	; 24
    44ee:	4a e0       	ldi	r20, 0x0A	; 10
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	bc 01       	movw	r22, r24
    44f4:	8d e9       	ldi	r24, 0x9D	; 157
    44f6:	92 e0       	ldi	r25, 0x02	; 2
    44f8:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN7TwoWire5writeEPKhj>
    44fc:	01 e0       	ldi	r16, 0x01	; 1
    44fe:	10 e0       	ldi	r17, 0x00	; 0
    4500:	ce 01       	movw	r24, r28
    4502:	42 96       	adiw	r24, 0x12	; 18
    4504:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
    4508:	01 30       	cpi	r16, 0x01	; 1
    450a:	11 05       	cpc	r17, r1
    450c:	09 f4       	brne	.+2      	; 0x4510 <_ZN15WaterSensorWire7RequestEv+0x1fc>
    450e:	00 00       	nop
}
    4510:	a1 96       	adiw	r28, 0x21	; 33
    4512:	e4 e0       	ldi	r30, 0x04	; 4
    4514:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

00004518 <_ZN15WaterSensorWire11SplitStringE6Stringci>:

String WaterSensorWire::SplitString(String data, char separator, int index) {
    4518:	a1 e1       	ldi	r26, 0x11	; 17
    451a:	b0 e0       	ldi	r27, 0x00	; 0
    451c:	e2 e9       	ldi	r30, 0x92	; 146
    451e:	f2 e2       	ldi	r31, 0x22	; 34
    4520:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    4524:	9c 87       	std	Y+12, r25	; 0x0c
    4526:	8b 87       	std	Y+11, r24	; 0x0b
    4528:	7e 87       	std	Y+14, r23	; 0x0e
    452a:	6d 87       	std	Y+13, r22	; 0x0d
    452c:	4f 87       	std	Y+15, r20	; 0x0f
    452e:	39 8b       	std	Y+17, r19	; 0x11
    4530:	28 8b       	std	Y+16, r18	; 0x10
    int found = 0;
    4532:	1a 82       	std	Y+2, r1	; 0x02
    4534:	19 82       	std	Y+1, r1	; 0x01
    int strIndex[] = {0, -1};
    4536:	18 86       	std	Y+8, r1	; 0x08
    4538:	1f 82       	std	Y+7, r1	; 0x07
    453a:	8f ef       	ldi	r24, 0xFF	; 255
    453c:	9f ef       	ldi	r25, 0xFF	; 255
    453e:	9a 87       	std	Y+10, r25	; 0x0a
    4540:	89 87       	std	Y+9, r24	; 0x09
    int maxIndex = data.length() - 1;
    4542:	8d 85       	ldd	r24, Y+13	; 0x0d
    4544:	9e 85       	ldd	r25, Y+14	; 0x0e
    4546:	b0 dd       	rcall	.-1184   	; 0x40a8 <_ZNK6String6lengthEv>
    4548:	01 97       	sbiw	r24, 0x01	; 1
    454a:	9e 83       	std	Y+6, r25	; 0x06
    454c:	8d 83       	std	Y+5, r24	; 0x05
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    454e:	1c 82       	std	Y+4, r1	; 0x04
    4550:	1b 82       	std	Y+3, r1	; 0x03
    4552:	35 c0       	rjmp	.+106    	; 0x45be <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
        if(data.charAt(i) == separator || i == maxIndex) {
    4554:	2b 81       	ldd	r18, Y+3	; 0x03
    4556:	3c 81       	ldd	r19, Y+4	; 0x04
    4558:	8d 85       	ldd	r24, Y+13	; 0x0d
    455a:	9e 85       	ldd	r25, Y+14	; 0x0e
    455c:	b9 01       	movw	r22, r18
    455e:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZNK6String6charAtEj>
    4562:	98 2f       	mov	r25, r24
    4564:	8f 85       	ldd	r24, Y+15	; 0x0f
    4566:	98 17       	cp	r25, r24
    4568:	39 f0       	breq	.+14     	; 0x4578 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    456a:	2b 81       	ldd	r18, Y+3	; 0x03
    456c:	3c 81       	ldd	r19, Y+4	; 0x04
    456e:	8d 81       	ldd	r24, Y+5	; 0x05
    4570:	9e 81       	ldd	r25, Y+6	; 0x06
    4572:	28 17       	cp	r18, r24
    4574:	39 07       	cpc	r19, r25
    4576:	11 f4       	brne	.+4      	; 0x457c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	01 c0       	rjmp	.+2      	; 0x457e <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	88 23       	and	r24, r24
    4580:	c9 f0       	breq	.+50     	; 0x45b4 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
            found++;
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	9a 81       	ldd	r25, Y+2	; 0x02
    4586:	01 96       	adiw	r24, 0x01	; 1
    4588:	9a 83       	std	Y+2, r25	; 0x02
    458a:	89 83       	std	Y+1, r24	; 0x01
            strIndex[0] = strIndex[1] + 1;
    458c:	89 85       	ldd	r24, Y+9	; 0x09
    458e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4590:	01 96       	adiw	r24, 0x01	; 1
    4592:	98 87       	std	Y+8, r25	; 0x08
    4594:	8f 83       	std	Y+7, r24	; 0x07
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
    4596:	2b 81       	ldd	r18, Y+3	; 0x03
    4598:	3c 81       	ldd	r19, Y+4	; 0x04
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	9e 81       	ldd	r25, Y+6	; 0x06
    459e:	28 17       	cp	r18, r24
    45a0:	39 07       	cpc	r19, r25
    45a2:	21 f4       	brne	.+8      	; 0x45ac <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	9c 81       	ldd	r25, Y+4	; 0x04
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	02 c0       	rjmp	.+4      	; 0x45b0 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    45ac:	8b 81       	ldd	r24, Y+3	; 0x03
    45ae:	9c 81       	ldd	r25, Y+4	; 0x04
    45b0:	9a 87       	std	Y+10, r25	; 0x0a
    45b2:	89 87       	std	Y+9, r24	; 0x09

String WaterSensorWire::SplitString(String data, char separator, int index) {
    int found = 0;
    int strIndex[] = {0, -1};
    int maxIndex = data.length() - 1;
    for(int i = 0; i <= maxIndex && found <= index; i++) {
    45b4:	8b 81       	ldd	r24, Y+3	; 0x03
    45b6:	9c 81       	ldd	r25, Y+4	; 0x04
    45b8:	01 96       	adiw	r24, 0x01	; 1
    45ba:	9c 83       	std	Y+4, r25	; 0x04
    45bc:	8b 83       	std	Y+3, r24	; 0x03
    45be:	2b 81       	ldd	r18, Y+3	; 0x03
    45c0:	3c 81       	ldd	r19, Y+4	; 0x04
    45c2:	8d 81       	ldd	r24, Y+5	; 0x05
    45c4:	9e 81       	ldd	r25, Y+6	; 0x06
    45c6:	82 17       	cp	r24, r18
    45c8:	93 07       	cpc	r25, r19
    45ca:	44 f0       	brlt	.+16     	; 0x45dc <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    45cc:	29 81       	ldd	r18, Y+1	; 0x01
    45ce:	3a 81       	ldd	r19, Y+2	; 0x02
    45d0:	88 89       	ldd	r24, Y+16	; 0x10
    45d2:	99 89       	ldd	r25, Y+17	; 0x11
    45d4:	82 17       	cp	r24, r18
    45d6:	93 07       	cpc	r25, r19
    45d8:	0c f0       	brlt	.+2      	; 0x45dc <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    45da:	bc cf       	rjmp	.-136    	; 0x4554 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
    45dc:	29 81       	ldd	r18, Y+1	; 0x01
    45de:	3a 81       	ldd	r19, Y+2	; 0x02
    45e0:	88 89       	ldd	r24, Y+16	; 0x10
    45e2:	99 89       	ldd	r25, Y+17	; 0x11
    45e4:	82 17       	cp	r24, r18
    45e6:	93 07       	cpc	r25, r19
    45e8:	6c f4       	brge	.+26     	; 0x4604 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	9c 01       	movw	r18, r24
    45f0:	8f 81       	ldd	r24, Y+7	; 0x07
    45f2:	98 85       	ldd	r25, Y+8	; 0x08
    45f4:	ac 01       	movw	r20, r24
    45f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    45f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    45fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    45fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    45fe:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <_ZNK6String9substringEjj>
    4602:	06 c0       	rjmp	.+12     	; 0x4610 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    4604:	8b 85       	ldd	r24, Y+11	; 0x0b
    4606:	9c 85       	ldd	r25, Y+12	; 0x0c
    4608:	6a e1       	ldi	r22, 0x1A	; 26
    460a:	71 e0       	ldi	r23, 0x01	; 1
    460c:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    4610:	00 00       	nop
}
    4612:	8b 85       	ldd	r24, Y+11	; 0x0b
    4614:	9c 85       	ldd	r25, Y+12	; 0x0c
    4616:	61 96       	adiw	r28, 0x11	; 17
    4618:	e2 e0       	ldi	r30, 0x02	; 2
    461a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000461e <_Z41__static_initialization_and_destruction_0ii>:
    461e:	a4 e0       	ldi	r26, 0x04	; 4
    4620:	b0 e0       	ldi	r27, 0x00	; 0
    4622:	e5 e1       	ldi	r30, 0x15	; 21
    4624:	f3 e2       	ldi	r31, 0x23	; 35
    4626:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    462a:	9a 83       	std	Y+2, r25	; 0x02
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	7c 83       	std	Y+4, r23	; 0x04
    4630:	6b 83       	std	Y+3, r22	; 0x03
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	9a 81       	ldd	r25, Y+2	; 0x02
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	11 f5       	brne	.+68     	; 0x467e <_Z41__static_initialization_and_destruction_0ii+0x60>
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	9c 81       	ldd	r25, Y+4	; 0x04
    463e:	01 96       	adiw	r24, 0x01	; 1
    4640:	f1 f4       	brne	.+60     	; 0x467e <_Z41__static_initialization_and_destruction_0ii+0x60>
#include "WaterSensorWire.h"

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4642:	6a e1       	ldi	r22, 0x1A	; 26
    4644:	71 e0       	ldi	r23, 0x01	; 1
    4646:	87 e3       	ldi	r24, 0x37	; 55
    4648:	93 e0       	ldi	r25, 0x03	; 3
    464a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    464e:	6a e1       	ldi	r22, 0x1A	; 26
    4650:	71 e0       	ldi	r23, 0x01	; 1
    4652:	8d e3       	ldi	r24, 0x3D	; 61
    4654:	93 e0       	ldi	r25, 0x03	; 3
    4656:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    465a:	6a e1       	ldi	r22, 0x1A	; 26
    465c:	71 e0       	ldi	r23, 0x01	; 1
    465e:	83 e4       	ldi	r24, 0x43	; 67
    4660:	93 e0       	ldi	r25, 0x03	; 3
    4662:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
static String _cmdData = "";
    4666:	6a e1       	ldi	r22, 0x1A	; 26
    4668:	71 e0       	ldi	r23, 0x01	; 1
    466a:	89 e4       	ldi	r24, 0x49	; 73
    466c:	93 e0       	ldi	r25, 0x03	; 3
    466e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
static String _response = "";
    4672:	6a e1       	ldi	r22, 0x1A	; 26
    4674:	71 e0       	ldi	r23, 0x01	; 1
    4676:	8f e4       	ldi	r24, 0x4F	; 79
    4678:	93 e0       	ldi	r25, 0x03	; 3
    467a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN6StringC1EPKc>
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	9a 81       	ldd	r25, Y+2	; 0x02
    4682:	89 2b       	or	r24, r25
    4684:	c1 f4       	brne	.+48     	; 0x46b6 <_Z41__static_initialization_and_destruction_0ii+0x98>
    4686:	8b 81       	ldd	r24, Y+3	; 0x03
    4688:	9c 81       	ldd	r25, Y+4	; 0x04
    468a:	01 96       	adiw	r24, 0x01	; 1
    468c:	a1 f4       	brne	.+40     	; 0x46b6 <_Z41__static_initialization_and_destruction_0ii+0x98>
    468e:	8f e4       	ldi	r24, 0x4F	; 79
    4690:	93 e0       	ldi	r25, 0x03	; 3
    4692:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    4696:	89 e4       	ldi	r24, 0x49	; 73
    4698:	93 e0       	ldi	r25, 0x03	; 3
    469a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    469e:	83 e4       	ldi	r24, 0x43	; 67
    46a0:	93 e0       	ldi	r25, 0x03	; 3
    46a2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    46a6:	8d e3       	ldi	r24, 0x3D	; 61
    46a8:	93 e0       	ldi	r25, 0x03	; 3
    46aa:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 18;
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    46ae:	87 e3       	ldi	r24, 0x37	; 55
    46b0:	93 e0       	ldi	r25, 0x03	; 3
    46b2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN6StringD1Ev>
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
    46b6:	24 96       	adiw	r28, 0x04	; 4
    46b8:	e2 e0       	ldi	r30, 0x02	; 2
    46ba:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000046be <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    46be:	a0 e0       	ldi	r26, 0x00	; 0
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	e5 e6       	ldi	r30, 0x65	; 101
    46c4:	f3 e2       	ldi	r31, 0x23	; 35
    46c6:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    46ca:	6f ef       	ldi	r22, 0xFF	; 255
    46cc:	7f ef       	ldi	r23, 0xFF	; 255
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	a5 df       	rcall	.-182    	; 0x461e <_Z41__static_initialization_and_destruction_0ii>
    46d4:	e2 e0       	ldi	r30, 0x02	; 2
    46d6:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000046da <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    46da:	a0 e0       	ldi	r26, 0x00	; 0
    46dc:	b0 e0       	ldi	r27, 0x00	; 0
    46de:	e3 e7       	ldi	r30, 0x73	; 115
    46e0:	f3 e2       	ldi	r31, 0x23	; 35
    46e2:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    46e6:	6f ef       	ldi	r22, 0xFF	; 255
    46e8:	7f ef       	ldi	r23, 0xFF	; 255
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	97 df       	rcall	.-210    	; 0x461e <_Z41__static_initialization_and_destruction_0ii>
    46f0:	e2 e0       	ldi	r30, 0x02	; 2
    46f2:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000046f6 <_Z41__static_initialization_and_destruction_0ii>:

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    46f6:	a4 e3       	ldi	r26, 0x34	; 52
    46f8:	b0 e0       	ldi	r27, 0x00	; 0
    46fa:	e1 e8       	ldi	r30, 0x81	; 129
    46fc:	f3 e2       	ldi	r31, 0x23	; 35
    46fe:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__prologue_saves__+0x1c>
    4702:	9a ab       	std	Y+50, r25	; 0x32
    4704:	89 ab       	std	Y+49, r24	; 0x31
    4706:	7c ab       	std	Y+52, r23	; 0x34
    4708:	6b ab       	std	Y+51, r22	; 0x33
    470a:	89 a9       	ldd	r24, Y+49	; 0x31
    470c:	9a a9       	ldd	r25, Y+50	; 0x32
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	a1 f5       	brne	.+104    	; 0x477a <_Z41__static_initialization_and_destruction_0ii+0x84>
    4712:	8b a9       	ldd	r24, Y+51	; 0x33
    4714:	9c a9       	ldd	r25, Y+52	; 0x34
    4716:	01 96       	adiw	r24, 0x01	; 1
    4718:	81 f5       	brne	.+96     	; 0x477a <_Z41__static_initialization_and_destruction_0ii+0x84>
namespace Globals {

    int _phSensorPin = A5;//A15;
    int _tdsSensorPin = A4;//A14;

    LCDBase TheLCD = LCDBase();
    471a:	85 e5       	ldi	r24, 0x55	; 85
    471c:	93 e0       	ldi	r25, 0x03	; 3
    471e:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN7LCDBaseC1Ev>

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    4722:	ce 01       	movw	r24, r28
    4724:	49 96       	adiw	r24, 0x19	; 25
    4726:	65 e5       	ldi	r22, 0x55	; 85
    4728:	73 e0       	ldi	r23, 0x03	; 3
    472a:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN7LCDBaseC1ERKS_>
    472e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    4732:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    4736:	9e 01       	movw	r18, r28
    4738:	27 5e       	subi	r18, 0xE7	; 231
    473a:	3f 4f       	sbci	r19, 0xFF	; 255
    473c:	89 01       	movw	r16, r18
    473e:	21 e0       	ldi	r18, 0x01	; 1
    4740:	40 ed       	ldi	r20, 0xD0	; 208
    4742:	57 e0       	ldi	r21, 0x07	; 7
    4744:	bc 01       	movw	r22, r24
    4746:	8d e6       	ldi	r24, 0x6D	; 109
    4748:	93 e0       	ldi	r25, 0x03	; 3
    474a:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN8PHSensorC1Eiib7LCDBase>

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);
    474e:	65 e5       	ldi	r22, 0x55	; 85
    4750:	73 e0       	ldi	r23, 0x03	; 3
    4752:	ce 01       	movw	r24, r28
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN7LCDBaseC1ERKS_>
    475a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    475e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    4762:	9e 01       	movw	r18, r28
    4764:	2f 5f       	subi	r18, 0xFF	; 255
    4766:	3f 4f       	sbci	r19, 0xFF	; 255
    4768:	89 01       	movw	r16, r18
    476a:	21 e0       	ldi	r18, 0x01	; 1
    476c:	48 ee       	ldi	r20, 0xE8	; 232
    476e:	53 e0       	ldi	r21, 0x03	; 3
    4770:	bc 01       	movw	r22, r24
    4772:	80 e1       	ldi	r24, 0x10	; 16
    4774:	94 e0       	ldi	r25, 0x04	; 4
    4776:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN9TDSSensorC1Eiib7LCDBase>
    477a:	89 a9       	ldd	r24, Y+49	; 0x31
    477c:	9a a9       	ldd	r25, Y+50	; 0x32
    477e:	89 2b       	or	r24, r25
    4780:	59 f4       	brne	.+22     	; 0x4798 <_Z41__static_initialization_and_destruction_0ii+0xa2>
    4782:	8b a9       	ldd	r24, Y+51	; 0x33
    4784:	9c a9       	ldd	r25, Y+52	; 0x34
    4786:	01 96       	adiw	r24, 0x01	; 1
    4788:	39 f4       	brne	.+14     	; 0x4798 <_Z41__static_initialization_and_destruction_0ii+0xa2>
    478a:	80 e1       	ldi	r24, 0x10	; 16
    478c:	94 e0       	ldi	r25, 0x04	; 4
    478e:	4e dc       	rcall	.-1892   	; 0x402c <_ZN9TDSSensorD1Ev>
    int _phSensorPin = A5;//A15;
    int _tdsSensorPin = A4;//A14;

    LCDBase TheLCD = LCDBase();

    PHSensor ThePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD);
    4790:	8d e6       	ldi	r24, 0x6D	; 109
    4792:	93 e0       	ldi	r25, 0x03	; 3
    4794:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZN8PHSensorD1Ev>

    TDSSensor TheTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

}
    4798:	e4 96       	adiw	r28, 0x34	; 52
    479a:	e4 e0       	ldi	r30, 0x04	; 4
    479c:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__epilogue_restores__+0x1c>

000047a0 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    47a0:	a0 e0       	ldi	r26, 0x00	; 0
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	e6 ed       	ldi	r30, 0xD6	; 214
    47a6:	f3 e2       	ldi	r31, 0x23	; 35
    47a8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    47ac:	6f ef       	ldi	r22, 0xFF	; 255
    47ae:	7f ef       	ldi	r23, 0xFF	; 255
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	a0 df       	rcall	.-192    	; 0x46f6 <_Z41__static_initialization_and_destruction_0ii>
    47b6:	e2 e0       	ldi	r30, 0x02	; 2
    47b8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000047bc <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e4 ee       	ldi	r30, 0xE4	; 228
    47c2:	f3 e2       	ldi	r31, 0x23	; 35
    47c4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    47c8:	6f ef       	ldi	r22, 0xFF	; 255
    47ca:	7f ef       	ldi	r23, 0xFF	; 255
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	92 df       	rcall	.-220    	; 0x46f6 <_Z41__static_initialization_and_destruction_0ii>
    47d2:	e2 e0       	ldi	r30, 0x02	; 2
    47d4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000047d8 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    47d8:	a6 e0       	ldi	r26, 0x06	; 6
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	e2 ef       	ldi	r30, 0xF2	; 242
    47de:	f3 e2       	ldi	r31, 0x23	; 35
    47e0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    47e4:	9a 83       	std	Y+2, r25	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	4b 83       	std	Y+3, r20	; 0x03
    47ea:	5c 83       	std	Y+4, r21	; 0x04
    47ec:	6d 83       	std	Y+5, r22	; 0x05
    47ee:	7e 83       	std	Y+6, r23	; 0x06
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	ad 81       	ldd	r26, Y+5	; 0x05
    47f6:	be 81       	ldd	r27, Y+6	; 0x06
    47f8:	e9 81       	ldd	r30, Y+1	; 0x01
    47fa:	fa 81       	ldd	r31, Y+2	; 0x02
    47fc:	26 e0       	ldi	r18, 0x06	; 6
    47fe:	ac 01       	movw	r20, r24
    4800:	bd 01       	movw	r22, r26
    4802:	cf 01       	movw	r24, r30
    4804:	65 d3       	rcall	.+1738   	; 0x4ed0 <_ZN14HardwareSerial5beginEmh>
    4806:	26 96       	adiw	r28, 0x06	; 6
    4808:	e2 e0       	ldi	r30, 0x02	; 2
    480a:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

0000480e <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    480e:	a2 e0       	ldi	r26, 0x02	; 2
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	ed e0       	ldi	r30, 0x0D	; 13
    4814:	f4 e2       	ldi	r31, 0x24	; 36
    4816:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    481a:	9a 83       	std	Y+2, r25	; 0x02
    481c:	89 83       	std	Y+1, r24	; 0x01
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	22 96       	adiw	r28, 0x02	; 2
    4822:	e2 e0       	ldi	r30, 0x02	; 2
    4824:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004828 <setup>:

SimpleTimer _asyncTimer;

void AsyncDoWork();

void setup(void) {
    4828:	a0 e0       	ldi	r26, 0x00	; 0
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	ea e1       	ldi	r30, 0x1A	; 26
    482e:	f4 e2       	ldi	r31, 0x24	; 36
    4830:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    WaterSensorWire::Setup();
    4834:	76 dc       	rcall	.-1812   	; 0x4122 <_ZN15WaterSensorWire5SetupEv>

    // Listen on serial connection for messages from the pc
    Serial.begin(9600);
    4836:	40 e8       	ldi	r20, 0x80	; 128
    4838:	55 e2       	ldi	r21, 0x25	; 37
    483a:	60 e0       	ldi	r22, 0x00	; 0
    483c:	70 e0       	ldi	r23, 0x00	; 0
    483e:	84 e5       	ldi	r24, 0x54	; 84
    4840:	95 e0       	ldi	r25, 0x05	; 5
    4842:	ca df       	rcall	.-108    	; 0x47d8 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4844:	00 00       	nop
    4846:	84 e5       	ldi	r24, 0x54	; 84
    4848:	95 e0       	ldi	r25, 0x05	; 5
    484a:	e1 df       	rcall	.-62     	; 0x480e <_ZN14HardwareSerialcvbEv>
    484c:	98 2f       	mov	r25, r24
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	89 27       	eor	r24, r25
    4852:	88 23       	and	r24, r24
    4854:	c1 f7       	brne	.-16     	; 0x4846 <setup+0x1e>

    _asyncTimer.setInterval(1000, AsyncDoWork);
    4856:	2c e4       	ldi	r18, 0x4C	; 76
    4858:	34 e2       	ldi	r19, 0x24	; 36
    485a:	48 ee       	ldi	r20, 0xE8	; 232
    485c:	53 e0       	ldi	r21, 0x03	; 3
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	70 e0       	ldi	r23, 0x00	; 0
    4862:	86 ea       	ldi	r24, 0xA6	; 166
    4864:	94 e0       	ldi	r25, 0x04	; 4
    4866:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    486a:	e2 e0       	ldi	r30, 0x02	; 2
    486c:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004870 <loop>:

void loop(void) {
    4870:	a0 e0       	ldi	r26, 0x00	; 0
    4872:	b0 e0       	ldi	r27, 0x00	; 0
    4874:	ee e3       	ldi	r30, 0x3E	; 62
    4876:	f4 e2       	ldi	r31, 0x24	; 36
    4878:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>

    _asyncTimer.run();
    487c:	86 ea       	ldi	r24, 0xA6	; 166
    487e:	94 e0       	ldi	r25, 0x04	; 4
    4880:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN11SimpleTimer3runEv>

    Globals::ThePHSensor.PrintPHToLCD();
    4884:	8d e6       	ldi	r24, 0x6D	; 109
    4886:	93 e0       	ldi	r25, 0x03	; 3
    4888:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN8PHSensor12PrintPHToLCDEv>
    Globals::TheTDSSensor.PrintTDSToLCD();
    488c:	80 e1       	ldi	r24, 0x10	; 16
    488e:	94 e0       	ldi	r25, 0x04	; 4
    4890:	7f d8       	rcall	.-3842   	; 0x3990 <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    4892:	e2 e0       	ldi	r30, 0x02	; 2
    4894:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004898 <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4898:	a0 e0       	ldi	r26, 0x00	; 0
    489a:	b0 e0       	ldi	r27, 0x00	; 0
    489c:	e2 e5       	ldi	r30, 0x52	; 82
    489e:	f4 e2       	ldi	r31, 0x24	; 36
    48a0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    Globals::ThePHSensor.CalculatePH();
    48a4:	8d e6       	ldi	r24, 0x6D	; 109
    48a6:	93 e0       	ldi	r25, 0x03	; 3
    48a8:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN8PHSensor11CalculatePHEv>
    Globals::TheTDSSensor.CalculateTDS();
    48ac:	80 e1       	ldi	r24, 0x10	; 16
    48ae:	94 e0       	ldi	r25, 0x04	; 4
    48b0:	24 d9       	rcall	.-3512   	; 0x3afa <_ZN9TDSSensor12CalculateTDSEv>
}
    48b2:	e2 e0       	ldi	r30, 0x02	; 2
    48b4:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000048b8 <_Z41__static_initialization_and_destruction_0ii>:
    48b8:	a4 e0       	ldi	r26, 0x04	; 4
    48ba:	b0 e0       	ldi	r27, 0x00	; 0
    48bc:	e2 e6       	ldi	r30, 0x62	; 98
    48be:	f4 e2       	ldi	r31, 0x24	; 36
    48c0:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    48c4:	9a 83       	std	Y+2, r25	; 0x02
    48c6:	89 83       	std	Y+1, r24	; 0x01
    48c8:	7c 83       	std	Y+4, r23	; 0x04
    48ca:	6b 83       	std	Y+3, r22	; 0x03
    48cc:	89 81       	ldd	r24, Y+1	; 0x01
    48ce:	9a 81       	ldd	r25, Y+2	; 0x02
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	41 f4       	brne	.+16     	; 0x48e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    48d4:	8b 81       	ldd	r24, Y+3	; 0x03
    48d6:	9c 81       	ldd	r25, Y+4	; 0x04
    48d8:	01 96       	adiw	r24, 0x01	; 1
    48da:	21 f4       	brne	.+8      	; 0x48e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "_globalsWaterSensors.h"
#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    48dc:	86 ea       	ldi	r24, 0xA6	; 166
    48de:	94 e0       	ldi	r25, 0x04	; 4
    48e0:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN11SimpleTimerC1Ev>
}

void AsyncDoWork() {
    Globals::ThePHSensor.CalculatePH();
    Globals::TheTDSSensor.CalculateTDS();
}
    48e4:	24 96       	adiw	r28, 0x04	; 4
    48e6:	e2 e0       	ldi	r30, 0x02	; 2
    48e8:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

000048ec <_GLOBAL__sub_I__asyncTimer>:
    48ec:	a0 e0       	ldi	r26, 0x00	; 0
    48ee:	b0 e0       	ldi	r27, 0x00	; 0
    48f0:	ec e7       	ldi	r30, 0x7C	; 124
    48f2:	f4 e2       	ldi	r31, 0x24	; 36
    48f4:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__prologue_saves__+0x20>
    48f8:	6f ef       	ldi	r22, 0xFF	; 255
    48fa:	7f ef       	ldi	r23, 0xFF	; 255
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	db df       	rcall	.-74     	; 0x48b8 <_Z41__static_initialization_and_destruction_0ii>
    4902:	e2 e0       	ldi	r30, 0x02	; 2
    4904:	0c 94 6d 2f 	jmp	0x5eda	; 0x5eda <__epilogue_restores__+0x20>

00004908 <__subsf3>:
    4908:	50 58       	subi	r21, 0x80	; 128

0000490a <__addsf3>:
    490a:	bb 27       	eor	r27, r27
    490c:	aa 27       	eor	r26, r26
    490e:	0e d0       	rcall	.+28     	; 0x492c <__addsf3x>
    4910:	75 c1       	rjmp	.+746    	; 0x4bfc <__fp_round>
    4912:	66 d1       	rcall	.+716    	; 0x4be0 <__fp_pscA>
    4914:	30 f0       	brcs	.+12     	; 0x4922 <__addsf3+0x18>
    4916:	6b d1       	rcall	.+726    	; 0x4bee <__fp_pscB>
    4918:	20 f0       	brcs	.+8      	; 0x4922 <__addsf3+0x18>
    491a:	31 f4       	brne	.+12     	; 0x4928 <__addsf3+0x1e>
    491c:	9f 3f       	cpi	r25, 0xFF	; 255
    491e:	11 f4       	brne	.+4      	; 0x4924 <__addsf3+0x1a>
    4920:	1e f4       	brtc	.+6      	; 0x4928 <__addsf3+0x1e>
    4922:	5b c1       	rjmp	.+694    	; 0x4bda <__fp_nan>
    4924:	0e f4       	brtc	.+2      	; 0x4928 <__addsf3+0x1e>
    4926:	e0 95       	com	r30
    4928:	e7 fb       	bst	r30, 7
    492a:	51 c1       	rjmp	.+674    	; 0x4bce <__fp_inf>

0000492c <__addsf3x>:
    492c:	e9 2f       	mov	r30, r25
    492e:	77 d1       	rcall	.+750    	; 0x4c1e <__fp_split3>
    4930:	80 f3       	brcs	.-32     	; 0x4912 <__addsf3+0x8>
    4932:	ba 17       	cp	r27, r26
    4934:	62 07       	cpc	r22, r18
    4936:	73 07       	cpc	r23, r19
    4938:	84 07       	cpc	r24, r20
    493a:	95 07       	cpc	r25, r21
    493c:	18 f0       	brcs	.+6      	; 0x4944 <__addsf3x+0x18>
    493e:	71 f4       	brne	.+28     	; 0x495c <__addsf3x+0x30>
    4940:	9e f5       	brtc	.+102    	; 0x49a8 <__addsf3x+0x7c>
    4942:	8f c1       	rjmp	.+798    	; 0x4c62 <__fp_zero>
    4944:	0e f4       	brtc	.+2      	; 0x4948 <__addsf3x+0x1c>
    4946:	e0 95       	com	r30
    4948:	0b 2e       	mov	r0, r27
    494a:	ba 2f       	mov	r27, r26
    494c:	a0 2d       	mov	r26, r0
    494e:	0b 01       	movw	r0, r22
    4950:	b9 01       	movw	r22, r18
    4952:	90 01       	movw	r18, r0
    4954:	0c 01       	movw	r0, r24
    4956:	ca 01       	movw	r24, r20
    4958:	a0 01       	movw	r20, r0
    495a:	11 24       	eor	r1, r1
    495c:	ff 27       	eor	r31, r31
    495e:	59 1b       	sub	r21, r25
    4960:	99 f0       	breq	.+38     	; 0x4988 <__addsf3x+0x5c>
    4962:	59 3f       	cpi	r21, 0xF9	; 249
    4964:	50 f4       	brcc	.+20     	; 0x497a <__addsf3x+0x4e>
    4966:	50 3e       	cpi	r21, 0xE0	; 224
    4968:	68 f1       	brcs	.+90     	; 0x49c4 <__addsf3x+0x98>
    496a:	1a 16       	cp	r1, r26
    496c:	f0 40       	sbci	r31, 0x00	; 0
    496e:	a2 2f       	mov	r26, r18
    4970:	23 2f       	mov	r18, r19
    4972:	34 2f       	mov	r19, r20
    4974:	44 27       	eor	r20, r20
    4976:	58 5f       	subi	r21, 0xF8	; 248
    4978:	f3 cf       	rjmp	.-26     	; 0x4960 <__addsf3x+0x34>
    497a:	46 95       	lsr	r20
    497c:	37 95       	ror	r19
    497e:	27 95       	ror	r18
    4980:	a7 95       	ror	r26
    4982:	f0 40       	sbci	r31, 0x00	; 0
    4984:	53 95       	inc	r21
    4986:	c9 f7       	brne	.-14     	; 0x497a <__addsf3x+0x4e>
    4988:	7e f4       	brtc	.+30     	; 0x49a8 <__addsf3x+0x7c>
    498a:	1f 16       	cp	r1, r31
    498c:	ba 0b       	sbc	r27, r26
    498e:	62 0b       	sbc	r22, r18
    4990:	73 0b       	sbc	r23, r19
    4992:	84 0b       	sbc	r24, r20
    4994:	ba f0       	brmi	.+46     	; 0x49c4 <__addsf3x+0x98>
    4996:	91 50       	subi	r25, 0x01	; 1
    4998:	a1 f0       	breq	.+40     	; 0x49c2 <__addsf3x+0x96>
    499a:	ff 0f       	add	r31, r31
    499c:	bb 1f       	adc	r27, r27
    499e:	66 1f       	adc	r22, r22
    49a0:	77 1f       	adc	r23, r23
    49a2:	88 1f       	adc	r24, r24
    49a4:	c2 f7       	brpl	.-16     	; 0x4996 <__addsf3x+0x6a>
    49a6:	0e c0       	rjmp	.+28     	; 0x49c4 <__addsf3x+0x98>
    49a8:	ba 0f       	add	r27, r26
    49aa:	62 1f       	adc	r22, r18
    49ac:	73 1f       	adc	r23, r19
    49ae:	84 1f       	adc	r24, r20
    49b0:	48 f4       	brcc	.+18     	; 0x49c4 <__addsf3x+0x98>
    49b2:	87 95       	ror	r24
    49b4:	77 95       	ror	r23
    49b6:	67 95       	ror	r22
    49b8:	b7 95       	ror	r27
    49ba:	f7 95       	ror	r31
    49bc:	9e 3f       	cpi	r25, 0xFE	; 254
    49be:	08 f0       	brcs	.+2      	; 0x49c2 <__addsf3x+0x96>
    49c0:	b3 cf       	rjmp	.-154    	; 0x4928 <__addsf3+0x1e>
    49c2:	93 95       	inc	r25
    49c4:	88 0f       	add	r24, r24
    49c6:	08 f0       	brcs	.+2      	; 0x49ca <__addsf3x+0x9e>
    49c8:	99 27       	eor	r25, r25
    49ca:	ee 0f       	add	r30, r30
    49cc:	97 95       	ror	r25
    49ce:	87 95       	ror	r24
    49d0:	08 95       	ret

000049d2 <__cmpsf2>:
    49d2:	d9 d0       	rcall	.+434    	; 0x4b86 <__fp_cmp>
    49d4:	08 f4       	brcc	.+2      	; 0x49d8 <__cmpsf2+0x6>
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	08 95       	ret

000049da <__divsf3>:
    49da:	0c d0       	rcall	.+24     	; 0x49f4 <__divsf3x>
    49dc:	0f c1       	rjmp	.+542    	; 0x4bfc <__fp_round>
    49de:	07 d1       	rcall	.+526    	; 0x4bee <__fp_pscB>
    49e0:	40 f0       	brcs	.+16     	; 0x49f2 <__divsf3+0x18>
    49e2:	fe d0       	rcall	.+508    	; 0x4be0 <__fp_pscA>
    49e4:	30 f0       	brcs	.+12     	; 0x49f2 <__divsf3+0x18>
    49e6:	21 f4       	brne	.+8      	; 0x49f0 <__divsf3+0x16>
    49e8:	5f 3f       	cpi	r21, 0xFF	; 255
    49ea:	19 f0       	breq	.+6      	; 0x49f2 <__divsf3+0x18>
    49ec:	f0 c0       	rjmp	.+480    	; 0x4bce <__fp_inf>
    49ee:	51 11       	cpse	r21, r1
    49f0:	39 c1       	rjmp	.+626    	; 0x4c64 <__fp_szero>
    49f2:	f3 c0       	rjmp	.+486    	; 0x4bda <__fp_nan>

000049f4 <__divsf3x>:
    49f4:	14 d1       	rcall	.+552    	; 0x4c1e <__fp_split3>
    49f6:	98 f3       	brcs	.-26     	; 0x49de <__divsf3+0x4>

000049f8 <__divsf3_pse>:
    49f8:	99 23       	and	r25, r25
    49fa:	c9 f3       	breq	.-14     	; 0x49ee <__divsf3+0x14>
    49fc:	55 23       	and	r21, r21
    49fe:	b1 f3       	breq	.-20     	; 0x49ec <__divsf3+0x12>
    4a00:	95 1b       	sub	r25, r21
    4a02:	55 0b       	sbc	r21, r21
    4a04:	bb 27       	eor	r27, r27
    4a06:	aa 27       	eor	r26, r26
    4a08:	62 17       	cp	r22, r18
    4a0a:	73 07       	cpc	r23, r19
    4a0c:	84 07       	cpc	r24, r20
    4a0e:	38 f0       	brcs	.+14     	; 0x4a1e <__divsf3_pse+0x26>
    4a10:	9f 5f       	subi	r25, 0xFF	; 255
    4a12:	5f 4f       	sbci	r21, 0xFF	; 255
    4a14:	22 0f       	add	r18, r18
    4a16:	33 1f       	adc	r19, r19
    4a18:	44 1f       	adc	r20, r20
    4a1a:	aa 1f       	adc	r26, r26
    4a1c:	a9 f3       	breq	.-22     	; 0x4a08 <__divsf3_pse+0x10>
    4a1e:	33 d0       	rcall	.+102    	; 0x4a86 <__divsf3_pse+0x8e>
    4a20:	0e 2e       	mov	r0, r30
    4a22:	3a f0       	brmi	.+14     	; 0x4a32 <__divsf3_pse+0x3a>
    4a24:	e0 e8       	ldi	r30, 0x80	; 128
    4a26:	30 d0       	rcall	.+96     	; 0x4a88 <__divsf3_pse+0x90>
    4a28:	91 50       	subi	r25, 0x01	; 1
    4a2a:	50 40       	sbci	r21, 0x00	; 0
    4a2c:	e6 95       	lsr	r30
    4a2e:	00 1c       	adc	r0, r0
    4a30:	ca f7       	brpl	.-14     	; 0x4a24 <__divsf3_pse+0x2c>
    4a32:	29 d0       	rcall	.+82     	; 0x4a86 <__divsf3_pse+0x8e>
    4a34:	fe 2f       	mov	r31, r30
    4a36:	27 d0       	rcall	.+78     	; 0x4a86 <__divsf3_pse+0x8e>
    4a38:	66 0f       	add	r22, r22
    4a3a:	77 1f       	adc	r23, r23
    4a3c:	88 1f       	adc	r24, r24
    4a3e:	bb 1f       	adc	r27, r27
    4a40:	26 17       	cp	r18, r22
    4a42:	37 07       	cpc	r19, r23
    4a44:	48 07       	cpc	r20, r24
    4a46:	ab 07       	cpc	r26, r27
    4a48:	b0 e8       	ldi	r27, 0x80	; 128
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <__divsf3_pse+0x56>
    4a4c:	bb 0b       	sbc	r27, r27
    4a4e:	80 2d       	mov	r24, r0
    4a50:	bf 01       	movw	r22, r30
    4a52:	ff 27       	eor	r31, r31
    4a54:	93 58       	subi	r25, 0x83	; 131
    4a56:	5f 4f       	sbci	r21, 0xFF	; 255
    4a58:	2a f0       	brmi	.+10     	; 0x4a64 <__divsf3_pse+0x6c>
    4a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a5c:	51 05       	cpc	r21, r1
    4a5e:	68 f0       	brcs	.+26     	; 0x4a7a <__divsf3_pse+0x82>
    4a60:	b6 c0       	rjmp	.+364    	; 0x4bce <__fp_inf>
    4a62:	00 c1       	rjmp	.+512    	; 0x4c64 <__fp_szero>
    4a64:	5f 3f       	cpi	r21, 0xFF	; 255
    4a66:	ec f3       	brlt	.-6      	; 0x4a62 <__divsf3_pse+0x6a>
    4a68:	98 3e       	cpi	r25, 0xE8	; 232
    4a6a:	dc f3       	brlt	.-10     	; 0x4a62 <__divsf3_pse+0x6a>
    4a6c:	86 95       	lsr	r24
    4a6e:	77 95       	ror	r23
    4a70:	67 95       	ror	r22
    4a72:	b7 95       	ror	r27
    4a74:	f7 95       	ror	r31
    4a76:	9f 5f       	subi	r25, 0xFF	; 255
    4a78:	c9 f7       	brne	.-14     	; 0x4a6c <__divsf3_pse+0x74>
    4a7a:	88 0f       	add	r24, r24
    4a7c:	91 1d       	adc	r25, r1
    4a7e:	96 95       	lsr	r25
    4a80:	87 95       	ror	r24
    4a82:	97 f9       	bld	r25, 7
    4a84:	08 95       	ret
    4a86:	e1 e0       	ldi	r30, 0x01	; 1
    4a88:	66 0f       	add	r22, r22
    4a8a:	77 1f       	adc	r23, r23
    4a8c:	88 1f       	adc	r24, r24
    4a8e:	bb 1f       	adc	r27, r27
    4a90:	62 17       	cp	r22, r18
    4a92:	73 07       	cpc	r23, r19
    4a94:	84 07       	cpc	r24, r20
    4a96:	ba 07       	cpc	r27, r26
    4a98:	20 f0       	brcs	.+8      	; 0x4aa2 <__divsf3_pse+0xaa>
    4a9a:	62 1b       	sub	r22, r18
    4a9c:	73 0b       	sbc	r23, r19
    4a9e:	84 0b       	sbc	r24, r20
    4aa0:	ba 0b       	sbc	r27, r26
    4aa2:	ee 1f       	adc	r30, r30
    4aa4:	88 f7       	brcc	.-30     	; 0x4a88 <__divsf3_pse+0x90>
    4aa6:	e0 95       	com	r30
    4aa8:	08 95       	ret

00004aaa <__fixsfsi>:
    4aaa:	04 d0       	rcall	.+8      	; 0x4ab4 <__fixunssfsi>
    4aac:	68 94       	set
    4aae:	b1 11       	cpse	r27, r1
    4ab0:	d9 c0       	rjmp	.+434    	; 0x4c64 <__fp_szero>
    4ab2:	08 95       	ret

00004ab4 <__fixunssfsi>:
    4ab4:	bc d0       	rcall	.+376    	; 0x4c2e <__fp_splitA>
    4ab6:	88 f0       	brcs	.+34     	; 0x4ada <__fixunssfsi+0x26>
    4ab8:	9f 57       	subi	r25, 0x7F	; 127
    4aba:	90 f0       	brcs	.+36     	; 0x4ae0 <__fixunssfsi+0x2c>
    4abc:	b9 2f       	mov	r27, r25
    4abe:	99 27       	eor	r25, r25
    4ac0:	b7 51       	subi	r27, 0x17	; 23
    4ac2:	a0 f0       	brcs	.+40     	; 0x4aec <__fixunssfsi+0x38>
    4ac4:	d1 f0       	breq	.+52     	; 0x4afa <__fixunssfsi+0x46>
    4ac6:	66 0f       	add	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	88 1f       	adc	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	1a f0       	brmi	.+6      	; 0x4ad6 <__fixunssfsi+0x22>
    4ad0:	ba 95       	dec	r27
    4ad2:	c9 f7       	brne	.-14     	; 0x4ac6 <__fixunssfsi+0x12>
    4ad4:	12 c0       	rjmp	.+36     	; 0x4afa <__fixunssfsi+0x46>
    4ad6:	b1 30       	cpi	r27, 0x01	; 1
    4ad8:	81 f0       	breq	.+32     	; 0x4afa <__fixunssfsi+0x46>
    4ada:	c3 d0       	rcall	.+390    	; 0x4c62 <__fp_zero>
    4adc:	b1 e0       	ldi	r27, 0x01	; 1
    4ade:	08 95       	ret
    4ae0:	c0 c0       	rjmp	.+384    	; 0x4c62 <__fp_zero>
    4ae2:	67 2f       	mov	r22, r23
    4ae4:	78 2f       	mov	r23, r24
    4ae6:	88 27       	eor	r24, r24
    4ae8:	b8 5f       	subi	r27, 0xF8	; 248
    4aea:	39 f0       	breq	.+14     	; 0x4afa <__fixunssfsi+0x46>
    4aec:	b9 3f       	cpi	r27, 0xF9	; 249
    4aee:	cc f3       	brlt	.-14     	; 0x4ae2 <__fixunssfsi+0x2e>
    4af0:	86 95       	lsr	r24
    4af2:	77 95       	ror	r23
    4af4:	67 95       	ror	r22
    4af6:	b3 95       	inc	r27
    4af8:	d9 f7       	brne	.-10     	; 0x4af0 <__fixunssfsi+0x3c>
    4afa:	3e f4       	brtc	.+14     	; 0x4b0a <__fixunssfsi+0x56>
    4afc:	90 95       	com	r25
    4afe:	80 95       	com	r24
    4b00:	70 95       	com	r23
    4b02:	61 95       	neg	r22
    4b04:	7f 4f       	sbci	r23, 0xFF	; 255
    4b06:	8f 4f       	sbci	r24, 0xFF	; 255
    4b08:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0a:	08 95       	ret

00004b0c <__floatunsisf>:
    4b0c:	e8 94       	clt
    4b0e:	09 c0       	rjmp	.+18     	; 0x4b22 <__floatsisf+0x12>

00004b10 <__floatsisf>:
    4b10:	97 fb       	bst	r25, 7
    4b12:	3e f4       	brtc	.+14     	; 0x4b22 <__floatsisf+0x12>
    4b14:	90 95       	com	r25
    4b16:	80 95       	com	r24
    4b18:	70 95       	com	r23
    4b1a:	61 95       	neg	r22
    4b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    4b20:	9f 4f       	sbci	r25, 0xFF	; 255
    4b22:	99 23       	and	r25, r25
    4b24:	a9 f0       	breq	.+42     	; 0x4b50 <__floatsisf+0x40>
    4b26:	f9 2f       	mov	r31, r25
    4b28:	96 e9       	ldi	r25, 0x96	; 150
    4b2a:	bb 27       	eor	r27, r27
    4b2c:	93 95       	inc	r25
    4b2e:	f6 95       	lsr	r31
    4b30:	87 95       	ror	r24
    4b32:	77 95       	ror	r23
    4b34:	67 95       	ror	r22
    4b36:	b7 95       	ror	r27
    4b38:	f1 11       	cpse	r31, r1
    4b3a:	f8 cf       	rjmp	.-16     	; 0x4b2c <__floatsisf+0x1c>
    4b3c:	fa f4       	brpl	.+62     	; 0x4b7c <__floatsisf+0x6c>
    4b3e:	bb 0f       	add	r27, r27
    4b40:	11 f4       	brne	.+4      	; 0x4b46 <__floatsisf+0x36>
    4b42:	60 ff       	sbrs	r22, 0
    4b44:	1b c0       	rjmp	.+54     	; 0x4b7c <__floatsisf+0x6c>
    4b46:	6f 5f       	subi	r22, 0xFF	; 255
    4b48:	7f 4f       	sbci	r23, 0xFF	; 255
    4b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b4e:	16 c0       	rjmp	.+44     	; 0x4b7c <__floatsisf+0x6c>
    4b50:	88 23       	and	r24, r24
    4b52:	11 f0       	breq	.+4      	; 0x4b58 <__floatsisf+0x48>
    4b54:	96 e9       	ldi	r25, 0x96	; 150
    4b56:	11 c0       	rjmp	.+34     	; 0x4b7a <__floatsisf+0x6a>
    4b58:	77 23       	and	r23, r23
    4b5a:	21 f0       	breq	.+8      	; 0x4b64 <__floatsisf+0x54>
    4b5c:	9e e8       	ldi	r25, 0x8E	; 142
    4b5e:	87 2f       	mov	r24, r23
    4b60:	76 2f       	mov	r23, r22
    4b62:	05 c0       	rjmp	.+10     	; 0x4b6e <__floatsisf+0x5e>
    4b64:	66 23       	and	r22, r22
    4b66:	71 f0       	breq	.+28     	; 0x4b84 <__floatsisf+0x74>
    4b68:	96 e8       	ldi	r25, 0x86	; 134
    4b6a:	86 2f       	mov	r24, r22
    4b6c:	70 e0       	ldi	r23, 0x00	; 0
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	2a f0       	brmi	.+10     	; 0x4b7c <__floatsisf+0x6c>
    4b72:	9a 95       	dec	r25
    4b74:	66 0f       	add	r22, r22
    4b76:	77 1f       	adc	r23, r23
    4b78:	88 1f       	adc	r24, r24
    4b7a:	da f7       	brpl	.-10     	; 0x4b72 <__floatsisf+0x62>
    4b7c:	88 0f       	add	r24, r24
    4b7e:	96 95       	lsr	r25
    4b80:	87 95       	ror	r24
    4b82:	97 f9       	bld	r25, 7
    4b84:	08 95       	ret

00004b86 <__fp_cmp>:
    4b86:	99 0f       	add	r25, r25
    4b88:	00 08       	sbc	r0, r0
    4b8a:	55 0f       	add	r21, r21
    4b8c:	aa 0b       	sbc	r26, r26
    4b8e:	e0 e8       	ldi	r30, 0x80	; 128
    4b90:	fe ef       	ldi	r31, 0xFE	; 254
    4b92:	16 16       	cp	r1, r22
    4b94:	17 06       	cpc	r1, r23
    4b96:	e8 07       	cpc	r30, r24
    4b98:	f9 07       	cpc	r31, r25
    4b9a:	c0 f0       	brcs	.+48     	; 0x4bcc <__fp_cmp+0x46>
    4b9c:	12 16       	cp	r1, r18
    4b9e:	13 06       	cpc	r1, r19
    4ba0:	e4 07       	cpc	r30, r20
    4ba2:	f5 07       	cpc	r31, r21
    4ba4:	98 f0       	brcs	.+38     	; 0x4bcc <__fp_cmp+0x46>
    4ba6:	62 1b       	sub	r22, r18
    4ba8:	73 0b       	sbc	r23, r19
    4baa:	84 0b       	sbc	r24, r20
    4bac:	95 0b       	sbc	r25, r21
    4bae:	39 f4       	brne	.+14     	; 0x4bbe <__fp_cmp+0x38>
    4bb0:	0a 26       	eor	r0, r26
    4bb2:	61 f0       	breq	.+24     	; 0x4bcc <__fp_cmp+0x46>
    4bb4:	23 2b       	or	r18, r19
    4bb6:	24 2b       	or	r18, r20
    4bb8:	25 2b       	or	r18, r21
    4bba:	21 f4       	brne	.+8      	; 0x4bc4 <__fp_cmp+0x3e>
    4bbc:	08 95       	ret
    4bbe:	0a 26       	eor	r0, r26
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <__fp_cmp+0x3e>
    4bc2:	a1 40       	sbci	r26, 0x01	; 1
    4bc4:	a6 95       	lsr	r26
    4bc6:	8f ef       	ldi	r24, 0xFF	; 255
    4bc8:	81 1d       	adc	r24, r1
    4bca:	81 1d       	adc	r24, r1
    4bcc:	08 95       	ret

00004bce <__fp_inf>:
    4bce:	97 f9       	bld	r25, 7
    4bd0:	9f 67       	ori	r25, 0x7F	; 127
    4bd2:	80 e8       	ldi	r24, 0x80	; 128
    4bd4:	70 e0       	ldi	r23, 0x00	; 0
    4bd6:	60 e0       	ldi	r22, 0x00	; 0
    4bd8:	08 95       	ret

00004bda <__fp_nan>:
    4bda:	9f ef       	ldi	r25, 0xFF	; 255
    4bdc:	80 ec       	ldi	r24, 0xC0	; 192
    4bde:	08 95       	ret

00004be0 <__fp_pscA>:
    4be0:	00 24       	eor	r0, r0
    4be2:	0a 94       	dec	r0
    4be4:	16 16       	cp	r1, r22
    4be6:	17 06       	cpc	r1, r23
    4be8:	18 06       	cpc	r1, r24
    4bea:	09 06       	cpc	r0, r25
    4bec:	08 95       	ret

00004bee <__fp_pscB>:
    4bee:	00 24       	eor	r0, r0
    4bf0:	0a 94       	dec	r0
    4bf2:	12 16       	cp	r1, r18
    4bf4:	13 06       	cpc	r1, r19
    4bf6:	14 06       	cpc	r1, r20
    4bf8:	05 06       	cpc	r0, r21
    4bfa:	08 95       	ret

00004bfc <__fp_round>:
    4bfc:	09 2e       	mov	r0, r25
    4bfe:	03 94       	inc	r0
    4c00:	00 0c       	add	r0, r0
    4c02:	11 f4       	brne	.+4      	; 0x4c08 <__fp_round+0xc>
    4c04:	88 23       	and	r24, r24
    4c06:	52 f0       	brmi	.+20     	; 0x4c1c <__fp_round+0x20>
    4c08:	bb 0f       	add	r27, r27
    4c0a:	40 f4       	brcc	.+16     	; 0x4c1c <__fp_round+0x20>
    4c0c:	bf 2b       	or	r27, r31
    4c0e:	11 f4       	brne	.+4      	; 0x4c14 <__fp_round+0x18>
    4c10:	60 ff       	sbrs	r22, 0
    4c12:	04 c0       	rjmp	.+8      	; 0x4c1c <__fp_round+0x20>
    4c14:	6f 5f       	subi	r22, 0xFF	; 255
    4c16:	7f 4f       	sbci	r23, 0xFF	; 255
    4c18:	8f 4f       	sbci	r24, 0xFF	; 255
    4c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c1c:	08 95       	ret

00004c1e <__fp_split3>:
    4c1e:	57 fd       	sbrc	r21, 7
    4c20:	90 58       	subi	r25, 0x80	; 128
    4c22:	44 0f       	add	r20, r20
    4c24:	55 1f       	adc	r21, r21
    4c26:	59 f0       	breq	.+22     	; 0x4c3e <__fp_splitA+0x10>
    4c28:	5f 3f       	cpi	r21, 0xFF	; 255
    4c2a:	71 f0       	breq	.+28     	; 0x4c48 <__fp_splitA+0x1a>
    4c2c:	47 95       	ror	r20

00004c2e <__fp_splitA>:
    4c2e:	88 0f       	add	r24, r24
    4c30:	97 fb       	bst	r25, 7
    4c32:	99 1f       	adc	r25, r25
    4c34:	61 f0       	breq	.+24     	; 0x4c4e <__fp_splitA+0x20>
    4c36:	9f 3f       	cpi	r25, 0xFF	; 255
    4c38:	79 f0       	breq	.+30     	; 0x4c58 <__fp_splitA+0x2a>
    4c3a:	87 95       	ror	r24
    4c3c:	08 95       	ret
    4c3e:	12 16       	cp	r1, r18
    4c40:	13 06       	cpc	r1, r19
    4c42:	14 06       	cpc	r1, r20
    4c44:	55 1f       	adc	r21, r21
    4c46:	f2 cf       	rjmp	.-28     	; 0x4c2c <__fp_split3+0xe>
    4c48:	46 95       	lsr	r20
    4c4a:	f1 df       	rcall	.-30     	; 0x4c2e <__fp_splitA>
    4c4c:	08 c0       	rjmp	.+16     	; 0x4c5e <__fp_splitA+0x30>
    4c4e:	16 16       	cp	r1, r22
    4c50:	17 06       	cpc	r1, r23
    4c52:	18 06       	cpc	r1, r24
    4c54:	99 1f       	adc	r25, r25
    4c56:	f1 cf       	rjmp	.-30     	; 0x4c3a <__fp_splitA+0xc>
    4c58:	86 95       	lsr	r24
    4c5a:	71 05       	cpc	r23, r1
    4c5c:	61 05       	cpc	r22, r1
    4c5e:	08 94       	sec
    4c60:	08 95       	ret

00004c62 <__fp_zero>:
    4c62:	e8 94       	clt

00004c64 <__fp_szero>:
    4c64:	bb 27       	eor	r27, r27
    4c66:	66 27       	eor	r22, r22
    4c68:	77 27       	eor	r23, r23
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	97 f9       	bld	r25, 7
    4c6e:	08 95       	ret

00004c70 <__gesf2>:
    4c70:	8a df       	rcall	.-236    	; 0x4b86 <__fp_cmp>
    4c72:	08 f4       	brcc	.+2      	; 0x4c76 <__gesf2+0x6>
    4c74:	8f ef       	ldi	r24, 0xFF	; 255
    4c76:	08 95       	ret

00004c78 <__mulsf3>:
    4c78:	0b d0       	rcall	.+22     	; 0x4c90 <__mulsf3x>
    4c7a:	c0 cf       	rjmp	.-128    	; 0x4bfc <__fp_round>
    4c7c:	b1 df       	rcall	.-158    	; 0x4be0 <__fp_pscA>
    4c7e:	28 f0       	brcs	.+10     	; 0x4c8a <__mulsf3+0x12>
    4c80:	b6 df       	rcall	.-148    	; 0x4bee <__fp_pscB>
    4c82:	18 f0       	brcs	.+6      	; 0x4c8a <__mulsf3+0x12>
    4c84:	95 23       	and	r25, r21
    4c86:	09 f0       	breq	.+2      	; 0x4c8a <__mulsf3+0x12>
    4c88:	a2 cf       	rjmp	.-188    	; 0x4bce <__fp_inf>
    4c8a:	a7 cf       	rjmp	.-178    	; 0x4bda <__fp_nan>
    4c8c:	11 24       	eor	r1, r1
    4c8e:	ea cf       	rjmp	.-44     	; 0x4c64 <__fp_szero>

00004c90 <__mulsf3x>:
    4c90:	c6 df       	rcall	.-116    	; 0x4c1e <__fp_split3>
    4c92:	a0 f3       	brcs	.-24     	; 0x4c7c <__mulsf3+0x4>

00004c94 <__mulsf3_pse>:
    4c94:	95 9f       	mul	r25, r21
    4c96:	d1 f3       	breq	.-12     	; 0x4c8c <__mulsf3+0x14>
    4c98:	95 0f       	add	r25, r21
    4c9a:	50 e0       	ldi	r21, 0x00	; 0
    4c9c:	55 1f       	adc	r21, r21
    4c9e:	62 9f       	mul	r22, r18
    4ca0:	f0 01       	movw	r30, r0
    4ca2:	72 9f       	mul	r23, r18
    4ca4:	bb 27       	eor	r27, r27
    4ca6:	f0 0d       	add	r31, r0
    4ca8:	b1 1d       	adc	r27, r1
    4caa:	63 9f       	mul	r22, r19
    4cac:	aa 27       	eor	r26, r26
    4cae:	f0 0d       	add	r31, r0
    4cb0:	b1 1d       	adc	r27, r1
    4cb2:	aa 1f       	adc	r26, r26
    4cb4:	64 9f       	mul	r22, r20
    4cb6:	66 27       	eor	r22, r22
    4cb8:	b0 0d       	add	r27, r0
    4cba:	a1 1d       	adc	r26, r1
    4cbc:	66 1f       	adc	r22, r22
    4cbe:	82 9f       	mul	r24, r18
    4cc0:	22 27       	eor	r18, r18
    4cc2:	b0 0d       	add	r27, r0
    4cc4:	a1 1d       	adc	r26, r1
    4cc6:	62 1f       	adc	r22, r18
    4cc8:	73 9f       	mul	r23, r19
    4cca:	b0 0d       	add	r27, r0
    4ccc:	a1 1d       	adc	r26, r1
    4cce:	62 1f       	adc	r22, r18
    4cd0:	83 9f       	mul	r24, r19
    4cd2:	a0 0d       	add	r26, r0
    4cd4:	61 1d       	adc	r22, r1
    4cd6:	22 1f       	adc	r18, r18
    4cd8:	74 9f       	mul	r23, r20
    4cda:	33 27       	eor	r19, r19
    4cdc:	a0 0d       	add	r26, r0
    4cde:	61 1d       	adc	r22, r1
    4ce0:	23 1f       	adc	r18, r19
    4ce2:	84 9f       	mul	r24, r20
    4ce4:	60 0d       	add	r22, r0
    4ce6:	21 1d       	adc	r18, r1
    4ce8:	82 2f       	mov	r24, r18
    4cea:	76 2f       	mov	r23, r22
    4cec:	6a 2f       	mov	r22, r26
    4cee:	11 24       	eor	r1, r1
    4cf0:	9f 57       	subi	r25, 0x7F	; 127
    4cf2:	50 40       	sbci	r21, 0x00	; 0
    4cf4:	8a f0       	brmi	.+34     	; 0x4d18 <__mulsf3_pse+0x84>
    4cf6:	e1 f0       	breq	.+56     	; 0x4d30 <__mulsf3_pse+0x9c>
    4cf8:	88 23       	and	r24, r24
    4cfa:	4a f0       	brmi	.+18     	; 0x4d0e <__mulsf3_pse+0x7a>
    4cfc:	ee 0f       	add	r30, r30
    4cfe:	ff 1f       	adc	r31, r31
    4d00:	bb 1f       	adc	r27, r27
    4d02:	66 1f       	adc	r22, r22
    4d04:	77 1f       	adc	r23, r23
    4d06:	88 1f       	adc	r24, r24
    4d08:	91 50       	subi	r25, 0x01	; 1
    4d0a:	50 40       	sbci	r21, 0x00	; 0
    4d0c:	a9 f7       	brne	.-22     	; 0x4cf8 <__mulsf3_pse+0x64>
    4d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    4d10:	51 05       	cpc	r21, r1
    4d12:	70 f0       	brcs	.+28     	; 0x4d30 <__mulsf3_pse+0x9c>
    4d14:	5c cf       	rjmp	.-328    	; 0x4bce <__fp_inf>
    4d16:	a6 cf       	rjmp	.-180    	; 0x4c64 <__fp_szero>
    4d18:	5f 3f       	cpi	r21, 0xFF	; 255
    4d1a:	ec f3       	brlt	.-6      	; 0x4d16 <__mulsf3_pse+0x82>
    4d1c:	98 3e       	cpi	r25, 0xE8	; 232
    4d1e:	dc f3       	brlt	.-10     	; 0x4d16 <__mulsf3_pse+0x82>
    4d20:	86 95       	lsr	r24
    4d22:	77 95       	ror	r23
    4d24:	67 95       	ror	r22
    4d26:	b7 95       	ror	r27
    4d28:	f7 95       	ror	r31
    4d2a:	e7 95       	ror	r30
    4d2c:	9f 5f       	subi	r25, 0xFF	; 255
    4d2e:	c1 f7       	brne	.-16     	; 0x4d20 <__mulsf3_pse+0x8c>
    4d30:	fe 2b       	or	r31, r30
    4d32:	88 0f       	add	r24, r24
    4d34:	91 1d       	adc	r25, r1
    4d36:	96 95       	lsr	r25
    4d38:	87 95       	ror	r24
    4d3a:	97 f9       	bld	r25, 7
    4d3c:	08 95       	ret

00004d3e <__unordsf2>:
    4d3e:	23 df       	rcall	.-442    	; 0x4b86 <__fp_cmp>
    4d40:	88 0b       	sbc	r24, r24
    4d42:	99 0b       	sbc	r25, r25
    4d44:	08 95       	ret

00004d46 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4d46:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <abort>

00004d4a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4d4a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4d4c:	91 8d       	ldd	r25, Z+25	; 0x19
    4d4e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4d50:	89 2f       	mov	r24, r25
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	80 5c       	subi	r24, 0xC0	; 192
    4d56:	9f 4f       	sbci	r25, 0xFF	; 255
    4d58:	82 1b       	sub	r24, r18
    4d5a:	91 09       	sbc	r25, r1
}
    4d5c:	8f 73       	andi	r24, 0x3F	; 63
    4d5e:	99 27       	eor	r25, r25
    4d60:	08 95       	ret

00004d62 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4d62:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4d64:	91 8d       	ldd	r25, Z+25	; 0x19
    4d66:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d68:	98 17       	cp	r25, r24
    4d6a:	31 f0       	breq	.+12     	; 0x4d78 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4d6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d6e:	e8 0f       	add	r30, r24
    4d70:	f1 1d       	adc	r31, r1
    4d72:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4d78:	8f ef       	ldi	r24, 0xFF	; 255
    4d7a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4d7c:	08 95       	ret

00004d7e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4d7e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4d80:	91 8d       	ldd	r25, Z+25	; 0x19
    4d82:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d84:	98 17       	cp	r25, r24
    4d86:	61 f0       	breq	.+24     	; 0x4da0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4d88:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d8a:	df 01       	movw	r26, r30
    4d8c:	a8 0f       	add	r26, r24
    4d8e:	b1 1d       	adc	r27, r1
    4d90:	5d 96       	adiw	r26, 0x1d	; 29
    4d92:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4d94:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d96:	9f 5f       	subi	r25, 0xFF	; 255
    4d98:	9f 73       	andi	r25, 0x3F	; 63
    4d9a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4da0:	8f ef       	ldi	r24, 0xFF	; 255
    4da2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4da4:	08 95       	ret

00004da6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4da6:	82 e2       	ldi	r24, 0x22	; 34
    4da8:	98 e2       	ldi	r25, 0x28	; 40
    4daa:	89 2b       	or	r24, r25
    4dac:	41 f0       	breq	.+16     	; 0x4dbe <_Z14serialEventRunv+0x18>
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	89 2b       	or	r24, r25
    4db4:	21 f0       	breq	.+8      	; 0x4dbe <_Z14serialEventRunv+0x18>
    4db6:	46 d1       	rcall	.+652    	; 0x5044 <_Z17Serial0_availablev>
    4db8:	81 11       	cpse	r24, r1
    4dba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4dbe:	08 95       	ret

00004dc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4dc0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4dc2:	84 8d       	ldd	r24, Z+28	; 0x1c
    4dc4:	df 01       	movw	r26, r30
    4dc6:	a8 0f       	add	r26, r24
    4dc8:	b1 1d       	adc	r27, r1
    4dca:	a3 5a       	subi	r26, 0xA3	; 163
    4dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    4dce:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4dd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	01 96       	adiw	r24, 0x01	; 1
    4dd6:	8f 73       	andi	r24, 0x3F	; 63
    4dd8:	99 27       	eor	r25, r25
    4dda:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    4ddc:	a6 89       	ldd	r26, Z+22	; 0x16
    4dde:	b7 89       	ldd	r27, Z+23	; 0x17
    4de0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4de2:	a0 89       	ldd	r26, Z+16	; 0x10
    4de4:	b1 89       	ldd	r27, Z+17	; 0x11
    4de6:	8c 91       	ld	r24, X
    4de8:	80 64       	ori	r24, 0x40	; 64
    4dea:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    4dec:	93 8d       	ldd	r25, Z+27	; 0x1b
    4dee:	84 8d       	ldd	r24, Z+28	; 0x1c
    4df0:	98 13       	cpse	r25, r24
    4df2:	06 c0       	rjmp	.+12     	; 0x4e00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4df4:	02 88       	ldd	r0, Z+18	; 0x12
    4df6:	f3 89       	ldd	r31, Z+19	; 0x13
    4df8:	e0 2d       	mov	r30, r0
    4dfa:	80 81       	ld	r24, Z
    4dfc:	8f 7d       	andi	r24, 0xDF	; 223
    4dfe:	80 83       	st	Z, r24
    4e00:	08 95       	ret

00004e02 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
    4e06:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4e08:	88 8d       	ldd	r24, Y+24	; 0x18
    4e0a:	88 23       	and	r24, r24
    4e0c:	c1 f0       	breq	.+48     	; 0x4e3e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4e0e:	ea 89       	ldd	r30, Y+18	; 0x12
    4e10:	fb 89       	ldd	r31, Y+19	; 0x13
    4e12:	80 81       	ld	r24, Z
    4e14:	85 fd       	sbrc	r24, 5
    4e16:	05 c0       	rjmp	.+10     	; 0x4e22 <_ZN14HardwareSerial5flushEv+0x20>
    4e18:	a8 89       	ldd	r26, Y+16	; 0x10
    4e1a:	b9 89       	ldd	r27, Y+17	; 0x11
    4e1c:	8c 91       	ld	r24, X
    4e1e:	86 fd       	sbrc	r24, 6
    4e20:	0e c0       	rjmp	.+28     	; 0x4e3e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	07 fc       	sbrc	r0, 7
    4e26:	f5 cf       	rjmp	.-22     	; 0x4e12 <_ZN14HardwareSerial5flushEv+0x10>
    4e28:	80 81       	ld	r24, Z
    4e2a:	85 ff       	sbrs	r24, 5
    4e2c:	f2 cf       	rjmp	.-28     	; 0x4e12 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4e2e:	a8 89       	ldd	r26, Y+16	; 0x10
    4e30:	b9 89       	ldd	r27, Y+17	; 0x11
    4e32:	8c 91       	ld	r24, X
    4e34:	85 ff       	sbrs	r24, 5
    4e36:	ed cf       	rjmp	.-38     	; 0x4e12 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4e38:	ce 01       	movw	r24, r28
    4e3a:	c2 df       	rcall	.-124    	; 0x4dc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4e3c:	e8 cf       	rjmp	.-48     	; 0x4e0e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	08 95       	ret

00004e44 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4e44:	ef 92       	push	r14
    4e46:	ff 92       	push	r15
    4e48:	0f 93       	push	r16
    4e4a:	1f 93       	push	r17
    4e4c:	cf 93       	push	r28
    4e4e:	df 93       	push	r29
    4e50:	ec 01       	movw	r28, r24
  _written = true;
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4e56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e5a:	98 13       	cpse	r25, r24
    4e5c:	05 c0       	rjmp	.+10     	; 0x4e68 <_ZN14HardwareSerial5writeEh+0x24>
    4e5e:	e8 89       	ldd	r30, Y+16	; 0x10
    4e60:	f9 89       	ldd	r31, Y+17	; 0x11
    4e62:	80 81       	ld	r24, Z
    4e64:	85 fd       	sbrc	r24, 5
    4e66:	23 c0       	rjmp	.+70     	; 0x4eae <_ZN14HardwareSerial5writeEh+0x6a>
    4e68:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4e6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4e6c:	10 e0       	ldi	r17, 0x00	; 0
    4e6e:	0f 5f       	subi	r16, 0xFF	; 255
    4e70:	1f 4f       	sbci	r17, 0xFF	; 255
    4e72:	0f 73       	andi	r16, 0x3F	; 63
    4e74:	11 27       	eor	r17, r17
    4e76:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4e78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e7a:	e8 12       	cpse	r14, r24
    4e7c:	0b c0       	rjmp	.+22     	; 0x4e94 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	07 fc       	sbrc	r0, 7
    4e82:	fa cf       	rjmp	.-12     	; 0x4e78 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4e84:	e8 89       	ldd	r30, Y+16	; 0x10
    4e86:	f9 89       	ldd	r31, Y+17	; 0x11
    4e88:	80 81       	ld	r24, Z
    4e8a:	85 ff       	sbrs	r24, 5
    4e8c:	f5 cf       	rjmp	.-22     	; 0x4e78 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4e8e:	ce 01       	movw	r24, r28
    4e90:	97 df       	rcall	.-210    	; 0x4dc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4e92:	f2 cf       	rjmp	.-28     	; 0x4e78 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e96:	fe 01       	movw	r30, r28
    4e98:	e8 0f       	add	r30, r24
    4e9a:	f1 1d       	adc	r31, r1
    4e9c:	e3 5a       	subi	r30, 0xA3	; 163
    4e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    4ea2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    4ea4:	ea 89       	ldd	r30, Y+18	; 0x12
    4ea6:	fb 89       	ldd	r31, Y+19	; 0x13
    4ea8:	80 81       	ld	r24, Z
    4eaa:	80 62       	ori	r24, 0x20	; 32
    4eac:	07 c0       	rjmp	.+14     	; 0x4ebc <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4eae:	ee 89       	ldd	r30, Y+22	; 0x16
    4eb0:	ff 89       	ldd	r31, Y+23	; 0x17
    4eb2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4eb4:	e8 89       	ldd	r30, Y+16	; 0x10
    4eb6:	f9 89       	ldd	r31, Y+17	; 0x11
    4eb8:	80 81       	ld	r24, Z
    4eba:	80 64       	ori	r24, 0x40	; 64
    4ebc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	ff 90       	pop	r15
    4ecc:	ef 90       	pop	r14
    4ece:	08 95       	ret

00004ed0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4ed0:	cf 92       	push	r12
    4ed2:	df 92       	push	r13
    4ed4:	ef 92       	push	r14
    4ed6:	ff 92       	push	r15
    4ed8:	1f 93       	push	r17
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
    4ede:	ec 01       	movw	r28, r24
    4ee0:	6a 01       	movw	r12, r20
    4ee2:	7b 01       	movw	r14, r22
    4ee4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4ee6:	e8 89       	ldd	r30, Y+16	; 0x10
    4ee8:	f9 89       	ldd	r31, Y+17	; 0x11
    4eea:	82 e0       	ldi	r24, 0x02	; 2
    4eec:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4eee:	41 15       	cp	r20, r1
    4ef0:	51 4e       	sbci	r21, 0xE1	; 225
    4ef2:	61 05       	cpc	r22, r1
    4ef4:	71 05       	cpc	r23, r1
    4ef6:	a9 f0       	breq	.+42     	; 0x4f22 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4ef8:	60 e0       	ldi	r22, 0x00	; 0
    4efa:	79 e0       	ldi	r23, 0x09	; 9
    4efc:	8d e3       	ldi	r24, 0x3D	; 61
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	a7 01       	movw	r20, r14
    4f02:	96 01       	movw	r18, r12
    4f04:	70 d7       	rcall	.+3808   	; 0x5de6 <__udivmodsi4>
    4f06:	da 01       	movw	r26, r20
    4f08:	c9 01       	movw	r24, r18
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	a1 09       	sbc	r26, r1
    4f0e:	b1 09       	sbc	r27, r1
    4f10:	b6 95       	lsr	r27
    4f12:	a7 95       	ror	r26
    4f14:	97 95       	ror	r25
    4f16:	87 95       	ror	r24
    4f18:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4f1a:	41 15       	cp	r20, r1
    4f1c:	80 e1       	ldi	r24, 0x10	; 16
    4f1e:	58 07       	cpc	r21, r24
    4f20:	a0 f0       	brcs	.+40     	; 0x4f4a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4f22:	e8 89       	ldd	r30, Y+16	; 0x10
    4f24:	f9 89       	ldd	r31, Y+17	; 0x11
    4f26:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4f28:	60 e8       	ldi	r22, 0x80	; 128
    4f2a:	74 e8       	ldi	r23, 0x84	; 132
    4f2c:	8e e1       	ldi	r24, 0x1E	; 30
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	a7 01       	movw	r20, r14
    4f32:	96 01       	movw	r18, r12
    4f34:	58 d7       	rcall	.+3760   	; 0x5de6 <__udivmodsi4>
    4f36:	ba 01       	movw	r22, r20
    4f38:	a9 01       	movw	r20, r18
    4f3a:	41 50       	subi	r20, 0x01	; 1
    4f3c:	51 09       	sbc	r21, r1
    4f3e:	61 09       	sbc	r22, r1
    4f40:	71 09       	sbc	r23, r1
    4f42:	76 95       	lsr	r23
    4f44:	67 95       	ror	r22
    4f46:	57 95       	ror	r21
    4f48:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4f4a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4f4c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4f4e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4f50:	ee 85       	ldd	r30, Y+14	; 0x0e
    4f52:	ff 85       	ldd	r31, Y+15	; 0x0f
    4f54:	40 83       	st	Z, r20

  _written = false;
    4f56:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4f58:	ec 89       	ldd	r30, Y+20	; 0x14
    4f5a:	fd 89       	ldd	r31, Y+21	; 0x15
    4f5c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4f5e:	ea 89       	ldd	r30, Y+18	; 0x12
    4f60:	fb 89       	ldd	r31, Y+19	; 0x13
    4f62:	80 81       	ld	r24, Z
    4f64:	80 61       	ori	r24, 0x10	; 16
    4f66:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4f68:	ea 89       	ldd	r30, Y+18	; 0x12
    4f6a:	fb 89       	ldd	r31, Y+19	; 0x13
    4f6c:	80 81       	ld	r24, Z
    4f6e:	88 60       	ori	r24, 0x08	; 8
    4f70:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4f72:	ea 89       	ldd	r30, Y+18	; 0x12
    4f74:	fb 89       	ldd	r31, Y+19	; 0x13
    4f76:	80 81       	ld	r24, Z
    4f78:	80 68       	ori	r24, 0x80	; 128
    4f7a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4f7c:	ea 89       	ldd	r30, Y+18	; 0x12
    4f7e:	fb 89       	ldd	r31, Y+19	; 0x13
    4f80:	80 81       	ld	r24, Z
    4f82:	8f 7d       	andi	r24, 0xDF	; 223
    4f84:	80 83       	st	Z, r24
}
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	1f 91       	pop	r17
    4f8c:	ff 90       	pop	r15
    4f8e:	ef 90       	pop	r14
    4f90:	df 90       	pop	r13
    4f92:	cf 90       	pop	r12
    4f94:	08 95       	ret

00004f96 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4f96:	1f 92       	push	r1
    4f98:	0f 92       	push	r0
    4f9a:	0f b6       	in	r0, 0x3f	; 63
    4f9c:	0f 92       	push	r0
    4f9e:	11 24       	eor	r1, r1
    4fa0:	2f 93       	push	r18
    4fa2:	8f 93       	push	r24
    4fa4:	9f 93       	push	r25
    4fa6:	ef 93       	push	r30
    4fa8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4faa:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <Serial+0x10>
    4fae:	f0 91 65 05 	lds	r31, 0x0565	; 0x800565 <Serial+0x11>
    4fb2:	80 81       	ld	r24, Z
    4fb4:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <Serial+0x16>
    4fb8:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <Serial+0x17>
    4fbc:	82 fd       	sbrc	r24, 2
    4fbe:	12 c0       	rjmp	.+36     	; 0x4fe4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4fc0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4fc2:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <Serial+0x19>
    4fc6:	8f 5f       	subi	r24, 0xFF	; 255
    4fc8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4fca:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <Serial+0x1a>
    4fce:	82 17       	cp	r24, r18
    4fd0:	51 f0       	breq	.+20     	; 0x4fe6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4fd2:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <Serial+0x19>
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	ec 5a       	subi	r30, 0xAC	; 172
    4fda:	fa 4f       	sbci	r31, 0xFA	; 250
    4fdc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4fde:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <Serial+0x19>
    4fe2:	01 c0       	rjmp	.+2      	; 0x4fe6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4fe4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4fe6:	ff 91       	pop	r31
    4fe8:	ef 91       	pop	r30
    4fea:	9f 91       	pop	r25
    4fec:	8f 91       	pop	r24
    4fee:	2f 91       	pop	r18
    4ff0:	0f 90       	pop	r0
    4ff2:	0f be       	out	0x3f, r0	; 63
    4ff4:	0f 90       	pop	r0
    4ff6:	1f 90       	pop	r1
    4ff8:	18 95       	reti

00004ffa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4ffa:	1f 92       	push	r1
    4ffc:	0f 92       	push	r0
    4ffe:	0f b6       	in	r0, 0x3f	; 63
    5000:	0f 92       	push	r0
    5002:	11 24       	eor	r1, r1
    5004:	2f 93       	push	r18
    5006:	3f 93       	push	r19
    5008:	4f 93       	push	r20
    500a:	5f 93       	push	r21
    500c:	6f 93       	push	r22
    500e:	7f 93       	push	r23
    5010:	8f 93       	push	r24
    5012:	9f 93       	push	r25
    5014:	af 93       	push	r26
    5016:	bf 93       	push	r27
    5018:	ef 93       	push	r30
    501a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    501c:	84 e5       	ldi	r24, 0x54	; 84
    501e:	95 e0       	ldi	r25, 0x05	; 5
    5020:	cf de       	rcall	.-610    	; 0x4dc0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5022:	ff 91       	pop	r31
    5024:	ef 91       	pop	r30
    5026:	bf 91       	pop	r27
    5028:	af 91       	pop	r26
    502a:	9f 91       	pop	r25
    502c:	8f 91       	pop	r24
    502e:	7f 91       	pop	r23
    5030:	6f 91       	pop	r22
    5032:	5f 91       	pop	r21
    5034:	4f 91       	pop	r20
    5036:	3f 91       	pop	r19
    5038:	2f 91       	pop	r18
    503a:	0f 90       	pop	r0
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	0f 90       	pop	r0
    5040:	1f 90       	pop	r1
    5042:	18 95       	reti

00005044 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5044:	84 e5       	ldi	r24, 0x54	; 84
    5046:	95 e0       	ldi	r25, 0x05	; 5
    5048:	80 de       	rcall	.-768    	; 0x4d4a <_ZN14HardwareSerial9availableEv>
    504a:	21 e0       	ldi	r18, 0x01	; 1
    504c:	89 2b       	or	r24, r25
    504e:	09 f4       	brne	.+2      	; 0x5052 <_Z17Serial0_availablev+0xe>
    5050:	20 e0       	ldi	r18, 0x00	; 0
}
    5052:	82 2f       	mov	r24, r18
    5054:	08 95       	ret

00005056 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5056:	e4 e5       	ldi	r30, 0x54	; 84
    5058:	f5 e0       	ldi	r31, 0x05	; 5
    505a:	13 82       	std	Z+3, r1	; 0x03
    505c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    505e:	88 ee       	ldi	r24, 0xE8	; 232
    5060:	93 e0       	ldi	r25, 0x03	; 3
    5062:	a0 e0       	ldi	r26, 0x00	; 0
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	84 83       	std	Z+4, r24	; 0x04
    5068:	95 83       	std	Z+5, r25	; 0x05
    506a:	a6 83       	std	Z+6, r26	; 0x06
    506c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    506e:	81 ec       	ldi	r24, 0xC1	; 193
    5070:	91 e0       	ldi	r25, 0x01	; 1
    5072:	91 83       	std	Z+1, r25	; 0x01
    5074:	80 83       	st	Z, r24
    5076:	85 ec       	ldi	r24, 0xC5	; 197
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	95 87       	std	Z+13, r25	; 0x0d
    507c:	84 87       	std	Z+12, r24	; 0x0c
    507e:	84 ec       	ldi	r24, 0xC4	; 196
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	97 87       	std	Z+15, r25	; 0x0f
    5084:	86 87       	std	Z+14, r24	; 0x0e
    5086:	80 ec       	ldi	r24, 0xC0	; 192
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	91 8b       	std	Z+17, r25	; 0x11
    508c:	80 8b       	std	Z+16, r24	; 0x10
    508e:	81 ec       	ldi	r24, 0xC1	; 193
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	93 8b       	std	Z+19, r25	; 0x13
    5094:	82 8b       	std	Z+18, r24	; 0x12
    5096:	82 ec       	ldi	r24, 0xC2	; 194
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	95 8b       	std	Z+21, r25	; 0x15
    509c:	84 8b       	std	Z+20, r24	; 0x14
    509e:	86 ec       	ldi	r24, 0xC6	; 198
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	97 8b       	std	Z+23, r25	; 0x17
    50a4:	86 8b       	std	Z+22, r24	; 0x16
    50a6:	11 8e       	std	Z+25, r1	; 0x19
    50a8:	12 8e       	std	Z+26, r1	; 0x1a
    50aa:	13 8e       	std	Z+27, r1	; 0x1b
    50ac:	14 8e       	std	Z+28, r1	; 0x1c
    50ae:	08 95       	ret

000050b0 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    50b0:	08 95       	ret

000050b2 <main>:

int main(void)
{
	init();
    50b2:	16 d3       	rcall	.+1580   	; 0x56e0 <init>

	initVariant();
    50b4:	fd df       	rcall	.-6      	; 0x50b0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    50b6:	b8 db       	rcall	.-2192   	; 0x4828 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    50b8:	c3 ed       	ldi	r28, 0xD3	; 211
    50ba:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    50bc:	d9 db       	rcall	.-2126   	; 0x4870 <loop>
		if (serialEventRun) serialEventRun();
    50be:	20 97       	sbiw	r28, 0x00	; 0
    50c0:	e9 f3       	breq	.-6      	; 0x50bc <main+0xa>
    50c2:	71 de       	rcall	.-798    	; 0x4da6 <_Z14serialEventRunv>
    50c4:	fb cf       	rjmp	.-10     	; 0x50bc <main+0xa>

000050c6 <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    50c6:	42 c7       	rjmp	.+3716   	; 0x5f4c <malloc>

000050c8 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    50c8:	d6 c7       	rjmp	.+4012   	; 0x6076 <free>

000050ca <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    50ca:	cf 92       	push	r12
    50cc:	df 92       	push	r13
    50ce:	ef 92       	push	r14
    50d0:	ff 92       	push	r15
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	6c 01       	movw	r12, r24
    50dc:	7a 01       	movw	r14, r20
    50de:	8b 01       	movw	r16, r22
    50e0:	c0 e0       	ldi	r28, 0x00	; 0
    50e2:	d0 e0       	ldi	r29, 0x00	; 0
    50e4:	ce 15       	cp	r28, r14
    50e6:	df 05       	cpc	r29, r15
    50e8:	89 f0       	breq	.+34     	; 0x510c <_ZN5Print5writeEPKhj+0x42>
    50ea:	d8 01       	movw	r26, r16
    50ec:	6d 91       	ld	r22, X+
    50ee:	8d 01       	movw	r16, r26
    50f0:	d6 01       	movw	r26, r12
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	01 90       	ld	r0, Z+
    50f8:	f0 81       	ld	r31, Z
    50fa:	e0 2d       	mov	r30, r0
    50fc:	c6 01       	movw	r24, r12
    50fe:	09 95       	icall
    5100:	89 2b       	or	r24, r25
    5102:	11 f4       	brne	.+4      	; 0x5108 <_ZN5Print5writeEPKhj+0x3e>
    5104:	7e 01       	movw	r14, r28
    5106:	02 c0       	rjmp	.+4      	; 0x510c <_ZN5Print5writeEPKhj+0x42>
    5108:	21 96       	adiw	r28, 0x01	; 1
    510a:	ec cf       	rjmp	.-40     	; 0x50e4 <_ZN5Print5writeEPKhj+0x1a>
    510c:	c7 01       	movw	r24, r14
    510e:	df 91       	pop	r29
    5110:	cf 91       	pop	r28
    5112:	1f 91       	pop	r17
    5114:	0f 91       	pop	r16
    5116:	ff 90       	pop	r15
    5118:	ef 90       	pop	r14
    511a:	df 90       	pop	r13
    511c:	cf 90       	pop	r12
    511e:	08 95       	ret

00005120 <_ZN5Print5writeEPKc>:
    5120:	61 15       	cp	r22, r1
    5122:	71 05       	cpc	r23, r1
    5124:	79 f0       	breq	.+30     	; 0x5144 <_ZN5Print5writeEPKc+0x24>
    5126:	fb 01       	movw	r30, r22
    5128:	01 90       	ld	r0, Z+
    512a:	00 20       	and	r0, r0
    512c:	e9 f7       	brne	.-6      	; 0x5128 <_ZN5Print5writeEPKc+0x8>
    512e:	31 97       	sbiw	r30, 0x01	; 1
    5130:	af 01       	movw	r20, r30
    5132:	46 1b       	sub	r20, r22
    5134:	57 0b       	sbc	r21, r23
    5136:	dc 01       	movw	r26, r24
    5138:	ed 91       	ld	r30, X+
    513a:	fc 91       	ld	r31, X
    513c:	02 80       	ldd	r0, Z+2	; 0x02
    513e:	f3 81       	ldd	r31, Z+3	; 0x03
    5140:	e0 2d       	mov	r30, r0
    5142:	09 94       	ijmp
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	08 95       	ret

0000514a <_ZN5Print5printEPK19__FlashStringHelper>:
    514a:	ef 92       	push	r14
    514c:	ff 92       	push	r15
    514e:	0f 93       	push	r16
    5150:	1f 93       	push	r17
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	8c 01       	movw	r16, r24
    5158:	7b 01       	movw	r14, r22
    515a:	c0 e0       	ldi	r28, 0x00	; 0
    515c:	d0 e0       	ldi	r29, 0x00	; 0
    515e:	f7 01       	movw	r30, r14
    5160:	ec 0f       	add	r30, r28
    5162:	fd 1f       	adc	r31, r29
    5164:	64 91       	lpm	r22, Z
    5166:	66 23       	and	r22, r22
    5168:	61 f0       	breq	.+24     	; 0x5182 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    516a:	d8 01       	movw	r26, r16
    516c:	ed 91       	ld	r30, X+
    516e:	fc 91       	ld	r31, X
    5170:	01 90       	ld	r0, Z+
    5172:	f0 81       	ld	r31, Z
    5174:	e0 2d       	mov	r30, r0
    5176:	c8 01       	movw	r24, r16
    5178:	09 95       	icall
    517a:	89 2b       	or	r24, r25
    517c:	11 f0       	breq	.+4      	; 0x5182 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    517e:	21 96       	adiw	r28, 0x01	; 1
    5180:	ee cf       	rjmp	.-36     	; 0x515e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5182:	ce 01       	movw	r24, r28
    5184:	df 91       	pop	r29
    5186:	cf 91       	pop	r28
    5188:	1f 91       	pop	r17
    518a:	0f 91       	pop	r16
    518c:	ff 90       	pop	r15
    518e:	ef 90       	pop	r14
    5190:	08 95       	ret

00005192 <_ZN5Print5printERK6String>:
    5192:	dc 01       	movw	r26, r24
    5194:	ed 91       	ld	r30, X+
    5196:	fc 91       	ld	r31, X
    5198:	db 01       	movw	r26, r22
    519a:	14 96       	adiw	r26, 0x04	; 4
    519c:	4d 91       	ld	r20, X+
    519e:	5c 91       	ld	r21, X
    51a0:	15 97       	sbiw	r26, 0x05	; 5
    51a2:	6d 91       	ld	r22, X+
    51a4:	7c 91       	ld	r23, X
    51a6:	02 80       	ldd	r0, Z+2	; 0x02
    51a8:	f3 81       	ldd	r31, Z+3	; 0x03
    51aa:	e0 2d       	mov	r30, r0
    51ac:	09 94       	ijmp

000051ae <_ZN5Print5printEPKc>:
    51ae:	b8 cf       	rjmp	.-144    	; 0x5120 <_ZN5Print5writeEPKc>

000051b0 <_ZN5Print5printEc>:
    51b0:	dc 01       	movw	r26, r24
    51b2:	ed 91       	ld	r30, X+
    51b4:	fc 91       	ld	r31, X
    51b6:	01 90       	ld	r0, Z+
    51b8:	f0 81       	ld	r31, Z
    51ba:	e0 2d       	mov	r30, r0
    51bc:	09 94       	ijmp

000051be <_ZN5Print7printlnEv>:
    51be:	6d ec       	ldi	r22, 0xCD	; 205
    51c0:	71 e0       	ldi	r23, 0x01	; 1
    51c2:	ae cf       	rjmp	.-164    	; 0x5120 <_ZN5Print5writeEPKc>

000051c4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    51c4:	0f 93       	push	r16
    51c6:	1f 93       	push	r17
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	ec 01       	movw	r28, r24
    51ce:	bd df       	rcall	.-134    	; 0x514a <_ZN5Print5printEPK19__FlashStringHelper>
    51d0:	8c 01       	movw	r16, r24
    51d2:	ce 01       	movw	r24, r28
    51d4:	f4 df       	rcall	.-24     	; 0x51be <_ZN5Print7printlnEv>
    51d6:	80 0f       	add	r24, r16
    51d8:	91 1f       	adc	r25, r17
    51da:	df 91       	pop	r29
    51dc:	cf 91       	pop	r28
    51de:	1f 91       	pop	r17
    51e0:	0f 91       	pop	r16
    51e2:	08 95       	ret

000051e4 <_ZN5Print11printNumberEmh>:
    51e4:	8f 92       	push	r8
    51e6:	9f 92       	push	r9
    51e8:	af 92       	push	r10
    51ea:	bf 92       	push	r11
    51ec:	cf 92       	push	r12
    51ee:	df 92       	push	r13
    51f0:	ef 92       	push	r14
    51f2:	ff 92       	push	r15
    51f4:	0f 93       	push	r16
    51f6:	1f 93       	push	r17
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
    51fc:	cd b7       	in	r28, 0x3d	; 61
    51fe:	de b7       	in	r29, 0x3e	; 62
    5200:	a1 97       	sbiw	r28, 0x21	; 33
    5202:	0f b6       	in	r0, 0x3f	; 63
    5204:	f8 94       	cli
    5206:	de bf       	out	0x3e, r29	; 62
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	cd bf       	out	0x3d, r28	; 61
    520c:	7c 01       	movw	r14, r24
    520e:	d4 2e       	mov	r13, r20
    5210:	c5 2e       	mov	r12, r21
    5212:	db 01       	movw	r26, r22
    5214:	19 a2       	std	Y+33, r1	; 0x21
    5216:	22 30       	cpi	r18, 0x02	; 2
    5218:	08 f4       	brcc	.+2      	; 0x521c <_ZN5Print11printNumberEmh+0x38>
    521a:	2a e0       	ldi	r18, 0x0A	; 10
    521c:	8e 01       	movw	r16, r28
    521e:	0f 5d       	subi	r16, 0xDF	; 223
    5220:	1f 4f       	sbci	r17, 0xFF	; 255
    5222:	82 2e       	mov	r8, r18
    5224:	91 2c       	mov	r9, r1
    5226:	a1 2c       	mov	r10, r1
    5228:	b1 2c       	mov	r11, r1
    522a:	6d 2d       	mov	r22, r13
    522c:	7c 2d       	mov	r23, r12
    522e:	cd 01       	movw	r24, r26
    5230:	a5 01       	movw	r20, r10
    5232:	94 01       	movw	r18, r8
    5234:	d8 d5       	rcall	.+2992   	; 0x5de6 <__udivmodsi4>
    5236:	d2 2e       	mov	r13, r18
    5238:	c3 2e       	mov	r12, r19
    523a:	da 01       	movw	r26, r20
    523c:	01 50       	subi	r16, 0x01	; 1
    523e:	11 09       	sbc	r17, r1
    5240:	6a 30       	cpi	r22, 0x0A	; 10
    5242:	71 05       	cpc	r23, r1
    5244:	81 05       	cpc	r24, r1
    5246:	91 05       	cpc	r25, r1
    5248:	10 f4       	brcc	.+4      	; 0x524e <_ZN5Print11printNumberEmh+0x6a>
    524a:	60 5d       	subi	r22, 0xD0	; 208
    524c:	01 c0       	rjmp	.+2      	; 0x5250 <_ZN5Print11printNumberEmh+0x6c>
    524e:	69 5c       	subi	r22, 0xC9	; 201
    5250:	f8 01       	movw	r30, r16
    5252:	60 83       	st	Z, r22
    5254:	23 2b       	or	r18, r19
    5256:	24 2b       	or	r18, r20
    5258:	25 2b       	or	r18, r21
    525a:	39 f7       	brne	.-50     	; 0x522a <_ZN5Print11printNumberEmh+0x46>
    525c:	b8 01       	movw	r22, r16
    525e:	c7 01       	movw	r24, r14
    5260:	5f df       	rcall	.-322    	; 0x5120 <_ZN5Print5writeEPKc>
    5262:	a1 96       	adiw	r28, 0x21	; 33
    5264:	0f b6       	in	r0, 0x3f	; 63
    5266:	f8 94       	cli
    5268:	de bf       	out	0x3e, r29	; 62
    526a:	0f be       	out	0x3f, r0	; 63
    526c:	cd bf       	out	0x3d, r28	; 61
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	ff 90       	pop	r15
    5278:	ef 90       	pop	r14
    527a:	df 90       	pop	r13
    527c:	cf 90       	pop	r12
    527e:	bf 90       	pop	r11
    5280:	af 90       	pop	r10
    5282:	9f 90       	pop	r9
    5284:	8f 90       	pop	r8
    5286:	08 95       	ret

00005288 <_ZN5Print5printEli>:
    5288:	cf 92       	push	r12
    528a:	df 92       	push	r13
    528c:	ef 92       	push	r14
    528e:	ff 92       	push	r15
    5290:	0f 93       	push	r16
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	ec 01       	movw	r28, r24
    529a:	6a 01       	movw	r12, r20
    529c:	7b 01       	movw	r14, r22
    529e:	21 15       	cp	r18, r1
    52a0:	31 05       	cpc	r19, r1
    52a2:	79 f4       	brne	.+30     	; 0x52c2 <_ZN5Print5printEli+0x3a>
    52a4:	e8 81       	ld	r30, Y
    52a6:	f9 81       	ldd	r31, Y+1	; 0x01
    52a8:	01 90       	ld	r0, Z+
    52aa:	f0 81       	ld	r31, Z
    52ac:	e0 2d       	mov	r30, r0
    52ae:	64 2f       	mov	r22, r20
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	ff 90       	pop	r15
    52ba:	ef 90       	pop	r14
    52bc:	df 90       	pop	r13
    52be:	cf 90       	pop	r12
    52c0:	09 94       	ijmp
    52c2:	2a 30       	cpi	r18, 0x0A	; 10
    52c4:	31 05       	cpc	r19, r1
    52c6:	d9 f4       	brne	.+54     	; 0x52fe <_ZN5Print5printEli+0x76>
    52c8:	77 ff       	sbrs	r23, 7
    52ca:	18 c0       	rjmp	.+48     	; 0x52fc <_ZN5Print5printEli+0x74>
    52cc:	6d e2       	ldi	r22, 0x2D	; 45
    52ce:	70 df       	rcall	.-288    	; 0x51b0 <_ZN5Print5printEc>
    52d0:	8c 01       	movw	r16, r24
    52d2:	44 27       	eor	r20, r20
    52d4:	55 27       	eor	r21, r21
    52d6:	ba 01       	movw	r22, r20
    52d8:	4c 19       	sub	r20, r12
    52da:	5d 09       	sbc	r21, r13
    52dc:	6e 09       	sbc	r22, r14
    52de:	7f 09       	sbc	r23, r15
    52e0:	2a e0       	ldi	r18, 0x0A	; 10
    52e2:	ce 01       	movw	r24, r28
    52e4:	7f df       	rcall	.-258    	; 0x51e4 <_ZN5Print11printNumberEmh>
    52e6:	80 0f       	add	r24, r16
    52e8:	91 1f       	adc	r25, r17
    52ea:	df 91       	pop	r29
    52ec:	cf 91       	pop	r28
    52ee:	1f 91       	pop	r17
    52f0:	0f 91       	pop	r16
    52f2:	ff 90       	pop	r15
    52f4:	ef 90       	pop	r14
    52f6:	df 90       	pop	r13
    52f8:	cf 90       	pop	r12
    52fa:	08 95       	ret
    52fc:	2a e0       	ldi	r18, 0x0A	; 10
    52fe:	b7 01       	movw	r22, r14
    5300:	a6 01       	movw	r20, r12
    5302:	ce 01       	movw	r24, r28
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	1f 91       	pop	r17
    530a:	0f 91       	pop	r16
    530c:	ff 90       	pop	r15
    530e:	ef 90       	pop	r14
    5310:	df 90       	pop	r13
    5312:	cf 90       	pop	r12
    5314:	67 cf       	rjmp	.-306    	; 0x51e4 <_ZN5Print11printNumberEmh>

00005316 <_ZN5Print7printlnEii>:
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	ec 01       	movw	r28, r24
    5320:	9a 01       	movw	r18, r20
    5322:	ab 01       	movw	r20, r22
    5324:	77 0f       	add	r23, r23
    5326:	66 0b       	sbc	r22, r22
    5328:	77 0b       	sbc	r23, r23
    532a:	ae df       	rcall	.-164    	; 0x5288 <_ZN5Print5printEli>
    532c:	8c 01       	movw	r16, r24
    532e:	ce 01       	movw	r24, r28
    5330:	46 df       	rcall	.-372    	; 0x51be <_ZN5Print7printlnEv>
    5332:	80 0f       	add	r24, r16
    5334:	91 1f       	adc	r25, r17
    5336:	df 91       	pop	r29
    5338:	cf 91       	pop	r28
    533a:	1f 91       	pop	r17
    533c:	0f 91       	pop	r16
    533e:	08 95       	ret

00005340 <_ZN5Print5printEmi>:
    5340:	21 15       	cp	r18, r1
    5342:	31 05       	cpc	r19, r1
    5344:	41 f4       	brne	.+16     	; 0x5356 <_ZN5Print5printEmi+0x16>
    5346:	dc 01       	movw	r26, r24
    5348:	ed 91       	ld	r30, X+
    534a:	fc 91       	ld	r31, X
    534c:	01 90       	ld	r0, Z+
    534e:	f0 81       	ld	r31, Z
    5350:	e0 2d       	mov	r30, r0
    5352:	64 2f       	mov	r22, r20
    5354:	09 94       	ijmp
    5356:	46 cf       	rjmp	.-372    	; 0x51e4 <_ZN5Print11printNumberEmh>

00005358 <_ZN5Print7printlnEji>:
    5358:	0f 93       	push	r16
    535a:	1f 93       	push	r17
    535c:	cf 93       	push	r28
    535e:	df 93       	push	r29
    5360:	ec 01       	movw	r28, r24
    5362:	9a 01       	movw	r18, r20
    5364:	ab 01       	movw	r20, r22
    5366:	60 e0       	ldi	r22, 0x00	; 0
    5368:	70 e0       	ldi	r23, 0x00	; 0
    536a:	ea df       	rcall	.-44     	; 0x5340 <_ZN5Print5printEmi>
    536c:	8c 01       	movw	r16, r24
    536e:	ce 01       	movw	r24, r28
    5370:	26 df       	rcall	.-436    	; 0x51be <_ZN5Print7printlnEv>
    5372:	80 0f       	add	r24, r16
    5374:	91 1f       	adc	r25, r17
    5376:	df 91       	pop	r29
    5378:	cf 91       	pop	r28
    537a:	1f 91       	pop	r17
    537c:	0f 91       	pop	r16
    537e:	08 95       	ret

00005380 <_ZN5Print7printlnEmi>:
    5380:	0f 93       	push	r16
    5382:	1f 93       	push	r17
    5384:	cf 93       	push	r28
    5386:	df 93       	push	r29
    5388:	ec 01       	movw	r28, r24
    538a:	da df       	rcall	.-76     	; 0x5340 <_ZN5Print5printEmi>
    538c:	8c 01       	movw	r16, r24
    538e:	ce 01       	movw	r24, r28
    5390:	16 df       	rcall	.-468    	; 0x51be <_ZN5Print7printlnEv>
    5392:	80 0f       	add	r24, r16
    5394:	91 1f       	adc	r25, r17
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	1f 91       	pop	r17
    539c:	0f 91       	pop	r16
    539e:	08 95       	ret

000053a0 <_ZN5Print10printFloatEdh>:
    53a0:	4f 92       	push	r4
    53a2:	5f 92       	push	r5
    53a4:	6f 92       	push	r6
    53a6:	7f 92       	push	r7
    53a8:	8f 92       	push	r8
    53aa:	9f 92       	push	r9
    53ac:	af 92       	push	r10
    53ae:	bf 92       	push	r11
    53b0:	cf 92       	push	r12
    53b2:	df 92       	push	r13
    53b4:	ef 92       	push	r14
    53b6:	ff 92       	push	r15
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	ec 01       	movw	r28, r24
    53be:	6a 01       	movw	r12, r20
    53c0:	7b 01       	movw	r14, r22
    53c2:	b2 2e       	mov	r11, r18
    53c4:	9a 01       	movw	r18, r20
    53c6:	ab 01       	movw	r20, r22
    53c8:	c7 01       	movw	r24, r14
    53ca:	b6 01       	movw	r22, r12
    53cc:	b8 dc       	rcall	.-1680   	; 0x4d3e <__unordsf2>
    53ce:	88 23       	and	r24, r24
    53d0:	19 f0       	breq	.+6      	; 0x53d8 <_ZN5Print10printFloatEdh+0x38>
    53d2:	60 ed       	ldi	r22, 0xD0	; 208
    53d4:	71 e0       	ldi	r23, 0x01	; 1
    53d6:	24 c0       	rjmp	.+72     	; 0x5420 <_ZN5Print10printFloatEdh+0x80>
    53d8:	26 01       	movw	r4, r12
    53da:	37 01       	movw	r6, r14
    53dc:	e8 94       	clt
    53de:	77 f8       	bld	r7, 7
    53e0:	2f ef       	ldi	r18, 0xFF	; 255
    53e2:	3f ef       	ldi	r19, 0xFF	; 255
    53e4:	4f e7       	ldi	r20, 0x7F	; 127
    53e6:	5f e7       	ldi	r21, 0x7F	; 127
    53e8:	c3 01       	movw	r24, r6
    53ea:	b2 01       	movw	r22, r4
    53ec:	a8 dc       	rcall	.-1712   	; 0x4d3e <__unordsf2>
    53ee:	81 11       	cpse	r24, r1
    53f0:	0c c0       	rjmp	.+24     	; 0x540a <_ZN5Print10printFloatEdh+0x6a>
    53f2:	2f ef       	ldi	r18, 0xFF	; 255
    53f4:	3f ef       	ldi	r19, 0xFF	; 255
    53f6:	4f e7       	ldi	r20, 0x7F	; 127
    53f8:	5f e7       	ldi	r21, 0x7F	; 127
    53fa:	c3 01       	movw	r24, r6
    53fc:	b2 01       	movw	r22, r4
    53fe:	e9 da       	rcall	.-2606   	; 0x49d2 <__cmpsf2>
    5400:	18 16       	cp	r1, r24
    5402:	1c f4       	brge	.+6      	; 0x540a <_ZN5Print10printFloatEdh+0x6a>
    5404:	64 ed       	ldi	r22, 0xD4	; 212
    5406:	71 e0       	ldi	r23, 0x01	; 1
    5408:	0b c0       	rjmp	.+22     	; 0x5420 <_ZN5Print10printFloatEdh+0x80>
    540a:	2f ef       	ldi	r18, 0xFF	; 255
    540c:	3f ef       	ldi	r19, 0xFF	; 255
    540e:	4f e7       	ldi	r20, 0x7F	; 127
    5410:	5f e4       	ldi	r21, 0x4F	; 79
    5412:	c7 01       	movw	r24, r14
    5414:	b6 01       	movw	r22, r12
    5416:	2c dc       	rcall	.-1960   	; 0x4c70 <__gesf2>
    5418:	18 16       	cp	r1, r24
    541a:	94 f4       	brge	.+36     	; 0x5440 <_ZN5Print10printFloatEdh+0xa0>
    541c:	68 ed       	ldi	r22, 0xD8	; 216
    541e:	71 e0       	ldi	r23, 0x01	; 1
    5420:	ce 01       	movw	r24, r28
    5422:	df 91       	pop	r29
    5424:	cf 91       	pop	r28
    5426:	ff 90       	pop	r15
    5428:	ef 90       	pop	r14
    542a:	df 90       	pop	r13
    542c:	cf 90       	pop	r12
    542e:	bf 90       	pop	r11
    5430:	af 90       	pop	r10
    5432:	9f 90       	pop	r9
    5434:	8f 90       	pop	r8
    5436:	7f 90       	pop	r7
    5438:	6f 90       	pop	r6
    543a:	5f 90       	pop	r5
    543c:	4f 90       	pop	r4
    543e:	70 ce       	rjmp	.-800    	; 0x5120 <_ZN5Print5writeEPKc>
    5440:	2f ef       	ldi	r18, 0xFF	; 255
    5442:	3f ef       	ldi	r19, 0xFF	; 255
    5444:	4f e7       	ldi	r20, 0x7F	; 127
    5446:	5f ec       	ldi	r21, 0xCF	; 207
    5448:	c7 01       	movw	r24, r14
    544a:	b6 01       	movw	r22, r12
    544c:	c2 da       	rcall	.-2684   	; 0x49d2 <__cmpsf2>
    544e:	87 fd       	sbrc	r24, 7
    5450:	e5 cf       	rjmp	.-54     	; 0x541c <_ZN5Print10printFloatEdh+0x7c>
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	a9 01       	movw	r20, r18
    5458:	c7 01       	movw	r24, r14
    545a:	b6 01       	movw	r22, r12
    545c:	ba da       	rcall	.-2700   	; 0x49d2 <__cmpsf2>
    545e:	87 ff       	sbrs	r24, 7
    5460:	09 c0       	rjmp	.+18     	; 0x5474 <_ZN5Print10printFloatEdh+0xd4>
    5462:	6d e2       	ldi	r22, 0x2D	; 45
    5464:	ce 01       	movw	r24, r28
    5466:	a4 de       	rcall	.-696    	; 0x51b0 <_ZN5Print5printEc>
    5468:	4c 01       	movw	r8, r24
    546a:	f7 fa       	bst	r15, 7
    546c:	f0 94       	com	r15
    546e:	f7 f8       	bld	r15, 7
    5470:	f0 94       	com	r15
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <_ZN5Print10printFloatEdh+0xd8>
    5474:	81 2c       	mov	r8, r1
    5476:	91 2c       	mov	r9, r1
    5478:	a1 2c       	mov	r10, r1
    547a:	60 e0       	ldi	r22, 0x00	; 0
    547c:	70 e0       	ldi	r23, 0x00	; 0
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	9f e3       	ldi	r25, 0x3F	; 63
    5482:	ab 14       	cp	r10, r11
    5484:	39 f0       	breq	.+14     	; 0x5494 <_ZN5Print10printFloatEdh+0xf4>
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	40 e2       	ldi	r20, 0x20	; 32
    548c:	51 e4       	ldi	r21, 0x41	; 65
    548e:	a5 da       	rcall	.-2742   	; 0x49da <__divsf3>
    5490:	a3 94       	inc	r10
    5492:	f7 cf       	rjmp	.-18     	; 0x5482 <_ZN5Print10printFloatEdh+0xe2>
    5494:	9b 01       	movw	r18, r22
    5496:	ac 01       	movw	r20, r24
    5498:	c7 01       	movw	r24, r14
    549a:	b6 01       	movw	r22, r12
    549c:	36 da       	rcall	.-2964   	; 0x490a <__addsf3>
    549e:	2b 01       	movw	r4, r22
    54a0:	3c 01       	movw	r6, r24
    54a2:	08 db       	rcall	.-2544   	; 0x4ab4 <__fixunssfsi>
    54a4:	6b 01       	movw	r12, r22
    54a6:	7c 01       	movw	r14, r24
    54a8:	31 db       	rcall	.-2462   	; 0x4b0c <__floatunsisf>
    54aa:	9b 01       	movw	r18, r22
    54ac:	ac 01       	movw	r20, r24
    54ae:	c3 01       	movw	r24, r6
    54b0:	b2 01       	movw	r22, r4
    54b2:	2a da       	rcall	.-2988   	; 0x4908 <__subsf3>
    54b4:	2b 01       	movw	r4, r22
    54b6:	3c 01       	movw	r6, r24
    54b8:	2a e0       	ldi	r18, 0x0A	; 10
    54ba:	b7 01       	movw	r22, r14
    54bc:	a6 01       	movw	r20, r12
    54be:	ce 01       	movw	r24, r28
    54c0:	91 de       	rcall	.-734    	; 0x51e4 <_ZN5Print11printNumberEmh>
    54c2:	7c 01       	movw	r14, r24
    54c4:	e8 0c       	add	r14, r8
    54c6:	f9 1c       	adc	r15, r9
    54c8:	bb 20       	and	r11, r11
    54ca:	31 f0       	breq	.+12     	; 0x54d8 <_ZN5Print10printFloatEdh+0x138>
    54cc:	6c ed       	ldi	r22, 0xDC	; 220
    54ce:	71 e0       	ldi	r23, 0x01	; 1
    54d0:	ce 01       	movw	r24, r28
    54d2:	26 de       	rcall	.-948    	; 0x5120 <_ZN5Print5writeEPKc>
    54d4:	e8 0e       	add	r14, r24
    54d6:	f9 1e       	adc	r15, r25
    54d8:	db 2c       	mov	r13, r11
    54da:	dd 20       	and	r13, r13
    54dc:	11 f1       	breq	.+68     	; 0x5522 <_ZN5Print10printFloatEdh+0x182>
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	40 e2       	ldi	r20, 0x20	; 32
    54e4:	51 e4       	ldi	r21, 0x41	; 65
    54e6:	c3 01       	movw	r24, r6
    54e8:	b2 01       	movw	r22, r4
    54ea:	c6 db       	rcall	.-2164   	; 0x4c78 <__mulsf3>
    54ec:	2b 01       	movw	r4, r22
    54ee:	3c 01       	movw	r6, r24
    54f0:	dc da       	rcall	.-2632   	; 0x4aaa <__fixsfsi>
    54f2:	4b 01       	movw	r8, r22
    54f4:	77 0f       	add	r23, r23
    54f6:	aa 08       	sbc	r10, r10
    54f8:	bb 08       	sbc	r11, r11
    54fa:	2a e0       	ldi	r18, 0x0A	; 10
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	b5 01       	movw	r22, r10
    5500:	a4 01       	movw	r20, r8
    5502:	ce 01       	movw	r24, r28
    5504:	c1 de       	rcall	.-638    	; 0x5288 <_ZN5Print5printEli>
    5506:	e8 0e       	add	r14, r24
    5508:	f9 1e       	adc	r15, r25
    550a:	c5 01       	movw	r24, r10
    550c:	b4 01       	movw	r22, r8
    550e:	00 db       	rcall	.-2560   	; 0x4b10 <__floatsisf>
    5510:	9b 01       	movw	r18, r22
    5512:	ac 01       	movw	r20, r24
    5514:	c3 01       	movw	r24, r6
    5516:	b2 01       	movw	r22, r4
    5518:	f7 d9       	rcall	.-3090   	; 0x4908 <__subsf3>
    551a:	2b 01       	movw	r4, r22
    551c:	3c 01       	movw	r6, r24
    551e:	da 94       	dec	r13
    5520:	dc cf       	rjmp	.-72     	; 0x54da <_ZN5Print10printFloatEdh+0x13a>
    5522:	c7 01       	movw	r24, r14
    5524:	df 91       	pop	r29
    5526:	cf 91       	pop	r28
    5528:	ff 90       	pop	r15
    552a:	ef 90       	pop	r14
    552c:	df 90       	pop	r13
    552e:	cf 90       	pop	r12
    5530:	bf 90       	pop	r11
    5532:	af 90       	pop	r10
    5534:	9f 90       	pop	r9
    5536:	8f 90       	pop	r8
    5538:	7f 90       	pop	r7
    553a:	6f 90       	pop	r6
    553c:	5f 90       	pop	r5
    553e:	4f 90       	pop	r4
    5540:	08 95       	ret

00005542 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    5542:	0f 93       	push	r16
    5544:	1f 93       	push	r17
    5546:	cf 93       	push	r28
    5548:	df 93       	push	r29
    554a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    554c:	29 df       	rcall	.-430    	; 0x53a0 <_ZN5Print10printFloatEdh>
    554e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    5550:	ce 01       	movw	r24, r28
    5552:	35 de       	rcall	.-918    	; 0x51be <_ZN5Print7printlnEv>
  return n;
}
    5554:	80 0f       	add	r24, r16
    5556:	91 1f       	adc	r25, r17
    5558:	df 91       	pop	r29
    555a:	cf 91       	pop	r28
    555c:	1f 91       	pop	r17
    555e:	0f 91       	pop	r16
    5560:	08 95       	ret

00005562 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5562:	1f 92       	push	r1
    5564:	0f 92       	push	r0
    5566:	0f b6       	in	r0, 0x3f	; 63
    5568:	0f 92       	push	r0
    556a:	11 24       	eor	r1, r1
    556c:	2f 93       	push	r18
    556e:	3f 93       	push	r19
    5570:	8f 93       	push	r24
    5572:	9f 93       	push	r25
    5574:	af 93       	push	r26
    5576:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5578:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <timer0_millis>
    557c:	90 91 f3 05 	lds	r25, 0x05F3	; 0x8005f3 <timer0_millis+0x1>
    5580:	a0 91 f4 05 	lds	r26, 0x05F4	; 0x8005f4 <timer0_millis+0x2>
    5584:	b0 91 f5 05 	lds	r27, 0x05F5	; 0x8005f5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5588:	30 91 f1 05 	lds	r19, 0x05F1	; 0x8005f1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    558c:	23 e0       	ldi	r18, 0x03	; 3
    558e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5590:	2d 37       	cpi	r18, 0x7D	; 125
    5592:	20 f4       	brcc	.+8      	; 0x559c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5594:	01 96       	adiw	r24, 0x01	; 1
    5596:	a1 1d       	adc	r26, r1
    5598:	b1 1d       	adc	r27, r1
    559a:	05 c0       	rjmp	.+10     	; 0x55a6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    559c:	26 e8       	ldi	r18, 0x86	; 134
    559e:	23 0f       	add	r18, r19
		m += 1;
    55a0:	02 96       	adiw	r24, 0x02	; 2
    55a2:	a1 1d       	adc	r26, r1
    55a4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    55a6:	20 93 f1 05 	sts	0x05F1, r18	; 0x8005f1 <timer0_fract>
	timer0_millis = m;
    55aa:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <timer0_millis>
    55ae:	90 93 f3 05 	sts	0x05F3, r25	; 0x8005f3 <timer0_millis+0x1>
    55b2:	a0 93 f4 05 	sts	0x05F4, r26	; 0x8005f4 <timer0_millis+0x2>
    55b6:	b0 93 f5 05 	sts	0x05F5, r27	; 0x8005f5 <timer0_millis+0x3>
	timer0_overflow_count++;
    55ba:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <timer0_overflow_count>
    55be:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <timer0_overflow_count+0x1>
    55c2:	a0 91 f8 05 	lds	r26, 0x05F8	; 0x8005f8 <timer0_overflow_count+0x2>
    55c6:	b0 91 f9 05 	lds	r27, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x3>
    55ca:	01 96       	adiw	r24, 0x01	; 1
    55cc:	a1 1d       	adc	r26, r1
    55ce:	b1 1d       	adc	r27, r1
    55d0:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <timer0_overflow_count>
    55d4:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <timer0_overflow_count+0x1>
    55d8:	a0 93 f8 05 	sts	0x05F8, r26	; 0x8005f8 <timer0_overflow_count+0x2>
    55dc:	b0 93 f9 05 	sts	0x05F9, r27	; 0x8005f9 <timer0_overflow_count+0x3>
}
    55e0:	bf 91       	pop	r27
    55e2:	af 91       	pop	r26
    55e4:	9f 91       	pop	r25
    55e6:	8f 91       	pop	r24
    55e8:	3f 91       	pop	r19
    55ea:	2f 91       	pop	r18
    55ec:	0f 90       	pop	r0
    55ee:	0f be       	out	0x3f, r0	; 63
    55f0:	0f 90       	pop	r0
    55f2:	1f 90       	pop	r1
    55f4:	18 95       	reti

000055f6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    55f6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    55f8:	f8 94       	cli
	m = timer0_millis;
    55fa:	60 91 f2 05 	lds	r22, 0x05F2	; 0x8005f2 <timer0_millis>
    55fe:	70 91 f3 05 	lds	r23, 0x05F3	; 0x8005f3 <timer0_millis+0x1>
    5602:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <timer0_millis+0x2>
    5606:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <timer0_millis+0x3>
	SREG = oldSREG;
    560a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    560c:	08 95       	ret

0000560e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    560e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5610:	f8 94       	cli
	m = timer0_overflow_count;
    5612:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <timer0_overflow_count>
    5616:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <timer0_overflow_count+0x1>
    561a:	a0 91 f8 05 	lds	r26, 0x05F8	; 0x8005f8 <timer0_overflow_count+0x2>
    561e:	b0 91 f9 05 	lds	r27, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5622:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5624:	a8 9b       	sbis	0x15, 0	; 21
    5626:	05 c0       	rjmp	.+10     	; 0x5632 <micros+0x24>
    5628:	2f 3f       	cpi	r18, 0xFF	; 255
    562a:	19 f0       	breq	.+6      	; 0x5632 <micros+0x24>
		m++;
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	a1 1d       	adc	r26, r1
    5630:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5632:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5634:	ba 2f       	mov	r27, r26
    5636:	a9 2f       	mov	r26, r25
    5638:	98 2f       	mov	r25, r24
    563a:	88 27       	eor	r24, r24
    563c:	82 0f       	add	r24, r18
    563e:	91 1d       	adc	r25, r1
    5640:	a1 1d       	adc	r26, r1
    5642:	b1 1d       	adc	r27, r1
    5644:	bc 01       	movw	r22, r24
    5646:	cd 01       	movw	r24, r26
    5648:	42 e0       	ldi	r20, 0x02	; 2
    564a:	66 0f       	add	r22, r22
    564c:	77 1f       	adc	r23, r23
    564e:	88 1f       	adc	r24, r24
    5650:	99 1f       	adc	r25, r25
    5652:	4a 95       	dec	r20
    5654:	d1 f7       	brne	.-12     	; 0x564a <micros+0x3c>
}
    5656:	08 95       	ret

00005658 <delay>:

void delay(unsigned long ms)
{
    5658:	8f 92       	push	r8
    565a:	9f 92       	push	r9
    565c:	af 92       	push	r10
    565e:	bf 92       	push	r11
    5660:	cf 92       	push	r12
    5662:	df 92       	push	r13
    5664:	ef 92       	push	r14
    5666:	ff 92       	push	r15
    5668:	6b 01       	movw	r12, r22
    566a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    566c:	d0 df       	rcall	.-96     	; 0x560e <micros>
    566e:	4b 01       	movw	r8, r22
    5670:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5672:	c1 14       	cp	r12, r1
    5674:	d1 04       	cpc	r13, r1
    5676:	e1 04       	cpc	r14, r1
    5678:	f1 04       	cpc	r15, r1
    567a:	f1 f0       	breq	.+60     	; 0x56b8 <delay+0x60>
		yield();
    567c:	b3 d3       	rcall	.+1894   	; 0x5de4 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    567e:	c7 df       	rcall	.-114    	; 0x560e <micros>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	88 19       	sub	r24, r8
    5686:	99 09       	sbc	r25, r9
    5688:	aa 09       	sbc	r26, r10
    568a:	bb 09       	sbc	r27, r11
    568c:	88 3e       	cpi	r24, 0xE8	; 232
    568e:	93 40       	sbci	r25, 0x03	; 3
    5690:	a1 05       	cpc	r26, r1
    5692:	b1 05       	cpc	r27, r1
    5694:	70 f3       	brcs	.-36     	; 0x5672 <delay+0x1a>
			ms--;
    5696:	21 e0       	ldi	r18, 0x01	; 1
    5698:	c2 1a       	sub	r12, r18
    569a:	d1 08       	sbc	r13, r1
    569c:	e1 08       	sbc	r14, r1
    569e:	f1 08       	sbc	r15, r1
			start += 1000;
    56a0:	88 ee       	ldi	r24, 0xE8	; 232
    56a2:	88 0e       	add	r8, r24
    56a4:	83 e0       	ldi	r24, 0x03	; 3
    56a6:	98 1e       	adc	r9, r24
    56a8:	a1 1c       	adc	r10, r1
    56aa:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    56ac:	c1 14       	cp	r12, r1
    56ae:	d1 04       	cpc	r13, r1
    56b0:	e1 04       	cpc	r14, r1
    56b2:	f1 04       	cpc	r15, r1
    56b4:	21 f7       	brne	.-56     	; 0x567e <delay+0x26>
    56b6:	dd cf       	rjmp	.-70     	; 0x5672 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    56b8:	ff 90       	pop	r15
    56ba:	ef 90       	pop	r14
    56bc:	df 90       	pop	r13
    56be:	cf 90       	pop	r12
    56c0:	bf 90       	pop	r11
    56c2:	af 90       	pop	r10
    56c4:	9f 90       	pop	r9
    56c6:	8f 90       	pop	r8
    56c8:	08 95       	ret

000056ca <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    56ca:	82 30       	cpi	r24, 0x02	; 2
    56cc:	91 05       	cpc	r25, r1
    56ce:	38 f0       	brcs	.+14     	; 0x56de <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    56d0:	88 0f       	add	r24, r24
    56d2:	99 1f       	adc	r25, r25
    56d4:	88 0f       	add	r24, r24
    56d6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    56d8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    56da:	01 97       	sbiw	r24, 0x01	; 1
    56dc:	f1 f7       	brne	.-4      	; 0x56da <delayMicroseconds+0x10>
    56de:	08 95       	ret

000056e0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    56e0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    56e2:	84 b5       	in	r24, 0x24	; 36
    56e4:	82 60       	ori	r24, 0x02	; 2
    56e6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    56e8:	84 b5       	in	r24, 0x24	; 36
    56ea:	81 60       	ori	r24, 0x01	; 1
    56ec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    56ee:	85 b5       	in	r24, 0x25	; 37
    56f0:	82 60       	ori	r24, 0x02	; 2
    56f2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    56f4:	85 b5       	in	r24, 0x25	; 37
    56f6:	81 60       	ori	r24, 0x01	; 1
    56f8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    56fa:	ee e6       	ldi	r30, 0x6E	; 110
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	80 81       	ld	r24, Z
    5700:	81 60       	ori	r24, 0x01	; 1
    5702:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5704:	e1 e8       	ldi	r30, 0x81	; 129
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    570a:	80 81       	ld	r24, Z
    570c:	82 60       	ori	r24, 0x02	; 2
    570e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5710:	80 81       	ld	r24, Z
    5712:	81 60       	ori	r24, 0x01	; 1
    5714:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5716:	e0 e8       	ldi	r30, 0x80	; 128
    5718:	f0 e0       	ldi	r31, 0x00	; 0
    571a:	80 81       	ld	r24, Z
    571c:	81 60       	ori	r24, 0x01	; 1
    571e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5720:	e1 eb       	ldi	r30, 0xB1	; 177
    5722:	f0 e0       	ldi	r31, 0x00	; 0
    5724:	80 81       	ld	r24, Z
    5726:	84 60       	ori	r24, 0x04	; 4
    5728:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    572a:	e0 eb       	ldi	r30, 0xB0	; 176
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	80 81       	ld	r24, Z
    5730:	81 60       	ori	r24, 0x01	; 1
    5732:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5734:	ea e7       	ldi	r30, 0x7A	; 122
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	80 81       	ld	r24, Z
    573a:	84 60       	ori	r24, 0x04	; 4
    573c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    573e:	80 81       	ld	r24, Z
    5740:	82 60       	ori	r24, 0x02	; 2
    5742:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5744:	80 81       	ld	r24, Z
    5746:	81 60       	ori	r24, 0x01	; 1
    5748:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    574a:	80 81       	ld	r24, Z
    574c:	80 68       	ori	r24, 0x80	; 128
    574e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5750:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5754:	08 95       	ret

00005756 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5756:	8e 30       	cpi	r24, 0x0E	; 14
    5758:	08 f0       	brcs	.+2      	; 0x575c <analogRead+0x6>
    575a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    575c:	87 70       	andi	r24, 0x07	; 7
    575e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <analog_reference>
    5762:	90 e4       	ldi	r25, 0x40	; 64
    5764:	29 9f       	mul	r18, r25
    5766:	90 01       	movw	r18, r0
    5768:	11 24       	eor	r1, r1
    576a:	82 2b       	or	r24, r18
    576c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5770:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5774:	80 64       	ori	r24, 0x40	; 64
    5776:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    577a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    577e:	86 fd       	sbrc	r24, 6
    5780:	fc cf       	rjmp	.-8      	; 0x577a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5782:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    5786:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    578a:	90 e0       	ldi	r25, 0x00	; 0
}
    578c:	92 2b       	or	r25, r18
    578e:	08 95       	ret

00005790 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5790:	83 30       	cpi	r24, 0x03	; 3
    5792:	81 f0       	breq	.+32     	; 0x57b4 <turnOffPWM+0x24>
    5794:	28 f4       	brcc	.+10     	; 0x57a0 <turnOffPWM+0x10>
    5796:	81 30       	cpi	r24, 0x01	; 1
    5798:	99 f0       	breq	.+38     	; 0x57c0 <turnOffPWM+0x30>
    579a:	82 30       	cpi	r24, 0x02	; 2
    579c:	a1 f0       	breq	.+40     	; 0x57c6 <turnOffPWM+0x36>
    579e:	08 95       	ret
    57a0:	87 30       	cpi	r24, 0x07	; 7
    57a2:	a9 f0       	breq	.+42     	; 0x57ce <turnOffPWM+0x3e>
    57a4:	88 30       	cpi	r24, 0x08	; 8
    57a6:	b9 f0       	breq	.+46     	; 0x57d6 <turnOffPWM+0x46>
    57a8:	84 30       	cpi	r24, 0x04	; 4
    57aa:	d1 f4       	brne	.+52     	; 0x57e0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    57ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57b0:	8f 7d       	andi	r24, 0xDF	; 223
    57b2:	03 c0       	rjmp	.+6      	; 0x57ba <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    57b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57b8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    57ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57be:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    57c0:	84 b5       	in	r24, 0x24	; 36
    57c2:	8f 77       	andi	r24, 0x7F	; 127
    57c4:	02 c0       	rjmp	.+4      	; 0x57ca <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    57c6:	84 b5       	in	r24, 0x24	; 36
    57c8:	8f 7d       	andi	r24, 0xDF	; 223
    57ca:	84 bd       	out	0x24, r24	; 36
    57cc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    57ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57d2:	8f 77       	andi	r24, 0x7F	; 127
    57d4:	03 c0       	rjmp	.+6      	; 0x57dc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    57d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57da:	8f 7d       	andi	r24, 0xDF	; 223
    57dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57e0:	08 95       	ret

000057e2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    57e2:	cf 93       	push	r28
    57e4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	fc 01       	movw	r30, r24
    57ea:	e0 5e       	subi	r30, 0xE0	; 224
    57ec:	fb 4f       	sbci	r31, 0xFB	; 251
    57ee:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    57f0:	fc 01       	movw	r30, r24
    57f2:	ec 5c       	subi	r30, 0xCC	; 204
    57f4:	fb 4f       	sbci	r31, 0xFB	; 251
    57f6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    57f8:	88 23       	and	r24, r24
    57fa:	61 f1       	breq	.+88     	; 0x5854 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	88 0f       	add	r24, r24
    5800:	99 1f       	adc	r25, r25
    5802:	fc 01       	movw	r30, r24
    5804:	e4 5a       	subi	r30, 0xA4	; 164
    5806:	fb 4f       	sbci	r31, 0xFB	; 251
    5808:	c5 91       	lpm	r28, Z+
    580a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    580c:	fc 01       	movw	r30, r24
    580e:	ee 5a       	subi	r30, 0xAE	; 174
    5810:	fb 4f       	sbci	r31, 0xFB	; 251
    5812:	a5 91       	lpm	r26, Z+
    5814:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5816:	61 11       	cpse	r22, r1
    5818:	09 c0       	rjmp	.+18     	; 0x582c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    581a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    581c:	f8 94       	cli
		*reg &= ~bit;
    581e:	88 81       	ld	r24, Y
    5820:	20 95       	com	r18
    5822:	82 23       	and	r24, r18
    5824:	88 83       	st	Y, r24
		*out &= ~bit;
    5826:	ec 91       	ld	r30, X
    5828:	2e 23       	and	r18, r30
    582a:	0b c0       	rjmp	.+22     	; 0x5842 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    582c:	62 30       	cpi	r22, 0x02	; 2
    582e:	61 f4       	brne	.+24     	; 0x5848 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5830:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5832:	f8 94       	cli
		*reg &= ~bit;
    5834:	38 81       	ld	r19, Y
    5836:	82 2f       	mov	r24, r18
    5838:	80 95       	com	r24
    583a:	83 23       	and	r24, r19
    583c:	88 83       	st	Y, r24
		*out |= bit;
    583e:	ec 91       	ld	r30, X
    5840:	2e 2b       	or	r18, r30
    5842:	2c 93       	st	X, r18
		SREG = oldSREG;
    5844:	9f bf       	out	0x3f, r25	; 63
    5846:	06 c0       	rjmp	.+12     	; 0x5854 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5848:	8f b7       	in	r24, 0x3f	; 63
                cli();
    584a:	f8 94       	cli
		*reg |= bit;
    584c:	e8 81       	ld	r30, Y
    584e:	2e 2b       	or	r18, r30
    5850:	28 83       	st	Y, r18
		SREG = oldSREG;
    5852:	8f bf       	out	0x3f, r24	; 63
	}
}
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    585a:	1f 93       	push	r17
    585c:	cf 93       	push	r28
    585e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5860:	28 2f       	mov	r18, r24
    5862:	30 e0       	ldi	r19, 0x00	; 0
    5864:	f9 01       	movw	r30, r18
    5866:	e4 5f       	subi	r30, 0xF4	; 244
    5868:	fb 4f       	sbci	r31, 0xFB	; 251
    586a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    586c:	f9 01       	movw	r30, r18
    586e:	e0 5e       	subi	r30, 0xE0	; 224
    5870:	fb 4f       	sbci	r31, 0xFB	; 251
    5872:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5874:	f9 01       	movw	r30, r18
    5876:	ec 5c       	subi	r30, 0xCC	; 204
    5878:	fb 4f       	sbci	r31, 0xFB	; 251
    587a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    587c:	cc 23       	and	r28, r28
    587e:	c1 f0       	breq	.+48     	; 0x58b0 <digitalWrite+0x56>
    5880:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5882:	81 11       	cpse	r24, r1
    5884:	85 df       	rcall	.-246    	; 0x5790 <turnOffPWM>

	out = portOutputRegister(port);
    5886:	ec 2f       	mov	r30, r28
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	ee 0f       	add	r30, r30
    588c:	ff 1f       	adc	r31, r31
    588e:	ee 5a       	subi	r30, 0xAE	; 174
    5890:	fb 4f       	sbci	r31, 0xFB	; 251
    5892:	a5 91       	lpm	r26, Z+
    5894:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5896:	8f b7       	in	r24, 0x3f	; 63
	cli();
    5898:	f8 94       	cli

	if (val == LOW) {
    589a:	11 11       	cpse	r17, r1
    589c:	05 c0       	rjmp	.+10     	; 0x58a8 <digitalWrite+0x4e>
		*out &= ~bit;
    589e:	9c 91       	ld	r25, X
    58a0:	ed 2f       	mov	r30, r29
    58a2:	e0 95       	com	r30
    58a4:	e9 23       	and	r30, r25
    58a6:	02 c0       	rjmp	.+4      	; 0x58ac <digitalWrite+0x52>
	} else {
		*out |= bit;
    58a8:	ec 91       	ld	r30, X
    58aa:	ed 2b       	or	r30, r29
    58ac:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    58ae:	8f bf       	out	0x3f, r24	; 63
}
    58b0:	df 91       	pop	r29
    58b2:	cf 91       	pop	r28
    58b4:	1f 91       	pop	r17
    58b6:	08 95       	ret

000058b8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    58bc:	28 2f       	mov	r18, r24
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	f9 01       	movw	r30, r18
    58c2:	e4 5f       	subi	r30, 0xF4	; 244
    58c4:	fb 4f       	sbci	r31, 0xFB	; 251
    58c6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    58c8:	f9 01       	movw	r30, r18
    58ca:	e0 5e       	subi	r30, 0xE0	; 224
    58cc:	fb 4f       	sbci	r31, 0xFB	; 251
    58ce:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    58d0:	f9 01       	movw	r30, r18
    58d2:	ec 5c       	subi	r30, 0xCC	; 204
    58d4:	fb 4f       	sbci	r31, 0xFB	; 251
    58d6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    58d8:	cc 23       	and	r28, r28
    58da:	89 f0       	breq	.+34     	; 0x58fe <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    58dc:	81 11       	cpse	r24, r1
    58de:	58 df       	rcall	.-336    	; 0x5790 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    58e0:	ec 2f       	mov	r30, r28
    58e2:	f0 e0       	ldi	r31, 0x00	; 0
    58e4:	ee 0f       	add	r30, r30
    58e6:	ff 1f       	adc	r31, r31
    58e8:	e8 5b       	subi	r30, 0xB8	; 184
    58ea:	fb 4f       	sbci	r31, 0xFB	; 251
    58ec:	a5 91       	lpm	r26, Z+
    58ee:	b4 91       	lpm	r27, Z
    58f0:	ec 91       	ld	r30, X
    58f2:	ed 23       	and	r30, r29
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	21 f4       	brne	.+8      	; 0x5902 <digitalRead+0x4a>
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	02 c0       	rjmp	.+4      	; 0x5902 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    58fe:	80 e0       	ldi	r24, 0x00	; 0
    5900:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5902:	df 91       	pop	r29
    5904:	cf 91       	pop	r28
    5906:	08 95       	ret

00005908 <_ZN6StringD1Ev>:

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
	return 0;
}
    5908:	fc 01       	movw	r30, r24
    590a:	80 81       	ld	r24, Z
    590c:	91 81       	ldd	r25, Z+1	; 0x01
    590e:	b3 c3       	rjmp	.+1894   	; 0x6076 <free>

00005910 <_ZN6String10invalidateEv>:
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
    5916:	88 81       	ld	r24, Y
    5918:	99 81       	ldd	r25, Y+1	; 0x01
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	09 f0       	breq	.+2      	; 0x5920 <_ZN6String10invalidateEv+0x10>
    591e:	ab d3       	rcall	.+1878   	; 0x6076 <free>
    5920:	19 82       	std	Y+1, r1	; 0x01
    5922:	18 82       	st	Y, r1
    5924:	1d 82       	std	Y+5, r1	; 0x05
    5926:	1c 82       	std	Y+4, r1	; 0x04
    5928:	1b 82       	std	Y+3, r1	; 0x03
    592a:	1a 82       	std	Y+2, r1	; 0x02
    592c:	df 91       	pop	r29
    592e:	cf 91       	pop	r28
    5930:	08 95       	ret

00005932 <_ZN6String12changeBufferEj>:
    5932:	0f 93       	push	r16
    5934:	1f 93       	push	r17
    5936:	cf 93       	push	r28
    5938:	df 93       	push	r29
    593a:	ec 01       	movw	r28, r24
    593c:	8b 01       	movw	r16, r22
    593e:	6f 5f       	subi	r22, 0xFF	; 255
    5940:	7f 4f       	sbci	r23, 0xFF	; 255
    5942:	88 81       	ld	r24, Y
    5944:	99 81       	ldd	r25, Y+1	; 0x01
    5946:	2f d4       	rcall	.+2142   	; 0x61a6 <realloc>
    5948:	00 97       	sbiw	r24, 0x00	; 0
    594a:	31 f0       	breq	.+12     	; 0x5958 <_ZN6String12changeBufferEj+0x26>
    594c:	99 83       	std	Y+1, r25	; 0x01
    594e:	88 83       	st	Y, r24
    5950:	1b 83       	std	Y+3, r17	; 0x03
    5952:	0a 83       	std	Y+2, r16	; 0x02
    5954:	81 e0       	ldi	r24, 0x01	; 1
    5956:	01 c0       	rjmp	.+2      	; 0x595a <_ZN6String12changeBufferEj+0x28>
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	df 91       	pop	r29
    595c:	cf 91       	pop	r28
    595e:	1f 91       	pop	r17
    5960:	0f 91       	pop	r16
    5962:	08 95       	ret

00005964 <_ZN6String7reserveEj>:
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	ec 01       	movw	r28, r24
    596a:	88 81       	ld	r24, Y
    596c:	99 81       	ldd	r25, Y+1	; 0x01
    596e:	89 2b       	or	r24, r25
    5970:	29 f0       	breq	.+10     	; 0x597c <_ZN6String7reserveEj+0x18>
    5972:	8a 81       	ldd	r24, Y+2	; 0x02
    5974:	9b 81       	ldd	r25, Y+3	; 0x03
    5976:	86 17       	cp	r24, r22
    5978:	97 07       	cpc	r25, r23
    597a:	58 f4       	brcc	.+22     	; 0x5992 <_ZN6String7reserveEj+0x2e>
    597c:	ce 01       	movw	r24, r28
    597e:	d9 df       	rcall	.-78     	; 0x5932 <_ZN6String12changeBufferEj>
    5980:	88 23       	and	r24, r24
    5982:	41 f0       	breq	.+16     	; 0x5994 <_ZN6String7reserveEj+0x30>
    5984:	8c 81       	ldd	r24, Y+4	; 0x04
    5986:	9d 81       	ldd	r25, Y+5	; 0x05
    5988:	89 2b       	or	r24, r25
    598a:	19 f4       	brne	.+6      	; 0x5992 <_ZN6String7reserveEj+0x2e>
    598c:	e8 81       	ld	r30, Y
    598e:	f9 81       	ldd	r31, Y+1	; 0x01
    5990:	10 82       	st	Z, r1
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	df 91       	pop	r29
    5996:	cf 91       	pop	r28
    5998:	08 95       	ret

0000599a <_ZN6String4copyEPKcj>:
    599a:	ef 92       	push	r14
    599c:	ff 92       	push	r15
    599e:	0f 93       	push	r16
    59a0:	1f 93       	push	r17
    59a2:	cf 93       	push	r28
    59a4:	df 93       	push	r29
    59a6:	ec 01       	movw	r28, r24
    59a8:	7b 01       	movw	r14, r22
    59aa:	8a 01       	movw	r16, r20
    59ac:	ba 01       	movw	r22, r20
    59ae:	da df       	rcall	.-76     	; 0x5964 <_ZN6String7reserveEj>
    59b0:	81 11       	cpse	r24, r1
    59b2:	03 c0       	rjmp	.+6      	; 0x59ba <_ZN6String4copyEPKcj+0x20>
    59b4:	ce 01       	movw	r24, r28
    59b6:	ac df       	rcall	.-168    	; 0x5910 <_ZN6String10invalidateEv>
    59b8:	06 c0       	rjmp	.+12     	; 0x59c6 <_ZN6String4copyEPKcj+0x2c>
    59ba:	1d 83       	std	Y+5, r17	; 0x05
    59bc:	0c 83       	std	Y+4, r16	; 0x04
    59be:	b7 01       	movw	r22, r14
    59c0:	88 81       	ld	r24, Y
    59c2:	99 81       	ldd	r25, Y+1	; 0x01
    59c4:	42 d6       	rcall	.+3204   	; 0x664a <strcpy>
    59c6:	ce 01       	movw	r24, r28
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	1f 91       	pop	r17
    59ce:	0f 91       	pop	r16
    59d0:	ff 90       	pop	r15
    59d2:	ef 90       	pop	r14
    59d4:	08 95       	ret

000059d6 <_ZN6StringC1EPKc>:
    59d6:	fc 01       	movw	r30, r24
    59d8:	11 82       	std	Z+1, r1	; 0x01
    59da:	10 82       	st	Z, r1
    59dc:	13 82       	std	Z+3, r1	; 0x03
    59de:	12 82       	std	Z+2, r1	; 0x02
    59e0:	15 82       	std	Z+5, r1	; 0x05
    59e2:	14 82       	std	Z+4, r1	; 0x04
    59e4:	61 15       	cp	r22, r1
    59e6:	71 05       	cpc	r23, r1
    59e8:	49 f0       	breq	.+18     	; 0x59fc <_ZN6StringC1EPKc+0x26>
    59ea:	fb 01       	movw	r30, r22
    59ec:	01 90       	ld	r0, Z+
    59ee:	00 20       	and	r0, r0
    59f0:	e9 f7       	brne	.-6      	; 0x59ec <_ZN6StringC1EPKc+0x16>
    59f2:	31 97       	sbiw	r30, 0x01	; 1
    59f4:	af 01       	movw	r20, r30
    59f6:	46 1b       	sub	r20, r22
    59f8:	57 0b       	sbc	r21, r23
    59fa:	cf cf       	rjmp	.-98     	; 0x599a <_ZN6String4copyEPKcj>
    59fc:	08 95       	ret

000059fe <_ZN6StringaSERKS_>:
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	ec 01       	movw	r28, r24
    5a04:	fb 01       	movw	r30, r22
    5a06:	86 17       	cp	r24, r22
    5a08:	97 07       	cpc	r25, r23
    5a0a:	51 f0       	breq	.+20     	; 0x5a20 <_ZN6StringaSERKS_+0x22>
    5a0c:	60 81       	ld	r22, Z
    5a0e:	71 81       	ldd	r23, Z+1	; 0x01
    5a10:	61 15       	cp	r22, r1
    5a12:	71 05       	cpc	r23, r1
    5a14:	21 f0       	breq	.+8      	; 0x5a1e <_ZN6StringaSERKS_+0x20>
    5a16:	44 81       	ldd	r20, Z+4	; 0x04
    5a18:	55 81       	ldd	r21, Z+5	; 0x05
    5a1a:	bf df       	rcall	.-130    	; 0x599a <_ZN6String4copyEPKcj>
    5a1c:	01 c0       	rjmp	.+2      	; 0x5a20 <_ZN6StringaSERKS_+0x22>
    5a1e:	78 df       	rcall	.-272    	; 0x5910 <_ZN6String10invalidateEv>
    5a20:	ce 01       	movw	r24, r28
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	08 95       	ret

00005a28 <_ZN6StringC1ERKS_>:
    5a28:	fc 01       	movw	r30, r24
    5a2a:	11 82       	std	Z+1, r1	; 0x01
    5a2c:	10 82       	st	Z, r1
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	12 82       	std	Z+2, r1	; 0x02
    5a32:	15 82       	std	Z+5, r1	; 0x05
    5a34:	14 82       	std	Z+4, r1	; 0x04
    5a36:	e3 cf       	rjmp	.-58     	; 0x59fe <_ZN6StringaSERKS_>

00005a38 <_ZN6StringaSEPKc>:
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	ec 01       	movw	r28, r24
    5a3e:	61 15       	cp	r22, r1
    5a40:	71 05       	cpc	r23, r1
    5a42:	51 f0       	breq	.+20     	; 0x5a58 <_ZN6StringaSEPKc+0x20>
    5a44:	fb 01       	movw	r30, r22
    5a46:	01 90       	ld	r0, Z+
    5a48:	00 20       	and	r0, r0
    5a4a:	e9 f7       	brne	.-6      	; 0x5a46 <_ZN6StringaSEPKc+0xe>
    5a4c:	31 97       	sbiw	r30, 0x01	; 1
    5a4e:	af 01       	movw	r20, r30
    5a50:	46 1b       	sub	r20, r22
    5a52:	57 0b       	sbc	r21, r23
    5a54:	a2 df       	rcall	.-188    	; 0x599a <_ZN6String4copyEPKcj>
    5a56:	01 c0       	rjmp	.+2      	; 0x5a5a <_ZN6StringaSEPKc+0x22>
    5a58:	5b df       	rcall	.-330    	; 0x5910 <_ZN6String10invalidateEv>
    5a5a:	ce 01       	movw	r24, r28
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	08 95       	ret

00005a62 <_ZN6StringC1Efh>:
    5a62:	ef 92       	push	r14
    5a64:	ff 92       	push	r15
    5a66:	0f 93       	push	r16
    5a68:	1f 93       	push	r17
    5a6a:	cf 93       	push	r28
    5a6c:	df 93       	push	r29
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	a1 97       	sbiw	r28, 0x21	; 33
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	f8 94       	cli
    5a78:	de bf       	out	0x3e, r29	; 62
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	cd bf       	out	0x3d, r28	; 61
    5a7e:	7c 01       	movw	r14, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	ba 01       	movw	r22, r20
    5a84:	f7 01       	movw	r30, r14
    5a86:	11 82       	std	Z+1, r1	; 0x01
    5a88:	10 82       	st	Z, r1
    5a8a:	13 82       	std	Z+3, r1	; 0x03
    5a8c:	12 82       	std	Z+2, r1	; 0x02
    5a8e:	15 82       	std	Z+5, r1	; 0x05
    5a90:	14 82       	std	Z+4, r1	; 0x04
    5a92:	42 e0       	ldi	r20, 0x02	; 2
    5a94:	42 0f       	add	r20, r18
    5a96:	8e 01       	movw	r16, r28
    5a98:	0f 5f       	subi	r16, 0xFF	; 255
    5a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a9c:	38 d2       	rcall	.+1136   	; 0x5f0e <dtostrf>
    5a9e:	bc 01       	movw	r22, r24
    5aa0:	c7 01       	movw	r24, r14
    5aa2:	ca df       	rcall	.-108    	; 0x5a38 <_ZN6StringaSEPKc>
    5aa4:	a1 96       	adiw	r28, 0x21	; 33
    5aa6:	0f b6       	in	r0, 0x3f	; 63
    5aa8:	f8 94       	cli
    5aaa:	de bf       	out	0x3e, r29	; 62
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	cd bf       	out	0x3d, r28	; 61
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	ff 90       	pop	r15
    5aba:	ef 90       	pop	r14
    5abc:	08 95       	ret

00005abe <_ZN6StringC1Edh>:
    5abe:	ef 92       	push	r14
    5ac0:	ff 92       	push	r15
    5ac2:	0f 93       	push	r16
    5ac4:	1f 93       	push	r17
    5ac6:	cf 93       	push	r28
    5ac8:	df 93       	push	r29
    5aca:	cd b7       	in	r28, 0x3d	; 61
    5acc:	de b7       	in	r29, 0x3e	; 62
    5ace:	a1 97       	sbiw	r28, 0x21	; 33
    5ad0:	0f b6       	in	r0, 0x3f	; 63
    5ad2:	f8 94       	cli
    5ad4:	de bf       	out	0x3e, r29	; 62
    5ad6:	0f be       	out	0x3f, r0	; 63
    5ad8:	cd bf       	out	0x3d, r28	; 61
    5ada:	7c 01       	movw	r14, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	ba 01       	movw	r22, r20
    5ae0:	f7 01       	movw	r30, r14
    5ae2:	11 82       	std	Z+1, r1	; 0x01
    5ae4:	10 82       	st	Z, r1
    5ae6:	13 82       	std	Z+3, r1	; 0x03
    5ae8:	12 82       	std	Z+2, r1	; 0x02
    5aea:	15 82       	std	Z+5, r1	; 0x05
    5aec:	14 82       	std	Z+4, r1	; 0x04
    5aee:	42 e0       	ldi	r20, 0x02	; 2
    5af0:	42 0f       	add	r20, r18
    5af2:	8e 01       	movw	r16, r28
    5af4:	0f 5f       	subi	r16, 0xFF	; 255
    5af6:	1f 4f       	sbci	r17, 0xFF	; 255
    5af8:	0a d2       	rcall	.+1044   	; 0x5f0e <dtostrf>
    5afa:	bc 01       	movw	r22, r24
    5afc:	c7 01       	movw	r24, r14
    5afe:	9c df       	rcall	.-200    	; 0x5a38 <_ZN6StringaSEPKc>
    5b00:	a1 96       	adiw	r28, 0x21	; 33
    5b02:	0f b6       	in	r0, 0x3f	; 63
    5b04:	f8 94       	cli
    5b06:	de bf       	out	0x3e, r29	; 62
    5b08:	0f be       	out	0x3f, r0	; 63
    5b0a:	cd bf       	out	0x3d, r28	; 61
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	ff 90       	pop	r15
    5b16:	ef 90       	pop	r14
    5b18:	08 95       	ret

00005b1a <_ZN6String6concatEPKcj>:
    5b1a:	ef 92       	push	r14
    5b1c:	ff 92       	push	r15
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	fc 01       	movw	r30, r24
    5b28:	24 81       	ldd	r18, Z+4	; 0x04
    5b2a:	35 81       	ldd	r19, Z+5	; 0x05
    5b2c:	61 15       	cp	r22, r1
    5b2e:	71 05       	cpc	r23, r1
    5b30:	11 f4       	brne	.+4      	; 0x5b36 <_ZN6String6concatEPKcj+0x1c>
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	17 c0       	rjmp	.+46     	; 0x5b64 <_ZN6String6concatEPKcj+0x4a>
    5b36:	41 15       	cp	r20, r1
    5b38:	51 05       	cpc	r21, r1
    5b3a:	99 f0       	breq	.+38     	; 0x5b62 <_ZN6String6concatEPKcj+0x48>
    5b3c:	7b 01       	movw	r14, r22
    5b3e:	ec 01       	movw	r28, r24
    5b40:	8a 01       	movw	r16, r20
    5b42:	02 0f       	add	r16, r18
    5b44:	13 1f       	adc	r17, r19
    5b46:	b8 01       	movw	r22, r16
    5b48:	0d df       	rcall	.-486    	; 0x5964 <_ZN6String7reserveEj>
    5b4a:	88 23       	and	r24, r24
    5b4c:	91 f3       	breq	.-28     	; 0x5b32 <_ZN6String6concatEPKcj+0x18>
    5b4e:	28 81       	ld	r18, Y
    5b50:	39 81       	ldd	r19, Y+1	; 0x01
    5b52:	8c 81       	ldd	r24, Y+4	; 0x04
    5b54:	9d 81       	ldd	r25, Y+5	; 0x05
    5b56:	b7 01       	movw	r22, r14
    5b58:	82 0f       	add	r24, r18
    5b5a:	93 1f       	adc	r25, r19
    5b5c:	76 d5       	rcall	.+2796   	; 0x664a <strcpy>
    5b5e:	1d 83       	std	Y+5, r17	; 0x05
    5b60:	0c 83       	std	Y+4, r16	; 0x04
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	1f 91       	pop	r17
    5b6a:	0f 91       	pop	r16
    5b6c:	ff 90       	pop	r15
    5b6e:	ef 90       	pop	r14
    5b70:	08 95       	ret

00005b72 <_ZN6String6concatEPKc>:
    5b72:	61 15       	cp	r22, r1
    5b74:	71 05       	cpc	r23, r1
    5b76:	49 f0       	breq	.+18     	; 0x5b8a <_ZN6String6concatEPKc+0x18>
    5b78:	fb 01       	movw	r30, r22
    5b7a:	01 90       	ld	r0, Z+
    5b7c:	00 20       	and	r0, r0
    5b7e:	e9 f7       	brne	.-6      	; 0x5b7a <_ZN6String6concatEPKc+0x8>
    5b80:	31 97       	sbiw	r30, 0x01	; 1
    5b82:	af 01       	movw	r20, r30
    5b84:	46 1b       	sub	r20, r22
    5b86:	57 0b       	sbc	r21, r23
    5b88:	c8 cf       	rjmp	.-112    	; 0x5b1a <_ZN6String6concatEPKcj>
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	08 95       	ret

00005b8e <_ZN6String6concatEc>:
    5b8e:	cf 93       	push	r28
    5b90:	df 93       	push	r29
    5b92:	00 d0       	rcall	.+0      	; 0x5b94 <_ZN6String6concatEc+0x6>
    5b94:	cd b7       	in	r28, 0x3d	; 61
    5b96:	de b7       	in	r29, 0x3e	; 62
    5b98:	69 83       	std	Y+1, r22	; 0x01
    5b9a:	1a 82       	std	Y+2, r1	; 0x02
    5b9c:	41 e0       	ldi	r20, 0x01	; 1
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	be 01       	movw	r22, r28
    5ba2:	6f 5f       	subi	r22, 0xFF	; 255
    5ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba6:	b9 df       	rcall	.-142    	; 0x5b1a <_ZN6String6concatEPKcj>
    5ba8:	0f 90       	pop	r0
    5baa:	0f 90       	pop	r0
    5bac:	df 91       	pop	r29
    5bae:	cf 91       	pop	r28
    5bb0:	08 95       	ret

00005bb2 <_ZplRK15StringSumHelperRK6String>:
    5bb2:	cf 93       	push	r28
    5bb4:	df 93       	push	r29
    5bb6:	ec 01       	movw	r28, r24
    5bb8:	fb 01       	movw	r30, r22
    5bba:	44 81       	ldd	r20, Z+4	; 0x04
    5bbc:	55 81       	ldd	r21, Z+5	; 0x05
    5bbe:	60 81       	ld	r22, Z
    5bc0:	71 81       	ldd	r23, Z+1	; 0x01
    5bc2:	ab df       	rcall	.-170    	; 0x5b1a <_ZN6String6concatEPKcj>
    5bc4:	81 11       	cpse	r24, r1
    5bc6:	02 c0       	rjmp	.+4      	; 0x5bcc <_ZplRK15StringSumHelperRK6String+0x1a>
    5bc8:	ce 01       	movw	r24, r28
    5bca:	a2 de       	rcall	.-700    	; 0x5910 <_ZN6String10invalidateEv>
    5bcc:	ce 01       	movw	r24, r28
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	08 95       	ret

00005bd4 <_ZNK6String6equalsEPKc>:
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	24 81       	ldd	r18, Z+4	; 0x04
    5bd8:	35 81       	ldd	r19, Z+5	; 0x05
    5bda:	23 2b       	or	r18, r19
    5bdc:	31 f4       	brne	.+12     	; 0x5bea <_ZNK6String6equalsEPKc+0x16>
    5bde:	21 e0       	ldi	r18, 0x01	; 1
    5be0:	61 15       	cp	r22, r1
    5be2:	71 05       	cpc	r23, r1
    5be4:	99 f0       	breq	.+38     	; 0x5c0c <_ZNK6String6equalsEPKc+0x38>
    5be6:	fb 01       	movw	r30, r22
    5be8:	08 c0       	rjmp	.+16     	; 0x5bfa <_ZNK6String6equalsEPKc+0x26>
    5bea:	fc 01       	movw	r30, r24
    5bec:	80 81       	ld	r24, Z
    5bee:	91 81       	ldd	r25, Z+1	; 0x01
    5bf0:	61 15       	cp	r22, r1
    5bf2:	71 05       	cpc	r23, r1
    5bf4:	31 f4       	brne	.+12     	; 0x5c02 <_ZNK6String6equalsEPKc+0x2e>
    5bf6:	21 e0       	ldi	r18, 0x01	; 1
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	80 81       	ld	r24, Z
    5bfc:	88 23       	and	r24, r24
    5bfe:	31 f0       	breq	.+12     	; 0x5c0c <_ZNK6String6equalsEPKc+0x38>
    5c00:	04 c0       	rjmp	.+8      	; 0x5c0a <_ZNK6String6equalsEPKc+0x36>
    5c02:	1a d5       	rcall	.+2612   	; 0x6638 <strcmp>
    5c04:	21 e0       	ldi	r18, 0x01	; 1
    5c06:	89 2b       	or	r24, r25
    5c08:	09 f0       	breq	.+2      	; 0x5c0c <_ZNK6String6equalsEPKc+0x38>
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	82 2f       	mov	r24, r18
    5c0e:	08 95       	ret

00005c10 <_ZNK6String10startsWithERKS_j>:
    5c10:	db 01       	movw	r26, r22
    5c12:	14 96       	adiw	r26, 0x04	; 4
    5c14:	ed 91       	ld	r30, X+
    5c16:	fc 91       	ld	r31, X
    5c18:	15 97       	sbiw	r26, 0x05	; 5
    5c1a:	dc 01       	movw	r26, r24
    5c1c:	14 96       	adiw	r26, 0x04	; 4
    5c1e:	2d 91       	ld	r18, X+
    5c20:	3c 91       	ld	r19, X
    5c22:	15 97       	sbiw	r26, 0x05	; 5
    5c24:	2e 1b       	sub	r18, r30
    5c26:	3f 0b       	sbc	r19, r31
    5c28:	24 17       	cp	r18, r20
    5c2a:	35 07       	cpc	r19, r21
    5c2c:	98 f0       	brcs	.+38     	; 0x5c54 <_ZNK6String10startsWithERKS_j+0x44>
    5c2e:	2d 91       	ld	r18, X+
    5c30:	3c 91       	ld	r19, X
    5c32:	21 15       	cp	r18, r1
    5c34:	31 05       	cpc	r19, r1
    5c36:	71 f0       	breq	.+28     	; 0x5c54 <_ZNK6String10startsWithERKS_j+0x44>
    5c38:	db 01       	movw	r26, r22
    5c3a:	6d 91       	ld	r22, X+
    5c3c:	7c 91       	ld	r23, X
    5c3e:	61 15       	cp	r22, r1
    5c40:	71 05       	cpc	r23, r1
    5c42:	41 f0       	breq	.+16     	; 0x5c54 <_ZNK6String10startsWithERKS_j+0x44>
    5c44:	ca 01       	movw	r24, r20
    5c46:	af 01       	movw	r20, r30
    5c48:	82 0f       	add	r24, r18
    5c4a:	93 1f       	adc	r25, r19
    5c4c:	05 d5       	rcall	.+2570   	; 0x6658 <strncmp>
    5c4e:	21 e0       	ldi	r18, 0x01	; 1
    5c50:	89 2b       	or	r24, r25
    5c52:	09 f0       	breq	.+2      	; 0x5c56 <_ZNK6String10startsWithERKS_j+0x46>
    5c54:	20 e0       	ldi	r18, 0x00	; 0
    5c56:	82 2f       	mov	r24, r18
    5c58:	08 95       	ret

00005c5a <_ZNK6String10startsWithERKS_>:
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	44 81       	ldd	r20, Z+4	; 0x04
    5c5e:	55 81       	ldd	r21, Z+5	; 0x05
    5c60:	fb 01       	movw	r30, r22
    5c62:	24 81       	ldd	r18, Z+4	; 0x04
    5c64:	35 81       	ldd	r19, Z+5	; 0x05
    5c66:	42 17       	cp	r20, r18
    5c68:	53 07       	cpc	r21, r19
    5c6a:	18 f0       	brcs	.+6      	; 0x5c72 <_ZNK6String10startsWithERKS_+0x18>
    5c6c:	40 e0       	ldi	r20, 0x00	; 0
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	cf cf       	rjmp	.-98     	; 0x5c10 <_ZNK6String10startsWithERKS_j>
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	08 95       	ret

00005c76 <_ZNK6StringixEj>:
    5c76:	fc 01       	movw	r30, r24
    5c78:	24 81       	ldd	r18, Z+4	; 0x04
    5c7a:	35 81       	ldd	r19, Z+5	; 0x05
    5c7c:	62 17       	cp	r22, r18
    5c7e:	73 07       	cpc	r23, r19
    5c80:	48 f4       	brcc	.+18     	; 0x5c94 <_ZNK6StringixEj+0x1e>
    5c82:	80 81       	ld	r24, Z
    5c84:	91 81       	ldd	r25, Z+1	; 0x01
    5c86:	00 97       	sbiw	r24, 0x00	; 0
    5c88:	29 f0       	breq	.+10     	; 0x5c94 <_ZNK6StringixEj+0x1e>
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	e6 0f       	add	r30, r22
    5c8e:	f7 1f       	adc	r31, r23
    5c90:	80 81       	ld	r24, Z
    5c92:	08 95       	ret
    5c94:	80 e0       	ldi	r24, 0x00	; 0
    5c96:	08 95       	ret

00005c98 <_ZNK6String6charAtEj>:
    5c98:	ee cf       	rjmp	.-36     	; 0x5c76 <_ZNK6StringixEj>

00005c9a <_ZNK6String9substringEjj>:
    5c9a:	bf 92       	push	r11
    5c9c:	cf 92       	push	r12
    5c9e:	df 92       	push	r13
    5ca0:	ef 92       	push	r14
    5ca2:	ff 92       	push	r15
    5ca4:	0f 93       	push	r16
    5ca6:	1f 93       	push	r17
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	7c 01       	movw	r14, r24
    5cae:	6b 01       	movw	r12, r22
    5cb0:	8a 01       	movw	r16, r20
    5cb2:	e9 01       	movw	r28, r18
    5cb4:	24 17       	cp	r18, r20
    5cb6:	35 07       	cpc	r19, r21
    5cb8:	20 f4       	brcc	.+8      	; 0x5cc2 <_ZNK6String9substringEjj+0x28>
    5cba:	81 2f       	mov	r24, r17
    5cbc:	89 01       	movw	r16, r18
    5cbe:	c4 2f       	mov	r28, r20
    5cc0:	d8 2f       	mov	r29, r24
    5cc2:	6f ec       	ldi	r22, 0xCF	; 207
    5cc4:	71 e0       	ldi	r23, 0x01	; 1
    5cc6:	c7 01       	movw	r24, r14
    5cc8:	86 de       	rcall	.-756    	; 0x59d6 <_ZN6StringC1EPKc>
    5cca:	d6 01       	movw	r26, r12
    5ccc:	14 96       	adiw	r26, 0x04	; 4
    5cce:	8d 91       	ld	r24, X+
    5cd0:	9c 91       	ld	r25, X
    5cd2:	15 97       	sbiw	r26, 0x05	; 5
    5cd4:	08 17       	cp	r16, r24
    5cd6:	19 07       	cpc	r17, r25
    5cd8:	c8 f4       	brcc	.+50     	; 0x5d0c <_ZNK6String9substringEjj+0x72>
    5cda:	8c 17       	cp	r24, r28
    5cdc:	9d 07       	cpc	r25, r29
    5cde:	08 f4       	brcc	.+2      	; 0x5ce2 <_ZNK6String9substringEjj+0x48>
    5ce0:	ec 01       	movw	r28, r24
    5ce2:	d6 01       	movw	r26, r12
    5ce4:	ed 91       	ld	r30, X+
    5ce6:	fc 91       	ld	r31, X
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
    5cea:	ec 0f       	add	r30, r28
    5cec:	fd 1f       	adc	r31, r29
    5cee:	b0 80       	ld	r11, Z
    5cf0:	10 82       	st	Z, r1
    5cf2:	4d 91       	ld	r20, X+
    5cf4:	5c 91       	ld	r21, X
    5cf6:	ba 01       	movw	r22, r20
    5cf8:	60 0f       	add	r22, r16
    5cfa:	71 1f       	adc	r23, r17
    5cfc:	c7 01       	movw	r24, r14
    5cfe:	9c de       	rcall	.-712    	; 0x5a38 <_ZN6StringaSEPKc>
    5d00:	d6 01       	movw	r26, r12
    5d02:	ed 91       	ld	r30, X+
    5d04:	fc 91       	ld	r31, X
    5d06:	ec 0f       	add	r30, r28
    5d08:	fd 1f       	adc	r31, r29
    5d0a:	b0 82       	st	Z, r11
    5d0c:	c7 01       	movw	r24, r14
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	1f 91       	pop	r17
    5d14:	0f 91       	pop	r16
    5d16:	ff 90       	pop	r15
    5d18:	ef 90       	pop	r14
    5d1a:	df 90       	pop	r13
    5d1c:	cf 90       	pop	r12
    5d1e:	bf 90       	pop	r11
    5d20:	08 95       	ret

00005d22 <_ZN6String4trimEv>:
    5d22:	af 92       	push	r10
    5d24:	bf 92       	push	r11
    5d26:	cf 92       	push	r12
    5d28:	df 92       	push	r13
    5d2a:	ef 92       	push	r14
    5d2c:	ff 92       	push	r15
    5d2e:	0f 93       	push	r16
    5d30:	1f 93       	push	r17
    5d32:	cf 93       	push	r28
    5d34:	df 93       	push	r29
    5d36:	dc 01       	movw	r26, r24
    5d38:	cd 90       	ld	r12, X+
    5d3a:	dc 90       	ld	r13, X
    5d3c:	11 97       	sbiw	r26, 0x01	; 1
    5d3e:	c1 14       	cp	r12, r1
    5d40:	d1 04       	cpc	r13, r1
    5d42:	d9 f1       	breq	.+118    	; 0x5dba <_ZN6String4trimEv+0x98>
    5d44:	14 96       	adiw	r26, 0x04	; 4
    5d46:	cd 91       	ld	r28, X+
    5d48:	dc 91       	ld	r29, X
    5d4a:	15 97       	sbiw	r26, 0x05	; 5
    5d4c:	20 97       	sbiw	r28, 0x00	; 0
    5d4e:	a9 f1       	breq	.+106    	; 0x5dba <_ZN6String4trimEv+0x98>
    5d50:	8c 01       	movw	r16, r24
    5d52:	56 01       	movw	r10, r12
    5d54:	75 01       	movw	r14, r10
    5d56:	bf ef       	ldi	r27, 0xFF	; 255
    5d58:	ab 1a       	sub	r10, r27
    5d5a:	bb 0a       	sbc	r11, r27
    5d5c:	f7 01       	movw	r30, r14
    5d5e:	80 81       	ld	r24, Z
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	41 d4       	rcall	.+2178   	; 0x65e6 <isspace>
    5d64:	89 2b       	or	r24, r25
    5d66:	b1 f7       	brne	.-20     	; 0x5d54 <_ZN6String4trimEv+0x32>
    5d68:	21 97       	sbiw	r28, 0x01	; 1
    5d6a:	cc 0d       	add	r28, r12
    5d6c:	dd 1d       	adc	r29, r13
    5d6e:	88 81       	ld	r24, Y
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	39 d4       	rcall	.+2162   	; 0x65e6 <isspace>
    5d74:	89 2b       	or	r24, r25
    5d76:	89 f4       	brne	.+34     	; 0x5d9a <_ZN6String4trimEv+0x78>
    5d78:	ae 01       	movw	r20, r28
    5d7a:	4f 5f       	subi	r20, 0xFF	; 255
    5d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d7e:	4e 19       	sub	r20, r14
    5d80:	5f 09       	sbc	r21, r15
    5d82:	d8 01       	movw	r26, r16
    5d84:	15 96       	adiw	r26, 0x05	; 5
    5d86:	5c 93       	st	X, r21
    5d88:	4e 93       	st	-X, r20
    5d8a:	14 97       	sbiw	r26, 0x04	; 4
    5d8c:	ce 14       	cp	r12, r14
    5d8e:	df 04       	cpc	r13, r15
    5d90:	48 f4       	brcc	.+18     	; 0x5da4 <_ZN6String4trimEv+0x82>
    5d92:	b7 01       	movw	r22, r14
    5d94:	c6 01       	movw	r24, r12
    5d96:	47 d4       	rcall	.+2190   	; 0x6626 <memcpy>
    5d98:	05 c0       	rjmp	.+10     	; 0x5da4 <_ZN6String4trimEv+0x82>
    5d9a:	ce 15       	cp	r28, r14
    5d9c:	df 05       	cpc	r29, r15
    5d9e:	60 f3       	brcs	.-40     	; 0x5d78 <_ZN6String4trimEv+0x56>
    5da0:	21 97       	sbiw	r28, 0x01	; 1
    5da2:	e5 cf       	rjmp	.-54     	; 0x5d6e <_ZN6String4trimEv+0x4c>
    5da4:	d8 01       	movw	r26, r16
    5da6:	ed 91       	ld	r30, X+
    5da8:	fc 91       	ld	r31, X
    5daa:	11 97       	sbiw	r26, 0x01	; 1
    5dac:	14 96       	adiw	r26, 0x04	; 4
    5dae:	8d 91       	ld	r24, X+
    5db0:	9c 91       	ld	r25, X
    5db2:	15 97       	sbiw	r26, 0x05	; 5
    5db4:	e8 0f       	add	r30, r24
    5db6:	f9 1f       	adc	r31, r25
    5db8:	10 82       	st	Z, r1
    5dba:	df 91       	pop	r29
    5dbc:	cf 91       	pop	r28
    5dbe:	1f 91       	pop	r17
    5dc0:	0f 91       	pop	r16
    5dc2:	ff 90       	pop	r15
    5dc4:	ef 90       	pop	r14
    5dc6:	df 90       	pop	r13
    5dc8:	cf 90       	pop	r12
    5dca:	bf 90       	pop	r11
    5dcc:	af 90       	pop	r10
    5dce:	08 95       	ret

00005dd0 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    5dd0:	fc 01       	movw	r30, r24
    5dd2:	80 81       	ld	r24, Z
    5dd4:	91 81       	ldd	r25, Z+1	; 0x01
    5dd6:	00 97       	sbiw	r24, 0x00	; 0
    5dd8:	09 f0       	breq	.+2      	; 0x5ddc <_ZNK6String7toFloatEv+0xc>
    5dda:	02 c4       	rjmp	.+2052   	; 0x65e0 <atof>
	return 0;
}
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	70 e0       	ldi	r23, 0x00	; 0
    5de0:	cb 01       	movw	r24, r22
    5de2:	08 95       	ret

00005de4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5de4:	08 95       	ret

00005de6 <__udivmodsi4>:
    5de6:	a1 e2       	ldi	r26, 0x21	; 33
    5de8:	1a 2e       	mov	r1, r26
    5dea:	aa 1b       	sub	r26, r26
    5dec:	bb 1b       	sub	r27, r27
    5dee:	fd 01       	movw	r30, r26
    5df0:	0d c0       	rjmp	.+26     	; 0x5e0c <__udivmodsi4_ep>

00005df2 <__udivmodsi4_loop>:
    5df2:	aa 1f       	adc	r26, r26
    5df4:	bb 1f       	adc	r27, r27
    5df6:	ee 1f       	adc	r30, r30
    5df8:	ff 1f       	adc	r31, r31
    5dfa:	a2 17       	cp	r26, r18
    5dfc:	b3 07       	cpc	r27, r19
    5dfe:	e4 07       	cpc	r30, r20
    5e00:	f5 07       	cpc	r31, r21
    5e02:	20 f0       	brcs	.+8      	; 0x5e0c <__udivmodsi4_ep>
    5e04:	a2 1b       	sub	r26, r18
    5e06:	b3 0b       	sbc	r27, r19
    5e08:	e4 0b       	sbc	r30, r20
    5e0a:	f5 0b       	sbc	r31, r21

00005e0c <__udivmodsi4_ep>:
    5e0c:	66 1f       	adc	r22, r22
    5e0e:	77 1f       	adc	r23, r23
    5e10:	88 1f       	adc	r24, r24
    5e12:	99 1f       	adc	r25, r25
    5e14:	1a 94       	dec	r1
    5e16:	69 f7       	brne	.-38     	; 0x5df2 <__udivmodsi4_loop>
    5e18:	60 95       	com	r22
    5e1a:	70 95       	com	r23
    5e1c:	80 95       	com	r24
    5e1e:	90 95       	com	r25
    5e20:	9b 01       	movw	r18, r22
    5e22:	ac 01       	movw	r20, r24
    5e24:	bd 01       	movw	r22, r26
    5e26:	cf 01       	movw	r24, r30
    5e28:	08 95       	ret

00005e2a <__divmodsi4>:
    5e2a:	05 2e       	mov	r0, r21
    5e2c:	97 fb       	bst	r25, 7
    5e2e:	16 f4       	brtc	.+4      	; 0x5e34 <__divmodsi4+0xa>
    5e30:	00 94       	com	r0
    5e32:	0f d0       	rcall	.+30     	; 0x5e52 <__negsi2>
    5e34:	57 fd       	sbrc	r21, 7
    5e36:	05 d0       	rcall	.+10     	; 0x5e42 <__divmodsi4_neg2>
    5e38:	d6 df       	rcall	.-84     	; 0x5de6 <__udivmodsi4>
    5e3a:	07 fc       	sbrc	r0, 7
    5e3c:	02 d0       	rcall	.+4      	; 0x5e42 <__divmodsi4_neg2>
    5e3e:	46 f4       	brtc	.+16     	; 0x5e50 <__divmodsi4_exit>
    5e40:	08 c0       	rjmp	.+16     	; 0x5e52 <__negsi2>

00005e42 <__divmodsi4_neg2>:
    5e42:	50 95       	com	r21
    5e44:	40 95       	com	r20
    5e46:	30 95       	com	r19
    5e48:	21 95       	neg	r18
    5e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    5e4e:	5f 4f       	sbci	r21, 0xFF	; 255

00005e50 <__divmodsi4_exit>:
    5e50:	08 95       	ret

00005e52 <__negsi2>:
    5e52:	90 95       	com	r25
    5e54:	80 95       	com	r24
    5e56:	70 95       	com	r23
    5e58:	61 95       	neg	r22
    5e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e60:	08 95       	ret

00005e62 <__tablejump2__>:
    5e62:	ee 0f       	add	r30, r30
    5e64:	ff 1f       	adc	r31, r31
    5e66:	05 90       	lpm	r0, Z+
    5e68:	f4 91       	lpm	r31, Z
    5e6a:	e0 2d       	mov	r30, r0
    5e6c:	09 94       	ijmp

00005e6e <__muluhisi3>:
    5e6e:	40 d0       	rcall	.+128    	; 0x5ef0 <__umulhisi3>
    5e70:	a5 9f       	mul	r26, r21
    5e72:	90 0d       	add	r25, r0
    5e74:	b4 9f       	mul	r27, r20
    5e76:	90 0d       	add	r25, r0
    5e78:	a4 9f       	mul	r26, r20
    5e7a:	80 0d       	add	r24, r0
    5e7c:	91 1d       	adc	r25, r1
    5e7e:	11 24       	eor	r1, r1
    5e80:	08 95       	ret

00005e82 <__prologue_saves__>:
    5e82:	2f 92       	push	r2
    5e84:	3f 92       	push	r3
    5e86:	4f 92       	push	r4
    5e88:	5f 92       	push	r5
    5e8a:	6f 92       	push	r6
    5e8c:	7f 92       	push	r7
    5e8e:	8f 92       	push	r8
    5e90:	9f 92       	push	r9
    5e92:	af 92       	push	r10
    5e94:	bf 92       	push	r11
    5e96:	cf 92       	push	r12
    5e98:	df 92       	push	r13
    5e9a:	ef 92       	push	r14
    5e9c:	ff 92       	push	r15
    5e9e:	0f 93       	push	r16
    5ea0:	1f 93       	push	r17
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	cd b7       	in	r28, 0x3d	; 61
    5ea8:	de b7       	in	r29, 0x3e	; 62
    5eaa:	ca 1b       	sub	r28, r26
    5eac:	db 0b       	sbc	r29, r27
    5eae:	0f b6       	in	r0, 0x3f	; 63
    5eb0:	f8 94       	cli
    5eb2:	de bf       	out	0x3e, r29	; 62
    5eb4:	0f be       	out	0x3f, r0	; 63
    5eb6:	cd bf       	out	0x3d, r28	; 61
    5eb8:	09 94       	ijmp

00005eba <__epilogue_restores__>:
    5eba:	2a 88       	ldd	r2, Y+18	; 0x12
    5ebc:	39 88       	ldd	r3, Y+17	; 0x11
    5ebe:	48 88       	ldd	r4, Y+16	; 0x10
    5ec0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ec2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ec4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ec6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ec8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5eca:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ecc:	b9 84       	ldd	r11, Y+9	; 0x09
    5ece:	c8 84       	ldd	r12, Y+8	; 0x08
    5ed0:	df 80       	ldd	r13, Y+7	; 0x07
    5ed2:	ee 80       	ldd	r14, Y+6	; 0x06
    5ed4:	fd 80       	ldd	r15, Y+5	; 0x05
    5ed6:	0c 81       	ldd	r16, Y+4	; 0x04
    5ed8:	1b 81       	ldd	r17, Y+3	; 0x03
    5eda:	aa 81       	ldd	r26, Y+2	; 0x02
    5edc:	b9 81       	ldd	r27, Y+1	; 0x01
    5ede:	ce 0f       	add	r28, r30
    5ee0:	d1 1d       	adc	r29, r1
    5ee2:	0f b6       	in	r0, 0x3f	; 63
    5ee4:	f8 94       	cli
    5ee6:	de bf       	out	0x3e, r29	; 62
    5ee8:	0f be       	out	0x3f, r0	; 63
    5eea:	cd bf       	out	0x3d, r28	; 61
    5eec:	ed 01       	movw	r28, r26
    5eee:	08 95       	ret

00005ef0 <__umulhisi3>:
    5ef0:	a2 9f       	mul	r26, r18
    5ef2:	b0 01       	movw	r22, r0
    5ef4:	b3 9f       	mul	r27, r19
    5ef6:	c0 01       	movw	r24, r0
    5ef8:	a3 9f       	mul	r26, r19
    5efa:	70 0d       	add	r23, r0
    5efc:	81 1d       	adc	r24, r1
    5efe:	11 24       	eor	r1, r1
    5f00:	91 1d       	adc	r25, r1
    5f02:	b2 9f       	mul	r27, r18
    5f04:	70 0d       	add	r23, r0
    5f06:	81 1d       	adc	r24, r1
    5f08:	11 24       	eor	r1, r1
    5f0a:	91 1d       	adc	r25, r1
    5f0c:	08 95       	ret

00005f0e <dtostrf>:
    5f0e:	ef 92       	push	r14
    5f10:	0f 93       	push	r16
    5f12:	1f 93       	push	r17
    5f14:	cf 93       	push	r28
    5f16:	df 93       	push	r29
    5f18:	e8 01       	movw	r28, r16
    5f1a:	47 fd       	sbrc	r20, 7
    5f1c:	02 c0       	rjmp	.+4      	; 0x5f22 <dtostrf+0x14>
    5f1e:	34 e0       	ldi	r19, 0x04	; 4
    5f20:	01 c0       	rjmp	.+2      	; 0x5f24 <dtostrf+0x16>
    5f22:	34 e1       	ldi	r19, 0x14	; 20
    5f24:	e4 2f       	mov	r30, r20
    5f26:	44 0f       	add	r20, r20
    5f28:	ff 0b       	sbc	r31, r31
    5f2a:	f7 ff       	sbrs	r31, 7
    5f2c:	03 c0       	rjmp	.+6      	; 0x5f34 <dtostrf+0x26>
    5f2e:	f1 95       	neg	r31
    5f30:	e1 95       	neg	r30
    5f32:	f1 09       	sbc	r31, r1
    5f34:	e3 2e       	mov	r14, r19
    5f36:	02 2f       	mov	r16, r18
    5f38:	2e 2f       	mov	r18, r30
    5f3a:	ae 01       	movw	r20, r28
    5f3c:	9b d3       	rcall	.+1846   	; 0x6674 <dtoa_prf>
    5f3e:	ce 01       	movw	r24, r28
    5f40:	df 91       	pop	r29
    5f42:	cf 91       	pop	r28
    5f44:	1f 91       	pop	r17
    5f46:	0f 91       	pop	r16
    5f48:	ef 90       	pop	r14
    5f4a:	08 95       	ret

00005f4c <malloc>:
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	82 30       	cpi	r24, 0x02	; 2
    5f52:	91 05       	cpc	r25, r1
    5f54:	10 f4       	brcc	.+4      	; 0x5f5a <malloc+0xe>
    5f56:	82 e0       	ldi	r24, 0x02	; 2
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <__flp>
    5f5e:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <__flp+0x1>
    5f62:	20 e0       	ldi	r18, 0x00	; 0
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	c0 e0       	ldi	r28, 0x00	; 0
    5f68:	d0 e0       	ldi	r29, 0x00	; 0
    5f6a:	30 97       	sbiw	r30, 0x00	; 0
    5f6c:	11 f1       	breq	.+68     	; 0x5fb2 <malloc+0x66>
    5f6e:	40 81       	ld	r20, Z
    5f70:	51 81       	ldd	r21, Z+1	; 0x01
    5f72:	48 17       	cp	r20, r24
    5f74:	59 07       	cpc	r21, r25
    5f76:	c0 f0       	brcs	.+48     	; 0x5fa8 <malloc+0x5c>
    5f78:	48 17       	cp	r20, r24
    5f7a:	59 07       	cpc	r21, r25
    5f7c:	61 f4       	brne	.+24     	; 0x5f96 <malloc+0x4a>
    5f7e:	82 81       	ldd	r24, Z+2	; 0x02
    5f80:	93 81       	ldd	r25, Z+3	; 0x03
    5f82:	20 97       	sbiw	r28, 0x00	; 0
    5f84:	19 f0       	breq	.+6      	; 0x5f8c <malloc+0x40>
    5f86:	9b 83       	std	Y+3, r25	; 0x03
    5f88:	8a 83       	std	Y+2, r24	; 0x02
    5f8a:	2b c0       	rjmp	.+86     	; 0x5fe2 <malloc+0x96>
    5f8c:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <__flp+0x1>
    5f90:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <__flp>
    5f94:	26 c0       	rjmp	.+76     	; 0x5fe2 <malloc+0x96>
    5f96:	21 15       	cp	r18, r1
    5f98:	31 05       	cpc	r19, r1
    5f9a:	19 f0       	breq	.+6      	; 0x5fa2 <malloc+0x56>
    5f9c:	42 17       	cp	r20, r18
    5f9e:	53 07       	cpc	r21, r19
    5fa0:	18 f4       	brcc	.+6      	; 0x5fa8 <malloc+0x5c>
    5fa2:	9a 01       	movw	r18, r20
    5fa4:	be 01       	movw	r22, r28
    5fa6:	df 01       	movw	r26, r30
    5fa8:	ef 01       	movw	r28, r30
    5faa:	02 80       	ldd	r0, Z+2	; 0x02
    5fac:	f3 81       	ldd	r31, Z+3	; 0x03
    5fae:	e0 2d       	mov	r30, r0
    5fb0:	dc cf       	rjmp	.-72     	; 0x5f6a <malloc+0x1e>
    5fb2:	21 15       	cp	r18, r1
    5fb4:	31 05       	cpc	r19, r1
    5fb6:	09 f1       	breq	.+66     	; 0x5ffa <malloc+0xae>
    5fb8:	28 1b       	sub	r18, r24
    5fba:	39 0b       	sbc	r19, r25
    5fbc:	24 30       	cpi	r18, 0x04	; 4
    5fbe:	31 05       	cpc	r19, r1
    5fc0:	90 f4       	brcc	.+36     	; 0x5fe6 <malloc+0x9a>
    5fc2:	12 96       	adiw	r26, 0x02	; 2
    5fc4:	8d 91       	ld	r24, X+
    5fc6:	9c 91       	ld	r25, X
    5fc8:	13 97       	sbiw	r26, 0x03	; 3
    5fca:	61 15       	cp	r22, r1
    5fcc:	71 05       	cpc	r23, r1
    5fce:	21 f0       	breq	.+8      	; 0x5fd8 <malloc+0x8c>
    5fd0:	fb 01       	movw	r30, r22
    5fd2:	93 83       	std	Z+3, r25	; 0x03
    5fd4:	82 83       	std	Z+2, r24	; 0x02
    5fd6:	04 c0       	rjmp	.+8      	; 0x5fe0 <malloc+0x94>
    5fd8:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <__flp+0x1>
    5fdc:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <__flp>
    5fe0:	fd 01       	movw	r30, r26
    5fe2:	32 96       	adiw	r30, 0x02	; 2
    5fe4:	44 c0       	rjmp	.+136    	; 0x606e <malloc+0x122>
    5fe6:	fd 01       	movw	r30, r26
    5fe8:	e2 0f       	add	r30, r18
    5fea:	f3 1f       	adc	r31, r19
    5fec:	81 93       	st	Z+, r24
    5fee:	91 93       	st	Z+, r25
    5ff0:	22 50       	subi	r18, 0x02	; 2
    5ff2:	31 09       	sbc	r19, r1
    5ff4:	2d 93       	st	X+, r18
    5ff6:	3c 93       	st	X, r19
    5ff8:	3a c0       	rjmp	.+116    	; 0x606e <malloc+0x122>
    5ffa:	20 91 fa 05 	lds	r18, 0x05FA	; 0x8005fa <__brkval>
    5ffe:	30 91 fb 05 	lds	r19, 0x05FB	; 0x8005fb <__brkval+0x1>
    6002:	23 2b       	or	r18, r19
    6004:	41 f4       	brne	.+16     	; 0x6016 <malloc+0xca>
    6006:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    600a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    600e:	30 93 fb 05 	sts	0x05FB, r19	; 0x8005fb <__brkval+0x1>
    6012:	20 93 fa 05 	sts	0x05FA, r18	; 0x8005fa <__brkval>
    6016:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    601a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    601e:	21 15       	cp	r18, r1
    6020:	31 05       	cpc	r19, r1
    6022:	41 f4       	brne	.+16     	; 0x6034 <malloc+0xe8>
    6024:	2d b7       	in	r18, 0x3d	; 61
    6026:	3e b7       	in	r19, 0x3e	; 62
    6028:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    602c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6030:	24 1b       	sub	r18, r20
    6032:	35 0b       	sbc	r19, r21
    6034:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <__brkval>
    6038:	f0 91 fb 05 	lds	r31, 0x05FB	; 0x8005fb <__brkval+0x1>
    603c:	e2 17       	cp	r30, r18
    603e:	f3 07       	cpc	r31, r19
    6040:	a0 f4       	brcc	.+40     	; 0x606a <malloc+0x11e>
    6042:	2e 1b       	sub	r18, r30
    6044:	3f 0b       	sbc	r19, r31
    6046:	28 17       	cp	r18, r24
    6048:	39 07       	cpc	r19, r25
    604a:	78 f0       	brcs	.+30     	; 0x606a <malloc+0x11e>
    604c:	ac 01       	movw	r20, r24
    604e:	4e 5f       	subi	r20, 0xFE	; 254
    6050:	5f 4f       	sbci	r21, 0xFF	; 255
    6052:	24 17       	cp	r18, r20
    6054:	35 07       	cpc	r19, r21
    6056:	48 f0       	brcs	.+18     	; 0x606a <malloc+0x11e>
    6058:	4e 0f       	add	r20, r30
    605a:	5f 1f       	adc	r21, r31
    605c:	50 93 fb 05 	sts	0x05FB, r21	; 0x8005fb <__brkval+0x1>
    6060:	40 93 fa 05 	sts	0x05FA, r20	; 0x8005fa <__brkval>
    6064:	81 93       	st	Z+, r24
    6066:	91 93       	st	Z+, r25
    6068:	02 c0       	rjmp	.+4      	; 0x606e <malloc+0x122>
    606a:	e0 e0       	ldi	r30, 0x00	; 0
    606c:	f0 e0       	ldi	r31, 0x00	; 0
    606e:	cf 01       	movw	r24, r30
    6070:	df 91       	pop	r29
    6072:	cf 91       	pop	r28
    6074:	08 95       	ret

00006076 <free>:
    6076:	0f 93       	push	r16
    6078:	1f 93       	push	r17
    607a:	cf 93       	push	r28
    607c:	df 93       	push	r29
    607e:	00 97       	sbiw	r24, 0x00	; 0
    6080:	09 f4       	brne	.+2      	; 0x6084 <free+0xe>
    6082:	8c c0       	rjmp	.+280    	; 0x619c <free+0x126>
    6084:	fc 01       	movw	r30, r24
    6086:	32 97       	sbiw	r30, 0x02	; 2
    6088:	13 82       	std	Z+3, r1	; 0x03
    608a:	12 82       	std	Z+2, r1	; 0x02
    608c:	00 91 fc 05 	lds	r16, 0x05FC	; 0x8005fc <__flp>
    6090:	10 91 fd 05 	lds	r17, 0x05FD	; 0x8005fd <__flp+0x1>
    6094:	01 15       	cp	r16, r1
    6096:	11 05       	cpc	r17, r1
    6098:	81 f4       	brne	.+32     	; 0x60ba <free+0x44>
    609a:	20 81       	ld	r18, Z
    609c:	31 81       	ldd	r19, Z+1	; 0x01
    609e:	82 0f       	add	r24, r18
    60a0:	93 1f       	adc	r25, r19
    60a2:	20 91 fa 05 	lds	r18, 0x05FA	; 0x8005fa <__brkval>
    60a6:	30 91 fb 05 	lds	r19, 0x05FB	; 0x8005fb <__brkval+0x1>
    60aa:	28 17       	cp	r18, r24
    60ac:	39 07       	cpc	r19, r25
    60ae:	79 f5       	brne	.+94     	; 0x610e <free+0x98>
    60b0:	f0 93 fb 05 	sts	0x05FB, r31	; 0x8005fb <__brkval+0x1>
    60b4:	e0 93 fa 05 	sts	0x05FA, r30	; 0x8005fa <__brkval>
    60b8:	71 c0       	rjmp	.+226    	; 0x619c <free+0x126>
    60ba:	d8 01       	movw	r26, r16
    60bc:	40 e0       	ldi	r20, 0x00	; 0
    60be:	50 e0       	ldi	r21, 0x00	; 0
    60c0:	ae 17       	cp	r26, r30
    60c2:	bf 07       	cpc	r27, r31
    60c4:	50 f4       	brcc	.+20     	; 0x60da <free+0x64>
    60c6:	12 96       	adiw	r26, 0x02	; 2
    60c8:	2d 91       	ld	r18, X+
    60ca:	3c 91       	ld	r19, X
    60cc:	13 97       	sbiw	r26, 0x03	; 3
    60ce:	ad 01       	movw	r20, r26
    60d0:	21 15       	cp	r18, r1
    60d2:	31 05       	cpc	r19, r1
    60d4:	09 f1       	breq	.+66     	; 0x6118 <free+0xa2>
    60d6:	d9 01       	movw	r26, r18
    60d8:	f3 cf       	rjmp	.-26     	; 0x60c0 <free+0x4a>
    60da:	9d 01       	movw	r18, r26
    60dc:	da 01       	movw	r26, r20
    60de:	33 83       	std	Z+3, r19	; 0x03
    60e0:	22 83       	std	Z+2, r18	; 0x02
    60e2:	60 81       	ld	r22, Z
    60e4:	71 81       	ldd	r23, Z+1	; 0x01
    60e6:	86 0f       	add	r24, r22
    60e8:	97 1f       	adc	r25, r23
    60ea:	82 17       	cp	r24, r18
    60ec:	93 07       	cpc	r25, r19
    60ee:	69 f4       	brne	.+26     	; 0x610a <free+0x94>
    60f0:	ec 01       	movw	r28, r24
    60f2:	28 81       	ld	r18, Y
    60f4:	39 81       	ldd	r19, Y+1	; 0x01
    60f6:	26 0f       	add	r18, r22
    60f8:	37 1f       	adc	r19, r23
    60fa:	2e 5f       	subi	r18, 0xFE	; 254
    60fc:	3f 4f       	sbci	r19, 0xFF	; 255
    60fe:	31 83       	std	Z+1, r19	; 0x01
    6100:	20 83       	st	Z, r18
    6102:	8a 81       	ldd	r24, Y+2	; 0x02
    6104:	9b 81       	ldd	r25, Y+3	; 0x03
    6106:	93 83       	std	Z+3, r25	; 0x03
    6108:	82 83       	std	Z+2, r24	; 0x02
    610a:	45 2b       	or	r20, r21
    610c:	29 f4       	brne	.+10     	; 0x6118 <free+0xa2>
    610e:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__flp+0x1>
    6112:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__flp>
    6116:	42 c0       	rjmp	.+132    	; 0x619c <free+0x126>
    6118:	13 96       	adiw	r26, 0x03	; 3
    611a:	fc 93       	st	X, r31
    611c:	ee 93       	st	-X, r30
    611e:	12 97       	sbiw	r26, 0x02	; 2
    6120:	ed 01       	movw	r28, r26
    6122:	49 91       	ld	r20, Y+
    6124:	59 91       	ld	r21, Y+
    6126:	9e 01       	movw	r18, r28
    6128:	24 0f       	add	r18, r20
    612a:	35 1f       	adc	r19, r21
    612c:	e2 17       	cp	r30, r18
    612e:	f3 07       	cpc	r31, r19
    6130:	71 f4       	brne	.+28     	; 0x614e <free+0xd8>
    6132:	80 81       	ld	r24, Z
    6134:	91 81       	ldd	r25, Z+1	; 0x01
    6136:	84 0f       	add	r24, r20
    6138:	95 1f       	adc	r25, r21
    613a:	02 96       	adiw	r24, 0x02	; 2
    613c:	11 96       	adiw	r26, 0x01	; 1
    613e:	9c 93       	st	X, r25
    6140:	8e 93       	st	-X, r24
    6142:	82 81       	ldd	r24, Z+2	; 0x02
    6144:	93 81       	ldd	r25, Z+3	; 0x03
    6146:	13 96       	adiw	r26, 0x03	; 3
    6148:	9c 93       	st	X, r25
    614a:	8e 93       	st	-X, r24
    614c:	12 97       	sbiw	r26, 0x02	; 2
    614e:	e0 e0       	ldi	r30, 0x00	; 0
    6150:	f0 e0       	ldi	r31, 0x00	; 0
    6152:	d8 01       	movw	r26, r16
    6154:	12 96       	adiw	r26, 0x02	; 2
    6156:	8d 91       	ld	r24, X+
    6158:	9c 91       	ld	r25, X
    615a:	13 97       	sbiw	r26, 0x03	; 3
    615c:	00 97       	sbiw	r24, 0x00	; 0
    615e:	19 f0       	breq	.+6      	; 0x6166 <free+0xf0>
    6160:	f8 01       	movw	r30, r16
    6162:	8c 01       	movw	r16, r24
    6164:	f6 cf       	rjmp	.-20     	; 0x6152 <free+0xdc>
    6166:	8d 91       	ld	r24, X+
    6168:	9c 91       	ld	r25, X
    616a:	98 01       	movw	r18, r16
    616c:	2e 5f       	subi	r18, 0xFE	; 254
    616e:	3f 4f       	sbci	r19, 0xFF	; 255
    6170:	82 0f       	add	r24, r18
    6172:	93 1f       	adc	r25, r19
    6174:	20 91 fa 05 	lds	r18, 0x05FA	; 0x8005fa <__brkval>
    6178:	30 91 fb 05 	lds	r19, 0x05FB	; 0x8005fb <__brkval+0x1>
    617c:	28 17       	cp	r18, r24
    617e:	39 07       	cpc	r19, r25
    6180:	69 f4       	brne	.+26     	; 0x619c <free+0x126>
    6182:	30 97       	sbiw	r30, 0x00	; 0
    6184:	29 f4       	brne	.+10     	; 0x6190 <free+0x11a>
    6186:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <__flp+0x1>
    618a:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <__flp>
    618e:	02 c0       	rjmp	.+4      	; 0x6194 <free+0x11e>
    6190:	13 82       	std	Z+3, r1	; 0x03
    6192:	12 82       	std	Z+2, r1	; 0x02
    6194:	10 93 fb 05 	sts	0x05FB, r17	; 0x8005fb <__brkval+0x1>
    6198:	00 93 fa 05 	sts	0x05FA, r16	; 0x8005fa <__brkval>
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	1f 91       	pop	r17
    61a2:	0f 91       	pop	r16
    61a4:	08 95       	ret

000061a6 <realloc>:
    61a6:	a0 e0       	ldi	r26, 0x00	; 0
    61a8:	b0 e0       	ldi	r27, 0x00	; 0
    61aa:	e8 ed       	ldi	r30, 0xD8	; 216
    61ac:	f0 e3       	ldi	r31, 0x30	; 48
    61ae:	6d ce       	rjmp	.-806    	; 0x5e8a <__prologue_saves__+0x8>
    61b0:	ec 01       	movw	r28, r24
    61b2:	00 97       	sbiw	r24, 0x00	; 0
    61b4:	19 f4       	brne	.+6      	; 0x61bc <realloc+0x16>
    61b6:	cb 01       	movw	r24, r22
    61b8:	c9 de       	rcall	.-622    	; 0x5f4c <malloc>
    61ba:	b4 c0       	rjmp	.+360    	; 0x6324 <realloc+0x17e>
    61bc:	fc 01       	movw	r30, r24
    61be:	e6 0f       	add	r30, r22
    61c0:	f7 1f       	adc	r31, r23
    61c2:	9c 01       	movw	r18, r24
    61c4:	22 50       	subi	r18, 0x02	; 2
    61c6:	31 09       	sbc	r19, r1
    61c8:	e2 17       	cp	r30, r18
    61ca:	f3 07       	cpc	r31, r19
    61cc:	08 f4       	brcc	.+2      	; 0x61d0 <realloc+0x2a>
    61ce:	a8 c0       	rjmp	.+336    	; 0x6320 <realloc+0x17a>
    61d0:	d9 01       	movw	r26, r18
    61d2:	0d 91       	ld	r16, X+
    61d4:	1c 91       	ld	r17, X
    61d6:	11 97       	sbiw	r26, 0x01	; 1
    61d8:	06 17       	cp	r16, r22
    61da:	17 07       	cpc	r17, r23
    61dc:	a8 f0       	brcs	.+42     	; 0x6208 <realloc+0x62>
    61de:	05 30       	cpi	r16, 0x05	; 5
    61e0:	11 05       	cpc	r17, r1
    61e2:	08 f4       	brcc	.+2      	; 0x61e6 <realloc+0x40>
    61e4:	9b c0       	rjmp	.+310    	; 0x631c <realloc+0x176>
    61e6:	c8 01       	movw	r24, r16
    61e8:	04 97       	sbiw	r24, 0x04	; 4
    61ea:	86 17       	cp	r24, r22
    61ec:	97 07       	cpc	r25, r23
    61ee:	08 f4       	brcc	.+2      	; 0x61f2 <realloc+0x4c>
    61f0:	95 c0       	rjmp	.+298    	; 0x631c <realloc+0x176>
    61f2:	02 50       	subi	r16, 0x02	; 2
    61f4:	11 09       	sbc	r17, r1
    61f6:	06 1b       	sub	r16, r22
    61f8:	17 0b       	sbc	r17, r23
    61fa:	01 93       	st	Z+, r16
    61fc:	11 93       	st	Z+, r17
    61fe:	6d 93       	st	X+, r22
    6200:	7c 93       	st	X, r23
    6202:	cf 01       	movw	r24, r30
    6204:	38 df       	rcall	.-400    	; 0x6076 <free>
    6206:	8a c0       	rjmp	.+276    	; 0x631c <realloc+0x176>
    6208:	5b 01       	movw	r10, r22
    620a:	a0 1a       	sub	r10, r16
    620c:	b1 0a       	sbc	r11, r17
    620e:	4c 01       	movw	r8, r24
    6210:	80 0e       	add	r8, r16
    6212:	91 1e       	adc	r9, r17
    6214:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <__flp>
    6218:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <__flp+0x1>
    621c:	40 e0       	ldi	r20, 0x00	; 0
    621e:	50 e0       	ldi	r21, 0x00	; 0
    6220:	e1 2c       	mov	r14, r1
    6222:	f1 2c       	mov	r15, r1
    6224:	10 97       	sbiw	r26, 0x00	; 0
    6226:	09 f4       	brne	.+2      	; 0x622a <realloc+0x84>
    6228:	4a c0       	rjmp	.+148    	; 0x62be <realloc+0x118>
    622a:	a8 15       	cp	r26, r8
    622c:	b9 05       	cpc	r27, r9
    622e:	d1 f5       	brne	.+116    	; 0x62a4 <realloc+0xfe>
    6230:	6d 90       	ld	r6, X+
    6232:	7c 90       	ld	r7, X
    6234:	11 97       	sbiw	r26, 0x01	; 1
    6236:	63 01       	movw	r12, r6
    6238:	82 e0       	ldi	r24, 0x02	; 2
    623a:	c8 0e       	add	r12, r24
    623c:	d1 1c       	adc	r13, r1
    623e:	ca 14       	cp	r12, r10
    6240:	db 04       	cpc	r13, r11
    6242:	80 f1       	brcs	.+96     	; 0x62a4 <realloc+0xfe>
    6244:	a3 01       	movw	r20, r6
    6246:	4a 19       	sub	r20, r10
    6248:	5b 09       	sbc	r21, r11
    624a:	6a 01       	movw	r12, r20
    624c:	82 e0       	ldi	r24, 0x02	; 2
    624e:	c8 0e       	add	r12, r24
    6250:	d1 1c       	adc	r13, r1
    6252:	12 96       	adiw	r26, 0x02	; 2
    6254:	bc 90       	ld	r11, X
    6256:	12 97       	sbiw	r26, 0x02	; 2
    6258:	13 96       	adiw	r26, 0x03	; 3
    625a:	ac 91       	ld	r26, X
    625c:	b5 e0       	ldi	r27, 0x05	; 5
    625e:	cb 16       	cp	r12, r27
    6260:	d1 04       	cpc	r13, r1
    6262:	40 f0       	brcs	.+16     	; 0x6274 <realloc+0xce>
    6264:	b2 82       	std	Z+2, r11	; 0x02
    6266:	a3 83       	std	Z+3, r26	; 0x03
    6268:	51 83       	std	Z+1, r21	; 0x01
    626a:	40 83       	st	Z, r20
    626c:	d9 01       	movw	r26, r18
    626e:	6d 93       	st	X+, r22
    6270:	7c 93       	st	X, r23
    6272:	0a c0       	rjmp	.+20     	; 0x6288 <realloc+0xe2>
    6274:	0e 5f       	subi	r16, 0xFE	; 254
    6276:	1f 4f       	sbci	r17, 0xFF	; 255
    6278:	c3 01       	movw	r24, r6
    627a:	80 0f       	add	r24, r16
    627c:	91 1f       	adc	r25, r17
    627e:	f9 01       	movw	r30, r18
    6280:	91 83       	std	Z+1, r25	; 0x01
    6282:	80 83       	st	Z, r24
    6284:	eb 2d       	mov	r30, r11
    6286:	fa 2f       	mov	r31, r26
    6288:	e1 14       	cp	r14, r1
    628a:	f1 04       	cpc	r15, r1
    628c:	31 f0       	breq	.+12     	; 0x629a <realloc+0xf4>
    628e:	d7 01       	movw	r26, r14
    6290:	13 96       	adiw	r26, 0x03	; 3
    6292:	fc 93       	st	X, r31
    6294:	ee 93       	st	-X, r30
    6296:	12 97       	sbiw	r26, 0x02	; 2
    6298:	41 c0       	rjmp	.+130    	; 0x631c <realloc+0x176>
    629a:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__flp+0x1>
    629e:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__flp>
    62a2:	3c c0       	rjmp	.+120    	; 0x631c <realloc+0x176>
    62a4:	8d 91       	ld	r24, X+
    62a6:	9c 91       	ld	r25, X
    62a8:	11 97       	sbiw	r26, 0x01	; 1
    62aa:	48 17       	cp	r20, r24
    62ac:	59 07       	cpc	r21, r25
    62ae:	08 f4       	brcc	.+2      	; 0x62b2 <realloc+0x10c>
    62b0:	ac 01       	movw	r20, r24
    62b2:	7d 01       	movw	r14, r26
    62b4:	12 96       	adiw	r26, 0x02	; 2
    62b6:	0d 90       	ld	r0, X+
    62b8:	bc 91       	ld	r27, X
    62ba:	a0 2d       	mov	r26, r0
    62bc:	b3 cf       	rjmp	.-154    	; 0x6224 <realloc+0x7e>
    62be:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <__brkval>
    62c2:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <__brkval+0x1>
    62c6:	88 15       	cp	r24, r8
    62c8:	99 05       	cpc	r25, r9
    62ca:	e1 f4       	brne	.+56     	; 0x6304 <realloc+0x15e>
    62cc:	46 17       	cp	r20, r22
    62ce:	57 07       	cpc	r21, r23
    62d0:	c8 f4       	brcc	.+50     	; 0x6304 <realloc+0x15e>
    62d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    62d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    62da:	00 97       	sbiw	r24, 0x00	; 0
    62dc:	41 f4       	brne	.+16     	; 0x62ee <realloc+0x148>
    62de:	8d b7       	in	r24, 0x3d	; 61
    62e0:	9e b7       	in	r25, 0x3e	; 62
    62e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    62e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    62ea:	84 1b       	sub	r24, r20
    62ec:	95 0b       	sbc	r25, r21
    62ee:	e8 17       	cp	r30, r24
    62f0:	f9 07       	cpc	r31, r25
    62f2:	b0 f4       	brcc	.+44     	; 0x6320 <realloc+0x17a>
    62f4:	f0 93 fb 05 	sts	0x05FB, r31	; 0x8005fb <__brkval+0x1>
    62f8:	e0 93 fa 05 	sts	0x05FA, r30	; 0x8005fa <__brkval>
    62fc:	f9 01       	movw	r30, r18
    62fe:	71 83       	std	Z+1, r23	; 0x01
    6300:	60 83       	st	Z, r22
    6302:	0c c0       	rjmp	.+24     	; 0x631c <realloc+0x176>
    6304:	cb 01       	movw	r24, r22
    6306:	22 de       	rcall	.-956    	; 0x5f4c <malloc>
    6308:	7c 01       	movw	r14, r24
    630a:	00 97       	sbiw	r24, 0x00	; 0
    630c:	49 f0       	breq	.+18     	; 0x6320 <realloc+0x17a>
    630e:	a8 01       	movw	r20, r16
    6310:	be 01       	movw	r22, r28
    6312:	89 d1       	rcall	.+786    	; 0x6626 <memcpy>
    6314:	ce 01       	movw	r24, r28
    6316:	af de       	rcall	.-674    	; 0x6076 <free>
    6318:	c7 01       	movw	r24, r14
    631a:	04 c0       	rjmp	.+8      	; 0x6324 <realloc+0x17e>
    631c:	ce 01       	movw	r24, r28
    631e:	02 c0       	rjmp	.+4      	; 0x6324 <realloc+0x17e>
    6320:	80 e0       	ldi	r24, 0x00	; 0
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	cd b7       	in	r28, 0x3d	; 61
    6326:	de b7       	in	r29, 0x3e	; 62
    6328:	ee e0       	ldi	r30, 0x0E	; 14
    632a:	cb cd       	rjmp	.-1130   	; 0x5ec2 <__epilogue_restores__+0x8>

0000632c <strtod>:
    632c:	a0 e0       	ldi	r26, 0x00	; 0
    632e:	b0 e0       	ldi	r27, 0x00	; 0
    6330:	eb e9       	ldi	r30, 0x9B	; 155
    6332:	f1 e3       	ldi	r31, 0x31	; 49
    6334:	aa cd       	rjmp	.-1196   	; 0x5e8a <__prologue_saves__+0x8>
    6336:	ec 01       	movw	r28, r24
    6338:	7b 01       	movw	r14, r22
    633a:	61 15       	cp	r22, r1
    633c:	71 05       	cpc	r23, r1
    633e:	19 f0       	breq	.+6      	; 0x6346 <strtod+0x1a>
    6340:	db 01       	movw	r26, r22
    6342:	8d 93       	st	X+, r24
    6344:	9c 93       	st	X, r25
    6346:	8e 01       	movw	r16, r28
    6348:	0f 5f       	subi	r16, 0xFF	; 255
    634a:	1f 4f       	sbci	r17, 0xFF	; 255
    634c:	78 80       	ld	r7, Y
    634e:	87 2d       	mov	r24, r7
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	49 d1       	rcall	.+658    	; 0x65e6 <isspace>
    6354:	89 2b       	or	r24, r25
    6356:	11 f0       	breq	.+4      	; 0x635c <strtod+0x30>
    6358:	e8 01       	movw	r28, r16
    635a:	f5 cf       	rjmp	.-22     	; 0x6346 <strtod+0x1a>
    635c:	bd e2       	ldi	r27, 0x2D	; 45
    635e:	7b 12       	cpse	r7, r27
    6360:	05 c0       	rjmp	.+10     	; 0x636c <strtod+0x40>
    6362:	0f 5f       	subi	r16, 0xFF	; 255
    6364:	1f 4f       	sbci	r17, 0xFF	; 255
    6366:	79 80       	ldd	r7, Y+1	; 0x01
    6368:	c1 e0       	ldi	r28, 0x01	; 1
    636a:	08 c0       	rjmp	.+16     	; 0x637c <strtod+0x50>
    636c:	eb e2       	ldi	r30, 0x2B	; 43
    636e:	7e 12       	cpse	r7, r30
    6370:	04 c0       	rjmp	.+8      	; 0x637a <strtod+0x4e>
    6372:	8e 01       	movw	r16, r28
    6374:	0e 5f       	subi	r16, 0xFE	; 254
    6376:	1f 4f       	sbci	r17, 0xFF	; 255
    6378:	79 80       	ldd	r7, Y+1	; 0x01
    637a:	c0 e0       	ldi	r28, 0x00	; 0
    637c:	68 01       	movw	r12, r16
    637e:	f1 e0       	ldi	r31, 0x01	; 1
    6380:	cf 1a       	sub	r12, r31
    6382:	d1 08       	sbc	r13, r1
    6384:	43 e0       	ldi	r20, 0x03	; 3
    6386:	50 e0       	ldi	r21, 0x00	; 0
    6388:	62 e0       	ldi	r22, 0x02	; 2
    638a:	72 e0       	ldi	r23, 0x02	; 2
    638c:	c6 01       	movw	r24, r12
    638e:	33 d1       	rcall	.+614    	; 0x65f6 <strncasecmp_P>
    6390:	89 2b       	or	r24, r25
    6392:	e9 f4       	brne	.+58     	; 0x63ce <strtod+0xa2>
    6394:	68 01       	movw	r12, r16
    6396:	22 e0       	ldi	r18, 0x02	; 2
    6398:	c2 0e       	add	r12, r18
    639a:	d1 1c       	adc	r13, r1
    639c:	45 e0       	ldi	r20, 0x05	; 5
    639e:	50 e0       	ldi	r21, 0x00	; 0
    63a0:	6d ef       	ldi	r22, 0xFD	; 253
    63a2:	71 e0       	ldi	r23, 0x01	; 1
    63a4:	c6 01       	movw	r24, r12
    63a6:	27 d1       	rcall	.+590    	; 0x65f6 <strncasecmp_P>
    63a8:	89 2b       	or	r24, r25
    63aa:	21 f4       	brne	.+8      	; 0x63b4 <strtod+0x88>
    63ac:	68 01       	movw	r12, r16
    63ae:	87 e0       	ldi	r24, 0x07	; 7
    63b0:	c8 0e       	add	r12, r24
    63b2:	d1 1c       	adc	r13, r1
    63b4:	e1 14       	cp	r14, r1
    63b6:	f1 04       	cpc	r15, r1
    63b8:	19 f0       	breq	.+6      	; 0x63c0 <strtod+0x94>
    63ba:	d7 01       	movw	r26, r14
    63bc:	cd 92       	st	X+, r12
    63be:	dc 92       	st	X, r13
    63c0:	c1 11       	cpse	r28, r1
    63c2:	fd c0       	rjmp	.+506    	; 0x65be <strtod+0x292>
    63c4:	60 e0       	ldi	r22, 0x00	; 0
    63c6:	70 e0       	ldi	r23, 0x00	; 0
    63c8:	80 e8       	ldi	r24, 0x80	; 128
    63ca:	9f e7       	ldi	r25, 0x7F	; 127
    63cc:	01 c1       	rjmp	.+514    	; 0x65d0 <strtod+0x2a4>
    63ce:	43 e0       	ldi	r20, 0x03	; 3
    63d0:	50 e0       	ldi	r21, 0x00	; 0
    63d2:	6a ef       	ldi	r22, 0xFA	; 250
    63d4:	71 e0       	ldi	r23, 0x01	; 1
    63d6:	c6 01       	movw	r24, r12
    63d8:	0e d1       	rcall	.+540    	; 0x65f6 <strncasecmp_P>
    63da:	89 2b       	or	r24, r25
    63dc:	51 f4       	brne	.+20     	; 0x63f2 <strtod+0xc6>
    63de:	e1 14       	cp	r14, r1
    63e0:	f1 04       	cpc	r15, r1
    63e2:	09 f4       	brne	.+2      	; 0x63e6 <strtod+0xba>
    63e4:	f1 c0       	rjmp	.+482    	; 0x65c8 <strtod+0x29c>
    63e6:	0e 5f       	subi	r16, 0xFE	; 254
    63e8:	1f 4f       	sbci	r17, 0xFF	; 255
    63ea:	f7 01       	movw	r30, r14
    63ec:	11 83       	std	Z+1, r17	; 0x01
    63ee:	00 83       	st	Z, r16
    63f0:	eb c0       	rjmp	.+470    	; 0x65c8 <strtod+0x29c>
    63f2:	68 01       	movw	r12, r16
    63f4:	60 e0       	ldi	r22, 0x00	; 0
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	cb 01       	movw	r24, r22
    63fa:	00 e0       	ldi	r16, 0x00	; 0
    63fc:	10 e0       	ldi	r17, 0x00	; 0
    63fe:	f6 01       	movw	r30, r12
    6400:	d0 ed       	ldi	r29, 0xD0	; 208
    6402:	d7 0d       	add	r29, r7
    6404:	da 30       	cpi	r29, 0x0A	; 10
    6406:	50 f5       	brcc	.+84     	; 0x645c <strtod+0x130>
    6408:	2c 2f       	mov	r18, r28
    640a:	22 60       	ori	r18, 0x02	; 2
    640c:	62 2e       	mov	r6, r18
    640e:	2c 2f       	mov	r18, r28
    6410:	28 70       	andi	r18, 0x08	; 8
    6412:	c2 ff       	sbrs	r28, 2
    6414:	05 c0       	rjmp	.+10     	; 0x6420 <strtod+0xf4>
    6416:	21 11       	cpse	r18, r1
    6418:	27 c0       	rjmp	.+78     	; 0x6468 <strtod+0x13c>
    641a:	0f 5f       	subi	r16, 0xFF	; 255
    641c:	1f 4f       	sbci	r17, 0xFF	; 255
    641e:	24 c0       	rjmp	.+72     	; 0x6468 <strtod+0x13c>
    6420:	22 23       	and	r18, r18
    6422:	11 f0       	breq	.+4      	; 0x6428 <strtod+0xfc>
    6424:	01 50       	subi	r16, 0x01	; 1
    6426:	11 09       	sbc	r17, r1
    6428:	a5 e0       	ldi	r26, 0x05	; 5
    642a:	b0 e0       	ldi	r27, 0x00	; 0
    642c:	9b 01       	movw	r18, r22
    642e:	ac 01       	movw	r20, r24
    6430:	1e dd       	rcall	.-1476   	; 0x5e6e <__muluhisi3>
    6432:	4b 01       	movw	r8, r22
    6434:	5c 01       	movw	r10, r24
    6436:	88 0c       	add	r8, r8
    6438:	99 1c       	adc	r9, r9
    643a:	aa 1c       	adc	r10, r10
    643c:	bb 1c       	adc	r11, r11
    643e:	c5 01       	movw	r24, r10
    6440:	b4 01       	movw	r22, r8
    6442:	6d 0f       	add	r22, r29
    6444:	71 1d       	adc	r23, r1
    6446:	81 1d       	adc	r24, r1
    6448:	91 1d       	adc	r25, r1
    644a:	68 39       	cpi	r22, 0x98	; 152
    644c:	a9 e9       	ldi	r26, 0x99	; 153
    644e:	7a 07       	cpc	r23, r26
    6450:	8a 07       	cpc	r24, r26
    6452:	a9 e1       	ldi	r26, 0x19	; 25
    6454:	9a 07       	cpc	r25, r26
    6456:	40 f0       	brcs	.+16     	; 0x6468 <strtod+0x13c>
    6458:	c6 60       	ori	r28, 0x06	; 6
    645a:	05 c0       	rjmp	.+10     	; 0x6466 <strtod+0x13a>
    645c:	de 3f       	cpi	r29, 0xFE	; 254
    645e:	51 f4       	brne	.+20     	; 0x6474 <strtod+0x148>
    6460:	c3 fd       	sbrc	r28, 3
    6462:	44 c0       	rjmp	.+136    	; 0x64ec <strtod+0x1c0>
    6464:	c8 60       	ori	r28, 0x08	; 8
    6466:	6c 2e       	mov	r6, r28
    6468:	bf ef       	ldi	r27, 0xFF	; 255
    646a:	cb 1a       	sub	r12, r27
    646c:	db 0a       	sbc	r13, r27
    646e:	70 80       	ld	r7, Z
    6470:	c6 2d       	mov	r28, r6
    6472:	c5 cf       	rjmp	.-118    	; 0x63fe <strtod+0xd2>
    6474:	2d 2f       	mov	r18, r29
    6476:	2f 7d       	andi	r18, 0xDF	; 223
    6478:	25 31       	cpi	r18, 0x15	; 21
    647a:	c1 f5       	brne	.+112    	; 0x64ec <strtod+0x1c0>
    647c:	40 81       	ld	r20, Z
    647e:	4d 32       	cpi	r20, 0x2D	; 45
    6480:	11 f4       	brne	.+4      	; 0x6486 <strtod+0x15a>
    6482:	c0 61       	ori	r28, 0x10	; 16
    6484:	06 c0       	rjmp	.+12     	; 0x6492 <strtod+0x166>
    6486:	4b 32       	cpi	r20, 0x2B	; 43
    6488:	21 f0       	breq	.+8      	; 0x6492 <strtod+0x166>
    648a:	31 96       	adiw	r30, 0x01	; 1
    648c:	21 e0       	ldi	r18, 0x01	; 1
    648e:	30 e0       	ldi	r19, 0x00	; 0
    6490:	06 c0       	rjmp	.+12     	; 0x649e <strtod+0x172>
    6492:	32 96       	adiw	r30, 0x02	; 2
    6494:	d6 01       	movw	r26, r12
    6496:	11 96       	adiw	r26, 0x01	; 1
    6498:	4c 91       	ld	r20, X
    649a:	22 e0       	ldi	r18, 0x02	; 2
    649c:	30 e0       	ldi	r19, 0x00	; 0
    649e:	a0 ed       	ldi	r26, 0xD0	; 208
    64a0:	a4 0f       	add	r26, r20
    64a2:	aa 30       	cpi	r26, 0x0A	; 10
    64a4:	18 f0       	brcs	.+6      	; 0x64ac <strtod+0x180>
    64a6:	e2 1b       	sub	r30, r18
    64a8:	f3 0b       	sbc	r31, r19
    64aa:	20 c0       	rjmp	.+64     	; 0x64ec <strtod+0x1c0>
    64ac:	40 e0       	ldi	r20, 0x00	; 0
    64ae:	50 e0       	ldi	r21, 0x00	; 0
    64b0:	40 38       	cpi	r20, 0x80	; 128
    64b2:	bc e0       	ldi	r27, 0x0C	; 12
    64b4:	5b 07       	cpc	r21, r27
    64b6:	5c f4       	brge	.+22     	; 0x64ce <strtod+0x1a2>
    64b8:	9a 01       	movw	r18, r20
    64ba:	22 0f       	add	r18, r18
    64bc:	33 1f       	adc	r19, r19
    64be:	22 0f       	add	r18, r18
    64c0:	33 1f       	adc	r19, r19
    64c2:	42 0f       	add	r20, r18
    64c4:	53 1f       	adc	r21, r19
    64c6:	44 0f       	add	r20, r20
    64c8:	55 1f       	adc	r21, r21
    64ca:	4a 0f       	add	r20, r26
    64cc:	51 1d       	adc	r21, r1
    64ce:	31 96       	adiw	r30, 0x01	; 1
    64d0:	df 01       	movw	r26, r30
    64d2:	11 97       	sbiw	r26, 0x01	; 1
    64d4:	2c 91       	ld	r18, X
    64d6:	a0 ed       	ldi	r26, 0xD0	; 208
    64d8:	a2 0f       	add	r26, r18
    64da:	aa 30       	cpi	r26, 0x0A	; 10
    64dc:	48 f3       	brcs	.-46     	; 0x64b0 <strtod+0x184>
    64de:	c4 ff       	sbrs	r28, 4
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8 <strtod+0x1bc>
    64e2:	51 95       	neg	r21
    64e4:	41 95       	neg	r20
    64e6:	51 09       	sbc	r21, r1
    64e8:	04 0f       	add	r16, r20
    64ea:	15 1f       	adc	r17, r21
    64ec:	c1 ff       	sbrs	r28, 1
    64ee:	07 c0       	rjmp	.+14     	; 0x64fe <strtod+0x1d2>
    64f0:	e1 14       	cp	r14, r1
    64f2:	f1 04       	cpc	r15, r1
    64f4:	21 f0       	breq	.+8      	; 0x64fe <strtod+0x1d2>
    64f6:	31 97       	sbiw	r30, 0x01	; 1
    64f8:	d7 01       	movw	r26, r14
    64fa:	ed 93       	st	X+, r30
    64fc:	fc 93       	st	X, r31
    64fe:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <__floatunsisf>
    6502:	c3 70       	andi	r28, 0x03	; 3
    6504:	c3 30       	cpi	r28, 0x03	; 3
    6506:	19 f0       	breq	.+6      	; 0x650e <strtod+0x1e2>
    6508:	6b 01       	movw	r12, r22
    650a:	7c 01       	movw	r14, r24
    650c:	06 c0       	rjmp	.+12     	; 0x651a <strtod+0x1ee>
    650e:	6b 01       	movw	r12, r22
    6510:	7c 01       	movw	r14, r24
    6512:	f7 fa       	bst	r15, 7
    6514:	f0 94       	com	r15
    6516:	f7 f8       	bld	r15, 7
    6518:	f0 94       	com	r15
    651a:	20 e0       	ldi	r18, 0x00	; 0
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	a9 01       	movw	r20, r18
    6520:	c7 01       	movw	r24, r14
    6522:	b6 01       	movw	r22, r12
    6524:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <__cmpsf2>
    6528:	88 23       	and	r24, r24
    652a:	09 f4       	brne	.+2      	; 0x652e <strtod+0x202>
    652c:	45 c0       	rjmp	.+138    	; 0x65b8 <strtod+0x28c>
    652e:	17 ff       	sbrs	r17, 7
    6530:	06 c0       	rjmp	.+12     	; 0x653e <strtod+0x212>
    6532:	11 95       	neg	r17
    6534:	01 95       	neg	r16
    6536:	11 09       	sbc	r17, r1
    6538:	c9 e1       	ldi	r28, 0x19	; 25
    653a:	d2 e0       	ldi	r29, 0x02	; 2
    653c:	02 c0       	rjmp	.+4      	; 0x6542 <strtod+0x216>
    653e:	c1 e3       	ldi	r28, 0x31	; 49
    6540:	d2 e0       	ldi	r29, 0x02	; 2
    6542:	5e 01       	movw	r10, r28
    6544:	b8 e1       	ldi	r27, 0x18	; 24
    6546:	ab 1a       	sub	r10, r27
    6548:	b1 08       	sbc	r11, r1
    654a:	46 01       	movw	r8, r12
    654c:	be 2d       	mov	r27, r14
    654e:	af 2d       	mov	r26, r15
    6550:	90 e2       	ldi	r25, 0x20	; 32
    6552:	e9 2e       	mov	r14, r25
    6554:	f1 2c       	mov	r15, r1
    6556:	0e 15       	cp	r16, r14
    6558:	1f 05       	cpc	r17, r15
    655a:	84 f0       	brlt	.+32     	; 0x657c <strtod+0x250>
    655c:	fe 01       	movw	r30, r28
    655e:	25 91       	lpm	r18, Z+
    6560:	35 91       	lpm	r19, Z+
    6562:	45 91       	lpm	r20, Z+
    6564:	54 91       	lpm	r21, Z
    6566:	b4 01       	movw	r22, r8
    6568:	8b 2f       	mov	r24, r27
    656a:	9a 2f       	mov	r25, r26
    656c:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <__mulsf3>
    6570:	4b 01       	movw	r8, r22
    6572:	b8 2f       	mov	r27, r24
    6574:	a9 2f       	mov	r26, r25
    6576:	0e 19       	sub	r16, r14
    6578:	1f 09       	sbc	r17, r15
    657a:	ed cf       	rjmp	.-38     	; 0x6556 <strtod+0x22a>
    657c:	24 97       	sbiw	r28, 0x04	; 4
    657e:	f5 94       	asr	r15
    6580:	e7 94       	ror	r14
    6582:	ca 15       	cp	r28, r10
    6584:	db 05       	cpc	r29, r11
    6586:	39 f7       	brne	.-50     	; 0x6556 <strtod+0x22a>
    6588:	64 01       	movw	r12, r8
    658a:	eb 2e       	mov	r14, r27
    658c:	fa 2e       	mov	r15, r26
    658e:	8e 2d       	mov	r24, r14
    6590:	88 0f       	add	r24, r24
    6592:	8f 2d       	mov	r24, r15
    6594:	88 1f       	adc	r24, r24
    6596:	8f 3f       	cpi	r24, 0xFF	; 255
    6598:	49 f0       	breq	.+18     	; 0x65ac <strtod+0x280>
    659a:	20 e0       	ldi	r18, 0x00	; 0
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	a9 01       	movw	r20, r18
    65a0:	c7 01       	movw	r24, r14
    65a2:	b6 01       	movw	r22, r12
    65a4:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <__cmpsf2>
    65a8:	81 11       	cpse	r24, r1
    65aa:	06 c0       	rjmp	.+12     	; 0x65b8 <strtod+0x28c>
    65ac:	82 e2       	ldi	r24, 0x22	; 34
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <errno+0x1>
    65b4:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <errno>
    65b8:	c7 01       	movw	r24, r14
    65ba:	b6 01       	movw	r22, r12
    65bc:	09 c0       	rjmp	.+18     	; 0x65d0 <strtod+0x2a4>
    65be:	60 e0       	ldi	r22, 0x00	; 0
    65c0:	70 e0       	ldi	r23, 0x00	; 0
    65c2:	80 e8       	ldi	r24, 0x80	; 128
    65c4:	9f ef       	ldi	r25, 0xFF	; 255
    65c6:	04 c0       	rjmp	.+8      	; 0x65d0 <strtod+0x2a4>
    65c8:	60 e0       	ldi	r22, 0x00	; 0
    65ca:	70 e0       	ldi	r23, 0x00	; 0
    65cc:	80 ec       	ldi	r24, 0xC0	; 192
    65ce:	9f e7       	ldi	r25, 0x7F	; 127
    65d0:	cd b7       	in	r28, 0x3d	; 61
    65d2:	de b7       	in	r29, 0x3e	; 62
    65d4:	ee e0       	ldi	r30, 0x0E	; 14
    65d6:	75 cc       	rjmp	.-1814   	; 0x5ec2 <__epilogue_restores__+0x8>

000065d8 <abort>:
    65d8:	81 e0       	ldi	r24, 0x01	; 1
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	f8 94       	cli
    65de:	e1 c2       	rjmp	.+1474   	; 0x6ba2 <__do_global_dtors>

000065e0 <atof>:
    65e0:	66 27       	eor	r22, r22
    65e2:	77 27       	eor	r23, r23
    65e4:	a3 ce       	rjmp	.-698    	; 0x632c <strtod>

000065e6 <isspace>:
    65e6:	91 11       	cpse	r25, r1
    65e8:	aa c2       	rjmp	.+1364   	; 0x6b3e <__ctype_isfalse>
    65ea:	80 32       	cpi	r24, 0x20	; 32
    65ec:	19 f0       	breq	.+6      	; 0x65f4 <isspace+0xe>
    65ee:	89 50       	subi	r24, 0x09	; 9
    65f0:	85 50       	subi	r24, 0x05	; 5
    65f2:	d0 f7       	brcc	.-12     	; 0x65e8 <isspace+0x2>
    65f4:	08 95       	ret

000065f6 <strncasecmp_P>:
    65f6:	fb 01       	movw	r30, r22
    65f8:	dc 01       	movw	r26, r24
    65fa:	41 50       	subi	r20, 0x01	; 1
    65fc:	50 40       	sbci	r21, 0x00	; 0
    65fe:	88 f0       	brcs	.+34     	; 0x6622 <strncasecmp_P+0x2c>
    6600:	8d 91       	ld	r24, X+
    6602:	81 34       	cpi	r24, 0x41	; 65
    6604:	1c f0       	brlt	.+6      	; 0x660c <strncasecmp_P+0x16>
    6606:	8b 35       	cpi	r24, 0x5B	; 91
    6608:	0c f4       	brge	.+2      	; 0x660c <strncasecmp_P+0x16>
    660a:	80 5e       	subi	r24, 0xE0	; 224
    660c:	65 91       	lpm	r22, Z+
    660e:	61 34       	cpi	r22, 0x41	; 65
    6610:	1c f0       	brlt	.+6      	; 0x6618 <strncasecmp_P+0x22>
    6612:	6b 35       	cpi	r22, 0x5B	; 91
    6614:	0c f4       	brge	.+2      	; 0x6618 <strncasecmp_P+0x22>
    6616:	60 5e       	subi	r22, 0xE0	; 224
    6618:	86 1b       	sub	r24, r22
    661a:	61 11       	cpse	r22, r1
    661c:	71 f3       	breq	.-36     	; 0x65fa <strncasecmp_P+0x4>
    661e:	99 0b       	sbc	r25, r25
    6620:	08 95       	ret
    6622:	88 1b       	sub	r24, r24
    6624:	fc cf       	rjmp	.-8      	; 0x661e <strncasecmp_P+0x28>

00006626 <memcpy>:
    6626:	fb 01       	movw	r30, r22
    6628:	dc 01       	movw	r26, r24
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <memcpy+0xa>
    662c:	01 90       	ld	r0, Z+
    662e:	0d 92       	st	X+, r0
    6630:	41 50       	subi	r20, 0x01	; 1
    6632:	50 40       	sbci	r21, 0x00	; 0
    6634:	d8 f7       	brcc	.-10     	; 0x662c <memcpy+0x6>
    6636:	08 95       	ret

00006638 <strcmp>:
    6638:	fb 01       	movw	r30, r22
    663a:	dc 01       	movw	r26, r24
    663c:	8d 91       	ld	r24, X+
    663e:	01 90       	ld	r0, Z+
    6640:	80 19       	sub	r24, r0
    6642:	01 10       	cpse	r0, r1
    6644:	d9 f3       	breq	.-10     	; 0x663c <strcmp+0x4>
    6646:	99 0b       	sbc	r25, r25
    6648:	08 95       	ret

0000664a <strcpy>:
    664a:	fb 01       	movw	r30, r22
    664c:	dc 01       	movw	r26, r24
    664e:	01 90       	ld	r0, Z+
    6650:	0d 92       	st	X+, r0
    6652:	00 20       	and	r0, r0
    6654:	e1 f7       	brne	.-8      	; 0x664e <strcpy+0x4>
    6656:	08 95       	ret

00006658 <strncmp>:
    6658:	fb 01       	movw	r30, r22
    665a:	dc 01       	movw	r26, r24
    665c:	41 50       	subi	r20, 0x01	; 1
    665e:	50 40       	sbci	r21, 0x00	; 0
    6660:	30 f0       	brcs	.+12     	; 0x666e <strncmp+0x16>
    6662:	8d 91       	ld	r24, X+
    6664:	01 90       	ld	r0, Z+
    6666:	80 19       	sub	r24, r0
    6668:	19 f4       	brne	.+6      	; 0x6670 <strncmp+0x18>
    666a:	00 20       	and	r0, r0
    666c:	b9 f7       	brne	.-18     	; 0x665c <strncmp+0x4>
    666e:	88 1b       	sub	r24, r24
    6670:	99 0b       	sbc	r25, r25
    6672:	08 95       	ret

00006674 <dtoa_prf>:
    6674:	4f 92       	push	r4
    6676:	5f 92       	push	r5
    6678:	6f 92       	push	r6
    667a:	7f 92       	push	r7
    667c:	9f 92       	push	r9
    667e:	af 92       	push	r10
    6680:	bf 92       	push	r11
    6682:	cf 92       	push	r12
    6684:	df 92       	push	r13
    6686:	ef 92       	push	r14
    6688:	ff 92       	push	r15
    668a:	0f 93       	push	r16
    668c:	1f 93       	push	r17
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    6692:	cd b7       	in	r28, 0x3d	; 61
    6694:	de b7       	in	r29, 0x3e	; 62
    6696:	29 97       	sbiw	r28, 0x09	; 9
    6698:	0f b6       	in	r0, 0x3f	; 63
    669a:	f8 94       	cli
    669c:	de bf       	out	0x3e, r29	; 62
    669e:	0f be       	out	0x3f, r0	; 63
    66a0:	cd bf       	out	0x3d, r28	; 61
    66a2:	6a 01       	movw	r12, r20
    66a4:	12 2f       	mov	r17, r18
    66a6:	b0 2e       	mov	r11, r16
    66a8:	2b e3       	ldi	r18, 0x3B	; 59
    66aa:	20 17       	cp	r18, r16
    66ac:	20 f0       	brcs	.+8      	; 0x66b6 <dtoa_prf+0x42>
    66ae:	ff 24       	eor	r15, r15
    66b0:	f3 94       	inc	r15
    66b2:	f0 0e       	add	r15, r16
    66b4:	02 c0       	rjmp	.+4      	; 0x66ba <dtoa_prf+0x46>
    66b6:	bc e3       	ldi	r27, 0x3C	; 60
    66b8:	fb 2e       	mov	r15, r27
    66ba:	0f 2d       	mov	r16, r15
    66bc:	27 e0       	ldi	r18, 0x07	; 7
    66be:	ae 01       	movw	r20, r28
    66c0:	4f 5f       	subi	r20, 0xFF	; 255
    66c2:	5f 4f       	sbci	r21, 0xFF	; 255
    66c4:	64 d1       	rcall	.+712    	; 0x698e <__ftoa_engine>
    66c6:	ac 01       	movw	r20, r24
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
    66ca:	98 2f       	mov	r25, r24
    66cc:	99 70       	andi	r25, 0x09	; 9
    66ce:	91 30       	cpi	r25, 0x01	; 1
    66d0:	31 f0       	breq	.+12     	; 0x66de <dtoa_prf+0x6a>
    66d2:	e1 fc       	sbrc	r14, 1
    66d4:	06 c0       	rjmp	.+12     	; 0x66e2 <dtoa_prf+0x6e>
    66d6:	e0 fe       	sbrs	r14, 0
    66d8:	06 c0       	rjmp	.+12     	; 0x66e6 <dtoa_prf+0x72>
    66da:	90 e2       	ldi	r25, 0x20	; 32
    66dc:	05 c0       	rjmp	.+10     	; 0x66e8 <dtoa_prf+0x74>
    66de:	9d e2       	ldi	r25, 0x2D	; 45
    66e0:	03 c0       	rjmp	.+6      	; 0x66e8 <dtoa_prf+0x74>
    66e2:	9b e2       	ldi	r25, 0x2B	; 43
    66e4:	01 c0       	rjmp	.+2      	; 0x66e8 <dtoa_prf+0x74>
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	ee 2d       	mov	r30, r14
    66ea:	e0 71       	andi	r30, 0x10	; 16
    66ec:	83 ff       	sbrs	r24, 3
    66ee:	3c c0       	rjmp	.+120    	; 0x6768 <dtoa_prf+0xf4>
    66f0:	91 11       	cpse	r25, r1
    66f2:	02 c0       	rjmp	.+4      	; 0x66f8 <dtoa_prf+0x84>
    66f4:	83 e0       	ldi	r24, 0x03	; 3
    66f6:	01 c0       	rjmp	.+2      	; 0x66fa <dtoa_prf+0x86>
    66f8:	84 e0       	ldi	r24, 0x04	; 4
    66fa:	81 17       	cp	r24, r17
    66fc:	18 f4       	brcc	.+6      	; 0x6704 <dtoa_prf+0x90>
    66fe:	21 2f       	mov	r18, r17
    6700:	28 1b       	sub	r18, r24
    6702:	01 c0       	rjmp	.+2      	; 0x6706 <dtoa_prf+0x92>
    6704:	20 e0       	ldi	r18, 0x00	; 0
    6706:	e1 11       	cpse	r30, r1
    6708:	0b c0       	rjmp	.+22     	; 0x6720 <dtoa_prf+0xac>
    670a:	f6 01       	movw	r30, r12
    670c:	82 2f       	mov	r24, r18
    670e:	30 e2       	ldi	r19, 0x20	; 32
    6710:	88 23       	and	r24, r24
    6712:	19 f0       	breq	.+6      	; 0x671a <dtoa_prf+0xa6>
    6714:	31 93       	st	Z+, r19
    6716:	81 50       	subi	r24, 0x01	; 1
    6718:	fb cf       	rjmp	.-10     	; 0x6710 <dtoa_prf+0x9c>
    671a:	c2 0e       	add	r12, r18
    671c:	d1 1c       	adc	r13, r1
    671e:	20 e0       	ldi	r18, 0x00	; 0
    6720:	99 23       	and	r25, r25
    6722:	29 f0       	breq	.+10     	; 0x672e <dtoa_prf+0xba>
    6724:	d6 01       	movw	r26, r12
    6726:	9c 93       	st	X, r25
    6728:	f6 01       	movw	r30, r12
    672a:	31 96       	adiw	r30, 0x01	; 1
    672c:	6f 01       	movw	r12, r30
    672e:	c6 01       	movw	r24, r12
    6730:	03 96       	adiw	r24, 0x03	; 3
    6732:	e2 fe       	sbrs	r14, 2
    6734:	0a c0       	rjmp	.+20     	; 0x674a <dtoa_prf+0xd6>
    6736:	3e e4       	ldi	r19, 0x4E	; 78
    6738:	d6 01       	movw	r26, r12
    673a:	3c 93       	st	X, r19
    673c:	41 e4       	ldi	r20, 0x41	; 65
    673e:	11 96       	adiw	r26, 0x01	; 1
    6740:	4c 93       	st	X, r20
    6742:	11 97       	sbiw	r26, 0x01	; 1
    6744:	12 96       	adiw	r26, 0x02	; 2
    6746:	3c 93       	st	X, r19
    6748:	06 c0       	rjmp	.+12     	; 0x6756 <dtoa_prf+0xe2>
    674a:	3e e6       	ldi	r19, 0x6E	; 110
    674c:	f6 01       	movw	r30, r12
    674e:	30 83       	st	Z, r19
    6750:	41 e6       	ldi	r20, 0x61	; 97
    6752:	41 83       	std	Z+1, r20	; 0x01
    6754:	32 83       	std	Z+2, r19	; 0x02
    6756:	fc 01       	movw	r30, r24
    6758:	32 2f       	mov	r19, r18
    675a:	40 e2       	ldi	r20, 0x20	; 32
    675c:	33 23       	and	r19, r19
    675e:	09 f4       	brne	.+2      	; 0x6762 <dtoa_prf+0xee>
    6760:	42 c0       	rjmp	.+132    	; 0x67e6 <dtoa_prf+0x172>
    6762:	41 93       	st	Z+, r20
    6764:	31 50       	subi	r19, 0x01	; 1
    6766:	fa cf       	rjmp	.-12     	; 0x675c <dtoa_prf+0xe8>
    6768:	82 ff       	sbrs	r24, 2
    676a:	44 c0       	rjmp	.+136    	; 0x67f4 <dtoa_prf+0x180>
    676c:	91 11       	cpse	r25, r1
    676e:	02 c0       	rjmp	.+4      	; 0x6774 <dtoa_prf+0x100>
    6770:	83 e0       	ldi	r24, 0x03	; 3
    6772:	01 c0       	rjmp	.+2      	; 0x6776 <dtoa_prf+0x102>
    6774:	84 e0       	ldi	r24, 0x04	; 4
    6776:	81 17       	cp	r24, r17
    6778:	18 f4       	brcc	.+6      	; 0x6780 <dtoa_prf+0x10c>
    677a:	21 2f       	mov	r18, r17
    677c:	28 1b       	sub	r18, r24
    677e:	01 c0       	rjmp	.+2      	; 0x6782 <dtoa_prf+0x10e>
    6780:	20 e0       	ldi	r18, 0x00	; 0
    6782:	e1 11       	cpse	r30, r1
    6784:	0b c0       	rjmp	.+22     	; 0x679c <dtoa_prf+0x128>
    6786:	f6 01       	movw	r30, r12
    6788:	82 2f       	mov	r24, r18
    678a:	30 e2       	ldi	r19, 0x20	; 32
    678c:	88 23       	and	r24, r24
    678e:	19 f0       	breq	.+6      	; 0x6796 <dtoa_prf+0x122>
    6790:	31 93       	st	Z+, r19
    6792:	81 50       	subi	r24, 0x01	; 1
    6794:	fb cf       	rjmp	.-10     	; 0x678c <dtoa_prf+0x118>
    6796:	c2 0e       	add	r12, r18
    6798:	d1 1c       	adc	r13, r1
    679a:	20 e0       	ldi	r18, 0x00	; 0
    679c:	99 23       	and	r25, r25
    679e:	29 f0       	breq	.+10     	; 0x67aa <dtoa_prf+0x136>
    67a0:	d6 01       	movw	r26, r12
    67a2:	9c 93       	st	X, r25
    67a4:	f6 01       	movw	r30, r12
    67a6:	31 96       	adiw	r30, 0x01	; 1
    67a8:	6f 01       	movw	r12, r30
    67aa:	c6 01       	movw	r24, r12
    67ac:	03 96       	adiw	r24, 0x03	; 3
    67ae:	e2 fe       	sbrs	r14, 2
    67b0:	0b c0       	rjmp	.+22     	; 0x67c8 <dtoa_prf+0x154>
    67b2:	39 e4       	ldi	r19, 0x49	; 73
    67b4:	d6 01       	movw	r26, r12
    67b6:	3c 93       	st	X, r19
    67b8:	3e e4       	ldi	r19, 0x4E	; 78
    67ba:	11 96       	adiw	r26, 0x01	; 1
    67bc:	3c 93       	st	X, r19
    67be:	11 97       	sbiw	r26, 0x01	; 1
    67c0:	36 e4       	ldi	r19, 0x46	; 70
    67c2:	12 96       	adiw	r26, 0x02	; 2
    67c4:	3c 93       	st	X, r19
    67c6:	07 c0       	rjmp	.+14     	; 0x67d6 <dtoa_prf+0x162>
    67c8:	39 e6       	ldi	r19, 0x69	; 105
    67ca:	f6 01       	movw	r30, r12
    67cc:	30 83       	st	Z, r19
    67ce:	3e e6       	ldi	r19, 0x6E	; 110
    67d0:	31 83       	std	Z+1, r19	; 0x01
    67d2:	36 e6       	ldi	r19, 0x66	; 102
    67d4:	32 83       	std	Z+2, r19	; 0x02
    67d6:	fc 01       	movw	r30, r24
    67d8:	32 2f       	mov	r19, r18
    67da:	40 e2       	ldi	r20, 0x20	; 32
    67dc:	33 23       	and	r19, r19
    67de:	19 f0       	breq	.+6      	; 0x67e6 <dtoa_prf+0x172>
    67e0:	41 93       	st	Z+, r20
    67e2:	31 50       	subi	r19, 0x01	; 1
    67e4:	fb cf       	rjmp	.-10     	; 0x67dc <dtoa_prf+0x168>
    67e6:	fc 01       	movw	r30, r24
    67e8:	e2 0f       	add	r30, r18
    67ea:	f1 1d       	adc	r31, r1
    67ec:	10 82       	st	Z, r1
    67ee:	8e ef       	ldi	r24, 0xFE	; 254
    67f0:	9f ef       	ldi	r25, 0xFF	; 255
    67f2:	b7 c0       	rjmp	.+366    	; 0x6962 <dtoa_prf+0x2ee>
    67f4:	f1 e0       	ldi	r31, 0x01	; 1
    67f6:	91 11       	cpse	r25, r1
    67f8:	01 c0       	rjmp	.+2      	; 0x67fc <dtoa_prf+0x188>
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	6f 2f       	mov	r22, r31
    67fe:	70 e0       	ldi	r23, 0x00	; 0
    6800:	14 16       	cp	r1, r20
    6802:	15 06       	cpc	r1, r21
    6804:	24 f4       	brge	.+8      	; 0x680e <dtoa_prf+0x19a>
    6806:	9a 01       	movw	r18, r20
    6808:	2f 5f       	subi	r18, 0xFF	; 255
    680a:	3f 4f       	sbci	r19, 0xFF	; 255
    680c:	02 c0       	rjmp	.+4      	; 0x6812 <dtoa_prf+0x19e>
    680e:	21 e0       	ldi	r18, 0x01	; 1
    6810:	30 e0       	ldi	r19, 0x00	; 0
    6812:	26 0f       	add	r18, r22
    6814:	37 1f       	adc	r19, r23
    6816:	bb 20       	and	r11, r11
    6818:	29 f0       	breq	.+10     	; 0x6824 <dtoa_prf+0x1b0>
    681a:	6b 2d       	mov	r22, r11
    681c:	70 e0       	ldi	r23, 0x00	; 0
    681e:	6f 5f       	subi	r22, 0xFF	; 255
    6820:	7f 4f       	sbci	r23, 0xFF	; 255
    6822:	02 c0       	rjmp	.+4      	; 0x6828 <dtoa_prf+0x1b4>
    6824:	60 e0       	ldi	r22, 0x00	; 0
    6826:	70 e0       	ldi	r23, 0x00	; 0
    6828:	26 0f       	add	r18, r22
    682a:	37 1f       	adc	r19, r23
    682c:	61 2f       	mov	r22, r17
    682e:	70 e0       	ldi	r23, 0x00	; 0
    6830:	26 17       	cp	r18, r22
    6832:	37 07       	cpc	r19, r23
    6834:	1c f4       	brge	.+6      	; 0x683c <dtoa_prf+0x1c8>
    6836:	12 1b       	sub	r17, r18
    6838:	21 2f       	mov	r18, r17
    683a:	01 c0       	rjmp	.+2      	; 0x683e <dtoa_prf+0x1ca>
    683c:	20 e0       	ldi	r18, 0x00	; 0
    683e:	3e 2d       	mov	r19, r14
    6840:	38 71       	andi	r19, 0x18	; 24
    6842:	59 f4       	brne	.+22     	; 0x685a <dtoa_prf+0x1e6>
    6844:	d6 01       	movw	r26, r12
    6846:	32 2f       	mov	r19, r18
    6848:	60 e2       	ldi	r22, 0x20	; 32
    684a:	33 23       	and	r19, r19
    684c:	19 f0       	breq	.+6      	; 0x6854 <dtoa_prf+0x1e0>
    684e:	6d 93       	st	X+, r22
    6850:	31 50       	subi	r19, 0x01	; 1
    6852:	fb cf       	rjmp	.-10     	; 0x684a <dtoa_prf+0x1d6>
    6854:	c2 0e       	add	r12, r18
    6856:	d1 1c       	adc	r13, r1
    6858:	20 e0       	ldi	r18, 0x00	; 0
    685a:	ff 23       	and	r31, r31
    685c:	31 f0       	breq	.+12     	; 0x686a <dtoa_prf+0x1f6>
    685e:	d6 01       	movw	r26, r12
    6860:	9c 93       	st	X, r25
    6862:	b6 01       	movw	r22, r12
    6864:	6f 5f       	subi	r22, 0xFF	; 255
    6866:	7f 4f       	sbci	r23, 0xFF	; 255
    6868:	6b 01       	movw	r12, r22
    686a:	e1 11       	cpse	r30, r1
    686c:	0b c0       	rjmp	.+22     	; 0x6884 <dtoa_prf+0x210>
    686e:	f6 01       	movw	r30, r12
    6870:	92 2f       	mov	r25, r18
    6872:	30 e3       	ldi	r19, 0x30	; 48
    6874:	99 23       	and	r25, r25
    6876:	19 f0       	breq	.+6      	; 0x687e <dtoa_prf+0x20a>
    6878:	31 93       	st	Z+, r19
    687a:	91 50       	subi	r25, 0x01	; 1
    687c:	fb cf       	rjmp	.-10     	; 0x6874 <dtoa_prf+0x200>
    687e:	c2 0e       	add	r12, r18
    6880:	d1 1c       	adc	r13, r1
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	9f 2d       	mov	r25, r15
    6886:	94 0f       	add	r25, r20
    6888:	3a 81       	ldd	r19, Y+2	; 0x02
    688a:	78 2f       	mov	r23, r24
    688c:	70 71       	andi	r23, 0x10	; 16
    688e:	a7 2e       	mov	r10, r23
    6890:	84 ff       	sbrs	r24, 4
    6892:	03 c0       	rjmp	.+6      	; 0x689a <dtoa_prf+0x226>
    6894:	31 33       	cpi	r19, 0x31	; 49
    6896:	09 f4       	brne	.+2      	; 0x689a <dtoa_prf+0x226>
    6898:	91 50       	subi	r25, 0x01	; 1
    689a:	19 16       	cp	r1, r25
    689c:	24 f4       	brge	.+8      	; 0x68a6 <dtoa_prf+0x232>
    689e:	99 30       	cpi	r25, 0x09	; 9
    68a0:	18 f0       	brcs	.+6      	; 0x68a8 <dtoa_prf+0x234>
    68a2:	98 e0       	ldi	r25, 0x08	; 8
    68a4:	01 c0       	rjmp	.+2      	; 0x68a8 <dtoa_prf+0x234>
    68a6:	91 e0       	ldi	r25, 0x01	; 1
    68a8:	e4 2f       	mov	r30, r20
    68aa:	85 2f       	mov	r24, r21
    68ac:	57 ff       	sbrs	r21, 7
    68ae:	02 c0       	rjmp	.+4      	; 0x68b4 <dtoa_prf+0x240>
    68b0:	e0 e0       	ldi	r30, 0x00	; 0
    68b2:	80 e0       	ldi	r24, 0x00	; 0
    68b4:	6e 2f       	mov	r22, r30
    68b6:	78 2f       	mov	r23, r24
    68b8:	e0 e0       	ldi	r30, 0x00	; 0
    68ba:	f0 e0       	ldi	r31, 0x00	; 0
    68bc:	ae e2       	ldi	r26, 0x2E	; 46
    68be:	9a 2e       	mov	r9, r26
    68c0:	3a 01       	movw	r6, r20
    68c2:	69 1a       	sub	r6, r25
    68c4:	71 08       	sbc	r7, r1
    68c6:	2a 01       	movw	r4, r20
    68c8:	46 1a       	sub	r4, r22
    68ca:	57 0a       	sbc	r5, r23
    68cc:	0b 2d       	mov	r16, r11
    68ce:	10 e0       	ldi	r17, 0x00	; 0
    68d0:	11 95       	neg	r17
    68d2:	01 95       	neg	r16
    68d4:	11 09       	sbc	r17, r1
    68d6:	6f 3f       	cpi	r22, 0xFF	; 255
    68d8:	8f ef       	ldi	r24, 0xFF	; 255
    68da:	78 07       	cpc	r23, r24
    68dc:	29 f4       	brne	.+10     	; 0x68e8 <dtoa_prf+0x274>
    68de:	d6 01       	movw	r26, r12
    68e0:	9c 92       	st	X, r9
    68e2:	c6 01       	movw	r24, r12
    68e4:	01 96       	adiw	r24, 0x01	; 1
    68e6:	6c 01       	movw	r12, r24
    68e8:	46 17       	cp	r20, r22
    68ea:	57 07       	cpc	r21, r23
    68ec:	84 f0       	brlt	.+32     	; 0x690e <dtoa_prf+0x29a>
    68ee:	66 16       	cp	r6, r22
    68f0:	77 06       	cpc	r7, r23
    68f2:	6c f4       	brge	.+26     	; 0x690e <dtoa_prf+0x29a>
    68f4:	7f 01       	movw	r14, r30
    68f6:	e4 0c       	add	r14, r4
    68f8:	f5 1c       	adc	r15, r5
    68fa:	a1 e0       	ldi	r26, 0x01	; 1
    68fc:	b0 e0       	ldi	r27, 0x00	; 0
    68fe:	ac 0f       	add	r26, r28
    6900:	bd 1f       	adc	r27, r29
    6902:	ea 0e       	add	r14, r26
    6904:	fb 1e       	adc	r15, r27
    6906:	d7 01       	movw	r26, r14
    6908:	11 96       	adiw	r26, 0x01	; 1
    690a:	bc 90       	ld	r11, X
    690c:	02 c0       	rjmp	.+4      	; 0x6912 <dtoa_prf+0x29e>
    690e:	90 e3       	ldi	r25, 0x30	; 48
    6910:	b9 2e       	mov	r11, r25
    6912:	61 50       	subi	r22, 0x01	; 1
    6914:	71 09       	sbc	r23, r1
    6916:	31 96       	adiw	r30, 0x01	; 1
    6918:	c6 01       	movw	r24, r12
    691a:	01 96       	adiw	r24, 0x01	; 1
    691c:	7c 01       	movw	r14, r24
    691e:	60 17       	cp	r22, r16
    6920:	71 07       	cpc	r23, r17
    6922:	24 f0       	brlt	.+8      	; 0x692c <dtoa_prf+0x2b8>
    6924:	d6 01       	movw	r26, r12
    6926:	bc 92       	st	X, r11
    6928:	6c 01       	movw	r12, r24
    692a:	d5 cf       	rjmp	.-86     	; 0x68d6 <dtoa_prf+0x262>
    692c:	64 17       	cp	r22, r20
    692e:	75 07       	cpc	r23, r21
    6930:	41 f4       	brne	.+16     	; 0x6942 <dtoa_prf+0x2ce>
    6932:	36 33       	cpi	r19, 0x36	; 54
    6934:	20 f4       	brcc	.+8      	; 0x693e <dtoa_prf+0x2ca>
    6936:	35 33       	cpi	r19, 0x35	; 53
    6938:	21 f4       	brne	.+8      	; 0x6942 <dtoa_prf+0x2ce>
    693a:	a1 10       	cpse	r10, r1
    693c:	02 c0       	rjmp	.+4      	; 0x6942 <dtoa_prf+0x2ce>
    693e:	81 e3       	ldi	r24, 0x31	; 49
    6940:	b8 2e       	mov	r11, r24
    6942:	f6 01       	movw	r30, r12
    6944:	b0 82       	st	Z, r11
    6946:	f7 01       	movw	r30, r14
    6948:	82 2f       	mov	r24, r18
    694a:	90 e2       	ldi	r25, 0x20	; 32
    694c:	88 23       	and	r24, r24
    694e:	19 f0       	breq	.+6      	; 0x6956 <dtoa_prf+0x2e2>
    6950:	91 93       	st	Z+, r25
    6952:	81 50       	subi	r24, 0x01	; 1
    6954:	fb cf       	rjmp	.-10     	; 0x694c <dtoa_prf+0x2d8>
    6956:	f7 01       	movw	r30, r14
    6958:	e2 0f       	add	r30, r18
    695a:	f1 1d       	adc	r31, r1
    695c:	10 82       	st	Z, r1
    695e:	80 e0       	ldi	r24, 0x00	; 0
    6960:	90 e0       	ldi	r25, 0x00	; 0
    6962:	29 96       	adiw	r28, 0x09	; 9
    6964:	0f b6       	in	r0, 0x3f	; 63
    6966:	f8 94       	cli
    6968:	de bf       	out	0x3e, r29	; 62
    696a:	0f be       	out	0x3f, r0	; 63
    696c:	cd bf       	out	0x3d, r28	; 61
    696e:	df 91       	pop	r29
    6970:	cf 91       	pop	r28
    6972:	1f 91       	pop	r17
    6974:	0f 91       	pop	r16
    6976:	ff 90       	pop	r15
    6978:	ef 90       	pop	r14
    697a:	df 90       	pop	r13
    697c:	cf 90       	pop	r12
    697e:	bf 90       	pop	r11
    6980:	af 90       	pop	r10
    6982:	9f 90       	pop	r9
    6984:	7f 90       	pop	r7
    6986:	6f 90       	pop	r6
    6988:	5f 90       	pop	r5
    698a:	4f 90       	pop	r4
    698c:	08 95       	ret

0000698e <__ftoa_engine>:
    698e:	28 30       	cpi	r18, 0x08	; 8
    6990:	08 f0       	brcs	.+2      	; 0x6994 <__ftoa_engine+0x6>
    6992:	27 e0       	ldi	r18, 0x07	; 7
    6994:	33 27       	eor	r19, r19
    6996:	da 01       	movw	r26, r20
    6998:	99 0f       	add	r25, r25
    699a:	31 1d       	adc	r19, r1
    699c:	87 fd       	sbrc	r24, 7
    699e:	91 60       	ori	r25, 0x01	; 1
    69a0:	00 96       	adiw	r24, 0x00	; 0
    69a2:	61 05       	cpc	r22, r1
    69a4:	71 05       	cpc	r23, r1
    69a6:	39 f4       	brne	.+14     	; 0x69b6 <__ftoa_engine+0x28>
    69a8:	32 60       	ori	r19, 0x02	; 2
    69aa:	2e 5f       	subi	r18, 0xFE	; 254
    69ac:	3d 93       	st	X+, r19
    69ae:	30 e3       	ldi	r19, 0x30	; 48
    69b0:	2a 95       	dec	r18
    69b2:	e1 f7       	brne	.-8      	; 0x69ac <__ftoa_engine+0x1e>
    69b4:	08 95       	ret
    69b6:	9f 3f       	cpi	r25, 0xFF	; 255
    69b8:	30 f0       	brcs	.+12     	; 0x69c6 <__ftoa_engine+0x38>
    69ba:	80 38       	cpi	r24, 0x80	; 128
    69bc:	71 05       	cpc	r23, r1
    69be:	61 05       	cpc	r22, r1
    69c0:	09 f0       	breq	.+2      	; 0x69c4 <__ftoa_engine+0x36>
    69c2:	3c 5f       	subi	r19, 0xFC	; 252
    69c4:	3c 5f       	subi	r19, 0xFC	; 252
    69c6:	3d 93       	st	X+, r19
    69c8:	91 30       	cpi	r25, 0x01	; 1
    69ca:	08 f0       	brcs	.+2      	; 0x69ce <__ftoa_engine+0x40>
    69cc:	80 68       	ori	r24, 0x80	; 128
    69ce:	91 1d       	adc	r25, r1
    69d0:	df 93       	push	r29
    69d2:	cf 93       	push	r28
    69d4:	1f 93       	push	r17
    69d6:	0f 93       	push	r16
    69d8:	ff 92       	push	r15
    69da:	ef 92       	push	r14
    69dc:	19 2f       	mov	r17, r25
    69de:	98 7f       	andi	r25, 0xF8	; 248
    69e0:	96 95       	lsr	r25
    69e2:	e9 2f       	mov	r30, r25
    69e4:	96 95       	lsr	r25
    69e6:	96 95       	lsr	r25
    69e8:	e9 0f       	add	r30, r25
    69ea:	ff 27       	eor	r31, r31
    69ec:	e1 57       	subi	r30, 0x71	; 113
    69ee:	fd 4f       	sbci	r31, 0xFD	; 253
    69f0:	99 27       	eor	r25, r25
    69f2:	33 27       	eor	r19, r19
    69f4:	ee 24       	eor	r14, r14
    69f6:	ff 24       	eor	r15, r15
    69f8:	a7 01       	movw	r20, r14
    69fa:	e7 01       	movw	r28, r14
    69fc:	05 90       	lpm	r0, Z+
    69fe:	08 94       	sec
    6a00:	07 94       	ror	r0
    6a02:	28 f4       	brcc	.+10     	; 0x6a0e <__ftoa_engine+0x80>
    6a04:	36 0f       	add	r19, r22
    6a06:	e7 1e       	adc	r14, r23
    6a08:	f8 1e       	adc	r15, r24
    6a0a:	49 1f       	adc	r20, r25
    6a0c:	51 1d       	adc	r21, r1
    6a0e:	66 0f       	add	r22, r22
    6a10:	77 1f       	adc	r23, r23
    6a12:	88 1f       	adc	r24, r24
    6a14:	99 1f       	adc	r25, r25
    6a16:	06 94       	lsr	r0
    6a18:	a1 f7       	brne	.-24     	; 0x6a02 <__ftoa_engine+0x74>
    6a1a:	05 90       	lpm	r0, Z+
    6a1c:	07 94       	ror	r0
    6a1e:	28 f4       	brcc	.+10     	; 0x6a2a <__ftoa_engine+0x9c>
    6a20:	e7 0e       	add	r14, r23
    6a22:	f8 1e       	adc	r15, r24
    6a24:	49 1f       	adc	r20, r25
    6a26:	56 1f       	adc	r21, r22
    6a28:	c1 1d       	adc	r28, r1
    6a2a:	77 0f       	add	r23, r23
    6a2c:	88 1f       	adc	r24, r24
    6a2e:	99 1f       	adc	r25, r25
    6a30:	66 1f       	adc	r22, r22
    6a32:	06 94       	lsr	r0
    6a34:	a1 f7       	brne	.-24     	; 0x6a1e <__ftoa_engine+0x90>
    6a36:	05 90       	lpm	r0, Z+
    6a38:	07 94       	ror	r0
    6a3a:	28 f4       	brcc	.+10     	; 0x6a46 <__ftoa_engine+0xb8>
    6a3c:	f8 0e       	add	r15, r24
    6a3e:	49 1f       	adc	r20, r25
    6a40:	56 1f       	adc	r21, r22
    6a42:	c7 1f       	adc	r28, r23
    6a44:	d1 1d       	adc	r29, r1
    6a46:	88 0f       	add	r24, r24
    6a48:	99 1f       	adc	r25, r25
    6a4a:	66 1f       	adc	r22, r22
    6a4c:	77 1f       	adc	r23, r23
    6a4e:	06 94       	lsr	r0
    6a50:	a1 f7       	brne	.-24     	; 0x6a3a <__ftoa_engine+0xac>
    6a52:	05 90       	lpm	r0, Z+
    6a54:	07 94       	ror	r0
    6a56:	20 f4       	brcc	.+8      	; 0x6a60 <__ftoa_engine+0xd2>
    6a58:	49 0f       	add	r20, r25
    6a5a:	56 1f       	adc	r21, r22
    6a5c:	c7 1f       	adc	r28, r23
    6a5e:	d8 1f       	adc	r29, r24
    6a60:	99 0f       	add	r25, r25
    6a62:	66 1f       	adc	r22, r22
    6a64:	77 1f       	adc	r23, r23
    6a66:	88 1f       	adc	r24, r24
    6a68:	06 94       	lsr	r0
    6a6a:	a9 f7       	brne	.-22     	; 0x6a56 <__ftoa_engine+0xc8>
    6a6c:	84 91       	lpm	r24, Z
    6a6e:	10 95       	com	r17
    6a70:	17 70       	andi	r17, 0x07	; 7
    6a72:	41 f0       	breq	.+16     	; 0x6a84 <__ftoa_engine+0xf6>
    6a74:	d6 95       	lsr	r29
    6a76:	c7 95       	ror	r28
    6a78:	57 95       	ror	r21
    6a7a:	47 95       	ror	r20
    6a7c:	f7 94       	ror	r15
    6a7e:	e7 94       	ror	r14
    6a80:	1a 95       	dec	r17
    6a82:	c1 f7       	brne	.-16     	; 0x6a74 <__ftoa_engine+0xe6>
    6a84:	e5 e3       	ldi	r30, 0x35	; 53
    6a86:	f2 e0       	ldi	r31, 0x02	; 2
    6a88:	68 94       	set
    6a8a:	15 90       	lpm	r1, Z+
    6a8c:	15 91       	lpm	r17, Z+
    6a8e:	35 91       	lpm	r19, Z+
    6a90:	65 91       	lpm	r22, Z+
    6a92:	95 91       	lpm	r25, Z+
    6a94:	05 90       	lpm	r0, Z+
    6a96:	7f e2       	ldi	r23, 0x2F	; 47
    6a98:	73 95       	inc	r23
    6a9a:	e1 18       	sub	r14, r1
    6a9c:	f1 0a       	sbc	r15, r17
    6a9e:	43 0b       	sbc	r20, r19
    6aa0:	56 0b       	sbc	r21, r22
    6aa2:	c9 0b       	sbc	r28, r25
    6aa4:	d0 09       	sbc	r29, r0
    6aa6:	c0 f7       	brcc	.-16     	; 0x6a98 <__ftoa_engine+0x10a>
    6aa8:	e1 0c       	add	r14, r1
    6aaa:	f1 1e       	adc	r15, r17
    6aac:	43 1f       	adc	r20, r19
    6aae:	56 1f       	adc	r21, r22
    6ab0:	c9 1f       	adc	r28, r25
    6ab2:	d0 1d       	adc	r29, r0
    6ab4:	7e f4       	brtc	.+30     	; 0x6ad4 <__ftoa_engine+0x146>
    6ab6:	70 33       	cpi	r23, 0x30	; 48
    6ab8:	11 f4       	brne	.+4      	; 0x6abe <__ftoa_engine+0x130>
    6aba:	8a 95       	dec	r24
    6abc:	e6 cf       	rjmp	.-52     	; 0x6a8a <__ftoa_engine+0xfc>
    6abe:	e8 94       	clt
    6ac0:	01 50       	subi	r16, 0x01	; 1
    6ac2:	30 f0       	brcs	.+12     	; 0x6ad0 <__ftoa_engine+0x142>
    6ac4:	08 0f       	add	r16, r24
    6ac6:	0a f4       	brpl	.+2      	; 0x6aca <__ftoa_engine+0x13c>
    6ac8:	00 27       	eor	r16, r16
    6aca:	02 17       	cp	r16, r18
    6acc:	08 f4       	brcc	.+2      	; 0x6ad0 <__ftoa_engine+0x142>
    6ace:	20 2f       	mov	r18, r16
    6ad0:	23 95       	inc	r18
    6ad2:	02 2f       	mov	r16, r18
    6ad4:	7a 33       	cpi	r23, 0x3A	; 58
    6ad6:	28 f0       	brcs	.+10     	; 0x6ae2 <__ftoa_engine+0x154>
    6ad8:	79 e3       	ldi	r23, 0x39	; 57
    6ada:	7d 93       	st	X+, r23
    6adc:	2a 95       	dec	r18
    6ade:	e9 f7       	brne	.-6      	; 0x6ada <__ftoa_engine+0x14c>
    6ae0:	10 c0       	rjmp	.+32     	; 0x6b02 <__ftoa_engine+0x174>
    6ae2:	7d 93       	st	X+, r23
    6ae4:	2a 95       	dec	r18
    6ae6:	89 f6       	brne	.-94     	; 0x6a8a <__ftoa_engine+0xfc>
    6ae8:	06 94       	lsr	r0
    6aea:	97 95       	ror	r25
    6aec:	67 95       	ror	r22
    6aee:	37 95       	ror	r19
    6af0:	17 95       	ror	r17
    6af2:	17 94       	ror	r1
    6af4:	e1 18       	sub	r14, r1
    6af6:	f1 0a       	sbc	r15, r17
    6af8:	43 0b       	sbc	r20, r19
    6afa:	56 0b       	sbc	r21, r22
    6afc:	c9 0b       	sbc	r28, r25
    6afe:	d0 09       	sbc	r29, r0
    6b00:	98 f0       	brcs	.+38     	; 0x6b28 <__ftoa_engine+0x19a>
    6b02:	23 95       	inc	r18
    6b04:	7e 91       	ld	r23, -X
    6b06:	73 95       	inc	r23
    6b08:	7a 33       	cpi	r23, 0x3A	; 58
    6b0a:	08 f0       	brcs	.+2      	; 0x6b0e <__ftoa_engine+0x180>
    6b0c:	70 e3       	ldi	r23, 0x30	; 48
    6b0e:	7c 93       	st	X, r23
    6b10:	20 13       	cpse	r18, r16
    6b12:	b8 f7       	brcc	.-18     	; 0x6b02 <__ftoa_engine+0x174>
    6b14:	7e 91       	ld	r23, -X
    6b16:	70 61       	ori	r23, 0x10	; 16
    6b18:	7d 93       	st	X+, r23
    6b1a:	30 f0       	brcs	.+12     	; 0x6b28 <__ftoa_engine+0x19a>
    6b1c:	83 95       	inc	r24
    6b1e:	71 e3       	ldi	r23, 0x31	; 49
    6b20:	7d 93       	st	X+, r23
    6b22:	70 e3       	ldi	r23, 0x30	; 48
    6b24:	2a 95       	dec	r18
    6b26:	e1 f7       	brne	.-8      	; 0x6b20 <__ftoa_engine+0x192>
    6b28:	11 24       	eor	r1, r1
    6b2a:	ef 90       	pop	r14
    6b2c:	ff 90       	pop	r15
    6b2e:	0f 91       	pop	r16
    6b30:	1f 91       	pop	r17
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	99 27       	eor	r25, r25
    6b38:	87 fd       	sbrc	r24, 7
    6b3a:	90 95       	com	r25
    6b3c:	08 95       	ret

00006b3e <__ctype_isfalse>:
    6b3e:	99 27       	eor	r25, r25
    6b40:	88 27       	eor	r24, r24

00006b42 <__ctype_istrue>:
    6b42:	08 95       	ret

00006b44 <eeprom_read_block>:
    6b44:	dc 01       	movw	r26, r24
    6b46:	cb 01       	movw	r24, r22

00006b48 <eeprom_read_blraw>:
    6b48:	fc 01       	movw	r30, r24
    6b4a:	f9 99       	sbic	0x1f, 1	; 31
    6b4c:	fe cf       	rjmp	.-4      	; 0x6b4a <eeprom_read_blraw+0x2>
    6b4e:	06 c0       	rjmp	.+12     	; 0x6b5c <eeprom_read_blraw+0x14>
    6b50:	f2 bd       	out	0x22, r31	; 34
    6b52:	e1 bd       	out	0x21, r30	; 33
    6b54:	f8 9a       	sbi	0x1f, 0	; 31
    6b56:	31 96       	adiw	r30, 0x01	; 1
    6b58:	00 b4       	in	r0, 0x20	; 32
    6b5a:	0d 92       	st	X+, r0
    6b5c:	41 50       	subi	r20, 0x01	; 1
    6b5e:	50 40       	sbci	r21, 0x00	; 0
    6b60:	b8 f7       	brcc	.-18     	; 0x6b50 <eeprom_read_blraw+0x8>
    6b62:	08 95       	ret

00006b64 <eeprom_read_byte>:
    6b64:	f9 99       	sbic	0x1f, 1	; 31
    6b66:	fe cf       	rjmp	.-4      	; 0x6b64 <eeprom_read_byte>
    6b68:	92 bd       	out	0x22, r25	; 34
    6b6a:	81 bd       	out	0x21, r24	; 33
    6b6c:	f8 9a       	sbi	0x1f, 0	; 31
    6b6e:	99 27       	eor	r25, r25
    6b70:	80 b5       	in	r24, 0x20	; 32
    6b72:	08 95       	ret

00006b74 <eeprom_write_block>:
    6b74:	dc 01       	movw	r26, r24
    6b76:	cb 01       	movw	r24, r22
    6b78:	02 c0       	rjmp	.+4      	; 0x6b7e <eeprom_write_block+0xa>
    6b7a:	2d 91       	ld	r18, X+
    6b7c:	05 d0       	rcall	.+10     	; 0x6b88 <eeprom_write_r18>
    6b7e:	41 50       	subi	r20, 0x01	; 1
    6b80:	50 40       	sbci	r21, 0x00	; 0
    6b82:	d8 f7       	brcc	.-10     	; 0x6b7a <eeprom_write_block+0x6>
    6b84:	08 95       	ret

00006b86 <eeprom_write_byte>:
    6b86:	26 2f       	mov	r18, r22

00006b88 <eeprom_write_r18>:
    6b88:	f9 99       	sbic	0x1f, 1	; 31
    6b8a:	fe cf       	rjmp	.-4      	; 0x6b88 <eeprom_write_r18>
    6b8c:	1f ba       	out	0x1f, r1	; 31
    6b8e:	92 bd       	out	0x22, r25	; 34
    6b90:	81 bd       	out	0x21, r24	; 33
    6b92:	20 bd       	out	0x20, r18	; 32
    6b94:	0f b6       	in	r0, 0x3f	; 63
    6b96:	f8 94       	cli
    6b98:	fa 9a       	sbi	0x1f, 2	; 31
    6b9a:	f9 9a       	sbi	0x1f, 1	; 31
    6b9c:	0f be       	out	0x3f, r0	; 63
    6b9e:	01 96       	adiw	r24, 0x01	; 1
    6ba0:	08 95       	ret

00006ba2 <__do_global_dtors>:
    6ba2:	12 e0       	ldi	r17, 0x02	; 2
    6ba4:	c9 e3       	ldi	r28, 0x39	; 57
    6ba6:	d2 e0       	ldi	r29, 0x02	; 2
    6ba8:	03 c0       	rjmp	.+6      	; 0x6bb0 <__do_global_dtors+0xe>
    6baa:	fe 01       	movw	r30, r28
    6bac:	5a d9       	rcall	.-3404   	; 0x5e62 <__tablejump2__>
    6bae:	21 96       	adiw	r28, 0x01	; 1
    6bb0:	cb 33       	cpi	r28, 0x3B	; 59
    6bb2:	d1 07       	cpc	r29, r17
    6bb4:	d1 f7       	brne	.-12     	; 0x6baa <__do_global_dtors+0x8>
    6bb6:	f8 94       	cli

00006bb8 <__stop_program>:
    6bb8:	ff cf       	rjmp	.-2      	; 0x6bb8 <__stop_program>
