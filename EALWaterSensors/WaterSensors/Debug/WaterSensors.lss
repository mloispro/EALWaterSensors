
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00006630  000066e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006630  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000394  008001d8  008001d8  000067bc  2**0
                  ALLOC
  3 .eeprom       0000005e  00810000  00810000  000067bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000681a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006878  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000010d8  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002a1ea  00000000  00000000  00007990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000053a3  00000000  00000000  00031b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c04e  00000000  00000000  00036f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003354  00000000  00000000  00042f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000136f0  00000000  00000000  000462c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a0fd  00000000  00000000  000599b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  00063aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00012b6c  00000000  00000000  00064ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	31 c2       	rjmp	.+1122   	; 0x464 <__dtors_end>
       2:	00 00       	nop
       4:	57 c2       	rjmp	.+1198   	; 0x4b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c2       	rjmp	.+1194   	; 0x4b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c6       	rjmp	.+3162   	; 0xc68 <__vector_3>
       e:	00 00       	nop
      10:	2b c6       	rjmp	.+3158   	; 0xc68 <__vector_3>
      12:	00 00       	nop
      14:	29 c6       	rjmp	.+3154   	; 0xc68 <__vector_3>
      16:	00 00       	nop
      18:	4d c2       	rjmp	.+1178   	; 0x4b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c2       	rjmp	.+1174   	; 0x4b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c2       	rjmp	.+1170   	; 0x4b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c2       	rjmp	.+1166   	; 0x4b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c2       	rjmp	.+1162   	; 0x4b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c2       	rjmp	.+1158   	; 0x4b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c2       	rjmp	.+1154   	; 0x4b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c2       	rjmp	.+1150   	; 0x4b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c2       	rjmp	.+1146   	; 0x4b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c2       	rjmp	.+1142   	; 0x4b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__vector_16>
      44:	37 c2       	rjmp	.+1134   	; 0x4b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__vector_18>
      4c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__vector_19>
      50:	31 c2       	rjmp	.+1122   	; 0x4b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	2f c2       	rjmp	.+1118   	; 0x4b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c2       	rjmp	.+1114   	; 0x4b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c2       	rjmp	.+1110   	; 0x4b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c2       	rjmp	.+1296   	; 0x572 <__vector_24>
      62:	00 00       	nop
      64:	27 c2       	rjmp	.+1102   	; 0x4b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf 03       	fmulsu	r19, r23
      6a:	c2 03       	fmuls	r20, r18
      6c:	c2 03       	fmuls	r20, r18
      6e:	c2 03       	fmuls	r20, r18
      70:	c2 03       	fmuls	r20, r18
      72:	c2 03       	fmuls	r20, r18
      74:	c2 03       	fmuls	r20, r18
      76:	c2 03       	fmuls	r20, r18
      78:	d9 02       	muls	r29, r25
      7a:	c2 03       	fmuls	r20, r18
      7c:	c2 03       	fmuls	r20, r18
      7e:	c2 03       	fmuls	r20, r18
      80:	c2 03       	fmuls	r20, r18
      82:	c2 03       	fmuls	r20, r18
      84:	c2 03       	fmuls	r20, r18
      86:	c2 03       	fmuls	r20, r18
      88:	d9 02       	muls	r29, r25
      8a:	c2 03       	fmuls	r20, r18
      8c:	c2 03       	fmuls	r20, r18
      8e:	c2 03       	fmuls	r20, r18
      90:	c2 03       	fmuls	r20, r18
      92:	c2 03       	fmuls	r20, r18
      94:	c2 03       	fmuls	r20, r18
      96:	c2 03       	fmuls	r20, r18
      98:	e1 02       	muls	r30, r17
      9a:	c2 03       	fmuls	r20, r18
      9c:	c2 03       	fmuls	r20, r18
      9e:	c2 03       	fmuls	r20, r18
      a0:	c2 03       	fmuls	r20, r18
      a2:	c2 03       	fmuls	r20, r18
      a4:	c2 03       	fmuls	r20, r18
      a6:	c2 03       	fmuls	r20, r18
      a8:	06 03       	mulsu	r16, r22
      aa:	c2 03       	fmuls	r20, r18
      ac:	c2 03       	fmuls	r20, r18
      ae:	c2 03       	fmuls	r20, r18
      b0:	c2 03       	fmuls	r20, r18
      b2:	c2 03       	fmuls	r20, r18
      b4:	c2 03       	fmuls	r20, r18
      b6:	c2 03       	fmuls	r20, r18
      b8:	e1 02       	muls	r30, r17
      ba:	c2 03       	fmuls	r20, r18
      bc:	c2 03       	fmuls	r20, r18
      be:	c2 03       	fmuls	r20, r18
      c0:	c2 03       	fmuls	r20, r18
      c2:	c2 03       	fmuls	r20, r18
      c4:	c2 03       	fmuls	r20, r18
      c6:	c2 03       	fmuls	r20, r18
      c8:	0b 03       	fmul	r16, r19
      ca:	c2 03       	fmuls	r20, r18
      cc:	c2 03       	fmuls	r20, r18
      ce:	c2 03       	fmuls	r20, r18
      d0:	c2 03       	fmuls	r20, r18
      d2:	c2 03       	fmuls	r20, r18
      d4:	c2 03       	fmuls	r20, r18
      d6:	c2 03       	fmuls	r20, r18
      d8:	10 03       	mulsu	r17, r16
      da:	c2 03       	fmuls	r20, r18
      dc:	c2 03       	fmuls	r20, r18
      de:	c2 03       	fmuls	r20, r18
      e0:	c2 03       	fmuls	r20, r18
      e2:	c2 03       	fmuls	r20, r18
      e4:	c2 03       	fmuls	r20, r18
      e6:	c2 03       	fmuls	r20, r18
      e8:	21 03       	mulsu	r18, r17
      ea:	c2 03       	fmuls	r20, r18
      ec:	c2 03       	fmuls	r20, r18
      ee:	c2 03       	fmuls	r20, r18
      f0:	c2 03       	fmuls	r20, r18
      f2:	c2 03       	fmuls	r20, r18
      f4:	c2 03       	fmuls	r20, r18
      f6:	c2 03       	fmuls	r20, r18
      f8:	4a 03       	fmul	r20, r18
      fa:	c2 03       	fmuls	r20, r18
      fc:	c2 03       	fmuls	r20, r18
      fe:	c2 03       	fmuls	r20, r18
     100:	c2 03       	fmuls	r20, r18
     102:	c2 03       	fmuls	r20, r18
     104:	c2 03       	fmuls	r20, r18
     106:	c2 03       	fmuls	r20, r18
     108:	15 03       	mulsu	r17, r21
     10a:	c2 03       	fmuls	r20, r18
     10c:	c2 03       	fmuls	r20, r18
     10e:	c2 03       	fmuls	r20, r18
     110:	c2 03       	fmuls	r20, r18
     112:	c2 03       	fmuls	r20, r18
     114:	c2 03       	fmuls	r20, r18
     116:	c2 03       	fmuls	r20, r18
     118:	2f 03       	fmul	r18, r23
     11a:	c2 03       	fmuls	r20, r18
     11c:	c2 03       	fmuls	r20, r18
     11e:	c2 03       	fmuls	r20, r18
     120:	c2 03       	fmuls	r20, r18
     122:	c2 03       	fmuls	r20, r18
     124:	c2 03       	fmuls	r20, r18
     126:	c2 03       	fmuls	r20, r18
     128:	4c 03       	fmul	r20, r20
     12a:	c2 03       	fmuls	r20, r18
     12c:	c2 03       	fmuls	r20, r18
     12e:	c2 03       	fmuls	r20, r18
     130:	c2 03       	fmuls	r20, r18
     132:	c2 03       	fmuls	r20, r18
     134:	c2 03       	fmuls	r20, r18
     136:	c2 03       	fmuls	r20, r18
     138:	4c 03       	fmul	r20, r20
     13a:	c2 03       	fmuls	r20, r18
     13c:	c2 03       	fmuls	r20, r18
     13e:	c2 03       	fmuls	r20, r18
     140:	c2 03       	fmuls	r20, r18
     142:	c2 03       	fmuls	r20, r18
     144:	c2 03       	fmuls	r20, r18
     146:	c2 03       	fmuls	r20, r18
     148:	4c 03       	fmul	r20, r20
     14a:	c2 03       	fmuls	r20, r18
     14c:	c2 03       	fmuls	r20, r18
     14e:	c2 03       	fmuls	r20, r18
     150:	c2 03       	fmuls	r20, r18
     152:	c2 03       	fmuls	r20, r18
     154:	c2 03       	fmuls	r20, r18
     156:	c2 03       	fmuls	r20, r18
     158:	4c 03       	fmul	r20, r20
     15a:	c2 03       	fmuls	r20, r18
     15c:	c2 03       	fmuls	r20, r18
     15e:	c2 03       	fmuls	r20, r18
     160:	c2 03       	fmuls	r20, r18
     162:	c2 03       	fmuls	r20, r18
     164:	c2 03       	fmuls	r20, r18
     166:	c2 03       	fmuls	r20, r18
     168:	55 03       	mulsu	r21, r21
     16a:	c2 03       	fmuls	r20, r18
     16c:	c2 03       	fmuls	r20, r18
     16e:	c2 03       	fmuls	r20, r18
     170:	c2 03       	fmuls	r20, r18
     172:	c2 03       	fmuls	r20, r18
     174:	c2 03       	fmuls	r20, r18
     176:	c2 03       	fmuls	r20, r18
     178:	86 03       	fmuls	r16, r22
     17a:	c2 03       	fmuls	r20, r18
     17c:	c2 03       	fmuls	r20, r18
     17e:	c2 03       	fmuls	r20, r18
     180:	c2 03       	fmuls	r20, r18
     182:	c2 03       	fmuls	r20, r18
     184:	c2 03       	fmuls	r20, r18
     186:	c2 03       	fmuls	r20, r18
     188:	55 03       	mulsu	r21, r21
     18a:	c2 03       	fmuls	r20, r18
     18c:	c2 03       	fmuls	r20, r18
     18e:	c2 03       	fmuls	r20, r18
     190:	c2 03       	fmuls	r20, r18
     192:	c2 03       	fmuls	r20, r18
     194:	c2 03       	fmuls	r20, r18
     196:	c2 03       	fmuls	r20, r18
     198:	86 03       	fmuls	r16, r22
     19a:	c2 03       	fmuls	r20, r18
     19c:	c2 03       	fmuls	r20, r18
     19e:	c2 03       	fmuls	r20, r18
     1a0:	c2 03       	fmuls	r20, r18
     1a2:	c2 03       	fmuls	r20, r18
     1a4:	c2 03       	fmuls	r20, r18
     1a6:	c2 03       	fmuls	r20, r18
     1a8:	6d 03       	fmul	r22, r21
     1aa:	c2 03       	fmuls	r20, r18
     1ac:	c2 03       	fmuls	r20, r18
     1ae:	c2 03       	fmuls	r20, r18
     1b0:	c2 03       	fmuls	r20, r18
     1b2:	c2 03       	fmuls	r20, r18
     1b4:	c2 03       	fmuls	r20, r18
     1b6:	c2 03       	fmuls	r20, r18
     1b8:	8a 03       	fmulsu	r16, r18
     1ba:	c2 03       	fmuls	r20, r18
     1bc:	c2 03       	fmuls	r20, r18
     1be:	c2 03       	fmuls	r20, r18
     1c0:	c2 03       	fmuls	r20, r18
     1c2:	c2 03       	fmuls	r20, r18
     1c4:	c2 03       	fmuls	r20, r18
     1c6:	c2 03       	fmuls	r20, r18
     1c8:	8a 03       	fmulsu	r16, r18
     1ca:	c2 03       	fmuls	r20, r18
     1cc:	c2 03       	fmuls	r20, r18
     1ce:	c2 03       	fmuls	r20, r18
     1d0:	c2 03       	fmuls	r20, r18
     1d2:	c2 03       	fmuls	r20, r18
     1d4:	c2 03       	fmuls	r20, r18
     1d6:	c2 03       	fmuls	r20, r18
     1d8:	9f 03       	fmulsu	r17, r23
     1da:	c2 03       	fmuls	r20, r18
     1dc:	c2 03       	fmuls	r20, r18
     1de:	c2 03       	fmuls	r20, r18
     1e0:	c2 03       	fmuls	r20, r18
     1e2:	c2 03       	fmuls	r20, r18
     1e4:	c2 03       	fmuls	r20, r18
     1e6:	c2 03       	fmuls	r20, r18
     1e8:	b9 03       	fmulsu	r19, r17
     1ea:	c2 03       	fmuls	r20, r18
     1ec:	c2 03       	fmuls	r20, r18
     1ee:	c2 03       	fmuls	r20, r18
     1f0:	c2 03       	fmuls	r20, r18
     1f2:	c2 03       	fmuls	r20, r18
     1f4:	c2 03       	fmuls	r20, r18
     1f6:	c2 03       	fmuls	r20, r18
     1f8:	b9 03       	fmulsu	r19, r17

000001fa <__trampolines_end>:
     1fa:	4e 41       	sbci	r20, 0x1E	; 30
     1fc:	4e 49       	Address 0x000001fc is out of bounds.
.word	0xffff	; ????

000001fd <pstr_inity>:
     1fd:	49 4e 49 54 59                                      INITY

00000202 <pstr_inf>:
     202:	49 4e 46                                            INF

00000205 <pwr_m10>:
     205:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     215:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021d <pwr_p10>:
     21d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     23d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     24d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     25d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     26d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     27d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     28d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     29d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2ad:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2bd:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2cd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2dd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2ed:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2fd:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     30d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     31d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     32d:	3d 27                                               ='

0000032f <_ZZN7LCDBase9ClearLineEsE3__c>:
     32f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000340 <_ZZN7MathExt16CalculateAverageEP6EEWrapIiEiE3__c>:
     340:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     350:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     360:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

0000036a <_ZZN8PHSensor10getPHValueEvE3__c>:
     36a:	50 48 20 52 61 77 20 52 65 61 64 69 6e 67 3a 20     PH Raw Reading: 
	...

0000037b <_ZZN9TDSSensor11getTDSValueEvE3__c>:
     37b:	54 44 53 20 52 61 77 20 52 65 61 64 69 6e 67 3a     TDS Raw Reading:
     38b:	20 00                                                .

0000038d <_ZZN15WaterSensorWire5SetupEvE3__c>:
     38d:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

00000396 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     396:	63 6d 64 3a 20 00                                   cmd: .

0000039c <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     39c:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

000003a6 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     3a6:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     3b6:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     3c6:	76 65 64 3a 20 00                                   ved: .

000003cc <_ZZN15WaterSensorWire7RequestEvE3__c>:
     3cc:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     3dc:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

000003e7 <_ZZN6Sketch11AsyncDoWorkEvE3__c>:
     3e7:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     3f7:	64 00                                               d.

000003f9 <digital_pin_to_timer_PGM>:
     3f9:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     409:	00 00 00 00                                         ....

0000040d <digital_pin_to_bit_mask_PGM>:
     40d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     41d:	04 08 10 20                                         ... 

00000421 <digital_pin_to_port_PGM>:
     421:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     431:	03 03 03 03                                         ....

00000435 <port_to_input_PGM>:
     435:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000043f <port_to_output_PGM>:
     43f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000449 <port_to_mode_PGM>:
     449:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000454 <__ctors_start>:
     454:	ec 05       	cpc	r30, r12
     456:	07 0b       	sbc	r16, r23
     458:	2e 1f       	adc	r18, r30
     45a:	e6 1f       	adc	r30, r22
     45c:	8a 21       	and	r24, r10
     45e:	3b 25       	eor	r19, r11

00000460 <__ctors_end>:
     460:	3c 1f       	adc	r19, r28
     462:	f4 1f       	adc	r31, r20

00000464 <__dtors_end>:
     464:	11 24       	eor	r1, r1
     466:	1f be       	out	0x3f, r1	; 63
     468:	cf ef       	ldi	r28, 0xFF	; 255
     46a:	d8 e0       	ldi	r29, 0x08	; 8
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	cd bf       	out	0x3d, r28	; 61

00000470 <__do_copy_data>:
     470:	11 e0       	ldi	r17, 0x01	; 1
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b1 e0       	ldi	r27, 0x01	; 1
     476:	e0 e3       	ldi	r30, 0x30	; 48
     478:	f6 e6       	ldi	r31, 0x66	; 102
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__do_copy_data+0x10>
     47c:	05 90       	lpm	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	a8 3d       	cpi	r26, 0xD8	; 216
     482:	b1 07       	cpc	r27, r17
     484:	d9 f7       	brne	.-10     	; 0x47c <__do_copy_data+0xc>

00000486 <__do_clear_bss>:
     486:	25 e0       	ldi	r18, 0x05	; 5
     488:	a8 ed       	ldi	r26, 0xD8	; 216
     48a:	b1 e0       	ldi	r27, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <.do_clear_bss_start>

0000048e <.do_clear_bss_loop>:
     48e:	1d 92       	st	X+, r1

00000490 <.do_clear_bss_start>:
     490:	ac 36       	cpi	r26, 0x6C	; 108
     492:	b2 07       	cpc	r27, r18
     494:	e1 f7       	brne	.-8      	; 0x48e <.do_clear_bss_loop>

00000496 <__do_global_ctors>:
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	c0 e3       	ldi	r28, 0x30	; 48
     49a:	d2 e0       	ldi	r29, 0x02	; 2
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__do_global_ctors+0x10>
     49e:	21 97       	sbiw	r28, 0x01	; 1
     4a0:	fe 01       	movw	r30, r28
     4a2:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__tablejump2__>
     4a6:	ca 32       	cpi	r28, 0x2A	; 42
     4a8:	d1 07       	cpc	r29, r17
     4aa:	c9 f7       	brne	.-14     	; 0x49e <__do_global_ctors+0x8>
     4ac:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <main>
     4b0:	0c 94 0c 33 	jmp	0x6618	; 0x6618 <__do_global_dtors>

000004b4 <__bad_interrupt>:
     4b4:	a5 cd       	rjmp	.-1206   	; 0x0 <__vectors>

000004b6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4b6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_sendStop>
     4c0:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <twi_inRepStart>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	82 e1       	ldi	r24, 0x12	; 18
     4c8:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	83 e1       	ldi	r24, 0x13	; 19
     4d0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
     4d4:	e9 eb       	ldi	r30, 0xB9	; 185
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	8e 7f       	andi	r24, 0xFE	; 254
     4dc:	80 83       	st	Z, r24
     4de:	80 81       	ld	r24, Z
     4e0:	8d 7f       	andi	r24, 0xFD	; 253
     4e2:	80 83       	st	Z, r24
     4e4:	88 e4       	ldi	r24, 0x48	; 72
     4e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4f0:	08 95       	ret

000004f2 <twi_setAddress>:
     4f2:	88 0f       	add	r24, r24
     4f4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     4f8:	08 95       	ret

000004fa <twi_transmit>:
     4fa:	61 32       	cpi	r22, 0x21	; 33
     4fc:	c8 f4       	brcc	.+50     	; 0x530 <twi_transmit+0x36>
     4fe:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <twi_state>
     502:	24 30       	cpi	r18, 0x04	; 4
     504:	b9 f4       	brne	.+46     	; 0x534 <twi_transmit+0x3a>
     506:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <twi_txBufferLength>
     50a:	66 23       	and	r22, r22
     50c:	a9 f0       	breq	.+42     	; 0x538 <twi_transmit+0x3e>
     50e:	fc 01       	movw	r30, r24
     510:	ac ef       	ldi	r26, 0xFC	; 252
     512:	b1 e0       	ldi	r27, 0x01	; 1
     514:	61 50       	subi	r22, 0x01	; 1
     516:	26 2f       	mov	r18, r22
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	28 0f       	add	r18, r24
     520:	39 1f       	adc	r19, r25
     522:	91 91       	ld	r25, Z+
     524:	9d 93       	st	X+, r25
     526:	e2 17       	cp	r30, r18
     528:	f3 07       	cpc	r31, r19
     52a:	d9 f7       	brne	.-10     	; 0x522 <twi_transmit+0x28>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	08 95       	ret
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	08 95       	ret
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	08 95       	ret

0000053c <twi_attachSlaveRxEvent>:
     53c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <twi_onSlaveReceive+0x1>
     540:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <twi_onSlaveReceive>
     544:	08 95       	ret

00000546 <twi_attachSlaveTxEvent>:
     546:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <twi_onSlaveTransmit+0x1>
     54a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_onSlaveTransmit>
     54e:	08 95       	ret

00000550 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     550:	85 ed       	ldi	r24, 0xD5	; 213
     552:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     556:	ec eb       	ldi	r30, 0xBC	; 188
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	84 fd       	sbrc	r24, 4
     55e:	fd cf       	rjmp	.-6      	; 0x55a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     560:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     564:	08 95       	ret

00000566 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     566:	85 ec       	ldi	r24, 0xC5	; 197
     568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     56c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     570:	08 95       	ret

00000572 <__vector_24>:
}

ISR(TWI_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
  switch(TW_STATUS){
     594:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     598:	e8 2f       	mov	r30, r24
     59a:	e8 7f       	andi	r30, 0xF8	; 248
     59c:	8e 2f       	mov	r24, r30
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	89 3c       	cpi	r24, 0xC9	; 201
     5a2:	91 05       	cpc	r25, r1
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__vector_24+0x36>
     5a6:	ee c0       	rjmp	.+476    	; 0x784 <__vector_24+0x212>
     5a8:	fc 01       	movw	r30, r24
     5aa:	ec 5c       	subi	r30, 0xCC	; 204
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5b2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <twi_slarw>
     5b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5ba:	85 ec       	ldi	r24, 0xC5	; 197
     5bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5c0:	e1 c0       	rjmp	.+450    	; 0x784 <__vector_24+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5c2:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
     5c6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
     5ca:	98 17       	cp	r25, r24
     5cc:	80 f4       	brcc	.+32     	; 0x5ee <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5ce:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	8e 0f       	add	r24, r30
     5d6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	e2 5e       	subi	r30, 0xE2	; 226
     5de:	fd 4f       	sbci	r31, 0xFD	; 253
     5e0:	80 81       	ld	r24, Z
     5e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5e6:	85 ec       	ldi	r24, 0xC5	; 197
     5e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5ec:	cb c0       	rjmp	.+406    	; 0x784 <__vector_24+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     5ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_sendStop>
     5f2:	88 23       	and	r24, r24
     5f4:	11 f0       	breq	.+4      	; 0x5fa <__vector_24+0x88>
          twi_stop();
     5f6:	ac df       	rcall	.-168    	; 0x550 <twi_stop>
     5f8:	c5 c0       	rjmp	.+394    	; 0x784 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     600:	84 ea       	ldi	r24, 0xA4	; 164
     602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     606:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     60a:	bc c0       	rjmp	.+376    	; 0x784 <__vector_24+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_stop();
     612:	9e df       	rcall	.-196    	; 0x550 <twi_stop>
      break;
     614:	b7 c0       	rjmp	.+366    	; 0x784 <__vector_24+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_stop();
     61c:	99 df       	rcall	.-206    	; 0x550 <twi_stop>
      break;
     61e:	b2 c0       	rjmp	.+356    	; 0x784 <__vector_24+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     620:	88 e3       	ldi	r24, 0x38	; 56
     622:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
      twi_releaseBus();
     626:	9f df       	rcall	.-194    	; 0x566 <twi_releaseBus>
      break;
     628:	ad c0       	rjmp	.+346    	; 0x784 <__vector_24+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     62a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8e 0f       	add	r24, r30
     632:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     636:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e2 5e       	subi	r30, 0xE2	; 226
     63e:	fd 4f       	sbci	r31, 0xFD	; 253
     640:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     642:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <twi_masterBufferIndex>
     646:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <twi_masterBufferLength>
     64a:	98 17       	cp	r25, r24
     64c:	20 f4       	brcc	.+8      	; 0x656 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     64e:	85 ec       	ldi	r24, 0xC5	; 197
     650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     654:	97 c0       	rjmp	.+302    	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     656:	85 e8       	ldi	r24, 0x85	; 133
     658:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     65c:	93 c0       	rjmp	.+294    	; 0x784 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     65e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <twi_masterBufferIndex>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8e 0f       	add	r24, r30
     666:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_masterBufferIndex>
     66a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e2 5e       	subi	r30, 0xE2	; 226
     672:	fd 4f       	sbci	r31, 0xFD	; 253
     674:	80 83       	st	Z, r24
	if (twi_sendStop)
     676:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_sendStop>
     67a:	88 23       	and	r24, r24
     67c:	11 f0       	breq	.+4      	; 0x682 <__vector_24+0x110>
          twi_stop();
     67e:	68 df       	rcall	.-304    	; 0x550 <twi_stop>
     680:	81 c0       	rjmp	.+258    	; 0x784 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     688:	84 ea       	ldi	r24, 0xA4	; 164
     68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     68e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
     692:	78 c0       	rjmp	.+240    	; 0x784 <__vector_24+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     694:	5d df       	rcall	.-326    	; 0x550 <twi_stop>
      break;
     696:	76 c0       	rjmp	.+236    	; 0x784 <__vector_24+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     69e:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6a2:	85 ec       	ldi	r24, 0xC5	; 197
     6a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6a8:	6d c0       	rjmp	.+218    	; 0x784 <__vector_24+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6aa:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6ae:	80 32       	cpi	r24, 0x20	; 32
     6b0:	80 f4       	brcc	.+32     	; 0x6d2 <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     6b2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	8e 0f       	add	r24, r30
     6ba:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <twi_rxBufferIndex>
     6be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	e6 52       	subi	r30, 0x26	; 38
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6ca:	85 ec       	ldi	r24, 0xC5	; 197
     6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d0:	59 c0       	rjmp	.+178    	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     6d2:	85 e8       	ldi	r24, 0x85	; 133
     6d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d8:	55 c0       	rjmp	.+170    	; 0x784 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6da:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6de:	80 32       	cpi	r24, 0x20	; 32
     6e0:	30 f4       	brcc	.+12     	; 0x6ee <__vector_24+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6e2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e6 52       	subi	r30, 0x26	; 38
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     6ee:	30 df       	rcall	.-416    	; 0x550 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6f0:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <twi_rxBufferIndex>
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <twi_onSlaveReceive>
     6fa:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <twi_onSlaveReceive+0x1>
     6fe:	8a ed       	ldi	r24, 0xDA	; 218
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     704:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     708:	2e df       	rcall	.-420    	; 0x566 <twi_releaseBus>
      break;
     70a:	3c c0       	rjmp	.+120    	; 0x784 <__vector_24+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     70c:	85 e8       	ldi	r24, 0x85	; 133
     70e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     712:	38 c0       	rjmp	.+112    	; 0x784 <__vector_24+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     71a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     71e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     722:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <twi_onSlaveTransmit>
     726:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <twi_onSlaveTransmit+0x1>
     72a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     72c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
     730:	81 11       	cpse	r24, r1
     732:	05 c0       	rjmp	.+10     	; 0x73e <__vector_24+0x1cc>
        twi_txBufferLength = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     73a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     73e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <twi_txBufferIndex>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	8e 0f       	add	r24, r30
     746:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <twi_txBufferIndex>
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	e4 50       	subi	r30, 0x04	; 4
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	80 81       	ld	r24, Z
     752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     756:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <twi_txBufferIndex>
     75a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <twi_txBufferLength>
     75e:	98 17       	cp	r25, r24
     760:	20 f4       	brcc	.+8      	; 0x76a <__vector_24+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     762:	85 ec       	ldi	r24, 0xC5	; 197
     764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     768:	0d c0       	rjmp	.+26     	; 0x784 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     76a:	85 e8       	ldi	r24, 0x85	; 133
     76c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     770:	09 c0       	rjmp	.+18     	; 0x784 <__vector_24+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     772:	85 ec       	ldi	r24, 0xC5	; 197
     774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     778:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_state>
      break;
     77c:	03 c0       	rjmp	.+6      	; 0x784 <__vector_24+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     77e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
      twi_stop();
     782:	e6 de       	rcall	.-564    	; 0x550 <twi_stop>
      break;
  }
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     7a6:	a4 e0       	ldi	r26, 0x04	; 4
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	e9 ed       	ldi	r30, 0xD9	; 217
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	7c 83       	std	Y+4, r23	; 0x04
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	2b 81       	ldd	r18, Y+3	; 0x03
     7c0:	3c 81       	ldd	r19, Y+4	; 0x04
     7c2:	fc 01       	movw	r30, r24
     7c4:	33 83       	std	Z+3, r19	; 0x03
     7c6:	22 83       	std	Z+2, r18	; 0x02
     7c8:	24 96       	adiw	r28, 0x04	; 4
     7ca:	e2 e0       	ldi	r30, 0x02	; 2
     7cc:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000007d0 <_ZN5PrintC1Ev>:
     7d0:	a2 e0       	ldi	r26, 0x02	; 2
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	ee ee       	ldi	r30, 0xEE	; 238
     7d6:	f3 e0       	ldi	r31, 0x03	; 3
     7d8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	24 ed       	ldi	r18, 0xD4	; 212
     7e6:	31 e0       	ldi	r19, 0x01	; 1
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	fc 01       	movw	r30, r24
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	22 96       	adiw	r28, 0x02	; 2
     7fa:	e2 e0       	ldi	r30, 0x02	; 2
     7fc:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000800 <_ZN6StreamC1Ev>:
     800:	a2 e0       	ldi	r26, 0x02	; 2
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e6 e0       	ldi	r30, 0x06	; 6
     806:	f4 e0       	ldi	r31, 0x04	; 4
     808:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	dd df       	rcall	.-70     	; 0x7d0 <_ZN5PrintC1Ev>
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	25 e7       	ldi	r18, 0x75	; 117
     81c:	31 e0       	ldi	r19, 0x01	; 1
     81e:	fc 01       	movw	r30, r24
     820:	31 83       	std	Z+1, r19	; 0x01
     822:	20 83       	st	Z, r18
     824:	29 81       	ldd	r18, Y+1	; 0x01
     826:	3a 81       	ldd	r19, Y+2	; 0x02
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	84 83       	std	Z+4, r24	; 0x04
     834:	95 83       	std	Z+5, r25	; 0x05
     836:	a6 83       	std	Z+6, r26	; 0x06
     838:	b7 83       	std	Z+7, r27	; 0x07
     83a:	22 96       	adiw	r28, 0x02	; 2
     83c:	e2 e0       	ldi	r30, 0x02	; 2
     83e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000842 <_ZN7TwoWireC1Ev>:
     842:	a2 e0       	ldi	r26, 0x02	; 2
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e7 e2       	ldi	r30, 0x27	; 39
     848:	f4 e0       	ldi	r31, 0x04	; 4
     84a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	d4 df       	rcall	.-88     	; 0x800 <_ZN6StreamC1Ev>
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	25 e6       	ldi	r18, 0x65	; 101
     85e:	31 e0       	ldi	r19, 0x01	; 1
     860:	fc 01       	movw	r30, r24
     862:	31 83       	std	Z+1, r19	; 0x01
     864:	20 83       	st	Z, r18
     866:	22 96       	adiw	r28, 0x02	; 2
     868:	e2 e0       	ldi	r30, 0x02	; 2
     86a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000086e <_ZN7TwoWire5beginEv>:
     86e:	a2 e0       	ldi	r26, 0x02	; 2
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     882:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     886:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     88a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     88e:	13 de       	rcall	.-986    	; 0x4b6 <twi_init>
     890:	22 96       	adiw	r28, 0x02	; 2
     892:	e2 e0       	ldi	r30, 0x02	; 2
     894:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000898 <_ZN7TwoWire5beginEh>:
     898:	a3 e0       	ldi	r26, 0x03	; 3
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	e2 e5       	ldi	r30, 0x52	; 82
     89e:	f4 e0       	ldi	r31, 0x04	; 4
     8a0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	6b 83       	std	Y+3, r22	; 0x03
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	22 de       	rcall	.-956    	; 0x4f2 <twi_setAddress>
     8ae:	81 e9       	ldi	r24, 0x91	; 145
     8b0:	95 e0       	ldi	r25, 0x05	; 5
     8b2:	49 de       	rcall	.-878    	; 0x546 <twi_attachSlaveTxEvent>
     8b4:	8b e4       	ldi	r24, 0x4B	; 75
     8b6:	95 e0       	ldi	r25, 0x05	; 5
     8b8:	41 de       	rcall	.-894    	; 0x53c <twi_attachSlaveRxEvent>
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	9a 81       	ldd	r25, Y+2	; 0x02
     8be:	d7 df       	rcall	.-82     	; 0x86e <_ZN7TwoWire5beginEv>
     8c0:	23 96       	adiw	r28, 0x03	; 3
     8c2:	e2 e0       	ldi	r30, 0x02	; 2
     8c4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000008c8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8c8:	a3 e0       	ldi	r26, 0x03	; 3
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	ea e6       	ldi	r30, 0x6A	; 106
     8ce:	f4 e0       	ldi	r31, 0x04	; 4
     8d0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     8da:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     8de:	88 23       	and	r24, r24
     8e0:	f9 f0       	breq	.+62     	; 0x920 <__stack+0x21>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8e2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     8e6:	80 32       	cpi	r24, 0x20	; 32
     8e8:	40 f0       	brcs	.+16     	; 0x8fa <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	59 df       	rcall	.-334    	; 0x7a6 <_ZN5Print13setWriteErrorEi>
      return 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	19 c0       	rjmp	.+50     	; 0x92c <__stack+0x2d>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     8fa:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	2b 81       	ldd	r18, Y+3	; 0x03
     904:	88 59       	subi	r24, 0x98	; 152
     906:	9d 4f       	sbci	r25, 0xFD	; 253
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
    ++txBufferIndex;
     90c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     916:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
     91a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     920:	ce 01       	movw	r24, r28
     922:	03 96       	adiw	r24, 0x03	; 3
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	e9 dd       	rcall	.-1070   	; 0x4fa <twi_transmit>
  }
  return 1;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
}
     92c:	23 96       	adiw	r28, 0x03	; 3
     92e:	e2 e0       	ldi	r30, 0x02	; 2
     930:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000934 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     934:	a8 e0       	ldi	r26, 0x08	; 8
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	8b 83       	std	Y+3, r24	; 0x03
     944:	7e 83       	std	Y+6, r23	; 0x06
     946:	6d 83       	std	Y+5, r22	; 0x05
     948:	58 87       	std	Y+8, r21	; 0x08
     94a:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     94c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <_ZN7TwoWire12transmittingE>
     950:	88 23       	and	r24, r24
     952:	29 f1       	breq	.+74     	; 0x99e <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     954:	1a 82       	std	Y+2, r1	; 0x02
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	1a c0       	rjmp	.+52     	; 0x98e <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	fc 01       	movw	r30, r24
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	4d 81       	ldd	r20, Y+5	; 0x05
     96c:	5e 81       	ldd	r21, Y+6	; 0x06
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	84 0f       	add	r24, r20
     974:	95 1f       	adc	r25, r21
     976:	fc 01       	movw	r30, r24
     978:	40 81       	ld	r20, Z
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	64 2f       	mov	r22, r20
     980:	f9 01       	movw	r30, r18
     982:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	3a 81       	ldd	r19, Y+2	; 0x02
     992:	8f 81       	ldd	r24, Y+7	; 0x07
     994:	98 85       	ldd	r25, Y+8	; 0x08
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	f8 f2       	brcs	.-66     	; 0x95a <_ZN7TwoWire5writeEPKhj+0x26>
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	9e 81       	ldd	r25, Y+6	; 0x06
     9a4:	62 2f       	mov	r22, r18
     9a6:	a9 dd       	rcall	.-1198   	; 0x4fa <twi_transmit>
  }
  return quantity;
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
}
     9ac:	28 96       	adiw	r28, 0x08	; 8
     9ae:	e2 e0       	ldi	r30, 0x02	; 2
     9b0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000009b4 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     9b4:	a2 e0       	ldi	r26, 0x02	; 2
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e0 ee       	ldi	r30, 0xE0	; 224
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     9c4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	48 1b       	sub	r20, r24
     9d8:	59 0b       	sbc	r21, r25
     9da:	ca 01       	movw	r24, r20
}
     9dc:	22 96       	adiw	r28, 0x02	; 2
     9de:	e2 e0       	ldi	r30, 0x02	; 2
     9e0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000009e4 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     9e4:	a4 e0       	ldi	r26, 0x04	; 4
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e8 ef       	ldi	r30, 0xF8	; 248
     9ea:	f4 e0       	ldi	r31, 0x04	; 4
     9ec:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     9fc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a00:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     a04:	98 17       	cp	r25, r24
     a06:	88 f4       	brcc	.+34     	; 0xa2a <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     a08:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	8a 5b       	subi	r24, 0xBA	; 186
     a12:	9d 4f       	sbci	r25, 0xFD	; 253
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	88 2f       	mov	r24, r24
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     a20:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a2e:	24 96       	adiw	r28, 0x04	; 4
     a30:	e2 e0       	ldi	r30, 0x02	; 2
     a32:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000a36 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     a36:	a4 e0       	ldi	r26, 0x04	; 4
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e1 e2       	ldi	r30, 0x21	; 33
     a3c:	f5 e0       	ldi	r31, 0x05	; 5
     a3e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     a4e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a52:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     a56:	98 17       	cp	r25, r24
     a58:	60 f4       	brcc	.+24     	; 0xa72 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     a5a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	8a 5b       	subi	r24, 0xBA	; 186
     a64:	9d 4f       	sbci	r25, 0xFD	; 253
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	9a 83       	std	Y+2, r25	; 0x02
     a70:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a76:	24 96       	adiw	r28, 0x04	; 4
     a78:	e2 e0       	ldi	r30, 0x02	; 2
     a7a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000a7e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a7e:	a2 e0       	ldi	r26, 0x02	; 2
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     a8e:	22 96       	adiw	r28, 0x02	; 2
     a90:	e2 e0       	ldi	r30, 0x02	; 2
     a92:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000a96 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     a96:	a5 e0       	ldi	r26, 0x05	; 5
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e1 e5       	ldi	r30, 0x51	; 81
     a9c:	f5 e0       	ldi	r31, 0x05	; 5
     a9e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	7d 83       	std	Y+5, r23	; 0x05
     aa8:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     aaa:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     aae:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     ab2:	89 2b       	or	r24, r25
     ab4:	09 f4       	brne	.+2      	; 0xab8 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     ab6:	31 c0       	rjmp	.+98     	; 0xb1a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     ab8:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
     abc:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
     ac0:	98 17       	cp	r25, r24
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     ac4:	2a c0       	rjmp	.+84     	; 0xb1a <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	13 c0       	rjmp	.+38     	; 0xaf0 <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	22 2f       	mov	r18, r18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a 81       	ldd	r20, Y+2	; 0x02
     ad8:	5b 81       	ldd	r21, Y+3	; 0x03
     ada:	24 0f       	add	r18, r20
     adc:	35 1f       	adc	r19, r21
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	8a 5b       	subi	r24, 0xBA	; 186
     ae4:	9d 4f       	sbci	r25, 0xFD	; 253
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	8c 81       	ldd	r24, Y+4	; 0x04
     af8:	9d 81       	ldd	r25, Y+5	; 0x05
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	2c f3       	brlt	.-54     	; 0xaca <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     b00:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     b0a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
     b0e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	f9 01       	movw	r30, r18
     b18:	09 95       	icall
}
     b1a:	25 96       	adiw	r28, 0x05	; 5
     b1c:	e2 e0       	ldi	r30, 0x02	; 2
     b1e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000b22 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     b2e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     b32:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b36:	89 2b       	or	r24, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     b3c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     b40:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     b44:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN7TwoWire14user_onRequestE>
     b48:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b4c:	fc 01       	movw	r30, r24
     b4e:	09 95       	icall
}
     b50:	e2 e0       	ldi	r30, 0x02	; 2
     b52:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000b56 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     b56:	a4 e0       	ldi	r26, 0x04	; 4
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e1 eb       	ldi	r30, 0xB1	; 177
     b5c:	f5 e0       	ldi	r31, 0x05	; 5
     b5e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	7c 83       	std	Y+4, r23	; 0x04
     b68:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <_ZN7TwoWire14user_onReceiveE+0x1>
     b72:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN7TwoWire14user_onReceiveE>
}
     b76:	24 96       	adiw	r28, 0x04	; 4
     b78:	e2 e0       	ldi	r30, 0x02	; 2
     b7a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000b7e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     b7e:	a4 e0       	ldi	r26, 0x04	; 4
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e5 ec       	ldi	r30, 0xC5	; 197
     b84:	f5 e0       	ldi	r31, 0x05	; 5
     b86:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	7c 83       	std	Y+4, r23	; 0x04
     b90:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <_ZN7TwoWire14user_onRequestE+0x1>
     b9a:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN7TwoWire14user_onRequestE>
}
     b9e:	24 96       	adiw	r28, 0x04	; 4
     ba0:	e2 e0       	ldi	r30, 0x02	; 2
     ba2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000ba6 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ba6:	a4 e0       	ldi	r26, 0x04	; 4
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 ed       	ldi	r30, 0xD9	; 217
     bac:	f5 e0       	ldi	r31, 0x05	; 5
     bae:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	7c 83       	std	Y+4, r23	; 0x04
     bb8:	6b 83       	std	Y+3, r22	; 0x03
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bca:	8f e8       	ldi	r24, 0x8F	; 143
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	39 de       	rcall	.-910    	; 0x842 <_ZN7TwoWireC1Ev>
     bd0:	24 96       	adiw	r28, 0x04	; 4
     bd2:	e2 e0       	ldi	r30, 0x02	; 2
     bd4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000bd8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e2 ef       	ldi	r30, 0xF2	; 242
     bde:	f5 e0       	ldi	r31, 0x05	; 5
     be0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     be4:	6f ef       	ldi	r22, 0xFF	; 255
     be6:	7f ef       	ldi	r23, 0xFF	; 255
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	dc df       	rcall	.-72     	; 0xba6 <_Z41__static_initialization_and_destruction_0ii>
     bee:	e2 e0       	ldi	r30, 0x02	; 2
     bf0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000bf4 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     bf4:	a2 e0       	ldi	r26, 0x02	; 2
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	6a 83       	std	Y+2, r22	; 0x02
     c04:	22 96       	adiw	r28, 0x02	; 2
     c06:	e2 e0       	ldi	r30, 0x02	; 2
     c08:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000c0c <_ZN14SoftwareSerial10tunedDelayEj>:
     c0c:	a4 e0       	ldi	r26, 0x04	; 4
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ec e0       	ldi	r30, 0x0C	; 12
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	24 96       	adiw	r28, 0x04	; 4
     c32:	e2 e0       	ldi	r30, 0x02	; 2
     c34:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000c38 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     c38:	a2 e0       	ldi	r26, 0x02	; 2
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e2 e2       	ldi	r30, 0x22	; 34
     c3e:	f6 e0       	ldi	r31, 0x06	; 6
     c40:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	fc 01       	movw	r30, r24
     c4e:	86 85       	ldd	r24, Z+14	; 0x0e
     c50:	97 85       	ldd	r25, Z+15	; 0x0f
     c52:	fc 01       	movw	r30, r24
     c54:	20 81       	ld	r18, Z
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	fc 01       	movw	r30, r24
     c5c:	85 85       	ldd	r24, Z+13	; 0x0d
     c5e:	82 23       	and	r24, r18
}
     c60:	22 96       	adiw	r28, 0x02	; 2
     c62:	e2 e0       	ldi	r30, 0x02	; 2
     c64:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00000c68 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	2b 97       	sbiw	r28, 0x0b	; 11
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     c9a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     c9e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     ca2:	89 2b       	or	r24, r25
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__vector_3+0x40>
     ca6:	f4 c0       	rjmp	.+488    	; 0xe90 <__vector_3+0x228>
  {
    active_object->recv();
     ca8:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <_ZN14SoftwareSerial13active_objectE>
     cac:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <_ZN14SoftwareSerial13active_objectE+0x1>
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     cb4:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cbe:	82 70       	andi	r24, 0x02	; 2
     cc0:	88 23       	and	r24, r24
     cc2:	49 f0       	breq	.+18     	; 0xcd6 <__vector_3+0x6e>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	b7 df       	rcall	.-146    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     cca:	98 2f       	mov	r25, r24
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	99 23       	and	r25, r25
     cd0:	51 f4       	brne	.+20     	; 0xce6 <__vector_3+0x7e>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <__vector_3+0x7e>
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	ae df       	rcall	.-164    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     cdc:	98 2f       	mov	r25, r24
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	99 23       	and	r25, r25
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__vector_3+0x7e>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <__vector_3+0x84>
     cea:	d2 c0       	rjmp	.+420    	; 0xe90 <__vector_3+0x228>
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	9d 83       	std	Y+5, r25	; 0x05
     cf2:	8c 83       	std	Y+4, r24	; 0x04
     cf4:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	9d 81       	ldd	r25, Y+5	; 0x05
     d00:	fc 01       	movw	r30, r24
     d02:	83 89       	ldd	r24, Z+19	; 0x13
     d04:	94 89       	ldd	r25, Z+20	; 0x14
     d06:	2c 81       	ldd	r18, Y+4	; 0x04
     d08:	3d 81       	ldd	r19, Y+5	; 0x05
     d0a:	f9 01       	movw	r30, r18
     d0c:	23 89       	ldd	r18, Z+19	; 0x13
     d0e:	34 89       	ldd	r19, Z+20	; 0x14
     d10:	f9 01       	movw	r30, r18
     d12:	40 81       	ld	r20, Z
     d14:	2c 81       	ldd	r18, Y+4	; 0x04
     d16:	3d 81       	ldd	r19, Y+5	; 0x05
     d18:	f9 01       	movw	r30, r18
     d1a:	25 89       	ldd	r18, Z+21	; 0x15
     d1c:	24 2b       	or	r18, r20
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	fc 01       	movw	r30, r24
     d2a:	83 89       	ldd	r24, Z+19	; 0x13
     d2c:	94 89       	ldd	r25, Z+20	; 0x14
     d2e:	2c 81       	ldd	r18, Y+4	; 0x04
     d30:	3d 81       	ldd	r19, Y+5	; 0x05
     d32:	f9 01       	movw	r30, r18
     d34:	23 89       	ldd	r18, Z+19	; 0x13
     d36:	34 89       	ldd	r19, Z+20	; 0x14
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	42 2f       	mov	r20, r18
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	f9 01       	movw	r30, r18
     d44:	25 89       	ldd	r18, Z+21	; 0x15
     d46:	20 95       	com	r18
     d48:	24 23       	and	r18, r20
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	fc 01       	movw	r30, r24
     d54:	86 89       	ldd	r24, Z+22	; 0x16
     d56:	97 89       	ldd	r25, Z+23	; 0x17
     d58:	59 df       	rcall	.-334    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	8d e0       	ldi	r24, 0x0D	; 13
     d5e:	4a df       	rcall	.-364    	; 0xbf4 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	8f 83       	std	Y+7, r24	; 0x07
     d64:	1f c0       	rjmp	.+62     	; 0xda4 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 8d       	ldd	r24, Z+24	; 0x18
     d6e:	91 8d       	ldd	r25, Z+25	; 0x19
     d70:	4d df       	rcall	.-358    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	95 95       	asr	r25
     d7a:	87 95       	ror	r24
     d7c:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	8d e0       	ldi	r24, 0x0D	; 13
     d82:	38 df       	rcall	.-400    	; 0xbf4 <_Z10DebugPulsehh>
      if (rx_pin_read())
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	57 df       	rcall	.-338    	; 0xc38 <_ZN14SoftwareSerial11rx_pin_readEv>
     d8a:	98 2f       	mov	r25, r24
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	99 23       	and	r25, r25
     d90:	09 f4       	brne	.+2      	; 0xd94 <__vector_3+0x12c>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	88 23       	and	r24, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <__vector_3+0x136>
        d |= 0x80;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	8f 83       	std	Y+7, r24	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	88 23       	and	r24, r24
     da8:	f1 f6       	brne	.-68     	; 0xd66 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	fc 01       	movw	r30, r24
     db0:	86 8d       	ldd	r24, Z+30	; 0x1e
     db2:	82 70       	andi	r24, 0x02	; 2
     db4:	88 23       	and	r24, r24
     db6:	19 f0       	breq	.+6      	; 0xdbe <__vector_3+0x156>
      d = ~d;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	80 95       	com	r24
     dbc:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     dbe:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	8f 73       	andi	r24, 0x3F	; 63
     dca:	90 78       	andi	r25, 0x80	; 128
     dcc:	99 23       	and	r25, r25
     dce:	24 f4       	brge	.+8      	; 0xdd8 <__vector_3+0x170>
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	80 6c       	ori	r24, 0xC0	; 192
     dd4:	9f 6f       	ori	r25, 0xFF	; 255
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     dda:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <_ZN14SoftwareSerial20_receive_buffer_headE>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	28 85       	ldd	r18, Y+8	; 0x08
     de2:	29 17       	cp	r18, r25
     de4:	09 f4       	brne	.+2      	; 0xde8 <__vector_3+0x180>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	69 f0       	breq	.+26     	; 0xe06 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     dec:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	83 56       	subi	r24, 0x63	; 99
     df6:	9d 4f       	sbci	r25, 0xFD	; 253
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     dfe:	88 85       	ldd	r24, Y+8	; 0x08
     e00:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	8b e0       	ldi	r24, 0x0B	; 11
     e0a:	f4 de       	rcall	.-536    	; 0xbf4 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	fc 01       	movw	r30, r24
     e12:	26 8d       	ldd	r18, Z+30	; 0x1e
     e14:	21 60       	ori	r18, 0x01	; 1
     e16:	fc 01       	movw	r30, r24
     e18:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	fc 01       	movw	r30, r24
     e20:	82 8d       	ldd	r24, Z+26	; 0x1a
     e22:	93 8d       	ldd	r25, Z+27	; 0x1b
     e24:	f3 de       	rcall	.-538    	; 0xc0c <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	8b e0       	ldi	r24, 0x0B	; 11
     e2a:	e4 de       	rcall	.-568    	; 0xbf4 <_Z10DebugPulsehh>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	9a 87       	std	Y+10, r25	; 0x0a
     e32:	89 87       	std	Y+9, r24	; 0x09
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     e38:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3a:	88 23       	and	r24, r24
     e3c:	a1 f0       	breq	.+40     	; 0xe66 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	fc 01       	movw	r30, r24
     e44:	83 89       	ldd	r24, Z+19	; 0x13
     e46:	94 89       	ldd	r25, Z+20	; 0x14
     e48:	29 85       	ldd	r18, Y+9	; 0x09
     e4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4c:	f9 01       	movw	r30, r18
     e4e:	23 89       	ldd	r18, Z+19	; 0x13
     e50:	34 89       	ldd	r19, Z+20	; 0x14
     e52:	f9 01       	movw	r30, r18
     e54:	40 81       	ld	r20, Z
     e56:	29 85       	ldd	r18, Y+9	; 0x09
     e58:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5a:	f9 01       	movw	r30, r18
     e5c:	25 89       	ldd	r18, Z+21	; 0x15
     e5e:	24 2b       	or	r18, r20
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
     e64:	15 c0       	rjmp	.+42     	; 0xe90 <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	fc 01       	movw	r30, r24
     e6c:	83 89       	ldd	r24, Z+19	; 0x13
     e6e:	94 89       	ldd	r25, Z+20	; 0x14
     e70:	29 85       	ldd	r18, Y+9	; 0x09
     e72:	3a 85       	ldd	r19, Y+10	; 0x0a
     e74:	f9 01       	movw	r30, r18
     e76:	23 89       	ldd	r18, Z+19	; 0x13
     e78:	34 89       	ldd	r19, Z+20	; 0x14
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	42 2f       	mov	r20, r18
     e80:	29 85       	ldd	r18, Y+9	; 0x09
     e82:	3a 85       	ldd	r19, Y+10	; 0x0a
     e84:	f9 01       	movw	r30, r18
     e86:	25 89       	ldd	r18, Z+21	; 0x15
     e88:	20 95       	com	r18
     e8a:	24 23       	and	r18, r20
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     e90:	2b 96       	adiw	r28, 0x0b	; 11
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     ec4:	8f 92       	push	r8
     ec6:	af 92       	push	r10
     ec8:	cf 92       	push	r12
     eca:	ef 92       	push	r14
     ecc:	0f 93       	push	r16
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	28 97       	sbiw	r28, 0x08	; 8
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04
     eea:	2d 83       	std	Y+5, r18	; 0x05
     eec:	0e 83       	std	Y+6, r16	; 0x06
     eee:	ef 82       	std	Y+7, r14	; 0x07
     ef0:	c8 86       	std	Y+8, r12	; 0x08
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	6c dc       	rcall	.-1832   	; 0x7d0 <_ZN5PrintC1Ev>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	25 e8       	ldi	r18, 0x85	; 133
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	fc 01       	movw	r30, r24
     f02:	31 83       	std	Z+1, r19	; 0x01
     f04:	20 83       	st	Z, r18
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	1f 92       	push	r1
     f10:	1f 92       	push	r1
     f12:	88 84       	ldd	r8, Y+8	; 0x08
     f14:	af 80       	ldd	r10, Y+7	; 0x07
     f16:	ce 80       	ldd	r12, Y+6	; 0x06
     f18:	ed 80       	ldd	r14, Y+5	; 0x05
     f1a:	0c 81       	ldd	r16, Y+4	; 0x04
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	12 d0       	rcall	.+36     	; 0xf48 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	28 96       	adiw	r28, 0x08	; 8
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	0f 91       	pop	r16
     f3e:	ef 90       	pop	r14
     f40:	cf 90       	pop	r12
     f42:	af 90       	pop	r10
     f44:	8f 90       	pop	r8
     f46:	08 95       	ret

00000f48 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     f48:	8f 92       	push	r8
     f4a:	af 92       	push	r10
     f4c:	cf 92       	push	r12
     f4e:	ef 92       	push	r14
     f50:	0f 93       	push	r16
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	2a 97       	sbiw	r28, 0x0a	; 10
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	6b 83       	std	Y+3, r22	; 0x03
     f6c:	4c 83       	std	Y+4, r20	; 0x04
     f6e:	2d 83       	std	Y+5, r18	; 0x05
     f70:	0e 83       	std	Y+6, r16	; 0x06
     f72:	ef 82       	std	Y+7, r14	; 0x07
     f74:	c8 86       	std	Y+8, r12	; 0x08
     f76:	a9 86       	std	Y+9, r10	; 0x09
     f78:	8a 86       	std	Y+10, r8	; 0x0a
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	fc 01       	movw	r30, r24
     f82:	24 83       	std	Z+4, r18	; 0x04
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	2d 81       	ldd	r18, Y+5	; 0x05
     f8a:	fc 01       	movw	r30, r24
     f8c:	25 83       	std	Z+5, r18	; 0x05
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	2e 81       	ldd	r18, Y+6	; 0x06
     f94:	fc 01       	movw	r30, r24
     f96:	26 83       	std	Z+6, r18	; 0x06
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	2f 81       	ldd	r18, Y+7	; 0x07
     f9e:	fc 01       	movw	r30, r24
     fa0:	27 83       	std	Z+7, r18	; 0x07
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	28 85       	ldd	r18, Y+8	; 0x08
     fa8:	fc 01       	movw	r30, r24
     faa:	20 87       	std	Z+8, r18	; 0x08
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	29 85       	ldd	r18, Y+9	; 0x09
     fb2:	fc 01       	movw	r30, r24
     fb4:	21 87       	std	Z+9, r18	; 0x09
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	2a 85       	ldd	r18, Y+10	; 0x0a
     fbc:	fc 01       	movw	r30, r24
     fbe:	22 87       	std	Z+10, r18	; 0x0a
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	2c 89       	ldd	r18, Y+20	; 0x14
     fc6:	fc 01       	movw	r30, r24
     fc8:	23 87       	std	Z+11, r18	; 0x0b
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	2d 89       	ldd	r18, Y+21	; 0x15
     fd0:	fc 01       	movw	r30, r24
     fd2:	24 87       	std	Z+12, r18	; 0x0c
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	2e 89       	ldd	r18, Y+22	; 0x16
     fda:	fc 01       	movw	r30, r24
     fdc:	25 87       	std	Z+13, r18	; 0x0d
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	2f 89       	ldd	r18, Y+23	; 0x17
     fe4:	fc 01       	movw	r30, r24
     fe6:	26 87       	std	Z+14, r18	; 0x0e
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	fc 01       	movw	r30, r24
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	fc 01       	movw	r30, r24
     ffc:	85 81       	ldd	r24, Z+5	; 0x05
     ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    1000:	39 f0       	breq	.+14     	; 0x1010 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	fc 01       	movw	r30, r24
    1008:	85 81       	ldd	r24, Z+5	; 0x05
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	fc 01       	movw	r30, r24
    1016:	86 81       	ldd	r24, Z+6	; 0x06
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	29 f0       	breq	.+10     	; 0x102e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	fc 01       	movw	r30, r24
    102a:	17 86       	std	Z+15, r1	; 0x0f
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	20 e1       	ldi	r18, 0x10	; 16
    1034:	fc 01       	movw	r30, r24
    1036:	27 87       	std	Z+15, r18	; 0x0f
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	60 e1       	ldi	r22, 0x10	; 16
    1042:	0e d0       	rcall	.+28     	; 0x1060 <_ZN13LiquidCrystal5beginEhhh>
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	0f 91       	pop	r16
    1056:	ef 90       	pop	r14
    1058:	cf 90       	pop	r12
    105a:	af 90       	pop	r10
    105c:	8f 90       	pop	r8
    105e:	08 95       	ret

00001060 <_ZN13LiquidCrystal5beginEhhh>:
    1060:	a5 e0       	ldi	r26, 0x05	; 5
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e3       	ldi	r30, 0x36	; 54
    1066:	f8 e0       	ldi	r31, 0x08	; 8
    1068:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	6b 83       	std	Y+3, r22	; 0x03
    1072:	4c 83       	std	Y+4, r20	; 0x04
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	50 f0       	brcs	.+20     	; 0x1090 <_ZN13LiquidCrystal5beginEhhh+0x30>
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	fc 01       	movw	r30, r24
    1082:	87 85       	ldd	r24, Z+15	; 0x0f
    1084:	28 2f       	mov	r18, r24
    1086:	28 60       	ori	r18, 0x08	; 8
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	fc 01       	movw	r30, r24
    108e:	27 87       	std	Z+15, r18	; 0x0f
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	fc 01       	movw	r30, r24
    1098:	23 8b       	std	Z+19, r18	; 0x13
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	ac 01       	movw	r20, r24
    10a2:	40 5c       	subi	r20, 0xC0	; 192
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	8a 01       	movw	r16, r20
    10b2:	40 e4       	ldi	r20, 0x40	; 64
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	a4 d0       	rcall	.+328    	; 0x1204 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	88 23       	and	r24, r24
    10c0:	69 f0       	breq	.+26     	; 0x10dc <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	51 f4       	brne	.+20     	; 0x10dc <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	fc 01       	movw	r30, r24
    10ce:	87 85       	ldd	r24, Z+15	; 0x0f
    10d0:	28 2f       	mov	r18, r24
    10d2:	24 60       	ori	r18, 0x04	; 4
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	fc 01       	movw	r30, r24
    10da:	27 87       	std	Z+15, r18	; 0x0f
    10dc:	80 e5       	ldi	r24, 0x50	; 80
    10de:	93 ec       	ldi	r25, 0xC3	; 195
    10e0:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	fc 01       	movw	r30, r24
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	fc 01       	movw	r30, r24
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	fc 01       	movw	r30, r24
    1106:	85 81       	ldd	r24, Z+5	; 0x05
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	39 f0       	breq	.+14     	; 0x111a <_ZN13LiquidCrystal5beginEhhh+0xba>
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	fc 01       	movw	r30, r24
    1112:	85 81       	ldd	r24, Z+5	; 0x05
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	fc 01       	movw	r30, r24
    1120:	87 85       	ldd	r24, Z+15	; 0x0f
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	80 71       	andi	r24, 0x10	; 16
    1128:	99 27       	eor	r25, r25
    112a:	89 2b       	or	r24, r25
    112c:	e9 f4       	brne	.+58     	; 0x1168 <_ZN13LiquidCrystal5beginEhhh+0x108>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	91 d1       	rcall	.+802    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1136:	84 e9       	ldi	r24, 0x94	; 148
    1138:	91 e1       	ldi	r25, 0x11	; 17
    113a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	89 d1       	rcall	.+786    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1146:	84 e9       	ldi	r24, 0x94	; 148
    1148:	91 e1       	ldi	r25, 0x11	; 17
    114a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	63 e0       	ldi	r22, 0x03	; 3
    1154:	81 d1       	rcall	.+770    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1156:	86 e9       	ldi	r24, 0x96	; 150
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	79 d1       	rcall	.+754    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    1166:	26 c0       	rjmp	.+76     	; 0x11b4 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	fc 01       	movw	r30, r24
    116e:	87 85       	ldd	r24, Z+15	; 0x0f
    1170:	28 2f       	mov	r18, r24
    1172:	20 62       	ori	r18, 0x20	; 32
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	62 2f       	mov	r22, r18
    117a:	d6 d0       	rcall	.+428    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    117c:	84 e9       	ldi	r24, 0x94	; 148
    117e:	91 e1       	ldi	r25, 0x11	; 17
    1180:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	fc 01       	movw	r30, r24
    118a:	87 85       	ldd	r24, Z+15	; 0x0f
    118c:	28 2f       	mov	r18, r24
    118e:	20 62       	ori	r18, 0x20	; 32
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	62 2f       	mov	r22, r18
    1196:	c8 d0       	rcall	.+400    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    1198:	86 e9       	ldi	r24, 0x96	; 150
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	fc 01       	movw	r30, r24
    11a6:	87 85       	ldd	r24, Z+15	; 0x0f
    11a8:	28 2f       	mov	r18, r24
    11aa:	20 62       	ori	r18, 0x20	; 32
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	62 2f       	mov	r22, r18
    11b2:	ba d0       	rcall	.+372    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	87 85       	ldd	r24, Z+15	; 0x0f
    11bc:	28 2f       	mov	r18, r24
    11be:	20 62       	ori	r18, 0x20	; 32
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	62 2f       	mov	r22, r18
    11c6:	b0 d0       	rcall	.+352    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	24 e0       	ldi	r18, 0x04	; 4
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 8b       	std	Z+16, r18	; 0x10
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	88 d0       	rcall	.+272    	; 0x12e8 <_ZN13LiquidCrystal7displayEv>
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	3b d0       	rcall	.+118    	; 0x1254 <_ZN13LiquidCrystal5clearEv>
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	22 e0       	ldi	r18, 0x02	; 2
    11e4:	fc 01       	movw	r30, r24
    11e6:	21 8b       	std	Z+17, r18	; 0x11
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	fc 01       	movw	r30, r24
    11ee:	81 89       	ldd	r24, Z+17	; 0x11
    11f0:	28 2f       	mov	r18, r24
    11f2:	24 60       	ori	r18, 0x04	; 4
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	62 2f       	mov	r22, r18
    11fa:	96 d0       	rcall	.+300    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    11fc:	25 96       	adiw	r28, 0x05	; 5
    11fe:	e4 e0       	ldi	r30, 0x04	; 4
    1200:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

00001204 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    1204:	aa e0       	ldi	r26, 0x0A	; 10
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e0       	ldi	r30, 0x08	; 8
    120a:	f9 e0       	ldi	r31, 0x09	; 9
    120c:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	7c 83       	std	Y+4, r23	; 0x04
    1216:	6b 83       	std	Y+3, r22	; 0x03
    1218:	5e 83       	std	Y+6, r21	; 0x06
    121a:	4d 83       	std	Y+5, r20	; 0x05
    121c:	38 87       	std	Y+8, r19	; 0x08
    121e:	2f 83       	std	Y+7, r18	; 0x07
    1220:	1a 87       	std	Y+10, r17	; 0x0a
    1222:	09 87       	std	Y+9, r16	; 0x09
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	fc 01       	movw	r30, r24
    122c:	24 8b       	std	Z+20, r18	; 0x14
    122e:	2d 81       	ldd	r18, Y+5	; 0x05
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	fc 01       	movw	r30, r24
    1236:	25 8b       	std	Z+21, r18	; 0x15
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	fc 01       	movw	r30, r24
    1240:	26 8b       	std	Z+22, r18	; 0x16
    1242:	29 85       	ldd	r18, Y+9	; 0x09
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	fc 01       	movw	r30, r24
    124a:	27 8b       	std	Z+23, r18	; 0x17
    124c:	2a 96       	adiw	r28, 0x0a	; 10
    124e:	e4 e0       	ldi	r30, 0x04	; 4
    1250:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

00001254 <_ZN13LiquidCrystal5clearEv>:
    1254:	a2 e0       	ldi	r26, 0x02	; 2
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f9 e0       	ldi	r31, 0x09	; 9
    125c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	5e d0       	rcall	.+188    	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    126c:	80 ed       	ldi	r24, 0xD0	; 208
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
    1274:	22 96       	adiw	r28, 0x02	; 2
    1276:	e2 e0       	ldi	r30, 0x02	; 2
    1278:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000127c <_ZN13LiquidCrystal9setCursorEhh>:
    127c:	a6 e0       	ldi	r26, 0x06	; 6
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e4 e4       	ldi	r30, 0x44	; 68
    1282:	f9 e0       	ldi	r31, 0x09	; 9
    1284:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	6d 83       	std	Y+5, r22	; 0x05
    128e:	4e 83       	std	Y+6, r20	; 0x06
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	8e 83       	std	Y+6, r24	; 0x06
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	fc 01       	movw	r30, r24
    12a8:	93 89       	ldd	r25, Z+19	; 0x13
    12aa:	8e 81       	ldd	r24, Y+6	; 0x06
    12ac:	89 17       	cp	r24, r25
    12ae:	30 f0       	brcs	.+12     	; 0x12bc <_ZN13LiquidCrystal9setCursorEhh+0x40>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	fc 01       	movw	r30, r24
    12b6:	83 89       	ldd	r24, Z+19	; 0x13
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	8e 83       	std	Y+6, r24	; 0x06
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	44 96       	adiw	r24, 0x14	; 20
    12cc:	fc 01       	movw	r30, r24
    12ce:	90 81       	ld	r25, Z
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	89 0f       	add	r24, r25
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	28 2f       	mov	r18, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	62 2f       	mov	r22, r18
    12de:	24 d0       	rcall	.+72     	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    12e0:	26 96       	adiw	r28, 0x06	; 6
    12e2:	e2 e0       	ldi	r30, 0x02	; 2
    12e4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000012e8 <_ZN13LiquidCrystal7displayEv>:
    12e8:	a2 e0       	ldi	r26, 0x02	; 2
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e7       	ldi	r30, 0x7A	; 122
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	fc 01       	movw	r30, r24
    12fe:	80 89       	ldd	r24, Z+16	; 0x10
    1300:	28 2f       	mov	r18, r24
    1302:	24 60       	ori	r18, 0x04	; 4
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	fc 01       	movw	r30, r24
    130a:	20 8b       	std	Z+16, r18	; 0x10
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	fc 01       	movw	r30, r24
    1312:	80 89       	ldd	r24, Z+16	; 0x10
    1314:	28 2f       	mov	r18, r24
    1316:	28 60       	ori	r18, 0x08	; 8
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	62 2f       	mov	r22, r18
    131e:	04 d0       	rcall	.+8      	; 0x1328 <_ZN13LiquidCrystal7commandEh>
    1320:	22 96       	adiw	r28, 0x02	; 2
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001328 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    1328:	a3 e0       	ldi	r26, 0x03	; 3
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	6b 81       	ldd	r22, Y+3	; 0x03
    1342:	18 d0       	rcall	.+48     	; 0x1374 <_ZN13LiquidCrystal4sendEhh>
}
    1344:	23 96       	adiw	r28, 0x03	; 3
    1346:	e2 e0       	ldi	r30, 0x02	; 2
    1348:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000134c <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    134c:	a3 e0       	ldi	r26, 0x03	; 3
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ec ea       	ldi	r30, 0xAC	; 172
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	6b 81       	ldd	r22, Y+3	; 0x03
    1366:	06 d0       	rcall	.+12     	; 0x1374 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
}
    136c:	23 96       	adiw	r28, 0x03	; 3
    136e:	e2 e0       	ldi	r30, 0x02	; 2
    1370:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001374 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1374:	a4 e0       	ldi	r26, 0x04	; 4
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e0 ec       	ldi	r30, 0xC0	; 192
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	fc 01       	movw	r30, r24
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	6c 81       	ldd	r22, Y+4	; 0x04
    1392:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	fc 01       	movw	r30, r24
    139c:	85 81       	ldd	r24, Z+5	; 0x05
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	85 81       	ldd	r24, Z+5	; 0x05
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	fc 01       	movw	r30, r24
    13b6:	87 85       	ldd	r24, Z+15	; 0x0f
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	80 71       	andi	r24, 0x10	; 16
    13be:	99 27       	eor	r25, r25
    13c0:	89 2b       	or	r24, r25
    13c2:	29 f0       	breq	.+10     	; 0x13ce <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	6b 81       	ldd	r22, Y+3	; 0x03
    13ca:	85 d0       	rcall	.+266    	; 0x14d6 <_ZN13LiquidCrystal10write8bitsEh>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	95 95       	asr	r25
    13d6:	87 95       	ror	r24
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	95 95       	asr	r25
    13de:	87 95       	ror	r24
    13e0:	95 95       	asr	r25
    13e2:	87 95       	ror	r24
    13e4:	28 2f       	mov	r18, r24
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	62 2f       	mov	r22, r18
    13ec:	35 d0       	rcall	.+106    	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	6b 81       	ldd	r22, Y+3	; 0x03
    13f4:	31 d0       	rcall	.+98     	; 0x1458 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    13f6:	24 96       	adiw	r28, 0x04	; 4
    13f8:	e2 e0       	ldi	r30, 0x02	; 2
    13fa:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000013fe <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    13fe:	a2 e0       	ldi	r26, 0x02	; 2
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	fc 01       	movw	r30, r24
    1414:	86 81       	ldd	r24, Z+6	; 0x06
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
  delayMicroseconds(1);    
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	fc 01       	movw	r30, r24
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	fc 01       	movw	r30, r24
    1440:	86 81       	ldd	r24, Z+6	; 0x06
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1448:	84 e6       	ldi	r24, 0x64	; 100
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <delayMicroseconds>
}
    1450:	22 96       	adiw	r28, 0x02	; 2
    1452:	e2 e0       	ldi	r30, 0x02	; 2
    1454:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001458 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1458:	a5 e0       	ldi	r26, 0x05	; 5
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	fa e0       	ldi	r31, 0x0A	; 10
    1460:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
    1468:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    146a:	1a 82       	std	Y+2, r1	; 0x02
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	28 c0       	rjmp	.+80     	; 0x14c0 <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	07 96       	adiw	r24, 0x07	; 7
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	09 80       	ldd	r0, Y+1	; 0x01
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    1492:	95 95       	asr	r25
    1494:	87 95       	ror	r24
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    149a:	48 2f       	mov	r20, r24
    149c:	41 70       	andi	r20, 0x01	; 1
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	07 96       	adiw	r24, 0x07	; 7
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
    14b0:	64 2f       	mov	r22, r20
    14b2:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	04 97       	sbiw	r24, 0x04	; 4
    14c6:	a4 f2       	brlt	.-88     	; 0x1470 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	98 df       	rcall	.-208    	; 0x13fe <_ZN13LiquidCrystal11pulseEnableEv>
}
    14ce:	25 96       	adiw	r28, 0x05	; 5
    14d0:	e2 e0       	ldi	r30, 0x02	; 2
    14d2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000014d6 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    14d6:	a5 e0       	ldi	r26, 0x05	; 5
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e1 e7       	ldi	r30, 0x71	; 113
    14dc:	fa e0       	ldi	r31, 0x0A	; 10
    14de:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	28 c0       	rjmp	.+80     	; 0x153e <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	07 96       	adiw	r24, 0x07	; 7
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	09 80       	ldd	r0, Y+1	; 0x01
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    1510:	95 95       	asr	r25
    1512:	87 95       	ror	r24
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    1518:	48 2f       	mov	r20, r24
    151a:	41 70       	andi	r20, 0x01	; 1
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	07 96       	adiw	r24, 0x07	; 7
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	64 2f       	mov	r22, r20
    1530:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	08 97       	sbiw	r24, 0x08	; 8
    1544:	a4 f2       	brlt	.-88     	; 0x14ee <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	59 df       	rcall	.-334    	; 0x13fe <_ZN13LiquidCrystal11pulseEnableEv>
}
    154c:	25 96       	adiw	r28, 0x05	; 5
    154e:	e2 e0       	ldi	r30, 0x02	; 2
    1550:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001554 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e0 eb       	ldi	r30, 0xB0	; 176
    155a:	fa e0       	ldi	r31, 0x0A	; 10
    155c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1560:	8f ed       	ldi	r24, 0xDF	; 223
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	88 23       	and	r24, r24
    156a:	51 f4       	brne	.+20     	; 0x1580 <_ZN4erom6Access8instanceEv+0x2c>
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	89 ee       	ldi	r24, 0xE9	; 233
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0a d0       	rcall	.+20     	; 0x158a <_ZN4erom6AccessC1Ej>
    1576:	8f ed       	ldi	r24, 0xDF	; 223
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    1580:	89 ee       	ldi	r24, 0xE9	; 233
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	e2 e0       	ldi	r30, 0x02	; 2
    1586:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000158a <_ZN4erom6AccessC1Ej>:
    158a:	a4 e0       	ldi	r26, 0x04	; 4
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb ec       	ldi	r30, 0xCB	; 203
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	7c 83       	std	Y+4, r23	; 0x04
    159c:	6b 83       	std	Y+3, r22	; 0x03
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	fc 01       	movw	r30, r24
    15a8:	31 83       	std	Z+1, r19	; 0x01
    15aa:	20 83       	st	Z, r18
    15ac:	0a d0       	rcall	.+20     	; 0x15c2 <_ZN4erom6Access18device_memory_sizeEv>
    15ae:	9c 01       	movw	r18, r24
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	33 83       	std	Z+3, r19	; 0x03
    15b8:	22 83       	std	Z+2, r18	; 0x02
    15ba:	24 96       	adiw	r28, 0x04	; 4
    15bc:	e2 e0       	ldi	r30, 0x02	; 2
    15be:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000015c2 <_ZN4erom6Access18device_memory_sizeEv>:
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 ee       	ldi	r30, 0xE7	; 231
    15c8:	fa e0       	ldi	r31, 0x0A	; 10
    15ca:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	e2 e0       	ldi	r30, 0x02	; 2
    15d4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000015d8 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    15d8:	a4 e0       	ldi	r26, 0x04	; 4
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 ef       	ldi	r30, 0xF2	; 242
    15de:	fa e0       	ldi	r31, 0x0A	; 10
    15e0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	7c 83       	std	Y+4, r23	; 0x04
    15ea:	6b 83       	std	Y+3, r22	; 0x03
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	49 f4       	brne	.+18     	; 0x1606 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	29 f4       	brne	.+10     	; 0x1606 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    15fc:	ab df       	rcall	.-170    	; 0x1554 <_ZN4erom6Access8instanceEv>
    15fe:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZN4erom6accessE+0x1>
    1602:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1606:	24 96       	adiw	r28, 0x04	; 4
    1608:	e2 e0       	ldi	r30, 0x02	; 2
    160a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000160e <_GLOBAL__sub_I__ZN4erom6accessE>:
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    161a:	6f ef       	ldi	r22, 0xFF	; 255
    161c:	7f ef       	ldi	r23, 0xFF	; 255
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	da df       	rcall	.-76     	; 0x15d8 <_Z41__static_initialization_and_destruction_0ii>
    1624:	e2 e0       	ldi	r30, 0x02	; 2
    1626:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000162a <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e1       	ldi	r30, 0x1B	; 27
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1636:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	e2 e0       	ldi	r30, 0x02	; 2
    1644:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001648 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1648:	a8 e0       	ldi	r26, 0x08	; 8
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ea e2       	ldi	r30, 0x2A	; 42
    164e:	fb e0       	ldi	r31, 0x0B	; 11
    1650:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1654:	98 87       	std	Y+8, r25	; 0x08
    1656:	8f 83       	std	Y+7, r24	; 0x07
    1658:	8f 81       	ldd	r24, Y+7	; 0x07
    165a:	98 85       	ldd	r25, Y+8	; 0x08
    165c:	2d e8       	ldi	r18, 0x8D	; 141
    165e:	31 e0       	ldi	r19, 0x01	; 1
    1660:	fc 01       	movw	r30, r24
    1662:	31 83       	std	Z+1, r19	; 0x01
    1664:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1666:	e1 df       	rcall	.-62     	; 0x162a <_ZL7elapsedv>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	ad 83       	std	Y+5, r26	; 0x05
    1672:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
    1678:	3d c0       	rjmp	.+122    	; 0x16f4 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    167a:	2f 81       	ldd	r18, Y+7	; 0x07
    167c:	38 85       	ldd	r19, Y+8	; 0x08
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	82 0f       	add	r24, r18
    1684:	93 1f       	adc	r25, r19
    1686:	82 57       	subi	r24, 0x72	; 114
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    168e:	2f 81       	ldd	r18, Y+7	; 0x07
    1690:	38 85       	ldd	r19, Y+8	; 0x08
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	45 96       	adiw	r24, 0x15	; 21
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	82 0f       	add	r24, r18
    169e:	93 1f       	adc	r25, r19
    16a0:	fc 01       	movw	r30, r24
    16a2:	11 82       	std	Z+1, r1	; 0x01
    16a4:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    16a6:	2f 81       	ldd	r18, Y+7	; 0x07
    16a8:	38 85       	ldd	r19, Y+8	; 0x08
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	9c 01       	movw	r18, r24
    16bc:	2e 5f       	subi	r18, 0xFE	; 254
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	ad 81       	ldd	r26, Y+5	; 0x05
    16c6:	be 81       	ldd	r27, Y+6	; 0x06
    16c8:	f9 01       	movw	r30, r18
    16ca:	80 83       	st	Z, r24
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	a2 83       	std	Z+2, r26	; 0x02
    16d0:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    16d2:	2f 81       	ldd	r18, Y+7	; 0x07
    16d4:	38 85       	ldd	r19, Y+8	; 0x08
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	cd 96       	adiw	r24, 0x3d	; 61
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	fc 01       	movw	r30, r24
    16e6:	11 82       	std	Z+1, r1	; 0x01
    16e8:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	0a 97       	sbiw	r24, 0x0a	; 10
    16fa:	0c f4       	brge	.+2      	; 0x16fe <_ZN11SimpleTimerC1Ev+0xb6>
    16fc:	be cf       	rjmp	.-132    	; 0x167a <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    16fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1700:	98 85       	ldd	r25, Y+8	; 0x08
    1702:	84 55       	subi	r24, 0x54	; 84
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	fc 01       	movw	r30, r24
    1708:	11 82       	std	Z+1, r1	; 0x01
    170a:	10 82       	st	Z, r1
}
    170c:	28 96       	adiw	r28, 0x08	; 8
    170e:	e2 e0       	ldi	r30, 0x02	; 2
    1710:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001714 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    1714:	a8 e0       	ldi	r26, 0x08	; 8
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e0 e9       	ldi	r30, 0x90	; 144
    171a:	fb e0       	ldi	r31, 0x0B	; 11
    171c:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    1720:	98 87       	std	Y+8, r25	; 0x08
    1722:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    1724:	82 df       	rcall	.-252    	; 0x162a <_ZL7elapsedv>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8b 83       	std	Y+3, r24	; 0x03
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	ad 83       	std	Y+5, r26	; 0x05
    1730:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	19 82       	std	Y+1, r1	; 0x01
    1736:	25 c1       	rjmp	.+586    	; 0x1982 <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1738:	2f 81       	ldd	r18, Y+7	; 0x07
    173a:	38 85       	ldd	r19, Y+8	; 0x08
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	84 5b       	subi	r24, 0xB4	; 180
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	fc 01       	movw	r30, r24
    174e:	11 82       	std	Z+1, r1	; 0x01
    1750:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    1752:	2f 81       	ldd	r18, Y+7	; 0x07
    1754:	38 85       	ldd	r19, Y+8	; 0x08
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	45 96       	adiw	r24, 0x15	; 21
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	82 0f       	add	r24, r18
    1762:	93 1f       	adc	r25, r19
    1764:	fc 01       	movw	r30, r24
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	89 2b       	or	r24, r25
    176c:	09 f4       	brne	.+2      	; 0x1770 <_ZN11SimpleTimer3runEv+0x5c>
    176e:	04 c1       	rjmp	.+520    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    1770:	2f 81       	ldd	r18, Y+7	; 0x07
    1772:	38 85       	ldd	r19, Y+8	; 0x08
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	02 96       	adiw	r24, 0x02	; 2
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	a2 81       	ldd	r26, Z+2	; 0x02
    178e:	b3 81       	ldd	r27, Z+3	; 0x03
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	4d 81       	ldd	r20, Y+5	; 0x05
    1796:	5e 81       	ldd	r21, Y+6	; 0x06
    1798:	79 01       	movw	r14, r18
    179a:	8a 01       	movw	r16, r20
    179c:	e8 1a       	sub	r14, r24
    179e:	f9 0a       	sbc	r15, r25
    17a0:	0a 0b       	sbc	r16, r26
    17a2:	1b 0b       	sbc	r17, r27
    17a4:	d8 01       	movw	r26, r16
    17a6:	c7 01       	movw	r24, r14
    17a8:	4f 81       	ldd	r20, Y+7	; 0x07
    17aa:	58 85       	ldd	r21, Y+8	; 0x08
    17ac:	29 81       	ldd	r18, Y+1	; 0x01
    17ae:	3a 81       	ldd	r19, Y+2	; 0x02
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	24 0f       	add	r18, r20
    17ba:	35 1f       	adc	r19, r21
    17bc:	22 5c       	subi	r18, 0xC2	; 194
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	31 81       	ldd	r19, Z+1	; 0x01
    17c6:	42 81       	ldd	r20, Z+2	; 0x02
    17c8:	53 81       	ldd	r21, Z+3	; 0x03
    17ca:	82 17       	cp	r24, r18
    17cc:	93 07       	cpc	r25, r19
    17ce:	a4 07       	cpc	r26, r20
    17d0:	b5 07       	cpc	r27, r21
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <_ZN11SimpleTimer3runEv+0xc2>
    17d4:	d1 c0       	rjmp	.+418    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    17d6:	2f 81       	ldd	r18, Y+7	; 0x07
    17d8:	38 85       	ldd	r19, Y+8	; 0x08
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	fc 01       	movw	r30, r24
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	a2 81       	ldd	r26, Z+2	; 0x02
    17f4:	b3 81       	ldd	r27, Z+3	; 0x03
    17f6:	4f 81       	ldd	r20, Y+7	; 0x07
    17f8:	58 85       	ldd	r21, Y+8	; 0x08
    17fa:	29 81       	ldd	r18, Y+1	; 0x01
    17fc:	3a 81       	ldd	r19, Y+2	; 0x02
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	24 0f       	add	r18, r20
    1808:	35 1f       	adc	r19, r21
    180a:	22 5c       	subi	r18, 0xC2	; 194
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	42 81       	ldd	r20, Z+2	; 0x02
    1816:	53 81       	ldd	r21, Z+3	; 0x03
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	a4 1f       	adc	r26, r20
    181e:	b5 1f       	adc	r27, r21
    1820:	4f 81       	ldd	r20, Y+7	; 0x07
    1822:	58 85       	ldd	r21, Y+8	; 0x08
    1824:	29 81       	ldd	r18, Y+1	; 0x01
    1826:	3a 81       	ldd	r19, Y+2	; 0x02
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	24 0f       	add	r18, r20
    1832:	35 1f       	adc	r19, r21
    1834:	2e 5f       	subi	r18, 0xFE	; 254
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	f9 01       	movw	r30, r18
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    1842:	2f 81       	ldd	r18, Y+7	; 0x07
    1844:	38 85       	ldd	r19, Y+8	; 0x08
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	82 57       	subi	r24, 0x72	; 114
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <_ZN11SimpleTimer3runEv+0x148>
    185a:	8e c0       	rjmp	.+284    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    185c:	2f 81       	ldd	r18, Y+7	; 0x07
    185e:	38 85       	ldd	r19, Y+8	; 0x08
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	c3 96       	adiw	r24, 0x33	; 51
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	fc 01       	movw	r30, r24
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	89 2b       	or	r24, r25
    1876:	81 f4       	brne	.+32     	; 0x1898 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1878:	2f 81       	ldd	r18, Y+7	; 0x07
    187a:	38 85       	ldd	r19, Y+8	; 0x08
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	84 5b       	subi	r24, 0xB4	; 180
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	31 83       	std	Z+1, r19	; 0x01
    1894:	20 83       	st	Z, r18
    1896:	70 c0       	rjmp	.+224    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1898:	2f 81       	ldd	r18, Y+7	; 0x07
    189a:	38 85       	ldd	r19, Y+8	; 0x08
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	cd 96       	adiw	r24, 0x3d	; 61
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 81       	ld	r18, Z
    18ae:	31 81       	ldd	r19, Z+1	; 0x01
    18b0:	4f 81       	ldd	r20, Y+7	; 0x07
    18b2:	58 85       	ldd	r21, Y+8	; 0x08
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	c3 96       	adiw	r24, 0x33	; 51
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	84 0f       	add	r24, r20
    18c0:	95 1f       	adc	r25, r21
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	28 17       	cp	r18, r24
    18ca:	39 07       	cpc	r19, r25
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <_ZN11SimpleTimer3runEv+0x1bc>
    18ce:	54 c0       	rjmp	.+168    	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    18d0:	2f 81       	ldd	r18, Y+7	; 0x07
    18d2:	38 85       	ldd	r19, Y+8	; 0x08
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	84 5b       	subi	r24, 0xB4	; 180
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	fc 01       	movw	r30, r24
    18ea:	31 83       	std	Z+1, r19	; 0x01
    18ec:	20 83       	st	Z, r18
                        numRuns[i]++;
    18ee:	2f 81       	ldd	r18, Y+7	; 0x07
    18f0:	38 85       	ldd	r19, Y+8	; 0x08
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	cd 96       	adiw	r24, 0x3d	; 61
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	82 0f       	add	r24, r18
    18fe:	93 1f       	adc	r25, r19
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	9c 01       	movw	r18, r24
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	4f 81       	ldd	r20, Y+7	; 0x07
    190e:	58 85       	ldd	r21, Y+8	; 0x08
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	cd 96       	adiw	r24, 0x3d	; 61
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	84 0f       	add	r24, r20
    191c:	95 1f       	adc	r25, r21
    191e:	fc 01       	movw	r30, r24
    1920:	31 83       	std	Z+1, r19	; 0x01
    1922:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1924:	2f 81       	ldd	r18, Y+7	; 0x07
    1926:	38 85       	ldd	r19, Y+8	; 0x08
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	cd 96       	adiw	r24, 0x3d	; 61
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	82 0f       	add	r24, r18
    1934:	93 1f       	adc	r25, r19
    1936:	fc 01       	movw	r30, r24
    1938:	20 81       	ld	r18, Z
    193a:	31 81       	ldd	r19, Z+1	; 0x01
    193c:	4f 81       	ldd	r20, Y+7	; 0x07
    193e:	58 85       	ldd	r21, Y+8	; 0x08
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	c3 96       	adiw	r24, 0x33	; 51
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	84 0f       	add	r24, r20
    194c:	95 1f       	adc	r25, r21
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	7c f0       	brlt	.+30     	; 0x1978 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    195a:	2f 81       	ldd	r18, Y+7	; 0x07
    195c:	38 85       	ldd	r19, Y+8	; 0x08
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	84 5b       	subi	r24, 0xB4	; 180
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	31 83       	std	Z+1, r19	; 0x01
    1976:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	0a 97       	sbiw	r24, 0x0a	; 10
    1988:	0c f4       	brge	.+2      	; 0x198c <_ZN11SimpleTimer3runEv+0x278>
    198a:	d6 ce       	rjmp	.-596    	; 0x1738 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    198c:	1a 82       	std	Y+2, r1	; 0x02
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	46 c0       	rjmp	.+140    	; 0x1a1e <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	84 5b       	subi	r24, 0xB4	; 180
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	91 05       	cpc	r25, r1
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <_ZN11SimpleTimer3runEv+0x2a4>
    19b2:	02 97       	sbiw	r24, 0x02	; 2
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    19b6:	2e c0       	rjmp	.+92     	; 0x1a14 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    19b8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ba:	38 85       	ldd	r19, Y+8	; 0x08
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	45 96       	adiw	r24, 0x15	; 21
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	fc 01       	movw	r30, r24
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	fc 01       	movw	r30, r24
    19d2:	09 95       	icall
                break;
    19d4:	1f c0       	rjmp	.+62     	; 0x1a14 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    19d6:	2f 81       	ldd	r18, Y+7	; 0x07
    19d8:	38 85       	ldd	r19, Y+8	; 0x08
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	45 96       	adiw	r24, 0x15	; 21
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	fc 01       	movw	r30, r24
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	fc 01       	movw	r30, r24
    19f0:	09 95       	icall
                deleteTimer(i);
    19f2:	8f 81       	ldd	r24, Y+7	; 0x07
    19f4:	98 85       	ldd	r25, Y+8	; 0x08
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	08 96       	adiw	r24, 0x08	; 8
    19fe:	fc 01       	movw	r30, r24
    1a00:	20 81       	ld	r18, Z
    1a02:	31 81       	ldd	r19, Z+1	; 0x01
    1a04:	49 81       	ldd	r20, Y+1	; 0x01
    1a06:	5a 81       	ldd	r21, Y+2	; 0x02
    1a08:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0a:	98 85       	ldd	r25, Y+8	; 0x08
    1a0c:	ba 01       	movw	r22, r20
    1a0e:	f9 01       	movw	r30, r18
    1a10:	09 95       	icall
                break;
    1a12:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	0a 97       	sbiw	r24, 0x0a	; 10
    1a24:	0c f4       	brge	.+2      	; 0x1a28 <_ZN11SimpleTimer3runEv+0x314>
    1a26:	b5 cf       	rjmp	.-150    	; 0x1992 <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1a28:	28 96       	adiw	r28, 0x08	; 8
    1a2a:	e6 e0       	ldi	r30, 0x06	; 6
    1a2c:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00001a30 <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1a30:	a4 e0       	ldi	r26, 0x04	; 4
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e1       	ldi	r30, 0x1E	; 30
    1a36:	fd e0       	ldi	r31, 0x0D	; 13
    1a38:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	84 55       	subi	r24, 0x54	; 84
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a50:	1c f0       	brlt	.+6      	; 0x1a58 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1a52:	8f ef       	ldi	r24, 0xFF	; 255
    1a54:	9f ef       	ldi	r25, 0xFF	; 255
    1a56:	1f c0       	rjmp	.+62     	; 0x1a96 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a58:	1a 82       	std	Y+2, r1	; 0x02
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	45 96       	adiw	r24, 0x15	; 21
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	fc 01       	movw	r30, r24
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	89 2b       	or	r24, r25
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a90:	34 f3       	brlt	.-52     	; 0x1a5e <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
}
    1a96:	24 96       	adiw	r28, 0x04	; 4
    1a98:	e2 e0       	ldi	r30, 0x02	; 2
    1a9a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001a9e <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1a9e:	ac e0       	ldi	r26, 0x0C	; 12
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e5       	ldi	r30, 0x55	; 85
    1aa4:	fd e0       	ldi	r31, 0x0D	; 13
    1aa6:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	4d 83       	std	Y+5, r20	; 0x05
    1ab0:	5e 83       	std	Y+6, r21	; 0x06
    1ab2:	6f 83       	std	Y+7, r22	; 0x07
    1ab4:	78 87       	std	Y+8, r23	; 0x08
    1ab6:	3a 87       	std	Y+10, r19	; 0x0a
    1ab8:	29 87       	std	Y+9, r18	; 0x09
    1aba:	1c 87       	std	Y+12, r17	; 0x0c
    1abc:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	b6 df       	rcall	.-148    	; 0x1a30 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	99 23       	and	r25, r25
    1ace:	1c f4       	brge	.+6      	; 0x1ad6 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	6b c0       	rjmp	.+214    	; 0x1bac <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	89 2b       	or	r24, r25
    1adc:	19 f4       	brne	.+6      	; 0x1ae4 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	64 c0       	rjmp	.+200    	; 0x1bac <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	82 0f       	add	r24, r18
    1af6:	93 1f       	adc	r25, r19
    1af8:	9c 01       	movw	r18, r24
    1afa:	22 5c       	subi	r18, 0xC2	; 194
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	af 81       	ldd	r26, Y+7	; 0x07
    1b04:	b8 85       	ldd	r27, Y+8	; 0x08
    1b06:	f9 01       	movw	r30, r18
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	45 96       	adiw	r24, 0x15	; 21
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	29 85       	ldd	r18, Y+9	; 0x09
    1b24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b26:	fc 01       	movw	r30, r24
    1b28:	31 83       	std	Z+1, r19	; 0x01
    1b2a:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	c3 96       	adiw	r24, 0x33	; 51
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b40:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b42:	fc 01       	movw	r30, r24
    1b44:	31 83       	std	Z+1, r19	; 0x01
    1b46:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1b48:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	82 57       	subi	r24, 0x72	; 114
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1b5e:	65 dd       	rcall	.-1334   	; 0x162a <_ZL7elapsedv>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	4b 81       	ldd	r20, Y+3	; 0x03
    1b66:	5c 81       	ldd	r21, Y+4	; 0x04
    1b68:	29 81       	ldd	r18, Y+1	; 0x01
    1b6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	24 0f       	add	r18, r20
    1b76:	35 1f       	adc	r19, r21
    1b78:	2e 5f       	subi	r18, 0xFE	; 254
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	84 55       	subi	r24, 0x54	; 84
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	9c 01       	movw	r18, r24
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	84 55       	subi	r24, 0x54	; 84
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	31 83       	std	Z+1, r19	; 0x01
    1ba6:	20 83       	st	Z, r18

    return freeTimer;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1bac:	2c 96       	adiw	r28, 0x0c	; 12
    1bae:	e4 e0       	ldi	r30, 0x04	; 4
    1bb0:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

00001bb4 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1bb4:	a8 e0       	ldi	r26, 0x08	; 8
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    1bba:	fd e0       	ldi	r31, 0x0D	; 13
    1bbc:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	4b 83       	std	Y+3, r20	; 0x03
    1bc6:	5c 83       	std	Y+4, r21	; 0x04
    1bc8:	6d 83       	std	Y+5, r22	; 0x05
    1bca:	7e 83       	std	Y+6, r23	; 0x06
    1bcc:	38 87       	std	Y+8, r19	; 0x08
    1bce:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	06 96       	adiw	r24, 0x06	; 6
    1bdc:	dc 01       	movw	r26, r24
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	2f 81       	ldd	r18, Y+7	; 0x07
    1be4:	38 85       	ldd	r19, Y+8	; 0x08
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	ad 81       	ldd	r26, Y+5	; 0x05
    1bec:	be 81       	ldd	r27, Y+6	; 0x06
    1bee:	e9 80       	ldd	r14, Y+1	; 0x01
    1bf0:	fa 80       	ldd	r15, Y+2	; 0x02
    1bf2:	00 e0       	ldi	r16, 0x00	; 0
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	bd 01       	movw	r22, r26
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	09 95       	icall
}
    1bfe:	28 96       	adiw	r28, 0x08	; 8
    1c00:	e6 e0       	ldi	r30, 0x06	; 6
    1c02:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00001c06 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1c06:	a8 e0       	ldi	r26, 0x08	; 8
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e0       	ldi	r30, 0x09	; 9
    1c0c:	fe e0       	ldi	r31, 0x0E	; 14
    1c0e:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	4b 83       	std	Y+3, r20	; 0x03
    1c18:	5c 83       	std	Y+4, r21	; 0x04
    1c1a:	6d 83       	std	Y+5, r22	; 0x05
    1c1c:	7e 83       	std	Y+6, r23	; 0x06
    1c1e:	38 87       	std	Y+8, r19	; 0x08
    1c20:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	dc 01       	movw	r26, r24
    1c28:	8d 91       	ld	r24, X+
    1c2a:	9c 91       	ld	r25, X
    1c2c:	06 96       	adiw	r24, 0x06	; 6
    1c2e:	dc 01       	movw	r26, r24
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	2f 81       	ldd	r18, Y+7	; 0x07
    1c36:	38 85       	ldd	r19, Y+8	; 0x08
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	ad 81       	ldd	r26, Y+5	; 0x05
    1c3e:	be 81       	ldd	r27, Y+6	; 0x06
    1c40:	e9 80       	ldd	r14, Y+1	; 0x01
    1c42:	fa 80       	ldd	r15, Y+2	; 0x02
    1c44:	01 e0       	ldi	r16, 0x01	; 1
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	ac 01       	movw	r20, r24
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	09 95       	icall
}
    1c50:	28 96       	adiw	r28, 0x08	; 8
    1c52:	e6 e0       	ldi	r30, 0x06	; 6
    1c54:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00001c58 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1c58:	a4 e0       	ldi	r26, 0x04	; 4
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	fe e0       	ldi	r31, 0x0E	; 14
    1c60:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	7c 83       	std	Y+4, r23	; 0x04
    1c6a:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	0a 97       	sbiw	r24, 0x0a	; 10
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1c74:	69 c0       	rjmp	.+210    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	84 55       	subi	r24, 0x54	; 84
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	89 2b       	or	r24, r25
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1c88:	5f c0       	rjmp	.+190    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1c8a:	29 81       	ldd	r18, Y+1	; 0x01
    1c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	45 96       	adiw	r24, 0x15	; 21
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	89 2b       	or	r24, r25
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1ca6:	50 c0       	rjmp	.+160    	; 0x1d48 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1ca8:	29 81       	ldd	r18, Y+1	; 0x01
    1caa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	45 96       	adiw	r24, 0x15	; 21
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	fc 01       	movw	r30, r24
    1cbc:	11 82       	std	Z+1, r1	; 0x01
    1cbe:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1cc0:	29 81       	ldd	r18, Y+1	; 0x01
    1cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	82 0f       	add	r24, r18
    1cca:	93 1f       	adc	r25, r19
    1ccc:	82 57       	subi	r24, 0x72	; 114
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1cd4:	29 81       	ldd	r18, Y+1	; 0x01
    1cd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	84 5b       	subi	r24, 0xB4	; 180
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	fc 01       	movw	r30, r24
    1cea:	11 82       	std	Z+1, r1	; 0x01
    1cec:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1cee:	29 81       	ldd	r18, Y+1	; 0x01
    1cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	ce 96       	adiw	r24, 0x3e	; 62
    1d04:	fc 01       	movw	r30, r24
    1d06:	10 82       	st	Z, r1
    1d08:	11 82       	std	Z+1, r1	; 0x01
    1d0a:	12 82       	std	Z+2, r1	; 0x02
    1d0c:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1d0e:	29 81       	ldd	r18, Y+1	; 0x01
    1d10:	3a 81       	ldd	r19, Y+2	; 0x02
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	cd 96       	adiw	r24, 0x3d	; 61
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	fc 01       	movw	r30, r24
    1d22:	11 82       	std	Z+1, r1	; 0x01
    1d24:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	84 55       	subi	r24, 0x54	; 84
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	9c 01       	movw	r18, r24
    1d36:	21 50       	subi	r18, 0x01	; 1
    1d38:	31 09       	sbc	r19, r1
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	84 55       	subi	r24, 0x54	; 84
    1d40:	9f 4f       	sbci	r25, 0xFF	; 255
    1d42:	fc 01       	movw	r30, r24
    1d44:	31 83       	std	Z+1, r19	; 0x01
    1d46:	20 83       	st	Z, r18
    }
}
    1d48:	24 96       	adiw	r28, 0x04	; 4
    1d4a:	e2 e0       	ldi	r30, 0x02	; 2
    1d4c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001d50 <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1d50:	a4 e0       	ldi	r26, 0x04	; 4
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ee ea       	ldi	r30, 0xAE	; 174
    1d56:	fe e0       	ldi	r31, 0x0E	; 14
    1d58:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	7c 83       	std	Y+4, r23	; 0x04
    1d62:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	0a 97       	sbiw	r24, 0x0a	; 10
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1d6e:	5d dc       	rcall	.-1862   	; 0x162a <_ZL7elapsedv>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	49 81       	ldd	r20, Y+1	; 0x01
    1d76:	5a 81       	ldd	r21, Y+2	; 0x02
    1d78:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	24 0f       	add	r18, r20
    1d86:	35 1f       	adc	r19, r21
    1d88:	2e 5f       	subi	r18, 0xFE	; 254
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
}
    1d96:	24 96       	adiw	r28, 0x04	; 4
    1d98:	e2 e0       	ldi	r30, 0x02	; 2
    1d9a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001d9e <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1d9e:	a4 e0       	ldi	r26, 0x04	; 4
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 ed       	ldi	r30, 0xD5	; 213
    1da4:	fe e0       	ldi	r31, 0x0E	; 14
    1da6:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	7c 83       	std	Y+4, r23	; 0x04
    1db0:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	0a 97       	sbiw	r24, 0x0a	; 10
    1db8:	14 f0       	brlt	.+4      	; 0x1dbe <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	0a c0       	rjmp	.+20     	; 0x1dd2 <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1dbe:	29 81       	ldd	r18, Y+1	; 0x01
    1dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	82 0f       	add	r24, r18
    1dc8:	93 1f       	adc	r25, r19
    1dca:	82 57       	subi	r24, 0x72	; 114
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	fc 01       	movw	r30, r24
    1dd0:	80 81       	ld	r24, Z
}
    1dd2:	24 96       	adiw	r28, 0x04	; 4
    1dd4:	e2 e0       	ldi	r30, 0x02	; 2
    1dd6:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001dda <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1dda:	a4 e0       	ldi	r26, 0x04	; 4
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 ef       	ldi	r30, 0xF3	; 243
    1de0:	fe e0       	ldi	r31, 0x0E	; 14
    1de2:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	7c 83       	std	Y+4, r23	; 0x04
    1dec:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	0a 97       	sbiw	r24, 0x0a	; 10
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1df6:	0b c0       	rjmp	.+22     	; 0x1e0e <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1df8:	29 81       	ldd	r18, Y+1	; 0x01
    1dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	82 0f       	add	r24, r18
    1e02:	93 1f       	adc	r25, r19
    1e04:	82 57       	subi	r24, 0x72	; 114
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 83       	st	Z, r18
}
    1e0e:	24 96       	adiw	r28, 0x04	; 4
    1e10:	e2 e0       	ldi	r30, 0x02	; 2
    1e12:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001e16 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1e16:	a4 e0       	ldi	r26, 0x04	; 4
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e1 e1       	ldi	r30, 0x11	; 17
    1e1c:	ff e0       	ldi	r31, 0x0F	; 15
    1e1e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	7c 83       	std	Y+4, r23	; 0x04
    1e28:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	0a 97       	sbiw	r24, 0x0a	; 10
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1e32:	0a c0       	rjmp	.+20     	; 0x1e48 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    1e34:	29 81       	ldd	r18, Y+1	; 0x01
    1e36:	3a 81       	ldd	r19, Y+2	; 0x02
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	82 57       	subi	r24, 0x72	; 114
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	fc 01       	movw	r30, r24
    1e46:	10 82       	st	Z, r1
}
    1e48:	24 96       	adiw	r28, 0x04	; 4
    1e4a:	e2 e0       	ldi	r30, 0x02	; 2
    1e4c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001e50 <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    1e50:	cf 92       	push	r12
    1e52:	ef 92       	push	r14
    1e54:	0f 93       	push	r16
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <_ZN7LCDBaseC1Ev+0xc>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f7 e0       	ldi	r31, 0x07	; 7
    1e6c:	cf 2e       	mov	r12, r31
    1e6e:	f0 2d       	mov	r31, r0
    1e70:	0f 2e       	mov	r0, r31
    1e72:	f6 e0       	ldi	r31, 0x06	; 6
    1e74:	ef 2e       	mov	r14, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	05 e0       	ldi	r16, 0x05	; 5
    1e7a:	24 e0       	ldi	r18, 0x04	; 4
    1e7c:	49 e0       	ldi	r20, 0x09	; 9
    1e7e:	68 e0       	ldi	r22, 0x08	; 8
    1e80:	21 d8       	rcall	.-4030   	; 0xec4 <_ZN13LiquidCrystalC1Ehhhhhh>
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	23 ea       	ldi	r18, 0xA3	; 163
    1e88:	31 e0       	ldi	r19, 0x01	; 1
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	31 83       	std	Z+1, r19	; 0x01
    1e8e:	20 83       	st	Z, r18
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	2a e0       	ldi	r18, 0x0A	; 10
    1e96:	e5 e1       	ldi	r30, 0x15	; 21
    1e98:	f1 e0       	ldi	r31, 0x01	; 1
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	58 96       	adiw	r26, 0x18	; 24
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	2a 95       	dec	r18
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <_ZN7LCDBaseC1Ev+0x4e>
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	25 e0       	ldi	r18, 0x05	; 5
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	fc 01       	movw	r30, r24
    1eb0:	33 a3       	std	Z+35, r19	; 0x23
    1eb2:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	08 d0       	rcall	.+16     	; 0x1eca <_ZN7LCDBase4InitEv>
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	0f 91       	pop	r16
    1ec4:	ef 90       	pop	r14
    1ec6:	cf 90       	pop	r12
    1ec8:	08 95       	ret

00001eca <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    1eca:	a2 e0       	ldi	r26, 0x02	; 2
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	42 e0       	ldi	r20, 0x02	; 2
    1ee2:	60 e1       	ldi	r22, 0x10	; 16
    1ee4:	bd d8       	rcall	.-3718   	; 0x1060 <_ZN13LiquidCrystal5beginEhhh>
    clear();
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	b4 d9       	rcall	.-3224   	; 0x1254 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	c3 d9       	rcall	.-3194   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>

}
    1ef6:	22 96       	adiw	r28, 0x02	; 2
    1ef8:	e2 e0       	ldi	r30, 0x02	; 2
    1efa:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001efe <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    1efe:	a4 e0       	ldi	r26, 0x04	; 4
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e8       	ldi	r30, 0x85	; 133
    1f04:	ff e0       	ldi	r31, 0x0F	; 15
    1f06:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	7c 83       	std	Y+4, r23	; 0x04
    1f10:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	42 2f       	mov	r20, r18
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	af d9       	rcall	.-3234   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    1f1e:	2f e2       	ldi	r18, 0x2F	; 47
    1f20:	33 e0       	ldi	r19, 0x03	; 3
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	b9 01       	movw	r22, r18
    1f28:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
}
    1f2c:	24 96       	adiw	r28, 0x04	; 4
    1f2e:	e2 e0       	ldi	r30, 0x02	; 2
    1f30:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001f34 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    1f34:	a6 e0       	ldi	r26, 0x06	; 6
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e0 ea       	ldi	r30, 0xA0	; 160
    1f3a:	ff e0       	ldi	r31, 0x0F	; 15
    1f3c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	7c 83       	std	Y+4, r23	; 0x04
    1f46:	6b 83       	std	Y+3, r22	; 0x03
    1f48:	5e 83       	std	Y+6, r21	; 0x06
    1f4a:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	b9 01       	movw	r22, r18
    1f56:	d3 df       	rcall	.-90     	; 0x1efe <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    1f58:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	42 2f       	mov	r20, r18
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	8c d9       	rcall	.-3304   	; 0x127c <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_ZN5Print5printERK6String>
}
    1f72:	26 96       	adiw	r28, 0x06	; 6
    1f74:	e2 e0       	ldi	r30, 0x02	; 2
    1f76:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001f7a <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    1f7a:	a4 e0       	ldi	r26, 0x04	; 4
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	69 d0       	rcall	.+210    	; 0x2062 <_ZN7LCDBase6getKeyEv>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	91 f0       	breq	.+36     	; 0x1fc2 <_ZN7LCDBase14DetectKeyPressEv+0x48>
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <_ZN7LCDBase14DetectKeyPressEv+0x34>
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	49 f0       	breq	.+18     	; 0x1fba <_ZN7LCDBase14DetectKeyPressEv+0x40>
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <_ZN7LCDBase14DetectKeyPressEv+0x44>
    1fac:	10 c0       	rjmp	.+32     	; 0x1fce <_ZN7LCDBase14DetectKeyPressEv+0x54>
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	49 f0       	breq	.+18     	; 0x1fc6 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    1fb4:	04 97       	sbiw	r24, 0x04	; 4
    1fb6:	49 f0       	breq	.+18     	; 0x1fca <_ZN7LCDBase14DetectKeyPressEv+0x50>
    1fb8:	0a c0       	rjmp	.+20     	; 0x1fce <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    1fce:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    1fd0:	24 96       	adiw	r28, 0x04	; 4
    1fd2:	e2 e0       	ldi	r30, 0x02	; 2
    1fd4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00001fd8 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    1fd8:	a6 e0       	ldi	r26, 0x06	; 6
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1fde:	ff e0       	ldi	r31, 0x0F	; 15
    1fe0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	7e 83       	std	Y+6, r23	; 0x06
    1fea:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    1fec:	1a 82       	std	Y+2, r1	; 0x02
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	1a c0       	rjmp	.+52     	; 0x2026 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	0c 96       	adiw	r24, 0x0c	; 12
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	82 0f       	add	r24, r18
    2002:	93 1f       	adc	r25, r19
    2004:	fc 01       	movw	r30, r24
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	9c 01       	movw	r18, r24
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	82 17       	cp	r24, r18
    2012:	93 07       	cpc	r25, r19
    2014:	18 f4       	brcc	.+6      	; 0x201c <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	1f c0       	rjmp	.+62     	; 0x205a <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	22 a1       	ldd	r18, Z+34	; 0x22
    202e:	33 a1       	ldd	r19, Z+35	; 0x23
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	82 17       	cp	r24, r18
    2036:	93 07       	cpc	r25, r19
    2038:	e4 f2       	brlt	.-72     	; 0x1ff2 <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	fc 01       	movw	r30, r24
    2040:	22 a1       	ldd	r18, Z+34	; 0x22
    2042:	33 a1       	ldd	r19, Z+35	; 0x23
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	82 17       	cp	r24, r18
    204a:	93 07       	cpc	r25, r19
    204c:	24 f0       	brlt	.+8      	; 0x2056 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
}
    205a:	26 96       	adiw	r28, 0x06	; 6
    205c:	e2 e0       	ldi	r30, 0x02	; 2
    205e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002062 <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    2062:	a6 e0       	ldi	r26, 0x06	; 6
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <analogRead>
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    207c:	29 81       	ldd	r18, Y+1	; 0x01
    207e:	3a 81       	ldd	r19, Y+2	; 0x02
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	b9 01       	movw	r22, r18
    2086:	a8 df       	rcall	.-176    	; 0x1fd8 <_ZN7LCDBase13getKeyFromValEj>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2090:	26 96       	adiw	r28, 0x06	; 6
    2092:	e2 e0       	ldi	r30, 0x02	; 2
    2094:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002098 <_ZN5EERefC1Ei>:
	};

	template <class T> struct _UCXXEXPORT minus : binary_function<T,T,T>{
		T operator()(const T& x, const T& y) const{
			return x - y;
		}
    2098:	a4 e0       	ldi	r26, 0x04	; 4
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e2 e5       	ldi	r30, 0x52	; 82
    209e:	f0 e1       	ldi	r31, 0x10	; 16
    20a0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	7c 83       	std	Y+4, r23	; 0x04
    20aa:	6b 83       	std	Y+3, r22	; 0x03
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	2b 81       	ldd	r18, Y+3	; 0x03
    20b2:	3c 81       	ldd	r19, Y+4	; 0x04
    20b4:	fc 01       	movw	r30, r24
    20b6:	31 83       	std	Z+1, r19	; 0x01
    20b8:	20 83       	st	Z, r18
    20ba:	24 96       	adiw	r28, 0x04	; 4
    20bc:	e2 e0       	ldi	r30, 0x02	; 2
    20be:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000020c2 <_ZNK5EERefdeEv>:
    20c2:	a2 e0       	ldi	r26, 0x02	; 2
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e6       	ldi	r30, 0x67	; 103
    20c8:	f0 e1       	ldi	r31, 0x10	; 16
    20ca:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	fc 01       	movw	r30, r24
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	0e 94 f6 32 	call	0x65ec	; 0x65ec <eeprom_read_byte>
    20e0:	22 96       	adiw	r28, 0x02	; 2
    20e2:	e2 e0       	ldi	r30, 0x02	; 2
    20e4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000020e8 <_ZNK5EERefcvKhEv>:
    20e8:	a2 e0       	ldi	r26, 0x02	; 2
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ea e7       	ldi	r30, 0x7A	; 122
    20ee:	f0 e1       	ldi	r31, 0x10	; 16
    20f0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	e2 df       	rcall	.-60     	; 0x20c2 <_ZNK5EERefdeEv>
    20fe:	22 96       	adiw	r28, 0x02	; 2
    2100:	e2 e0       	ldi	r30, 0x02	; 2
    2102:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002106 <_ZN11EEPROMClassixEi>:
    2106:	a6 e0       	ldi	r26, 0x06	; 6
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e9 e8       	ldi	r30, 0x89	; 137
    210c:	f0 e1       	ldi	r31, 0x10	; 16
    210e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	7e 83       	std	Y+6, r23	; 0x06
    2118:	6d 83       	std	Y+5, r22	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	bc 01       	movw	r22, r24
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b9 df       	rcall	.-142    	; 0x2098 <_ZN5EERefC1Ei>
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	26 96       	adiw	r28, 0x06	; 6
    212c:	e2 e0       	ldi	r30, 0x02	; 2
    212e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002132 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    2132:	aa e0       	ldi	r26, 0x0A	; 10
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ef e9       	ldi	r30, 0x9F	; 159
    2138:	f0 e1       	ldi	r31, 0x10	; 16
    213a:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	78 87       	std	Y+8, r23	; 0x08
    2144:	6f 83       	std	Y+7, r22	; 0x07
    2146:	5a 87       	std	Y+10, r21	; 0x0a
    2148:	49 87       	std	Y+9, r20	; 0x09
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	1d c0       	rjmp	.+58     	; 0x218a <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    2150:	0d 81       	ldd	r16, Y+5	; 0x05
    2152:	1e 81       	ldd	r17, Y+6	; 0x06
    2154:	c8 01       	movw	r24, r16
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	8f 81       	ldd	r24, Y+7	; 0x07
    215e:	98 85       	ldd	r25, Y+8	; 0x08
    2160:	9c 01       	movw	r18, r24
    2162:	2f 5f       	subi	r18, 0xFF	; 255
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	38 87       	std	Y+8, r19	; 0x08
    2168:	2f 83       	std	Y+7, r18	; 0x07
    216a:	bc 01       	movw	r22, r24
    216c:	8d ee       	ldi	r24, 0xED	; 237
    216e:	92 e0       	ldi	r25, 0x02	; 2
    2170:	ca df       	rcall	.-108    	; 0x2106 <_ZN11EEPROMClassixEi>
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	ce 01       	movw	r24, r28
    2178:	03 96       	adiw	r24, 0x03	; 3
    217a:	b6 df       	rcall	.-148    	; 0x20e8 <_ZNK5EERefcvKhEv>
    217c:	f8 01       	movw	r30, r16
    217e:	80 83       	st	Z, r24
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	29 81       	ldd	r18, Y+1	; 0x01
    218c:	3a 81       	ldd	r19, Y+2	; 0x02
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	28 17       	cp	r18, r24
    2194:	39 07       	cpc	r19, r25
    2196:	e0 f2       	brcs	.-72     	; 0x2150 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2198:	2a 96       	adiw	r28, 0x0a	; 10
    219a:	e4 e0       	ldi	r30, 0x04	; 4
    219c:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

000021a0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>:
    21a0:	a6 e1       	ldi	r26, 0x16	; 22
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 ed       	ldi	r30, 0xD6	; 214
    21a6:	f0 e1       	ldi	r31, 0x10	; 16
    21a8:	0c 94 ee 2b 	jmp	0x57dc	; 0x57dc <__prologue_saves__+0x14>
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    21b0:	7a 8b       	std	Y+18, r23	; 0x12
    21b2:	69 8b       	std	Y+17, r22	; 0x11
    21b4:	1f 82       	std	Y+7, r1	; 0x07
    21b6:	18 86       	std	Y+8, r1	; 0x08
    21b8:	19 86       	std	Y+9, r1	; 0x09
    21ba:	1a 86       	std	Y+10, r1	; 0x0a
    21bc:	89 89       	ldd	r24, Y+17	; 0x11
    21be:	9a 89       	ldd	r25, Y+18	; 0x12
    21c0:	18 16       	cp	r1, r24
    21c2:	19 06       	cpc	r1, r25
    21c4:	5c f0       	brlt	.+22     	; 0x21dc <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x3c>
    21c6:	80 e4       	ldi	r24, 0x40	; 64
    21c8:	93 e0       	ldi	r25, 0x03	; 3
    21ca:	bc 01       	movw	r22, r24
    21cc:	80 ec       	ldi	r24, 0xC0	; 192
    21ce:	94 e0       	ldi	r25, 0x04	; 4
    21d0:	0e 94 ef 25 	call	0x4bde	; 0x4bde <_ZN5Print7printlnEPK19__FlashStringHelper>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	dc 01       	movw	r26, r24
    21da:	24 c1       	rjmp	.+584    	; 0x2424 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x284>
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	9a 89       	ldd	r25, Y+18	; 0x12
    21e0:	05 97       	sbiw	r24, 0x05	; 5
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x46>
    21e4:	47 c0       	rjmp	.+142    	; 0x2274 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0xd4>
    21e6:	1a 82       	std	Y+2, r1	; 0x02
    21e8:	19 82       	std	Y+1, r1	; 0x01
    21ea:	1e c0       	rjmp	.+60     	; 0x2228 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x88>
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    21f6:	38 89       	ldd	r19, Y+16	; 0x10
    21f8:	82 0f       	add	r24, r18
    21fa:	93 1f       	adc	r25, r19
    21fc:	19 d1       	rcall	.+562    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    21fe:	09 2e       	mov	r0, r25
    2200:	00 0c       	add	r0, r0
    2202:	aa 0b       	sbc	r26, r26
    2204:	bb 0b       	sbc	r27, r27
    2206:	2f 81       	ldd	r18, Y+7	; 0x07
    2208:	38 85       	ldd	r19, Y+8	; 0x08
    220a:	49 85       	ldd	r20, Y+9	; 0x09
    220c:	5a 85       	ldd	r21, Y+10	; 0x0a
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	a4 1f       	adc	r26, r20
    2214:	b5 1f       	adc	r27, r21
    2216:	8f 83       	std	Y+7, r24	; 0x07
    2218:	98 87       	std	Y+8, r25	; 0x08
    221a:	a9 87       	std	Y+9, r26	; 0x09
    221c:	ba 87       	std	Y+10, r27	; 0x0a
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	29 81       	ldd	r18, Y+1	; 0x01
    222a:	3a 81       	ldd	r19, Y+2	; 0x02
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	28 17       	cp	r18, r24
    2232:	39 07       	cpc	r19, r25
    2234:	dc f2       	brlt	.-74     	; 0x21ec <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x4c>
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	9a 89       	ldd	r25, Y+18	; 0x12
    223a:	9c 01       	movw	r18, r24
    223c:	99 0f       	add	r25, r25
    223e:	44 0b       	sbc	r20, r20
    2240:	55 0b       	sbc	r21, r21
    2242:	8f 81       	ldd	r24, Y+7	; 0x07
    2244:	98 85       	ldd	r25, Y+8	; 0x08
    2246:	a9 85       	ldd	r26, Y+9	; 0x09
    2248:	ba 85       	ldd	r27, Y+10	; 0x0a
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__divmodsi4>
    2252:	da 01       	movw	r26, r20
    2254:	c9 01       	movw	r24, r18
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 9c 22 	call	0x4538	; 0x4538 <__floatsisf>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
    226a:	8b 85       	ldd	r24, Y+11	; 0x0b
    226c:	9c 85       	ldd	r25, Y+12	; 0x0c
    226e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2270:	be 85       	ldd	r27, Y+14	; 0x0e
    2272:	d8 c0       	rjmp	.+432    	; 0x2424 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x284>
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	98 89       	ldd	r25, Y+16	; 0x10
    2278:	db d0       	rcall	.+438    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    227a:	8c 01       	movw	r16, r24
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	d6 d0       	rcall	.+428    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    2284:	21 e0       	ldi	r18, 0x01	; 1
    2286:	08 17       	cp	r16, r24
    2288:	19 07       	cpc	r17, r25
    228a:	0c f0       	brlt	.+2      	; 0x228e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0xee>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	22 23       	and	r18, r18
    2290:	61 f0       	breq	.+24     	; 0x22aa <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x10a>
    2292:	8f 85       	ldd	r24, Y+15	; 0x0f
    2294:	98 89       	ldd	r25, Y+16	; 0x10
    2296:	cc d0       	rcall	.+408    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	8f 85       	ldd	r24, Y+15	; 0x0f
    229e:	98 89       	ldd	r25, Y+16	; 0x10
    22a0:	02 96       	adiw	r24, 0x02	; 2
    22a2:	c6 d0       	rcall	.+396    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
    22a8:	0b c0       	rjmp	.+22     	; 0x22c0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x120>
    22aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ac:	98 89       	ldd	r25, Y+16	; 0x10
    22ae:	02 96       	adiw	r24, 0x02	; 2
    22b0:	bf d0       	rcall	.+382    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b8:	98 89       	ldd	r25, Y+16	; 0x10
    22ba:	ba d0       	rcall	.+372    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	80 c0       	rjmp	.+256    	; 0x23ca <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x22a>
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    22d4:	38 89       	ldd	r19, Y+16	; 0x10
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	aa d0       	rcall	.+340    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    22dc:	9c 01       	movw	r18, r24
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	28 17       	cp	r18, r24
    22e6:	39 07       	cpc	r19, r25
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x14c>
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	44 23       	and	r20, r20
    22ee:	f1 f0       	breq	.+60     	; 0x232c <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x18c>
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	09 2e       	mov	r0, r25
    22f6:	00 0c       	add	r0, r0
    22f8:	aa 0b       	sbc	r26, r26
    22fa:	bb 0b       	sbc	r27, r27
    22fc:	2f 81       	ldd	r18, Y+7	; 0x07
    22fe:	38 85       	ldd	r19, Y+8	; 0x08
    2300:	49 85       	ldd	r20, Y+9	; 0x09
    2302:	5a 85       	ldd	r21, Y+10	; 0x0a
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	a4 1f       	adc	r26, r20
    230a:	b5 1f       	adc	r27, r21
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	2f 85       	ldd	r18, Y+15	; 0x0f
    231e:	38 89       	ldd	r19, Y+16	; 0x10
    2320:	82 0f       	add	r24, r18
    2322:	93 1f       	adc	r25, r19
    2324:	85 d0       	rcall	.+266    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	4a c0       	rjmp	.+148    	; 0x23c0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x220>
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	2f 85       	ldd	r18, Y+15	; 0x0f
    2336:	38 89       	ldd	r19, Y+16	; 0x10
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	79 d0       	rcall	.+242    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    233e:	9c 01       	movw	r18, r24
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	82 17       	cp	r24, r18
    2348:	93 07       	cpc	r25, r19
    234a:	0c f0       	brlt	.+2      	; 0x234e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x1ae>
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	44 23       	and	r20, r20
    2350:	f1 f0       	breq	.+60     	; 0x238e <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x1ee>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	09 2e       	mov	r0, r25
    2358:	00 0c       	add	r0, r0
    235a:	aa 0b       	sbc	r26, r26
    235c:	bb 0b       	sbc	r27, r27
    235e:	2f 81       	ldd	r18, Y+7	; 0x07
    2360:	38 85       	ldd	r19, Y+8	; 0x08
    2362:	49 85       	ldd	r20, Y+9	; 0x09
    2364:	5a 85       	ldd	r21, Y+10	; 0x0a
    2366:	82 0f       	add	r24, r18
    2368:	93 1f       	adc	r25, r19
    236a:	a4 1f       	adc	r26, r20
    236c:	b5 1f       	adc	r27, r21
    236e:	8f 83       	std	Y+7, r24	; 0x07
    2370:	98 87       	std	Y+8, r25	; 0x08
    2372:	a9 87       	std	Y+9, r26	; 0x09
    2374:	ba 87       	std	Y+10, r27	; 0x0a
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2380:	38 89       	ldd	r19, Y+16	; 0x10
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	54 d0       	rcall	.+168    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	19 c0       	rjmp	.+50     	; 0x23c0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x220>
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	2f 85       	ldd	r18, Y+15	; 0x0f
    2398:	38 89       	ldd	r19, Y+16	; 0x10
    239a:	82 0f       	add	r24, r18
    239c:	93 1f       	adc	r25, r19
    239e:	48 d0       	rcall	.+144    	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    23a0:	09 2e       	mov	r0, r25
    23a2:	00 0c       	add	r0, r0
    23a4:	aa 0b       	sbc	r26, r26
    23a6:	bb 0b       	sbc	r27, r27
    23a8:	2f 81       	ldd	r18, Y+7	; 0x07
    23aa:	38 85       	ldd	r19, Y+8	; 0x08
    23ac:	49 85       	ldd	r20, Y+9	; 0x09
    23ae:	5a 85       	ldd	r21, Y+10	; 0x0a
    23b0:	82 0f       	add	r24, r18
    23b2:	93 1f       	adc	r25, r19
    23b4:	a4 1f       	adc	r26, r20
    23b6:	b5 1f       	adc	r27, r21
    23b8:	8f 83       	std	Y+7, r24	; 0x07
    23ba:	98 87       	std	Y+8, r25	; 0x08
    23bc:	a9 87       	std	Y+9, r26	; 0x09
    23be:	ba 87       	std	Y+10, r27	; 0x0a
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	29 81       	ldd	r18, Y+1	; 0x01
    23cc:	3a 81       	ldd	r19, Y+2	; 0x02
    23ce:	89 89       	ldd	r24, Y+17	; 0x11
    23d0:	9a 89       	ldd	r25, Y+18	; 0x12
    23d2:	28 17       	cp	r18, r24
    23d4:	39 07       	cpc	r19, r25
    23d6:	0c f4       	brge	.+2      	; 0x23da <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x23a>
    23d8:	78 cf       	rjmp	.-272    	; 0x22ca <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi+0x12a>
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 9c 22 	call	0x4538	; 0x4538 <__floatsisf>
    23e6:	6b 01       	movw	r12, r22
    23e8:	7c 01       	movw	r14, r24
    23ea:	89 89       	ldd	r24, Y+17	; 0x11
    23ec:	9a 89       	ldd	r25, Y+18	; 0x12
    23ee:	02 97       	sbiw	r24, 0x02	; 2
    23f0:	09 2e       	mov	r0, r25
    23f2:	00 0c       	add	r0, r0
    23f4:	aa 0b       	sbc	r26, r26
    23f6:	bb 0b       	sbc	r27, r27
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 9c 22 	call	0x4538	; 0x4538 <__floatsisf>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9c 01       	movw	r18, r24
    2406:	ad 01       	movw	r20, r26
    2408:	c7 01       	movw	r24, r14
    240a:	b6 01       	movw	r22, r12
    240c:	0e 94 01 22 	call	0x4402	; 0x4402 <__divsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8b 87       	std	Y+11, r24	; 0x0b
    2416:	9c 87       	std	Y+12, r25	; 0x0c
    2418:	ad 87       	std	Y+13, r26	; 0x0d
    241a:	be 87       	std	Y+14, r27	; 0x0e
    241c:	8b 85       	ldd	r24, Y+11	; 0x0b
    241e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2420:	ad 85       	ldd	r26, Y+13	; 0x0d
    2422:	be 85       	ldd	r27, Y+14	; 0x0e
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	66 96       	adiw	r28, 0x16	; 22
    242a:	e8 e0       	ldi	r30, 0x08	; 8
    242c:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__epilogue_restores__+0x14>

00002430 <_ZN6EEWrapIiEcvKiEv>:
    2430:	a2 e0       	ldi	r26, 0x02	; 2
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e1       	ldi	r30, 0x1E	; 30
    2436:	f2 e1       	ldi	r31, 0x12	; 18
    2438:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	04 d0       	rcall	.+8      	; 0x244e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    2446:	22 96       	adiw	r28, 0x02	; 2
    2448:	e2 e0       	ldi	r30, 0x02	; 2
    244a:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000244e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:
    244e:	a4 e0       	ldi	r26, 0x04	; 4
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ed e2       	ldi	r30, 0x2D	; 45
    2454:	f2 e1       	ldi	r31, 0x12	; 18
    2456:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    245a:	9c 83       	std	Y+4, r25	; 0x04
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	11 d0       	rcall	.+34     	; 0x2486 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    2464:	bc 01       	movw	r22, r24
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9e 01       	movw	r18, r28
    246c:	2f 5f       	subi	r18, 0xFF	; 255
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	82 0f       	add	r24, r18
    2472:	93 1f       	adc	r25, r19
    2474:	42 e0       	ldi	r20, 0x02	; 2
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	5c de       	rcall	.-840    	; 0x2132 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	24 96       	adiw	r28, 0x04	; 4
    2480:	e2 e0       	ldi	r30, 0x02	; 2
    2482:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002486 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:

        D &EEWrite( const T& v ){
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return self();
        }
        protected: STATIC_ACCESS
    2486:	a2 e0       	ldi	r26, 0x02	; 2
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e9 e4       	ldi	r30, 0x49	; 73
    248c:	f2 e1       	ldi	r31, 0x12	; 18
    248e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	22 96       	adiw	r28, 0x02	; 2
    249c:	e2 e0       	ldi	r30, 0x02	; 2
    249e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000024a2 <_ZNK6String5c_strEv>:
        Serial.println(tankPH, 2);
        //}
        digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    }
}
    24a2:	a2 e0       	ldi	r26, 0x02	; 2
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e5       	ldi	r30, 0x57	; 87
    24a8:	f2 e1       	ldi	r31, 0x12	; 18
    24aa:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	fc 01       	movw	r30, r24
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	22 96       	adiw	r28, 0x02	; 2
    24be:	e2 e0       	ldi	r30, 0x02	; 2
    24c0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000024c4 <_ZN15StringSumHelperC1EPKc>:
    24c4:	a4 e0       	ldi	r26, 0x04	; 4
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e8 e6       	ldi	r30, 0x68	; 104
    24ca:	f2 e1       	ldi	r31, 0x12	; 18
    24cc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	7c 83       	std	Y+4, r23	; 0x04
    24d6:	6b 83       	std	Y+3, r22	; 0x03
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	2b 81       	ldd	r18, Y+3	; 0x03
    24de:	3c 81       	ldd	r19, Y+4	; 0x04
    24e0:	b9 01       	movw	r22, r18
    24e2:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    24e6:	24 96       	adiw	r28, 0x04	; 4
    24e8:	e2 e0       	ldi	r30, 0x02	; 2
    24ea:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000024ee <_ZN5EERefaSEh>:
    24ee:	a3 e0       	ldi	r26, 0x03	; 3
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ed e7       	ldi	r30, 0x7D	; 125
    24f4:	f2 e1       	ldi	r31, 0x12	; 18
    24f6:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	6b 83       	std	Y+3, r22	; 0x03
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	fc 01       	movw	r30, r24
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	6b 81       	ldd	r22, Y+3	; 0x03
    250c:	0e 94 fe 32 	call	0x65fc	; 0x65fc <eeprom_write_byte>
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	23 96       	adiw	r28, 0x03	; 3
    2516:	e2 e0       	ldi	r30, 0x02	; 2
    2518:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000251c <_ZN5EERef6updateEh>:
    251c:	a3 e0       	ldi	r26, 0x03	; 3
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e4 e9       	ldi	r30, 0x94	; 148
    2522:	f2 e1       	ldi	r31, 0x12	; 18
    2524:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	6b 83       	std	Y+3, r22	; 0x03
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	da dd       	rcall	.-1100   	; 0x20e8 <_ZNK5EERefcvKhEv>
    2534:	98 2f       	mov	r25, r24
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	98 17       	cp	r25, r24
    253a:	29 f0       	breq	.+10     	; 0x2546 <_ZN5EERef6updateEh+0x2a>
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	6b 81       	ldd	r22, Y+3	; 0x03
    2542:	d5 df       	rcall	.-86     	; 0x24ee <_ZN5EERefaSEh>
    2544:	02 c0       	rjmp	.+4      	; 0x254a <_ZN5EERef6updateEh+0x2e>
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	23 96       	adiw	r28, 0x03	; 3
    254c:	e2 e0       	ldi	r30, 0x02	; 2
    254e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002552 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2552:	ab e0       	ldi	r26, 0x0B	; 11
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ef ea       	ldi	r30, 0xAF	; 175
    2558:	f2 e1       	ldi	r31, 0x12	; 18
    255a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    255e:	9f 83       	std	Y+7, r25	; 0x07
    2560:	8e 83       	std	Y+6, r24	; 0x06
    2562:	79 87       	std	Y+9, r23	; 0x09
    2564:	68 87       	std	Y+8, r22	; 0x08
    2566:	5b 87       	std	Y+11, r21	; 0x0b
    2568:	4a 87       	std	Y+10, r20	; 0x0a
    256a:	1a 82       	std	Y+2, r1	; 0x02
    256c:	19 82       	std	Y+1, r1	; 0x01
    256e:	20 c0       	rjmp	.+64     	; 0x25b0 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	9f 81       	ldd	r25, Y+7	; 0x07
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	8b 83       	std	Y+3, r24	; 0x03
    257a:	88 85       	ldd	r24, Y+8	; 0x08
    257c:	99 85       	ldd	r25, Y+9	; 0x09
    257e:	9c 01       	movw	r18, r24
    2580:	2f 5f       	subi	r18, 0xFF	; 255
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	39 87       	std	Y+9, r19	; 0x09
    2586:	28 87       	std	Y+8, r18	; 0x08
    2588:	bc 01       	movw	r22, r24
    258a:	8e ee       	ldi	r24, 0xEE	; 238
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	bb dd       	rcall	.-1162   	; 0x2106 <_ZN11EEPROMClassixEi>
    2590:	9d 83       	std	Y+5, r25	; 0x05
    2592:	8c 83       	std	Y+4, r24	; 0x04
    2594:	ce 01       	movw	r24, r28
    2596:	04 96       	adiw	r24, 0x04	; 4
    2598:	6b 81       	ldd	r22, Y+3	; 0x03
    259a:	c0 df       	rcall	.-128    	; 0x251c <_ZN5EERef6updateEh>
    259c:	8e 81       	ldd	r24, Y+6	; 0x06
    259e:	9f 81       	ldd	r25, Y+7	; 0x07
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9f 83       	std	Y+7, r25	; 0x07
    25a4:	8e 83       	std	Y+6, r24	; 0x06
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	29 81       	ldd	r18, Y+1	; 0x01
    25b2:	3a 81       	ldd	r19, Y+2	; 0x02
    25b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b8:	28 17       	cp	r18, r24
    25ba:	39 07       	cpc	r19, r25
    25bc:	c8 f2       	brcs	.-78     	; 0x2570 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    25be:	2b 96       	adiw	r28, 0x0b	; 11
    25c0:	e2 e0       	ldi	r30, 0x02	; 2
    25c2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000025c6 <_ZN5PrintC1ERKS_>:
    25c6:	a4 e0       	ldi	r26, 0x04	; 4
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e9 ee       	ldi	r30, 0xE9	; 233
    25cc:	f2 e1       	ldi	r31, 0x12	; 18
    25ce:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	7c 83       	std	Y+4, r23	; 0x04
    25d8:	6b 83       	std	Y+3, r22	; 0x03
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	24 ed       	ldi	r18, 0xD4	; 212
    25e0:	31 e0       	ldi	r19, 0x01	; 1
    25e2:	fc 01       	movw	r30, r24
    25e4:	31 83       	std	Z+1, r19	; 0x01
    25e6:	20 83       	st	Z, r18
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	fc 01       	movw	r30, r24
    25ee:	22 81       	ldd	r18, Z+2	; 0x02
    25f0:	33 81       	ldd	r19, Z+3	; 0x03
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	fc 01       	movw	r30, r24
    25f8:	33 83       	std	Z+3, r19	; 0x03
    25fa:	22 83       	std	Z+2, r18	; 0x02
    25fc:	24 96       	adiw	r28, 0x04	; 4
    25fe:	e2 e0       	ldi	r30, 0x02	; 2
    2600:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002604 <_ZN13LiquidCrystalC1ERKS_>:
    2604:	a4 e0       	ldi	r26, 0x04	; 4
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e8 e0       	ldi	r30, 0x08	; 8
    260a:	f3 e1       	ldi	r31, 0x13	; 19
    260c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	7c 83       	std	Y+4, r23	; 0x04
    2616:	6b 83       	std	Y+3, r22	; 0x03
    2618:	2b 81       	ldd	r18, Y+3	; 0x03
    261a:	3c 81       	ldd	r19, Y+4	; 0x04
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	b9 01       	movw	r22, r18
    2622:	d1 df       	rcall	.-94     	; 0x25c6 <_ZN5PrintC1ERKS_>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	25 e8       	ldi	r18, 0x85	; 133
    262a:	31 e0       	ldi	r19, 0x01	; 1
    262c:	fc 01       	movw	r30, r24
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	20 83       	st	Z, r18
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	fc 01       	movw	r30, r24
    2638:	24 81       	ldd	r18, Z+4	; 0x04
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	fc 01       	movw	r30, r24
    2640:	24 83       	std	Z+4, r18	; 0x04
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	fc 01       	movw	r30, r24
    2648:	25 81       	ldd	r18, Z+5	; 0x05
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	fc 01       	movw	r30, r24
    2650:	25 83       	std	Z+5, r18	; 0x05
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	fc 01       	movw	r30, r24
    2658:	26 81       	ldd	r18, Z+6	; 0x06
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	fc 01       	movw	r30, r24
    2660:	26 83       	std	Z+6, r18	; 0x06
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	2b 81       	ldd	r18, Y+3	; 0x03
    2668:	3c 81       	ldd	r19, Y+4	; 0x04
    266a:	48 e0       	ldi	r20, 0x08	; 8
    266c:	f9 01       	movw	r30, r18
    266e:	37 96       	adiw	r30, 0x07	; 7
    2670:	dc 01       	movw	r26, r24
    2672:	17 96       	adiw	r26, 0x07	; 7
    2674:	01 90       	ld	r0, Z+
    2676:	0d 92       	st	X+, r0
    2678:	4a 95       	dec	r20
    267a:	e1 f7       	brne	.-8      	; 0x2674 <_ZN13LiquidCrystalC1ERKS_+0x70>
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	fc 01       	movw	r30, r24
    2682:	27 85       	ldd	r18, Z+15	; 0x0f
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	fc 01       	movw	r30, r24
    268a:	27 87       	std	Z+15, r18	; 0x0f
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	fc 01       	movw	r30, r24
    2692:	20 89       	ldd	r18, Z+16	; 0x10
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	fc 01       	movw	r30, r24
    269a:	20 8b       	std	Z+16, r18	; 0x10
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	fc 01       	movw	r30, r24
    26a2:	21 89       	ldd	r18, Z+17	; 0x11
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	fc 01       	movw	r30, r24
    26aa:	21 8b       	std	Z+17, r18	; 0x11
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	fc 01       	movw	r30, r24
    26b2:	22 89       	ldd	r18, Z+18	; 0x12
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	fc 01       	movw	r30, r24
    26ba:	22 8b       	std	Z+18, r18	; 0x12
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	fc 01       	movw	r30, r24
    26c2:	23 89       	ldd	r18, Z+19	; 0x13
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	fc 01       	movw	r30, r24
    26ca:	23 8b       	std	Z+19, r18	; 0x13
    26cc:	29 81       	ldd	r18, Y+1	; 0x01
    26ce:	3a 81       	ldd	r19, Y+2	; 0x02
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	fc 01       	movw	r30, r24
    26d6:	84 89       	ldd	r24, Z+20	; 0x14
    26d8:	95 89       	ldd	r25, Z+21	; 0x15
    26da:	a6 89       	ldd	r26, Z+22	; 0x16
    26dc:	b7 89       	ldd	r27, Z+23	; 0x17
    26de:	f9 01       	movw	r30, r18
    26e0:	84 8b       	std	Z+20, r24	; 0x14
    26e2:	95 8b       	std	Z+21, r25	; 0x15
    26e4:	a6 8b       	std	Z+22, r26	; 0x16
    26e6:	b7 8b       	std	Z+23, r27	; 0x17
    26e8:	24 96       	adiw	r28, 0x04	; 4
    26ea:	e2 e0       	ldi	r30, 0x02	; 2
    26ec:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000026f0 <_ZN7LCDBaseC1ERKS_>:
    26f0:	a4 e0       	ldi	r26, 0x04	; 4
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	ee e7       	ldi	r30, 0x7E	; 126
    26f6:	f3 e1       	ldi	r31, 0x13	; 19
    26f8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	7c 83       	std	Y+4, r23	; 0x04
    2702:	6b 83       	std	Y+3, r22	; 0x03
    2704:	2b 81       	ldd	r18, Y+3	; 0x03
    2706:	3c 81       	ldd	r19, Y+4	; 0x04
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	b9 01       	movw	r22, r18
    270e:	7a df       	rcall	.-268    	; 0x2604 <_ZN13LiquidCrystalC1ERKS_>
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	23 ea       	ldi	r18, 0xA3	; 163
    2716:	31 e0       	ldi	r19, 0x01	; 1
    2718:	fc 01       	movw	r30, r24
    271a:	31 83       	std	Z+1, r19	; 0x01
    271c:	20 83       	st	Z, r18
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	2b 81       	ldd	r18, Y+3	; 0x03
    2724:	3c 81       	ldd	r19, Y+4	; 0x04
    2726:	4a e0       	ldi	r20, 0x0A	; 10
    2728:	f9 01       	movw	r30, r18
    272a:	78 96       	adiw	r30, 0x18	; 24
    272c:	dc 01       	movw	r26, r24
    272e:	58 96       	adiw	r26, 0x18	; 24
    2730:	01 90       	ld	r0, Z+
    2732:	0d 92       	st	X+, r0
    2734:	4a 95       	dec	r20
    2736:	e1 f7       	brne	.-8      	; 0x2730 <_ZN7LCDBaseC1ERKS_+0x40>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	fc 01       	movw	r30, r24
    273e:	22 a1       	ldd	r18, Z+34	; 0x22
    2740:	33 a1       	ldd	r19, Z+35	; 0x23
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	fc 01       	movw	r30, r24
    2748:	33 a3       	std	Z+35, r19	; 0x23
    274a:	22 a3       	std	Z+34, r18	; 0x22
    274c:	24 96       	adiw	r28, 0x04	; 4
    274e:	e2 e0       	ldi	r30, 0x02	; 2
    2750:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002754 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2754:	ab e0       	ldi	r26, 0x0B	; 11
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e0 eb       	ldi	r30, 0xB0	; 176
    275a:	f3 e1       	ldi	r31, 0x13	; 19
    275c:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	7c 83       	std	Y+4, r23	; 0x04
    2766:	6b 83       	std	Y+3, r22	; 0x03
    2768:	5e 83       	std	Y+6, r21	; 0x06
    276a:	4d 83       	std	Y+5, r20	; 0x05
    276c:	2f 83       	std	Y+7, r18	; 0x07
    276e:	19 87       	std	Y+9, r17	; 0x09
    2770:	08 87       	std	Y+8, r16	; 0x08
    2772:	fb 86       	std	Y+11, r15	; 0x0b
    2774:	ea 86       	std	Y+10, r14	; 0x0a
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	2b 81       	ldd	r18, Y+3	; 0x03
    277c:	3c 81       	ldd	r19, Y+4	; 0x04
    277e:	fc 01       	movw	r30, r24
    2780:	31 83       	std	Z+1, r19	; 0x01
    2782:	20 83       	st	Z, r18
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	fc 01       	movw	r30, r24
    278a:	13 82       	std	Z+3, r1	; 0x03
    278c:	12 82       	std	Z+2, r1	; 0x02
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	2d 81       	ldd	r18, Y+5	; 0x05
    2794:	3e 81       	ldd	r19, Y+6	; 0x06
    2796:	fc 01       	movw	r30, r24
    2798:	35 83       	std	Z+5, r19	; 0x05
    279a:	24 83       	std	Z+4, r18	; 0x04
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	2f 81       	ldd	r18, Y+7	; 0x07
    27a2:	fc 01       	movw	r30, r24
    27a4:	22 87       	std	Z+10, r18	; 0x0a
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    27ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    27ae:	fc 01       	movw	r30, r24
    27b0:	34 87       	std	Z+12, r19	; 0x0c
    27b2:	23 87       	std	Z+11, r18	; 0x0b
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	0e 96       	adiw	r24, 0x0e	; 14
    27ba:	28 85       	ldd	r18, Y+8	; 0x08
    27bc:	39 85       	ldd	r19, Y+9	; 0x09
    27be:	b9 01       	movw	r22, r18
    27c0:	97 df       	rcall	.-210    	; 0x26f0 <_ZN7LCDBaseC1ERKS_>
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	c2 96       	adiw	r24, 0x32	; 50
    27c8:	6f e1       	ldi	r22, 0x1F	; 31
    27ca:	71 e0       	ldi	r23, 0x01	; 1
    27cc:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    27d0:	29 81       	ldd	r18, Y+1	; 0x01
    27d2:	3a 81       	ldd	r19, Y+2	; 0x02
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	a0 e4       	ldi	r26, 0x40	; 64
    27da:	b0 e4       	ldi	r27, 0x40	; 64
    27dc:	f9 01       	movw	r30, r18
    27de:	80 af       	std	Z+56, r24	; 0x38
    27e0:	91 af       	std	Z+57, r25	; 0x39
    27e2:	a2 af       	std	Z+58, r26	; 0x3a
    27e4:	b3 af       	std	Z+59, r27	; 0x3b
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	04 d0       	rcall	.+8      	; 0x27f4 <_ZN8PHSensor4initEv>
    27ec:	2b 96       	adiw	r28, 0x0b	; 11
    27ee:	e6 e0       	ldi	r30, 0x06	; 6
    27f0:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

000027f4 <_ZN8PHSensor4initEv>:
    27f4:	aa e0       	ldi	r26, 0x0A	; 10
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e0 e0       	ldi	r30, 0x00	; 0
    27fa:	f4 e1       	ldi	r31, 0x14	; 20
    27fc:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__prologue_saves__+0x1e>
    2800:	9a 87       	std	Y+10, r25	; 0x0a
    2802:	89 87       	std	Y+9, r24	; 0x09
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	8d e0       	ldi	r24, 0x0D	; 13
    2808:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	fc 01       	movw	r30, r24
    2812:	83 85       	ldd	r24, Z+11	; 0x0b
    2814:	94 85       	ldd	r25, Z+12	; 0x0c
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    281c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2820:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2824:	de d2       	rcall	.+1468   	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	ab 83       	std	Y+3, r26	; 0x03
    2830:	bc 83       	std	Y+4, r27	; 0x04
    2832:	29 81       	ldd	r18, Y+1	; 0x01
    2834:	3a 81       	ldd	r19, Y+2	; 0x02
    2836:	4b 81       	ldd	r20, Y+3	; 0x03
    2838:	5c 81       	ldd	r21, Y+4	; 0x04
    283a:	69 81       	ldd	r22, Y+1	; 0x01
    283c:	7a 81       	ldd	r23, Y+2	; 0x02
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	0e 94 af 23 	call	0x475e	; 0x475e <__unordsf2>
    2846:	88 23       	and	r24, r24
    2848:	59 f4       	brne	.+22     	; 0x2860 <_ZN8PHSensor4initEv+0x6c>
    284a:	29 85       	ldd	r18, Y+9	; 0x09
    284c:	3a 85       	ldd	r19, Y+10	; 0x0a
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	ab 81       	ldd	r26, Y+3	; 0x03
    2854:	bc 81       	ldd	r27, Y+4	; 0x04
    2856:	f9 01       	movw	r30, r18
    2858:	80 af       	std	Z+56, r24	; 0x38
    285a:	91 af       	std	Z+57, r25	; 0x39
    285c:	a2 af       	std	Z+58, r26	; 0x3a
    285e:	b3 af       	std	Z+59, r27	; 0x3b
    2860:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2864:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2868:	06 96       	adiw	r24, 0x06	; 6
    286a:	bb d2       	rcall	.+1398   	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	11 e0       	ldi	r17, 0x01	; 1
    2872:	9c 01       	movw	r18, r24
    2874:	ad 01       	movw	r20, r26
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 af 23 	call	0x475e	; 0x475e <__unordsf2>
    287e:	88 23       	and	r24, r24
    2880:	09 f4       	brne	.+2      	; 0x2884 <_ZN8PHSensor4initEv+0x90>
    2882:	10 e0       	ldi	r17, 0x00	; 0
    2884:	11 23       	and	r17, r17
    2886:	71 f0       	breq	.+28     	; 0x28a4 <_ZN8PHSensor4initEv+0xb0>
    2888:	1d 82       	std	Y+5, r1	; 0x05
    288a:	1e 82       	std	Y+6, r1	; 0x06
    288c:	1f 82       	std	Y+7, r1	; 0x07
    288e:	18 86       	std	Y+8, r1	; 0x08
    2890:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2894:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2898:	06 96       	adiw	r24, 0x06	; 6
    289a:	9e 01       	movw	r18, r28
    289c:	2b 5f       	subi	r18, 0xFB	; 251
    289e:	3f 4f       	sbci	r19, 0xFF	; 255
    28a0:	b9 01       	movw	r22, r18
    28a2:	b2 d2       	rcall	.+1380   	; 0x2e08 <_ZN6EEWrapIfEaSERKf>
    28a4:	2a 96       	adiw	r28, 0x0a	; 10
    28a6:	e3 e0       	ldi	r30, 0x03	; 3
    28a8:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__epilogue_restores__+0x1e>

000028ac <_ZN8PHSensor6UpdateEd>:
    28ac:	aa e0       	ldi	r26, 0x0A	; 10
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ec e5       	ldi	r30, 0x5C	; 92
    28b2:	f4 e1       	ldi	r31, 0x14	; 20
    28b4:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	4f 83       	std	Y+7, r20	; 0x07
    28be:	58 87       	std	Y+8, r21	; 0x08
    28c0:	69 87       	std	Y+9, r22	; 0x09
    28c2:	7a 87       	std	Y+10, r23	; 0x0a
    28c4:	2d 81       	ldd	r18, Y+5	; 0x05
    28c6:	3e 81       	ldd	r19, Y+6	; 0x06
    28c8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ca:	98 85       	ldd	r25, Y+8	; 0x08
    28cc:	a9 85       	ldd	r26, Y+9	; 0x09
    28ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    28d0:	f9 01       	movw	r30, r18
    28d2:	80 af       	std	Z+56, r24	; 0x38
    28d4:	91 af       	std	Z+57, r25	; 0x39
    28d6:	a2 af       	std	Z+58, r26	; 0x3a
    28d8:	b3 af       	std	Z+59, r27	; 0x3b
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	fc 01       	movw	r30, r24
    28e0:	80 ad       	ldd	r24, Z+56	; 0x38
    28e2:	91 ad       	ldd	r25, Z+57	; 0x39
    28e4:	a2 ad       	ldd	r26, Z+58	; 0x3a
    28e6:	b3 ad       	ldd	r27, Z+59	; 0x3b
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	ab 83       	std	Y+3, r26	; 0x03
    28ee:	bc 83       	std	Y+4, r27	; 0x04
    28f0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    28f4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    28f8:	9c 01       	movw	r18, r24
    28fa:	ce 01       	movw	r24, r28
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	bc 01       	movw	r22, r24
    2900:	c9 01       	movw	r24, r18
    2902:	82 d2       	rcall	.+1284   	; 0x2e08 <_ZN6EEWrapIfEaSERKf>
    2904:	2a 96       	adiw	r28, 0x0a	; 10
    2906:	e2 e0       	ldi	r30, 0x02	; 2
    2908:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000290c <_ZN8PHSensor5GetPHEv>:
    290c:	a8 e0       	ldi	r26, 0x08	; 8
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ec e8       	ldi	r30, 0x8C	; 140
    2912:	f4 e1       	ldi	r31, 0x14	; 20
    2914:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2918:	98 87       	std	Y+8, r25	; 0x08
    291a:	8f 83       	std	Y+7, r24	; 0x07
    291c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2920:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2924:	06 96       	adiw	r24, 0x06	; 6
    2926:	5d d2       	rcall	.+1210   	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	22 e0       	ldi	r18, 0x02	; 2
    292e:	ac 01       	movw	r20, r24
    2930:	bd 01       	movw	r22, r26
    2932:	ce 01       	movw	r24, r28
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	0e 94 b3 29 	call	0x5366	; 0x5366 <_ZN6StringC1Efh>
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	b1 dd       	rcall	.-1182   	; 0x24a2 <_ZNK6String5c_strEv>
    2940:	9c 01       	movw	r18, r24
    2942:	8f 81       	ldd	r24, Y+7	; 0x07
    2944:	98 85       	ldd	r25, Y+8	; 0x08
    2946:	c2 96       	adiw	r24, 0x32	; 50
    2948:	b9 01       	movw	r22, r18
    294a:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    2956:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    295a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    295e:	06 96       	adiw	r24, 0x06	; 6
    2960:	40 d2       	rcall	.+1152   	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	28 96       	adiw	r28, 0x08	; 8
    296c:	e2 e0       	ldi	r30, 0x02	; 2
    296e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002972 <_ZN8PHSensor11CalculatePHEv>:
    2972:	a2 e0       	ldi	r26, 0x02	; 2
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	ef eb       	ldi	r30, 0xBF	; 191
    2978:	f4 e1       	ldi	r31, 0x14	; 20
    297a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	fc 01       	movw	r30, r24
    2988:	95 85       	ldd	r25, Z+13	; 0x0d
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	89 27       	eor	r24, r25
    298e:	88 23       	and	r24, r24
    2990:	09 f0       	breq	.+2      	; 0x2994 <_ZN8PHSensor11CalculatePHEv+0x22>
    2992:	03 c0       	rjmp	.+6      	; 0x299a <_ZN8PHSensor11CalculatePHEv+0x28>
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	04 d0       	rcall	.+8      	; 0x29a2 <_ZN8PHSensor10getPHValueEv>
    299a:	22 96       	adiw	r28, 0x02	; 2
    299c:	e2 e0       	ldi	r30, 0x02	; 2
    299e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000029a2 <_ZN8PHSensor10getPHValueEv>:
    29a2:	a0 e1       	ldi	r26, 0x10	; 16
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 ed       	ldi	r30, 0xD7	; 215
    29a8:	f4 e1       	ldi	r31, 0x14	; 20
    29aa:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    29ae:	98 8b       	std	Y+16, r25	; 0x10
    29b0:	8f 87       	std	Y+15, r24	; 0x0f
    29b2:	88 e8       	ldi	r24, 0x88	; 136
    29b4:	93 e1       	ldi	r25, 0x13	; 19
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9a 83       	std	Y+2, r25	; 0x02
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	8f ee       	ldi	r24, 0xEF	; 239
    29c4:	92 e0       	ldi	r25, 0x02	; 2
    29c6:	fc 01       	movw	r30, r24
    29c8:	80 81       	ld	r24, Z
    29ca:	88 23       	and	r24, r24
    29cc:	89 f4       	brne	.+34     	; 0x29f0 <_ZN8PHSensor10getPHValueEv+0x4e>
    29ce:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    29da:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    29de:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    29e2:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    29e6:	8f ee       	ldi	r24, 0xEF	; 239
    29e8:	92 e0       	ldi	r25, 0x02	; 2
    29ea:	21 e0       	ldi	r18, 0x01	; 1
    29ec:	fc 01       	movw	r30, r24
    29ee:	20 83       	st	Z, r18
    29f0:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    29f4:	9b 01       	movw	r18, r22
    29f6:	ac 01       	movw	r20, r24
    29f8:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    29fc:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2a00:	a0 91 01 03 	lds	r26, 0x0301	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2a04:	b0 91 02 03 	lds	r27, 0x0302	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2a08:	28 1b       	sub	r18, r24
    2a0a:	39 0b       	sbc	r19, r25
    2a0c:	4a 0b       	sbc	r20, r26
    2a0e:	5b 0b       	sbc	r21, r27
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	09 2e       	mov	r0, r25
    2a16:	00 0c       	add	r0, r0
    2a18:	aa 0b       	sbc	r26, r26
    2a1a:	bb 0b       	sbc	r27, r27
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	82 17       	cp	r24, r18
    2a20:	93 07       	cpc	r25, r19
    2a22:	a4 07       	cpc	r26, r20
    2a24:	b5 07       	cpc	r27, r21
    2a26:	08 f0       	brcs	.+2      	; 0x2a2a <_ZN8PHSensor10getPHValueEv+0x88>
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	66 23       	and	r22, r22
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <_ZN8PHSensor10getPHValueEv+0x8e>
    2a2e:	d4 c0       	rjmp	.+424    	; 0x2bd8 <_ZN8PHSensor10getPHValueEv+0x236>
    2a30:	8e e1       	ldi	r24, 0x1E	; 30
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3a:	98 89       	ldd	r25, Y+16	; 0x10
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <analogRead>
    2a46:	9a 87       	std	Y+10, r25	; 0x0a
    2a48:	89 87       	std	Y+9, r24	; 0x09
    2a4a:	8a e6       	ldi	r24, 0x6A	; 106
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	bc 01       	movw	r22, r24
    2a50:	80 ec       	ldi	r24, 0xC0	; 192
    2a52:	94 e0       	ldi	r25, 0x04	; 4
    2a54:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	4a e0       	ldi	r20, 0x0A	; 10
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	bc 01       	movw	r22, r24
    2a62:	80 ec       	ldi	r24, 0xC0	; 192
    2a64:	94 e0       	ldi	r25, 0x04	; 4
    2a66:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN5Print7printlnEii>
    2a6a:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2a6e:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a74:	98 89       	ldd	r25, Y+16	; 0x10
    2a76:	fc 01       	movw	r30, r24
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	6f 5f       	subi	r22, 0xFF	; 255
    2a80:	7f 4f       	sbci	r23, 0xFF	; 255
    2a82:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a84:	58 89       	ldd	r21, Y+16	; 0x10
    2a86:	fa 01       	movw	r30, r20
    2a88:	73 83       	std	Z+3, r23	; 0x03
    2a8a:	62 83       	std	Z+2, r22	; 0x02
    2a8c:	07 96       	adiw	r24, 0x07	; 7
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	82 0f       	add	r24, r18
    2a94:	93 1f       	adc	r25, r19
    2a96:	9e 01       	movw	r18, r28
    2a98:	27 5f       	subi	r18, 0xF7	; 247
    2a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9c:	b9 01       	movw	r22, r18
    2a9e:	c8 d1       	rcall	.+912    	; 0x2e30 <_ZN6EEWrapIiEaSERKi>
    2aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa2:	98 89       	ldd	r25, Y+16	; 0x10
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	22 81       	ldd	r18, Z+2	; 0x02
    2aa8:	33 81       	ldd	r19, Z+3	; 0x03
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	9c 81       	ldd	r25, Y+4	; 0x04
    2aae:	28 17       	cp	r18, r24
    2ab0:	39 07       	cpc	r19, r25
    2ab2:	29 f4       	brne	.+10     	; 0x2abe <_ZN8PHSensor10getPHValueEv+0x11c>
    2ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab6:	98 89       	ldd	r25, Y+16	; 0x10
    2ab8:	fc 01       	movw	r30, r24
    2aba:	13 82       	std	Z+3, r1	; 0x03
    2abc:	12 82       	std	Z+2, r1	; 0x02
    2abe:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2ac2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2ac6:	0e 96       	adiw	r24, 0x0e	; 14
    2ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aca:	3c 81       	ldd	r19, Y+4	; 0x04
    2acc:	b9 01       	movw	r22, r18
    2ace:	68 db       	rcall	.-2352   	; 0x21a0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	af 83       	std	Y+7, r26	; 0x07
    2ada:	b8 87       	std	Y+8, r27	; 0x08
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 ea       	ldi	r20, 0xA0	; 160
    2ae2:	50 e4       	ldi	r21, 0x40	; 64
    2ae4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    2aea:	98 85       	ldd	r25, Y+8	; 0x08
    2aec:	0e 94 4c 23 	call	0x4698	; 0x4698 <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 01 22 	call	0x4402	; 0x4402 <__divsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b0a:	38 89       	ldd	r19, Y+16	; 0x10
    2b0c:	f9 01       	movw	r30, r18
    2b0e:	86 83       	std	Z+6, r24	; 0x06
    2b10:	97 83       	std	Z+7, r25	; 0x07
    2b12:	a0 87       	std	Z+8, r26	; 0x08
    2b14:	b1 87       	std	Z+9, r27	; 0x09
    2b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b18:	98 89       	ldd	r25, Y+16	; 0x10
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	86 81       	ldd	r24, Z+6	; 0x06
    2b1e:	97 81       	ldd	r25, Z+7	; 0x07
    2b20:	a0 85       	ldd	r26, Z+8	; 0x08
    2b22:	b1 85       	ldd	r27, Z+9	; 0x09
    2b24:	9c 01       	movw	r18, r24
    2b26:	ad 01       	movw	r20, r26
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	80 e2       	ldi	r24, 0x20	; 32
    2b2e:	90 e4       	ldi	r25, 0x40	; 64
    2b30:	0e 94 98 21 	call	0x4330	; 0x4330 <__subsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	2c ee       	ldi	r18, 0xEC	; 236
    2b3a:	31 e5       	ldi	r19, 0x51	; 81
    2b3c:	48 e3       	ldi	r20, 0x38	; 56
    2b3e:	5e e3       	ldi	r21, 0x3E	; 62
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 01 22 	call	0x4402	; 0x4402 <__divsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 ee       	ldi	r20, 0xE0	; 224
    2b52:	50 e4       	ldi	r21, 0x40	; 64
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 99 21 	call	0x4332	; 0x4332 <__addsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	7c 01       	movw	r14, r24
    2b62:	8d 01       	movw	r16, r26
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	fc 01       	movw	r30, r24
    2b6a:	80 ad       	ldd	r24, Z+56	; 0x38
    2b6c:	91 ad       	ldd	r25, Z+57	; 0x39
    2b6e:	a2 ad       	ldd	r26, Z+58	; 0x3a
    2b70:	b3 ad       	ldd	r27, Z+59	; 0x3b
    2b72:	9c 01       	movw	r18, r24
    2b74:	ad 01       	movw	r20, r26
    2b76:	c8 01       	movw	r24, r16
    2b78:	b7 01       	movw	r22, r14
    2b7a:	0e 94 99 21 	call	0x4332	; 0x4332 <__addsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
    2b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b8e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2b90:	be 85       	ldd	r27, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	a9 01       	movw	r20, r18
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <__cmpsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	24 f4       	brge	.+8      	; 0x2bac <_ZN8PHSensor10getPHValueEv+0x20a>
    2ba4:	1b 86       	std	Y+11, r1	; 0x0b
    2ba6:	1c 86       	std	Y+12, r1	; 0x0c
    2ba8:	1d 86       	std	Y+13, r1	; 0x0d
    2baa:	1e 86       	std	Y+14, r1	; 0x0e
    2bac:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2bb0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2bb4:	06 96       	adiw	r24, 0x06	; 6
    2bb6:	9e 01       	movw	r18, r28
    2bb8:	25 5f       	subi	r18, 0xF5	; 245
    2bba:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbc:	b9 01       	movw	r22, r18
    2bbe:	24 d1       	rcall	.+584    	; 0x2e08 <_ZN6EEWrapIfEaSERKf>
    2bc0:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    2bcc:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    2bd0:	a0 93 01 03 	sts	0x0301, r26	; 0x800301 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    2bd4:	b0 93 02 03 	sts	0x0302, r27	; 0x800302 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    2bd8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2bdc:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2be0:	06 96       	adiw	r24, 0x06	; 6
    2be2:	ff d0       	rcall	.+510    	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	60 96       	adiw	r28, 0x10	; 16
    2bee:	e6 e0       	ldi	r30, 0x06	; 6
    2bf0:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00002bf4 <_ZN15StringSumHelperD1Ev>:
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2bf4:	a2 e0       	ldi	r26, 0x02	; 2
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e0 e0       	ldi	r30, 0x00	; 0
    2bfa:	f6 e1       	ldi	r31, 0x16	; 22
    2bfc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    2c0c:	22 96       	adiw	r28, 0x02	; 2
    2c0e:	e2 e0       	ldi	r30, 0x02	; 2
    2c10:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002c14 <_ZN8PHSensor12PrintPHToLCDEv>:
void PHSensor::PrintPHToLCD() {
    2c14:	aa e1       	ldi	r26, 0x1A	; 26
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e0 e1       	ldi	r30, 0x10	; 16
    2c1a:	f6 e1       	ldi	r31, 0x16	; 22
    2c1c:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    2c20:	9a 8f       	std	Y+26, r25	; 0x1a
    2c22:	89 8f       	std	Y+25, r24	; 0x19
    GetPH();
    2c24:	89 8d       	ldd	r24, Y+25	; 0x19
    2c26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c28:	71 de       	rcall	.-798    	; 0x290c <_ZN8PHSensor5GetPHEv>
    static unsigned long printTime = millis();
    2c2a:	87 ef       	ldi	r24, 0xF7	; 247
    2c2c:	92 e0       	ldi	r25, 0x02	; 2
    2c2e:	fc 01       	movw	r30, r24
    2c30:	80 81       	ld	r24, Z
    2c32:	88 23       	and	r24, r24
    2c34:	89 f4       	brne	.+34     	; 0x2c58 <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    2c36:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2c42:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2c46:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2c4a:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2c4e:	87 ef       	ldi	r24, 0xF7	; 247
    2c50:	92 e0       	ldi	r25, 0x02	; 2
    2c52:	21 e0       	ldi	r18, 0x01	; 1
    2c54:	fc 01       	movw	r30, r24
    2c56:	20 83       	st	Z, r18
    if(millis() - printTime > _printPHEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    2c58:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    2c5c:	9b 01       	movw	r18, r22
    2c5e:	ac 01       	movw	r20, r24
    2c60:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2c64:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2c68:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2c6c:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    2c70:	28 1b       	sub	r18, r24
    2c72:	39 0b       	sbc	r19, r25
    2c74:	4a 0b       	sbc	r20, r26
    2c76:	5b 0b       	sbc	r21, r27
    2c78:	89 8d       	ldd	r24, Y+25	; 0x19
    2c7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	84 81       	ldd	r24, Z+4	; 0x04
    2c80:	95 81       	ldd	r25, Z+5	; 0x05
    2c82:	80 57       	subi	r24, 0x70	; 112
    2c84:	9e 4f       	sbci	r25, 0xFE	; 254
    2c86:	09 2e       	mov	r0, r25
    2c88:	00 0c       	add	r0, r0
    2c8a:	aa 0b       	sbc	r26, r26
    2c8c:	bb 0b       	sbc	r27, r27
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	82 17       	cp	r24, r18
    2c92:	93 07       	cpc	r25, r19
    2c94:	a4 07       	cpc	r26, r20
    2c96:	b5 07       	cpc	r27, r21
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <_ZN8PHSensor12PrintPHToLCDEv+0x88>
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	66 23       	and	r22, r22
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <_ZN8PHSensor12PrintPHToLCDEv+0x8e>
    2ca0:	65 c0       	rjmp	.+202    	; 0x2d6c <_ZN8PHSensor12PrintPHToLCDEv+0x158>
        if(_printToLCD) {
    2ca2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ca4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	82 85       	ldd	r24, Z+10	; 0x0a
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <_ZN8PHSensor12PrintPHToLCDEv+0x9c>
    2cae:	52 c0       	rjmp	.+164    	; 0x2d54 <_ZN8PHSensor12PrintPHToLCDEv+0x140>
            //Serial.print(F("LCD Print: "));
            //Serial.println(tankPH, 2);
            String enabled = "";
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	0d 96       	adiw	r24, 0x0d	; 13
    2cb4:	6f e1       	ldi	r22, 0x1F	; 31
    2cb6:	71 e0       	ldi	r23, 0x01	; 1
    2cb8:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
            if(_enabled) {
    2cbc:	89 8d       	ldd	r24, Y+25	; 0x19
    2cbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	85 85       	ldd	r24, Z+13	; 0x0d
    2cc4:	88 23       	and	r24, r24
    2cc6:	31 f0       	breq	.+12     	; 0x2cd4 <_ZN8PHSensor12PrintPHToLCDEv+0xc0>
                enabled = "<";
    2cc8:	ce 01       	movw	r24, r28
    2cca:	0d 96       	adiw	r24, 0x0d	; 13
    2ccc:	60 e2       	ldi	r22, 0x20	; 32
    2cce:	71 e0       	ldi	r23, 0x01	; 1
    2cd0:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
            }

            String text = "PH: " + PhString + " " + enabled;
    2cd4:	89 8d       	ldd	r24, Y+25	; 0x19
    2cd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cd8:	8c 01       	movw	r16, r24
    2cda:	0e 5c       	subi	r16, 0xCE	; 206
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	ce 01       	movw	r24, r28
    2ce0:	07 96       	adiw	r24, 0x07	; 7
    2ce2:	62 e2       	ldi	r22, 0x22	; 34
    2ce4:	71 e0       	ldi	r23, 0x01	; 1
    2ce6:	ee db       	rcall	.-2084   	; 0x24c4 <_ZN15StringSumHelperC1EPKc>
    2ce8:	ce 01       	movw	r24, r28
    2cea:	07 96       	adiw	r24, 0x07	; 7
    2cec:	b8 01       	movw	r22, r16
    2cee:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <_ZplRK15StringSumHelperRK6String>
    2cf2:	67 e2       	ldi	r22, 0x27	; 39
    2cf4:	71 e0       	ldi	r23, 0x01	; 1
    2cf6:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_ZplRK15StringSumHelperPKc>
    2cfa:	9c 01       	movw	r18, r24
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	0d 96       	adiw	r24, 0x0d	; 13
    2d00:	bc 01       	movw	r22, r24
    2d02:	c9 01       	movw	r24, r18
    2d04:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <_ZplRK15StringSumHelperRK6String>
    2d08:	9c 01       	movw	r18, r24
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	43 96       	adiw	r24, 0x13	; 19
    2d0e:	b9 01       	movw	r22, r18
    2d10:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    2d14:	ce 01       	movw	r24, r28
    2d16:	07 96       	adiw	r24, 0x07	; 7
    2d18:	6d df       	rcall	.-294    	; 0x2bf4 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(0, text);
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	43 96       	adiw	r24, 0x13	; 19
    2d1e:	bc 01       	movw	r22, r24
    2d20:	ce 01       	movw	r24, r28
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    2d28:	89 8d       	ldd	r24, Y+25	; 0x19
    2d2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d2c:	0e 96       	adiw	r24, 0x0e	; 14
    2d2e:	9e 01       	movw	r18, r28
    2d30:	2f 5f       	subi	r18, 0xFF	; 255
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	a9 01       	movw	r20, r18
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	fc d8       	rcall	.-3592   	; 0x1f34 <_ZN7LCDBase9PrintLineEs6String>
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }

            String text = "PH: " + PhString + " " + enabled;
    2d44:	ce 01       	movw	r24, r28
    2d46:	43 96       	adiw	r24, 0x13	; 19
    2d48:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
            _lcd.PrintLine(0, text);
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0d 96       	adiw	r24, 0x0d	; 13
    2d50:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
        }
        //digitalWrite(13, digitalRead(13) ^ 1);
        printTime = millis();
    2d54:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    2d60:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    2d64:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    2d68:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    }
}
    2d6c:	6a 96       	adiw	r28, 0x1a	; 26
    2d6e:	e4 e0       	ldi	r30, 0x04	; 4
    2d70:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

00002d74 <_ZN8PHSensor6TurnOnEv>:



void PHSensor::TurnOn() {
    2d74:	a2 e0       	ldi	r26, 0x02	; 2
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e0 ec       	ldi	r30, 0xC0	; 192
    2d7a:	f6 e1       	ldi	r31, 0x16	; 22
    2d7c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	9a 81       	ldd	r25, Y+2	; 0x02
    2d88:	21 e0       	ldi	r18, 0x01	; 1
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	25 87       	std	Z+13, r18	; 0x0d
    digitalWrite(_relayPin, HIGH);
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	fc 01       	movw	r30, r24
    2d94:	83 85       	ldd	r24, Z+11	; 0x0b
    2d96:	94 85       	ldd	r25, Z+12	; 0x0c
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
}
    2d9e:	22 96       	adiw	r28, 0x02	; 2
    2da0:	e2 e0       	ldi	r30, 0x02	; 2
    2da2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002da6 <_ZN8PHSensor7TurnOffEv>:

void PHSensor::TurnOff() {
    2da6:	a2 e0       	ldi	r26, 0x02	; 2
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e9 ed       	ldi	r30, 0xD9	; 217
    2dac:	f6 e1       	ldi	r31, 0x16	; 22
    2dae:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	fc 01       	movw	r30, r24
    2dbc:	15 86       	std	Z+13, r1	; 0x0d
    digitalWrite(_relayPin, LOW);
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	83 85       	ldd	r24, Z+11	; 0x0b
    2dc6:	94 85       	ldd	r25, Z+12	; 0x0c
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
    delay(1000);
    2dce:	68 ee       	ldi	r22, 0xE8	; 232
    2dd0:	73 e0       	ldi	r23, 0x03	; 3
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <delay>

}
    2dda:	22 96       	adiw	r28, 0x02	; 2
    2ddc:	e2 e0       	ldi	r30, 0x02	; 2
    2dde:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002de2 <_ZN6EEWrapIfEcvKfEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    2de2:	a2 e0       	ldi	r26, 0x02	; 2
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e7 ef       	ldi	r30, 0xF7	; 247
    2de8:	f6 e1       	ldi	r31, 0x16	; 22
    2dea:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	9a 81       	ldd	r25, Y+2	; 0x02
    2df6:	30 d0       	rcall	.+96     	; 0x2e58 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	22 96       	adiw	r28, 0x02	; 2
    2e02:	e2 e0       	ldi	r30, 0x02	; 2
    2e04:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002e08 <_ZN6EEWrapIfEaSERKf>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    2e08:	a4 e0       	ldi	r26, 0x04	; 4
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e0       	ldi	r30, 0x0A	; 10
    2e0e:	f7 e1       	ldi	r31, 0x17	; 23
    2e10:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2e14:	9a 83       	std	Y+2, r25	; 0x02
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	7c 83       	std	Y+4, r23	; 0x04
    2e1a:	6b 83       	std	Y+3, r22	; 0x03
    2e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	b9 01       	movw	r22, r18
    2e26:	38 d0       	rcall	.+112    	; 0x2e98 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    2e28:	24 96       	adiw	r28, 0x04	; 4
    2e2a:	e2 e0       	ldi	r30, 0x02	; 2
    2e2c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002e30 <_ZN6EEWrapIiEaSERKi>:
    2e30:	a4 e0       	ldi	r26, 0x04	; 4
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ee e1       	ldi	r30, 0x1E	; 30
    2e36:	f7 e1       	ldi	r31, 0x17	; 23
    2e38:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	7c 83       	std	Y+4, r23	; 0x04
    2e42:	6b 83       	std	Y+3, r22	; 0x03
    2e44:	2b 81       	ldd	r18, Y+3	; 0x03
    2e46:	3c 81       	ldd	r19, Y+4	; 0x04
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	b9 01       	movw	r22, r18
    2e4e:	42 d0       	rcall	.+132    	; 0x2ed4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    2e50:	24 96       	adiw	r28, 0x04	; 4
    2e52:	e2 e0       	ldi	r30, 0x02	; 2
    2e54:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002e58 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    2e58:	a6 e0       	ldi	r26, 0x06	; 6
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e2 e3       	ldi	r30, 0x32	; 50
    2e5e:	f7 e1       	ldi	r31, 0x17	; 23
    2e60:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    2e68:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6c:	51 d0       	rcall	.+162    	; 0x2f10 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    2e6e:	bc 01       	movw	r22, r24
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9e 01       	movw	r18, r28
    2e76:	2f 5f       	subi	r18, 0xFF	; 255
    2e78:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	44 e0       	ldi	r20, 0x04	; 4
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	57 d9       	rcall	.-3410   	; 0x2132 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	9a 81       	ldd	r25, Y+2	; 0x02
    2e88:	ab 81       	ldd	r26, Y+3	; 0x03
    2e8a:	bc 81       	ldd	r27, Y+4	; 0x04
        }
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	26 96       	adiw	r28, 0x06	; 6
    2e92:	e2 e0       	ldi	r30, 0x02	; 2
    2e94:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002e98 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:

        D &EEWrite( const T& v ){
    2e98:	a4 e0       	ldi	r26, 0x04	; 4
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e2 e5       	ldi	r30, 0x52	; 82
    2e9e:	f7 e1       	ldi	r31, 0x17	; 23
    2ea0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	7c 83       	std	Y+4, r23	; 0x04
    2eaa:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb0:	2f d0       	rcall	.+94     	; 0x2f10 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	83 e0       	ldi	r24, 0x03	; 3
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eba:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebc:	82 0f       	add	r24, r18
    2ebe:	93 1f       	adc	r25, r19
    2ec0:	44 e0       	ldi	r20, 0x04	; 4
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	46 db       	rcall	.-2420   	; 0x2552 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	22 d0       	rcall	.+68     	; 0x2f10 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
        }
    2ecc:	24 96       	adiw	r28, 0x04	; 4
    2ece:	e2 e0       	ldi	r30, 0x02	; 2
    2ed0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002ed4 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return(ret);
        }

        D &EEWrite( const T& v ){
    2ed4:	a4 e0       	ldi	r26, 0x04	; 4
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e0 e7       	ldi	r30, 0x70	; 112
    2eda:	f7 e1       	ldi	r31, 0x17	; 23
    2edc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	7c 83       	std	Y+4, r23	; 0x04
    2ee6:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	cc da       	rcall	.-2664   	; 0x2486 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    2eee:	bc 01       	movw	r22, r24
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef8:	82 0f       	add	r24, r18
    2efa:	93 1f       	adc	r25, r19
    2efc:	42 e0       	ldi	r20, 0x02	; 2
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	28 db       	rcall	.-2480   	; 0x2552 <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	bf da       	rcall	.-2690   	; 0x2486 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    2f08:	24 96       	adiw	r28, 0x04	; 4
    2f0a:	e2 e0       	ldi	r30, 0x02	; 2
    2f0c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002f10 <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:
        protected: STATIC_ACCESS
    2f10:	a2 e0       	ldi	r26, 0x02	; 2
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e8       	ldi	r30, 0x8E	; 142
    2f16:	f7 e1       	ldi	r31, 0x17	; 23
    2f18:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	22 96       	adiw	r28, 0x02	; 2
    2f26:	e2 e0       	ldi	r30, 0x02	; 2
    2f28:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00002f2c <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    2f2c:	ab e0       	ldi	r26, 0x0B	; 11
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	ec e9       	ldi	r30, 0x9C	; 156
    2f32:	f7 e1       	ldi	r31, 0x17	; 23
    2f34:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	7c 83       	std	Y+4, r23	; 0x04
    2f3e:	6b 83       	std	Y+3, r22	; 0x03
    2f40:	5e 83       	std	Y+6, r21	; 0x06
    2f42:	4d 83       	std	Y+5, r20	; 0x05
    2f44:	2f 83       	std	Y+7, r18	; 0x07
    2f46:	19 87       	std	Y+9, r17	; 0x09
    2f48:	08 87       	std	Y+8, r16	; 0x08
    2f4a:	fb 86       	std	Y+11, r15	; 0x0b
    2f4c:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	2b 81       	ldd	r18, Y+3	; 0x03
    2f54:	3c 81       	ldd	r19, Y+4	; 0x04
    2f56:	fc 01       	movw	r30, r24
    2f58:	31 83       	std	Z+1, r19	; 0x01
    2f5a:	20 83       	st	Z, r18
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	fc 01       	movw	r30, r24
    2f62:	13 82       	std	Z+3, r1	; 0x03
    2f64:	12 82       	std	Z+2, r1	; 0x02
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6e:	fc 01       	movw	r30, r24
    2f70:	35 83       	std	Z+5, r19	; 0x05
    2f72:	24 83       	std	Z+4, r18	; 0x04
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	2f 81       	ldd	r18, Y+7	; 0x07
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	26 83       	std	Z+6, r18	; 0x06
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f84:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f86:	fc 01       	movw	r30, r24
    2f88:	30 87       	std	Z+8, r19	; 0x08
    2f8a:	27 83       	std	Z+7, r18	; 0x07
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	fc 01       	movw	r30, r24
    2f92:	13 86       	std	Z+11, r1	; 0x0b
    2f94:	12 86       	std	Z+10, r1	; 0x0a
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	0c 96       	adiw	r24, 0x0c	; 12
    2f9c:	28 85       	ldd	r18, Y+8	; 0x08
    2f9e:	39 85       	ldd	r19, Y+9	; 0x09
    2fa0:	b9 01       	movw	r22, r18
    2fa2:	a6 db       	rcall	.-2228   	; 0x26f0 <_ZN7LCDBaseC1ERKS_>
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	c0 96       	adiw	r24, 0x30	; 48
    2faa:	69 e2       	ldi	r22, 0x29	; 41
    2fac:	71 e0       	ldi	r23, 0x01	; 1
    2fae:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	2e e0       	ldi	r18, 0x0E	; 14
    2fb8:	31 e0       	ldi	r19, 0x01	; 1
    2fba:	fc 01       	movw	r30, r24
    2fbc:	37 ab       	std	Z+55, r19	; 0x37
    2fbe:	26 ab       	std	Z+54, r18	; 0x36
    init();
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc4:	04 d0       	rcall	.+8      	; 0x2fce <_ZN9TDSSensor4initEv>
}
    2fc6:	2b 96       	adiw	r28, 0x0b	; 11
    2fc8:	e6 e0       	ldi	r30, 0x06	; 6
    2fca:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00002fce <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    2fce:	aa e0       	ldi	r26, 0x0A	; 10
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	ed ee       	ldi	r30, 0xED	; 237
    2fd4:	f7 e1       	ldi	r31, 0x17	; 23
    2fd6:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__prologue_saves__+0x1e>
    2fda:	9a 87       	std	Y+10, r25	; 0x0a
    2fdc:	89 87       	std	Y+9, r24	; 0x09
    //led to show board working
    pinMode(13, OUTPUT);
    2fde:	61 e0       	ldi	r22, 0x01	; 1
    2fe0:	8d e0       	ldi	r24, 0x0D	; 13
    2fe2:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    pinMode(_relayPin, OUTPUT);
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	fc 01       	movw	r30, r24
    2fec:	87 81       	ldd	r24, Z+7	; 0x07
    2fee:	90 85       	ldd	r25, Z+8	; 0x08
    2ff0:	61 e0       	ldi	r22, 0x01	; 1
    2ff2:	0e 94 1e 28 	call	0x503c	; 0x503c <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    2ff6:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    2ffa:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    2ffe:	04 96       	adiw	r24, 0x04	; 4
    3000:	17 da       	rcall	.-3026   	; 0x2430 <_ZN6EEWrapIiEcvKiEv>
    3002:	09 2e       	mov	r0, r25
    3004:	00 0c       	add	r0, r0
    3006:	aa 0b       	sbc	r26, r26
    3008:	bb 0b       	sbc	r27, r27
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 9c 22 	call	0x4538	; 0x4538 <__floatsisf>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	ab 83       	std	Y+3, r26	; 0x03
    301c:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    301e:	29 81       	ldd	r18, Y+1	; 0x01
    3020:	3a 81       	ldd	r19, Y+2	; 0x02
    3022:	4b 81       	ldd	r20, Y+3	; 0x03
    3024:	5c 81       	ldd	r21, Y+4	; 0x04
    3026:	69 81       	ldd	r22, Y+1	; 0x01
    3028:	7a 81       	ldd	r23, Y+2	; 0x02
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	0e 94 af 23 	call	0x475e	; 0x475e <__unordsf2>
    3032:	88 23       	and	r24, r24
    3034:	71 f4       	brne	.+28     	; 0x3052 <_ZN9TDSSensor4initEv+0x84>
        Offset = offset;
    3036:	69 81       	ldd	r22, Y+1	; 0x01
    3038:	7a 81       	ldd	r23, Y+2	; 0x02
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__fixsfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9c 01       	movw	r18, r24
    3048:	89 85       	ldd	r24, Y+9	; 0x09
    304a:	9a 85       	ldd	r25, Y+10	; 0x0a
    304c:	fc 01       	movw	r30, r24
    304e:	37 ab       	std	Z+55, r19	; 0x37
    3050:	26 ab       	std	Z+54, r18	; 0x36
    }
    if(isnan(TheSensorsMem.TdsVal)) {
    3052:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3056:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    305a:	0a 96       	adiw	r24, 0x0a	; 10
    305c:	c2 de       	rcall	.-636    	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	11 e0       	ldi	r17, 0x01	; 1
    3064:	9c 01       	movw	r18, r24
    3066:	ad 01       	movw	r20, r26
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 af 23 	call	0x475e	; 0x475e <__unordsf2>
    3070:	88 23       	and	r24, r24
    3072:	09 f4       	brne	.+2      	; 0x3076 <_ZN9TDSSensor4initEv+0xa8>
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	11 23       	and	r17, r17
    3078:	71 f0       	breq	.+28     	; 0x3096 <_ZN9TDSSensor4initEv+0xc8>
        TheSensorsMem.TdsVal = 0;
    307a:	1d 82       	std	Y+5, r1	; 0x05
    307c:	1e 82       	std	Y+6, r1	; 0x06
    307e:	1f 82       	std	Y+7, r1	; 0x07
    3080:	18 86       	std	Y+8, r1	; 0x08
    3082:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3086:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    308a:	0a 96       	adiw	r24, 0x0a	; 10
    308c:	9e 01       	movw	r18, r28
    308e:	2b 5f       	subi	r18, 0xFB	; 251
    3090:	3f 4f       	sbci	r19, 0xFF	; 255
    3092:	b9 01       	movw	r22, r18
    3094:	b9 de       	rcall	.-654    	; 0x2e08 <_ZN6EEWrapIfEaSERKf>
    }
}
    3096:	2a 96       	adiw	r28, 0x0a	; 10
    3098:	e3 e0       	ldi	r30, 0x03	; 3
    309a:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__epilogue_restores__+0x1e>

0000309e <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    309e:	a4 e0       	ldi	r26, 0x04	; 4
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e5 e5       	ldi	r30, 0x55	; 85
    30a4:	f8 e1       	ldi	r31, 0x18	; 24
    30a6:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	7c 83       	std	Y+4, r23	; 0x04
    30b0:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	2b 81       	ldd	r18, Y+3	; 0x03
    30b8:	3c 81       	ldd	r19, Y+4	; 0x04
    30ba:	fc 01       	movw	r30, r24
    30bc:	37 ab       	std	Z+55, r19	; 0x37
    30be:	26 ab       	std	Z+54, r18	; 0x36
    TheSensorsMem.TdsOffset = Offset;
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	9c 01       	movw	r18, r24
    30c6:	2a 5c       	subi	r18, 0xCA	; 202
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    30ce:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    30d2:	04 96       	adiw	r24, 0x04	; 4
    30d4:	b9 01       	movw	r22, r18
    30d6:	ac de       	rcall	.-680    	; 0x2e30 <_ZN6EEWrapIiEaSERKi>
}
    30d8:	24 96       	adiw	r28, 0x04	; 4
    30da:	e2 e0       	ldi	r30, 0x02	; 2
    30dc:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000030e0 <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    30e0:	a8 e0       	ldi	r26, 0x08	; 8
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e6 e7       	ldi	r30, 0x76	; 118
    30e6:	f8 e1       	ldi	r31, 0x18	; 24
    30e8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	8f 83       	std	Y+7, r24	; 0x07

    TdsString = String(TheSensorsMem.TdsVal, 0).c_str();
    30f0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    30f4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    30f8:	0a 96       	adiw	r24, 0x0a	; 10
    30fa:	73 de       	rcall	.-794    	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	ac 01       	movw	r20, r24
    3104:	bd 01       	movw	r22, r26
    3106:	ce 01       	movw	r24, r28
    3108:	01 96       	adiw	r24, 0x01	; 1
    310a:	0e 94 b3 29 	call	0x5366	; 0x5366 <_ZN6StringC1Efh>
    310e:	ce 01       	movw	r24, r28
    3110:	01 96       	adiw	r24, 0x01	; 1
    3112:	c7 d9       	rcall	.-3186   	; 0x24a2 <_ZNK6String5c_strEv>
    3114:	9c 01       	movw	r18, r24
    3116:	8f 81       	ldd	r24, Y+7	; 0x07
    3118:	98 85       	ldd	r25, Y+8	; 0x08
    311a:	c0 96       	adiw	r24, 0x30	; 48
    311c:	b9 01       	movw	r22, r18
    311e:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    3122:	ce 01       	movw	r24, r28
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    //TdsAvgString = String(_tdsValueAverage, 0).c_str();
    return TheSensorsMem.TdsVal;
    312a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    312e:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3132:	0a 96       	adiw	r24, 0x0a	; 10
    3134:	56 de       	rcall	.-852    	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22

}
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	28 96       	adiw	r28, 0x08	; 8
    3140:	e2 e0       	ldi	r30, 0x02	; 2
    3142:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003146 <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    3146:	aa e1       	ldi	r26, 0x1A	; 26
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 ea       	ldi	r30, 0xA9	; 169
    314c:	f8 e1       	ldi	r31, 0x18	; 24
    314e:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    3152:	9a 8f       	std	Y+26, r25	; 0x1a
    3154:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    3156:	89 8d       	ldd	r24, Y+25	; 0x19
    3158:	9a 8d       	ldd	r25, Y+26	; 0x1a
    315a:	c2 df       	rcall	.-124    	; 0x30e0 <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    315c:	87 e0       	ldi	r24, 0x07	; 7
    315e:	93 e0       	ldi	r25, 0x03	; 3
    3160:	fc 01       	movw	r30, r24
    3162:	80 81       	ld	r24, Z
    3164:	88 23       	and	r24, r24
    3166:	89 f4       	brne	.+34     	; 0x318a <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    3168:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3174:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3178:	a0 93 19 03 	sts	0x0319, r26	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    317c:	b0 93 1a 03 	sts	0x031A, r27	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3180:	87 e0       	ldi	r24, 0x07	; 7
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	21 e0       	ldi	r18, 0x01	; 1
    3186:	fc 01       	movw	r30, r24
    3188:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    318a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    318e:	9b 01       	movw	r18, r22
    3190:	ac 01       	movw	r20, r24
    3192:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3196:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    319a:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    319e:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    31a2:	28 1b       	sub	r18, r24
    31a4:	39 0b       	sbc	r19, r25
    31a6:	4a 0b       	sbc	r20, r26
    31a8:	5b 0b       	sbc	r21, r27
    31aa:	89 8d       	ldd	r24, Y+25	; 0x19
    31ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31ae:	fc 01       	movw	r30, r24
    31b0:	84 81       	ldd	r24, Z+4	; 0x04
    31b2:	95 81       	ldd	r25, Z+5	; 0x05
    31b4:	80 57       	subi	r24, 0x70	; 112
    31b6:	9e 4f       	sbci	r25, 0xFE	; 254
    31b8:	09 2e       	mov	r0, r25
    31ba:	00 0c       	add	r0, r0
    31bc:	aa 0b       	sbc	r26, r26
    31be:	bb 0b       	sbc	r27, r27
    31c0:	61 e0       	ldi	r22, 0x01	; 1
    31c2:	82 17       	cp	r24, r18
    31c4:	93 07       	cpc	r25, r19
    31c6:	a4 07       	cpc	r26, r20
    31c8:	b5 07       	cpc	r27, r21
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <_ZN9TDSSensor13PrintTDSToLCDEv+0x88>
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	66 23       	and	r22, r22
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <_ZN9TDSSensor13PrintTDSToLCDEv+0x8e>
    31d2:	70 c0       	rjmp	.+224    	; 0x32b4 <_ZN9TDSSensor13PrintTDSToLCDEv+0x16e>
        if(_printToLCD) {
    31d4:	89 8d       	ldd	r24, Y+25	; 0x19
    31d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31d8:	fc 01       	movw	r30, r24
    31da:	86 81       	ldd	r24, Z+6	; 0x06
    31dc:	88 23       	and	r24, r24
    31de:	09 f4       	brne	.+2      	; 0x31e2 <_ZN9TDSSensor13PrintTDSToLCDEv+0x9c>
    31e0:	53 c0       	rjmp	.+166    	; 0x3288 <_ZN9TDSSensor13PrintTDSToLCDEv+0x142>
            String enabled = "";
    31e2:	ce 01       	movw	r24, r28
    31e4:	0d 96       	adiw	r24, 0x0d	; 13
    31e6:	69 e2       	ldi	r22, 0x29	; 41
    31e8:	71 e0       	ldi	r23, 0x01	; 1
    31ea:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
            if(_enabled) {
    31ee:	89 8d       	ldd	r24, Y+25	; 0x19
    31f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31f2:	fc 01       	movw	r30, r24
    31f4:	81 85       	ldd	r24, Z+9	; 0x09
    31f6:	88 23       	and	r24, r24
    31f8:	31 f0       	breq	.+12     	; 0x3206 <_ZN9TDSSensor13PrintTDSToLCDEv+0xc0>
                enabled = "<";
    31fa:	ce 01       	movw	r24, r28
    31fc:	0d 96       	adiw	r24, 0x0d	; 13
    31fe:	6a e2       	ldi	r22, 0x2A	; 42
    3200:	71 e0       	ldi	r23, 0x01	; 1
    3202:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsString + " " + enabled;
    3206:	89 8d       	ldd	r24, Y+25	; 0x19
    3208:	9a 8d       	ldd	r25, Y+26	; 0x1a
    320a:	8c 01       	movw	r16, r24
    320c:	00 5d       	subi	r16, 0xD0	; 208
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	ce 01       	movw	r24, r28
    3212:	07 96       	adiw	r24, 0x07	; 7
    3214:	6c e2       	ldi	r22, 0x2C	; 44
    3216:	71 e0       	ldi	r23, 0x01	; 1
    3218:	55 d9       	rcall	.-3414   	; 0x24c4 <_ZN15StringSumHelperC1EPKc>
    321a:	ce 01       	movw	r24, r28
    321c:	07 96       	adiw	r24, 0x07	; 7
    321e:	b8 01       	movw	r22, r16
    3220:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <_ZplRK15StringSumHelperRK6String>
    3224:	62 e3       	ldi	r22, 0x32	; 50
    3226:	71 e0       	ldi	r23, 0x01	; 1
    3228:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_ZplRK15StringSumHelperPKc>
    322c:	9c 01       	movw	r18, r24
    322e:	ce 01       	movw	r24, r28
    3230:	0d 96       	adiw	r24, 0x0d	; 13
    3232:	bc 01       	movw	r22, r24
    3234:	c9 01       	movw	r24, r18
    3236:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <_ZplRK15StringSumHelperRK6String>
    323a:	9c 01       	movw	r18, r24
    323c:	ce 01       	movw	r24, r28
    323e:	43 96       	adiw	r24, 0x13	; 19
    3240:	b9 01       	movw	r22, r18
    3242:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    3246:	ce 01       	movw	r24, r28
    3248:	07 96       	adiw	r24, 0x07	; 7
    324a:	d4 dc       	rcall	.-1624   	; 0x2bf4 <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    324c:	ce 01       	movw	r24, r28
    324e:	43 96       	adiw	r24, 0x13	; 19
    3250:	bc 01       	movw	r22, r24
    3252:	ce 01       	movw	r24, r28
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    325a:	89 8d       	ldd	r24, Y+25	; 0x19
    325c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    325e:	0c 96       	adiw	r24, 0x0c	; 12
    3260:	9e 01       	movw	r18, r28
    3262:	2f 5f       	subi	r18, 0xFF	; 255
    3264:	3f 4f       	sbci	r19, 0xFF	; 255
    3266:	a9 01       	movw	r20, r18
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_ZN7LCDBase9PrintLineEs6String>
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsString + " " + enabled;
    3278:	ce 01       	movw	r24, r28
    327a:	43 96       	adiw	r24, 0x13	; 19
    327c:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3280:	ce 01       	movw	r24, r28
    3282:	0d 96       	adiw	r24, 0x0d	; 13
    3284:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    3288:	8d e0       	ldi	r24, 0x0D	; 13
    328a:	0e 94 89 28 	call	0x5112	; 0x5112 <digitalRead>
    328e:	98 2f       	mov	r25, r24
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	89 27       	eor	r24, r25
    3294:	68 2f       	mov	r22, r24
    3296:	8d e0       	ldi	r24, 0x0D	; 13
    3298:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
        printTime = millis();
    329c:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    32a8:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    32ac:	a0 93 19 03 	sts	0x0319, r26	; 0x800319 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    32b0:	b0 93 1a 03 	sts	0x031A, r27	; 0x80031a <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    32b4:	6a 96       	adiw	r28, 0x1a	; 26
    32b6:	e4 e0       	ldi	r30, 0x04	; 4
    32b8:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

000032bc <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    32bc:	a2 e0       	ldi	r26, 0x02	; 2
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e4 e6       	ldi	r30, 0x64	; 100
    32c2:	f9 e1       	ldi	r31, 0x19	; 25
    32c4:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	fc 01       	movw	r30, r24
    32d2:	91 85       	ldd	r25, Z+9	; 0x09
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	89 27       	eor	r24, r25
    32d8:	88 23       	and	r24, r24
    32da:	09 f0       	breq	.+2      	; 0x32de <_ZN9TDSSensor12CalculateTDSEv+0x22>
        return;
    32dc:	03 c0       	rjmp	.+6      	; 0x32e4 <_ZN9TDSSensor12CalculateTDSEv+0x28>
    }

    //TheSensorsMem.TdsVal = getTDSValue();
    getTDSValue();
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	04 d0       	rcall	.+8      	; 0x32ec <_ZN9TDSSensor11getTDSValueEv>
    //
    //if(_numOfSamples > 10) {
    //_numOfSamples = 1;
    //}

}
    32e4:	22 96       	adiw	r28, 0x02	; 2
    32e6:	e2 e0       	ldi	r30, 0x02	; 2
    32e8:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000032ec <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    32ec:	a6 e1       	ldi	r26, 0x16	; 22
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	ec e7       	ldi	r30, 0x7C	; 124
    32f2:	f9 e1       	ldi	r31, 0x19	; 25
    32f4:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    32f8:	9e 8b       	std	Y+22, r25	; 0x16
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    static unsigned long samplingTime = millis();
    32fc:	8f e0       	ldi	r24, 0x0F	; 15
    32fe:	93 e0       	ldi	r25, 0x03	; 3
    3300:	fc 01       	movw	r30, r24
    3302:	80 81       	ld	r24, Z
    3304:	88 23       	and	r24, r24
    3306:	89 f4       	brne	.+34     	; 0x332a <_ZN9TDSSensor11getTDSValueEv+0x3e>
    3308:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    3314:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    3318:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    331c:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    3320:	8f e0       	ldi	r24, 0x0F	; 15
    3322:	93 e0       	ldi	r25, 0x03	; 3
    3324:	21 e0       	ldi	r18, 0x01	; 1
    3326:	fc 01       	movw	r30, r24
    3328:	20 83       	st	Z, r18
    if(millis() - samplingTime > 5000) {//wait .5 sec between readings, according to spec
    332a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    332e:	9b 01       	movw	r18, r22
    3330:	ac 01       	movw	r20, r24
    3332:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    3336:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    333a:	a0 91 1d 03 	lds	r26, 0x031D	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    333e:	b0 91 1e 03 	lds	r27, 0x031E	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    3342:	79 01       	movw	r14, r18
    3344:	8a 01       	movw	r16, r20
    3346:	e8 1a       	sub	r14, r24
    3348:	f9 0a       	sbc	r15, r25
    334a:	0a 0b       	sbc	r16, r26
    334c:	1b 0b       	sbc	r17, r27
    334e:	d8 01       	movw	r26, r16
    3350:	c7 01       	movw	r24, r14
    3352:	21 e0       	ldi	r18, 0x01	; 1
    3354:	89 38       	cpi	r24, 0x89	; 137
    3356:	93 41       	sbci	r25, 0x13	; 19
    3358:	a1 05       	cpc	r26, r1
    335a:	b1 05       	cpc	r27, r1
    335c:	08 f4       	brcc	.+2      	; 0x3360 <_ZN9TDSSensor11getTDSValueEv+0x74>
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	22 23       	and	r18, r18
    3362:	09 f4       	brne	.+2      	; 0x3366 <_ZN9TDSSensor11getTDSValueEv+0x7a>
    3364:	a3 c0       	rjmp	.+326    	; 0x34ac <_ZN9TDSSensor11getTDSValueEv+0x1c0>
        int numOfSamples = 10;
    3366:	8a e0       	ldi	r24, 0x0A	; 10
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01
        int reading = analogRead(_pin);
    336e:	8d 89       	ldd	r24, Y+21	; 0x15
    3370:	9e 89       	ldd	r25, Y+22	; 0x16
    3372:	fc 01       	movw	r30, r24
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <analogRead>
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13

        Serial.print(F("TDS Raw Reading: "));
    3380:	8b e7       	ldi	r24, 0x7B	; 123
    3382:	93 e0       	ldi	r25, 0x03	; 3
    3384:	bc 01       	movw	r22, r24
    3386:	80 ec       	ldi	r24, 0xC0	; 192
    3388:	94 e0       	ldi	r25, 0x04	; 4
    338a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(reading);
    338e:	8b 89       	ldd	r24, Y+19	; 0x13
    3390:	9c 89       	ldd	r25, Y+20	; 0x14
    3392:	4a e0       	ldi	r20, 0x0A	; 10
    3394:	50 e0       	ldi	r21, 0x00	; 0
    3396:	bc 01       	movw	r22, r24
    3398:	80 ec       	ldi	r24, 0xC0	; 192
    339a:	94 e0       	ldi	r25, 0x04	; 4
    339c:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN5Print7printlnEii>

        //_tdsAverage[_tdsArrayIndex++] = reading;
        TheSensorsMem.TdsAvgArr[_tdsArrayIndex++] = reading;
    33a0:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    33a4:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    33a8:	8d 89       	ldd	r24, Y+21	; 0x15
    33aa:	9e 89       	ldd	r25, Y+22	; 0x16
    33ac:	fc 01       	movw	r30, r24
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	bc 01       	movw	r22, r24
    33b4:	6f 5f       	subi	r22, 0xFF	; 255
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	4d 89       	ldd	r20, Y+21	; 0x15
    33ba:	5e 89       	ldd	r21, Y+22	; 0x16
    33bc:	fa 01       	movw	r30, r20
    33be:	73 83       	std	Z+3, r23	; 0x03
    33c0:	62 83       	std	Z+2, r22	; 0x02
    33c2:	85 96       	adiw	r24, 0x25	; 37
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	82 0f       	add	r24, r18
    33ca:	93 1f       	adc	r25, r19
    33cc:	9e 01       	movw	r18, r28
    33ce:	2d 5e       	subi	r18, 0xED	; 237
    33d0:	3f 4f       	sbci	r19, 0xFF	; 255
    33d2:	b9 01       	movw	r22, r18
    33d4:	2d dd       	rcall	.-1446   	; 0x2e30 <_ZN6EEWrapIiEaSERKi>
        if(_tdsArrayIndex == numOfSamples) {
    33d6:	8d 89       	ldd	r24, Y+21	; 0x15
    33d8:	9e 89       	ldd	r25, Y+22	; 0x16
    33da:	fc 01       	movw	r30, r24
    33dc:	22 81       	ldd	r18, Z+2	; 0x02
    33de:	33 81       	ldd	r19, Z+3	; 0x03
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	28 17       	cp	r18, r24
    33e6:	39 07       	cpc	r19, r25
    33e8:	29 f4       	brne	.+10     	; 0x33f4 <_ZN9TDSSensor11getTDSValueEv+0x108>
            _tdsArrayIndex = 0;
    33ea:	8d 89       	ldd	r24, Y+21	; 0x15
    33ec:	9e 89       	ldd	r25, Y+22	; 0x16
    33ee:	fc 01       	movw	r30, r24
    33f0:	13 82       	std	Z+3, r1	; 0x03
    33f2:	12 82       	std	Z+2, r1	; 0x02
        }
        double tdsAvg = MathExt::CalculateAverage(TheSensorsMem.TdsAvgArr, numOfSamples);
    33f4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    33f8:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    33fc:	86 5b       	subi	r24, 0xB6	; 182
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	29 81       	ldd	r18, Y+1	; 0x01
    3402:	3a 81       	ldd	r19, Y+2	; 0x02
    3404:	b9 01       	movw	r22, r18
    3406:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_ZN7MathExt16CalculateAverageEP6EEWrapIiEi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8b 83       	std	Y+3, r24	; 0x03
    3410:	9c 83       	std	Y+4, r25	; 0x04
    3412:	ad 83       	std	Y+5, r26	; 0x05
    3414:	be 83       	std	Y+6, r27	; 0x06
        double voltage = tdsAvg * (5.0 / 1024);
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 ea       	ldi	r20, 0xA0	; 160
    341c:	5b e3       	ldi	r21, 0x3B	; 59
    341e:	6b 81       	ldd	r22, Y+3	; 0x03
    3420:	7c 81       	ldd	r23, Y+4	; 0x04
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	0e 94 4c 23 	call	0x4698	; 0x4698 <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8f 83       	std	Y+7, r24	; 0x07
    3430:	98 87       	std	Y+8, r25	; 0x08
    3432:	a9 87       	std	Y+9, r26	; 0x09
    3434:	ba 87       	std	Y+10, r27	; 0x0a
        double tankTDS = voltage * Offset;
    3436:	8d 89       	ldd	r24, Y+21	; 0x15
    3438:	9e 89       	ldd	r25, Y+22	; 0x16
    343a:	fc 01       	movw	r30, r24
    343c:	86 a9       	ldd	r24, Z+54	; 0x36
    343e:	97 a9       	ldd	r25, Z+55	; 0x37
    3440:	09 2e       	mov	r0, r25
    3442:	00 0c       	add	r0, r0
    3444:	aa 0b       	sbc	r26, r26
    3446:	bb 0b       	sbc	r27, r27
    3448:	bc 01       	movw	r22, r24
    344a:	cd 01       	movw	r24, r26
    344c:	0e 94 9c 22 	call	0x4538	; 0x4538 <__floatsisf>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	2f 81       	ldd	r18, Y+7	; 0x07
    3456:	38 85       	ldd	r19, Y+8	; 0x08
    3458:	49 85       	ldd	r20, Y+9	; 0x09
    345a:	5a 85       	ldd	r21, Y+10	; 0x0a
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 4c 23 	call	0x4698	; 0x4698 <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	8b 87       	std	Y+11, r24	; 0x0b
    346a:	9c 87       	std	Y+12, r25	; 0x0c
    346c:	ad 87       	std	Y+13, r26	; 0x0d
    346e:	be 87       	std	Y+14, r27	; 0x0e

        TheSensorsMem.TdsVal = tankTDS;
    3470:	8b 85       	ldd	r24, Y+11	; 0x0b
    3472:	9c 85       	ldd	r25, Y+12	; 0x0c
    3474:	ad 85       	ldd	r26, Y+13	; 0x0d
    3476:	be 85       	ldd	r27, Y+14	; 0x0e
    3478:	8f 87       	std	Y+15, r24	; 0x0f
    347a:	98 8b       	std	Y+16, r25	; 0x10
    347c:	a9 8b       	std	Y+17, r26	; 0x11
    347e:	ba 8b       	std	Y+18, r27	; 0x12
    3480:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    3484:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    3488:	0a 96       	adiw	r24, 0x0a	; 10
    348a:	9e 01       	movw	r18, r28
    348c:	21 5f       	subi	r18, 0xF1	; 241
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	b9 01       	movw	r22, r18
    3492:	ba dc       	rcall	.-1676   	; 0x2e08 <_ZN6EEWrapIfEaSERKf>
        //TheSensorsMem.TdsAvgArr = _tdsAverage;
        samplingTime = millis();
    3494:	0e 94 28 27 	call	0x4e50	; 0x4e50 <millis>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    34a0:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    34a4:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    34a8:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
        //return tankTDS;
    }
    return TheSensorsMem.TdsVal;
    34ac:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN6Memory13TheSensorsMemE>
    34b0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN6Memory13TheSensorsMemE+0x1>
    34b4:	0a 96       	adiw	r24, 0x0a	; 10
    34b6:	95 dc       	rcall	.-1750   	; 0x2de2 <_ZN6EEWrapIfEcvKfEv>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22

}
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	66 96       	adiw	r28, 0x16	; 22
    34c2:	e6 e0       	ldi	r30, 0x06	; 6
    34c4:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

000034c8 <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    34c8:	a2 e0       	ldi	r26, 0x02	; 2
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	ea e6       	ldi	r30, 0x6A	; 106
    34ce:	fa e1       	ldi	r31, 0x1A	; 26
    34d0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	21 e0       	ldi	r18, 0x01	; 1
    34de:	fc 01       	movw	r30, r24
    34e0:	21 87       	std	Z+9, r18	; 0x09
    digitalWrite(_relayPin, HIGH);
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	fc 01       	movw	r30, r24
    34e8:	87 81       	ldd	r24, Z+7	; 0x07
    34ea:	90 85       	ldd	r25, Z+8	; 0x08
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
}
    34f2:	22 96       	adiw	r28, 0x02	; 2
    34f4:	e2 e0       	ldi	r30, 0x02	; 2
    34f6:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000034fa <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    34fa:	a2 e0       	ldi	r26, 0x02	; 2
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e3 e8       	ldi	r30, 0x83	; 131
    3500:	fa e1       	ldi	r31, 0x1A	; 26
    3502:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	fc 01       	movw	r30, r24
    3510:	11 86       	std	Z+9, r1	; 0x09
    digitalWrite(_relayPin, LOW);
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	9a 81       	ldd	r25, Y+2	; 0x02
    3516:	fc 01       	movw	r30, r24
    3518:	87 81       	ldd	r24, Z+7	; 0x07
    351a:	90 85       	ldd	r25, Z+8	; 0x08
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <digitalWrite>
    delay(1000);
    3522:	68 ee       	ldi	r22, 0xE8	; 232
    3524:	73 e0       	ldi	r23, 0x03	; 3
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <delay>

}
    352e:	22 96       	adiw	r28, 0x02	; 2
    3530:	e2 e0       	ldi	r30, 0x02	; 2
    3532:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003536 <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    3536:	a2 e0       	ldi	r26, 0x02	; 2
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e1 ea       	ldi	r30, 0xA1	; 161
    353c:	fa e1       	ldi	r31, 0x1A	; 26
    353e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	fc 01       	movw	r30, r24
    354c:	84 81       	ldd	r24, Z+4	; 0x04
    354e:	95 81       	ldd	r25, Z+5	; 0x05
    3550:	22 96       	adiw	r28, 0x02	; 2
    3552:	e2 e0       	ldi	r30, 0x02	; 2
    3554:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003558 <_ZN6StringpLEPKc>:
    3558:	a4 e0       	ldi	r26, 0x04	; 4
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	e2 eb       	ldi	r30, 0xB2	; 178
    355e:	fa e1       	ldi	r31, 0x1A	; 26
    3560:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	7c 83       	std	Y+4, r23	; 0x04
    356a:	6b 83       	std	Y+3, r22	; 0x03
    356c:	2b 81       	ldd	r18, Y+3	; 0x03
    356e:	3c 81       	ldd	r19, Y+4	; 0x04
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	b9 01       	movw	r22, r18
    3576:	0e 94 3b 2a 	call	0x5476	; 0x5476 <_ZN6String6concatEPKc>
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	24 96       	adiw	r28, 0x04	; 4
    3580:	e2 e0       	ldi	r30, 0x02	; 2
    3582:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003586 <_ZNK6StringeqEPKc>:
    3586:	a4 e0       	ldi	r26, 0x04	; 4
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e9 ec       	ldi	r30, 0xC9	; 201
    358c:	fa e1       	ldi	r31, 0x1A	; 26
    358e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	7c 83       	std	Y+4, r23	; 0x04
    3598:	6b 83       	std	Y+3, r22	; 0x03
    359a:	2b 81       	ldd	r18, Y+3	; 0x03
    359c:	3c 81       	ldd	r19, Y+4	; 0x04
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	9a 81       	ldd	r25, Y+2	; 0x02
    35a2:	b9 01       	movw	r22, r18
    35a4:	0e 94 83 2a 	call	0x5506	; 0x5506 <_ZNK6String6equalsEPKc>
    35a8:	24 96       	adiw	r28, 0x04	; 4
    35aa:	e2 e0       	ldi	r30, 0x02	; 2
    35ac:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000035b0 <_ZN15StringSumHelperC1ERK6String>:
    35b0:	a4 e0       	ldi	r26, 0x04	; 4
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	ee ed       	ldi	r30, 0xDE	; 222
    35b6:	fa e1       	ldi	r31, 0x1A	; 26
    35b8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	89 83       	std	Y+1, r24	; 0x01
    35c0:	7c 83       	std	Y+4, r23	; 0x04
    35c2:	6b 83       	std	Y+3, r22	; 0x03
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	b9 01       	movw	r22, r18
    35ce:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    35d2:	24 96       	adiw	r28, 0x04	; 4
    35d4:	e2 e0       	ldi	r30, 0x02	; 2
    35d6:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000035da <_ZN15WaterSensorWire5SetupEv>:
    35da:	a0 e0       	ldi	r26, 0x00	; 0
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e3 ef       	ldi	r30, 0xF3	; 243
    35e0:	fa e1       	ldi	r31, 0x1A	; 26
    35e2:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    35e6:	8d e8       	ldi	r24, 0x8D	; 141
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	bc 01       	movw	r22, r24
    35ec:	80 ec       	ldi	r24, 0xC0	; 192
    35ee:	94 e0       	ldi	r25, 0x04	; 4
    35f0:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    35f4:	4a e0       	ldi	r20, 0x0A	; 10
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	68 e0       	ldi	r22, 0x08	; 8
    35fa:	80 ec       	ldi	r24, 0xC0	; 192
    35fc:	94 e0       	ldi	r25, 0x04	; 4
    35fe:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <_ZN5Print7printlnEhi>
    3602:	68 e0       	ldi	r22, 0x08	; 8
    3604:	8f e8       	ldi	r24, 0x8F	; 143
    3606:	92 e0       	ldi	r25, 0x02	; 2
    3608:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN7TwoWire5beginEh>
    360c:	62 ef       	ldi	r22, 0xF2	; 242
    360e:	7c e1       	ldi	r23, 0x1C	; 28
    3610:	8f e8       	ldi	r24, 0x8F	; 143
    3612:	92 e0       	ldi	r25, 0x02	; 2
    3614:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN7TwoWire9onRequestEPFvvE>
    3618:	68 ef       	ldi	r22, 0xF8	; 248
    361a:	7b e1       	ldi	r23, 0x1B	; 27
    361c:	8f e8       	ldi	r24, 0x8F	; 143
    361e:	92 e0       	ldi	r25, 0x02	; 2
    3620:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN7TwoWire9onReceiveEPFviE>
    3624:	e2 e0       	ldi	r30, 0x02	; 2
    3626:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

0000362a <_ZN15WaterSensorWire4LoopEv>:
    362a:	a4 e3       	ldi	r26, 0x34	; 52
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	eb e1       	ldi	r30, 0x1B	; 27
    3630:	fb e1       	ldi	r31, 0x1B	; 27
    3632:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3636:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    363a:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    363e:	c2 96       	adiw	r24, 0x32	; 50
    3640:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZNK6String5c_strEv>
    3644:	bc 01       	movw	r22, r24
    3646:	8d e3       	ldi	r24, 0x3D	; 61
    3648:	93 e0       	ldi	r25, 0x03	; 3
    364a:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    364e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    3652:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    3656:	c0 96       	adiw	r24, 0x30	; 48
    3658:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZNK6String5c_strEv>
    365c:	bc 01       	movw	r22, r24
    365e:	83 e4       	ldi	r24, 0x43	; 67
    3660:	93 e0       	ldi	r25, 0x03	; 3
    3662:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    3666:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    366a:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    366e:	fc 01       	movw	r30, r24
    3670:	80 ad       	ldd	r24, Z+56	; 0x38
    3672:	91 ad       	ldd	r25, Z+57	; 0x39
    3674:	a2 ad       	ldd	r26, Z+58	; 0x3a
    3676:	b3 ad       	ldd	r27, Z+59	; 0x3b
    3678:	fe 01       	movw	r30, r28
    367a:	b7 96       	adiw	r30, 0x27	; 39
    367c:	22 e0       	ldi	r18, 0x02	; 2
    367e:	ac 01       	movw	r20, r24
    3680:	bd 01       	movw	r22, r26
    3682:	cf 01       	movw	r24, r30
    3684:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <_ZN6StringC1Edh>
    3688:	ce 01       	movw	r24, r28
    368a:	87 96       	adiw	r24, 0x27	; 39
    368c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZNK6String5c_strEv>
    3690:	bc 01       	movw	r22, r24
    3692:	8b e5       	ldi	r24, 0x5B	; 91
    3694:	93 e0       	ldi	r25, 0x03	; 3
    3696:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    369a:	ce 01       	movw	r24, r28
    369c:	87 96       	adiw	r24, 0x27	; 39
    369e:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    36a2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    36a6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    36aa:	fc 01       	movw	r30, r24
    36ac:	26 a9       	ldd	r18, Z+54	; 0x36
    36ae:	37 a9       	ldd	r19, Z+55	; 0x37
    36b0:	ce 01       	movw	r24, r28
    36b2:	81 96       	adiw	r24, 0x21	; 33
    36b4:	4a e0       	ldi	r20, 0x0A	; 10
    36b6:	b9 01       	movw	r22, r18
    36b8:	0e 94 5e 29 	call	0x52bc	; 0x52bc <_ZN6StringC1Eih>
    36bc:	ce 01       	movw	r24, r28
    36be:	81 96       	adiw	r24, 0x21	; 33
    36c0:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZNK6String5c_strEv>
    36c4:	bc 01       	movw	r22, r24
    36c6:	81 e6       	ldi	r24, 0x61	; 97
    36c8:	93 e0       	ldi	r25, 0x03	; 3
    36ca:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    36ce:	ce 01       	movw	r24, r28
    36d0:	81 96       	adiw	r24, 0x21	; 33
    36d2:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    36d6:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	89 27       	eor	r24, r25
    36de:	88 23       	and	r24, r24
    36e0:	39 f0       	breq	.+14     	; 0x36f0 <_ZN15WaterSensorWire4LoopEv+0xc6>
    36e2:	64 e3       	ldi	r22, 0x34	; 52
    36e4:	71 e0       	ldi	r23, 0x01	; 1
    36e6:	85 e5       	ldi	r24, 0x55	; 85
    36e8:	93 e0       	ldi	r25, 0x03	; 3
    36ea:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    36ee:	06 c0       	rjmp	.+12     	; 0x36fc <_ZN15WaterSensorWire4LoopEv+0xd2>
    36f0:	67 e3       	ldi	r22, 0x37	; 55
    36f2:	71 e0       	ldi	r23, 0x01	; 1
    36f4:	85 e5       	ldi	r24, 0x55	; 85
    36f6:	93 e0       	ldi	r25, 0x03	; 3
    36f8:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    36fc:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    3700:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    3704:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    3708:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
    370c:	28 ee       	ldi	r18, 0xE8	; 232
    370e:	33 e0       	ldi	r19, 0x03	; 3
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	50 e0       	ldi	r21, 0x00	; 0
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__divmodsi4>
    371c:	da 01       	movw	r26, r20
    371e:	c9 01       	movw	r24, r18
    3720:	89 83       	std	Y+1, r24	; 0x01
    3722:	9a 83       	std	Y+2, r25	; 0x02
    3724:	ab 83       	std	Y+3, r26	; 0x03
    3726:	bc 83       	std	Y+4, r27	; 0x04
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	ab 81       	ldd	r26, Y+3	; 0x03
    372e:	bc 81       	ldd	r27, Y+4	; 0x04
    3730:	fe 01       	movw	r30, r28
    3732:	75 96       	adiw	r30, 0x15	; 21
    3734:	2a e0       	ldi	r18, 0x0A	; 10
    3736:	ac 01       	movw	r20, r24
    3738:	bd 01       	movw	r22, r26
    373a:	cf 01       	movw	r24, r30
    373c:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN6StringC1Elh>
    3740:	9e 01       	movw	r18, r28
    3742:	2b 5e       	subi	r18, 0xEB	; 235
    3744:	3f 4f       	sbci	r19, 0xFF	; 255
    3746:	ce 01       	movw	r24, r28
    3748:	4b 96       	adiw	r24, 0x1b	; 27
    374a:	b9 01       	movw	r22, r18
    374c:	31 df       	rcall	.-414    	; 0x35b0 <_ZN15StringSumHelperC1ERK6String>
    374e:	ce 01       	movw	r24, r28
    3750:	4b 96       	adiw	r24, 0x1b	; 27
    3752:	6b e3       	ldi	r22, 0x3B	; 59
    3754:	71 e0       	ldi	r23, 0x01	; 1
    3756:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_ZplRK15StringSumHelperPKc>
    375a:	bc 01       	movw	r22, r24
    375c:	8f e4       	ldi	r24, 0x4F	; 79
    375e:	93 e0       	ldi	r25, 0x03	; 3
    3760:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3764:	ce 01       	movw	r24, r28
    3766:	4b 96       	adiw	r24, 0x1b	; 27
    3768:	45 da       	rcall	.-2934   	; 0x2bf4 <_ZN15StringSumHelperD1Ev>
    376a:	ce 01       	movw	r24, r28
    376c:	45 96       	adiw	r24, 0x15	; 21
    376e:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3772:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    3776:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    377a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    377e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    3782:	28 ee       	ldi	r18, 0xE8	; 232
    3784:	33 e0       	ldi	r19, 0x03	; 3
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	bc 01       	movw	r22, r24
    378c:	cd 01       	movw	r24, r26
    378e:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__divmodsi4>
    3792:	da 01       	movw	r26, r20
    3794:	c9 01       	movw	r24, r18
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	af 83       	std	Y+7, r26	; 0x07
    379c:	b8 87       	std	Y+8, r27	; 0x08
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	af 81       	ldd	r26, Y+7	; 0x07
    37a4:	b8 85       	ldd	r27, Y+8	; 0x08
    37a6:	fe 01       	movw	r30, r28
    37a8:	39 96       	adiw	r30, 0x09	; 9
    37aa:	2a e0       	ldi	r18, 0x0A	; 10
    37ac:	ac 01       	movw	r20, r24
    37ae:	bd 01       	movw	r22, r26
    37b0:	cf 01       	movw	r24, r30
    37b2:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN6StringC1Elh>
    37b6:	9e 01       	movw	r18, r28
    37b8:	27 5f       	subi	r18, 0xF7	; 247
    37ba:	3f 4f       	sbci	r19, 0xFF	; 255
    37bc:	ce 01       	movw	r24, r28
    37be:	0f 96       	adiw	r24, 0x0f	; 15
    37c0:	b9 01       	movw	r22, r18
    37c2:	f6 de       	rcall	.-532    	; 0x35b0 <_ZN15StringSumHelperC1ERK6String>
    37c4:	ce 01       	movw	r24, r28
    37c6:	0f 96       	adiw	r24, 0x0f	; 15
    37c8:	6b e3       	ldi	r22, 0x3B	; 59
    37ca:	71 e0       	ldi	r23, 0x01	; 1
    37cc:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <_ZplRK15StringSumHelperPKc>
    37d0:	bc 01       	movw	r22, r24
    37d2:	89 e4       	ldi	r24, 0x49	; 73
    37d4:	93 e0       	ldi	r25, 0x03	; 3
    37d6:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    37da:	ce 01       	movw	r24, r28
    37dc:	0f 96       	adiw	r24, 0x0f	; 15
    37de:	0a da       	rcall	.-3052   	; 0x2bf4 <_ZN15StringSumHelperD1Ev>
    37e0:	ce 01       	movw	r24, r28
    37e2:	09 96       	adiw	r24, 0x09	; 9
    37e4:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    37e8:	e4 96       	adiw	r28, 0x34	; 52
    37ea:	e2 e0       	ldi	r30, 0x02	; 2
    37ec:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000037f0 <_ZN15WaterSensorWire7ReceiveEi>:
    37f0:	a7 e2       	ldi	r26, 0x27	; 39
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ee ef       	ldi	r30, 0xFE	; 254
    37f6:	fb e1       	ldi	r31, 0x1B	; 27
    37f8:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__prologue_saves__+0x1e>
    37fc:	9f a3       	std	Y+39, r25	; 0x27
    37fe:	8e a3       	std	Y+38, r24	; 0x26
    3800:	6d e3       	ldi	r22, 0x3D	; 61
    3802:	71 e0       	ldi	r23, 0x01	; 1
    3804:	8f e1       	ldi	r24, 0x1F	; 31
    3806:	93 e0       	ldi	r25, 0x03	; 3
    3808:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    380c:	6d e3       	ldi	r22, 0x3D	; 61
    380e:	71 e0       	ldi	r23, 0x01	; 1
    3810:	8b e2       	ldi	r24, 0x2B	; 43
    3812:	93 e0       	ldi	r25, 0x03	; 3
    3814:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    3818:	6d e3       	ldi	r22, 0x3D	; 61
    381a:	71 e0       	ldi	r23, 0x01	; 1
    381c:	81 e3       	ldi	r24, 0x31	; 49
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    3824:	8e a1       	ldd	r24, Y+38	; 0x26
    3826:	9f a1       	ldd	r25, Y+39	; 0x27
    3828:	44 97       	sbiw	r24, 0x14	; 20
    382a:	09 f0       	breq	.+2      	; 0x382e <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    382c:	c7 c0       	rjmp	.+398    	; 0x39bc <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    382e:	0a c0       	rjmp	.+20     	; 0x3844 <_ZN15WaterSensorWire7ReceiveEi+0x54>
    3830:	8f e8       	ldi	r24, 0x8F	; 143
    3832:	92 e0       	ldi	r25, 0x02	; 2
    3834:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN7TwoWire4readEv>
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	69 81       	ldd	r22, Y+1	; 0x01
    383c:	8f e1       	ldi	r24, 0x1F	; 31
    383e:	93 e0       	ldi	r25, 0x03	; 3
    3840:	0e 94 49 2a 	call	0x5492	; 0x5492 <_ZN6String6concatEc>
    3844:	8f e8       	ldi	r24, 0x8F	; 143
    3846:	92 e0       	ldi	r25, 0x02	; 2
    3848:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN7TwoWire9availableEv>
    384c:	21 e0       	ldi	r18, 0x01	; 1
    384e:	18 16       	cp	r1, r24
    3850:	19 06       	cpc	r1, r25
    3852:	0c f0       	brlt	.+2      	; 0x3856 <_ZN15WaterSensorWire7ReceiveEi+0x66>
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	22 23       	and	r18, r18
    3858:	59 f7       	brne	.-42     	; 0x3830 <_ZN15WaterSensorWire7ReceiveEi+0x40>
    385a:	8f e1       	ldi	r24, 0x1F	; 31
    385c:	93 e0       	ldi	r25, 0x03	; 3
    385e:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_ZN6String4trimEv>
    3862:	ce 01       	movw	r24, r28
    3864:	44 96       	adiw	r24, 0x14	; 20
    3866:	6e e3       	ldi	r22, 0x3E	; 62
    3868:	71 e0       	ldi	r23, 0x01	; 1
    386a:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    386e:	ce 01       	movw	r24, r28
    3870:	44 96       	adiw	r24, 0x14	; 20
    3872:	bc 01       	movw	r22, r24
    3874:	8f e1       	ldi	r24, 0x1F	; 31
    3876:	93 e0       	ldi	r25, 0x03	; 3
    3878:	0e 94 c6 2a 	call	0x558c	; 0x558c <_ZNK6String10startsWithERKS_>
    387c:	11 e0       	ldi	r17, 0x01	; 1
    387e:	88 23       	and	r24, r24
    3880:	09 f4       	brne	.+2      	; 0x3884 <_ZN15WaterSensorWire7ReceiveEi+0x94>
    3882:	10 e0       	ldi	r17, 0x00	; 0
    3884:	ce 01       	movw	r24, r28
    3886:	44 96       	adiw	r24, 0x14	; 20
    3888:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    388c:	11 23       	and	r17, r17
    388e:	a1 f0       	breq	.+40     	; 0x38b8 <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    3890:	6f e1       	ldi	r22, 0x1F	; 31
    3892:	73 e0       	ldi	r23, 0x03	; 3
    3894:	8b e2       	ldi	r24, 0x2B	; 43
    3896:	93 e0       	ldi	r25, 0x03	; 3
    3898:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    389c:	86 e9       	ldi	r24, 0x96	; 150
    389e:	93 e0       	ldi	r25, 0x03	; 3
    38a0:	bc 01       	movw	r22, r24
    38a2:	80 ec       	ldi	r24, 0xC0	; 192
    38a4:	94 e0       	ldi	r25, 0x04	; 4
    38a6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    38aa:	6b e2       	ldi	r22, 0x2B	; 43
    38ac:	73 e0       	ldi	r23, 0x03	; 3
    38ae:	80 ec       	ldi	r24, 0xC0	; 192
    38b0:	94 e0       	ldi	r25, 0x04	; 4
    38b2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_ZN5Print7printlnERK6String>
    38b6:	92 c0       	rjmp	.+292    	; 0x39dc <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    38b8:	6f e1       	ldi	r22, 0x1F	; 31
    38ba:	73 e0       	ldi	r23, 0x03	; 3
    38bc:	81 e3       	ldi	r24, 0x31	; 49
    38be:	93 e0       	ldi	r25, 0x03	; 3
    38c0:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    38c4:	8c e9       	ldi	r24, 0x9C	; 156
    38c6:	93 e0       	ldi	r25, 0x03	; 3
    38c8:	bc 01       	movw	r22, r24
    38ca:	80 ec       	ldi	r24, 0xC0	; 192
    38cc:	94 e0       	ldi	r25, 0x04	; 4
    38ce:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    38d2:	61 e3       	ldi	r22, 0x31	; 49
    38d4:	73 e0       	ldi	r23, 0x03	; 3
    38d6:	80 ec       	ldi	r24, 0xC0	; 192
    38d8:	94 e0       	ldi	r25, 0x04	; 4
    38da:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_ZN5Print7printlnERK6String>
    38de:	ce 01       	movw	r24, r28
    38e0:	0e 96       	adiw	r24, 0x0e	; 14
    38e2:	61 e3       	ldi	r22, 0x31	; 49
    38e4:	73 e0       	ldi	r23, 0x03	; 3
    38e6:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    38ea:	ce 01       	movw	r24, r28
    38ec:	4a 96       	adiw	r24, 0x1a	; 26
    38ee:	be 01       	movw	r22, r28
    38f0:	62 5f       	subi	r22, 0xF2	; 242
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	4d e3       	ldi	r20, 0x3D	; 61
    38fa:	95 d1       	rcall	.+810    	; 0x3c26 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    38fc:	ce 01       	movw	r24, r28
    38fe:	0e 96       	adiw	r24, 0x0e	; 14
    3900:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3904:	ce 01       	movw	r24, r28
    3906:	08 96       	adiw	r24, 0x08	; 8
    3908:	61 e3       	ldi	r22, 0x31	; 49
    390a:	73 e0       	ldi	r23, 0x03	; 3
    390c:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    3910:	ce 01       	movw	r24, r28
    3912:	80 96       	adiw	r24, 0x20	; 32
    3914:	be 01       	movw	r22, r28
    3916:	68 5f       	subi	r22, 0xF8	; 248
    3918:	7f 4f       	sbci	r23, 0xFF	; 255
    391a:	21 e0       	ldi	r18, 0x01	; 1
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	4d e3       	ldi	r20, 0x3D	; 61
    3920:	82 d1       	rcall	.+772    	; 0x3c26 <_ZN15WaterSensorWire11SplitStringE6Stringci>
    3922:	ce 01       	movw	r24, r28
    3924:	08 96       	adiw	r24, 0x08	; 8
    3926:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    392a:	ce 01       	movw	r24, r28
    392c:	4a 96       	adiw	r24, 0x1a	; 26
    392e:	60 e4       	ldi	r22, 0x40	; 64
    3930:	71 e0       	ldi	r23, 0x01	; 1
    3932:	29 de       	rcall	.-942    	; 0x3586 <_ZNK6StringeqEPKc>
    3934:	98 2f       	mov	r25, r24
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	99 23       	and	r25, r25
    393a:	09 f4       	brne	.+2      	; 0x393e <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	88 23       	and	r24, r24
    3940:	89 f0       	breq	.+34     	; 0x3964 <_ZN15WaterSensorWire7ReceiveEi+0x174>
    3942:	ce 01       	movw	r24, r28
    3944:	80 96       	adiw	r24, 0x20	; 32
    3946:	0e 94 81 2b 	call	0x5702	; 0x5702 <_ZNK6String5toIntEv>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	9b 83       	std	Y+3, r25	; 0x03
    3950:	8a 83       	std	Y+2, r24	; 0x02
    3952:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    3956:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    395a:	2a 81       	ldd	r18, Y+2	; 0x02
    395c:	3b 81       	ldd	r19, Y+3	; 0x03
    395e:	b9 01       	movw	r22, r18
    3960:	9e db       	rcall	.-2244   	; 0x309e <_ZN9TDSSensor6UpdateEi>
    3962:	23 c0       	rjmp	.+70     	; 0x39aa <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    3964:	ce 01       	movw	r24, r28
    3966:	4a 96       	adiw	r24, 0x1a	; 26
    3968:	6a e4       	ldi	r22, 0x4A	; 74
    396a:	71 e0       	ldi	r23, 0x01	; 1
    396c:	0c de       	rcall	.-1000   	; 0x3586 <_ZNK6StringeqEPKc>
    396e:	98 2f       	mov	r25, r24
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	99 23       	and	r25, r25
    3974:	09 f4       	brne	.+2      	; 0x3978 <_ZN15WaterSensorWire7ReceiveEi+0x188>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	88 23       	and	r24, r24
    397a:	b9 f0       	breq	.+46     	; 0x39aa <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    397c:	ce 01       	movw	r24, r28
    397e:	80 96       	adiw	r24, 0x20	; 32
    3980:	0e 94 8b 2b 	call	0x5716	; 0x5716 <_ZNK6String7toFloatEv>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8c 83       	std	Y+4, r24	; 0x04
    398a:	9d 83       	std	Y+5, r25	; 0x05
    398c:	ae 83       	std	Y+6, r26	; 0x06
    398e:	bf 83       	std	Y+7, r27	; 0x07
    3990:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    3994:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    3998:	8c 81       	ldd	r24, Y+4	; 0x04
    399a:	9d 81       	ldd	r25, Y+5	; 0x05
    399c:	ae 81       	ldd	r26, Y+6	; 0x06
    399e:	bf 81       	ldd	r27, Y+7	; 0x07
    39a0:	ac 01       	movw	r20, r24
    39a2:	bd 01       	movw	r22, r26
    39a4:	c9 01       	movw	r24, r18
    39a6:	0e 94 56 14 	call	0x28ac	; 0x28ac <_ZN8PHSensor6UpdateEd>
    39aa:	ce 01       	movw	r24, r28
    39ac:	80 96       	adiw	r24, 0x20	; 32
    39ae:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    39b2:	ce 01       	movw	r24, r28
    39b4:	4a 96       	adiw	r24, 0x1a	; 26
    39b6:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    39ba:	10 c0       	rjmp	.+32     	; 0x39dc <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    39bc:	86 ea       	ldi	r24, 0xA6	; 166
    39be:	93 e0       	ldi	r25, 0x03	; 3
    39c0:	bc 01       	movw	r22, r24
    39c2:	80 ec       	ldi	r24, 0xC0	; 192
    39c4:	94 e0       	ldi	r25, 0x04	; 4
    39c6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    39ca:	8e a1       	ldd	r24, Y+38	; 0x26
    39cc:	9f a1       	ldd	r25, Y+39	; 0x27
    39ce:	4a e0       	ldi	r20, 0x0A	; 10
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	bc 01       	movw	r22, r24
    39d4:	80 ec       	ldi	r24, 0xC0	; 192
    39d6:	94 e0       	ldi	r25, 0x04	; 4
    39d8:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN5Print7printlnEii>
    39dc:	a7 96       	adiw	r28, 0x27	; 39
    39de:	e3 e0       	ldi	r30, 0x03	; 3
    39e0:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__epilogue_restores__+0x1e>

000039e4 <_ZN15WaterSensorWire7RequestEv>:
    39e4:	a2 e1       	ldi	r26, 0x12	; 18
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e8 ef       	ldi	r30, 0xF8	; 248
    39ea:	fc e1       	ldi	r31, 0x1C	; 28
    39ec:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__prologue_saves__+0x1c>
    39f0:	ce 01       	movw	r24, r28
    39f2:	0d 96       	adiw	r24, 0x0d	; 13
    39f4:	6d e3       	ldi	r22, 0x3D	; 61
    39f6:	71 e0       	ldi	r23, 0x01	; 1
    39f8:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    39fc:	6e e3       	ldi	r22, 0x3E	; 62
    39fe:	71 e0       	ldi	r23, 0x01	; 1
    3a00:	8b e2       	ldi	r24, 0x2B	; 43
    3a02:	93 e0       	ldi	r25, 0x03	; 3
    3a04:	c0 dd       	rcall	.-1152   	; 0x3586 <_ZNK6StringeqEPKc>
    3a06:	98 2f       	mov	r25, r24
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	99 23       	and	r25, r25
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <_ZN15WaterSensorWire7RequestEv+0x2c>
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	88 23       	and	r24, r24
    3a12:	c1 f0       	breq	.+48     	; 0x3a44 <_ZN15WaterSensorWire7RequestEv+0x60>
    3a14:	ce 01       	movw	r24, r28
    3a16:	0d 96       	adiw	r24, 0x0d	; 13
    3a18:	63 e5       	ldi	r22, 0x53	; 83
    3a1a:	71 e0       	ldi	r23, 0x01	; 1
    3a1c:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN6StringaSEPKc>
    3a20:	9e 01       	movw	r18, r28
    3a22:	23 5f       	subi	r18, 0xF3	; 243
    3a24:	3f 4f       	sbci	r19, 0xFF	; 255
    3a26:	ce 01       	movw	r24, r28
    3a28:	07 96       	adiw	r24, 0x07	; 7
    3a2a:	b9 01       	movw	r22, r18
    3a2c:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    3a30:	ce 01       	movw	r24, r28
    3a32:	07 96       	adiw	r24, 0x07	; 7
    3a34:	a8 d0       	rcall	.+336    	; 0x3b86 <_ZN15WaterSensorWire8TransmitE6String>
    3a36:	ce 01       	movw	r24, r28
    3a38:	07 96       	adiw	r24, 0x07	; 7
    3a3a:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3a3e:	00 e0       	ldi	r16, 0x00	; 0
    3a40:	10 e0       	ldi	r17, 0x00	; 0
    3a42:	95 c0       	rjmp	.+298    	; 0x3b6e <_ZN15WaterSensorWire7RequestEv+0x18a>
    3a44:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3a48:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3a52:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3a56:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3a5a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3a5e:	89 2b       	or	r24, r25
    3a60:	39 f4       	brne	.+14     	; 0x3a70 <_ZN15WaterSensorWire7RequestEv+0x8c>
    3a62:	ce 01       	movw	r24, r28
    3a64:	0d 96       	adiw	r24, 0x0d	; 13
    3a66:	6d e3       	ldi	r22, 0x3D	; 61
    3a68:	73 e0       	ldi	r23, 0x03	; 3
    3a6a:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3a6e:	6f c0       	rjmp	.+222    	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3a70:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3a74:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	39 f4       	brne	.+14     	; 0x3a8a <_ZN15WaterSensorWire7RequestEv+0xa6>
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	0d 96       	adiw	r24, 0x0d	; 13
    3a80:	63 e4       	ldi	r22, 0x43	; 67
    3a82:	73 e0       	ldi	r23, 0x03	; 3
    3a84:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3a88:	62 c0       	rjmp	.+196    	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3a8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3a8e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3a92:	02 97       	sbiw	r24, 0x02	; 2
    3a94:	39 f4       	brne	.+14     	; 0x3aa4 <_ZN15WaterSensorWire7RequestEv+0xc0>
    3a96:	ce 01       	movw	r24, r28
    3a98:	0d 96       	adiw	r24, 0x0d	; 13
    3a9a:	6b e5       	ldi	r22, 0x5B	; 91
    3a9c:	73 e0       	ldi	r23, 0x03	; 3
    3a9e:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3aa2:	55 c0       	rjmp	.+170    	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3aa4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3aa8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3aac:	03 97       	sbiw	r24, 0x03	; 3
    3aae:	39 f4       	brne	.+14     	; 0x3abe <_ZN15WaterSensorWire7RequestEv+0xda>
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	0d 96       	adiw	r24, 0x0d	; 13
    3ab4:	61 e6       	ldi	r22, 0x61	; 97
    3ab6:	73 e0       	ldi	r23, 0x03	; 3
    3ab8:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3abc:	48 c0       	rjmp	.+144    	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3abe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3ac2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3ac6:	04 97       	sbiw	r24, 0x04	; 4
    3ac8:	39 f4       	brne	.+14     	; 0x3ad8 <_ZN15WaterSensorWire7RequestEv+0xf4>
    3aca:	ce 01       	movw	r24, r28
    3acc:	0d 96       	adiw	r24, 0x0d	; 13
    3ace:	65 e5       	ldi	r22, 0x55	; 85
    3ad0:	73 e0       	ldi	r23, 0x03	; 3
    3ad2:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3ad6:	3b c0       	rjmp	.+118    	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3ad8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3adc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3ae0:	05 97       	sbiw	r24, 0x05	; 5
    3ae2:	39 f4       	brne	.+14     	; 0x3af2 <_ZN15WaterSensorWire7RequestEv+0x10e>
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	0d 96       	adiw	r24, 0x0d	; 13
    3ae8:	6f e4       	ldi	r22, 0x4F	; 79
    3aea:	73 e0       	ldi	r23, 0x03	; 3
    3aec:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3af0:	2e c0       	rjmp	.+92     	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3af2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3af6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3afa:	06 97       	sbiw	r24, 0x06	; 6
    3afc:	69 f4       	brne	.+26     	; 0x3b18 <_ZN15WaterSensorWire7RequestEv+0x134>
    3afe:	ce 01       	movw	r24, r28
    3b00:	0d 96       	adiw	r24, 0x0d	; 13
    3b02:	69 e4       	ldi	r22, 0x49	; 73
    3b04:	73 e0       	ldi	r23, 0x03	; 3
    3b06:	0e 94 2c 29 	call	0x5258	; 0x5258 <_ZN6StringaSERKS_>
    3b0a:	8f ef       	ldi	r24, 0xFF	; 255
    3b0c:	9f ef       	ldi	r25, 0xFF	; 255
    3b0e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3b12:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3b16:	1b c0       	rjmp	.+54     	; 0x3b4e <_ZN15WaterSensorWire7RequestEv+0x16a>
    3b18:	8c ec       	ldi	r24, 0xCC	; 204
    3b1a:	93 e0       	ldi	r25, 0x03	; 3
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	80 ec       	ldi	r24, 0xC0	; 192
    3b20:	94 e0       	ldi	r25, 0x04	; 4
    3b22:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    3b26:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    3b2a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    3b2e:	4a e0       	ldi	r20, 0x0A	; 10
    3b30:	50 e0       	ldi	r21, 0x00	; 0
    3b32:	bc 01       	movw	r22, r24
    3b34:	80 ec       	ldi	r24, 0xC0	; 192
    3b36:	94 e0       	ldi	r25, 0x04	; 4
    3b38:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_ZN5Print7printlnEii>
    3b3c:	8f ef       	ldi	r24, 0xFF	; 255
    3b3e:	9f ef       	ldi	r25, 0xFF	; 255
    3b40:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    3b44:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    3b48:	00 e0       	ldi	r16, 0x00	; 0
    3b4a:	10 e0       	ldi	r17, 0x00	; 0
    3b4c:	10 c0       	rjmp	.+32     	; 0x3b6e <_ZN15WaterSensorWire7RequestEv+0x18a>
    3b4e:	ce 01       	movw	r24, r28
    3b50:	0d 96       	adiw	r24, 0x0d	; 13
    3b52:	bc 01       	movw	r22, r24
    3b54:	ce 01       	movw	r24, r28
    3b56:	01 96       	adiw	r24, 0x01	; 1
    3b58:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN6StringC1ERKS_>
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	12 d0       	rcall	.+36     	; 0x3b86 <_ZN15WaterSensorWire8TransmitE6String>
    3b62:	ce 01       	movw	r24, r28
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3b6a:	01 e0       	ldi	r16, 0x01	; 1
    3b6c:	10 e0       	ldi	r17, 0x00	; 0
    3b6e:	ce 01       	movw	r24, r28
    3b70:	0d 96       	adiw	r24, 0x0d	; 13
    3b72:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3b76:	01 30       	cpi	r16, 0x01	; 1
    3b78:	11 05       	cpc	r17, r1
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <_ZN15WaterSensorWire7RequestEv+0x19a>
    3b7c:	00 00       	nop
    3b7e:	62 96       	adiw	r28, 0x12	; 18
    3b80:	e4 e0       	ldi	r30, 0x04	; 4
    3b82:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__epilogue_restores__+0x1c>

00003b86 <_ZN15WaterSensorWire8TransmitE6String>:
    3b86:	a2 e1       	ldi	r26, 0x12	; 18
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3b8c:	fd e1       	ldi	r31, 0x1D	; 29
    3b8e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3b92:	9a 8b       	std	Y+18, r25	; 0x12
    3b94:	89 8b       	std	Y+17, r24	; 0x11
    3b96:	89 89       	ldd	r24, Y+17	; 0x11
    3b98:	9a 89       	ldd	r25, Y+18	; 0x12
    3b9a:	cd dc       	rcall	.-1638   	; 0x3536 <_ZNK6String6lengthEv>
    3b9c:	9c 01       	movw	r18, r24
    3b9e:	8a e0       	ldi	r24, 0x0A	; 10
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	82 1b       	sub	r24, r18
    3ba4:	93 0b       	sbc	r25, r19
    3ba6:	9e 83       	std	Y+6, r25	; 0x06
    3ba8:	8d 83       	std	Y+5, r24	; 0x05
    3baa:	1a 82       	std	Y+2, r1	; 0x02
    3bac:	19 82       	std	Y+1, r1	; 0x01
    3bae:	0a c0       	rjmp	.+20     	; 0x3bc4 <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    3bb0:	89 89       	ldd	r24, Y+17	; 0x11
    3bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb4:	69 e5       	ldi	r22, 0x59	; 89
    3bb6:	71 e0       	ldi	r23, 0x01	; 1
    3bb8:	cf dc       	rcall	.-1634   	; 0x3558 <_ZN6StringpLEPKc>
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	29 81       	ldd	r18, Y+1	; 0x01
    3bc6:	3a 81       	ldd	r19, Y+2	; 0x02
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	9e 81       	ldd	r25, Y+6	; 0x06
    3bcc:	28 17       	cp	r18, r24
    3bce:	39 07       	cpc	r19, r25
    3bd0:	7c f3       	brlt	.-34     	; 0x3bb0 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    3bd2:	1c 82       	std	Y+4, r1	; 0x04
    3bd4:	1b 82       	std	Y+3, r1	; 0x03
    3bd6:	16 c0       	rjmp	.+44     	; 0x3c04 <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    3bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3bda:	3c 81       	ldd	r19, Y+4	; 0x04
    3bdc:	89 89       	ldd	r24, Y+17	; 0x11
    3bde:	9a 89       	ldd	r25, Y+18	; 0x12
    3be0:	b9 01       	movw	r22, r18
    3be2:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_ZNK6String6charAtEj>
    3be6:	48 2f       	mov	r20, r24
    3be8:	9e 01       	movw	r18, r28
    3bea:	29 5f       	subi	r18, 0xF9	; 249
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf2:	82 0f       	add	r24, r18
    3bf4:	93 1f       	adc	r25, r19
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	40 83       	st	Z, r20
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	01 96       	adiw	r24, 0x01	; 1
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
    3c04:	8b 81       	ldd	r24, Y+3	; 0x03
    3c06:	9c 81       	ldd	r25, Y+4	; 0x04
    3c08:	0a 97       	sbiw	r24, 0x0a	; 10
    3c0a:	34 f3       	brlt	.-52     	; 0x3bd8 <_ZN15WaterSensorWire8TransmitE6String+0x52>
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	07 96       	adiw	r24, 0x07	; 7
    3c10:	4a e0       	ldi	r20, 0x0A	; 10
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	bc 01       	movw	r22, r24
    3c16:	8f e8       	ldi	r24, 0x8F	; 143
    3c18:	92 e0       	ldi	r25, 0x02	; 2
    3c1a:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN7TwoWire5writeEPKhj>
    3c1e:	62 96       	adiw	r28, 0x12	; 18
    3c20:	e2 e0       	ldi	r30, 0x02	; 2
    3c22:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003c26 <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    3c26:	a1 e1       	ldi	r26, 0x11	; 17
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	e9 e1       	ldi	r30, 0x19	; 25
    3c2c:	fe e1       	ldi	r31, 0x1E	; 30
    3c2e:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3c32:	9c 87       	std	Y+12, r25	; 0x0c
    3c34:	8b 87       	std	Y+11, r24	; 0x0b
    3c36:	7e 87       	std	Y+14, r23	; 0x0e
    3c38:	6d 87       	std	Y+13, r22	; 0x0d
    3c3a:	4f 87       	std	Y+15, r20	; 0x0f
    3c3c:	39 8b       	std	Y+17, r19	; 0x11
    3c3e:	28 8b       	std	Y+16, r18	; 0x10
    3c40:	1a 82       	std	Y+2, r1	; 0x02
    3c42:	19 82       	std	Y+1, r1	; 0x01
    3c44:	18 86       	std	Y+8, r1	; 0x08
    3c46:	1f 82       	std	Y+7, r1	; 0x07
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
    3c4a:	9f ef       	ldi	r25, 0xFF	; 255
    3c4c:	9a 87       	std	Y+10, r25	; 0x0a
    3c4e:	89 87       	std	Y+9, r24	; 0x09
    3c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c54:	70 dc       	rcall	.-1824   	; 0x3536 <_ZNK6String6lengthEv>
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
    3c5c:	1c 82       	std	Y+4, r1	; 0x04
    3c5e:	1b 82       	std	Y+3, r1	; 0x03
    3c60:	35 c0       	rjmp	.+106    	; 0x3ccc <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    3c62:	2b 81       	ldd	r18, Y+3	; 0x03
    3c64:	3c 81       	ldd	r19, Y+4	; 0x04
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	b9 01       	movw	r22, r18
    3c6c:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_ZNK6String6charAtEj>
    3c70:	98 2f       	mov	r25, r24
    3c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c74:	98 17       	cp	r25, r24
    3c76:	39 f0       	breq	.+14     	; 0x3c86 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    3c78:	2b 81       	ldd	r18, Y+3	; 0x03
    3c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c80:	28 17       	cp	r18, r24
    3c82:	39 07       	cpc	r19, r25
    3c84:	11 f4       	brne	.+4      	; 0x3c8a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	01 c0       	rjmp	.+2      	; 0x3c8c <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	88 23       	and	r24, r24
    3c8e:	c9 f0       	breq	.+50     	; 0x3cc2 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	9a 81       	ldd	r25, Y+2	; 0x02
    3c94:	01 96       	adiw	r24, 0x01	; 1
    3c96:	9a 83       	std	Y+2, r25	; 0x02
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	01 96       	adiw	r24, 0x01	; 1
    3ca0:	98 87       	std	Y+8, r25	; 0x08
    3ca2:	8f 83       	std	Y+7, r24	; 0x07
    3ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    3caa:	9e 81       	ldd	r25, Y+6	; 0x06
    3cac:	28 17       	cp	r18, r24
    3cae:	39 07       	cpc	r19, r25
    3cb0:	21 f4       	brne	.+8      	; 0x3cba <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    3cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbe:	9a 87       	std	Y+10, r25	; 0x0a
    3cc0:	89 87       	std	Y+9, r24	; 0x09
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	9c 83       	std	Y+4, r25	; 0x04
    3cca:	8b 83       	std	Y+3, r24	; 0x03
    3ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    3cce:	3c 81       	ldd	r19, Y+4	; 0x04
    3cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd4:	82 17       	cp	r24, r18
    3cd6:	93 07       	cpc	r25, r19
    3cd8:	44 f0       	brlt	.+16     	; 0x3cea <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3cda:	29 81       	ldd	r18, Y+1	; 0x01
    3cdc:	3a 81       	ldd	r19, Y+2	; 0x02
    3cde:	88 89       	ldd	r24, Y+16	; 0x10
    3ce0:	99 89       	ldd	r25, Y+17	; 0x11
    3ce2:	82 17       	cp	r24, r18
    3ce4:	93 07       	cpc	r25, r19
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    3ce8:	bc cf       	rjmp	.-136    	; 0x3c62 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    3cea:	29 81       	ldd	r18, Y+1	; 0x01
    3cec:	3a 81       	ldd	r19, Y+2	; 0x02
    3cee:	88 89       	ldd	r24, Y+16	; 0x10
    3cf0:	99 89       	ldd	r25, Y+17	; 0x11
    3cf2:	82 17       	cp	r24, r18
    3cf4:	93 07       	cpc	r25, r19
    3cf6:	6c f4       	brge	.+26     	; 0x3d12 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    3cf8:	89 85       	ldd	r24, Y+9	; 0x09
    3cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cfc:	9c 01       	movw	r18, r24
    3cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    3d00:	98 85       	ldd	r25, Y+8	; 0x08
    3d02:	ac 01       	movw	r20, r24
    3d04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d06:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d08:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d0a:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d0c:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <_ZNK6String9substringEjj>
    3d10:	06 c0       	rjmp	.+12     	; 0x3d1e <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    3d12:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d14:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d16:	6d e3       	ldi	r22, 0x3D	; 61
    3d18:	71 e0       	ldi	r23, 0x01	; 1
    3d1a:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    3d1e:	00 00       	nop
    3d20:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d22:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d24:	61 96       	adiw	r28, 0x11	; 17
    3d26:	e2 e0       	ldi	r30, 0x02	; 2
    3d28:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003d2c <_Z41__static_initialization_and_destruction_0ii>:
    3d2c:	a4 e0       	ldi	r26, 0x04	; 4
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	ec e9       	ldi	r30, 0x9C	; 156
    3d32:	fe e1       	ldi	r31, 0x1E	; 30
    3d34:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3d38:	9a 83       	std	Y+2, r25	; 0x02
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	7c 83       	std	Y+4, r23	; 0x04
    3d3e:	6b 83       	std	Y+3, r22	; 0x03
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	9a 81       	ldd	r25, Y+2	; 0x02
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <_Z41__static_initialization_and_destruction_0ii+0x1e>
    3d48:	4d c0       	rjmp	.+154    	; 0x3de4 <_Z41__static_initialization_and_destruction_0ii+0xb8>
    3d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4e:	01 96       	adiw	r24, 0x01	; 1
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <_Z41__static_initialization_and_destruction_0ii+0x28>
    3d52:	48 c0       	rjmp	.+144    	; 0x3de4 <_Z41__static_initialization_and_destruction_0ii+0xb8>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3d54:	6d e3       	ldi	r22, 0x3D	; 61
    3d56:	71 e0       	ldi	r23, 0x01	; 1
    3d58:	8f e1       	ldi	r24, 0x1F	; 31
    3d5a:	93 e0       	ldi	r25, 0x03	; 3
    3d5c:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    3d60:	6d e3       	ldi	r22, 0x3D	; 61
    3d62:	71 e0       	ldi	r23, 0x01	; 1
    3d64:	85 e2       	ldi	r24, 0x25	; 37
    3d66:	93 e0       	ldi	r25, 0x03	; 3
    3d68:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    3d6c:	6d e3       	ldi	r22, 0x3D	; 61
    3d6e:	71 e0       	ldi	r23, 0x01	; 1
    3d70:	8b e2       	ldi	r24, 0x2B	; 43
    3d72:	93 e0       	ldi	r25, 0x03	; 3
    3d74:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _cmdData = "";
    3d78:	6d e3       	ldi	r22, 0x3D	; 61
    3d7a:	71 e0       	ldi	r23, 0x01	; 1
    3d7c:	81 e3       	ldi	r24, 0x31	; 49
    3d7e:	93 e0       	ldi	r25, 0x03	; 3
    3d80:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _response = "";
    3d84:	6d e3       	ldi	r22, 0x3D	; 61
    3d86:	71 e0       	ldi	r23, 0x01	; 1
    3d88:	87 e3       	ldi	r24, 0x37	; 55
    3d8a:	93 e0       	ldi	r25, 0x03	; 3
    3d8c:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
//static long _lastReqReceived = 0;
static String _ph = "";
    3d90:	6d e3       	ldi	r22, 0x3D	; 61
    3d92:	71 e0       	ldi	r23, 0x01	; 1
    3d94:	8d e3       	ldi	r24, 0x3D	; 61
    3d96:	93 e0       	ldi	r25, 0x03	; 3
    3d98:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
//static String _phAvg = "";
static String _tds = "";
    3d9c:	6d e3       	ldi	r22, 0x3D	; 61
    3d9e:	71 e0       	ldi	r23, 0x01	; 1
    3da0:	83 e4       	ldi	r24, 0x43	; 67
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3da8:	6d e3       	ldi	r22, 0x3D	; 61
    3daa:	71 e0       	ldi	r23, 0x01	; 1
    3dac:	89 e4       	ldi	r24, 0x49	; 73
    3dae:	93 e0       	ldi	r25, 0x03	; 3
    3db0:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _sensorReadDur = "";
    3db4:	6d e3       	ldi	r22, 0x3D	; 61
    3db6:	71 e0       	ldi	r23, 0x01	; 1
    3db8:	8f e4       	ldi	r24, 0x4F	; 79
    3dba:	93 e0       	ldi	r25, 0x03	; 3
    3dbc:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _reading = "";
    3dc0:	6d e3       	ldi	r22, 0x3D	; 61
    3dc2:	71 e0       	ldi	r23, 0x01	; 1
    3dc4:	85 e5       	ldi	r24, 0x55	; 85
    3dc6:	93 e0       	ldi	r25, 0x03	; 3
    3dc8:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _phOffset = "";
    3dcc:	6d e3       	ldi	r22, 0x3D	; 61
    3dce:	71 e0       	ldi	r23, 0x01	; 1
    3dd0:	8b e5       	ldi	r24, 0x5B	; 91
    3dd2:	93 e0       	ldi	r25, 0x03	; 3
    3dd4:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
static String _tdsOffset = "";
    3dd8:	6d e3       	ldi	r22, 0x3D	; 61
    3dda:	71 e0       	ldi	r23, 0x01	; 1
    3ddc:	81 e6       	ldi	r24, 0x61	; 97
    3dde:	93 e0       	ldi	r25, 0x03	; 3
    3de0:	0e 94 18 29 	call	0x5230	; 0x5230 <_ZN6StringC1EPKc>
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	89 2b       	or	r24, r25
    3dea:	a1 f5       	brne	.+104    	; 0x3e54 <_Z41__static_initialization_and_destruction_0ii+0x128>
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	81 f5       	brne	.+96     	; 0x3e54 <_Z41__static_initialization_and_destruction_0ii+0x128>
    3df4:	81 e6       	ldi	r24, 0x61	; 97
    3df6:	93 e0       	ldi	r25, 0x03	; 3
    3df8:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
static String _phOffset = "";
    3dfc:	8b e5       	ldi	r24, 0x5B	; 91
    3dfe:	93 e0       	ldi	r25, 0x03	; 3
    3e00:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
static String _reading = "";
    3e04:	85 e5       	ldi	r24, 0x55	; 85
    3e06:	93 e0       	ldi	r25, 0x03	; 3
    3e08:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
static String _sensorReadDur = "";
    3e0c:	8f e4       	ldi	r24, 0x4F	; 79
    3e0e:	93 e0       	ldi	r25, 0x03	; 3
    3e10:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
//static String _tdsAvg = "";
static String _sensorReadInter = "";
    3e14:	89 e4       	ldi	r24, 0x49	; 73
    3e16:	93 e0       	ldi	r25, 0x03	; 3
    3e18:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
//static String _phAvg = "";
static String _tds = "";
    3e1c:	83 e4       	ldi	r24, 0x43	; 67
    3e1e:	93 e0       	ldi	r25, 0x03	; 3
    3e20:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
//static long _lastReqReceived = 0;
static String _ph = "";
    3e24:	8d e3       	ldi	r24, 0x3D	; 61
    3e26:	93 e0       	ldi	r25, 0x03	; 3
    3e28:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
static String _response = "";
    3e2c:	87 e3       	ldi	r24, 0x37	; 55
    3e2e:	93 e0       	ldi	r25, 0x03	; 3
    3e30:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    3e34:	81 e3       	ldi	r24, 0x31	; 49
    3e36:	93 e0       	ldi	r25, 0x03	; 3
    3e38:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    3e3c:	8b e2       	ldi	r24, 0x2B	; 43
    3e3e:	93 e0       	ldi	r25, 0x03	; 3
    3e40:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    3e44:	85 e2       	ldi	r24, 0x25	; 37
    3e46:	93 e0       	ldi	r25, 0x03	; 3
    3e48:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    3e4c:	8f e1       	ldi	r24, 0x1F	; 31
    3e4e:	93 e0       	ldi	r25, 0x03	; 3
    3e50:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    3e54:	24 96       	adiw	r28, 0x04	; 4
    3e56:	e2 e0       	ldi	r30, 0x02	; 2
    3e58:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003e5c <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    3e5c:	a0 e0       	ldi	r26, 0x00	; 0
    3e5e:	b0 e0       	ldi	r27, 0x00	; 0
    3e60:	e4 e3       	ldi	r30, 0x34	; 52
    3e62:	ff e1       	ldi	r31, 0x1F	; 31
    3e64:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3e68:	6f ef       	ldi	r22, 0xFF	; 255
    3e6a:	7f ef       	ldi	r23, 0xFF	; 255
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	5d df       	rcall	.-326    	; 0x3d2c <_Z41__static_initialization_and_destruction_0ii>
    3e72:	e2 e0       	ldi	r30, 0x02	; 2
    3e74:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003e78 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    3e78:	a0 e0       	ldi	r26, 0x00	; 0
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	e2 e4       	ldi	r30, 0x42	; 66
    3e7e:	ff e1       	ldi	r31, 0x1F	; 31
    3e80:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3e84:	6f ef       	ldi	r22, 0xFF	; 255
    3e86:	7f ef       	ldi	r23, 0xFF	; 255
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	4f df       	rcall	.-354    	; 0x3d2c <_Z41__static_initialization_and_destruction_0ii>
    3e8e:	e2 e0       	ldi	r30, 0x02	; 2
    3e90:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003e94 <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    3e94:	a2 e0       	ldi	r26, 0x02	; 2
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	e0 e5       	ldi	r30, 0x50	; 80
    3e9a:	ff e1       	ldi	r31, 0x1F	; 31
    3e9c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3ea0:	9a 83       	std	Y+2, r25	; 0x02
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	c2 96       	adiw	r24, 0x32	; 50
    3eaa:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3eae:	22 96       	adiw	r28, 0x02	; 2
    3eb0:	e2 e0       	ldi	r30, 0x02	; 2
    3eb2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003eb6 <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    3eb6:	a2 e0       	ldi	r26, 0x02	; 2
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	e1 e6       	ldi	r30, 0x61	; 97
    3ebc:	ff e1       	ldi	r31, 0x1F	; 31
    3ebe:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3ec2:	9a 83       	std	Y+2, r25	; 0x02
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eca:	c0 96       	adiw	r24, 0x30	; 48
    3ecc:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN6StringD1Ev>
    3ed0:	22 96       	adiw	r28, 0x02	; 2
    3ed2:	e2 e0       	ldi	r30, 0x02	; 2
    3ed4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003ed8 <_Z41__static_initialization_and_destruction_0ii>:

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);



}
    3ed8:	ac e4       	ldi	r26, 0x4C	; 76
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	e2 e7       	ldi	r30, 0x72	; 114
    3ede:	ff e1       	ldi	r31, 0x1F	; 31
    3ee0:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>
    3ee4:	9e 01       	movw	r18, r28
    3ee6:	27 5b       	subi	r18, 0xB7	; 183
    3ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eea:	f9 01       	movw	r30, r18
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	85 5b       	subi	r24, 0xB5	; 181
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	71 83       	std	Z+1, r23	; 0x01
    3efa:	60 83       	st	Z, r22
    3efc:	ce 01       	movw	r24, r28
    3efe:	87 5b       	subi	r24, 0xB7	; 183
    3f00:	9f 4f       	sbci	r25, 0xFF	; 255
    3f02:	fc 01       	movw	r30, r24
    3f04:	80 81       	ld	r24, Z
    3f06:	91 81       	ldd	r25, Z+1	; 0x01
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	09 f0       	breq	.+2      	; 0x3f0e <_Z41__static_initialization_and_destruction_0ii+0x36>
    3f0c:	44 c0       	rjmp	.+136    	; 0x3f96 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    3f0e:	ce 01       	movw	r24, r28
    3f10:	85 5b       	subi	r24, 0xB5	; 181
    3f12:	9f 4f       	sbci	r25, 0xFF	; 255
    3f14:	fc 01       	movw	r30, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	e1 f5       	brne	.+120    	; 0x3f96 <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    3f1e:	8c e6       	ldi	r24, 0x6C	; 108
    3f20:	93 e0       	ldi	r25, 0x03	; 3
    3f22:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    3f26:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN7Globals11_phRelayPinE>
    3f2a:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN7Globals11_phRelayPinE+0x1>
    3f2e:	2c e6       	ldi	r18, 0x6C	; 108
    3f30:	33 e0       	ldi	r19, 0x03	; 3
    3f32:	ce 01       	movw	r24, r28
    3f34:	85 96       	adiw	r24, 0x25	; 37
    3f36:	b9 01       	movw	r22, r18
    3f38:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN7LCDBaseC1ERKS_>
    3f3c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZN7Globals12_phSensorPinE>
    3f40:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZN7Globals12_phSensorPinE+0x1>
    3f44:	9e 01       	movw	r18, r28
    3f46:	2b 5d       	subi	r18, 0xDB	; 219
    3f48:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4a:	78 01       	movw	r14, r16
    3f4c:	89 01       	movw	r16, r18
    3f4e:	21 e0       	ldi	r18, 0x01	; 1
    3f50:	40 ed       	ldi	r20, 0xD0	; 208
    3f52:	57 e0       	ldi	r21, 0x07	; 7
    3f54:	bc 01       	movw	r22, r24
    3f56:	80 e9       	ldi	r24, 0x90	; 144
    3f58:	93 e0       	ldi	r25, 0x03	; 3
    3f5a:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    3f5e:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <_ZN7Globals12_tdsRelayPinE>
    3f62:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <_ZN7Globals12_tdsRelayPinE+0x1>
    3f66:	8c e6       	ldi	r24, 0x6C	; 108
    3f68:	93 e0       	ldi	r25, 0x03	; 3
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN7LCDBaseC1ERKS_>
    3f74:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZN7Globals13_tdsSensorPinE>
    3f78:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZN7Globals13_tdsSensorPinE+0x1>
    3f7c:	78 01       	movw	r14, r16
    3f7e:	9e 01       	movw	r18, r28
    3f80:	2f 5f       	subi	r18, 0xFF	; 255
    3f82:	3f 4f       	sbci	r19, 0xFF	; 255
    3f84:	89 01       	movw	r16, r18
    3f86:	21 e0       	ldi	r18, 0x01	; 1
    3f88:	48 ee       	ldi	r20, 0xE8	; 232
    3f8a:	53 e0       	ldi	r21, 0x03	; 3
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	8c ec       	ldi	r24, 0xCC	; 204
    3f90:	93 e0       	ldi	r25, 0x03	; 3
    3f92:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN9TDSSensorC1Eiib7LCDBasei>
    3f96:	ce 01       	movw	r24, r28
    3f98:	87 5b       	subi	r24, 0xB7	; 183
    3f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	80 81       	ld	r24, Z
    3fa0:	91 81       	ldd	r25, Z+1	; 0x01
    3fa2:	89 2b       	or	r24, r25
    3fa4:	71 f4       	brne	.+28     	; 0x3fc2 <_Z41__static_initialization_and_destruction_0ii+0xea>
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	85 5b       	subi	r24, 0xB5	; 181
    3faa:	9f 4f       	sbci	r25, 0xFF	; 255
    3fac:	fc 01       	movw	r30, r24
    3fae:	80 81       	ld	r24, Z
    3fb0:	91 81       	ldd	r25, Z+1	; 0x01
    3fb2:	01 96       	adiw	r24, 0x01	; 1
    3fb4:	31 f4       	brne	.+12     	; 0x3fc2 <_Z41__static_initialization_and_destruction_0ii+0xea>
    3fb6:	8c ec       	ldi	r24, 0xCC	; 204
    3fb8:	93 e0       	ldi	r25, 0x03	; 3
    3fba:	7d df       	rcall	.-262    	; 0x3eb6 <_ZN9TDSSensorD1Ev>
    bool ReadingTDS = false;
    long SensorReadInterval = 600000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    3fbc:	80 e9       	ldi	r24, 0x90	; 144
    3fbe:	93 e0       	ldi	r25, 0x03	; 3
    3fc0:	69 df       	rcall	.-302    	; 0x3e94 <_ZN8PHSensorD1Ev>

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);



}
    3fc2:	c4 5b       	subi	r28, 0xB4	; 180
    3fc4:	df 4f       	sbci	r29, 0xFF	; 255
    3fc6:	e6 e0       	ldi	r30, 0x06	; 6
    3fc8:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

00003fcc <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    3fcc:	a0 e0       	ldi	r26, 0x00	; 0
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	ec ee       	ldi	r30, 0xEC	; 236
    3fd2:	ff e1       	ldi	r31, 0x1F	; 31
    3fd4:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3fd8:	6f ef       	ldi	r22, 0xFF	; 255
    3fda:	7f ef       	ldi	r23, 0xFF	; 255
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	7b df       	rcall	.-266    	; 0x3ed8 <_Z41__static_initialization_and_destruction_0ii>
    3fe2:	e2 e0       	ldi	r30, 0x02	; 2
    3fe4:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00003fe8 <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    3fe8:	a0 e0       	ldi	r26, 0x00	; 0
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	ea ef       	ldi	r30, 0xFA	; 250
    3fee:	ff e1       	ldi	r31, 0x1F	; 31
    3ff0:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    3ff4:	6f ef       	ldi	r22, 0xFF	; 255
    3ff6:	7f ef       	ldi	r23, 0xFF	; 255
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	6d df       	rcall	.-294    	; 0x3ed8 <_Z41__static_initialization_and_destruction_0ii>
    3ffe:	e2 e0       	ldi	r30, 0x02	; 2
    4000:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004004 <_ZN6Sketch5SetupEv>:

namespace Sketch {

    void(* resetFunc) (void) = 0;//declare reset function at address 0

    void Setup() {
    4004:	a0 e0       	ldi	r26, 0x00	; 0
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	e8 e0       	ldi	r30, 0x08	; 8
    400a:	f0 e2       	ldi	r31, 0x20	; 32
    400c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    4010:	89 e0       	ldi	r24, 0x09	; 9
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	88 70       	andi	r24, 0x08	; 8
    4016:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    4018:	89 2b       	or	r24, r25
    401a:	11 f0       	breq	.+4      	; 0x4020 <_ZN6Sketch5SetupEv+0x1c>
    401c:	88 e2       	ldi	r24, 0x28	; 40
    401e:	01 c0       	rjmp	.+2      	; 0x4022 <_ZN6Sketch5SetupEv+0x1e>
    4020:	88 e0       	ldi	r24, 0x08	; 8
    4022:	99 e0       	ldi	r25, 0x09	; 9
    4024:	97 70       	andi	r25, 0x07	; 7
    4026:	89 2b       	or	r24, r25
    4028:	98 2f       	mov	r25, r24
    402a:	88 e1       	ldi	r24, 0x18	; 24
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	a8 95       	wdr
    4032:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

        wdt_enable(WDTO_8S);

        ThePHSensor.TurnOn();
    403c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4040:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    4044:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <_ZN8PHSensor6TurnOnEv>
        WaterSensorWire::Setup();
    4048:	c8 da       	rcall	.-2672   	; 0x35da <_ZN15WaterSensorWire5SetupEv>
    }
    404a:	e2 e0       	ldi	r30, 0x02	; 2
    404c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004050 <_ZN6Sketch4LoopEv>:

    void Loop() {
    4050:	a0 e0       	ldi	r26, 0x00	; 0
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	ee e2       	ldi	r30, 0x2E	; 46
    4056:	f0 e2       	ldi	r31, 0x20	; 32
    4058:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>

        ThePHSensor.PrintPHToLCD();
    405c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4060:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    4064:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8PHSensor12PrintPHToLCDEv>
        TheTDSSensor.PrintTDSToLCD();
    4068:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    406c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    4070:	6a d8       	rcall	.-3884   	; 0x3146 <_ZN9TDSSensor13PrintTDSToLCDEv>

        //CmdMessengerExt::Loop();

        if(millis() >= 44400000) { //reset every 6 hours. 21600000
    4072:	ee d6       	rcall	.+3548   	; 0x4e50 <millis>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	21 e0       	ldi	r18, 0x01	; 1
    407a:	80 38       	cpi	r24, 0x80	; 128
    407c:	9d 47       	sbci	r25, 0x7D	; 125
    407e:	a5 4a       	sbci	r26, 0xA5	; 165
    4080:	b2 40       	sbci	r27, 0x02	; 2
    4082:	08 f4       	brcc	.+2      	; 0x4086 <_ZN6Sketch4LoopEv+0x36>
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	22 23       	and	r18, r18
    4088:	59 f0       	breq	.+22     	; 0x40a0 <_ZN6Sketch4LoopEv+0x50>

            //Serial.print(F("Reseting Arduino: "));
            //Serial.println(millis());
            delay(100);
    408a:	64 e6       	ldi	r22, 0x64	; 100
    408c:	70 e0       	ldi	r23, 0x00	; 0
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0f d7       	rcall	.+3614   	; 0x4eb2 <delay>
            resetFunc(); //call reset
    4094:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZN6Sketch9resetFuncE>
    4098:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZN6Sketch9resetFuncE+0x1>
    409c:	fc 01       	movw	r30, r24
    409e:	09 95       	icall
        }
    }
    40a0:	e2 e0       	ldi	r30, 0x02	; 2
    40a2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000040a6 <_ZN6Sketch11AsyncDoWorkEv>:

    void AsyncDoWork() {
    40a6:	a0 e0       	ldi	r26, 0x00	; 0
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	e9 e5       	ldi	r30, 0x59	; 89
    40ac:	f0 e2       	ldi	r31, 0x20	; 32
    40ae:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__prologue_saves__+0x18>

        wdt_reset();
    40b2:	a8 95       	wdr

        //Serial.print(F("millis: "));
        //Serial.println(millis());

        static unsigned long lastSensorReadTime = millis();
    40b4:	86 e0       	ldi	r24, 0x06	; 6
    40b6:	94 e0       	ldi	r25, 0x04	; 4
    40b8:	fc 01       	movw	r30, r24
    40ba:	80 81       	ld	r24, Z
    40bc:	88 23       	and	r24, r24
    40be:	81 f4       	brne	.+32     	; 0x40e0 <_ZN6Sketch11AsyncDoWorkEv+0x3a>
    40c0:	c7 d6       	rcall	.+3470   	; 0x4e50 <millis>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    40ca:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    40ce:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    40d2:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
    40d6:	86 e0       	ldi	r24, 0x06	; 6
    40d8:	94 e0       	ldi	r25, 0x04	; 4
    40da:	21 e0       	ldi	r18, 0x01	; 1
    40dc:	fc 01       	movw	r30, r24
    40de:	20 83       	st	Z, r18

        if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    40e0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZN7Globals6TheLCDE>
    40e4:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_ZN7Globals6TheLCDE+0x1>
    40e8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN7LCDBase14DetectKeyPressEv>
    40ec:	98 2f       	mov	r25, r24
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	94 30       	cpi	r25, 0x04	; 4
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <_ZN6Sketch11AsyncDoWorkEv+0x50>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	88 23       	and	r24, r24
    40f8:	91 f0       	breq	.+36     	; 0x411e <_ZN6Sketch11AsyncDoWorkEv+0x78>
            Serial.println(F("[Selelct] Pressed"));
    40fa:	87 ee       	ldi	r24, 0xE7	; 231
    40fc:	93 e0       	ldi	r25, 0x03	; 3
    40fe:	bc 01       	movw	r22, r24
    4100:	80 ec       	ldi	r24, 0xC0	; 192
    4102:	94 e0       	ldi	r25, 0x04	; 4
    4104:	6c d5       	rcall	.+2776   	; 0x4bde <_ZN5Print7printlnEPK19__FlashStringHelper>
            SwitchSensors();
    4106:	5b d0       	rcall	.+182    	; 0x41be <_ZN6Sketch13SwitchSensorsEv>
            lastSensorReadTime = millis();
    4108:	a3 d6       	rcall	.+3398   	; 0x4e50 <millis>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    4112:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    4116:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    411a:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
        }
        SensorReadDuration = millis() - lastSensorReadTime;
    411e:	98 d6       	rcall	.+3376   	; 0x4e50 <millis>
    4120:	9b 01       	movw	r18, r22
    4122:	ac 01       	movw	r20, r24
    4124:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    4128:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    412c:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    4130:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
    4134:	79 01       	movw	r14, r18
    4136:	8a 01       	movw	r16, r20
    4138:	e8 1a       	sub	r14, r24
    413a:	f9 0a       	sbc	r15, r25
    413c:	0a 0b       	sbc	r16, r26
    413e:	1b 0b       	sbc	r17, r27
    4140:	d8 01       	movw	r26, r16
    4142:	c7 01       	movw	r24, r14
    4144:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    4148:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    414c:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    4150:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
        WaterSensorWire::Loop();
    4154:	6a da       	rcall	.-2860   	; 0x362a <_ZN15WaterSensorWire4LoopEv>
        if(SensorReadDuration > SensorReadInterval) {
    4156:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_ZN7Globals18SensorReadDurationE>
    415a:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <_ZN7Globals18SensorReadDurationE+0x1>
    415e:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <_ZN7Globals18SensorReadDurationE+0x2>
    4162:	50 91 6b 03 	lds	r21, 0x036B	; 0x80036b <_ZN7Globals18SensorReadDurationE+0x3>
    4166:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals18SensorReadIntervalE>
    416a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals18SensorReadIntervalE+0x1>
    416e:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZN7Globals18SensorReadIntervalE+0x2>
    4172:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZN7Globals18SensorReadIntervalE+0x3>
    4176:	82 17       	cp	r24, r18
    4178:	93 07       	cpc	r25, r19
    417a:	a4 07       	cpc	r26, r20
    417c:	b5 07       	cpc	r27, r21
    417e:	64 f4       	brge	.+24     	; 0x4198 <_ZN6Sketch11AsyncDoWorkEv+0xf2>

            SwitchSensors();
    4180:	1e d0       	rcall	.+60     	; 0x41be <_ZN6Sketch13SwitchSensorsEv>
            lastSensorReadTime = millis();
    4182:	66 d6       	rcall	.+3276   	; 0x4e50 <millis>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime>
    418c:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x1>
    4190:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x2>
    4194:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <_ZZN6Sketch11AsyncDoWorkEvE18lastSensorReadTime+0x3>
        }
        if(ReadingTDS) {
    4198:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    419c:	88 23       	and	r24, r24
    419e:	31 f0       	breq	.+12     	; 0x41ac <_ZN6Sketch11AsyncDoWorkEv+0x106>
            TheTDSSensor.CalculateTDS();
    41a0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    41a4:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    41a8:	89 d8       	rcall	.-3822   	; 0x32bc <_ZN9TDSSensor12CalculateTDSEv>
    41aa:	06 c0       	rjmp	.+12     	; 0x41b8 <_ZN6Sketch11AsyncDoWorkEv+0x112>
        }
        else {
            ThePHSensor.CalculatePH();
    41ac:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    41b0:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    41b4:	0e 94 b9 14 	call	0x2972	; 0x2972 <_ZN8PHSensor11CalculatePHEv>
        }

        //WaterSensorWire::Scan();
        //WaterSensorWire::I2C_ClearBus();
    }
    41b8:	e6 e0       	ldi	r30, 0x06	; 6
    41ba:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__epilogue_restores__+0x18>

000041be <_ZN6Sketch13SwitchSensorsEv>:

    void SwitchSensors() {
    41be:	a0 e0       	ldi	r26, 0x00	; 0
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	e5 ee       	ldi	r30, 0xE5	; 229
    41c4:	f0 e2       	ldi	r31, 0x20	; 32
    41c6:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    41ca:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	89 27       	eor	r24, r25
    41d2:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    41d6:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7Globals10ReadingTDSE>
    41da:	88 23       	and	r24, r24
    41dc:	61 f0       	breq	.+24     	; 0x41f6 <_ZN6Sketch13SwitchSensorsEv+0x38>
            ThePHSensor.TurnOff();
    41de:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    41e2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    41e6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    41ea:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    41ee:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    41f2:	6a d9       	rcall	.-3372   	; 0x34c8 <_ZN9TDSSensor6TurnOnEv>
    41f4:	0b c0       	rjmp	.+22     	; 0x420c <_ZN6Sketch13SwitchSensorsEv+0x4e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    41f6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_ZN7Globals12TheTDSSensorE>
    41fa:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_ZN7Globals12TheTDSSensorE+0x1>
    41fe:	7d d9       	rcall	.-3334   	; 0x34fa <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    4200:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZN7Globals11ThePHSensorE>
    4204:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN7Globals11ThePHSensorE+0x1>
    4208:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <_ZN8PHSensor6TurnOnEv>
        }
    }
    420c:	e2 e0       	ldi	r30, 0x02	; 2
    420e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004212 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4212:	a6 e0       	ldi	r26, 0x06	; 6
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	ef e0       	ldi	r30, 0x0F	; 15
    4218:	f1 e2       	ldi	r31, 0x21	; 33
    421a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    421e:	9a 83       	std	Y+2, r25	; 0x02
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	4b 83       	std	Y+3, r20	; 0x03
    4224:	5c 83       	std	Y+4, r21	; 0x04
    4226:	6d 83       	std	Y+5, r22	; 0x05
    4228:	7e 83       	std	Y+6, r23	; 0x06
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	ad 81       	ldd	r26, Y+5	; 0x05
    4230:	be 81       	ldd	r27, Y+6	; 0x06
    4232:	e9 81       	ldd	r30, Y+1	; 0x01
    4234:	fa 81       	ldd	r31, Y+2	; 0x02
    4236:	26 e0       	ldi	r18, 0x06	; 6
    4238:	ac 01       	movw	r20, r24
    423a:	bd 01       	movw	r22, r26
    423c:	cf 01       	movw	r24, r30
    423e:	58 d3       	rcall	.+1712   	; 0x48f0 <_ZN14HardwareSerial5beginEmh>
    4240:	26 96       	adiw	r28, 0x06	; 6
    4242:	e2 e0       	ldi	r30, 0x02	; 2
    4244:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004248 <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    4248:	a2 e0       	ldi	r26, 0x02	; 2
    424a:	b0 e0       	ldi	r27, 0x00	; 0
    424c:	ea e2       	ldi	r30, 0x2A	; 42
    424e:	f1 e2       	ldi	r31, 0x21	; 33
    4250:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	22 96       	adiw	r28, 0x02	; 2
    425c:	e2 e0       	ldi	r30, 0x02	; 2
    425e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004262 <setup>:
using namespace Sketch;

SimpleTimer _asyncTimer;


void setup(void) {
    4262:	a2 e0       	ldi	r26, 0x02	; 2
    4264:	b0 e0       	ldi	r27, 0x00	; 0
    4266:	e7 e3       	ldi	r30, 0x37	; 55
    4268:	f1 e2       	ldi	r31, 0x21	; 33
    426a:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	51 ee       	ldi	r21, 0xE1	; 225
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	80 ec       	ldi	r24, 0xC0	; 192
    4278:	94 e0       	ldi	r25, 0x04	; 4
    427a:	cb df       	rcall	.-106    	; 0x4212 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    427c:	00 00       	nop
    427e:	80 ec       	ldi	r24, 0xC0	; 192
    4280:	94 e0       	ldi	r25, 0x04	; 4
    4282:	e2 df       	rcall	.-60     	; 0x4248 <_ZN14HardwareSerialcvbEv>
    4284:	98 2f       	mov	r25, r24
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	89 27       	eor	r24, r25
    428a:	88 23       	and	r24, r24
    428c:	c1 f7       	brne	.-16     	; 0x427e <setup+0x1c>

    Sketch::Setup();
    428e:	ba de       	rcall	.-652    	; 0x4004 <_ZN6Sketch5SetupEv>

    int interval = 1000;
    4290:	88 ee       	ldi	r24, 0xE8	; 232
    4292:	93 e0       	ldi	r25, 0x03	; 3
    4294:	9a 83       	std	Y+2, r25	; 0x02
    4296:	89 83       	std	Y+1, r24	; 0x01
#if DEBUG
    interval = 1;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	9a 83       	std	Y+2, r25	; 0x02
    429e:	89 83       	std	Y+1, r24	; 0x01
#endif

    _asyncTimer.setInterval(interval, Sketch::AsyncDoWork);
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	09 2e       	mov	r0, r25
    42a6:	00 0c       	add	r0, r0
    42a8:	aa 0b       	sbc	r26, r26
    42aa:	bb 0b       	sbc	r27, r27
    42ac:	23 e5       	ldi	r18, 0x53	; 83
    42ae:	30 e2       	ldi	r19, 0x20	; 32
    42b0:	ac 01       	movw	r20, r24
    42b2:	bd 01       	movw	r22, r26
    42b4:	82 e1       	ldi	r24, 0x12	; 18
    42b6:	94 e0       	ldi	r25, 0x04	; 4
    42b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    42bc:	22 96       	adiw	r28, 0x02	; 2
    42be:	e2 e0       	ldi	r30, 0x02	; 2
    42c0:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000042c4 <loop>:

//String _request;
//String _response;
void loop(void) {
    42c4:	a0 e0       	ldi	r26, 0x00	; 0
    42c6:	b0 e0       	ldi	r27, 0x00	; 0
    42c8:	e8 e6       	ldi	r30, 0x68	; 104
    42ca:	f1 e2       	ldi	r31, 0x21	; 33
    42cc:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>

    _asyncTimer.run();
    42d0:	82 e1       	ldi	r24, 0x12	; 18
    42d2:	94 e0       	ldi	r25, 0x04	; 4
    42d4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN11SimpleTimer3runEv>

    Sketch::Loop();
    42d8:	bb de       	rcall	.-650    	; 0x4050 <_ZN6Sketch4LoopEv>

}
    42da:	e2 e0       	ldi	r30, 0x02	; 2
    42dc:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

000042e0 <_Z41__static_initialization_and_destruction_0ii>:
    42e0:	a4 e0       	ldi	r26, 0x04	; 4
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	e6 e7       	ldi	r30, 0x76	; 118
    42e6:	f1 e2       	ldi	r31, 0x21	; 33
    42e8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	7c 83       	std	Y+4, r23	; 0x04
    42f2:	6b 83       	std	Y+3, r22	; 0x03
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	41 f4       	brne	.+16     	; 0x430c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4300:	01 96       	adiw	r24, 0x01	; 1
    4302:	21 f4       	brne	.+8      	; 0x430c <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "_sketchExtWaterSensors.h"
////#include "CmdMessengerExt.h"
using namespace Sketch;

SimpleTimer _asyncTimer;
    4304:	82 e1       	ldi	r24, 0x12	; 18
    4306:	94 e0       	ldi	r25, 0x04	; 4
    4308:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN11SimpleTimerC1Ev>

    _asyncTimer.run();

    Sketch::Loop();

}
    430c:	24 96       	adiw	r28, 0x04	; 4
    430e:	e2 e0       	ldi	r30, 0x02	; 2
    4310:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004314 <_GLOBAL__sub_I__asyncTimer>:
    4314:	a0 e0       	ldi	r26, 0x00	; 0
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	e0 e9       	ldi	r30, 0x90	; 144
    431a:	f1 e2       	ldi	r31, 0x21	; 33
    431c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__prologue_saves__+0x20>
    4320:	6f ef       	ldi	r22, 0xFF	; 255
    4322:	7f ef       	ldi	r23, 0xFF	; 255
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	db df       	rcall	.-74     	; 0x42e0 <_Z41__static_initialization_and_destruction_0ii>
    432a:	e2 e0       	ldi	r30, 0x02	; 2
    432c:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__epilogue_restores__+0x20>

00004330 <__subsf3>:
    4330:	50 58       	subi	r21, 0x80	; 128

00004332 <__addsf3>:
    4332:	bb 27       	eor	r27, r27
    4334:	aa 27       	eor	r26, r26
    4336:	0e d0       	rcall	.+28     	; 0x4354 <__addsf3x>
    4338:	75 c1       	rjmp	.+746    	; 0x4624 <__fp_round>
    433a:	66 d1       	rcall	.+716    	; 0x4608 <__fp_pscA>
    433c:	30 f0       	brcs	.+12     	; 0x434a <__addsf3+0x18>
    433e:	6b d1       	rcall	.+726    	; 0x4616 <__fp_pscB>
    4340:	20 f0       	brcs	.+8      	; 0x434a <__addsf3+0x18>
    4342:	31 f4       	brne	.+12     	; 0x4350 <__addsf3+0x1e>
    4344:	9f 3f       	cpi	r25, 0xFF	; 255
    4346:	11 f4       	brne	.+4      	; 0x434c <__addsf3+0x1a>
    4348:	1e f4       	brtc	.+6      	; 0x4350 <__addsf3+0x1e>
    434a:	5b c1       	rjmp	.+694    	; 0x4602 <__fp_nan>
    434c:	0e f4       	brtc	.+2      	; 0x4350 <__addsf3+0x1e>
    434e:	e0 95       	com	r30
    4350:	e7 fb       	bst	r30, 7
    4352:	51 c1       	rjmp	.+674    	; 0x45f6 <__fp_inf>

00004354 <__addsf3x>:
    4354:	e9 2f       	mov	r30, r25
    4356:	77 d1       	rcall	.+750    	; 0x4646 <__fp_split3>
    4358:	80 f3       	brcs	.-32     	; 0x433a <__addsf3+0x8>
    435a:	ba 17       	cp	r27, r26
    435c:	62 07       	cpc	r22, r18
    435e:	73 07       	cpc	r23, r19
    4360:	84 07       	cpc	r24, r20
    4362:	95 07       	cpc	r25, r21
    4364:	18 f0       	brcs	.+6      	; 0x436c <__addsf3x+0x18>
    4366:	71 f4       	brne	.+28     	; 0x4384 <__addsf3x+0x30>
    4368:	9e f5       	brtc	.+102    	; 0x43d0 <__addsf3x+0x7c>
    436a:	8f c1       	rjmp	.+798    	; 0x468a <__fp_zero>
    436c:	0e f4       	brtc	.+2      	; 0x4370 <__addsf3x+0x1c>
    436e:	e0 95       	com	r30
    4370:	0b 2e       	mov	r0, r27
    4372:	ba 2f       	mov	r27, r26
    4374:	a0 2d       	mov	r26, r0
    4376:	0b 01       	movw	r0, r22
    4378:	b9 01       	movw	r22, r18
    437a:	90 01       	movw	r18, r0
    437c:	0c 01       	movw	r0, r24
    437e:	ca 01       	movw	r24, r20
    4380:	a0 01       	movw	r20, r0
    4382:	11 24       	eor	r1, r1
    4384:	ff 27       	eor	r31, r31
    4386:	59 1b       	sub	r21, r25
    4388:	99 f0       	breq	.+38     	; 0x43b0 <__addsf3x+0x5c>
    438a:	59 3f       	cpi	r21, 0xF9	; 249
    438c:	50 f4       	brcc	.+20     	; 0x43a2 <__addsf3x+0x4e>
    438e:	50 3e       	cpi	r21, 0xE0	; 224
    4390:	68 f1       	brcs	.+90     	; 0x43ec <__addsf3x+0x98>
    4392:	1a 16       	cp	r1, r26
    4394:	f0 40       	sbci	r31, 0x00	; 0
    4396:	a2 2f       	mov	r26, r18
    4398:	23 2f       	mov	r18, r19
    439a:	34 2f       	mov	r19, r20
    439c:	44 27       	eor	r20, r20
    439e:	58 5f       	subi	r21, 0xF8	; 248
    43a0:	f3 cf       	rjmp	.-26     	; 0x4388 <__addsf3x+0x34>
    43a2:	46 95       	lsr	r20
    43a4:	37 95       	ror	r19
    43a6:	27 95       	ror	r18
    43a8:	a7 95       	ror	r26
    43aa:	f0 40       	sbci	r31, 0x00	; 0
    43ac:	53 95       	inc	r21
    43ae:	c9 f7       	brne	.-14     	; 0x43a2 <__addsf3x+0x4e>
    43b0:	7e f4       	brtc	.+30     	; 0x43d0 <__addsf3x+0x7c>
    43b2:	1f 16       	cp	r1, r31
    43b4:	ba 0b       	sbc	r27, r26
    43b6:	62 0b       	sbc	r22, r18
    43b8:	73 0b       	sbc	r23, r19
    43ba:	84 0b       	sbc	r24, r20
    43bc:	ba f0       	brmi	.+46     	; 0x43ec <__addsf3x+0x98>
    43be:	91 50       	subi	r25, 0x01	; 1
    43c0:	a1 f0       	breq	.+40     	; 0x43ea <__addsf3x+0x96>
    43c2:	ff 0f       	add	r31, r31
    43c4:	bb 1f       	adc	r27, r27
    43c6:	66 1f       	adc	r22, r22
    43c8:	77 1f       	adc	r23, r23
    43ca:	88 1f       	adc	r24, r24
    43cc:	c2 f7       	brpl	.-16     	; 0x43be <__addsf3x+0x6a>
    43ce:	0e c0       	rjmp	.+28     	; 0x43ec <__addsf3x+0x98>
    43d0:	ba 0f       	add	r27, r26
    43d2:	62 1f       	adc	r22, r18
    43d4:	73 1f       	adc	r23, r19
    43d6:	84 1f       	adc	r24, r20
    43d8:	48 f4       	brcc	.+18     	; 0x43ec <__addsf3x+0x98>
    43da:	87 95       	ror	r24
    43dc:	77 95       	ror	r23
    43de:	67 95       	ror	r22
    43e0:	b7 95       	ror	r27
    43e2:	f7 95       	ror	r31
    43e4:	9e 3f       	cpi	r25, 0xFE	; 254
    43e6:	08 f0       	brcs	.+2      	; 0x43ea <__addsf3x+0x96>
    43e8:	b3 cf       	rjmp	.-154    	; 0x4350 <__addsf3+0x1e>
    43ea:	93 95       	inc	r25
    43ec:	88 0f       	add	r24, r24
    43ee:	08 f0       	brcs	.+2      	; 0x43f2 <__addsf3x+0x9e>
    43f0:	99 27       	eor	r25, r25
    43f2:	ee 0f       	add	r30, r30
    43f4:	97 95       	ror	r25
    43f6:	87 95       	ror	r24
    43f8:	08 95       	ret

000043fa <__cmpsf2>:
    43fa:	d9 d0       	rcall	.+434    	; 0x45ae <__fp_cmp>
    43fc:	08 f4       	brcc	.+2      	; 0x4400 <__cmpsf2+0x6>
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	08 95       	ret

00004402 <__divsf3>:
    4402:	0c d0       	rcall	.+24     	; 0x441c <__divsf3x>
    4404:	0f c1       	rjmp	.+542    	; 0x4624 <__fp_round>
    4406:	07 d1       	rcall	.+526    	; 0x4616 <__fp_pscB>
    4408:	40 f0       	brcs	.+16     	; 0x441a <__divsf3+0x18>
    440a:	fe d0       	rcall	.+508    	; 0x4608 <__fp_pscA>
    440c:	30 f0       	brcs	.+12     	; 0x441a <__divsf3+0x18>
    440e:	21 f4       	brne	.+8      	; 0x4418 <__divsf3+0x16>
    4410:	5f 3f       	cpi	r21, 0xFF	; 255
    4412:	19 f0       	breq	.+6      	; 0x441a <__divsf3+0x18>
    4414:	f0 c0       	rjmp	.+480    	; 0x45f6 <__fp_inf>
    4416:	51 11       	cpse	r21, r1
    4418:	39 c1       	rjmp	.+626    	; 0x468c <__fp_szero>
    441a:	f3 c0       	rjmp	.+486    	; 0x4602 <__fp_nan>

0000441c <__divsf3x>:
    441c:	14 d1       	rcall	.+552    	; 0x4646 <__fp_split3>
    441e:	98 f3       	brcs	.-26     	; 0x4406 <__divsf3+0x4>

00004420 <__divsf3_pse>:
    4420:	99 23       	and	r25, r25
    4422:	c9 f3       	breq	.-14     	; 0x4416 <__divsf3+0x14>
    4424:	55 23       	and	r21, r21
    4426:	b1 f3       	breq	.-20     	; 0x4414 <__divsf3+0x12>
    4428:	95 1b       	sub	r25, r21
    442a:	55 0b       	sbc	r21, r21
    442c:	bb 27       	eor	r27, r27
    442e:	aa 27       	eor	r26, r26
    4430:	62 17       	cp	r22, r18
    4432:	73 07       	cpc	r23, r19
    4434:	84 07       	cpc	r24, r20
    4436:	38 f0       	brcs	.+14     	; 0x4446 <__divsf3_pse+0x26>
    4438:	9f 5f       	subi	r25, 0xFF	; 255
    443a:	5f 4f       	sbci	r21, 0xFF	; 255
    443c:	22 0f       	add	r18, r18
    443e:	33 1f       	adc	r19, r19
    4440:	44 1f       	adc	r20, r20
    4442:	aa 1f       	adc	r26, r26
    4444:	a9 f3       	breq	.-22     	; 0x4430 <__divsf3_pse+0x10>
    4446:	33 d0       	rcall	.+102    	; 0x44ae <__divsf3_pse+0x8e>
    4448:	0e 2e       	mov	r0, r30
    444a:	3a f0       	brmi	.+14     	; 0x445a <__divsf3_pse+0x3a>
    444c:	e0 e8       	ldi	r30, 0x80	; 128
    444e:	30 d0       	rcall	.+96     	; 0x44b0 <__divsf3_pse+0x90>
    4450:	91 50       	subi	r25, 0x01	; 1
    4452:	50 40       	sbci	r21, 0x00	; 0
    4454:	e6 95       	lsr	r30
    4456:	00 1c       	adc	r0, r0
    4458:	ca f7       	brpl	.-14     	; 0x444c <__divsf3_pse+0x2c>
    445a:	29 d0       	rcall	.+82     	; 0x44ae <__divsf3_pse+0x8e>
    445c:	fe 2f       	mov	r31, r30
    445e:	27 d0       	rcall	.+78     	; 0x44ae <__divsf3_pse+0x8e>
    4460:	66 0f       	add	r22, r22
    4462:	77 1f       	adc	r23, r23
    4464:	88 1f       	adc	r24, r24
    4466:	bb 1f       	adc	r27, r27
    4468:	26 17       	cp	r18, r22
    446a:	37 07       	cpc	r19, r23
    446c:	48 07       	cpc	r20, r24
    446e:	ab 07       	cpc	r26, r27
    4470:	b0 e8       	ldi	r27, 0x80	; 128
    4472:	09 f0       	breq	.+2      	; 0x4476 <__divsf3_pse+0x56>
    4474:	bb 0b       	sbc	r27, r27
    4476:	80 2d       	mov	r24, r0
    4478:	bf 01       	movw	r22, r30
    447a:	ff 27       	eor	r31, r31
    447c:	93 58       	subi	r25, 0x83	; 131
    447e:	5f 4f       	sbci	r21, 0xFF	; 255
    4480:	2a f0       	brmi	.+10     	; 0x448c <__divsf3_pse+0x6c>
    4482:	9e 3f       	cpi	r25, 0xFE	; 254
    4484:	51 05       	cpc	r21, r1
    4486:	68 f0       	brcs	.+26     	; 0x44a2 <__divsf3_pse+0x82>
    4488:	b6 c0       	rjmp	.+364    	; 0x45f6 <__fp_inf>
    448a:	00 c1       	rjmp	.+512    	; 0x468c <__fp_szero>
    448c:	5f 3f       	cpi	r21, 0xFF	; 255
    448e:	ec f3       	brlt	.-6      	; 0x448a <__divsf3_pse+0x6a>
    4490:	98 3e       	cpi	r25, 0xE8	; 232
    4492:	dc f3       	brlt	.-10     	; 0x448a <__divsf3_pse+0x6a>
    4494:	86 95       	lsr	r24
    4496:	77 95       	ror	r23
    4498:	67 95       	ror	r22
    449a:	b7 95       	ror	r27
    449c:	f7 95       	ror	r31
    449e:	9f 5f       	subi	r25, 0xFF	; 255
    44a0:	c9 f7       	brne	.-14     	; 0x4494 <__divsf3_pse+0x74>
    44a2:	88 0f       	add	r24, r24
    44a4:	91 1d       	adc	r25, r1
    44a6:	96 95       	lsr	r25
    44a8:	87 95       	ror	r24
    44aa:	97 f9       	bld	r25, 7
    44ac:	08 95       	ret
    44ae:	e1 e0       	ldi	r30, 0x01	; 1
    44b0:	66 0f       	add	r22, r22
    44b2:	77 1f       	adc	r23, r23
    44b4:	88 1f       	adc	r24, r24
    44b6:	bb 1f       	adc	r27, r27
    44b8:	62 17       	cp	r22, r18
    44ba:	73 07       	cpc	r23, r19
    44bc:	84 07       	cpc	r24, r20
    44be:	ba 07       	cpc	r27, r26
    44c0:	20 f0       	brcs	.+8      	; 0x44ca <__divsf3_pse+0xaa>
    44c2:	62 1b       	sub	r22, r18
    44c4:	73 0b       	sbc	r23, r19
    44c6:	84 0b       	sbc	r24, r20
    44c8:	ba 0b       	sbc	r27, r26
    44ca:	ee 1f       	adc	r30, r30
    44cc:	88 f7       	brcc	.-30     	; 0x44b0 <__divsf3_pse+0x90>
    44ce:	e0 95       	com	r30
    44d0:	08 95       	ret

000044d2 <__fixsfsi>:
    44d2:	04 d0       	rcall	.+8      	; 0x44dc <__fixunssfsi>
    44d4:	68 94       	set
    44d6:	b1 11       	cpse	r27, r1
    44d8:	d9 c0       	rjmp	.+434    	; 0x468c <__fp_szero>
    44da:	08 95       	ret

000044dc <__fixunssfsi>:
    44dc:	bc d0       	rcall	.+376    	; 0x4656 <__fp_splitA>
    44de:	88 f0       	brcs	.+34     	; 0x4502 <__fixunssfsi+0x26>
    44e0:	9f 57       	subi	r25, 0x7F	; 127
    44e2:	90 f0       	brcs	.+36     	; 0x4508 <__fixunssfsi+0x2c>
    44e4:	b9 2f       	mov	r27, r25
    44e6:	99 27       	eor	r25, r25
    44e8:	b7 51       	subi	r27, 0x17	; 23
    44ea:	a0 f0       	brcs	.+40     	; 0x4514 <__fixunssfsi+0x38>
    44ec:	d1 f0       	breq	.+52     	; 0x4522 <__fixunssfsi+0x46>
    44ee:	66 0f       	add	r22, r22
    44f0:	77 1f       	adc	r23, r23
    44f2:	88 1f       	adc	r24, r24
    44f4:	99 1f       	adc	r25, r25
    44f6:	1a f0       	brmi	.+6      	; 0x44fe <__fixunssfsi+0x22>
    44f8:	ba 95       	dec	r27
    44fa:	c9 f7       	brne	.-14     	; 0x44ee <__fixunssfsi+0x12>
    44fc:	12 c0       	rjmp	.+36     	; 0x4522 <__fixunssfsi+0x46>
    44fe:	b1 30       	cpi	r27, 0x01	; 1
    4500:	81 f0       	breq	.+32     	; 0x4522 <__fixunssfsi+0x46>
    4502:	c3 d0       	rcall	.+390    	; 0x468a <__fp_zero>
    4504:	b1 e0       	ldi	r27, 0x01	; 1
    4506:	08 95       	ret
    4508:	c0 c0       	rjmp	.+384    	; 0x468a <__fp_zero>
    450a:	67 2f       	mov	r22, r23
    450c:	78 2f       	mov	r23, r24
    450e:	88 27       	eor	r24, r24
    4510:	b8 5f       	subi	r27, 0xF8	; 248
    4512:	39 f0       	breq	.+14     	; 0x4522 <__fixunssfsi+0x46>
    4514:	b9 3f       	cpi	r27, 0xF9	; 249
    4516:	cc f3       	brlt	.-14     	; 0x450a <__fixunssfsi+0x2e>
    4518:	86 95       	lsr	r24
    451a:	77 95       	ror	r23
    451c:	67 95       	ror	r22
    451e:	b3 95       	inc	r27
    4520:	d9 f7       	brne	.-10     	; 0x4518 <__fixunssfsi+0x3c>
    4522:	3e f4       	brtc	.+14     	; 0x4532 <__fixunssfsi+0x56>
    4524:	90 95       	com	r25
    4526:	80 95       	com	r24
    4528:	70 95       	com	r23
    452a:	61 95       	neg	r22
    452c:	7f 4f       	sbci	r23, 0xFF	; 255
    452e:	8f 4f       	sbci	r24, 0xFF	; 255
    4530:	9f 4f       	sbci	r25, 0xFF	; 255
    4532:	08 95       	ret

00004534 <__floatunsisf>:
    4534:	e8 94       	clt
    4536:	09 c0       	rjmp	.+18     	; 0x454a <__floatsisf+0x12>

00004538 <__floatsisf>:
    4538:	97 fb       	bst	r25, 7
    453a:	3e f4       	brtc	.+14     	; 0x454a <__floatsisf+0x12>
    453c:	90 95       	com	r25
    453e:	80 95       	com	r24
    4540:	70 95       	com	r23
    4542:	61 95       	neg	r22
    4544:	7f 4f       	sbci	r23, 0xFF	; 255
    4546:	8f 4f       	sbci	r24, 0xFF	; 255
    4548:	9f 4f       	sbci	r25, 0xFF	; 255
    454a:	99 23       	and	r25, r25
    454c:	a9 f0       	breq	.+42     	; 0x4578 <__floatsisf+0x40>
    454e:	f9 2f       	mov	r31, r25
    4550:	96 e9       	ldi	r25, 0x96	; 150
    4552:	bb 27       	eor	r27, r27
    4554:	93 95       	inc	r25
    4556:	f6 95       	lsr	r31
    4558:	87 95       	ror	r24
    455a:	77 95       	ror	r23
    455c:	67 95       	ror	r22
    455e:	b7 95       	ror	r27
    4560:	f1 11       	cpse	r31, r1
    4562:	f8 cf       	rjmp	.-16     	; 0x4554 <__floatsisf+0x1c>
    4564:	fa f4       	brpl	.+62     	; 0x45a4 <__floatsisf+0x6c>
    4566:	bb 0f       	add	r27, r27
    4568:	11 f4       	brne	.+4      	; 0x456e <__floatsisf+0x36>
    456a:	60 ff       	sbrs	r22, 0
    456c:	1b c0       	rjmp	.+54     	; 0x45a4 <__floatsisf+0x6c>
    456e:	6f 5f       	subi	r22, 0xFF	; 255
    4570:	7f 4f       	sbci	r23, 0xFF	; 255
    4572:	8f 4f       	sbci	r24, 0xFF	; 255
    4574:	9f 4f       	sbci	r25, 0xFF	; 255
    4576:	16 c0       	rjmp	.+44     	; 0x45a4 <__floatsisf+0x6c>
    4578:	88 23       	and	r24, r24
    457a:	11 f0       	breq	.+4      	; 0x4580 <__floatsisf+0x48>
    457c:	96 e9       	ldi	r25, 0x96	; 150
    457e:	11 c0       	rjmp	.+34     	; 0x45a2 <__floatsisf+0x6a>
    4580:	77 23       	and	r23, r23
    4582:	21 f0       	breq	.+8      	; 0x458c <__floatsisf+0x54>
    4584:	9e e8       	ldi	r25, 0x8E	; 142
    4586:	87 2f       	mov	r24, r23
    4588:	76 2f       	mov	r23, r22
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <__floatsisf+0x5e>
    458c:	66 23       	and	r22, r22
    458e:	71 f0       	breq	.+28     	; 0x45ac <__floatsisf+0x74>
    4590:	96 e8       	ldi	r25, 0x86	; 134
    4592:	86 2f       	mov	r24, r22
    4594:	70 e0       	ldi	r23, 0x00	; 0
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	2a f0       	brmi	.+10     	; 0x45a4 <__floatsisf+0x6c>
    459a:	9a 95       	dec	r25
    459c:	66 0f       	add	r22, r22
    459e:	77 1f       	adc	r23, r23
    45a0:	88 1f       	adc	r24, r24
    45a2:	da f7       	brpl	.-10     	; 0x459a <__floatsisf+0x62>
    45a4:	88 0f       	add	r24, r24
    45a6:	96 95       	lsr	r25
    45a8:	87 95       	ror	r24
    45aa:	97 f9       	bld	r25, 7
    45ac:	08 95       	ret

000045ae <__fp_cmp>:
    45ae:	99 0f       	add	r25, r25
    45b0:	00 08       	sbc	r0, r0
    45b2:	55 0f       	add	r21, r21
    45b4:	aa 0b       	sbc	r26, r26
    45b6:	e0 e8       	ldi	r30, 0x80	; 128
    45b8:	fe ef       	ldi	r31, 0xFE	; 254
    45ba:	16 16       	cp	r1, r22
    45bc:	17 06       	cpc	r1, r23
    45be:	e8 07       	cpc	r30, r24
    45c0:	f9 07       	cpc	r31, r25
    45c2:	c0 f0       	brcs	.+48     	; 0x45f4 <__fp_cmp+0x46>
    45c4:	12 16       	cp	r1, r18
    45c6:	13 06       	cpc	r1, r19
    45c8:	e4 07       	cpc	r30, r20
    45ca:	f5 07       	cpc	r31, r21
    45cc:	98 f0       	brcs	.+38     	; 0x45f4 <__fp_cmp+0x46>
    45ce:	62 1b       	sub	r22, r18
    45d0:	73 0b       	sbc	r23, r19
    45d2:	84 0b       	sbc	r24, r20
    45d4:	95 0b       	sbc	r25, r21
    45d6:	39 f4       	brne	.+14     	; 0x45e6 <__fp_cmp+0x38>
    45d8:	0a 26       	eor	r0, r26
    45da:	61 f0       	breq	.+24     	; 0x45f4 <__fp_cmp+0x46>
    45dc:	23 2b       	or	r18, r19
    45de:	24 2b       	or	r18, r20
    45e0:	25 2b       	or	r18, r21
    45e2:	21 f4       	brne	.+8      	; 0x45ec <__fp_cmp+0x3e>
    45e4:	08 95       	ret
    45e6:	0a 26       	eor	r0, r26
    45e8:	09 f4       	brne	.+2      	; 0x45ec <__fp_cmp+0x3e>
    45ea:	a1 40       	sbci	r26, 0x01	; 1
    45ec:	a6 95       	lsr	r26
    45ee:	8f ef       	ldi	r24, 0xFF	; 255
    45f0:	81 1d       	adc	r24, r1
    45f2:	81 1d       	adc	r24, r1
    45f4:	08 95       	ret

000045f6 <__fp_inf>:
    45f6:	97 f9       	bld	r25, 7
    45f8:	9f 67       	ori	r25, 0x7F	; 127
    45fa:	80 e8       	ldi	r24, 0x80	; 128
    45fc:	70 e0       	ldi	r23, 0x00	; 0
    45fe:	60 e0       	ldi	r22, 0x00	; 0
    4600:	08 95       	ret

00004602 <__fp_nan>:
    4602:	9f ef       	ldi	r25, 0xFF	; 255
    4604:	80 ec       	ldi	r24, 0xC0	; 192
    4606:	08 95       	ret

00004608 <__fp_pscA>:
    4608:	00 24       	eor	r0, r0
    460a:	0a 94       	dec	r0
    460c:	16 16       	cp	r1, r22
    460e:	17 06       	cpc	r1, r23
    4610:	18 06       	cpc	r1, r24
    4612:	09 06       	cpc	r0, r25
    4614:	08 95       	ret

00004616 <__fp_pscB>:
    4616:	00 24       	eor	r0, r0
    4618:	0a 94       	dec	r0
    461a:	12 16       	cp	r1, r18
    461c:	13 06       	cpc	r1, r19
    461e:	14 06       	cpc	r1, r20
    4620:	05 06       	cpc	r0, r21
    4622:	08 95       	ret

00004624 <__fp_round>:
    4624:	09 2e       	mov	r0, r25
    4626:	03 94       	inc	r0
    4628:	00 0c       	add	r0, r0
    462a:	11 f4       	brne	.+4      	; 0x4630 <__fp_round+0xc>
    462c:	88 23       	and	r24, r24
    462e:	52 f0       	brmi	.+20     	; 0x4644 <__fp_round+0x20>
    4630:	bb 0f       	add	r27, r27
    4632:	40 f4       	brcc	.+16     	; 0x4644 <__fp_round+0x20>
    4634:	bf 2b       	or	r27, r31
    4636:	11 f4       	brne	.+4      	; 0x463c <__fp_round+0x18>
    4638:	60 ff       	sbrs	r22, 0
    463a:	04 c0       	rjmp	.+8      	; 0x4644 <__fp_round+0x20>
    463c:	6f 5f       	subi	r22, 0xFF	; 255
    463e:	7f 4f       	sbci	r23, 0xFF	; 255
    4640:	8f 4f       	sbci	r24, 0xFF	; 255
    4642:	9f 4f       	sbci	r25, 0xFF	; 255
    4644:	08 95       	ret

00004646 <__fp_split3>:
    4646:	57 fd       	sbrc	r21, 7
    4648:	90 58       	subi	r25, 0x80	; 128
    464a:	44 0f       	add	r20, r20
    464c:	55 1f       	adc	r21, r21
    464e:	59 f0       	breq	.+22     	; 0x4666 <__fp_splitA+0x10>
    4650:	5f 3f       	cpi	r21, 0xFF	; 255
    4652:	71 f0       	breq	.+28     	; 0x4670 <__fp_splitA+0x1a>
    4654:	47 95       	ror	r20

00004656 <__fp_splitA>:
    4656:	88 0f       	add	r24, r24
    4658:	97 fb       	bst	r25, 7
    465a:	99 1f       	adc	r25, r25
    465c:	61 f0       	breq	.+24     	; 0x4676 <__fp_splitA+0x20>
    465e:	9f 3f       	cpi	r25, 0xFF	; 255
    4660:	79 f0       	breq	.+30     	; 0x4680 <__fp_splitA+0x2a>
    4662:	87 95       	ror	r24
    4664:	08 95       	ret
    4666:	12 16       	cp	r1, r18
    4668:	13 06       	cpc	r1, r19
    466a:	14 06       	cpc	r1, r20
    466c:	55 1f       	adc	r21, r21
    466e:	f2 cf       	rjmp	.-28     	; 0x4654 <__fp_split3+0xe>
    4670:	46 95       	lsr	r20
    4672:	f1 df       	rcall	.-30     	; 0x4656 <__fp_splitA>
    4674:	08 c0       	rjmp	.+16     	; 0x4686 <__fp_splitA+0x30>
    4676:	16 16       	cp	r1, r22
    4678:	17 06       	cpc	r1, r23
    467a:	18 06       	cpc	r1, r24
    467c:	99 1f       	adc	r25, r25
    467e:	f1 cf       	rjmp	.-30     	; 0x4662 <__fp_splitA+0xc>
    4680:	86 95       	lsr	r24
    4682:	71 05       	cpc	r23, r1
    4684:	61 05       	cpc	r22, r1
    4686:	08 94       	sec
    4688:	08 95       	ret

0000468a <__fp_zero>:
    468a:	e8 94       	clt

0000468c <__fp_szero>:
    468c:	bb 27       	eor	r27, r27
    468e:	66 27       	eor	r22, r22
    4690:	77 27       	eor	r23, r23
    4692:	cb 01       	movw	r24, r22
    4694:	97 f9       	bld	r25, 7
    4696:	08 95       	ret

00004698 <__mulsf3>:
    4698:	0b d0       	rcall	.+22     	; 0x46b0 <__mulsf3x>
    469a:	c4 cf       	rjmp	.-120    	; 0x4624 <__fp_round>
    469c:	b5 df       	rcall	.-150    	; 0x4608 <__fp_pscA>
    469e:	28 f0       	brcs	.+10     	; 0x46aa <__mulsf3+0x12>
    46a0:	ba df       	rcall	.-140    	; 0x4616 <__fp_pscB>
    46a2:	18 f0       	brcs	.+6      	; 0x46aa <__mulsf3+0x12>
    46a4:	95 23       	and	r25, r21
    46a6:	09 f0       	breq	.+2      	; 0x46aa <__mulsf3+0x12>
    46a8:	a6 cf       	rjmp	.-180    	; 0x45f6 <__fp_inf>
    46aa:	ab cf       	rjmp	.-170    	; 0x4602 <__fp_nan>
    46ac:	11 24       	eor	r1, r1
    46ae:	ee cf       	rjmp	.-36     	; 0x468c <__fp_szero>

000046b0 <__mulsf3x>:
    46b0:	ca df       	rcall	.-108    	; 0x4646 <__fp_split3>
    46b2:	a0 f3       	brcs	.-24     	; 0x469c <__mulsf3+0x4>

000046b4 <__mulsf3_pse>:
    46b4:	95 9f       	mul	r25, r21
    46b6:	d1 f3       	breq	.-12     	; 0x46ac <__mulsf3+0x14>
    46b8:	95 0f       	add	r25, r21
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	55 1f       	adc	r21, r21
    46be:	62 9f       	mul	r22, r18
    46c0:	f0 01       	movw	r30, r0
    46c2:	72 9f       	mul	r23, r18
    46c4:	bb 27       	eor	r27, r27
    46c6:	f0 0d       	add	r31, r0
    46c8:	b1 1d       	adc	r27, r1
    46ca:	63 9f       	mul	r22, r19
    46cc:	aa 27       	eor	r26, r26
    46ce:	f0 0d       	add	r31, r0
    46d0:	b1 1d       	adc	r27, r1
    46d2:	aa 1f       	adc	r26, r26
    46d4:	64 9f       	mul	r22, r20
    46d6:	66 27       	eor	r22, r22
    46d8:	b0 0d       	add	r27, r0
    46da:	a1 1d       	adc	r26, r1
    46dc:	66 1f       	adc	r22, r22
    46de:	82 9f       	mul	r24, r18
    46e0:	22 27       	eor	r18, r18
    46e2:	b0 0d       	add	r27, r0
    46e4:	a1 1d       	adc	r26, r1
    46e6:	62 1f       	adc	r22, r18
    46e8:	73 9f       	mul	r23, r19
    46ea:	b0 0d       	add	r27, r0
    46ec:	a1 1d       	adc	r26, r1
    46ee:	62 1f       	adc	r22, r18
    46f0:	83 9f       	mul	r24, r19
    46f2:	a0 0d       	add	r26, r0
    46f4:	61 1d       	adc	r22, r1
    46f6:	22 1f       	adc	r18, r18
    46f8:	74 9f       	mul	r23, r20
    46fa:	33 27       	eor	r19, r19
    46fc:	a0 0d       	add	r26, r0
    46fe:	61 1d       	adc	r22, r1
    4700:	23 1f       	adc	r18, r19
    4702:	84 9f       	mul	r24, r20
    4704:	60 0d       	add	r22, r0
    4706:	21 1d       	adc	r18, r1
    4708:	82 2f       	mov	r24, r18
    470a:	76 2f       	mov	r23, r22
    470c:	6a 2f       	mov	r22, r26
    470e:	11 24       	eor	r1, r1
    4710:	9f 57       	subi	r25, 0x7F	; 127
    4712:	50 40       	sbci	r21, 0x00	; 0
    4714:	8a f0       	brmi	.+34     	; 0x4738 <__mulsf3_pse+0x84>
    4716:	e1 f0       	breq	.+56     	; 0x4750 <__mulsf3_pse+0x9c>
    4718:	88 23       	and	r24, r24
    471a:	4a f0       	brmi	.+18     	; 0x472e <__mulsf3_pse+0x7a>
    471c:	ee 0f       	add	r30, r30
    471e:	ff 1f       	adc	r31, r31
    4720:	bb 1f       	adc	r27, r27
    4722:	66 1f       	adc	r22, r22
    4724:	77 1f       	adc	r23, r23
    4726:	88 1f       	adc	r24, r24
    4728:	91 50       	subi	r25, 0x01	; 1
    472a:	50 40       	sbci	r21, 0x00	; 0
    472c:	a9 f7       	brne	.-22     	; 0x4718 <__mulsf3_pse+0x64>
    472e:	9e 3f       	cpi	r25, 0xFE	; 254
    4730:	51 05       	cpc	r21, r1
    4732:	70 f0       	brcs	.+28     	; 0x4750 <__mulsf3_pse+0x9c>
    4734:	60 cf       	rjmp	.-320    	; 0x45f6 <__fp_inf>
    4736:	aa cf       	rjmp	.-172    	; 0x468c <__fp_szero>
    4738:	5f 3f       	cpi	r21, 0xFF	; 255
    473a:	ec f3       	brlt	.-6      	; 0x4736 <__mulsf3_pse+0x82>
    473c:	98 3e       	cpi	r25, 0xE8	; 232
    473e:	dc f3       	brlt	.-10     	; 0x4736 <__mulsf3_pse+0x82>
    4740:	86 95       	lsr	r24
    4742:	77 95       	ror	r23
    4744:	67 95       	ror	r22
    4746:	b7 95       	ror	r27
    4748:	f7 95       	ror	r31
    474a:	e7 95       	ror	r30
    474c:	9f 5f       	subi	r25, 0xFF	; 255
    474e:	c1 f7       	brne	.-16     	; 0x4740 <__mulsf3_pse+0x8c>
    4750:	fe 2b       	or	r31, r30
    4752:	88 0f       	add	r24, r24
    4754:	91 1d       	adc	r25, r1
    4756:	96 95       	lsr	r25
    4758:	87 95       	ror	r24
    475a:	97 f9       	bld	r25, 7
    475c:	08 95       	ret

0000475e <__unordsf2>:
    475e:	27 df       	rcall	.-434    	; 0x45ae <__fp_cmp>
    4760:	88 0b       	sbc	r24, r24
    4762:	99 0b       	sbc	r25, r25
    4764:	08 95       	ret

00004766 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    4766:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <abort>

0000476a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    476a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    476c:	91 8d       	ldd	r25, Z+25	; 0x19
    476e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4770:	89 2f       	mov	r24, r25
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	80 5c       	subi	r24, 0xC0	; 192
    4776:	9f 4f       	sbci	r25, 0xFF	; 255
    4778:	82 1b       	sub	r24, r18
    477a:	91 09       	sbc	r25, r1
}
    477c:	8f 73       	andi	r24, 0x3F	; 63
    477e:	99 27       	eor	r25, r25
    4780:	08 95       	ret

00004782 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4782:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4784:	91 8d       	ldd	r25, Z+25	; 0x19
    4786:	82 8d       	ldd	r24, Z+26	; 0x1a
    4788:	98 17       	cp	r25, r24
    478a:	31 f0       	breq	.+12     	; 0x4798 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    478c:	82 8d       	ldd	r24, Z+26	; 0x1a
    478e:	e8 0f       	add	r30, r24
    4790:	f1 1d       	adc	r31, r1
    4792:	85 8d       	ldd	r24, Z+29	; 0x1d
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4798:	8f ef       	ldi	r24, 0xFF	; 255
    479a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    479c:	08 95       	ret

0000479e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    479e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    47a0:	91 8d       	ldd	r25, Z+25	; 0x19
    47a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    47a4:	98 17       	cp	r25, r24
    47a6:	61 f0       	breq	.+24     	; 0x47c0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    47a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    47aa:	df 01       	movw	r26, r30
    47ac:	a8 0f       	add	r26, r24
    47ae:	b1 1d       	adc	r27, r1
    47b0:	5d 96       	adiw	r26, 0x1d	; 29
    47b2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    47b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    47b6:	9f 5f       	subi	r25, 0xFF	; 255
    47b8:	9f 73       	andi	r25, 0x3F	; 63
    47ba:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    47c4:	08 95       	ret

000047c6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    47c6:	82 e3       	ldi	r24, 0x32	; 50
    47c8:	95 e2       	ldi	r25, 0x25	; 37
    47ca:	89 2b       	or	r24, r25
    47cc:	41 f0       	breq	.+16     	; 0x47de <_Z14serialEventRunv+0x18>
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	89 2b       	or	r24, r25
    47d4:	21 f0       	breq	.+8      	; 0x47de <_Z14serialEventRunv+0x18>
    47d6:	46 d1       	rcall	.+652    	; 0x4a64 <_Z17Serial0_availablev>
    47d8:	81 11       	cpse	r24, r1
    47da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    47de:	08 95       	ret

000047e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    47e0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    47e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    47e4:	df 01       	movw	r26, r30
    47e6:	a8 0f       	add	r26, r24
    47e8:	b1 1d       	adc	r27, r1
    47ea:	a3 5a       	subi	r26, 0xA3	; 163
    47ec:	bf 4f       	sbci	r27, 0xFF	; 255
    47ee:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    47f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	01 96       	adiw	r24, 0x01	; 1
    47f6:	8f 73       	andi	r24, 0x3F	; 63
    47f8:	99 27       	eor	r25, r25
    47fa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    47fc:	a6 89       	ldd	r26, Z+22	; 0x16
    47fe:	b7 89       	ldd	r27, Z+23	; 0x17
    4800:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4802:	a0 89       	ldd	r26, Z+16	; 0x10
    4804:	b1 89       	ldd	r27, Z+17	; 0x11
    4806:	8c 91       	ld	r24, X
    4808:	80 64       	ori	r24, 0x40	; 64
    480a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    480c:	93 8d       	ldd	r25, Z+27	; 0x1b
    480e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4810:	98 13       	cpse	r25, r24
    4812:	06 c0       	rjmp	.+12     	; 0x4820 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4814:	02 88       	ldd	r0, Z+18	; 0x12
    4816:	f3 89       	ldd	r31, Z+19	; 0x13
    4818:	e0 2d       	mov	r30, r0
    481a:	80 81       	ld	r24, Z
    481c:	8f 7d       	andi	r24, 0xDF	; 223
    481e:	80 83       	st	Z, r24
    4820:	08 95       	ret

00004822 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4828:	88 8d       	ldd	r24, Y+24	; 0x18
    482a:	88 23       	and	r24, r24
    482c:	c1 f0       	breq	.+48     	; 0x485e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    482e:	ea 89       	ldd	r30, Y+18	; 0x12
    4830:	fb 89       	ldd	r31, Y+19	; 0x13
    4832:	80 81       	ld	r24, Z
    4834:	85 fd       	sbrc	r24, 5
    4836:	05 c0       	rjmp	.+10     	; 0x4842 <_ZN14HardwareSerial5flushEv+0x20>
    4838:	a8 89       	ldd	r26, Y+16	; 0x10
    483a:	b9 89       	ldd	r27, Y+17	; 0x11
    483c:	8c 91       	ld	r24, X
    483e:	86 fd       	sbrc	r24, 6
    4840:	0e c0       	rjmp	.+28     	; 0x485e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	07 fc       	sbrc	r0, 7
    4846:	f5 cf       	rjmp	.-22     	; 0x4832 <_ZN14HardwareSerial5flushEv+0x10>
    4848:	80 81       	ld	r24, Z
    484a:	85 ff       	sbrs	r24, 5
    484c:	f2 cf       	rjmp	.-28     	; 0x4832 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    484e:	a8 89       	ldd	r26, Y+16	; 0x10
    4850:	b9 89       	ldd	r27, Y+17	; 0x11
    4852:	8c 91       	ld	r24, X
    4854:	85 ff       	sbrs	r24, 5
    4856:	ed cf       	rjmp	.-38     	; 0x4832 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4858:	ce 01       	movw	r24, r28
    485a:	c2 df       	rcall	.-124    	; 0x47e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    485c:	e8 cf       	rjmp	.-48     	; 0x482e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	08 95       	ret

00004864 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4864:	ef 92       	push	r14
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	ec 01       	movw	r28, r24
  _written = true;
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4876:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4878:	8c 8d       	ldd	r24, Y+28	; 0x1c
    487a:	98 13       	cpse	r25, r24
    487c:	05 c0       	rjmp	.+10     	; 0x4888 <_ZN14HardwareSerial5writeEh+0x24>
    487e:	e8 89       	ldd	r30, Y+16	; 0x10
    4880:	f9 89       	ldd	r31, Y+17	; 0x11
    4882:	80 81       	ld	r24, Z
    4884:	85 fd       	sbrc	r24, 5
    4886:	23 c0       	rjmp	.+70     	; 0x48ce <_ZN14HardwareSerial5writeEh+0x6a>
    4888:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    488a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    488c:	10 e0       	ldi	r17, 0x00	; 0
    488e:	0f 5f       	subi	r16, 0xFF	; 255
    4890:	1f 4f       	sbci	r17, 0xFF	; 255
    4892:	0f 73       	andi	r16, 0x3F	; 63
    4894:	11 27       	eor	r17, r17
    4896:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4898:	8c 8d       	ldd	r24, Y+28	; 0x1c
    489a:	e8 12       	cpse	r14, r24
    489c:	0b c0       	rjmp	.+22     	; 0x48b4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	07 fc       	sbrc	r0, 7
    48a2:	fa cf       	rjmp	.-12     	; 0x4898 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    48a4:	e8 89       	ldd	r30, Y+16	; 0x10
    48a6:	f9 89       	ldd	r31, Y+17	; 0x11
    48a8:	80 81       	ld	r24, Z
    48aa:	85 ff       	sbrs	r24, 5
    48ac:	f5 cf       	rjmp	.-22     	; 0x4898 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    48ae:	ce 01       	movw	r24, r28
    48b0:	97 df       	rcall	.-210    	; 0x47e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    48b2:	f2 cf       	rjmp	.-28     	; 0x4898 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    48b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48b6:	fe 01       	movw	r30, r28
    48b8:	e8 0f       	add	r30, r24
    48ba:	f1 1d       	adc	r31, r1
    48bc:	e3 5a       	subi	r30, 0xA3	; 163
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    48c2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    48c4:	ea 89       	ldd	r30, Y+18	; 0x12
    48c6:	fb 89       	ldd	r31, Y+19	; 0x13
    48c8:	80 81       	ld	r24, Z
    48ca:	80 62       	ori	r24, 0x20	; 32
    48cc:	07 c0       	rjmp	.+14     	; 0x48dc <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    48ce:	ee 89       	ldd	r30, Y+22	; 0x16
    48d0:	ff 89       	ldd	r31, Y+23	; 0x17
    48d2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    48d4:	e8 89       	ldd	r30, Y+16	; 0x10
    48d6:	f9 89       	ldd	r31, Y+17	; 0x11
    48d8:	80 81       	ld	r24, Z
    48da:	80 64       	ori	r24, 0x40	; 64
    48dc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	ff 90       	pop	r15
    48ec:	ef 90       	pop	r14
    48ee:	08 95       	ret

000048f0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    48f0:	cf 92       	push	r12
    48f2:	df 92       	push	r13
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	1f 93       	push	r17
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	ec 01       	movw	r28, r24
    4900:	6a 01       	movw	r12, r20
    4902:	7b 01       	movw	r14, r22
    4904:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4906:	e8 89       	ldd	r30, Y+16	; 0x10
    4908:	f9 89       	ldd	r31, Y+17	; 0x11
    490a:	82 e0       	ldi	r24, 0x02	; 2
    490c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    490e:	41 15       	cp	r20, r1
    4910:	51 4e       	sbci	r21, 0xE1	; 225
    4912:	61 05       	cpc	r22, r1
    4914:	71 05       	cpc	r23, r1
    4916:	a9 f0       	breq	.+42     	; 0x4942 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	79 e0       	ldi	r23, 0x09	; 9
    491c:	8d e3       	ldi	r24, 0x3D	; 61
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	a7 01       	movw	r20, r14
    4922:	96 01       	movw	r18, r12
    4924:	03 d7       	rcall	.+3590   	; 0x572c <__udivmodsi4>
    4926:	da 01       	movw	r26, r20
    4928:	c9 01       	movw	r24, r18
    492a:	01 97       	sbiw	r24, 0x01	; 1
    492c:	a1 09       	sbc	r26, r1
    492e:	b1 09       	sbc	r27, r1
    4930:	b6 95       	lsr	r27
    4932:	a7 95       	ror	r26
    4934:	97 95       	ror	r25
    4936:	87 95       	ror	r24
    4938:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    493a:	41 15       	cp	r20, r1
    493c:	80 e1       	ldi	r24, 0x10	; 16
    493e:	58 07       	cpc	r21, r24
    4940:	a0 f0       	brcs	.+40     	; 0x496a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4942:	e8 89       	ldd	r30, Y+16	; 0x10
    4944:	f9 89       	ldd	r31, Y+17	; 0x11
    4946:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4948:	60 e8       	ldi	r22, 0x80	; 128
    494a:	74 e8       	ldi	r23, 0x84	; 132
    494c:	8e e1       	ldi	r24, 0x1E	; 30
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	a7 01       	movw	r20, r14
    4952:	96 01       	movw	r18, r12
    4954:	eb d6       	rcall	.+3542   	; 0x572c <__udivmodsi4>
    4956:	ba 01       	movw	r22, r20
    4958:	a9 01       	movw	r20, r18
    495a:	41 50       	subi	r20, 0x01	; 1
    495c:	51 09       	sbc	r21, r1
    495e:	61 09       	sbc	r22, r1
    4960:	71 09       	sbc	r23, r1
    4962:	76 95       	lsr	r23
    4964:	67 95       	ror	r22
    4966:	57 95       	ror	r21
    4968:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    496a:	ec 85       	ldd	r30, Y+12	; 0x0c
    496c:	fd 85       	ldd	r31, Y+13	; 0x0d
    496e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4970:	ee 85       	ldd	r30, Y+14	; 0x0e
    4972:	ff 85       	ldd	r31, Y+15	; 0x0f
    4974:	40 83       	st	Z, r20

  _written = false;
    4976:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4978:	ec 89       	ldd	r30, Y+20	; 0x14
    497a:	fd 89       	ldd	r31, Y+21	; 0x15
    497c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    497e:	ea 89       	ldd	r30, Y+18	; 0x12
    4980:	fb 89       	ldd	r31, Y+19	; 0x13
    4982:	80 81       	ld	r24, Z
    4984:	80 61       	ori	r24, 0x10	; 16
    4986:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4988:	ea 89       	ldd	r30, Y+18	; 0x12
    498a:	fb 89       	ldd	r31, Y+19	; 0x13
    498c:	80 81       	ld	r24, Z
    498e:	88 60       	ori	r24, 0x08	; 8
    4990:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4992:	ea 89       	ldd	r30, Y+18	; 0x12
    4994:	fb 89       	ldd	r31, Y+19	; 0x13
    4996:	80 81       	ld	r24, Z
    4998:	80 68       	ori	r24, 0x80	; 128
    499a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    499c:	ea 89       	ldd	r30, Y+18	; 0x12
    499e:	fb 89       	ldd	r31, Y+19	; 0x13
    49a0:	80 81       	ld	r24, Z
    49a2:	8f 7d       	andi	r24, 0xDF	; 223
    49a4:	80 83       	st	Z, r24
}
    49a6:	df 91       	pop	r29
    49a8:	cf 91       	pop	r28
    49aa:	1f 91       	pop	r17
    49ac:	ff 90       	pop	r15
    49ae:	ef 90       	pop	r14
    49b0:	df 90       	pop	r13
    49b2:	cf 90       	pop	r12
    49b4:	08 95       	ret

000049b6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    49b6:	1f 92       	push	r1
    49b8:	0f 92       	push	r0
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	0f 92       	push	r0
    49be:	11 24       	eor	r1, r1
    49c0:	2f 93       	push	r18
    49c2:	8f 93       	push	r24
    49c4:	9f 93       	push	r25
    49c6:	ef 93       	push	r30
    49c8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    49ca:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <Serial+0x10>
    49ce:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <Serial+0x11>
    49d2:	80 81       	ld	r24, Z
    49d4:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <Serial+0x16>
    49d8:	f0 91 d7 04 	lds	r31, 0x04D7	; 0x8004d7 <Serial+0x17>
    49dc:	82 fd       	sbrc	r24, 2
    49de:	12 c0       	rjmp	.+36     	; 0x4a04 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    49e0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    49e2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <Serial+0x19>
    49e6:	8f 5f       	subi	r24, 0xFF	; 255
    49e8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    49ea:	20 91 da 04 	lds	r18, 0x04DA	; 0x8004da <Serial+0x1a>
    49ee:	82 17       	cp	r24, r18
    49f0:	51 f0       	breq	.+20     	; 0x4a06 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    49f2:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <Serial+0x19>
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	e0 54       	subi	r30, 0x40	; 64
    49fa:	fb 4f       	sbci	r31, 0xFB	; 251
    49fc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    49fe:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <Serial+0x19>
    4a02:	01 c0       	rjmp	.+2      	; 0x4a06 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4a04:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4a06:	ff 91       	pop	r31
    4a08:	ef 91       	pop	r30
    4a0a:	9f 91       	pop	r25
    4a0c:	8f 91       	pop	r24
    4a0e:	2f 91       	pop	r18
    4a10:	0f 90       	pop	r0
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	0f 90       	pop	r0
    4a16:	1f 90       	pop	r1
    4a18:	18 95       	reti

00004a1a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4a1a:	1f 92       	push	r1
    4a1c:	0f 92       	push	r0
    4a1e:	0f b6       	in	r0, 0x3f	; 63
    4a20:	0f 92       	push	r0
    4a22:	11 24       	eor	r1, r1
    4a24:	2f 93       	push	r18
    4a26:	3f 93       	push	r19
    4a28:	4f 93       	push	r20
    4a2a:	5f 93       	push	r21
    4a2c:	6f 93       	push	r22
    4a2e:	7f 93       	push	r23
    4a30:	8f 93       	push	r24
    4a32:	9f 93       	push	r25
    4a34:	af 93       	push	r26
    4a36:	bf 93       	push	r27
    4a38:	ef 93       	push	r30
    4a3a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4a3c:	80 ec       	ldi	r24, 0xC0	; 192
    4a3e:	94 e0       	ldi	r25, 0x04	; 4
    4a40:	cf de       	rcall	.-610    	; 0x47e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4a42:	ff 91       	pop	r31
    4a44:	ef 91       	pop	r30
    4a46:	bf 91       	pop	r27
    4a48:	af 91       	pop	r26
    4a4a:	9f 91       	pop	r25
    4a4c:	8f 91       	pop	r24
    4a4e:	7f 91       	pop	r23
    4a50:	6f 91       	pop	r22
    4a52:	5f 91       	pop	r21
    4a54:	4f 91       	pop	r20
    4a56:	3f 91       	pop	r19
    4a58:	2f 91       	pop	r18
    4a5a:	0f 90       	pop	r0
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	0f 90       	pop	r0
    4a60:	1f 90       	pop	r1
    4a62:	18 95       	reti

00004a64 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4a64:	80 ec       	ldi	r24, 0xC0	; 192
    4a66:	94 e0       	ldi	r25, 0x04	; 4
    4a68:	80 de       	rcall	.-768    	; 0x476a <_ZN14HardwareSerial9availableEv>
    4a6a:	21 e0       	ldi	r18, 0x01	; 1
    4a6c:	89 2b       	or	r24, r25
    4a6e:	09 f4       	brne	.+2      	; 0x4a72 <_Z17Serial0_availablev+0xe>
    4a70:	20 e0       	ldi	r18, 0x00	; 0
}
    4a72:	82 2f       	mov	r24, r18
    4a74:	08 95       	ret

00004a76 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4a76:	e0 ec       	ldi	r30, 0xC0	; 192
    4a78:	f4 e0       	ldi	r31, 0x04	; 4
    4a7a:	13 82       	std	Z+3, r1	; 0x03
    4a7c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4a7e:	88 ee       	ldi	r24, 0xE8	; 232
    4a80:	93 e0       	ldi	r25, 0x03	; 3
    4a82:	a0 e0       	ldi	r26, 0x00	; 0
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	84 83       	std	Z+4, r24	; 0x04
    4a88:	95 83       	std	Z+5, r25	; 0x05
    4a8a:	a6 83       	std	Z+6, r26	; 0x06
    4a8c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4a8e:	83 eb       	ldi	r24, 0xB3	; 179
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	91 83       	std	Z+1, r25	; 0x01
    4a94:	80 83       	st	Z, r24
    4a96:	85 ec       	ldi	r24, 0xC5	; 197
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	95 87       	std	Z+13, r25	; 0x0d
    4a9c:	84 87       	std	Z+12, r24	; 0x0c
    4a9e:	84 ec       	ldi	r24, 0xC4	; 196
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	97 87       	std	Z+15, r25	; 0x0f
    4aa4:	86 87       	std	Z+14, r24	; 0x0e
    4aa6:	80 ec       	ldi	r24, 0xC0	; 192
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	91 8b       	std	Z+17, r25	; 0x11
    4aac:	80 8b       	std	Z+16, r24	; 0x10
    4aae:	81 ec       	ldi	r24, 0xC1	; 193
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	93 8b       	std	Z+19, r25	; 0x13
    4ab4:	82 8b       	std	Z+18, r24	; 0x12
    4ab6:	82 ec       	ldi	r24, 0xC2	; 194
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	95 8b       	std	Z+21, r25	; 0x15
    4abc:	84 8b       	std	Z+20, r24	; 0x14
    4abe:	86 ec       	ldi	r24, 0xC6	; 198
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	97 8b       	std	Z+23, r25	; 0x17
    4ac4:	86 8b       	std	Z+22, r24	; 0x16
    4ac6:	11 8e       	std	Z+25, r1	; 0x19
    4ac8:	12 8e       	std	Z+26, r1	; 0x1a
    4aca:	13 8e       	std	Z+27, r1	; 0x1b
    4acc:	14 8e       	std	Z+28, r1	; 0x1c
    4ace:	08 95       	ret

00004ad0 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    4ad0:	08 95       	ret

00004ad2 <main>:

int main(void)
{
	init();
    4ad2:	33 d2       	rcall	.+1126   	; 0x4f3a <init>

	initVariant();
    4ad4:	fd df       	rcall	.-6      	; 0x4ad0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4ad6:	c5 db       	rcall	.-2166   	; 0x4262 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4ad8:	c3 ee       	ldi	r28, 0xE3	; 227
    4ada:	d3 e2       	ldi	r29, 0x23	; 35
#endif
	
	setup();
    
	for (;;) {
		loop();
    4adc:	f3 db       	rcall	.-2074   	; 0x42c4 <loop>
		if (serialEventRun) serialEventRun();
    4ade:	20 97       	sbiw	r28, 0x00	; 0
    4ae0:	e9 f3       	breq	.-6      	; 0x4adc <main+0xa>
    4ae2:	71 de       	rcall	.-798    	; 0x47c6 <_Z14serialEventRunv>
    4ae4:	fb cf       	rjmp	.-10     	; 0x4adc <main+0xa>

00004ae6 <_ZN5Print5writeEPKhj>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4ae6:	cf 92       	push	r12
    4ae8:	df 92       	push	r13
    4aea:	ef 92       	push	r14
    4aec:	ff 92       	push	r15
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	6c 01       	movw	r12, r24
    4af8:	7a 01       	movw	r14, r20
    4afa:	8b 01       	movw	r16, r22
    4afc:	c0 e0       	ldi	r28, 0x00	; 0
    4afe:	d0 e0       	ldi	r29, 0x00	; 0
    4b00:	ce 15       	cp	r28, r14
    4b02:	df 05       	cpc	r29, r15
    4b04:	89 f0       	breq	.+34     	; 0x4b28 <_ZN5Print5writeEPKhj+0x42>
    4b06:	d8 01       	movw	r26, r16
    4b08:	6d 91       	ld	r22, X+
    4b0a:	8d 01       	movw	r16, r26
    4b0c:	d6 01       	movw	r26, r12
    4b0e:	ed 91       	ld	r30, X+
    4b10:	fc 91       	ld	r31, X
    4b12:	01 90       	ld	r0, Z+
    4b14:	f0 81       	ld	r31, Z
    4b16:	e0 2d       	mov	r30, r0
    4b18:	c6 01       	movw	r24, r12
    4b1a:	09 95       	icall
    4b1c:	89 2b       	or	r24, r25
    4b1e:	11 f4       	brne	.+4      	; 0x4b24 <_ZN5Print5writeEPKhj+0x3e>
    4b20:	7e 01       	movw	r14, r28
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <_ZN5Print5writeEPKhj+0x42>
    4b24:	21 96       	adiw	r28, 0x01	; 1
    4b26:	ec cf       	rjmp	.-40     	; 0x4b00 <_ZN5Print5writeEPKhj+0x1a>
    4b28:	c7 01       	movw	r24, r14
    4b2a:	df 91       	pop	r29
    4b2c:	cf 91       	pop	r28
    4b2e:	1f 91       	pop	r17
    4b30:	0f 91       	pop	r16
    4b32:	ff 90       	pop	r15
    4b34:	ef 90       	pop	r14
    4b36:	df 90       	pop	r13
    4b38:	cf 90       	pop	r12
    4b3a:	08 95       	ret

00004b3c <_ZN5Print5writeEPKc>:
    4b3c:	61 15       	cp	r22, r1
    4b3e:	71 05       	cpc	r23, r1
    4b40:	79 f0       	breq	.+30     	; 0x4b60 <_ZN5Print5writeEPKc+0x24>
    4b42:	fb 01       	movw	r30, r22
    4b44:	01 90       	ld	r0, Z+
    4b46:	00 20       	and	r0, r0
    4b48:	e9 f7       	brne	.-6      	; 0x4b44 <_ZN5Print5writeEPKc+0x8>
    4b4a:	31 97       	sbiw	r30, 0x01	; 1
    4b4c:	af 01       	movw	r20, r30
    4b4e:	46 1b       	sub	r20, r22
    4b50:	57 0b       	sbc	r21, r23
    4b52:	dc 01       	movw	r26, r24
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	02 80       	ldd	r0, Z+2	; 0x02
    4b5a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b5c:	e0 2d       	mov	r30, r0
    4b5e:	09 94       	ijmp
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	08 95       	ret

00004b66 <_ZN5Print5printEPK19__FlashStringHelper>:
    4b66:	ef 92       	push	r14
    4b68:	ff 92       	push	r15
    4b6a:	0f 93       	push	r16
    4b6c:	1f 93       	push	r17
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	8c 01       	movw	r16, r24
    4b74:	7b 01       	movw	r14, r22
    4b76:	c0 e0       	ldi	r28, 0x00	; 0
    4b78:	d0 e0       	ldi	r29, 0x00	; 0
    4b7a:	f7 01       	movw	r30, r14
    4b7c:	ec 0f       	add	r30, r28
    4b7e:	fd 1f       	adc	r31, r29
    4b80:	64 91       	lpm	r22, Z
    4b82:	66 23       	and	r22, r22
    4b84:	61 f0       	breq	.+24     	; 0x4b9e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4b86:	d8 01       	movw	r26, r16
    4b88:	ed 91       	ld	r30, X+
    4b8a:	fc 91       	ld	r31, X
    4b8c:	01 90       	ld	r0, Z+
    4b8e:	f0 81       	ld	r31, Z
    4b90:	e0 2d       	mov	r30, r0
    4b92:	c8 01       	movw	r24, r16
    4b94:	09 95       	icall
    4b96:	89 2b       	or	r24, r25
    4b98:	11 f0       	breq	.+4      	; 0x4b9e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4b9a:	21 96       	adiw	r28, 0x01	; 1
    4b9c:	ee cf       	rjmp	.-36     	; 0x4b7a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	df 91       	pop	r29
    4ba2:	cf 91       	pop	r28
    4ba4:	1f 91       	pop	r17
    4ba6:	0f 91       	pop	r16
    4ba8:	ff 90       	pop	r15
    4baa:	ef 90       	pop	r14
    4bac:	08 95       	ret

00004bae <_ZN5Print5printERK6String>:
    4bae:	dc 01       	movw	r26, r24
    4bb0:	ed 91       	ld	r30, X+
    4bb2:	fc 91       	ld	r31, X
    4bb4:	db 01       	movw	r26, r22
    4bb6:	14 96       	adiw	r26, 0x04	; 4
    4bb8:	4d 91       	ld	r20, X+
    4bba:	5c 91       	ld	r21, X
    4bbc:	15 97       	sbiw	r26, 0x05	; 5
    4bbe:	6d 91       	ld	r22, X+
    4bc0:	7c 91       	ld	r23, X
    4bc2:	02 80       	ldd	r0, Z+2	; 0x02
    4bc4:	f3 81       	ldd	r31, Z+3	; 0x03
    4bc6:	e0 2d       	mov	r30, r0
    4bc8:	09 94       	ijmp

00004bca <_ZN5Print5printEc>:
    4bca:	dc 01       	movw	r26, r24
    4bcc:	ed 91       	ld	r30, X+
    4bce:	fc 91       	ld	r31, X
    4bd0:	01 90       	ld	r0, Z+
    4bd2:	f0 81       	ld	r31, Z
    4bd4:	e0 2d       	mov	r30, r0
    4bd6:	09 94       	ijmp

00004bd8 <_ZN5Print7printlnEv>:
    4bd8:	6f eb       	ldi	r22, 0xBF	; 191
    4bda:	71 e0       	ldi	r23, 0x01	; 1
    4bdc:	af cf       	rjmp	.-162    	; 0x4b3c <_ZN5Print5writeEPKc>

00004bde <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4bde:	0f 93       	push	r16
    4be0:	1f 93       	push	r17
    4be2:	cf 93       	push	r28
    4be4:	df 93       	push	r29
    4be6:	ec 01       	movw	r28, r24
    4be8:	be df       	rcall	.-132    	; 0x4b66 <_ZN5Print5printEPK19__FlashStringHelper>
    4bea:	8c 01       	movw	r16, r24
    4bec:	ce 01       	movw	r24, r28
    4bee:	f4 df       	rcall	.-24     	; 0x4bd8 <_ZN5Print7printlnEv>
    4bf0:	80 0f       	add	r24, r16
    4bf2:	91 1f       	adc	r25, r17
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	08 95       	ret

00004bfe <_ZN5Print7printlnERK6String>:
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	ec 01       	movw	r28, r24
    4c08:	d2 df       	rcall	.-92     	; 0x4bae <_ZN5Print5printERK6String>
    4c0a:	8c 01       	movw	r16, r24
    4c0c:	ce 01       	movw	r24, r28
    4c0e:	e4 df       	rcall	.-56     	; 0x4bd8 <_ZN5Print7printlnEv>
    4c10:	80 0f       	add	r24, r16
    4c12:	91 1f       	adc	r25, r17
    4c14:	df 91       	pop	r29
    4c16:	cf 91       	pop	r28
    4c18:	1f 91       	pop	r17
    4c1a:	0f 91       	pop	r16
    4c1c:	08 95       	ret

00004c1e <_ZN5Print11printNumberEmh>:
    4c1e:	8f 92       	push	r8
    4c20:	9f 92       	push	r9
    4c22:	af 92       	push	r10
    4c24:	bf 92       	push	r11
    4c26:	cf 92       	push	r12
    4c28:	df 92       	push	r13
    4c2a:	ef 92       	push	r14
    4c2c:	ff 92       	push	r15
    4c2e:	0f 93       	push	r16
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	a1 97       	sbiw	r28, 0x21	; 33
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	7c 01       	movw	r14, r24
    4c48:	d4 2e       	mov	r13, r20
    4c4a:	c5 2e       	mov	r12, r21
    4c4c:	db 01       	movw	r26, r22
    4c4e:	19 a2       	std	Y+33, r1	; 0x21
    4c50:	22 30       	cpi	r18, 0x02	; 2
    4c52:	08 f4       	brcc	.+2      	; 0x4c56 <_ZN5Print11printNumberEmh+0x38>
    4c54:	2a e0       	ldi	r18, 0x0A	; 10
    4c56:	8e 01       	movw	r16, r28
    4c58:	0f 5d       	subi	r16, 0xDF	; 223
    4c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5c:	82 2e       	mov	r8, r18
    4c5e:	91 2c       	mov	r9, r1
    4c60:	a1 2c       	mov	r10, r1
    4c62:	b1 2c       	mov	r11, r1
    4c64:	6d 2d       	mov	r22, r13
    4c66:	7c 2d       	mov	r23, r12
    4c68:	cd 01       	movw	r24, r26
    4c6a:	a5 01       	movw	r20, r10
    4c6c:	94 01       	movw	r18, r8
    4c6e:	5e d5       	rcall	.+2748   	; 0x572c <__udivmodsi4>
    4c70:	d2 2e       	mov	r13, r18
    4c72:	c3 2e       	mov	r12, r19
    4c74:	da 01       	movw	r26, r20
    4c76:	01 50       	subi	r16, 0x01	; 1
    4c78:	11 09       	sbc	r17, r1
    4c7a:	6a 30       	cpi	r22, 0x0A	; 10
    4c7c:	71 05       	cpc	r23, r1
    4c7e:	81 05       	cpc	r24, r1
    4c80:	91 05       	cpc	r25, r1
    4c82:	10 f4       	brcc	.+4      	; 0x4c88 <_ZN5Print11printNumberEmh+0x6a>
    4c84:	60 5d       	subi	r22, 0xD0	; 208
    4c86:	01 c0       	rjmp	.+2      	; 0x4c8a <_ZN5Print11printNumberEmh+0x6c>
    4c88:	69 5c       	subi	r22, 0xC9	; 201
    4c8a:	f8 01       	movw	r30, r16
    4c8c:	60 83       	st	Z, r22
    4c8e:	23 2b       	or	r18, r19
    4c90:	24 2b       	or	r18, r20
    4c92:	25 2b       	or	r18, r21
    4c94:	39 f7       	brne	.-50     	; 0x4c64 <_ZN5Print11printNumberEmh+0x46>
    4c96:	b8 01       	movw	r22, r16
    4c98:	c7 01       	movw	r24, r14
    4c9a:	50 df       	rcall	.-352    	; 0x4b3c <_ZN5Print5writeEPKc>
    4c9c:	a1 96       	adiw	r28, 0x21	; 33
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	de bf       	out	0x3e, r29	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	cd bf       	out	0x3d, r28	; 61
    4ca8:	df 91       	pop	r29
    4caa:	cf 91       	pop	r28
    4cac:	1f 91       	pop	r17
    4cae:	0f 91       	pop	r16
    4cb0:	ff 90       	pop	r15
    4cb2:	ef 90       	pop	r14
    4cb4:	df 90       	pop	r13
    4cb6:	cf 90       	pop	r12
    4cb8:	bf 90       	pop	r11
    4cba:	af 90       	pop	r10
    4cbc:	9f 90       	pop	r9
    4cbe:	8f 90       	pop	r8
    4cc0:	08 95       	ret

00004cc2 <_ZN5Print5printEli>:
    4cc2:	cf 92       	push	r12
    4cc4:	df 92       	push	r13
    4cc6:	ef 92       	push	r14
    4cc8:	ff 92       	push	r15
    4cca:	0f 93       	push	r16
    4ccc:	1f 93       	push	r17
    4cce:	cf 93       	push	r28
    4cd0:	df 93       	push	r29
    4cd2:	ec 01       	movw	r28, r24
    4cd4:	6a 01       	movw	r12, r20
    4cd6:	7b 01       	movw	r14, r22
    4cd8:	21 15       	cp	r18, r1
    4cda:	31 05       	cpc	r19, r1
    4cdc:	79 f4       	brne	.+30     	; 0x4cfc <_ZN5Print5printEli+0x3a>
    4cde:	e8 81       	ld	r30, Y
    4ce0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ce2:	01 90       	ld	r0, Z+
    4ce4:	f0 81       	ld	r31, Z
    4ce6:	e0 2d       	mov	r30, r0
    4ce8:	64 2f       	mov	r22, r20
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	09 94       	ijmp
    4cfc:	2a 30       	cpi	r18, 0x0A	; 10
    4cfe:	31 05       	cpc	r19, r1
    4d00:	d9 f4       	brne	.+54     	; 0x4d38 <_ZN5Print5printEli+0x76>
    4d02:	77 ff       	sbrs	r23, 7
    4d04:	18 c0       	rjmp	.+48     	; 0x4d36 <_ZN5Print5printEli+0x74>
    4d06:	6d e2       	ldi	r22, 0x2D	; 45
    4d08:	60 df       	rcall	.-320    	; 0x4bca <_ZN5Print5printEc>
    4d0a:	8c 01       	movw	r16, r24
    4d0c:	44 27       	eor	r20, r20
    4d0e:	55 27       	eor	r21, r21
    4d10:	ba 01       	movw	r22, r20
    4d12:	4c 19       	sub	r20, r12
    4d14:	5d 09       	sbc	r21, r13
    4d16:	6e 09       	sbc	r22, r14
    4d18:	7f 09       	sbc	r23, r15
    4d1a:	2a e0       	ldi	r18, 0x0A	; 10
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	7f df       	rcall	.-258    	; 0x4c1e <_ZN5Print11printNumberEmh>
    4d20:	80 0f       	add	r24, r16
    4d22:	91 1f       	adc	r25, r17
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	1f 91       	pop	r17
    4d2a:	0f 91       	pop	r16
    4d2c:	ff 90       	pop	r15
    4d2e:	ef 90       	pop	r14
    4d30:	df 90       	pop	r13
    4d32:	cf 90       	pop	r12
    4d34:	08 95       	ret
    4d36:	2a e0       	ldi	r18, 0x0A	; 10
    4d38:	b7 01       	movw	r22, r14
    4d3a:	a6 01       	movw	r20, r12
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	df 90       	pop	r13
    4d4c:	cf 90       	pop	r12
    4d4e:	67 cf       	rjmp	.-306    	; 0x4c1e <_ZN5Print11printNumberEmh>

00004d50 <_ZN5Print7printlnEii>:
    4d50:	0f 93       	push	r16
    4d52:	1f 93       	push	r17
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	ec 01       	movw	r28, r24
    4d5a:	9a 01       	movw	r18, r20
    4d5c:	ab 01       	movw	r20, r22
    4d5e:	77 0f       	add	r23, r23
    4d60:	66 0b       	sbc	r22, r22
    4d62:	77 0b       	sbc	r23, r23
    4d64:	ae df       	rcall	.-164    	; 0x4cc2 <_ZN5Print5printEli>
    4d66:	8c 01       	movw	r16, r24
    4d68:	ce 01       	movw	r24, r28
    4d6a:	36 df       	rcall	.-404    	; 0x4bd8 <_ZN5Print7printlnEv>
    4d6c:	80 0f       	add	r24, r16
    4d6e:	91 1f       	adc	r25, r17
    4d70:	df 91       	pop	r29
    4d72:	cf 91       	pop	r28
    4d74:	1f 91       	pop	r17
    4d76:	0f 91       	pop	r16
    4d78:	08 95       	ret

00004d7a <_ZN5Print5printEmi>:
    4d7a:	21 15       	cp	r18, r1
    4d7c:	31 05       	cpc	r19, r1
    4d7e:	41 f4       	brne	.+16     	; 0x4d90 <_ZN5Print5printEmi+0x16>
    4d80:	dc 01       	movw	r26, r24
    4d82:	ed 91       	ld	r30, X+
    4d84:	fc 91       	ld	r31, X
    4d86:	01 90       	ld	r0, Z+
    4d88:	f0 81       	ld	r31, Z
    4d8a:	e0 2d       	mov	r30, r0
    4d8c:	64 2f       	mov	r22, r20
    4d8e:	09 94       	ijmp
    4d90:	46 cf       	rjmp	.-372    	; 0x4c1e <_ZN5Print11printNumberEmh>

00004d92 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4d92:	0f 93       	push	r16
    4d94:	1f 93       	push	r17
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	ec 01       	movw	r28, r24
    4d9c:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4d9e:	46 2f       	mov	r20, r22
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	e9 df       	rcall	.-46     	; 0x4d7a <_ZN5Print5printEmi>
    4da8:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4daa:	ce 01       	movw	r24, r28
    4dac:	15 df       	rcall	.-470    	; 0x4bd8 <_ZN5Print7printlnEv>
  return n;
}
    4dae:	80 0f       	add	r24, r16
    4db0:	91 1f       	adc	r25, r17
    4db2:	df 91       	pop	r29
    4db4:	cf 91       	pop	r28
    4db6:	1f 91       	pop	r17
    4db8:	0f 91       	pop	r16
    4dba:	08 95       	ret

00004dbc <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4dbc:	1f 92       	push	r1
    4dbe:	0f 92       	push	r0
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	0f 92       	push	r0
    4dc4:	11 24       	eor	r1, r1
    4dc6:	2f 93       	push	r18
    4dc8:	3f 93       	push	r19
    4dca:	8f 93       	push	r24
    4dcc:	9f 93       	push	r25
    4dce:	af 93       	push	r26
    4dd0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4dd2:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <timer0_millis>
    4dd6:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <timer0_millis+0x1>
    4dda:	a0 91 60 05 	lds	r26, 0x0560	; 0x800560 <timer0_millis+0x2>
    4dde:	b0 91 61 05 	lds	r27, 0x0561	; 0x800561 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4de2:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4de6:	23 e0       	ldi	r18, 0x03	; 3
    4de8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4dea:	2d 37       	cpi	r18, 0x7D	; 125
    4dec:	20 f4       	brcc	.+8      	; 0x4df6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4dee:	01 96       	adiw	r24, 0x01	; 1
    4df0:	a1 1d       	adc	r26, r1
    4df2:	b1 1d       	adc	r27, r1
    4df4:	05 c0       	rjmp	.+10     	; 0x4e00 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4df6:	26 e8       	ldi	r18, 0x86	; 134
    4df8:	23 0f       	add	r18, r19
		m += 1;
    4dfa:	02 96       	adiw	r24, 0x02	; 2
    4dfc:	a1 1d       	adc	r26, r1
    4dfe:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4e00:	20 93 5d 05 	sts	0x055D, r18	; 0x80055d <timer0_fract>
	timer0_millis = m;
    4e04:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <timer0_millis>
    4e08:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <timer0_millis+0x1>
    4e0c:	a0 93 60 05 	sts	0x0560, r26	; 0x800560 <timer0_millis+0x2>
    4e10:	b0 93 61 05 	sts	0x0561, r27	; 0x800561 <timer0_millis+0x3>
	timer0_overflow_count++;
    4e14:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <timer0_overflow_count>
    4e18:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <timer0_overflow_count+0x1>
    4e1c:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <timer0_overflow_count+0x2>
    4e20:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <timer0_overflow_count+0x3>
    4e24:	01 96       	adiw	r24, 0x01	; 1
    4e26:	a1 1d       	adc	r26, r1
    4e28:	b1 1d       	adc	r27, r1
    4e2a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <timer0_overflow_count>
    4e2e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <timer0_overflow_count+0x1>
    4e32:	a0 93 64 05 	sts	0x0564, r26	; 0x800564 <timer0_overflow_count+0x2>
    4e36:	b0 93 65 05 	sts	0x0565, r27	; 0x800565 <timer0_overflow_count+0x3>
}
    4e3a:	bf 91       	pop	r27
    4e3c:	af 91       	pop	r26
    4e3e:	9f 91       	pop	r25
    4e40:	8f 91       	pop	r24
    4e42:	3f 91       	pop	r19
    4e44:	2f 91       	pop	r18
    4e46:	0f 90       	pop	r0
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	0f 90       	pop	r0
    4e4c:	1f 90       	pop	r1
    4e4e:	18 95       	reti

00004e50 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4e50:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4e52:	f8 94       	cli
	m = timer0_millis;
    4e54:	60 91 5e 05 	lds	r22, 0x055E	; 0x80055e <timer0_millis>
    4e58:	70 91 5f 05 	lds	r23, 0x055F	; 0x80055f <timer0_millis+0x1>
    4e5c:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <timer0_millis+0x2>
    4e60:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <timer0_millis+0x3>
	SREG = oldSREG;
    4e64:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4e66:	08 95       	ret

00004e68 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4e68:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4e6a:	f8 94       	cli
	m = timer0_overflow_count;
    4e6c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <timer0_overflow_count>
    4e70:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <timer0_overflow_count+0x1>
    4e74:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <timer0_overflow_count+0x2>
    4e78:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4e7c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4e7e:	a8 9b       	sbis	0x15, 0	; 21
    4e80:	05 c0       	rjmp	.+10     	; 0x4e8c <micros+0x24>
    4e82:	2f 3f       	cpi	r18, 0xFF	; 255
    4e84:	19 f0       	breq	.+6      	; 0x4e8c <micros+0x24>
		m++;
    4e86:	01 96       	adiw	r24, 0x01	; 1
    4e88:	a1 1d       	adc	r26, r1
    4e8a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4e8c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4e8e:	ba 2f       	mov	r27, r26
    4e90:	a9 2f       	mov	r26, r25
    4e92:	98 2f       	mov	r25, r24
    4e94:	88 27       	eor	r24, r24
    4e96:	82 0f       	add	r24, r18
    4e98:	91 1d       	adc	r25, r1
    4e9a:	a1 1d       	adc	r26, r1
    4e9c:	b1 1d       	adc	r27, r1
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	42 e0       	ldi	r20, 0x02	; 2
    4ea4:	66 0f       	add	r22, r22
    4ea6:	77 1f       	adc	r23, r23
    4ea8:	88 1f       	adc	r24, r24
    4eaa:	99 1f       	adc	r25, r25
    4eac:	4a 95       	dec	r20
    4eae:	d1 f7       	brne	.-12     	; 0x4ea4 <micros+0x3c>
}
    4eb0:	08 95       	ret

00004eb2 <delay>:

void delay(unsigned long ms)
{
    4eb2:	8f 92       	push	r8
    4eb4:	9f 92       	push	r9
    4eb6:	af 92       	push	r10
    4eb8:	bf 92       	push	r11
    4eba:	cf 92       	push	r12
    4ebc:	df 92       	push	r13
    4ebe:	ef 92       	push	r14
    4ec0:	ff 92       	push	r15
    4ec2:	6b 01       	movw	r12, r22
    4ec4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4ec6:	d0 df       	rcall	.-96     	; 0x4e68 <micros>
    4ec8:	4b 01       	movw	r8, r22
    4eca:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4ecc:	c1 14       	cp	r12, r1
    4ece:	d1 04       	cpc	r13, r1
    4ed0:	e1 04       	cpc	r14, r1
    4ed2:	f1 04       	cpc	r15, r1
    4ed4:	f1 f0       	breq	.+60     	; 0x4f12 <delay+0x60>
		yield();
    4ed6:	29 d4       	rcall	.+2130   	; 0x572a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4ed8:	c7 df       	rcall	.-114    	; 0x4e68 <micros>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	88 19       	sub	r24, r8
    4ee0:	99 09       	sbc	r25, r9
    4ee2:	aa 09       	sbc	r26, r10
    4ee4:	bb 09       	sbc	r27, r11
    4ee6:	88 3e       	cpi	r24, 0xE8	; 232
    4ee8:	93 40       	sbci	r25, 0x03	; 3
    4eea:	a1 05       	cpc	r26, r1
    4eec:	b1 05       	cpc	r27, r1
    4eee:	70 f3       	brcs	.-36     	; 0x4ecc <delay+0x1a>
			ms--;
    4ef0:	21 e0       	ldi	r18, 0x01	; 1
    4ef2:	c2 1a       	sub	r12, r18
    4ef4:	d1 08       	sbc	r13, r1
    4ef6:	e1 08       	sbc	r14, r1
    4ef8:	f1 08       	sbc	r15, r1
			start += 1000;
    4efa:	88 ee       	ldi	r24, 0xE8	; 232
    4efc:	88 0e       	add	r8, r24
    4efe:	83 e0       	ldi	r24, 0x03	; 3
    4f00:	98 1e       	adc	r9, r24
    4f02:	a1 1c       	adc	r10, r1
    4f04:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4f06:	c1 14       	cp	r12, r1
    4f08:	d1 04       	cpc	r13, r1
    4f0a:	e1 04       	cpc	r14, r1
    4f0c:	f1 04       	cpc	r15, r1
    4f0e:	21 f7       	brne	.-56     	; 0x4ed8 <delay+0x26>
    4f10:	dd cf       	rjmp	.-70     	; 0x4ecc <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    4f12:	ff 90       	pop	r15
    4f14:	ef 90       	pop	r14
    4f16:	df 90       	pop	r13
    4f18:	cf 90       	pop	r12
    4f1a:	bf 90       	pop	r11
    4f1c:	af 90       	pop	r10
    4f1e:	9f 90       	pop	r9
    4f20:	8f 90       	pop	r8
    4f22:	08 95       	ret

00004f24 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4f24:	82 30       	cpi	r24, 0x02	; 2
    4f26:	91 05       	cpc	r25, r1
    4f28:	38 f0       	brcs	.+14     	; 0x4f38 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4f2a:	88 0f       	add	r24, r24
    4f2c:	99 1f       	adc	r25, r25
    4f2e:	88 0f       	add	r24, r24
    4f30:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4f32:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4f34:	01 97       	sbiw	r24, 0x01	; 1
    4f36:	f1 f7       	brne	.-4      	; 0x4f34 <delayMicroseconds+0x10>
    4f38:	08 95       	ret

00004f3a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4f3a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4f3c:	84 b5       	in	r24, 0x24	; 36
    4f3e:	82 60       	ori	r24, 0x02	; 2
    4f40:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4f42:	84 b5       	in	r24, 0x24	; 36
    4f44:	81 60       	ori	r24, 0x01	; 1
    4f46:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4f48:	85 b5       	in	r24, 0x25	; 37
    4f4a:	82 60       	ori	r24, 0x02	; 2
    4f4c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4f4e:	85 b5       	in	r24, 0x25	; 37
    4f50:	81 60       	ori	r24, 0x01	; 1
    4f52:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4f54:	ee e6       	ldi	r30, 0x6E	; 110
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	80 81       	ld	r24, Z
    4f5a:	81 60       	ori	r24, 0x01	; 1
    4f5c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4f5e:	e1 e8       	ldi	r30, 0x81	; 129
    4f60:	f0 e0       	ldi	r31, 0x00	; 0
    4f62:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4f64:	80 81       	ld	r24, Z
    4f66:	82 60       	ori	r24, 0x02	; 2
    4f68:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4f6a:	80 81       	ld	r24, Z
    4f6c:	81 60       	ori	r24, 0x01	; 1
    4f6e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4f70:	e0 e8       	ldi	r30, 0x80	; 128
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	80 81       	ld	r24, Z
    4f76:	81 60       	ori	r24, 0x01	; 1
    4f78:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4f7a:	e1 eb       	ldi	r30, 0xB1	; 177
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	84 60       	ori	r24, 0x04	; 4
    4f82:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4f84:	e0 eb       	ldi	r30, 0xB0	; 176
    4f86:	f0 e0       	ldi	r31, 0x00	; 0
    4f88:	80 81       	ld	r24, Z
    4f8a:	81 60       	ori	r24, 0x01	; 1
    4f8c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4f8e:	ea e7       	ldi	r30, 0x7A	; 122
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	84 60       	ori	r24, 0x04	; 4
    4f96:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4f98:	80 81       	ld	r24, Z
    4f9a:	82 60       	ori	r24, 0x02	; 2
    4f9c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4f9e:	80 81       	ld	r24, Z
    4fa0:	81 60       	ori	r24, 0x01	; 1
    4fa2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4fa4:	80 81       	ld	r24, Z
    4fa6:	80 68       	ori	r24, 0x80	; 128
    4fa8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4faa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4fae:	08 95       	ret

00004fb0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4fb0:	8e 30       	cpi	r24, 0x0E	; 14
    4fb2:	08 f0       	brcs	.+2      	; 0x4fb6 <analogRead+0x6>
    4fb4:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4fb6:	87 70       	andi	r24, 0x07	; 7
    4fb8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <analog_reference>
    4fbc:	90 e4       	ldi	r25, 0x40	; 64
    4fbe:	29 9f       	mul	r18, r25
    4fc0:	90 01       	movw	r18, r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	82 2b       	or	r24, r18
    4fc6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4fca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4fce:	80 64       	ori	r24, 0x40	; 64
    4fd0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4fd4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4fd8:	86 fd       	sbrc	r24, 6
    4fda:	fc cf       	rjmp	.-8      	; 0x4fd4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4fdc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4fe0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
}
    4fe6:	92 2b       	or	r25, r18
    4fe8:	08 95       	ret

00004fea <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4fea:	83 30       	cpi	r24, 0x03	; 3
    4fec:	81 f0       	breq	.+32     	; 0x500e <turnOffPWM+0x24>
    4fee:	28 f4       	brcc	.+10     	; 0x4ffa <turnOffPWM+0x10>
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	99 f0       	breq	.+38     	; 0x501a <turnOffPWM+0x30>
    4ff4:	82 30       	cpi	r24, 0x02	; 2
    4ff6:	a1 f0       	breq	.+40     	; 0x5020 <turnOffPWM+0x36>
    4ff8:	08 95       	ret
    4ffa:	87 30       	cpi	r24, 0x07	; 7
    4ffc:	a9 f0       	breq	.+42     	; 0x5028 <turnOffPWM+0x3e>
    4ffe:	88 30       	cpi	r24, 0x08	; 8
    5000:	b9 f0       	breq	.+46     	; 0x5030 <turnOffPWM+0x46>
    5002:	84 30       	cpi	r24, 0x04	; 4
    5004:	d1 f4       	brne	.+52     	; 0x503a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5006:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    500a:	8f 7d       	andi	r24, 0xDF	; 223
    500c:	03 c0       	rjmp	.+6      	; 0x5014 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    500e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5012:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5014:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5018:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    501a:	84 b5       	in	r24, 0x24	; 36
    501c:	8f 77       	andi	r24, 0x7F	; 127
    501e:	02 c0       	rjmp	.+4      	; 0x5024 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5020:	84 b5       	in	r24, 0x24	; 36
    5022:	8f 7d       	andi	r24, 0xDF	; 223
    5024:	84 bd       	out	0x24, r24	; 36
    5026:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5028:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    502c:	8f 77       	andi	r24, 0x7F	; 127
    502e:	03 c0       	rjmp	.+6      	; 0x5036 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5030:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5034:	8f 7d       	andi	r24, 0xDF	; 223
    5036:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    503a:	08 95       	ret

0000503c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	fc 01       	movw	r30, r24
    5044:	e3 5f       	subi	r30, 0xF3	; 243
    5046:	fb 4f       	sbci	r31, 0xFB	; 251
    5048:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    504a:	fc 01       	movw	r30, r24
    504c:	ef 5d       	subi	r30, 0xDF	; 223
    504e:	fb 4f       	sbci	r31, 0xFB	; 251
    5050:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5052:	88 23       	and	r24, r24
    5054:	61 f1       	breq	.+88     	; 0x50ae <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	88 0f       	add	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	fc 01       	movw	r30, r24
    505e:	e7 5b       	subi	r30, 0xB7	; 183
    5060:	fb 4f       	sbci	r31, 0xFB	; 251
    5062:	c5 91       	lpm	r28, Z+
    5064:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5066:	fc 01       	movw	r30, r24
    5068:	e1 5c       	subi	r30, 0xC1	; 193
    506a:	fb 4f       	sbci	r31, 0xFB	; 251
    506c:	a5 91       	lpm	r26, Z+
    506e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5070:	61 11       	cpse	r22, r1
    5072:	09 c0       	rjmp	.+18     	; 0x5086 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5074:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5076:	f8 94       	cli
		*reg &= ~bit;
    5078:	88 81       	ld	r24, Y
    507a:	20 95       	com	r18
    507c:	82 23       	and	r24, r18
    507e:	88 83       	st	Y, r24
		*out &= ~bit;
    5080:	ec 91       	ld	r30, X
    5082:	2e 23       	and	r18, r30
    5084:	0b c0       	rjmp	.+22     	; 0x509c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5086:	62 30       	cpi	r22, 0x02	; 2
    5088:	61 f4       	brne	.+24     	; 0x50a2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    508a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    508c:	f8 94       	cli
		*reg &= ~bit;
    508e:	38 81       	ld	r19, Y
    5090:	82 2f       	mov	r24, r18
    5092:	80 95       	com	r24
    5094:	83 23       	and	r24, r19
    5096:	88 83       	st	Y, r24
		*out |= bit;
    5098:	ec 91       	ld	r30, X
    509a:	2e 2b       	or	r18, r30
    509c:	2c 93       	st	X, r18
		SREG = oldSREG;
    509e:	9f bf       	out	0x3f, r25	; 63
    50a0:	06 c0       	rjmp	.+12     	; 0x50ae <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    50a2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    50a4:	f8 94       	cli
		*reg |= bit;
    50a6:	e8 81       	ld	r30, Y
    50a8:	2e 2b       	or	r18, r30
    50aa:	28 83       	st	Y, r18
		SREG = oldSREG;
    50ac:	8f bf       	out	0x3f, r24	; 63
	}
}
    50ae:	df 91       	pop	r29
    50b0:	cf 91       	pop	r28
    50b2:	08 95       	ret

000050b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    50b4:	1f 93       	push	r17
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    50ba:	28 2f       	mov	r18, r24
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	f9 01       	movw	r30, r18
    50c0:	e7 50       	subi	r30, 0x07	; 7
    50c2:	fc 4f       	sbci	r31, 0xFC	; 252
    50c4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    50c6:	f9 01       	movw	r30, r18
    50c8:	e3 5f       	subi	r30, 0xF3	; 243
    50ca:	fb 4f       	sbci	r31, 0xFB	; 251
    50cc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    50ce:	f9 01       	movw	r30, r18
    50d0:	ef 5d       	subi	r30, 0xDF	; 223
    50d2:	fb 4f       	sbci	r31, 0xFB	; 251
    50d4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    50d6:	cc 23       	and	r28, r28
    50d8:	c1 f0       	breq	.+48     	; 0x510a <digitalWrite+0x56>
    50da:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    50dc:	81 11       	cpse	r24, r1
    50de:	85 df       	rcall	.-246    	; 0x4fea <turnOffPWM>

	out = portOutputRegister(port);
    50e0:	ec 2f       	mov	r30, r28
    50e2:	f0 e0       	ldi	r31, 0x00	; 0
    50e4:	ee 0f       	add	r30, r30
    50e6:	ff 1f       	adc	r31, r31
    50e8:	e1 5c       	subi	r30, 0xC1	; 193
    50ea:	fb 4f       	sbci	r31, 0xFB	; 251
    50ec:	a5 91       	lpm	r26, Z+
    50ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    50f0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    50f2:	f8 94       	cli

	if (val == LOW) {
    50f4:	11 11       	cpse	r17, r1
    50f6:	05 c0       	rjmp	.+10     	; 0x5102 <digitalWrite+0x4e>
		*out &= ~bit;
    50f8:	9c 91       	ld	r25, X
    50fa:	ed 2f       	mov	r30, r29
    50fc:	e0 95       	com	r30
    50fe:	e9 23       	and	r30, r25
    5100:	02 c0       	rjmp	.+4      	; 0x5106 <digitalWrite+0x52>
	} else {
		*out |= bit;
    5102:	ec 91       	ld	r30, X
    5104:	ed 2b       	or	r30, r29
    5106:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    5108:	8f bf       	out	0x3f, r24	; 63
}
    510a:	df 91       	pop	r29
    510c:	cf 91       	pop	r28
    510e:	1f 91       	pop	r17
    5110:	08 95       	ret

00005112 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5116:	28 2f       	mov	r18, r24
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	f9 01       	movw	r30, r18
    511c:	e7 50       	subi	r30, 0x07	; 7
    511e:	fc 4f       	sbci	r31, 0xFC	; 252
    5120:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5122:	f9 01       	movw	r30, r18
    5124:	e3 5f       	subi	r30, 0xF3	; 243
    5126:	fb 4f       	sbci	r31, 0xFB	; 251
    5128:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    512a:	f9 01       	movw	r30, r18
    512c:	ef 5d       	subi	r30, 0xDF	; 223
    512e:	fb 4f       	sbci	r31, 0xFB	; 251
    5130:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5132:	cc 23       	and	r28, r28
    5134:	89 f0       	breq	.+34     	; 0x5158 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5136:	81 11       	cpse	r24, r1
    5138:	58 df       	rcall	.-336    	; 0x4fea <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    513a:	ec 2f       	mov	r30, r28
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	ee 0f       	add	r30, r30
    5140:	ff 1f       	adc	r31, r31
    5142:	eb 5c       	subi	r30, 0xCB	; 203
    5144:	fb 4f       	sbci	r31, 0xFB	; 251
    5146:	a5 91       	lpm	r26, Z+
    5148:	b4 91       	lpm	r27, Z
    514a:	ec 91       	ld	r30, X
    514c:	ed 23       	and	r30, r29
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	21 f4       	brne	.+8      	; 0x515c <digitalRead+0x4a>
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	02 c0       	rjmp	.+4      	; 0x515c <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	08 95       	ret

00005162 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    5162:	fc 01       	movw	r30, r24
    5164:	80 81       	ld	r24, Z
    5166:	91 81       	ldd	r25, Z+1	; 0x01
    5168:	29 c4       	rjmp	.+2130   	; 0x59bc <free>

0000516a <_ZN6String10invalidateEv>:
    516a:	cf 93       	push	r28
    516c:	df 93       	push	r29
    516e:	ec 01       	movw	r28, r24
    5170:	88 81       	ld	r24, Y
    5172:	99 81       	ldd	r25, Y+1	; 0x01
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	09 f0       	breq	.+2      	; 0x517a <_ZN6String10invalidateEv+0x10>
    5178:	21 d4       	rcall	.+2114   	; 0x59bc <free>
    517a:	19 82       	std	Y+1, r1	; 0x01
    517c:	18 82       	st	Y, r1
    517e:	1d 82       	std	Y+5, r1	; 0x05
    5180:	1c 82       	std	Y+4, r1	; 0x04
    5182:	1b 82       	std	Y+3, r1	; 0x03
    5184:	1a 82       	std	Y+2, r1	; 0x02
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	08 95       	ret

0000518c <_ZN6String12changeBufferEj>:
    518c:	0f 93       	push	r16
    518e:	1f 93       	push	r17
    5190:	cf 93       	push	r28
    5192:	df 93       	push	r29
    5194:	ec 01       	movw	r28, r24
    5196:	8b 01       	movw	r16, r22
    5198:	6f 5f       	subi	r22, 0xFF	; 255
    519a:	7f 4f       	sbci	r23, 0xFF	; 255
    519c:	88 81       	ld	r24, Y
    519e:	99 81       	ldd	r25, Y+1	; 0x01
    51a0:	a5 d4       	rcall	.+2378   	; 0x5aec <realloc>
    51a2:	00 97       	sbiw	r24, 0x00	; 0
    51a4:	31 f0       	breq	.+12     	; 0x51b2 <_ZN6String12changeBufferEj+0x26>
    51a6:	99 83       	std	Y+1, r25	; 0x01
    51a8:	88 83       	st	Y, r24
    51aa:	1b 83       	std	Y+3, r17	; 0x03
    51ac:	0a 83       	std	Y+2, r16	; 0x02
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <_ZN6String12changeBufferEj+0x28>
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	08 95       	ret

000051be <_ZN6String7reserveEj>:
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	ec 01       	movw	r28, r24
    51c4:	88 81       	ld	r24, Y
    51c6:	99 81       	ldd	r25, Y+1	; 0x01
    51c8:	89 2b       	or	r24, r25
    51ca:	29 f0       	breq	.+10     	; 0x51d6 <_ZN6String7reserveEj+0x18>
    51cc:	8a 81       	ldd	r24, Y+2	; 0x02
    51ce:	9b 81       	ldd	r25, Y+3	; 0x03
    51d0:	86 17       	cp	r24, r22
    51d2:	97 07       	cpc	r25, r23
    51d4:	58 f4       	brcc	.+22     	; 0x51ec <_ZN6String7reserveEj+0x2e>
    51d6:	ce 01       	movw	r24, r28
    51d8:	d9 df       	rcall	.-78     	; 0x518c <_ZN6String12changeBufferEj>
    51da:	88 23       	and	r24, r24
    51dc:	41 f0       	breq	.+16     	; 0x51ee <_ZN6String7reserveEj+0x30>
    51de:	8c 81       	ldd	r24, Y+4	; 0x04
    51e0:	9d 81       	ldd	r25, Y+5	; 0x05
    51e2:	89 2b       	or	r24, r25
    51e4:	19 f4       	brne	.+6      	; 0x51ec <_ZN6String7reserveEj+0x2e>
    51e6:	e8 81       	ld	r30, Y
    51e8:	f9 81       	ldd	r31, Y+1	; 0x01
    51ea:	10 82       	st	Z, r1
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	08 95       	ret

000051f4 <_ZN6String4copyEPKcj>:
    51f4:	ef 92       	push	r14
    51f6:	ff 92       	push	r15
    51f8:	0f 93       	push	r16
    51fa:	1f 93       	push	r17
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	ec 01       	movw	r28, r24
    5202:	7b 01       	movw	r14, r22
    5204:	8a 01       	movw	r16, r20
    5206:	ba 01       	movw	r22, r20
    5208:	da df       	rcall	.-76     	; 0x51be <_ZN6String7reserveEj>
    520a:	81 11       	cpse	r24, r1
    520c:	03 c0       	rjmp	.+6      	; 0x5214 <_ZN6String4copyEPKcj+0x20>
    520e:	ce 01       	movw	r24, r28
    5210:	ac df       	rcall	.-168    	; 0x516a <_ZN6String10invalidateEv>
    5212:	06 c0       	rjmp	.+12     	; 0x5220 <_ZN6String4copyEPKcj+0x2c>
    5214:	1d 83       	std	Y+5, r17	; 0x05
    5216:	0c 83       	std	Y+4, r16	; 0x04
    5218:	b7 01       	movw	r22, r14
    521a:	88 81       	ld	r24, Y
    521c:	99 81       	ldd	r25, Y+1	; 0x01
    521e:	de d6       	rcall	.+3516   	; 0x5fdc <strcpy>
    5220:	ce 01       	movw	r24, r28
    5222:	df 91       	pop	r29
    5224:	cf 91       	pop	r28
    5226:	1f 91       	pop	r17
    5228:	0f 91       	pop	r16
    522a:	ff 90       	pop	r15
    522c:	ef 90       	pop	r14
    522e:	08 95       	ret

00005230 <_ZN6StringC1EPKc>:
    5230:	fc 01       	movw	r30, r24
    5232:	11 82       	std	Z+1, r1	; 0x01
    5234:	10 82       	st	Z, r1
    5236:	13 82       	std	Z+3, r1	; 0x03
    5238:	12 82       	std	Z+2, r1	; 0x02
    523a:	15 82       	std	Z+5, r1	; 0x05
    523c:	14 82       	std	Z+4, r1	; 0x04
    523e:	61 15       	cp	r22, r1
    5240:	71 05       	cpc	r23, r1
    5242:	49 f0       	breq	.+18     	; 0x5256 <_ZN6StringC1EPKc+0x26>
    5244:	fb 01       	movw	r30, r22
    5246:	01 90       	ld	r0, Z+
    5248:	00 20       	and	r0, r0
    524a:	e9 f7       	brne	.-6      	; 0x5246 <_ZN6StringC1EPKc+0x16>
    524c:	31 97       	sbiw	r30, 0x01	; 1
    524e:	af 01       	movw	r20, r30
    5250:	46 1b       	sub	r20, r22
    5252:	57 0b       	sbc	r21, r23
    5254:	cf cf       	rjmp	.-98     	; 0x51f4 <_ZN6String4copyEPKcj>
    5256:	08 95       	ret

00005258 <_ZN6StringaSERKS_>:
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	ec 01       	movw	r28, r24
    525e:	fb 01       	movw	r30, r22
    5260:	86 17       	cp	r24, r22
    5262:	97 07       	cpc	r25, r23
    5264:	51 f0       	breq	.+20     	; 0x527a <_ZN6StringaSERKS_+0x22>
    5266:	60 81       	ld	r22, Z
    5268:	71 81       	ldd	r23, Z+1	; 0x01
    526a:	61 15       	cp	r22, r1
    526c:	71 05       	cpc	r23, r1
    526e:	21 f0       	breq	.+8      	; 0x5278 <_ZN6StringaSERKS_+0x20>
    5270:	44 81       	ldd	r20, Z+4	; 0x04
    5272:	55 81       	ldd	r21, Z+5	; 0x05
    5274:	bf df       	rcall	.-130    	; 0x51f4 <_ZN6String4copyEPKcj>
    5276:	01 c0       	rjmp	.+2      	; 0x527a <_ZN6StringaSERKS_+0x22>
    5278:	78 df       	rcall	.-272    	; 0x516a <_ZN6String10invalidateEv>
    527a:	ce 01       	movw	r24, r28
    527c:	df 91       	pop	r29
    527e:	cf 91       	pop	r28
    5280:	08 95       	ret

00005282 <_ZN6StringC1ERKS_>:
    5282:	fc 01       	movw	r30, r24
    5284:	11 82       	std	Z+1, r1	; 0x01
    5286:	10 82       	st	Z, r1
    5288:	13 82       	std	Z+3, r1	; 0x03
    528a:	12 82       	std	Z+2, r1	; 0x02
    528c:	15 82       	std	Z+5, r1	; 0x05
    528e:	14 82       	std	Z+4, r1	; 0x04
    5290:	e3 cf       	rjmp	.-58     	; 0x5258 <_ZN6StringaSERKS_>

00005292 <_ZN6StringaSEPKc>:
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	ec 01       	movw	r28, r24
    5298:	61 15       	cp	r22, r1
    529a:	71 05       	cpc	r23, r1
    529c:	51 f0       	breq	.+20     	; 0x52b2 <_ZN6StringaSEPKc+0x20>
    529e:	fb 01       	movw	r30, r22
    52a0:	01 90       	ld	r0, Z+
    52a2:	00 20       	and	r0, r0
    52a4:	e9 f7       	brne	.-6      	; 0x52a0 <_ZN6StringaSEPKc+0xe>
    52a6:	31 97       	sbiw	r30, 0x01	; 1
    52a8:	af 01       	movw	r20, r30
    52aa:	46 1b       	sub	r20, r22
    52ac:	57 0b       	sbc	r21, r23
    52ae:	a2 df       	rcall	.-188    	; 0x51f4 <_ZN6String4copyEPKcj>
    52b0:	01 c0       	rjmp	.+2      	; 0x52b4 <_ZN6StringaSEPKc+0x22>
    52b2:	5b df       	rcall	.-330    	; 0x516a <_ZN6String10invalidateEv>
    52b4:	ce 01       	movw	r24, r28
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	08 95       	ret

000052bc <_ZN6StringC1Eih>:
    52bc:	0f 93       	push	r16
    52be:	1f 93       	push	r17
    52c0:	cf 93       	push	r28
    52c2:	df 93       	push	r29
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	62 97       	sbiw	r28, 0x12	; 18
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	f8 94       	cli
    52ce:	de bf       	out	0x3e, r29	; 62
    52d0:	0f be       	out	0x3f, r0	; 63
    52d2:	cd bf       	out	0x3d, r28	; 61
    52d4:	8c 01       	movw	r16, r24
    52d6:	cb 01       	movw	r24, r22
    52d8:	f8 01       	movw	r30, r16
    52da:	11 82       	std	Z+1, r1	; 0x01
    52dc:	10 82       	st	Z, r1
    52de:	13 82       	std	Z+3, r1	; 0x03
    52e0:	12 82       	std	Z+2, r1	; 0x02
    52e2:	15 82       	std	Z+5, r1	; 0x05
    52e4:	14 82       	std	Z+4, r1	; 0x04
    52e6:	50 e0       	ldi	r21, 0x00	; 0
    52e8:	be 01       	movw	r22, r28
    52ea:	6f 5f       	subi	r22, 0xFF	; 255
    52ec:	7f 4f       	sbci	r23, 0xFF	; 255
    52ee:	8b d6       	rcall	.+3350   	; 0x6006 <itoa>
    52f0:	be 01       	movw	r22, r28
    52f2:	6f 5f       	subi	r22, 0xFF	; 255
    52f4:	7f 4f       	sbci	r23, 0xFF	; 255
    52f6:	c8 01       	movw	r24, r16
    52f8:	cc df       	rcall	.-104    	; 0x5292 <_ZN6StringaSEPKc>
    52fa:	62 96       	adiw	r28, 0x12	; 18
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	cd bf       	out	0x3d, r28	; 61
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	1f 91       	pop	r17
    530c:	0f 91       	pop	r16
    530e:	08 95       	ret

00005310 <_ZN6StringC1Elh>:
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	a2 97       	sbiw	r28, 0x22	; 34
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    5328:	8c 01       	movw	r16, r24
    532a:	cb 01       	movw	r24, r22
    532c:	ba 01       	movw	r22, r20
    532e:	f8 01       	movw	r30, r16
    5330:	11 82       	std	Z+1, r1	; 0x01
    5332:	10 82       	st	Z, r1
    5334:	13 82       	std	Z+3, r1	; 0x03
    5336:	12 82       	std	Z+2, r1	; 0x02
    5338:	15 82       	std	Z+5, r1	; 0x05
    533a:	14 82       	std	Z+4, r1	; 0x04
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	ae 01       	movw	r20, r28
    5340:	4f 5f       	subi	r20, 0xFF	; 255
    5342:	5f 4f       	sbci	r21, 0xFF	; 255
    5344:	74 d6       	rcall	.+3304   	; 0x602e <ltoa>
    5346:	be 01       	movw	r22, r28
    5348:	6f 5f       	subi	r22, 0xFF	; 255
    534a:	7f 4f       	sbci	r23, 0xFF	; 255
    534c:	c8 01       	movw	r24, r16
    534e:	a1 df       	rcall	.-190    	; 0x5292 <_ZN6StringaSEPKc>
    5350:	a2 96       	adiw	r28, 0x22	; 34
    5352:	0f b6       	in	r0, 0x3f	; 63
    5354:	f8 94       	cli
    5356:	de bf       	out	0x3e, r29	; 62
    5358:	0f be       	out	0x3f, r0	; 63
    535a:	cd bf       	out	0x3d, r28	; 61
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	1f 91       	pop	r17
    5362:	0f 91       	pop	r16
    5364:	08 95       	ret

00005366 <_ZN6StringC1Efh>:
    5366:	ef 92       	push	r14
    5368:	ff 92       	push	r15
    536a:	0f 93       	push	r16
    536c:	1f 93       	push	r17
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	a1 97       	sbiw	r28, 0x21	; 33
    5378:	0f b6       	in	r0, 0x3f	; 63
    537a:	f8 94       	cli
    537c:	de bf       	out	0x3e, r29	; 62
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	cd bf       	out	0x3d, r28	; 61
    5382:	7c 01       	movw	r14, r24
    5384:	cb 01       	movw	r24, r22
    5386:	ba 01       	movw	r22, r20
    5388:	f7 01       	movw	r30, r14
    538a:	11 82       	std	Z+1, r1	; 0x01
    538c:	10 82       	st	Z, r1
    538e:	13 82       	std	Z+3, r1	; 0x03
    5390:	12 82       	std	Z+2, r1	; 0x02
    5392:	15 82       	std	Z+5, r1	; 0x05
    5394:	14 82       	std	Z+4, r1	; 0x04
    5396:	42 e0       	ldi	r20, 0x02	; 2
    5398:	42 0f       	add	r20, r18
    539a:	8e 01       	movw	r16, r28
    539c:	0f 5f       	subi	r16, 0xFF	; 255
    539e:	1f 4f       	sbci	r17, 0xFF	; 255
    53a0:	59 d2       	rcall	.+1202   	; 0x5854 <dtostrf>
    53a2:	bc 01       	movw	r22, r24
    53a4:	c7 01       	movw	r24, r14
    53a6:	75 df       	rcall	.-278    	; 0x5292 <_ZN6StringaSEPKc>
    53a8:	a1 96       	adiw	r28, 0x21	; 33
    53aa:	0f b6       	in	r0, 0x3f	; 63
    53ac:	f8 94       	cli
    53ae:	de bf       	out	0x3e, r29	; 62
    53b0:	0f be       	out	0x3f, r0	; 63
    53b2:	cd bf       	out	0x3d, r28	; 61
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	1f 91       	pop	r17
    53ba:	0f 91       	pop	r16
    53bc:	ff 90       	pop	r15
    53be:	ef 90       	pop	r14
    53c0:	08 95       	ret

000053c2 <_ZN6StringC1Edh>:
    53c2:	ef 92       	push	r14
    53c4:	ff 92       	push	r15
    53c6:	0f 93       	push	r16
    53c8:	1f 93       	push	r17
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	cd b7       	in	r28, 0x3d	; 61
    53d0:	de b7       	in	r29, 0x3e	; 62
    53d2:	a1 97       	sbiw	r28, 0x21	; 33
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	f8 94       	cli
    53d8:	de bf       	out	0x3e, r29	; 62
    53da:	0f be       	out	0x3f, r0	; 63
    53dc:	cd bf       	out	0x3d, r28	; 61
    53de:	7c 01       	movw	r14, r24
    53e0:	cb 01       	movw	r24, r22
    53e2:	ba 01       	movw	r22, r20
    53e4:	f7 01       	movw	r30, r14
    53e6:	11 82       	std	Z+1, r1	; 0x01
    53e8:	10 82       	st	Z, r1
    53ea:	13 82       	std	Z+3, r1	; 0x03
    53ec:	12 82       	std	Z+2, r1	; 0x02
    53ee:	15 82       	std	Z+5, r1	; 0x05
    53f0:	14 82       	std	Z+4, r1	; 0x04
    53f2:	42 e0       	ldi	r20, 0x02	; 2
    53f4:	42 0f       	add	r20, r18
    53f6:	8e 01       	movw	r16, r28
    53f8:	0f 5f       	subi	r16, 0xFF	; 255
    53fa:	1f 4f       	sbci	r17, 0xFF	; 255
    53fc:	2b d2       	rcall	.+1110   	; 0x5854 <dtostrf>
    53fe:	bc 01       	movw	r22, r24
    5400:	c7 01       	movw	r24, r14
    5402:	47 df       	rcall	.-370    	; 0x5292 <_ZN6StringaSEPKc>
    5404:	a1 96       	adiw	r28, 0x21	; 33
    5406:	0f b6       	in	r0, 0x3f	; 63
    5408:	f8 94       	cli
    540a:	de bf       	out	0x3e, r29	; 62
    540c:	0f be       	out	0x3f, r0	; 63
    540e:	cd bf       	out	0x3d, r28	; 61
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	ff 90       	pop	r15
    541a:	ef 90       	pop	r14
    541c:	08 95       	ret

0000541e <_ZN6String6concatEPKcj>:
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	fc 01       	movw	r30, r24
    542c:	24 81       	ldd	r18, Z+4	; 0x04
    542e:	35 81       	ldd	r19, Z+5	; 0x05
    5430:	61 15       	cp	r22, r1
    5432:	71 05       	cpc	r23, r1
    5434:	11 f4       	brne	.+4      	; 0x543a <_ZN6String6concatEPKcj+0x1c>
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	17 c0       	rjmp	.+46     	; 0x5468 <_ZN6String6concatEPKcj+0x4a>
    543a:	41 15       	cp	r20, r1
    543c:	51 05       	cpc	r21, r1
    543e:	99 f0       	breq	.+38     	; 0x5466 <_ZN6String6concatEPKcj+0x48>
    5440:	7b 01       	movw	r14, r22
    5442:	ec 01       	movw	r28, r24
    5444:	8a 01       	movw	r16, r20
    5446:	02 0f       	add	r16, r18
    5448:	13 1f       	adc	r17, r19
    544a:	b8 01       	movw	r22, r16
    544c:	b8 de       	rcall	.-656    	; 0x51be <_ZN6String7reserveEj>
    544e:	88 23       	and	r24, r24
    5450:	91 f3       	breq	.-28     	; 0x5436 <_ZN6String6concatEPKcj+0x18>
    5452:	28 81       	ld	r18, Y
    5454:	39 81       	ldd	r19, Y+1	; 0x01
    5456:	8c 81       	ldd	r24, Y+4	; 0x04
    5458:	9d 81       	ldd	r25, Y+5	; 0x05
    545a:	b7 01       	movw	r22, r14
    545c:	82 0f       	add	r24, r18
    545e:	93 1f       	adc	r25, r19
    5460:	bd d5       	rcall	.+2938   	; 0x5fdc <strcpy>
    5462:	1d 83       	std	Y+5, r17	; 0x05
    5464:	0c 83       	std	Y+4, r16	; 0x04
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	df 91       	pop	r29
    546a:	cf 91       	pop	r28
    546c:	1f 91       	pop	r17
    546e:	0f 91       	pop	r16
    5470:	ff 90       	pop	r15
    5472:	ef 90       	pop	r14
    5474:	08 95       	ret

00005476 <_ZN6String6concatEPKc>:
    5476:	61 15       	cp	r22, r1
    5478:	71 05       	cpc	r23, r1
    547a:	49 f0       	breq	.+18     	; 0x548e <_ZN6String6concatEPKc+0x18>
    547c:	fb 01       	movw	r30, r22
    547e:	01 90       	ld	r0, Z+
    5480:	00 20       	and	r0, r0
    5482:	e9 f7       	brne	.-6      	; 0x547e <_ZN6String6concatEPKc+0x8>
    5484:	31 97       	sbiw	r30, 0x01	; 1
    5486:	af 01       	movw	r20, r30
    5488:	46 1b       	sub	r20, r22
    548a:	57 0b       	sbc	r21, r23
    548c:	c8 cf       	rjmp	.-112    	; 0x541e <_ZN6String6concatEPKcj>
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	08 95       	ret

00005492 <_ZN6String6concatEc>:
    5492:	cf 93       	push	r28
    5494:	df 93       	push	r29
    5496:	00 d0       	rcall	.+0      	; 0x5498 <_ZN6String6concatEc+0x6>
    5498:	cd b7       	in	r28, 0x3d	; 61
    549a:	de b7       	in	r29, 0x3e	; 62
    549c:	69 83       	std	Y+1, r22	; 0x01
    549e:	1a 82       	std	Y+2, r1	; 0x02
    54a0:	41 e0       	ldi	r20, 0x01	; 1
    54a2:	50 e0       	ldi	r21, 0x00	; 0
    54a4:	be 01       	movw	r22, r28
    54a6:	6f 5f       	subi	r22, 0xFF	; 255
    54a8:	7f 4f       	sbci	r23, 0xFF	; 255
    54aa:	b9 df       	rcall	.-142    	; 0x541e <_ZN6String6concatEPKcj>
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	08 95       	ret

000054b6 <_ZplRK15StringSumHelperRK6String>:
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	ec 01       	movw	r28, r24
    54bc:	fb 01       	movw	r30, r22
    54be:	44 81       	ldd	r20, Z+4	; 0x04
    54c0:	55 81       	ldd	r21, Z+5	; 0x05
    54c2:	60 81       	ld	r22, Z
    54c4:	71 81       	ldd	r23, Z+1	; 0x01
    54c6:	ab df       	rcall	.-170    	; 0x541e <_ZN6String6concatEPKcj>
    54c8:	81 11       	cpse	r24, r1
    54ca:	02 c0       	rjmp	.+4      	; 0x54d0 <_ZplRK15StringSumHelperRK6String+0x1a>
    54cc:	ce 01       	movw	r24, r28
    54ce:	4d de       	rcall	.-870    	; 0x516a <_ZN6String10invalidateEv>
    54d0:	ce 01       	movw	r24, r28
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	08 95       	ret

000054d8 <_ZplRK15StringSumHelperPKc>:
    54d8:	cf 93       	push	r28
    54da:	df 93       	push	r29
    54dc:	ec 01       	movw	r28, r24
    54de:	61 15       	cp	r22, r1
    54e0:	71 05       	cpc	r23, r1
    54e2:	59 f0       	breq	.+22     	; 0x54fa <_ZplRK15StringSumHelperPKc+0x22>
    54e4:	fb 01       	movw	r30, r22
    54e6:	01 90       	ld	r0, Z+
    54e8:	00 20       	and	r0, r0
    54ea:	e9 f7       	brne	.-6      	; 0x54e6 <_ZplRK15StringSumHelperPKc+0xe>
    54ec:	31 97       	sbiw	r30, 0x01	; 1
    54ee:	af 01       	movw	r20, r30
    54f0:	46 1b       	sub	r20, r22
    54f2:	57 0b       	sbc	r21, r23
    54f4:	94 df       	rcall	.-216    	; 0x541e <_ZN6String6concatEPKcj>
    54f6:	81 11       	cpse	r24, r1
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <_ZplRK15StringSumHelperPKc+0x26>
    54fa:	ce 01       	movw	r24, r28
    54fc:	36 de       	rcall	.-916    	; 0x516a <_ZN6String10invalidateEv>
    54fe:	ce 01       	movw	r24, r28
    5500:	df 91       	pop	r29
    5502:	cf 91       	pop	r28
    5504:	08 95       	ret

00005506 <_ZNK6String6equalsEPKc>:
    5506:	fc 01       	movw	r30, r24
    5508:	24 81       	ldd	r18, Z+4	; 0x04
    550a:	35 81       	ldd	r19, Z+5	; 0x05
    550c:	23 2b       	or	r18, r19
    550e:	31 f4       	brne	.+12     	; 0x551c <_ZNK6String6equalsEPKc+0x16>
    5510:	21 e0       	ldi	r18, 0x01	; 1
    5512:	61 15       	cp	r22, r1
    5514:	71 05       	cpc	r23, r1
    5516:	99 f0       	breq	.+38     	; 0x553e <_ZNK6String6equalsEPKc+0x38>
    5518:	fb 01       	movw	r30, r22
    551a:	08 c0       	rjmp	.+16     	; 0x552c <_ZNK6String6equalsEPKc+0x26>
    551c:	fc 01       	movw	r30, r24
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	61 15       	cp	r22, r1
    5524:	71 05       	cpc	r23, r1
    5526:	31 f4       	brne	.+12     	; 0x5534 <_ZNK6String6equalsEPKc+0x2e>
    5528:	21 e0       	ldi	r18, 0x01	; 1
    552a:	fc 01       	movw	r30, r24
    552c:	80 81       	ld	r24, Z
    552e:	88 23       	and	r24, r24
    5530:	31 f0       	breq	.+12     	; 0x553e <_ZNK6String6equalsEPKc+0x38>
    5532:	04 c0       	rjmp	.+8      	; 0x553c <_ZNK6String6equalsEPKc+0x36>
    5534:	4a d5       	rcall	.+2708   	; 0x5fca <strcmp>
    5536:	21 e0       	ldi	r18, 0x01	; 1
    5538:	89 2b       	or	r24, r25
    553a:	09 f0       	breq	.+2      	; 0x553e <_ZNK6String6equalsEPKc+0x38>
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	82 2f       	mov	r24, r18
    5540:	08 95       	ret

00005542 <_ZNK6String10startsWithERKS_j>:
    5542:	db 01       	movw	r26, r22
    5544:	14 96       	adiw	r26, 0x04	; 4
    5546:	ed 91       	ld	r30, X+
    5548:	fc 91       	ld	r31, X
    554a:	15 97       	sbiw	r26, 0x05	; 5
    554c:	dc 01       	movw	r26, r24
    554e:	14 96       	adiw	r26, 0x04	; 4
    5550:	2d 91       	ld	r18, X+
    5552:	3c 91       	ld	r19, X
    5554:	15 97       	sbiw	r26, 0x05	; 5
    5556:	2e 1b       	sub	r18, r30
    5558:	3f 0b       	sbc	r19, r31
    555a:	24 17       	cp	r18, r20
    555c:	35 07       	cpc	r19, r21
    555e:	98 f0       	brcs	.+38     	; 0x5586 <_ZNK6String10startsWithERKS_j+0x44>
    5560:	2d 91       	ld	r18, X+
    5562:	3c 91       	ld	r19, X
    5564:	21 15       	cp	r18, r1
    5566:	31 05       	cpc	r19, r1
    5568:	71 f0       	breq	.+28     	; 0x5586 <_ZNK6String10startsWithERKS_j+0x44>
    556a:	db 01       	movw	r26, r22
    556c:	6d 91       	ld	r22, X+
    556e:	7c 91       	ld	r23, X
    5570:	61 15       	cp	r22, r1
    5572:	71 05       	cpc	r23, r1
    5574:	41 f0       	breq	.+16     	; 0x5586 <_ZNK6String10startsWithERKS_j+0x44>
    5576:	ca 01       	movw	r24, r20
    5578:	af 01       	movw	r20, r30
    557a:	82 0f       	add	r24, r18
    557c:	93 1f       	adc	r25, r19
    557e:	35 d5       	rcall	.+2666   	; 0x5fea <strncmp>
    5580:	21 e0       	ldi	r18, 0x01	; 1
    5582:	89 2b       	or	r24, r25
    5584:	09 f0       	breq	.+2      	; 0x5588 <_ZNK6String10startsWithERKS_j+0x46>
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	82 2f       	mov	r24, r18
    558a:	08 95       	ret

0000558c <_ZNK6String10startsWithERKS_>:
    558c:	fc 01       	movw	r30, r24
    558e:	44 81       	ldd	r20, Z+4	; 0x04
    5590:	55 81       	ldd	r21, Z+5	; 0x05
    5592:	fb 01       	movw	r30, r22
    5594:	24 81       	ldd	r18, Z+4	; 0x04
    5596:	35 81       	ldd	r19, Z+5	; 0x05
    5598:	42 17       	cp	r20, r18
    559a:	53 07       	cpc	r21, r19
    559c:	18 f0       	brcs	.+6      	; 0x55a4 <_ZNK6String10startsWithERKS_+0x18>
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	50 e0       	ldi	r21, 0x00	; 0
    55a2:	cf cf       	rjmp	.-98     	; 0x5542 <_ZNK6String10startsWithERKS_j>
    55a4:	80 e0       	ldi	r24, 0x00	; 0
    55a6:	08 95       	ret

000055a8 <_ZNK6StringixEj>:
    55a8:	fc 01       	movw	r30, r24
    55aa:	24 81       	ldd	r18, Z+4	; 0x04
    55ac:	35 81       	ldd	r19, Z+5	; 0x05
    55ae:	62 17       	cp	r22, r18
    55b0:	73 07       	cpc	r23, r19
    55b2:	48 f4       	brcc	.+18     	; 0x55c6 <_ZNK6StringixEj+0x1e>
    55b4:	80 81       	ld	r24, Z
    55b6:	91 81       	ldd	r25, Z+1	; 0x01
    55b8:	00 97       	sbiw	r24, 0x00	; 0
    55ba:	29 f0       	breq	.+10     	; 0x55c6 <_ZNK6StringixEj+0x1e>
    55bc:	fc 01       	movw	r30, r24
    55be:	e6 0f       	add	r30, r22
    55c0:	f7 1f       	adc	r31, r23
    55c2:	80 81       	ld	r24, Z
    55c4:	08 95       	ret
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	08 95       	ret

000055ca <_ZNK6String6charAtEj>:
    55ca:	ee cf       	rjmp	.-36     	; 0x55a8 <_ZNK6StringixEj>

000055cc <_ZNK6String9substringEjj>:
    55cc:	bf 92       	push	r11
    55ce:	cf 92       	push	r12
    55d0:	df 92       	push	r13
    55d2:	ef 92       	push	r14
    55d4:	ff 92       	push	r15
    55d6:	0f 93       	push	r16
    55d8:	1f 93       	push	r17
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	7c 01       	movw	r14, r24
    55e0:	6b 01       	movw	r12, r22
    55e2:	8a 01       	movw	r16, r20
    55e4:	e9 01       	movw	r28, r18
    55e6:	24 17       	cp	r18, r20
    55e8:	35 07       	cpc	r19, r21
    55ea:	20 f4       	brcc	.+8      	; 0x55f4 <_ZNK6String9substringEjj+0x28>
    55ec:	81 2f       	mov	r24, r17
    55ee:	89 01       	movw	r16, r18
    55f0:	c4 2f       	mov	r28, r20
    55f2:	d8 2f       	mov	r29, r24
    55f4:	61 ec       	ldi	r22, 0xC1	; 193
    55f6:	71 e0       	ldi	r23, 0x01	; 1
    55f8:	c7 01       	movw	r24, r14
    55fa:	1a de       	rcall	.-972    	; 0x5230 <_ZN6StringC1EPKc>
    55fc:	d6 01       	movw	r26, r12
    55fe:	14 96       	adiw	r26, 0x04	; 4
    5600:	8d 91       	ld	r24, X+
    5602:	9c 91       	ld	r25, X
    5604:	15 97       	sbiw	r26, 0x05	; 5
    5606:	08 17       	cp	r16, r24
    5608:	19 07       	cpc	r17, r25
    560a:	c8 f4       	brcc	.+50     	; 0x563e <_ZNK6String9substringEjj+0x72>
    560c:	8c 17       	cp	r24, r28
    560e:	9d 07       	cpc	r25, r29
    5610:	08 f4       	brcc	.+2      	; 0x5614 <_ZNK6String9substringEjj+0x48>
    5612:	ec 01       	movw	r28, r24
    5614:	d6 01       	movw	r26, r12
    5616:	ed 91       	ld	r30, X+
    5618:	fc 91       	ld	r31, X
    561a:	11 97       	sbiw	r26, 0x01	; 1
    561c:	ec 0f       	add	r30, r28
    561e:	fd 1f       	adc	r31, r29
    5620:	b0 80       	ld	r11, Z
    5622:	10 82       	st	Z, r1
    5624:	4d 91       	ld	r20, X+
    5626:	5c 91       	ld	r21, X
    5628:	ba 01       	movw	r22, r20
    562a:	60 0f       	add	r22, r16
    562c:	71 1f       	adc	r23, r17
    562e:	c7 01       	movw	r24, r14
    5630:	30 de       	rcall	.-928    	; 0x5292 <_ZN6StringaSEPKc>
    5632:	d6 01       	movw	r26, r12
    5634:	ed 91       	ld	r30, X+
    5636:	fc 91       	ld	r31, X
    5638:	ec 0f       	add	r30, r28
    563a:	fd 1f       	adc	r31, r29
    563c:	b0 82       	st	Z, r11
    563e:	c7 01       	movw	r24, r14
    5640:	df 91       	pop	r29
    5642:	cf 91       	pop	r28
    5644:	1f 91       	pop	r17
    5646:	0f 91       	pop	r16
    5648:	ff 90       	pop	r15
    564a:	ef 90       	pop	r14
    564c:	df 90       	pop	r13
    564e:	cf 90       	pop	r12
    5650:	bf 90       	pop	r11
    5652:	08 95       	ret

00005654 <_ZN6String4trimEv>:

void String::trim(void)
{
    5654:	af 92       	push	r10
    5656:	bf 92       	push	r11
    5658:	cf 92       	push	r12
    565a:	df 92       	push	r13
    565c:	ef 92       	push	r14
    565e:	ff 92       	push	r15
    5660:	0f 93       	push	r16
    5662:	1f 93       	push	r17
    5664:	cf 93       	push	r28
    5666:	df 93       	push	r29
	if (!buffer || len == 0) return;
    5668:	dc 01       	movw	r26, r24
    566a:	cd 90       	ld	r12, X+
    566c:	dc 90       	ld	r13, X
    566e:	11 97       	sbiw	r26, 0x01	; 1
    5670:	c1 14       	cp	r12, r1
    5672:	d1 04       	cpc	r13, r1
    5674:	d9 f1       	breq	.+118    	; 0x56ec <_ZN6String4trimEv+0x98>
    5676:	14 96       	adiw	r26, 0x04	; 4
    5678:	cd 91       	ld	r28, X+
    567a:	dc 91       	ld	r29, X
    567c:	15 97       	sbiw	r26, 0x05	; 5
    567e:	20 97       	sbiw	r28, 0x00	; 0
    5680:	a9 f1       	breq	.+106    	; 0x56ec <_ZN6String4trimEv+0x98>
    5682:	8c 01       	movw	r16, r24
    5684:	56 01       	movw	r10, r12
    5686:	75 01       	movw	r14, r10
    5688:	bf ef       	ldi	r27, 0xFF	; 255
    568a:	ab 1a       	sub	r10, r27
    568c:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    568e:	f7 01       	movw	r30, r14
    5690:	80 81       	ld	r24, Z
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	71 d4       	rcall	.+2274   	; 0x5f78 <isspace>
    5696:	89 2b       	or	r24, r25
    5698:	b1 f7       	brne	.-20     	; 0x5686 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    569a:	21 97       	sbiw	r28, 0x01	; 1
    569c:	cc 0d       	add	r28, r12
    569e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    56a0:	88 81       	ld	r24, Y
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	69 d4       	rcall	.+2258   	; 0x5f78 <isspace>
    56a6:	89 2b       	or	r24, r25
    56a8:	89 f4       	brne	.+34     	; 0x56cc <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    56aa:	ae 01       	movw	r20, r28
    56ac:	4f 5f       	subi	r20, 0xFF	; 255
    56ae:	5f 4f       	sbci	r21, 0xFF	; 255
    56b0:	4e 19       	sub	r20, r14
    56b2:	5f 09       	sbc	r21, r15
    56b4:	d8 01       	movw	r26, r16
    56b6:	15 96       	adiw	r26, 0x05	; 5
    56b8:	5c 93       	st	X, r21
    56ba:	4e 93       	st	-X, r20
    56bc:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    56be:	ce 14       	cp	r12, r14
    56c0:	df 04       	cpc	r13, r15
    56c2:	48 f4       	brcc	.+18     	; 0x56d6 <_ZN6String4trimEv+0x82>
    56c4:	b7 01       	movw	r22, r14
    56c6:	c6 01       	movw	r24, r12
    56c8:	77 d4       	rcall	.+2286   	; 0x5fb8 <memcpy>
    56ca:	05 c0       	rjmp	.+10     	; 0x56d6 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    56cc:	ce 15       	cp	r28, r14
    56ce:	df 05       	cpc	r29, r15
    56d0:	60 f3       	brcs	.-40     	; 0x56aa <_ZN6String4trimEv+0x56>
    56d2:	21 97       	sbiw	r28, 0x01	; 1
    56d4:	e5 cf       	rjmp	.-54     	; 0x56a0 <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    56d6:	d8 01       	movw	r26, r16
    56d8:	ed 91       	ld	r30, X+
    56da:	fc 91       	ld	r31, X
    56dc:	11 97       	sbiw	r26, 0x01	; 1
    56de:	14 96       	adiw	r26, 0x04	; 4
    56e0:	8d 91       	ld	r24, X+
    56e2:	9c 91       	ld	r25, X
    56e4:	15 97       	sbiw	r26, 0x05	; 5
    56e6:	e8 0f       	add	r30, r24
    56e8:	f9 1f       	adc	r31, r25
    56ea:	10 82       	st	Z, r1
}
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	1f 91       	pop	r17
    56f2:	0f 91       	pop	r16
    56f4:	ff 90       	pop	r15
    56f6:	ef 90       	pop	r14
    56f8:	df 90       	pop	r13
    56fa:	cf 90       	pop	r12
    56fc:	bf 90       	pop	r11
    56fe:	af 90       	pop	r10
    5700:	08 95       	ret

00005702 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    5702:	fc 01       	movw	r30, r24
    5704:	80 81       	ld	r24, Z
    5706:	91 81       	ldd	r25, Z+1	; 0x01
    5708:	00 97       	sbiw	r24, 0x00	; 0
    570a:	09 f0       	breq	.+2      	; 0x570e <_ZNK6String5toIntEv+0xc>
    570c:	0f c4       	rjmp	.+2078   	; 0x5f2c <atol>
	return 0;
}
    570e:	60 e0       	ldi	r22, 0x00	; 0
    5710:	70 e0       	ldi	r23, 0x00	; 0
    5712:	cb 01       	movw	r24, r22
    5714:	08 95       	ret

00005716 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    5716:	fc 01       	movw	r30, r24
    5718:	80 81       	ld	r24, Z
    571a:	91 81       	ldd	r25, Z+1	; 0x01
    571c:	00 97       	sbiw	r24, 0x00	; 0
    571e:	09 f0       	breq	.+2      	; 0x5722 <_ZNK6String7toFloatEv+0xc>
    5720:	02 c4       	rjmp	.+2052   	; 0x5f26 <atof>
	return 0;
}
    5722:	60 e0       	ldi	r22, 0x00	; 0
    5724:	70 e0       	ldi	r23, 0x00	; 0
    5726:	cb 01       	movw	r24, r22
    5728:	08 95       	ret

0000572a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    572a:	08 95       	ret

0000572c <__udivmodsi4>:
    572c:	a1 e2       	ldi	r26, 0x21	; 33
    572e:	1a 2e       	mov	r1, r26
    5730:	aa 1b       	sub	r26, r26
    5732:	bb 1b       	sub	r27, r27
    5734:	fd 01       	movw	r30, r26
    5736:	0d c0       	rjmp	.+26     	; 0x5752 <__udivmodsi4_ep>

00005738 <__udivmodsi4_loop>:
    5738:	aa 1f       	adc	r26, r26
    573a:	bb 1f       	adc	r27, r27
    573c:	ee 1f       	adc	r30, r30
    573e:	ff 1f       	adc	r31, r31
    5740:	a2 17       	cp	r26, r18
    5742:	b3 07       	cpc	r27, r19
    5744:	e4 07       	cpc	r30, r20
    5746:	f5 07       	cpc	r31, r21
    5748:	20 f0       	brcs	.+8      	; 0x5752 <__udivmodsi4_ep>
    574a:	a2 1b       	sub	r26, r18
    574c:	b3 0b       	sbc	r27, r19
    574e:	e4 0b       	sbc	r30, r20
    5750:	f5 0b       	sbc	r31, r21

00005752 <__udivmodsi4_ep>:
    5752:	66 1f       	adc	r22, r22
    5754:	77 1f       	adc	r23, r23
    5756:	88 1f       	adc	r24, r24
    5758:	99 1f       	adc	r25, r25
    575a:	1a 94       	dec	r1
    575c:	69 f7       	brne	.-38     	; 0x5738 <__udivmodsi4_loop>
    575e:	60 95       	com	r22
    5760:	70 95       	com	r23
    5762:	80 95       	com	r24
    5764:	90 95       	com	r25
    5766:	9b 01       	movw	r18, r22
    5768:	ac 01       	movw	r20, r24
    576a:	bd 01       	movw	r22, r26
    576c:	cf 01       	movw	r24, r30
    576e:	08 95       	ret

00005770 <__divmodsi4>:
    5770:	05 2e       	mov	r0, r21
    5772:	97 fb       	bst	r25, 7
    5774:	16 f4       	brtc	.+4      	; 0x577a <__divmodsi4+0xa>
    5776:	00 94       	com	r0
    5778:	0f d0       	rcall	.+30     	; 0x5798 <__negsi2>
    577a:	57 fd       	sbrc	r21, 7
    577c:	05 d0       	rcall	.+10     	; 0x5788 <__divmodsi4_neg2>
    577e:	d6 df       	rcall	.-84     	; 0x572c <__udivmodsi4>
    5780:	07 fc       	sbrc	r0, 7
    5782:	02 d0       	rcall	.+4      	; 0x5788 <__divmodsi4_neg2>
    5784:	46 f4       	brtc	.+16     	; 0x5796 <__divmodsi4_exit>
    5786:	08 c0       	rjmp	.+16     	; 0x5798 <__negsi2>

00005788 <__divmodsi4_neg2>:
    5788:	50 95       	com	r21
    578a:	40 95       	com	r20
    578c:	30 95       	com	r19
    578e:	21 95       	neg	r18
    5790:	3f 4f       	sbci	r19, 0xFF	; 255
    5792:	4f 4f       	sbci	r20, 0xFF	; 255
    5794:	5f 4f       	sbci	r21, 0xFF	; 255

00005796 <__divmodsi4_exit>:
    5796:	08 95       	ret

00005798 <__negsi2>:
    5798:	90 95       	com	r25
    579a:	80 95       	com	r24
    579c:	70 95       	com	r23
    579e:	61 95       	neg	r22
    57a0:	7f 4f       	sbci	r23, 0xFF	; 255
    57a2:	8f 4f       	sbci	r24, 0xFF	; 255
    57a4:	9f 4f       	sbci	r25, 0xFF	; 255
    57a6:	08 95       	ret

000057a8 <__tablejump2__>:
    57a8:	ee 0f       	add	r30, r30
    57aa:	ff 1f       	adc	r31, r31
    57ac:	05 90       	lpm	r0, Z+
    57ae:	f4 91       	lpm	r31, Z
    57b0:	e0 2d       	mov	r30, r0
    57b2:	09 94       	ijmp

000057b4 <__muluhisi3>:
    57b4:	40 d0       	rcall	.+128    	; 0x5836 <__umulhisi3>
    57b6:	a5 9f       	mul	r26, r21
    57b8:	90 0d       	add	r25, r0
    57ba:	b4 9f       	mul	r27, r20
    57bc:	90 0d       	add	r25, r0
    57be:	a4 9f       	mul	r26, r20
    57c0:	80 0d       	add	r24, r0
    57c2:	91 1d       	adc	r25, r1
    57c4:	11 24       	eor	r1, r1
    57c6:	08 95       	ret

000057c8 <__prologue_saves__>:
    57c8:	2f 92       	push	r2
    57ca:	3f 92       	push	r3
    57cc:	4f 92       	push	r4
    57ce:	5f 92       	push	r5
    57d0:	6f 92       	push	r6
    57d2:	7f 92       	push	r7
    57d4:	8f 92       	push	r8
    57d6:	9f 92       	push	r9
    57d8:	af 92       	push	r10
    57da:	bf 92       	push	r11
    57dc:	cf 92       	push	r12
    57de:	df 92       	push	r13
    57e0:	ef 92       	push	r14
    57e2:	ff 92       	push	r15
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	ca 1b       	sub	r28, r26
    57f2:	db 0b       	sbc	r29, r27
    57f4:	0f b6       	in	r0, 0x3f	; 63
    57f6:	f8 94       	cli
    57f8:	de bf       	out	0x3e, r29	; 62
    57fa:	0f be       	out	0x3f, r0	; 63
    57fc:	cd bf       	out	0x3d, r28	; 61
    57fe:	09 94       	ijmp

00005800 <__epilogue_restores__>:
    5800:	2a 88       	ldd	r2, Y+18	; 0x12
    5802:	39 88       	ldd	r3, Y+17	; 0x11
    5804:	48 88       	ldd	r4, Y+16	; 0x10
    5806:	5f 84       	ldd	r5, Y+15	; 0x0f
    5808:	6e 84       	ldd	r6, Y+14	; 0x0e
    580a:	7d 84       	ldd	r7, Y+13	; 0x0d
    580c:	8c 84       	ldd	r8, Y+12	; 0x0c
    580e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5810:	aa 84       	ldd	r10, Y+10	; 0x0a
    5812:	b9 84       	ldd	r11, Y+9	; 0x09
    5814:	c8 84       	ldd	r12, Y+8	; 0x08
    5816:	df 80       	ldd	r13, Y+7	; 0x07
    5818:	ee 80       	ldd	r14, Y+6	; 0x06
    581a:	fd 80       	ldd	r15, Y+5	; 0x05
    581c:	0c 81       	ldd	r16, Y+4	; 0x04
    581e:	1b 81       	ldd	r17, Y+3	; 0x03
    5820:	aa 81       	ldd	r26, Y+2	; 0x02
    5822:	b9 81       	ldd	r27, Y+1	; 0x01
    5824:	ce 0f       	add	r28, r30
    5826:	d1 1d       	adc	r29, r1
    5828:	0f b6       	in	r0, 0x3f	; 63
    582a:	f8 94       	cli
    582c:	de bf       	out	0x3e, r29	; 62
    582e:	0f be       	out	0x3f, r0	; 63
    5830:	cd bf       	out	0x3d, r28	; 61
    5832:	ed 01       	movw	r28, r26
    5834:	08 95       	ret

00005836 <__umulhisi3>:
    5836:	a2 9f       	mul	r26, r18
    5838:	b0 01       	movw	r22, r0
    583a:	b3 9f       	mul	r27, r19
    583c:	c0 01       	movw	r24, r0
    583e:	a3 9f       	mul	r26, r19
    5840:	70 0d       	add	r23, r0
    5842:	81 1d       	adc	r24, r1
    5844:	11 24       	eor	r1, r1
    5846:	91 1d       	adc	r25, r1
    5848:	b2 9f       	mul	r27, r18
    584a:	70 0d       	add	r23, r0
    584c:	81 1d       	adc	r24, r1
    584e:	11 24       	eor	r1, r1
    5850:	91 1d       	adc	r25, r1
    5852:	08 95       	ret

00005854 <dtostrf>:
    5854:	ef 92       	push	r14
    5856:	0f 93       	push	r16
    5858:	1f 93       	push	r17
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	e8 01       	movw	r28, r16
    5860:	47 fd       	sbrc	r20, 7
    5862:	02 c0       	rjmp	.+4      	; 0x5868 <dtostrf+0x14>
    5864:	34 e0       	ldi	r19, 0x04	; 4
    5866:	01 c0       	rjmp	.+2      	; 0x586a <dtostrf+0x16>
    5868:	34 e1       	ldi	r19, 0x14	; 20
    586a:	e4 2f       	mov	r30, r20
    586c:	44 0f       	add	r20, r20
    586e:	ff 0b       	sbc	r31, r31
    5870:	f7 ff       	sbrs	r31, 7
    5872:	03 c0       	rjmp	.+6      	; 0x587a <dtostrf+0x26>
    5874:	f1 95       	neg	r31
    5876:	e1 95       	neg	r30
    5878:	f1 09       	sbc	r31, r1
    587a:	e3 2e       	mov	r14, r19
    587c:	02 2f       	mov	r16, r18
    587e:	2e 2f       	mov	r18, r30
    5880:	ae 01       	movw	r20, r28
    5882:	3c d4       	rcall	.+2168   	; 0x60fc <dtoa_prf>
    5884:	ce 01       	movw	r24, r28
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	1f 91       	pop	r17
    588c:	0f 91       	pop	r16
    588e:	ef 90       	pop	r14
    5890:	08 95       	ret

00005892 <malloc>:
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	82 30       	cpi	r24, 0x02	; 2
    5898:	91 05       	cpc	r25, r1
    589a:	10 f4       	brcc	.+4      	; 0x58a0 <malloc+0xe>
    589c:	82 e0       	ldi	r24, 0x02	; 2
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <__flp>
    58a4:	f0 91 69 05 	lds	r31, 0x0569	; 0x800569 <__flp+0x1>
    58a8:	20 e0       	ldi	r18, 0x00	; 0
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	c0 e0       	ldi	r28, 0x00	; 0
    58ae:	d0 e0       	ldi	r29, 0x00	; 0
    58b0:	30 97       	sbiw	r30, 0x00	; 0
    58b2:	11 f1       	breq	.+68     	; 0x58f8 <malloc+0x66>
    58b4:	40 81       	ld	r20, Z
    58b6:	51 81       	ldd	r21, Z+1	; 0x01
    58b8:	48 17       	cp	r20, r24
    58ba:	59 07       	cpc	r21, r25
    58bc:	c0 f0       	brcs	.+48     	; 0x58ee <malloc+0x5c>
    58be:	48 17       	cp	r20, r24
    58c0:	59 07       	cpc	r21, r25
    58c2:	61 f4       	brne	.+24     	; 0x58dc <malloc+0x4a>
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	93 81       	ldd	r25, Z+3	; 0x03
    58c8:	20 97       	sbiw	r28, 0x00	; 0
    58ca:	19 f0       	breq	.+6      	; 0x58d2 <malloc+0x40>
    58cc:	9b 83       	std	Y+3, r25	; 0x03
    58ce:	8a 83       	std	Y+2, r24	; 0x02
    58d0:	2b c0       	rjmp	.+86     	; 0x5928 <malloc+0x96>
    58d2:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <__flp+0x1>
    58d6:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <__flp>
    58da:	26 c0       	rjmp	.+76     	; 0x5928 <malloc+0x96>
    58dc:	21 15       	cp	r18, r1
    58de:	31 05       	cpc	r19, r1
    58e0:	19 f0       	breq	.+6      	; 0x58e8 <malloc+0x56>
    58e2:	42 17       	cp	r20, r18
    58e4:	53 07       	cpc	r21, r19
    58e6:	18 f4       	brcc	.+6      	; 0x58ee <malloc+0x5c>
    58e8:	9a 01       	movw	r18, r20
    58ea:	be 01       	movw	r22, r28
    58ec:	df 01       	movw	r26, r30
    58ee:	ef 01       	movw	r28, r30
    58f0:	02 80       	ldd	r0, Z+2	; 0x02
    58f2:	f3 81       	ldd	r31, Z+3	; 0x03
    58f4:	e0 2d       	mov	r30, r0
    58f6:	dc cf       	rjmp	.-72     	; 0x58b0 <malloc+0x1e>
    58f8:	21 15       	cp	r18, r1
    58fa:	31 05       	cpc	r19, r1
    58fc:	09 f1       	breq	.+66     	; 0x5940 <malloc+0xae>
    58fe:	28 1b       	sub	r18, r24
    5900:	39 0b       	sbc	r19, r25
    5902:	24 30       	cpi	r18, 0x04	; 4
    5904:	31 05       	cpc	r19, r1
    5906:	90 f4       	brcc	.+36     	; 0x592c <malloc+0x9a>
    5908:	12 96       	adiw	r26, 0x02	; 2
    590a:	8d 91       	ld	r24, X+
    590c:	9c 91       	ld	r25, X
    590e:	13 97       	sbiw	r26, 0x03	; 3
    5910:	61 15       	cp	r22, r1
    5912:	71 05       	cpc	r23, r1
    5914:	21 f0       	breq	.+8      	; 0x591e <malloc+0x8c>
    5916:	fb 01       	movw	r30, r22
    5918:	93 83       	std	Z+3, r25	; 0x03
    591a:	82 83       	std	Z+2, r24	; 0x02
    591c:	04 c0       	rjmp	.+8      	; 0x5926 <malloc+0x94>
    591e:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <__flp+0x1>
    5922:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <__flp>
    5926:	fd 01       	movw	r30, r26
    5928:	32 96       	adiw	r30, 0x02	; 2
    592a:	44 c0       	rjmp	.+136    	; 0x59b4 <malloc+0x122>
    592c:	fd 01       	movw	r30, r26
    592e:	e2 0f       	add	r30, r18
    5930:	f3 1f       	adc	r31, r19
    5932:	81 93       	st	Z+, r24
    5934:	91 93       	st	Z+, r25
    5936:	22 50       	subi	r18, 0x02	; 2
    5938:	31 09       	sbc	r19, r1
    593a:	2d 93       	st	X+, r18
    593c:	3c 93       	st	X, r19
    593e:	3a c0       	rjmp	.+116    	; 0x59b4 <malloc+0x122>
    5940:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    5944:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    5948:	23 2b       	or	r18, r19
    594a:	41 f4       	brne	.+16     	; 0x595c <malloc+0xca>
    594c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5950:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5954:	30 93 67 05 	sts	0x0567, r19	; 0x800567 <__brkval+0x1>
    5958:	20 93 66 05 	sts	0x0566, r18	; 0x800566 <__brkval>
    595c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5960:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5964:	21 15       	cp	r18, r1
    5966:	31 05       	cpc	r19, r1
    5968:	41 f4       	brne	.+16     	; 0x597a <malloc+0xe8>
    596a:	2d b7       	in	r18, 0x3d	; 61
    596c:	3e b7       	in	r19, 0x3e	; 62
    596e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5972:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5976:	24 1b       	sub	r18, r20
    5978:	35 0b       	sbc	r19, r21
    597a:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <__brkval>
    597e:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <__brkval+0x1>
    5982:	e2 17       	cp	r30, r18
    5984:	f3 07       	cpc	r31, r19
    5986:	a0 f4       	brcc	.+40     	; 0x59b0 <malloc+0x11e>
    5988:	2e 1b       	sub	r18, r30
    598a:	3f 0b       	sbc	r19, r31
    598c:	28 17       	cp	r18, r24
    598e:	39 07       	cpc	r19, r25
    5990:	78 f0       	brcs	.+30     	; 0x59b0 <malloc+0x11e>
    5992:	ac 01       	movw	r20, r24
    5994:	4e 5f       	subi	r20, 0xFE	; 254
    5996:	5f 4f       	sbci	r21, 0xFF	; 255
    5998:	24 17       	cp	r18, r20
    599a:	35 07       	cpc	r19, r21
    599c:	48 f0       	brcs	.+18     	; 0x59b0 <malloc+0x11e>
    599e:	4e 0f       	add	r20, r30
    59a0:	5f 1f       	adc	r21, r31
    59a2:	50 93 67 05 	sts	0x0567, r21	; 0x800567 <__brkval+0x1>
    59a6:	40 93 66 05 	sts	0x0566, r20	; 0x800566 <__brkval>
    59aa:	81 93       	st	Z+, r24
    59ac:	91 93       	st	Z+, r25
    59ae:	02 c0       	rjmp	.+4      	; 0x59b4 <malloc+0x122>
    59b0:	e0 e0       	ldi	r30, 0x00	; 0
    59b2:	f0 e0       	ldi	r31, 0x00	; 0
    59b4:	cf 01       	movw	r24, r30
    59b6:	df 91       	pop	r29
    59b8:	cf 91       	pop	r28
    59ba:	08 95       	ret

000059bc <free>:
    59bc:	0f 93       	push	r16
    59be:	1f 93       	push	r17
    59c0:	cf 93       	push	r28
    59c2:	df 93       	push	r29
    59c4:	00 97       	sbiw	r24, 0x00	; 0
    59c6:	09 f4       	brne	.+2      	; 0x59ca <free+0xe>
    59c8:	8c c0       	rjmp	.+280    	; 0x5ae2 <free+0x126>
    59ca:	fc 01       	movw	r30, r24
    59cc:	32 97       	sbiw	r30, 0x02	; 2
    59ce:	13 82       	std	Z+3, r1	; 0x03
    59d0:	12 82       	std	Z+2, r1	; 0x02
    59d2:	00 91 68 05 	lds	r16, 0x0568	; 0x800568 <__flp>
    59d6:	10 91 69 05 	lds	r17, 0x0569	; 0x800569 <__flp+0x1>
    59da:	01 15       	cp	r16, r1
    59dc:	11 05       	cpc	r17, r1
    59de:	81 f4       	brne	.+32     	; 0x5a00 <free+0x44>
    59e0:	20 81       	ld	r18, Z
    59e2:	31 81       	ldd	r19, Z+1	; 0x01
    59e4:	82 0f       	add	r24, r18
    59e6:	93 1f       	adc	r25, r19
    59e8:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    59ec:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    59f0:	28 17       	cp	r18, r24
    59f2:	39 07       	cpc	r19, r25
    59f4:	79 f5       	brne	.+94     	; 0x5a54 <free+0x98>
    59f6:	f0 93 67 05 	sts	0x0567, r31	; 0x800567 <__brkval+0x1>
    59fa:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <__brkval>
    59fe:	71 c0       	rjmp	.+226    	; 0x5ae2 <free+0x126>
    5a00:	d8 01       	movw	r26, r16
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	50 e0       	ldi	r21, 0x00	; 0
    5a06:	ae 17       	cp	r26, r30
    5a08:	bf 07       	cpc	r27, r31
    5a0a:	50 f4       	brcc	.+20     	; 0x5a20 <free+0x64>
    5a0c:	12 96       	adiw	r26, 0x02	; 2
    5a0e:	2d 91       	ld	r18, X+
    5a10:	3c 91       	ld	r19, X
    5a12:	13 97       	sbiw	r26, 0x03	; 3
    5a14:	ad 01       	movw	r20, r26
    5a16:	21 15       	cp	r18, r1
    5a18:	31 05       	cpc	r19, r1
    5a1a:	09 f1       	breq	.+66     	; 0x5a5e <free+0xa2>
    5a1c:	d9 01       	movw	r26, r18
    5a1e:	f3 cf       	rjmp	.-26     	; 0x5a06 <free+0x4a>
    5a20:	9d 01       	movw	r18, r26
    5a22:	da 01       	movw	r26, r20
    5a24:	33 83       	std	Z+3, r19	; 0x03
    5a26:	22 83       	std	Z+2, r18	; 0x02
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	86 0f       	add	r24, r22
    5a2e:	97 1f       	adc	r25, r23
    5a30:	82 17       	cp	r24, r18
    5a32:	93 07       	cpc	r25, r19
    5a34:	69 f4       	brne	.+26     	; 0x5a50 <free+0x94>
    5a36:	ec 01       	movw	r28, r24
    5a38:	28 81       	ld	r18, Y
    5a3a:	39 81       	ldd	r19, Y+1	; 0x01
    5a3c:	26 0f       	add	r18, r22
    5a3e:	37 1f       	adc	r19, r23
    5a40:	2e 5f       	subi	r18, 0xFE	; 254
    5a42:	3f 4f       	sbci	r19, 0xFF	; 255
    5a44:	31 83       	std	Z+1, r19	; 0x01
    5a46:	20 83       	st	Z, r18
    5a48:	8a 81       	ldd	r24, Y+2	; 0x02
    5a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a4c:	93 83       	std	Z+3, r25	; 0x03
    5a4e:	82 83       	std	Z+2, r24	; 0x02
    5a50:	45 2b       	or	r20, r21
    5a52:	29 f4       	brne	.+10     	; 0x5a5e <free+0xa2>
    5a54:	f0 93 69 05 	sts	0x0569, r31	; 0x800569 <__flp+0x1>
    5a58:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <__flp>
    5a5c:	42 c0       	rjmp	.+132    	; 0x5ae2 <free+0x126>
    5a5e:	13 96       	adiw	r26, 0x03	; 3
    5a60:	fc 93       	st	X, r31
    5a62:	ee 93       	st	-X, r30
    5a64:	12 97       	sbiw	r26, 0x02	; 2
    5a66:	ed 01       	movw	r28, r26
    5a68:	49 91       	ld	r20, Y+
    5a6a:	59 91       	ld	r21, Y+
    5a6c:	9e 01       	movw	r18, r28
    5a6e:	24 0f       	add	r18, r20
    5a70:	35 1f       	adc	r19, r21
    5a72:	e2 17       	cp	r30, r18
    5a74:	f3 07       	cpc	r31, r19
    5a76:	71 f4       	brne	.+28     	; 0x5a94 <free+0xd8>
    5a78:	80 81       	ld	r24, Z
    5a7a:	91 81       	ldd	r25, Z+1	; 0x01
    5a7c:	84 0f       	add	r24, r20
    5a7e:	95 1f       	adc	r25, r21
    5a80:	02 96       	adiw	r24, 0x02	; 2
    5a82:	11 96       	adiw	r26, 0x01	; 1
    5a84:	9c 93       	st	X, r25
    5a86:	8e 93       	st	-X, r24
    5a88:	82 81       	ldd	r24, Z+2	; 0x02
    5a8a:	93 81       	ldd	r25, Z+3	; 0x03
    5a8c:	13 96       	adiw	r26, 0x03	; 3
    5a8e:	9c 93       	st	X, r25
    5a90:	8e 93       	st	-X, r24
    5a92:	12 97       	sbiw	r26, 0x02	; 2
    5a94:	e0 e0       	ldi	r30, 0x00	; 0
    5a96:	f0 e0       	ldi	r31, 0x00	; 0
    5a98:	d8 01       	movw	r26, r16
    5a9a:	12 96       	adiw	r26, 0x02	; 2
    5a9c:	8d 91       	ld	r24, X+
    5a9e:	9c 91       	ld	r25, X
    5aa0:	13 97       	sbiw	r26, 0x03	; 3
    5aa2:	00 97       	sbiw	r24, 0x00	; 0
    5aa4:	19 f0       	breq	.+6      	; 0x5aac <free+0xf0>
    5aa6:	f8 01       	movw	r30, r16
    5aa8:	8c 01       	movw	r16, r24
    5aaa:	f6 cf       	rjmp	.-20     	; 0x5a98 <free+0xdc>
    5aac:	8d 91       	ld	r24, X+
    5aae:	9c 91       	ld	r25, X
    5ab0:	98 01       	movw	r18, r16
    5ab2:	2e 5f       	subi	r18, 0xFE	; 254
    5ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab6:	82 0f       	add	r24, r18
    5ab8:	93 1f       	adc	r25, r19
    5aba:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <__brkval>
    5abe:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <__brkval+0x1>
    5ac2:	28 17       	cp	r18, r24
    5ac4:	39 07       	cpc	r19, r25
    5ac6:	69 f4       	brne	.+26     	; 0x5ae2 <free+0x126>
    5ac8:	30 97       	sbiw	r30, 0x00	; 0
    5aca:	29 f4       	brne	.+10     	; 0x5ad6 <free+0x11a>
    5acc:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <__flp+0x1>
    5ad0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <__flp>
    5ad4:	02 c0       	rjmp	.+4      	; 0x5ada <free+0x11e>
    5ad6:	13 82       	std	Z+3, r1	; 0x03
    5ad8:	12 82       	std	Z+2, r1	; 0x02
    5ada:	10 93 67 05 	sts	0x0567, r17	; 0x800567 <__brkval+0x1>
    5ade:	00 93 66 05 	sts	0x0566, r16	; 0x800566 <__brkval>
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	08 95       	ret

00005aec <realloc>:
    5aec:	a0 e0       	ldi	r26, 0x00	; 0
    5aee:	b0 e0       	ldi	r27, 0x00	; 0
    5af0:	eb e7       	ldi	r30, 0x7B	; 123
    5af2:	fd e2       	ldi	r31, 0x2D	; 45
    5af4:	6d ce       	rjmp	.-806    	; 0x57d0 <__prologue_saves__+0x8>
    5af6:	ec 01       	movw	r28, r24
    5af8:	00 97       	sbiw	r24, 0x00	; 0
    5afa:	19 f4       	brne	.+6      	; 0x5b02 <realloc+0x16>
    5afc:	cb 01       	movw	r24, r22
    5afe:	c9 de       	rcall	.-622    	; 0x5892 <malloc>
    5b00:	b4 c0       	rjmp	.+360    	; 0x5c6a <realloc+0x17e>
    5b02:	fc 01       	movw	r30, r24
    5b04:	e6 0f       	add	r30, r22
    5b06:	f7 1f       	adc	r31, r23
    5b08:	9c 01       	movw	r18, r24
    5b0a:	22 50       	subi	r18, 0x02	; 2
    5b0c:	31 09       	sbc	r19, r1
    5b0e:	e2 17       	cp	r30, r18
    5b10:	f3 07       	cpc	r31, r19
    5b12:	08 f4       	brcc	.+2      	; 0x5b16 <realloc+0x2a>
    5b14:	a8 c0       	rjmp	.+336    	; 0x5c66 <realloc+0x17a>
    5b16:	d9 01       	movw	r26, r18
    5b18:	0d 91       	ld	r16, X+
    5b1a:	1c 91       	ld	r17, X
    5b1c:	11 97       	sbiw	r26, 0x01	; 1
    5b1e:	06 17       	cp	r16, r22
    5b20:	17 07       	cpc	r17, r23
    5b22:	a8 f0       	brcs	.+42     	; 0x5b4e <realloc+0x62>
    5b24:	05 30       	cpi	r16, 0x05	; 5
    5b26:	11 05       	cpc	r17, r1
    5b28:	08 f4       	brcc	.+2      	; 0x5b2c <realloc+0x40>
    5b2a:	9b c0       	rjmp	.+310    	; 0x5c62 <realloc+0x176>
    5b2c:	c8 01       	movw	r24, r16
    5b2e:	04 97       	sbiw	r24, 0x04	; 4
    5b30:	86 17       	cp	r24, r22
    5b32:	97 07       	cpc	r25, r23
    5b34:	08 f4       	brcc	.+2      	; 0x5b38 <realloc+0x4c>
    5b36:	95 c0       	rjmp	.+298    	; 0x5c62 <realloc+0x176>
    5b38:	02 50       	subi	r16, 0x02	; 2
    5b3a:	11 09       	sbc	r17, r1
    5b3c:	06 1b       	sub	r16, r22
    5b3e:	17 0b       	sbc	r17, r23
    5b40:	01 93       	st	Z+, r16
    5b42:	11 93       	st	Z+, r17
    5b44:	6d 93       	st	X+, r22
    5b46:	7c 93       	st	X, r23
    5b48:	cf 01       	movw	r24, r30
    5b4a:	38 df       	rcall	.-400    	; 0x59bc <free>
    5b4c:	8a c0       	rjmp	.+276    	; 0x5c62 <realloc+0x176>
    5b4e:	5b 01       	movw	r10, r22
    5b50:	a0 1a       	sub	r10, r16
    5b52:	b1 0a       	sbc	r11, r17
    5b54:	4c 01       	movw	r8, r24
    5b56:	80 0e       	add	r8, r16
    5b58:	91 1e       	adc	r9, r17
    5b5a:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <__flp>
    5b5e:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <__flp+0x1>
    5b62:	40 e0       	ldi	r20, 0x00	; 0
    5b64:	50 e0       	ldi	r21, 0x00	; 0
    5b66:	e1 2c       	mov	r14, r1
    5b68:	f1 2c       	mov	r15, r1
    5b6a:	10 97       	sbiw	r26, 0x00	; 0
    5b6c:	09 f4       	brne	.+2      	; 0x5b70 <realloc+0x84>
    5b6e:	4a c0       	rjmp	.+148    	; 0x5c04 <realloc+0x118>
    5b70:	a8 15       	cp	r26, r8
    5b72:	b9 05       	cpc	r27, r9
    5b74:	d1 f5       	brne	.+116    	; 0x5bea <realloc+0xfe>
    5b76:	6d 90       	ld	r6, X+
    5b78:	7c 90       	ld	r7, X
    5b7a:	11 97       	sbiw	r26, 0x01	; 1
    5b7c:	63 01       	movw	r12, r6
    5b7e:	82 e0       	ldi	r24, 0x02	; 2
    5b80:	c8 0e       	add	r12, r24
    5b82:	d1 1c       	adc	r13, r1
    5b84:	ca 14       	cp	r12, r10
    5b86:	db 04       	cpc	r13, r11
    5b88:	80 f1       	brcs	.+96     	; 0x5bea <realloc+0xfe>
    5b8a:	a3 01       	movw	r20, r6
    5b8c:	4a 19       	sub	r20, r10
    5b8e:	5b 09       	sbc	r21, r11
    5b90:	6a 01       	movw	r12, r20
    5b92:	82 e0       	ldi	r24, 0x02	; 2
    5b94:	c8 0e       	add	r12, r24
    5b96:	d1 1c       	adc	r13, r1
    5b98:	12 96       	adiw	r26, 0x02	; 2
    5b9a:	bc 90       	ld	r11, X
    5b9c:	12 97       	sbiw	r26, 0x02	; 2
    5b9e:	13 96       	adiw	r26, 0x03	; 3
    5ba0:	ac 91       	ld	r26, X
    5ba2:	b5 e0       	ldi	r27, 0x05	; 5
    5ba4:	cb 16       	cp	r12, r27
    5ba6:	d1 04       	cpc	r13, r1
    5ba8:	40 f0       	brcs	.+16     	; 0x5bba <realloc+0xce>
    5baa:	b2 82       	std	Z+2, r11	; 0x02
    5bac:	a3 83       	std	Z+3, r26	; 0x03
    5bae:	51 83       	std	Z+1, r21	; 0x01
    5bb0:	40 83       	st	Z, r20
    5bb2:	d9 01       	movw	r26, r18
    5bb4:	6d 93       	st	X+, r22
    5bb6:	7c 93       	st	X, r23
    5bb8:	0a c0       	rjmp	.+20     	; 0x5bce <realloc+0xe2>
    5bba:	0e 5f       	subi	r16, 0xFE	; 254
    5bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bbe:	c3 01       	movw	r24, r6
    5bc0:	80 0f       	add	r24, r16
    5bc2:	91 1f       	adc	r25, r17
    5bc4:	f9 01       	movw	r30, r18
    5bc6:	91 83       	std	Z+1, r25	; 0x01
    5bc8:	80 83       	st	Z, r24
    5bca:	eb 2d       	mov	r30, r11
    5bcc:	fa 2f       	mov	r31, r26
    5bce:	e1 14       	cp	r14, r1
    5bd0:	f1 04       	cpc	r15, r1
    5bd2:	31 f0       	breq	.+12     	; 0x5be0 <realloc+0xf4>
    5bd4:	d7 01       	movw	r26, r14
    5bd6:	13 96       	adiw	r26, 0x03	; 3
    5bd8:	fc 93       	st	X, r31
    5bda:	ee 93       	st	-X, r30
    5bdc:	12 97       	sbiw	r26, 0x02	; 2
    5bde:	41 c0       	rjmp	.+130    	; 0x5c62 <realloc+0x176>
    5be0:	f0 93 69 05 	sts	0x0569, r31	; 0x800569 <__flp+0x1>
    5be4:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <__flp>
    5be8:	3c c0       	rjmp	.+120    	; 0x5c62 <realloc+0x176>
    5bea:	8d 91       	ld	r24, X+
    5bec:	9c 91       	ld	r25, X
    5bee:	11 97       	sbiw	r26, 0x01	; 1
    5bf0:	48 17       	cp	r20, r24
    5bf2:	59 07       	cpc	r21, r25
    5bf4:	08 f4       	brcc	.+2      	; 0x5bf8 <realloc+0x10c>
    5bf6:	ac 01       	movw	r20, r24
    5bf8:	7d 01       	movw	r14, r26
    5bfa:	12 96       	adiw	r26, 0x02	; 2
    5bfc:	0d 90       	ld	r0, X+
    5bfe:	bc 91       	ld	r27, X
    5c00:	a0 2d       	mov	r26, r0
    5c02:	b3 cf       	rjmp	.-154    	; 0x5b6a <realloc+0x7e>
    5c04:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <__brkval>
    5c08:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <__brkval+0x1>
    5c0c:	88 15       	cp	r24, r8
    5c0e:	99 05       	cpc	r25, r9
    5c10:	e1 f4       	brne	.+56     	; 0x5c4a <realloc+0x15e>
    5c12:	46 17       	cp	r20, r22
    5c14:	57 07       	cpc	r21, r23
    5c16:	c8 f4       	brcc	.+50     	; 0x5c4a <realloc+0x15e>
    5c18:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5c1c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5c20:	00 97       	sbiw	r24, 0x00	; 0
    5c22:	41 f4       	brne	.+16     	; 0x5c34 <realloc+0x148>
    5c24:	8d b7       	in	r24, 0x3d	; 61
    5c26:	9e b7       	in	r25, 0x3e	; 62
    5c28:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5c2c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5c30:	84 1b       	sub	r24, r20
    5c32:	95 0b       	sbc	r25, r21
    5c34:	e8 17       	cp	r30, r24
    5c36:	f9 07       	cpc	r31, r25
    5c38:	b0 f4       	brcc	.+44     	; 0x5c66 <realloc+0x17a>
    5c3a:	f0 93 67 05 	sts	0x0567, r31	; 0x800567 <__brkval+0x1>
    5c3e:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <__brkval>
    5c42:	f9 01       	movw	r30, r18
    5c44:	71 83       	std	Z+1, r23	; 0x01
    5c46:	60 83       	st	Z, r22
    5c48:	0c c0       	rjmp	.+24     	; 0x5c62 <realloc+0x176>
    5c4a:	cb 01       	movw	r24, r22
    5c4c:	22 de       	rcall	.-956    	; 0x5892 <malloc>
    5c4e:	7c 01       	movw	r14, r24
    5c50:	00 97       	sbiw	r24, 0x00	; 0
    5c52:	49 f0       	breq	.+18     	; 0x5c66 <realloc+0x17a>
    5c54:	a8 01       	movw	r20, r16
    5c56:	be 01       	movw	r22, r28
    5c58:	af d1       	rcall	.+862    	; 0x5fb8 <memcpy>
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	af de       	rcall	.-674    	; 0x59bc <free>
    5c5e:	c7 01       	movw	r24, r14
    5c60:	04 c0       	rjmp	.+8      	; 0x5c6a <realloc+0x17e>
    5c62:	ce 01       	movw	r24, r28
    5c64:	02 c0       	rjmp	.+4      	; 0x5c6a <realloc+0x17e>
    5c66:	80 e0       	ldi	r24, 0x00	; 0
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	cd b7       	in	r28, 0x3d	; 61
    5c6c:	de b7       	in	r29, 0x3e	; 62
    5c6e:	ee e0       	ldi	r30, 0x0E	; 14
    5c70:	cb cd       	rjmp	.-1130   	; 0x5808 <__epilogue_restores__+0x8>

00005c72 <strtod>:
    5c72:	a0 e0       	ldi	r26, 0x00	; 0
    5c74:	b0 e0       	ldi	r27, 0x00	; 0
    5c76:	ee e3       	ldi	r30, 0x3E	; 62
    5c78:	fe e2       	ldi	r31, 0x2E	; 46
    5c7a:	aa cd       	rjmp	.-1196   	; 0x57d0 <__prologue_saves__+0x8>
    5c7c:	ec 01       	movw	r28, r24
    5c7e:	7b 01       	movw	r14, r22
    5c80:	61 15       	cp	r22, r1
    5c82:	71 05       	cpc	r23, r1
    5c84:	19 f0       	breq	.+6      	; 0x5c8c <strtod+0x1a>
    5c86:	db 01       	movw	r26, r22
    5c88:	8d 93       	st	X+, r24
    5c8a:	9c 93       	st	X, r25
    5c8c:	8e 01       	movw	r16, r28
    5c8e:	0f 5f       	subi	r16, 0xFF	; 255
    5c90:	1f 4f       	sbci	r17, 0xFF	; 255
    5c92:	78 80       	ld	r7, Y
    5c94:	87 2d       	mov	r24, r7
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	6f d1       	rcall	.+734    	; 0x5f78 <isspace>
    5c9a:	89 2b       	or	r24, r25
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <strtod+0x30>
    5c9e:	e8 01       	movw	r28, r16
    5ca0:	f5 cf       	rjmp	.-22     	; 0x5c8c <strtod+0x1a>
    5ca2:	bd e2       	ldi	r27, 0x2D	; 45
    5ca4:	7b 12       	cpse	r7, r27
    5ca6:	05 c0       	rjmp	.+10     	; 0x5cb2 <strtod+0x40>
    5ca8:	0f 5f       	subi	r16, 0xFF	; 255
    5caa:	1f 4f       	sbci	r17, 0xFF	; 255
    5cac:	79 80       	ldd	r7, Y+1	; 0x01
    5cae:	c1 e0       	ldi	r28, 0x01	; 1
    5cb0:	08 c0       	rjmp	.+16     	; 0x5cc2 <strtod+0x50>
    5cb2:	eb e2       	ldi	r30, 0x2B	; 43
    5cb4:	7e 12       	cpse	r7, r30
    5cb6:	04 c0       	rjmp	.+8      	; 0x5cc0 <strtod+0x4e>
    5cb8:	8e 01       	movw	r16, r28
    5cba:	0e 5f       	subi	r16, 0xFE	; 254
    5cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cbe:	79 80       	ldd	r7, Y+1	; 0x01
    5cc0:	c0 e0       	ldi	r28, 0x00	; 0
    5cc2:	68 01       	movw	r12, r16
    5cc4:	f1 e0       	ldi	r31, 0x01	; 1
    5cc6:	cf 1a       	sub	r12, r31
    5cc8:	d1 08       	sbc	r13, r1
    5cca:	43 e0       	ldi	r20, 0x03	; 3
    5ccc:	50 e0       	ldi	r21, 0x00	; 0
    5cce:	62 e0       	ldi	r22, 0x02	; 2
    5cd0:	72 e0       	ldi	r23, 0x02	; 2
    5cd2:	c6 01       	movw	r24, r12
    5cd4:	59 d1       	rcall	.+690    	; 0x5f88 <strncasecmp_P>
    5cd6:	89 2b       	or	r24, r25
    5cd8:	e9 f4       	brne	.+58     	; 0x5d14 <strtod+0xa2>
    5cda:	68 01       	movw	r12, r16
    5cdc:	22 e0       	ldi	r18, 0x02	; 2
    5cde:	c2 0e       	add	r12, r18
    5ce0:	d1 1c       	adc	r13, r1
    5ce2:	45 e0       	ldi	r20, 0x05	; 5
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	6d ef       	ldi	r22, 0xFD	; 253
    5ce8:	71 e0       	ldi	r23, 0x01	; 1
    5cea:	c6 01       	movw	r24, r12
    5cec:	4d d1       	rcall	.+666    	; 0x5f88 <strncasecmp_P>
    5cee:	89 2b       	or	r24, r25
    5cf0:	21 f4       	brne	.+8      	; 0x5cfa <strtod+0x88>
    5cf2:	68 01       	movw	r12, r16
    5cf4:	87 e0       	ldi	r24, 0x07	; 7
    5cf6:	c8 0e       	add	r12, r24
    5cf8:	d1 1c       	adc	r13, r1
    5cfa:	e1 14       	cp	r14, r1
    5cfc:	f1 04       	cpc	r15, r1
    5cfe:	19 f0       	breq	.+6      	; 0x5d06 <strtod+0x94>
    5d00:	d7 01       	movw	r26, r14
    5d02:	cd 92       	st	X+, r12
    5d04:	dc 92       	st	X, r13
    5d06:	c1 11       	cpse	r28, r1
    5d08:	fd c0       	rjmp	.+506    	; 0x5f04 <strtod+0x292>
    5d0a:	60 e0       	ldi	r22, 0x00	; 0
    5d0c:	70 e0       	ldi	r23, 0x00	; 0
    5d0e:	80 e8       	ldi	r24, 0x80	; 128
    5d10:	9f e7       	ldi	r25, 0x7F	; 127
    5d12:	01 c1       	rjmp	.+514    	; 0x5f16 <strtod+0x2a4>
    5d14:	43 e0       	ldi	r20, 0x03	; 3
    5d16:	50 e0       	ldi	r21, 0x00	; 0
    5d18:	6a ef       	ldi	r22, 0xFA	; 250
    5d1a:	71 e0       	ldi	r23, 0x01	; 1
    5d1c:	c6 01       	movw	r24, r12
    5d1e:	34 d1       	rcall	.+616    	; 0x5f88 <strncasecmp_P>
    5d20:	89 2b       	or	r24, r25
    5d22:	51 f4       	brne	.+20     	; 0x5d38 <strtod+0xc6>
    5d24:	e1 14       	cp	r14, r1
    5d26:	f1 04       	cpc	r15, r1
    5d28:	09 f4       	brne	.+2      	; 0x5d2c <strtod+0xba>
    5d2a:	f1 c0       	rjmp	.+482    	; 0x5f0e <strtod+0x29c>
    5d2c:	0e 5f       	subi	r16, 0xFE	; 254
    5d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d30:	f7 01       	movw	r30, r14
    5d32:	11 83       	std	Z+1, r17	; 0x01
    5d34:	00 83       	st	Z, r16
    5d36:	eb c0       	rjmp	.+470    	; 0x5f0e <strtod+0x29c>
    5d38:	68 01       	movw	r12, r16
    5d3a:	60 e0       	ldi	r22, 0x00	; 0
    5d3c:	70 e0       	ldi	r23, 0x00	; 0
    5d3e:	cb 01       	movw	r24, r22
    5d40:	00 e0       	ldi	r16, 0x00	; 0
    5d42:	10 e0       	ldi	r17, 0x00	; 0
    5d44:	f6 01       	movw	r30, r12
    5d46:	d0 ed       	ldi	r29, 0xD0	; 208
    5d48:	d7 0d       	add	r29, r7
    5d4a:	da 30       	cpi	r29, 0x0A	; 10
    5d4c:	50 f5       	brcc	.+84     	; 0x5da2 <strtod+0x130>
    5d4e:	2c 2f       	mov	r18, r28
    5d50:	22 60       	ori	r18, 0x02	; 2
    5d52:	62 2e       	mov	r6, r18
    5d54:	2c 2f       	mov	r18, r28
    5d56:	28 70       	andi	r18, 0x08	; 8
    5d58:	c2 ff       	sbrs	r28, 2
    5d5a:	05 c0       	rjmp	.+10     	; 0x5d66 <strtod+0xf4>
    5d5c:	21 11       	cpse	r18, r1
    5d5e:	27 c0       	rjmp	.+78     	; 0x5dae <strtod+0x13c>
    5d60:	0f 5f       	subi	r16, 0xFF	; 255
    5d62:	1f 4f       	sbci	r17, 0xFF	; 255
    5d64:	24 c0       	rjmp	.+72     	; 0x5dae <strtod+0x13c>
    5d66:	22 23       	and	r18, r18
    5d68:	11 f0       	breq	.+4      	; 0x5d6e <strtod+0xfc>
    5d6a:	01 50       	subi	r16, 0x01	; 1
    5d6c:	11 09       	sbc	r17, r1
    5d6e:	a5 e0       	ldi	r26, 0x05	; 5
    5d70:	b0 e0       	ldi	r27, 0x00	; 0
    5d72:	9b 01       	movw	r18, r22
    5d74:	ac 01       	movw	r20, r24
    5d76:	1e dd       	rcall	.-1476   	; 0x57b4 <__muluhisi3>
    5d78:	4b 01       	movw	r8, r22
    5d7a:	5c 01       	movw	r10, r24
    5d7c:	88 0c       	add	r8, r8
    5d7e:	99 1c       	adc	r9, r9
    5d80:	aa 1c       	adc	r10, r10
    5d82:	bb 1c       	adc	r11, r11
    5d84:	c5 01       	movw	r24, r10
    5d86:	b4 01       	movw	r22, r8
    5d88:	6d 0f       	add	r22, r29
    5d8a:	71 1d       	adc	r23, r1
    5d8c:	81 1d       	adc	r24, r1
    5d8e:	91 1d       	adc	r25, r1
    5d90:	68 39       	cpi	r22, 0x98	; 152
    5d92:	a9 e9       	ldi	r26, 0x99	; 153
    5d94:	7a 07       	cpc	r23, r26
    5d96:	8a 07       	cpc	r24, r26
    5d98:	a9 e1       	ldi	r26, 0x19	; 25
    5d9a:	9a 07       	cpc	r25, r26
    5d9c:	40 f0       	brcs	.+16     	; 0x5dae <strtod+0x13c>
    5d9e:	c6 60       	ori	r28, 0x06	; 6
    5da0:	05 c0       	rjmp	.+10     	; 0x5dac <strtod+0x13a>
    5da2:	de 3f       	cpi	r29, 0xFE	; 254
    5da4:	51 f4       	brne	.+20     	; 0x5dba <strtod+0x148>
    5da6:	c3 fd       	sbrc	r28, 3
    5da8:	44 c0       	rjmp	.+136    	; 0x5e32 <strtod+0x1c0>
    5daa:	c8 60       	ori	r28, 0x08	; 8
    5dac:	6c 2e       	mov	r6, r28
    5dae:	bf ef       	ldi	r27, 0xFF	; 255
    5db0:	cb 1a       	sub	r12, r27
    5db2:	db 0a       	sbc	r13, r27
    5db4:	70 80       	ld	r7, Z
    5db6:	c6 2d       	mov	r28, r6
    5db8:	c5 cf       	rjmp	.-118    	; 0x5d44 <strtod+0xd2>
    5dba:	2d 2f       	mov	r18, r29
    5dbc:	2f 7d       	andi	r18, 0xDF	; 223
    5dbe:	25 31       	cpi	r18, 0x15	; 21
    5dc0:	c1 f5       	brne	.+112    	; 0x5e32 <strtod+0x1c0>
    5dc2:	40 81       	ld	r20, Z
    5dc4:	4d 32       	cpi	r20, 0x2D	; 45
    5dc6:	11 f4       	brne	.+4      	; 0x5dcc <strtod+0x15a>
    5dc8:	c0 61       	ori	r28, 0x10	; 16
    5dca:	06 c0       	rjmp	.+12     	; 0x5dd8 <strtod+0x166>
    5dcc:	4b 32       	cpi	r20, 0x2B	; 43
    5dce:	21 f0       	breq	.+8      	; 0x5dd8 <strtod+0x166>
    5dd0:	31 96       	adiw	r30, 0x01	; 1
    5dd2:	21 e0       	ldi	r18, 0x01	; 1
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	06 c0       	rjmp	.+12     	; 0x5de4 <strtod+0x172>
    5dd8:	32 96       	adiw	r30, 0x02	; 2
    5dda:	d6 01       	movw	r26, r12
    5ddc:	11 96       	adiw	r26, 0x01	; 1
    5dde:	4c 91       	ld	r20, X
    5de0:	22 e0       	ldi	r18, 0x02	; 2
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	a0 ed       	ldi	r26, 0xD0	; 208
    5de6:	a4 0f       	add	r26, r20
    5de8:	aa 30       	cpi	r26, 0x0A	; 10
    5dea:	18 f0       	brcs	.+6      	; 0x5df2 <strtod+0x180>
    5dec:	e2 1b       	sub	r30, r18
    5dee:	f3 0b       	sbc	r31, r19
    5df0:	20 c0       	rjmp	.+64     	; 0x5e32 <strtod+0x1c0>
    5df2:	40 e0       	ldi	r20, 0x00	; 0
    5df4:	50 e0       	ldi	r21, 0x00	; 0
    5df6:	40 38       	cpi	r20, 0x80	; 128
    5df8:	bc e0       	ldi	r27, 0x0C	; 12
    5dfa:	5b 07       	cpc	r21, r27
    5dfc:	5c f4       	brge	.+22     	; 0x5e14 <strtod+0x1a2>
    5dfe:	9a 01       	movw	r18, r20
    5e00:	22 0f       	add	r18, r18
    5e02:	33 1f       	adc	r19, r19
    5e04:	22 0f       	add	r18, r18
    5e06:	33 1f       	adc	r19, r19
    5e08:	42 0f       	add	r20, r18
    5e0a:	53 1f       	adc	r21, r19
    5e0c:	44 0f       	add	r20, r20
    5e0e:	55 1f       	adc	r21, r21
    5e10:	4a 0f       	add	r20, r26
    5e12:	51 1d       	adc	r21, r1
    5e14:	31 96       	adiw	r30, 0x01	; 1
    5e16:	df 01       	movw	r26, r30
    5e18:	11 97       	sbiw	r26, 0x01	; 1
    5e1a:	2c 91       	ld	r18, X
    5e1c:	a0 ed       	ldi	r26, 0xD0	; 208
    5e1e:	a2 0f       	add	r26, r18
    5e20:	aa 30       	cpi	r26, 0x0A	; 10
    5e22:	48 f3       	brcs	.-46     	; 0x5df6 <strtod+0x184>
    5e24:	c4 ff       	sbrs	r28, 4
    5e26:	03 c0       	rjmp	.+6      	; 0x5e2e <strtod+0x1bc>
    5e28:	51 95       	neg	r21
    5e2a:	41 95       	neg	r20
    5e2c:	51 09       	sbc	r21, r1
    5e2e:	04 0f       	add	r16, r20
    5e30:	15 1f       	adc	r17, r21
    5e32:	c1 ff       	sbrs	r28, 1
    5e34:	07 c0       	rjmp	.+14     	; 0x5e44 <strtod+0x1d2>
    5e36:	e1 14       	cp	r14, r1
    5e38:	f1 04       	cpc	r15, r1
    5e3a:	21 f0       	breq	.+8      	; 0x5e44 <strtod+0x1d2>
    5e3c:	31 97       	sbiw	r30, 0x01	; 1
    5e3e:	d7 01       	movw	r26, r14
    5e40:	ed 93       	st	X+, r30
    5e42:	fc 93       	st	X, r31
    5e44:	0e 94 9a 22 	call	0x4534	; 0x4534 <__floatunsisf>
    5e48:	c3 70       	andi	r28, 0x03	; 3
    5e4a:	c3 30       	cpi	r28, 0x03	; 3
    5e4c:	19 f0       	breq	.+6      	; 0x5e54 <strtod+0x1e2>
    5e4e:	6b 01       	movw	r12, r22
    5e50:	7c 01       	movw	r14, r24
    5e52:	06 c0       	rjmp	.+12     	; 0x5e60 <strtod+0x1ee>
    5e54:	6b 01       	movw	r12, r22
    5e56:	7c 01       	movw	r14, r24
    5e58:	f7 fa       	bst	r15, 7
    5e5a:	f0 94       	com	r15
    5e5c:	f7 f8       	bld	r15, 7
    5e5e:	f0 94       	com	r15
    5e60:	20 e0       	ldi	r18, 0x00	; 0
    5e62:	30 e0       	ldi	r19, 0x00	; 0
    5e64:	a9 01       	movw	r20, r18
    5e66:	c7 01       	movw	r24, r14
    5e68:	b6 01       	movw	r22, r12
    5e6a:	0e 94 fd 21 	call	0x43fa	; 0x43fa <__cmpsf2>
    5e6e:	88 23       	and	r24, r24
    5e70:	09 f4       	brne	.+2      	; 0x5e74 <strtod+0x202>
    5e72:	45 c0       	rjmp	.+138    	; 0x5efe <strtod+0x28c>
    5e74:	17 ff       	sbrs	r17, 7
    5e76:	06 c0       	rjmp	.+12     	; 0x5e84 <strtod+0x212>
    5e78:	11 95       	neg	r17
    5e7a:	01 95       	neg	r16
    5e7c:	11 09       	sbc	r17, r1
    5e7e:	c9 e1       	ldi	r28, 0x19	; 25
    5e80:	d2 e0       	ldi	r29, 0x02	; 2
    5e82:	02 c0       	rjmp	.+4      	; 0x5e88 <strtod+0x216>
    5e84:	c1 e3       	ldi	r28, 0x31	; 49
    5e86:	d2 e0       	ldi	r29, 0x02	; 2
    5e88:	5e 01       	movw	r10, r28
    5e8a:	b8 e1       	ldi	r27, 0x18	; 24
    5e8c:	ab 1a       	sub	r10, r27
    5e8e:	b1 08       	sbc	r11, r1
    5e90:	46 01       	movw	r8, r12
    5e92:	be 2d       	mov	r27, r14
    5e94:	af 2d       	mov	r26, r15
    5e96:	90 e2       	ldi	r25, 0x20	; 32
    5e98:	e9 2e       	mov	r14, r25
    5e9a:	f1 2c       	mov	r15, r1
    5e9c:	0e 15       	cp	r16, r14
    5e9e:	1f 05       	cpc	r17, r15
    5ea0:	84 f0       	brlt	.+32     	; 0x5ec2 <strtod+0x250>
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	25 91       	lpm	r18, Z+
    5ea6:	35 91       	lpm	r19, Z+
    5ea8:	45 91       	lpm	r20, Z+
    5eaa:	54 91       	lpm	r21, Z
    5eac:	b4 01       	movw	r22, r8
    5eae:	8b 2f       	mov	r24, r27
    5eb0:	9a 2f       	mov	r25, r26
    5eb2:	0e 94 4c 23 	call	0x4698	; 0x4698 <__mulsf3>
    5eb6:	4b 01       	movw	r8, r22
    5eb8:	b8 2f       	mov	r27, r24
    5eba:	a9 2f       	mov	r26, r25
    5ebc:	0e 19       	sub	r16, r14
    5ebe:	1f 09       	sbc	r17, r15
    5ec0:	ed cf       	rjmp	.-38     	; 0x5e9c <strtod+0x22a>
    5ec2:	24 97       	sbiw	r28, 0x04	; 4
    5ec4:	f5 94       	asr	r15
    5ec6:	e7 94       	ror	r14
    5ec8:	ca 15       	cp	r28, r10
    5eca:	db 05       	cpc	r29, r11
    5ecc:	39 f7       	brne	.-50     	; 0x5e9c <strtod+0x22a>
    5ece:	64 01       	movw	r12, r8
    5ed0:	eb 2e       	mov	r14, r27
    5ed2:	fa 2e       	mov	r15, r26
    5ed4:	8e 2d       	mov	r24, r14
    5ed6:	88 0f       	add	r24, r24
    5ed8:	8f 2d       	mov	r24, r15
    5eda:	88 1f       	adc	r24, r24
    5edc:	8f 3f       	cpi	r24, 0xFF	; 255
    5ede:	49 f0       	breq	.+18     	; 0x5ef2 <strtod+0x280>
    5ee0:	20 e0       	ldi	r18, 0x00	; 0
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	a9 01       	movw	r20, r18
    5ee6:	c7 01       	movw	r24, r14
    5ee8:	b6 01       	movw	r22, r12
    5eea:	0e 94 fd 21 	call	0x43fa	; 0x43fa <__cmpsf2>
    5eee:	81 11       	cpse	r24, r1
    5ef0:	06 c0       	rjmp	.+12     	; 0x5efe <strtod+0x28c>
    5ef2:	82 e2       	ldi	r24, 0x22	; 34
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <errno+0x1>
    5efa:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <errno>
    5efe:	c7 01       	movw	r24, r14
    5f00:	b6 01       	movw	r22, r12
    5f02:	09 c0       	rjmp	.+18     	; 0x5f16 <strtod+0x2a4>
    5f04:	60 e0       	ldi	r22, 0x00	; 0
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	80 e8       	ldi	r24, 0x80	; 128
    5f0a:	9f ef       	ldi	r25, 0xFF	; 255
    5f0c:	04 c0       	rjmp	.+8      	; 0x5f16 <strtod+0x2a4>
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	80 ec       	ldi	r24, 0xC0	; 192
    5f14:	9f e7       	ldi	r25, 0x7F	; 127
    5f16:	cd b7       	in	r28, 0x3d	; 61
    5f18:	de b7       	in	r29, 0x3e	; 62
    5f1a:	ee e0       	ldi	r30, 0x0E	; 14
    5f1c:	75 cc       	rjmp	.-1814   	; 0x5808 <__epilogue_restores__+0x8>

00005f1e <abort>:
    5f1e:	81 e0       	ldi	r24, 0x01	; 1
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	f8 94       	cli
    5f24:	79 c3       	rjmp	.+1778   	; 0x6618 <__do_global_dtors>

00005f26 <atof>:
    5f26:	66 27       	eor	r22, r22
    5f28:	77 27       	eor	r23, r23
    5f2a:	a3 ce       	rjmp	.-698    	; 0x5c72 <strtod>

00005f2c <atol>:
    5f2c:	1f 93       	push	r17
    5f2e:	fc 01       	movw	r30, r24
    5f30:	99 27       	eor	r25, r25
    5f32:	88 27       	eor	r24, r24
    5f34:	bc 01       	movw	r22, r24
    5f36:	e8 94       	clt
    5f38:	11 91       	ld	r17, Z+
    5f3a:	10 32       	cpi	r17, 0x20	; 32
    5f3c:	e9 f3       	breq	.-6      	; 0x5f38 <atol+0xc>
    5f3e:	19 30       	cpi	r17, 0x09	; 9
    5f40:	10 f0       	brcs	.+4      	; 0x5f46 <atol+0x1a>
    5f42:	1e 30       	cpi	r17, 0x0E	; 14
    5f44:	c8 f3       	brcs	.-14     	; 0x5f38 <atol+0xc>
    5f46:	1b 32       	cpi	r17, 0x2B	; 43
    5f48:	49 f0       	breq	.+18     	; 0x5f5c <atol+0x30>
    5f4a:	1d 32       	cpi	r17, 0x2D	; 45
    5f4c:	41 f4       	brne	.+16     	; 0x5f5e <atol+0x32>
    5f4e:	68 94       	set
    5f50:	05 c0       	rjmp	.+10     	; 0x5f5c <atol+0x30>
    5f52:	85 d0       	rcall	.+266    	; 0x605e <__mulsi_const_10>
    5f54:	61 0f       	add	r22, r17
    5f56:	71 1d       	adc	r23, r1
    5f58:	81 1d       	adc	r24, r1
    5f5a:	91 1d       	adc	r25, r1
    5f5c:	11 91       	ld	r17, Z+
    5f5e:	10 53       	subi	r17, 0x30	; 48
    5f60:	1a 30       	cpi	r17, 0x0A	; 10
    5f62:	b8 f3       	brcs	.-18     	; 0x5f52 <atol+0x26>
    5f64:	3e f4       	brtc	.+14     	; 0x5f74 <atol+0x48>
    5f66:	90 95       	com	r25
    5f68:	80 95       	com	r24
    5f6a:	70 95       	com	r23
    5f6c:	61 95       	neg	r22
    5f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f70:	8f 4f       	sbci	r24, 0xFF	; 255
    5f72:	9f 4f       	sbci	r25, 0xFF	; 255
    5f74:	1f 91       	pop	r17
    5f76:	08 95       	ret

00005f78 <isspace>:
    5f78:	91 11       	cpse	r25, r1
    5f7a:	25 c3       	rjmp	.+1610   	; 0x65c6 <__ctype_isfalse>
    5f7c:	80 32       	cpi	r24, 0x20	; 32
    5f7e:	19 f0       	breq	.+6      	; 0x5f86 <isspace+0xe>
    5f80:	89 50       	subi	r24, 0x09	; 9
    5f82:	85 50       	subi	r24, 0x05	; 5
    5f84:	d0 f7       	brcc	.-12     	; 0x5f7a <isspace+0x2>
    5f86:	08 95       	ret

00005f88 <strncasecmp_P>:
    5f88:	fb 01       	movw	r30, r22
    5f8a:	dc 01       	movw	r26, r24
    5f8c:	41 50       	subi	r20, 0x01	; 1
    5f8e:	50 40       	sbci	r21, 0x00	; 0
    5f90:	88 f0       	brcs	.+34     	; 0x5fb4 <strncasecmp_P+0x2c>
    5f92:	8d 91       	ld	r24, X+
    5f94:	81 34       	cpi	r24, 0x41	; 65
    5f96:	1c f0       	brlt	.+6      	; 0x5f9e <strncasecmp_P+0x16>
    5f98:	8b 35       	cpi	r24, 0x5B	; 91
    5f9a:	0c f4       	brge	.+2      	; 0x5f9e <strncasecmp_P+0x16>
    5f9c:	80 5e       	subi	r24, 0xE0	; 224
    5f9e:	65 91       	lpm	r22, Z+
    5fa0:	61 34       	cpi	r22, 0x41	; 65
    5fa2:	1c f0       	brlt	.+6      	; 0x5faa <strncasecmp_P+0x22>
    5fa4:	6b 35       	cpi	r22, 0x5B	; 91
    5fa6:	0c f4       	brge	.+2      	; 0x5faa <strncasecmp_P+0x22>
    5fa8:	60 5e       	subi	r22, 0xE0	; 224
    5faa:	86 1b       	sub	r24, r22
    5fac:	61 11       	cpse	r22, r1
    5fae:	71 f3       	breq	.-36     	; 0x5f8c <strncasecmp_P+0x4>
    5fb0:	99 0b       	sbc	r25, r25
    5fb2:	08 95       	ret
    5fb4:	88 1b       	sub	r24, r24
    5fb6:	fc cf       	rjmp	.-8      	; 0x5fb0 <strncasecmp_P+0x28>

00005fb8 <memcpy>:
    5fb8:	fb 01       	movw	r30, r22
    5fba:	dc 01       	movw	r26, r24
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <memcpy+0xa>
    5fbe:	01 90       	ld	r0, Z+
    5fc0:	0d 92       	st	X+, r0
    5fc2:	41 50       	subi	r20, 0x01	; 1
    5fc4:	50 40       	sbci	r21, 0x00	; 0
    5fc6:	d8 f7       	brcc	.-10     	; 0x5fbe <memcpy+0x6>
    5fc8:	08 95       	ret

00005fca <strcmp>:
    5fca:	fb 01       	movw	r30, r22
    5fcc:	dc 01       	movw	r26, r24
    5fce:	8d 91       	ld	r24, X+
    5fd0:	01 90       	ld	r0, Z+
    5fd2:	80 19       	sub	r24, r0
    5fd4:	01 10       	cpse	r0, r1
    5fd6:	d9 f3       	breq	.-10     	; 0x5fce <strcmp+0x4>
    5fd8:	99 0b       	sbc	r25, r25
    5fda:	08 95       	ret

00005fdc <strcpy>:
    5fdc:	fb 01       	movw	r30, r22
    5fde:	dc 01       	movw	r26, r24
    5fe0:	01 90       	ld	r0, Z+
    5fe2:	0d 92       	st	X+, r0
    5fe4:	00 20       	and	r0, r0
    5fe6:	e1 f7       	brne	.-8      	; 0x5fe0 <strcpy+0x4>
    5fe8:	08 95       	ret

00005fea <strncmp>:
    5fea:	fb 01       	movw	r30, r22
    5fec:	dc 01       	movw	r26, r24
    5fee:	41 50       	subi	r20, 0x01	; 1
    5ff0:	50 40       	sbci	r21, 0x00	; 0
    5ff2:	30 f0       	brcs	.+12     	; 0x6000 <strncmp+0x16>
    5ff4:	8d 91       	ld	r24, X+
    5ff6:	01 90       	ld	r0, Z+
    5ff8:	80 19       	sub	r24, r0
    5ffa:	19 f4       	brne	.+6      	; 0x6002 <strncmp+0x18>
    5ffc:	00 20       	and	r0, r0
    5ffe:	b9 f7       	brne	.-18     	; 0x5fee <strncmp+0x4>
    6000:	88 1b       	sub	r24, r24
    6002:	99 0b       	sbc	r25, r25
    6004:	08 95       	ret

00006006 <itoa>:
    6006:	45 32       	cpi	r20, 0x25	; 37
    6008:	51 05       	cpc	r21, r1
    600a:	18 f4       	brcc	.+6      	; 0x6012 <itoa+0xc>
    600c:	42 30       	cpi	r20, 0x02	; 2
    600e:	08 f0       	brcs	.+2      	; 0x6012 <itoa+0xc>
    6010:	04 c0       	rjmp	.+8      	; 0x601a <__itoa_ncheck>
    6012:	fb 01       	movw	r30, r22
    6014:	10 82       	st	Z, r1
    6016:	cb 01       	movw	r24, r22
    6018:	08 95       	ret

0000601a <__itoa_ncheck>:
    601a:	bb 27       	eor	r27, r27
    601c:	4a 30       	cpi	r20, 0x0A	; 10
    601e:	31 f4       	brne	.+12     	; 0x602c <__itoa_ncheck+0x12>
    6020:	99 23       	and	r25, r25
    6022:	22 f4       	brpl	.+8      	; 0x602c <__itoa_ncheck+0x12>
    6024:	bd e2       	ldi	r27, 0x2D	; 45
    6026:	90 95       	com	r25
    6028:	81 95       	neg	r24
    602a:	9f 4f       	sbci	r25, 0xFF	; 255
    602c:	4f c0       	rjmp	.+158    	; 0x60cc <__utoa_common>

0000602e <ltoa>:
    602e:	25 32       	cpi	r18, 0x25	; 37
    6030:	31 05       	cpc	r19, r1
    6032:	18 f4       	brcc	.+6      	; 0x603a <ltoa+0xc>
    6034:	22 30       	cpi	r18, 0x02	; 2
    6036:	08 f0       	brcs	.+2      	; 0x603a <ltoa+0xc>
    6038:	04 c0       	rjmp	.+8      	; 0x6042 <__ltoa_ncheck>
    603a:	fa 01       	movw	r30, r20
    603c:	10 82       	st	Z, r1
    603e:	ca 01       	movw	r24, r20
    6040:	08 95       	ret

00006042 <__ltoa_ncheck>:
    6042:	bb 27       	eor	r27, r27
    6044:	2a 30       	cpi	r18, 0x0A	; 10
    6046:	51 f4       	brne	.+20     	; 0x605c <__ltoa_ncheck+0x1a>
    6048:	99 23       	and	r25, r25
    604a:	42 f4       	brpl	.+16     	; 0x605c <__ltoa_ncheck+0x1a>
    604c:	bd e2       	ldi	r27, 0x2D	; 45
    604e:	90 95       	com	r25
    6050:	80 95       	com	r24
    6052:	70 95       	com	r23
    6054:	61 95       	neg	r22
    6056:	7f 4f       	sbci	r23, 0xFF	; 255
    6058:	8f 4f       	sbci	r24, 0xFF	; 255
    605a:	9f 4f       	sbci	r25, 0xFF	; 255
    605c:	16 c0       	rjmp	.+44     	; 0x608a <__ultoa_common>

0000605e <__mulsi_const_10>:
    605e:	59 2f       	mov	r21, r25
    6060:	48 2f       	mov	r20, r24
    6062:	37 2f       	mov	r19, r23
    6064:	26 2f       	mov	r18, r22
    6066:	66 0f       	add	r22, r22
    6068:	77 1f       	adc	r23, r23
    606a:	88 1f       	adc	r24, r24
    606c:	99 1f       	adc	r25, r25
    606e:	66 0f       	add	r22, r22
    6070:	77 1f       	adc	r23, r23
    6072:	88 1f       	adc	r24, r24
    6074:	99 1f       	adc	r25, r25
    6076:	62 0f       	add	r22, r18
    6078:	73 1f       	adc	r23, r19
    607a:	84 1f       	adc	r24, r20
    607c:	95 1f       	adc	r25, r21
    607e:	66 0f       	add	r22, r22
    6080:	77 1f       	adc	r23, r23
    6082:	88 1f       	adc	r24, r24
    6084:	99 1f       	adc	r25, r25
    6086:	08 95       	ret

00006088 <__ultoa_ncheck>:
    6088:	bb 27       	eor	r27, r27

0000608a <__ultoa_common>:
    608a:	fa 01       	movw	r30, r20
    608c:	a6 2f       	mov	r26, r22
    608e:	62 17       	cp	r22, r18
    6090:	71 05       	cpc	r23, r1
    6092:	81 05       	cpc	r24, r1
    6094:	91 05       	cpc	r25, r1
    6096:	33 0b       	sbc	r19, r19
    6098:	30 fb       	bst	r19, 0
    609a:	66 f0       	brts	.+24     	; 0x60b4 <__ultoa_common+0x2a>
    609c:	aa 27       	eor	r26, r26
    609e:	66 0f       	add	r22, r22
    60a0:	77 1f       	adc	r23, r23
    60a2:	88 1f       	adc	r24, r24
    60a4:	99 1f       	adc	r25, r25
    60a6:	aa 1f       	adc	r26, r26
    60a8:	a2 17       	cp	r26, r18
    60aa:	10 f0       	brcs	.+4      	; 0x60b0 <__ultoa_common+0x26>
    60ac:	a2 1b       	sub	r26, r18
    60ae:	63 95       	inc	r22
    60b0:	38 50       	subi	r19, 0x08	; 8
    60b2:	a9 f7       	brne	.-22     	; 0x609e <__ultoa_common+0x14>
    60b4:	a0 5d       	subi	r26, 0xD0	; 208
    60b6:	aa 33       	cpi	r26, 0x3A	; 58
    60b8:	08 f0       	brcs	.+2      	; 0x60bc <__ultoa_common+0x32>
    60ba:	a9 5d       	subi	r26, 0xD9	; 217
    60bc:	a1 93       	st	Z+, r26
    60be:	36 f7       	brtc	.-52     	; 0x608c <__ultoa_common+0x2>
    60c0:	b1 11       	cpse	r27, r1
    60c2:	b1 93       	st	Z+, r27
    60c4:	10 82       	st	Z, r1
    60c6:	ca 01       	movw	r24, r20
    60c8:	81 c2       	rjmp	.+1282   	; 0x65cc <strrev>

000060ca <__utoa_ncheck>:
    60ca:	bb 27       	eor	r27, r27

000060cc <__utoa_common>:
    60cc:	fb 01       	movw	r30, r22
    60ce:	55 27       	eor	r21, r21
    60d0:	aa 27       	eor	r26, r26
    60d2:	88 0f       	add	r24, r24
    60d4:	99 1f       	adc	r25, r25
    60d6:	aa 1f       	adc	r26, r26
    60d8:	a4 17       	cp	r26, r20
    60da:	10 f0       	brcs	.+4      	; 0x60e0 <__utoa_common+0x14>
    60dc:	a4 1b       	sub	r26, r20
    60de:	83 95       	inc	r24
    60e0:	50 51       	subi	r21, 0x10	; 16
    60e2:	b9 f7       	brne	.-18     	; 0x60d2 <__utoa_common+0x6>
    60e4:	a0 5d       	subi	r26, 0xD0	; 208
    60e6:	aa 33       	cpi	r26, 0x3A	; 58
    60e8:	08 f0       	brcs	.+2      	; 0x60ec <__utoa_common+0x20>
    60ea:	a9 5d       	subi	r26, 0xD9	; 217
    60ec:	a1 93       	st	Z+, r26
    60ee:	00 97       	sbiw	r24, 0x00	; 0
    60f0:	79 f7       	brne	.-34     	; 0x60d0 <__utoa_common+0x4>
    60f2:	b1 11       	cpse	r27, r1
    60f4:	b1 93       	st	Z+, r27
    60f6:	11 92       	st	Z+, r1
    60f8:	cb 01       	movw	r24, r22
    60fa:	68 c2       	rjmp	.+1232   	; 0x65cc <strrev>

000060fc <dtoa_prf>:
    60fc:	4f 92       	push	r4
    60fe:	5f 92       	push	r5
    6100:	6f 92       	push	r6
    6102:	7f 92       	push	r7
    6104:	9f 92       	push	r9
    6106:	af 92       	push	r10
    6108:	bf 92       	push	r11
    610a:	cf 92       	push	r12
    610c:	df 92       	push	r13
    610e:	ef 92       	push	r14
    6110:	ff 92       	push	r15
    6112:	0f 93       	push	r16
    6114:	1f 93       	push	r17
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	cd b7       	in	r28, 0x3d	; 61
    611c:	de b7       	in	r29, 0x3e	; 62
    611e:	29 97       	sbiw	r28, 0x09	; 9
    6120:	0f b6       	in	r0, 0x3f	; 63
    6122:	f8 94       	cli
    6124:	de bf       	out	0x3e, r29	; 62
    6126:	0f be       	out	0x3f, r0	; 63
    6128:	cd bf       	out	0x3d, r28	; 61
    612a:	6a 01       	movw	r12, r20
    612c:	12 2f       	mov	r17, r18
    612e:	b0 2e       	mov	r11, r16
    6130:	2b e3       	ldi	r18, 0x3B	; 59
    6132:	20 17       	cp	r18, r16
    6134:	20 f0       	brcs	.+8      	; 0x613e <dtoa_prf+0x42>
    6136:	ff 24       	eor	r15, r15
    6138:	f3 94       	inc	r15
    613a:	f0 0e       	add	r15, r16
    613c:	02 c0       	rjmp	.+4      	; 0x6142 <dtoa_prf+0x46>
    613e:	bc e3       	ldi	r27, 0x3C	; 60
    6140:	fb 2e       	mov	r15, r27
    6142:	0f 2d       	mov	r16, r15
    6144:	27 e0       	ldi	r18, 0x07	; 7
    6146:	ae 01       	movw	r20, r28
    6148:	4f 5f       	subi	r20, 0xFF	; 255
    614a:	5f 4f       	sbci	r21, 0xFF	; 255
    614c:	64 d1       	rcall	.+712    	; 0x6416 <__ftoa_engine>
    614e:	ac 01       	movw	r20, r24
    6150:	89 81       	ldd	r24, Y+1	; 0x01
    6152:	98 2f       	mov	r25, r24
    6154:	99 70       	andi	r25, 0x09	; 9
    6156:	91 30       	cpi	r25, 0x01	; 1
    6158:	31 f0       	breq	.+12     	; 0x6166 <dtoa_prf+0x6a>
    615a:	e1 fc       	sbrc	r14, 1
    615c:	06 c0       	rjmp	.+12     	; 0x616a <dtoa_prf+0x6e>
    615e:	e0 fe       	sbrs	r14, 0
    6160:	06 c0       	rjmp	.+12     	; 0x616e <dtoa_prf+0x72>
    6162:	90 e2       	ldi	r25, 0x20	; 32
    6164:	05 c0       	rjmp	.+10     	; 0x6170 <dtoa_prf+0x74>
    6166:	9d e2       	ldi	r25, 0x2D	; 45
    6168:	03 c0       	rjmp	.+6      	; 0x6170 <dtoa_prf+0x74>
    616a:	9b e2       	ldi	r25, 0x2B	; 43
    616c:	01 c0       	rjmp	.+2      	; 0x6170 <dtoa_prf+0x74>
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	ee 2d       	mov	r30, r14
    6172:	e0 71       	andi	r30, 0x10	; 16
    6174:	83 ff       	sbrs	r24, 3
    6176:	3c c0       	rjmp	.+120    	; 0x61f0 <dtoa_prf+0xf4>
    6178:	91 11       	cpse	r25, r1
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <dtoa_prf+0x84>
    617c:	83 e0       	ldi	r24, 0x03	; 3
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <dtoa_prf+0x86>
    6180:	84 e0       	ldi	r24, 0x04	; 4
    6182:	81 17       	cp	r24, r17
    6184:	18 f4       	brcc	.+6      	; 0x618c <dtoa_prf+0x90>
    6186:	21 2f       	mov	r18, r17
    6188:	28 1b       	sub	r18, r24
    618a:	01 c0       	rjmp	.+2      	; 0x618e <dtoa_prf+0x92>
    618c:	20 e0       	ldi	r18, 0x00	; 0
    618e:	e1 11       	cpse	r30, r1
    6190:	0b c0       	rjmp	.+22     	; 0x61a8 <dtoa_prf+0xac>
    6192:	f6 01       	movw	r30, r12
    6194:	82 2f       	mov	r24, r18
    6196:	30 e2       	ldi	r19, 0x20	; 32
    6198:	88 23       	and	r24, r24
    619a:	19 f0       	breq	.+6      	; 0x61a2 <dtoa_prf+0xa6>
    619c:	31 93       	st	Z+, r19
    619e:	81 50       	subi	r24, 0x01	; 1
    61a0:	fb cf       	rjmp	.-10     	; 0x6198 <dtoa_prf+0x9c>
    61a2:	c2 0e       	add	r12, r18
    61a4:	d1 1c       	adc	r13, r1
    61a6:	20 e0       	ldi	r18, 0x00	; 0
    61a8:	99 23       	and	r25, r25
    61aa:	29 f0       	breq	.+10     	; 0x61b6 <dtoa_prf+0xba>
    61ac:	d6 01       	movw	r26, r12
    61ae:	9c 93       	st	X, r25
    61b0:	f6 01       	movw	r30, r12
    61b2:	31 96       	adiw	r30, 0x01	; 1
    61b4:	6f 01       	movw	r12, r30
    61b6:	c6 01       	movw	r24, r12
    61b8:	03 96       	adiw	r24, 0x03	; 3
    61ba:	e2 fe       	sbrs	r14, 2
    61bc:	0a c0       	rjmp	.+20     	; 0x61d2 <dtoa_prf+0xd6>
    61be:	3e e4       	ldi	r19, 0x4E	; 78
    61c0:	d6 01       	movw	r26, r12
    61c2:	3c 93       	st	X, r19
    61c4:	41 e4       	ldi	r20, 0x41	; 65
    61c6:	11 96       	adiw	r26, 0x01	; 1
    61c8:	4c 93       	st	X, r20
    61ca:	11 97       	sbiw	r26, 0x01	; 1
    61cc:	12 96       	adiw	r26, 0x02	; 2
    61ce:	3c 93       	st	X, r19
    61d0:	06 c0       	rjmp	.+12     	; 0x61de <dtoa_prf+0xe2>
    61d2:	3e e6       	ldi	r19, 0x6E	; 110
    61d4:	f6 01       	movw	r30, r12
    61d6:	30 83       	st	Z, r19
    61d8:	41 e6       	ldi	r20, 0x61	; 97
    61da:	41 83       	std	Z+1, r20	; 0x01
    61dc:	32 83       	std	Z+2, r19	; 0x02
    61de:	fc 01       	movw	r30, r24
    61e0:	32 2f       	mov	r19, r18
    61e2:	40 e2       	ldi	r20, 0x20	; 32
    61e4:	33 23       	and	r19, r19
    61e6:	09 f4       	brne	.+2      	; 0x61ea <dtoa_prf+0xee>
    61e8:	42 c0       	rjmp	.+132    	; 0x626e <dtoa_prf+0x172>
    61ea:	41 93       	st	Z+, r20
    61ec:	31 50       	subi	r19, 0x01	; 1
    61ee:	fa cf       	rjmp	.-12     	; 0x61e4 <dtoa_prf+0xe8>
    61f0:	82 ff       	sbrs	r24, 2
    61f2:	44 c0       	rjmp	.+136    	; 0x627c <dtoa_prf+0x180>
    61f4:	91 11       	cpse	r25, r1
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <dtoa_prf+0x100>
    61f8:	83 e0       	ldi	r24, 0x03	; 3
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <dtoa_prf+0x102>
    61fc:	84 e0       	ldi	r24, 0x04	; 4
    61fe:	81 17       	cp	r24, r17
    6200:	18 f4       	brcc	.+6      	; 0x6208 <dtoa_prf+0x10c>
    6202:	21 2f       	mov	r18, r17
    6204:	28 1b       	sub	r18, r24
    6206:	01 c0       	rjmp	.+2      	; 0x620a <dtoa_prf+0x10e>
    6208:	20 e0       	ldi	r18, 0x00	; 0
    620a:	e1 11       	cpse	r30, r1
    620c:	0b c0       	rjmp	.+22     	; 0x6224 <dtoa_prf+0x128>
    620e:	f6 01       	movw	r30, r12
    6210:	82 2f       	mov	r24, r18
    6212:	30 e2       	ldi	r19, 0x20	; 32
    6214:	88 23       	and	r24, r24
    6216:	19 f0       	breq	.+6      	; 0x621e <dtoa_prf+0x122>
    6218:	31 93       	st	Z+, r19
    621a:	81 50       	subi	r24, 0x01	; 1
    621c:	fb cf       	rjmp	.-10     	; 0x6214 <dtoa_prf+0x118>
    621e:	c2 0e       	add	r12, r18
    6220:	d1 1c       	adc	r13, r1
    6222:	20 e0       	ldi	r18, 0x00	; 0
    6224:	99 23       	and	r25, r25
    6226:	29 f0       	breq	.+10     	; 0x6232 <dtoa_prf+0x136>
    6228:	d6 01       	movw	r26, r12
    622a:	9c 93       	st	X, r25
    622c:	f6 01       	movw	r30, r12
    622e:	31 96       	adiw	r30, 0x01	; 1
    6230:	6f 01       	movw	r12, r30
    6232:	c6 01       	movw	r24, r12
    6234:	03 96       	adiw	r24, 0x03	; 3
    6236:	e2 fe       	sbrs	r14, 2
    6238:	0b c0       	rjmp	.+22     	; 0x6250 <dtoa_prf+0x154>
    623a:	39 e4       	ldi	r19, 0x49	; 73
    623c:	d6 01       	movw	r26, r12
    623e:	3c 93       	st	X, r19
    6240:	3e e4       	ldi	r19, 0x4E	; 78
    6242:	11 96       	adiw	r26, 0x01	; 1
    6244:	3c 93       	st	X, r19
    6246:	11 97       	sbiw	r26, 0x01	; 1
    6248:	36 e4       	ldi	r19, 0x46	; 70
    624a:	12 96       	adiw	r26, 0x02	; 2
    624c:	3c 93       	st	X, r19
    624e:	07 c0       	rjmp	.+14     	; 0x625e <dtoa_prf+0x162>
    6250:	39 e6       	ldi	r19, 0x69	; 105
    6252:	f6 01       	movw	r30, r12
    6254:	30 83       	st	Z, r19
    6256:	3e e6       	ldi	r19, 0x6E	; 110
    6258:	31 83       	std	Z+1, r19	; 0x01
    625a:	36 e6       	ldi	r19, 0x66	; 102
    625c:	32 83       	std	Z+2, r19	; 0x02
    625e:	fc 01       	movw	r30, r24
    6260:	32 2f       	mov	r19, r18
    6262:	40 e2       	ldi	r20, 0x20	; 32
    6264:	33 23       	and	r19, r19
    6266:	19 f0       	breq	.+6      	; 0x626e <dtoa_prf+0x172>
    6268:	41 93       	st	Z+, r20
    626a:	31 50       	subi	r19, 0x01	; 1
    626c:	fb cf       	rjmp	.-10     	; 0x6264 <dtoa_prf+0x168>
    626e:	fc 01       	movw	r30, r24
    6270:	e2 0f       	add	r30, r18
    6272:	f1 1d       	adc	r31, r1
    6274:	10 82       	st	Z, r1
    6276:	8e ef       	ldi	r24, 0xFE	; 254
    6278:	9f ef       	ldi	r25, 0xFF	; 255
    627a:	b7 c0       	rjmp	.+366    	; 0x63ea <dtoa_prf+0x2ee>
    627c:	f1 e0       	ldi	r31, 0x01	; 1
    627e:	91 11       	cpse	r25, r1
    6280:	01 c0       	rjmp	.+2      	; 0x6284 <dtoa_prf+0x188>
    6282:	f0 e0       	ldi	r31, 0x00	; 0
    6284:	6f 2f       	mov	r22, r31
    6286:	70 e0       	ldi	r23, 0x00	; 0
    6288:	14 16       	cp	r1, r20
    628a:	15 06       	cpc	r1, r21
    628c:	24 f4       	brge	.+8      	; 0x6296 <dtoa_prf+0x19a>
    628e:	9a 01       	movw	r18, r20
    6290:	2f 5f       	subi	r18, 0xFF	; 255
    6292:	3f 4f       	sbci	r19, 0xFF	; 255
    6294:	02 c0       	rjmp	.+4      	; 0x629a <dtoa_prf+0x19e>
    6296:	21 e0       	ldi	r18, 0x01	; 1
    6298:	30 e0       	ldi	r19, 0x00	; 0
    629a:	26 0f       	add	r18, r22
    629c:	37 1f       	adc	r19, r23
    629e:	bb 20       	and	r11, r11
    62a0:	29 f0       	breq	.+10     	; 0x62ac <dtoa_prf+0x1b0>
    62a2:	6b 2d       	mov	r22, r11
    62a4:	70 e0       	ldi	r23, 0x00	; 0
    62a6:	6f 5f       	subi	r22, 0xFF	; 255
    62a8:	7f 4f       	sbci	r23, 0xFF	; 255
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <dtoa_prf+0x1b4>
    62ac:	60 e0       	ldi	r22, 0x00	; 0
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	26 0f       	add	r18, r22
    62b2:	37 1f       	adc	r19, r23
    62b4:	61 2f       	mov	r22, r17
    62b6:	70 e0       	ldi	r23, 0x00	; 0
    62b8:	26 17       	cp	r18, r22
    62ba:	37 07       	cpc	r19, r23
    62bc:	1c f4       	brge	.+6      	; 0x62c4 <dtoa_prf+0x1c8>
    62be:	12 1b       	sub	r17, r18
    62c0:	21 2f       	mov	r18, r17
    62c2:	01 c0       	rjmp	.+2      	; 0x62c6 <dtoa_prf+0x1ca>
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	3e 2d       	mov	r19, r14
    62c8:	38 71       	andi	r19, 0x18	; 24
    62ca:	59 f4       	brne	.+22     	; 0x62e2 <dtoa_prf+0x1e6>
    62cc:	d6 01       	movw	r26, r12
    62ce:	32 2f       	mov	r19, r18
    62d0:	60 e2       	ldi	r22, 0x20	; 32
    62d2:	33 23       	and	r19, r19
    62d4:	19 f0       	breq	.+6      	; 0x62dc <dtoa_prf+0x1e0>
    62d6:	6d 93       	st	X+, r22
    62d8:	31 50       	subi	r19, 0x01	; 1
    62da:	fb cf       	rjmp	.-10     	; 0x62d2 <dtoa_prf+0x1d6>
    62dc:	c2 0e       	add	r12, r18
    62de:	d1 1c       	adc	r13, r1
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	ff 23       	and	r31, r31
    62e4:	31 f0       	breq	.+12     	; 0x62f2 <dtoa_prf+0x1f6>
    62e6:	d6 01       	movw	r26, r12
    62e8:	9c 93       	st	X, r25
    62ea:	b6 01       	movw	r22, r12
    62ec:	6f 5f       	subi	r22, 0xFF	; 255
    62ee:	7f 4f       	sbci	r23, 0xFF	; 255
    62f0:	6b 01       	movw	r12, r22
    62f2:	e1 11       	cpse	r30, r1
    62f4:	0b c0       	rjmp	.+22     	; 0x630c <dtoa_prf+0x210>
    62f6:	f6 01       	movw	r30, r12
    62f8:	92 2f       	mov	r25, r18
    62fa:	30 e3       	ldi	r19, 0x30	; 48
    62fc:	99 23       	and	r25, r25
    62fe:	19 f0       	breq	.+6      	; 0x6306 <dtoa_prf+0x20a>
    6300:	31 93       	st	Z+, r19
    6302:	91 50       	subi	r25, 0x01	; 1
    6304:	fb cf       	rjmp	.-10     	; 0x62fc <dtoa_prf+0x200>
    6306:	c2 0e       	add	r12, r18
    6308:	d1 1c       	adc	r13, r1
    630a:	20 e0       	ldi	r18, 0x00	; 0
    630c:	9f 2d       	mov	r25, r15
    630e:	94 0f       	add	r25, r20
    6310:	3a 81       	ldd	r19, Y+2	; 0x02
    6312:	78 2f       	mov	r23, r24
    6314:	70 71       	andi	r23, 0x10	; 16
    6316:	a7 2e       	mov	r10, r23
    6318:	84 ff       	sbrs	r24, 4
    631a:	03 c0       	rjmp	.+6      	; 0x6322 <dtoa_prf+0x226>
    631c:	31 33       	cpi	r19, 0x31	; 49
    631e:	09 f4       	brne	.+2      	; 0x6322 <dtoa_prf+0x226>
    6320:	91 50       	subi	r25, 0x01	; 1
    6322:	19 16       	cp	r1, r25
    6324:	24 f4       	brge	.+8      	; 0x632e <dtoa_prf+0x232>
    6326:	99 30       	cpi	r25, 0x09	; 9
    6328:	18 f0       	brcs	.+6      	; 0x6330 <dtoa_prf+0x234>
    632a:	98 e0       	ldi	r25, 0x08	; 8
    632c:	01 c0       	rjmp	.+2      	; 0x6330 <dtoa_prf+0x234>
    632e:	91 e0       	ldi	r25, 0x01	; 1
    6330:	e4 2f       	mov	r30, r20
    6332:	85 2f       	mov	r24, r21
    6334:	57 ff       	sbrs	r21, 7
    6336:	02 c0       	rjmp	.+4      	; 0x633c <dtoa_prf+0x240>
    6338:	e0 e0       	ldi	r30, 0x00	; 0
    633a:	80 e0       	ldi	r24, 0x00	; 0
    633c:	6e 2f       	mov	r22, r30
    633e:	78 2f       	mov	r23, r24
    6340:	e0 e0       	ldi	r30, 0x00	; 0
    6342:	f0 e0       	ldi	r31, 0x00	; 0
    6344:	ae e2       	ldi	r26, 0x2E	; 46
    6346:	9a 2e       	mov	r9, r26
    6348:	3a 01       	movw	r6, r20
    634a:	69 1a       	sub	r6, r25
    634c:	71 08       	sbc	r7, r1
    634e:	2a 01       	movw	r4, r20
    6350:	46 1a       	sub	r4, r22
    6352:	57 0a       	sbc	r5, r23
    6354:	0b 2d       	mov	r16, r11
    6356:	10 e0       	ldi	r17, 0x00	; 0
    6358:	11 95       	neg	r17
    635a:	01 95       	neg	r16
    635c:	11 09       	sbc	r17, r1
    635e:	6f 3f       	cpi	r22, 0xFF	; 255
    6360:	8f ef       	ldi	r24, 0xFF	; 255
    6362:	78 07       	cpc	r23, r24
    6364:	29 f4       	brne	.+10     	; 0x6370 <dtoa_prf+0x274>
    6366:	d6 01       	movw	r26, r12
    6368:	9c 92       	st	X, r9
    636a:	c6 01       	movw	r24, r12
    636c:	01 96       	adiw	r24, 0x01	; 1
    636e:	6c 01       	movw	r12, r24
    6370:	46 17       	cp	r20, r22
    6372:	57 07       	cpc	r21, r23
    6374:	84 f0       	brlt	.+32     	; 0x6396 <dtoa_prf+0x29a>
    6376:	66 16       	cp	r6, r22
    6378:	77 06       	cpc	r7, r23
    637a:	6c f4       	brge	.+26     	; 0x6396 <dtoa_prf+0x29a>
    637c:	7f 01       	movw	r14, r30
    637e:	e4 0c       	add	r14, r4
    6380:	f5 1c       	adc	r15, r5
    6382:	a1 e0       	ldi	r26, 0x01	; 1
    6384:	b0 e0       	ldi	r27, 0x00	; 0
    6386:	ac 0f       	add	r26, r28
    6388:	bd 1f       	adc	r27, r29
    638a:	ea 0e       	add	r14, r26
    638c:	fb 1e       	adc	r15, r27
    638e:	d7 01       	movw	r26, r14
    6390:	11 96       	adiw	r26, 0x01	; 1
    6392:	bc 90       	ld	r11, X
    6394:	02 c0       	rjmp	.+4      	; 0x639a <dtoa_prf+0x29e>
    6396:	90 e3       	ldi	r25, 0x30	; 48
    6398:	b9 2e       	mov	r11, r25
    639a:	61 50       	subi	r22, 0x01	; 1
    639c:	71 09       	sbc	r23, r1
    639e:	31 96       	adiw	r30, 0x01	; 1
    63a0:	c6 01       	movw	r24, r12
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	7c 01       	movw	r14, r24
    63a6:	60 17       	cp	r22, r16
    63a8:	71 07       	cpc	r23, r17
    63aa:	24 f0       	brlt	.+8      	; 0x63b4 <dtoa_prf+0x2b8>
    63ac:	d6 01       	movw	r26, r12
    63ae:	bc 92       	st	X, r11
    63b0:	6c 01       	movw	r12, r24
    63b2:	d5 cf       	rjmp	.-86     	; 0x635e <dtoa_prf+0x262>
    63b4:	64 17       	cp	r22, r20
    63b6:	75 07       	cpc	r23, r21
    63b8:	41 f4       	brne	.+16     	; 0x63ca <dtoa_prf+0x2ce>
    63ba:	36 33       	cpi	r19, 0x36	; 54
    63bc:	20 f4       	brcc	.+8      	; 0x63c6 <dtoa_prf+0x2ca>
    63be:	35 33       	cpi	r19, 0x35	; 53
    63c0:	21 f4       	brne	.+8      	; 0x63ca <dtoa_prf+0x2ce>
    63c2:	a1 10       	cpse	r10, r1
    63c4:	02 c0       	rjmp	.+4      	; 0x63ca <dtoa_prf+0x2ce>
    63c6:	81 e3       	ldi	r24, 0x31	; 49
    63c8:	b8 2e       	mov	r11, r24
    63ca:	f6 01       	movw	r30, r12
    63cc:	b0 82       	st	Z, r11
    63ce:	f7 01       	movw	r30, r14
    63d0:	82 2f       	mov	r24, r18
    63d2:	90 e2       	ldi	r25, 0x20	; 32
    63d4:	88 23       	and	r24, r24
    63d6:	19 f0       	breq	.+6      	; 0x63de <dtoa_prf+0x2e2>
    63d8:	91 93       	st	Z+, r25
    63da:	81 50       	subi	r24, 0x01	; 1
    63dc:	fb cf       	rjmp	.-10     	; 0x63d4 <dtoa_prf+0x2d8>
    63de:	f7 01       	movw	r30, r14
    63e0:	e2 0f       	add	r30, r18
    63e2:	f1 1d       	adc	r31, r1
    63e4:	10 82       	st	Z, r1
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	29 96       	adiw	r28, 0x09	; 9
    63ec:	0f b6       	in	r0, 0x3f	; 63
    63ee:	f8 94       	cli
    63f0:	de bf       	out	0x3e, r29	; 62
    63f2:	0f be       	out	0x3f, r0	; 63
    63f4:	cd bf       	out	0x3d, r28	; 61
    63f6:	df 91       	pop	r29
    63f8:	cf 91       	pop	r28
    63fa:	1f 91       	pop	r17
    63fc:	0f 91       	pop	r16
    63fe:	ff 90       	pop	r15
    6400:	ef 90       	pop	r14
    6402:	df 90       	pop	r13
    6404:	cf 90       	pop	r12
    6406:	bf 90       	pop	r11
    6408:	af 90       	pop	r10
    640a:	9f 90       	pop	r9
    640c:	7f 90       	pop	r7
    640e:	6f 90       	pop	r6
    6410:	5f 90       	pop	r5
    6412:	4f 90       	pop	r4
    6414:	08 95       	ret

00006416 <__ftoa_engine>:
    6416:	28 30       	cpi	r18, 0x08	; 8
    6418:	08 f0       	brcs	.+2      	; 0x641c <__ftoa_engine+0x6>
    641a:	27 e0       	ldi	r18, 0x07	; 7
    641c:	33 27       	eor	r19, r19
    641e:	da 01       	movw	r26, r20
    6420:	99 0f       	add	r25, r25
    6422:	31 1d       	adc	r19, r1
    6424:	87 fd       	sbrc	r24, 7
    6426:	91 60       	ori	r25, 0x01	; 1
    6428:	00 96       	adiw	r24, 0x00	; 0
    642a:	61 05       	cpc	r22, r1
    642c:	71 05       	cpc	r23, r1
    642e:	39 f4       	brne	.+14     	; 0x643e <__ftoa_engine+0x28>
    6430:	32 60       	ori	r19, 0x02	; 2
    6432:	2e 5f       	subi	r18, 0xFE	; 254
    6434:	3d 93       	st	X+, r19
    6436:	30 e3       	ldi	r19, 0x30	; 48
    6438:	2a 95       	dec	r18
    643a:	e1 f7       	brne	.-8      	; 0x6434 <__ftoa_engine+0x1e>
    643c:	08 95       	ret
    643e:	9f 3f       	cpi	r25, 0xFF	; 255
    6440:	30 f0       	brcs	.+12     	; 0x644e <__ftoa_engine+0x38>
    6442:	80 38       	cpi	r24, 0x80	; 128
    6444:	71 05       	cpc	r23, r1
    6446:	61 05       	cpc	r22, r1
    6448:	09 f0       	breq	.+2      	; 0x644c <__ftoa_engine+0x36>
    644a:	3c 5f       	subi	r19, 0xFC	; 252
    644c:	3c 5f       	subi	r19, 0xFC	; 252
    644e:	3d 93       	st	X+, r19
    6450:	91 30       	cpi	r25, 0x01	; 1
    6452:	08 f0       	brcs	.+2      	; 0x6456 <__ftoa_engine+0x40>
    6454:	80 68       	ori	r24, 0x80	; 128
    6456:	91 1d       	adc	r25, r1
    6458:	df 93       	push	r29
    645a:	cf 93       	push	r28
    645c:	1f 93       	push	r17
    645e:	0f 93       	push	r16
    6460:	ff 92       	push	r15
    6462:	ef 92       	push	r14
    6464:	19 2f       	mov	r17, r25
    6466:	98 7f       	andi	r25, 0xF8	; 248
    6468:	96 95       	lsr	r25
    646a:	e9 2f       	mov	r30, r25
    646c:	96 95       	lsr	r25
    646e:	96 95       	lsr	r25
    6470:	e9 0f       	add	r30, r25
    6472:	ff 27       	eor	r31, r31
    6474:	e1 57       	subi	r30, 0x71	; 113
    6476:	fd 4f       	sbci	r31, 0xFD	; 253
    6478:	99 27       	eor	r25, r25
    647a:	33 27       	eor	r19, r19
    647c:	ee 24       	eor	r14, r14
    647e:	ff 24       	eor	r15, r15
    6480:	a7 01       	movw	r20, r14
    6482:	e7 01       	movw	r28, r14
    6484:	05 90       	lpm	r0, Z+
    6486:	08 94       	sec
    6488:	07 94       	ror	r0
    648a:	28 f4       	brcc	.+10     	; 0x6496 <__ftoa_engine+0x80>
    648c:	36 0f       	add	r19, r22
    648e:	e7 1e       	adc	r14, r23
    6490:	f8 1e       	adc	r15, r24
    6492:	49 1f       	adc	r20, r25
    6494:	51 1d       	adc	r21, r1
    6496:	66 0f       	add	r22, r22
    6498:	77 1f       	adc	r23, r23
    649a:	88 1f       	adc	r24, r24
    649c:	99 1f       	adc	r25, r25
    649e:	06 94       	lsr	r0
    64a0:	a1 f7       	brne	.-24     	; 0x648a <__ftoa_engine+0x74>
    64a2:	05 90       	lpm	r0, Z+
    64a4:	07 94       	ror	r0
    64a6:	28 f4       	brcc	.+10     	; 0x64b2 <__ftoa_engine+0x9c>
    64a8:	e7 0e       	add	r14, r23
    64aa:	f8 1e       	adc	r15, r24
    64ac:	49 1f       	adc	r20, r25
    64ae:	56 1f       	adc	r21, r22
    64b0:	c1 1d       	adc	r28, r1
    64b2:	77 0f       	add	r23, r23
    64b4:	88 1f       	adc	r24, r24
    64b6:	99 1f       	adc	r25, r25
    64b8:	66 1f       	adc	r22, r22
    64ba:	06 94       	lsr	r0
    64bc:	a1 f7       	brne	.-24     	; 0x64a6 <__ftoa_engine+0x90>
    64be:	05 90       	lpm	r0, Z+
    64c0:	07 94       	ror	r0
    64c2:	28 f4       	brcc	.+10     	; 0x64ce <__ftoa_engine+0xb8>
    64c4:	f8 0e       	add	r15, r24
    64c6:	49 1f       	adc	r20, r25
    64c8:	56 1f       	adc	r21, r22
    64ca:	c7 1f       	adc	r28, r23
    64cc:	d1 1d       	adc	r29, r1
    64ce:	88 0f       	add	r24, r24
    64d0:	99 1f       	adc	r25, r25
    64d2:	66 1f       	adc	r22, r22
    64d4:	77 1f       	adc	r23, r23
    64d6:	06 94       	lsr	r0
    64d8:	a1 f7       	brne	.-24     	; 0x64c2 <__ftoa_engine+0xac>
    64da:	05 90       	lpm	r0, Z+
    64dc:	07 94       	ror	r0
    64de:	20 f4       	brcc	.+8      	; 0x64e8 <__ftoa_engine+0xd2>
    64e0:	49 0f       	add	r20, r25
    64e2:	56 1f       	adc	r21, r22
    64e4:	c7 1f       	adc	r28, r23
    64e6:	d8 1f       	adc	r29, r24
    64e8:	99 0f       	add	r25, r25
    64ea:	66 1f       	adc	r22, r22
    64ec:	77 1f       	adc	r23, r23
    64ee:	88 1f       	adc	r24, r24
    64f0:	06 94       	lsr	r0
    64f2:	a9 f7       	brne	.-22     	; 0x64de <__ftoa_engine+0xc8>
    64f4:	84 91       	lpm	r24, Z
    64f6:	10 95       	com	r17
    64f8:	17 70       	andi	r17, 0x07	; 7
    64fa:	41 f0       	breq	.+16     	; 0x650c <__ftoa_engine+0xf6>
    64fc:	d6 95       	lsr	r29
    64fe:	c7 95       	ror	r28
    6500:	57 95       	ror	r21
    6502:	47 95       	ror	r20
    6504:	f7 94       	ror	r15
    6506:	e7 94       	ror	r14
    6508:	1a 95       	dec	r17
    650a:	c1 f7       	brne	.-16     	; 0x64fc <__ftoa_engine+0xe6>
    650c:	e5 e3       	ldi	r30, 0x35	; 53
    650e:	f2 e0       	ldi	r31, 0x02	; 2
    6510:	68 94       	set
    6512:	15 90       	lpm	r1, Z+
    6514:	15 91       	lpm	r17, Z+
    6516:	35 91       	lpm	r19, Z+
    6518:	65 91       	lpm	r22, Z+
    651a:	95 91       	lpm	r25, Z+
    651c:	05 90       	lpm	r0, Z+
    651e:	7f e2       	ldi	r23, 0x2F	; 47
    6520:	73 95       	inc	r23
    6522:	e1 18       	sub	r14, r1
    6524:	f1 0a       	sbc	r15, r17
    6526:	43 0b       	sbc	r20, r19
    6528:	56 0b       	sbc	r21, r22
    652a:	c9 0b       	sbc	r28, r25
    652c:	d0 09       	sbc	r29, r0
    652e:	c0 f7       	brcc	.-16     	; 0x6520 <__ftoa_engine+0x10a>
    6530:	e1 0c       	add	r14, r1
    6532:	f1 1e       	adc	r15, r17
    6534:	43 1f       	adc	r20, r19
    6536:	56 1f       	adc	r21, r22
    6538:	c9 1f       	adc	r28, r25
    653a:	d0 1d       	adc	r29, r0
    653c:	7e f4       	brtc	.+30     	; 0x655c <__ftoa_engine+0x146>
    653e:	70 33       	cpi	r23, 0x30	; 48
    6540:	11 f4       	brne	.+4      	; 0x6546 <__ftoa_engine+0x130>
    6542:	8a 95       	dec	r24
    6544:	e6 cf       	rjmp	.-52     	; 0x6512 <__ftoa_engine+0xfc>
    6546:	e8 94       	clt
    6548:	01 50       	subi	r16, 0x01	; 1
    654a:	30 f0       	brcs	.+12     	; 0x6558 <__ftoa_engine+0x142>
    654c:	08 0f       	add	r16, r24
    654e:	0a f4       	brpl	.+2      	; 0x6552 <__ftoa_engine+0x13c>
    6550:	00 27       	eor	r16, r16
    6552:	02 17       	cp	r16, r18
    6554:	08 f4       	brcc	.+2      	; 0x6558 <__ftoa_engine+0x142>
    6556:	20 2f       	mov	r18, r16
    6558:	23 95       	inc	r18
    655a:	02 2f       	mov	r16, r18
    655c:	7a 33       	cpi	r23, 0x3A	; 58
    655e:	28 f0       	brcs	.+10     	; 0x656a <__ftoa_engine+0x154>
    6560:	79 e3       	ldi	r23, 0x39	; 57
    6562:	7d 93       	st	X+, r23
    6564:	2a 95       	dec	r18
    6566:	e9 f7       	brne	.-6      	; 0x6562 <__ftoa_engine+0x14c>
    6568:	10 c0       	rjmp	.+32     	; 0x658a <__ftoa_engine+0x174>
    656a:	7d 93       	st	X+, r23
    656c:	2a 95       	dec	r18
    656e:	89 f6       	brne	.-94     	; 0x6512 <__ftoa_engine+0xfc>
    6570:	06 94       	lsr	r0
    6572:	97 95       	ror	r25
    6574:	67 95       	ror	r22
    6576:	37 95       	ror	r19
    6578:	17 95       	ror	r17
    657a:	17 94       	ror	r1
    657c:	e1 18       	sub	r14, r1
    657e:	f1 0a       	sbc	r15, r17
    6580:	43 0b       	sbc	r20, r19
    6582:	56 0b       	sbc	r21, r22
    6584:	c9 0b       	sbc	r28, r25
    6586:	d0 09       	sbc	r29, r0
    6588:	98 f0       	brcs	.+38     	; 0x65b0 <__ftoa_engine+0x19a>
    658a:	23 95       	inc	r18
    658c:	7e 91       	ld	r23, -X
    658e:	73 95       	inc	r23
    6590:	7a 33       	cpi	r23, 0x3A	; 58
    6592:	08 f0       	brcs	.+2      	; 0x6596 <__ftoa_engine+0x180>
    6594:	70 e3       	ldi	r23, 0x30	; 48
    6596:	7c 93       	st	X, r23
    6598:	20 13       	cpse	r18, r16
    659a:	b8 f7       	brcc	.-18     	; 0x658a <__ftoa_engine+0x174>
    659c:	7e 91       	ld	r23, -X
    659e:	70 61       	ori	r23, 0x10	; 16
    65a0:	7d 93       	st	X+, r23
    65a2:	30 f0       	brcs	.+12     	; 0x65b0 <__ftoa_engine+0x19a>
    65a4:	83 95       	inc	r24
    65a6:	71 e3       	ldi	r23, 0x31	; 49
    65a8:	7d 93       	st	X+, r23
    65aa:	70 e3       	ldi	r23, 0x30	; 48
    65ac:	2a 95       	dec	r18
    65ae:	e1 f7       	brne	.-8      	; 0x65a8 <__ftoa_engine+0x192>
    65b0:	11 24       	eor	r1, r1
    65b2:	ef 90       	pop	r14
    65b4:	ff 90       	pop	r15
    65b6:	0f 91       	pop	r16
    65b8:	1f 91       	pop	r17
    65ba:	cf 91       	pop	r28
    65bc:	df 91       	pop	r29
    65be:	99 27       	eor	r25, r25
    65c0:	87 fd       	sbrc	r24, 7
    65c2:	90 95       	com	r25
    65c4:	08 95       	ret

000065c6 <__ctype_isfalse>:
    65c6:	99 27       	eor	r25, r25
    65c8:	88 27       	eor	r24, r24

000065ca <__ctype_istrue>:
    65ca:	08 95       	ret

000065cc <strrev>:
    65cc:	dc 01       	movw	r26, r24
    65ce:	fc 01       	movw	r30, r24
    65d0:	67 2f       	mov	r22, r23
    65d2:	71 91       	ld	r23, Z+
    65d4:	77 23       	and	r23, r23
    65d6:	e1 f7       	brne	.-8      	; 0x65d0 <strrev+0x4>
    65d8:	32 97       	sbiw	r30, 0x02	; 2
    65da:	04 c0       	rjmp	.+8      	; 0x65e4 <strrev+0x18>
    65dc:	7c 91       	ld	r23, X
    65de:	6d 93       	st	X+, r22
    65e0:	70 83       	st	Z, r23
    65e2:	62 91       	ld	r22, -Z
    65e4:	ae 17       	cp	r26, r30
    65e6:	bf 07       	cpc	r27, r31
    65e8:	c8 f3       	brcs	.-14     	; 0x65dc <strrev+0x10>
    65ea:	08 95       	ret

000065ec <eeprom_read_byte>:
    65ec:	f9 99       	sbic	0x1f, 1	; 31
    65ee:	fe cf       	rjmp	.-4      	; 0x65ec <eeprom_read_byte>
    65f0:	92 bd       	out	0x22, r25	; 34
    65f2:	81 bd       	out	0x21, r24	; 33
    65f4:	f8 9a       	sbi	0x1f, 0	; 31
    65f6:	99 27       	eor	r25, r25
    65f8:	80 b5       	in	r24, 0x20	; 32
    65fa:	08 95       	ret

000065fc <eeprom_write_byte>:
    65fc:	26 2f       	mov	r18, r22

000065fe <eeprom_write_r18>:
    65fe:	f9 99       	sbic	0x1f, 1	; 31
    6600:	fe cf       	rjmp	.-4      	; 0x65fe <eeprom_write_r18>
    6602:	1f ba       	out	0x1f, r1	; 31
    6604:	92 bd       	out	0x22, r25	; 34
    6606:	81 bd       	out	0x21, r24	; 33
    6608:	20 bd       	out	0x20, r18	; 32
    660a:	0f b6       	in	r0, 0x3f	; 63
    660c:	f8 94       	cli
    660e:	fa 9a       	sbi	0x1f, 2	; 31
    6610:	f9 9a       	sbi	0x1f, 1	; 31
    6612:	0f be       	out	0x3f, r0	; 63
    6614:	01 96       	adiw	r24, 0x01	; 1
    6616:	08 95       	ret

00006618 <__do_global_dtors>:
    6618:	12 e0       	ldi	r17, 0x02	; 2
    661a:	c0 e3       	ldi	r28, 0x30	; 48
    661c:	d2 e0       	ldi	r29, 0x02	; 2
    661e:	03 c0       	rjmp	.+6      	; 0x6626 <__do_global_dtors+0xe>
    6620:	fe 01       	movw	r30, r28
    6622:	c2 d8       	rcall	.-3708   	; 0x57a8 <__tablejump2__>
    6624:	21 96       	adiw	r28, 0x01	; 1
    6626:	c2 33       	cpi	r28, 0x32	; 50
    6628:	d1 07       	cpc	r29, r17
    662a:	d1 f7       	brne	.-12     	; 0x6620 <__do_global_dtors+0x8>
    662c:	f8 94       	cli

0000662e <__stop_program>:
    662e:	ff cf       	rjmp	.-2      	; 0x662e <__stop_program>
