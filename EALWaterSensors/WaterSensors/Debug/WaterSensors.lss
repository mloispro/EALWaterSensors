
WaterSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00007640  000076f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007640  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  008001e0  008001e0  000077d4  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000077d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000077da  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007838  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001110  00000000  00000000  00007878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002b253  00000000  00000000  00008988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000548f  00000000  00000000  00033bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000bb14  00000000  00000000  0003906a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000033e4  00000000  00000000  00044b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00013794  00000000  00000000  00047f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a1f8  00000000  00000000  0005b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001070  00000000  00000000  000658f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000103a9  00000000  00000000  00066960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2f c2       	rjmp	.+1118   	; 0x460 <__dtors_end>
       2:	00 00       	nop
       4:	55 c2       	rjmp	.+1194   	; 0x4b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	53 c2       	rjmp	.+1190   	; 0x4b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	2b c6       	rjmp	.+3158   	; 0xc64 <__vector_3>
       e:	00 00       	nop
      10:	29 c6       	rjmp	.+3154   	; 0xc64 <__vector_3>
      12:	00 00       	nop
      14:	27 c6       	rjmp	.+3150   	; 0xc64 <__vector_3>
      16:	00 00       	nop
      18:	4b c2       	rjmp	.+1174   	; 0x4b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	49 c2       	rjmp	.+1170   	; 0x4b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	47 c2       	rjmp	.+1166   	; 0x4b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	45 c2       	rjmp	.+1162   	; 0x4b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	43 c2       	rjmp	.+1158   	; 0x4b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	41 c2       	rjmp	.+1154   	; 0x4b0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3f c2       	rjmp	.+1150   	; 0x4b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	3d c2       	rjmp	.+1146   	; 0x4b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	3b c2       	rjmp	.+1142   	; 0x4b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	39 c2       	rjmp	.+1138   	; 0x4b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__vector_16>
      44:	35 c2       	rjmp	.+1130   	; 0x4b0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <__vector_18>
      4c:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__vector_19>
      50:	2f c2       	rjmp	.+1118   	; 0x4b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	2d c2       	rjmp	.+1114   	; 0x4b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	2b c2       	rjmp	.+1110   	; 0x4b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	29 c2       	rjmp	.+1106   	; 0x4b0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c2       	rjmp	.+1292   	; 0x56e <__vector_24>
      62:	00 00       	nop
      64:	25 c2       	rjmp	.+1098   	; 0x4b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	bd 03       	fmulsu	r19, r21
      6a:	c0 03       	fmuls	r20, r16
      6c:	c0 03       	fmuls	r20, r16
      6e:	c0 03       	fmuls	r20, r16
      70:	c0 03       	fmuls	r20, r16
      72:	c0 03       	fmuls	r20, r16
      74:	c0 03       	fmuls	r20, r16
      76:	c0 03       	fmuls	r20, r16
      78:	d7 02       	muls	r29, r23
      7a:	c0 03       	fmuls	r20, r16
      7c:	c0 03       	fmuls	r20, r16
      7e:	c0 03       	fmuls	r20, r16
      80:	c0 03       	fmuls	r20, r16
      82:	c0 03       	fmuls	r20, r16
      84:	c0 03       	fmuls	r20, r16
      86:	c0 03       	fmuls	r20, r16
      88:	d7 02       	muls	r29, r23
      8a:	c0 03       	fmuls	r20, r16
      8c:	c0 03       	fmuls	r20, r16
      8e:	c0 03       	fmuls	r20, r16
      90:	c0 03       	fmuls	r20, r16
      92:	c0 03       	fmuls	r20, r16
      94:	c0 03       	fmuls	r20, r16
      96:	c0 03       	fmuls	r20, r16
      98:	df 02       	muls	r29, r31
      9a:	c0 03       	fmuls	r20, r16
      9c:	c0 03       	fmuls	r20, r16
      9e:	c0 03       	fmuls	r20, r16
      a0:	c0 03       	fmuls	r20, r16
      a2:	c0 03       	fmuls	r20, r16
      a4:	c0 03       	fmuls	r20, r16
      a6:	c0 03       	fmuls	r20, r16
      a8:	04 03       	mulsu	r16, r20
      aa:	c0 03       	fmuls	r20, r16
      ac:	c0 03       	fmuls	r20, r16
      ae:	c0 03       	fmuls	r20, r16
      b0:	c0 03       	fmuls	r20, r16
      b2:	c0 03       	fmuls	r20, r16
      b4:	c0 03       	fmuls	r20, r16
      b6:	c0 03       	fmuls	r20, r16
      b8:	df 02       	muls	r29, r31
      ba:	c0 03       	fmuls	r20, r16
      bc:	c0 03       	fmuls	r20, r16
      be:	c0 03       	fmuls	r20, r16
      c0:	c0 03       	fmuls	r20, r16
      c2:	c0 03       	fmuls	r20, r16
      c4:	c0 03       	fmuls	r20, r16
      c6:	c0 03       	fmuls	r20, r16
      c8:	09 03       	fmul	r16, r17
      ca:	c0 03       	fmuls	r20, r16
      cc:	c0 03       	fmuls	r20, r16
      ce:	c0 03       	fmuls	r20, r16
      d0:	c0 03       	fmuls	r20, r16
      d2:	c0 03       	fmuls	r20, r16
      d4:	c0 03       	fmuls	r20, r16
      d6:	c0 03       	fmuls	r20, r16
      d8:	0e 03       	fmul	r16, r22
      da:	c0 03       	fmuls	r20, r16
      dc:	c0 03       	fmuls	r20, r16
      de:	c0 03       	fmuls	r20, r16
      e0:	c0 03       	fmuls	r20, r16
      e2:	c0 03       	fmuls	r20, r16
      e4:	c0 03       	fmuls	r20, r16
      e6:	c0 03       	fmuls	r20, r16
      e8:	1f 03       	fmul	r17, r23
      ea:	c0 03       	fmuls	r20, r16
      ec:	c0 03       	fmuls	r20, r16
      ee:	c0 03       	fmuls	r20, r16
      f0:	c0 03       	fmuls	r20, r16
      f2:	c0 03       	fmuls	r20, r16
      f4:	c0 03       	fmuls	r20, r16
      f6:	c0 03       	fmuls	r20, r16
      f8:	48 03       	fmul	r20, r16
      fa:	c0 03       	fmuls	r20, r16
      fc:	c0 03       	fmuls	r20, r16
      fe:	c0 03       	fmuls	r20, r16
     100:	c0 03       	fmuls	r20, r16
     102:	c0 03       	fmuls	r20, r16
     104:	c0 03       	fmuls	r20, r16
     106:	c0 03       	fmuls	r20, r16
     108:	13 03       	mulsu	r17, r19
     10a:	c0 03       	fmuls	r20, r16
     10c:	c0 03       	fmuls	r20, r16
     10e:	c0 03       	fmuls	r20, r16
     110:	c0 03       	fmuls	r20, r16
     112:	c0 03       	fmuls	r20, r16
     114:	c0 03       	fmuls	r20, r16
     116:	c0 03       	fmuls	r20, r16
     118:	2d 03       	fmul	r18, r21
     11a:	c0 03       	fmuls	r20, r16
     11c:	c0 03       	fmuls	r20, r16
     11e:	c0 03       	fmuls	r20, r16
     120:	c0 03       	fmuls	r20, r16
     122:	c0 03       	fmuls	r20, r16
     124:	c0 03       	fmuls	r20, r16
     126:	c0 03       	fmuls	r20, r16
     128:	4a 03       	fmul	r20, r18
     12a:	c0 03       	fmuls	r20, r16
     12c:	c0 03       	fmuls	r20, r16
     12e:	c0 03       	fmuls	r20, r16
     130:	c0 03       	fmuls	r20, r16
     132:	c0 03       	fmuls	r20, r16
     134:	c0 03       	fmuls	r20, r16
     136:	c0 03       	fmuls	r20, r16
     138:	4a 03       	fmul	r20, r18
     13a:	c0 03       	fmuls	r20, r16
     13c:	c0 03       	fmuls	r20, r16
     13e:	c0 03       	fmuls	r20, r16
     140:	c0 03       	fmuls	r20, r16
     142:	c0 03       	fmuls	r20, r16
     144:	c0 03       	fmuls	r20, r16
     146:	c0 03       	fmuls	r20, r16
     148:	4a 03       	fmul	r20, r18
     14a:	c0 03       	fmuls	r20, r16
     14c:	c0 03       	fmuls	r20, r16
     14e:	c0 03       	fmuls	r20, r16
     150:	c0 03       	fmuls	r20, r16
     152:	c0 03       	fmuls	r20, r16
     154:	c0 03       	fmuls	r20, r16
     156:	c0 03       	fmuls	r20, r16
     158:	4a 03       	fmul	r20, r18
     15a:	c0 03       	fmuls	r20, r16
     15c:	c0 03       	fmuls	r20, r16
     15e:	c0 03       	fmuls	r20, r16
     160:	c0 03       	fmuls	r20, r16
     162:	c0 03       	fmuls	r20, r16
     164:	c0 03       	fmuls	r20, r16
     166:	c0 03       	fmuls	r20, r16
     168:	53 03       	mulsu	r21, r19
     16a:	c0 03       	fmuls	r20, r16
     16c:	c0 03       	fmuls	r20, r16
     16e:	c0 03       	fmuls	r20, r16
     170:	c0 03       	fmuls	r20, r16
     172:	c0 03       	fmuls	r20, r16
     174:	c0 03       	fmuls	r20, r16
     176:	c0 03       	fmuls	r20, r16
     178:	84 03       	fmuls	r16, r20
     17a:	c0 03       	fmuls	r20, r16
     17c:	c0 03       	fmuls	r20, r16
     17e:	c0 03       	fmuls	r20, r16
     180:	c0 03       	fmuls	r20, r16
     182:	c0 03       	fmuls	r20, r16
     184:	c0 03       	fmuls	r20, r16
     186:	c0 03       	fmuls	r20, r16
     188:	53 03       	mulsu	r21, r19
     18a:	c0 03       	fmuls	r20, r16
     18c:	c0 03       	fmuls	r20, r16
     18e:	c0 03       	fmuls	r20, r16
     190:	c0 03       	fmuls	r20, r16
     192:	c0 03       	fmuls	r20, r16
     194:	c0 03       	fmuls	r20, r16
     196:	c0 03       	fmuls	r20, r16
     198:	84 03       	fmuls	r16, r20
     19a:	c0 03       	fmuls	r20, r16
     19c:	c0 03       	fmuls	r20, r16
     19e:	c0 03       	fmuls	r20, r16
     1a0:	c0 03       	fmuls	r20, r16
     1a2:	c0 03       	fmuls	r20, r16
     1a4:	c0 03       	fmuls	r20, r16
     1a6:	c0 03       	fmuls	r20, r16
     1a8:	6b 03       	fmul	r22, r19
     1aa:	c0 03       	fmuls	r20, r16
     1ac:	c0 03       	fmuls	r20, r16
     1ae:	c0 03       	fmuls	r20, r16
     1b0:	c0 03       	fmuls	r20, r16
     1b2:	c0 03       	fmuls	r20, r16
     1b4:	c0 03       	fmuls	r20, r16
     1b6:	c0 03       	fmuls	r20, r16
     1b8:	88 03       	fmulsu	r16, r16
     1ba:	c0 03       	fmuls	r20, r16
     1bc:	c0 03       	fmuls	r20, r16
     1be:	c0 03       	fmuls	r20, r16
     1c0:	c0 03       	fmuls	r20, r16
     1c2:	c0 03       	fmuls	r20, r16
     1c4:	c0 03       	fmuls	r20, r16
     1c6:	c0 03       	fmuls	r20, r16
     1c8:	88 03       	fmulsu	r16, r16
     1ca:	c0 03       	fmuls	r20, r16
     1cc:	c0 03       	fmuls	r20, r16
     1ce:	c0 03       	fmuls	r20, r16
     1d0:	c0 03       	fmuls	r20, r16
     1d2:	c0 03       	fmuls	r20, r16
     1d4:	c0 03       	fmuls	r20, r16
     1d6:	c0 03       	fmuls	r20, r16
     1d8:	9d 03       	fmulsu	r17, r21
     1da:	c0 03       	fmuls	r20, r16
     1dc:	c0 03       	fmuls	r20, r16
     1de:	c0 03       	fmuls	r20, r16
     1e0:	c0 03       	fmuls	r20, r16
     1e2:	c0 03       	fmuls	r20, r16
     1e4:	c0 03       	fmuls	r20, r16
     1e6:	c0 03       	fmuls	r20, r16
     1e8:	b7 03       	fmuls	r19, r23
     1ea:	c0 03       	fmuls	r20, r16
     1ec:	c0 03       	fmuls	r20, r16
     1ee:	c0 03       	fmuls	r20, r16
     1f0:	c0 03       	fmuls	r20, r16
     1f2:	c0 03       	fmuls	r20, r16
     1f4:	c0 03       	fmuls	r20, r16
     1f6:	c0 03       	fmuls	r20, r16
     1f8:	b7 03       	fmuls	r19, r23

000001fa <__trampolines_end>:
     1fa:	4e 41       	sbci	r20, 0x1E	; 30
     1fc:	4e 49       	Address 0x000001fc is out of bounds.
.word	0xffff	; ????

000001fd <pstr_inity>:
     1fd:	49 4e 49 54 59                                      INITY

00000202 <pstr_inf>:
     202:	49 4e 46                                            INF

00000205 <pwr_m10>:
     205:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     215:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000021d <pwr_p10>:
     21d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     22d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     23d:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     24d:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     25d:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     26d:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     27d:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     28d:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     29d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     2ad:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     2bd:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     2cd:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     2dd:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     2ed:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2fd:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     30d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     31d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     32d:	3d 27                                               ='

0000032f <_ZZN7LCDBase9ClearLineEsE3__c>:
     32f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000340 <_ZZN7MathExt16CalculateAverageEPiiE3__c>:
     340:	45 72 72 6f 72 20 6e 75 6d 62 65 72 20 66 6f 72     Error number for
     350:	20 74 68 65 20 61 72 72 61 79 20 74 6f 20 61 76      the array to av
     360:	72 61 67 69 6e 67 21 2f 6e 00                       raging!/n.

0000036a <_ZZN8PHSensor11CalculatePHEvE3__c>:
     36a:	41 64 64 69 6e 67 20 70 68 56 61 6c 3a 20 00        Adding phVal: .

00000379 <_ZZN8PHSensor11CalculatePHEvE3__c_0>:
     379:	53 65 74 74 69 6e 67 20 70 68 56 61 6c 3a 20 00     Setting phVal: .

00000389 <_ZZN15WaterSensorWire5SetupEvE3__c>:
     389:	5f 73 6c 61 76 65 3a 20 00                          _slave: .

00000392 <_ZZN15WaterSensorWire7ReceiveEiE3__c>:
     392:	63 6d 64 3a 20 00                                   cmd: .

00000398 <_ZZN15WaterSensorWire7ReceiveEiE3__c_0>:
     398:	63 6d 64 44 61 74 61 3a 20 00                       cmdData: .

000003a2 <_ZZN15WaterSensorWire7ReceiveEiE3__c_1>:
     3a2:	55 6e 65 78 70 65 63 74 65 64 20 6e 75 6d 62 65     Unexpected numbe
     3b2:	72 20 6f 66 20 62 79 74 65 73 20 72 65 63 65 69     r of bytes recei
     3c2:	76 65 64 3a 20 00                                   ved: .

000003c8 <_ZZN15WaterSensorWire7RequestEvE3__c>:
     3c8:	7e 72 65 73 70 6f 6e 73 65 49 6e 64 65 78 20 6e     ~responseIndex n
     3d8:	6f 74 20 66 6f 75 6e 64 3a 20 00                    ot found: .

000003e3 <_ZZ11AsyncDoWorkvE3__c>:
     3e3:	5b 53 65 6c 65 6c 63 74 5d 20 50 72 65 73 73 65     [Selelct] Presse
     3f3:	64 00                                               d.

000003f5 <digital_pin_to_timer_PGM>:
     3f5:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     405:	00 00 00 00                                         ....

00000409 <digital_pin_to_bit_mask_PGM>:
     409:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     419:	04 08 10 20                                         ... 

0000041d <digital_pin_to_port_PGM>:
     41d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     42d:	03 03 03 03                                         ....

00000431 <port_to_input_PGM>:
     431:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000043b <port_to_output_PGM>:
     43b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000445 <port_to_mode_PGM>:
     445:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000450 <__ctors_start>:
     450:	ea 05       	cpc	r30, r10
     452:	05 0b       	sbc	r16, r21
     454:	3a 26       	eor	r3, r26
     456:	28 27       	eor	r18, r24
     458:	6c 28       	or	r6, r12
     45a:	22 2c       	mov	r2, r2

0000045c <__ctors_end>:
     45c:	48 26       	eor	r4, r24
     45e:	36 27       	eor	r19, r22

00000460 <__dtors_end>:
     460:	11 24       	eor	r1, r1
     462:	1f be       	out	0x3f, r1	; 63
     464:	cf ef       	ldi	r28, 0xFF	; 255
     466:	d8 e0       	ldi	r29, 0x08	; 8
     468:	de bf       	out	0x3e, r29	; 62
     46a:	cd bf       	out	0x3d, r28	; 61

0000046c <__do_copy_data>:
     46c:	11 e0       	ldi	r17, 0x01	; 1
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b1 e0       	ldi	r27, 0x01	; 1
     472:	e0 e4       	ldi	r30, 0x40	; 64
     474:	f6 e7       	ldi	r31, 0x76	; 118
     476:	02 c0       	rjmp	.+4      	; 0x47c <__do_copy_data+0x10>
     478:	05 90       	lpm	r0, Z+
     47a:	0d 92       	st	X+, r0
     47c:	a0 3e       	cpi	r26, 0xE0	; 224
     47e:	b1 07       	cpc	r27, r17
     480:	d9 f7       	brne	.-10     	; 0x478 <__do_copy_data+0xc>

00000482 <__do_clear_bss>:
     482:	26 e0       	ldi	r18, 0x06	; 6
     484:	a0 ee       	ldi	r26, 0xE0	; 224
     486:	b1 e0       	ldi	r27, 0x01	; 1
     488:	01 c0       	rjmp	.+2      	; 0x48c <.do_clear_bss_start>

0000048a <.do_clear_bss_loop>:
     48a:	1d 92       	st	X+, r1

0000048c <.do_clear_bss_start>:
     48c:	a2 30       	cpi	r26, 0x02	; 2
     48e:	b2 07       	cpc	r27, r18
     490:	e1 f7       	brne	.-8      	; 0x48a <.do_clear_bss_loop>

00000492 <__do_global_ctors>:
     492:	12 e0       	ldi	r17, 0x02	; 2
     494:	ce e2       	ldi	r28, 0x2E	; 46
     496:	d2 e0       	ldi	r29, 0x02	; 2
     498:	04 c0       	rjmp	.+8      	; 0x4a2 <__do_global_ctors+0x10>
     49a:	21 97       	sbiw	r28, 0x01	; 1
     49c:	fe 01       	movw	r30, r28
     49e:	0e 94 cd 33 	call	0x679a	; 0x679a <__tablejump2__>
     4a2:	c8 32       	cpi	r28, 0x28	; 40
     4a4:	d1 07       	cpc	r29, r17
     4a6:	c9 f7       	brne	.-14     	; 0x49a <__do_global_ctors+0x8>
     4a8:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <main>
     4ac:	0c 94 14 3b 	jmp	0x7628	; 0x7628 <__do_global_dtors>

000004b0 <__bad_interrupt>:
     4b0:	a7 cd       	rjmp	.-1202   	; 0x0 <__vectors>

000004b2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     4b2:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <twi_sendStop>
     4bc:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <twi_inRepStart>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	82 e1       	ldi	r24, 0x12	; 18
     4c4:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	83 e1       	ldi	r24, 0x13	; 19
     4cc:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
     4d0:	e9 eb       	ldi	r30, 0xB9	; 185
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	80 83       	st	Z, r24
     4da:	80 81       	ld	r24, Z
     4dc:	8d 7f       	andi	r24, 0xFD	; 253
     4de:	80 83       	st	Z, r24
     4e0:	88 e4       	ldi	r24, 0x48	; 72
     4e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4e6:	85 e4       	ldi	r24, 0x45	; 69
     4e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4ec:	08 95       	ret

000004ee <twi_setAddress>:
     4ee:	88 0f       	add	r24, r24
     4f0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     4f4:	08 95       	ret

000004f6 <twi_transmit>:
     4f6:	61 32       	cpi	r22, 0x21	; 33
     4f8:	c8 f4       	brcc	.+50     	; 0x52c <twi_transmit+0x36>
     4fa:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <twi_state>
     4fe:	24 30       	cpi	r18, 0x04	; 4
     500:	b9 f4       	brne	.+46     	; 0x530 <twi_transmit+0x3a>
     502:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <twi_txBufferLength>
     506:	66 23       	and	r22, r22
     508:	a9 f0       	breq	.+42     	; 0x534 <twi_transmit+0x3e>
     50a:	fc 01       	movw	r30, r24
     50c:	a4 e0       	ldi	r26, 0x04	; 4
     50e:	b2 e0       	ldi	r27, 0x02	; 2
     510:	61 50       	subi	r22, 0x01	; 1
     512:	26 2f       	mov	r18, r22
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	28 0f       	add	r18, r24
     51c:	39 1f       	adc	r19, r25
     51e:	91 91       	ld	r25, Z+
     520:	9d 93       	st	X+, r25
     522:	e2 17       	cp	r30, r18
     524:	f3 07       	cpc	r31, r19
     526:	d9 f7       	brne	.-10     	; 0x51e <twi_transmit+0x28>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	08 95       	ret
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	08 95       	ret
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret

00000538 <twi_attachSlaveRxEvent>:
     538:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <twi_onSlaveReceive+0x1>
     53c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <twi_onSlaveReceive>
     540:	08 95       	ret

00000542 <twi_attachSlaveTxEvent>:
     542:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <twi_onSlaveTransmit+0x1>
     546:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_onSlaveTransmit>
     54a:	08 95       	ret

0000054c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     54c:	85 ed       	ldi	r24, 0xD5	; 213
     54e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     552:	ec eb       	ldi	r30, 0xBC	; 188
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	84 fd       	sbrc	r24, 4
     55a:	fd cf       	rjmp	.-6      	; 0x556 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     55c:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
     560:	08 95       	ret

00000562 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     562:	85 ec       	ldi	r24, 0xC5	; 197
     564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     568:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
     56c:	08 95       	ret

0000056e <__vector_24>:
}

ISR(TWI_vect)
{
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
  switch(TW_STATUS){
     590:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     594:	e8 2f       	mov	r30, r24
     596:	e8 7f       	andi	r30, 0xF8	; 248
     598:	8e 2f       	mov	r24, r30
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	89 3c       	cpi	r24, 0xC9	; 201
     59e:	91 05       	cpc	r25, r1
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__vector_24+0x36>
     5a2:	ee c0       	rjmp	.+476    	; 0x780 <__vector_24+0x212>
     5a4:	fc 01       	movw	r30, r24
     5a6:	ec 5c       	subi	r30, 0xCC	; 204
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	0c 94 cd 33 	jmp	0x679a	; 0x679a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5ae:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <twi_slarw>
     5b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5b6:	85 ec       	ldi	r24, 0xC5	; 197
     5b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5bc:	e1 c0       	rjmp	.+450    	; 0x780 <__vector_24+0x212>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5be:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <twi_masterBufferIndex>
     5c2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <twi_masterBufferLength>
     5c6:	98 17       	cp	r25, r24
     5c8:	80 f4       	brcc	.+32     	; 0x5ea <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5ca:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <twi_masterBufferIndex>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8e 0f       	add	r24, r30
     5d2:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twi_masterBufferIndex>
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ea 5d       	subi	r30, 0xDA	; 218
     5da:	fd 4f       	sbci	r31, 0xFD	; 253
     5dc:	80 81       	ld	r24, Z
     5de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5e2:	85 ec       	ldi	r24, 0xC5	; 197
     5e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5e8:	cb c0       	rjmp	.+406    	; 0x780 <__vector_24+0x212>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
     5ea:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <twi_sendStop>
     5ee:	88 23       	and	r24, r24
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__vector_24+0x88>
          twi_stop();
     5f2:	ac df       	rcall	.-168    	; 0x54c <twi_stop>
     5f4:	c5 c0       	rjmp	.+394    	; 0x780 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     5fc:	84 ea       	ldi	r24, 0xA4	; 164
     5fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     602:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
     606:	bc c0       	rjmp	.+376    	; 0x780 <__vector_24+0x212>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     608:	80 e2       	ldi	r24, 0x20	; 32
     60a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
      twi_stop();
     60e:	9e df       	rcall	.-196    	; 0x54c <twi_stop>
      break;
     610:	b7 c0       	rjmp	.+366    	; 0x780 <__vector_24+0x212>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
      twi_stop();
     618:	99 df       	rcall	.-206    	; 0x54c <twi_stop>
      break;
     61a:	b2 c0       	rjmp	.+356    	; 0x780 <__vector_24+0x212>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     61c:	88 e3       	ldi	r24, 0x38	; 56
     61e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
      twi_releaseBus();
     622:	9f df       	rcall	.-194    	; 0x562 <twi_releaseBus>
      break;
     624:	ad c0       	rjmp	.+346    	; 0x780 <__vector_24+0x212>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     626:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <twi_masterBufferIndex>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	8e 0f       	add	r24, r30
     62e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twi_masterBufferIndex>
     632:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ea 5d       	subi	r30, 0xDA	; 218
     63a:	fd 4f       	sbci	r31, 0xFD	; 253
     63c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     63e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <twi_masterBufferIndex>
     642:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <twi_masterBufferLength>
     646:	98 17       	cp	r25, r24
     648:	20 f4       	brcc	.+8      	; 0x652 <__vector_24+0xe4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     64a:	85 ec       	ldi	r24, 0xC5	; 197
     64c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     650:	97 c0       	rjmp	.+302    	; 0x780 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     652:	85 e8       	ldi	r24, 0x85	; 133
     654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     658:	93 c0       	rjmp	.+294    	; 0x780 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     65a:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <twi_masterBufferIndex>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	8e 0f       	add	r24, r30
     662:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <twi_masterBufferIndex>
     666:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ea 5d       	subi	r30, 0xDA	; 218
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	80 83       	st	Z, r24
	if (twi_sendStop)
     672:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <twi_sendStop>
     676:	88 23       	and	r24, r24
     678:	11 f0       	breq	.+4      	; 0x67e <__vector_24+0x110>
          twi_stop();
     67a:	68 df       	rcall	.-304    	; 0x54c <twi_stop>
     67c:	81 c0       	rjmp	.+258    	; 0x780 <__vector_24+0x212>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     684:	84 ea       	ldi	r24, 0xA4	; 164
     686:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
     68a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
     68e:	78 c0       	rjmp	.+240    	; 0x780 <__vector_24+0x212>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     690:	5d df       	rcall	.-326    	; 0x54c <twi_stop>
      break;
     692:	76 c0       	rjmp	.+236    	; 0x780 <__vector_24+0x212>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     69a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     69e:	85 ec       	ldi	r24, 0xC5	; 197
     6a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6a4:	6d c0       	rjmp	.+218    	; 0x780 <__vector_24+0x212>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6a6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <twi_rxBufferIndex>
     6aa:	80 32       	cpi	r24, 0x20	; 32
     6ac:	80 f4       	brcc	.+32     	; 0x6ce <__vector_24+0x160>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     6ae:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <twi_rxBufferIndex>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	8e 0f       	add	r24, r30
     6b6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <twi_rxBufferIndex>
     6ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	ee 51       	subi	r30, 0x1E	; 30
     6c2:	fe 4f       	sbci	r31, 0xFE	; 254
     6c4:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6c6:	85 ec       	ldi	r24, 0xC5	; 197
     6c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6cc:	59 c0       	rjmp	.+178    	; 0x780 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     6ce:	85 e8       	ldi	r24, 0x85	; 133
     6d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d4:	55 c0       	rjmp	.+170    	; 0x780 <__vector_24+0x212>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     6d6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <twi_rxBufferIndex>
     6da:	80 32       	cpi	r24, 0x20	; 32
     6dc:	30 f4       	brcc	.+12     	; 0x6ea <__vector_24+0x17c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     6de:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <twi_rxBufferIndex>
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	ee 51       	subi	r30, 0x1E	; 30
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     6ea:	30 df       	rcall	.-416    	; 0x54c <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     6ec:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <twi_rxBufferIndex>
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <twi_onSlaveReceive>
     6f6:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <twi_onSlaveReceive+0x1>
     6fa:	82 ee       	ldi	r24, 0xE2	; 226
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     700:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     704:	2e df       	rcall	.-420    	; 0x562 <twi_releaseBus>
      break;
     706:	3c c0       	rjmp	.+120    	; 0x780 <__vector_24+0x212>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     708:	85 e8       	ldi	r24, 0x85	; 133
     70a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     70e:	38 c0       	rjmp	.+112    	; 0x780 <__vector_24+0x212>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     716:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     71a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     71e:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <twi_onSlaveTransmit>
     722:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <twi_onSlaveTransmit+0x1>
     726:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     728:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_txBufferLength>
     72c:	81 11       	cpse	r24, r1
     72e:	05 c0       	rjmp	.+10     	; 0x73a <__vector_24+0x1cc>
        twi_txBufferLength = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     736:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     73a:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <twi_txBufferIndex>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	8e 0f       	add	r24, r30
     742:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <twi_txBufferIndex>
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	ec 5f       	subi	r30, 0xFC	; 252
     74a:	fd 4f       	sbci	r31, 0xFD	; 253
     74c:	80 81       	ld	r24, Z
     74e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     752:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <twi_txBufferIndex>
     756:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_txBufferLength>
     75a:	98 17       	cp	r25, r24
     75c:	20 f4       	brcc	.+8      	; 0x766 <__vector_24+0x1f8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     75e:	85 ec       	ldi	r24, 0xC5	; 197
     760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     764:	0d c0       	rjmp	.+26     	; 0x780 <__vector_24+0x212>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     766:	85 e8       	ldi	r24, 0x85	; 133
     768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     76c:	09 c0       	rjmp	.+18     	; 0x780 <__vector_24+0x212>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     76e:	85 ec       	ldi	r24, 0xC5	; 197
     770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     774:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_state>
      break;
     778:	03 c0       	rjmp	.+6      	; 0x780 <__vector_24+0x212>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     77a:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
      twi_stop();
     77e:	e6 de       	rcall	.-564    	; 0x54c <twi_stop>
      break;
  }
}
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	7f 91       	pop	r23
     78e:	6f 91       	pop	r22
     790:	5f 91       	pop	r21
     792:	4f 91       	pop	r20
     794:	3f 91       	pop	r19
     796:	2f 91       	pop	r18
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <_ZN5Print13setWriteErrorEi>:
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     7a2:	a4 e0       	ldi	r26, 0x04	; 4
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	7c 83       	std	Y+4, r23	; 0x04
     7b4:	6b 83       	std	Y+3, r22	; 0x03
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	2b 81       	ldd	r18, Y+3	; 0x03
     7bc:	3c 81       	ldd	r19, Y+4	; 0x04
     7be:	fc 01       	movw	r30, r24
     7c0:	33 83       	std	Z+3, r19	; 0x03
     7c2:	22 83       	std	Z+2, r18	; 0x02
     7c4:	24 96       	adiw	r28, 0x04	; 4
     7c6:	e2 e0       	ldi	r30, 0x02	; 2
     7c8:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000007cc <_ZN5PrintC1Ev>:
     7cc:	a2 e0       	ldi	r26, 0x02	; 2
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	ec ee       	ldi	r30, 0xEC	; 236
     7d2:	f3 e0       	ldi	r31, 0x03	; 3
     7d4:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	2c ed       	ldi	r18, 0xDC	; 220
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	fc 01       	movw	r30, r24
     7e6:	31 83       	std	Z+1, r19	; 0x01
     7e8:	20 83       	st	Z, r18
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	13 82       	std	Z+3, r1	; 0x03
     7f2:	12 82       	std	Z+2, r1	; 0x02
     7f4:	22 96       	adiw	r28, 0x02	; 2
     7f6:	e2 e0       	ldi	r30, 0x02	; 2
     7f8:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000007fc <_ZN6StreamC1Ev>:
     7fc:	a2 e0       	ldi	r26, 0x02	; 2
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e4 e0       	ldi	r30, 0x04	; 4
     802:	f4 e0       	ldi	r31, 0x04	; 4
     804:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	dd df       	rcall	.-70     	; 0x7cc <_ZN5PrintC1Ev>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	2d e7       	ldi	r18, 0x7D	; 125
     818:	31 e0       	ldi	r19, 0x01	; 1
     81a:	fc 01       	movw	r30, r24
     81c:	31 83       	std	Z+1, r19	; 0x01
     81e:	20 83       	st	Z, r18
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	88 ee       	ldi	r24, 0xE8	; 232
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	84 83       	std	Z+4, r24	; 0x04
     830:	95 83       	std	Z+5, r25	; 0x05
     832:	a6 83       	std	Z+6, r26	; 0x06
     834:	b7 83       	std	Z+7, r27	; 0x07
     836:	22 96       	adiw	r28, 0x02	; 2
     838:	e2 e0       	ldi	r30, 0x02	; 2
     83a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000083e <_ZN7TwoWireC1Ev>:
     83e:	a2 e0       	ldi	r26, 0x02	; 2
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e5 e2       	ldi	r30, 0x25	; 37
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     84a:	9a 83       	std	Y+2, r25	; 0x02
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	d4 df       	rcall	.-88     	; 0x7fc <_ZN6StreamC1Ev>
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	2d e6       	ldi	r18, 0x6D	; 109
     85a:	31 e0       	ldi	r19, 0x01	; 1
     85c:	fc 01       	movw	r30, r24
     85e:	31 83       	std	Z+1, r19	; 0x01
     860:	20 83       	st	Z, r18
     862:	22 96       	adiw	r28, 0x02	; 2
     864:	e2 e0       	ldi	r30, 0x02	; 2
     866:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000086a <_ZN7TwoWire5beginEv>:
     86a:	a2 e0       	ldi	r26, 0x02	; 2
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     87e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
     882:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
     886:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
     88a:	13 de       	rcall	.-986    	; 0x4b2 <twi_init>
     88c:	22 96       	adiw	r28, 0x02	; 2
     88e:	e2 e0       	ldi	r30, 0x02	; 2
     890:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000894 <_ZN7TwoWire5beginEh>:
     894:	a3 e0       	ldi	r26, 0x03	; 3
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	e0 e5       	ldi	r30, 0x50	; 80
     89a:	f4 e0       	ldi	r31, 0x04	; 4
     89c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	6b 83       	std	Y+3, r22	; 0x03
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	22 de       	rcall	.-956    	; 0x4ee <twi_setAddress>
     8aa:	8f e8       	ldi	r24, 0x8F	; 143
     8ac:	95 e0       	ldi	r25, 0x05	; 5
     8ae:	49 de       	rcall	.-878    	; 0x542 <twi_attachSlaveTxEvent>
     8b0:	89 e4       	ldi	r24, 0x49	; 73
     8b2:	95 e0       	ldi	r25, 0x05	; 5
     8b4:	41 de       	rcall	.-894    	; 0x538 <twi_attachSlaveRxEvent>
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	d7 df       	rcall	.-82     	; 0x86a <_ZN7TwoWire5beginEv>
     8bc:	23 96       	adiw	r28, 0x03	; 3
     8be:	e2 e0       	ldi	r30, 0x02	; 2
     8c0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000008c4 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     8c4:	a3 e0       	ldi	r26, 0x03	; 3
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e8 e6       	ldi	r30, 0x68	; 104
     8ca:	f4 e0       	ldi	r31, 0x04	; 4
     8cc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
     8d6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <_ZN7TwoWire12transmittingE>
     8da:	88 23       	and	r24, r24
     8dc:	f9 f0       	breq	.+62     	; 0x91c <__stack+0x1d>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8de:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
     8e2:	80 32       	cpi	r24, 0x20	; 32
     8e4:	40 f0       	brcs	.+16     	; 0x8f6 <_ZN7TwoWire5writeEh+0x32>
      setWriteError();
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	59 df       	rcall	.-334    	; 0x7a2 <_ZN5Print13setWriteErrorEi>
      return 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	19 c0       	rjmp	.+50     	; 0x928 <__stack+0x29>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     8f6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	80 59       	subi	r24, 0x90	; 144
     902:	9d 4f       	sbci	r25, 0xFD	; 253
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
    ++txBufferIndex;
     908:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     912:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
     916:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0x25>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     91c:	ce 01       	movw	r24, r28
     91e:	03 96       	adiw	r24, 0x03	; 3
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	e9 dd       	rcall	.-1070   	; 0x4f6 <twi_transmit>
  }
  return 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
}
     928:	23 96       	adiw	r28, 0x03	; 3
     92a:	e2 e0       	ldi	r30, 0x02	; 2
     92c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000930 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     930:	a8 e0       	ldi	r26, 0x08	; 8
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ee e9       	ldi	r30, 0x9E	; 158
     936:	f4 e0       	ldi	r31, 0x04	; 4
     938:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	8b 83       	std	Y+3, r24	; 0x03
     940:	7e 83       	std	Y+6, r23	; 0x06
     942:	6d 83       	std	Y+5, r22	; 0x05
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
     948:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <_ZN7TwoWire12transmittingE>
     94c:	88 23       	and	r24, r24
     94e:	29 f1       	breq	.+74     	; 0x99a <_ZN7TwoWire5writeEPKhj+0x6a>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     950:	1a 82       	std	Y+2, r1	; 0x02
     952:	19 82       	std	Y+1, r1	; 0x01
     954:	1a c0       	rjmp	.+52     	; 0x98a <_ZN7TwoWire5writeEPKhj+0x5a>
      write(data[i]);
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	fc 01       	movw	r30, r24
     95c:	80 81       	ld	r24, Z
     95e:	91 81       	ldd	r25, Z+1	; 0x01
     960:	fc 01       	movw	r30, r24
     962:	20 81       	ld	r18, Z
     964:	31 81       	ldd	r19, Z+1	; 0x01
     966:	4d 81       	ldd	r20, Y+5	; 0x05
     968:	5e 81       	ldd	r21, Y+6	; 0x06
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	84 0f       	add	r24, r20
     970:	95 1f       	adc	r25, r21
     972:	fc 01       	movw	r30, r24
     974:	40 81       	ld	r20, Z
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	64 2f       	mov	r22, r20
     97c:	f9 01       	movw	r30, r18
     97e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	29 81       	ldd	r18, Y+1	; 0x01
     98c:	3a 81       	ldd	r19, Y+2	; 0x02
     98e:	8f 81       	ldd	r24, Y+7	; 0x07
     990:	98 85       	ldd	r25, Y+8	; 0x08
     992:	28 17       	cp	r18, r24
     994:	39 07       	cpc	r19, r25
     996:	f8 f2       	brcs	.-66     	; 0x956 <_ZN7TwoWire5writeEPKhj+0x26>
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <_ZN7TwoWire5writeEPKhj+0x74>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     99a:	2f 81       	ldd	r18, Y+7	; 0x07
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	9e 81       	ldd	r25, Y+6	; 0x06
     9a0:	62 2f       	mov	r22, r18
     9a2:	a9 dd       	rcall	.-1198   	; 0x4f6 <twi_transmit>
  }
  return quantity;
     9a4:	8f 81       	ldd	r24, Y+7	; 0x07
     9a6:	98 85       	ldd	r25, Y+8	; 0x08
}
     9a8:	28 96       	adiw	r28, 0x08	; 8
     9aa:	e2 e0       	ldi	r30, 0x02	; 2
     9ac:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000009b0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
     9b0:	a2 e0       	ldi	r26, 0x02	; 2
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	ee ed       	ldi	r30, 0xDE	; 222
     9b6:	f4 e0       	ldi	r31, 0x04	; 4
     9b8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
     9c0:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a9 01       	movw	r20, r18
     9d2:	48 1b       	sub	r20, r24
     9d4:	59 0b       	sbc	r21, r25
     9d6:	ca 01       	movw	r24, r20
}
     9d8:	22 96       	adiw	r28, 0x02	; 2
     9da:	e2 e0       	ldi	r30, 0x02	; 2
     9dc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000009e0 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
     9e0:	a4 e0       	ldi	r26, 0x04	; 4
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e6 ef       	ldi	r30, 0xF6	; 246
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	9a 83       	std	Y+2, r25	; 0x02
     9f6:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     9f8:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     9fc:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
     a00:	98 17       	cp	r25, r24
     a02:	88 f4       	brcc	.+34     	; 0xa26 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
     a04:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	82 5b       	subi	r24, 0xB2	; 178
     a0e:	9d 4f       	sbci	r25, 0xFD	; 253
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	9a 83       	std	Y+2, r25	; 0x02
     a1a:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
     a1c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a2a:	24 96       	adiw	r28, 0x04	; 4
     a2c:	e2 e0       	ldi	r30, 0x02	; 2
     a2e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000a32 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
     a32:	a4 e0       	ldi	r26, 0x04	; 4
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	ef e1       	ldi	r30, 0x1F	; 31
     a38:	f5 e0       	ldi	r31, 0x05	; 5
     a3a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     a3e:	9c 83       	std	Y+4, r25	; 0x04
     a40:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
     a4a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     a4e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
     a52:	98 17       	cp	r25, r24
     a54:	60 f4       	brcc	.+24     	; 0xa6e <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
     a56:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	82 5b       	subi	r24, 0xB2	; 178
     a60:	9d 4f       	sbci	r25, 0xFD	; 253
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a72:	24 96       	adiw	r28, 0x04	; 4
     a74:	e2 e0       	ldi	r30, 0x02	; 2
     a76:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000a7a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
     a7a:	a2 e0       	ldi	r26, 0x02	; 2
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e3 e4       	ldi	r30, 0x43	; 67
     a80:	f5 e0       	ldi	r31, 0x05	; 5
     a82:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
     a8a:	22 96       	adiw	r28, 0x02	; 2
     a8c:	e2 e0       	ldi	r30, 0x02	; 2
     a8e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000a92 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
     a92:	a5 e0       	ldi	r26, 0x05	; 5
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	ef e4       	ldi	r30, 0x4F	; 79
     a98:	f5 e0       	ldi	r31, 0x05	; 5
     a9a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     a9e:	9b 83       	std	Y+3, r25	; 0x03
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	7d 83       	std	Y+5, r23	; 0x05
     aa4:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     aa6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <_ZN7TwoWire14user_onReceiveE>
     aaa:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <_ZN7TwoWire14user_onReceiveE+0x1>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_ZN7TwoWire16onReceiveServiceEPhi+0x22>
    return;
     ab2:	31 c0       	rjmp	.+98     	; 0xb16 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     ab4:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
     ab8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
     abc:	98 17       	cp	r25, r24
     abe:	08 f4       	brcc	.+2      	; 0xac2 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    return;
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ac2:	19 82       	std	Y+1, r1	; 0x01
     ac4:	13 c0       	rjmp	.+38     	; 0xaec <_ZN7TwoWire16onReceiveServiceEPhi+0x5a>
    rxBuffer[i] = inBytes[i];    
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	22 2f       	mov	r18, r18
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a 81       	ldd	r20, Y+2	; 0x02
     ad4:	5b 81       	ldd	r21, Y+3	; 0x03
     ad6:	24 0f       	add	r18, r20
     ad8:	35 1f       	adc	r19, r21
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	82 5b       	subi	r24, 0xB2	; 178
     ae0:	9d 4f       	sbci	r25, 0xFD	; 253
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	9d 81       	ldd	r25, Y+5	; 0x05
     af6:	28 17       	cp	r18, r24
     af8:	39 07       	cpc	r19, r25
     afa:	2c f3       	brlt	.-54     	; 0xac6 <_ZN7TwoWire16onReceiveServiceEPhi+0x34>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     afc:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
     b00:	8c 81       	ldd	r24, Y+4	; 0x04
     b02:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
     b06:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <_ZN7TwoWire14user_onReceiveE>
     b0a:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <_ZN7TwoWire14user_onReceiveE+0x1>
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	9d 81       	ldd	r25, Y+5	; 0x05
     b12:	f9 01       	movw	r30, r18
     b14:	09 95       	icall
}
     b16:	25 96       	adiw	r28, 0x05	; 5
     b18:	e2 e0       	ldi	r30, 0x02	; 2
     b1a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000b1e <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     b2a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_ZN7TwoWire14user_onRequestE>
     b2e:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_ZN7TwoWire14user_onRequestE+0x1>
     b32:	89 2b       	or	r24, r25
     b34:	09 f4       	brne	.+2      	; 0xb38 <_ZN7TwoWire16onRequestServiceEv+0x1a>
    return;
     b36:	0a c0       	rjmp	.+20     	; 0xb4c <_ZN7TwoWire16onRequestServiceEv+0x2e>
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     b38:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
     b3c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
     b40:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_ZN7TwoWire14user_onRequestE>
     b44:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_ZN7TwoWire14user_onRequestE+0x1>
     b48:	fc 01       	movw	r30, r24
     b4a:	09 95       	icall
}
     b4c:	e2 e0       	ldi	r30, 0x02	; 2
     b4e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000b52 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
     b52:	a4 e0       	ldi	r26, 0x04	; 4
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ef ea       	ldi	r30, 0xAF	; 175
     b58:	f5 e0       	ldi	r31, 0x05	; 5
     b5a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	7c 83       	std	Y+4, r23	; 0x04
     b64:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <_ZN7TwoWire14user_onReceiveE+0x1>
     b6e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <_ZN7TwoWire14user_onReceiveE>
}
     b72:	24 96       	adiw	r28, 0x04	; 4
     b74:	e2 e0       	ldi	r30, 0x02	; 2
     b76:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000b7a <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
     b7a:	a4 e0       	ldi	r26, 0x04	; 4
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e3 ec       	ldi	r30, 0xC3	; 195
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	7c 83       	std	Y+4, r23	; 0x04
     b8c:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <_ZN7TwoWire14user_onRequestE+0x1>
     b96:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <_ZN7TwoWire14user_onRequestE>
}
     b9a:	24 96       	adiw	r28, 0x04	; 4
     b9c:	e2 e0       	ldi	r30, 0x02	; 2
     b9e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000ba2 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ba2:	a4 e0       	ldi	r26, 0x04	; 4
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     bae:	9a 83       	std	Y+2, r25	; 0x02
     bb0:	89 83       	std	Y+1, r24	; 0x01
     bb2:	7c 83       	std	Y+4, r23	; 0x04
     bb4:	6b 83       	std	Y+3, r22	; 0x03
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	19 f4       	brne	.+6      	; 0xbcc <_Z41__static_initialization_and_destruction_0ii+0x2a>
     bc6:	87 e9       	ldi	r24, 0x97	; 151
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	39 de       	rcall	.-910    	; 0x83e <_ZN7TwoWireC1Ev>
     bcc:	24 96       	adiw	r28, 0x04	; 4
     bce:	e2 e0       	ldi	r30, 0x02	; 2
     bd0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000bd4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 ef       	ldi	r30, 0xF0	; 240
     bda:	f5 e0       	ldi	r31, 0x05	; 5
     bdc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     be0:	6f ef       	ldi	r22, 0xFF	; 255
     be2:	7f ef       	ldi	r23, 0xFF	; 255
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	dc df       	rcall	.-72     	; 0xba2 <_Z41__static_initialization_and_destruction_0ii>
     bea:	e2 e0       	ldi	r30, 0x02	; 2
     bec:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000bf0 <_Z10DebugPulsehh>:
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
     bf0:	a2 e0       	ldi	r26, 0x02	; 2
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ee ef       	ldi	r30, 0xFE	; 254
     bf6:	f5 e0       	ldi	r31, 0x05	; 5
     bf8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	6a 83       	std	Y+2, r22	; 0x02
     c00:	22 96       	adiw	r28, 0x02	; 2
     c02:	e2 e0       	ldi	r30, 0x02	; 2
     c04:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000c08 <_ZN14SoftwareSerial10tunedDelayEj>:
     c08:	a4 e0       	ldi	r26, 0x04	; 4
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <_ZN14SoftwareSerial10tunedDelayEj+0x1c>
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	24 96       	adiw	r28, 0x04	; 4
     c2e:	e2 e0       	ldi	r30, 0x02	; 2
     c30:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000c34 <_ZN14SoftwareSerial11rx_pin_readEv>:

uint8_t SoftwareSerial::rx_pin_read()
{
     c34:	a2 e0       	ldi	r26, 0x02	; 2
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e0 e2       	ldi	r30, 0x20	; 32
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
  return *_receivePortRegister & _receiveBitMask;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	fc 01       	movw	r30, r24
     c4a:	86 85       	ldd	r24, Z+14	; 0x0e
     c4c:	97 85       	ldd	r25, Z+15	; 0x0f
     c4e:	fc 01       	movw	r30, r24
     c50:	20 81       	ld	r18, Z
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	fc 01       	movw	r30, r24
     c58:	85 85       	ldd	r24, Z+13	; 0x0d
     c5a:	82 23       	and	r24, r18
}
     c5c:	22 96       	adiw	r28, 0x02	; 2
     c5e:	e2 e0       	ldi	r30, 0x02	; 2
     c60:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00000c64 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	2b 97       	sbiw	r28, 0x0b	; 11
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	cd bf       	out	0x3d, r28	; 61
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     c96:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <_ZN14SoftwareSerial13active_objectE>
     c9a:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <_ZN14SoftwareSerial13active_objectE+0x1>
     c9e:	89 2b       	or	r24, r25
     ca0:	09 f4       	brne	.+2      	; 0xca4 <__vector_3+0x40>
     ca2:	f4 c0       	rjmp	.+488    	; 0xe8c <__vector_3+0x228>
  {
    active_object->recv();
     ca4:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <_ZN14SoftwareSerial13active_objectE>
     ca8:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <_ZN14SoftwareSerial13active_objectE+0x1>
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     cb0:	1b 82       	std	Y+3, r1	; 0x03

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	86 8d       	ldd	r24, Z+30	; 0x1e
     cba:	82 70       	andi	r24, 0x02	; 2
     cbc:	88 23       	and	r24, r24
     cbe:	49 f0       	breq	.+18     	; 0xcd2 <__vector_3+0x6e>
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	b7 df       	rcall	.-146    	; 0xc34 <_ZN14SoftwareSerial11rx_pin_readEv>
     cc6:	98 2f       	mov	r25, r24
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	99 23       	and	r25, r25
     ccc:	51 f4       	brne	.+20     	; 0xce2 <__vector_3+0x7e>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 c0       	rjmp	.+16     	; 0xce2 <__vector_3+0x7e>
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	ae df       	rcall	.-164    	; 0xc34 <_ZN14SoftwareSerial11rx_pin_readEv>
     cd8:	98 2f       	mov	r25, r24
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	99 23       	and	r25, r25
     cde:	09 f0       	breq	.+2      	; 0xce2 <__vector_3+0x7e>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <__vector_3+0x84>
     ce6:	d2 c0       	rjmp	.+420    	; 0xe8c <__vector_3+0x228>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	9d 83       	std	Y+5, r25	; 0x05
     cee:	8c 83       	std	Y+4, r24	; 0x04
     cf0:	1e 82       	std	Y+6, r1	; 0x06
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	88 23       	and	r24, r24
     cf6:	a1 f0       	breq	.+40     	; 0xd20 <__vector_3+0xbc>
      *_pcint_maskreg |= _pcint_maskvalue;
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	fc 01       	movw	r30, r24
     cfe:	83 89       	ldd	r24, Z+19	; 0x13
     d00:	94 89       	ldd	r25, Z+20	; 0x14
     d02:	2c 81       	ldd	r18, Y+4	; 0x04
     d04:	3d 81       	ldd	r19, Y+5	; 0x05
     d06:	f9 01       	movw	r30, r18
     d08:	23 89       	ldd	r18, Z+19	; 0x13
     d0a:	34 89       	ldd	r19, Z+20	; 0x14
     d0c:	f9 01       	movw	r30, r18
     d0e:	40 81       	ld	r20, Z
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	3d 81       	ldd	r19, Y+5	; 0x05
     d14:	f9 01       	movw	r30, r18
     d16:	25 89       	ldd	r18, Z+21	; 0x15
     d18:	24 2b       	or	r18, r20
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <__vector_3+0xe6>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	fc 01       	movw	r30, r24
     d26:	83 89       	ldd	r24, Z+19	; 0x13
     d28:	94 89       	ldd	r25, Z+20	; 0x14
     d2a:	2c 81       	ldd	r18, Y+4	; 0x04
     d2c:	3d 81       	ldd	r19, Y+5	; 0x05
     d2e:	f9 01       	movw	r30, r18
     d30:	23 89       	ldd	r18, Z+19	; 0x13
     d32:	34 89       	ldd	r19, Z+20	; 0x14
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	42 2f       	mov	r20, r18
     d3a:	2c 81       	ldd	r18, Y+4	; 0x04
     d3c:	3d 81       	ldd	r19, Y+5	; 0x05
     d3e:	f9 01       	movw	r30, r18
     d40:	25 89       	ldd	r18, Z+21	; 0x15
     d42:	20 95       	com	r18
     d44:	24 23       	and	r18, r20
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
    // triggering another interrupt directly after we return, which can
    // cause problems at higher baudrates.
    setRxIntMsk(false);

    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	fc 01       	movw	r30, r24
     d50:	86 89       	ldd	r24, Z+22	; 0x16
     d52:	97 89       	ldd	r25, Z+23	; 0x17
     d54:	59 df       	rcall	.-334    	; 0xc08 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	8d e0       	ldi	r24, 0x0D	; 13
     d5a:	4a df       	rcall	.-364    	; 0xbf0 <_Z10DebugPulsehh>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	8f 83       	std	Y+7, r24	; 0x07
     d60:	1f c0       	rjmp	.+62     	; 0xda0 <__vector_3+0x13c>
    {
      tunedDelay(_rx_delay_intrabit);
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	fc 01       	movw	r30, r24
     d68:	80 8d       	ldd	r24, Z+24	; 0x18
     d6a:	91 8d       	ldd	r25, Z+25	; 0x19
     d6c:	4d df       	rcall	.-358    	; 0xc08 <_ZN14SoftwareSerial10tunedDelayEj>
      d >>= 1;
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	95 95       	asr	r25
     d76:	87 95       	ror	r24
     d78:	8b 83       	std	Y+3, r24	; 0x03
      DebugPulse(_DEBUG_PIN2, 1);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8d e0       	ldi	r24, 0x0D	; 13
     d7e:	38 df       	rcall	.-400    	; 0xbf0 <_Z10DebugPulsehh>
      if (rx_pin_read())
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	57 df       	rcall	.-338    	; 0xc34 <_ZN14SoftwareSerial11rx_pin_readEv>
     d86:	98 2f       	mov	r25, r24
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	99 23       	and	r25, r25
     d8c:	09 f4       	brne	.+2      	; 0xd90 <__vector_3+0x12c>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	88 23       	and	r24, r24
     d92:	19 f0       	breq	.+6      	; 0xd9a <__vector_3+0x136>
        d |= 0x80;
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	8b 83       	std	Y+3, r24	; 0x03
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	8f 83       	std	Y+7, r24	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	88 23       	and	r24, r24
     da4:	f1 f6       	brne	.-68     	; 0xd62 <__vector_3+0xfe>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	fc 01       	movw	r30, r24
     dac:	86 8d       	ldd	r24, Z+30	; 0x1e
     dae:	82 70       	andi	r24, 0x02	; 2
     db0:	88 23       	and	r24, r24
     db2:	19 f0       	breq	.+6      	; 0xdba <__vector_3+0x156>
      d = ~d;
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	80 95       	com	r24
     db8:	8b 83       	std	Y+3, r24	; 0x03

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     dba:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	8f 73       	andi	r24, 0x3F	; 63
     dc6:	90 78       	andi	r25, 0x80	; 128
     dc8:	99 23       	and	r25, r25
     dca:	24 f4       	brge	.+8      	; 0xdd4 <__vector_3+0x170>
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	80 6c       	ori	r24, 0xC0	; 192
     dd0:	9f 6f       	ori	r25, 0xFF	; 255
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	88 87       	std	Y+8, r24	; 0x08
    if (next != _receive_buffer_head)
     dd6:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZN14SoftwareSerial20_receive_buffer_headE>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	28 85       	ldd	r18, Y+8	; 0x08
     dde:	29 17       	cp	r18, r25
     de0:	09 f4       	brne	.+2      	; 0xde4 <__vector_3+0x180>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	88 23       	and	r24, r24
     de6:	69 f0       	breq	.+26     	; 0xe02 <__vector_3+0x19e>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     de8:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	8b 55       	subi	r24, 0x5B	; 91
     df2:	9d 4f       	sbci	r25, 0xFD	; 253
     df4:	2b 81       	ldd	r18, Y+3	; 0x03
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
      _receive_buffer_tail = next;
     dfa:	88 85       	ldd	r24, Y+8	; 0x08
     dfc:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <__vector_3+0x1b2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	8b e0       	ldi	r24, 0x0B	; 11
     e06:	f4 de       	rcall	.-536    	; 0xbf0 <_Z10DebugPulsehh>
      _buffer_overflow = true;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	fc 01       	movw	r30, r24
     e0e:	26 8d       	ldd	r18, Z+30	; 0x1e
     e10:	21 60       	ori	r18, 0x01	; 1
     e12:	fc 01       	movw	r30, r24
     e14:	26 8f       	std	Z+30, r18	; 0x1e
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e1e:	93 8d       	ldd	r25, Z+27	; 0x1b
     e20:	f3 de       	rcall	.-538    	; 0xc08 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN1, 1);
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	8b e0       	ldi	r24, 0x0B	; 11
     e26:	e4 de       	rcall	.-568    	; 0xbf0 <_Z10DebugPulsehh>
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	9a 87       	std	Y+10, r25	; 0x0a
     e2e:	89 87       	std	Y+9, r24	; 0x09
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8b 87       	std	Y+11, r24	; 0x0b
  listen();
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
     e34:	8b 85       	ldd	r24, Y+11	; 0x0b
     e36:	88 23       	and	r24, r24
     e38:	a1 f0       	breq	.+40     	; 0xe62 <__vector_3+0x1fe>
      *_pcint_maskreg |= _pcint_maskvalue;
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	fc 01       	movw	r30, r24
     e40:	83 89       	ldd	r24, Z+19	; 0x13
     e42:	94 89       	ldd	r25, Z+20	; 0x14
     e44:	29 85       	ldd	r18, Y+9	; 0x09
     e46:	3a 85       	ldd	r19, Y+10	; 0x0a
     e48:	f9 01       	movw	r30, r18
     e4a:	23 89       	ldd	r18, Z+19	; 0x13
     e4c:	34 89       	ldd	r19, Z+20	; 0x14
     e4e:	f9 01       	movw	r30, r18
     e50:	40 81       	ld	r20, Z
     e52:	29 85       	ldd	r18, Y+9	; 0x09
     e54:	3a 85       	ldd	r19, Y+10	; 0x0a
     e56:	f9 01       	movw	r30, r18
     e58:	25 89       	ldd	r18, Z+21	; 0x15
     e5a:	24 2b       	or	r18, r20
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
     e60:	15 c0       	rjmp	.+42     	; 0xe8c <__vector_3+0x228>
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	fc 01       	movw	r30, r24
     e68:	83 89       	ldd	r24, Z+19	; 0x13
     e6a:	94 89       	ldd	r25, Z+20	; 0x14
     e6c:	29 85       	ldd	r18, Y+9	; 0x09
     e6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e70:	f9 01       	movw	r30, r18
     e72:	23 89       	ldd	r18, Z+19	; 0x13
     e74:	34 89       	ldd	r19, Z+20	; 0x14
     e76:	f9 01       	movw	r30, r18
     e78:	20 81       	ld	r18, Z
     e7a:	42 2f       	mov	r20, r18
     e7c:	29 85       	ldd	r18, Y+9	; 0x09
     e7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e80:	f9 01       	movw	r30, r18
     e82:	25 89       	ldd	r18, Z+21	; 0x15
     e84:	20 95       	com	r18
     e86:	24 23       	and	r18, r20
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     e8c:	2b 96       	adiw	r28, 0x0b	; 11
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     ec0:	8f 92       	push	r8
     ec2:	af 92       	push	r10
     ec4:	cf 92       	push	r12
     ec6:	ef 92       	push	r14
     ec8:	0f 93       	push	r16
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	28 97       	sbiw	r28, 0x08	; 8
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	6b 83       	std	Y+3, r22	; 0x03
     ee4:	4c 83       	std	Y+4, r20	; 0x04
     ee6:	2d 83       	std	Y+5, r18	; 0x05
     ee8:	0e 83       	std	Y+6, r16	; 0x06
     eea:	ef 82       	std	Y+7, r14	; 0x07
     eec:	c8 86       	std	Y+8, r12	; 0x08
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	6c dc       	rcall	.-1832   	; 0x7cc <_ZN5PrintC1Ev>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	2d e8       	ldi	r18, 0x8D	; 141
     efa:	31 e0       	ldi	r19, 0x01	; 1
     efc:	fc 01       	movw	r30, r24
     efe:	31 83       	std	Z+1, r19	; 0x01
     f00:	20 83       	st	Z, r18
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	1f 92       	push	r1
     f08:	1f 92       	push	r1
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	88 84       	ldd	r8, Y+8	; 0x08
     f10:	af 80       	ldd	r10, Y+7	; 0x07
     f12:	ce 80       	ldd	r12, Y+6	; 0x06
     f14:	ed 80       	ldd	r14, Y+5	; 0x05
     f16:	0c 81       	ldd	r16, Y+4	; 0x04
     f18:	2f ef       	ldi	r18, 0xFF	; 255
     f1a:	4b 81       	ldd	r20, Y+3	; 0x03
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	12 d0       	rcall	.+36     	; 0xf44 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	28 96       	adiw	r28, 0x08	; 8
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	0f 91       	pop	r16
     f3a:	ef 90       	pop	r14
     f3c:	cf 90       	pop	r12
     f3e:	af 90       	pop	r10
     f40:	8f 90       	pop	r8
     f42:	08 95       	ret

00000f44 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     f44:	8f 92       	push	r8
     f46:	af 92       	push	r10
     f48:	cf 92       	push	r12
     f4a:	ef 92       	push	r14
     f4c:	0f 93       	push	r16
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	2a 97       	sbiw	r28, 0x0a	; 10
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6b 83       	std	Y+3, r22	; 0x03
     f68:	4c 83       	std	Y+4, r20	; 0x04
     f6a:	2d 83       	std	Y+5, r18	; 0x05
     f6c:	0e 83       	std	Y+6, r16	; 0x06
     f6e:	ef 82       	std	Y+7, r14	; 0x07
     f70:	c8 86       	std	Y+8, r12	; 0x08
     f72:	a9 86       	std	Y+9, r10	; 0x09
     f74:	8a 86       	std	Y+10, r8	; 0x0a
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	2c 81       	ldd	r18, Y+4	; 0x04
     f7c:	fc 01       	movw	r30, r24
     f7e:	24 83       	std	Z+4, r18	; 0x04
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	2d 81       	ldd	r18, Y+5	; 0x05
     f86:	fc 01       	movw	r30, r24
     f88:	25 83       	std	Z+5, r18	; 0x05
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	2e 81       	ldd	r18, Y+6	; 0x06
     f90:	fc 01       	movw	r30, r24
     f92:	26 83       	std	Z+6, r18	; 0x06
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	2f 81       	ldd	r18, Y+7	; 0x07
     f9a:	fc 01       	movw	r30, r24
     f9c:	27 83       	std	Z+7, r18	; 0x07
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	28 85       	ldd	r18, Y+8	; 0x08
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 87       	std	Z+8, r18	; 0x08
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	29 85       	ldd	r18, Y+9	; 0x09
     fae:	fc 01       	movw	r30, r24
     fb0:	21 87       	std	Z+9, r18	; 0x09
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	2a 85       	ldd	r18, Y+10	; 0x0a
     fb8:	fc 01       	movw	r30, r24
     fba:	22 87       	std	Z+10, r18	; 0x0a
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	2c 89       	ldd	r18, Y+20	; 0x14
     fc2:	fc 01       	movw	r30, r24
     fc4:	23 87       	std	Z+11, r18	; 0x0b
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	2d 89       	ldd	r18, Y+21	; 0x15
     fcc:	fc 01       	movw	r30, r24
     fce:	24 87       	std	Z+12, r18	; 0x0c
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	2e 89       	ldd	r18, Y+22	; 0x16
     fd6:	fc 01       	movw	r30, r24
     fd8:	25 87       	std	Z+13, r18	; 0x0d
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	2f 89       	ldd	r18, Y+23	; 0x17
     fe0:	fc 01       	movw	r30, r24
     fe2:	26 87       	std	Z+14, r18	; 0x0e
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	fc 01       	movw	r30, r24
     fea:	84 81       	ldd	r24, Z+4	; 0x04
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	fc 01       	movw	r30, r24
     ff8:	85 81       	ldd	r24, Z+5	; 0x05
     ffa:	8f 3f       	cpi	r24, 0xFF	; 255
     ffc:	39 f0       	breq	.+14     	; 0x100c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xc8>
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	fc 01       	movw	r30, r24
    1004:	85 81       	ldd	r24, Z+5	; 0x05
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	fc 01       	movw	r30, r24
    1012:	86 81       	ldd	r24, Z+6	; 0x06
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 23       	and	r24, r24
    101e:	29 f0       	breq	.+10     	; 0x102a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xe6>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	fc 01       	movw	r30, r24
    1026:	17 86       	std	Z+15, r1	; 0x0f
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xf0>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	20 e1       	ldi	r18, 0x10	; 16
    1030:	fc 01       	movw	r30, r24
    1032:	27 87       	std	Z+15, r18	; 0x0f
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	60 e1       	ldi	r22, 0x10	; 16
    103e:	0e d0       	rcall	.+28     	; 0x105c <_ZN13LiquidCrystal5beginEhhh>
    1040:	2a 96       	adiw	r28, 0x0a	; 10
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	0f 91       	pop	r16
    1052:	ef 90       	pop	r14
    1054:	cf 90       	pop	r12
    1056:	af 90       	pop	r10
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <_ZN13LiquidCrystal5beginEhhh>:
    105c:	a5 e0       	ldi	r26, 0x05	; 5
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f8 e0       	ldi	r31, 0x08	; 8
    1064:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	4c 83       	std	Y+4, r20	; 0x04
    1070:	2d 83       	std	Y+5, r18	; 0x05
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	50 f0       	brcs	.+20     	; 0x108c <_ZN13LiquidCrystal5beginEhhh+0x30>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	fc 01       	movw	r30, r24
    107e:	87 85       	ldd	r24, Z+15	; 0x0f
    1080:	28 2f       	mov	r18, r24
    1082:	28 60       	ori	r18, 0x08	; 8
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	fc 01       	movw	r30, r24
    108a:	27 87       	std	Z+15, r18	; 0x0f
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	fc 01       	movw	r30, r24
    1094:	23 8b       	std	Z+19, r18	; 0x13
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	ac 01       	movw	r20, r24
    109e:	40 5c       	subi	r20, 0xC0	; 192
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	8a 01       	movw	r16, r20
    10ae:	40 e4       	ldi	r20, 0x40	; 64
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	a4 d0       	rcall	.+328    	; 0x1200 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	88 23       	and	r24, r24
    10bc:	69 f0       	breq	.+26     	; 0x10d8 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	51 f4       	brne	.+20     	; 0x10d8 <_ZN13LiquidCrystal5beginEhhh+0x7c>
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	fc 01       	movw	r30, r24
    10ca:	87 85       	ldd	r24, Z+15	; 0x0f
    10cc:	28 2f       	mov	r18, r24
    10ce:	24 60       	ori	r18, 0x04	; 4
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	fc 01       	movw	r30, r24
    10d6:	27 87       	std	Z+15, r18	; 0x0f
    10d8:	80 e5       	ldi	r24, 0x50	; 80
    10da:	93 ec       	ldi	r25, 0xC3	; 195
    10dc:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	fc 01       	movw	r30, r24
    10e6:	84 81       	ldd	r24, Z+4	; 0x04
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	fc 01       	movw	r30, r24
    10f4:	86 81       	ldd	r24, Z+6	; 0x06
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	fc 01       	movw	r30, r24
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	39 f0       	breq	.+14     	; 0x1116 <_ZN13LiquidCrystal5beginEhhh+0xba>
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	fc 01       	movw	r30, r24
    110e:	85 81       	ldd	r24, Z+5	; 0x05
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	fc 01       	movw	r30, r24
    111c:	87 85       	ldd	r24, Z+15	; 0x0f
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	80 71       	andi	r24, 0x10	; 16
    1124:	99 27       	eor	r25, r25
    1126:	89 2b       	or	r24, r25
    1128:	e9 f4       	brne	.+58     	; 0x1164 <_ZN13LiquidCrystal5beginEhhh+0x108>
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	63 e0       	ldi	r22, 0x03	; 3
    1130:	91 d1       	rcall	.+802    	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
    1132:	84 e9       	ldi	r24, 0x94	; 148
    1134:	91 e1       	ldi	r25, 0x11	; 17
    1136:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	63 e0       	ldi	r22, 0x03	; 3
    1140:	89 d1       	rcall	.+786    	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
    1142:	84 e9       	ldi	r24, 0x94	; 148
    1144:	91 e1       	ldi	r25, 0x11	; 17
    1146:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	81 d1       	rcall	.+770    	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
    1152:	86 e9       	ldi	r24, 0x96	; 150
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	79 d1       	rcall	.+754    	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
    1162:	26 c0       	rjmp	.+76     	; 0x11b0 <_ZN13LiquidCrystal5beginEhhh+0x154>
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	fc 01       	movw	r30, r24
    116a:	87 85       	ldd	r24, Z+15	; 0x0f
    116c:	28 2f       	mov	r18, r24
    116e:	20 62       	ori	r18, 0x20	; 32
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	62 2f       	mov	r22, r18
    1176:	d6 d0       	rcall	.+428    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    1178:	84 e9       	ldi	r24, 0x94	; 148
    117a:	91 e1       	ldi	r25, 0x11	; 17
    117c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	fc 01       	movw	r30, r24
    1186:	87 85       	ldd	r24, Z+15	; 0x0f
    1188:	28 2f       	mov	r18, r24
    118a:	20 62       	ori	r18, 0x20	; 32
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	62 2f       	mov	r22, r18
    1192:	c8 d0       	rcall	.+400    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    1194:	86 e9       	ldi	r24, 0x96	; 150
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	fc 01       	movw	r30, r24
    11a2:	87 85       	ldd	r24, Z+15	; 0x0f
    11a4:	28 2f       	mov	r18, r24
    11a6:	20 62       	ori	r18, 0x20	; 32
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	62 2f       	mov	r22, r18
    11ae:	ba d0       	rcall	.+372    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	fc 01       	movw	r30, r24
    11b6:	87 85       	ldd	r24, Z+15	; 0x0f
    11b8:	28 2f       	mov	r18, r24
    11ba:	20 62       	ori	r18, 0x20	; 32
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	62 2f       	mov	r22, r18
    11c2:	b0 d0       	rcall	.+352    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	24 e0       	ldi	r18, 0x04	; 4
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 8b       	std	Z+16, r18	; 0x10
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	88 d0       	rcall	.+272    	; 0x12e4 <_ZN13LiquidCrystal7displayEv>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	3b d0       	rcall	.+118    	; 0x1250 <_ZN13LiquidCrystal5clearEv>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	22 e0       	ldi	r18, 0x02	; 2
    11e0:	fc 01       	movw	r30, r24
    11e2:	21 8b       	std	Z+17, r18	; 0x11
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	fc 01       	movw	r30, r24
    11ea:	81 89       	ldd	r24, Z+17	; 0x11
    11ec:	28 2f       	mov	r18, r24
    11ee:	24 60       	ori	r18, 0x04	; 4
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	62 2f       	mov	r22, r18
    11f6:	96 d0       	rcall	.+300    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    11f8:	25 96       	adiw	r28, 0x05	; 5
    11fa:	e4 e0       	ldi	r30, 0x04	; 4
    11fc:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00001200 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    1200:	aa e0       	ldi	r26, 0x0A	; 10
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e0       	ldi	r30, 0x06	; 6
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	7c 83       	std	Y+4, r23	; 0x04
    1212:	6b 83       	std	Y+3, r22	; 0x03
    1214:	5e 83       	std	Y+6, r21	; 0x06
    1216:	4d 83       	std	Y+5, r20	; 0x05
    1218:	38 87       	std	Y+8, r19	; 0x08
    121a:	2f 83       	std	Y+7, r18	; 0x07
    121c:	1a 87       	std	Y+10, r17	; 0x0a
    121e:	09 87       	std	Y+9, r16	; 0x09
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	fc 01       	movw	r30, r24
    1228:	24 8b       	std	Z+20, r18	; 0x14
    122a:	2d 81       	ldd	r18, Y+5	; 0x05
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	fc 01       	movw	r30, r24
    1232:	25 8b       	std	Z+21, r18	; 0x15
    1234:	2f 81       	ldd	r18, Y+7	; 0x07
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	fc 01       	movw	r30, r24
    123c:	26 8b       	std	Z+22, r18	; 0x16
    123e:	29 85       	ldd	r18, Y+9	; 0x09
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	fc 01       	movw	r30, r24
    1246:	27 8b       	std	Z+23, r18	; 0x17
    1248:	2a 96       	adiw	r28, 0x0a	; 10
    124a:	e4 e0       	ldi	r30, 0x04	; 4
    124c:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00001250 <_ZN13LiquidCrystal5clearEv>:
    1250:	a2 e0       	ldi	r26, 0x02	; 2
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ee e2       	ldi	r30, 0x2E	; 46
    1256:	f9 e0       	ldi	r31, 0x09	; 9
    1258:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	5e d0       	rcall	.+188    	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    1268:	80 ed       	ldi	r24, 0xD0	; 208
    126a:	97 e0       	ldi	r25, 0x07	; 7
    126c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
    1270:	22 96       	adiw	r28, 0x02	; 2
    1272:	e2 e0       	ldi	r30, 0x02	; 2
    1274:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001278 <_ZN13LiquidCrystal9setCursorEhh>:
    1278:	a6 e0       	ldi	r26, 0x06	; 6
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e4       	ldi	r30, 0x42	; 66
    127e:	f9 e0       	ldi	r31, 0x09	; 9
    1280:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	6d 83       	std	Y+5, r22	; 0x05
    128a:	4e 83       	std	Y+6, r20	; 0x06
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	8e 81       	ldd	r24, Y+6	; 0x06
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	10 f0       	brcs	.+4      	; 0x129e <_ZN13LiquidCrystal9setCursorEhh+0x26>
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	8e 83       	std	Y+6, r24	; 0x06
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	fc 01       	movw	r30, r24
    12a4:	93 89       	ldd	r25, Z+19	; 0x13
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	89 17       	cp	r24, r25
    12aa:	30 f0       	brcs	.+12     	; 0x12b8 <_ZN13LiquidCrystal9setCursorEhh+0x40>
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	fc 01       	movw	r30, r24
    12b2:	83 89       	ldd	r24, Z+19	; 0x13
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	8e 83       	std	Y+6, r24	; 0x06
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	44 96       	adiw	r24, 0x14	; 20
    12c8:	fc 01       	movw	r30, r24
    12ca:	90 81       	ld	r25, Z
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	89 0f       	add	r24, r25
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	28 2f       	mov	r18, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	62 2f       	mov	r22, r18
    12da:	24 d0       	rcall	.+72     	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    12dc:	26 96       	adiw	r28, 0x06	; 6
    12de:	e2 e0       	ldi	r30, 0x02	; 2
    12e0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000012e4 <_ZN13LiquidCrystal7displayEv>:
    12e4:	a2 e0       	ldi	r26, 0x02	; 2
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e8 e7       	ldi	r30, 0x78	; 120
    12ea:	f9 e0       	ldi	r31, 0x09	; 9
    12ec:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	fc 01       	movw	r30, r24
    12fa:	80 89       	ldd	r24, Z+16	; 0x10
    12fc:	28 2f       	mov	r18, r24
    12fe:	24 60       	ori	r18, 0x04	; 4
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	fc 01       	movw	r30, r24
    1306:	20 8b       	std	Z+16, r18	; 0x10
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	fc 01       	movw	r30, r24
    130e:	80 89       	ldd	r24, Z+16	; 0x10
    1310:	28 2f       	mov	r18, r24
    1312:	28 60       	ori	r18, 0x08	; 8
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	62 2f       	mov	r22, r18
    131a:	04 d0       	rcall	.+8      	; 0x1324 <_ZN13LiquidCrystal7commandEh>
    131c:	22 96       	adiw	r28, 0x02	; 2
    131e:	e2 e0       	ldi	r30, 0x02	; 2
    1320:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001324 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    1324:	a3 e0       	ldi	r26, 0x03	; 3
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e8 e9       	ldi	r30, 0x98	; 152
    132a:	f9 e0       	ldi	r31, 0x09	; 9
    132c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	6b 81       	ldd	r22, Y+3	; 0x03
    133e:	18 d0       	rcall	.+48     	; 0x1370 <_ZN13LiquidCrystal4sendEhh>
}
    1340:	23 96       	adiw	r28, 0x03	; 3
    1342:	e2 e0       	ldi	r30, 0x02	; 2
    1344:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001348 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    1348:	a3 e0       	ldi	r26, 0x03	; 3
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ea ea       	ldi	r30, 0xAA	; 170
    134e:	f9 e0       	ldi	r31, 0x09	; 9
    1350:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	6b 81       	ldd	r22, Y+3	; 0x03
    1362:	06 d0       	rcall	.+12     	; 0x1370 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
}
    1368:	23 96       	adiw	r28, 0x03	; 3
    136a:	e2 e0       	ldi	r30, 0x02	; 2
    136c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001370 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    1370:	a4 e0       	ldi	r26, 0x04	; 4
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ee eb       	ldi	r30, 0xBE	; 190
    1376:	f9 e0       	ldi	r31, 0x09	; 9
    1378:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6b 83       	std	Y+3, r22	; 0x03
    1382:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	84 81       	ldd	r24, Z+4	; 0x04
    138c:	6c 81       	ldd	r22, Y+4	; 0x04
    138e:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	fc 01       	movw	r30, r24
    1398:	85 81       	ldd	r24, Z+5	; 0x05
    139a:	8f 3f       	cpi	r24, 0xFF	; 255
    139c:	39 f0       	breq	.+14     	; 0x13ac <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	fc 01       	movw	r30, r24
    13a4:	85 81       	ldd	r24, Z+5	; 0x05
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	fc 01       	movw	r30, r24
    13b2:	87 85       	ldd	r24, Z+15	; 0x0f
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	80 71       	andi	r24, 0x10	; 16
    13ba:	99 27       	eor	r25, r25
    13bc:	89 2b       	or	r24, r25
    13be:	29 f0       	breq	.+10     	; 0x13ca <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	6b 81       	ldd	r22, Y+3	; 0x03
    13c6:	85 d0       	rcall	.+266    	; 0x14d2 <_ZN13LiquidCrystal10write8bitsEh>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <_ZN13LiquidCrystal4sendEhh+0x82>
  } else {
    write4bits(value>>4);
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	95 95       	asr	r25
    13d2:	87 95       	ror	r24
    13d4:	95 95       	asr	r25
    13d6:	87 95       	ror	r24
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	95 95       	asr	r25
    13de:	87 95       	ror	r24
    13e0:	28 2f       	mov	r18, r24
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	62 2f       	mov	r22, r18
    13e8:	35 d0       	rcall	.+106    	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	6b 81       	ldd	r22, Y+3	; 0x03
    13f0:	31 d0       	rcall	.+98     	; 0x1454 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    13f2:	24 96       	adiw	r28, 0x04	; 4
    13f4:	e2 e0       	ldi	r30, 0x02	; 2
    13f6:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000013fa <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    13fa:	a2 e0       	ldi	r26, 0x02	; 2
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e0       	ldi	r30, 0x03	; 3
    1400:	fa e0       	ldi	r31, 0x0A	; 10
    1402:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	fc 01       	movw	r30, r24
    1410:	86 81       	ldd	r24, Z+6	; 0x06
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
  delayMicroseconds(1);    
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	fc 01       	movw	r30, r24
    1426:	86 81       	ldd	r24, Z+6	; 0x06
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	fc 01       	movw	r30, r24
    143c:	86 81       	ldd	r24, Z+6	; 0x06
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    1444:	84 e6       	ldi	r24, 0x64	; 100
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <delayMicroseconds>
}
    144c:	22 96       	adiw	r28, 0x02	; 2
    144e:	e2 e0       	ldi	r30, 0x02	; 2
    1450:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001454 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    1454:	a5 e0       	ldi	r26, 0x05	; 5
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	fa e0       	ldi	r31, 0x0A	; 10
    145c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    1466:	1a 82       	std	Y+2, r1	; 0x02
    1468:	19 82       	std	Y+1, r1	; 0x01
    146a:	28 c0       	rjmp	.+80     	; 0x14bc <_ZN13LiquidCrystal10write4bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	07 96       	adiw	r24, 0x07	; 7
    147a:	fc 01       	movw	r30, r24
    147c:	80 81       	ld	r24, Z
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	09 80       	ldd	r0, Y+1	; 0x01
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <_ZN13LiquidCrystal10write4bitsEh+0x3a>
    1496:	48 2f       	mov	r20, r24
    1498:	41 70       	andi	r20, 0x01	; 1
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	07 96       	adiw	r24, 0x07	; 7
    14a8:	fc 01       	movw	r30, r24
    14aa:	80 81       	ld	r24, Z
    14ac:	64 2f       	mov	r22, r20
    14ae:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	04 97       	sbiw	r24, 0x04	; 4
    14c2:	a4 f2       	brlt	.-88     	; 0x146c <_ZN13LiquidCrystal10write4bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	98 df       	rcall	.-208    	; 0x13fa <_ZN13LiquidCrystal11pulseEnableEv>
}
    14ca:	25 96       	adiw	r28, 0x05	; 5
    14cc:	e2 e0       	ldi	r30, 0x02	; 2
    14ce:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000014d2 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    14d2:	a5 e0       	ldi	r26, 0x05	; 5
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ef e6       	ldi	r30, 0x6F	; 111
    14d8:	fa e0       	ldi	r31, 0x0A	; 10
    14da:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    14e4:	1a 82       	std	Y+2, r1	; 0x02
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	28 c0       	rjmp	.+80     	; 0x153a <_ZN13LiquidCrystal10write8bitsEh+0x68>
    pinMode(_data_pins[i], OUTPUT);
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	07 96       	adiw	r24, 0x07	; 7
    14f8:	fc 01       	movw	r30, r24
    14fa:	80 81       	ld	r24, Z
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	09 80       	ldd	r0, Y+1	; 0x01
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <_ZN13LiquidCrystal10write8bitsEh+0x3e>
    150c:	95 95       	asr	r25
    150e:	87 95       	ror	r24
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <_ZN13LiquidCrystal10write8bitsEh+0x3a>
    1514:	48 2f       	mov	r20, r24
    1516:	41 70       	andi	r20, 0x01	; 1
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	07 96       	adiw	r24, 0x07	; 7
    1526:	fc 01       	movw	r30, r24
    1528:	80 81       	ld	r24, Z
    152a:	64 2f       	mov	r22, r20
    152c:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	08 97       	sbiw	r24, 0x08	; 8
    1540:	a4 f2       	brlt	.-88     	; 0x14ea <_ZN13LiquidCrystal10write8bitsEh+0x18>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	59 df       	rcall	.-334    	; 0x13fa <_ZN13LiquidCrystal11pulseEnableEv>
}
    1548:	25 96       	adiw	r28, 0x05	; 5
    154a:	e2 e0       	ldi	r30, 0x02	; 2
    154c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001550 <_ZN4erom6Access8instanceEv>:

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// EEPROM storage management, inherits the 'Storage' class and is used to
// verify whether data currently stored in EEPROM is valid and can be used by
// the running application/sketch.
class VerifiedStorage : public Storage {
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ee ea       	ldi	r30, 0xAE	; 174
    1556:	fa e0       	ldi	r31, 0x0A	; 10
    1558:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    155c:	87 ee       	ldi	r24, 0xE7	; 231
    155e:	92 e0       	ldi	r25, 0x02	; 2
    1560:	fc 01       	movw	r30, r24
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	51 f4       	brne	.+20     	; 0x157c <_ZN4erom6Access8instanceEv+0x2c>
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	81 ef       	ldi	r24, 0xF1	; 241
    156e:	92 e0       	ldi	r25, 0x02	; 2
    1570:	0a d0       	rcall	.+20     	; 0x1586 <_ZN4erom6AccessC1Ej>
    1572:	87 ee       	ldi	r24, 0xE7	; 231
    1574:	92 e0       	ldi	r25, 0x02	; 2
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
    157c:	81 ef       	ldi	r24, 0xF1	; 241
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	e2 e0       	ldi	r30, 0x02	; 2
    1582:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001586 <_ZN4erom6AccessC1Ej>:
    1586:	a4 e0       	ldi	r26, 0x04	; 4
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	7c 83       	std	Y+4, r23	; 0x04
    1598:	6b 83       	std	Y+3, r22	; 0x03
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	fc 01       	movw	r30, r24
    15a4:	31 83       	std	Z+1, r19	; 0x01
    15a6:	20 83       	st	Z, r18
    15a8:	0a d0       	rcall	.+20     	; 0x15be <_ZN4erom6Access18device_memory_sizeEv>
    15aa:	9c 01       	movw	r18, r24
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	fc 01       	movw	r30, r24
    15b2:	33 83       	std	Z+3, r19	; 0x03
    15b4:	22 83       	std	Z+2, r18	; 0x02
    15b6:	24 96       	adiw	r28, 0x04	; 4
    15b8:	e2 e0       	ldi	r30, 0x02	; 2
    15ba:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000015be <_ZN4erom6Access18device_memory_sizeEv>:
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 ee       	ldi	r30, 0xE5	; 229
    15c4:	fa e0       	ldi	r31, 0x0A	; 10
    15c6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	94 e0       	ldi	r25, 0x04	; 4
    15ce:	e2 e0       	ldi	r30, 0x02	; 2
    15d0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000015d4 <_Z41__static_initialization_and_destruction_0ii>:
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    15d4:	a4 e0       	ldi	r26, 0x04	; 4
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e0 ef       	ldi	r30, 0xF0	; 240
    15da:	fa e0       	ldi	r31, 0x0A	; 10
    15dc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	7c 83       	std	Y+4, r23	; 0x04
    15e6:	6b 83       	std	Y+3, r22	; 0x03
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	49 f4       	brne	.+18     	; 0x1602 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	29 f4       	brne	.+10     	; 0x1602 <_Z41__static_initialization_and_destruction_0ii+0x2e>

namespace erom {

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

erom::Access &access = Access::instance();
    15f8:	ab df       	rcall	.-170    	; 0x1550 <_ZN4erom6Access8instanceEv>
    15fa:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <_ZN4erom6accessE+0x1>
    15fe:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <_ZN4erom6accessE>
  return __ok;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //

} // namespace erom
    1602:	24 96       	adiw	r28, 0x04	; 4
    1604:	e2 e0       	ldi	r30, 0x02	; 2
    1606:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000160a <_GLOBAL__sub_I__ZN4erom6accessE>:
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e0       	ldi	r30, 0x0B	; 11
    1610:	fb e0       	ldi	r31, 0x0B	; 11
    1612:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1616:	6f ef       	ldi	r22, 0xFF	; 255
    1618:	7f ef       	ldi	r23, 0xFF	; 255
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	da df       	rcall	.-76     	; 0x15d4 <_Z41__static_initialization_and_destruction_0ii>
    1620:	e2 e0       	ldi	r30, 0x02	; 2
    1622:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001626 <_ZL7elapsedv>:
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    1626:	a0 e0       	ldi	r26, 0x00	; 0
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e9 e1       	ldi	r30, 0x19	; 25
    162c:	fb e0       	ldi	r31, 0x0B	; 11
    162e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1632:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	e2 e0       	ldi	r30, 0x02	; 2
    1640:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001644 <_ZN11SimpleTimerC1Ev>:


SimpleTimer::SimpleTimer() {
    1644:	a8 e0       	ldi	r26, 0x08	; 8
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e2       	ldi	r30, 0x28	; 40
    164a:	fb e0       	ldi	r31, 0x0B	; 11
    164c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1650:	98 87       	std	Y+8, r25	; 0x08
    1652:	8f 83       	std	Y+7, r24	; 0x07
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	25 e9       	ldi	r18, 0x95	; 149
    165a:	31 e0       	ldi	r19, 0x01	; 1
    165c:	fc 01       	movw	r30, r24
    165e:	31 83       	std	Z+1, r19	; 0x01
    1660:	20 83       	st	Z, r18
    unsigned long current_millis = elapsed();
    1662:	e1 df       	rcall	.-62     	; 0x1626 <_ZL7elapsedv>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	ad 83       	std	Y+5, r26	; 0x05
    166e:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 0; i < MAX_TIMERS; i++) {
    1670:	1a 82       	std	Y+2, r1	; 0x02
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	3d c0       	rjmp	.+122    	; 0x16f0 <_ZN11SimpleTimerC1Ev+0xac>
        enabled[i] = false;
    1676:	2f 81       	ldd	r18, Y+7	; 0x07
    1678:	38 85       	ldd	r19, Y+8	; 0x08
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	82 0f       	add	r24, r18
    1680:	93 1f       	adc	r25, r19
    1682:	82 57       	subi	r24, 0x72	; 114
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	fc 01       	movw	r30, r24
    1688:	10 82       	st	Z, r1
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
    168a:	2f 81       	ldd	r18, Y+7	; 0x07
    168c:	38 85       	ldd	r19, Y+8	; 0x08
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	45 96       	adiw	r24, 0x15	; 21
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	82 0f       	add	r24, r18
    169a:	93 1f       	adc	r25, r19
    169c:	fc 01       	movw	r30, r24
    169e:	11 82       	std	Z+1, r1	; 0x01
    16a0:	10 82       	st	Z, r1
        prev_millis[i] = current_millis;
    16a2:	2f 81       	ldd	r18, Y+7	; 0x07
    16a4:	38 85       	ldd	r19, Y+8	; 0x08
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	9c 01       	movw	r18, r24
    16b8:	2e 5f       	subi	r18, 0xFE	; 254
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	ad 81       	ldd	r26, Y+5	; 0x05
    16c2:	be 81       	ldd	r27, Y+6	; 0x06
    16c4:	f9 01       	movw	r30, r18
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
        numRuns[i] = 0;
    16ce:	2f 81       	ldd	r18, Y+7	; 0x07
    16d0:	38 85       	ldd	r19, Y+8	; 0x08
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	cd 96       	adiw	r24, 0x3d	; 61
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	82 0f       	add	r24, r18
    16de:	93 1f       	adc	r25, r19
    16e0:	fc 01       	movw	r30, r24
    16e2:	11 82       	std	Z+1, r1	; 0x01
    16e4:	10 82       	st	Z, r1


SimpleTimer::SimpleTimer() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	0a 97       	sbiw	r24, 0x0a	; 10
    16f6:	0c f4       	brge	.+2      	; 0x16fa <_ZN11SimpleTimerC1Ev+0xb6>
    16f8:	be cf       	rjmp	.-132    	; 0x1676 <_ZN11SimpleTimerC1Ev+0x32>
        callbacks[i] = 0;                   // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
        prev_millis[i] = current_millis;
        numRuns[i] = 0;
    }

    numTimers = 0;
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	84 55       	subi	r24, 0x54	; 84
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	fc 01       	movw	r30, r24
    1704:	11 82       	std	Z+1, r1	; 0x01
    1706:	10 82       	st	Z, r1
}
    1708:	28 96       	adiw	r28, 0x08	; 8
    170a:	e2 e0       	ldi	r30, 0x02	; 2
    170c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001710 <_ZN11SimpleTimer3runEv>:


void SimpleTimer::run() {
    1710:	a8 e0       	ldi	r26, 0x08	; 8
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e8       	ldi	r30, 0x8E	; 142
    1716:	fb e0       	ldi	r31, 0x0B	; 11
    1718:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    171c:	98 87       	std	Y+8, r25	; 0x08
    171e:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();
    1720:	82 df       	rcall	.-252    	; 0x1626 <_ZL7elapsedv>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	8b 83       	std	Y+3, r24	; 0x03
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	ad 83       	std	Y+5, r26	; 0x05
    172c:	be 83       	std	Y+6, r27	; 0x06

    for (i = 0; i < MAX_TIMERS; i++) {
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	25 c1       	rjmp	.+586    	; 0x197e <_ZN11SimpleTimer3runEv+0x26e>

        toBeCalled[i] = DEFCALL_DONTRUN;
    1734:	2f 81       	ldd	r18, Y+7	; 0x07
    1736:	38 85       	ldd	r19, Y+8	; 0x08
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	84 5b       	subi	r24, 0xB4	; 180
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	fc 01       	movw	r30, r24
    174a:	11 82       	std	Z+1, r1	; 0x01
    174c:	10 82       	st	Z, r1

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    174e:	2f 81       	ldd	r18, Y+7	; 0x07
    1750:	38 85       	ldd	r19, Y+8	; 0x08
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	45 96       	adiw	r24, 0x15	; 21
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	fc 01       	movw	r30, r24
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	89 2b       	or	r24, r25
    1768:	09 f4       	brne	.+2      	; 0x176c <_ZN11SimpleTimer3runEv+0x5c>
    176a:	04 c1       	rjmp	.+520    	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    176c:	2f 81       	ldd	r18, Y+7	; 0x07
    176e:	38 85       	ldd	r19, Y+8	; 0x08
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	02 96       	adiw	r24, 0x02	; 2
    1782:	fc 01       	movw	r30, r24
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	a2 81       	ldd	r26, Z+2	; 0x02
    178a:	b3 81       	ldd	r27, Z+3	; 0x03
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	4d 81       	ldd	r20, Y+5	; 0x05
    1792:	5e 81       	ldd	r21, Y+6	; 0x06
    1794:	79 01       	movw	r14, r18
    1796:	8a 01       	movw	r16, r20
    1798:	e8 1a       	sub	r14, r24
    179a:	f9 0a       	sbc	r15, r25
    179c:	0a 0b       	sbc	r16, r26
    179e:	1b 0b       	sbc	r17, r27
    17a0:	d8 01       	movw	r26, r16
    17a2:	c7 01       	movw	r24, r14
    17a4:	4f 81       	ldd	r20, Y+7	; 0x07
    17a6:	58 85       	ldd	r21, Y+8	; 0x08
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	3a 81       	ldd	r19, Y+2	; 0x02
    17ac:	22 0f       	add	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	24 0f       	add	r18, r20
    17b6:	35 1f       	adc	r19, r21
    17b8:	22 5c       	subi	r18, 0xC2	; 194
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	f9 01       	movw	r30, r18
    17be:	20 81       	ld	r18, Z
    17c0:	31 81       	ldd	r19, Z+1	; 0x01
    17c2:	42 81       	ldd	r20, Z+2	; 0x02
    17c4:	53 81       	ldd	r21, Z+3	; 0x03
    17c6:	82 17       	cp	r24, r18
    17c8:	93 07       	cpc	r25, r19
    17ca:	a4 07       	cpc	r26, r20
    17cc:	b5 07       	cpc	r27, r21
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <_ZN11SimpleTimer3runEv+0xc2>
    17d0:	d1 c0       	rjmp	.+418    	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    17d2:	2f 81       	ldd	r18, Y+7	; 0x07
    17d4:	38 85       	ldd	r19, Y+8	; 0x08
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	82 0f       	add	r24, r18
    17e4:	93 1f       	adc	r25, r19
    17e6:	02 96       	adiw	r24, 0x02	; 2
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	a2 81       	ldd	r26, Z+2	; 0x02
    17f0:	b3 81       	ldd	r27, Z+3	; 0x03
    17f2:	4f 81       	ldd	r20, Y+7	; 0x07
    17f4:	58 85       	ldd	r21, Y+8	; 0x08
    17f6:	29 81       	ldd	r18, Y+1	; 0x01
    17f8:	3a 81       	ldd	r19, Y+2	; 0x02
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	24 0f       	add	r18, r20
    1804:	35 1f       	adc	r19, r21
    1806:	22 5c       	subi	r18, 0xC2	; 194
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	31 81       	ldd	r19, Z+1	; 0x01
    1810:	42 81       	ldd	r20, Z+2	; 0x02
    1812:	53 81       	ldd	r21, Z+3	; 0x03
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	a4 1f       	adc	r26, r20
    181a:	b5 1f       	adc	r27, r21
    181c:	4f 81       	ldd	r20, Y+7	; 0x07
    181e:	58 85       	ldd	r21, Y+8	; 0x08
    1820:	29 81       	ldd	r18, Y+1	; 0x01
    1822:	3a 81       	ldd	r19, Y+2	; 0x02
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	24 0f       	add	r18, r20
    182e:	35 1f       	adc	r19, r21
    1830:	2e 5f       	subi	r18, 0xFE	; 254
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	f9 01       	movw	r30, r18
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03

                // check if the timer callback has to be executed
                if (enabled[i]) {
    183e:	2f 81       	ldd	r18, Y+7	; 0x07
    1840:	38 85       	ldd	r19, Y+8	; 0x08
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	82 57       	subi	r24, 0x72	; 114
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	fc 01       	movw	r30, r24
    1850:	80 81       	ld	r24, Z
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <_ZN11SimpleTimer3runEv+0x148>
    1856:	8e c0       	rjmp	.+284    	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    1858:	2f 81       	ldd	r18, Y+7	; 0x07
    185a:	38 85       	ldd	r19, Y+8	; 0x08
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	c3 96       	adiw	r24, 0x33	; 51
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	fc 01       	movw	r30, r24
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	89 2b       	or	r24, r25
    1872:	81 f4       	brne	.+32     	; 0x1894 <_ZN11SimpleTimer3runEv+0x184>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    1874:	2f 81       	ldd	r18, Y+7	; 0x07
    1876:	38 85       	ldd	r19, Y+8	; 0x08
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	84 5b       	subi	r24, 0xB4	; 180
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	21 e0       	ldi	r18, 0x01	; 1
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	fc 01       	movw	r30, r24
    188e:	31 83       	std	Z+1, r19	; 0x01
    1890:	20 83       	st	Z, r18
    1892:	70 c0       	rjmp	.+224    	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    1894:	2f 81       	ldd	r18, Y+7	; 0x07
    1896:	38 85       	ldd	r19, Y+8	; 0x08
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	cd 96       	adiw	r24, 0x3d	; 61
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	82 0f       	add	r24, r18
    18a4:	93 1f       	adc	r25, r19
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 81       	ld	r18, Z
    18aa:	31 81       	ldd	r19, Z+1	; 0x01
    18ac:	4f 81       	ldd	r20, Y+7	; 0x07
    18ae:	58 85       	ldd	r21, Y+8	; 0x08
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	c3 96       	adiw	r24, 0x33	; 51
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	84 0f       	add	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	28 17       	cp	r18, r24
    18c6:	39 07       	cpc	r19, r25
    18c8:	0c f0       	brlt	.+2      	; 0x18cc <_ZN11SimpleTimer3runEv+0x1bc>
    18ca:	54 c0       	rjmp	.+168    	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>
                        toBeCalled[i] = DEFCALL_RUNONLY;
    18cc:	2f 81       	ldd	r18, Y+7	; 0x07
    18ce:	38 85       	ldd	r19, Y+8	; 0x08
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	84 5b       	subi	r24, 0xB4	; 180
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	82 0f       	add	r24, r18
    18de:	93 1f       	adc	r25, r19
    18e0:	21 e0       	ldi	r18, 0x01	; 1
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	fc 01       	movw	r30, r24
    18e6:	31 83       	std	Z+1, r19	; 0x01
    18e8:	20 83       	st	Z, r18
                        numRuns[i]++;
    18ea:	2f 81       	ldd	r18, Y+7	; 0x07
    18ec:	38 85       	ldd	r19, Y+8	; 0x08
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	cd 96       	adiw	r24, 0x3d	; 61
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	82 0f       	add	r24, r18
    18fa:	93 1f       	adc	r25, r19
    18fc:	fc 01       	movw	r30, r24
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	9c 01       	movw	r18, r24
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
    1908:	4f 81       	ldd	r20, Y+7	; 0x07
    190a:	58 85       	ldd	r21, Y+8	; 0x08
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	cd 96       	adiw	r24, 0x3d	; 61
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	84 0f       	add	r24, r20
    1918:	95 1f       	adc	r25, r21
    191a:	fc 01       	movw	r30, r24
    191c:	31 83       	std	Z+1, r19	; 0x01
    191e:	20 83       	st	Z, r18

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    1920:	2f 81       	ldd	r18, Y+7	; 0x07
    1922:	38 85       	ldd	r19, Y+8	; 0x08
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	cd 96       	adiw	r24, 0x3d	; 61
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	20 81       	ld	r18, Z
    1936:	31 81       	ldd	r19, Z+1	; 0x01
    1938:	4f 81       	ldd	r20, Y+7	; 0x07
    193a:	58 85       	ldd	r21, Y+8	; 0x08
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	c3 96       	adiw	r24, 0x33	; 51
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	84 0f       	add	r24, r20
    1948:	95 1f       	adc	r25, r21
    194a:	fc 01       	movw	r30, r24
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	7c f0       	brlt	.+30     	; 0x1974 <_ZN11SimpleTimer3runEv+0x264>
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    1956:	2f 81       	ldd	r18, Y+7	; 0x07
    1958:	38 85       	ldd	r19, Y+8	; 0x08
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	84 5b       	subi	r24, 0xB4	; 180
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	22 e0       	ldi	r18, 0x02	; 2
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	fc 01       	movw	r30, r24
    1970:	31 83       	std	Z+1, r19	; 0x01
    1972:	20 83       	st	Z, r18
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	0a 97       	sbiw	r24, 0x0a	; 10
    1984:	0c f4       	brge	.+2      	; 0x1988 <_ZN11SimpleTimer3runEv+0x278>
    1986:	d6 ce       	rjmp	.-596    	; 0x1734 <_ZN11SimpleTimer3runEv+0x24>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1988:	1a 82       	std	Y+2, r1	; 0x02
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	46 c0       	rjmp	.+140    	; 0x1a1a <_ZN11SimpleTimer3runEv+0x30a>
        switch(toBeCalled[i]) {
    198e:	2f 81       	ldd	r18, Y+7	; 0x07
    1990:	38 85       	ldd	r19, Y+8	; 0x08
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	84 5b       	subi	r24, 0xB4	; 180
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 0f       	add	r24, r18
    19a0:	93 1f       	adc	r25, r19
    19a2:	fc 01       	movw	r30, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <_ZN11SimpleTimer3runEv+0x2a4>
    19ae:	02 97       	sbiw	r24, 0x02	; 2
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <_ZN11SimpleTimer3runEv+0x2c2>
            case DEFCALL_DONTRUN:
                break;
    19b2:	2e c0       	rjmp	.+92     	; 0x1a10 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    19b4:	2f 81       	ldd	r18, Y+7	; 0x07
    19b6:	38 85       	ldd	r19, Y+8	; 0x08
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	45 96       	adiw	r24, 0x15	; 21
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	fc 01       	movw	r30, r24
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	fc 01       	movw	r30, r24
    19ce:	09 95       	icall
                break;
    19d0:	1f c0       	rjmp	.+62     	; 0x1a10 <_ZN11SimpleTimer3runEv+0x300>

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    19d2:	2f 81       	ldd	r18, Y+7	; 0x07
    19d4:	38 85       	ldd	r19, Y+8	; 0x08
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	45 96       	adiw	r24, 0x15	; 21
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	82 0f       	add	r24, r18
    19e2:	93 1f       	adc	r25, r19
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	fc 01       	movw	r30, r24
    19ec:	09 95       	icall
                deleteTimer(i);
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	98 85       	ldd	r25, Y+8	; 0x08
    19f2:	fc 01       	movw	r30, r24
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	08 96       	adiw	r24, 0x08	; 8
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 81       	ld	r18, Z
    19fe:	31 81       	ldd	r19, Z+1	; 0x01
    1a00:	49 81       	ldd	r20, Y+1	; 0x01
    1a02:	5a 81       	ldd	r21, Y+2	; 0x02
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	98 85       	ldd	r25, Y+8	; 0x08
    1a08:	ba 01       	movw	r22, r20
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	09 95       	icall
                break;
    1a0e:	00 00       	nop
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	0a 97       	sbiw	r24, 0x0a	; 10
    1a20:	0c f4       	brge	.+2      	; 0x1a24 <_ZN11SimpleTimer3runEv+0x314>
    1a22:	b5 cf       	rjmp	.-150    	; 0x198e <_ZN11SimpleTimer3runEv+0x27e>
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    1a24:	28 96       	adiw	r28, 0x08	; 8
    1a26:	e6 e0       	ldi	r30, 0x06	; 6
    1a28:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00001a2c <_ZN11SimpleTimer17findFirstFreeSlotEv>:


// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    1a2c:	a4 e0       	ldi	r26, 0x04	; 4
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ec e1       	ldi	r30, 0x1C	; 28
    1a32:	fd e0       	ldi	r31, 0x0D	; 13
    1a34:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    int i;

    // all slots are used
    if (numTimers >= MAX_TIMERS) {
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	84 55       	subi	r24, 0x54	; 84
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	0a 97       	sbiw	r24, 0x0a	; 10
    1a4c:	1c f0       	brlt	.+6      	; 0x1a54 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x28>
        return -1;
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	9f ef       	ldi	r25, 0xFF	; 255
    1a52:	1f c0       	rjmp	.+62     	; 0x1a92 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a54:	1a 82       	std	Y+2, r1	; 0x02
    1a56:	19 82       	std	Y+1, r1	; 0x01
    1a58:	16 c0       	rjmp	.+44     	; 0x1a86 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x5a>
        if (callbacks[i] == 0) {
    1a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	45 96       	adiw	r24, 0x15	; 21
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	89 2b       	or	r24, r25
    1a74:	19 f4       	brne	.+6      	; 0x1a7c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x50>
            return i;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	0b c0       	rjmp	.+22     	; 0x1a92 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x66>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (i = 0; i < MAX_TIMERS; i++) {
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	0a 97       	sbiw	r24, 0x0a	; 10
    1a8c:	34 f3       	brlt	.-52     	; 0x1a5a <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2e>
            return i;
        }
    }

    // no free slots found
    return -1;
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
}
    1a92:	24 96       	adiw	r28, 0x04	; 4
    1a94:	e2 e0       	ldi	r30, 0x02	; 2
    1a96:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001a9a <_ZN11SimpleTimer8setTimerElPFvvEi>:


int SimpleTimer::setTimer(long d, timer_callback f, int n) {
    1a9a:	ac e0       	ldi	r26, 0x0C	; 12
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	fd e0       	ldi	r31, 0x0D	; 13
    1aa2:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	4d 83       	std	Y+5, r20	; 0x05
    1aac:	5e 83       	std	Y+6, r21	; 0x06
    1aae:	6f 83       	std	Y+7, r22	; 0x07
    1ab0:	78 87       	std	Y+8, r23	; 0x08
    1ab2:	3a 87       	std	Y+10, r19	; 0x0a
    1ab4:	29 87       	std	Y+9, r18	; 0x09
    1ab6:	1c 87       	std	Y+12, r17	; 0x0c
    1ab8:	0b 87       	std	Y+11, r16	; 0x0b
    int freeTimer;

    freeTimer = findFirstFreeSlot();
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	b6 df       	rcall	.-148    	; 0x1a2c <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    if (freeTimer < 0) {
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	99 23       	and	r25, r25
    1aca:	1c f4       	brge	.+6      	; 0x1ad2 <_ZN11SimpleTimer8setTimerElPFvvEi+0x38>
        return -1;
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	9f ef       	ldi	r25, 0xFF	; 255
    1ad0:	6b c0       	rjmp	.+214    	; 0x1ba8 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    if (f == NULL) {
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	89 2b       	or	r24, r25
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <_ZN11SimpleTimer8setTimerElPFvvEi+0x46>
        return -1;
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	9f ef       	ldi	r25, 0xFF	; 255
    1ade:	64 c0       	rjmp	.+200    	; 0x1ba8 <_ZN11SimpleTimer8setTimerElPFvvEi+0x10e>
    }

    delays[freeTimer] = d;
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	9c 01       	movw	r18, r24
    1af6:	22 5c       	subi	r18, 0xC2	; 194
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	af 81       	ldd	r26, Y+7	; 0x07
    1b00:	b8 85       	ldd	r27, Y+8	; 0x08
    1b02:	f9 01       	movw	r30, r18
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
    callbacks[freeTimer] = f;
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	45 96       	adiw	r24, 0x15	; 21
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	29 85       	ldd	r18, Y+9	; 0x09
    1b20:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b22:	fc 01       	movw	r30, r24
    1b24:	31 83       	std	Z+1, r19	; 0x01
    1b26:	20 83       	st	Z, r18
    maxNumRuns[freeTimer] = n;
    1b28:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	c3 96       	adiw	r24, 0x33	; 51
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b3e:	fc 01       	movw	r30, r24
    1b40:	31 83       	std	Z+1, r19	; 0x01
    1b42:	20 83       	st	Z, r18
    enabled[freeTimer] = true;
    1b44:	2b 81       	ldd	r18, Y+3	; 0x03
    1b46:	3c 81       	ldd	r19, Y+4	; 0x04
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	82 0f       	add	r24, r18
    1b4e:	93 1f       	adc	r25, r19
    1b50:	82 57       	subi	r24, 0x72	; 114
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
    prev_millis[freeTimer] = elapsed();
    1b5a:	65 dd       	rcall	.-1334   	; 0x1626 <_ZL7elapsedv>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	4b 81       	ldd	r20, Y+3	; 0x03
    1b62:	5c 81       	ldd	r21, Y+4	; 0x04
    1b64:	29 81       	ldd	r18, Y+1	; 0x01
    1b66:	3a 81       	ldd	r19, Y+2	; 0x02
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	24 0f       	add	r18, r20
    1b72:	35 1f       	adc	r19, r21
    1b74:	2e 5f       	subi	r18, 0xFE	; 254
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	f9 01       	movw	r30, r18
    1b7a:	80 83       	st	Z, r24
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	a2 83       	std	Z+2, r26	; 0x02
    1b80:	b3 83       	std	Z+3, r27	; 0x03

    numTimers++;
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	84 55       	subi	r24, 0x54	; 84
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	9c 01       	movw	r18, r24
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	84 55       	subi	r24, 0x54	; 84
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	31 83       	std	Z+1, r19	; 0x01
    1ba2:	20 83       	st	Z, r18

    return freeTimer;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ba8:	2c 96       	adiw	r28, 0x0c	; 12
    1baa:	e4 e0       	ldi	r30, 0x04	; 4
    1bac:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00001bb0 <_ZN11SimpleTimer11setIntervalElPFvvE>:


int SimpleTimer::setInterval(long d, timer_callback f) {
    1bb0:	a8 e0       	ldi	r26, 0x08	; 8
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee ed       	ldi	r30, 0xDE	; 222
    1bb6:	fd e0       	ldi	r31, 0x0D	; 13
    1bb8:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	4b 83       	std	Y+3, r20	; 0x03
    1bc2:	5c 83       	std	Y+4, r21	; 0x04
    1bc4:	6d 83       	std	Y+5, r22	; 0x05
    1bc6:	7e 83       	std	Y+6, r23	; 0x06
    1bc8:	38 87       	std	Y+8, r19	; 0x08
    1bca:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_FOREVER);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	8d 91       	ld	r24, X+
    1bd4:	9c 91       	ld	r25, X
    1bd6:	06 96       	adiw	r24, 0x06	; 6
    1bd8:	dc 01       	movw	r26, r24
    1bda:	ed 91       	ld	r30, X+
    1bdc:	fc 91       	ld	r31, X
    1bde:	2f 81       	ldd	r18, Y+7	; 0x07
    1be0:	38 85       	ldd	r19, Y+8	; 0x08
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	ad 81       	ldd	r26, Y+5	; 0x05
    1be8:	be 81       	ldd	r27, Y+6	; 0x06
    1bea:	e9 80       	ldd	r14, Y+1	; 0x01
    1bec:	fa 80       	ldd	r15, Y+2	; 0x02
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	bd 01       	movw	r22, r26
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	09 95       	icall
}
    1bfa:	28 96       	adiw	r28, 0x08	; 8
    1bfc:	e6 e0       	ldi	r30, 0x06	; 6
    1bfe:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00001c02 <_ZN11SimpleTimer10setTimeoutElPFvvE>:


int SimpleTimer::setTimeout(long d, timer_callback f) {
    1c02:	a8 e0       	ldi	r26, 0x08	; 8
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e7 e0       	ldi	r30, 0x07	; 7
    1c08:	fe e0       	ldi	r31, 0x0E	; 14
    1c0a:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	4b 83       	std	Y+3, r20	; 0x03
    1c14:	5c 83       	std	Y+4, r21	; 0x04
    1c16:	6d 83       	std	Y+5, r22	; 0x05
    1c18:	7e 83       	std	Y+6, r23	; 0x06
    1c1a:	38 87       	std	Y+8, r19	; 0x08
    1c1c:	2f 83       	std	Y+7, r18	; 0x07
    return setTimer(d, f, RUN_ONCE);
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	dc 01       	movw	r26, r24
    1c24:	8d 91       	ld	r24, X+
    1c26:	9c 91       	ld	r25, X
    1c28:	06 96       	adiw	r24, 0x06	; 6
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	2f 81       	ldd	r18, Y+7	; 0x07
    1c32:	38 85       	ldd	r19, Y+8	; 0x08
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	ad 81       	ldd	r26, Y+5	; 0x05
    1c3a:	be 81       	ldd	r27, Y+6	; 0x06
    1c3c:	e9 80       	ldd	r14, Y+1	; 0x01
    1c3e:	fa 80       	ldd	r15, Y+2	; 0x02
    1c40:	01 e0       	ldi	r16, 0x01	; 1
    1c42:	10 e0       	ldi	r17, 0x00	; 0
    1c44:	ac 01       	movw	r20, r24
    1c46:	bd 01       	movw	r22, r26
    1c48:	c7 01       	movw	r24, r14
    1c4a:	09 95       	icall
}
    1c4c:	28 96       	adiw	r28, 0x08	; 8
    1c4e:	e6 e0       	ldi	r30, 0x06	; 6
    1c50:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00001c54 <_ZN11SimpleTimer11deleteTimerEi>:


void SimpleTimer::deleteTimer(int timerId) {
    1c54:	a4 e0       	ldi	r26, 0x04	; 4
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	fe e0       	ldi	r31, 0x0E	; 14
    1c5c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	7c 83       	std	Y+4, r23	; 0x04
    1c66:	6b 83       	std	Y+3, r22	; 0x03
    if (timerId >= MAX_TIMERS) {
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	0a 97       	sbiw	r24, 0x0a	; 10
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <_ZN11SimpleTimer11deleteTimerEi+0x1e>
        return;
    1c70:	69 c0       	rjmp	.+210    	; 0x1d44 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	84 55       	subi	r24, 0x54	; 84
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	89 2b       	or	r24, r25
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <_ZN11SimpleTimer11deleteTimerEi+0x32>
        return;
    1c84:	5f c0       	rjmp	.+190    	; 0x1d44 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    1c86:	29 81       	ldd	r18, Y+1	; 0x01
    1c88:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	45 96       	adiw	r24, 0x15	; 21
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	82 0f       	add	r24, r18
    1c96:	93 1f       	adc	r25, r19
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	89 2b       	or	r24, r25
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <_ZN11SimpleTimer11deleteTimerEi+0x50>
    1ca2:	50 c0       	rjmp	.+160    	; 0x1d44 <_ZN11SimpleTimer11deleteTimerEi+0xf0>
        callbacks[timerId] = 0;
    1ca4:	29 81       	ldd	r18, Y+1	; 0x01
    1ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	45 96       	adiw	r24, 0x15	; 21
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	11 82       	std	Z+1, r1	; 0x01
    1cba:	10 82       	st	Z, r1
        enabled[timerId] = false;
    1cbc:	29 81       	ldd	r18, Y+1	; 0x01
    1cbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	82 57       	subi	r24, 0x72	; 114
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	fc 01       	movw	r30, r24
    1cce:	10 82       	st	Z, r1
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    1cd0:	29 81       	ldd	r18, Y+1	; 0x01
    1cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	84 5b       	subi	r24, 0xB4	; 180
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	82 0f       	add	r24, r18
    1ce2:	93 1f       	adc	r25, r19
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	11 82       	std	Z+1, r1	; 0x01
    1ce8:	10 82       	st	Z, r1
        delays[timerId] = 0;
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	3a 81       	ldd	r19, Y+2	; 0x02
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	ce 96       	adiw	r24, 0x3e	; 62
    1d00:	fc 01       	movw	r30, r24
    1d02:	10 82       	st	Z, r1
    1d04:	11 82       	std	Z+1, r1	; 0x01
    1d06:	12 82       	std	Z+2, r1	; 0x02
    1d08:	13 82       	std	Z+3, r1	; 0x03
        numRuns[timerId] = 0;
    1d0a:	29 81       	ldd	r18, Y+1	; 0x01
    1d0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	cd 96       	adiw	r24, 0x3d	; 61
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	11 82       	std	Z+1, r1	; 0x01
    1d20:	10 82       	st	Z, r1

        // update number of timers
        numTimers--;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	84 55       	subi	r24, 0x54	; 84
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	9c 01       	movw	r18, r24
    1d32:	21 50       	subi	r18, 0x01	; 1
    1d34:	31 09       	sbc	r19, r1
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	84 55       	subi	r24, 0x54	; 84
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	fc 01       	movw	r30, r24
    1d40:	31 83       	std	Z+1, r19	; 0x01
    1d42:	20 83       	st	Z, r18
    }
}
    1d44:	24 96       	adiw	r28, 0x04	; 4
    1d46:	e2 e0       	ldi	r30, 0x02	; 2
    1d48:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001d4c <_ZN11SimpleTimer12restartTimerEi>:


// function contributed by code@rowansimms.com
void SimpleTimer::restartTimer(int numTimer) {
    1d4c:	a4 e0       	ldi	r26, 0x04	; 4
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	7c 83       	std	Y+4, r23	; 0x04
    1d5e:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	0a 97       	sbiw	r24, 0x0a	; 10
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <_ZN11SimpleTimer12restartTimerEi+0x1e>
        return;
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <_ZN11SimpleTimer12restartTimerEi+0x46>
    }

    prev_millis[numTimer] = elapsed();
    1d6a:	5d dc       	rcall	.-1862   	; 0x1626 <_ZL7elapsedv>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	49 81       	ldd	r20, Y+1	; 0x01
    1d72:	5a 81       	ldd	r21, Y+2	; 0x02
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	24 0f       	add	r18, r20
    1d82:	35 1f       	adc	r19, r21
    1d84:	2e 5f       	subi	r18, 0xFE	; 254
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	f9 01       	movw	r30, r18
    1d8a:	80 83       	st	Z, r24
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	a2 83       	std	Z+2, r26	; 0x02
    1d90:	b3 83       	std	Z+3, r27	; 0x03
}
    1d92:	24 96       	adiw	r28, 0x04	; 4
    1d94:	e2 e0       	ldi	r30, 0x02	; 2
    1d96:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001d9a <_ZN11SimpleTimer9isEnabledEi>:


boolean SimpleTimer::isEnabled(int numTimer) {
    1d9a:	a4 e0       	ldi	r26, 0x04	; 4
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1da0:	fe e0       	ldi	r31, 0x0E	; 14
    1da2:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	7c 83       	std	Y+4, r23	; 0x04
    1dac:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	0a 97       	sbiw	r24, 0x0a	; 10
    1db4:	14 f0       	brlt	.+4      	; 0x1dba <_ZN11SimpleTimer9isEnabledEi+0x20>
        return false;
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <_ZN11SimpleTimer9isEnabledEi+0x34>
    }

    return enabled[numTimer];
    1dba:	29 81       	ldd	r18, Y+1	; 0x01
    1dbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	82 57       	subi	r24, 0x72	; 114
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	fc 01       	movw	r30, r24
    1dcc:	80 81       	ld	r24, Z
}
    1dce:	24 96       	adiw	r28, 0x04	; 4
    1dd0:	e2 e0       	ldi	r30, 0x02	; 2
    1dd2:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001dd6 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    1dd6:	a4 e0       	ldi	r26, 0x04	; 4
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e1 ef       	ldi	r30, 0xF1	; 241
    1ddc:	fe e0       	ldi	r31, 0x0E	; 14
    1dde:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	7c 83       	std	Y+4, r23	; 0x04
    1de8:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	0a 97       	sbiw	r24, 0x0a	; 10
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <_ZN11SimpleTimer6enableEi+0x1e>
        return;
    1df2:	0b c0       	rjmp	.+22     	; 0x1e0a <_ZN11SimpleTimer6enableEi+0x34>
    }

    enabled[numTimer] = true;
    1df4:	29 81       	ldd	r18, Y+1	; 0x01
    1df6:	3a 81       	ldd	r19, Y+2	; 0x02
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	82 0f       	add	r24, r18
    1dfe:	93 1f       	adc	r25, r19
    1e00:	82 57       	subi	r24, 0x72	; 114
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 83       	st	Z, r18
}
    1e0a:	24 96       	adiw	r28, 0x04	; 4
    1e0c:	e2 e0       	ldi	r30, 0x02	; 2
    1e0e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001e12 <_ZN11SimpleTimer7disableEi>:


void SimpleTimer::disable(int numTimer) {
    1e12:	a4 e0       	ldi	r26, 0x04	; 4
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e0       	ldi	r30, 0x0F	; 15
    1e18:	ff e0       	ldi	r31, 0x0F	; 15
    1e1a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	7c 83       	std	Y+4, r23	; 0x04
    1e24:	6b 83       	std	Y+3, r22	; 0x03
    if (numTimer >= MAX_TIMERS) {
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	0a 97       	sbiw	r24, 0x0a	; 10
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <_ZN11SimpleTimer7disableEi+0x1e>
        return;
    1e2e:	0a c0       	rjmp	.+20     	; 0x1e44 <_ZN11SimpleTimer7disableEi+0x32>
    }

    enabled[numTimer] = false;
    1e30:	29 81       	ldd	r18, Y+1	; 0x01
    1e32:	3a 81       	ldd	r19, Y+2	; 0x02
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	82 0f       	add	r24, r18
    1e3a:	93 1f       	adc	r25, r19
    1e3c:	82 57       	subi	r24, 0x72	; 114
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	fc 01       	movw	r30, r24
    1e42:	10 82       	st	Z, r1
}
    1e44:	24 96       	adiw	r28, 0x04	; 4
    1e46:	e2 e0       	ldi	r30, 0x02	; 2
    1e48:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001e4c <_ZN7LCDBaseC1Ev>:

//LCDBase::LCDBase(): _lcd(8, 9, 4, 5, 6, 7) {
//Init();
//}

LCDBase::LCDBase(): LiquidCrystal(8, 9, 4, 5, 6, 7) {
    1e4c:	cf 92       	push	r12
    1e4e:	ef 92       	push	r14
    1e50:	0f 93       	push	r16
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <_ZN7LCDBaseC1Ev+0xc>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	0f 2e       	mov	r0, r31
    1e66:	f7 e0       	ldi	r31, 0x07	; 7
    1e68:	cf 2e       	mov	r12, r31
    1e6a:	f0 2d       	mov	r31, r0
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	f6 e0       	ldi	r31, 0x06	; 6
    1e70:	ef 2e       	mov	r14, r31
    1e72:	f0 2d       	mov	r31, r0
    1e74:	05 e0       	ldi	r16, 0x05	; 5
    1e76:	24 e0       	ldi	r18, 0x04	; 4
    1e78:	49 e0       	ldi	r20, 0x09	; 9
    1e7a:	68 e0       	ldi	r22, 0x08	; 8
    1e7c:	21 d8       	rcall	.-4030   	; 0xec0 <_ZN13LiquidCrystalC1Ehhhhhh>
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	9a 81       	ldd	r25, Y+2	; 0x02
    1e82:	2b ea       	ldi	r18, 0xAB	; 171
    1e84:	31 e0       	ldi	r19, 0x01	; 1
    1e86:	fc 01       	movw	r30, r24
    1e88:	31 83       	std	Z+1, r19	; 0x01
    1e8a:	20 83       	st	Z, r18
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	2a e0       	ldi	r18, 0x0A	; 10
    1e92:	eb e1       	ldi	r30, 0x1B	; 27
    1e94:	f1 e0       	ldi	r31, 0x01	; 1
    1e96:	dc 01       	movw	r26, r24
    1e98:	58 96       	adiw	r26, 0x18	; 24
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	0d 92       	st	X+, r0
    1e9e:	2a 95       	dec	r18
    1ea0:	e1 f7       	brne	.-8      	; 0x1e9a <_ZN7LCDBaseC1Ev+0x4e>
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea6:	25 e0       	ldi	r18, 0x05	; 5
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	fc 01       	movw	r30, r24
    1eac:	33 a3       	std	Z+35, r19	; 0x23
    1eae:	22 a3       	std	Z+34, r18	; 0x22
    Init();
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	08 d0       	rcall	.+16     	; 0x1ec6 <_ZN7LCDBase4InitEv>
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	0f 91       	pop	r16
    1ec0:	ef 90       	pop	r14
    1ec2:	cf 90       	pop	r12
    1ec4:	08 95       	ret

00001ec6 <_ZN7LCDBase4InitEv>:

void LCDBase::Init() {
    1ec6:	a2 e0       	ldi	r26, 0x02	; 2
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e9 e6       	ldi	r30, 0x69	; 105
    1ecc:	ff e0       	ldi	r31, 0x0F	; 15
    1ece:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    begin(16, 2);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	42 e0       	ldi	r20, 0x02	; 2
    1ede:	60 e1       	ldi	r22, 0x10	; 16
    1ee0:	bd d8       	rcall	.-3718   	; 0x105c <_ZN13LiquidCrystal5beginEhhh>
    clear();
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	b4 d9       	rcall	.-3224   	; 0x1250 <_ZN13LiquidCrystal5clearEv>
    setCursor(0, 0);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	c3 d9       	rcall	.-3194   	; 0x1278 <_ZN13LiquidCrystal9setCursorEhh>

}
    1ef2:	22 96       	adiw	r28, 0x02	; 2
    1ef4:	e2 e0       	ldi	r30, 0x02	; 2
    1ef6:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001efa <_ZN7LCDBase9ClearLineEs>:
void LCDBase::ClearLine(short lineNum) {
    1efa:	a4 e0       	ldi	r26, 0x04	; 4
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e8       	ldi	r30, 0x83	; 131
    1f00:	ff e0       	ldi	r31, 0x0F	; 15
    1f02:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	7c 83       	std	Y+4, r23	; 0x04
    1f0c:	6b 83       	std	Y+3, r22	; 0x03
    setCursor(0, lineNum);
    1f0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	42 2f       	mov	r20, r18
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	af d9       	rcall	.-3234   	; 0x1278 <_ZN13LiquidCrystal9setCursorEhh>
    print(F("                "));
    1f1a:	2f e2       	ldi	r18, 0x2F	; 47
    1f1c:	33 e0       	ldi	r19, 0x03	; 3
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	b9 01       	movw	r22, r18
    1f24:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
}
    1f28:	24 96       	adiw	r28, 0x04	; 4
    1f2a:	e2 e0       	ldi	r30, 0x02	; 2
    1f2c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001f30 <_ZN7LCDBase9PrintLineEs6String>:
void LCDBase::PrintLine(short lineNum, String text) {
    1f30:	a6 e0       	ldi	r26, 0x06	; 6
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ee e9       	ldi	r30, 0x9E	; 158
    1f36:	ff e0       	ldi	r31, 0x0F	; 15
    1f38:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	7c 83       	std	Y+4, r23	; 0x04
    1f42:	6b 83       	std	Y+3, r22	; 0x03
    1f44:	5e 83       	std	Y+6, r21	; 0x06
    1f46:	4d 83       	std	Y+5, r20	; 0x05
    ClearLine(lineNum);
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	b9 01       	movw	r22, r18
    1f52:	d3 df       	rcall	.-90     	; 0x1efa <_ZN7LCDBase9ClearLineEs>
    setCursor(0, lineNum);
    1f54:	2b 81       	ldd	r18, Y+3	; 0x03
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	42 2f       	mov	r20, r18
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	8c d9       	rcall	.-3304   	; 0x1278 <_ZN13LiquidCrystal9setCursorEhh>
    print(text);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	2d 81       	ldd	r18, Y+5	; 0x05
    1f66:	3e 81       	ldd	r19, Y+6	; 0x06
    1f68:	b9 01       	movw	r22, r18
    1f6a:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_ZN5Print5printERK6String>
}
    1f6e:	26 96       	adiw	r28, 0x06	; 6
    1f70:	e2 e0       	ldi	r30, 0x02	; 2
    1f72:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001f76 <_ZN7LCDBase14DetectKeyPressEv>:
//void LCDBase::Print(short lineNum, T&& text) {
//_lcd.setCursor(0, lineNum);
//_lcd.print(text);
//}

LcdKeyPress LCDBase::DetectKeyPress() {
    1f76:	a4 e0       	ldi	r26, 0x04	; 4
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1f7c:	ff e0       	ldi	r31, 0x0F	; 15
    1f7e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    int key = getKey();
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	69 d0       	rcall	.+210    	; 0x205e <_ZN7LCDBase6getKeyEv>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    if(key == 0 || key == 1 || key == 2 || key == 3 || key == 4) {
        //_optionChanged = true;
    }


    switch(key) {
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	82 30       	cpi	r24, 0x02	; 2
    1f96:	91 05       	cpc	r25, r1
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <_ZN7LCDBase14DetectKeyPressEv+0x48>
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <_ZN7LCDBase14DetectKeyPressEv+0x34>
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	49 f0       	breq	.+18     	; 0x1fb6 <_ZN7LCDBase14DetectKeyPressEv+0x40>
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	49 f0       	breq	.+18     	; 0x1fba <_ZN7LCDBase14DetectKeyPressEv+0x44>
    1fa8:	10 c0       	rjmp	.+32     	; 0x1fca <_ZN7LCDBase14DetectKeyPressEv+0x54>
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	49 f0       	breq	.+18     	; 0x1fc2 <_ZN7LCDBase14DetectKeyPressEv+0x4c>
    1fb0:	04 97       	sbiw	r24, 0x04	; 4
    1fb2:	49 f0       	breq	.+18     	; 0x1fc6 <_ZN7LCDBase14DetectKeyPressEv+0x50>
    1fb4:	0a c0       	rjmp	.+20     	; 0x1fca <_ZN7LCDBase14DetectKeyPressEv+0x54>
        case 0: //right
            return LcdKeyPress::Right;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 1: //up
            return LcdKeyPress::Up;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	07 c0       	rjmp	.+14     	; 0x1fcc <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 2: //down
            return LcdKeyPress::Down;
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	05 c0       	rjmp	.+10     	; 0x1fcc <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 3: //left
            return LcdKeyPress::Left;
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	03 c0       	rjmp	.+6      	; 0x1fcc <_ZN7LCDBase14DetectKeyPressEv+0x56>
        case 4: //select
            return LcdKeyPress::Select;
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <_ZN7LCDBase14DetectKeyPressEv+0x56>
        default:
            return LcdKeyPress::None;
    1fca:	85 e0       	ldi	r24, 0x05	; 5

    }
}
    1fcc:	24 96       	adiw	r28, 0x04	; 4
    1fce:	e2 e0       	ldi	r30, 0x02	; 2
    1fd0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00001fd4 <_ZN7LCDBase13getKeyFromValEj>:

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    1fd4:	a6 e0       	ldi	r26, 0x06	; 6
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1fda:	ff e0       	ldi	r31, 0x0F	; 15
    1fdc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
    1fe4:	7e 83       	std	Y+6, r23	; 0x06
    1fe6:	6d 83       	std	Y+5, r22	; 0x05
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    1fe8:	1a 82       	std	Y+2, r1	; 0x02
    1fea:	19 82       	std	Y+1, r1	; 0x01
    1fec:	1a c0       	rjmp	.+52     	; 0x2022 <_ZN7LCDBase13getKeyFromValEj+0x4e>
        if(input < _keyValues[k]) {
    1fee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	0c 96       	adiw	r24, 0x0c	; 12
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	fc 01       	movw	r30, r24
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	9c 01       	movw	r18, r24
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	82 17       	cp	r24, r18
    200e:	93 07       	cpc	r25, r19
    2010:	18 f4       	brcc	.+6      	; 0x2018 <_ZN7LCDBase13getKeyFromValEj+0x44>
            return k;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	1f c0       	rjmp	.+62     	; 0x2056 <_ZN7LCDBase13getKeyFromValEj+0x82>
}

//--key press
int LCDBase::getKeyFromVal(unsigned int input) {
    int k;
    for(k = 0; k < _numOfKeys; k++) {
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	fc 01       	movw	r30, r24
    2028:	22 a1       	ldd	r18, Z+34	; 0x22
    202a:	33 a1       	ldd	r19, Z+35	; 0x23
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	82 17       	cp	r24, r18
    2032:	93 07       	cpc	r25, r19
    2034:	e4 f2       	brlt	.-72     	; 0x1fee <_ZN7LCDBase13getKeyFromValEj+0x1a>
        if(input < _keyValues[k]) {
            return k;
        }
    }
    if(k >= _numOfKeys) {
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	fc 01       	movw	r30, r24
    203c:	22 a1       	ldd	r18, Z+34	; 0x22
    203e:	33 a1       	ldd	r19, Z+35	; 0x23
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	82 17       	cp	r24, r18
    2046:	93 07       	cpc	r25, r19
    2048:	24 f0       	brlt	.+8      	; 0x2052 <_ZN7LCDBase13getKeyFromValEj+0x7e>
        k = -1;
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	9f ef       	ldi	r25, 0xFF	; 255
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
    }
    return k;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2056:	26 96       	adiw	r28, 0x06	; 6
    2058:	e2 e0       	ldi	r30, 0x02	; 2
    205a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000205e <_ZN7LCDBase6getKeyEv>:

int LCDBase::getKey() {
    205e:	a6 e0       	ldi	r26, 0x06	; 6
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e3       	ldi	r30, 0x35	; 53
    2064:	f0 e1       	ldi	r31, 0x10	; 16
    2066:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    int keyVal = analogRead(0);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <analogRead>
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    //SerialExt::Debug(F("keyVal"), keyVal);
    int key = getKeyFromVal(keyVal);
    2078:	29 81       	ldd	r18, Y+1	; 0x01
    207a:	3a 81       	ldd	r19, Y+2	; 0x02
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	b9 01       	movw	r22, r18
    2082:	a8 df       	rcall	.-176    	; 0x1fd4 <_ZN7LCDBase13getKeyFromValEj>
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
    //SerialExt::Debug(F("key"), key);
    //_lastKey = key;
    return key;
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    208c:	26 96       	adiw	r28, 0x06	; 6
    208e:	e2 e0       	ldi	r30, 0x02	; 2
    2090:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002094 <_ZnwjPv>:
		typename Operation::second_argument_type value;
	public:
		binder2nd(const Operation& x, const typename Operation::second_argument_type& y) : op(x), value(y) {  }
		typename Operation::result_type operator()(const typename Operation::first_argument_type& x) const{
			return op(x,value);
		}
    2094:	a4 e0       	ldi	r26, 0x04	; 4
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e0 e5       	ldi	r30, 0x50	; 80
    209a:	f0 e1       	ldi	r31, 0x10	; 16
    209c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	7c 83       	std	Y+4, r23	; 0x04
    20a6:	6b 83       	std	Y+3, r22	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	24 96       	adiw	r28, 0x04	; 4
    20ae:	e2 e0       	ldi	r30, 0x02	; 2
    20b0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000020b4 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>:
    20b4:	aa e0       	ldi	r26, 0x0A	; 10
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e0 e6       	ldi	r30, 0x60	; 96
    20ba:	f0 e1       	ldi	r31, 0x10	; 16
    20bc:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    20c0:	9a 87       	std	Y+10, r25	; 0x0a
    20c2:	89 87       	std	Y+9, r24	; 0x09
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	a4 d1       	rcall	.+840    	; 0x2412 <_ZNSt6vectorIdSaIdEE3endEv>
    20ca:	8c 01       	movw	r16, r24
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	8f d1       	rcall	.+798    	; 0x23f0 <_ZNSt6vectorIdSaIdEE5beginEv>
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	b8 01       	movw	r22, r16
    20da:	b7 d1       	rcall	.+878    	; 0x244a <_ZSt10accumulateIPddET0_T_S2_S1_>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	ab 83       	std	Y+3, r26	; 0x03
    20e6:	bc 83       	std	Y+4, r27	; 0x04
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	e8 d1       	rcall	.+976    	; 0x24be <_ZNKSt6vectorIdSaIdEE4sizeEv>
    20ee:	cc 01       	movw	r24, r24
    20f0:	a0 e0       	ldi	r26, 0x00	; 0
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__floatunsisf>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9c 01       	movw	r18, r24
    2102:	ad 01       	movw	r20, r26
    2104:	69 81       	ldd	r22, Y+1	; 0x01
    2106:	7a 81       	ldd	r23, Y+2	; 0x02
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	af 83       	std	Y+7, r26	; 0x07
    211a:	b8 87       	std	Y+8, r27	; 0x08
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	af 81       	ldd	r26, Y+7	; 0x07
    2122:	b8 85       	ldd	r27, Y+8	; 0x08
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	2a 96       	adiw	r28, 0x0a	; 10
    212a:	e4 e0       	ldi	r30, 0x04	; 4
    212c:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00002130 <_ZN7MathExt16CalculateAverageEPii>:
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	66 97       	sbiw	r28, 0x16	; 22
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f
    2150:	7a 8b       	std	Y+18, r23	; 0x12
    2152:	69 8b       	std	Y+17, r22	; 0x11
    2154:	1f 82       	std	Y+7, r1	; 0x07
    2156:	18 86       	std	Y+8, r1	; 0x08
    2158:	19 86       	std	Y+9, r1	; 0x09
    215a:	1a 86       	std	Y+10, r1	; 0x0a
    215c:	89 89       	ldd	r24, Y+17	; 0x11
    215e:	9a 89       	ldd	r25, Y+18	; 0x12
    2160:	18 16       	cp	r1, r24
    2162:	19 06       	cpc	r1, r25
    2164:	5c f0       	brlt	.+22     	; 0x217c <_ZN7MathExt16CalculateAverageEPii+0x4c>
    2166:	80 e4       	ldi	r24, 0x40	; 64
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	bc 01       	movw	r22, r24
    216c:	86 e5       	ldi	r24, 0x56	; 86
    216e:	95 e0       	ldi	r25, 0x05	; 5
    2170:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	dc 01       	movw	r26, r24
    217a:	2b c1       	rjmp	.+598    	; 0x23d2 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	9a 89       	ldd	r25, Y+18	; 0x12
    2180:	05 97       	sbiw	r24, 0x05	; 5
    2182:	0c f0       	brlt	.+2      	; 0x2186 <_ZN7MathExt16CalculateAverageEPii+0x56>
    2184:	49 c0       	rjmp	.+146    	; 0x2218 <_ZN7MathExt16CalculateAverageEPii+0xe8>
    2186:	1a 82       	std	Y+2, r1	; 0x02
    2188:	19 82       	std	Y+1, r1	; 0x01
    218a:	20 c0       	rjmp	.+64     	; 0x21cc <_ZN7MathExt16CalculateAverageEPii+0x9c>
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	2f 85       	ldd	r18, Y+15	; 0x0f
    2196:	38 89       	ldd	r19, Y+16	; 0x10
    2198:	82 0f       	add	r24, r18
    219a:	93 1f       	adc	r25, r19
    219c:	fc 01       	movw	r30, r24
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	09 2e       	mov	r0, r25
    21a4:	00 0c       	add	r0, r0
    21a6:	aa 0b       	sbc	r26, r26
    21a8:	bb 0b       	sbc	r27, r27
    21aa:	2f 81       	ldd	r18, Y+7	; 0x07
    21ac:	38 85       	ldd	r19, Y+8	; 0x08
    21ae:	49 85       	ldd	r20, Y+9	; 0x09
    21b0:	5a 85       	ldd	r21, Y+10	; 0x0a
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	a4 1f       	adc	r26, r20
    21b8:	b5 1f       	adc	r27, r21
    21ba:	8f 83       	std	Y+7, r24	; 0x07
    21bc:	98 87       	std	Y+8, r25	; 0x08
    21be:	a9 87       	std	Y+9, r26	; 0x09
    21c0:	ba 87       	std	Y+10, r27	; 0x0a
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	29 81       	ldd	r18, Y+1	; 0x01
    21ce:	3a 81       	ldd	r19, Y+2	; 0x02
    21d0:	89 89       	ldd	r24, Y+17	; 0x11
    21d2:	9a 89       	ldd	r25, Y+18	; 0x12
    21d4:	28 17       	cp	r18, r24
    21d6:	39 07       	cpc	r19, r25
    21d8:	cc f2       	brlt	.-78     	; 0x218c <_ZN7MathExt16CalculateAverageEPii+0x5c>
    21da:	89 89       	ldd	r24, Y+17	; 0x11
    21dc:	9a 89       	ldd	r25, Y+18	; 0x12
    21de:	9c 01       	movw	r18, r24
    21e0:	99 0f       	add	r25, r25
    21e2:	44 0b       	sbc	r20, r20
    21e4:	55 0b       	sbc	r21, r21
    21e6:	8f 81       	ldd	r24, Y+7	; 0x07
    21e8:	98 85       	ldd	r25, Y+8	; 0x08
    21ea:	a9 85       	ldd	r26, Y+9	; 0x09
    21ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 b1 33 	call	0x6762	; 0x6762 <__divmodsi4>
    21f6:	da 01       	movw	r26, r20
    21f8:	c9 01       	movw	r24, r18
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
    220e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2210:	9c 85       	ldd	r25, Y+12	; 0x0c
    2212:	ad 85       	ldd	r26, Y+13	; 0x0d
    2214:	be 85       	ldd	r27, Y+14	; 0x0e
    2216:	dd c0       	rjmp	.+442    	; 0x23d2 <_ZN7MathExt16CalculateAverageEPii+0x2a2>
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	98 89       	ldd	r25, Y+16	; 0x10
    221c:	fc 01       	movw	r30, r24
    221e:	20 81       	ld	r18, Z
    2220:	31 81       	ldd	r19, Z+1	; 0x01
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	02 96       	adiw	r24, 0x02	; 2
    2228:	fc 01       	movw	r30, r24
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	28 17       	cp	r18, r24
    2230:	39 07       	cpc	r19, r25
    2232:	7c f4       	brge	.+30     	; 0x2252 <_ZN7MathExt16CalculateAverageEPii+0x122>
    2234:	8f 85       	ldd	r24, Y+15	; 0x0f
    2236:	98 89       	ldd	r25, Y+16	; 0x10
    2238:	fc 01       	movw	r30, r24
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	8f 85       	ldd	r24, Y+15	; 0x0f
    2244:	98 89       	ldd	r25, Y+16	; 0x10
    2246:	fc 01       	movw	r30, r24
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
    2250:	0e c0       	rjmp	.+28     	; 0x226e <_ZN7MathExt16CalculateAverageEPii+0x13e>
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	98 89       	ldd	r25, Y+16	; 0x10
    2256:	fc 01       	movw	r30, r24
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	98 89       	ldd	r25, Y+16	; 0x10
    2264:	fc 01       	movw	r30, r24
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	80 c0       	rjmp	.+256    	; 0x2378 <_ZN7MathExt16CalculateAverageEPii+0x248>
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	2f 85       	ldd	r18, Y+15	; 0x0f
    2282:	38 89       	ldd	r19, Y+16	; 0x10
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	fc 01       	movw	r30, r24
    228a:	20 81       	ld	r18, Z
    228c:	31 81       	ldd	r19, Z+1	; 0x01
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	28 17       	cp	r18, r24
    2294:	39 07       	cpc	r19, r25
    2296:	04 f5       	brge	.+64     	; 0x22d8 <_ZN7MathExt16CalculateAverageEPii+0x1a8>
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	09 2e       	mov	r0, r25
    229e:	00 0c       	add	r0, r0
    22a0:	aa 0b       	sbc	r26, r26
    22a2:	bb 0b       	sbc	r27, r27
    22a4:	2f 81       	ldd	r18, Y+7	; 0x07
    22a6:	38 85       	ldd	r19, Y+8	; 0x08
    22a8:	49 85       	ldd	r20, Y+9	; 0x09
    22aa:	5a 85       	ldd	r21, Y+10	; 0x0a
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	a4 1f       	adc	r26, r20
    22b2:	b5 1f       	adc	r27, r21
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    22c6:	38 89       	ldd	r19, Y+16	; 0x10
    22c8:	82 0f       	add	r24, r18
    22ca:	93 1f       	adc	r25, r19
    22cc:	fc 01       	movw	r30, r24
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	4b c0       	rjmp	.+150    	; 0x236e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    22e2:	38 89       	ldd	r19, Y+16	; 0x10
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	fc 01       	movw	r30, r24
    22ea:	20 81       	ld	r18, Z
    22ec:	31 81       	ldd	r19, Z+1	; 0x01
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	82 17       	cp	r24, r18
    22f4:	93 07       	cpc	r25, r19
    22f6:	04 f5       	brge	.+64     	; 0x2338 <_ZN7MathExt16CalculateAverageEPii+0x208>
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	09 2e       	mov	r0, r25
    22fe:	00 0c       	add	r0, r0
    2300:	aa 0b       	sbc	r26, r26
    2302:	bb 0b       	sbc	r27, r27
    2304:	2f 81       	ldd	r18, Y+7	; 0x07
    2306:	38 85       	ldd	r19, Y+8	; 0x08
    2308:	49 85       	ldd	r20, Y+9	; 0x09
    230a:	5a 85       	ldd	r21, Y+10	; 0x0a
    230c:	82 0f       	add	r24, r18
    230e:	93 1f       	adc	r25, r19
    2310:	a4 1f       	adc	r26, r20
    2312:	b5 1f       	adc	r27, r21
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	2f 85       	ldd	r18, Y+15	; 0x0f
    2326:	38 89       	ldd	r19, Y+16	; 0x10
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	fc 01       	movw	r30, r24
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
    2336:	1b c0       	rjmp	.+54     	; 0x236e <_ZN7MathExt16CalculateAverageEPii+0x23e>
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	2f 85       	ldd	r18, Y+15	; 0x0f
    2342:	38 89       	ldd	r19, Y+16	; 0x10
    2344:	82 0f       	add	r24, r18
    2346:	93 1f       	adc	r25, r19
    2348:	fc 01       	movw	r30, r24
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	09 2e       	mov	r0, r25
    2350:	00 0c       	add	r0, r0
    2352:	aa 0b       	sbc	r26, r26
    2354:	bb 0b       	sbc	r27, r27
    2356:	2f 81       	ldd	r18, Y+7	; 0x07
    2358:	38 85       	ldd	r19, Y+8	; 0x08
    235a:	49 85       	ldd	r20, Y+9	; 0x09
    235c:	5a 85       	ldd	r21, Y+10	; 0x0a
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	a4 1f       	adc	r26, r20
    2364:	b5 1f       	adc	r27, r21
    2366:	8f 83       	std	Y+7, r24	; 0x07
    2368:	98 87       	std	Y+8, r25	; 0x08
    236a:	a9 87       	std	Y+9, r26	; 0x09
    236c:	ba 87       	std	Y+10, r27	; 0x0a
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	01 96       	adiw	r24, 0x01	; 1
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	29 81       	ldd	r18, Y+1	; 0x01
    237a:	3a 81       	ldd	r19, Y+2	; 0x02
    237c:	89 89       	ldd	r24, Y+17	; 0x11
    237e:	9a 89       	ldd	r25, Y+18	; 0x12
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	0c f4       	brge	.+2      	; 0x2388 <_ZN7MathExt16CalculateAverageEPii+0x258>
    2386:	78 cf       	rjmp	.-272    	; 0x2278 <_ZN7MathExt16CalculateAverageEPii+0x148>
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    2394:	6b 01       	movw	r12, r22
    2396:	7c 01       	movw	r14, r24
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	9a 89       	ldd	r25, Y+18	; 0x12
    239c:	02 97       	sbiw	r24, 0x02	; 2
    239e:	09 2e       	mov	r0, r25
    23a0:	00 0c       	add	r0, r0
    23a2:	aa 0b       	sbc	r26, r26
    23a4:	bb 0b       	sbc	r27, r27
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 01       	movw	r18, r24
    23b4:	ad 01       	movw	r20, r26
    23b6:	c7 01       	movw	r24, r14
    23b8:	b6 01       	movw	r22, r12
    23ba:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8b 87       	std	Y+11, r24	; 0x0b
    23c4:	9c 87       	std	Y+12, r25	; 0x0c
    23c6:	ad 87       	std	Y+13, r26	; 0x0d
    23c8:	be 87       	std	Y+14, r27	; 0x0e
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	ad 85       	ldd	r26, Y+13	; 0x0d
    23d0:	be 85       	ldd	r27, Y+14	; 0x0e
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	66 96       	adiw	r28, 0x16	; 22
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	df 90       	pop	r13
    23ec:	cf 90       	pop	r12
    23ee:	08 95       	ret

000023f0 <_ZNSt6vectorIdSaIdEE5beginEv>:
    23f0:	a2 e0       	ldi	r26, 0x02	; 2
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ee ef       	ldi	r30, 0xFE	; 254
    23f6:	f1 e1       	ldi	r31, 0x11	; 17
    23f8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	fc 01       	movw	r30, r24
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	22 96       	adiw	r28, 0x02	; 2
    240c:	e2 e0       	ldi	r30, 0x02	; 2
    240e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002412 <_ZNSt6vectorIdSaIdEE3endEv>:
    2412:	a2 e0       	ldi	r26, 0x02	; 2
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	fc 01       	movw	r30, r24
    2428:	20 81       	ld	r18, Z
    242a:	31 81       	ldd	r19, Z+1	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	fc 01       	movw	r30, r24
    2432:	84 81       	ldd	r24, Z+4	; 0x04
    2434:	95 81       	ldd	r25, Z+5	; 0x05
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	82 0f       	add	r24, r18
    2440:	93 1f       	adc	r25, r19
    2442:	22 96       	adiw	r28, 0x02	; 2
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000244a <_ZSt10accumulateIPddET0_T_S2_S1_>:
    244a:	a8 e0       	ldi	r26, 0x08	; 8
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f2 e1       	ldi	r31, 0x12	; 18
    2452:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	7c 83       	std	Y+4, r23	; 0x04
    245c:	6b 83       	std	Y+3, r22	; 0x03
    245e:	2d 83       	std	Y+5, r18	; 0x05
    2460:	3e 83       	std	Y+6, r19	; 0x06
    2462:	4f 83       	std	Y+7, r20	; 0x07
    2464:	58 87       	std	Y+8, r21	; 0x08
    2466:	1a c0       	rjmp	.+52     	; 0x249c <_ZSt10accumulateIPddET0_T_S2_S1_+0x52>
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	9a 81       	ldd	r25, Y+2	; 0x02
    246c:	fc 01       	movw	r30, r24
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	a2 81       	ldd	r26, Z+2	; 0x02
    2474:	b3 81       	ldd	r27, Z+3	; 0x03
    2476:	9c 01       	movw	r18, r24
    2478:	ad 01       	movw	r20, r26
    247a:	6d 81       	ldd	r22, Y+5	; 0x05
    247c:	7e 81       	ldd	r23, Y+6	; 0x06
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	af 83       	std	Y+7, r26	; 0x07
    2490:	b8 87       	std	Y+8, r27	; 0x08
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	04 96       	adiw	r24, 0x04	; 4
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	29 81       	ldd	r18, Y+1	; 0x01
    249e:	3a 81       	ldd	r19, Y+2	; 0x02
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	f9 f6       	brne	.-66     	; 0x2468 <_ZSt10accumulateIPddET0_T_S2_S1_+0x1e>
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	af 81       	ldd	r26, Y+7	; 0x07
    24b0:	b8 85       	ldd	r27, Y+8	; 0x08
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	28 96       	adiw	r28, 0x08	; 8
    24b8:	e2 e0       	ldi	r30, 0x02	; 2
    24ba:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000024be <_ZNKSt6vectorIdSaIdEE4sizeEv>:
    24be:	a2 e0       	ldi	r26, 0x02	; 2
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e5 e6       	ldi	r30, 0x65	; 101
    24c4:	f2 e1       	ldi	r31, 0x12	; 18
    24c6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	fc 01       	movw	r30, r24
    24d4:	84 81       	ldd	r24, Z+4	; 0x04
    24d6:	95 81       	ldd	r25, Z+5	; 0x05
    24d8:	22 96       	adiw	r28, 0x02	; 2
    24da:	e2 e0       	ldi	r30, 0x02	; 2
    24dc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000024e0 <_ZNSaIdEC1Ev>:
    24e0:	a2 e0       	ldi	r26, 0x02	; 2
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e6 e7       	ldi	r30, 0x76	; 118
    24e6:	f2 e1       	ldi	r31, 0x12	; 18
    24e8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	22 96       	adiw	r28, 0x02	; 2
    24f2:	e2 e0       	ldi	r30, 0x02	; 2
    24f4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000024f8 <_ZNSaIdED1Ev>:
    24f8:	a2 e0       	ldi	r26, 0x02	; 2
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e2 e8       	ldi	r30, 0x82	; 130
    24fe:	f2 e1       	ldi	r31, 0x12	; 18
    2500:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	22 96       	adiw	r28, 0x02	; 2
    250a:	e2 e0       	ldi	r30, 0x02	; 2
    250c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002510 <_ZNSt6vectorIdSaIdEED1Ev>:
    2510:	a4 e0       	ldi	r26, 0x04	; 4
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e8       	ldi	r30, 0x8E	; 142
    2516:	f2 e1       	ldi	r31, 0x12	; 18
    2518:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	1a 82       	std	Y+2, r1	; 0x02
    2522:	19 82       	std	Y+1, r1	; 0x01
    2524:	17 c0       	rjmp	.+46     	; 0x2554 <_ZNSt6vectorIdSaIdEED1Ev+0x44>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	fc 01       	movw	r30, r24
    252c:	20 81       	ld	r18, Z
    252e:	31 81       	ldd	r19, Z+1	; 0x01
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	28 0f       	add	r18, r24
    253e:	39 1f       	adc	r19, r25
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	06 96       	adiw	r24, 0x06	; 6
    2546:	b9 01       	movw	r22, r18
    2548:	a2 d0       	rcall	.+324    	; 0x268e <_ZNSaIdE7destroyEPd>
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	fc 01       	movw	r30, r24
    255a:	24 81       	ldd	r18, Z+4	; 0x04
    255c:	35 81       	ldd	r19, Z+5	; 0x05
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	82 17       	cp	r24, r18
    2564:	93 07       	cpc	r25, r19
    2566:	f8 f2       	brcs	.-66     	; 0x2526 <_ZNSt6vectorIdSaIdEED1Ev+0x16>
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	fc 01       	movw	r30, r24
    256e:	42 81       	ldd	r20, Z+2	; 0x02
    2570:	53 81       	ldd	r21, Z+3	; 0x03
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	fc 01       	movw	r30, r24
    2578:	20 81       	ld	r18, Z
    257a:	31 81       	ldd	r19, Z+1	; 0x01
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	06 96       	adiw	r24, 0x06	; 6
    2582:	b9 01       	movw	r22, r18
    2584:	92 d0       	rcall	.+292    	; 0x26aa <_ZNSaIdE10deallocateEPdj>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	06 96       	adiw	r24, 0x06	; 6
    258c:	b5 df       	rcall	.-150    	; 0x24f8 <_ZNSaIdED1Ev>
    258e:	24 96       	adiw	r28, 0x04	; 4
    2590:	e2 e0       	ldi	r30, 0x02	; 2
    2592:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002596 <_ZNSaIdE8allocateEjPKv>:
    2596:	a6 e0       	ldi	r26, 0x06	; 6
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e1 ed       	ldi	r30, 0xD1	; 209
    259c:	f2 e1       	ldi	r31, 0x12	; 18
    259e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	7c 83       	std	Y+4, r23	; 0x04
    25a8:	6b 83       	std	Y+3, r22	; 0x03
    25aa:	5e 83       	std	Y+6, r21	; 0x06
    25ac:	4d 83       	std	Y+5, r20	; 0x05
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_Znwj>
    25be:	26 96       	adiw	r28, 0x06	; 6
    25c0:	e2 e0       	ldi	r30, 0x02	; 2
    25c2:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000025c6 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
    25c6:	a8 e0       	ldi	r26, 0x08	; 8
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e9 ee       	ldi	r30, 0xE9	; 233
    25cc:	f2 e1       	ldi	r31, 0x12	; 18
    25ce:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	7e 83       	std	Y+6, r23	; 0x06
    25d8:	6d 83       	std	Y+5, r22	; 0x05
    25da:	58 87       	std	Y+8, r21	; 0x08
    25dc:	4f 83       	std	Y+7, r20	; 0x07
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	fc 01       	movw	r30, r24
    25e4:	24 81       	ldd	r18, Z+4	; 0x04
    25e6:	35 81       	ldd	r19, Z+5	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x2e>
    25f2:	43 c0       	rjmp	.+134    	; 0x267a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xb4>
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	fc 01       	movw	r30, r24
    25fa:	22 81       	ldd	r18, Z+2	; 0x02
    25fc:	33 81       	ldd	r19, Z+3	; 0x03
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	28 17       	cp	r18, r24
    2604:	39 07       	cpc	r19, r25
    2606:	48 f4       	brcc	.+18     	; 0x261a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x54>
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	9c 01       	movw	r18, r24
    260e:	28 5f       	subi	r18, 0xF8	; 248
    2610:	3f 4f       	sbci	r19, 0xFF	; 255
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	b9 01       	movw	r22, r18
    2618:	5c d0       	rcall	.+184    	; 0x26d2 <_ZNSt6vectorIdSaIdEE7reserveEj>
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	fc 01       	movw	r30, r24
    2620:	84 81       	ldd	r24, Z+4	; 0x04
    2622:	95 81       	ldd	r25, Z+5	; 0x05
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	19 c0       	rjmp	.+50     	; 0x265c <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x96>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	fc 01       	movw	r30, r24
    2630:	20 81       	ld	r18, Z
    2632:	31 81       	ldd	r19, Z+1	; 0x01
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	28 0f       	add	r18, r24
    2642:	39 1f       	adc	r19, r25
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	06 96       	adiw	r24, 0x06	; 6
    264a:	4f 81       	ldd	r20, Y+7	; 0x07
    264c:	58 85       	ldd	r21, Y+8	; 0x08
    264e:	b9 01       	movw	r22, r18
    2650:	c7 d0       	rcall	.+398    	; 0x27e0 <_ZNSaIdE9constructEPdRKd>
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	29 81       	ldd	r18, Y+1	; 0x01
    265e:	3a 81       	ldd	r19, Y+2	; 0x02
    2660:	8d 81       	ldd	r24, Y+5	; 0x05
    2662:	9e 81       	ldd	r25, Y+6	; 0x06
    2664:	28 17       	cp	r18, r24
    2666:	39 07       	cpc	r19, r25
    2668:	00 f3       	brcs	.-64     	; 0x262a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x64>
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	2d 81       	ldd	r18, Y+5	; 0x05
    2670:	3e 81       	ldd	r19, Y+6	; 0x06
    2672:	fc 01       	movw	r30, r24
    2674:	35 83       	std	Z+5, r19	; 0x05
    2676:	24 83       	std	Z+4, r18	; 0x04
    2678:	06 c0       	rjmp	.+12     	; 0x2686 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0xc0>
    267a:	2d 81       	ldd	r18, Y+5	; 0x05
    267c:	3e 81       	ldd	r19, Y+6	; 0x06
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	b9 01       	movw	r22, r18
    2684:	d3 d0       	rcall	.+422    	; 0x282c <_ZNSt6vectorIdSaIdEE8downsizeEj>
    2686:	28 96       	adiw	r28, 0x08	; 8
    2688:	e2 e0       	ldi	r30, 0x02	; 2
    268a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000268e <_ZNSaIdE7destroyEPd>:
    268e:	a4 e0       	ldi	r26, 0x04	; 4
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e4       	ldi	r30, 0x4D	; 77
    2694:	f3 e1       	ldi	r31, 0x13	; 19
    2696:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	7c 83       	std	Y+4, r23	; 0x04
    26a0:	6b 83       	std	Y+3, r22	; 0x03
    26a2:	24 96       	adiw	r28, 0x04	; 4
    26a4:	e2 e0       	ldi	r30, 0x02	; 2
    26a6:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000026aa <_ZNSaIdE10deallocateEPdj>:
    26aa:	a6 e0       	ldi	r26, 0x06	; 6
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	eb e5       	ldi	r30, 0x5B	; 91
    26b0:	f3 e1       	ldi	r31, 0x13	; 19
    26b2:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	7c 83       	std	Y+4, r23	; 0x04
    26bc:	6b 83       	std	Y+3, r22	; 0x03
    26be:	5e 83       	std	Y+6, r21	; 0x06
    26c0:	4d 83       	std	Y+5, r20	; 0x05
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <_ZdlPv>
    26ca:	26 96       	adiw	r28, 0x06	; 6
    26cc:	e2 e0       	ldi	r30, 0x02	; 2
    26ce:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000026d2 <_ZNSt6vectorIdSaIdEE7reserveEj>:
		}
		a.deallocate(data, data_size);
	}


	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::reserve(size_type n){
    26d2:	aa e0       	ldi	r26, 0x0A	; 10
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	ef e6       	ldi	r30, 0x6F	; 111
    26d8:	f3 e1       	ldi	r31, 0x13	; 19
    26da:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    26de:	98 87       	std	Y+8, r25	; 0x08
    26e0:	8f 83       	std	Y+7, r24	; 0x07
    26e2:	7a 87       	std	Y+10, r23	; 0x0a
    26e4:	69 87       	std	Y+9, r22	; 0x09
		if(n > data_size){              //We never shrink...
    26e6:	8f 81       	ldd	r24, Y+7	; 0x07
    26e8:	98 85       	ldd	r25, Y+8	; 0x08
    26ea:	fc 01       	movw	r30, r24
    26ec:	22 81       	ldd	r18, Z+2	; 0x02
    26ee:	33 81       	ldd	r19, Z+3	; 0x03
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	28 17       	cp	r18, r24
    26f6:	39 07       	cpc	r19, r25
    26f8:	08 f0       	brcs	.+2      	; 0x26fc <_ZNSt6vectorIdSaIdEE7reserveEj+0x2a>
    26fa:	6e c0       	rjmp	.+220    	; 0x27d8 <_ZNSt6vectorIdSaIdEE7reserveEj+0x106>
			T * temp_ptr = data;
    26fc:	8f 81       	ldd	r24, Y+7	; 0x07
    26fe:	98 85       	ldd	r25, Y+8	; 0x08
    2700:	fc 01       	movw	r30, r24
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
			size_type temp_size = data_size;
    270a:	8f 81       	ldd	r24, Y+7	; 0x07
    270c:	98 85       	ldd	r25, Y+8	; 0x08
    270e:	fc 01       	movw	r30, r24
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05

			data_size = n;
    2718:	8f 81       	ldd	r24, Y+7	; 0x07
    271a:	98 85       	ldd	r25, Y+8	; 0x08
    271c:	29 85       	ldd	r18, Y+9	; 0x09
    271e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2720:	fc 01       	movw	r30, r24
    2722:	33 83       	std	Z+3, r19	; 0x03
    2724:	22 83       	std	Z+2, r18	; 0x02
			data = a.allocate(data_size);
    2726:	8f 81       	ldd	r24, Y+7	; 0x07
    2728:	98 85       	ldd	r25, Y+8	; 0x08
    272a:	fc 01       	movw	r30, r24
    272c:	22 81       	ldd	r18, Z+2	; 0x02
    272e:	33 81       	ldd	r19, Z+3	; 0x03
    2730:	8f 81       	ldd	r24, Y+7	; 0x07
    2732:	98 85       	ldd	r25, Y+8	; 0x08
    2734:	06 96       	adiw	r24, 0x06	; 6
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	b9 01       	movw	r22, r18
    273c:	2c df       	rcall	.-424    	; 0x2596 <_ZNSaIdE8allocateEjPKv>
    273e:	9c 01       	movw	r18, r24
    2740:	8f 81       	ldd	r24, Y+7	; 0x07
    2742:	98 85       	ldd	r25, Y+8	; 0x08
    2744:	fc 01       	movw	r30, r24
    2746:	31 83       	std	Z+1, r19	; 0x01
    2748:	20 83       	st	Z, r18

			for(size_type i = 0; i<elements; ++i){
    274a:	1a 82       	std	Y+2, r1	; 0x02
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	31 c0       	rjmp	.+98     	; 0x27b2 <_ZNSt6vectorIdSaIdEE7reserveEj+0xe0>
				a.construct(data+i, temp_ptr[i]);
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	2b 81       	ldd	r18, Y+3	; 0x03
    275e:	3c 81       	ldd	r19, Y+4	; 0x04
    2760:	a9 01       	movw	r20, r18
    2762:	48 0f       	add	r20, r24
    2764:	59 1f       	adc	r21, r25
    2766:	8f 81       	ldd	r24, Y+7	; 0x07
    2768:	98 85       	ldd	r25, Y+8	; 0x08
    276a:	fc 01       	movw	r30, r24
    276c:	20 81       	ld	r18, Z
    276e:	31 81       	ldd	r19, Z+1	; 0x01
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	28 0f       	add	r18, r24
    277e:	39 1f       	adc	r19, r25
    2780:	8f 81       	ldd	r24, Y+7	; 0x07
    2782:	98 85       	ldd	r25, Y+8	; 0x08
    2784:	06 96       	adiw	r24, 0x06	; 6
    2786:	b9 01       	movw	r22, r18
    2788:	2b d0       	rcall	.+86     	; 0x27e0 <_ZNSaIdE9constructEPdRKd>
				a.destroy(temp_ptr+i);
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	2b 81       	ldd	r18, Y+3	; 0x03
    2798:	3c 81       	ldd	r19, Y+4	; 0x04
    279a:	28 0f       	add	r18, r24
    279c:	39 1f       	adc	r19, r25
    279e:	8f 81       	ldd	r24, Y+7	; 0x07
    27a0:	98 85       	ldd	r25, Y+8	; 0x08
    27a2:	06 96       	adiw	r24, 0x06	; 6
    27a4:	b9 01       	movw	r22, r18
    27a6:	73 df       	rcall	.-282    	; 0x268e <_ZNSaIdE7destroyEPd>
			size_type temp_size = data_size;

			data_size = n;
			data = a.allocate(data_size);

			for(size_type i = 0; i<elements; ++i){
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	8f 81       	ldd	r24, Y+7	; 0x07
    27b4:	98 85       	ldd	r25, Y+8	; 0x08
    27b6:	fc 01       	movw	r30, r24
    27b8:	24 81       	ldd	r18, Z+4	; 0x04
    27ba:	35 81       	ldd	r19, Z+5	; 0x05
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	82 17       	cp	r24, r18
    27c2:	93 07       	cpc	r25, r19
    27c4:	28 f2       	brcs	.-118    	; 0x2750 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7e>
				a.construct(data+i, temp_ptr[i]);
				a.destroy(temp_ptr+i);
			}
			a.deallocate(temp_ptr, temp_size);
    27c6:	8f 81       	ldd	r24, Y+7	; 0x07
    27c8:	98 85       	ldd	r25, Y+8	; 0x08
    27ca:	06 96       	adiw	r24, 0x06	; 6
    27cc:	4d 81       	ldd	r20, Y+5	; 0x05
    27ce:	5e 81       	ldd	r21, Y+6	; 0x06
    27d0:	2b 81       	ldd	r18, Y+3	; 0x03
    27d2:	3c 81       	ldd	r19, Y+4	; 0x04
    27d4:	b9 01       	movw	r22, r18
    27d6:	69 df       	rcall	.-302    	; 0x26aa <_ZNSaIdE10deallocateEPdj>
		}
	}
    27d8:	2a 96       	adiw	r28, 0x0a	; 10
    27da:	e2 e0       	ldi	r30, 0x02	; 2
    27dc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000027e0 <_ZNSaIdE9constructEPdRKd>:
	void deallocate(pointer p, size_type){
		::operator delete(p);
	}

	//Use placement new to engage the constructor
	void construct(pointer p, const T& val) { new((void*)p) T(val); }
    27e0:	a6 e0       	ldi	r26, 0x06	; 6
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e6 ef       	ldi	r30, 0xF6	; 246
    27e6:	f3 e1       	ldi	r31, 0x13	; 19
    27e8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	7c 83       	std	Y+4, r23	; 0x04
    27f2:	6b 83       	std	Y+3, r22	; 0x03
    27f4:	5e 83       	std	Y+6, r21	; 0x06
    27f6:	4d 83       	std	Y+5, r20	; 0x05
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	bc 01       	movw	r22, r24
    27fe:	84 e0       	ldi	r24, 0x04	; 4
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	48 dc       	rcall	.-1904   	; 0x2094 <_ZnwjPv>
    2804:	9c 01       	movw	r18, r24
    2806:	21 15       	cp	r18, r1
    2808:	31 05       	cpc	r19, r1
    280a:	61 f0       	breq	.+24     	; 0x2824 <_ZNSaIdE9constructEPdRKd+0x44>
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	fc 01       	movw	r30, r24
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	a2 81       	ldd	r26, Z+2	; 0x02
    2818:	b3 81       	ldd	r27, Z+3	; 0x03
    281a:	f9 01       	movw	r30, r18
    281c:	80 83       	st	Z, r24
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	a2 83       	std	Z+2, r26	; 0x02
    2822:	b3 83       	std	Z+3, r27	; 0x03
    2824:	26 96       	adiw	r28, 0x06	; 6
    2826:	e2 e0       	ldi	r30, 0x02	; 2
    2828:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000282c <_ZNSt6vectorIdSaIdEE8downsizeEj>:
		}else{
			downsize(sz);
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
    282c:	a6 e0       	ldi	r26, 0x06	; 6
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ec e1       	ldi	r30, 0x1C	; 28
    2832:	f4 e1       	ldi	r31, 0x14	; 20
    2834:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2838:	9c 83       	std	Y+4, r25	; 0x04
    283a:	8b 83       	std	Y+3, r24	; 0x03
    283c:	7e 83       	std	Y+6, r23	; 0x06
    283e:	6d 83       	std	Y+5, r22	; 0x05
		if(sz < elements){      //Actually are downsizing
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	fc 01       	movw	r30, r24
    2846:	24 81       	ldd	r18, Z+4	; 0x04
    2848:	35 81       	ldd	r19, Z+5	; 0x05
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	82 17       	cp	r24, r18
    2850:	93 07       	cpc	r25, r19
    2852:	68 f5       	brcc	.+90     	; 0x28ae <_ZNSt6vectorIdSaIdEE8downsizeEj+0x82>
			for(size_t i = sz; i< elements; ++i){
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	17 c0       	rjmp	.+46     	; 0x288c <_ZNSt6vectorIdSaIdEE8downsizeEj+0x60>
				a.destroy(data+i);
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	fc 01       	movw	r30, r24
    2864:	20 81       	ld	r18, Z
    2866:	31 81       	ldd	r19, Z+1	; 0x01
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	28 0f       	add	r18, r24
    2876:	39 1f       	adc	r19, r25
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	06 96       	adiw	r24, 0x06	; 6
    287e:	b9 01       	movw	r22, r18
    2880:	06 df       	rcall	.-500    	; 0x268e <_ZNSaIdE7destroyEPd>
		}
	}

	template<class T, class Allocator> _UCXXEXPORT void vector<T, Allocator>::downsize(size_type sz){
		if(sz < elements){      //Actually are downsizing
			for(size_t i = sz; i< elements; ++i){
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	01 96       	adiw	r24, 0x01	; 1
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	fc 01       	movw	r30, r24
    2892:	24 81       	ldd	r18, Z+4	; 0x04
    2894:	35 81       	ldd	r19, Z+5	; 0x05
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	82 17       	cp	r24, r18
    289c:	93 07       	cpc	r25, r19
    289e:	f8 f2       	brcs	.-66     	; 0x285e <_ZNSt6vectorIdSaIdEE8downsizeEj+0x32>
				a.destroy(data+i);
			}
			elements = sz;
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	2d 81       	ldd	r18, Y+5	; 0x05
    28a6:	3e 81       	ldd	r19, Y+6	; 0x06
    28a8:	fc 01       	movw	r30, r24
    28aa:	35 83       	std	Z+5, r19	; 0x05
    28ac:	24 83       	std	Z+4, r18	; 0x04
		}
	}
    28ae:	26 96       	adiw	r28, 0x06	; 6
    28b0:	e2 e0       	ldi	r30, 0x02	; 2
    28b2:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000028b6 <_ZNK6String5c_strEv>:
    28b6:	a2 e0       	ldi	r26, 0x02	; 2
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e1 e6       	ldi	r30, 0x61	; 97
    28bc:	f4 e1       	ldi	r31, 0x14	; 20
    28be:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	fc 01       	movw	r30, r24
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	22 96       	adiw	r28, 0x02	; 2
    28d2:	e2 e0       	ldi	r30, 0x02	; 2
    28d4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000028d8 <_ZN15StringSumHelperC1EPKc>:
    28d8:	a4 e0       	ldi	r26, 0x04	; 4
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e2 e7       	ldi	r30, 0x72	; 114
    28de:	f4 e1       	ldi	r31, 0x14	; 20
    28e0:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	7c 83       	std	Y+4, r23	; 0x04
    28ea:	6b 83       	std	Y+3, r22	; 0x03
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	2b 81       	ldd	r18, Y+3	; 0x03
    28f2:	3c 81       	ldd	r19, Y+4	; 0x04
    28f4:	b9 01       	movw	r22, r18
    28f6:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    28fa:	24 96       	adiw	r28, 0x04	; 4
    28fc:	e2 e0       	ldi	r30, 0x02	; 2
    28fe:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002902 <_ZN5EERefC1Ei>:
    2902:	a4 e0       	ldi	r26, 0x04	; 4
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e7 e8       	ldi	r30, 0x87	; 135
    2908:	f4 e1       	ldi	r31, 0x14	; 20
    290a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	7c 83       	std	Y+4, r23	; 0x04
    2914:	6b 83       	std	Y+3, r22	; 0x03
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	2b 81       	ldd	r18, Y+3	; 0x03
    291c:	3c 81       	ldd	r19, Y+4	; 0x04
    291e:	fc 01       	movw	r30, r24
    2920:	31 83       	std	Z+1, r19	; 0x01
    2922:	20 83       	st	Z, r18
    2924:	24 96       	adiw	r28, 0x04	; 4
    2926:	e2 e0       	ldi	r30, 0x02	; 2
    2928:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000292c <_ZNK5EERefdeEv>:
    292c:	a2 e0       	ldi	r26, 0x02	; 2
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ec e9       	ldi	r30, 0x9C	; 156
    2932:	f4 e1       	ldi	r31, 0x14	; 20
    2934:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	9a 81       	ldd	r25, Y+2	; 0x02
    2940:	fc 01       	movw	r30, r24
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <eeprom_read_byte>
    294a:	22 96       	adiw	r28, 0x02	; 2
    294c:	e2 e0       	ldi	r30, 0x02	; 2
    294e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002952 <_ZNK5EERefcvKhEv>:
    2952:	a2 e0       	ldi	r26, 0x02	; 2
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ef ea       	ldi	r30, 0xAF	; 175
    2958:	f4 e1       	ldi	r31, 0x14	; 20
    295a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	e2 df       	rcall	.-60     	; 0x292c <_ZNK5EERefdeEv>
    2968:	22 96       	adiw	r28, 0x02	; 2
    296a:	e2 e0       	ldi	r30, 0x02	; 2
    296c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002970 <_ZN5EERefaSEh>:
    2970:	a3 e0       	ldi	r26, 0x03	; 3
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee eb       	ldi	r30, 0xBE	; 190
    2976:	f4 e1       	ldi	r31, 0x14	; 20
    2978:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	6b 83       	std	Y+3, r22	; 0x03
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	fc 01       	movw	r30, r24
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	6b 81       	ldd	r22, Y+3	; 0x03
    298e:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_write_byte>
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	23 96       	adiw	r28, 0x03	; 3
    2998:	e2 e0       	ldi	r30, 0x02	; 2
    299a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000299e <_ZN5EERef6updateEh>:
    299e:	a3 e0       	ldi	r26, 0x03	; 3
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e5 ed       	ldi	r30, 0xD5	; 213
    29a4:	f4 e1       	ldi	r31, 0x14	; 20
    29a6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	6b 83       	std	Y+3, r22	; 0x03
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ce df       	rcall	.-100    	; 0x2952 <_ZNK5EERefcvKhEv>
    29b6:	98 2f       	mov	r25, r24
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	98 17       	cp	r25, r24
    29bc:	29 f0       	breq	.+10     	; 0x29c8 <_ZN5EERef6updateEh+0x2a>
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	6b 81       	ldd	r22, Y+3	; 0x03
    29c4:	d5 df       	rcall	.-86     	; 0x2970 <_ZN5EERefaSEh>
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <_ZN5EERef6updateEh+0x2e>
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	23 96       	adiw	r28, 0x03	; 3
    29ce:	e2 e0       	ldi	r30, 0x02	; 2
    29d0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000029d4 <_ZN11EEPROMClassixEi>:
    29d4:	a6 e0       	ldi	r26, 0x06	; 6
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e0 ef       	ldi	r30, 0xF0	; 240
    29da:	f4 e1       	ldi	r31, 0x14	; 20
    29dc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
    29e4:	7e 83       	std	Y+6, r23	; 0x06
    29e6:	6d 83       	std	Y+5, r22	; 0x05
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	bc 01       	movw	r22, r24
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	87 df       	rcall	.-242    	; 0x2902 <_ZN5EERefC1Ei>
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	26 96       	adiw	r28, 0x06	; 6
    29fa:	e2 e0       	ldi	r30, 0x02	; 2
    29fc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002a00 <_ZN2ee5tools18EEReadBlockElementEPcPhj>:
    2a00:	aa e0       	ldi	r26, 0x0A	; 10
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e6 e0       	ldi	r30, 0x06	; 6
    2a06:	f5 e1       	ldi	r31, 0x15	; 21
    2a08:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	78 87       	std	Y+8, r23	; 0x08
    2a12:	6f 83       	std	Y+7, r22	; 0x07
    2a14:	5a 87       	std	Y+10, r21	; 0x0a
    2a16:	49 87       	std	Y+9, r20	; 0x09
    2a18:	1a 82       	std	Y+2, r1	; 0x02
    2a1a:	19 82       	std	Y+1, r1	; 0x01
    2a1c:	1d c0       	rjmp	.+58     	; 0x2a58 <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x58>
    2a1e:	0d 81       	ldd	r16, Y+5	; 0x05
    2a20:	1e 81       	ldd	r17, Y+6	; 0x06
    2a22:	c8 01       	movw	r24, r16
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2c:	98 85       	ldd	r25, Y+8	; 0x08
    2a2e:	9c 01       	movw	r18, r24
    2a30:	2f 5f       	subi	r18, 0xFF	; 255
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	38 87       	std	Y+8, r19	; 0x08
    2a36:	2f 83       	std	Y+7, r18	; 0x07
    2a38:	bc 01       	movw	r22, r24
    2a3a:	85 ef       	ldi	r24, 0xF5	; 245
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	ca df       	rcall	.-108    	; 0x29d4 <_ZN11EEPROMClassixEi>
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	ce 01       	movw	r24, r28
    2a46:	03 96       	adiw	r24, 0x03	; 3
    2a48:	84 df       	rcall	.-248    	; 0x2952 <_ZNK5EERefcvKhEv>
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	80 83       	st	Z, r24
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	29 81       	ldd	r18, Y+1	; 0x01
    2a5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	28 17       	cp	r18, r24
    2a62:	39 07       	cpc	r19, r25
    2a64:	e0 f2       	brcs	.-72     	; 0x2a1e <_ZN2ee5tools18EEReadBlockElementEPcPhj+0x1e>
    2a66:	2a 96       	adiw	r28, 0x0a	; 10
    2a68:	e4 e0       	ldi	r30, 0x04	; 4
    2a6a:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00002a6e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>:
    2a6e:	ab e0       	ldi	r26, 0x0B	; 11
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ed e3       	ldi	r30, 0x3D	; 61
    2a74:	f5 e1       	ldi	r31, 0x15	; 21
    2a76:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2a7a:	9f 83       	std	Y+7, r25	; 0x07
    2a7c:	8e 83       	std	Y+6, r24	; 0x06
    2a7e:	79 87       	std	Y+9, r23	; 0x09
    2a80:	68 87       	std	Y+8, r22	; 0x08
    2a82:	5b 87       	std	Y+11, r21	; 0x0b
    2a84:	4a 87       	std	Y+10, r20	; 0x0a
    2a86:	1a 82       	std	Y+2, r1	; 0x02
    2a88:	19 82       	std	Y+1, r1	; 0x01
    2a8a:	20 c0       	rjmp	.+64     	; 0x2acc <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x5e>
    2a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a90:	fc 01       	movw	r30, r24
    2a92:	80 81       	ld	r24, Z
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	88 85       	ldd	r24, Y+8	; 0x08
    2a98:	99 85       	ldd	r25, Y+9	; 0x09
    2a9a:	9c 01       	movw	r18, r24
    2a9c:	2f 5f       	subi	r18, 0xFF	; 255
    2a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa0:	39 87       	std	Y+9, r19	; 0x09
    2aa2:	28 87       	std	Y+8, r18	; 0x08
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	85 ef       	ldi	r24, 0xF5	; 245
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	94 df       	rcall	.-216    	; 0x29d4 <_ZN11EEPROMClassixEi>
    2aac:	9d 83       	std	Y+5, r25	; 0x05
    2aae:	8c 83       	std	Y+4, r24	; 0x04
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	04 96       	adiw	r24, 0x04	; 4
    2ab4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ab6:	73 df       	rcall	.-282    	; 0x299e <_ZN5EERef6updateEh>
    2ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aba:	9f 81       	ldd	r25, Y+7	; 0x07
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	9f 83       	std	Y+7, r25	; 0x07
    2ac0:	8e 83       	std	Y+6, r24	; 0x06
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	29 81       	ldd	r18, Y+1	; 0x01
    2ace:	3a 81       	ldd	r19, Y+2	; 0x02
    2ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ad4:	28 17       	cp	r18, r24
    2ad6:	39 07       	cpc	r19, r25
    2ad8:	c8 f2       	brcs	.-78     	; 0x2a8c <_ZN2ee5tools19EEWriteBlockElementEPKcPhj+0x1e>
    2ada:	2b 96       	adiw	r28, 0x0b	; 11
    2adc:	e2 e0       	ldi	r30, 0x02	; 2
    2ade:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002ae2 <_ZN5PrintC1ERKS_>:
    2ae2:	a4 e0       	ldi	r26, 0x04	; 4
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e7 e7       	ldi	r30, 0x77	; 119
    2ae8:	f5 e1       	ldi	r31, 0x15	; 21
    2aea:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	7c 83       	std	Y+4, r23	; 0x04
    2af4:	6b 83       	std	Y+3, r22	; 0x03
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	2c ed       	ldi	r18, 0xDC	; 220
    2afc:	31 e0       	ldi	r19, 0x01	; 1
    2afe:	fc 01       	movw	r30, r24
    2b00:	31 83       	std	Z+1, r19	; 0x01
    2b02:	20 83       	st	Z, r18
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	fc 01       	movw	r30, r24
    2b0a:	22 81       	ldd	r18, Z+2	; 0x02
    2b0c:	33 81       	ldd	r19, Z+3	; 0x03
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	fc 01       	movw	r30, r24
    2b14:	33 83       	std	Z+3, r19	; 0x03
    2b16:	22 83       	std	Z+2, r18	; 0x02
    2b18:	24 96       	adiw	r28, 0x04	; 4
    2b1a:	e2 e0       	ldi	r30, 0x02	; 2
    2b1c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002b20 <_ZN13LiquidCrystalC1ERKS_>:
    2b20:	a4 e0       	ldi	r26, 0x04	; 4
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e6 e9       	ldi	r30, 0x96	; 150
    2b26:	f5 e1       	ldi	r31, 0x15	; 21
    2b28:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	7c 83       	std	Y+4, r23	; 0x04
    2b32:	6b 83       	std	Y+3, r22	; 0x03
    2b34:	2b 81       	ldd	r18, Y+3	; 0x03
    2b36:	3c 81       	ldd	r19, Y+4	; 0x04
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	d1 df       	rcall	.-94     	; 0x2ae2 <_ZN5PrintC1ERKS_>
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	2d e8       	ldi	r18, 0x8D	; 141
    2b46:	31 e0       	ldi	r19, 0x01	; 1
    2b48:	fc 01       	movw	r30, r24
    2b4a:	31 83       	std	Z+1, r19	; 0x01
    2b4c:	20 83       	st	Z, r18
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	fc 01       	movw	r30, r24
    2b54:	24 81       	ldd	r18, Z+4	; 0x04
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	24 83       	std	Z+4, r18	; 0x04
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	fc 01       	movw	r30, r24
    2b64:	25 81       	ldd	r18, Z+5	; 0x05
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	25 83       	std	Z+5, r18	; 0x05
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	fc 01       	movw	r30, r24
    2b74:	26 81       	ldd	r18, Z+6	; 0x06
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	26 83       	std	Z+6, r18	; 0x06
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	2b 81       	ldd	r18, Y+3	; 0x03
    2b84:	3c 81       	ldd	r19, Y+4	; 0x04
    2b86:	48 e0       	ldi	r20, 0x08	; 8
    2b88:	f9 01       	movw	r30, r18
    2b8a:	37 96       	adiw	r30, 0x07	; 7
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	17 96       	adiw	r26, 0x07	; 7
    2b90:	01 90       	ld	r0, Z+
    2b92:	0d 92       	st	X+, r0
    2b94:	4a 95       	dec	r20
    2b96:	e1 f7       	brne	.-8      	; 0x2b90 <_ZN13LiquidCrystalC1ERKS_+0x70>
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	27 85       	ldd	r18, Z+15	; 0x0f
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	27 87       	std	Z+15, r18	; 0x0f
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	fc 01       	movw	r30, r24
    2bae:	20 89       	ldd	r18, Z+16	; 0x10
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	20 8b       	std	Z+16, r18	; 0x10
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	21 89       	ldd	r18, Z+17	; 0x11
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	21 8b       	std	Z+17, r18	; 0x11
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	fc 01       	movw	r30, r24
    2bce:	22 89       	ldd	r18, Z+18	; 0x12
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	22 8b       	std	Z+18, r18	; 0x12
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	fc 01       	movw	r30, r24
    2bde:	23 89       	ldd	r18, Z+19	; 0x13
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	fc 01       	movw	r30, r24
    2be6:	23 8b       	std	Z+19, r18	; 0x13
    2be8:	29 81       	ldd	r18, Y+1	; 0x01
    2bea:	3a 81       	ldd	r19, Y+2	; 0x02
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	84 89       	ldd	r24, Z+20	; 0x14
    2bf4:	95 89       	ldd	r25, Z+21	; 0x15
    2bf6:	a6 89       	ldd	r26, Z+22	; 0x16
    2bf8:	b7 89       	ldd	r27, Z+23	; 0x17
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	84 8b       	std	Z+20, r24	; 0x14
    2bfe:	95 8b       	std	Z+21, r25	; 0x15
    2c00:	a6 8b       	std	Z+22, r26	; 0x16
    2c02:	b7 8b       	std	Z+23, r27	; 0x17
    2c04:	24 96       	adiw	r28, 0x04	; 4
    2c06:	e2 e0       	ldi	r30, 0x02	; 2
    2c08:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002c0c <_ZN7LCDBaseC1ERKS_>:
    2c0c:	a4 e0       	ldi	r26, 0x04	; 4
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	ec e0       	ldi	r30, 0x0C	; 12
    2c12:	f6 e1       	ldi	r31, 0x16	; 22
    2c14:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	7c 83       	std	Y+4, r23	; 0x04
    2c1e:	6b 83       	std	Y+3, r22	; 0x03
    2c20:	2b 81       	ldd	r18, Y+3	; 0x03
    2c22:	3c 81       	ldd	r19, Y+4	; 0x04
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	b9 01       	movw	r22, r18
    2c2a:	7a df       	rcall	.-268    	; 0x2b20 <_ZN13LiquidCrystalC1ERKS_>
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	2b ea       	ldi	r18, 0xAB	; 171
    2c32:	31 e0       	ldi	r19, 0x01	; 1
    2c34:	fc 01       	movw	r30, r24
    2c36:	31 83       	std	Z+1, r19	; 0x01
    2c38:	20 83       	st	Z, r18
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c40:	3c 81       	ldd	r19, Y+4	; 0x04
    2c42:	4a e0       	ldi	r20, 0x0A	; 10
    2c44:	f9 01       	movw	r30, r18
    2c46:	78 96       	adiw	r30, 0x18	; 24
    2c48:	dc 01       	movw	r26, r24
    2c4a:	58 96       	adiw	r26, 0x18	; 24
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	0d 92       	st	X+, r0
    2c50:	4a 95       	dec	r20
    2c52:	e1 f7       	brne	.-8      	; 0x2c4c <_ZN7LCDBaseC1ERKS_+0x40>
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	fc 01       	movw	r30, r24
    2c5a:	22 a1       	ldd	r18, Z+34	; 0x22
    2c5c:	33 a1       	ldd	r19, Z+35	; 0x23
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	fc 01       	movw	r30, r24
    2c64:	33 a3       	std	Z+35, r19	; 0x23
    2c66:	22 a3       	std	Z+34, r18	; 0x22
    2c68:	24 96       	adiw	r28, 0x04	; 4
    2c6a:	e2 e0       	ldi	r30, 0x02	; 2
    2c6c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002c70 <_ZN8PHSensorC1Eiib7LCDBasei>:
    2c70:	ac e0       	ldi	r26, 0x0C	; 12
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	ee e3       	ldi	r30, 0x3E	; 62
    2c76:	f6 e1       	ldi	r31, 0x16	; 22
    2c78:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    2c7c:	9b 83       	std	Y+3, r25	; 0x03
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	7d 83       	std	Y+5, r23	; 0x05
    2c82:	6c 83       	std	Y+4, r22	; 0x04
    2c84:	5f 83       	std	Y+7, r21	; 0x07
    2c86:	4e 83       	std	Y+6, r20	; 0x06
    2c88:	28 87       	std	Y+8, r18	; 0x08
    2c8a:	1a 87       	std	Y+10, r17	; 0x0a
    2c8c:	09 87       	std	Y+9, r16	; 0x09
    2c8e:	fc 86       	std	Y+12, r15	; 0x0c
    2c90:	eb 86       	std	Y+11, r14	; 0x0b
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	9b 81       	ldd	r25, Y+3	; 0x03
    2c96:	2c 81       	ldd	r18, Y+4	; 0x04
    2c98:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	31 83       	std	Z+1, r19	; 0x01
    2c9e:	20 83       	st	Z, r18
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	17 ae       	std	Z+63, r1	; 0x3f
    2ca8:	16 ae       	std	Z+62, r1	; 0x3e
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	9b 81       	ldd	r25, Y+3	; 0x03
    2cae:	80 5c       	subi	r24, 0xC0	; 192
    2cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb2:	2e 81       	ldd	r18, Y+6	; 0x06
    2cb4:	3f 81       	ldd	r19, Y+7	; 0x07
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	31 83       	std	Z+1, r19	; 0x01
    2cba:	20 83       	st	Z, r18
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	0f dc       	rcall	.-2018   	; 0x24e0 <_ZNSaIdEC1Ev>
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	8e 5b       	subi	r24, 0xBE	; 190
    2cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cca:	9e 01       	movw	r18, r28
    2ccc:	2f 5f       	subi	r18, 0xFF	; 255
    2cce:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd0:	b9 01       	movw	r22, r18
    2cd2:	46 d5       	rcall	.+2700   	; 0x3760 <_ZNSt6vectorIdSaIdEEC1ERKS0_>
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	0f dc       	rcall	.-2018   	; 0x24f8 <_ZNSaIdED1Ev>
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	87 5b       	subi	r24, 0xB7	; 183
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	11 82       	std	Z+1, r1	; 0x01
    2ce6:	10 82       	st	Z, r1
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	89 5a       	subi	r24, 0xA9	; 169
    2cee:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf0:	28 85       	ldd	r18, Y+8	; 0x08
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	20 83       	st	Z, r18
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfa:	88 5a       	subi	r24, 0xA8	; 168
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d00:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d02:	fc 01       	movw	r30, r24
    2d04:	31 83       	std	Z+1, r19	; 0x01
    2d06:	20 83       	st	Z, r18
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	85 5a       	subi	r24, 0xA5	; 165
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	fc 01       	movw	r30, r24
    2d12:	11 82       	std	Z+1, r1	; 0x01
    2d14:	10 82       	st	Z, r1
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	83 5a       	subi	r24, 0xA3	; 163
    2d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1e:	29 85       	ldd	r18, Y+9	; 0x09
    2d20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d22:	b9 01       	movw	r22, r18
    2d24:	73 df       	rcall	.-282    	; 0x2c0c <_ZN7LCDBaseC1ERKS_>
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	8f 57       	subi	r24, 0x7F	; 127
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	65 e2       	ldi	r22, 0x25	; 37
    2d30:	71 e0       	ldi	r23, 0x01	; 1
    2d32:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	89 57       	subi	r24, 0x79	; 121
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	65 e2       	ldi	r22, 0x25	; 37
    2d40:	71 e0       	ldi	r23, 0x01	; 1
    2d42:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	9c 01       	movw	r18, r24
    2d4c:	23 57       	subi	r18, 0x73	; 115
    2d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a0 e4       	ldi	r26, 0x40	; 64
    2d56:	b0 e4       	ldi	r27, 0x40	; 64
    2d58:	f9 01       	movw	r30, r18
    2d5a:	80 83       	st	Z, r24
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	a2 83       	std	Z+2, r26	; 0x02
    2d60:	b3 83       	std	Z+3, r27	; 0x03
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	04 d0       	rcall	.+8      	; 0x2d70 <_ZN8PHSensor4initEv>
    2d68:	2c 96       	adiw	r28, 0x0c	; 12
    2d6a:	e6 e0       	ldi	r30, 0x06	; 6
    2d6c:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00002d70 <_ZN8PHSensor4initEv>:
    2d70:	a6 e0       	ldi	r26, 0x06	; 6
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ee eb       	ldi	r30, 0xBE	; 190
    2d76:	f6 e1       	ldi	r31, 0x16	; 22
    2d78:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	61 e0       	ldi	r22, 0x01	; 1
    2d82:	8d e0       	ldi	r24, 0x0D	; 13
    2d84:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    2d88:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8c:	88 5a       	subi	r24, 0xA8	; 168
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	fc 01       	movw	r30, r24
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    2d9c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN6Memory13TheSensorsMemE>
    2da0:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN6Memory13TheSensorsMemE+0x1>
    2da4:	0f d5       	rcall	.+2590   	; 0x37c4 <_ZN6EEWrapIfEcvKfEv>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	ab 83       	std	Y+3, r26	; 0x03
    2db0:	bc 83       	std	Y+4, r27	; 0x04
    2db2:	29 81       	ldd	r18, Y+1	; 0x01
    2db4:	3a 81       	ldd	r19, Y+2	; 0x02
    2db6:	4b 81       	ldd	r20, Y+3	; 0x03
    2db8:	5c 81       	ldd	r21, Y+4	; 0x04
    2dba:	69 81       	ldd	r22, Y+1	; 0x01
    2dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	0e 94 95 2a 	call	0x552a	; 0x552a <__unordsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	71 f4       	brne	.+28     	; 0x2de6 <_ZN8PHSensor4initEv+0x76>
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	9c 01       	movw	r18, r24
    2dd0:	23 57       	subi	r18, 0x73	; 115
    2dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	ab 81       	ldd	r26, Y+3	; 0x03
    2dda:	bc 81       	ldd	r27, Y+4	; 0x04
    2ddc:	f9 01       	movw	r30, r18
    2dde:	80 83       	st	Z, r24
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	a2 83       	std	Z+2, r26	; 0x02
    2de4:	b3 83       	std	Z+3, r27	; 0x03
    2de6:	26 96       	adiw	r28, 0x06	; 6
    2de8:	e2 e0       	ldi	r30, 0x02	; 2
    2dea:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002dee <_ZN8PHSensor6UpdateEd>:
    2dee:	aa e0       	ldi	r26, 0x0A	; 10
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ed ef       	ldi	r30, 0xFD	; 253
    2df4:	f6 e1       	ldi	r31, 0x16	; 22
    2df6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	4f 83       	std	Y+7, r20	; 0x07
    2e00:	58 87       	std	Y+8, r21	; 0x08
    2e02:	69 87       	std	Y+9, r22	; 0x09
    2e04:	7a 87       	std	Y+10, r23	; 0x0a
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	23 57       	subi	r18, 0x73	; 115
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	8f 81       	ldd	r24, Y+7	; 0x07
    2e12:	98 85       	ldd	r25, Y+8	; 0x08
    2e14:	a9 85       	ldd	r26, Y+9	; 0x09
    2e16:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e18:	f9 01       	movw	r30, r18
    2e1a:	80 83       	st	Z, r24
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	a2 83       	std	Z+2, r26	; 0x02
    2e20:	b3 83       	std	Z+3, r27	; 0x03
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	83 57       	subi	r24, 0x73	; 115
    2e28:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	a2 81       	ldd	r26, Z+2	; 0x02
    2e32:	b3 81       	ldd	r27, Z+3	; 0x03
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	ab 83       	std	Y+3, r26	; 0x03
    2e3a:	bc 83       	std	Y+4, r27	; 0x04
    2e3c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN6Memory13TheSensorsMemE>
    2e40:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN6Memory13TheSensorsMemE+0x1>
    2e44:	9c 01       	movw	r18, r24
    2e46:	ce 01       	movw	r24, r28
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	c9 01       	movw	r24, r18
    2e4e:	cd d4       	rcall	.+2458   	; 0x37ea <_ZN6EEWrapIfEaSERKf>
    2e50:	2a 96       	adiw	r28, 0x0a	; 10
    2e52:	e2 e0       	ldi	r30, 0x02	; 2
    2e54:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002e58 <_ZN8PHSensor5GetPHEv>:
    2e58:	ae e0       	ldi	r26, 0x0E	; 14
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e2 e3       	ldi	r30, 0x32	; 50
    2e5e:	f7 e1       	ldi	r31, 0x17	; 23
    2e60:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    2e64:	9e 87       	std	Y+14, r25	; 0x0e
    2e66:	8d 87       	std	Y+13, r24	; 0x0d
    2e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6c:	85 5b       	subi	r24, 0xB5	; 181
    2e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e70:	fc 01       	movw	r30, r24
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	a2 81       	ldd	r26, Z+2	; 0x02
    2e78:	b3 81       	ldd	r27, Z+3	; 0x03
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	37 96       	adiw	r30, 0x07	; 7
    2e7e:	22 e0       	ldi	r18, 0x02	; 2
    2e80:	ac 01       	movw	r20, r24
    2e82:	bd 01       	movw	r22, r26
    2e84:	cf 01       	movw	r24, r30
    2e86:	0e 94 7e 31 	call	0x62fc	; 0x62fc <_ZN6StringC1Efh>
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	07 96       	adiw	r24, 0x07	; 7
    2e8e:	13 dd       	rcall	.-1498   	; 0x28b6 <_ZNK6String5c_strEv>
    2e90:	9c 01       	movw	r18, r24
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	8f 57       	subi	r24, 0x7F	; 127
    2e98:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9a:	b9 01       	movw	r22, r18
    2e9c:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	07 96       	adiw	r24, 0x07	; 7
    2ea4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    2ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eac:	81 5b       	subi	r24, 0xB1	; 177
    2eae:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	a2 81       	ldd	r26, Z+2	; 0x02
    2eb8:	b3 81       	ldd	r27, Z+3	; 0x03
    2eba:	22 e0       	ldi	r18, 0x02	; 2
    2ebc:	ac 01       	movw	r20, r24
    2ebe:	bd 01       	movw	r22, r26
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	0e 94 7e 31 	call	0x62fc	; 0x62fc <_ZN6StringC1Efh>
    2ec8:	ce 01       	movw	r24, r28
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	f4 dc       	rcall	.-1560   	; 0x28b6 <_ZNK6String5c_strEv>
    2ece:	9c 01       	movw	r18, r24
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	89 57       	subi	r24, 0x79	; 121
    2ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed8:	b9 01       	movw	r22, r18
    2eda:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    2ede:	ce 01       	movw	r24, r28
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    2ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eea:	85 5b       	subi	r24, 0xB5	; 181
    2eec:	9f 4f       	sbci	r25, 0xFF	; 255
    2eee:	fc 01       	movw	r30, r24
    2ef0:	80 81       	ld	r24, Z
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ef6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	2e 96       	adiw	r28, 0x0e	; 14
    2efe:	e2 e0       	ldi	r30, 0x02	; 2
    2f00:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00002f04 <_ZN8PHSensor11CalculatePHEv>:
    2f04:	ac e2       	ldi	r26, 0x2C	; 44
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e8 e8       	ldi	r30, 0x88	; 136
    2f0a:	f7 e1       	ldi	r31, 0x17	; 23
    2f0c:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    2f10:	9c a7       	std	Y+44, r25	; 0x2c
    2f12:	8b a7       	std	Y+43, r24	; 0x2b
    2f14:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f16:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f18:	86 5a       	subi	r24, 0xA6	; 166
    2f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	90 81       	ld	r25, Z
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	89 27       	eor	r24, r25
    2f24:	88 23       	and	r24, r24
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <_ZN8PHSensor11CalculatePHEv+0x26>
    2f28:	a4 c1       	rjmp	.+840    	; 0x3272 <_ZN8PHSensor11CalculatePHEv+0x36e>
    2f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f2e:	a5 d1       	rcall	.+842    	; 0x327a <_ZN8PHSensor10getPHValueEv>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	2b a5       	ldd	r18, Y+43	; 0x2b
    2f36:	3c a5       	ldd	r19, Y+44	; 0x2c
    2f38:	25 5b       	subi	r18, 0xB5	; 181
    2f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3c:	f9 01       	movw	r30, r18
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
    2f46:	86 ef       	ldi	r24, 0xF6	; 246
    2f48:	92 e0       	ldi	r25, 0x02	; 2
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	80 81       	ld	r24, Z
    2f4e:	88 23       	and	r24, r24
    2f50:	89 f4       	brne	.+34     	; 0x2f74 <_ZN8PHSensor11CalculatePHEv+0x70>
    2f52:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2f5e:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    2f62:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    2f66:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2f6a:	86 ef       	ldi	r24, 0xF6	; 246
    2f6c:	92 e0       	ldi	r25, 0x02	; 2
    2f6e:	21 e0       	ldi	r18, 0x01	; 1
    2f70:	fc 01       	movw	r30, r24
    2f72:	20 83       	st	Z, r18
    2f74:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    2f78:	9b 01       	movw	r18, r22
    2f7a:	ac 01       	movw	r20, r24
    2f7c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    2f80:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    2f84:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    2f88:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    2f8c:	79 01       	movw	r14, r18
    2f8e:	8a 01       	movw	r16, r20
    2f90:	e8 1a       	sub	r14, r24
    2f92:	f9 0a       	sbc	r15, r25
    2f94:	0a 0b       	sbc	r16, r26
    2f96:	1b 0b       	sbc	r17, r27
    2f98:	d8 01       	movw	r26, r16
    2f9a:	c7 01       	movw	r24, r14
    2f9c:	21 e0       	ldi	r18, 0x01	; 1
    2f9e:	81 36       	cpi	r24, 0x61	; 97
    2fa0:	9a 4e       	sbci	r25, 0xEA	; 234
    2fa2:	a1 05       	cpc	r26, r1
    2fa4:	b1 05       	cpc	r27, r1
    2fa6:	08 f4       	brcc	.+2      	; 0x2faa <_ZN8PHSensor11CalculatePHEv+0xa6>
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	22 23       	and	r18, r18
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <_ZN8PHSensor11CalculatePHEv+0xac>
    2fae:	61 c1       	rjmp	.+706    	; 0x3272 <_ZN8PHSensor11CalculatePHEv+0x36e>
    2fb0:	19 82       	std	Y+1, r1	; 0x01
    2fb2:	1a 82       	std	Y+2, r1	; 0x02
    2fb4:	1b 82       	std	Y+3, r1	; 0x03
    2fb6:	1c 82       	std	Y+4, r1	; 0x04
    2fb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fbc:	8e 5b       	subi	r24, 0xBE	; 190
    2fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc0:	7e da       	rcall	.-2820   	; 0x24be <_ZNKSt6vectorIdSaIdEE4sizeEv>
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	05 97       	sbiw	r24, 0x05	; 5
    2fc6:	08 f0       	brcs	.+2      	; 0x2fca <_ZN8PHSensor11CalculatePHEv+0xc6>
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	22 23       	and	r18, r18
    2fcc:	d1 f1       	breq	.+116    	; 0x3042 <_ZN8PHSensor11CalculatePHEv+0x13e>
    2fce:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd2:	85 5b       	subi	r24, 0xB5	; 181
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	a2 81       	ldd	r26, Z+2	; 0x02
    2fde:	b3 81       	ldd	r27, Z+3	; 0x03
    2fe0:	8b a3       	std	Y+35, r24	; 0x23
    2fe2:	9c a3       	std	Y+36, r25	; 0x24
    2fe4:	ad a3       	std	Y+37, r26	; 0x25
    2fe6:	be a3       	std	Y+38, r27	; 0x26
    2fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fea:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fec:	8e 5b       	subi	r24, 0xBE	; 190
    2fee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff0:	9e 01       	movw	r18, r28
    2ff2:	2d 5d       	subi	r18, 0xDD	; 221
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	b9 01       	movw	r22, r18
    2ff8:	0c d4       	rcall	.+2072   	; 0x3812 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    2ffa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ffc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ffe:	9c 01       	movw	r18, r24
    3000:	2e 5b       	subi	r18, 0xBE	; 190
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	ce 01       	movw	r24, r28
    3006:	4c 96       	adiw	r24, 0x1c	; 28
    3008:	b9 01       	movw	r22, r18
    300a:	1f d4       	rcall	.+2110   	; 0x384a <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    300c:	ce 01       	movw	r24, r28
    300e:	4c 96       	adiw	r24, 0x1c	; 28
    3010:	51 d8       	rcall	.-3934   	; 0x20b4 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	ab 83       	std	Y+3, r26	; 0x03
    301c:	bc 83       	std	Y+4, r27	; 0x04
    301e:	ce 01       	movw	r24, r28
    3020:	4c 96       	adiw	r24, 0x1c	; 28
    3022:	76 da       	rcall	.-2836   	; 0x2510 <_ZNSt6vectorIdSaIdEED1Ev>
    3024:	8b a5       	ldd	r24, Y+43	; 0x2b
    3026:	9c a5       	ldd	r25, Y+44	; 0x2c
    3028:	9c 01       	movw	r18, r24
    302a:	21 5b       	subi	r18, 0xB1	; 177
    302c:	3f 4f       	sbci	r19, 0xFF	; 255
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	ab 81       	ldd	r26, Y+3	; 0x03
    3034:	bc 81       	ldd	r27, Y+4	; 0x04
    3036:	f9 01       	movw	r30, r18
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
    3040:	18 c1       	rjmp	.+560    	; 0x3272 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3042:	8b a5       	ldd	r24, Y+43	; 0x2b
    3044:	9c a5       	ldd	r25, Y+44	; 0x2c
    3046:	9c 01       	movw	r18, r24
    3048:	2e 5b       	subi	r18, 0xBE	; 190
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	ce 01       	movw	r24, r28
    304e:	45 96       	adiw	r24, 0x15	; 21
    3050:	b9 01       	movw	r22, r18
    3052:	fb d3       	rcall	.+2038   	; 0x384a <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    3054:	ce 01       	movw	r24, r28
    3056:	45 96       	adiw	r24, 0x15	; 21
    3058:	2d d8       	rcall	.-4006   	; 0x20b4 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	ab 83       	std	Y+3, r26	; 0x03
    3064:	bc 83       	std	Y+4, r27	; 0x04
    3066:	ce 01       	movw	r24, r28
    3068:	45 96       	adiw	r24, 0x15	; 21
    306a:	52 da       	rcall	.-2908   	; 0x2510 <_ZNSt6vectorIdSaIdEED1Ev>
    306c:	8b a5       	ldd	r24, Y+43	; 0x2b
    306e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3070:	85 5b       	subi	r24, 0xB5	; 181
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	fc 01       	movw	r30, r24
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	a2 81       	ldd	r26, Z+2	; 0x02
    307c:	b3 81       	ldd	r27, Z+3	; 0x03
    307e:	29 81       	ldd	r18, Y+1	; 0x01
    3080:	3a 81       	ldd	r19, Y+2	; 0x02
    3082:	4b 81       	ldd	r20, Y+3	; 0x03
    3084:	5c 81       	ldd	r21, Y+4	; 0x04
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	50 e4       	ldi	r21, 0x40	; 64
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8f a3       	std	Y+39, r24	; 0x27
    30a8:	98 a7       	std	Y+40, r25	; 0x28
    30aa:	a9 a7       	std	Y+41, r26	; 0x29
    30ac:	ba a7       	std	Y+42, r27	; 0x2a
    30ae:	2f a1       	ldd	r18, Y+39	; 0x27
    30b0:	38 a5       	ldd	r19, Y+40	; 0x28
    30b2:	49 a5       	ldd	r20, Y+41	; 0x29
    30b4:	5a a5       	ldd	r21, Y+42	; 0x2a
    30b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ba:	85 5b       	subi	r24, 0xB5	; 181
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	fc 01       	movw	r30, r24
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	a2 81       	ldd	r26, Z+2	; 0x02
    30c6:	b3 81       	ldd	r27, Z+3	; 0x03
    30c8:	eb a5       	ldd	r30, Y+43	; 0x2b
    30ca:	fc a5       	ldd	r31, Y+44	; 0x2c
    30cc:	89 01       	movw	r16, r18
    30ce:	9a 01       	movw	r18, r20
    30d0:	ac 01       	movw	r20, r24
    30d2:	bd 01       	movw	r22, r26
    30d4:	cf 01       	movw	r24, r30
    30d6:	eb d2       	rcall	.+1494   	; 0x36ae <_ZN8PHSensor9isOutlierEdd>
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	8d 81       	ldd	r24, Y+5	; 0x05
    30dc:	88 23       	and	r24, r24
    30de:	d9 f0       	breq	.+54     	; 0x3116 <_ZN8PHSensor11CalculatePHEv+0x212>
    30e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30e4:	85 5a       	subi	r24, 0xA5	; 165
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	fc 01       	movw	r30, r24
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	0a 97       	sbiw	r24, 0x0a	; 10
    30f0:	94 f4       	brge	.+36     	; 0x3116 <_ZN8PHSensor11CalculatePHEv+0x212>
    30f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    30f6:	85 5a       	subi	r24, 0xA5	; 165
    30f8:	9f 4f       	sbci	r25, 0xFF	; 255
    30fa:	fc 01       	movw	r30, r24
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	9c 01       	movw	r18, r24
    3102:	2f 5f       	subi	r18, 0xFF	; 255
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	8b a5       	ldd	r24, Y+43	; 0x2b
    3108:	9c a5       	ldd	r25, Y+44	; 0x2c
    310a:	85 5a       	subi	r24, 0xA5	; 165
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	fc 01       	movw	r30, r24
    3110:	31 83       	std	Z+1, r19	; 0x01
    3112:	20 83       	st	Z, r18
    3114:	ae c0       	rjmp	.+348    	; 0x3272 <_ZN8PHSensor11CalculatePHEv+0x36e>
    3116:	8b a5       	ldd	r24, Y+43	; 0x2b
    3118:	9c a5       	ldd	r25, Y+44	; 0x2c
    311a:	85 5a       	subi	r24, 0xA5	; 165
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	fc 01       	movw	r30, r24
    3120:	11 82       	std	Z+1, r1	; 0x01
    3122:	10 82       	st	Z, r1
    3124:	8f e0       	ldi	r24, 0x0F	; 15
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9f 83       	std	Y+7, r25	; 0x07
    312a:	8e 83       	std	Y+6, r24	; 0x06
    312c:	8b a5       	ldd	r24, Y+43	; 0x2b
    312e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3130:	8e 5b       	subi	r24, 0xBE	; 190
    3132:	9f 4f       	sbci	r25, 0xFF	; 255
    3134:	c4 d9       	rcall	.-3192   	; 0x24be <_ZNKSt6vectorIdSaIdEE4sizeEv>
    3136:	99 87       	std	Y+9, r25	; 0x09
    3138:	88 87       	std	Y+8, r24	; 0x08
    313a:	28 85       	ldd	r18, Y+8	; 0x08
    313c:	39 85       	ldd	r19, Y+9	; 0x09
    313e:	8e 81       	ldd	r24, Y+6	; 0x06
    3140:	9f 81       	ldd	r25, Y+7	; 0x07
    3142:	28 17       	cp	r18, r24
    3144:	39 07       	cpc	r19, r25
    3146:	ec f4       	brge	.+58     	; 0x3182 <_ZN8PHSensor11CalculatePHEv+0x27e>
    3148:	8a e6       	ldi	r24, 0x6A	; 106
    314a:	93 e0       	ldi	r25, 0x03	; 3
    314c:	bc 01       	movw	r22, r24
    314e:	86 e5       	ldi	r24, 0x56	; 86
    3150:	95 e0       	ldi	r25, 0x05	; 5
    3152:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    3156:	8f a1       	ldd	r24, Y+39	; 0x27
    3158:	98 a5       	ldd	r25, Y+40	; 0x28
    315a:	a9 a5       	ldd	r26, Y+41	; 0x29
    315c:	ba a5       	ldd	r27, Y+42	; 0x2a
    315e:	22 e0       	ldi	r18, 0x02	; 2
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	ac 01       	movw	r20, r24
    3164:	bd 01       	movw	r22, r26
    3166:	86 e5       	ldi	r24, 0x56	; 86
    3168:	95 e0       	ldi	r25, 0x05	; 5
    316a:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <_ZN5Print7printlnEdi>
    316e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3170:	9c a5       	ldd	r25, Y+44	; 0x2c
    3172:	8e 5b       	subi	r24, 0xBE	; 190
    3174:	9f 4f       	sbci	r25, 0xFF	; 255
    3176:	9e 01       	movw	r18, r28
    3178:	29 5d       	subi	r18, 0xD9	; 217
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	b9 01       	movw	r22, r18
    317e:	49 d3       	rcall	.+1682   	; 0x3812 <_ZNSt6vectorIdSaIdEE9push_backERKd>
    3180:	35 c0       	rjmp	.+106    	; 0x31ec <_ZN8PHSensor11CalculatePHEv+0x2e8>
    3182:	89 e7       	ldi	r24, 0x79	; 121
    3184:	93 e0       	ldi	r25, 0x03	; 3
    3186:	bc 01       	movw	r22, r24
    3188:	86 e5       	ldi	r24, 0x56	; 86
    318a:	95 e0       	ldi	r25, 0x05	; 5
    318c:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    3190:	8f a1       	ldd	r24, Y+39	; 0x27
    3192:	98 a5       	ldd	r25, Y+40	; 0x28
    3194:	a9 a5       	ldd	r26, Y+41	; 0x29
    3196:	ba a5       	ldd	r27, Y+42	; 0x2a
    3198:	22 e0       	ldi	r18, 0x02	; 2
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	ac 01       	movw	r20, r24
    319e:	bd 01       	movw	r22, r26
    31a0:	86 e5       	ldi	r24, 0x56	; 86
    31a2:	95 e0       	ldi	r25, 0x05	; 5
    31a4:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <_ZN5Print7printlnEdi>
    31a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ac:	87 5b       	subi	r24, 0xB7	; 183
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	fc 01       	movw	r30, r24
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	ac 01       	movw	r20, r24
    31b8:	4f 5f       	subi	r20, 0xFF	; 255
    31ba:	5f 4f       	sbci	r21, 0xFF	; 255
    31bc:	2b a5       	ldd	r18, Y+43	; 0x2b
    31be:	3c a5       	ldd	r19, Y+44	; 0x2c
    31c0:	27 5b       	subi	r18, 0xB7	; 183
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	f9 01       	movw	r30, r18
    31c6:	51 83       	std	Z+1, r21	; 0x01
    31c8:	40 83       	st	Z, r20
    31ca:	9c 01       	movw	r18, r24
    31cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    31d0:	8e 5b       	subi	r24, 0xBE	; 190
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	b9 01       	movw	r22, r18
    31d6:	a9 d3       	rcall	.+1874   	; 0x392a <_ZNSt6vectorIdSaIdEEixEj>
    31d8:	9c 01       	movw	r18, r24
    31da:	8f a1       	ldd	r24, Y+39	; 0x27
    31dc:	98 a5       	ldd	r25, Y+40	; 0x28
    31de:	a9 a5       	ldd	r26, Y+41	; 0x29
    31e0:	ba a5       	ldd	r27, Y+42	; 0x2a
    31e2:	f9 01       	movw	r30, r18
    31e4:	80 83       	st	Z, r24
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	a2 83       	std	Z+2, r26	; 0x02
    31ea:	b3 83       	std	Z+3, r27	; 0x03
    31ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    31f0:	87 5b       	subi	r24, 0xB7	; 183
    31f2:	9f 4f       	sbci	r25, 0xFF	; 255
    31f4:	fc 01       	movw	r30, r24
    31f6:	20 81       	ld	r18, Z
    31f8:	31 81       	ldd	r19, Z+1	; 0x01
    31fa:	8e 81       	ldd	r24, Y+6	; 0x06
    31fc:	9f 81       	ldd	r25, Y+7	; 0x07
    31fe:	28 17       	cp	r18, r24
    3200:	39 07       	cpc	r19, r25
    3202:	39 f4       	brne	.+14     	; 0x3212 <_ZN8PHSensor11CalculatePHEv+0x30e>
    3204:	8b a5       	ldd	r24, Y+43	; 0x2b
    3206:	9c a5       	ldd	r25, Y+44	; 0x2c
    3208:	87 5b       	subi	r24, 0xB7	; 183
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	fc 01       	movw	r30, r24
    320e:	11 82       	std	Z+1, r1	; 0x01
    3210:	10 82       	st	Z, r1
    3212:	8b a5       	ldd	r24, Y+43	; 0x2b
    3214:	9c a5       	ldd	r25, Y+44	; 0x2c
    3216:	9c 01       	movw	r18, r24
    3218:	2e 5b       	subi	r18, 0xBE	; 190
    321a:	3f 4f       	sbci	r19, 0xFF	; 255
    321c:	ce 01       	movw	r24, r28
    321e:	0e 96       	adiw	r24, 0x0e	; 14
    3220:	b9 01       	movw	r22, r18
    3222:	13 d3       	rcall	.+1574   	; 0x384a <_ZNSt6vectorIdSaIdEEC1ERKS1_>
    3224:	ce 01       	movw	r24, r28
    3226:	0e 96       	adiw	r24, 0x0e	; 14
    3228:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <_ZN7MathExt10GetAverageESt6vectorIdSaIdEE>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8a 87       	std	Y+10, r24	; 0x0a
    3232:	9b 87       	std	Y+11, r25	; 0x0b
    3234:	ac 87       	std	Y+12, r26	; 0x0c
    3236:	bd 87       	std	Y+13, r27	; 0x0d
    3238:	ce 01       	movw	r24, r28
    323a:	0e 96       	adiw	r24, 0x0e	; 14
    323c:	69 d9       	rcall	.-3374   	; 0x2510 <_ZNSt6vectorIdSaIdEED1Ev>
    323e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3240:	9c a5       	ldd	r25, Y+44	; 0x2c
    3242:	9c 01       	movw	r18, r24
    3244:	21 5b       	subi	r18, 0xB1	; 177
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	8a 85       	ldd	r24, Y+10	; 0x0a
    324a:	9b 85       	ldd	r25, Y+11	; 0x0b
    324c:	ac 85       	ldd	r26, Y+12	; 0x0c
    324e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3250:	f9 01       	movw	r30, r18
    3252:	80 83       	st	Z, r24
    3254:	91 83       	std	Z+1, r25	; 0x01
    3256:	a2 83       	std	Z+2, r26	; 0x02
    3258:	b3 83       	std	Z+3, r27	; 0x03
    325a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZZN8PHSensor11CalculatePHEvE12samplingTime>
    3266:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x1>
    326a:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x2>
    326e:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <_ZZN8PHSensor11CalculatePHEvE12samplingTime+0x3>
    3272:	ac 96       	adiw	r28, 0x2c	; 44
    3274:	e6 e0       	ldi	r30, 0x06	; 6
    3276:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

0000327a <_ZN8PHSensor10getPHValueEv>:
    327a:	ac e0       	ldi	r26, 0x0C	; 12
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e3 e4       	ldi	r30, 0x43	; 67
    3280:	f9 e1       	ldi	r31, 0x19	; 25
    3282:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    3286:	9c 87       	std	Y+12, r25	; 0x0c
    3288:	8b 87       	std	Y+11, r24	; 0x0b
    328a:	8e ef       	ldi	r24, 0xFE	; 254
    328c:	92 e0       	ldi	r25, 0x02	; 2
    328e:	fc 01       	movw	r30, r24
    3290:	80 81       	ld	r24, Z
    3292:	88 23       	and	r24, r24
    3294:	89 f4       	brne	.+34     	; 0x32b8 <_ZN8PHSensor10getPHValueEv+0x3e>
    3296:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    32a2:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    32a6:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    32aa:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    32ae:	8e ef       	ldi	r24, 0xFE	; 254
    32b0:	92 e0       	ldi	r25, 0x02	; 2
    32b2:	21 e0       	ldi	r18, 0x01	; 1
    32b4:	fc 01       	movw	r30, r24
    32b6:	20 83       	st	Z, r18
    32b8:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    32bc:	9b 01       	movw	r18, r22
    32be:	ac 01       	movw	r20, r24
    32c0:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    32c4:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    32c8:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    32cc:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    32d0:	79 01       	movw	r14, r18
    32d2:	8a 01       	movw	r16, r20
    32d4:	e8 1a       	sub	r14, r24
    32d6:	f9 0a       	sbc	r15, r25
    32d8:	0a 0b       	sbc	r16, r26
    32da:	1b 0b       	sbc	r17, r27
    32dc:	d8 01       	movw	r26, r16
    32de:	c7 01       	movw	r24, r14
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	89 3e       	cpi	r24, 0xE9	; 233
    32e4:	93 40       	sbci	r25, 0x03	; 3
    32e6:	a1 05       	cpc	r26, r1
    32e8:	b1 05       	cpc	r27, r1
    32ea:	08 f4       	brcc	.+2      	; 0x32ee <_ZN8PHSensor10getPHValueEv+0x74>
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	22 23       	and	r18, r18
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <_ZN8PHSensor10getPHValueEv+0x7a>
    32f2:	be c0       	rjmp	.+380    	; 0x3470 <_ZN8PHSensor10getPHValueEv+0x1f6>
    32f4:	8e e1       	ldi	r24, 0x1E	; 30
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    32fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3300:	fc 01       	movw	r30, r24
    3302:	06 ad       	ldd	r16, Z+62	; 0x3e
    3304:	17 ad       	ldd	r17, Z+63	; 0x3f
    3306:	98 01       	movw	r18, r16
    3308:	2f 5f       	subi	r18, 0xFF	; 255
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	8b 85       	ldd	r24, Y+11	; 0x0b
    330e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3310:	fc 01       	movw	r30, r24
    3312:	37 af       	std	Z+63, r19	; 0x3f
    3314:	26 af       	std	Z+62, r18	; 0x3e
    3316:	8b 85       	ldd	r24, Y+11	; 0x0b
    3318:	9c 85       	ldd	r25, Y+12	; 0x0c
    331a:	fc 01       	movw	r30, r24
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <analogRead>
    3324:	ac 01       	movw	r20, r24
    3326:	2b 85       	ldd	r18, Y+11	; 0x0b
    3328:	3c 85       	ldd	r19, Y+12	; 0x0c
    332a:	c8 01       	movw	r24, r16
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	fc 01       	movw	r30, r24
    3338:	51 83       	std	Z+1, r21	; 0x01
    333a:	40 83       	st	Z, r20
    333c:	8b 85       	ldd	r24, Y+11	; 0x0b
    333e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3340:	fc 01       	movw	r30, r24
    3342:	26 ad       	ldd	r18, Z+62	; 0x3e
    3344:	37 ad       	ldd	r19, Z+63	; 0x3f
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	28 17       	cp	r18, r24
    334c:	39 07       	cpc	r19, r25
    334e:	29 f4       	brne	.+10     	; 0x335a <_ZN8PHSensor10getPHValueEv+0xe0>
    3350:	8b 85       	ldd	r24, Y+11	; 0x0b
    3352:	9c 85       	ldd	r25, Y+12	; 0x0c
    3354:	fc 01       	movw	r30, r24
    3356:	17 ae       	std	Z+63, r1	; 0x3f
    3358:	16 ae       	std	Z+62, r1	; 0x3e
    335a:	8b 85       	ldd	r24, Y+11	; 0x0b
    335c:	9c 85       	ldd	r25, Y+12	; 0x0c
    335e:	02 96       	adiw	r24, 0x02	; 2
    3360:	2d 81       	ldd	r18, Y+5	; 0x05
    3362:	3e 81       	ldd	r19, Y+6	; 0x06
    3364:	b9 01       	movw	r22, r18
    3366:	0e 94 98 10 	call	0x2130	; 0x2130 <_ZN7MathExt16CalculateAverageEPii>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8f 83       	std	Y+7, r24	; 0x07
    3370:	98 87       	std	Y+8, r25	; 0x08
    3372:	a9 87       	std	Y+9, r26	; 0x09
    3374:	ba 87       	std	Y+10, r27	; 0x0a
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 ea       	ldi	r20, 0xA0	; 160
    337c:	50 e4       	ldi	r21, 0x40	; 64
    337e:	6f 81       	ldd	r22, Y+7	; 0x07
    3380:	78 85       	ldd	r23, Y+8	; 0x08
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	0e 94 32 2a 	call	0x5464	; 0x5464 <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	54 e4       	ldi	r21, 0x44	; 68
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    33a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    33a6:	2d 5a       	subi	r18, 0xAD	; 173
    33a8:	3f 4f       	sbci	r19, 0xFF	; 255
    33aa:	f9 01       	movw	r30, r18
    33ac:	80 83       	st	Z, r24
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	a2 83       	std	Z+2, r26	; 0x02
    33b2:	b3 83       	std	Z+3, r27	; 0x03
    33b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33b8:	8d 5a       	subi	r24, 0xAD	; 173
    33ba:	9f 4f       	sbci	r25, 0xFF	; 255
    33bc:	fc 01       	movw	r30, r24
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	a2 81       	ldd	r26, Z+2	; 0x02
    33c4:	b3 81       	ldd	r27, Z+3	; 0x03
    33c6:	9c 01       	movw	r18, r24
    33c8:	ad 01       	movw	r20, r26
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	80 e2       	ldi	r24, 0x20	; 32
    33d0:	90 e4       	ldi	r25, 0x40	; 64
    33d2:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__subsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	2c ee       	ldi	r18, 0xEC	; 236
    33dc:	31 e5       	ldi	r19, 0x51	; 81
    33de:	48 e3       	ldi	r20, 0x38	; 56
    33e0:	5e e3       	ldi	r21, 0x3E	; 62
    33e2:	bc 01       	movw	r22, r24
    33e4:	cd 01       	movw	r24, r26
    33e6:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 ee       	ldi	r20, 0xE0	; 224
    33f4:	50 e4       	ldi	r21, 0x40	; 64
    33f6:	bc 01       	movw	r22, r24
    33f8:	cd 01       	movw	r24, r26
    33fa:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	7c 01       	movw	r14, r24
    3404:	8d 01       	movw	r16, r26
    3406:	8b 85       	ldd	r24, Y+11	; 0x0b
    3408:	9c 85       	ldd	r25, Y+12	; 0x0c
    340a:	83 57       	subi	r24, 0x73	; 115
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	fc 01       	movw	r30, r24
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	a2 81       	ldd	r26, Z+2	; 0x02
    3416:	b3 81       	ldd	r27, Z+3	; 0x03
    3418:	9c 01       	movw	r18, r24
    341a:	ad 01       	movw	r20, r26
    341c:	c8 01       	movw	r24, r16
    341e:	b7 01       	movw	r22, r14
    3420:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	ab 83       	std	Y+3, r26	; 0x03
    342e:	bc 83       	std	Y+4, r27	; 0x04
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	a9 01       	movw	r20, r18
    3436:	69 81       	ldd	r22, Y+1	; 0x01
    3438:	7a 81       	ldd	r23, Y+2	; 0x02
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	0e 94 df 28 	call	0x51be	; 0x51be <__cmpsf2>
    3442:	88 23       	and	r24, r24
    3444:	24 f4       	brge	.+8      	; 0x344e <_ZN8PHSensor10getPHValueEv+0x1d4>
    3446:	19 82       	std	Y+1, r1	; 0x01
    3448:	1a 82       	std	Y+2, r1	; 0x02
    344a:	1b 82       	std	Y+3, r1	; 0x03
    344c:	1c 82       	std	Y+4, r1	; 0x04
    344e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZZN8PHSensor10getPHValueEvE12samplingTime>
    345a:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x1>
    345e:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x2>
    3462:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <_ZZN8PHSensor10getPHValueEvE12samplingTime+0x3>
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	ab 81       	ldd	r26, Y+3	; 0x03
    346c:	bc 81       	ldd	r27, Y+4	; 0x04
    346e:	09 c0       	rjmp	.+18     	; 0x3482 <_ZN8PHSensor10getPHValueEv+0x208>
    3470:	8b 85       	ldd	r24, Y+11	; 0x0b
    3472:	9c 85       	ldd	r25, Y+12	; 0x0c
    3474:	85 5b       	subi	r24, 0xB5	; 181
    3476:	9f 4f       	sbci	r25, 0xFF	; 255
    3478:	fc 01       	movw	r30, r24
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	a2 81       	ldd	r26, Z+2	; 0x02
    3480:	b3 81       	ldd	r27, Z+3	; 0x03
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	2c 96       	adiw	r28, 0x0c	; 12
    3488:	e6 e0       	ldi	r30, 0x06	; 6
    348a:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

0000348e <_ZN15StringSumHelperD1Ev>:
    348e:	a2 e0       	ldi	r26, 0x02	; 2
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	ed e4       	ldi	r30, 0x4D	; 77
    3494:	fa e1       	ldi	r31, 0x1A	; 26
    3496:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    34a6:	22 96       	adiw	r28, 0x02	; 2
    34a8:	e2 e0       	ldi	r30, 0x02	; 2
    34aa:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000034ae <_ZN8PHSensor12PrintPHToLCDEv>:
    34ae:	aa e1       	ldi	r26, 0x1A	; 26
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ed e5       	ldi	r30, 0x5D	; 93
    34b4:	fa e1       	ldi	r31, 0x1A	; 26
    34b6:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    34ba:	9a 8f       	std	Y+26, r25	; 0x1a
    34bc:	89 8f       	std	Y+25, r24	; 0x19
    34be:	89 8d       	ldd	r24, Y+25	; 0x19
    34c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34c2:	ca dc       	rcall	.-1644   	; 0x2e58 <_ZN8PHSensor5GetPHEv>
    34c4:	86 e0       	ldi	r24, 0x06	; 6
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	fc 01       	movw	r30, r24
    34ca:	80 81       	ld	r24, Z
    34cc:	88 23       	and	r24, r24
    34ce:	89 f4       	brne	.+34     	; 0x34f2 <_ZN8PHSensor12PrintPHToLCDEv+0x44>
    34d0:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    34dc:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    34e0:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    34e4:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    34e8:	86 e0       	ldi	r24, 0x06	; 6
    34ea:	93 e0       	ldi	r25, 0x03	; 3
    34ec:	21 e0       	ldi	r18, 0x01	; 1
    34ee:	fc 01       	movw	r30, r24
    34f0:	20 83       	st	Z, r18
    34f2:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    34f6:	9b 01       	movw	r18, r22
    34f8:	ac 01       	movw	r20, r24
    34fa:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    34fe:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    3502:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    3506:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    350a:	28 1b       	sub	r18, r24
    350c:	39 0b       	sbc	r19, r25
    350e:	4a 0b       	sbc	r20, r26
    3510:	5b 0b       	sbc	r21, r27
    3512:	89 8d       	ldd	r24, Y+25	; 0x19
    3514:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3516:	80 5c       	subi	r24, 0xC0	; 192
    3518:	9f 4f       	sbci	r25, 0xFF	; 255
    351a:	fc 01       	movw	r30, r24
    351c:	80 81       	ld	r24, Z
    351e:	91 81       	ldd	r25, Z+1	; 0x01
    3520:	80 57       	subi	r24, 0x70	; 112
    3522:	9e 4f       	sbci	r25, 0xFE	; 254
    3524:	09 2e       	mov	r0, r25
    3526:	00 0c       	add	r0, r0
    3528:	aa 0b       	sbc	r26, r26
    352a:	bb 0b       	sbc	r27, r27
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	82 17       	cp	r24, r18
    3530:	93 07       	cpc	r25, r19
    3532:	a4 07       	cpc	r26, r20
    3534:	b5 07       	cpc	r27, r21
    3536:	08 f0       	brcs	.+2      	; 0x353a <_ZN8PHSensor12PrintPHToLCDEv+0x8c>
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	66 23       	and	r22, r22
    353c:	09 f4       	brne	.+2      	; 0x3540 <_ZN8PHSensor12PrintPHToLCDEv+0x92>
    353e:	74 c0       	rjmp	.+232    	; 0x3628 <_ZN8PHSensor12PrintPHToLCDEv+0x17a>
    3540:	89 8d       	ldd	r24, Y+25	; 0x19
    3542:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3544:	89 5a       	subi	r24, 0xA9	; 169
    3546:	9f 4f       	sbci	r25, 0xFF	; 255
    3548:	fc 01       	movw	r30, r24
    354a:	80 81       	ld	r24, Z
    354c:	88 23       	and	r24, r24
    354e:	09 f4       	brne	.+2      	; 0x3552 <_ZN8PHSensor12PrintPHToLCDEv+0xa4>
    3550:	5f c0       	rjmp	.+190    	; 0x3610 <_ZN8PHSensor12PrintPHToLCDEv+0x162>
    3552:	ce 01       	movw	r24, r28
    3554:	0d 96       	adiw	r24, 0x0d	; 13
    3556:	65 e2       	ldi	r22, 0x25	; 37
    3558:	71 e0       	ldi	r23, 0x01	; 1
    355a:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    355e:	89 8d       	ldd	r24, Y+25	; 0x19
    3560:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3562:	86 5a       	subi	r24, 0xA6	; 166
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	fc 01       	movw	r30, r24
    3568:	80 81       	ld	r24, Z
    356a:	88 23       	and	r24, r24
    356c:	31 f0       	breq	.+12     	; 0x357a <_ZN8PHSensor12PrintPHToLCDEv+0xcc>
    356e:	ce 01       	movw	r24, r28
    3570:	0d 96       	adiw	r24, 0x0d	; 13
    3572:	66 e2       	ldi	r22, 0x26	; 38
    3574:	71 e0       	ldi	r23, 0x01	; 1
    3576:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    357a:	89 8d       	ldd	r24, Y+25	; 0x19
    357c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    357e:	8c 01       	movw	r16, r24
    3580:	0f 57       	subi	r16, 0x7F	; 127
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	89 8d       	ldd	r24, Y+25	; 0x19
    3586:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3588:	7c 01       	movw	r14, r24
    358a:	f7 e8       	ldi	r31, 0x87	; 135
    358c:	ef 0e       	add	r14, r31
    358e:	f1 1c       	adc	r15, r1
    3590:	ce 01       	movw	r24, r28
    3592:	07 96       	adiw	r24, 0x07	; 7
    3594:	68 e2       	ldi	r22, 0x28	; 40
    3596:	71 e0       	ldi	r23, 0x01	; 1
    3598:	9f d9       	rcall	.-3266   	; 0x28d8 <_ZN15StringSumHelperC1EPKc>
    359a:	ce 01       	movw	r24, r28
    359c:	07 96       	adiw	r24, 0x07	; 7
    359e:	b7 01       	movw	r22, r14
    35a0:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    35a4:	6d e2       	ldi	r22, 0x2D	; 45
    35a6:	71 e0       	ldi	r23, 0x01	; 1
    35a8:	0e 94 37 32 	call	0x646e	; 0x646e <_ZplRK15StringSumHelperPKc>
    35ac:	b8 01       	movw	r22, r16
    35ae:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    35b2:	9c 01       	movw	r18, r24
    35b4:	ce 01       	movw	r24, r28
    35b6:	0d 96       	adiw	r24, 0x0d	; 13
    35b8:	bc 01       	movw	r22, r24
    35ba:	c9 01       	movw	r24, r18
    35bc:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    35c0:	9c 01       	movw	r18, r24
    35c2:	ce 01       	movw	r24, r28
    35c4:	43 96       	adiw	r24, 0x13	; 19
    35c6:	b9 01       	movw	r22, r18
    35c8:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    35cc:	ce 01       	movw	r24, r28
    35ce:	07 96       	adiw	r24, 0x07	; 7
    35d0:	5e df       	rcall	.-324    	; 0x348e <_ZN15StringSumHelperD1Ev>
    35d2:	ce 01       	movw	r24, r28
    35d4:	43 96       	adiw	r24, 0x13	; 19
    35d6:	bc 01       	movw	r22, r24
    35d8:	ce 01       	movw	r24, r28
    35da:	01 96       	adiw	r24, 0x01	; 1
    35dc:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    35e0:	89 8d       	ldd	r24, Y+25	; 0x19
    35e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35e4:	83 5a       	subi	r24, 0xA3	; 163
    35e6:	9f 4f       	sbci	r25, 0xFF	; 255
    35e8:	9e 01       	movw	r18, r28
    35ea:	2f 5f       	subi	r18, 0xFF	; 255
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	a9 01       	movw	r20, r18
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	70 e0       	ldi	r23, 0x00	; 0
    35f4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7LCDBase9PrintLineEs6String>
    35f8:	ce 01       	movw	r24, r28
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    3600:	ce 01       	movw	r24, r28
    3602:	43 96       	adiw	r24, 0x13	; 19
    3604:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    3608:	ce 01       	movw	r24, r28
    360a:	0d 96       	adiw	r24, 0x0d	; 13
    360c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    3610:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime>
    361c:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x1>
    3620:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x2>
    3624:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <_ZZN8PHSensor12PrintPHToLCDEvE9printTime+0x3>
    3628:	6a 96       	adiw	r28, 0x1a	; 26
    362a:	e6 e0       	ldi	r30, 0x06	; 6
    362c:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00003630 <_ZN8PHSensor6TurnOnEv>:
    3630:	a2 e0       	ldi	r26, 0x02	; 2
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ee e1       	ldi	r30, 0x1E	; 30
    3636:	fb e1       	ldi	r31, 0x1B	; 27
    3638:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    363c:	9a 83       	std	Y+2, r25	; 0x02
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	86 5a       	subi	r24, 0xA6	; 166
    3646:	9f 4f       	sbci	r25, 0xFF	; 255
    3648:	21 e0       	ldi	r18, 0x01	; 1
    364a:	fc 01       	movw	r30, r24
    364c:	20 83       	st	Z, r18
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	88 5a       	subi	r24, 0xA8	; 168
    3654:	9f 4f       	sbci	r25, 0xFF	; 255
    3656:	fc 01       	movw	r30, r24
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    3662:	22 96       	adiw	r28, 0x02	; 2
    3664:	e2 e0       	ldi	r30, 0x02	; 2
    3666:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000366a <_ZN8PHSensor7TurnOffEv>:
    366a:	a2 e0       	ldi	r26, 0x02	; 2
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	eb e3       	ldi	r30, 0x3B	; 59
    3670:	fb e1       	ldi	r31, 0x1B	; 27
    3672:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3676:	9a 83       	std	Y+2, r25	; 0x02
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	9a 81       	ldd	r25, Y+2	; 0x02
    367e:	86 5a       	subi	r24, 0xA6	; 166
    3680:	9f 4f       	sbci	r25, 0xFF	; 255
    3682:	fc 01       	movw	r30, r24
    3684:	10 82       	st	Z, r1
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
    368a:	88 5a       	subi	r24, 0xA8	; 168
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	fc 01       	movw	r30, r24
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    369a:	68 ee       	ldi	r22, 0xE8	; 232
    369c:	73 e0       	ldi	r23, 0x03	; 3
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <delay>
    36a6:	22 96       	adiw	r28, 0x02	; 2
    36a8:	e2 e0       	ldi	r30, 0x02	; 2
    36aa:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000036ae <_ZN8PHSensor9isOutlierEdd>:
    36ae:	a1 e1       	ldi	r26, 0x11	; 17
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	ed e5       	ldi	r30, 0x5D	; 93
    36b4:	fb e1       	ldi	r31, 0x1B	; 27
    36b6:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    36ba:	99 87       	std	Y+9, r25	; 0x09
    36bc:	88 87       	std	Y+8, r24	; 0x08
    36be:	4a 87       	std	Y+10, r20	; 0x0a
    36c0:	5b 87       	std	Y+11, r21	; 0x0b
    36c2:	6c 87       	std	Y+12, r22	; 0x0c
    36c4:	7d 87       	std	Y+13, r23	; 0x0d
    36c6:	0e 87       	std	Y+14, r16	; 0x0e
    36c8:	1f 87       	std	Y+15, r17	; 0x0f
    36ca:	28 8b       	std	Y+16, r18	; 0x10
    36cc:	39 8b       	std	Y+17, r19	; 0x11
    36ce:	8d ec       	ldi	r24, 0xCD	; 205
    36d0:	9c ec       	ldi	r25, 0xCC	; 204
    36d2:	ac e4       	ldi	r26, 0x4C	; 76
    36d4:	be e3       	ldi	r27, 0x3E	; 62
    36d6:	89 83       	std	Y+1, r24	; 0x01
    36d8:	9a 83       	std	Y+2, r25	; 0x02
    36da:	ab 83       	std	Y+3, r26	; 0x03
    36dc:	bc 83       	std	Y+4, r27	; 0x04
    36de:	29 81       	ldd	r18, Y+1	; 0x01
    36e0:	3a 81       	ldd	r19, Y+2	; 0x02
    36e2:	4b 81       	ldd	r20, Y+3	; 0x03
    36e4:	5c 81       	ldd	r21, Y+4	; 0x04
    36e6:	6e 85       	ldd	r22, Y+14	; 0x0e
    36e8:	7f 85       	ldd	r23, Y+15	; 0x0f
    36ea:	88 89       	ldd	r24, Y+16	; 0x10
    36ec:	99 89       	ldd	r25, Y+17	; 0x11
    36ee:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__subsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	11 e0       	ldi	r17, 0x01	; 1
    36f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    36fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    36fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    36fe:	5d 85       	ldd	r21, Y+13	; 0x0d
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	0e 94 2e 2a 	call	0x545c	; 0x545c <__gesf2>
    3708:	18 16       	cp	r1, r24
    370a:	0c f0       	brlt	.+2      	; 0x370e <_ZN8PHSensor9isOutlierEdd+0x60>
    370c:	10 e0       	ldi	r17, 0x00	; 0
    370e:	1d 83       	std	Y+5, r17	; 0x05
    3710:	29 81       	ldd	r18, Y+1	; 0x01
    3712:	3a 81       	ldd	r19, Y+2	; 0x02
    3714:	4b 81       	ldd	r20, Y+3	; 0x03
    3716:	5c 81       	ldd	r21, Y+4	; 0x04
    3718:	6e 85       	ldd	r22, Y+14	; 0x0e
    371a:	7f 85       	ldd	r23, Y+15	; 0x0f
    371c:	88 89       	ldd	r24, Y+16	; 0x10
    371e:	99 89       	ldd	r25, Y+17	; 0x11
    3720:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	11 e0       	ldi	r17, 0x01	; 1
    372a:	2a 85       	ldd	r18, Y+10	; 0x0a
    372c:	3b 85       	ldd	r19, Y+11	; 0x0b
    372e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3730:	5d 85       	ldd	r21, Y+13	; 0x0d
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 df 28 	call	0x51be	; 0x51be <__cmpsf2>
    373a:	88 23       	and	r24, r24
    373c:	0c f0       	brlt	.+2      	; 0x3740 <_ZN8PHSensor9isOutlierEdd+0x92>
    373e:	10 e0       	ldi	r17, 0x00	; 0
    3740:	1e 83       	std	Y+6, r17	; 0x06
    3742:	8d 81       	ldd	r24, Y+5	; 0x05
    3744:	88 23       	and	r24, r24
    3746:	19 f4       	brne	.+6      	; 0x374e <_ZN8PHSensor9isOutlierEdd+0xa0>
    3748:	8e 81       	ldd	r24, Y+6	; 0x06
    374a:	88 23       	and	r24, r24
    374c:	11 f0       	breq	.+4      	; 0x3752 <_ZN8PHSensor9isOutlierEdd+0xa4>
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	01 c0       	rjmp	.+2      	; 0x3754 <_ZN8PHSensor9isOutlierEdd+0xa6>
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	8f 83       	std	Y+7, r24	; 0x07
    3756:	8f 81       	ldd	r24, Y+7	; 0x07
    3758:	61 96       	adiw	r28, 0x11	; 17
    375a:	e4 e0       	ldi	r30, 0x04	; 4
    375c:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00003760 <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
    3760:	a4 e0       	ldi	r26, 0x04	; 4
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e6 eb       	ldi	r30, 0xB6	; 182
    3766:	fb e1       	ldi	r31, 0x1B	; 27
    3768:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    376c:	9a 83       	std	Y+2, r25	; 0x02
    376e:	89 83       	std	Y+1, r24	; 0x01
    3770:	7c 83       	std	Y+4, r23	; 0x04
    3772:	6b 83       	std	Y+3, r22	; 0x03
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	fc 01       	movw	r30, r24
    377a:	11 82       	std	Z+1, r1	; 0x01
    377c:	10 82       	st	Z, r1
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	9a 81       	ldd	r25, Y+2	; 0x02
    3782:	28 e0       	ldi	r18, 0x08	; 8
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	fc 01       	movw	r30, r24
    3788:	33 83       	std	Z+3, r19	; 0x03
    378a:	22 83       	std	Z+2, r18	; 0x02
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	fc 01       	movw	r30, r24
    3792:	15 82       	std	Z+5, r1	; 0x05
    3794:	14 82       	std	Z+4, r1	; 0x04
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	fc 01       	movw	r30, r24
    379c:	22 81       	ldd	r18, Z+2	; 0x02
    379e:	33 81       	ldd	r19, Z+3	; 0x03
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	06 96       	adiw	r24, 0x06	; 6
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	50 e0       	ldi	r21, 0x00	; 0
    37aa:	b9 01       	movw	r22, r18
    37ac:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZNSaIdE8allocateEjPKv>
    37b0:	9c 01       	movw	r18, r24
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	9a 81       	ldd	r25, Y+2	; 0x02
    37b6:	fc 01       	movw	r30, r24
    37b8:	31 83       	std	Z+1, r19	; 0x01
    37ba:	20 83       	st	Z, r18
    37bc:	24 96       	adiw	r28, 0x04	; 4
    37be:	e2 e0       	ldi	r30, 0x02	; 2
    37c0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000037c4 <_ZN6EEWrapIfEcvKfEv>:
    37c4:	a2 e0       	ldi	r26, 0x02	; 2
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e8 ee       	ldi	r30, 0xE8	; 232
    37ca:	fb e1       	ldi	r31, 0x1B	; 27
    37cc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	c3 d0       	rcall	.+390    	; 0x3960 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	22 96       	adiw	r28, 0x02	; 2
    37e4:	e2 e0       	ldi	r30, 0x02	; 2
    37e6:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000037ea <_ZN6EEWrapIfEaSERKf>:
    37ea:	a4 e0       	ldi	r26, 0x04	; 4
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	eb ef       	ldi	r30, 0xFB	; 251
    37f0:	fb e1       	ldi	r31, 0x1B	; 27
    37f2:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	7c 83       	std	Y+4, r23	; 0x04
    37fc:	6b 83       	std	Y+3, r22	; 0x03
    37fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3800:	3c 81       	ldd	r19, Y+4	; 0x04
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	b9 01       	movw	r22, r18
    3808:	cb d0       	rcall	.+406    	; 0x39a0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>
    380a:	24 96       	adiw	r28, 0x04	; 4
    380c:	e2 e0       	ldi	r30, 0x02	; 2
    380e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00003812 <_ZNSt6vectorIdSaIdEE9push_backERKd>:
    3812:	a4 e0       	ldi	r26, 0x04	; 4
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	ef e0       	ldi	r30, 0x0F	; 15
    3818:	fc e1       	ldi	r31, 0x1C	; 28
    381a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    381e:	9a 83       	std	Y+2, r25	; 0x02
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	7c 83       	std	Y+4, r23	; 0x04
    3824:	6b 83       	std	Y+3, r22	; 0x03
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZNKSt6vectorIdSaIdEE4sizeEv>
    382e:	9c 01       	movw	r18, r24
    3830:	2f 5f       	subi	r18, 0xFF	; 255
    3832:	3f 4f       	sbci	r19, 0xFF	; 255
    3834:	4b 81       	ldd	r20, Y+3	; 0x03
    3836:	5c 81       	ldd	r21, Y+4	; 0x04
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	9a 81       	ldd	r25, Y+2	; 0x02
    383c:	b9 01       	movw	r22, r18
    383e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
    3842:	24 96       	adiw	r28, 0x04	; 4
    3844:	e2 e0       	ldi	r30, 0x02	; 2
    3846:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000384a <_ZNSt6vectorIdSaIdEEC1ERKS1_>:
    384a:	a6 e0       	ldi	r26, 0x06	; 6
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	eb e2       	ldi	r30, 0x2B	; 43
    3850:	fc e1       	ldi	r31, 0x1C	; 28
    3852:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
    385a:	7e 83       	std	Y+6, r23	; 0x06
    385c:	6d 83       	std	Y+5, r22	; 0x05
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	06 96       	adiw	r24, 0x06	; 6
    3864:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_ZNSaIdEC1Ev>
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	fc 01       	movw	r30, r24
    386e:	24 81       	ldd	r18, Z+4	; 0x04
    3870:	35 81       	ldd	r19, Z+5	; 0x05
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	fc 01       	movw	r30, r24
    3878:	35 83       	std	Z+5, r19	; 0x05
    387a:	24 83       	std	Z+4, r18	; 0x04
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	fc 01       	movw	r30, r24
    3882:	84 81       	ldd	r24, Z+4	; 0x04
    3884:	95 81       	ldd	r25, Z+5	; 0x05
    3886:	9c 01       	movw	r18, r24
    3888:	28 5f       	subi	r18, 0xF8	; 248
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	fc 01       	movw	r30, r24
    3892:	33 83       	std	Z+3, r19	; 0x03
    3894:	22 83       	std	Z+2, r18	; 0x02
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	fc 01       	movw	r30, r24
    389c:	22 81       	ldd	r18, Z+2	; 0x02
    389e:	33 81       	ldd	r19, Z+3	; 0x03
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	06 96       	adiw	r24, 0x06	; 6
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	b9 01       	movw	r22, r18
    38ac:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZNSaIdE8allocateEjPKv>
    38b0:	9c 01       	movw	r18, r24
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	fc 01       	movw	r30, r24
    38b8:	31 83       	std	Z+1, r19	; 0x01
    38ba:	20 83       	st	Z, r18
    38bc:	1a 82       	std	Y+2, r1	; 0x02
    38be:	19 82       	std	Y+1, r1	; 0x01
    38c0:	26 c0       	rjmp	.+76     	; 0x390e <_ZNSt6vectorIdSaIdEEC1ERKS1_+0xc4>
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	fc 01       	movw	r30, r24
    38c8:	20 81       	ld	r18, Z
    38ca:	31 81       	ldd	r19, Z+1	; 0x01
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02
    38d0:	88 0f       	add	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	a9 01       	movw	r20, r18
    38da:	48 0f       	add	r20, r24
    38dc:	59 1f       	adc	r21, r25
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	9c 81       	ldd	r25, Y+4	; 0x04
    38e2:	fc 01       	movw	r30, r24
    38e4:	20 81       	ld	r18, Z
    38e6:	31 81       	ldd	r19, Z+1	; 0x01
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	9a 81       	ldd	r25, Y+2	; 0x02
    38ec:	88 0f       	add	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	28 0f       	add	r18, r24
    38f6:	39 1f       	adc	r19, r25
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	06 96       	adiw	r24, 0x06	; 6
    38fe:	b9 01       	movw	r22, r18
    3900:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZNSaIdE9constructEPdRKd>
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	9a 81       	ldd	r25, Y+2	; 0x02
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	9a 83       	std	Y+2, r25	; 0x02
    390c:	89 83       	std	Y+1, r24	; 0x01
    390e:	8b 81       	ldd	r24, Y+3	; 0x03
    3910:	9c 81       	ldd	r25, Y+4	; 0x04
    3912:	fc 01       	movw	r30, r24
    3914:	24 81       	ldd	r18, Z+4	; 0x04
    3916:	35 81       	ldd	r19, Z+5	; 0x05
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	82 17       	cp	r24, r18
    391e:	93 07       	cpc	r25, r19
    3920:	80 f2       	brcs	.-96     	; 0x38c2 <_ZNSt6vectorIdSaIdEEC1ERKS1_+0x78>
    3922:	26 96       	adiw	r28, 0x06	; 6
    3924:	e2 e0       	ldi	r30, 0x02	; 2
    3926:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000392a <_ZNSt6vectorIdSaIdEEixEj>:
    392a:	a4 e0       	ldi	r26, 0x04	; 4
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	eb e9       	ldi	r30, 0x9B	; 155
    3930:	fc e1       	ldi	r31, 0x1C	; 28
    3932:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3936:	9a 83       	std	Y+2, r25	; 0x02
    3938:	89 83       	std	Y+1, r24	; 0x01
    393a:	7c 83       	std	Y+4, r23	; 0x04
    393c:	6b 83       	std	Y+3, r22	; 0x03
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	fc 01       	movw	r30, r24
    3944:	20 81       	ld	r18, Z
    3946:	31 81       	ldd	r19, Z+1	; 0x01
    3948:	8b 81       	ldd	r24, Y+3	; 0x03
    394a:	9c 81       	ldd	r25, Y+4	; 0x04
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	82 0f       	add	r24, r18
    3956:	93 1f       	adc	r25, r19
    3958:	24 96       	adiw	r28, 0x04	; 4
    395a:	e2 e0       	ldi	r30, 0x02	; 2
    395c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00003960 <_ZN2ee11EEMultiByteI6EEWrapIfEfE6EEReadEv>:
    3960:	a6 e0       	ldi	r26, 0x06	; 6
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	e6 eb       	ldi	r30, 0xB6	; 182
    3966:	fc e1       	ldi	r31, 0x1C	; 28
    3968:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
    3970:	8d 81       	ldd	r24, Y+5	; 0x05
    3972:	9e 81       	ldd	r25, Y+6	; 0x06
    3974:	33 d0       	rcall	.+102    	; 0x39dc <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    3976:	bc 01       	movw	r22, r24
    3978:	83 e0       	ldi	r24, 0x03	; 3
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9e 01       	movw	r18, r28
    397e:	2f 5f       	subi	r18, 0xFF	; 255
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
    3982:	82 0f       	add	r24, r18
    3984:	93 1f       	adc	r25, r19
    3986:	44 e0       	ldi	r20, 0x04	; 4
    3988:	50 e0       	ldi	r21, 0x00	; 0
    398a:	3a d8       	rcall	.-3980   	; 0x2a00 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	ab 81       	ldd	r26, Y+3	; 0x03
    3992:	bc 81       	ldd	r27, Y+4	; 0x04
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	26 96       	adiw	r28, 0x06	; 6
    399a:	e2 e0       	ldi	r30, 0x02	; 2
    399c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000039a0 <_ZN2ee11EEMultiByteI6EEWrapIfEfE7EEWriteERKf>:
    39a0:	a4 e0       	ldi	r26, 0x04	; 4
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	e6 ed       	ldi	r30, 0xD6	; 214
    39a6:	fc e1       	ldi	r31, 0x1C	; 28
    39a8:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    39ac:	9a 83       	std	Y+2, r25	; 0x02
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	7c 83       	std	Y+4, r23	; 0x04
    39b2:	6b 83       	std	Y+3, r22	; 0x03
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	9a 81       	ldd	r25, Y+2	; 0x02
    39b8:	11 d0       	rcall	.+34     	; 0x39dc <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    39ba:	bc 01       	movw	r22, r24
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	2b 81       	ldd	r18, Y+3	; 0x03
    39c2:	3c 81       	ldd	r19, Y+4	; 0x04
    39c4:	82 0f       	add	r24, r18
    39c6:	93 1f       	adc	r25, r19
    39c8:	44 e0       	ldi	r20, 0x04	; 4
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	50 d8       	rcall	.-3936   	; 0x2a6e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	04 d0       	rcall	.+8      	; 0x39dc <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>
    39d4:	24 96       	adiw	r28, 0x04	; 4
    39d6:	e2 e0       	ldi	r30, 0x02	; 2
    39d8:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000039dc <_ZN2ee11EEMultiByteI6EEWrapIfEfE4selfEv>:

        D &EEWrite( const T& v ){
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
            return self();
        }
        protected: STATIC_ACCESS
    39dc:	a2 e0       	ldi	r26, 0x02	; 2
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e4 ef       	ldi	r30, 0xF4	; 244
    39e2:	fc e1       	ldi	r31, 0x1C	; 28
    39e4:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9a 81       	ldd	r25, Y+2	; 0x02
    39f0:	22 96       	adiw	r28, 0x02	; 2
    39f2:	e2 e0       	ldi	r30, 0x02	; 2
    39f4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000039f8 <_ZN9TDSSensorC1Eiib7LCDBasei>:


//TDSSensor::TDSSensor(int pin, int printPHEvery, LCDBase lcd) :
//TDSSensor(pin, printPHEvery, false, lcd) {}

TDSSensor::TDSSensor(int pin, int printTDSEvery, bool printToLCD, LCDBase lcd, int relayPin):
    39f8:	ab e0       	ldi	r26, 0x0B	; 11
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	e2 e0       	ldi	r30, 0x02	; 2
    39fe:	fd e1       	ldi	r31, 0x1D	; 29
    3a00:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	7c 83       	std	Y+4, r23	; 0x04
    3a0a:	6b 83       	std	Y+3, r22	; 0x03
    3a0c:	5e 83       	std	Y+6, r21	; 0x06
    3a0e:	4d 83       	std	Y+5, r20	; 0x05
    3a10:	2f 83       	std	Y+7, r18	; 0x07
    3a12:	19 87       	std	Y+9, r17	; 0x09
    3a14:	08 87       	std	Y+8, r16	; 0x08
    3a16:	fb 86       	std	Y+11, r15	; 0x0b
    3a18:	ea 86       	std	Y+10, r14	; 0x0a
    _pin(pin), _printTDSEvery(printTDSEvery), _printToLCD(printToLCD), _lcd(lcd), _relayPin(relayPin) {
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a20:	3c 81       	ldd	r19, Y+4	; 0x04
    3a22:	fc 01       	movw	r30, r24
    3a24:	31 83       	std	Z+1, r19	; 0x01
    3a26:	20 83       	st	Z, r18
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	17 ae       	std	Z+63, r1	; 0x3f
    3a30:	16 ae       	std	Z+62, r1	; 0x3e
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	9a 81       	ldd	r25, Y+2	; 0x02
    3a36:	80 5c       	subi	r24, 0xC0	; 192
    3a38:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a3c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a3e:	fc 01       	movw	r30, r24
    3a40:	31 83       	std	Z+1, r19	; 0x01
    3a42:	20 83       	st	Z, r18
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	82 5b       	subi	r24, 0xB2	; 178
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a4e:	fc 01       	movw	r30, r24
    3a50:	20 83       	st	Z, r18
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	81 5b       	subi	r24, 0xB1	; 177
    3a58:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a5e:	fc 01       	movw	r30, r24
    3a60:	31 83       	std	Z+1, r19	; 0x01
    3a62:	20 83       	st	Z, r18
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	9a 81       	ldd	r25, Y+2	; 0x02
    3a68:	8e 5a       	subi	r24, 0xAE	; 174
    3a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	11 82       	std	Z+1, r1	; 0x01
    3a70:	10 82       	st	Z, r1
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	8c 5a       	subi	r24, 0xAC	; 172
    3a78:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7a:	28 85       	ldd	r18, Y+8	; 0x08
    3a7c:	39 85       	ldd	r19, Y+9	; 0x09
    3a7e:	b9 01       	movw	r22, r18
    3a80:	c5 d8       	rcall	.-3702   	; 0x2c0c <_ZN7LCDBaseC1ERKS_>
    3a82:	89 81       	ldd	r24, Y+1	; 0x01
    3a84:	9a 81       	ldd	r25, Y+2	; 0x02
    3a86:	88 58       	subi	r24, 0x88	; 136
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	60 e3       	ldi	r22, 0x30	; 48
    3a8c:	71 e0       	ldi	r23, 0x01	; 1
    3a8e:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	9a 81       	ldd	r25, Y+2	; 0x02
    3a96:	82 58       	subi	r24, 0x82	; 130
    3a98:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9a:	60 e3       	ldi	r22, 0x30	; 48
    3a9c:	71 e0       	ldi	r23, 0x01	; 1
    3a9e:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	8c 57       	subi	r24, 0x7C	; 124
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	2a eb       	ldi	r18, 0xBA	; 186
    3aac:	34 e0       	ldi	r19, 0x04	; 4
    3aae:	fc 01       	movw	r30, r24
    3ab0:	31 83       	std	Z+1, r19	; 0x01
    3ab2:	20 83       	st	Z, r18
    init();
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab8:	04 d0       	rcall	.+8      	; 0x3ac2 <_ZN9TDSSensor4initEv>
}
    3aba:	2b 96       	adiw	r28, 0x0b	; 11
    3abc:	e6 e0       	ldi	r30, 0x06	; 6
    3abe:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00003ac2 <_ZN9TDSSensor4initEv>:

//PHSensor::PHSensor() :
//PHSensor(0, 0, false) {}

void TDSSensor::init() {
    3ac2:	a6 e0       	ldi	r26, 0x06	; 6
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	e7 e6       	ldi	r30, 0x67	; 103
    3ac8:	fd e1       	ldi	r31, 0x1D	; 29
    3aca:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3ace:	9e 83       	std	Y+6, r25	; 0x06
    3ad0:	8d 83       	std	Y+5, r24	; 0x05
    //led to show board working
    pinMode(13, OUTPUT);
    3ad2:	61 e0       	ldi	r22, 0x01	; 1
    3ad4:	8d e0       	ldi	r24, 0x0D	; 13
    3ad6:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    pinMode(_relayPin, OUTPUT);
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ade:	81 5b       	subi	r24, 0xB1	; 177
    3ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <pinMode>
    //TdsOffset.load();
    //if(isnan(TdsOffset)) {
    //TdsOffset = 1210;
    //}

    double offset = TheSensorsMem.TdsOffset;
    3aee:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN6Memory13TheSensorsMemE>
    3af2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN6Memory13TheSensorsMemE+0x1>
    3af6:	04 96       	adiw	r24, 0x04	; 4
    3af8:	a7 d3       	rcall	.+1870   	; 0x4248 <_ZN6EEWrapIiEcvKiEv>
    3afa:	09 2e       	mov	r0, r25
    3afc:	00 0c       	add	r0, r0
    3afe:	aa 0b       	sbc	r26, r26
    3b00:	bb 0b       	sbc	r27, r27
    3b02:	bc 01       	movw	r22, r24
    3b04:	cd 01       	movw	r24, r26
    3b06:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	9a 83       	std	Y+2, r25	; 0x02
    3b12:	ab 83       	std	Y+3, r26	; 0x03
    3b14:	bc 83       	std	Y+4, r27	; 0x04
    if(!isnan(offset)) {
    3b16:	29 81       	ldd	r18, Y+1	; 0x01
    3b18:	3a 81       	ldd	r19, Y+2	; 0x02
    3b1a:	4b 81       	ldd	r20, Y+3	; 0x03
    3b1c:	5c 81       	ldd	r21, Y+4	; 0x04
    3b1e:	69 81       	ldd	r22, Y+1	; 0x01
    3b20:	7a 81       	ldd	r23, Y+2	; 0x02
    3b22:	8b 81       	ldd	r24, Y+3	; 0x03
    3b24:	9c 81       	ldd	r25, Y+4	; 0x04
    3b26:	0e 94 95 2a 	call	0x552a	; 0x552a <__unordsf2>
    3b2a:	88 23       	and	r24, r24
    3b2c:	81 f4       	brne	.+32     	; 0x3b4e <_ZN9TDSSensor4initEv+0x8c>
        Offset = offset;
    3b2e:	69 81       	ldd	r22, Y+1	; 0x01
    3b30:	7a 81       	ldd	r23, Y+2	; 0x02
    3b32:	8b 81       	ldd	r24, Y+3	; 0x03
    3b34:	9c 81       	ldd	r25, Y+4	; 0x04
    3b36:	0e 94 4b 29 	call	0x5296	; 0x5296 <__fixsfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	9c 01       	movw	r18, r24
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	8c 57       	subi	r24, 0x7C	; 124
    3b46:	9f 4f       	sbci	r25, 0xFF	; 255
    3b48:	fc 01       	movw	r30, r24
    3b4a:	31 83       	std	Z+1, r19	; 0x01
    3b4c:	20 83       	st	Z, r18
    }
}
    3b4e:	26 96       	adiw	r28, 0x06	; 6
    3b50:	e2 e0       	ldi	r30, 0x02	; 2
    3b52:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00003b56 <_ZN9TDSSensor6UpdateEi>:
void TDSSensor::Update(int offset) {
    3b56:	a4 e0       	ldi	r26, 0x04	; 4
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e1 eb       	ldi	r30, 0xB1	; 177
    3b5c:	fd e1       	ldi	r31, 0x1D	; 29
    3b5e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	7c 83       	std	Y+4, r23	; 0x04
    3b68:	6b 83       	std	Y+3, r22	; 0x03
    Offset = offset;
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6e:	8c 57       	subi	r24, 0x7C	; 124
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	2b 81       	ldd	r18, Y+3	; 0x03
    3b74:	3c 81       	ldd	r19, Y+4	; 0x04
    3b76:	fc 01       	movw	r30, r24
    3b78:	31 83       	std	Z+1, r19	; 0x01
    3b7a:	20 83       	st	Z, r18
    TheSensorsMem.TdsOffset = Offset;
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	9c 01       	movw	r18, r24
    3b82:	2c 57       	subi	r18, 0x7C	; 124
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZN6Memory13TheSensorsMemE>
    3b8a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_ZN6Memory13TheSensorsMemE+0x1>
    3b8e:	04 96       	adiw	r24, 0x04	; 4
    3b90:	b9 01       	movw	r22, r18
    3b92:	69 d3       	rcall	.+1746   	; 0x4266 <_ZN6EEWrapIiEaSERKi>
}
    3b94:	24 96       	adiw	r28, 0x04	; 4
    3b96:	e2 e0       	ldi	r30, 0x02	; 2
    3b98:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00003b9c <_ZN9TDSSensor6GetTDSEv>:

double TDSSensor::GetTDS() {
    3b9c:	ae e0       	ldi	r26, 0x0E	; 14
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	e4 ed       	ldi	r30, 0xD4	; 212
    3ba2:	fd e1       	ldi	r31, 0x1D	; 29
    3ba4:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    3ba8:	9e 87       	std	Y+14, r25	; 0x0e
    3baa:	8d 87       	std	Y+13, r24	; 0x0d
    //// change the analog out value:
    //analogWrite(9, outputValue);
    //double sensorVal2 = analogRead(_pin);//analogRead(1);


    TdsString = String(_tdsValue, 0).c_str();
    3bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb0:	8e 5b       	subi	r24, 0xBE	; 190
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	a2 81       	ldd	r26, Z+2	; 0x02
    3bbc:	b3 81       	ldd	r27, Z+3	; 0x03
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	37 96       	adiw	r30, 0x07	; 7
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	ac 01       	movw	r20, r24
    3bc6:	bd 01       	movw	r22, r26
    3bc8:	cf 01       	movw	r24, r30
    3bca:	0e 94 7e 31 	call	0x62fc	; 0x62fc <_ZN6StringC1Efh>
    3bce:	ce 01       	movw	r24, r28
    3bd0:	07 96       	adiw	r24, 0x07	; 7
    3bd2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZNK6String5c_strEv>
    3bd6:	9c 01       	movw	r18, r24
    3bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bdc:	88 58       	subi	r24, 0x88	; 136
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	b9 01       	movw	r22, r18
    3be2:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    3be6:	ce 01       	movw	r24, r28
    3be8:	07 96       	adiw	r24, 0x07	; 7
    3bea:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    TdsAvgString = String(_tdsValueAverage, 0).c_str();
    3bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf2:	8a 5b       	subi	r24, 0xBA	; 186
    3bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	80 81       	ld	r24, Z
    3bfa:	91 81       	ldd	r25, Z+1	; 0x01
    3bfc:	a2 81       	ldd	r26, Z+2	; 0x02
    3bfe:	b3 81       	ldd	r27, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	ac 01       	movw	r20, r24
    3c04:	bd 01       	movw	r22, r26
    3c06:	ce 01       	movw	r24, r28
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	0e 94 7e 31 	call	0x62fc	; 0x62fc <_ZN6StringC1Efh>
    3c0e:	ce 01       	movw	r24, r28
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZNK6String5c_strEv>
    3c16:	9c 01       	movw	r18, r24
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	82 58       	subi	r24, 0x82	; 130
    3c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c20:	b9 01       	movw	r22, r18
    3c22:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    3c26:	ce 01       	movw	r24, r28
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    return _tdsValue;
    3c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c32:	8e 5b       	subi	r24, 0xBE	; 190
    3c34:	9f 4f       	sbci	r25, 0xFF	; 255
    3c36:	fc 01       	movw	r30, r24
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	a2 81       	ldd	r26, Z+2	; 0x02
    3c3e:	b3 81       	ldd	r27, Z+3	; 0x03

}
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	2e 96       	adiw	r28, 0x0e	; 14
    3c46:	e2 e0       	ldi	r30, 0x02	; 2
    3c48:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00003c4c <_ZN9TDSSensor13PrintTDSToLCDEv>:
void TDSSensor::PrintTDSToLCD() {
    3c4c:	aa e1       	ldi	r26, 0x1A	; 26
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	ec e2       	ldi	r30, 0x2C	; 44
    3c52:	fe e1       	ldi	r31, 0x1E	; 30
    3c54:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    3c58:	9a 8f       	std	Y+26, r25	; 0x1a
    3c5a:	89 8f       	std	Y+25, r24	; 0x19
    GetTDS();
    3c5c:	89 8d       	ldd	r24, Y+25	; 0x19
    3c5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c60:	9d df       	rcall	.-198    	; 0x3b9c <_ZN9TDSSensor6GetTDSEv>
    static unsigned long printTime = millis();
    3c62:	8a e1       	ldi	r24, 0x1A	; 26
    3c64:	93 e0       	ldi	r25, 0x03	; 3
    3c66:	fc 01       	movw	r30, r24
    3c68:	80 81       	ld	r24, Z
    3c6a:	88 23       	and	r24, r24
    3c6c:	89 f4       	brne	.+34     	; 0x3c90 <_ZN9TDSSensor13PrintTDSToLCDEv+0x44>
    3c6e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3c7a:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3c7e:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3c82:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3c86:	8a e1       	ldi	r24, 0x1A	; 26
    3c88:	93 e0       	ldi	r25, 0x03	; 3
    3c8a:	21 e0       	ldi	r18, 0x01	; 1
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	20 83       	st	Z, r18
    if(millis() - printTime > _printTDSEvery + 400) { //Every 800 milliseconds, print a numerical, convert the state of the LED indicator
    3c90:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3c94:	9b 01       	movw	r18, r22
    3c96:	ac 01       	movw	r20, r24
    3c98:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3c9c:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3ca0:	a0 91 34 03 	lds	r26, 0x0334	; 0x800334 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3ca4:	b0 91 35 03 	lds	r27, 0x0335	; 0x800335 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    3ca8:	28 1b       	sub	r18, r24
    3caa:	39 0b       	sbc	r19, r25
    3cac:	4a 0b       	sbc	r20, r26
    3cae:	5b 0b       	sbc	r21, r27
    3cb0:	89 8d       	ldd	r24, Y+25	; 0x19
    3cb2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3cb4:	80 5c       	subi	r24, 0xC0	; 192
    3cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb8:	fc 01       	movw	r30, r24
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	80 57       	subi	r24, 0x70	; 112
    3cc0:	9e 4f       	sbci	r25, 0xFE	; 254
    3cc2:	09 2e       	mov	r0, r25
    3cc4:	00 0c       	add	r0, r0
    3cc6:	aa 0b       	sbc	r26, r26
    3cc8:	bb 0b       	sbc	r27, r27
    3cca:	61 e0       	ldi	r22, 0x01	; 1
    3ccc:	82 17       	cp	r24, r18
    3cce:	93 07       	cpc	r25, r19
    3cd0:	a4 07       	cpc	r26, r20
    3cd2:	b5 07       	cpc	r27, r21
    3cd4:	08 f0       	brcs	.+2      	; 0x3cd8 <_ZN9TDSSensor13PrintTDSToLCDEv+0x8c>
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	66 23       	and	r22, r22
    3cda:	09 f4       	brne	.+2      	; 0x3cde <_ZN9TDSSensor13PrintTDSToLCDEv+0x92>
    3cdc:	7f c0       	rjmp	.+254    	; 0x3ddc <_ZN9TDSSensor13PrintTDSToLCDEv+0x190>
        if(_printToLCD) {
    3cde:	89 8d       	ldd	r24, Y+25	; 0x19
    3ce0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ce2:	82 5b       	subi	r24, 0xB2	; 178
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	80 81       	ld	r24, Z
    3cea:	88 23       	and	r24, r24
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <_ZN9TDSSensor13PrintTDSToLCDEv+0xa4>
    3cee:	60 c0       	rjmp	.+192    	; 0x3db0 <_ZN9TDSSensor13PrintTDSToLCDEv+0x164>
            String enabled = "";
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	0d 96       	adiw	r24, 0x0d	; 13
    3cf4:	60 e3       	ldi	r22, 0x30	; 48
    3cf6:	71 e0       	ldi	r23, 0x01	; 1
    3cf8:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
            if(_enabled) {
    3cfc:	89 8d       	ldd	r24, Y+25	; 0x19
    3cfe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d00:	8f 5a       	subi	r24, 0xAF	; 175
    3d02:	9f 4f       	sbci	r25, 0xFF	; 255
    3d04:	fc 01       	movw	r30, r24
    3d06:	80 81       	ld	r24, Z
    3d08:	88 23       	and	r24, r24
    3d0a:	31 f0       	breq	.+12     	; 0x3d18 <_ZN9TDSSensor13PrintTDSToLCDEv+0xcc>
                enabled = "<";
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	0d 96       	adiw	r24, 0x0d	; 13
    3d10:	61 e3       	ldi	r22, 0x31	; 49
    3d12:	71 e0       	ldi	r23, 0x01	; 1
    3d14:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3d18:	89 8d       	ldd	r24, Y+25	; 0x19
    3d1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d1c:	8c 01       	movw	r16, r24
    3d1e:	08 58       	subi	r16, 0x88	; 136
    3d20:	1f 4f       	sbci	r17, 0xFF	; 255
    3d22:	89 8d       	ldd	r24, Y+25	; 0x19
    3d24:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d26:	7c 01       	movw	r14, r24
    3d28:	fe e7       	ldi	r31, 0x7E	; 126
    3d2a:	ef 0e       	add	r14, r31
    3d2c:	f1 1c       	adc	r15, r1
    3d2e:	ce 01       	movw	r24, r28
    3d30:	07 96       	adiw	r24, 0x07	; 7
    3d32:	63 e3       	ldi	r22, 0x33	; 51
    3d34:	71 e0       	ldi	r23, 0x01	; 1
    3d36:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN15StringSumHelperC1EPKc>
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	07 96       	adiw	r24, 0x07	; 7
    3d3e:	b7 01       	movw	r22, r14
    3d40:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    3d44:	69 e3       	ldi	r22, 0x39	; 57
    3d46:	71 e0       	ldi	r23, 0x01	; 1
    3d48:	0e 94 37 32 	call	0x646e	; 0x646e <_ZplRK15StringSumHelperPKc>
    3d4c:	b8 01       	movw	r22, r16
    3d4e:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    3d52:	9c 01       	movw	r18, r24
    3d54:	ce 01       	movw	r24, r28
    3d56:	0d 96       	adiw	r24, 0x0d	; 13
    3d58:	bc 01       	movw	r22, r24
    3d5a:	c9 01       	movw	r24, r18
    3d5c:	0e 94 26 32 	call	0x644c	; 0x644c <_ZplRK15StringSumHelperRK6String>
    3d60:	9c 01       	movw	r18, r24
    3d62:	ce 01       	movw	r24, r28
    3d64:	43 96       	adiw	r24, 0x13	; 19
    3d66:	b9 01       	movw	r22, r18
    3d68:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	07 96       	adiw	r24, 0x07	; 7
    3d70:	8e db       	rcall	.-2276   	; 0x348e <_ZN15StringSumHelperD1Ev>
            _lcd.PrintLine(1, text);
    3d72:	ce 01       	movw	r24, r28
    3d74:	43 96       	adiw	r24, 0x13	; 19
    3d76:	bc 01       	movw	r22, r24
    3d78:	ce 01       	movw	r24, r28
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    3d80:	89 8d       	ldd	r24, Y+25	; 0x19
    3d82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d84:	8c 5a       	subi	r24, 0xAC	; 172
    3d86:	9f 4f       	sbci	r25, 0xFF	; 255
    3d88:	9e 01       	movw	r18, r28
    3d8a:	2f 5f       	subi	r18, 0xFF	; 255
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	a9 01       	movw	r20, r18
    3d90:	61 e0       	ldi	r22, 0x01	; 1
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7LCDBase9PrintLineEs6String>
    3d98:	ce 01       	movw	r24, r28
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
        if(_printToLCD) {
            String enabled = "";
            if(_enabled) {
                enabled = "<";
            }
            String text = "TDS: " + TdsAvgString + ", " + TdsString + enabled;
    3da0:	ce 01       	movw	r24, r28
    3da2:	43 96       	adiw	r24, 0x13	; 19
    3da4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
            _lcd.PrintLine(1, text);
    3da8:	ce 01       	movw	r24, r28
    3daa:	0d 96       	adiw	r24, 0x0d	; 13
    3dac:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>

        }
        digitalWrite(13, digitalRead(13) ^ 1);
    3db0:	8d e0       	ldi	r24, 0x0D	; 13
    3db2:	0e 94 54 30 	call	0x60a8	; 0x60a8 <digitalRead>
    3db6:	98 2f       	mov	r25, r24
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	89 27       	eor	r24, r25
    3dbc:	68 2f       	mov	r22, r24
    3dbe:	8d e0       	ldi	r24, 0x0D	; 13
    3dc0:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
        printTime = millis();
    3dc4:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime>
    3dd0:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x1>
    3dd4:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x2>
    3dd8:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <_ZZN9TDSSensor13PrintTDSToLCDEvE9printTime+0x3>
    }
}
    3ddc:	6a 96       	adiw	r28, 0x1a	; 26
    3dde:	e6 e0       	ldi	r30, 0x06	; 6
    3de0:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00003de4 <_ZN9TDSSensor12CalculateTDSEv>:
void TDSSensor::CalculateTDS() {
    3de4:	a2 e0       	ldi	r26, 0x02	; 2
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e8 ef       	ldi	r30, 0xF8	; 248
    3dea:	fe e1       	ldi	r31, 0x1E	; 30
    3dec:	0c 94 e7 33 	jmp	0x67ce	; 0x67ce <__prologue_saves__+0x14>
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01

    if(!_enabled) {
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	8f 5a       	subi	r24, 0xAF	; 175
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	90 81       	ld	r25, Z
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	89 27       	eor	r24, r25
    3e04:	88 23       	and	r24, r24
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <_ZN9TDSSensor12CalculateTDSEv+0x26>
        return;
    3e08:	1b c1       	rjmp	.+566    	; 0x4040 <_ZN9TDSSensor12CalculateTDSEv+0x25c>
    }

    _tdsValue = getTDSValue();
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	1c d1       	rcall	.+568    	; 0x4048 <_ZN9TDSSensor11getTDSValueEv>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	29 81       	ldd	r18, Y+1	; 0x01
    3e16:	3a 81       	ldd	r19, Y+2	; 0x02
    3e18:	2e 5b       	subi	r18, 0xBE	; 190
    3e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1c:	f9 01       	movw	r30, r18
    3e1e:	80 83       	st	Z, r24
    3e20:	91 83       	std	Z+1, r25	; 0x01
    3e22:	a2 83       	std	Z+2, r26	; 0x02
    3e24:	b3 83       	std	Z+3, r27	; 0x03

    if(_numOfSamples <= 1) {
    3e26:	89 81       	ldd	r24, Y+1	; 0x01
    3e28:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2a:	8e 5a       	subi	r24, 0xAE	; 174
    3e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	91 81       	ldd	r25, Z+1	; 0x01
    3e34:	02 97       	sbiw	r24, 0x02	; 2
    3e36:	dc f4       	brge	.+54     	; 0x3e6e <_ZN9TDSSensor12CalculateTDSEv+0x8a>
        _numOfSamples = 1;
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3c:	8e 5a       	subi	r24, 0xAE	; 174
    3e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e40:	21 e0       	ldi	r18, 0x01	; 1
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	fc 01       	movw	r30, r24
    3e46:	31 83       	std	Z+1, r19	; 0x01
    3e48:	20 83       	st	Z, r18
        _tdsTotal = _tdsValue;
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	8e 5b       	subi	r24, 0xBE	; 190
    3e50:	9f 4f       	sbci	r25, 0xFF	; 255
    3e52:	fc 01       	movw	r30, r24
    3e54:	80 81       	ld	r24, Z
    3e56:	91 81       	ldd	r25, Z+1	; 0x01
    3e58:	a2 81       	ldd	r26, Z+2	; 0x02
    3e5a:	b3 81       	ldd	r27, Z+3	; 0x03
    3e5c:	29 81       	ldd	r18, Y+1	; 0x01
    3e5e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e60:	26 5b       	subi	r18, 0xB6	; 182
    3e62:	3f 4f       	sbci	r19, 0xFF	; 255
    3e64:	f9 01       	movw	r30, r18
    3e66:	80 83       	st	Z, r24
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	a2 83       	std	Z+2, r26	; 0x02
    3e6c:	b3 83       	std	Z+3, r27	; 0x03
    }

    //_tdsTotal = getTDSValue();

    static unsigned long samplingTime = millis();
    3e6e:	82 e2       	ldi	r24, 0x22	; 34
    3e70:	93 e0       	ldi	r25, 0x03	; 3
    3e72:	fc 01       	movw	r30, r24
    3e74:	80 81       	ld	r24, Z
    3e76:	88 23       	and	r24, r24
    3e78:	89 f4       	brne	.+34     	; 0x3e9c <_ZN9TDSSensor12CalculateTDSEv+0xb8>
    3e7a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    3e86:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    3e8a:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    3e8e:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    3e92:	82 e2       	ldi	r24, 0x22	; 34
    3e94:	93 e0       	ldi	r25, 0x03	; 3
    3e96:	21 e0       	ldi	r18, 0x01	; 1
    3e98:	fc 01       	movw	r30, r24
    3e9a:	20 83       	st	Z, r18
    if(millis() - samplingTime > 60000) { //wait 1 min inbetween readings
    3e9c:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3ea0:	9b 01       	movw	r18, r22
    3ea2:	ac 01       	movw	r20, r24
    3ea4:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    3ea8:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    3eac:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    3eb0:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    3eb4:	79 01       	movw	r14, r18
    3eb6:	8a 01       	movw	r16, r20
    3eb8:	e8 1a       	sub	r14, r24
    3eba:	f9 0a       	sbc	r15, r25
    3ebc:	0a 0b       	sbc	r16, r26
    3ebe:	1b 0b       	sbc	r17, r27
    3ec0:	d8 01       	movw	r26, r16
    3ec2:	c7 01       	movw	r24, r14
    3ec4:	21 e0       	ldi	r18, 0x01	; 1
    3ec6:	81 36       	cpi	r24, 0x61	; 97
    3ec8:	9a 4e       	sbci	r25, 0xEA	; 234
    3eca:	a1 05       	cpc	r26, r1
    3ecc:	b1 05       	cpc	r27, r1
    3ece:	08 f4       	brcc	.+2      	; 0x3ed2 <_ZN9TDSSensor12CalculateTDSEv+0xee>
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	22 23       	and	r18, r18
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <_ZN9TDSSensor12CalculateTDSEv+0xf4>
    3ed6:	4c c0       	rjmp	.+152    	; 0x3f70 <_ZN9TDSSensor12CalculateTDSEv+0x18c>

        _tdsValue = getTDSValue();
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	9a 81       	ldd	r25, Y+2	; 0x02
    3edc:	b5 d0       	rcall	.+362    	; 0x4048 <_ZN9TDSSensor11getTDSValueEv>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	29 81       	ldd	r18, Y+1	; 0x01
    3ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ee6:	2e 5b       	subi	r18, 0xBE	; 190
    3ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eea:	f9 01       	movw	r30, r18
    3eec:	80 83       	st	Z, r24
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	a2 83       	std	Z+2, r26	; 0x02
    3ef2:	b3 83       	std	Z+3, r27	; 0x03
        _tdsTotal += _tdsValue;
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	86 5b       	subi	r24, 0xB6	; 182
    3efa:	9f 4f       	sbci	r25, 0xFF	; 255
    3efc:	fc 01       	movw	r30, r24
    3efe:	80 81       	ld	r24, Z
    3f00:	91 81       	ldd	r25, Z+1	; 0x01
    3f02:	a2 81       	ldd	r26, Z+2	; 0x02
    3f04:	b3 81       	ldd	r27, Z+3	; 0x03
    3f06:	29 81       	ldd	r18, Y+1	; 0x01
    3f08:	3a 81       	ldd	r19, Y+2	; 0x02
    3f0a:	2e 5b       	subi	r18, 0xBE	; 190
    3f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0e:	f9 01       	movw	r30, r18
    3f10:	20 81       	ld	r18, Z
    3f12:	31 81       	ldd	r19, Z+1	; 0x01
    3f14:	42 81       	ldd	r20, Z+2	; 0x02
    3f16:	53 81       	ldd	r21, Z+3	; 0x03
    3f18:	bc 01       	movw	r22, r24
    3f1a:	cd 01       	movw	r24, r26
    3f1c:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	29 81       	ldd	r18, Y+1	; 0x01
    3f26:	3a 81       	ldd	r19, Y+2	; 0x02
    3f28:	26 5b       	subi	r18, 0xB6	; 182
    3f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2c:	f9 01       	movw	r30, r18
    3f2e:	80 83       	st	Z, r24
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	a2 83       	std	Z+2, r26	; 0x02
    3f34:	b3 83       	std	Z+3, r27	; 0x03
        _numOfSamples++;
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	8e 5a       	subi	r24, 0xAE	; 174
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	fc 01       	movw	r30, r24
    3f40:	80 81       	ld	r24, Z
    3f42:	91 81       	ldd	r25, Z+1	; 0x01
    3f44:	9c 01       	movw	r18, r24
    3f46:	2f 5f       	subi	r18, 0xFF	; 255
    3f48:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4e:	8e 5a       	subi	r24, 0xAE	; 174
    3f50:	9f 4f       	sbci	r25, 0xFF	; 255
    3f52:	fc 01       	movw	r30, r24
    3f54:	31 83       	std	Z+1, r19	; 0x01
    3f56:	20 83       	st	Z, r18

        samplingTime = millis();
    3f58:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime>
    3f64:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x1>
    3f68:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x2>
    3f6c:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <_ZZN9TDSSensor12CalculateTDSEvE12samplingTime+0x3>
    }

    _tdsValueAverage = _tdsTotal / _numOfSamples;
    3f70:	89 81       	ldd	r24, Y+1	; 0x01
    3f72:	9a 81       	ldd	r25, Y+2	; 0x02
    3f74:	86 5b       	subi	r24, 0xB6	; 182
    3f76:	9f 4f       	sbci	r25, 0xFF	; 255
    3f78:	fc 01       	movw	r30, r24
    3f7a:	c0 80       	ld	r12, Z
    3f7c:	d1 80       	ldd	r13, Z+1	; 0x01
    3f7e:	e2 80       	ldd	r14, Z+2	; 0x02
    3f80:	f3 80       	ldd	r15, Z+3	; 0x03
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	9a 81       	ldd	r25, Y+2	; 0x02
    3f86:	8e 5a       	subi	r24, 0xAE	; 174
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	09 2e       	mov	r0, r25
    3f92:	00 0c       	add	r0, r0
    3f94:	aa 0b       	sbc	r26, r26
    3f96:	bb 0b       	sbc	r27, r27
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9c 01       	movw	r18, r24
    3fa6:	ad 01       	movw	r20, r26
    3fa8:	c7 01       	movw	r24, r14
    3faa:	b6 01       	movw	r22, r12
    3fac:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	29 81       	ldd	r18, Y+1	; 0x01
    3fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3fb8:	2a 5b       	subi	r18, 0xBA	; 186
    3fba:	3f 4f       	sbci	r19, 0xFF	; 255
    3fbc:	f9 01       	movw	r30, r18
    3fbe:	80 83       	st	Z, r24
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	a2 83       	std	Z+2, r26	; 0x02
    3fc4:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.println(_numOfSamples);
    //Serial.print(F("_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    //soften
    _tdsValueAverage = (_tdsValueAverage + _tdsValue) / 2;
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	8a 5b       	subi	r24, 0xBA	; 186
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	fc 01       	movw	r30, r24
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	a2 81       	ldd	r26, Z+2	; 0x02
    3fd6:	b3 81       	ldd	r27, Z+3	; 0x03
    3fd8:	29 81       	ldd	r18, Y+1	; 0x01
    3fda:	3a 81       	ldd	r19, Y+2	; 0x02
    3fdc:	2e 5b       	subi	r18, 0xBE	; 190
    3fde:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe0:	f9 01       	movw	r30, r18
    3fe2:	20 81       	ld	r18, Z
    3fe4:	31 81       	ldd	r19, Z+1	; 0x01
    3fe6:	42 81       	ldd	r20, Z+2	; 0x02
    3fe8:	53 81       	ldd	r21, Z+3	; 0x03
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__addsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	50 e4       	ldi	r21, 0x40	; 64
    3ffe:	bc 01       	movw	r22, r24
    4000:	cd 01       	movw	r24, r26
    4002:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__divsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	29 81       	ldd	r18, Y+1	; 0x01
    400c:	3a 81       	ldd	r19, Y+2	; 0x02
    400e:	2a 5b       	subi	r18, 0xBA	; 186
    4010:	3f 4f       	sbci	r19, 0xFF	; 255
    4012:	f9 01       	movw	r30, r18
    4014:	80 83       	st	Z, r24
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	a2 83       	std	Z+2, r26	; 0x02
    401a:	b3 83       	std	Z+3, r27	; 0x03
    //Serial.print(F("sft_tdsValueAverage: "));
    //Serial.println(_tdsValueAverage, 2);

    if(_numOfSamples > 10) {
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	8e 5a       	subi	r24, 0xAE	; 174
    4022:	9f 4f       	sbci	r25, 0xFF	; 255
    4024:	fc 01       	movw	r30, r24
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	0b 97       	sbiw	r24, 0x0b	; 11
    402c:	4c f0       	brlt	.+18     	; 0x4040 <_ZN9TDSSensor12CalculateTDSEv+0x25c>
        _numOfSamples = 1;
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	9a 81       	ldd	r25, Y+2	; 0x02
    4032:	8e 5a       	subi	r24, 0xAE	; 174
    4034:	9f 4f       	sbci	r25, 0xFF	; 255
    4036:	21 e0       	ldi	r18, 0x01	; 1
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	fc 01       	movw	r30, r24
    403c:	31 83       	std	Z+1, r19	; 0x01
    403e:	20 83       	st	Z, r18
    }

}
    4040:	22 96       	adiw	r28, 0x02	; 2
    4042:	e8 e0       	ldi	r30, 0x08	; 8
    4044:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__epilogue_restores__+0x14>

00004048 <_ZN9TDSSensor11getTDSValueEv>:

double TDSSensor::getTDSValue() {
    4048:	a0 e1       	ldi	r26, 0x10	; 16
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	ea e2       	ldi	r30, 0x2A	; 42
    404e:	f0 e2       	ldi	r31, 0x20	; 32
    4050:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    4054:	98 8b       	std	Y+16, r25	; 0x10
    4056:	8f 87       	std	Y+15, r24	; 0x0f
    static unsigned long samplingTime = millis();
    4058:	8a e2       	ldi	r24, 0x2A	; 42
    405a:	93 e0       	ldi	r25, 0x03	; 3
    405c:	fc 01       	movw	r30, r24
    405e:	80 81       	ld	r24, Z
    4060:	88 23       	and	r24, r24
    4062:	89 f4       	brne	.+34     	; 0x4086 <_ZN9TDSSensor11getTDSValueEv+0x3e>
    4064:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4070:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    4074:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    4078:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    407c:	8a e2       	ldi	r24, 0x2A	; 42
    407e:	93 e0       	ldi	r25, 0x03	; 3
    4080:	21 e0       	ldi	r18, 0x01	; 1
    4082:	fc 01       	movw	r30, r24
    4084:	20 83       	st	Z, r18
    if(millis() - samplingTime > 500) {//wait .5 sec between readings, according to spec
    4086:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <millis>
    408a:	9b 01       	movw	r18, r22
    408c:	ac 01       	movw	r20, r24
    408e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZZN9TDSSensor11getTDSValueEvE12samplingTime>
    4092:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x1>
    4096:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x2>
    409a:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <_ZZN9TDSSensor11getTDSValueEvE12samplingTime+0x3>
    409e:	79 01       	movw	r14, r18
    40a0:	8a 01       	movw	r16, r20
    40a2:	e8 1a       	sub	r14, r24
    40a4:	f9 0a       	sbc	r15, r25
    40a6:	0a 0b       	sbc	r16, r26
    40a8:	1b 0b       	sbc	r17, r27
    40aa:	d8 01       	movw	r26, r16
    40ac:	c7 01       	movw	r24, r14
    40ae:	21 e0       	ldi	r18, 0x01	; 1
    40b0:	85 3f       	cpi	r24, 0xF5	; 245
    40b2:	91 40       	sbci	r25, 0x01	; 1
    40b4:	a1 05       	cpc	r26, r1
    40b6:	b1 05       	cpc	r27, r1
    40b8:	08 f4       	brcc	.+2      	; 0x40bc <_ZN9TDSSensor11getTDSValueEv+0x74>
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	22 23       	and	r18, r18
    40be:	09 f4       	brne	.+2      	; 0x40c2 <_ZN9TDSSensor11getTDSValueEv+0x7a>
    40c0:	75 c0       	rjmp	.+234    	; 0x41ac <_ZN9TDSSensor11getTDSValueEv+0x164>
        int numOfSamples = 30;
    40c2:	8e e1       	ldi	r24, 0x1E	; 30
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9a 83       	std	Y+2, r25	; 0x02
    40c8:	89 83       	std	Y+1, r24	; 0x01
        _tdsAverage[_tdsArrayIndex++] = analogRead(_pin);
    40ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    40cc:	98 89       	ldd	r25, Y+16	; 0x10
    40ce:	fc 01       	movw	r30, r24
    40d0:	06 ad       	ldd	r16, Z+62	; 0x3e
    40d2:	17 ad       	ldd	r17, Z+63	; 0x3f
    40d4:	98 01       	movw	r18, r16
    40d6:	2f 5f       	subi	r18, 0xFF	; 255
    40d8:	3f 4f       	sbci	r19, 0xFF	; 255
    40da:	8f 85       	ldd	r24, Y+15	; 0x0f
    40dc:	98 89       	ldd	r25, Y+16	; 0x10
    40de:	fc 01       	movw	r30, r24
    40e0:	37 af       	std	Z+63, r19	; 0x3f
    40e2:	26 af       	std	Z+62, r18	; 0x3e
    40e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e6:	98 89       	ldd	r25, Y+16	; 0x10
    40e8:	fc 01       	movw	r30, r24
    40ea:	80 81       	ld	r24, Z
    40ec:	91 81       	ldd	r25, Z+1	; 0x01
    40ee:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <analogRead>
    40f2:	ac 01       	movw	r20, r24
    40f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    40f6:	38 89       	ldd	r19, Y+16	; 0x10
    40f8:	c8 01       	movw	r24, r16
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	82 0f       	add	r24, r18
    4102:	93 1f       	adc	r25, r19
    4104:	fc 01       	movw	r30, r24
    4106:	51 83       	std	Z+1, r21	; 0x01
    4108:	40 83       	st	Z, r20
        if(_tdsArrayIndex == numOfSamples) {
    410a:	8f 85       	ldd	r24, Y+15	; 0x0f
    410c:	98 89       	ldd	r25, Y+16	; 0x10
    410e:	fc 01       	movw	r30, r24
    4110:	26 ad       	ldd	r18, Z+62	; 0x3e
    4112:	37 ad       	ldd	r19, Z+63	; 0x3f
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	9a 81       	ldd	r25, Y+2	; 0x02
    4118:	28 17       	cp	r18, r24
    411a:	39 07       	cpc	r19, r25
    411c:	29 f4       	brne	.+10     	; 0x4128 <_ZN9TDSSensor11getTDSValueEv+0xe0>
            _tdsArrayIndex = 0;
    411e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4120:	98 89       	ldd	r25, Y+16	; 0x10
    4122:	fc 01       	movw	r30, r24
    4124:	17 ae       	std	Z+63, r1	; 0x3f
    4126:	16 ae       	std	Z+62, r1	; 0x3e
        }
        double tdsAvg = MathExt::CalculateAverage(_tdsAverage, numOfSamples);
    4128:	8f 85       	ldd	r24, Y+15	; 0x0f
    412a:	98 89       	ldd	r25, Y+16	; 0x10
    412c:	02 96       	adiw	r24, 0x02	; 2
    412e:	29 81       	ldd	r18, Y+1	; 0x01
    4130:	3a 81       	ldd	r19, Y+2	; 0x02
    4132:	b9 01       	movw	r22, r18
    4134:	0e 94 98 10 	call	0x2130	; 0x2130 <_ZN7MathExt16CalculateAverageEPii>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	8b 83       	std	Y+3, r24	; 0x03
    413e:	9c 83       	std	Y+4, r25	; 0x04
    4140:	ad 83       	std	Y+5, r26	; 0x05
    4142:	be 83       	std	Y+6, r27	; 0x06
        double voltage = tdsAvg * (5.0 / 1024);
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 ea       	ldi	r20, 0xA0	; 160
    414a:	5b e3       	ldi	r21, 0x3B	; 59
    414c:	6b 81       	ldd	r22, Y+3	; 0x03
    414e:	7c 81       	ldd	r23, Y+4	; 0x04
    4150:	8d 81       	ldd	r24, Y+5	; 0x05
    4152:	9e 81       	ldd	r25, Y+6	; 0x06
    4154:	0e 94 32 2a 	call	0x5464	; 0x5464 <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	8f 83       	std	Y+7, r24	; 0x07
    415e:	98 87       	std	Y+8, r25	; 0x08
    4160:	a9 87       	std	Y+9, r26	; 0x09
    4162:	ba 87       	std	Y+10, r27	; 0x0a
        double tankTDS = voltage * Offset;
    4164:	8f 85       	ldd	r24, Y+15	; 0x0f
    4166:	98 89       	ldd	r25, Y+16	; 0x10
    4168:	8c 57       	subi	r24, 0x7C	; 124
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	fc 01       	movw	r30, r24
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	09 2e       	mov	r0, r25
    4174:	00 0c       	add	r0, r0
    4176:	aa 0b       	sbc	r26, r26
    4178:	bb 0b       	sbc	r27, r27
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <__floatsisf>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	2f 81       	ldd	r18, Y+7	; 0x07
    4188:	38 85       	ldd	r19, Y+8	; 0x08
    418a:	49 85       	ldd	r20, Y+9	; 0x09
    418c:	5a 85       	ldd	r21, Y+10	; 0x0a
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 32 2a 	call	0x5464	; 0x5464 <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	8b 87       	std	Y+11, r24	; 0x0b
    419c:	9c 87       	std	Y+12, r25	; 0x0c
    419e:	ad 87       	std	Y+13, r26	; 0x0d
    41a0:	be 87       	std	Y+14, r27	; 0x0e

        return tankTDS;
    41a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    41a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    41a8:	be 85       	ldd	r27, Y+14	; 0x0e
    41aa:	09 c0       	rjmp	.+18     	; 0x41be <_ZN9TDSSensor11getTDSValueEv+0x176>
        samplingTime = millis();
    }
    return _tdsValue;
    41ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ae:	98 89       	ldd	r25, Y+16	; 0x10
    41b0:	8e 5b       	subi	r24, 0xBE	; 190
    41b2:	9f 4f       	sbci	r25, 0xFF	; 255
    41b4:	fc 01       	movw	r30, r24
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	a2 81       	ldd	r26, Z+2	; 0x02
    41bc:	b3 81       	ldd	r27, Z+3	; 0x03

}
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	60 96       	adiw	r28, 0x10	; 16
    41c4:	e6 e0       	ldi	r30, 0x06	; 6
    41c6:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

000041ca <_ZN9TDSSensor6TurnOnEv>:


void TDSSensor::TurnOn() {
    41ca:	a2 e0       	ldi	r26, 0x02	; 2
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	eb ee       	ldi	r30, 0xEB	; 235
    41d0:	f0 e2       	ldi	r31, 0x20	; 32
    41d2:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    41d6:	9a 83       	std	Y+2, r25	; 0x02
    41d8:	89 83       	std	Y+1, r24	; 0x01
    _enabled = true;
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	8f 5a       	subi	r24, 0xAF	; 175
    41e0:	9f 4f       	sbci	r25, 0xFF	; 255
    41e2:	21 e0       	ldi	r18, 0x01	; 1
    41e4:	fc 01       	movw	r30, r24
    41e6:	20 83       	st	Z, r18
    digitalWrite(_relayPin, HIGH);
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	81 5b       	subi	r24, 0xB1	; 177
    41ee:	9f 4f       	sbci	r25, 0xFF	; 255
    41f0:	fc 01       	movw	r30, r24
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	61 e0       	ldi	r22, 0x01	; 1
    41f8:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
}
    41fc:	22 96       	adiw	r28, 0x02	; 2
    41fe:	e2 e0       	ldi	r30, 0x02	; 2
    4200:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004204 <_ZN9TDSSensor7TurnOffEv>:

void TDSSensor::TurnOff() {
    4204:	a2 e0       	ldi	r26, 0x02	; 2
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	e8 e0       	ldi	r30, 0x08	; 8
    420a:	f1 e2       	ldi	r31, 0x21	; 33
    420c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	89 83       	std	Y+1, r24	; 0x01
    _enabled = false;
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	8f 5a       	subi	r24, 0xAF	; 175
    421a:	9f 4f       	sbci	r25, 0xFF	; 255
    421c:	fc 01       	movw	r30, r24
    421e:	10 82       	st	Z, r1
    digitalWrite(_relayPin, LOW);
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	9a 81       	ldd	r25, Y+2	; 0x02
    4224:	81 5b       	subi	r24, 0xB1	; 177
    4226:	9f 4f       	sbci	r25, 0xFF	; 255
    4228:	fc 01       	movw	r30, r24
    422a:	80 81       	ld	r24, Z
    422c:	91 81       	ldd	r25, Z+1	; 0x01
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	0e 94 25 30 	call	0x604a	; 0x604a <digitalWrite>
    delay(1000);
    4234:	68 ee       	ldi	r22, 0xE8	; 232
    4236:	73 e0       	ldi	r23, 0x03	; 3
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <delay>

}
    4240:	22 96       	adiw	r28, 0x02	; 2
    4242:	e2 e0       	ldi	r30, 0x02	; 2
    4244:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004248 <_ZN6EEWrapIiEcvKiEv>:
            ee::EEMode<T>::Extension{

        using ee::EEMode<T>::Interface::EERead;
        using ee::EEMode<T>::Interface::EEWrite;

        operator const T() { return EERead(); }
    4248:	a2 e0       	ldi	r26, 0x02	; 2
    424a:	b0 e0       	ldi	r27, 0x00	; 0
    424c:	ea e2       	ldi	r30, 0x2A	; 42
    424e:	f1 e2       	ldi	r31, 0x21	; 33
    4250:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	18 d0       	rcall	.+48     	; 0x428e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>
    425e:	22 96       	adiw	r28, 0x02	; 2
    4260:	e2 e0       	ldi	r30, 0x02	; 2
    4262:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004266 <_ZN6EEWrapIiEaSERKi>:
        EEWrap &operator =( const T &in ){  return EEWrite( in ); }
    4266:	a4 e0       	ldi	r26, 0x04	; 4
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	e9 e3       	ldi	r30, 0x39	; 57
    426c:	f1 e2       	ldi	r31, 0x21	; 33
    426e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4272:	9a 83       	std	Y+2, r25	; 0x02
    4274:	89 83       	std	Y+1, r24	; 0x01
    4276:	7c 83       	std	Y+4, r23	; 0x04
    4278:	6b 83       	std	Y+3, r22	; 0x03
    427a:	2b 81       	ldd	r18, Y+3	; 0x03
    427c:	3c 81       	ldd	r19, Y+4	; 0x04
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	b9 01       	movw	r22, r18
    4284:	21 d0       	rcall	.+66     	; 0x42c8 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>
    4286:	24 96       	adiw	r28, 0x04	; 4
    4288:	e2 e0       	ldi	r30, 0x02	; 2
    428a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000428e <_ZN2ee11EEMultiByteI6EEWrapIiEiE6EEReadEv>:

    template< typename D, typename T >
    class EEMultiByte{
        public:

        T EERead( void ){
    428e:	a4 e0       	ldi	r26, 0x04	; 4
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	ed e4       	ldi	r30, 0x4D	; 77
    4294:	f1 e2       	ldi	r31, 0x21	; 33
    4296:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    429a:	9c 83       	std	Y+4, r25	; 0x04
    429c:	8b 83       	std	Y+3, r24	; 0x03
            T ret;
            tools::EEReadBlockElement( (char*)&ret + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    429e:	8b 81       	ldd	r24, Y+3	; 0x03
    42a0:	9c 81       	ldd	r25, Y+4	; 0x04
    42a2:	31 d0       	rcall	.+98     	; 0x4306 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    42a4:	bc 01       	movw	r22, r24
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	9e 01       	movw	r18, r28
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	82 0f       	add	r24, r18
    42b2:	93 1f       	adc	r25, r19
    42b4:	42 e0       	ldi	r20, 0x02	; 2
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	0e 94 00 15 	call	0x2a00	; 0x2a00 <_ZN2ee5tools18EEReadBlockElementEPcPhj>
            return(ret);
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	9a 81       	ldd	r25, Y+2	; 0x02
        }
    42c0:	24 96       	adiw	r28, 0x04	; 4
    42c2:	e2 e0       	ldi	r30, 0x02	; 2
    42c4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000042c8 <_ZN2ee11EEMultiByteI6EEWrapIiEiE7EEWriteERKi>:

        D &EEWrite( const T& v ){
    42c8:	a4 e0       	ldi	r26, 0x04	; 4
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	ea e6       	ldi	r30, 0x6A	; 106
    42ce:	f1 e2       	ldi	r31, 0x21	; 33
    42d0:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    42d4:	9a 83       	std	Y+2, r25	; 0x02
    42d6:	89 83       	std	Y+1, r24	; 0x01
    42d8:	7c 83       	std	Y+4, r23	; 0x04
    42da:	6b 83       	std	Y+3, r22	; 0x03
            tools::EEWriteBlockElement( (const char*) &v + sizeof(T) - 1, uptr(&self()), sizeof(T) );
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	9a 81       	ldd	r25, Y+2	; 0x02
    42e0:	12 d0       	rcall	.+36     	; 0x4306 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
    42e2:	bc 01       	movw	r22, r24
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	2b 81       	ldd	r18, Y+3	; 0x03
    42ea:	3c 81       	ldd	r19, Y+4	; 0x04
    42ec:	82 0f       	add	r24, r18
    42ee:	93 1f       	adc	r25, r19
    42f0:	42 e0       	ldi	r20, 0x02	; 2
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN2ee5tools19EEWriteBlockElementEPKcPhj>
            return self();
    42f8:	89 81       	ldd	r24, Y+1	; 0x01
    42fa:	9a 81       	ldd	r25, Y+2	; 0x02
    42fc:	04 d0       	rcall	.+8      	; 0x4306 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>
        }
    42fe:	24 96       	adiw	r28, 0x04	; 4
    4300:	e2 e0       	ldi	r30, 0x02	; 2
    4302:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004306 <_ZN2ee11EEMultiByteI6EEWrapIiEiE4selfEv>:
        protected: STATIC_ACCESS
    4306:	a2 e0       	ldi	r26, 0x02	; 2
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	e9 e8       	ldi	r30, 0x89	; 137
    430c:	f1 e2       	ldi	r31, 0x21	; 33
    430e:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4312:	9a 83       	std	Y+2, r25	; 0x02
    4314:	89 83       	std	Y+1, r24	; 0x01
    4316:	89 81       	ldd	r24, Y+1	; 0x01
    4318:	9a 81       	ldd	r25, Y+2	; 0x02
    431a:	22 96       	adiw	r28, 0x02	; 2
    431c:	e2 e0       	ldi	r30, 0x02	; 2
    431e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004322 <_ZNK6String6lengthEv>:
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4322:	a2 e0       	ldi	r26, 0x02	; 2
    4324:	b0 e0       	ldi	r27, 0x00	; 0
    4326:	e7 e9       	ldi	r30, 0x97	; 151
    4328:	f1 e2       	ldi	r31, 0x21	; 33
    432a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    432e:	9a 83       	std	Y+2, r25	; 0x02
    4330:	89 83       	std	Y+1, r24	; 0x01
    4332:	89 81       	ldd	r24, Y+1	; 0x01
    4334:	9a 81       	ldd	r25, Y+2	; 0x02
    4336:	fc 01       	movw	r30, r24
    4338:	84 81       	ldd	r24, Z+4	; 0x04
    433a:	95 81       	ldd	r25, Z+5	; 0x05
    433c:	22 96       	adiw	r28, 0x02	; 2
    433e:	e2 e0       	ldi	r30, 0x02	; 2
    4340:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004344 <_ZN6StringpLEPKc>:
    4344:	a4 e0       	ldi	r26, 0x04	; 4
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	e8 ea       	ldi	r30, 0xA8	; 168
    434a:	f1 e2       	ldi	r31, 0x21	; 33
    434c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4350:	9a 83       	std	Y+2, r25	; 0x02
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	7c 83       	std	Y+4, r23	; 0x04
    4356:	6b 83       	std	Y+3, r22	; 0x03
    4358:	2b 81       	ldd	r18, Y+3	; 0x03
    435a:	3c 81       	ldd	r19, Y+4	; 0x04
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	9a 81       	ldd	r25, Y+2	; 0x02
    4360:	b9 01       	movw	r22, r18
    4362:	0e 94 06 32 	call	0x640c	; 0x640c <_ZN6String6concatEPKc>
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	9a 81       	ldd	r25, Y+2	; 0x02
    436a:	24 96       	adiw	r28, 0x04	; 4
    436c:	e2 e0       	ldi	r30, 0x02	; 2
    436e:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004372 <_ZNK6StringeqEPKc>:
    4372:	a4 e0       	ldi	r26, 0x04	; 4
    4374:	b0 e0       	ldi	r27, 0x00	; 0
    4376:	ef eb       	ldi	r30, 0xBF	; 191
    4378:	f1 e2       	ldi	r31, 0x21	; 33
    437a:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    437e:	9a 83       	std	Y+2, r25	; 0x02
    4380:	89 83       	std	Y+1, r24	; 0x01
    4382:	7c 83       	std	Y+4, r23	; 0x04
    4384:	6b 83       	std	Y+3, r22	; 0x03
    4386:	2b 81       	ldd	r18, Y+3	; 0x03
    4388:	3c 81       	ldd	r19, Y+4	; 0x04
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	b9 01       	movw	r22, r18
    4390:	0e 94 4e 32 	call	0x649c	; 0x649c <_ZNK6String6equalsEPKc>
    4394:	24 96       	adiw	r28, 0x04	; 4
    4396:	e2 e0       	ldi	r30, 0x02	; 2
    4398:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000439c <_ZNK6String11toCharArrayEPcjj>:
    439c:	a8 e0       	ldi	r26, 0x08	; 8
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	e4 ed       	ldi	r30, 0xD4	; 212
    43a2:	f1 e2       	ldi	r31, 0x21	; 33
    43a4:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    43a8:	9a 83       	std	Y+2, r25	; 0x02
    43aa:	89 83       	std	Y+1, r24	; 0x01
    43ac:	7c 83       	std	Y+4, r23	; 0x04
    43ae:	6b 83       	std	Y+3, r22	; 0x03
    43b0:	5e 83       	std	Y+6, r21	; 0x06
    43b2:	4d 83       	std	Y+5, r20	; 0x05
    43b4:	38 87       	std	Y+8, r19	; 0x08
    43b6:	2f 83       	std	Y+7, r18	; 0x07
    43b8:	2f 81       	ldd	r18, Y+7	; 0x07
    43ba:	38 85       	ldd	r19, Y+8	; 0x08
    43bc:	4d 81       	ldd	r20, Y+5	; 0x05
    43be:	5e 81       	ldd	r21, Y+6	; 0x06
    43c0:	6b 81       	ldd	r22, Y+3	; 0x03
    43c2:	7c 81       	ldd	r23, Y+4	; 0x04
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	0e 94 b1 32 	call	0x6562	; 0x6562 <_ZNK6String8getBytesEPhjj>
    43cc:	28 96       	adiw	r28, 0x08	; 8
    43ce:	e2 e0       	ldi	r30, 0x02	; 2
    43d0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000043d4 <_ZN15StringSumHelperC1ERK6String>:
    43d4:	a4 e0       	ldi	r26, 0x04	; 4
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	e0 ef       	ldi	r30, 0xF0	; 240
    43da:	f1 e2       	ldi	r31, 0x21	; 33
    43dc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    43e0:	9a 83       	std	Y+2, r25	; 0x02
    43e2:	89 83       	std	Y+1, r24	; 0x01
    43e4:	7c 83       	std	Y+4, r23	; 0x04
    43e6:	6b 83       	std	Y+3, r22	; 0x03
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	9a 81       	ldd	r25, Y+2	; 0x02
    43ec:	2b 81       	ldd	r18, Y+3	; 0x03
    43ee:	3c 81       	ldd	r19, Y+4	; 0x04
    43f0:	b9 01       	movw	r22, r18
    43f2:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    43f6:	24 96       	adiw	r28, 0x04	; 4
    43f8:	e2 e0       	ldi	r30, 0x02	; 2
    43fa:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000043fe <_ZN15WaterSensorWire5SetupEv>:
    43fe:	a0 e0       	ldi	r26, 0x00	; 0
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	e5 e0       	ldi	r30, 0x05	; 5
    4404:	f2 e2       	ldi	r31, 0x22	; 34
    4406:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    440a:	89 e8       	ldi	r24, 0x89	; 137
    440c:	93 e0       	ldi	r25, 0x03	; 3
    440e:	bc 01       	movw	r22, r24
    4410:	86 e5       	ldi	r24, 0x56	; 86
    4412:	95 e0       	ldi	r25, 0x05	; 5
    4414:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    4418:	4a e0       	ldi	r20, 0x0A	; 10
    441a:	50 e0       	ldi	r21, 0x00	; 0
    441c:	68 e0       	ldi	r22, 0x08	; 8
    441e:	86 e5       	ldi	r24, 0x56	; 86
    4420:	95 e0       	ldi	r25, 0x05	; 5
    4422:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <_ZN5Print7printlnEhi>
    4426:	68 e0       	ldi	r22, 0x08	; 8
    4428:	87 e9       	ldi	r24, 0x97	; 151
    442a:	92 e0       	ldi	r25, 0x02	; 2
    442c:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN7TwoWire5beginEh>
    4430:	6a ed       	ldi	r22, 0xDA	; 218
    4432:	73 e2       	ldi	r23, 0x23	; 35
    4434:	87 e9       	ldi	r24, 0x97	; 151
    4436:	92 e0       	ldi	r25, 0x02	; 2
    4438:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN7TwoWire9onRequestEPFvvE>
    443c:	60 ee       	ldi	r22, 0xE0	; 224
    443e:	72 e2       	ldi	r23, 0x22	; 34
    4440:	87 e9       	ldi	r24, 0x97	; 151
    4442:	92 e0       	ldi	r25, 0x02	; 2
    4444:	0e 94 a9 05 	call	0xb52	; 0xb52 <_ZN7TwoWire9onReceiveEPFviE>
    4448:	e2 e0       	ldi	r30, 0x02	; 2
    444a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

0000444e <_ZN15WaterSensorWire4LoopEv>:
    444e:	a4 e3       	ldi	r26, 0x34	; 52
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	ed e2       	ldi	r30, 0x2D	; 45
    4454:	f2 e2       	ldi	r31, 0x22	; 34
    4456:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    445a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN7Globals10ReadingTDSE>
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	89 27       	eor	r24, r25
    4462:	88 23       	and	r24, r24
    4464:	39 f0       	breq	.+14     	; 0x4474 <_ZN15WaterSensorWire4LoopEv+0x26>
    4466:	8d e3       	ldi	r24, 0x3D	; 61
    4468:	91 e0       	ldi	r25, 0x01	; 1
    446a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZL8_reading+0x1>
    446e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZL8_reading>
    4472:	06 c0       	rjmp	.+12     	; 0x4480 <_ZN15WaterSensorWire4LoopEv+0x32>
    4474:	80 e4       	ldi	r24, 0x40	; 64
    4476:	91 e0       	ldi	r25, 0x01	; 1
    4478:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZL8_reading+0x1>
    447c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZL8_reading>
    4480:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN7Globals18SensorReadDurationE>
    4484:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN7Globals18SensorReadDurationE+0x1>
    4488:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <_ZN7Globals18SensorReadDurationE+0x2>
    448c:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <_ZN7Globals18SensorReadDurationE+0x3>
    4490:	28 ee       	ldi	r18, 0xE8	; 232
    4492:	33 e0       	ldi	r19, 0x03	; 3
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 b1 33 	call	0x6762	; 0x6762 <__divmodsi4>
    44a0:	da 01       	movw	r26, r20
    44a2:	c9 01       	movw	r24, r18
    44a4:	89 83       	std	Y+1, r24	; 0x01
    44a6:	9a 83       	std	Y+2, r25	; 0x02
    44a8:	ab 83       	std	Y+3, r26	; 0x03
    44aa:	bc 83       	std	Y+4, r27	; 0x04
    44ac:	89 81       	ldd	r24, Y+1	; 0x01
    44ae:	9a 81       	ldd	r25, Y+2	; 0x02
    44b0:	ab 81       	ldd	r26, Y+3	; 0x03
    44b2:	bc 81       	ldd	r27, Y+4	; 0x04
    44b4:	fe 01       	movw	r30, r28
    44b6:	75 96       	adiw	r30, 0x15	; 21
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	ac 01       	movw	r20, r24
    44bc:	bd 01       	movw	r22, r26
    44be:	cf 01       	movw	r24, r30
    44c0:	0e 94 53 31 	call	0x62a6	; 0x62a6 <_ZN6StringC1Elh>
    44c4:	9e 01       	movw	r18, r28
    44c6:	2b 5e       	subi	r18, 0xEB	; 235
    44c8:	3f 4f       	sbci	r19, 0xFF	; 255
    44ca:	ce 01       	movw	r24, r28
    44cc:	4b 96       	adiw	r24, 0x1b	; 27
    44ce:	b9 01       	movw	r22, r18
    44d0:	81 df       	rcall	.-254    	; 0x43d4 <_ZN15StringSumHelperC1ERK6String>
    44d2:	ce 01       	movw	r24, r28
    44d4:	4b 96       	adiw	r24, 0x1b	; 27
    44d6:	64 e4       	ldi	r22, 0x44	; 68
    44d8:	71 e0       	ldi	r23, 0x01	; 1
    44da:	0e 94 37 32 	call	0x646e	; 0x646e <_ZplRK15StringSumHelperPKc>
    44de:	9c 01       	movw	r18, r24
    44e0:	ce 01       	movw	r24, r28
    44e2:	81 96       	adiw	r24, 0x21	; 33
    44e4:	b9 01       	movw	r22, r18
    44e6:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    44ea:	ce 01       	movw	r24, r28
    44ec:	4b 96       	adiw	r24, 0x1b	; 27
    44ee:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN15StringSumHelperD1Ev>
    44f2:	ce 01       	movw	r24, r28
    44f4:	45 96       	adiw	r24, 0x15	; 21
    44f6:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    44fa:	ce 01       	movw	r24, r28
    44fc:	81 96       	adiw	r24, 0x21	; 33
    44fe:	11 df       	rcall	.-478    	; 0x4322 <_ZNK6String6lengthEv>
    4500:	ac 01       	movw	r20, r24
    4502:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <_ZL14_sensorReadDur>
    4506:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <_ZL14_sensorReadDur+0x1>
    450a:	ce 01       	movw	r24, r28
    450c:	81 96       	adiw	r24, 0x21	; 33
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	44 df       	rcall	.-376    	; 0x439c <_ZNK6String11toCharArrayEPcjj>
    4514:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZN7Globals18SensorReadIntervalE>
    4518:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZN7Globals18SensorReadIntervalE+0x1>
    451c:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZN7Globals18SensorReadIntervalE+0x2>
    4520:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZN7Globals18SensorReadIntervalE+0x3>
    4524:	28 ee       	ldi	r18, 0xE8	; 232
    4526:	33 e0       	ldi	r19, 0x03	; 3
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	bc 01       	movw	r22, r24
    452e:	cd 01       	movw	r24, r26
    4530:	0e 94 b1 33 	call	0x6762	; 0x6762 <__divmodsi4>
    4534:	da 01       	movw	r26, r20
    4536:	c9 01       	movw	r24, r18
    4538:	8d 83       	std	Y+5, r24	; 0x05
    453a:	9e 83       	std	Y+6, r25	; 0x06
    453c:	af 83       	std	Y+7, r26	; 0x07
    453e:	b8 87       	std	Y+8, r27	; 0x08
    4540:	8d 81       	ldd	r24, Y+5	; 0x05
    4542:	9e 81       	ldd	r25, Y+6	; 0x06
    4544:	af 81       	ldd	r26, Y+7	; 0x07
    4546:	b8 85       	ldd	r27, Y+8	; 0x08
    4548:	fe 01       	movw	r30, r28
    454a:	39 96       	adiw	r30, 0x09	; 9
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	ac 01       	movw	r20, r24
    4550:	bd 01       	movw	r22, r26
    4552:	cf 01       	movw	r24, r30
    4554:	0e 94 53 31 	call	0x62a6	; 0x62a6 <_ZN6StringC1Elh>
    4558:	9e 01       	movw	r18, r28
    455a:	27 5f       	subi	r18, 0xF7	; 247
    455c:	3f 4f       	sbci	r19, 0xFF	; 255
    455e:	ce 01       	movw	r24, r28
    4560:	0f 96       	adiw	r24, 0x0f	; 15
    4562:	b9 01       	movw	r22, r18
    4564:	37 df       	rcall	.-402    	; 0x43d4 <_ZN15StringSumHelperC1ERK6String>
    4566:	ce 01       	movw	r24, r28
    4568:	0f 96       	adiw	r24, 0x0f	; 15
    456a:	64 e4       	ldi	r22, 0x44	; 68
    456c:	71 e0       	ldi	r23, 0x01	; 1
    456e:	0e 94 37 32 	call	0x646e	; 0x646e <_ZplRK15StringSumHelperPKc>
    4572:	9c 01       	movw	r18, r24
    4574:	ce 01       	movw	r24, r28
    4576:	87 96       	adiw	r24, 0x27	; 39
    4578:	b9 01       	movw	r22, r18
    457a:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    457e:	ce 01       	movw	r24, r28
    4580:	0f 96       	adiw	r24, 0x0f	; 15
    4582:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN15StringSumHelperD1Ev>
    4586:	ce 01       	movw	r24, r28
    4588:	09 96       	adiw	r24, 0x09	; 9
    458a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    458e:	ce 01       	movw	r24, r28
    4590:	87 96       	adiw	r24, 0x27	; 39
    4592:	c7 de       	rcall	.-626    	; 0x4322 <_ZNK6String6lengthEv>
    4594:	ac 01       	movw	r20, r24
    4596:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZL16_sensorReadInter>
    459a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZL16_sensorReadInter+0x1>
    459e:	ce 01       	movw	r24, r28
    45a0:	87 96       	adiw	r24, 0x27	; 39
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	fa de       	rcall	.-524    	; 0x439c <_ZNK6String11toCharArrayEPcjj>
    45a8:	ce 01       	movw	r24, r28
    45aa:	87 96       	adiw	r24, 0x27	; 39
    45ac:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    45b0:	ce 01       	movw	r24, r28
    45b2:	81 96       	adiw	r24, 0x21	; 33
    45b4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    45b8:	e4 96       	adiw	r28, 0x34	; 52
    45ba:	e2 e0       	ldi	r30, 0x02	; 2
    45bc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000045c0 <_ZN15WaterSensorWire7ReceiveEi>:
    45c0:	a7 e2       	ldi	r26, 0x27	; 39
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	e6 ee       	ldi	r30, 0xE6	; 230
    45c6:	f2 e2       	ldi	r31, 0x22	; 34
    45c8:	0c 94 ec 33 	jmp	0x67d8	; 0x67d8 <__prologue_saves__+0x1e>
    45cc:	9f a3       	std	Y+39, r25	; 0x27
    45ce:	8e a3       	std	Y+38, r24	; 0x26
    45d0:	6c e3       	ldi	r22, 0x3C	; 60
    45d2:	71 e0       	ldi	r23, 0x01	; 1
    45d4:	8e e3       	ldi	r24, 0x3E	; 62
    45d6:	93 e0       	ldi	r25, 0x03	; 3
    45d8:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    45dc:	6c e3       	ldi	r22, 0x3C	; 60
    45de:	71 e0       	ldi	r23, 0x01	; 1
    45e0:	8a e4       	ldi	r24, 0x4A	; 74
    45e2:	93 e0       	ldi	r25, 0x03	; 3
    45e4:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    45e8:	6c e3       	ldi	r22, 0x3C	; 60
    45ea:	71 e0       	ldi	r23, 0x01	; 1
    45ec:	80 e5       	ldi	r24, 0x50	; 80
    45ee:	93 e0       	ldi	r25, 0x03	; 3
    45f0:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    45f4:	8e a1       	ldd	r24, Y+38	; 0x26
    45f6:	9f a1       	ldd	r25, Y+39	; 0x27
    45f8:	44 97       	sbiw	r24, 0x14	; 20
    45fa:	09 f0       	breq	.+2      	; 0x45fe <_ZN15WaterSensorWire7ReceiveEi+0x3e>
    45fc:	c7 c0       	rjmp	.+398    	; 0x478c <_ZN15WaterSensorWire7ReceiveEi+0x1cc>
    45fe:	0a c0       	rjmp	.+20     	; 0x4614 <_ZN15WaterSensorWire7ReceiveEi+0x54>
    4600:	87 e9       	ldi	r24, 0x97	; 151
    4602:	92 e0       	ldi	r25, 0x02	; 2
    4604:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7TwoWire4readEv>
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	69 81       	ldd	r22, Y+1	; 0x01
    460c:	8e e3       	ldi	r24, 0x3E	; 62
    460e:	93 e0       	ldi	r25, 0x03	; 3
    4610:	0e 94 14 32 	call	0x6428	; 0x6428 <_ZN6String6concatEc>
    4614:	87 e9       	ldi	r24, 0x97	; 151
    4616:	92 e0       	ldi	r25, 0x02	; 2
    4618:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN7TwoWire9availableEv>
    461c:	21 e0       	ldi	r18, 0x01	; 1
    461e:	18 16       	cp	r1, r24
    4620:	19 06       	cpc	r1, r25
    4622:	0c f0       	brlt	.+2      	; 0x4626 <_ZN15WaterSensorWire7ReceiveEi+0x66>
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	22 23       	and	r18, r18
    4628:	59 f7       	brne	.-42     	; 0x4600 <_ZN15WaterSensorWire7ReceiveEi+0x40>
    462a:	8e e3       	ldi	r24, 0x3E	; 62
    462c:	93 e0       	ldi	r25, 0x03	; 3
    462e:	0e 94 23 33 	call	0x6646	; 0x6646 <_ZN6String4trimEv>
    4632:	ce 01       	movw	r24, r28
    4634:	44 96       	adiw	r24, 0x14	; 20
    4636:	66 e4       	ldi	r22, 0x46	; 70
    4638:	71 e0       	ldi	r23, 0x01	; 1
    463a:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    463e:	ce 01       	movw	r24, r28
    4640:	44 96       	adiw	r24, 0x14	; 20
    4642:	bc 01       	movw	r22, r24
    4644:	8e e3       	ldi	r24, 0x3E	; 62
    4646:	93 e0       	ldi	r25, 0x03	; 3
    4648:	0e 94 91 32 	call	0x6522	; 0x6522 <_ZNK6String10startsWithERKS_>
    464c:	11 e0       	ldi	r17, 0x01	; 1
    464e:	88 23       	and	r24, r24
    4650:	09 f4       	brne	.+2      	; 0x4654 <_ZN15WaterSensorWire7ReceiveEi+0x94>
    4652:	10 e0       	ldi	r17, 0x00	; 0
    4654:	ce 01       	movw	r24, r28
    4656:	44 96       	adiw	r24, 0x14	; 20
    4658:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    465c:	11 23       	and	r17, r17
    465e:	a1 f0       	breq	.+40     	; 0x4688 <_ZN15WaterSensorWire7ReceiveEi+0xc8>
    4660:	6e e3       	ldi	r22, 0x3E	; 62
    4662:	73 e0       	ldi	r23, 0x03	; 3
    4664:	8a e4       	ldi	r24, 0x4A	; 74
    4666:	93 e0       	ldi	r25, 0x03	; 3
    4668:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    466c:	82 e9       	ldi	r24, 0x92	; 146
    466e:	93 e0       	ldi	r25, 0x03	; 3
    4670:	bc 01       	movw	r22, r24
    4672:	86 e5       	ldi	r24, 0x56	; 86
    4674:	95 e0       	ldi	r25, 0x05	; 5
    4676:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    467a:	6a e4       	ldi	r22, 0x4A	; 74
    467c:	73 e0       	ldi	r23, 0x03	; 3
    467e:	86 e5       	ldi	r24, 0x56	; 86
    4680:	95 e0       	ldi	r25, 0x05	; 5
    4682:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN5Print7printlnERK6String>
    4686:	92 c0       	rjmp	.+292    	; 0x47ac <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    4688:	6e e3       	ldi	r22, 0x3E	; 62
    468a:	73 e0       	ldi	r23, 0x03	; 3
    468c:	80 e5       	ldi	r24, 0x50	; 80
    468e:	93 e0       	ldi	r25, 0x03	; 3
    4690:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    4694:	88 e9       	ldi	r24, 0x98	; 152
    4696:	93 e0       	ldi	r25, 0x03	; 3
    4698:	bc 01       	movw	r22, r24
    469a:	86 e5       	ldi	r24, 0x56	; 86
    469c:	95 e0       	ldi	r25, 0x05	; 5
    469e:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    46a2:	60 e5       	ldi	r22, 0x50	; 80
    46a4:	73 e0       	ldi	r23, 0x03	; 3
    46a6:	86 e5       	ldi	r24, 0x56	; 86
    46a8:	95 e0       	ldi	r25, 0x05	; 5
    46aa:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN5Print7printlnERK6String>
    46ae:	ce 01       	movw	r24, r28
    46b0:	0e 96       	adiw	r24, 0x0e	; 14
    46b2:	60 e5       	ldi	r22, 0x50	; 80
    46b4:	73 e0       	ldi	r23, 0x03	; 3
    46b6:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    46ba:	ce 01       	movw	r24, r28
    46bc:	4a 96       	adiw	r24, 0x1a	; 26
    46be:	be 01       	movw	r22, r28
    46c0:	62 5f       	subi	r22, 0xF2	; 242
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	4d e3       	ldi	r20, 0x3D	; 61
    46ca:	01 d2       	rcall	.+1026   	; 0x4ace <_ZN15WaterSensorWire11SplitStringE6Stringci>
    46cc:	ce 01       	movw	r24, r28
    46ce:	0e 96       	adiw	r24, 0x0e	; 14
    46d0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    46d4:	ce 01       	movw	r24, r28
    46d6:	08 96       	adiw	r24, 0x08	; 8
    46d8:	60 e5       	ldi	r22, 0x50	; 80
    46da:	73 e0       	ldi	r23, 0x03	; 3
    46dc:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    46e0:	ce 01       	movw	r24, r28
    46e2:	80 96       	adiw	r24, 0x20	; 32
    46e4:	be 01       	movw	r22, r28
    46e6:	68 5f       	subi	r22, 0xF8	; 248
    46e8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ea:	21 e0       	ldi	r18, 0x01	; 1
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	4d e3       	ldi	r20, 0x3D	; 61
    46f0:	ee d1       	rcall	.+988    	; 0x4ace <_ZN15WaterSensorWire11SplitStringE6Stringci>
    46f2:	ce 01       	movw	r24, r28
    46f4:	08 96       	adiw	r24, 0x08	; 8
    46f6:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    46fa:	ce 01       	movw	r24, r28
    46fc:	4a 96       	adiw	r24, 0x1a	; 26
    46fe:	68 e4       	ldi	r22, 0x48	; 72
    4700:	71 e0       	ldi	r23, 0x01	; 1
    4702:	37 de       	rcall	.-914    	; 0x4372 <_ZNK6StringeqEPKc>
    4704:	98 2f       	mov	r25, r24
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	99 23       	and	r25, r25
    470a:	09 f4       	brne	.+2      	; 0x470e <_ZN15WaterSensorWire7ReceiveEi+0x14e>
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	88 23       	and	r24, r24
    4710:	89 f0       	breq	.+34     	; 0x4734 <_ZN15WaterSensorWire7ReceiveEi+0x174>
    4712:	ce 01       	movw	r24, r28
    4714:	80 96       	adiw	r24, 0x20	; 32
    4716:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <_ZNK6String5toIntEv>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	9b 83       	std	Y+3, r25	; 0x03
    4720:	8a 83       	std	Y+2, r24	; 0x02
    4722:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    4726:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    472a:	2a 81       	ldd	r18, Y+2	; 0x02
    472c:	3b 81       	ldd	r19, Y+3	; 0x03
    472e:	b9 01       	movw	r22, r18
    4730:	12 da       	rcall	.-3036   	; 0x3b56 <_ZN9TDSSensor6UpdateEi>
    4732:	23 c0       	rjmp	.+70     	; 0x477a <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    4734:	ce 01       	movw	r24, r28
    4736:	4a 96       	adiw	r24, 0x1a	; 26
    4738:	62 e5       	ldi	r22, 0x52	; 82
    473a:	71 e0       	ldi	r23, 0x01	; 1
    473c:	1a de       	rcall	.-972    	; 0x4372 <_ZNK6StringeqEPKc>
    473e:	98 2f       	mov	r25, r24
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	99 23       	and	r25, r25
    4744:	09 f4       	brne	.+2      	; 0x4748 <_ZN15WaterSensorWire7ReceiveEi+0x188>
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	88 23       	and	r24, r24
    474a:	b9 f0       	breq	.+46     	; 0x477a <_ZN15WaterSensorWire7ReceiveEi+0x1ba>
    474c:	ce 01       	movw	r24, r28
    474e:	80 96       	adiw	r24, 0x20	; 32
    4750:	0e 94 84 33 	call	0x6708	; 0x6708 <_ZNK6String7toFloatEv>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	8c 83       	std	Y+4, r24	; 0x04
    475a:	9d 83       	std	Y+5, r25	; 0x05
    475c:	ae 83       	std	Y+6, r26	; 0x06
    475e:	bf 83       	std	Y+7, r27	; 0x07
    4760:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    4764:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    4768:	8c 81       	ldd	r24, Y+4	; 0x04
    476a:	9d 81       	ldd	r25, Y+5	; 0x05
    476c:	ae 81       	ldd	r26, Y+6	; 0x06
    476e:	bf 81       	ldd	r27, Y+7	; 0x07
    4770:	ac 01       	movw	r20, r24
    4772:	bd 01       	movw	r22, r26
    4774:	c9 01       	movw	r24, r18
    4776:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZN8PHSensor6UpdateEd>
    477a:	ce 01       	movw	r24, r28
    477c:	80 96       	adiw	r24, 0x20	; 32
    477e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4782:	ce 01       	movw	r24, r28
    4784:	4a 96       	adiw	r24, 0x1a	; 26
    4786:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    478a:	10 c0       	rjmp	.+32     	; 0x47ac <_ZN15WaterSensorWire7ReceiveEi+0x1ec>
    478c:	82 ea       	ldi	r24, 0xA2	; 162
    478e:	93 e0       	ldi	r25, 0x03	; 3
    4790:	bc 01       	movw	r22, r24
    4792:	86 e5       	ldi	r24, 0x56	; 86
    4794:	95 e0       	ldi	r25, 0x05	; 5
    4796:	0e 94 9d 2c 	call	0x593a	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    479a:	8e a1       	ldd	r24, Y+38	; 0x26
    479c:	9f a1       	ldd	r25, Y+39	; 0x27
    479e:	4a e0       	ldi	r20, 0x0A	; 10
    47a0:	50 e0       	ldi	r21, 0x00	; 0
    47a2:	bc 01       	movw	r22, r24
    47a4:	86 e5       	ldi	r24, 0x56	; 86
    47a6:	95 e0       	ldi	r25, 0x05	; 5
    47a8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <_ZN5Print7printlnEii>
    47ac:	a7 96       	adiw	r28, 0x27	; 39
    47ae:	e3 e0       	ldi	r30, 0x03	; 3
    47b0:	0c 94 08 34 	jmp	0x6810	; 0x6810 <__epilogue_restores__+0x1e>

000047b4 <_ZN15WaterSensorWire7RequestEv>:
    47b4:	ae e1       	ldi	r26, 0x1E	; 30
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	e0 ee       	ldi	r30, 0xE0	; 224
    47ba:	f3 e2       	ldi	r31, 0x23	; 35
    47bc:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__prologue_saves__+0x1c>
    47c0:	ce 01       	movw	r24, r28
    47c2:	49 96       	adiw	r24, 0x19	; 25
    47c4:	6c e3       	ldi	r22, 0x3C	; 60
    47c6:	71 e0       	ldi	r23, 0x01	; 1
    47c8:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    47cc:	66 e4       	ldi	r22, 0x46	; 70
    47ce:	71 e0       	ldi	r23, 0x01	; 1
    47d0:	8a e4       	ldi	r24, 0x4A	; 74
    47d2:	93 e0       	ldi	r25, 0x03	; 3
    47d4:	ce dd       	rcall	.-1124   	; 0x4372 <_ZNK6StringeqEPKc>
    47d6:	98 2f       	mov	r25, r24
    47d8:	81 e0       	ldi	r24, 0x01	; 1
    47da:	99 23       	and	r25, r25
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <_ZN15WaterSensorWire7RequestEv+0x2c>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	88 23       	and	r24, r24
    47e2:	c1 f0       	breq	.+48     	; 0x4814 <_ZN15WaterSensorWire7RequestEv+0x60>
    47e4:	ce 01       	movw	r24, r28
    47e6:	49 96       	adiw	r24, 0x19	; 25
    47e8:	6b e5       	ldi	r22, 0x5B	; 91
    47ea:	71 e0       	ldi	r23, 0x01	; 1
    47ec:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    47f0:	9e 01       	movw	r18, r28
    47f2:	27 5e       	subi	r18, 0xE7	; 231
    47f4:	3f 4f       	sbci	r19, 0xFF	; 255
    47f6:	ce 01       	movw	r24, r28
    47f8:	43 96       	adiw	r24, 0x13	; 19
    47fa:	b9 01       	movw	r22, r18
    47fc:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    4800:	ce 01       	movw	r24, r28
    4802:	43 96       	adiw	r24, 0x13	; 19
    4804:	14 d1       	rcall	.+552    	; 0x4a2e <_ZN15WaterSensorWire8TransmitE6String>
    4806:	ce 01       	movw	r24, r28
    4808:	43 96       	adiw	r24, 0x13	; 19
    480a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    480e:	00 e0       	ldi	r16, 0x00	; 0
    4810:	10 e0       	ldi	r17, 0x00	; 0
    4812:	01 c1       	rjmp	.+514    	; 0x4a16 <_ZN15WaterSensorWire7RequestEv+0x262>
    4814:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4818:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    481c:	01 96       	adiw	r24, 0x01	; 1
    481e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    4822:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    4826:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    482a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    482e:	89 2b       	or	r24, r25
    4830:	69 f4       	brne	.+26     	; 0x484c <_ZN15WaterSensorWire7RequestEv+0x98>
    4832:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    4836:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    483a:	9c 01       	movw	r18, r24
    483c:	2f 57       	subi	r18, 0x7F	; 127
    483e:	3f 4f       	sbci	r19, 0xFF	; 255
    4840:	ce 01       	movw	r24, r28
    4842:	49 96       	adiw	r24, 0x19	; 25
    4844:	b9 01       	movw	r22, r18
    4846:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    484a:	d5 c0       	rjmp	.+426    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    484c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4850:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	69 f4       	brne	.+26     	; 0x4872 <_ZN15WaterSensorWire7RequestEv+0xbe>
    4858:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    485c:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    4860:	9c 01       	movw	r18, r24
    4862:	29 57       	subi	r18, 0x79	; 121
    4864:	3f 4f       	sbci	r19, 0xFF	; 255
    4866:	ce 01       	movw	r24, r28
    4868:	49 96       	adiw	r24, 0x19	; 25
    486a:	b9 01       	movw	r22, r18
    486c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    4870:	c2 c0       	rjmp	.+388    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    4872:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4876:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    487a:	02 97       	sbiw	r24, 0x02	; 2
    487c:	69 f4       	brne	.+26     	; 0x4898 <_ZN15WaterSensorWire7RequestEv+0xe4>
    487e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    4882:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    4886:	9c 01       	movw	r18, r24
    4888:	28 58       	subi	r18, 0x88	; 136
    488a:	3f 4f       	sbci	r19, 0xFF	; 255
    488c:	ce 01       	movw	r24, r28
    488e:	49 96       	adiw	r24, 0x19	; 25
    4890:	b9 01       	movw	r22, r18
    4892:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    4896:	af c0       	rjmp	.+350    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    4898:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    489c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    48a0:	03 97       	sbiw	r24, 0x03	; 3
    48a2:	69 f4       	brne	.+26     	; 0x48be <_ZN15WaterSensorWire7RequestEv+0x10a>
    48a4:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    48a8:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    48ac:	9c 01       	movw	r18, r24
    48ae:	22 58       	subi	r18, 0x82	; 130
    48b0:	3f 4f       	sbci	r19, 0xFF	; 255
    48b2:	ce 01       	movw	r24, r28
    48b4:	49 96       	adiw	r24, 0x19	; 25
    48b6:	b9 01       	movw	r22, r18
    48b8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <_ZN6StringaSERKS_>
    48bc:	9c c0       	rjmp	.+312    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    48be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    48c2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    48c6:	04 97       	sbiw	r24, 0x04	; 4
    48c8:	11 f5       	brne	.+68     	; 0x490e <_ZN15WaterSensorWire7RequestEv+0x15a>
    48ca:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    48ce:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    48d2:	83 57       	subi	r24, 0x73	; 115
    48d4:	9f 4f       	sbci	r25, 0xFF	; 255
    48d6:	fc 01       	movw	r30, r24
    48d8:	80 81       	ld	r24, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	a2 81       	ldd	r26, Z+2	; 0x02
    48de:	b3 81       	ldd	r27, Z+3	; 0x03
    48e0:	fe 01       	movw	r30, r28
    48e2:	3d 96       	adiw	r30, 0x0d	; 13
    48e4:	22 e0       	ldi	r18, 0x02	; 2
    48e6:	ac 01       	movw	r20, r24
    48e8:	bd 01       	movw	r22, r26
    48ea:	cf 01       	movw	r24, r30
    48ec:	0e 94 ac 31 	call	0x6358	; 0x6358 <_ZN6StringC1Edh>
    48f0:	ce 01       	movw	r24, r28
    48f2:	0d 96       	adiw	r24, 0x0d	; 13
    48f4:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZNK6String5c_strEv>
    48f8:	9c 01       	movw	r18, r24
    48fa:	ce 01       	movw	r24, r28
    48fc:	49 96       	adiw	r24, 0x19	; 25
    48fe:	b9 01       	movw	r22, r18
    4900:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    4904:	ce 01       	movw	r24, r28
    4906:	0d 96       	adiw	r24, 0x0d	; 13
    4908:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    490c:	74 c0       	rjmp	.+232    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    490e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    4912:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    4916:	05 97       	sbiw	r24, 0x05	; 5
    4918:	f1 f4       	brne	.+60     	; 0x4956 <_ZN15WaterSensorWire7RequestEv+0x1a2>
    491a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    491e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    4922:	8c 57       	subi	r24, 0x7C	; 124
    4924:	9f 4f       	sbci	r25, 0xFF	; 255
    4926:	fc 01       	movw	r30, r24
    4928:	20 81       	ld	r18, Z
    492a:	31 81       	ldd	r19, Z+1	; 0x01
    492c:	ce 01       	movw	r24, r28
    492e:	07 96       	adiw	r24, 0x07	; 7
    4930:	4a e0       	ldi	r20, 0x0A	; 10
    4932:	b9 01       	movw	r22, r18
    4934:	0e 94 29 31 	call	0x6252	; 0x6252 <_ZN6StringC1Eih>
    4938:	ce 01       	movw	r24, r28
    493a:	07 96       	adiw	r24, 0x07	; 7
    493c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZNK6String5c_strEv>
    4940:	9c 01       	movw	r18, r24
    4942:	ce 01       	movw	r24, r28
    4944:	49 96       	adiw	r24, 0x19	; 25
    4946:	b9 01       	movw	r22, r18
    4948:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    494c:	ce 01       	movw	r24, r28
    494e:	07 96       	adiw	r24, 0x07	; 7
    4950:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4954:	50 c0       	rjmp	.+160    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    4956:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    495a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    495e:	06 97       	sbiw	r24, 0x06	; 6
    4960:	51 f4       	brne	.+20     	; 0x4976 <_ZN15WaterSensorWire7RequestEv+0x1c2>
    4962:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <_ZL8_reading>
    4966:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <_ZL8_reading+0x1>
    496a:	ce 01       	movw	r24, r28
    496c:	49 96       	adiw	r24, 0x19	; 25
    496e:	b9 01       	movw	r22, r18
    4970:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    4974:	40 c0       	rjmp	.+128    	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    4976:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    497a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    497e:	07 97       	sbiw	r24, 0x07	; 7
    4980:	51 f4       	brne	.+20     	; 0x4996 <_ZN15WaterSensorWire7RequestEv+0x1e2>
    4982:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <_ZL14_sensorReadDur>
    4986:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <_ZL14_sensorReadDur+0x1>
    498a:	ce 01       	movw	r24, r28
    498c:	49 96       	adiw	r24, 0x19	; 25
    498e:	b9 01       	movw	r22, r18
    4990:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    4994:	30 c0       	rjmp	.+96     	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    4996:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    499a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    499e:	08 97       	sbiw	r24, 0x08	; 8
    49a0:	81 f4       	brne	.+32     	; 0x49c2 <_ZN15WaterSensorWire7RequestEv+0x20e>
    49a2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZL16_sensorReadInter>
    49a6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZL16_sensorReadInter+0x1>
    49aa:	ce 01       	movw	r24, r28
    49ac:	49 96       	adiw	r24, 0x19	; 25
    49ae:	b9 01       	movw	r22, r18
    49b0:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN6StringaSEPKc>
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    49b6:	9f ef       	ldi	r25, 0xFF	; 255
    49b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    49bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    49c0:	1a c0       	rjmp	.+52     	; 0x49f6 <_ZN15WaterSensorWire7RequestEv+0x242>
    49c2:	88 ec       	ldi	r24, 0xC8	; 200
    49c4:	93 e0       	ldi	r25, 0x03	; 3
    49c6:	bc 01       	movw	r22, r24
    49c8:	86 e5       	ldi	r24, 0x56	; 86
    49ca:	95 e0       	ldi	r25, 0x05	; 5
    49cc:	b6 d7       	rcall	.+3948   	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    49ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL14_responseIndex>
    49d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14_responseIndex+0x1>
    49d6:	4a e0       	ldi	r20, 0x0A	; 10
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	bc 01       	movw	r22, r24
    49dc:	86 e5       	ldi	r24, 0x56	; 86
    49de:	95 e0       	ldi	r25, 0x05	; 5
    49e0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <_ZN5Print7printlnEii>
    49e4:	8f ef       	ldi	r24, 0xFF	; 255
    49e6:	9f ef       	ldi	r25, 0xFF	; 255
    49e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL14_responseIndex+0x1>
    49ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL14_responseIndex>
    49f0:	00 e0       	ldi	r16, 0x00	; 0
    49f2:	10 e0       	ldi	r17, 0x00	; 0
    49f4:	10 c0       	rjmp	.+32     	; 0x4a16 <_ZN15WaterSensorWire7RequestEv+0x262>
    49f6:	ce 01       	movw	r24, r28
    49f8:	49 96       	adiw	r24, 0x19	; 25
    49fa:	bc 01       	movw	r22, r24
    49fc:	ce 01       	movw	r24, r28
    49fe:	01 96       	adiw	r24, 0x01	; 1
    4a00:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN6StringC1ERKS_>
    4a04:	ce 01       	movw	r24, r28
    4a06:	01 96       	adiw	r24, 0x01	; 1
    4a08:	12 d0       	rcall	.+36     	; 0x4a2e <_ZN15WaterSensorWire8TransmitE6String>
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	01 96       	adiw	r24, 0x01	; 1
    4a0e:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4a12:	01 e0       	ldi	r16, 0x01	; 1
    4a14:	10 e0       	ldi	r17, 0x00	; 0
    4a16:	ce 01       	movw	r24, r28
    4a18:	49 96       	adiw	r24, 0x19	; 25
    4a1a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4a1e:	01 30       	cpi	r16, 0x01	; 1
    4a20:	11 05       	cpc	r17, r1
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <_ZN15WaterSensorWire7RequestEv+0x272>
    4a24:	00 00       	nop
    4a26:	6e 96       	adiw	r28, 0x1e	; 30
    4a28:	e4 e0       	ldi	r30, 0x04	; 4
    4a2a:	0c 94 07 34 	jmp	0x680e	; 0x680e <__epilogue_restores__+0x1c>

00004a2e <_ZN15WaterSensorWire8TransmitE6String>:
    4a2e:	a2 e1       	ldi	r26, 0x12	; 18
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	ed e1       	ldi	r30, 0x1D	; 29
    4a34:	f5 e2       	ldi	r31, 0x25	; 37
    4a36:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4a3a:	9a 8b       	std	Y+18, r25	; 0x12
    4a3c:	89 8b       	std	Y+17, r24	; 0x11
    4a3e:	89 89       	ldd	r24, Y+17	; 0x11
    4a40:	9a 89       	ldd	r25, Y+18	; 0x12
    4a42:	6f dc       	rcall	.-1826   	; 0x4322 <_ZNK6String6lengthEv>
    4a44:	9c 01       	movw	r18, r24
    4a46:	8a e0       	ldi	r24, 0x0A	; 10
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	82 1b       	sub	r24, r18
    4a4c:	93 0b       	sbc	r25, r19
    4a4e:	9e 83       	std	Y+6, r25	; 0x06
    4a50:	8d 83       	std	Y+5, r24	; 0x05
    4a52:	1a 82       	std	Y+2, r1	; 0x02
    4a54:	19 82       	std	Y+1, r1	; 0x01
    4a56:	0a c0       	rjmp	.+20     	; 0x4a6c <_ZN15WaterSensorWire8TransmitE6String+0x3e>
    4a58:	89 89       	ldd	r24, Y+17	; 0x11
    4a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a5c:	61 e6       	ldi	r22, 0x61	; 97
    4a5e:	71 e0       	ldi	r23, 0x01	; 1
    4a60:	71 dc       	rcall	.-1822   	; 0x4344 <_ZN6StringpLEPKc>
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	9a 81       	ldd	r25, Y+2	; 0x02
    4a66:	01 96       	adiw	r24, 0x01	; 1
    4a68:	9a 83       	std	Y+2, r25	; 0x02
    4a6a:	89 83       	std	Y+1, r24	; 0x01
    4a6c:	29 81       	ldd	r18, Y+1	; 0x01
    4a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a70:	8d 81       	ldd	r24, Y+5	; 0x05
    4a72:	9e 81       	ldd	r25, Y+6	; 0x06
    4a74:	28 17       	cp	r18, r24
    4a76:	39 07       	cpc	r19, r25
    4a78:	7c f3       	brlt	.-34     	; 0x4a58 <_ZN15WaterSensorWire8TransmitE6String+0x2a>
    4a7a:	1c 82       	std	Y+4, r1	; 0x04
    4a7c:	1b 82       	std	Y+3, r1	; 0x03
    4a7e:	16 c0       	rjmp	.+44     	; 0x4aac <_ZN15WaterSensorWire8TransmitE6String+0x7e>
    4a80:	2b 81       	ldd	r18, Y+3	; 0x03
    4a82:	3c 81       	ldd	r19, Y+4	; 0x04
    4a84:	89 89       	ldd	r24, Y+17	; 0x11
    4a86:	9a 89       	ldd	r25, Y+18	; 0x12
    4a88:	b9 01       	movw	r22, r18
    4a8a:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZNK6String6charAtEj>
    4a8e:	48 2f       	mov	r20, r24
    4a90:	9e 01       	movw	r18, r28
    4a92:	29 5f       	subi	r18, 0xF9	; 249
    4a94:	3f 4f       	sbci	r19, 0xFF	; 255
    4a96:	8b 81       	ldd	r24, Y+3	; 0x03
    4a98:	9c 81       	ldd	r25, Y+4	; 0x04
    4a9a:	82 0f       	add	r24, r18
    4a9c:	93 1f       	adc	r25, r19
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	40 83       	st	Z, r20
    4aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa6:	01 96       	adiw	r24, 0x01	; 1
    4aa8:	9c 83       	std	Y+4, r25	; 0x04
    4aaa:	8b 83       	std	Y+3, r24	; 0x03
    4aac:	8b 81       	ldd	r24, Y+3	; 0x03
    4aae:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab0:	0a 97       	sbiw	r24, 0x0a	; 10
    4ab2:	34 f3       	brlt	.-52     	; 0x4a80 <_ZN15WaterSensorWire8TransmitE6String+0x52>
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	07 96       	adiw	r24, 0x07	; 7
    4ab8:	4a e0       	ldi	r20, 0x0A	; 10
    4aba:	50 e0       	ldi	r21, 0x00	; 0
    4abc:	bc 01       	movw	r22, r24
    4abe:	87 e9       	ldi	r24, 0x97	; 151
    4ac0:	92 e0       	ldi	r25, 0x02	; 2
    4ac2:	0e 94 98 04 	call	0x930	; 0x930 <_ZN7TwoWire5writeEPKhj>
    4ac6:	62 96       	adiw	r28, 0x12	; 18
    4ac8:	e2 e0       	ldi	r30, 0x02	; 2
    4aca:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004ace <_ZN15WaterSensorWire11SplitStringE6Stringci>:
    4ace:	a1 e1       	ldi	r26, 0x11	; 17
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	ed e6       	ldi	r30, 0x6D	; 109
    4ad4:	f5 e2       	ldi	r31, 0x25	; 37
    4ad6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4ada:	9c 87       	std	Y+12, r25	; 0x0c
    4adc:	8b 87       	std	Y+11, r24	; 0x0b
    4ade:	7e 87       	std	Y+14, r23	; 0x0e
    4ae0:	6d 87       	std	Y+13, r22	; 0x0d
    4ae2:	4f 87       	std	Y+15, r20	; 0x0f
    4ae4:	39 8b       	std	Y+17, r19	; 0x11
    4ae6:	28 8b       	std	Y+16, r18	; 0x10
    4ae8:	1a 82       	std	Y+2, r1	; 0x02
    4aea:	19 82       	std	Y+1, r1	; 0x01
    4aec:	18 86       	std	Y+8, r1	; 0x08
    4aee:	1f 82       	std	Y+7, r1	; 0x07
    4af0:	8f ef       	ldi	r24, 0xFF	; 255
    4af2:	9f ef       	ldi	r25, 0xFF	; 255
    4af4:	9a 87       	std	Y+10, r25	; 0x0a
    4af6:	89 87       	std	Y+9, r24	; 0x09
    4af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4afc:	12 dc       	rcall	.-2012   	; 0x4322 <_ZNK6String6lengthEv>
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	9e 83       	std	Y+6, r25	; 0x06
    4b02:	8d 83       	std	Y+5, r24	; 0x05
    4b04:	1c 82       	std	Y+4, r1	; 0x04
    4b06:	1b 82       	std	Y+3, r1	; 0x03
    4b08:	35 c0       	rjmp	.+106    	; 0x4b74 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xa6>
    4b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    4b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    4b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b12:	b9 01       	movw	r22, r18
    4b14:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZNK6String6charAtEj>
    4b18:	98 2f       	mov	r25, r24
    4b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b1c:	98 17       	cp	r25, r24
    4b1e:	39 f0       	breq	.+14     	; 0x4b2e <_ZN15WaterSensorWire11SplitStringE6Stringci+0x60>
    4b20:	2b 81       	ldd	r18, Y+3	; 0x03
    4b22:	3c 81       	ldd	r19, Y+4	; 0x04
    4b24:	8d 81       	ldd	r24, Y+5	; 0x05
    4b26:	9e 81       	ldd	r25, Y+6	; 0x06
    4b28:	28 17       	cp	r18, r24
    4b2a:	39 07       	cpc	r19, r25
    4b2c:	11 f4       	brne	.+4      	; 0x4b32 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x64>
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	01 c0       	rjmp	.+2      	; 0x4b34 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x66>
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	88 23       	and	r24, r24
    4b36:	c9 f0       	breq	.+50     	; 0x4b6a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x9c>
    4b38:	89 81       	ldd	r24, Y+1	; 0x01
    4b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3c:	01 96       	adiw	r24, 0x01	; 1
    4b3e:	9a 83       	std	Y+2, r25	; 0x02
    4b40:	89 83       	std	Y+1, r24	; 0x01
    4b42:	89 85       	ldd	r24, Y+9	; 0x09
    4b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b46:	01 96       	adiw	r24, 0x01	; 1
    4b48:	98 87       	std	Y+8, r25	; 0x08
    4b4a:	8f 83       	std	Y+7, r24	; 0x07
    4b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    4b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    4b50:	8d 81       	ldd	r24, Y+5	; 0x05
    4b52:	9e 81       	ldd	r25, Y+6	; 0x06
    4b54:	28 17       	cp	r18, r24
    4b56:	39 07       	cpc	r19, r25
    4b58:	21 f4       	brne	.+8      	; 0x4b62 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x94>
    4b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b5e:	01 96       	adiw	r24, 0x01	; 1
    4b60:	02 c0       	rjmp	.+4      	; 0x4b66 <_ZN15WaterSensorWire11SplitStringE6Stringci+0x98>
    4b62:	8b 81       	ldd	r24, Y+3	; 0x03
    4b64:	9c 81       	ldd	r25, Y+4	; 0x04
    4b66:	9a 87       	std	Y+10, r25	; 0x0a
    4b68:	89 87       	std	Y+9, r24	; 0x09
    4b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b6e:	01 96       	adiw	r24, 0x01	; 1
    4b70:	9c 83       	std	Y+4, r25	; 0x04
    4b72:	8b 83       	std	Y+3, r24	; 0x03
    4b74:	2b 81       	ldd	r18, Y+3	; 0x03
    4b76:	3c 81       	ldd	r19, Y+4	; 0x04
    4b78:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7c:	82 17       	cp	r24, r18
    4b7e:	93 07       	cpc	r25, r19
    4b80:	44 f0       	brlt	.+16     	; 0x4b92 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4b82:	29 81       	ldd	r18, Y+1	; 0x01
    4b84:	3a 81       	ldd	r19, Y+2	; 0x02
    4b86:	88 89       	ldd	r24, Y+16	; 0x10
    4b88:	99 89       	ldd	r25, Y+17	; 0x11
    4b8a:	82 17       	cp	r24, r18
    4b8c:	93 07       	cpc	r25, r19
    4b8e:	0c f0       	brlt	.+2      	; 0x4b92 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xc4>
    4b90:	bc cf       	rjmp	.-136    	; 0x4b0a <_ZN15WaterSensorWire11SplitStringE6Stringci+0x3c>
    4b92:	29 81       	ldd	r18, Y+1	; 0x01
    4b94:	3a 81       	ldd	r19, Y+2	; 0x02
    4b96:	88 89       	ldd	r24, Y+16	; 0x10
    4b98:	99 89       	ldd	r25, Y+17	; 0x11
    4b9a:	82 17       	cp	r24, r18
    4b9c:	93 07       	cpc	r25, r19
    4b9e:	6c f4       	brge	.+26     	; 0x4bba <_ZN15WaterSensorWire11SplitStringE6Stringci+0xec>
    4ba0:	89 85       	ldd	r24, Y+9	; 0x09
    4ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba4:	9c 01       	movw	r18, r24
    4ba6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ba8:	98 85       	ldd	r25, Y+8	; 0x08
    4baa:	ac 01       	movw	r20, r24
    4bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bae:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    4bb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    4bb4:	0e 94 df 32 	call	0x65be	; 0x65be <_ZNK6String9substringEjj>
    4bb8:	06 c0       	rjmp	.+12     	; 0x4bc6 <_ZN15WaterSensorWire11SplitStringE6Stringci+0xf8>
    4bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bbe:	6c e3       	ldi	r22, 0x3C	; 60
    4bc0:	71 e0       	ldi	r23, 0x01	; 1
    4bc2:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    4bc6:	00 00       	nop
    4bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bcc:	61 96       	adiw	r28, 0x11	; 17
    4bce:	e2 e0       	ldi	r30, 0x02	; 2
    4bd0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004bd4 <_Z41__static_initialization_and_destruction_0ii>:
    4bd4:	a4 e0       	ldi	r26, 0x04	; 4
    4bd6:	b0 e0       	ldi	r27, 0x00	; 0
    4bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    4bda:	f5 e2       	ldi	r31, 0x25	; 37
    4bdc:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4be0:	9a 83       	std	Y+2, r25	; 0x02
    4be2:	89 83       	std	Y+1, r24	; 0x01
    4be4:	7c 83       	std	Y+4, r23	; 0x04
    4be6:	6b 83       	std	Y+3, r22	; 0x03
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	01 97       	sbiw	r24, 0x01	; 1
    4bee:	11 f5       	brne	.+68     	; 0x4c34 <_Z41__static_initialization_and_destruction_0ii+0x60>
    4bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf4:	01 96       	adiw	r24, 0x01	; 1
    4bf6:	f1 f4       	brne	.+60     	; 0x4c34 <_Z41__static_initialization_and_destruction_0ii+0x60>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4bf8:	6c e3       	ldi	r22, 0x3C	; 60
    4bfa:	71 e0       	ldi	r23, 0x01	; 1
    4bfc:	8e e3       	ldi	r24, 0x3E	; 62
    4bfe:	93 e0       	ldi	r25, 0x03	; 3
    4c00:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
static String _wireResponse = "";
    4c04:	6c e3       	ldi	r22, 0x3C	; 60
    4c06:	71 e0       	ldi	r23, 0x01	; 1
    4c08:	84 e4       	ldi	r24, 0x44	; 68
    4c0a:	93 e0       	ldi	r25, 0x03	; 3
    4c0c:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
static int _responseIndex = -1;
static String _cmd = "";
    4c10:	6c e3       	ldi	r22, 0x3C	; 60
    4c12:	71 e0       	ldi	r23, 0x01	; 1
    4c14:	8a e4       	ldi	r24, 0x4A	; 74
    4c16:	93 e0       	ldi	r25, 0x03	; 3
    4c18:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
static String _cmdData = "";
    4c1c:	6c e3       	ldi	r22, 0x3C	; 60
    4c1e:	71 e0       	ldi	r23, 0x01	; 1
    4c20:	80 e5       	ldi	r24, 0x50	; 80
    4c22:	93 e0       	ldi	r25, 0x03	; 3
    4c24:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
static String _response = "";
    4c28:	6c e3       	ldi	r22, 0x3C	; 60
    4c2a:	71 e0       	ldi	r23, 0x01	; 1
    4c2c:	86 e5       	ldi	r24, 0x56	; 86
    4c2e:	93 e0       	ldi	r25, 0x03	; 3
    4c30:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <_ZN6StringC1EPKc>
    4c34:	89 81       	ldd	r24, Y+1	; 0x01
    4c36:	9a 81       	ldd	r25, Y+2	; 0x02
    4c38:	89 2b       	or	r24, r25
    4c3a:	c1 f4       	brne	.+48     	; 0x4c6c <_Z41__static_initialization_and_destruction_0ii+0x98>
    4c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c40:	01 96       	adiw	r24, 0x01	; 1
    4c42:	a1 f4       	brne	.+40     	; 0x4c6c <_Z41__static_initialization_and_destruction_0ii+0x98>
    4c44:	86 e5       	ldi	r24, 0x56	; 86
    4c46:	93 e0       	ldi	r25, 0x03	; 3
    4c48:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
static String _cmdData = "";
    4c4c:	80 e5       	ldi	r24, 0x50	; 80
    4c4e:	93 e0       	ldi	r25, 0x03	; 3
    4c50:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
static int _responseIndex = -1;
static String _cmd = "";
    4c54:	8a e4       	ldi	r24, 0x4A	; 74
    4c56:	93 e0       	ldi	r25, 0x03	; 3
    4c58:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
static String _wireResponse = "";
    4c5c:	84 e4       	ldi	r24, 0x44	; 68
    4c5e:	93 e0       	ldi	r25, 0x03	; 3
    4c60:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
#include "WaterSensorWire.h"

const byte _slave = 8; //has to be greater than 8
static const uint8_t _wireReqLength = 20;
static const uint8_t _wireRespLength = 10;
static String _wireRequest = "";
    4c64:	8e e3       	ldi	r24, 0x3E	; 62
    4c66:	93 e0       	ldi	r25, 0x03	; 3
    4c68:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10); // x. wait >5uS
    pinMode(SDA, INPUT); // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
    4c6c:	24 96       	adiw	r28, 0x04	; 4
    4c6e:	e2 e0       	ldi	r30, 0x02	; 2
    4c70:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004c74 <_GLOBAL__sub_I__ZN15WaterSensorWire5SetupEv>:
    4c74:	a0 e0       	ldi	r26, 0x00	; 0
    4c76:	b0 e0       	ldi	r27, 0x00	; 0
    4c78:	e0 e4       	ldi	r30, 0x40	; 64
    4c7a:	f6 e2       	ldi	r31, 0x26	; 38
    4c7c:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4c80:	6f ef       	ldi	r22, 0xFF	; 255
    4c82:	7f ef       	ldi	r23, 0xFF	; 255
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	a5 df       	rcall	.-182    	; 0x4bd4 <_Z41__static_initialization_and_destruction_0ii>
    4c8a:	e2 e0       	ldi	r30, 0x02	; 2
    4c8c:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004c90 <_GLOBAL__sub_D__ZN15WaterSensorWire5SetupEv>:
    4c90:	a0 e0       	ldi	r26, 0x00	; 0
    4c92:	b0 e0       	ldi	r27, 0x00	; 0
    4c94:	ee e4       	ldi	r30, 0x4E	; 78
    4c96:	f6 e2       	ldi	r31, 0x26	; 38
    4c98:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4c9c:	6f ef       	ldi	r22, 0xFF	; 255
    4c9e:	7f ef       	ldi	r23, 0xFF	; 255
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	97 df       	rcall	.-210    	; 0x4bd4 <_Z41__static_initialization_and_destruction_0ii>
    4ca6:	e2 e0       	ldi	r30, 0x02	; 2
    4ca8:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004cac <_ZN8PHSensorD1Ev>:
using namespace Memory;
#include "MathExt.h"

#include "LCDBase.h"

class PHSensor {
    4cac:	a2 e0       	ldi	r26, 0x02	; 2
    4cae:	b0 e0       	ldi	r27, 0x00	; 0
    4cb0:	ec e5       	ldi	r30, 0x5C	; 92
    4cb2:	f6 e2       	ldi	r31, 0x26	; 38
    4cb4:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4cb8:	9a 83       	std	Y+2, r25	; 0x02
    4cba:	89 83       	std	Y+1, r24	; 0x01
    4cbc:	89 81       	ldd	r24, Y+1	; 0x01
    4cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc0:	89 57       	subi	r24, 0x79	; 121
    4cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4cc8:	89 81       	ldd	r24, Y+1	; 0x01
    4cca:	9a 81       	ldd	r25, Y+2	; 0x02
    4ccc:	8f 57       	subi	r24, 0x7F	; 127
    4cce:	9f 4f       	sbci	r25, 0xFF	; 255
    4cd0:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd8:	8e 5b       	subi	r24, 0xBE	; 190
    4cda:	9f 4f       	sbci	r25, 0xFF	; 255
    4cdc:	0e 94 88 12 	call	0x2510	; 0x2510 <_ZNSt6vectorIdSaIdEED1Ev>
    4ce0:	22 96       	adiw	r28, 0x02	; 2
    4ce2:	e2 e0       	ldi	r30, 0x02	; 2
    4ce4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004ce8 <_ZN9TDSSensorD1Ev>:
#include "SensorsMem.h"
using namespace Memory;
#include "MathExt.h"
#include "LCDBase.h"

class TDSSensor {
    4ce8:	a2 e0       	ldi	r26, 0x02	; 2
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	ea e7       	ldi	r30, 0x7A	; 122
    4cee:	f6 e2       	ldi	r31, 0x26	; 38
    4cf0:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4cf4:	9a 83       	std	Y+2, r25	; 0x02
    4cf6:	89 83       	std	Y+1, r24	; 0x01
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfc:	82 58       	subi	r24, 0x82	; 130
    4cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    4d00:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4d04:	89 81       	ldd	r24, Y+1	; 0x01
    4d06:	9a 81       	ldd	r25, Y+2	; 0x02
    4d08:	88 58       	subi	r24, 0x88	; 136
    4d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d0c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_ZN6StringD1Ev>
    4d10:	22 96       	adiw	r28, 0x02	; 2
    4d12:	e2 e0       	ldi	r30, 0x02	; 2
    4d14:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004d18 <_ZN7Globals13SwitchSensorsEv>:

    PHSensor& ThePHSensor = _thePHSensor;//PHSensor(_phSensorPin, 2000, true, TheLCD);

    TDSSensor& TheTDSSensor = _theTDSSensor;//TDSSensor(_tdsSensorPin, 1000, true, TheLCD);

    void SwitchSensors() {
    4d18:	a0 e0       	ldi	r26, 0x00	; 0
    4d1a:	b0 e0       	ldi	r27, 0x00	; 0
    4d1c:	e2 e9       	ldi	r30, 0x92	; 146
    4d1e:	f6 e2       	ldi	r31, 0x26	; 38
    4d20:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
        ReadingTDS = !ReadingTDS;
    4d24:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN7Globals10ReadingTDSE>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	89 27       	eor	r24, r25
    4d2c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <_ZN7Globals10ReadingTDSE>
        if(ReadingTDS) {
    4d30:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN7Globals10ReadingTDSE>
    4d34:	88 23       	and	r24, r24
    4d36:	41 f0       	breq	.+16     	; 0x4d48 <_ZN7Globals13SwitchSensorsEv+0x30>
            ThePHSensor.TurnOff();
    4d38:	85 e8       	ldi	r24, 0x85	; 133
    4d3a:	93 e0       	ldi	r25, 0x03	; 3
    4d3c:	0e 94 35 1b 	call	0x366a	; 0x366a <_ZN8PHSensor7TurnOffEv>
            TheTDSSensor.TurnOn(); //signal mofset
    4d40:	86 e1       	ldi	r24, 0x16	; 22
    4d42:	94 e0       	ldi	r25, 0x04	; 4
    4d44:	42 da       	rcall	.-2940   	; 0x41ca <_ZN9TDSSensor6TurnOnEv>
    4d46:	07 c0       	rjmp	.+14     	; 0x4d56 <_ZN7Globals13SwitchSensorsEv+0x3e>
        }
        else {
            TheTDSSensor.TurnOff();//signal mofset
    4d48:	86 e1       	ldi	r24, 0x16	; 22
    4d4a:	94 e0       	ldi	r25, 0x04	; 4
    4d4c:	5b da       	rcall	.-2890   	; 0x4204 <_ZN9TDSSensor7TurnOffEv>
            ThePHSensor.TurnOn();
    4d4e:	85 e8       	ldi	r24, 0x85	; 133
    4d50:	93 e0       	ldi	r25, 0x03	; 3
    4d52:	0e 94 18 1b 	call	0x3630	; 0x3630 <_ZN8PHSensor6TurnOnEv>
        }
    }
    4d56:	e2 e0       	ldi	r30, 0x02	; 2
    4d58:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004d5c <_Z41__static_initialization_and_destruction_0ii>:

}
    4d5c:	ac e4       	ldi	r26, 0x4C	; 76
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e4 eb       	ldi	r30, 0xB4	; 180
    4d62:	f6 e2       	ldi	r31, 0x26	; 38
    4d64:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>
    4d68:	9e 01       	movw	r18, r28
    4d6a:	27 5b       	subi	r18, 0xB7	; 183
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	f9 01       	movw	r30, r18
    4d70:	91 83       	std	Z+1, r25	; 0x01
    4d72:	80 83       	st	Z, r24
    4d74:	ce 01       	movw	r24, r28
    4d76:	85 5b       	subi	r24, 0xB5	; 181
    4d78:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	71 83       	std	Z+1, r23	; 0x01
    4d7e:	60 83       	st	Z, r22
    4d80:	ce 01       	movw	r24, r28
    4d82:	87 5b       	subi	r24, 0xB7	; 183
    4d84:	9f 4f       	sbci	r25, 0xFF	; 255
    4d86:	fc 01       	movw	r30, r24
    4d88:	80 81       	ld	r24, Z
    4d8a:	91 81       	ldd	r25, Z+1	; 0x01
    4d8c:	01 97       	sbiw	r24, 0x01	; 1
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <_Z41__static_initialization_and_destruction_0ii+0x36>
    4d90:	44 c0       	rjmp	.+136    	; 0x4e1a <_Z41__static_initialization_and_destruction_0ii+0xbe>
    4d92:	ce 01       	movw	r24, r28
    4d94:	85 5b       	subi	r24, 0xB5	; 181
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	fc 01       	movw	r30, r24
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	01 96       	adiw	r24, 0x01	; 1
    4da0:	e1 f5       	brne	.+120    	; 0x4e1a <_Z41__static_initialization_and_destruction_0ii+0xbe>
    int _tdsRelayPin = 2;
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    4da2:	81 e6       	ldi	r24, 0x61	; 97
    4da4:	93 e0       	ldi	r25, 0x03	; 3
    4da6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN7LCDBaseC1Ev>
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4daa:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <_ZN7Globals11_phRelayPinE>
    4dae:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <_ZN7Globals11_phRelayPinE+0x1>
    4db2:	21 e6       	ldi	r18, 0x61	; 97
    4db4:	33 e0       	ldi	r19, 0x03	; 3
    4db6:	ce 01       	movw	r24, r28
    4db8:	85 96       	adiw	r24, 0x25	; 37
    4dba:	b9 01       	movw	r22, r18
    4dbc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_ZN7LCDBaseC1ERKS_>
    4dc0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZN7Globals12_phSensorPinE>
    4dc4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZN7Globals12_phSensorPinE+0x1>
    4dc8:	9e 01       	movw	r18, r28
    4dca:	2b 5d       	subi	r18, 0xDB	; 219
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	78 01       	movw	r14, r16
    4dd0:	89 01       	movw	r16, r18
    4dd2:	21 e0       	ldi	r18, 0x01	; 1
    4dd4:	40 ed       	ldi	r20, 0xD0	; 208
    4dd6:	57 e0       	ldi	r21, 0x07	; 7
    4dd8:	bc 01       	movw	r22, r24
    4dda:	85 e8       	ldi	r24, 0x85	; 133
    4ddc:	93 e0       	ldi	r25, 0x03	; 3
    4dde:	0e 94 38 16 	call	0x2c70	; 0x2c70 <_ZN8PHSensorC1Eiib7LCDBasei>
    static TDSSensor _theTDSSensor = TDSSensor(_tdsSensorPin, 1000, true, TheLCD, _tdsRelayPin);
    4de2:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <_ZN7Globals12_tdsRelayPinE>
    4de6:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <_ZN7Globals12_tdsRelayPinE+0x1>
    4dea:	81 e6       	ldi	r24, 0x61	; 97
    4dec:	93 e0       	ldi	r25, 0x03	; 3
    4dee:	bc 01       	movw	r22, r24
    4df0:	ce 01       	movw	r24, r28
    4df2:	01 96       	adiw	r24, 0x01	; 1
    4df4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_ZN7LCDBaseC1ERKS_>
    4df8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN7Globals13_tdsSensorPinE>
    4dfc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN7Globals13_tdsSensorPinE+0x1>
    4e00:	78 01       	movw	r14, r16
    4e02:	9e 01       	movw	r18, r28
    4e04:	2f 5f       	subi	r18, 0xFF	; 255
    4e06:	3f 4f       	sbci	r19, 0xFF	; 255
    4e08:	89 01       	movw	r16, r18
    4e0a:	21 e0       	ldi	r18, 0x01	; 1
    4e0c:	48 ee       	ldi	r20, 0xE8	; 232
    4e0e:	53 e0       	ldi	r21, 0x03	; 3
    4e10:	bc 01       	movw	r22, r24
    4e12:	86 e1       	ldi	r24, 0x16	; 22
    4e14:	94 e0       	ldi	r25, 0x04	; 4
    4e16:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <_ZN9TDSSensorC1Eiib7LCDBasei>
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	87 5b       	subi	r24, 0xB7	; 183
    4e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e20:	fc 01       	movw	r30, r24
    4e22:	80 81       	ld	r24, Z
    4e24:	91 81       	ldd	r25, Z+1	; 0x01
    4e26:	89 2b       	or	r24, r25
    4e28:	71 f4       	brne	.+28     	; 0x4e46 <_Z41__static_initialization_and_destruction_0ii+0xea>
    4e2a:	ce 01       	movw	r24, r28
    4e2c:	85 5b       	subi	r24, 0xB5	; 181
    4e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e30:	fc 01       	movw	r30, r24
    4e32:	80 81       	ld	r24, Z
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	01 96       	adiw	r24, 0x01	; 1
    4e38:	31 f4       	brne	.+12     	; 0x4e46 <_Z41__static_initialization_and_destruction_0ii+0xea>
    4e3a:	86 e1       	ldi	r24, 0x16	; 22
    4e3c:	94 e0       	ldi	r25, 0x04	; 4
    4e3e:	54 df       	rcall	.-344    	; 0x4ce8 <_ZN9TDSSensorD1Ev>
    bool ReadingTDS = false;
    long SensorReadInterval = 300000;//300000;//5000; // every 5 min switch ph and tds sensor
    long SensorReadDuration = 0;

    static LCDBase _theLCD = LCDBase();
    static PHSensor _thePHSensor = PHSensor(_phSensorPin, 2000, true, TheLCD, _phRelayPin);
    4e40:	85 e8       	ldi	r24, 0x85	; 133
    4e42:	93 e0       	ldi	r25, 0x03	; 3
    4e44:	33 df       	rcall	.-410    	; 0x4cac <_ZN8PHSensorD1Ev>
            TheTDSSensor.TurnOff();//signal mofset
            ThePHSensor.TurnOn();
        }
    }

}
    4e46:	c4 5b       	subi	r28, 0xB4	; 180
    4e48:	df 4f       	sbci	r29, 0xFF	; 255
    4e4a:	e6 e0       	ldi	r30, 0x06	; 6
    4e4c:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

00004e50 <_GLOBAL__sub_I__ZN7Globals12_phSensorPinE>:
    4e50:	a0 e0       	ldi	r26, 0x00	; 0
    4e52:	b0 e0       	ldi	r27, 0x00	; 0
    4e54:	ee e2       	ldi	r30, 0x2E	; 46
    4e56:	f7 e2       	ldi	r31, 0x27	; 39
    4e58:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4e5c:	6f ef       	ldi	r22, 0xFF	; 255
    4e5e:	7f ef       	ldi	r23, 0xFF	; 255
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	7b df       	rcall	.-266    	; 0x4d5c <_Z41__static_initialization_and_destruction_0ii>
    4e66:	e2 e0       	ldi	r30, 0x02	; 2
    4e68:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004e6c <_GLOBAL__sub_D__ZN7Globals12_phSensorPinE>:
    4e6c:	a0 e0       	ldi	r26, 0x00	; 0
    4e6e:	b0 e0       	ldi	r27, 0x00	; 0
    4e70:	ec e3       	ldi	r30, 0x3C	; 60
    4e72:	f7 e2       	ldi	r31, 0x27	; 39
    4e74:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4e78:	6f ef       	ldi	r22, 0xFF	; 255
    4e7a:	7f ef       	ldi	r23, 0xFF	; 255
    4e7c:	80 e0       	ldi	r24, 0x00	; 0
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	6d df       	rcall	.-294    	; 0x4d5c <_Z41__static_initialization_and_destruction_0ii>
    4e82:	e2 e0       	ldi	r30, 0x02	; 2
    4e84:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004e88 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4e88:	a6 e0       	ldi	r26, 0x06	; 6
    4e8a:	b0 e0       	ldi	r27, 0x00	; 0
    4e8c:	ea e4       	ldi	r30, 0x4A	; 74
    4e8e:	f7 e2       	ldi	r31, 0x27	; 39
    4e90:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4e94:	9a 83       	std	Y+2, r25	; 0x02
    4e96:	89 83       	std	Y+1, r24	; 0x01
    4e98:	4b 83       	std	Y+3, r20	; 0x03
    4e9a:	5c 83       	std	Y+4, r21	; 0x04
    4e9c:	6d 83       	std	Y+5, r22	; 0x05
    4e9e:	7e 83       	std	Y+6, r23	; 0x06
    4ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea4:	ad 81       	ldd	r26, Y+5	; 0x05
    4ea6:	be 81       	ldd	r27, Y+6	; 0x06
    4ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    4eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    4eac:	26 e0       	ldi	r18, 0x06	; 6
    4eae:	ac 01       	movw	r20, r24
    4eb0:	bd 01       	movw	r22, r26
    4eb2:	cf 01       	movw	r24, r30
    4eb4:	03 d4       	rcall	.+2054   	; 0x56bc <_ZN14HardwareSerial5beginEmh>
    4eb6:	26 96       	adiw	r28, 0x06	; 6
    4eb8:	e2 e0       	ldi	r30, 0x02	; 2
    4eba:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004ebe <_ZN14HardwareSerialcvbEv>:
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
    4ebe:	a2 e0       	ldi	r26, 0x02	; 2
    4ec0:	b0 e0       	ldi	r27, 0x00	; 0
    4ec2:	e5 e6       	ldi	r30, 0x65	; 101
    4ec4:	f7 e2       	ldi	r31, 0x27	; 39
    4ec6:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	22 96       	adiw	r28, 0x02	; 2
    4ed2:	e2 e0       	ldi	r30, 0x02	; 2
    4ed4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004ed8 <setup>:
SimpleTimer _asyncTimer;


void AsyncDoWork();

void setup(void) {
    4ed8:	a0 e0       	ldi	r26, 0x00	; 0
    4eda:	b0 e0       	ldi	r27, 0x00	; 0
    4edc:	e2 e7       	ldi	r30, 0x72	; 114
    4ede:	f7 e2       	ldi	r31, 0x27	; 39
    4ee0:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    // Listen on serial connection for messages from the pc
    Serial.begin(57600);
    4ee4:	40 e0       	ldi	r20, 0x00	; 0
    4ee6:	51 ee       	ldi	r21, 0xE1	; 225
    4ee8:	60 e0       	ldi	r22, 0x00	; 0
    4eea:	70 e0       	ldi	r23, 0x00	; 0
    4eec:	86 e5       	ldi	r24, 0x56	; 86
    4eee:	95 e0       	ldi	r25, 0x05	; 5
    4ef0:	cb df       	rcall	.-106    	; 0x4e88 <_ZN14HardwareSerial5beginEm>
    while(!Serial);
    4ef2:	00 00       	nop
    4ef4:	86 e5       	ldi	r24, 0x56	; 86
    4ef6:	95 e0       	ldi	r25, 0x05	; 5
    4ef8:	e2 df       	rcall	.-60     	; 0x4ebe <_ZN14HardwareSerialcvbEv>
    4efa:	98 2f       	mov	r25, r24
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	89 27       	eor	r24, r25
    4f00:	88 23       	and	r24, r24
    4f02:	c1 f7       	brne	.-16     	; 0x4ef4 <setup+0x1c>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    4f04:	89 e0       	ldi	r24, 0x09	; 9
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	88 70       	andi	r24, 0x08	; 8
    4f0a:	99 27       	eor	r25, r25
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    4f0c:	89 2b       	or	r24, r25
    4f0e:	11 f0       	breq	.+4      	; 0x4f14 <setup+0x3c>
    4f10:	88 e2       	ldi	r24, 0x28	; 40
    4f12:	01 c0       	rjmp	.+2      	; 0x4f16 <setup+0x3e>
    4f14:	88 e0       	ldi	r24, 0x08	; 8
    4f16:	99 e0       	ldi	r25, 0x09	; 9
    4f18:	97 70       	andi	r25, 0x07	; 7
    4f1a:	89 2b       	or	r24, r25
    4f1c:	98 2f       	mov	r25, r24
    4f1e:	88 e1       	ldi	r24, 0x18	; 24
    4f20:	0f b6       	in	r0, 0x3f	; 63
    4f22:	f8 94       	cli
    4f24:	a8 95       	wdr
    4f26:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4f2a:	0f be       	out	0x3f, r0	; 63
    4f2c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

    wdt_enable(WDTO_8S);

    WaterSensorWire::Setup();
    4f30:	66 da       	rcall	.-2868   	; 0x43fe <_ZN15WaterSensorWire5SetupEv>
    ThePHSensor.TurnOn();
    4f32:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    4f36:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    4f3a:	0e 94 18 1b 	call	0x3630	; 0x3630 <_ZN8PHSensor6TurnOnEv>

    _asyncTimer.setInterval(1000, AsyncDoWork); //todo: set to 1000;
    4f3e:	25 ec       	ldi	r18, 0xC5	; 197
    4f40:	37 e2       	ldi	r19, 0x27	; 39
    4f42:	48 ee       	ldi	r20, 0xE8	; 232
    4f44:	53 e0       	ldi	r21, 0x03	; 3
    4f46:	60 e0       	ldi	r22, 0x00	; 0
    4f48:	70 e0       	ldi	r23, 0x00	; 0
    4f4a:	8c e9       	ldi	r24, 0x9C	; 156
    4f4c:	94 e0       	ldi	r25, 0x04	; 4
    4f4e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN11SimpleTimer11setIntervalElPFvvE>

    //CmdMessengerExt::Init();
}
    4f52:	e2 e0       	ldi	r30, 0x02	; 2
    4f54:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004f58 <loop>:

//String _request;
//String _response;
void loop(void) {
    4f58:	a0 e0       	ldi	r26, 0x00	; 0
    4f5a:	b0 e0       	ldi	r27, 0x00	; 0
    4f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    4f5e:	f7 e2       	ldi	r31, 0x27	; 39
    4f60:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>

    _asyncTimer.run();
    4f64:	8c e9       	ldi	r24, 0x9C	; 156
    4f66:	94 e0       	ldi	r25, 0x04	; 4
    4f68:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN11SimpleTimer3runEv>

    ThePHSensor.PrintPHToLCD();
    4f6c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    4f70:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    4f74:	0e 94 57 1a 	call	0x34ae	; 0x34ae <_ZN8PHSensor12PrintPHToLCDEv>
    TheTDSSensor.PrintTDSToLCD(); //todo: uncomment this
    4f78:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    4f7c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    4f80:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <_ZN9TDSSensor13PrintTDSToLCDEv>

    //CmdMessengerExt::Loop();
}
    4f84:	e2 e0       	ldi	r30, 0x02	; 2
    4f86:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

00004f8a <_Z11AsyncDoWorkv>:

void AsyncDoWork() {
    4f8a:	a0 e0       	ldi	r26, 0x00	; 0
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	eb ec       	ldi	r30, 0xCB	; 203
    4f90:	f7 e2       	ldi	r31, 0x27	; 39
    4f92:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__prologue_saves__+0x18>

    wdt_reset();
    4f96:	a8 95       	wdr

    static unsigned long lastSensorReadTime = millis();
    4f98:	8a e4       	ldi	r24, 0x4A	; 74
    4f9a:	95 e0       	ldi	r25, 0x05	; 5
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	80 81       	ld	r24, Z
    4fa0:	88 23       	and	r24, r24
    4fa2:	81 f4       	brne	.+32     	; 0x4fc4 <_Z11AsyncDoWorkv+0x3a>
    4fa4:	20 d7       	rcall	.+3648   	; 0x5de6 <millis>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4fae:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4fb2:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4fb6:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    4fba:	8a e4       	ldi	r24, 0x4A	; 74
    4fbc:	95 e0       	ldi	r25, 0x05	; 5
    4fbe:	21 e0       	ldi	r18, 0x01	; 1
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	20 83       	st	Z, r18

    if(TheLCD.DetectKeyPress() == LcdKeyPress::Select) {
    4fc4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_ZN7Globals6TheLCDE>
    4fc8:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <_ZN7Globals6TheLCDE+0x1>
    4fcc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_ZN7LCDBase14DetectKeyPressEv>
    4fd0:	98 2f       	mov	r25, r24
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	94 30       	cpi	r25, 0x04	; 4
    4fd6:	09 f0       	breq	.+2      	; 0x4fda <_Z11AsyncDoWorkv+0x50>
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	88 23       	and	r24, r24
    4fdc:	91 f0       	breq	.+36     	; 0x5002 <_Z11AsyncDoWorkv+0x78>
        Serial.println(F("[Selelct] Pressed"));
    4fde:	83 ee       	ldi	r24, 0xE3	; 227
    4fe0:	93 e0       	ldi	r25, 0x03	; 3
    4fe2:	bc 01       	movw	r22, r24
    4fe4:	86 e5       	ldi	r24, 0x56	; 86
    4fe6:	95 e0       	ldi	r25, 0x05	; 5
    4fe8:	e4 d4       	rcall	.+2504   	; 0x59b2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        SwitchSensors();
    4fea:	96 de       	rcall	.-724    	; 0x4d18 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    4fec:	fc d6       	rcall	.+3576   	; 0x5de6 <millis>
    4fee:	dc 01       	movw	r26, r24
    4ff0:	cb 01       	movw	r24, r22
    4ff2:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    4ff6:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    4ffa:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    4ffe:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    SensorReadDuration = millis() - lastSensorReadTime;
    5002:	f1 d6       	rcall	.+3554   	; 0x5de6 <millis>
    5004:	9b 01       	movw	r18, r22
    5006:	ac 01       	movw	r20, r24
    5008:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    500c:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    5010:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    5014:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    5018:	79 01       	movw	r14, r18
    501a:	8a 01       	movw	r16, r20
    501c:	e8 1a       	sub	r14, r24
    501e:	f9 0a       	sbc	r15, r25
    5020:	0a 0b       	sbc	r16, r26
    5022:	1b 0b       	sbc	r17, r27
    5024:	d8 01       	movw	r26, r16
    5026:	c7 01       	movw	r24, r14
    5028:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZN7Globals18SensorReadDurationE>
    502c:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <_ZN7Globals18SensorReadDurationE+0x1>
    5030:	a0 93 5f 03 	sts	0x035F, r26	; 0x80035f <_ZN7Globals18SensorReadDurationE+0x2>
    5034:	b0 93 60 03 	sts	0x0360, r27	; 0x800360 <_ZN7Globals18SensorReadDurationE+0x3>
    WaterSensorWire::Loop();
    5038:	0a da       	rcall	.-3052   	; 0x444e <_ZN15WaterSensorWire4LoopEv>
    if(SensorReadDuration > SensorReadInterval) {
    503a:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <_ZN7Globals18SensorReadDurationE>
    503e:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <_ZN7Globals18SensorReadDurationE+0x1>
    5042:	40 91 5f 03 	lds	r20, 0x035F	; 0x80035f <_ZN7Globals18SensorReadDurationE+0x2>
    5046:	50 91 60 03 	lds	r21, 0x0360	; 0x800360 <_ZN7Globals18SensorReadDurationE+0x3>
    504a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZN7Globals18SensorReadIntervalE>
    504e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZN7Globals18SensorReadIntervalE+0x1>
    5052:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZN7Globals18SensorReadIntervalE+0x2>
    5056:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZN7Globals18SensorReadIntervalE+0x3>
    505a:	82 17       	cp	r24, r18
    505c:	93 07       	cpc	r25, r19
    505e:	a4 07       	cpc	r26, r20
    5060:	b5 07       	cpc	r27, r21
    5062:	64 f4       	brge	.+24     	; 0x507c <_Z11AsyncDoWorkv+0xf2>

        SwitchSensors();
    5064:	59 de       	rcall	.-846    	; 0x4d18 <_ZN7Globals13SwitchSensorsEv>
        lastSensorReadTime = millis();
    5066:	bf d6       	rcall	.+3454   	; 0x5de6 <millis>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <_ZZ11AsyncDoWorkvE18lastSensorReadTime>
    5070:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x1>
    5074:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x2>
    5078:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <_ZZ11AsyncDoWorkvE18lastSensorReadTime+0x3>
    }
    if(ReadingTDS) {
    507c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN7Globals10ReadingTDSE>
    5080:	88 23       	and	r24, r24
    5082:	39 f0       	breq	.+14     	; 0x5092 <_Z11AsyncDoWorkv+0x108>
        TheTDSSensor.CalculateTDS();
    5084:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <_ZN7Globals12TheTDSSensorE>
    5088:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <_ZN7Globals12TheTDSSensorE+0x1>
    508c:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <_ZN9TDSSensor12CalculateTDSEv>
    5090:	06 c0       	rjmp	.+12     	; 0x509e <_Z11AsyncDoWorkv+0x114>
    }
    else {
        ThePHSensor.CalculatePH();
    5092:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <_ZN7Globals11ThePHSensorE>
    5096:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <_ZN7Globals11ThePHSensorE+0x1>
    509a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN8PHSensor11CalculatePHEv>
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    509e:	e6 e0       	ldi	r30, 0x06	; 6
    50a0:	0c 94 05 34 	jmp	0x680a	; 0x680a <__epilogue_restores__+0x18>

000050a4 <_Z41__static_initialization_and_destruction_0ii>:
    50a4:	a4 e0       	ldi	r26, 0x04	; 4
    50a6:	b0 e0       	ldi	r27, 0x00	; 0
    50a8:	e8 e5       	ldi	r30, 0x58	; 88
    50aa:	f8 e2       	ldi	r31, 0x28	; 40
    50ac:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    50b0:	9a 83       	std	Y+2, r25	; 0x02
    50b2:	89 83       	std	Y+1, r24	; 0x01
    50b4:	7c 83       	std	Y+4, r23	; 0x04
    50b6:	6b 83       	std	Y+3, r22	; 0x03
    50b8:	89 81       	ldd	r24, Y+1	; 0x01
    50ba:	9a 81       	ldd	r25, Y+2	; 0x02
    50bc:	01 97       	sbiw	r24, 0x01	; 1
    50be:	41 f4       	brne	.+16     	; 0x50d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    50c0:	8b 81       	ldd	r24, Y+3	; 0x03
    50c2:	9c 81       	ldd	r25, Y+4	; 0x04
    50c4:	01 96       	adiw	r24, 0x01	; 1
    50c6:	21 f4       	brne	.+8      	; 0x50d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>

#include "WaterSensorWire.h"
//#include "CmdMessengerExt.h"
using namespace Globals;

SimpleTimer _asyncTimer;
    50c8:	8c e9       	ldi	r24, 0x9C	; 156
    50ca:	94 e0       	ldi	r25, 0x04	; 4
    50cc:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN11SimpleTimerC1Ev>
        ThePHSensor.CalculatePH();
    }

    //WaterSensorWire::Scan();
    //WaterSensorWire::I2C_ClearBus();
}
    50d0:	24 96       	adiw	r28, 0x04	; 4
    50d2:	e2 e0       	ldi	r30, 0x02	; 2
    50d4:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000050d8 <_GLOBAL__sub_I__asyncTimer>:
    50d8:	a0 e0       	ldi	r26, 0x00	; 0
    50da:	b0 e0       	ldi	r27, 0x00	; 0
    50dc:	e2 e7       	ldi	r30, 0x72	; 114
    50de:	f8 e2       	ldi	r31, 0x28	; 40
    50e0:	0c 94 ed 33 	jmp	0x67da	; 0x67da <__prologue_saves__+0x20>
    50e4:	6f ef       	ldi	r22, 0xFF	; 255
    50e6:	7f ef       	ldi	r23, 0xFF	; 255
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	db df       	rcall	.-74     	; 0x50a4 <_Z41__static_initialization_and_destruction_0ii>
    50ee:	e2 e0       	ldi	r30, 0x02	; 2
    50f0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__epilogue_restores__+0x20>

000050f4 <__subsf3>:
    50f4:	50 58       	subi	r21, 0x80	; 128

000050f6 <__addsf3>:
    50f6:	bb 27       	eor	r27, r27
    50f8:	aa 27       	eor	r26, r26
    50fa:	0e d0       	rcall	.+28     	; 0x5118 <__addsf3x>
    50fc:	75 c1       	rjmp	.+746    	; 0x53e8 <__fp_round>
    50fe:	66 d1       	rcall	.+716    	; 0x53cc <__fp_pscA>
    5100:	30 f0       	brcs	.+12     	; 0x510e <__addsf3+0x18>
    5102:	6b d1       	rcall	.+726    	; 0x53da <__fp_pscB>
    5104:	20 f0       	brcs	.+8      	; 0x510e <__addsf3+0x18>
    5106:	31 f4       	brne	.+12     	; 0x5114 <__addsf3+0x1e>
    5108:	9f 3f       	cpi	r25, 0xFF	; 255
    510a:	11 f4       	brne	.+4      	; 0x5110 <__addsf3+0x1a>
    510c:	1e f4       	brtc	.+6      	; 0x5114 <__addsf3+0x1e>
    510e:	5b c1       	rjmp	.+694    	; 0x53c6 <__fp_nan>
    5110:	0e f4       	brtc	.+2      	; 0x5114 <__addsf3+0x1e>
    5112:	e0 95       	com	r30
    5114:	e7 fb       	bst	r30, 7
    5116:	51 c1       	rjmp	.+674    	; 0x53ba <__fp_inf>

00005118 <__addsf3x>:
    5118:	e9 2f       	mov	r30, r25
    511a:	77 d1       	rcall	.+750    	; 0x540a <__fp_split3>
    511c:	80 f3       	brcs	.-32     	; 0x50fe <__addsf3+0x8>
    511e:	ba 17       	cp	r27, r26
    5120:	62 07       	cpc	r22, r18
    5122:	73 07       	cpc	r23, r19
    5124:	84 07       	cpc	r24, r20
    5126:	95 07       	cpc	r25, r21
    5128:	18 f0       	brcs	.+6      	; 0x5130 <__addsf3x+0x18>
    512a:	71 f4       	brne	.+28     	; 0x5148 <__addsf3x+0x30>
    512c:	9e f5       	brtc	.+102    	; 0x5194 <__addsf3x+0x7c>
    512e:	8f c1       	rjmp	.+798    	; 0x544e <__fp_zero>
    5130:	0e f4       	brtc	.+2      	; 0x5134 <__addsf3x+0x1c>
    5132:	e0 95       	com	r30
    5134:	0b 2e       	mov	r0, r27
    5136:	ba 2f       	mov	r27, r26
    5138:	a0 2d       	mov	r26, r0
    513a:	0b 01       	movw	r0, r22
    513c:	b9 01       	movw	r22, r18
    513e:	90 01       	movw	r18, r0
    5140:	0c 01       	movw	r0, r24
    5142:	ca 01       	movw	r24, r20
    5144:	a0 01       	movw	r20, r0
    5146:	11 24       	eor	r1, r1
    5148:	ff 27       	eor	r31, r31
    514a:	59 1b       	sub	r21, r25
    514c:	99 f0       	breq	.+38     	; 0x5174 <__addsf3x+0x5c>
    514e:	59 3f       	cpi	r21, 0xF9	; 249
    5150:	50 f4       	brcc	.+20     	; 0x5166 <__addsf3x+0x4e>
    5152:	50 3e       	cpi	r21, 0xE0	; 224
    5154:	68 f1       	brcs	.+90     	; 0x51b0 <__addsf3x+0x98>
    5156:	1a 16       	cp	r1, r26
    5158:	f0 40       	sbci	r31, 0x00	; 0
    515a:	a2 2f       	mov	r26, r18
    515c:	23 2f       	mov	r18, r19
    515e:	34 2f       	mov	r19, r20
    5160:	44 27       	eor	r20, r20
    5162:	58 5f       	subi	r21, 0xF8	; 248
    5164:	f3 cf       	rjmp	.-26     	; 0x514c <__addsf3x+0x34>
    5166:	46 95       	lsr	r20
    5168:	37 95       	ror	r19
    516a:	27 95       	ror	r18
    516c:	a7 95       	ror	r26
    516e:	f0 40       	sbci	r31, 0x00	; 0
    5170:	53 95       	inc	r21
    5172:	c9 f7       	brne	.-14     	; 0x5166 <__addsf3x+0x4e>
    5174:	7e f4       	brtc	.+30     	; 0x5194 <__addsf3x+0x7c>
    5176:	1f 16       	cp	r1, r31
    5178:	ba 0b       	sbc	r27, r26
    517a:	62 0b       	sbc	r22, r18
    517c:	73 0b       	sbc	r23, r19
    517e:	84 0b       	sbc	r24, r20
    5180:	ba f0       	brmi	.+46     	; 0x51b0 <__addsf3x+0x98>
    5182:	91 50       	subi	r25, 0x01	; 1
    5184:	a1 f0       	breq	.+40     	; 0x51ae <__addsf3x+0x96>
    5186:	ff 0f       	add	r31, r31
    5188:	bb 1f       	adc	r27, r27
    518a:	66 1f       	adc	r22, r22
    518c:	77 1f       	adc	r23, r23
    518e:	88 1f       	adc	r24, r24
    5190:	c2 f7       	brpl	.-16     	; 0x5182 <__addsf3x+0x6a>
    5192:	0e c0       	rjmp	.+28     	; 0x51b0 <__addsf3x+0x98>
    5194:	ba 0f       	add	r27, r26
    5196:	62 1f       	adc	r22, r18
    5198:	73 1f       	adc	r23, r19
    519a:	84 1f       	adc	r24, r20
    519c:	48 f4       	brcc	.+18     	; 0x51b0 <__addsf3x+0x98>
    519e:	87 95       	ror	r24
    51a0:	77 95       	ror	r23
    51a2:	67 95       	ror	r22
    51a4:	b7 95       	ror	r27
    51a6:	f7 95       	ror	r31
    51a8:	9e 3f       	cpi	r25, 0xFE	; 254
    51aa:	08 f0       	brcs	.+2      	; 0x51ae <__addsf3x+0x96>
    51ac:	b3 cf       	rjmp	.-154    	; 0x5114 <__addsf3+0x1e>
    51ae:	93 95       	inc	r25
    51b0:	88 0f       	add	r24, r24
    51b2:	08 f0       	brcs	.+2      	; 0x51b6 <__addsf3x+0x9e>
    51b4:	99 27       	eor	r25, r25
    51b6:	ee 0f       	add	r30, r30
    51b8:	97 95       	ror	r25
    51ba:	87 95       	ror	r24
    51bc:	08 95       	ret

000051be <__cmpsf2>:
    51be:	d9 d0       	rcall	.+434    	; 0x5372 <__fp_cmp>
    51c0:	08 f4       	brcc	.+2      	; 0x51c4 <__cmpsf2+0x6>
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	08 95       	ret

000051c6 <__divsf3>:
    51c6:	0c d0       	rcall	.+24     	; 0x51e0 <__divsf3x>
    51c8:	0f c1       	rjmp	.+542    	; 0x53e8 <__fp_round>
    51ca:	07 d1       	rcall	.+526    	; 0x53da <__fp_pscB>
    51cc:	40 f0       	brcs	.+16     	; 0x51de <__divsf3+0x18>
    51ce:	fe d0       	rcall	.+508    	; 0x53cc <__fp_pscA>
    51d0:	30 f0       	brcs	.+12     	; 0x51de <__divsf3+0x18>
    51d2:	21 f4       	brne	.+8      	; 0x51dc <__divsf3+0x16>
    51d4:	5f 3f       	cpi	r21, 0xFF	; 255
    51d6:	19 f0       	breq	.+6      	; 0x51de <__divsf3+0x18>
    51d8:	f0 c0       	rjmp	.+480    	; 0x53ba <__fp_inf>
    51da:	51 11       	cpse	r21, r1
    51dc:	39 c1       	rjmp	.+626    	; 0x5450 <__fp_szero>
    51de:	f3 c0       	rjmp	.+486    	; 0x53c6 <__fp_nan>

000051e0 <__divsf3x>:
    51e0:	14 d1       	rcall	.+552    	; 0x540a <__fp_split3>
    51e2:	98 f3       	brcs	.-26     	; 0x51ca <__divsf3+0x4>

000051e4 <__divsf3_pse>:
    51e4:	99 23       	and	r25, r25
    51e6:	c9 f3       	breq	.-14     	; 0x51da <__divsf3+0x14>
    51e8:	55 23       	and	r21, r21
    51ea:	b1 f3       	breq	.-20     	; 0x51d8 <__divsf3+0x12>
    51ec:	95 1b       	sub	r25, r21
    51ee:	55 0b       	sbc	r21, r21
    51f0:	bb 27       	eor	r27, r27
    51f2:	aa 27       	eor	r26, r26
    51f4:	62 17       	cp	r22, r18
    51f6:	73 07       	cpc	r23, r19
    51f8:	84 07       	cpc	r24, r20
    51fa:	38 f0       	brcs	.+14     	; 0x520a <__divsf3_pse+0x26>
    51fc:	9f 5f       	subi	r25, 0xFF	; 255
    51fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5200:	22 0f       	add	r18, r18
    5202:	33 1f       	adc	r19, r19
    5204:	44 1f       	adc	r20, r20
    5206:	aa 1f       	adc	r26, r26
    5208:	a9 f3       	breq	.-22     	; 0x51f4 <__divsf3_pse+0x10>
    520a:	33 d0       	rcall	.+102    	; 0x5272 <__divsf3_pse+0x8e>
    520c:	0e 2e       	mov	r0, r30
    520e:	3a f0       	brmi	.+14     	; 0x521e <__divsf3_pse+0x3a>
    5210:	e0 e8       	ldi	r30, 0x80	; 128
    5212:	30 d0       	rcall	.+96     	; 0x5274 <__divsf3_pse+0x90>
    5214:	91 50       	subi	r25, 0x01	; 1
    5216:	50 40       	sbci	r21, 0x00	; 0
    5218:	e6 95       	lsr	r30
    521a:	00 1c       	adc	r0, r0
    521c:	ca f7       	brpl	.-14     	; 0x5210 <__divsf3_pse+0x2c>
    521e:	29 d0       	rcall	.+82     	; 0x5272 <__divsf3_pse+0x8e>
    5220:	fe 2f       	mov	r31, r30
    5222:	27 d0       	rcall	.+78     	; 0x5272 <__divsf3_pse+0x8e>
    5224:	66 0f       	add	r22, r22
    5226:	77 1f       	adc	r23, r23
    5228:	88 1f       	adc	r24, r24
    522a:	bb 1f       	adc	r27, r27
    522c:	26 17       	cp	r18, r22
    522e:	37 07       	cpc	r19, r23
    5230:	48 07       	cpc	r20, r24
    5232:	ab 07       	cpc	r26, r27
    5234:	b0 e8       	ldi	r27, 0x80	; 128
    5236:	09 f0       	breq	.+2      	; 0x523a <__divsf3_pse+0x56>
    5238:	bb 0b       	sbc	r27, r27
    523a:	80 2d       	mov	r24, r0
    523c:	bf 01       	movw	r22, r30
    523e:	ff 27       	eor	r31, r31
    5240:	93 58       	subi	r25, 0x83	; 131
    5242:	5f 4f       	sbci	r21, 0xFF	; 255
    5244:	2a f0       	brmi	.+10     	; 0x5250 <__divsf3_pse+0x6c>
    5246:	9e 3f       	cpi	r25, 0xFE	; 254
    5248:	51 05       	cpc	r21, r1
    524a:	68 f0       	brcs	.+26     	; 0x5266 <__divsf3_pse+0x82>
    524c:	b6 c0       	rjmp	.+364    	; 0x53ba <__fp_inf>
    524e:	00 c1       	rjmp	.+512    	; 0x5450 <__fp_szero>
    5250:	5f 3f       	cpi	r21, 0xFF	; 255
    5252:	ec f3       	brlt	.-6      	; 0x524e <__divsf3_pse+0x6a>
    5254:	98 3e       	cpi	r25, 0xE8	; 232
    5256:	dc f3       	brlt	.-10     	; 0x524e <__divsf3_pse+0x6a>
    5258:	86 95       	lsr	r24
    525a:	77 95       	ror	r23
    525c:	67 95       	ror	r22
    525e:	b7 95       	ror	r27
    5260:	f7 95       	ror	r31
    5262:	9f 5f       	subi	r25, 0xFF	; 255
    5264:	c9 f7       	brne	.-14     	; 0x5258 <__divsf3_pse+0x74>
    5266:	88 0f       	add	r24, r24
    5268:	91 1d       	adc	r25, r1
    526a:	96 95       	lsr	r25
    526c:	87 95       	ror	r24
    526e:	97 f9       	bld	r25, 7
    5270:	08 95       	ret
    5272:	e1 e0       	ldi	r30, 0x01	; 1
    5274:	66 0f       	add	r22, r22
    5276:	77 1f       	adc	r23, r23
    5278:	88 1f       	adc	r24, r24
    527a:	bb 1f       	adc	r27, r27
    527c:	62 17       	cp	r22, r18
    527e:	73 07       	cpc	r23, r19
    5280:	84 07       	cpc	r24, r20
    5282:	ba 07       	cpc	r27, r26
    5284:	20 f0       	brcs	.+8      	; 0x528e <__divsf3_pse+0xaa>
    5286:	62 1b       	sub	r22, r18
    5288:	73 0b       	sbc	r23, r19
    528a:	84 0b       	sbc	r24, r20
    528c:	ba 0b       	sbc	r27, r26
    528e:	ee 1f       	adc	r30, r30
    5290:	88 f7       	brcc	.-30     	; 0x5274 <__divsf3_pse+0x90>
    5292:	e0 95       	com	r30
    5294:	08 95       	ret

00005296 <__fixsfsi>:
    5296:	04 d0       	rcall	.+8      	; 0x52a0 <__fixunssfsi>
    5298:	68 94       	set
    529a:	b1 11       	cpse	r27, r1
    529c:	d9 c0       	rjmp	.+434    	; 0x5450 <__fp_szero>
    529e:	08 95       	ret

000052a0 <__fixunssfsi>:
    52a0:	bc d0       	rcall	.+376    	; 0x541a <__fp_splitA>
    52a2:	88 f0       	brcs	.+34     	; 0x52c6 <__fixunssfsi+0x26>
    52a4:	9f 57       	subi	r25, 0x7F	; 127
    52a6:	90 f0       	brcs	.+36     	; 0x52cc <__fixunssfsi+0x2c>
    52a8:	b9 2f       	mov	r27, r25
    52aa:	99 27       	eor	r25, r25
    52ac:	b7 51       	subi	r27, 0x17	; 23
    52ae:	a0 f0       	brcs	.+40     	; 0x52d8 <__fixunssfsi+0x38>
    52b0:	d1 f0       	breq	.+52     	; 0x52e6 <__fixunssfsi+0x46>
    52b2:	66 0f       	add	r22, r22
    52b4:	77 1f       	adc	r23, r23
    52b6:	88 1f       	adc	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	1a f0       	brmi	.+6      	; 0x52c2 <__fixunssfsi+0x22>
    52bc:	ba 95       	dec	r27
    52be:	c9 f7       	brne	.-14     	; 0x52b2 <__fixunssfsi+0x12>
    52c0:	12 c0       	rjmp	.+36     	; 0x52e6 <__fixunssfsi+0x46>
    52c2:	b1 30       	cpi	r27, 0x01	; 1
    52c4:	81 f0       	breq	.+32     	; 0x52e6 <__fixunssfsi+0x46>
    52c6:	c3 d0       	rcall	.+390    	; 0x544e <__fp_zero>
    52c8:	b1 e0       	ldi	r27, 0x01	; 1
    52ca:	08 95       	ret
    52cc:	c0 c0       	rjmp	.+384    	; 0x544e <__fp_zero>
    52ce:	67 2f       	mov	r22, r23
    52d0:	78 2f       	mov	r23, r24
    52d2:	88 27       	eor	r24, r24
    52d4:	b8 5f       	subi	r27, 0xF8	; 248
    52d6:	39 f0       	breq	.+14     	; 0x52e6 <__fixunssfsi+0x46>
    52d8:	b9 3f       	cpi	r27, 0xF9	; 249
    52da:	cc f3       	brlt	.-14     	; 0x52ce <__fixunssfsi+0x2e>
    52dc:	86 95       	lsr	r24
    52de:	77 95       	ror	r23
    52e0:	67 95       	ror	r22
    52e2:	b3 95       	inc	r27
    52e4:	d9 f7       	brne	.-10     	; 0x52dc <__fixunssfsi+0x3c>
    52e6:	3e f4       	brtc	.+14     	; 0x52f6 <__fixunssfsi+0x56>
    52e8:	90 95       	com	r25
    52ea:	80 95       	com	r24
    52ec:	70 95       	com	r23
    52ee:	61 95       	neg	r22
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	8f 4f       	sbci	r24, 0xFF	; 255
    52f4:	9f 4f       	sbci	r25, 0xFF	; 255
    52f6:	08 95       	ret

000052f8 <__floatunsisf>:
    52f8:	e8 94       	clt
    52fa:	09 c0       	rjmp	.+18     	; 0x530e <__floatsisf+0x12>

000052fc <__floatsisf>:
    52fc:	97 fb       	bst	r25, 7
    52fe:	3e f4       	brtc	.+14     	; 0x530e <__floatsisf+0x12>
    5300:	90 95       	com	r25
    5302:	80 95       	com	r24
    5304:	70 95       	com	r23
    5306:	61 95       	neg	r22
    5308:	7f 4f       	sbci	r23, 0xFF	; 255
    530a:	8f 4f       	sbci	r24, 0xFF	; 255
    530c:	9f 4f       	sbci	r25, 0xFF	; 255
    530e:	99 23       	and	r25, r25
    5310:	a9 f0       	breq	.+42     	; 0x533c <__floatsisf+0x40>
    5312:	f9 2f       	mov	r31, r25
    5314:	96 e9       	ldi	r25, 0x96	; 150
    5316:	bb 27       	eor	r27, r27
    5318:	93 95       	inc	r25
    531a:	f6 95       	lsr	r31
    531c:	87 95       	ror	r24
    531e:	77 95       	ror	r23
    5320:	67 95       	ror	r22
    5322:	b7 95       	ror	r27
    5324:	f1 11       	cpse	r31, r1
    5326:	f8 cf       	rjmp	.-16     	; 0x5318 <__floatsisf+0x1c>
    5328:	fa f4       	brpl	.+62     	; 0x5368 <__floatsisf+0x6c>
    532a:	bb 0f       	add	r27, r27
    532c:	11 f4       	brne	.+4      	; 0x5332 <__floatsisf+0x36>
    532e:	60 ff       	sbrs	r22, 0
    5330:	1b c0       	rjmp	.+54     	; 0x5368 <__floatsisf+0x6c>
    5332:	6f 5f       	subi	r22, 0xFF	; 255
    5334:	7f 4f       	sbci	r23, 0xFF	; 255
    5336:	8f 4f       	sbci	r24, 0xFF	; 255
    5338:	9f 4f       	sbci	r25, 0xFF	; 255
    533a:	16 c0       	rjmp	.+44     	; 0x5368 <__floatsisf+0x6c>
    533c:	88 23       	and	r24, r24
    533e:	11 f0       	breq	.+4      	; 0x5344 <__floatsisf+0x48>
    5340:	96 e9       	ldi	r25, 0x96	; 150
    5342:	11 c0       	rjmp	.+34     	; 0x5366 <__floatsisf+0x6a>
    5344:	77 23       	and	r23, r23
    5346:	21 f0       	breq	.+8      	; 0x5350 <__floatsisf+0x54>
    5348:	9e e8       	ldi	r25, 0x8E	; 142
    534a:	87 2f       	mov	r24, r23
    534c:	76 2f       	mov	r23, r22
    534e:	05 c0       	rjmp	.+10     	; 0x535a <__floatsisf+0x5e>
    5350:	66 23       	and	r22, r22
    5352:	71 f0       	breq	.+28     	; 0x5370 <__floatsisf+0x74>
    5354:	96 e8       	ldi	r25, 0x86	; 134
    5356:	86 2f       	mov	r24, r22
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	2a f0       	brmi	.+10     	; 0x5368 <__floatsisf+0x6c>
    535e:	9a 95       	dec	r25
    5360:	66 0f       	add	r22, r22
    5362:	77 1f       	adc	r23, r23
    5364:	88 1f       	adc	r24, r24
    5366:	da f7       	brpl	.-10     	; 0x535e <__floatsisf+0x62>
    5368:	88 0f       	add	r24, r24
    536a:	96 95       	lsr	r25
    536c:	87 95       	ror	r24
    536e:	97 f9       	bld	r25, 7
    5370:	08 95       	ret

00005372 <__fp_cmp>:
    5372:	99 0f       	add	r25, r25
    5374:	00 08       	sbc	r0, r0
    5376:	55 0f       	add	r21, r21
    5378:	aa 0b       	sbc	r26, r26
    537a:	e0 e8       	ldi	r30, 0x80	; 128
    537c:	fe ef       	ldi	r31, 0xFE	; 254
    537e:	16 16       	cp	r1, r22
    5380:	17 06       	cpc	r1, r23
    5382:	e8 07       	cpc	r30, r24
    5384:	f9 07       	cpc	r31, r25
    5386:	c0 f0       	brcs	.+48     	; 0x53b8 <__fp_cmp+0x46>
    5388:	12 16       	cp	r1, r18
    538a:	13 06       	cpc	r1, r19
    538c:	e4 07       	cpc	r30, r20
    538e:	f5 07       	cpc	r31, r21
    5390:	98 f0       	brcs	.+38     	; 0x53b8 <__fp_cmp+0x46>
    5392:	62 1b       	sub	r22, r18
    5394:	73 0b       	sbc	r23, r19
    5396:	84 0b       	sbc	r24, r20
    5398:	95 0b       	sbc	r25, r21
    539a:	39 f4       	brne	.+14     	; 0x53aa <__fp_cmp+0x38>
    539c:	0a 26       	eor	r0, r26
    539e:	61 f0       	breq	.+24     	; 0x53b8 <__fp_cmp+0x46>
    53a0:	23 2b       	or	r18, r19
    53a2:	24 2b       	or	r18, r20
    53a4:	25 2b       	or	r18, r21
    53a6:	21 f4       	brne	.+8      	; 0x53b0 <__fp_cmp+0x3e>
    53a8:	08 95       	ret
    53aa:	0a 26       	eor	r0, r26
    53ac:	09 f4       	brne	.+2      	; 0x53b0 <__fp_cmp+0x3e>
    53ae:	a1 40       	sbci	r26, 0x01	; 1
    53b0:	a6 95       	lsr	r26
    53b2:	8f ef       	ldi	r24, 0xFF	; 255
    53b4:	81 1d       	adc	r24, r1
    53b6:	81 1d       	adc	r24, r1
    53b8:	08 95       	ret

000053ba <__fp_inf>:
    53ba:	97 f9       	bld	r25, 7
    53bc:	9f 67       	ori	r25, 0x7F	; 127
    53be:	80 e8       	ldi	r24, 0x80	; 128
    53c0:	70 e0       	ldi	r23, 0x00	; 0
    53c2:	60 e0       	ldi	r22, 0x00	; 0
    53c4:	08 95       	ret

000053c6 <__fp_nan>:
    53c6:	9f ef       	ldi	r25, 0xFF	; 255
    53c8:	80 ec       	ldi	r24, 0xC0	; 192
    53ca:	08 95       	ret

000053cc <__fp_pscA>:
    53cc:	00 24       	eor	r0, r0
    53ce:	0a 94       	dec	r0
    53d0:	16 16       	cp	r1, r22
    53d2:	17 06       	cpc	r1, r23
    53d4:	18 06       	cpc	r1, r24
    53d6:	09 06       	cpc	r0, r25
    53d8:	08 95       	ret

000053da <__fp_pscB>:
    53da:	00 24       	eor	r0, r0
    53dc:	0a 94       	dec	r0
    53de:	12 16       	cp	r1, r18
    53e0:	13 06       	cpc	r1, r19
    53e2:	14 06       	cpc	r1, r20
    53e4:	05 06       	cpc	r0, r21
    53e6:	08 95       	ret

000053e8 <__fp_round>:
    53e8:	09 2e       	mov	r0, r25
    53ea:	03 94       	inc	r0
    53ec:	00 0c       	add	r0, r0
    53ee:	11 f4       	brne	.+4      	; 0x53f4 <__fp_round+0xc>
    53f0:	88 23       	and	r24, r24
    53f2:	52 f0       	brmi	.+20     	; 0x5408 <__fp_round+0x20>
    53f4:	bb 0f       	add	r27, r27
    53f6:	40 f4       	brcc	.+16     	; 0x5408 <__fp_round+0x20>
    53f8:	bf 2b       	or	r27, r31
    53fa:	11 f4       	brne	.+4      	; 0x5400 <__fp_round+0x18>
    53fc:	60 ff       	sbrs	r22, 0
    53fe:	04 c0       	rjmp	.+8      	; 0x5408 <__fp_round+0x20>
    5400:	6f 5f       	subi	r22, 0xFF	; 255
    5402:	7f 4f       	sbci	r23, 0xFF	; 255
    5404:	8f 4f       	sbci	r24, 0xFF	; 255
    5406:	9f 4f       	sbci	r25, 0xFF	; 255
    5408:	08 95       	ret

0000540a <__fp_split3>:
    540a:	57 fd       	sbrc	r21, 7
    540c:	90 58       	subi	r25, 0x80	; 128
    540e:	44 0f       	add	r20, r20
    5410:	55 1f       	adc	r21, r21
    5412:	59 f0       	breq	.+22     	; 0x542a <__fp_splitA+0x10>
    5414:	5f 3f       	cpi	r21, 0xFF	; 255
    5416:	71 f0       	breq	.+28     	; 0x5434 <__fp_splitA+0x1a>
    5418:	47 95       	ror	r20

0000541a <__fp_splitA>:
    541a:	88 0f       	add	r24, r24
    541c:	97 fb       	bst	r25, 7
    541e:	99 1f       	adc	r25, r25
    5420:	61 f0       	breq	.+24     	; 0x543a <__fp_splitA+0x20>
    5422:	9f 3f       	cpi	r25, 0xFF	; 255
    5424:	79 f0       	breq	.+30     	; 0x5444 <__fp_splitA+0x2a>
    5426:	87 95       	ror	r24
    5428:	08 95       	ret
    542a:	12 16       	cp	r1, r18
    542c:	13 06       	cpc	r1, r19
    542e:	14 06       	cpc	r1, r20
    5430:	55 1f       	adc	r21, r21
    5432:	f2 cf       	rjmp	.-28     	; 0x5418 <__fp_split3+0xe>
    5434:	46 95       	lsr	r20
    5436:	f1 df       	rcall	.-30     	; 0x541a <__fp_splitA>
    5438:	08 c0       	rjmp	.+16     	; 0x544a <__fp_splitA+0x30>
    543a:	16 16       	cp	r1, r22
    543c:	17 06       	cpc	r1, r23
    543e:	18 06       	cpc	r1, r24
    5440:	99 1f       	adc	r25, r25
    5442:	f1 cf       	rjmp	.-30     	; 0x5426 <__fp_splitA+0xc>
    5444:	86 95       	lsr	r24
    5446:	71 05       	cpc	r23, r1
    5448:	61 05       	cpc	r22, r1
    544a:	08 94       	sec
    544c:	08 95       	ret

0000544e <__fp_zero>:
    544e:	e8 94       	clt

00005450 <__fp_szero>:
    5450:	bb 27       	eor	r27, r27
    5452:	66 27       	eor	r22, r22
    5454:	77 27       	eor	r23, r23
    5456:	cb 01       	movw	r24, r22
    5458:	97 f9       	bld	r25, 7
    545a:	08 95       	ret

0000545c <__gesf2>:
    545c:	8a df       	rcall	.-236    	; 0x5372 <__fp_cmp>
    545e:	08 f4       	brcc	.+2      	; 0x5462 <__gesf2+0x6>
    5460:	8f ef       	ldi	r24, 0xFF	; 255
    5462:	08 95       	ret

00005464 <__mulsf3>:
    5464:	0b d0       	rcall	.+22     	; 0x547c <__mulsf3x>
    5466:	c0 cf       	rjmp	.-128    	; 0x53e8 <__fp_round>
    5468:	b1 df       	rcall	.-158    	; 0x53cc <__fp_pscA>
    546a:	28 f0       	brcs	.+10     	; 0x5476 <__mulsf3+0x12>
    546c:	b6 df       	rcall	.-148    	; 0x53da <__fp_pscB>
    546e:	18 f0       	brcs	.+6      	; 0x5476 <__mulsf3+0x12>
    5470:	95 23       	and	r25, r21
    5472:	09 f0       	breq	.+2      	; 0x5476 <__mulsf3+0x12>
    5474:	a2 cf       	rjmp	.-188    	; 0x53ba <__fp_inf>
    5476:	a7 cf       	rjmp	.-178    	; 0x53c6 <__fp_nan>
    5478:	11 24       	eor	r1, r1
    547a:	ea cf       	rjmp	.-44     	; 0x5450 <__fp_szero>

0000547c <__mulsf3x>:
    547c:	c6 df       	rcall	.-116    	; 0x540a <__fp_split3>
    547e:	a0 f3       	brcs	.-24     	; 0x5468 <__mulsf3+0x4>

00005480 <__mulsf3_pse>:
    5480:	95 9f       	mul	r25, r21
    5482:	d1 f3       	breq	.-12     	; 0x5478 <__mulsf3+0x14>
    5484:	95 0f       	add	r25, r21
    5486:	50 e0       	ldi	r21, 0x00	; 0
    5488:	55 1f       	adc	r21, r21
    548a:	62 9f       	mul	r22, r18
    548c:	f0 01       	movw	r30, r0
    548e:	72 9f       	mul	r23, r18
    5490:	bb 27       	eor	r27, r27
    5492:	f0 0d       	add	r31, r0
    5494:	b1 1d       	adc	r27, r1
    5496:	63 9f       	mul	r22, r19
    5498:	aa 27       	eor	r26, r26
    549a:	f0 0d       	add	r31, r0
    549c:	b1 1d       	adc	r27, r1
    549e:	aa 1f       	adc	r26, r26
    54a0:	64 9f       	mul	r22, r20
    54a2:	66 27       	eor	r22, r22
    54a4:	b0 0d       	add	r27, r0
    54a6:	a1 1d       	adc	r26, r1
    54a8:	66 1f       	adc	r22, r22
    54aa:	82 9f       	mul	r24, r18
    54ac:	22 27       	eor	r18, r18
    54ae:	b0 0d       	add	r27, r0
    54b0:	a1 1d       	adc	r26, r1
    54b2:	62 1f       	adc	r22, r18
    54b4:	73 9f       	mul	r23, r19
    54b6:	b0 0d       	add	r27, r0
    54b8:	a1 1d       	adc	r26, r1
    54ba:	62 1f       	adc	r22, r18
    54bc:	83 9f       	mul	r24, r19
    54be:	a0 0d       	add	r26, r0
    54c0:	61 1d       	adc	r22, r1
    54c2:	22 1f       	adc	r18, r18
    54c4:	74 9f       	mul	r23, r20
    54c6:	33 27       	eor	r19, r19
    54c8:	a0 0d       	add	r26, r0
    54ca:	61 1d       	adc	r22, r1
    54cc:	23 1f       	adc	r18, r19
    54ce:	84 9f       	mul	r24, r20
    54d0:	60 0d       	add	r22, r0
    54d2:	21 1d       	adc	r18, r1
    54d4:	82 2f       	mov	r24, r18
    54d6:	76 2f       	mov	r23, r22
    54d8:	6a 2f       	mov	r22, r26
    54da:	11 24       	eor	r1, r1
    54dc:	9f 57       	subi	r25, 0x7F	; 127
    54de:	50 40       	sbci	r21, 0x00	; 0
    54e0:	8a f0       	brmi	.+34     	; 0x5504 <__mulsf3_pse+0x84>
    54e2:	e1 f0       	breq	.+56     	; 0x551c <__mulsf3_pse+0x9c>
    54e4:	88 23       	and	r24, r24
    54e6:	4a f0       	brmi	.+18     	; 0x54fa <__mulsf3_pse+0x7a>
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31
    54ec:	bb 1f       	adc	r27, r27
    54ee:	66 1f       	adc	r22, r22
    54f0:	77 1f       	adc	r23, r23
    54f2:	88 1f       	adc	r24, r24
    54f4:	91 50       	subi	r25, 0x01	; 1
    54f6:	50 40       	sbci	r21, 0x00	; 0
    54f8:	a9 f7       	brne	.-22     	; 0x54e4 <__mulsf3_pse+0x64>
    54fa:	9e 3f       	cpi	r25, 0xFE	; 254
    54fc:	51 05       	cpc	r21, r1
    54fe:	70 f0       	brcs	.+28     	; 0x551c <__mulsf3_pse+0x9c>
    5500:	5c cf       	rjmp	.-328    	; 0x53ba <__fp_inf>
    5502:	a6 cf       	rjmp	.-180    	; 0x5450 <__fp_szero>
    5504:	5f 3f       	cpi	r21, 0xFF	; 255
    5506:	ec f3       	brlt	.-6      	; 0x5502 <__mulsf3_pse+0x82>
    5508:	98 3e       	cpi	r25, 0xE8	; 232
    550a:	dc f3       	brlt	.-10     	; 0x5502 <__mulsf3_pse+0x82>
    550c:	86 95       	lsr	r24
    550e:	77 95       	ror	r23
    5510:	67 95       	ror	r22
    5512:	b7 95       	ror	r27
    5514:	f7 95       	ror	r31
    5516:	e7 95       	ror	r30
    5518:	9f 5f       	subi	r25, 0xFF	; 255
    551a:	c1 f7       	brne	.-16     	; 0x550c <__mulsf3_pse+0x8c>
    551c:	fe 2b       	or	r31, r30
    551e:	88 0f       	add	r24, r24
    5520:	91 1d       	adc	r25, r1
    5522:	96 95       	lsr	r25
    5524:	87 95       	ror	r24
    5526:	97 f9       	bld	r25, 7
    5528:	08 95       	ret

0000552a <__unordsf2>:
    552a:	23 df       	rcall	.-442    	; 0x5372 <__fp_cmp>
    552c:	88 0b       	sbc	r24, r24
    552e:	99 0b       	sbc	r25, r25
    5530:	08 95       	ret

00005532 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    5532:	0e 94 88 37 	call	0x6f10	; 0x6f10 <abort>

00005536 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5536:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5538:	91 8d       	ldd	r25, Z+25	; 0x19
    553a:	22 8d       	ldd	r18, Z+26	; 0x1a
    553c:	89 2f       	mov	r24, r25
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	80 5c       	subi	r24, 0xC0	; 192
    5542:	9f 4f       	sbci	r25, 0xFF	; 255
    5544:	82 1b       	sub	r24, r18
    5546:	91 09       	sbc	r25, r1
}
    5548:	8f 73       	andi	r24, 0x3F	; 63
    554a:	99 27       	eor	r25, r25
    554c:	08 95       	ret

0000554e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    554e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5550:	91 8d       	ldd	r25, Z+25	; 0x19
    5552:	82 8d       	ldd	r24, Z+26	; 0x1a
    5554:	98 17       	cp	r25, r24
    5556:	31 f0       	breq	.+12     	; 0x5564 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5558:	82 8d       	ldd	r24, Z+26	; 0x1a
    555a:	e8 0f       	add	r30, r24
    555c:	f1 1d       	adc	r31, r1
    555e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5564:	8f ef       	ldi	r24, 0xFF	; 255
    5566:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5568:	08 95       	ret

0000556a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    556a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    556c:	91 8d       	ldd	r25, Z+25	; 0x19
    556e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5570:	98 17       	cp	r25, r24
    5572:	61 f0       	breq	.+24     	; 0x558c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5574:	82 8d       	ldd	r24, Z+26	; 0x1a
    5576:	df 01       	movw	r26, r30
    5578:	a8 0f       	add	r26, r24
    557a:	b1 1d       	adc	r27, r1
    557c:	5d 96       	adiw	r26, 0x1d	; 29
    557e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5580:	92 8d       	ldd	r25, Z+26	; 0x1a
    5582:	9f 5f       	subi	r25, 0xFF	; 255
    5584:	9f 73       	andi	r25, 0x3F	; 63
    5586:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    558c:	8f ef       	ldi	r24, 0xFF	; 255
    558e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5590:	08 95       	ret

00005592 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5592:	89 e1       	ldi	r24, 0x19	; 25
    5594:	9c e2       	ldi	r25, 0x2C	; 44
    5596:	89 2b       	or	r24, r25
    5598:	41 f0       	breq	.+16     	; 0x55aa <_Z14serialEventRunv+0x18>
    559a:	80 e0       	ldi	r24, 0x00	; 0
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	89 2b       	or	r24, r25
    55a0:	21 f0       	breq	.+8      	; 0x55aa <_Z14serialEventRunv+0x18>
    55a2:	47 d1       	rcall	.+654    	; 0x5832 <_Z17Serial0_availablev>
    55a4:	81 11       	cpse	r24, r1
    55a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    55aa:	08 95       	ret

000055ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    55ac:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    55ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    55b0:	df 01       	movw	r26, r30
    55b2:	a8 0f       	add	r26, r24
    55b4:	b1 1d       	adc	r27, r1
    55b6:	a3 5a       	subi	r26, 0xA3	; 163
    55b8:	bf 4f       	sbci	r27, 0xFF	; 255
    55ba:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    55bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	01 96       	adiw	r24, 0x01	; 1
    55c2:	8f 73       	andi	r24, 0x3F	; 63
    55c4:	99 27       	eor	r25, r25
    55c6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    55c8:	a6 89       	ldd	r26, Z+22	; 0x16
    55ca:	b7 89       	ldd	r27, Z+23	; 0x17
    55cc:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    55ce:	a0 89       	ldd	r26, Z+16	; 0x10
    55d0:	b1 89       	ldd	r27, Z+17	; 0x11
    55d2:	8c 91       	ld	r24, X
    55d4:	80 64       	ori	r24, 0x40	; 64
    55d6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    55d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    55da:	84 8d       	ldd	r24, Z+28	; 0x1c
    55dc:	98 13       	cpse	r25, r24
    55de:	06 c0       	rjmp	.+12     	; 0x55ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    55e0:	02 88       	ldd	r0, Z+18	; 0x12
    55e2:	f3 89       	ldd	r31, Z+19	; 0x13
    55e4:	e0 2d       	mov	r30, r0
    55e6:	80 81       	ld	r24, Z
    55e8:	8f 7d       	andi	r24, 0xDF	; 223
    55ea:	80 83       	st	Z, r24
    55ec:	08 95       	ret

000055ee <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    55ee:	cf 93       	push	r28
    55f0:	df 93       	push	r29
    55f2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    55f4:	88 8d       	ldd	r24, Y+24	; 0x18
    55f6:	88 23       	and	r24, r24
    55f8:	c1 f0       	breq	.+48     	; 0x562a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    55fa:	ea 89       	ldd	r30, Y+18	; 0x12
    55fc:	fb 89       	ldd	r31, Y+19	; 0x13
    55fe:	80 81       	ld	r24, Z
    5600:	85 fd       	sbrc	r24, 5
    5602:	05 c0       	rjmp	.+10     	; 0x560e <_ZN14HardwareSerial5flushEv+0x20>
    5604:	a8 89       	ldd	r26, Y+16	; 0x10
    5606:	b9 89       	ldd	r27, Y+17	; 0x11
    5608:	8c 91       	ld	r24, X
    560a:	86 fd       	sbrc	r24, 6
    560c:	0e c0       	rjmp	.+28     	; 0x562a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    560e:	0f b6       	in	r0, 0x3f	; 63
    5610:	07 fc       	sbrc	r0, 7
    5612:	f5 cf       	rjmp	.-22     	; 0x55fe <_ZN14HardwareSerial5flushEv+0x10>
    5614:	80 81       	ld	r24, Z
    5616:	85 ff       	sbrs	r24, 5
    5618:	f2 cf       	rjmp	.-28     	; 0x55fe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    561a:	a8 89       	ldd	r26, Y+16	; 0x10
    561c:	b9 89       	ldd	r27, Y+17	; 0x11
    561e:	8c 91       	ld	r24, X
    5620:	85 ff       	sbrs	r24, 5
    5622:	ed cf       	rjmp	.-38     	; 0x55fe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5624:	ce 01       	movw	r24, r28
    5626:	c2 df       	rcall	.-124    	; 0x55ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5628:	e8 cf       	rjmp	.-48     	; 0x55fa <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	08 95       	ret

00005630 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    5630:	ef 92       	push	r14
    5632:	ff 92       	push	r15
    5634:	0f 93       	push	r16
    5636:	1f 93       	push	r17
    5638:	cf 93       	push	r28
    563a:	df 93       	push	r29
    563c:	ec 01       	movw	r28, r24
  _written = true;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5642:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5644:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5646:	98 13       	cpse	r25, r24
    5648:	05 c0       	rjmp	.+10     	; 0x5654 <_ZN14HardwareSerial5writeEh+0x24>
    564a:	e8 89       	ldd	r30, Y+16	; 0x10
    564c:	f9 89       	ldd	r31, Y+17	; 0x11
    564e:	80 81       	ld	r24, Z
    5650:	85 fd       	sbrc	r24, 5
    5652:	23 c0       	rjmp	.+70     	; 0x569a <_ZN14HardwareSerial5writeEh+0x6a>
    5654:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5656:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5658:	10 e0       	ldi	r17, 0x00	; 0
    565a:	0f 5f       	subi	r16, 0xFF	; 255
    565c:	1f 4f       	sbci	r17, 0xFF	; 255
    565e:	0f 73       	andi	r16, 0x3F	; 63
    5660:	11 27       	eor	r17, r17
    5662:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5664:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5666:	e8 12       	cpse	r14, r24
    5668:	0b c0       	rjmp	.+22     	; 0x5680 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    566a:	0f b6       	in	r0, 0x3f	; 63
    566c:	07 fc       	sbrc	r0, 7
    566e:	fa cf       	rjmp	.-12     	; 0x5664 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5670:	e8 89       	ldd	r30, Y+16	; 0x10
    5672:	f9 89       	ldd	r31, Y+17	; 0x11
    5674:	80 81       	ld	r24, Z
    5676:	85 ff       	sbrs	r24, 5
    5678:	f5 cf       	rjmp	.-22     	; 0x5664 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    567a:	ce 01       	movw	r24, r28
    567c:	97 df       	rcall	.-210    	; 0x55ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    567e:	f2 cf       	rjmp	.-28     	; 0x5664 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5682:	fe 01       	movw	r30, r28
    5684:	e8 0f       	add	r30, r24
    5686:	f1 1d       	adc	r31, r1
    5688:	e3 5a       	subi	r30, 0xA3	; 163
    568a:	ff 4f       	sbci	r31, 0xFF	; 255
    568c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    568e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    5690:	ea 89       	ldd	r30, Y+18	; 0x12
    5692:	fb 89       	ldd	r31, Y+19	; 0x13
    5694:	80 81       	ld	r24, Z
    5696:	80 62       	ori	r24, 0x20	; 32
    5698:	07 c0       	rjmp	.+14     	; 0x56a8 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    569a:	ee 89       	ldd	r30, Y+22	; 0x16
    569c:	ff 89       	ldd	r31, Y+23	; 0x17
    569e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    56a0:	e8 89       	ldd	r30, Y+16	; 0x10
    56a2:	f9 89       	ldd	r31, Y+17	; 0x11
    56a4:	80 81       	ld	r24, Z
    56a6:	80 64       	ori	r24, 0x40	; 64
    56a8:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	df 91       	pop	r29
    56b0:	cf 91       	pop	r28
    56b2:	1f 91       	pop	r17
    56b4:	0f 91       	pop	r16
    56b6:	ff 90       	pop	r15
    56b8:	ef 90       	pop	r14
    56ba:	08 95       	ret

000056bc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    56bc:	cf 92       	push	r12
    56be:	df 92       	push	r13
    56c0:	ef 92       	push	r14
    56c2:	ff 92       	push	r15
    56c4:	1f 93       	push	r17
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	ec 01       	movw	r28, r24
    56cc:	6a 01       	movw	r12, r20
    56ce:	7b 01       	movw	r14, r22
    56d0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    56d2:	e8 89       	ldd	r30, Y+16	; 0x10
    56d4:	f9 89       	ldd	r31, Y+17	; 0x11
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    56da:	41 15       	cp	r20, r1
    56dc:	51 4e       	sbci	r21, 0xE1	; 225
    56de:	61 05       	cpc	r22, r1
    56e0:	71 05       	cpc	r23, r1
    56e2:	b1 f0       	breq	.+44     	; 0x5710 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    56e4:	60 e0       	ldi	r22, 0x00	; 0
    56e6:	79 e0       	ldi	r23, 0x09	; 9
    56e8:	8d e3       	ldi	r24, 0x3D	; 61
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	a7 01       	movw	r20, r14
    56ee:	96 01       	movw	r18, r12
    56f0:	0e 94 8f 33 	call	0x671e	; 0x671e <__udivmodsi4>
    56f4:	da 01       	movw	r26, r20
    56f6:	c9 01       	movw	r24, r18
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	a1 09       	sbc	r26, r1
    56fc:	b1 09       	sbc	r27, r1
    56fe:	b6 95       	lsr	r27
    5700:	a7 95       	ror	r26
    5702:	97 95       	ror	r25
    5704:	87 95       	ror	r24
    5706:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5708:	41 15       	cp	r20, r1
    570a:	80 e1       	ldi	r24, 0x10	; 16
    570c:	58 07       	cpc	r21, r24
    570e:	a0 f0       	brcs	.+40     	; 0x5738 <_ZN14HardwareSerial5beginEmh+0x7c>
  {
    *_ucsra = 0;
    5710:	e8 89       	ldd	r30, Y+16	; 0x10
    5712:	f9 89       	ldd	r31, Y+17	; 0x11
    5714:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5716:	60 e8       	ldi	r22, 0x80	; 128
    5718:	74 e8       	ldi	r23, 0x84	; 132
    571a:	8e e1       	ldi	r24, 0x1E	; 30
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	a7 01       	movw	r20, r14
    5720:	96 01       	movw	r18, r12
    5722:	fd d7       	rcall	.+4090   	; 0x671e <__udivmodsi4>
    5724:	ba 01       	movw	r22, r20
    5726:	a9 01       	movw	r20, r18
    5728:	41 50       	subi	r20, 0x01	; 1
    572a:	51 09       	sbc	r21, r1
    572c:	61 09       	sbc	r22, r1
    572e:	71 09       	sbc	r23, r1
    5730:	76 95       	lsr	r23
    5732:	67 95       	ror	r22
    5734:	57 95       	ror	r21
    5736:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5738:	ec 85       	ldd	r30, Y+12	; 0x0c
    573a:	fd 85       	ldd	r31, Y+13	; 0x0d
    573c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    573e:	ee 85       	ldd	r30, Y+14	; 0x0e
    5740:	ff 85       	ldd	r31, Y+15	; 0x0f
    5742:	40 83       	st	Z, r20

  _written = false;
    5744:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5746:	ec 89       	ldd	r30, Y+20	; 0x14
    5748:	fd 89       	ldd	r31, Y+21	; 0x15
    574a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    574c:	ea 89       	ldd	r30, Y+18	; 0x12
    574e:	fb 89       	ldd	r31, Y+19	; 0x13
    5750:	80 81       	ld	r24, Z
    5752:	80 61       	ori	r24, 0x10	; 16
    5754:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5756:	ea 89       	ldd	r30, Y+18	; 0x12
    5758:	fb 89       	ldd	r31, Y+19	; 0x13
    575a:	80 81       	ld	r24, Z
    575c:	88 60       	ori	r24, 0x08	; 8
    575e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5760:	ea 89       	ldd	r30, Y+18	; 0x12
    5762:	fb 89       	ldd	r31, Y+19	; 0x13
    5764:	80 81       	ld	r24, Z
    5766:	80 68       	ori	r24, 0x80	; 128
    5768:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    576a:	ea 89       	ldd	r30, Y+18	; 0x12
    576c:	fb 89       	ldd	r31, Y+19	; 0x13
    576e:	80 81       	ld	r24, Z
    5770:	8f 7d       	andi	r24, 0xDF	; 223
    5772:	80 83       	st	Z, r24
}
    5774:	df 91       	pop	r29
    5776:	cf 91       	pop	r28
    5778:	1f 91       	pop	r17
    577a:	ff 90       	pop	r15
    577c:	ef 90       	pop	r14
    577e:	df 90       	pop	r13
    5780:	cf 90       	pop	r12
    5782:	08 95       	ret

00005784 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5784:	1f 92       	push	r1
    5786:	0f 92       	push	r0
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	0f 92       	push	r0
    578c:	11 24       	eor	r1, r1
    578e:	2f 93       	push	r18
    5790:	8f 93       	push	r24
    5792:	9f 93       	push	r25
    5794:	ef 93       	push	r30
    5796:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5798:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <Serial+0x10>
    579c:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <Serial+0x11>
    57a0:	80 81       	ld	r24, Z
    57a2:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x16>
    57a6:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x17>
    57aa:	82 fd       	sbrc	r24, 2
    57ac:	12 c0       	rjmp	.+36     	; 0x57d2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    57ae:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    57b0:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Serial+0x19>
    57b4:	8f 5f       	subi	r24, 0xFF	; 255
    57b6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    57b8:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <Serial+0x1a>
    57bc:	82 17       	cp	r24, r18
    57be:	51 f0       	breq	.+20     	; 0x57d4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    57c0:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <Serial+0x19>
    57c4:	f0 e0       	ldi	r31, 0x00	; 0
    57c6:	ea 5a       	subi	r30, 0xAA	; 170
    57c8:	fa 4f       	sbci	r31, 0xFA	; 250
    57ca:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    57cc:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Serial+0x19>
    57d0:	01 c0       	rjmp	.+2      	; 0x57d4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    57d2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    57d4:	ff 91       	pop	r31
    57d6:	ef 91       	pop	r30
    57d8:	9f 91       	pop	r25
    57da:	8f 91       	pop	r24
    57dc:	2f 91       	pop	r18
    57de:	0f 90       	pop	r0
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	0f 90       	pop	r0
    57e4:	1f 90       	pop	r1
    57e6:	18 95       	reti

000057e8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    57e8:	1f 92       	push	r1
    57ea:	0f 92       	push	r0
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	0f 92       	push	r0
    57f0:	11 24       	eor	r1, r1
    57f2:	2f 93       	push	r18
    57f4:	3f 93       	push	r19
    57f6:	4f 93       	push	r20
    57f8:	5f 93       	push	r21
    57fa:	6f 93       	push	r22
    57fc:	7f 93       	push	r23
    57fe:	8f 93       	push	r24
    5800:	9f 93       	push	r25
    5802:	af 93       	push	r26
    5804:	bf 93       	push	r27
    5806:	ef 93       	push	r30
    5808:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    580a:	86 e5       	ldi	r24, 0x56	; 86
    580c:	95 e0       	ldi	r25, 0x05	; 5
    580e:	ce de       	rcall	.-612    	; 0x55ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5810:	ff 91       	pop	r31
    5812:	ef 91       	pop	r30
    5814:	bf 91       	pop	r27
    5816:	af 91       	pop	r26
    5818:	9f 91       	pop	r25
    581a:	8f 91       	pop	r24
    581c:	7f 91       	pop	r23
    581e:	6f 91       	pop	r22
    5820:	5f 91       	pop	r21
    5822:	4f 91       	pop	r20
    5824:	3f 91       	pop	r19
    5826:	2f 91       	pop	r18
    5828:	0f 90       	pop	r0
    582a:	0f be       	out	0x3f, r0	; 63
    582c:	0f 90       	pop	r0
    582e:	1f 90       	pop	r1
    5830:	18 95       	reti

00005832 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5832:	86 e5       	ldi	r24, 0x56	; 86
    5834:	95 e0       	ldi	r25, 0x05	; 5
    5836:	7f de       	rcall	.-770    	; 0x5536 <_ZN14HardwareSerial9availableEv>
    5838:	21 e0       	ldi	r18, 0x01	; 1
    583a:	89 2b       	or	r24, r25
    583c:	09 f4       	brne	.+2      	; 0x5840 <_Z17Serial0_availablev+0xe>
    583e:	20 e0       	ldi	r18, 0x00	; 0
}
    5840:	82 2f       	mov	r24, r18
    5842:	08 95       	ret

00005844 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5844:	e6 e5       	ldi	r30, 0x56	; 86
    5846:	f5 e0       	ldi	r31, 0x05	; 5
    5848:	13 82       	std	Z+3, r1	; 0x03
    584a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    584c:	88 ee       	ldi	r24, 0xE8	; 232
    584e:	93 e0       	ldi	r25, 0x03	; 3
    5850:	a0 e0       	ldi	r26, 0x00	; 0
    5852:	b0 e0       	ldi	r27, 0x00	; 0
    5854:	84 83       	std	Z+4, r24	; 0x04
    5856:	95 83       	std	Z+5, r25	; 0x05
    5858:	a6 83       	std	Z+6, r26	; 0x06
    585a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    585c:	8b eb       	ldi	r24, 0xBB	; 187
    585e:	91 e0       	ldi	r25, 0x01	; 1
    5860:	91 83       	std	Z+1, r25	; 0x01
    5862:	80 83       	st	Z, r24
    5864:	85 ec       	ldi	r24, 0xC5	; 197
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	95 87       	std	Z+13, r25	; 0x0d
    586a:	84 87       	std	Z+12, r24	; 0x0c
    586c:	84 ec       	ldi	r24, 0xC4	; 196
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	97 87       	std	Z+15, r25	; 0x0f
    5872:	86 87       	std	Z+14, r24	; 0x0e
    5874:	80 ec       	ldi	r24, 0xC0	; 192
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	91 8b       	std	Z+17, r25	; 0x11
    587a:	80 8b       	std	Z+16, r24	; 0x10
    587c:	81 ec       	ldi	r24, 0xC1	; 193
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	93 8b       	std	Z+19, r25	; 0x13
    5882:	82 8b       	std	Z+18, r24	; 0x12
    5884:	82 ec       	ldi	r24, 0xC2	; 194
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	95 8b       	std	Z+21, r25	; 0x15
    588a:	84 8b       	std	Z+20, r24	; 0x14
    588c:	86 ec       	ldi	r24, 0xC6	; 198
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	97 8b       	std	Z+23, r25	; 0x17
    5892:	86 8b       	std	Z+22, r24	; 0x16
    5894:	11 8e       	std	Z+25, r1	; 0x19
    5896:	12 8e       	std	Z+26, r1	; 0x1a
    5898:	13 8e       	std	Z+27, r1	; 0x1b
    589a:	14 8e       	std	Z+28, r1	; 0x1c
    589c:	08 95       	ret

0000589e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    589e:	08 95       	ret

000058a0 <main>:

int main(void)
{
	init();
    58a0:	17 d3       	rcall	.+1582   	; 0x5ed0 <init>

	initVariant();
    58a2:	fd df       	rcall	.-6      	; 0x589e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    58a4:	19 db       	rcall	.-2510   	; 0x4ed8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    58a6:	c9 ec       	ldi	r28, 0xC9	; 201
    58a8:	da e2       	ldi	r29, 0x2A	; 42
#endif
	
	setup();
    
	for (;;) {
		loop();
    58aa:	56 db       	rcall	.-2388   	; 0x4f58 <loop>
		if (serialEventRun) serialEventRun();
    58ac:	20 97       	sbiw	r28, 0x00	; 0
    58ae:	e9 f3       	breq	.-6      	; 0x58aa <main+0xa>
    58b0:	70 de       	rcall	.-800    	; 0x5592 <_Z14serialEventRunv>
    58b2:	fb cf       	rjmp	.-10     	; 0x58aa <main+0xa>

000058b4 <_Znwj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    58b4:	e7 c7       	rjmp	.+4046   	; 0x6884 <malloc>

000058b6 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
    58b6:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <free>

000058ba <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    58ba:	cf 92       	push	r12
    58bc:	df 92       	push	r13
    58be:	ef 92       	push	r14
    58c0:	ff 92       	push	r15
    58c2:	0f 93       	push	r16
    58c4:	1f 93       	push	r17
    58c6:	cf 93       	push	r28
    58c8:	df 93       	push	r29
    58ca:	6c 01       	movw	r12, r24
    58cc:	7a 01       	movw	r14, r20
    58ce:	8b 01       	movw	r16, r22
    58d0:	c0 e0       	ldi	r28, 0x00	; 0
    58d2:	d0 e0       	ldi	r29, 0x00	; 0
    58d4:	ce 15       	cp	r28, r14
    58d6:	df 05       	cpc	r29, r15
    58d8:	89 f0       	breq	.+34     	; 0x58fc <_ZN5Print5writeEPKhj+0x42>
    58da:	d8 01       	movw	r26, r16
    58dc:	6d 91       	ld	r22, X+
    58de:	8d 01       	movw	r16, r26
    58e0:	d6 01       	movw	r26, r12
    58e2:	ed 91       	ld	r30, X+
    58e4:	fc 91       	ld	r31, X
    58e6:	01 90       	ld	r0, Z+
    58e8:	f0 81       	ld	r31, Z
    58ea:	e0 2d       	mov	r30, r0
    58ec:	c6 01       	movw	r24, r12
    58ee:	09 95       	icall
    58f0:	89 2b       	or	r24, r25
    58f2:	11 f4       	brne	.+4      	; 0x58f8 <_ZN5Print5writeEPKhj+0x3e>
    58f4:	7e 01       	movw	r14, r28
    58f6:	02 c0       	rjmp	.+4      	; 0x58fc <_ZN5Print5writeEPKhj+0x42>
    58f8:	21 96       	adiw	r28, 0x01	; 1
    58fa:	ec cf       	rjmp	.-40     	; 0x58d4 <_ZN5Print5writeEPKhj+0x1a>
    58fc:	c7 01       	movw	r24, r14
    58fe:	df 91       	pop	r29
    5900:	cf 91       	pop	r28
    5902:	1f 91       	pop	r17
    5904:	0f 91       	pop	r16
    5906:	ff 90       	pop	r15
    5908:	ef 90       	pop	r14
    590a:	df 90       	pop	r13
    590c:	cf 90       	pop	r12
    590e:	08 95       	ret

00005910 <_ZN5Print5writeEPKc>:
    5910:	61 15       	cp	r22, r1
    5912:	71 05       	cpc	r23, r1
    5914:	79 f0       	breq	.+30     	; 0x5934 <_ZN5Print5writeEPKc+0x24>
    5916:	fb 01       	movw	r30, r22
    5918:	01 90       	ld	r0, Z+
    591a:	00 20       	and	r0, r0
    591c:	e9 f7       	brne	.-6      	; 0x5918 <_ZN5Print5writeEPKc+0x8>
    591e:	31 97       	sbiw	r30, 0x01	; 1
    5920:	af 01       	movw	r20, r30
    5922:	46 1b       	sub	r20, r22
    5924:	57 0b       	sbc	r21, r23
    5926:	dc 01       	movw	r26, r24
    5928:	ed 91       	ld	r30, X+
    592a:	fc 91       	ld	r31, X
    592c:	02 80       	ldd	r0, Z+2	; 0x02
    592e:	f3 81       	ldd	r31, Z+3	; 0x03
    5930:	e0 2d       	mov	r30, r0
    5932:	09 94       	ijmp
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	08 95       	ret

0000593a <_ZN5Print5printEPK19__FlashStringHelper>:
    593a:	ef 92       	push	r14
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	8c 01       	movw	r16, r24
    5948:	7b 01       	movw	r14, r22
    594a:	c0 e0       	ldi	r28, 0x00	; 0
    594c:	d0 e0       	ldi	r29, 0x00	; 0
    594e:	f7 01       	movw	r30, r14
    5950:	ec 0f       	add	r30, r28
    5952:	fd 1f       	adc	r31, r29
    5954:	64 91       	lpm	r22, Z
    5956:	66 23       	and	r22, r22
    5958:	61 f0       	breq	.+24     	; 0x5972 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    595a:	d8 01       	movw	r26, r16
    595c:	ed 91       	ld	r30, X+
    595e:	fc 91       	ld	r31, X
    5960:	01 90       	ld	r0, Z+
    5962:	f0 81       	ld	r31, Z
    5964:	e0 2d       	mov	r30, r0
    5966:	c8 01       	movw	r24, r16
    5968:	09 95       	icall
    596a:	89 2b       	or	r24, r25
    596c:	11 f0       	breq	.+4      	; 0x5972 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    596e:	21 96       	adiw	r28, 0x01	; 1
    5970:	ee cf       	rjmp	.-36     	; 0x594e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5972:	ce 01       	movw	r24, r28
    5974:	df 91       	pop	r29
    5976:	cf 91       	pop	r28
    5978:	1f 91       	pop	r17
    597a:	0f 91       	pop	r16
    597c:	ff 90       	pop	r15
    597e:	ef 90       	pop	r14
    5980:	08 95       	ret

00005982 <_ZN5Print5printERK6String>:
    5982:	dc 01       	movw	r26, r24
    5984:	ed 91       	ld	r30, X+
    5986:	fc 91       	ld	r31, X
    5988:	db 01       	movw	r26, r22
    598a:	14 96       	adiw	r26, 0x04	; 4
    598c:	4d 91       	ld	r20, X+
    598e:	5c 91       	ld	r21, X
    5990:	15 97       	sbiw	r26, 0x05	; 5
    5992:	6d 91       	ld	r22, X+
    5994:	7c 91       	ld	r23, X
    5996:	02 80       	ldd	r0, Z+2	; 0x02
    5998:	f3 81       	ldd	r31, Z+3	; 0x03
    599a:	e0 2d       	mov	r30, r0
    599c:	09 94       	ijmp

0000599e <_ZN5Print5printEc>:
    599e:	dc 01       	movw	r26, r24
    59a0:	ed 91       	ld	r30, X+
    59a2:	fc 91       	ld	r31, X
    59a4:	01 90       	ld	r0, Z+
    59a6:	f0 81       	ld	r31, Z
    59a8:	e0 2d       	mov	r30, r0
    59aa:	09 94       	ijmp

000059ac <_ZN5Print7printlnEv>:
    59ac:	67 ec       	ldi	r22, 0xC7	; 199
    59ae:	71 e0       	ldi	r23, 0x01	; 1
    59b0:	af cf       	rjmp	.-162    	; 0x5910 <_ZN5Print5writeEPKc>

000059b2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    59b2:	0f 93       	push	r16
    59b4:	1f 93       	push	r17
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	ec 01       	movw	r28, r24
    59bc:	be df       	rcall	.-132    	; 0x593a <_ZN5Print5printEPK19__FlashStringHelper>
    59be:	8c 01       	movw	r16, r24
    59c0:	ce 01       	movw	r24, r28
    59c2:	f4 df       	rcall	.-24     	; 0x59ac <_ZN5Print7printlnEv>
    59c4:	80 0f       	add	r24, r16
    59c6:	91 1f       	adc	r25, r17
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	1f 91       	pop	r17
    59ce:	0f 91       	pop	r16
    59d0:	08 95       	ret

000059d2 <_ZN5Print7printlnERK6String>:
    59d2:	0f 93       	push	r16
    59d4:	1f 93       	push	r17
    59d6:	cf 93       	push	r28
    59d8:	df 93       	push	r29
    59da:	ec 01       	movw	r28, r24
    59dc:	d2 df       	rcall	.-92     	; 0x5982 <_ZN5Print5printERK6String>
    59de:	8c 01       	movw	r16, r24
    59e0:	ce 01       	movw	r24, r28
    59e2:	e4 df       	rcall	.-56     	; 0x59ac <_ZN5Print7printlnEv>
    59e4:	80 0f       	add	r24, r16
    59e6:	91 1f       	adc	r25, r17
    59e8:	df 91       	pop	r29
    59ea:	cf 91       	pop	r28
    59ec:	1f 91       	pop	r17
    59ee:	0f 91       	pop	r16
    59f0:	08 95       	ret

000059f2 <_ZN5Print11printNumberEmh>:
    59f2:	8f 92       	push	r8
    59f4:	9f 92       	push	r9
    59f6:	af 92       	push	r10
    59f8:	bf 92       	push	r11
    59fa:	cf 92       	push	r12
    59fc:	df 92       	push	r13
    59fe:	ef 92       	push	r14
    5a00:	ff 92       	push	r15
    5a02:	0f 93       	push	r16
    5a04:	1f 93       	push	r17
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	cd b7       	in	r28, 0x3d	; 61
    5a0c:	de b7       	in	r29, 0x3e	; 62
    5a0e:	a1 97       	sbiw	r28, 0x21	; 33
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	f8 94       	cli
    5a14:	de bf       	out	0x3e, r29	; 62
    5a16:	0f be       	out	0x3f, r0	; 63
    5a18:	cd bf       	out	0x3d, r28	; 61
    5a1a:	7c 01       	movw	r14, r24
    5a1c:	d4 2e       	mov	r13, r20
    5a1e:	c5 2e       	mov	r12, r21
    5a20:	db 01       	movw	r26, r22
    5a22:	19 a2       	std	Y+33, r1	; 0x21
    5a24:	22 30       	cpi	r18, 0x02	; 2
    5a26:	08 f4       	brcc	.+2      	; 0x5a2a <_ZN5Print11printNumberEmh+0x38>
    5a28:	2a e0       	ldi	r18, 0x0A	; 10
    5a2a:	8e 01       	movw	r16, r28
    5a2c:	0f 5d       	subi	r16, 0xDF	; 223
    5a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a30:	82 2e       	mov	r8, r18
    5a32:	91 2c       	mov	r9, r1
    5a34:	a1 2c       	mov	r10, r1
    5a36:	b1 2c       	mov	r11, r1
    5a38:	6d 2d       	mov	r22, r13
    5a3a:	7c 2d       	mov	r23, r12
    5a3c:	cd 01       	movw	r24, r26
    5a3e:	a5 01       	movw	r20, r10
    5a40:	94 01       	movw	r18, r8
    5a42:	6d d6       	rcall	.+3290   	; 0x671e <__udivmodsi4>
    5a44:	d2 2e       	mov	r13, r18
    5a46:	c3 2e       	mov	r12, r19
    5a48:	da 01       	movw	r26, r20
    5a4a:	01 50       	subi	r16, 0x01	; 1
    5a4c:	11 09       	sbc	r17, r1
    5a4e:	6a 30       	cpi	r22, 0x0A	; 10
    5a50:	71 05       	cpc	r23, r1
    5a52:	81 05       	cpc	r24, r1
    5a54:	91 05       	cpc	r25, r1
    5a56:	10 f4       	brcc	.+4      	; 0x5a5c <_ZN5Print11printNumberEmh+0x6a>
    5a58:	60 5d       	subi	r22, 0xD0	; 208
    5a5a:	01 c0       	rjmp	.+2      	; 0x5a5e <_ZN5Print11printNumberEmh+0x6c>
    5a5c:	69 5c       	subi	r22, 0xC9	; 201
    5a5e:	f8 01       	movw	r30, r16
    5a60:	60 83       	st	Z, r22
    5a62:	23 2b       	or	r18, r19
    5a64:	24 2b       	or	r18, r20
    5a66:	25 2b       	or	r18, r21
    5a68:	39 f7       	brne	.-50     	; 0x5a38 <_ZN5Print11printNumberEmh+0x46>
    5a6a:	b8 01       	movw	r22, r16
    5a6c:	c7 01       	movw	r24, r14
    5a6e:	50 df       	rcall	.-352    	; 0x5910 <_ZN5Print5writeEPKc>
    5a70:	a1 96       	adiw	r28, 0x21	; 33
    5a72:	0f b6       	in	r0, 0x3f	; 63
    5a74:	f8 94       	cli
    5a76:	de bf       	out	0x3e, r29	; 62
    5a78:	0f be       	out	0x3f, r0	; 63
    5a7a:	cd bf       	out	0x3d, r28	; 61
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	ff 90       	pop	r15
    5a86:	ef 90       	pop	r14
    5a88:	df 90       	pop	r13
    5a8a:	cf 90       	pop	r12
    5a8c:	bf 90       	pop	r11
    5a8e:	af 90       	pop	r10
    5a90:	9f 90       	pop	r9
    5a92:	8f 90       	pop	r8
    5a94:	08 95       	ret

00005a96 <_ZN5Print5printEli>:
    5a96:	cf 92       	push	r12
    5a98:	df 92       	push	r13
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	ec 01       	movw	r28, r24
    5aa8:	6a 01       	movw	r12, r20
    5aaa:	7b 01       	movw	r14, r22
    5aac:	21 15       	cp	r18, r1
    5aae:	31 05       	cpc	r19, r1
    5ab0:	79 f4       	brne	.+30     	; 0x5ad0 <_ZN5Print5printEli+0x3a>
    5ab2:	e8 81       	ld	r30, Y
    5ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ab6:	01 90       	ld	r0, Z+
    5ab8:	f0 81       	ld	r31, Z
    5aba:	e0 2d       	mov	r30, r0
    5abc:	64 2f       	mov	r22, r20
    5abe:	df 91       	pop	r29
    5ac0:	cf 91       	pop	r28
    5ac2:	1f 91       	pop	r17
    5ac4:	0f 91       	pop	r16
    5ac6:	ff 90       	pop	r15
    5ac8:	ef 90       	pop	r14
    5aca:	df 90       	pop	r13
    5acc:	cf 90       	pop	r12
    5ace:	09 94       	ijmp
    5ad0:	2a 30       	cpi	r18, 0x0A	; 10
    5ad2:	31 05       	cpc	r19, r1
    5ad4:	d9 f4       	brne	.+54     	; 0x5b0c <_ZN5Print5printEli+0x76>
    5ad6:	77 ff       	sbrs	r23, 7
    5ad8:	18 c0       	rjmp	.+48     	; 0x5b0a <_ZN5Print5printEli+0x74>
    5ada:	6d e2       	ldi	r22, 0x2D	; 45
    5adc:	60 df       	rcall	.-320    	; 0x599e <_ZN5Print5printEc>
    5ade:	8c 01       	movw	r16, r24
    5ae0:	44 27       	eor	r20, r20
    5ae2:	55 27       	eor	r21, r21
    5ae4:	ba 01       	movw	r22, r20
    5ae6:	4c 19       	sub	r20, r12
    5ae8:	5d 09       	sbc	r21, r13
    5aea:	6e 09       	sbc	r22, r14
    5aec:	7f 09       	sbc	r23, r15
    5aee:	2a e0       	ldi	r18, 0x0A	; 10
    5af0:	ce 01       	movw	r24, r28
    5af2:	7f df       	rcall	.-258    	; 0x59f2 <_ZN5Print11printNumberEmh>
    5af4:	80 0f       	add	r24, r16
    5af6:	91 1f       	adc	r25, r17
    5af8:	df 91       	pop	r29
    5afa:	cf 91       	pop	r28
    5afc:	1f 91       	pop	r17
    5afe:	0f 91       	pop	r16
    5b00:	ff 90       	pop	r15
    5b02:	ef 90       	pop	r14
    5b04:	df 90       	pop	r13
    5b06:	cf 90       	pop	r12
    5b08:	08 95       	ret
    5b0a:	2a e0       	ldi	r18, 0x0A	; 10
    5b0c:	b7 01       	movw	r22, r14
    5b0e:	a6 01       	movw	r20, r12
    5b10:	ce 01       	movw	r24, r28
    5b12:	df 91       	pop	r29
    5b14:	cf 91       	pop	r28
    5b16:	1f 91       	pop	r17
    5b18:	0f 91       	pop	r16
    5b1a:	ff 90       	pop	r15
    5b1c:	ef 90       	pop	r14
    5b1e:	df 90       	pop	r13
    5b20:	cf 90       	pop	r12
    5b22:	67 cf       	rjmp	.-306    	; 0x59f2 <_ZN5Print11printNumberEmh>

00005b24 <_ZN5Print7printlnEii>:
    5b24:	0f 93       	push	r16
    5b26:	1f 93       	push	r17
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
    5b2c:	ec 01       	movw	r28, r24
    5b2e:	9a 01       	movw	r18, r20
    5b30:	ab 01       	movw	r20, r22
    5b32:	77 0f       	add	r23, r23
    5b34:	66 0b       	sbc	r22, r22
    5b36:	77 0b       	sbc	r23, r23
    5b38:	ae df       	rcall	.-164    	; 0x5a96 <_ZN5Print5printEli>
    5b3a:	8c 01       	movw	r16, r24
    5b3c:	ce 01       	movw	r24, r28
    5b3e:	36 df       	rcall	.-404    	; 0x59ac <_ZN5Print7printlnEv>
    5b40:	80 0f       	add	r24, r16
    5b42:	91 1f       	adc	r25, r17
    5b44:	df 91       	pop	r29
    5b46:	cf 91       	pop	r28
    5b48:	1f 91       	pop	r17
    5b4a:	0f 91       	pop	r16
    5b4c:	08 95       	ret

00005b4e <_ZN5Print5printEmi>:
    5b4e:	21 15       	cp	r18, r1
    5b50:	31 05       	cpc	r19, r1
    5b52:	41 f4       	brne	.+16     	; 0x5b64 <_ZN5Print5printEmi+0x16>
    5b54:	dc 01       	movw	r26, r24
    5b56:	ed 91       	ld	r30, X+
    5b58:	fc 91       	ld	r31, X
    5b5a:	01 90       	ld	r0, Z+
    5b5c:	f0 81       	ld	r31, Z
    5b5e:	e0 2d       	mov	r30, r0
    5b60:	64 2f       	mov	r22, r20
    5b62:	09 94       	ijmp
    5b64:	46 cf       	rjmp	.-372    	; 0x59f2 <_ZN5Print11printNumberEmh>

00005b66 <_ZN5Print7printlnEhi>:
    5b66:	0f 93       	push	r16
    5b68:	1f 93       	push	r17
    5b6a:	cf 93       	push	r28
    5b6c:	df 93       	push	r29
    5b6e:	ec 01       	movw	r28, r24
    5b70:	9a 01       	movw	r18, r20
    5b72:	46 2f       	mov	r20, r22
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	60 e0       	ldi	r22, 0x00	; 0
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	e9 df       	rcall	.-46     	; 0x5b4e <_ZN5Print5printEmi>
    5b7c:	8c 01       	movw	r16, r24
    5b7e:	ce 01       	movw	r24, r28
    5b80:	15 df       	rcall	.-470    	; 0x59ac <_ZN5Print7printlnEv>
    5b82:	80 0f       	add	r24, r16
    5b84:	91 1f       	adc	r25, r17
    5b86:	df 91       	pop	r29
    5b88:	cf 91       	pop	r28
    5b8a:	1f 91       	pop	r17
    5b8c:	0f 91       	pop	r16
    5b8e:	08 95       	ret

00005b90 <_ZN5Print10printFloatEdh>:
    5b90:	4f 92       	push	r4
    5b92:	5f 92       	push	r5
    5b94:	6f 92       	push	r6
    5b96:	7f 92       	push	r7
    5b98:	8f 92       	push	r8
    5b9a:	9f 92       	push	r9
    5b9c:	af 92       	push	r10
    5b9e:	bf 92       	push	r11
    5ba0:	cf 92       	push	r12
    5ba2:	df 92       	push	r13
    5ba4:	ef 92       	push	r14
    5ba6:	ff 92       	push	r15
    5ba8:	cf 93       	push	r28
    5baa:	df 93       	push	r29
    5bac:	ec 01       	movw	r28, r24
    5bae:	6a 01       	movw	r12, r20
    5bb0:	7b 01       	movw	r14, r22
    5bb2:	b2 2e       	mov	r11, r18
    5bb4:	9a 01       	movw	r18, r20
    5bb6:	ab 01       	movw	r20, r22
    5bb8:	c7 01       	movw	r24, r14
    5bba:	b6 01       	movw	r22, r12
    5bbc:	b6 dc       	rcall	.-1684   	; 0x552a <__unordsf2>
    5bbe:	88 23       	and	r24, r24
    5bc0:	19 f0       	breq	.+6      	; 0x5bc8 <_ZN5Print10printFloatEdh+0x38>
    5bc2:	6a ec       	ldi	r22, 0xCA	; 202
    5bc4:	71 e0       	ldi	r23, 0x01	; 1
    5bc6:	24 c0       	rjmp	.+72     	; 0x5c10 <_ZN5Print10printFloatEdh+0x80>
    5bc8:	26 01       	movw	r4, r12
    5bca:	37 01       	movw	r6, r14
    5bcc:	e8 94       	clt
    5bce:	77 f8       	bld	r7, 7
    5bd0:	2f ef       	ldi	r18, 0xFF	; 255
    5bd2:	3f ef       	ldi	r19, 0xFF	; 255
    5bd4:	4f e7       	ldi	r20, 0x7F	; 127
    5bd6:	5f e7       	ldi	r21, 0x7F	; 127
    5bd8:	c3 01       	movw	r24, r6
    5bda:	b2 01       	movw	r22, r4
    5bdc:	a6 dc       	rcall	.-1716   	; 0x552a <__unordsf2>
    5bde:	81 11       	cpse	r24, r1
    5be0:	0c c0       	rjmp	.+24     	; 0x5bfa <_ZN5Print10printFloatEdh+0x6a>
    5be2:	2f ef       	ldi	r18, 0xFF	; 255
    5be4:	3f ef       	ldi	r19, 0xFF	; 255
    5be6:	4f e7       	ldi	r20, 0x7F	; 127
    5be8:	5f e7       	ldi	r21, 0x7F	; 127
    5bea:	c3 01       	movw	r24, r6
    5bec:	b2 01       	movw	r22, r4
    5bee:	e7 da       	rcall	.-2610   	; 0x51be <__cmpsf2>
    5bf0:	18 16       	cp	r1, r24
    5bf2:	1c f4       	brge	.+6      	; 0x5bfa <_ZN5Print10printFloatEdh+0x6a>
    5bf4:	6e ec       	ldi	r22, 0xCE	; 206
    5bf6:	71 e0       	ldi	r23, 0x01	; 1
    5bf8:	0b c0       	rjmp	.+22     	; 0x5c10 <_ZN5Print10printFloatEdh+0x80>
    5bfa:	2f ef       	ldi	r18, 0xFF	; 255
    5bfc:	3f ef       	ldi	r19, 0xFF	; 255
    5bfe:	4f e7       	ldi	r20, 0x7F	; 127
    5c00:	5f e4       	ldi	r21, 0x4F	; 79
    5c02:	c7 01       	movw	r24, r14
    5c04:	b6 01       	movw	r22, r12
    5c06:	2a dc       	rcall	.-1964   	; 0x545c <__gesf2>
    5c08:	18 16       	cp	r1, r24
    5c0a:	94 f4       	brge	.+36     	; 0x5c30 <_ZN5Print10printFloatEdh+0xa0>
    5c0c:	62 ed       	ldi	r22, 0xD2	; 210
    5c0e:	71 e0       	ldi	r23, 0x01	; 1
    5c10:	ce 01       	movw	r24, r28
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	ff 90       	pop	r15
    5c18:	ef 90       	pop	r14
    5c1a:	df 90       	pop	r13
    5c1c:	cf 90       	pop	r12
    5c1e:	bf 90       	pop	r11
    5c20:	af 90       	pop	r10
    5c22:	9f 90       	pop	r9
    5c24:	8f 90       	pop	r8
    5c26:	7f 90       	pop	r7
    5c28:	6f 90       	pop	r6
    5c2a:	5f 90       	pop	r5
    5c2c:	4f 90       	pop	r4
    5c2e:	70 ce       	rjmp	.-800    	; 0x5910 <_ZN5Print5writeEPKc>
    5c30:	2f ef       	ldi	r18, 0xFF	; 255
    5c32:	3f ef       	ldi	r19, 0xFF	; 255
    5c34:	4f e7       	ldi	r20, 0x7F	; 127
    5c36:	5f ec       	ldi	r21, 0xCF	; 207
    5c38:	c7 01       	movw	r24, r14
    5c3a:	b6 01       	movw	r22, r12
    5c3c:	c0 da       	rcall	.-2688   	; 0x51be <__cmpsf2>
    5c3e:	87 fd       	sbrc	r24, 7
    5c40:	e5 cf       	rjmp	.-54     	; 0x5c0c <_ZN5Print10printFloatEdh+0x7c>
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	a9 01       	movw	r20, r18
    5c48:	c7 01       	movw	r24, r14
    5c4a:	b6 01       	movw	r22, r12
    5c4c:	b8 da       	rcall	.-2704   	; 0x51be <__cmpsf2>
    5c4e:	87 ff       	sbrs	r24, 7
    5c50:	09 c0       	rjmp	.+18     	; 0x5c64 <_ZN5Print10printFloatEdh+0xd4>
    5c52:	6d e2       	ldi	r22, 0x2D	; 45
    5c54:	ce 01       	movw	r24, r28
    5c56:	a3 de       	rcall	.-698    	; 0x599e <_ZN5Print5printEc>
    5c58:	4c 01       	movw	r8, r24
    5c5a:	f7 fa       	bst	r15, 7
    5c5c:	f0 94       	com	r15
    5c5e:	f7 f8       	bld	r15, 7
    5c60:	f0 94       	com	r15
    5c62:	02 c0       	rjmp	.+4      	; 0x5c68 <_ZN5Print10printFloatEdh+0xd8>
    5c64:	81 2c       	mov	r8, r1
    5c66:	91 2c       	mov	r9, r1
    5c68:	a1 2c       	mov	r10, r1
    5c6a:	60 e0       	ldi	r22, 0x00	; 0
    5c6c:	70 e0       	ldi	r23, 0x00	; 0
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	9f e3       	ldi	r25, 0x3F	; 63
    5c72:	ab 14       	cp	r10, r11
    5c74:	39 f0       	breq	.+14     	; 0x5c84 <_ZN5Print10printFloatEdh+0xf4>
    5c76:	20 e0       	ldi	r18, 0x00	; 0
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	40 e2       	ldi	r20, 0x20	; 32
    5c7c:	51 e4       	ldi	r21, 0x41	; 65
    5c7e:	a3 da       	rcall	.-2746   	; 0x51c6 <__divsf3>
    5c80:	a3 94       	inc	r10
    5c82:	f7 cf       	rjmp	.-18     	; 0x5c72 <_ZN5Print10printFloatEdh+0xe2>
    5c84:	9b 01       	movw	r18, r22
    5c86:	ac 01       	movw	r20, r24
    5c88:	c7 01       	movw	r24, r14
    5c8a:	b6 01       	movw	r22, r12
    5c8c:	34 da       	rcall	.-2968   	; 0x50f6 <__addsf3>
    5c8e:	2b 01       	movw	r4, r22
    5c90:	3c 01       	movw	r6, r24
    5c92:	06 db       	rcall	.-2548   	; 0x52a0 <__fixunssfsi>
    5c94:	6b 01       	movw	r12, r22
    5c96:	7c 01       	movw	r14, r24
    5c98:	2f db       	rcall	.-2466   	; 0x52f8 <__floatunsisf>
    5c9a:	9b 01       	movw	r18, r22
    5c9c:	ac 01       	movw	r20, r24
    5c9e:	c3 01       	movw	r24, r6
    5ca0:	b2 01       	movw	r22, r4
    5ca2:	28 da       	rcall	.-2992   	; 0x50f4 <__subsf3>
    5ca4:	2b 01       	movw	r4, r22
    5ca6:	3c 01       	movw	r6, r24
    5ca8:	2a e0       	ldi	r18, 0x0A	; 10
    5caa:	b7 01       	movw	r22, r14
    5cac:	a6 01       	movw	r20, r12
    5cae:	ce 01       	movw	r24, r28
    5cb0:	a0 de       	rcall	.-704    	; 0x59f2 <_ZN5Print11printNumberEmh>
    5cb2:	7c 01       	movw	r14, r24
    5cb4:	e8 0c       	add	r14, r8
    5cb6:	f9 1c       	adc	r15, r9
    5cb8:	bb 20       	and	r11, r11
    5cba:	31 f0       	breq	.+12     	; 0x5cc8 <_ZN5Print10printFloatEdh+0x138>
    5cbc:	66 ed       	ldi	r22, 0xD6	; 214
    5cbe:	71 e0       	ldi	r23, 0x01	; 1
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	26 de       	rcall	.-948    	; 0x5910 <_ZN5Print5writeEPKc>
    5cc4:	e8 0e       	add	r14, r24
    5cc6:	f9 1e       	adc	r15, r25
    5cc8:	db 2c       	mov	r13, r11
    5cca:	dd 20       	and	r13, r13
    5ccc:	11 f1       	breq	.+68     	; 0x5d12 <_ZN5Print10printFloatEdh+0x182>
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	40 e2       	ldi	r20, 0x20	; 32
    5cd4:	51 e4       	ldi	r21, 0x41	; 65
    5cd6:	c3 01       	movw	r24, r6
    5cd8:	b2 01       	movw	r22, r4
    5cda:	c4 db       	rcall	.-2168   	; 0x5464 <__mulsf3>
    5cdc:	2b 01       	movw	r4, r22
    5cde:	3c 01       	movw	r6, r24
    5ce0:	da da       	rcall	.-2636   	; 0x5296 <__fixsfsi>
    5ce2:	4b 01       	movw	r8, r22
    5ce4:	77 0f       	add	r23, r23
    5ce6:	aa 08       	sbc	r10, r10
    5ce8:	bb 08       	sbc	r11, r11
    5cea:	2a e0       	ldi	r18, 0x0A	; 10
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	b5 01       	movw	r22, r10
    5cf0:	a4 01       	movw	r20, r8
    5cf2:	ce 01       	movw	r24, r28
    5cf4:	d0 de       	rcall	.-608    	; 0x5a96 <_ZN5Print5printEli>
    5cf6:	e8 0e       	add	r14, r24
    5cf8:	f9 1e       	adc	r15, r25
    5cfa:	c5 01       	movw	r24, r10
    5cfc:	b4 01       	movw	r22, r8
    5cfe:	fe da       	rcall	.-2564   	; 0x52fc <__floatsisf>
    5d00:	9b 01       	movw	r18, r22
    5d02:	ac 01       	movw	r20, r24
    5d04:	c3 01       	movw	r24, r6
    5d06:	b2 01       	movw	r22, r4
    5d08:	f5 d9       	rcall	.-3094   	; 0x50f4 <__subsf3>
    5d0a:	2b 01       	movw	r4, r22
    5d0c:	3c 01       	movw	r6, r24
    5d0e:	da 94       	dec	r13
    5d10:	dc cf       	rjmp	.-72     	; 0x5cca <_ZN5Print10printFloatEdh+0x13a>
    5d12:	c7 01       	movw	r24, r14
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	ff 90       	pop	r15
    5d1a:	ef 90       	pop	r14
    5d1c:	df 90       	pop	r13
    5d1e:	cf 90       	pop	r12
    5d20:	bf 90       	pop	r11
    5d22:	af 90       	pop	r10
    5d24:	9f 90       	pop	r9
    5d26:	8f 90       	pop	r8
    5d28:	7f 90       	pop	r7
    5d2a:	6f 90       	pop	r6
    5d2c:	5f 90       	pop	r5
    5d2e:	4f 90       	pop	r4
    5d30:	08 95       	ret

00005d32 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    5d32:	0f 93       	push	r16
    5d34:	1f 93       	push	r17
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    5d3c:	29 df       	rcall	.-430    	; 0x5b90 <_ZN5Print10printFloatEdh>
    5d3e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    5d40:	ce 01       	movw	r24, r28
    5d42:	34 de       	rcall	.-920    	; 0x59ac <_ZN5Print7printlnEv>
  return n;
}
    5d44:	80 0f       	add	r24, r16
    5d46:	91 1f       	adc	r25, r17
    5d48:	df 91       	pop	r29
    5d4a:	cf 91       	pop	r28
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	08 95       	ret

00005d52 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5d52:	1f 92       	push	r1
    5d54:	0f 92       	push	r0
    5d56:	0f b6       	in	r0, 0x3f	; 63
    5d58:	0f 92       	push	r0
    5d5a:	11 24       	eor	r1, r1
    5d5c:	2f 93       	push	r18
    5d5e:	3f 93       	push	r19
    5d60:	8f 93       	push	r24
    5d62:	9f 93       	push	r25
    5d64:	af 93       	push	r26
    5d66:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5d68:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <timer0_millis>
    5d6c:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <timer0_millis+0x1>
    5d70:	a0 91 f6 05 	lds	r26, 0x05F6	; 0x8005f6 <timer0_millis+0x2>
    5d74:	b0 91 f7 05 	lds	r27, 0x05F7	; 0x8005f7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5d78:	30 91 f3 05 	lds	r19, 0x05F3	; 0x8005f3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5d7c:	23 e0       	ldi	r18, 0x03	; 3
    5d7e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5d80:	2d 37       	cpi	r18, 0x7D	; 125
    5d82:	20 f4       	brcc	.+8      	; 0x5d8c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5d84:	01 96       	adiw	r24, 0x01	; 1
    5d86:	a1 1d       	adc	r26, r1
    5d88:	b1 1d       	adc	r27, r1
    5d8a:	05 c0       	rjmp	.+10     	; 0x5d96 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5d8c:	26 e8       	ldi	r18, 0x86	; 134
    5d8e:	23 0f       	add	r18, r19
		m += 1;
    5d90:	02 96       	adiw	r24, 0x02	; 2
    5d92:	a1 1d       	adc	r26, r1
    5d94:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5d96:	20 93 f3 05 	sts	0x05F3, r18	; 0x8005f3 <timer0_fract>
	timer0_millis = m;
    5d9a:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <timer0_millis>
    5d9e:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <timer0_millis+0x1>
    5da2:	a0 93 f6 05 	sts	0x05F6, r26	; 0x8005f6 <timer0_millis+0x2>
    5da6:	b0 93 f7 05 	sts	0x05F7, r27	; 0x8005f7 <timer0_millis+0x3>
	timer0_overflow_count++;
    5daa:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_overflow_count>
    5dae:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x1>
    5db2:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_overflow_count+0x2>
    5db6:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_overflow_count+0x3>
    5dba:	01 96       	adiw	r24, 0x01	; 1
    5dbc:	a1 1d       	adc	r26, r1
    5dbe:	b1 1d       	adc	r27, r1
    5dc0:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <timer0_overflow_count>
    5dc4:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timer0_overflow_count+0x1>
    5dc8:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <timer0_overflow_count+0x2>
    5dcc:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <timer0_overflow_count+0x3>
}
    5dd0:	bf 91       	pop	r27
    5dd2:	af 91       	pop	r26
    5dd4:	9f 91       	pop	r25
    5dd6:	8f 91       	pop	r24
    5dd8:	3f 91       	pop	r19
    5dda:	2f 91       	pop	r18
    5ddc:	0f 90       	pop	r0
    5dde:	0f be       	out	0x3f, r0	; 63
    5de0:	0f 90       	pop	r0
    5de2:	1f 90       	pop	r1
    5de4:	18 95       	reti

00005de6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5de6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5de8:	f8 94       	cli
	m = timer0_millis;
    5dea:	60 91 f4 05 	lds	r22, 0x05F4	; 0x8005f4 <timer0_millis>
    5dee:	70 91 f5 05 	lds	r23, 0x05F5	; 0x8005f5 <timer0_millis+0x1>
    5df2:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <timer0_millis+0x2>
    5df6:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <timer0_millis+0x3>
	SREG = oldSREG;
    5dfa:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5dfc:	08 95       	ret

00005dfe <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5dfe:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5e00:	f8 94       	cli
	m = timer0_overflow_count;
    5e02:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_overflow_count>
    5e06:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x1>
    5e0a:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_overflow_count+0x2>
    5e0e:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5e12:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5e14:	a8 9b       	sbis	0x15, 0	; 21
    5e16:	05 c0       	rjmp	.+10     	; 0x5e22 <micros+0x24>
    5e18:	2f 3f       	cpi	r18, 0xFF	; 255
    5e1a:	19 f0       	breq	.+6      	; 0x5e22 <micros+0x24>
		m++;
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	a1 1d       	adc	r26, r1
    5e20:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5e22:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5e24:	ba 2f       	mov	r27, r26
    5e26:	a9 2f       	mov	r26, r25
    5e28:	98 2f       	mov	r25, r24
    5e2a:	88 27       	eor	r24, r24
    5e2c:	82 0f       	add	r24, r18
    5e2e:	91 1d       	adc	r25, r1
    5e30:	a1 1d       	adc	r26, r1
    5e32:	b1 1d       	adc	r27, r1
    5e34:	bc 01       	movw	r22, r24
    5e36:	cd 01       	movw	r24, r26
    5e38:	42 e0       	ldi	r20, 0x02	; 2
    5e3a:	66 0f       	add	r22, r22
    5e3c:	77 1f       	adc	r23, r23
    5e3e:	88 1f       	adc	r24, r24
    5e40:	99 1f       	adc	r25, r25
    5e42:	4a 95       	dec	r20
    5e44:	d1 f7       	brne	.-12     	; 0x5e3a <micros+0x3c>
}
    5e46:	08 95       	ret

00005e48 <delay>:

void delay(unsigned long ms)
{
    5e48:	8f 92       	push	r8
    5e4a:	9f 92       	push	r9
    5e4c:	af 92       	push	r10
    5e4e:	bf 92       	push	r11
    5e50:	cf 92       	push	r12
    5e52:	df 92       	push	r13
    5e54:	ef 92       	push	r14
    5e56:	ff 92       	push	r15
    5e58:	6b 01       	movw	r12, r22
    5e5a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5e5c:	d0 df       	rcall	.-96     	; 0x5dfe <micros>
    5e5e:	4b 01       	movw	r8, r22
    5e60:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5e62:	c1 14       	cp	r12, r1
    5e64:	d1 04       	cpc	r13, r1
    5e66:	e1 04       	cpc	r14, r1
    5e68:	f1 04       	cpc	r15, r1
    5e6a:	f1 f0       	breq	.+60     	; 0x5ea8 <delay+0x60>
		yield();
    5e6c:	57 d4       	rcall	.+2222   	; 0x671c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5e6e:	c7 df       	rcall	.-114    	; 0x5dfe <micros>
    5e70:	dc 01       	movw	r26, r24
    5e72:	cb 01       	movw	r24, r22
    5e74:	88 19       	sub	r24, r8
    5e76:	99 09       	sbc	r25, r9
    5e78:	aa 09       	sbc	r26, r10
    5e7a:	bb 09       	sbc	r27, r11
    5e7c:	88 3e       	cpi	r24, 0xE8	; 232
    5e7e:	93 40       	sbci	r25, 0x03	; 3
    5e80:	a1 05       	cpc	r26, r1
    5e82:	b1 05       	cpc	r27, r1
    5e84:	70 f3       	brcs	.-36     	; 0x5e62 <delay+0x1a>
			ms--;
    5e86:	21 e0       	ldi	r18, 0x01	; 1
    5e88:	c2 1a       	sub	r12, r18
    5e8a:	d1 08       	sbc	r13, r1
    5e8c:	e1 08       	sbc	r14, r1
    5e8e:	f1 08       	sbc	r15, r1
			start += 1000;
    5e90:	88 ee       	ldi	r24, 0xE8	; 232
    5e92:	88 0e       	add	r8, r24
    5e94:	83 e0       	ldi	r24, 0x03	; 3
    5e96:	98 1e       	adc	r9, r24
    5e98:	a1 1c       	adc	r10, r1
    5e9a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5e9c:	c1 14       	cp	r12, r1
    5e9e:	d1 04       	cpc	r13, r1
    5ea0:	e1 04       	cpc	r14, r1
    5ea2:	f1 04       	cpc	r15, r1
    5ea4:	21 f7       	brne	.-56     	; 0x5e6e <delay+0x26>
    5ea6:	dd cf       	rjmp	.-70     	; 0x5e62 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	bf 90       	pop	r11
    5eb2:	af 90       	pop	r10
    5eb4:	9f 90       	pop	r9
    5eb6:	8f 90       	pop	r8
    5eb8:	08 95       	ret

00005eba <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5eba:	82 30       	cpi	r24, 0x02	; 2
    5ebc:	91 05       	cpc	r25, r1
    5ebe:	38 f0       	brcs	.+14     	; 0x5ece <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5ec0:	88 0f       	add	r24, r24
    5ec2:	99 1f       	adc	r25, r25
    5ec4:	88 0f       	add	r24, r24
    5ec6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5ec8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5eca:	01 97       	sbiw	r24, 0x01	; 1
    5ecc:	f1 f7       	brne	.-4      	; 0x5eca <delayMicroseconds+0x10>
    5ece:	08 95       	ret

00005ed0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5ed0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5ed2:	84 b5       	in	r24, 0x24	; 36
    5ed4:	82 60       	ori	r24, 0x02	; 2
    5ed6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5ed8:	84 b5       	in	r24, 0x24	; 36
    5eda:	81 60       	ori	r24, 0x01	; 1
    5edc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5ede:	85 b5       	in	r24, 0x25	; 37
    5ee0:	82 60       	ori	r24, 0x02	; 2
    5ee2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5ee4:	85 b5       	in	r24, 0x25	; 37
    5ee6:	81 60       	ori	r24, 0x01	; 1
    5ee8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5eea:	ee e6       	ldi	r30, 0x6E	; 110
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	80 81       	ld	r24, Z
    5ef0:	81 60       	ori	r24, 0x01	; 1
    5ef2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5ef4:	e1 e8       	ldi	r30, 0x81	; 129
    5ef6:	f0 e0       	ldi	r31, 0x00	; 0
    5ef8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5efa:	80 81       	ld	r24, Z
    5efc:	82 60       	ori	r24, 0x02	; 2
    5efe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5f00:	80 81       	ld	r24, Z
    5f02:	81 60       	ori	r24, 0x01	; 1
    5f04:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5f06:	e0 e8       	ldi	r30, 0x80	; 128
    5f08:	f0 e0       	ldi	r31, 0x00	; 0
    5f0a:	80 81       	ld	r24, Z
    5f0c:	81 60       	ori	r24, 0x01	; 1
    5f0e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5f10:	e1 eb       	ldi	r30, 0xB1	; 177
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	80 81       	ld	r24, Z
    5f16:	84 60       	ori	r24, 0x04	; 4
    5f18:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5f1a:	e0 eb       	ldi	r30, 0xB0	; 176
    5f1c:	f0 e0       	ldi	r31, 0x00	; 0
    5f1e:	80 81       	ld	r24, Z
    5f20:	81 60       	ori	r24, 0x01	; 1
    5f22:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5f24:	ea e7       	ldi	r30, 0x7A	; 122
    5f26:	f0 e0       	ldi	r31, 0x00	; 0
    5f28:	80 81       	ld	r24, Z
    5f2a:	84 60       	ori	r24, 0x04	; 4
    5f2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5f2e:	80 81       	ld	r24, Z
    5f30:	82 60       	ori	r24, 0x02	; 2
    5f32:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5f34:	80 81       	ld	r24, Z
    5f36:	81 60       	ori	r24, 0x01	; 1
    5f38:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5f3a:	80 81       	ld	r24, Z
    5f3c:	80 68       	ori	r24, 0x80	; 128
    5f3e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5f40:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5f44:	08 95       	ret

00005f46 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5f46:	8e 30       	cpi	r24, 0x0E	; 14
    5f48:	08 f0       	brcs	.+2      	; 0x5f4c <analogRead+0x6>
    5f4a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5f4c:	87 70       	andi	r24, 0x07	; 7
    5f4e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <analog_reference>
    5f52:	90 e4       	ldi	r25, 0x40	; 64
    5f54:	29 9f       	mul	r18, r25
    5f56:	90 01       	movw	r18, r0
    5f58:	11 24       	eor	r1, r1
    5f5a:	82 2b       	or	r24, r18
    5f5c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5f60:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5f64:	80 64       	ori	r24, 0x40	; 64
    5f66:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5f6a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5f6e:	86 fd       	sbrc	r24, 6
    5f70:	fc cf       	rjmp	.-8      	; 0x5f6a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5f72:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    5f76:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
}
    5f7c:	92 2b       	or	r25, r18
    5f7e:	08 95       	ret

00005f80 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5f80:	83 30       	cpi	r24, 0x03	; 3
    5f82:	81 f0       	breq	.+32     	; 0x5fa4 <turnOffPWM+0x24>
    5f84:	28 f4       	brcc	.+10     	; 0x5f90 <turnOffPWM+0x10>
    5f86:	81 30       	cpi	r24, 0x01	; 1
    5f88:	99 f0       	breq	.+38     	; 0x5fb0 <turnOffPWM+0x30>
    5f8a:	82 30       	cpi	r24, 0x02	; 2
    5f8c:	a1 f0       	breq	.+40     	; 0x5fb6 <turnOffPWM+0x36>
    5f8e:	08 95       	ret
    5f90:	87 30       	cpi	r24, 0x07	; 7
    5f92:	a9 f0       	breq	.+42     	; 0x5fbe <turnOffPWM+0x3e>
    5f94:	88 30       	cpi	r24, 0x08	; 8
    5f96:	b9 f0       	breq	.+46     	; 0x5fc6 <turnOffPWM+0x46>
    5f98:	84 30       	cpi	r24, 0x04	; 4
    5f9a:	d1 f4       	brne	.+52     	; 0x5fd0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5f9c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fa0:	8f 7d       	andi	r24, 0xDF	; 223
    5fa2:	03 c0       	rjmp	.+6      	; 0x5faa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5fa4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fa8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5faa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fae:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5fb0:	84 b5       	in	r24, 0x24	; 36
    5fb2:	8f 77       	andi	r24, 0x7F	; 127
    5fb4:	02 c0       	rjmp	.+4      	; 0x5fba <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5fb6:	84 b5       	in	r24, 0x24	; 36
    5fb8:	8f 7d       	andi	r24, 0xDF	; 223
    5fba:	84 bd       	out	0x24, r24	; 36
    5fbc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5fbe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5fc2:	8f 77       	andi	r24, 0x7F	; 127
    5fc4:	03 c0       	rjmp	.+6      	; 0x5fcc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5fc6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5fca:	8f 7d       	andi	r24, 0xDF	; 223
    5fcc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5fd0:	08 95       	ret

00005fd2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5fd2:	cf 93       	push	r28
    5fd4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	fc 01       	movw	r30, r24
    5fda:	e7 5f       	subi	r30, 0xF7	; 247
    5fdc:	fb 4f       	sbci	r31, 0xFB	; 251
    5fde:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5fe0:	fc 01       	movw	r30, r24
    5fe2:	e3 5e       	subi	r30, 0xE3	; 227
    5fe4:	fb 4f       	sbci	r31, 0xFB	; 251
    5fe6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5fe8:	88 23       	and	r24, r24
    5fea:	61 f1       	breq	.+88     	; 0x6044 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	88 0f       	add	r24, r24
    5ff0:	99 1f       	adc	r25, r25
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	eb 5b       	subi	r30, 0xBB	; 187
    5ff6:	fb 4f       	sbci	r31, 0xFB	; 251
    5ff8:	c5 91       	lpm	r28, Z+
    5ffa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	e5 5c       	subi	r30, 0xC5	; 197
    6000:	fb 4f       	sbci	r31, 0xFB	; 251
    6002:	a5 91       	lpm	r26, Z+
    6004:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6006:	61 11       	cpse	r22, r1
    6008:	09 c0       	rjmp	.+18     	; 0x601c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    600a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    600c:	f8 94       	cli
		*reg &= ~bit;
    600e:	88 81       	ld	r24, Y
    6010:	20 95       	com	r18
    6012:	82 23       	and	r24, r18
    6014:	88 83       	st	Y, r24
		*out &= ~bit;
    6016:	ec 91       	ld	r30, X
    6018:	2e 23       	and	r18, r30
    601a:	0b c0       	rjmp	.+22     	; 0x6032 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    601c:	62 30       	cpi	r22, 0x02	; 2
    601e:	61 f4       	brne	.+24     	; 0x6038 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6020:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6022:	f8 94       	cli
		*reg &= ~bit;
    6024:	38 81       	ld	r19, Y
    6026:	82 2f       	mov	r24, r18
    6028:	80 95       	com	r24
    602a:	83 23       	and	r24, r19
    602c:	88 83       	st	Y, r24
		*out |= bit;
    602e:	ec 91       	ld	r30, X
    6030:	2e 2b       	or	r18, r30
    6032:	2c 93       	st	X, r18
		SREG = oldSREG;
    6034:	9f bf       	out	0x3f, r25	; 63
    6036:	06 c0       	rjmp	.+12     	; 0x6044 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6038:	8f b7       	in	r24, 0x3f	; 63
                cli();
    603a:	f8 94       	cli
		*reg |= bit;
    603c:	e8 81       	ld	r30, Y
    603e:	2e 2b       	or	r18, r30
    6040:	28 83       	st	Y, r18
		SREG = oldSREG;
    6042:	8f bf       	out	0x3f, r24	; 63
	}
}
    6044:	df 91       	pop	r29
    6046:	cf 91       	pop	r28
    6048:	08 95       	ret

0000604a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    604a:	1f 93       	push	r17
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6050:	28 2f       	mov	r18, r24
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	f9 01       	movw	r30, r18
    6056:	eb 50       	subi	r30, 0x0B	; 11
    6058:	fc 4f       	sbci	r31, 0xFC	; 252
    605a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    605c:	f9 01       	movw	r30, r18
    605e:	e7 5f       	subi	r30, 0xF7	; 247
    6060:	fb 4f       	sbci	r31, 0xFB	; 251
    6062:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6064:	f9 01       	movw	r30, r18
    6066:	e3 5e       	subi	r30, 0xE3	; 227
    6068:	fb 4f       	sbci	r31, 0xFB	; 251
    606a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    606c:	cc 23       	and	r28, r28
    606e:	c1 f0       	breq	.+48     	; 0x60a0 <digitalWrite+0x56>
    6070:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6072:	81 11       	cpse	r24, r1
    6074:	85 df       	rcall	.-246    	; 0x5f80 <turnOffPWM>

	out = portOutputRegister(port);
    6076:	ec 2f       	mov	r30, r28
    6078:	f0 e0       	ldi	r31, 0x00	; 0
    607a:	ee 0f       	add	r30, r30
    607c:	ff 1f       	adc	r31, r31
    607e:	e5 5c       	subi	r30, 0xC5	; 197
    6080:	fb 4f       	sbci	r31, 0xFB	; 251
    6082:	a5 91       	lpm	r26, Z+
    6084:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6086:	8f b7       	in	r24, 0x3f	; 63
	cli();
    6088:	f8 94       	cli

	if (val == LOW) {
    608a:	11 11       	cpse	r17, r1
    608c:	05 c0       	rjmp	.+10     	; 0x6098 <digitalWrite+0x4e>
		*out &= ~bit;
    608e:	9c 91       	ld	r25, X
    6090:	ed 2f       	mov	r30, r29
    6092:	e0 95       	com	r30
    6094:	e9 23       	and	r30, r25
    6096:	02 c0       	rjmp	.+4      	; 0x609c <digitalWrite+0x52>
	} else {
		*out |= bit;
    6098:	ec 91       	ld	r30, X
    609a:	ed 2b       	or	r30, r29
    609c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    609e:	8f bf       	out	0x3f, r24	; 63
}
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	1f 91       	pop	r17
    60a6:	08 95       	ret

000060a8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    60ac:	28 2f       	mov	r18, r24
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	f9 01       	movw	r30, r18
    60b2:	eb 50       	subi	r30, 0x0B	; 11
    60b4:	fc 4f       	sbci	r31, 0xFC	; 252
    60b6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    60b8:	f9 01       	movw	r30, r18
    60ba:	e7 5f       	subi	r30, 0xF7	; 247
    60bc:	fb 4f       	sbci	r31, 0xFB	; 251
    60be:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    60c0:	f9 01       	movw	r30, r18
    60c2:	e3 5e       	subi	r30, 0xE3	; 227
    60c4:	fb 4f       	sbci	r31, 0xFB	; 251
    60c6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    60c8:	cc 23       	and	r28, r28
    60ca:	89 f0       	breq	.+34     	; 0x60ee <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    60cc:	81 11       	cpse	r24, r1
    60ce:	58 df       	rcall	.-336    	; 0x5f80 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    60d0:	ec 2f       	mov	r30, r28
    60d2:	f0 e0       	ldi	r31, 0x00	; 0
    60d4:	ee 0f       	add	r30, r30
    60d6:	ff 1f       	adc	r31, r31
    60d8:	ef 5c       	subi	r30, 0xCF	; 207
    60da:	fb 4f       	sbci	r31, 0xFB	; 251
    60dc:	a5 91       	lpm	r26, Z+
    60de:	b4 91       	lpm	r27, Z
    60e0:	ec 91       	ld	r30, X
    60e2:	ed 23       	and	r30, r29
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	21 f4       	brne	.+8      	; 0x60f2 <digitalRead+0x4a>
    60ea:	80 e0       	ldi	r24, 0x00	; 0
    60ec:	02 c0       	rjmp	.+4      	; 0x60f2 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	08 95       	ret

000060f8 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    60f8:	fc 01       	movw	r30, r24
    60fa:	80 81       	ld	r24, Z
    60fc:	91 81       	ldd	r25, Z+1	; 0x01
    60fe:	57 c4       	rjmp	.+2222   	; 0x69ae <free>

00006100 <_ZN6String10invalidateEv>:
    6100:	cf 93       	push	r28
    6102:	df 93       	push	r29
    6104:	ec 01       	movw	r28, r24
    6106:	88 81       	ld	r24, Y
    6108:	99 81       	ldd	r25, Y+1	; 0x01
    610a:	00 97       	sbiw	r24, 0x00	; 0
    610c:	09 f0       	breq	.+2      	; 0x6110 <_ZN6String10invalidateEv+0x10>
    610e:	4f d4       	rcall	.+2206   	; 0x69ae <free>
    6110:	19 82       	std	Y+1, r1	; 0x01
    6112:	18 82       	st	Y, r1
    6114:	1d 82       	std	Y+5, r1	; 0x05
    6116:	1c 82       	std	Y+4, r1	; 0x04
    6118:	1b 82       	std	Y+3, r1	; 0x03
    611a:	1a 82       	std	Y+2, r1	; 0x02
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	08 95       	ret

00006122 <_ZN6String12changeBufferEj>:
    6122:	0f 93       	push	r16
    6124:	1f 93       	push	r17
    6126:	cf 93       	push	r28
    6128:	df 93       	push	r29
    612a:	ec 01       	movw	r28, r24
    612c:	8b 01       	movw	r16, r22
    612e:	6f 5f       	subi	r22, 0xFF	; 255
    6130:	7f 4f       	sbci	r23, 0xFF	; 255
    6132:	88 81       	ld	r24, Y
    6134:	99 81       	ldd	r25, Y+1	; 0x01
    6136:	d3 d4       	rcall	.+2470   	; 0x6ade <realloc>
    6138:	00 97       	sbiw	r24, 0x00	; 0
    613a:	31 f0       	breq	.+12     	; 0x6148 <_ZN6String12changeBufferEj+0x26>
    613c:	99 83       	std	Y+1, r25	; 0x01
    613e:	88 83       	st	Y, r24
    6140:	1b 83       	std	Y+3, r17	; 0x03
    6142:	0a 83       	std	Y+2, r16	; 0x02
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	01 c0       	rjmp	.+2      	; 0x614a <_ZN6String12changeBufferEj+0x28>
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	df 91       	pop	r29
    614c:	cf 91       	pop	r28
    614e:	1f 91       	pop	r17
    6150:	0f 91       	pop	r16
    6152:	08 95       	ret

00006154 <_ZN6String7reserveEj>:
    6154:	cf 93       	push	r28
    6156:	df 93       	push	r29
    6158:	ec 01       	movw	r28, r24
    615a:	88 81       	ld	r24, Y
    615c:	99 81       	ldd	r25, Y+1	; 0x01
    615e:	89 2b       	or	r24, r25
    6160:	29 f0       	breq	.+10     	; 0x616c <_ZN6String7reserveEj+0x18>
    6162:	8a 81       	ldd	r24, Y+2	; 0x02
    6164:	9b 81       	ldd	r25, Y+3	; 0x03
    6166:	86 17       	cp	r24, r22
    6168:	97 07       	cpc	r25, r23
    616a:	58 f4       	brcc	.+22     	; 0x6182 <_ZN6String7reserveEj+0x2e>
    616c:	ce 01       	movw	r24, r28
    616e:	d9 df       	rcall	.-78     	; 0x6122 <_ZN6String12changeBufferEj>
    6170:	88 23       	and	r24, r24
    6172:	41 f0       	breq	.+16     	; 0x6184 <_ZN6String7reserveEj+0x30>
    6174:	8c 81       	ldd	r24, Y+4	; 0x04
    6176:	9d 81       	ldd	r25, Y+5	; 0x05
    6178:	89 2b       	or	r24, r25
    617a:	19 f4       	brne	.+6      	; 0x6182 <_ZN6String7reserveEj+0x2e>
    617c:	e8 81       	ld	r30, Y
    617e:	f9 81       	ldd	r31, Y+1	; 0x01
    6180:	10 82       	st	Z, r1
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	df 91       	pop	r29
    6186:	cf 91       	pop	r28
    6188:	08 95       	ret

0000618a <_ZN6String4copyEPKcj>:
    618a:	ef 92       	push	r14
    618c:	ff 92       	push	r15
    618e:	0f 93       	push	r16
    6190:	1f 93       	push	r17
    6192:	cf 93       	push	r28
    6194:	df 93       	push	r29
    6196:	ec 01       	movw	r28, r24
    6198:	7b 01       	movw	r14, r22
    619a:	8a 01       	movw	r16, r20
    619c:	ba 01       	movw	r22, r20
    619e:	da df       	rcall	.-76     	; 0x6154 <_ZN6String7reserveEj>
    61a0:	81 11       	cpse	r24, r1
    61a2:	03 c0       	rjmp	.+6      	; 0x61aa <_ZN6String4copyEPKcj+0x20>
    61a4:	ce 01       	movw	r24, r28
    61a6:	ac df       	rcall	.-168    	; 0x6100 <_ZN6String10invalidateEv>
    61a8:	06 c0       	rjmp	.+12     	; 0x61b6 <_ZN6String4copyEPKcj+0x2c>
    61aa:	1d 83       	std	Y+5, r17	; 0x05
    61ac:	0c 83       	std	Y+4, r16	; 0x04
    61ae:	b7 01       	movw	r22, r14
    61b0:	88 81       	ld	r24, Y
    61b2:	99 81       	ldd	r25, Y+1	; 0x01
    61b4:	0c d7       	rcall	.+3608   	; 0x6fce <strcpy>
    61b6:	ce 01       	movw	r24, r28
    61b8:	df 91       	pop	r29
    61ba:	cf 91       	pop	r28
    61bc:	1f 91       	pop	r17
    61be:	0f 91       	pop	r16
    61c0:	ff 90       	pop	r15
    61c2:	ef 90       	pop	r14
    61c4:	08 95       	ret

000061c6 <_ZN6StringC1EPKc>:
    61c6:	fc 01       	movw	r30, r24
    61c8:	11 82       	std	Z+1, r1	; 0x01
    61ca:	10 82       	st	Z, r1
    61cc:	13 82       	std	Z+3, r1	; 0x03
    61ce:	12 82       	std	Z+2, r1	; 0x02
    61d0:	15 82       	std	Z+5, r1	; 0x05
    61d2:	14 82       	std	Z+4, r1	; 0x04
    61d4:	61 15       	cp	r22, r1
    61d6:	71 05       	cpc	r23, r1
    61d8:	49 f0       	breq	.+18     	; 0x61ec <_ZN6StringC1EPKc+0x26>
    61da:	fb 01       	movw	r30, r22
    61dc:	01 90       	ld	r0, Z+
    61de:	00 20       	and	r0, r0
    61e0:	e9 f7       	brne	.-6      	; 0x61dc <_ZN6StringC1EPKc+0x16>
    61e2:	31 97       	sbiw	r30, 0x01	; 1
    61e4:	af 01       	movw	r20, r30
    61e6:	46 1b       	sub	r20, r22
    61e8:	57 0b       	sbc	r21, r23
    61ea:	cf cf       	rjmp	.-98     	; 0x618a <_ZN6String4copyEPKcj>
    61ec:	08 95       	ret

000061ee <_ZN6StringaSERKS_>:
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
    61f2:	ec 01       	movw	r28, r24
    61f4:	fb 01       	movw	r30, r22
    61f6:	86 17       	cp	r24, r22
    61f8:	97 07       	cpc	r25, r23
    61fa:	51 f0       	breq	.+20     	; 0x6210 <_ZN6StringaSERKS_+0x22>
    61fc:	60 81       	ld	r22, Z
    61fe:	71 81       	ldd	r23, Z+1	; 0x01
    6200:	61 15       	cp	r22, r1
    6202:	71 05       	cpc	r23, r1
    6204:	21 f0       	breq	.+8      	; 0x620e <_ZN6StringaSERKS_+0x20>
    6206:	44 81       	ldd	r20, Z+4	; 0x04
    6208:	55 81       	ldd	r21, Z+5	; 0x05
    620a:	bf df       	rcall	.-130    	; 0x618a <_ZN6String4copyEPKcj>
    620c:	01 c0       	rjmp	.+2      	; 0x6210 <_ZN6StringaSERKS_+0x22>
    620e:	78 df       	rcall	.-272    	; 0x6100 <_ZN6String10invalidateEv>
    6210:	ce 01       	movw	r24, r28
    6212:	df 91       	pop	r29
    6214:	cf 91       	pop	r28
    6216:	08 95       	ret

00006218 <_ZN6StringC1ERKS_>:
    6218:	fc 01       	movw	r30, r24
    621a:	11 82       	std	Z+1, r1	; 0x01
    621c:	10 82       	st	Z, r1
    621e:	13 82       	std	Z+3, r1	; 0x03
    6220:	12 82       	std	Z+2, r1	; 0x02
    6222:	15 82       	std	Z+5, r1	; 0x05
    6224:	14 82       	std	Z+4, r1	; 0x04
    6226:	e3 cf       	rjmp	.-58     	; 0x61ee <_ZN6StringaSERKS_>

00006228 <_ZN6StringaSEPKc>:
    6228:	cf 93       	push	r28
    622a:	df 93       	push	r29
    622c:	ec 01       	movw	r28, r24
    622e:	61 15       	cp	r22, r1
    6230:	71 05       	cpc	r23, r1
    6232:	51 f0       	breq	.+20     	; 0x6248 <_ZN6StringaSEPKc+0x20>
    6234:	fb 01       	movw	r30, r22
    6236:	01 90       	ld	r0, Z+
    6238:	00 20       	and	r0, r0
    623a:	e9 f7       	brne	.-6      	; 0x6236 <_ZN6StringaSEPKc+0xe>
    623c:	31 97       	sbiw	r30, 0x01	; 1
    623e:	af 01       	movw	r20, r30
    6240:	46 1b       	sub	r20, r22
    6242:	57 0b       	sbc	r21, r23
    6244:	a2 df       	rcall	.-188    	; 0x618a <_ZN6String4copyEPKcj>
    6246:	01 c0       	rjmp	.+2      	; 0x624a <_ZN6StringaSEPKc+0x22>
    6248:	5b df       	rcall	.-330    	; 0x6100 <_ZN6String10invalidateEv>
    624a:	ce 01       	movw	r24, r28
    624c:	df 91       	pop	r29
    624e:	cf 91       	pop	r28
    6250:	08 95       	ret

00006252 <_ZN6StringC1Eih>:
    6252:	0f 93       	push	r16
    6254:	1f 93       	push	r17
    6256:	cf 93       	push	r28
    6258:	df 93       	push	r29
    625a:	cd b7       	in	r28, 0x3d	; 61
    625c:	de b7       	in	r29, 0x3e	; 62
    625e:	62 97       	sbiw	r28, 0x12	; 18
    6260:	0f b6       	in	r0, 0x3f	; 63
    6262:	f8 94       	cli
    6264:	de bf       	out	0x3e, r29	; 62
    6266:	0f be       	out	0x3f, r0	; 63
    6268:	cd bf       	out	0x3d, r28	; 61
    626a:	8c 01       	movw	r16, r24
    626c:	cb 01       	movw	r24, r22
    626e:	f8 01       	movw	r30, r16
    6270:	11 82       	std	Z+1, r1	; 0x01
    6272:	10 82       	st	Z, r1
    6274:	13 82       	std	Z+3, r1	; 0x03
    6276:	12 82       	std	Z+2, r1	; 0x02
    6278:	15 82       	std	Z+5, r1	; 0x05
    627a:	14 82       	std	Z+4, r1	; 0x04
    627c:	50 e0       	ldi	r21, 0x00	; 0
    627e:	be 01       	movw	r22, r28
    6280:	6f 5f       	subi	r22, 0xFF	; 255
    6282:	7f 4f       	sbci	r23, 0xFF	; 255
    6284:	c8 d6       	rcall	.+3472   	; 0x7016 <itoa>
    6286:	be 01       	movw	r22, r28
    6288:	6f 5f       	subi	r22, 0xFF	; 255
    628a:	7f 4f       	sbci	r23, 0xFF	; 255
    628c:	c8 01       	movw	r24, r16
    628e:	cc df       	rcall	.-104    	; 0x6228 <_ZN6StringaSEPKc>
    6290:	62 96       	adiw	r28, 0x12	; 18
    6292:	0f b6       	in	r0, 0x3f	; 63
    6294:	f8 94       	cli
    6296:	de bf       	out	0x3e, r29	; 62
    6298:	0f be       	out	0x3f, r0	; 63
    629a:	cd bf       	out	0x3d, r28	; 61
    629c:	df 91       	pop	r29
    629e:	cf 91       	pop	r28
    62a0:	1f 91       	pop	r17
    62a2:	0f 91       	pop	r16
    62a4:	08 95       	ret

000062a6 <_ZN6StringC1Elh>:
    62a6:	0f 93       	push	r16
    62a8:	1f 93       	push	r17
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	a2 97       	sbiw	r28, 0x22	; 34
    62b4:	0f b6       	in	r0, 0x3f	; 63
    62b6:	f8 94       	cli
    62b8:	de bf       	out	0x3e, r29	; 62
    62ba:	0f be       	out	0x3f, r0	; 63
    62bc:	cd bf       	out	0x3d, r28	; 61
    62be:	8c 01       	movw	r16, r24
    62c0:	cb 01       	movw	r24, r22
    62c2:	ba 01       	movw	r22, r20
    62c4:	f8 01       	movw	r30, r16
    62c6:	11 82       	std	Z+1, r1	; 0x01
    62c8:	10 82       	st	Z, r1
    62ca:	13 82       	std	Z+3, r1	; 0x03
    62cc:	12 82       	std	Z+2, r1	; 0x02
    62ce:	15 82       	std	Z+5, r1	; 0x05
    62d0:	14 82       	std	Z+4, r1	; 0x04
    62d2:	30 e0       	ldi	r19, 0x00	; 0
    62d4:	ae 01       	movw	r20, r28
    62d6:	4f 5f       	subi	r20, 0xFF	; 255
    62d8:	5f 4f       	sbci	r21, 0xFF	; 255
    62da:	b1 d6       	rcall	.+3426   	; 0x703e <ltoa>
    62dc:	be 01       	movw	r22, r28
    62de:	6f 5f       	subi	r22, 0xFF	; 255
    62e0:	7f 4f       	sbci	r23, 0xFF	; 255
    62e2:	c8 01       	movw	r24, r16
    62e4:	a1 df       	rcall	.-190    	; 0x6228 <_ZN6StringaSEPKc>
    62e6:	a2 96       	adiw	r28, 0x22	; 34
    62e8:	0f b6       	in	r0, 0x3f	; 63
    62ea:	f8 94       	cli
    62ec:	de bf       	out	0x3e, r29	; 62
    62ee:	0f be       	out	0x3f, r0	; 63
    62f0:	cd bf       	out	0x3d, r28	; 61
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	1f 91       	pop	r17
    62f8:	0f 91       	pop	r16
    62fa:	08 95       	ret

000062fc <_ZN6StringC1Efh>:
    62fc:	ef 92       	push	r14
    62fe:	ff 92       	push	r15
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	a1 97       	sbiw	r28, 0x21	; 33
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	f8 94       	cli
    6312:	de bf       	out	0x3e, r29	; 62
    6314:	0f be       	out	0x3f, r0	; 63
    6316:	cd bf       	out	0x3d, r28	; 61
    6318:	7c 01       	movw	r14, r24
    631a:	cb 01       	movw	r24, r22
    631c:	ba 01       	movw	r22, r20
    631e:	f7 01       	movw	r30, r14
    6320:	11 82       	std	Z+1, r1	; 0x01
    6322:	10 82       	st	Z, r1
    6324:	13 82       	std	Z+3, r1	; 0x03
    6326:	12 82       	std	Z+2, r1	; 0x02
    6328:	15 82       	std	Z+5, r1	; 0x05
    632a:	14 82       	std	Z+4, r1	; 0x04
    632c:	42 e0       	ldi	r20, 0x02	; 2
    632e:	42 0f       	add	r20, r18
    6330:	8e 01       	movw	r16, r28
    6332:	0f 5f       	subi	r16, 0xFF	; 255
    6334:	1f 4f       	sbci	r17, 0xFF	; 255
    6336:	87 d2       	rcall	.+1294   	; 0x6846 <dtostrf>
    6338:	bc 01       	movw	r22, r24
    633a:	c7 01       	movw	r24, r14
    633c:	75 df       	rcall	.-278    	; 0x6228 <_ZN6StringaSEPKc>
    633e:	a1 96       	adiw	r28, 0x21	; 33
    6340:	0f b6       	in	r0, 0x3f	; 63
    6342:	f8 94       	cli
    6344:	de bf       	out	0x3e, r29	; 62
    6346:	0f be       	out	0x3f, r0	; 63
    6348:	cd bf       	out	0x3d, r28	; 61
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	1f 91       	pop	r17
    6350:	0f 91       	pop	r16
    6352:	ff 90       	pop	r15
    6354:	ef 90       	pop	r14
    6356:	08 95       	ret

00006358 <_ZN6StringC1Edh>:
    6358:	ef 92       	push	r14
    635a:	ff 92       	push	r15
    635c:	0f 93       	push	r16
    635e:	1f 93       	push	r17
    6360:	cf 93       	push	r28
    6362:	df 93       	push	r29
    6364:	cd b7       	in	r28, 0x3d	; 61
    6366:	de b7       	in	r29, 0x3e	; 62
    6368:	a1 97       	sbiw	r28, 0x21	; 33
    636a:	0f b6       	in	r0, 0x3f	; 63
    636c:	f8 94       	cli
    636e:	de bf       	out	0x3e, r29	; 62
    6370:	0f be       	out	0x3f, r0	; 63
    6372:	cd bf       	out	0x3d, r28	; 61
    6374:	7c 01       	movw	r14, r24
    6376:	cb 01       	movw	r24, r22
    6378:	ba 01       	movw	r22, r20
    637a:	f7 01       	movw	r30, r14
    637c:	11 82       	std	Z+1, r1	; 0x01
    637e:	10 82       	st	Z, r1
    6380:	13 82       	std	Z+3, r1	; 0x03
    6382:	12 82       	std	Z+2, r1	; 0x02
    6384:	15 82       	std	Z+5, r1	; 0x05
    6386:	14 82       	std	Z+4, r1	; 0x04
    6388:	42 e0       	ldi	r20, 0x02	; 2
    638a:	42 0f       	add	r20, r18
    638c:	8e 01       	movw	r16, r28
    638e:	0f 5f       	subi	r16, 0xFF	; 255
    6390:	1f 4f       	sbci	r17, 0xFF	; 255
    6392:	59 d2       	rcall	.+1202   	; 0x6846 <dtostrf>
    6394:	bc 01       	movw	r22, r24
    6396:	c7 01       	movw	r24, r14
    6398:	47 df       	rcall	.-370    	; 0x6228 <_ZN6StringaSEPKc>
    639a:	a1 96       	adiw	r28, 0x21	; 33
    639c:	0f b6       	in	r0, 0x3f	; 63
    639e:	f8 94       	cli
    63a0:	de bf       	out	0x3e, r29	; 62
    63a2:	0f be       	out	0x3f, r0	; 63
    63a4:	cd bf       	out	0x3d, r28	; 61
    63a6:	df 91       	pop	r29
    63a8:	cf 91       	pop	r28
    63aa:	1f 91       	pop	r17
    63ac:	0f 91       	pop	r16
    63ae:	ff 90       	pop	r15
    63b0:	ef 90       	pop	r14
    63b2:	08 95       	ret

000063b4 <_ZN6String6concatEPKcj>:
    63b4:	ef 92       	push	r14
    63b6:	ff 92       	push	r15
    63b8:	0f 93       	push	r16
    63ba:	1f 93       	push	r17
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29
    63c0:	fc 01       	movw	r30, r24
    63c2:	24 81       	ldd	r18, Z+4	; 0x04
    63c4:	35 81       	ldd	r19, Z+5	; 0x05
    63c6:	61 15       	cp	r22, r1
    63c8:	71 05       	cpc	r23, r1
    63ca:	11 f4       	brne	.+4      	; 0x63d0 <_ZN6String6concatEPKcj+0x1c>
    63cc:	80 e0       	ldi	r24, 0x00	; 0
    63ce:	17 c0       	rjmp	.+46     	; 0x63fe <_ZN6String6concatEPKcj+0x4a>
    63d0:	41 15       	cp	r20, r1
    63d2:	51 05       	cpc	r21, r1
    63d4:	99 f0       	breq	.+38     	; 0x63fc <_ZN6String6concatEPKcj+0x48>
    63d6:	7b 01       	movw	r14, r22
    63d8:	ec 01       	movw	r28, r24
    63da:	8a 01       	movw	r16, r20
    63dc:	02 0f       	add	r16, r18
    63de:	13 1f       	adc	r17, r19
    63e0:	b8 01       	movw	r22, r16
    63e2:	b8 de       	rcall	.-656    	; 0x6154 <_ZN6String7reserveEj>
    63e4:	88 23       	and	r24, r24
    63e6:	91 f3       	breq	.-28     	; 0x63cc <_ZN6String6concatEPKcj+0x18>
    63e8:	28 81       	ld	r18, Y
    63ea:	39 81       	ldd	r19, Y+1	; 0x01
    63ec:	8c 81       	ldd	r24, Y+4	; 0x04
    63ee:	9d 81       	ldd	r25, Y+5	; 0x05
    63f0:	b7 01       	movw	r22, r14
    63f2:	82 0f       	add	r24, r18
    63f4:	93 1f       	adc	r25, r19
    63f6:	eb d5       	rcall	.+3030   	; 0x6fce <strcpy>
    63f8:	1d 83       	std	Y+5, r17	; 0x05
    63fa:	0c 83       	std	Y+4, r16	; 0x04
    63fc:	81 e0       	ldi	r24, 0x01	; 1
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	1f 91       	pop	r17
    6404:	0f 91       	pop	r16
    6406:	ff 90       	pop	r15
    6408:	ef 90       	pop	r14
    640a:	08 95       	ret

0000640c <_ZN6String6concatEPKc>:
    640c:	61 15       	cp	r22, r1
    640e:	71 05       	cpc	r23, r1
    6410:	49 f0       	breq	.+18     	; 0x6424 <_ZN6String6concatEPKc+0x18>
    6412:	fb 01       	movw	r30, r22
    6414:	01 90       	ld	r0, Z+
    6416:	00 20       	and	r0, r0
    6418:	e9 f7       	brne	.-6      	; 0x6414 <_ZN6String6concatEPKc+0x8>
    641a:	31 97       	sbiw	r30, 0x01	; 1
    641c:	af 01       	movw	r20, r30
    641e:	46 1b       	sub	r20, r22
    6420:	57 0b       	sbc	r21, r23
    6422:	c8 cf       	rjmp	.-112    	; 0x63b4 <_ZN6String6concatEPKcj>
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	08 95       	ret

00006428 <_ZN6String6concatEc>:
    6428:	cf 93       	push	r28
    642a:	df 93       	push	r29
    642c:	00 d0       	rcall	.+0      	; 0x642e <_ZN6String6concatEc+0x6>
    642e:	cd b7       	in	r28, 0x3d	; 61
    6430:	de b7       	in	r29, 0x3e	; 62
    6432:	69 83       	std	Y+1, r22	; 0x01
    6434:	1a 82       	std	Y+2, r1	; 0x02
    6436:	41 e0       	ldi	r20, 0x01	; 1
    6438:	50 e0       	ldi	r21, 0x00	; 0
    643a:	be 01       	movw	r22, r28
    643c:	6f 5f       	subi	r22, 0xFF	; 255
    643e:	7f 4f       	sbci	r23, 0xFF	; 255
    6440:	b9 df       	rcall	.-142    	; 0x63b4 <_ZN6String6concatEPKcj>
    6442:	0f 90       	pop	r0
    6444:	0f 90       	pop	r0
    6446:	df 91       	pop	r29
    6448:	cf 91       	pop	r28
    644a:	08 95       	ret

0000644c <_ZplRK15StringSumHelperRK6String>:
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	ec 01       	movw	r28, r24
    6452:	fb 01       	movw	r30, r22
    6454:	44 81       	ldd	r20, Z+4	; 0x04
    6456:	55 81       	ldd	r21, Z+5	; 0x05
    6458:	60 81       	ld	r22, Z
    645a:	71 81       	ldd	r23, Z+1	; 0x01
    645c:	ab df       	rcall	.-170    	; 0x63b4 <_ZN6String6concatEPKcj>
    645e:	81 11       	cpse	r24, r1
    6460:	02 c0       	rjmp	.+4      	; 0x6466 <_ZplRK15StringSumHelperRK6String+0x1a>
    6462:	ce 01       	movw	r24, r28
    6464:	4d de       	rcall	.-870    	; 0x6100 <_ZN6String10invalidateEv>
    6466:	ce 01       	movw	r24, r28
    6468:	df 91       	pop	r29
    646a:	cf 91       	pop	r28
    646c:	08 95       	ret

0000646e <_ZplRK15StringSumHelperPKc>:
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	ec 01       	movw	r28, r24
    6474:	61 15       	cp	r22, r1
    6476:	71 05       	cpc	r23, r1
    6478:	59 f0       	breq	.+22     	; 0x6490 <_ZplRK15StringSumHelperPKc+0x22>
    647a:	fb 01       	movw	r30, r22
    647c:	01 90       	ld	r0, Z+
    647e:	00 20       	and	r0, r0
    6480:	e9 f7       	brne	.-6      	; 0x647c <_ZplRK15StringSumHelperPKc+0xe>
    6482:	31 97       	sbiw	r30, 0x01	; 1
    6484:	af 01       	movw	r20, r30
    6486:	46 1b       	sub	r20, r22
    6488:	57 0b       	sbc	r21, r23
    648a:	94 df       	rcall	.-216    	; 0x63b4 <_ZN6String6concatEPKcj>
    648c:	81 11       	cpse	r24, r1
    648e:	02 c0       	rjmp	.+4      	; 0x6494 <_ZplRK15StringSumHelperPKc+0x26>
    6490:	ce 01       	movw	r24, r28
    6492:	36 de       	rcall	.-916    	; 0x6100 <_ZN6String10invalidateEv>
    6494:	ce 01       	movw	r24, r28
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <_ZNK6String6equalsEPKc>:
    649c:	fc 01       	movw	r30, r24
    649e:	24 81       	ldd	r18, Z+4	; 0x04
    64a0:	35 81       	ldd	r19, Z+5	; 0x05
    64a2:	23 2b       	or	r18, r19
    64a4:	31 f4       	brne	.+12     	; 0x64b2 <_ZNK6String6equalsEPKc+0x16>
    64a6:	21 e0       	ldi	r18, 0x01	; 1
    64a8:	61 15       	cp	r22, r1
    64aa:	71 05       	cpc	r23, r1
    64ac:	99 f0       	breq	.+38     	; 0x64d4 <_ZNK6String6equalsEPKc+0x38>
    64ae:	fb 01       	movw	r30, r22
    64b0:	08 c0       	rjmp	.+16     	; 0x64c2 <_ZNK6String6equalsEPKc+0x26>
    64b2:	fc 01       	movw	r30, r24
    64b4:	80 81       	ld	r24, Z
    64b6:	91 81       	ldd	r25, Z+1	; 0x01
    64b8:	61 15       	cp	r22, r1
    64ba:	71 05       	cpc	r23, r1
    64bc:	31 f4       	brne	.+12     	; 0x64ca <_ZNK6String6equalsEPKc+0x2e>
    64be:	21 e0       	ldi	r18, 0x01	; 1
    64c0:	fc 01       	movw	r30, r24
    64c2:	80 81       	ld	r24, Z
    64c4:	88 23       	and	r24, r24
    64c6:	31 f0       	breq	.+12     	; 0x64d4 <_ZNK6String6equalsEPKc+0x38>
    64c8:	04 c0       	rjmp	.+8      	; 0x64d2 <_ZNK6String6equalsEPKc+0x36>
    64ca:	78 d5       	rcall	.+2800   	; 0x6fbc <strcmp>
    64cc:	21 e0       	ldi	r18, 0x01	; 1
    64ce:	89 2b       	or	r24, r25
    64d0:	09 f0       	breq	.+2      	; 0x64d4 <_ZNK6String6equalsEPKc+0x38>
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	82 2f       	mov	r24, r18
    64d6:	08 95       	ret

000064d8 <_ZNK6String10startsWithERKS_j>:
    64d8:	db 01       	movw	r26, r22
    64da:	14 96       	adiw	r26, 0x04	; 4
    64dc:	ed 91       	ld	r30, X+
    64de:	fc 91       	ld	r31, X
    64e0:	15 97       	sbiw	r26, 0x05	; 5
    64e2:	dc 01       	movw	r26, r24
    64e4:	14 96       	adiw	r26, 0x04	; 4
    64e6:	2d 91       	ld	r18, X+
    64e8:	3c 91       	ld	r19, X
    64ea:	15 97       	sbiw	r26, 0x05	; 5
    64ec:	2e 1b       	sub	r18, r30
    64ee:	3f 0b       	sbc	r19, r31
    64f0:	24 17       	cp	r18, r20
    64f2:	35 07       	cpc	r19, r21
    64f4:	98 f0       	brcs	.+38     	; 0x651c <_ZNK6String10startsWithERKS_j+0x44>
    64f6:	2d 91       	ld	r18, X+
    64f8:	3c 91       	ld	r19, X
    64fa:	21 15       	cp	r18, r1
    64fc:	31 05       	cpc	r19, r1
    64fe:	71 f0       	breq	.+28     	; 0x651c <_ZNK6String10startsWithERKS_j+0x44>
    6500:	db 01       	movw	r26, r22
    6502:	6d 91       	ld	r22, X+
    6504:	7c 91       	ld	r23, X
    6506:	61 15       	cp	r22, r1
    6508:	71 05       	cpc	r23, r1
    650a:	41 f0       	breq	.+16     	; 0x651c <_ZNK6String10startsWithERKS_j+0x44>
    650c:	ca 01       	movw	r24, r20
    650e:	af 01       	movw	r20, r30
    6510:	82 0f       	add	r24, r18
    6512:	93 1f       	adc	r25, r19
    6514:	63 d5       	rcall	.+2758   	; 0x6fdc <strncmp>
    6516:	21 e0       	ldi	r18, 0x01	; 1
    6518:	89 2b       	or	r24, r25
    651a:	09 f0       	breq	.+2      	; 0x651e <_ZNK6String10startsWithERKS_j+0x46>
    651c:	20 e0       	ldi	r18, 0x00	; 0
    651e:	82 2f       	mov	r24, r18
    6520:	08 95       	ret

00006522 <_ZNK6String10startsWithERKS_>:
    6522:	fc 01       	movw	r30, r24
    6524:	44 81       	ldd	r20, Z+4	; 0x04
    6526:	55 81       	ldd	r21, Z+5	; 0x05
    6528:	fb 01       	movw	r30, r22
    652a:	24 81       	ldd	r18, Z+4	; 0x04
    652c:	35 81       	ldd	r19, Z+5	; 0x05
    652e:	42 17       	cp	r20, r18
    6530:	53 07       	cpc	r21, r19
    6532:	18 f0       	brcs	.+6      	; 0x653a <_ZNK6String10startsWithERKS_+0x18>
    6534:	40 e0       	ldi	r20, 0x00	; 0
    6536:	50 e0       	ldi	r21, 0x00	; 0
    6538:	cf cf       	rjmp	.-98     	; 0x64d8 <_ZNK6String10startsWithERKS_j>
    653a:	80 e0       	ldi	r24, 0x00	; 0
    653c:	08 95       	ret

0000653e <_ZNK6StringixEj>:
    653e:	fc 01       	movw	r30, r24
    6540:	24 81       	ldd	r18, Z+4	; 0x04
    6542:	35 81       	ldd	r19, Z+5	; 0x05
    6544:	62 17       	cp	r22, r18
    6546:	73 07       	cpc	r23, r19
    6548:	48 f4       	brcc	.+18     	; 0x655c <_ZNK6StringixEj+0x1e>
    654a:	80 81       	ld	r24, Z
    654c:	91 81       	ldd	r25, Z+1	; 0x01
    654e:	00 97       	sbiw	r24, 0x00	; 0
    6550:	29 f0       	breq	.+10     	; 0x655c <_ZNK6StringixEj+0x1e>
    6552:	fc 01       	movw	r30, r24
    6554:	e6 0f       	add	r30, r22
    6556:	f7 1f       	adc	r31, r23
    6558:	80 81       	ld	r24, Z
    655a:	08 95       	ret
    655c:	80 e0       	ldi	r24, 0x00	; 0
    655e:	08 95       	ret

00006560 <_ZNK6String6charAtEj>:
    6560:	ee cf       	rjmp	.-36     	; 0x653e <_ZNK6StringixEj>

00006562 <_ZNK6String8getBytesEPhjj>:
    6562:	0f 93       	push	r16
    6564:	1f 93       	push	r17
    6566:	cf 93       	push	r28
    6568:	df 93       	push	r29
    656a:	41 15       	cp	r20, r1
    656c:	51 05       	cpc	r21, r1
    656e:	11 f1       	breq	.+68     	; 0x65b4 <_ZNK6String8getBytesEPhjj+0x52>
    6570:	61 15       	cp	r22, r1
    6572:	71 05       	cpc	r23, r1
    6574:	f9 f0       	breq	.+62     	; 0x65b4 <_ZNK6String8getBytesEPhjj+0x52>
    6576:	dc 01       	movw	r26, r24
    6578:	14 96       	adiw	r26, 0x04	; 4
    657a:	ed 91       	ld	r30, X+
    657c:	fc 91       	ld	r31, X
    657e:	15 97       	sbiw	r26, 0x05	; 5
    6580:	2e 17       	cp	r18, r30
    6582:	3f 07       	cpc	r19, r31
    6584:	18 f0       	brcs	.+6      	; 0x658c <_ZNK6String8getBytesEPhjj+0x2a>
    6586:	fb 01       	movw	r30, r22
    6588:	10 82       	st	Z, r1
    658a:	14 c0       	rjmp	.+40     	; 0x65b4 <_ZNK6String8getBytesEPhjj+0x52>
    658c:	e2 1b       	sub	r30, r18
    658e:	f3 0b       	sbc	r31, r19
    6590:	ea 01       	movw	r28, r20
    6592:	21 97       	sbiw	r28, 0x01	; 1
    6594:	ec 17       	cp	r30, r28
    6596:	fd 07       	cpc	r31, r29
    6598:	08 f4       	brcc	.+2      	; 0x659c <_ZNK6String8getBytesEPhjj+0x3a>
    659a:	ef 01       	movw	r28, r30
    659c:	8b 01       	movw	r16, r22
    659e:	fc 01       	movw	r30, r24
    65a0:	60 81       	ld	r22, Z
    65a2:	71 81       	ldd	r23, Z+1	; 0x01
    65a4:	62 0f       	add	r22, r18
    65a6:	73 1f       	adc	r23, r19
    65a8:	ae 01       	movw	r20, r28
    65aa:	c8 01       	movw	r24, r16
    65ac:	25 d5       	rcall	.+2634   	; 0x6ff8 <strncpy>
    65ae:	c0 0f       	add	r28, r16
    65b0:	d1 1f       	adc	r29, r17
    65b2:	18 82       	st	Y, r1
    65b4:	df 91       	pop	r29
    65b6:	cf 91       	pop	r28
    65b8:	1f 91       	pop	r17
    65ba:	0f 91       	pop	r16
    65bc:	08 95       	ret

000065be <_ZNK6String9substringEjj>:
    65be:	bf 92       	push	r11
    65c0:	cf 92       	push	r12
    65c2:	df 92       	push	r13
    65c4:	ef 92       	push	r14
    65c6:	ff 92       	push	r15
    65c8:	0f 93       	push	r16
    65ca:	1f 93       	push	r17
    65cc:	cf 93       	push	r28
    65ce:	df 93       	push	r29
    65d0:	7c 01       	movw	r14, r24
    65d2:	6b 01       	movw	r12, r22
    65d4:	8a 01       	movw	r16, r20
    65d6:	e9 01       	movw	r28, r18
    65d8:	24 17       	cp	r18, r20
    65da:	35 07       	cpc	r19, r21
    65dc:	20 f4       	brcc	.+8      	; 0x65e6 <_ZNK6String9substringEjj+0x28>
    65de:	81 2f       	mov	r24, r17
    65e0:	89 01       	movw	r16, r18
    65e2:	c4 2f       	mov	r28, r20
    65e4:	d8 2f       	mov	r29, r24
    65e6:	69 ec       	ldi	r22, 0xC9	; 201
    65e8:	71 e0       	ldi	r23, 0x01	; 1
    65ea:	c7 01       	movw	r24, r14
    65ec:	ec dd       	rcall	.-1064   	; 0x61c6 <_ZN6StringC1EPKc>
    65ee:	d6 01       	movw	r26, r12
    65f0:	14 96       	adiw	r26, 0x04	; 4
    65f2:	8d 91       	ld	r24, X+
    65f4:	9c 91       	ld	r25, X
    65f6:	15 97       	sbiw	r26, 0x05	; 5
    65f8:	08 17       	cp	r16, r24
    65fa:	19 07       	cpc	r17, r25
    65fc:	c8 f4       	brcc	.+50     	; 0x6630 <_ZNK6String9substringEjj+0x72>
    65fe:	8c 17       	cp	r24, r28
    6600:	9d 07       	cpc	r25, r29
    6602:	08 f4       	brcc	.+2      	; 0x6606 <_ZNK6String9substringEjj+0x48>
    6604:	ec 01       	movw	r28, r24
    6606:	d6 01       	movw	r26, r12
    6608:	ed 91       	ld	r30, X+
    660a:	fc 91       	ld	r31, X
    660c:	11 97       	sbiw	r26, 0x01	; 1
    660e:	ec 0f       	add	r30, r28
    6610:	fd 1f       	adc	r31, r29
    6612:	b0 80       	ld	r11, Z
    6614:	10 82       	st	Z, r1
    6616:	4d 91       	ld	r20, X+
    6618:	5c 91       	ld	r21, X
    661a:	ba 01       	movw	r22, r20
    661c:	60 0f       	add	r22, r16
    661e:	71 1f       	adc	r23, r17
    6620:	c7 01       	movw	r24, r14
    6622:	02 de       	rcall	.-1020   	; 0x6228 <_ZN6StringaSEPKc>
    6624:	d6 01       	movw	r26, r12
    6626:	ed 91       	ld	r30, X+
    6628:	fc 91       	ld	r31, X
    662a:	ec 0f       	add	r30, r28
    662c:	fd 1f       	adc	r31, r29
    662e:	b0 82       	st	Z, r11
    6630:	c7 01       	movw	r24, r14
    6632:	df 91       	pop	r29
    6634:	cf 91       	pop	r28
    6636:	1f 91       	pop	r17
    6638:	0f 91       	pop	r16
    663a:	ff 90       	pop	r15
    663c:	ef 90       	pop	r14
    663e:	df 90       	pop	r13
    6640:	cf 90       	pop	r12
    6642:	bf 90       	pop	r11
    6644:	08 95       	ret

00006646 <_ZN6String4trimEv>:

void String::trim(void)
{
    6646:	af 92       	push	r10
    6648:	bf 92       	push	r11
    664a:	cf 92       	push	r12
    664c:	df 92       	push	r13
    664e:	ef 92       	push	r14
    6650:	ff 92       	push	r15
    6652:	0f 93       	push	r16
    6654:	1f 93       	push	r17
    6656:	cf 93       	push	r28
    6658:	df 93       	push	r29
	if (!buffer || len == 0) return;
    665a:	dc 01       	movw	r26, r24
    665c:	cd 90       	ld	r12, X+
    665e:	dc 90       	ld	r13, X
    6660:	11 97       	sbiw	r26, 0x01	; 1
    6662:	c1 14       	cp	r12, r1
    6664:	d1 04       	cpc	r13, r1
    6666:	d9 f1       	breq	.+118    	; 0x66de <_ZN6String4trimEv+0x98>
    6668:	14 96       	adiw	r26, 0x04	; 4
    666a:	cd 91       	ld	r28, X+
    666c:	dc 91       	ld	r29, X
    666e:	15 97       	sbiw	r26, 0x05	; 5
    6670:	20 97       	sbiw	r28, 0x00	; 0
    6672:	a9 f1       	breq	.+106    	; 0x66de <_ZN6String4trimEv+0x98>
    6674:	8c 01       	movw	r16, r24
    6676:	56 01       	movw	r10, r12
    6678:	75 01       	movw	r14, r10
    667a:	bf ef       	ldi	r27, 0xFF	; 255
    667c:	ab 1a       	sub	r10, r27
    667e:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6680:	f7 01       	movw	r30, r14
    6682:	80 81       	ld	r24, Z
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	71 d4       	rcall	.+2274   	; 0x6f6a <isspace>
    6688:	89 2b       	or	r24, r25
    668a:	b1 f7       	brne	.-20     	; 0x6678 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    668c:	21 97       	sbiw	r28, 0x01	; 1
    668e:	cc 0d       	add	r28, r12
    6690:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6692:	88 81       	ld	r24, Y
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	69 d4       	rcall	.+2258   	; 0x6f6a <isspace>
    6698:	89 2b       	or	r24, r25
    669a:	89 f4       	brne	.+34     	; 0x66be <_ZN6String4trimEv+0x78>
	len = end + 1 - begin;
    669c:	ae 01       	movw	r20, r28
    669e:	4f 5f       	subi	r20, 0xFF	; 255
    66a0:	5f 4f       	sbci	r21, 0xFF	; 255
    66a2:	4e 19       	sub	r20, r14
    66a4:	5f 09       	sbc	r21, r15
    66a6:	d8 01       	movw	r26, r16
    66a8:	15 96       	adiw	r26, 0x05	; 5
    66aa:	5c 93       	st	X, r21
    66ac:	4e 93       	st	-X, r20
    66ae:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    66b0:	ce 14       	cp	r12, r14
    66b2:	df 04       	cpc	r13, r15
    66b4:	48 f4       	brcc	.+18     	; 0x66c8 <_ZN6String4trimEv+0x82>
    66b6:	b7 01       	movw	r22, r14
    66b8:	c6 01       	movw	r24, r12
    66ba:	77 d4       	rcall	.+2286   	; 0x6faa <memcpy>
    66bc:	05 c0       	rjmp	.+10     	; 0x66c8 <_ZN6String4trimEv+0x82>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    66be:	ce 15       	cp	r28, r14
    66c0:	df 05       	cpc	r29, r15
    66c2:	60 f3       	brcs	.-40     	; 0x669c <_ZN6String4trimEv+0x56>
    66c4:	21 97       	sbiw	r28, 0x01	; 1
    66c6:	e5 cf       	rjmp	.-54     	; 0x6692 <_ZN6String4trimEv+0x4c>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    66c8:	d8 01       	movw	r26, r16
    66ca:	ed 91       	ld	r30, X+
    66cc:	fc 91       	ld	r31, X
    66ce:	11 97       	sbiw	r26, 0x01	; 1
    66d0:	14 96       	adiw	r26, 0x04	; 4
    66d2:	8d 91       	ld	r24, X+
    66d4:	9c 91       	ld	r25, X
    66d6:	15 97       	sbiw	r26, 0x05	; 5
    66d8:	e8 0f       	add	r30, r24
    66da:	f9 1f       	adc	r31, r25
    66dc:	10 82       	st	Z, r1
}
    66de:	df 91       	pop	r29
    66e0:	cf 91       	pop	r28
    66e2:	1f 91       	pop	r17
    66e4:	0f 91       	pop	r16
    66e6:	ff 90       	pop	r15
    66e8:	ef 90       	pop	r14
    66ea:	df 90       	pop	r13
    66ec:	cf 90       	pop	r12
    66ee:	bf 90       	pop	r11
    66f0:	af 90       	pop	r10
    66f2:	08 95       	ret

000066f4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    66f4:	fc 01       	movw	r30, r24
    66f6:	80 81       	ld	r24, Z
    66f8:	91 81       	ldd	r25, Z+1	; 0x01
    66fa:	00 97       	sbiw	r24, 0x00	; 0
    66fc:	09 f0       	breq	.+2      	; 0x6700 <_ZNK6String5toIntEv+0xc>
    66fe:	0f c4       	rjmp	.+2078   	; 0x6f1e <atol>
	return 0;
}
    6700:	60 e0       	ldi	r22, 0x00	; 0
    6702:	70 e0       	ldi	r23, 0x00	; 0
    6704:	cb 01       	movw	r24, r22
    6706:	08 95       	ret

00006708 <_ZNK6String7toFloatEv>:

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
    6708:	fc 01       	movw	r30, r24
    670a:	80 81       	ld	r24, Z
    670c:	91 81       	ldd	r25, Z+1	; 0x01
    670e:	00 97       	sbiw	r24, 0x00	; 0
    6710:	09 f0       	breq	.+2      	; 0x6714 <_ZNK6String7toFloatEv+0xc>
    6712:	02 c4       	rjmp	.+2052   	; 0x6f18 <atof>
	return 0;
}
    6714:	60 e0       	ldi	r22, 0x00	; 0
    6716:	70 e0       	ldi	r23, 0x00	; 0
    6718:	cb 01       	movw	r24, r22
    671a:	08 95       	ret

0000671c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    671c:	08 95       	ret

0000671e <__udivmodsi4>:
    671e:	a1 e2       	ldi	r26, 0x21	; 33
    6720:	1a 2e       	mov	r1, r26
    6722:	aa 1b       	sub	r26, r26
    6724:	bb 1b       	sub	r27, r27
    6726:	fd 01       	movw	r30, r26
    6728:	0d c0       	rjmp	.+26     	; 0x6744 <__udivmodsi4_ep>

0000672a <__udivmodsi4_loop>:
    672a:	aa 1f       	adc	r26, r26
    672c:	bb 1f       	adc	r27, r27
    672e:	ee 1f       	adc	r30, r30
    6730:	ff 1f       	adc	r31, r31
    6732:	a2 17       	cp	r26, r18
    6734:	b3 07       	cpc	r27, r19
    6736:	e4 07       	cpc	r30, r20
    6738:	f5 07       	cpc	r31, r21
    673a:	20 f0       	brcs	.+8      	; 0x6744 <__udivmodsi4_ep>
    673c:	a2 1b       	sub	r26, r18
    673e:	b3 0b       	sbc	r27, r19
    6740:	e4 0b       	sbc	r30, r20
    6742:	f5 0b       	sbc	r31, r21

00006744 <__udivmodsi4_ep>:
    6744:	66 1f       	adc	r22, r22
    6746:	77 1f       	adc	r23, r23
    6748:	88 1f       	adc	r24, r24
    674a:	99 1f       	adc	r25, r25
    674c:	1a 94       	dec	r1
    674e:	69 f7       	brne	.-38     	; 0x672a <__udivmodsi4_loop>
    6750:	60 95       	com	r22
    6752:	70 95       	com	r23
    6754:	80 95       	com	r24
    6756:	90 95       	com	r25
    6758:	9b 01       	movw	r18, r22
    675a:	ac 01       	movw	r20, r24
    675c:	bd 01       	movw	r22, r26
    675e:	cf 01       	movw	r24, r30
    6760:	08 95       	ret

00006762 <__divmodsi4>:
    6762:	05 2e       	mov	r0, r21
    6764:	97 fb       	bst	r25, 7
    6766:	16 f4       	brtc	.+4      	; 0x676c <__divmodsi4+0xa>
    6768:	00 94       	com	r0
    676a:	0f d0       	rcall	.+30     	; 0x678a <__negsi2>
    676c:	57 fd       	sbrc	r21, 7
    676e:	05 d0       	rcall	.+10     	; 0x677a <__divmodsi4_neg2>
    6770:	d6 df       	rcall	.-84     	; 0x671e <__udivmodsi4>
    6772:	07 fc       	sbrc	r0, 7
    6774:	02 d0       	rcall	.+4      	; 0x677a <__divmodsi4_neg2>
    6776:	46 f4       	brtc	.+16     	; 0x6788 <__divmodsi4_exit>
    6778:	08 c0       	rjmp	.+16     	; 0x678a <__negsi2>

0000677a <__divmodsi4_neg2>:
    677a:	50 95       	com	r21
    677c:	40 95       	com	r20
    677e:	30 95       	com	r19
    6780:	21 95       	neg	r18
    6782:	3f 4f       	sbci	r19, 0xFF	; 255
    6784:	4f 4f       	sbci	r20, 0xFF	; 255
    6786:	5f 4f       	sbci	r21, 0xFF	; 255

00006788 <__divmodsi4_exit>:
    6788:	08 95       	ret

0000678a <__negsi2>:
    678a:	90 95       	com	r25
    678c:	80 95       	com	r24
    678e:	70 95       	com	r23
    6790:	61 95       	neg	r22
    6792:	7f 4f       	sbci	r23, 0xFF	; 255
    6794:	8f 4f       	sbci	r24, 0xFF	; 255
    6796:	9f 4f       	sbci	r25, 0xFF	; 255
    6798:	08 95       	ret

0000679a <__tablejump2__>:
    679a:	ee 0f       	add	r30, r30
    679c:	ff 1f       	adc	r31, r31
    679e:	05 90       	lpm	r0, Z+
    67a0:	f4 91       	lpm	r31, Z
    67a2:	e0 2d       	mov	r30, r0
    67a4:	09 94       	ijmp

000067a6 <__muluhisi3>:
    67a6:	40 d0       	rcall	.+128    	; 0x6828 <__umulhisi3>
    67a8:	a5 9f       	mul	r26, r21
    67aa:	90 0d       	add	r25, r0
    67ac:	b4 9f       	mul	r27, r20
    67ae:	90 0d       	add	r25, r0
    67b0:	a4 9f       	mul	r26, r20
    67b2:	80 0d       	add	r24, r0
    67b4:	91 1d       	adc	r25, r1
    67b6:	11 24       	eor	r1, r1
    67b8:	08 95       	ret

000067ba <__prologue_saves__>:
    67ba:	2f 92       	push	r2
    67bc:	3f 92       	push	r3
    67be:	4f 92       	push	r4
    67c0:	5f 92       	push	r5
    67c2:	6f 92       	push	r6
    67c4:	7f 92       	push	r7
    67c6:	8f 92       	push	r8
    67c8:	9f 92       	push	r9
    67ca:	af 92       	push	r10
    67cc:	bf 92       	push	r11
    67ce:	cf 92       	push	r12
    67d0:	df 92       	push	r13
    67d2:	ef 92       	push	r14
    67d4:	ff 92       	push	r15
    67d6:	0f 93       	push	r16
    67d8:	1f 93       	push	r17
    67da:	cf 93       	push	r28
    67dc:	df 93       	push	r29
    67de:	cd b7       	in	r28, 0x3d	; 61
    67e0:	de b7       	in	r29, 0x3e	; 62
    67e2:	ca 1b       	sub	r28, r26
    67e4:	db 0b       	sbc	r29, r27
    67e6:	0f b6       	in	r0, 0x3f	; 63
    67e8:	f8 94       	cli
    67ea:	de bf       	out	0x3e, r29	; 62
    67ec:	0f be       	out	0x3f, r0	; 63
    67ee:	cd bf       	out	0x3d, r28	; 61
    67f0:	09 94       	ijmp

000067f2 <__epilogue_restores__>:
    67f2:	2a 88       	ldd	r2, Y+18	; 0x12
    67f4:	39 88       	ldd	r3, Y+17	; 0x11
    67f6:	48 88       	ldd	r4, Y+16	; 0x10
    67f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    67fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    67fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    67fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    6800:	9b 84       	ldd	r9, Y+11	; 0x0b
    6802:	aa 84       	ldd	r10, Y+10	; 0x0a
    6804:	b9 84       	ldd	r11, Y+9	; 0x09
    6806:	c8 84       	ldd	r12, Y+8	; 0x08
    6808:	df 80       	ldd	r13, Y+7	; 0x07
    680a:	ee 80       	ldd	r14, Y+6	; 0x06
    680c:	fd 80       	ldd	r15, Y+5	; 0x05
    680e:	0c 81       	ldd	r16, Y+4	; 0x04
    6810:	1b 81       	ldd	r17, Y+3	; 0x03
    6812:	aa 81       	ldd	r26, Y+2	; 0x02
    6814:	b9 81       	ldd	r27, Y+1	; 0x01
    6816:	ce 0f       	add	r28, r30
    6818:	d1 1d       	adc	r29, r1
    681a:	0f b6       	in	r0, 0x3f	; 63
    681c:	f8 94       	cli
    681e:	de bf       	out	0x3e, r29	; 62
    6820:	0f be       	out	0x3f, r0	; 63
    6822:	cd bf       	out	0x3d, r28	; 61
    6824:	ed 01       	movw	r28, r26
    6826:	08 95       	ret

00006828 <__umulhisi3>:
    6828:	a2 9f       	mul	r26, r18
    682a:	b0 01       	movw	r22, r0
    682c:	b3 9f       	mul	r27, r19
    682e:	c0 01       	movw	r24, r0
    6830:	a3 9f       	mul	r26, r19
    6832:	70 0d       	add	r23, r0
    6834:	81 1d       	adc	r24, r1
    6836:	11 24       	eor	r1, r1
    6838:	91 1d       	adc	r25, r1
    683a:	b2 9f       	mul	r27, r18
    683c:	70 0d       	add	r23, r0
    683e:	81 1d       	adc	r24, r1
    6840:	11 24       	eor	r1, r1
    6842:	91 1d       	adc	r25, r1
    6844:	08 95       	ret

00006846 <dtostrf>:
    6846:	ef 92       	push	r14
    6848:	0f 93       	push	r16
    684a:	1f 93       	push	r17
    684c:	cf 93       	push	r28
    684e:	df 93       	push	r29
    6850:	e8 01       	movw	r28, r16
    6852:	47 fd       	sbrc	r20, 7
    6854:	02 c0       	rjmp	.+4      	; 0x685a <dtostrf+0x14>
    6856:	34 e0       	ldi	r19, 0x04	; 4
    6858:	01 c0       	rjmp	.+2      	; 0x685c <dtostrf+0x16>
    685a:	34 e1       	ldi	r19, 0x14	; 20
    685c:	e4 2f       	mov	r30, r20
    685e:	44 0f       	add	r20, r20
    6860:	ff 0b       	sbc	r31, r31
    6862:	f7 ff       	sbrs	r31, 7
    6864:	03 c0       	rjmp	.+6      	; 0x686c <dtostrf+0x26>
    6866:	f1 95       	neg	r31
    6868:	e1 95       	neg	r30
    686a:	f1 09       	sbc	r31, r1
    686c:	e3 2e       	mov	r14, r19
    686e:	02 2f       	mov	r16, r18
    6870:	2e 2f       	mov	r18, r30
    6872:	ae 01       	movw	r20, r28
    6874:	4b d4       	rcall	.+2198   	; 0x710c <dtoa_prf>
    6876:	ce 01       	movw	r24, r28
    6878:	df 91       	pop	r29
    687a:	cf 91       	pop	r28
    687c:	1f 91       	pop	r17
    687e:	0f 91       	pop	r16
    6880:	ef 90       	pop	r14
    6882:	08 95       	ret

00006884 <malloc>:
    6884:	cf 93       	push	r28
    6886:	df 93       	push	r29
    6888:	82 30       	cpi	r24, 0x02	; 2
    688a:	91 05       	cpc	r25, r1
    688c:	10 f4       	brcc	.+4      	; 0x6892 <malloc+0xe>
    688e:	82 e0       	ldi	r24, 0x02	; 2
    6890:	90 e0       	ldi	r25, 0x00	; 0
    6892:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <__flp>
    6896:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <__flp+0x1>
    689a:	20 e0       	ldi	r18, 0x00	; 0
    689c:	30 e0       	ldi	r19, 0x00	; 0
    689e:	c0 e0       	ldi	r28, 0x00	; 0
    68a0:	d0 e0       	ldi	r29, 0x00	; 0
    68a2:	30 97       	sbiw	r30, 0x00	; 0
    68a4:	11 f1       	breq	.+68     	; 0x68ea <malloc+0x66>
    68a6:	40 81       	ld	r20, Z
    68a8:	51 81       	ldd	r21, Z+1	; 0x01
    68aa:	48 17       	cp	r20, r24
    68ac:	59 07       	cpc	r21, r25
    68ae:	c0 f0       	brcs	.+48     	; 0x68e0 <malloc+0x5c>
    68b0:	48 17       	cp	r20, r24
    68b2:	59 07       	cpc	r21, r25
    68b4:	61 f4       	brne	.+24     	; 0x68ce <malloc+0x4a>
    68b6:	82 81       	ldd	r24, Z+2	; 0x02
    68b8:	93 81       	ldd	r25, Z+3	; 0x03
    68ba:	20 97       	sbiw	r28, 0x00	; 0
    68bc:	19 f0       	breq	.+6      	; 0x68c4 <malloc+0x40>
    68be:	9b 83       	std	Y+3, r25	; 0x03
    68c0:	8a 83       	std	Y+2, r24	; 0x02
    68c2:	2b c0       	rjmp	.+86     	; 0x691a <malloc+0x96>
    68c4:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <__flp+0x1>
    68c8:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <__flp>
    68cc:	26 c0       	rjmp	.+76     	; 0x691a <malloc+0x96>
    68ce:	21 15       	cp	r18, r1
    68d0:	31 05       	cpc	r19, r1
    68d2:	19 f0       	breq	.+6      	; 0x68da <malloc+0x56>
    68d4:	42 17       	cp	r20, r18
    68d6:	53 07       	cpc	r21, r19
    68d8:	18 f4       	brcc	.+6      	; 0x68e0 <malloc+0x5c>
    68da:	9a 01       	movw	r18, r20
    68dc:	be 01       	movw	r22, r28
    68de:	df 01       	movw	r26, r30
    68e0:	ef 01       	movw	r28, r30
    68e2:	02 80       	ldd	r0, Z+2	; 0x02
    68e4:	f3 81       	ldd	r31, Z+3	; 0x03
    68e6:	e0 2d       	mov	r30, r0
    68e8:	dc cf       	rjmp	.-72     	; 0x68a2 <malloc+0x1e>
    68ea:	21 15       	cp	r18, r1
    68ec:	31 05       	cpc	r19, r1
    68ee:	09 f1       	breq	.+66     	; 0x6932 <malloc+0xae>
    68f0:	28 1b       	sub	r18, r24
    68f2:	39 0b       	sbc	r19, r25
    68f4:	24 30       	cpi	r18, 0x04	; 4
    68f6:	31 05       	cpc	r19, r1
    68f8:	90 f4       	brcc	.+36     	; 0x691e <malloc+0x9a>
    68fa:	12 96       	adiw	r26, 0x02	; 2
    68fc:	8d 91       	ld	r24, X+
    68fe:	9c 91       	ld	r25, X
    6900:	13 97       	sbiw	r26, 0x03	; 3
    6902:	61 15       	cp	r22, r1
    6904:	71 05       	cpc	r23, r1
    6906:	21 f0       	breq	.+8      	; 0x6910 <malloc+0x8c>
    6908:	fb 01       	movw	r30, r22
    690a:	93 83       	std	Z+3, r25	; 0x03
    690c:	82 83       	std	Z+2, r24	; 0x02
    690e:	04 c0       	rjmp	.+8      	; 0x6918 <malloc+0x94>
    6910:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <__flp+0x1>
    6914:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <__flp>
    6918:	fd 01       	movw	r30, r26
    691a:	32 96       	adiw	r30, 0x02	; 2
    691c:	44 c0       	rjmp	.+136    	; 0x69a6 <malloc+0x122>
    691e:	fd 01       	movw	r30, r26
    6920:	e2 0f       	add	r30, r18
    6922:	f3 1f       	adc	r31, r19
    6924:	81 93       	st	Z+, r24
    6926:	91 93       	st	Z+, r25
    6928:	22 50       	subi	r18, 0x02	; 2
    692a:	31 09       	sbc	r19, r1
    692c:	2d 93       	st	X+, r18
    692e:	3c 93       	st	X, r19
    6930:	3a c0       	rjmp	.+116    	; 0x69a6 <malloc+0x122>
    6932:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    6936:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    693a:	23 2b       	or	r18, r19
    693c:	41 f4       	brne	.+16     	; 0x694e <malloc+0xca>
    693e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6942:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6946:	30 93 fd 05 	sts	0x05FD, r19	; 0x8005fd <__brkval+0x1>
    694a:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <__brkval>
    694e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6952:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6956:	21 15       	cp	r18, r1
    6958:	31 05       	cpc	r19, r1
    695a:	41 f4       	brne	.+16     	; 0x696c <malloc+0xe8>
    695c:	2d b7       	in	r18, 0x3d	; 61
    695e:	3e b7       	in	r19, 0x3e	; 62
    6960:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6964:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6968:	24 1b       	sub	r18, r20
    696a:	35 0b       	sbc	r19, r21
    696c:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <__brkval>
    6970:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <__brkval+0x1>
    6974:	e2 17       	cp	r30, r18
    6976:	f3 07       	cpc	r31, r19
    6978:	a0 f4       	brcc	.+40     	; 0x69a2 <malloc+0x11e>
    697a:	2e 1b       	sub	r18, r30
    697c:	3f 0b       	sbc	r19, r31
    697e:	28 17       	cp	r18, r24
    6980:	39 07       	cpc	r19, r25
    6982:	78 f0       	brcs	.+30     	; 0x69a2 <malloc+0x11e>
    6984:	ac 01       	movw	r20, r24
    6986:	4e 5f       	subi	r20, 0xFE	; 254
    6988:	5f 4f       	sbci	r21, 0xFF	; 255
    698a:	24 17       	cp	r18, r20
    698c:	35 07       	cpc	r19, r21
    698e:	48 f0       	brcs	.+18     	; 0x69a2 <malloc+0x11e>
    6990:	4e 0f       	add	r20, r30
    6992:	5f 1f       	adc	r21, r31
    6994:	50 93 fd 05 	sts	0x05FD, r21	; 0x8005fd <__brkval+0x1>
    6998:	40 93 fc 05 	sts	0x05FC, r20	; 0x8005fc <__brkval>
    699c:	81 93       	st	Z+, r24
    699e:	91 93       	st	Z+, r25
    69a0:	02 c0       	rjmp	.+4      	; 0x69a6 <malloc+0x122>
    69a2:	e0 e0       	ldi	r30, 0x00	; 0
    69a4:	f0 e0       	ldi	r31, 0x00	; 0
    69a6:	cf 01       	movw	r24, r30
    69a8:	df 91       	pop	r29
    69aa:	cf 91       	pop	r28
    69ac:	08 95       	ret

000069ae <free>:
    69ae:	0f 93       	push	r16
    69b0:	1f 93       	push	r17
    69b2:	cf 93       	push	r28
    69b4:	df 93       	push	r29
    69b6:	00 97       	sbiw	r24, 0x00	; 0
    69b8:	09 f4       	brne	.+2      	; 0x69bc <free+0xe>
    69ba:	8c c0       	rjmp	.+280    	; 0x6ad4 <free+0x126>
    69bc:	fc 01       	movw	r30, r24
    69be:	32 97       	sbiw	r30, 0x02	; 2
    69c0:	13 82       	std	Z+3, r1	; 0x03
    69c2:	12 82       	std	Z+2, r1	; 0x02
    69c4:	00 91 fe 05 	lds	r16, 0x05FE	; 0x8005fe <__flp>
    69c8:	10 91 ff 05 	lds	r17, 0x05FF	; 0x8005ff <__flp+0x1>
    69cc:	01 15       	cp	r16, r1
    69ce:	11 05       	cpc	r17, r1
    69d0:	81 f4       	brne	.+32     	; 0x69f2 <free+0x44>
    69d2:	20 81       	ld	r18, Z
    69d4:	31 81       	ldd	r19, Z+1	; 0x01
    69d6:	82 0f       	add	r24, r18
    69d8:	93 1f       	adc	r25, r19
    69da:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    69de:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    69e2:	28 17       	cp	r18, r24
    69e4:	39 07       	cpc	r19, r25
    69e6:	79 f5       	brne	.+94     	; 0x6a46 <free+0x98>
    69e8:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__brkval+0x1>
    69ec:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__brkval>
    69f0:	71 c0       	rjmp	.+226    	; 0x6ad4 <free+0x126>
    69f2:	d8 01       	movw	r26, r16
    69f4:	40 e0       	ldi	r20, 0x00	; 0
    69f6:	50 e0       	ldi	r21, 0x00	; 0
    69f8:	ae 17       	cp	r26, r30
    69fa:	bf 07       	cpc	r27, r31
    69fc:	50 f4       	brcc	.+20     	; 0x6a12 <free+0x64>
    69fe:	12 96       	adiw	r26, 0x02	; 2
    6a00:	2d 91       	ld	r18, X+
    6a02:	3c 91       	ld	r19, X
    6a04:	13 97       	sbiw	r26, 0x03	; 3
    6a06:	ad 01       	movw	r20, r26
    6a08:	21 15       	cp	r18, r1
    6a0a:	31 05       	cpc	r19, r1
    6a0c:	09 f1       	breq	.+66     	; 0x6a50 <free+0xa2>
    6a0e:	d9 01       	movw	r26, r18
    6a10:	f3 cf       	rjmp	.-26     	; 0x69f8 <free+0x4a>
    6a12:	9d 01       	movw	r18, r26
    6a14:	da 01       	movw	r26, r20
    6a16:	33 83       	std	Z+3, r19	; 0x03
    6a18:	22 83       	std	Z+2, r18	; 0x02
    6a1a:	60 81       	ld	r22, Z
    6a1c:	71 81       	ldd	r23, Z+1	; 0x01
    6a1e:	86 0f       	add	r24, r22
    6a20:	97 1f       	adc	r25, r23
    6a22:	82 17       	cp	r24, r18
    6a24:	93 07       	cpc	r25, r19
    6a26:	69 f4       	brne	.+26     	; 0x6a42 <free+0x94>
    6a28:	ec 01       	movw	r28, r24
    6a2a:	28 81       	ld	r18, Y
    6a2c:	39 81       	ldd	r19, Y+1	; 0x01
    6a2e:	26 0f       	add	r18, r22
    6a30:	37 1f       	adc	r19, r23
    6a32:	2e 5f       	subi	r18, 0xFE	; 254
    6a34:	3f 4f       	sbci	r19, 0xFF	; 255
    6a36:	31 83       	std	Z+1, r19	; 0x01
    6a38:	20 83       	st	Z, r18
    6a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a3e:	93 83       	std	Z+3, r25	; 0x03
    6a40:	82 83       	std	Z+2, r24	; 0x02
    6a42:	45 2b       	or	r20, r21
    6a44:	29 f4       	brne	.+10     	; 0x6a50 <free+0xa2>
    6a46:	f0 93 ff 05 	sts	0x05FF, r31	; 0x8005ff <__flp+0x1>
    6a4a:	e0 93 fe 05 	sts	0x05FE, r30	; 0x8005fe <__flp>
    6a4e:	42 c0       	rjmp	.+132    	; 0x6ad4 <free+0x126>
    6a50:	13 96       	adiw	r26, 0x03	; 3
    6a52:	fc 93       	st	X, r31
    6a54:	ee 93       	st	-X, r30
    6a56:	12 97       	sbiw	r26, 0x02	; 2
    6a58:	ed 01       	movw	r28, r26
    6a5a:	49 91       	ld	r20, Y+
    6a5c:	59 91       	ld	r21, Y+
    6a5e:	9e 01       	movw	r18, r28
    6a60:	24 0f       	add	r18, r20
    6a62:	35 1f       	adc	r19, r21
    6a64:	e2 17       	cp	r30, r18
    6a66:	f3 07       	cpc	r31, r19
    6a68:	71 f4       	brne	.+28     	; 0x6a86 <free+0xd8>
    6a6a:	80 81       	ld	r24, Z
    6a6c:	91 81       	ldd	r25, Z+1	; 0x01
    6a6e:	84 0f       	add	r24, r20
    6a70:	95 1f       	adc	r25, r21
    6a72:	02 96       	adiw	r24, 0x02	; 2
    6a74:	11 96       	adiw	r26, 0x01	; 1
    6a76:	9c 93       	st	X, r25
    6a78:	8e 93       	st	-X, r24
    6a7a:	82 81       	ldd	r24, Z+2	; 0x02
    6a7c:	93 81       	ldd	r25, Z+3	; 0x03
    6a7e:	13 96       	adiw	r26, 0x03	; 3
    6a80:	9c 93       	st	X, r25
    6a82:	8e 93       	st	-X, r24
    6a84:	12 97       	sbiw	r26, 0x02	; 2
    6a86:	e0 e0       	ldi	r30, 0x00	; 0
    6a88:	f0 e0       	ldi	r31, 0x00	; 0
    6a8a:	d8 01       	movw	r26, r16
    6a8c:	12 96       	adiw	r26, 0x02	; 2
    6a8e:	8d 91       	ld	r24, X+
    6a90:	9c 91       	ld	r25, X
    6a92:	13 97       	sbiw	r26, 0x03	; 3
    6a94:	00 97       	sbiw	r24, 0x00	; 0
    6a96:	19 f0       	breq	.+6      	; 0x6a9e <free+0xf0>
    6a98:	f8 01       	movw	r30, r16
    6a9a:	8c 01       	movw	r16, r24
    6a9c:	f6 cf       	rjmp	.-20     	; 0x6a8a <free+0xdc>
    6a9e:	8d 91       	ld	r24, X+
    6aa0:	9c 91       	ld	r25, X
    6aa2:	98 01       	movw	r18, r16
    6aa4:	2e 5f       	subi	r18, 0xFE	; 254
    6aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa8:	82 0f       	add	r24, r18
    6aaa:	93 1f       	adc	r25, r19
    6aac:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    6ab0:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    6ab4:	28 17       	cp	r18, r24
    6ab6:	39 07       	cpc	r19, r25
    6ab8:	69 f4       	brne	.+26     	; 0x6ad4 <free+0x126>
    6aba:	30 97       	sbiw	r30, 0x00	; 0
    6abc:	29 f4       	brne	.+10     	; 0x6ac8 <free+0x11a>
    6abe:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <__flp+0x1>
    6ac2:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <__flp>
    6ac6:	02 c0       	rjmp	.+4      	; 0x6acc <free+0x11e>
    6ac8:	13 82       	std	Z+3, r1	; 0x03
    6aca:	12 82       	std	Z+2, r1	; 0x02
    6acc:	10 93 fd 05 	sts	0x05FD, r17	; 0x8005fd <__brkval+0x1>
    6ad0:	00 93 fc 05 	sts	0x05FC, r16	; 0x8005fc <__brkval>
    6ad4:	df 91       	pop	r29
    6ad6:	cf 91       	pop	r28
    6ad8:	1f 91       	pop	r17
    6ada:	0f 91       	pop	r16
    6adc:	08 95       	ret

00006ade <realloc>:
    6ade:	a0 e0       	ldi	r26, 0x00	; 0
    6ae0:	b0 e0       	ldi	r27, 0x00	; 0
    6ae2:	e4 e7       	ldi	r30, 0x74	; 116
    6ae4:	f5 e3       	ldi	r31, 0x35	; 53
    6ae6:	6d ce       	rjmp	.-806    	; 0x67c2 <__prologue_saves__+0x8>
    6ae8:	ec 01       	movw	r28, r24
    6aea:	00 97       	sbiw	r24, 0x00	; 0
    6aec:	19 f4       	brne	.+6      	; 0x6af4 <realloc+0x16>
    6aee:	cb 01       	movw	r24, r22
    6af0:	c9 de       	rcall	.-622    	; 0x6884 <malloc>
    6af2:	b4 c0       	rjmp	.+360    	; 0x6c5c <realloc+0x17e>
    6af4:	fc 01       	movw	r30, r24
    6af6:	e6 0f       	add	r30, r22
    6af8:	f7 1f       	adc	r31, r23
    6afa:	9c 01       	movw	r18, r24
    6afc:	22 50       	subi	r18, 0x02	; 2
    6afe:	31 09       	sbc	r19, r1
    6b00:	e2 17       	cp	r30, r18
    6b02:	f3 07       	cpc	r31, r19
    6b04:	08 f4       	brcc	.+2      	; 0x6b08 <realloc+0x2a>
    6b06:	a8 c0       	rjmp	.+336    	; 0x6c58 <realloc+0x17a>
    6b08:	d9 01       	movw	r26, r18
    6b0a:	0d 91       	ld	r16, X+
    6b0c:	1c 91       	ld	r17, X
    6b0e:	11 97       	sbiw	r26, 0x01	; 1
    6b10:	06 17       	cp	r16, r22
    6b12:	17 07       	cpc	r17, r23
    6b14:	a8 f0       	brcs	.+42     	; 0x6b40 <realloc+0x62>
    6b16:	05 30       	cpi	r16, 0x05	; 5
    6b18:	11 05       	cpc	r17, r1
    6b1a:	08 f4       	brcc	.+2      	; 0x6b1e <realloc+0x40>
    6b1c:	9b c0       	rjmp	.+310    	; 0x6c54 <realloc+0x176>
    6b1e:	c8 01       	movw	r24, r16
    6b20:	04 97       	sbiw	r24, 0x04	; 4
    6b22:	86 17       	cp	r24, r22
    6b24:	97 07       	cpc	r25, r23
    6b26:	08 f4       	brcc	.+2      	; 0x6b2a <realloc+0x4c>
    6b28:	95 c0       	rjmp	.+298    	; 0x6c54 <realloc+0x176>
    6b2a:	02 50       	subi	r16, 0x02	; 2
    6b2c:	11 09       	sbc	r17, r1
    6b2e:	06 1b       	sub	r16, r22
    6b30:	17 0b       	sbc	r17, r23
    6b32:	01 93       	st	Z+, r16
    6b34:	11 93       	st	Z+, r17
    6b36:	6d 93       	st	X+, r22
    6b38:	7c 93       	st	X, r23
    6b3a:	cf 01       	movw	r24, r30
    6b3c:	38 df       	rcall	.-400    	; 0x69ae <free>
    6b3e:	8a c0       	rjmp	.+276    	; 0x6c54 <realloc+0x176>
    6b40:	5b 01       	movw	r10, r22
    6b42:	a0 1a       	sub	r10, r16
    6b44:	b1 0a       	sbc	r11, r17
    6b46:	4c 01       	movw	r8, r24
    6b48:	80 0e       	add	r8, r16
    6b4a:	91 1e       	adc	r9, r17
    6b4c:	a0 91 fe 05 	lds	r26, 0x05FE	; 0x8005fe <__flp>
    6b50:	b0 91 ff 05 	lds	r27, 0x05FF	; 0x8005ff <__flp+0x1>
    6b54:	40 e0       	ldi	r20, 0x00	; 0
    6b56:	50 e0       	ldi	r21, 0x00	; 0
    6b58:	e1 2c       	mov	r14, r1
    6b5a:	f1 2c       	mov	r15, r1
    6b5c:	10 97       	sbiw	r26, 0x00	; 0
    6b5e:	09 f4       	brne	.+2      	; 0x6b62 <realloc+0x84>
    6b60:	4a c0       	rjmp	.+148    	; 0x6bf6 <realloc+0x118>
    6b62:	a8 15       	cp	r26, r8
    6b64:	b9 05       	cpc	r27, r9
    6b66:	d1 f5       	brne	.+116    	; 0x6bdc <realloc+0xfe>
    6b68:	6d 90       	ld	r6, X+
    6b6a:	7c 90       	ld	r7, X
    6b6c:	11 97       	sbiw	r26, 0x01	; 1
    6b6e:	63 01       	movw	r12, r6
    6b70:	82 e0       	ldi	r24, 0x02	; 2
    6b72:	c8 0e       	add	r12, r24
    6b74:	d1 1c       	adc	r13, r1
    6b76:	ca 14       	cp	r12, r10
    6b78:	db 04       	cpc	r13, r11
    6b7a:	80 f1       	brcs	.+96     	; 0x6bdc <realloc+0xfe>
    6b7c:	a3 01       	movw	r20, r6
    6b7e:	4a 19       	sub	r20, r10
    6b80:	5b 09       	sbc	r21, r11
    6b82:	6a 01       	movw	r12, r20
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	c8 0e       	add	r12, r24
    6b88:	d1 1c       	adc	r13, r1
    6b8a:	12 96       	adiw	r26, 0x02	; 2
    6b8c:	bc 90       	ld	r11, X
    6b8e:	12 97       	sbiw	r26, 0x02	; 2
    6b90:	13 96       	adiw	r26, 0x03	; 3
    6b92:	ac 91       	ld	r26, X
    6b94:	b5 e0       	ldi	r27, 0x05	; 5
    6b96:	cb 16       	cp	r12, r27
    6b98:	d1 04       	cpc	r13, r1
    6b9a:	40 f0       	brcs	.+16     	; 0x6bac <realloc+0xce>
    6b9c:	b2 82       	std	Z+2, r11	; 0x02
    6b9e:	a3 83       	std	Z+3, r26	; 0x03
    6ba0:	51 83       	std	Z+1, r21	; 0x01
    6ba2:	40 83       	st	Z, r20
    6ba4:	d9 01       	movw	r26, r18
    6ba6:	6d 93       	st	X+, r22
    6ba8:	7c 93       	st	X, r23
    6baa:	0a c0       	rjmp	.+20     	; 0x6bc0 <realloc+0xe2>
    6bac:	0e 5f       	subi	r16, 0xFE	; 254
    6bae:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb0:	c3 01       	movw	r24, r6
    6bb2:	80 0f       	add	r24, r16
    6bb4:	91 1f       	adc	r25, r17
    6bb6:	f9 01       	movw	r30, r18
    6bb8:	91 83       	std	Z+1, r25	; 0x01
    6bba:	80 83       	st	Z, r24
    6bbc:	eb 2d       	mov	r30, r11
    6bbe:	fa 2f       	mov	r31, r26
    6bc0:	e1 14       	cp	r14, r1
    6bc2:	f1 04       	cpc	r15, r1
    6bc4:	31 f0       	breq	.+12     	; 0x6bd2 <realloc+0xf4>
    6bc6:	d7 01       	movw	r26, r14
    6bc8:	13 96       	adiw	r26, 0x03	; 3
    6bca:	fc 93       	st	X, r31
    6bcc:	ee 93       	st	-X, r30
    6bce:	12 97       	sbiw	r26, 0x02	; 2
    6bd0:	41 c0       	rjmp	.+130    	; 0x6c54 <realloc+0x176>
    6bd2:	f0 93 ff 05 	sts	0x05FF, r31	; 0x8005ff <__flp+0x1>
    6bd6:	e0 93 fe 05 	sts	0x05FE, r30	; 0x8005fe <__flp>
    6bda:	3c c0       	rjmp	.+120    	; 0x6c54 <realloc+0x176>
    6bdc:	8d 91       	ld	r24, X+
    6bde:	9c 91       	ld	r25, X
    6be0:	11 97       	sbiw	r26, 0x01	; 1
    6be2:	48 17       	cp	r20, r24
    6be4:	59 07       	cpc	r21, r25
    6be6:	08 f4       	brcc	.+2      	; 0x6bea <realloc+0x10c>
    6be8:	ac 01       	movw	r20, r24
    6bea:	7d 01       	movw	r14, r26
    6bec:	12 96       	adiw	r26, 0x02	; 2
    6bee:	0d 90       	ld	r0, X+
    6bf0:	bc 91       	ld	r27, X
    6bf2:	a0 2d       	mov	r26, r0
    6bf4:	b3 cf       	rjmp	.-154    	; 0x6b5c <realloc+0x7e>
    6bf6:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <__brkval>
    6bfa:	90 91 fd 05 	lds	r25, 0x05FD	; 0x8005fd <__brkval+0x1>
    6bfe:	88 15       	cp	r24, r8
    6c00:	99 05       	cpc	r25, r9
    6c02:	e1 f4       	brne	.+56     	; 0x6c3c <realloc+0x15e>
    6c04:	46 17       	cp	r20, r22
    6c06:	57 07       	cpc	r21, r23
    6c08:	c8 f4       	brcc	.+50     	; 0x6c3c <realloc+0x15e>
    6c0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6c0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6c12:	00 97       	sbiw	r24, 0x00	; 0
    6c14:	41 f4       	brne	.+16     	; 0x6c26 <realloc+0x148>
    6c16:	8d b7       	in	r24, 0x3d	; 61
    6c18:	9e b7       	in	r25, 0x3e	; 62
    6c1a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6c1e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6c22:	84 1b       	sub	r24, r20
    6c24:	95 0b       	sbc	r25, r21
    6c26:	e8 17       	cp	r30, r24
    6c28:	f9 07       	cpc	r31, r25
    6c2a:	b0 f4       	brcc	.+44     	; 0x6c58 <realloc+0x17a>
    6c2c:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__brkval+0x1>
    6c30:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__brkval>
    6c34:	f9 01       	movw	r30, r18
    6c36:	71 83       	std	Z+1, r23	; 0x01
    6c38:	60 83       	st	Z, r22
    6c3a:	0c c0       	rjmp	.+24     	; 0x6c54 <realloc+0x176>
    6c3c:	cb 01       	movw	r24, r22
    6c3e:	22 de       	rcall	.-956    	; 0x6884 <malloc>
    6c40:	7c 01       	movw	r14, r24
    6c42:	00 97       	sbiw	r24, 0x00	; 0
    6c44:	49 f0       	breq	.+18     	; 0x6c58 <realloc+0x17a>
    6c46:	a8 01       	movw	r20, r16
    6c48:	be 01       	movw	r22, r28
    6c4a:	af d1       	rcall	.+862    	; 0x6faa <memcpy>
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	af de       	rcall	.-674    	; 0x69ae <free>
    6c50:	c7 01       	movw	r24, r14
    6c52:	04 c0       	rjmp	.+8      	; 0x6c5c <realloc+0x17e>
    6c54:	ce 01       	movw	r24, r28
    6c56:	02 c0       	rjmp	.+4      	; 0x6c5c <realloc+0x17e>
    6c58:	80 e0       	ldi	r24, 0x00	; 0
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	cd b7       	in	r28, 0x3d	; 61
    6c5e:	de b7       	in	r29, 0x3e	; 62
    6c60:	ee e0       	ldi	r30, 0x0E	; 14
    6c62:	cb cd       	rjmp	.-1130   	; 0x67fa <__epilogue_restores__+0x8>

00006c64 <strtod>:
    6c64:	a0 e0       	ldi	r26, 0x00	; 0
    6c66:	b0 e0       	ldi	r27, 0x00	; 0
    6c68:	e7 e3       	ldi	r30, 0x37	; 55
    6c6a:	f6 e3       	ldi	r31, 0x36	; 54
    6c6c:	aa cd       	rjmp	.-1196   	; 0x67c2 <__prologue_saves__+0x8>
    6c6e:	ec 01       	movw	r28, r24
    6c70:	7b 01       	movw	r14, r22
    6c72:	61 15       	cp	r22, r1
    6c74:	71 05       	cpc	r23, r1
    6c76:	19 f0       	breq	.+6      	; 0x6c7e <strtod+0x1a>
    6c78:	db 01       	movw	r26, r22
    6c7a:	8d 93       	st	X+, r24
    6c7c:	9c 93       	st	X, r25
    6c7e:	8e 01       	movw	r16, r28
    6c80:	0f 5f       	subi	r16, 0xFF	; 255
    6c82:	1f 4f       	sbci	r17, 0xFF	; 255
    6c84:	78 80       	ld	r7, Y
    6c86:	87 2d       	mov	r24, r7
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	6f d1       	rcall	.+734    	; 0x6f6a <isspace>
    6c8c:	89 2b       	or	r24, r25
    6c8e:	11 f0       	breq	.+4      	; 0x6c94 <strtod+0x30>
    6c90:	e8 01       	movw	r28, r16
    6c92:	f5 cf       	rjmp	.-22     	; 0x6c7e <strtod+0x1a>
    6c94:	bd e2       	ldi	r27, 0x2D	; 45
    6c96:	7b 12       	cpse	r7, r27
    6c98:	05 c0       	rjmp	.+10     	; 0x6ca4 <strtod+0x40>
    6c9a:	0f 5f       	subi	r16, 0xFF	; 255
    6c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    6c9e:	79 80       	ldd	r7, Y+1	; 0x01
    6ca0:	c1 e0       	ldi	r28, 0x01	; 1
    6ca2:	08 c0       	rjmp	.+16     	; 0x6cb4 <strtod+0x50>
    6ca4:	eb e2       	ldi	r30, 0x2B	; 43
    6ca6:	7e 12       	cpse	r7, r30
    6ca8:	04 c0       	rjmp	.+8      	; 0x6cb2 <strtod+0x4e>
    6caa:	8e 01       	movw	r16, r28
    6cac:	0e 5f       	subi	r16, 0xFE	; 254
    6cae:	1f 4f       	sbci	r17, 0xFF	; 255
    6cb0:	79 80       	ldd	r7, Y+1	; 0x01
    6cb2:	c0 e0       	ldi	r28, 0x00	; 0
    6cb4:	68 01       	movw	r12, r16
    6cb6:	f1 e0       	ldi	r31, 0x01	; 1
    6cb8:	cf 1a       	sub	r12, r31
    6cba:	d1 08       	sbc	r13, r1
    6cbc:	43 e0       	ldi	r20, 0x03	; 3
    6cbe:	50 e0       	ldi	r21, 0x00	; 0
    6cc0:	62 e0       	ldi	r22, 0x02	; 2
    6cc2:	72 e0       	ldi	r23, 0x02	; 2
    6cc4:	c6 01       	movw	r24, r12
    6cc6:	59 d1       	rcall	.+690    	; 0x6f7a <strncasecmp_P>
    6cc8:	89 2b       	or	r24, r25
    6cca:	e9 f4       	brne	.+58     	; 0x6d06 <strtod+0xa2>
    6ccc:	68 01       	movw	r12, r16
    6cce:	22 e0       	ldi	r18, 0x02	; 2
    6cd0:	c2 0e       	add	r12, r18
    6cd2:	d1 1c       	adc	r13, r1
    6cd4:	45 e0       	ldi	r20, 0x05	; 5
    6cd6:	50 e0       	ldi	r21, 0x00	; 0
    6cd8:	6d ef       	ldi	r22, 0xFD	; 253
    6cda:	71 e0       	ldi	r23, 0x01	; 1
    6cdc:	c6 01       	movw	r24, r12
    6cde:	4d d1       	rcall	.+666    	; 0x6f7a <strncasecmp_P>
    6ce0:	89 2b       	or	r24, r25
    6ce2:	21 f4       	brne	.+8      	; 0x6cec <strtod+0x88>
    6ce4:	68 01       	movw	r12, r16
    6ce6:	87 e0       	ldi	r24, 0x07	; 7
    6ce8:	c8 0e       	add	r12, r24
    6cea:	d1 1c       	adc	r13, r1
    6cec:	e1 14       	cp	r14, r1
    6cee:	f1 04       	cpc	r15, r1
    6cf0:	19 f0       	breq	.+6      	; 0x6cf8 <strtod+0x94>
    6cf2:	d7 01       	movw	r26, r14
    6cf4:	cd 92       	st	X+, r12
    6cf6:	dc 92       	st	X, r13
    6cf8:	c1 11       	cpse	r28, r1
    6cfa:	fd c0       	rjmp	.+506    	; 0x6ef6 <strtod+0x292>
    6cfc:	60 e0       	ldi	r22, 0x00	; 0
    6cfe:	70 e0       	ldi	r23, 0x00	; 0
    6d00:	80 e8       	ldi	r24, 0x80	; 128
    6d02:	9f e7       	ldi	r25, 0x7F	; 127
    6d04:	01 c1       	rjmp	.+514    	; 0x6f08 <strtod+0x2a4>
    6d06:	43 e0       	ldi	r20, 0x03	; 3
    6d08:	50 e0       	ldi	r21, 0x00	; 0
    6d0a:	6a ef       	ldi	r22, 0xFA	; 250
    6d0c:	71 e0       	ldi	r23, 0x01	; 1
    6d0e:	c6 01       	movw	r24, r12
    6d10:	34 d1       	rcall	.+616    	; 0x6f7a <strncasecmp_P>
    6d12:	89 2b       	or	r24, r25
    6d14:	51 f4       	brne	.+20     	; 0x6d2a <strtod+0xc6>
    6d16:	e1 14       	cp	r14, r1
    6d18:	f1 04       	cpc	r15, r1
    6d1a:	09 f4       	brne	.+2      	; 0x6d1e <strtod+0xba>
    6d1c:	f1 c0       	rjmp	.+482    	; 0x6f00 <strtod+0x29c>
    6d1e:	0e 5f       	subi	r16, 0xFE	; 254
    6d20:	1f 4f       	sbci	r17, 0xFF	; 255
    6d22:	f7 01       	movw	r30, r14
    6d24:	11 83       	std	Z+1, r17	; 0x01
    6d26:	00 83       	st	Z, r16
    6d28:	eb c0       	rjmp	.+470    	; 0x6f00 <strtod+0x29c>
    6d2a:	68 01       	movw	r12, r16
    6d2c:	60 e0       	ldi	r22, 0x00	; 0
    6d2e:	70 e0       	ldi	r23, 0x00	; 0
    6d30:	cb 01       	movw	r24, r22
    6d32:	00 e0       	ldi	r16, 0x00	; 0
    6d34:	10 e0       	ldi	r17, 0x00	; 0
    6d36:	f6 01       	movw	r30, r12
    6d38:	d0 ed       	ldi	r29, 0xD0	; 208
    6d3a:	d7 0d       	add	r29, r7
    6d3c:	da 30       	cpi	r29, 0x0A	; 10
    6d3e:	50 f5       	brcc	.+84     	; 0x6d94 <strtod+0x130>
    6d40:	2c 2f       	mov	r18, r28
    6d42:	22 60       	ori	r18, 0x02	; 2
    6d44:	62 2e       	mov	r6, r18
    6d46:	2c 2f       	mov	r18, r28
    6d48:	28 70       	andi	r18, 0x08	; 8
    6d4a:	c2 ff       	sbrs	r28, 2
    6d4c:	05 c0       	rjmp	.+10     	; 0x6d58 <strtod+0xf4>
    6d4e:	21 11       	cpse	r18, r1
    6d50:	27 c0       	rjmp	.+78     	; 0x6da0 <strtod+0x13c>
    6d52:	0f 5f       	subi	r16, 0xFF	; 255
    6d54:	1f 4f       	sbci	r17, 0xFF	; 255
    6d56:	24 c0       	rjmp	.+72     	; 0x6da0 <strtod+0x13c>
    6d58:	22 23       	and	r18, r18
    6d5a:	11 f0       	breq	.+4      	; 0x6d60 <strtod+0xfc>
    6d5c:	01 50       	subi	r16, 0x01	; 1
    6d5e:	11 09       	sbc	r17, r1
    6d60:	a5 e0       	ldi	r26, 0x05	; 5
    6d62:	b0 e0       	ldi	r27, 0x00	; 0
    6d64:	9b 01       	movw	r18, r22
    6d66:	ac 01       	movw	r20, r24
    6d68:	1e dd       	rcall	.-1476   	; 0x67a6 <__muluhisi3>
    6d6a:	4b 01       	movw	r8, r22
    6d6c:	5c 01       	movw	r10, r24
    6d6e:	88 0c       	add	r8, r8
    6d70:	99 1c       	adc	r9, r9
    6d72:	aa 1c       	adc	r10, r10
    6d74:	bb 1c       	adc	r11, r11
    6d76:	c5 01       	movw	r24, r10
    6d78:	b4 01       	movw	r22, r8
    6d7a:	6d 0f       	add	r22, r29
    6d7c:	71 1d       	adc	r23, r1
    6d7e:	81 1d       	adc	r24, r1
    6d80:	91 1d       	adc	r25, r1
    6d82:	68 39       	cpi	r22, 0x98	; 152
    6d84:	a9 e9       	ldi	r26, 0x99	; 153
    6d86:	7a 07       	cpc	r23, r26
    6d88:	8a 07       	cpc	r24, r26
    6d8a:	a9 e1       	ldi	r26, 0x19	; 25
    6d8c:	9a 07       	cpc	r25, r26
    6d8e:	40 f0       	brcs	.+16     	; 0x6da0 <strtod+0x13c>
    6d90:	c6 60       	ori	r28, 0x06	; 6
    6d92:	05 c0       	rjmp	.+10     	; 0x6d9e <strtod+0x13a>
    6d94:	de 3f       	cpi	r29, 0xFE	; 254
    6d96:	51 f4       	brne	.+20     	; 0x6dac <strtod+0x148>
    6d98:	c3 fd       	sbrc	r28, 3
    6d9a:	44 c0       	rjmp	.+136    	; 0x6e24 <strtod+0x1c0>
    6d9c:	c8 60       	ori	r28, 0x08	; 8
    6d9e:	6c 2e       	mov	r6, r28
    6da0:	bf ef       	ldi	r27, 0xFF	; 255
    6da2:	cb 1a       	sub	r12, r27
    6da4:	db 0a       	sbc	r13, r27
    6da6:	70 80       	ld	r7, Z
    6da8:	c6 2d       	mov	r28, r6
    6daa:	c5 cf       	rjmp	.-118    	; 0x6d36 <strtod+0xd2>
    6dac:	2d 2f       	mov	r18, r29
    6dae:	2f 7d       	andi	r18, 0xDF	; 223
    6db0:	25 31       	cpi	r18, 0x15	; 21
    6db2:	c1 f5       	brne	.+112    	; 0x6e24 <strtod+0x1c0>
    6db4:	40 81       	ld	r20, Z
    6db6:	4d 32       	cpi	r20, 0x2D	; 45
    6db8:	11 f4       	brne	.+4      	; 0x6dbe <strtod+0x15a>
    6dba:	c0 61       	ori	r28, 0x10	; 16
    6dbc:	06 c0       	rjmp	.+12     	; 0x6dca <strtod+0x166>
    6dbe:	4b 32       	cpi	r20, 0x2B	; 43
    6dc0:	21 f0       	breq	.+8      	; 0x6dca <strtod+0x166>
    6dc2:	31 96       	adiw	r30, 0x01	; 1
    6dc4:	21 e0       	ldi	r18, 0x01	; 1
    6dc6:	30 e0       	ldi	r19, 0x00	; 0
    6dc8:	06 c0       	rjmp	.+12     	; 0x6dd6 <strtod+0x172>
    6dca:	32 96       	adiw	r30, 0x02	; 2
    6dcc:	d6 01       	movw	r26, r12
    6dce:	11 96       	adiw	r26, 0x01	; 1
    6dd0:	4c 91       	ld	r20, X
    6dd2:	22 e0       	ldi	r18, 0x02	; 2
    6dd4:	30 e0       	ldi	r19, 0x00	; 0
    6dd6:	a0 ed       	ldi	r26, 0xD0	; 208
    6dd8:	a4 0f       	add	r26, r20
    6dda:	aa 30       	cpi	r26, 0x0A	; 10
    6ddc:	18 f0       	brcs	.+6      	; 0x6de4 <strtod+0x180>
    6dde:	e2 1b       	sub	r30, r18
    6de0:	f3 0b       	sbc	r31, r19
    6de2:	20 c0       	rjmp	.+64     	; 0x6e24 <strtod+0x1c0>
    6de4:	40 e0       	ldi	r20, 0x00	; 0
    6de6:	50 e0       	ldi	r21, 0x00	; 0
    6de8:	40 38       	cpi	r20, 0x80	; 128
    6dea:	bc e0       	ldi	r27, 0x0C	; 12
    6dec:	5b 07       	cpc	r21, r27
    6dee:	5c f4       	brge	.+22     	; 0x6e06 <strtod+0x1a2>
    6df0:	9a 01       	movw	r18, r20
    6df2:	22 0f       	add	r18, r18
    6df4:	33 1f       	adc	r19, r19
    6df6:	22 0f       	add	r18, r18
    6df8:	33 1f       	adc	r19, r19
    6dfa:	42 0f       	add	r20, r18
    6dfc:	53 1f       	adc	r21, r19
    6dfe:	44 0f       	add	r20, r20
    6e00:	55 1f       	adc	r21, r21
    6e02:	4a 0f       	add	r20, r26
    6e04:	51 1d       	adc	r21, r1
    6e06:	31 96       	adiw	r30, 0x01	; 1
    6e08:	df 01       	movw	r26, r30
    6e0a:	11 97       	sbiw	r26, 0x01	; 1
    6e0c:	2c 91       	ld	r18, X
    6e0e:	a0 ed       	ldi	r26, 0xD0	; 208
    6e10:	a2 0f       	add	r26, r18
    6e12:	aa 30       	cpi	r26, 0x0A	; 10
    6e14:	48 f3       	brcs	.-46     	; 0x6de8 <strtod+0x184>
    6e16:	c4 ff       	sbrs	r28, 4
    6e18:	03 c0       	rjmp	.+6      	; 0x6e20 <strtod+0x1bc>
    6e1a:	51 95       	neg	r21
    6e1c:	41 95       	neg	r20
    6e1e:	51 09       	sbc	r21, r1
    6e20:	04 0f       	add	r16, r20
    6e22:	15 1f       	adc	r17, r21
    6e24:	c1 ff       	sbrs	r28, 1
    6e26:	07 c0       	rjmp	.+14     	; 0x6e36 <strtod+0x1d2>
    6e28:	e1 14       	cp	r14, r1
    6e2a:	f1 04       	cpc	r15, r1
    6e2c:	21 f0       	breq	.+8      	; 0x6e36 <strtod+0x1d2>
    6e2e:	31 97       	sbiw	r30, 0x01	; 1
    6e30:	d7 01       	movw	r26, r14
    6e32:	ed 93       	st	X+, r30
    6e34:	fc 93       	st	X, r31
    6e36:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <__floatunsisf>
    6e3a:	c3 70       	andi	r28, 0x03	; 3
    6e3c:	c3 30       	cpi	r28, 0x03	; 3
    6e3e:	19 f0       	breq	.+6      	; 0x6e46 <strtod+0x1e2>
    6e40:	6b 01       	movw	r12, r22
    6e42:	7c 01       	movw	r14, r24
    6e44:	06 c0       	rjmp	.+12     	; 0x6e52 <strtod+0x1ee>
    6e46:	6b 01       	movw	r12, r22
    6e48:	7c 01       	movw	r14, r24
    6e4a:	f7 fa       	bst	r15, 7
    6e4c:	f0 94       	com	r15
    6e4e:	f7 f8       	bld	r15, 7
    6e50:	f0 94       	com	r15
    6e52:	20 e0       	ldi	r18, 0x00	; 0
    6e54:	30 e0       	ldi	r19, 0x00	; 0
    6e56:	a9 01       	movw	r20, r18
    6e58:	c7 01       	movw	r24, r14
    6e5a:	b6 01       	movw	r22, r12
    6e5c:	0e 94 df 28 	call	0x51be	; 0x51be <__cmpsf2>
    6e60:	88 23       	and	r24, r24
    6e62:	09 f4       	brne	.+2      	; 0x6e66 <strtod+0x202>
    6e64:	45 c0       	rjmp	.+138    	; 0x6ef0 <strtod+0x28c>
    6e66:	17 ff       	sbrs	r17, 7
    6e68:	06 c0       	rjmp	.+12     	; 0x6e76 <strtod+0x212>
    6e6a:	11 95       	neg	r17
    6e6c:	01 95       	neg	r16
    6e6e:	11 09       	sbc	r17, r1
    6e70:	c9 e1       	ldi	r28, 0x19	; 25
    6e72:	d2 e0       	ldi	r29, 0x02	; 2
    6e74:	02 c0       	rjmp	.+4      	; 0x6e7a <strtod+0x216>
    6e76:	c1 e3       	ldi	r28, 0x31	; 49
    6e78:	d2 e0       	ldi	r29, 0x02	; 2
    6e7a:	5e 01       	movw	r10, r28
    6e7c:	b8 e1       	ldi	r27, 0x18	; 24
    6e7e:	ab 1a       	sub	r10, r27
    6e80:	b1 08       	sbc	r11, r1
    6e82:	46 01       	movw	r8, r12
    6e84:	be 2d       	mov	r27, r14
    6e86:	af 2d       	mov	r26, r15
    6e88:	90 e2       	ldi	r25, 0x20	; 32
    6e8a:	e9 2e       	mov	r14, r25
    6e8c:	f1 2c       	mov	r15, r1
    6e8e:	0e 15       	cp	r16, r14
    6e90:	1f 05       	cpc	r17, r15
    6e92:	84 f0       	brlt	.+32     	; 0x6eb4 <strtod+0x250>
    6e94:	fe 01       	movw	r30, r28
    6e96:	25 91       	lpm	r18, Z+
    6e98:	35 91       	lpm	r19, Z+
    6e9a:	45 91       	lpm	r20, Z+
    6e9c:	54 91       	lpm	r21, Z
    6e9e:	b4 01       	movw	r22, r8
    6ea0:	8b 2f       	mov	r24, r27
    6ea2:	9a 2f       	mov	r25, r26
    6ea4:	0e 94 32 2a 	call	0x5464	; 0x5464 <__mulsf3>
    6ea8:	4b 01       	movw	r8, r22
    6eaa:	b8 2f       	mov	r27, r24
    6eac:	a9 2f       	mov	r26, r25
    6eae:	0e 19       	sub	r16, r14
    6eb0:	1f 09       	sbc	r17, r15
    6eb2:	ed cf       	rjmp	.-38     	; 0x6e8e <strtod+0x22a>
    6eb4:	24 97       	sbiw	r28, 0x04	; 4
    6eb6:	f5 94       	asr	r15
    6eb8:	e7 94       	ror	r14
    6eba:	ca 15       	cp	r28, r10
    6ebc:	db 05       	cpc	r29, r11
    6ebe:	39 f7       	brne	.-50     	; 0x6e8e <strtod+0x22a>
    6ec0:	64 01       	movw	r12, r8
    6ec2:	eb 2e       	mov	r14, r27
    6ec4:	fa 2e       	mov	r15, r26
    6ec6:	8e 2d       	mov	r24, r14
    6ec8:	88 0f       	add	r24, r24
    6eca:	8f 2d       	mov	r24, r15
    6ecc:	88 1f       	adc	r24, r24
    6ece:	8f 3f       	cpi	r24, 0xFF	; 255
    6ed0:	49 f0       	breq	.+18     	; 0x6ee4 <strtod+0x280>
    6ed2:	20 e0       	ldi	r18, 0x00	; 0
    6ed4:	30 e0       	ldi	r19, 0x00	; 0
    6ed6:	a9 01       	movw	r20, r18
    6ed8:	c7 01       	movw	r24, r14
    6eda:	b6 01       	movw	r22, r12
    6edc:	0e 94 df 28 	call	0x51be	; 0x51be <__cmpsf2>
    6ee0:	81 11       	cpse	r24, r1
    6ee2:	06 c0       	rjmp	.+12     	; 0x6ef0 <strtod+0x28c>
    6ee4:	82 e2       	ldi	r24, 0x22	; 34
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <errno+0x1>
    6eec:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <errno>
    6ef0:	c7 01       	movw	r24, r14
    6ef2:	b6 01       	movw	r22, r12
    6ef4:	09 c0       	rjmp	.+18     	; 0x6f08 <strtod+0x2a4>
    6ef6:	60 e0       	ldi	r22, 0x00	; 0
    6ef8:	70 e0       	ldi	r23, 0x00	; 0
    6efa:	80 e8       	ldi	r24, 0x80	; 128
    6efc:	9f ef       	ldi	r25, 0xFF	; 255
    6efe:	04 c0       	rjmp	.+8      	; 0x6f08 <strtod+0x2a4>
    6f00:	60 e0       	ldi	r22, 0x00	; 0
    6f02:	70 e0       	ldi	r23, 0x00	; 0
    6f04:	80 ec       	ldi	r24, 0xC0	; 192
    6f06:	9f e7       	ldi	r25, 0x7F	; 127
    6f08:	cd b7       	in	r28, 0x3d	; 61
    6f0a:	de b7       	in	r29, 0x3e	; 62
    6f0c:	ee e0       	ldi	r30, 0x0E	; 14
    6f0e:	75 cc       	rjmp	.-1814   	; 0x67fa <__epilogue_restores__+0x8>

00006f10 <abort>:
    6f10:	81 e0       	ldi	r24, 0x01	; 1
    6f12:	90 e0       	ldi	r25, 0x00	; 0
    6f14:	f8 94       	cli
    6f16:	88 c3       	rjmp	.+1808   	; 0x7628 <__do_global_dtors>

00006f18 <atof>:
    6f18:	66 27       	eor	r22, r22
    6f1a:	77 27       	eor	r23, r23
    6f1c:	a3 ce       	rjmp	.-698    	; 0x6c64 <strtod>

00006f1e <atol>:
    6f1e:	1f 93       	push	r17
    6f20:	fc 01       	movw	r30, r24
    6f22:	99 27       	eor	r25, r25
    6f24:	88 27       	eor	r24, r24
    6f26:	bc 01       	movw	r22, r24
    6f28:	e8 94       	clt
    6f2a:	11 91       	ld	r17, Z+
    6f2c:	10 32       	cpi	r17, 0x20	; 32
    6f2e:	e9 f3       	breq	.-6      	; 0x6f2a <atol+0xc>
    6f30:	19 30       	cpi	r17, 0x09	; 9
    6f32:	10 f0       	brcs	.+4      	; 0x6f38 <atol+0x1a>
    6f34:	1e 30       	cpi	r17, 0x0E	; 14
    6f36:	c8 f3       	brcs	.-14     	; 0x6f2a <atol+0xc>
    6f38:	1b 32       	cpi	r17, 0x2B	; 43
    6f3a:	49 f0       	breq	.+18     	; 0x6f4e <atol+0x30>
    6f3c:	1d 32       	cpi	r17, 0x2D	; 45
    6f3e:	41 f4       	brne	.+16     	; 0x6f50 <atol+0x32>
    6f40:	68 94       	set
    6f42:	05 c0       	rjmp	.+10     	; 0x6f4e <atol+0x30>
    6f44:	94 d0       	rcall	.+296    	; 0x706e <__mulsi_const_10>
    6f46:	61 0f       	add	r22, r17
    6f48:	71 1d       	adc	r23, r1
    6f4a:	81 1d       	adc	r24, r1
    6f4c:	91 1d       	adc	r25, r1
    6f4e:	11 91       	ld	r17, Z+
    6f50:	10 53       	subi	r17, 0x30	; 48
    6f52:	1a 30       	cpi	r17, 0x0A	; 10
    6f54:	b8 f3       	brcs	.-18     	; 0x6f44 <atol+0x26>
    6f56:	3e f4       	brtc	.+14     	; 0x6f66 <atol+0x48>
    6f58:	90 95       	com	r25
    6f5a:	80 95       	com	r24
    6f5c:	70 95       	com	r23
    6f5e:	61 95       	neg	r22
    6f60:	7f 4f       	sbci	r23, 0xFF	; 255
    6f62:	8f 4f       	sbci	r24, 0xFF	; 255
    6f64:	9f 4f       	sbci	r25, 0xFF	; 255
    6f66:	1f 91       	pop	r17
    6f68:	08 95       	ret

00006f6a <isspace>:
    6f6a:	91 11       	cpse	r25, r1
    6f6c:	34 c3       	rjmp	.+1640   	; 0x75d6 <__ctype_isfalse>
    6f6e:	80 32       	cpi	r24, 0x20	; 32
    6f70:	19 f0       	breq	.+6      	; 0x6f78 <isspace+0xe>
    6f72:	89 50       	subi	r24, 0x09	; 9
    6f74:	85 50       	subi	r24, 0x05	; 5
    6f76:	d0 f7       	brcc	.-12     	; 0x6f6c <isspace+0x2>
    6f78:	08 95       	ret

00006f7a <strncasecmp_P>:
    6f7a:	fb 01       	movw	r30, r22
    6f7c:	dc 01       	movw	r26, r24
    6f7e:	41 50       	subi	r20, 0x01	; 1
    6f80:	50 40       	sbci	r21, 0x00	; 0
    6f82:	88 f0       	brcs	.+34     	; 0x6fa6 <strncasecmp_P+0x2c>
    6f84:	8d 91       	ld	r24, X+
    6f86:	81 34       	cpi	r24, 0x41	; 65
    6f88:	1c f0       	brlt	.+6      	; 0x6f90 <strncasecmp_P+0x16>
    6f8a:	8b 35       	cpi	r24, 0x5B	; 91
    6f8c:	0c f4       	brge	.+2      	; 0x6f90 <strncasecmp_P+0x16>
    6f8e:	80 5e       	subi	r24, 0xE0	; 224
    6f90:	65 91       	lpm	r22, Z+
    6f92:	61 34       	cpi	r22, 0x41	; 65
    6f94:	1c f0       	brlt	.+6      	; 0x6f9c <strncasecmp_P+0x22>
    6f96:	6b 35       	cpi	r22, 0x5B	; 91
    6f98:	0c f4       	brge	.+2      	; 0x6f9c <strncasecmp_P+0x22>
    6f9a:	60 5e       	subi	r22, 0xE0	; 224
    6f9c:	86 1b       	sub	r24, r22
    6f9e:	61 11       	cpse	r22, r1
    6fa0:	71 f3       	breq	.-36     	; 0x6f7e <strncasecmp_P+0x4>
    6fa2:	99 0b       	sbc	r25, r25
    6fa4:	08 95       	ret
    6fa6:	88 1b       	sub	r24, r24
    6fa8:	fc cf       	rjmp	.-8      	; 0x6fa2 <strncasecmp_P+0x28>

00006faa <memcpy>:
    6faa:	fb 01       	movw	r30, r22
    6fac:	dc 01       	movw	r26, r24
    6fae:	02 c0       	rjmp	.+4      	; 0x6fb4 <memcpy+0xa>
    6fb0:	01 90       	ld	r0, Z+
    6fb2:	0d 92       	st	X+, r0
    6fb4:	41 50       	subi	r20, 0x01	; 1
    6fb6:	50 40       	sbci	r21, 0x00	; 0
    6fb8:	d8 f7       	brcc	.-10     	; 0x6fb0 <memcpy+0x6>
    6fba:	08 95       	ret

00006fbc <strcmp>:
    6fbc:	fb 01       	movw	r30, r22
    6fbe:	dc 01       	movw	r26, r24
    6fc0:	8d 91       	ld	r24, X+
    6fc2:	01 90       	ld	r0, Z+
    6fc4:	80 19       	sub	r24, r0
    6fc6:	01 10       	cpse	r0, r1
    6fc8:	d9 f3       	breq	.-10     	; 0x6fc0 <strcmp+0x4>
    6fca:	99 0b       	sbc	r25, r25
    6fcc:	08 95       	ret

00006fce <strcpy>:
    6fce:	fb 01       	movw	r30, r22
    6fd0:	dc 01       	movw	r26, r24
    6fd2:	01 90       	ld	r0, Z+
    6fd4:	0d 92       	st	X+, r0
    6fd6:	00 20       	and	r0, r0
    6fd8:	e1 f7       	brne	.-8      	; 0x6fd2 <strcpy+0x4>
    6fda:	08 95       	ret

00006fdc <strncmp>:
    6fdc:	fb 01       	movw	r30, r22
    6fde:	dc 01       	movw	r26, r24
    6fe0:	41 50       	subi	r20, 0x01	; 1
    6fe2:	50 40       	sbci	r21, 0x00	; 0
    6fe4:	30 f0       	brcs	.+12     	; 0x6ff2 <strncmp+0x16>
    6fe6:	8d 91       	ld	r24, X+
    6fe8:	01 90       	ld	r0, Z+
    6fea:	80 19       	sub	r24, r0
    6fec:	19 f4       	brne	.+6      	; 0x6ff4 <strncmp+0x18>
    6fee:	00 20       	and	r0, r0
    6ff0:	b9 f7       	brne	.-18     	; 0x6fe0 <strncmp+0x4>
    6ff2:	88 1b       	sub	r24, r24
    6ff4:	99 0b       	sbc	r25, r25
    6ff6:	08 95       	ret

00006ff8 <strncpy>:
    6ff8:	fb 01       	movw	r30, r22
    6ffa:	dc 01       	movw	r26, r24
    6ffc:	41 50       	subi	r20, 0x01	; 1
    6ffe:	50 40       	sbci	r21, 0x00	; 0
    7000:	48 f0       	brcs	.+18     	; 0x7014 <strncpy+0x1c>
    7002:	01 90       	ld	r0, Z+
    7004:	0d 92       	st	X+, r0
    7006:	00 20       	and	r0, r0
    7008:	c9 f7       	brne	.-14     	; 0x6ffc <strncpy+0x4>
    700a:	01 c0       	rjmp	.+2      	; 0x700e <strncpy+0x16>
    700c:	1d 92       	st	X+, r1
    700e:	41 50       	subi	r20, 0x01	; 1
    7010:	50 40       	sbci	r21, 0x00	; 0
    7012:	e0 f7       	brcc	.-8      	; 0x700c <strncpy+0x14>
    7014:	08 95       	ret

00007016 <itoa>:
    7016:	45 32       	cpi	r20, 0x25	; 37
    7018:	51 05       	cpc	r21, r1
    701a:	18 f4       	brcc	.+6      	; 0x7022 <itoa+0xc>
    701c:	42 30       	cpi	r20, 0x02	; 2
    701e:	08 f0       	brcs	.+2      	; 0x7022 <itoa+0xc>
    7020:	04 c0       	rjmp	.+8      	; 0x702a <__itoa_ncheck>
    7022:	fb 01       	movw	r30, r22
    7024:	10 82       	st	Z, r1
    7026:	cb 01       	movw	r24, r22
    7028:	08 95       	ret

0000702a <__itoa_ncheck>:
    702a:	bb 27       	eor	r27, r27
    702c:	4a 30       	cpi	r20, 0x0A	; 10
    702e:	31 f4       	brne	.+12     	; 0x703c <__itoa_ncheck+0x12>
    7030:	99 23       	and	r25, r25
    7032:	22 f4       	brpl	.+8      	; 0x703c <__itoa_ncheck+0x12>
    7034:	bd e2       	ldi	r27, 0x2D	; 45
    7036:	90 95       	com	r25
    7038:	81 95       	neg	r24
    703a:	9f 4f       	sbci	r25, 0xFF	; 255
    703c:	4f c0       	rjmp	.+158    	; 0x70dc <__utoa_common>

0000703e <ltoa>:
    703e:	25 32       	cpi	r18, 0x25	; 37
    7040:	31 05       	cpc	r19, r1
    7042:	18 f4       	brcc	.+6      	; 0x704a <ltoa+0xc>
    7044:	22 30       	cpi	r18, 0x02	; 2
    7046:	08 f0       	brcs	.+2      	; 0x704a <ltoa+0xc>
    7048:	04 c0       	rjmp	.+8      	; 0x7052 <__ltoa_ncheck>
    704a:	fa 01       	movw	r30, r20
    704c:	10 82       	st	Z, r1
    704e:	ca 01       	movw	r24, r20
    7050:	08 95       	ret

00007052 <__ltoa_ncheck>:
    7052:	bb 27       	eor	r27, r27
    7054:	2a 30       	cpi	r18, 0x0A	; 10
    7056:	51 f4       	brne	.+20     	; 0x706c <__ltoa_ncheck+0x1a>
    7058:	99 23       	and	r25, r25
    705a:	42 f4       	brpl	.+16     	; 0x706c <__ltoa_ncheck+0x1a>
    705c:	bd e2       	ldi	r27, 0x2D	; 45
    705e:	90 95       	com	r25
    7060:	80 95       	com	r24
    7062:	70 95       	com	r23
    7064:	61 95       	neg	r22
    7066:	7f 4f       	sbci	r23, 0xFF	; 255
    7068:	8f 4f       	sbci	r24, 0xFF	; 255
    706a:	9f 4f       	sbci	r25, 0xFF	; 255
    706c:	16 c0       	rjmp	.+44     	; 0x709a <__ultoa_common>

0000706e <__mulsi_const_10>:
    706e:	59 2f       	mov	r21, r25
    7070:	48 2f       	mov	r20, r24
    7072:	37 2f       	mov	r19, r23
    7074:	26 2f       	mov	r18, r22
    7076:	66 0f       	add	r22, r22
    7078:	77 1f       	adc	r23, r23
    707a:	88 1f       	adc	r24, r24
    707c:	99 1f       	adc	r25, r25
    707e:	66 0f       	add	r22, r22
    7080:	77 1f       	adc	r23, r23
    7082:	88 1f       	adc	r24, r24
    7084:	99 1f       	adc	r25, r25
    7086:	62 0f       	add	r22, r18
    7088:	73 1f       	adc	r23, r19
    708a:	84 1f       	adc	r24, r20
    708c:	95 1f       	adc	r25, r21
    708e:	66 0f       	add	r22, r22
    7090:	77 1f       	adc	r23, r23
    7092:	88 1f       	adc	r24, r24
    7094:	99 1f       	adc	r25, r25
    7096:	08 95       	ret

00007098 <__ultoa_ncheck>:
    7098:	bb 27       	eor	r27, r27

0000709a <__ultoa_common>:
    709a:	fa 01       	movw	r30, r20
    709c:	a6 2f       	mov	r26, r22
    709e:	62 17       	cp	r22, r18
    70a0:	71 05       	cpc	r23, r1
    70a2:	81 05       	cpc	r24, r1
    70a4:	91 05       	cpc	r25, r1
    70a6:	33 0b       	sbc	r19, r19
    70a8:	30 fb       	bst	r19, 0
    70aa:	66 f0       	brts	.+24     	; 0x70c4 <__ultoa_common+0x2a>
    70ac:	aa 27       	eor	r26, r26
    70ae:	66 0f       	add	r22, r22
    70b0:	77 1f       	adc	r23, r23
    70b2:	88 1f       	adc	r24, r24
    70b4:	99 1f       	adc	r25, r25
    70b6:	aa 1f       	adc	r26, r26
    70b8:	a2 17       	cp	r26, r18
    70ba:	10 f0       	brcs	.+4      	; 0x70c0 <__ultoa_common+0x26>
    70bc:	a2 1b       	sub	r26, r18
    70be:	63 95       	inc	r22
    70c0:	38 50       	subi	r19, 0x08	; 8
    70c2:	a9 f7       	brne	.-22     	; 0x70ae <__ultoa_common+0x14>
    70c4:	a0 5d       	subi	r26, 0xD0	; 208
    70c6:	aa 33       	cpi	r26, 0x3A	; 58
    70c8:	08 f0       	brcs	.+2      	; 0x70cc <__ultoa_common+0x32>
    70ca:	a9 5d       	subi	r26, 0xD9	; 217
    70cc:	a1 93       	st	Z+, r26
    70ce:	36 f7       	brtc	.-52     	; 0x709c <__ultoa_common+0x2>
    70d0:	b1 11       	cpse	r27, r1
    70d2:	b1 93       	st	Z+, r27
    70d4:	10 82       	st	Z, r1
    70d6:	ca 01       	movw	r24, r20
    70d8:	81 c2       	rjmp	.+1282   	; 0x75dc <strrev>

000070da <__utoa_ncheck>:
    70da:	bb 27       	eor	r27, r27

000070dc <__utoa_common>:
    70dc:	fb 01       	movw	r30, r22
    70de:	55 27       	eor	r21, r21
    70e0:	aa 27       	eor	r26, r26
    70e2:	88 0f       	add	r24, r24
    70e4:	99 1f       	adc	r25, r25
    70e6:	aa 1f       	adc	r26, r26
    70e8:	a4 17       	cp	r26, r20
    70ea:	10 f0       	brcs	.+4      	; 0x70f0 <__utoa_common+0x14>
    70ec:	a4 1b       	sub	r26, r20
    70ee:	83 95       	inc	r24
    70f0:	50 51       	subi	r21, 0x10	; 16
    70f2:	b9 f7       	brne	.-18     	; 0x70e2 <__utoa_common+0x6>
    70f4:	a0 5d       	subi	r26, 0xD0	; 208
    70f6:	aa 33       	cpi	r26, 0x3A	; 58
    70f8:	08 f0       	brcs	.+2      	; 0x70fc <__utoa_common+0x20>
    70fa:	a9 5d       	subi	r26, 0xD9	; 217
    70fc:	a1 93       	st	Z+, r26
    70fe:	00 97       	sbiw	r24, 0x00	; 0
    7100:	79 f7       	brne	.-34     	; 0x70e0 <__utoa_common+0x4>
    7102:	b1 11       	cpse	r27, r1
    7104:	b1 93       	st	Z+, r27
    7106:	11 92       	st	Z+, r1
    7108:	cb 01       	movw	r24, r22
    710a:	68 c2       	rjmp	.+1232   	; 0x75dc <strrev>

0000710c <dtoa_prf>:
    710c:	4f 92       	push	r4
    710e:	5f 92       	push	r5
    7110:	6f 92       	push	r6
    7112:	7f 92       	push	r7
    7114:	9f 92       	push	r9
    7116:	af 92       	push	r10
    7118:	bf 92       	push	r11
    711a:	cf 92       	push	r12
    711c:	df 92       	push	r13
    711e:	ef 92       	push	r14
    7120:	ff 92       	push	r15
    7122:	0f 93       	push	r16
    7124:	1f 93       	push	r17
    7126:	cf 93       	push	r28
    7128:	df 93       	push	r29
    712a:	cd b7       	in	r28, 0x3d	; 61
    712c:	de b7       	in	r29, 0x3e	; 62
    712e:	29 97       	sbiw	r28, 0x09	; 9
    7130:	0f b6       	in	r0, 0x3f	; 63
    7132:	f8 94       	cli
    7134:	de bf       	out	0x3e, r29	; 62
    7136:	0f be       	out	0x3f, r0	; 63
    7138:	cd bf       	out	0x3d, r28	; 61
    713a:	6a 01       	movw	r12, r20
    713c:	12 2f       	mov	r17, r18
    713e:	b0 2e       	mov	r11, r16
    7140:	2b e3       	ldi	r18, 0x3B	; 59
    7142:	20 17       	cp	r18, r16
    7144:	20 f0       	brcs	.+8      	; 0x714e <dtoa_prf+0x42>
    7146:	ff 24       	eor	r15, r15
    7148:	f3 94       	inc	r15
    714a:	f0 0e       	add	r15, r16
    714c:	02 c0       	rjmp	.+4      	; 0x7152 <dtoa_prf+0x46>
    714e:	bc e3       	ldi	r27, 0x3C	; 60
    7150:	fb 2e       	mov	r15, r27
    7152:	0f 2d       	mov	r16, r15
    7154:	27 e0       	ldi	r18, 0x07	; 7
    7156:	ae 01       	movw	r20, r28
    7158:	4f 5f       	subi	r20, 0xFF	; 255
    715a:	5f 4f       	sbci	r21, 0xFF	; 255
    715c:	64 d1       	rcall	.+712    	; 0x7426 <__ftoa_engine>
    715e:	ac 01       	movw	r20, r24
    7160:	89 81       	ldd	r24, Y+1	; 0x01
    7162:	98 2f       	mov	r25, r24
    7164:	99 70       	andi	r25, 0x09	; 9
    7166:	91 30       	cpi	r25, 0x01	; 1
    7168:	31 f0       	breq	.+12     	; 0x7176 <dtoa_prf+0x6a>
    716a:	e1 fc       	sbrc	r14, 1
    716c:	06 c0       	rjmp	.+12     	; 0x717a <dtoa_prf+0x6e>
    716e:	e0 fe       	sbrs	r14, 0
    7170:	06 c0       	rjmp	.+12     	; 0x717e <dtoa_prf+0x72>
    7172:	90 e2       	ldi	r25, 0x20	; 32
    7174:	05 c0       	rjmp	.+10     	; 0x7180 <dtoa_prf+0x74>
    7176:	9d e2       	ldi	r25, 0x2D	; 45
    7178:	03 c0       	rjmp	.+6      	; 0x7180 <dtoa_prf+0x74>
    717a:	9b e2       	ldi	r25, 0x2B	; 43
    717c:	01 c0       	rjmp	.+2      	; 0x7180 <dtoa_prf+0x74>
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	ee 2d       	mov	r30, r14
    7182:	e0 71       	andi	r30, 0x10	; 16
    7184:	83 ff       	sbrs	r24, 3
    7186:	3c c0       	rjmp	.+120    	; 0x7200 <dtoa_prf+0xf4>
    7188:	91 11       	cpse	r25, r1
    718a:	02 c0       	rjmp	.+4      	; 0x7190 <dtoa_prf+0x84>
    718c:	83 e0       	ldi	r24, 0x03	; 3
    718e:	01 c0       	rjmp	.+2      	; 0x7192 <dtoa_prf+0x86>
    7190:	84 e0       	ldi	r24, 0x04	; 4
    7192:	81 17       	cp	r24, r17
    7194:	18 f4       	brcc	.+6      	; 0x719c <dtoa_prf+0x90>
    7196:	21 2f       	mov	r18, r17
    7198:	28 1b       	sub	r18, r24
    719a:	01 c0       	rjmp	.+2      	; 0x719e <dtoa_prf+0x92>
    719c:	20 e0       	ldi	r18, 0x00	; 0
    719e:	e1 11       	cpse	r30, r1
    71a0:	0b c0       	rjmp	.+22     	; 0x71b8 <dtoa_prf+0xac>
    71a2:	f6 01       	movw	r30, r12
    71a4:	82 2f       	mov	r24, r18
    71a6:	30 e2       	ldi	r19, 0x20	; 32
    71a8:	88 23       	and	r24, r24
    71aa:	19 f0       	breq	.+6      	; 0x71b2 <dtoa_prf+0xa6>
    71ac:	31 93       	st	Z+, r19
    71ae:	81 50       	subi	r24, 0x01	; 1
    71b0:	fb cf       	rjmp	.-10     	; 0x71a8 <dtoa_prf+0x9c>
    71b2:	c2 0e       	add	r12, r18
    71b4:	d1 1c       	adc	r13, r1
    71b6:	20 e0       	ldi	r18, 0x00	; 0
    71b8:	99 23       	and	r25, r25
    71ba:	29 f0       	breq	.+10     	; 0x71c6 <dtoa_prf+0xba>
    71bc:	d6 01       	movw	r26, r12
    71be:	9c 93       	st	X, r25
    71c0:	f6 01       	movw	r30, r12
    71c2:	31 96       	adiw	r30, 0x01	; 1
    71c4:	6f 01       	movw	r12, r30
    71c6:	c6 01       	movw	r24, r12
    71c8:	03 96       	adiw	r24, 0x03	; 3
    71ca:	e2 fe       	sbrs	r14, 2
    71cc:	0a c0       	rjmp	.+20     	; 0x71e2 <dtoa_prf+0xd6>
    71ce:	3e e4       	ldi	r19, 0x4E	; 78
    71d0:	d6 01       	movw	r26, r12
    71d2:	3c 93       	st	X, r19
    71d4:	41 e4       	ldi	r20, 0x41	; 65
    71d6:	11 96       	adiw	r26, 0x01	; 1
    71d8:	4c 93       	st	X, r20
    71da:	11 97       	sbiw	r26, 0x01	; 1
    71dc:	12 96       	adiw	r26, 0x02	; 2
    71de:	3c 93       	st	X, r19
    71e0:	06 c0       	rjmp	.+12     	; 0x71ee <dtoa_prf+0xe2>
    71e2:	3e e6       	ldi	r19, 0x6E	; 110
    71e4:	f6 01       	movw	r30, r12
    71e6:	30 83       	st	Z, r19
    71e8:	41 e6       	ldi	r20, 0x61	; 97
    71ea:	41 83       	std	Z+1, r20	; 0x01
    71ec:	32 83       	std	Z+2, r19	; 0x02
    71ee:	fc 01       	movw	r30, r24
    71f0:	32 2f       	mov	r19, r18
    71f2:	40 e2       	ldi	r20, 0x20	; 32
    71f4:	33 23       	and	r19, r19
    71f6:	09 f4       	brne	.+2      	; 0x71fa <dtoa_prf+0xee>
    71f8:	42 c0       	rjmp	.+132    	; 0x727e <dtoa_prf+0x172>
    71fa:	41 93       	st	Z+, r20
    71fc:	31 50       	subi	r19, 0x01	; 1
    71fe:	fa cf       	rjmp	.-12     	; 0x71f4 <dtoa_prf+0xe8>
    7200:	82 ff       	sbrs	r24, 2
    7202:	44 c0       	rjmp	.+136    	; 0x728c <dtoa_prf+0x180>
    7204:	91 11       	cpse	r25, r1
    7206:	02 c0       	rjmp	.+4      	; 0x720c <dtoa_prf+0x100>
    7208:	83 e0       	ldi	r24, 0x03	; 3
    720a:	01 c0       	rjmp	.+2      	; 0x720e <dtoa_prf+0x102>
    720c:	84 e0       	ldi	r24, 0x04	; 4
    720e:	81 17       	cp	r24, r17
    7210:	18 f4       	brcc	.+6      	; 0x7218 <dtoa_prf+0x10c>
    7212:	21 2f       	mov	r18, r17
    7214:	28 1b       	sub	r18, r24
    7216:	01 c0       	rjmp	.+2      	; 0x721a <dtoa_prf+0x10e>
    7218:	20 e0       	ldi	r18, 0x00	; 0
    721a:	e1 11       	cpse	r30, r1
    721c:	0b c0       	rjmp	.+22     	; 0x7234 <dtoa_prf+0x128>
    721e:	f6 01       	movw	r30, r12
    7220:	82 2f       	mov	r24, r18
    7222:	30 e2       	ldi	r19, 0x20	; 32
    7224:	88 23       	and	r24, r24
    7226:	19 f0       	breq	.+6      	; 0x722e <dtoa_prf+0x122>
    7228:	31 93       	st	Z+, r19
    722a:	81 50       	subi	r24, 0x01	; 1
    722c:	fb cf       	rjmp	.-10     	; 0x7224 <dtoa_prf+0x118>
    722e:	c2 0e       	add	r12, r18
    7230:	d1 1c       	adc	r13, r1
    7232:	20 e0       	ldi	r18, 0x00	; 0
    7234:	99 23       	and	r25, r25
    7236:	29 f0       	breq	.+10     	; 0x7242 <dtoa_prf+0x136>
    7238:	d6 01       	movw	r26, r12
    723a:	9c 93       	st	X, r25
    723c:	f6 01       	movw	r30, r12
    723e:	31 96       	adiw	r30, 0x01	; 1
    7240:	6f 01       	movw	r12, r30
    7242:	c6 01       	movw	r24, r12
    7244:	03 96       	adiw	r24, 0x03	; 3
    7246:	e2 fe       	sbrs	r14, 2
    7248:	0b c0       	rjmp	.+22     	; 0x7260 <dtoa_prf+0x154>
    724a:	39 e4       	ldi	r19, 0x49	; 73
    724c:	d6 01       	movw	r26, r12
    724e:	3c 93       	st	X, r19
    7250:	3e e4       	ldi	r19, 0x4E	; 78
    7252:	11 96       	adiw	r26, 0x01	; 1
    7254:	3c 93       	st	X, r19
    7256:	11 97       	sbiw	r26, 0x01	; 1
    7258:	36 e4       	ldi	r19, 0x46	; 70
    725a:	12 96       	adiw	r26, 0x02	; 2
    725c:	3c 93       	st	X, r19
    725e:	07 c0       	rjmp	.+14     	; 0x726e <dtoa_prf+0x162>
    7260:	39 e6       	ldi	r19, 0x69	; 105
    7262:	f6 01       	movw	r30, r12
    7264:	30 83       	st	Z, r19
    7266:	3e e6       	ldi	r19, 0x6E	; 110
    7268:	31 83       	std	Z+1, r19	; 0x01
    726a:	36 e6       	ldi	r19, 0x66	; 102
    726c:	32 83       	std	Z+2, r19	; 0x02
    726e:	fc 01       	movw	r30, r24
    7270:	32 2f       	mov	r19, r18
    7272:	40 e2       	ldi	r20, 0x20	; 32
    7274:	33 23       	and	r19, r19
    7276:	19 f0       	breq	.+6      	; 0x727e <dtoa_prf+0x172>
    7278:	41 93       	st	Z+, r20
    727a:	31 50       	subi	r19, 0x01	; 1
    727c:	fb cf       	rjmp	.-10     	; 0x7274 <dtoa_prf+0x168>
    727e:	fc 01       	movw	r30, r24
    7280:	e2 0f       	add	r30, r18
    7282:	f1 1d       	adc	r31, r1
    7284:	10 82       	st	Z, r1
    7286:	8e ef       	ldi	r24, 0xFE	; 254
    7288:	9f ef       	ldi	r25, 0xFF	; 255
    728a:	b7 c0       	rjmp	.+366    	; 0x73fa <dtoa_prf+0x2ee>
    728c:	f1 e0       	ldi	r31, 0x01	; 1
    728e:	91 11       	cpse	r25, r1
    7290:	01 c0       	rjmp	.+2      	; 0x7294 <dtoa_prf+0x188>
    7292:	f0 e0       	ldi	r31, 0x00	; 0
    7294:	6f 2f       	mov	r22, r31
    7296:	70 e0       	ldi	r23, 0x00	; 0
    7298:	14 16       	cp	r1, r20
    729a:	15 06       	cpc	r1, r21
    729c:	24 f4       	brge	.+8      	; 0x72a6 <dtoa_prf+0x19a>
    729e:	9a 01       	movw	r18, r20
    72a0:	2f 5f       	subi	r18, 0xFF	; 255
    72a2:	3f 4f       	sbci	r19, 0xFF	; 255
    72a4:	02 c0       	rjmp	.+4      	; 0x72aa <dtoa_prf+0x19e>
    72a6:	21 e0       	ldi	r18, 0x01	; 1
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	26 0f       	add	r18, r22
    72ac:	37 1f       	adc	r19, r23
    72ae:	bb 20       	and	r11, r11
    72b0:	29 f0       	breq	.+10     	; 0x72bc <dtoa_prf+0x1b0>
    72b2:	6b 2d       	mov	r22, r11
    72b4:	70 e0       	ldi	r23, 0x00	; 0
    72b6:	6f 5f       	subi	r22, 0xFF	; 255
    72b8:	7f 4f       	sbci	r23, 0xFF	; 255
    72ba:	02 c0       	rjmp	.+4      	; 0x72c0 <dtoa_prf+0x1b4>
    72bc:	60 e0       	ldi	r22, 0x00	; 0
    72be:	70 e0       	ldi	r23, 0x00	; 0
    72c0:	26 0f       	add	r18, r22
    72c2:	37 1f       	adc	r19, r23
    72c4:	61 2f       	mov	r22, r17
    72c6:	70 e0       	ldi	r23, 0x00	; 0
    72c8:	26 17       	cp	r18, r22
    72ca:	37 07       	cpc	r19, r23
    72cc:	1c f4       	brge	.+6      	; 0x72d4 <dtoa_prf+0x1c8>
    72ce:	12 1b       	sub	r17, r18
    72d0:	21 2f       	mov	r18, r17
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <dtoa_prf+0x1ca>
    72d4:	20 e0       	ldi	r18, 0x00	; 0
    72d6:	3e 2d       	mov	r19, r14
    72d8:	38 71       	andi	r19, 0x18	; 24
    72da:	59 f4       	brne	.+22     	; 0x72f2 <dtoa_prf+0x1e6>
    72dc:	d6 01       	movw	r26, r12
    72de:	32 2f       	mov	r19, r18
    72e0:	60 e2       	ldi	r22, 0x20	; 32
    72e2:	33 23       	and	r19, r19
    72e4:	19 f0       	breq	.+6      	; 0x72ec <dtoa_prf+0x1e0>
    72e6:	6d 93       	st	X+, r22
    72e8:	31 50       	subi	r19, 0x01	; 1
    72ea:	fb cf       	rjmp	.-10     	; 0x72e2 <dtoa_prf+0x1d6>
    72ec:	c2 0e       	add	r12, r18
    72ee:	d1 1c       	adc	r13, r1
    72f0:	20 e0       	ldi	r18, 0x00	; 0
    72f2:	ff 23       	and	r31, r31
    72f4:	31 f0       	breq	.+12     	; 0x7302 <dtoa_prf+0x1f6>
    72f6:	d6 01       	movw	r26, r12
    72f8:	9c 93       	st	X, r25
    72fa:	b6 01       	movw	r22, r12
    72fc:	6f 5f       	subi	r22, 0xFF	; 255
    72fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7300:	6b 01       	movw	r12, r22
    7302:	e1 11       	cpse	r30, r1
    7304:	0b c0       	rjmp	.+22     	; 0x731c <dtoa_prf+0x210>
    7306:	f6 01       	movw	r30, r12
    7308:	92 2f       	mov	r25, r18
    730a:	30 e3       	ldi	r19, 0x30	; 48
    730c:	99 23       	and	r25, r25
    730e:	19 f0       	breq	.+6      	; 0x7316 <dtoa_prf+0x20a>
    7310:	31 93       	st	Z+, r19
    7312:	91 50       	subi	r25, 0x01	; 1
    7314:	fb cf       	rjmp	.-10     	; 0x730c <dtoa_prf+0x200>
    7316:	c2 0e       	add	r12, r18
    7318:	d1 1c       	adc	r13, r1
    731a:	20 e0       	ldi	r18, 0x00	; 0
    731c:	9f 2d       	mov	r25, r15
    731e:	94 0f       	add	r25, r20
    7320:	3a 81       	ldd	r19, Y+2	; 0x02
    7322:	78 2f       	mov	r23, r24
    7324:	70 71       	andi	r23, 0x10	; 16
    7326:	a7 2e       	mov	r10, r23
    7328:	84 ff       	sbrs	r24, 4
    732a:	03 c0       	rjmp	.+6      	; 0x7332 <dtoa_prf+0x226>
    732c:	31 33       	cpi	r19, 0x31	; 49
    732e:	09 f4       	brne	.+2      	; 0x7332 <dtoa_prf+0x226>
    7330:	91 50       	subi	r25, 0x01	; 1
    7332:	19 16       	cp	r1, r25
    7334:	24 f4       	brge	.+8      	; 0x733e <dtoa_prf+0x232>
    7336:	99 30       	cpi	r25, 0x09	; 9
    7338:	18 f0       	brcs	.+6      	; 0x7340 <dtoa_prf+0x234>
    733a:	98 e0       	ldi	r25, 0x08	; 8
    733c:	01 c0       	rjmp	.+2      	; 0x7340 <dtoa_prf+0x234>
    733e:	91 e0       	ldi	r25, 0x01	; 1
    7340:	e4 2f       	mov	r30, r20
    7342:	85 2f       	mov	r24, r21
    7344:	57 ff       	sbrs	r21, 7
    7346:	02 c0       	rjmp	.+4      	; 0x734c <dtoa_prf+0x240>
    7348:	e0 e0       	ldi	r30, 0x00	; 0
    734a:	80 e0       	ldi	r24, 0x00	; 0
    734c:	6e 2f       	mov	r22, r30
    734e:	78 2f       	mov	r23, r24
    7350:	e0 e0       	ldi	r30, 0x00	; 0
    7352:	f0 e0       	ldi	r31, 0x00	; 0
    7354:	ae e2       	ldi	r26, 0x2E	; 46
    7356:	9a 2e       	mov	r9, r26
    7358:	3a 01       	movw	r6, r20
    735a:	69 1a       	sub	r6, r25
    735c:	71 08       	sbc	r7, r1
    735e:	2a 01       	movw	r4, r20
    7360:	46 1a       	sub	r4, r22
    7362:	57 0a       	sbc	r5, r23
    7364:	0b 2d       	mov	r16, r11
    7366:	10 e0       	ldi	r17, 0x00	; 0
    7368:	11 95       	neg	r17
    736a:	01 95       	neg	r16
    736c:	11 09       	sbc	r17, r1
    736e:	6f 3f       	cpi	r22, 0xFF	; 255
    7370:	8f ef       	ldi	r24, 0xFF	; 255
    7372:	78 07       	cpc	r23, r24
    7374:	29 f4       	brne	.+10     	; 0x7380 <dtoa_prf+0x274>
    7376:	d6 01       	movw	r26, r12
    7378:	9c 92       	st	X, r9
    737a:	c6 01       	movw	r24, r12
    737c:	01 96       	adiw	r24, 0x01	; 1
    737e:	6c 01       	movw	r12, r24
    7380:	46 17       	cp	r20, r22
    7382:	57 07       	cpc	r21, r23
    7384:	84 f0       	brlt	.+32     	; 0x73a6 <dtoa_prf+0x29a>
    7386:	66 16       	cp	r6, r22
    7388:	77 06       	cpc	r7, r23
    738a:	6c f4       	brge	.+26     	; 0x73a6 <dtoa_prf+0x29a>
    738c:	7f 01       	movw	r14, r30
    738e:	e4 0c       	add	r14, r4
    7390:	f5 1c       	adc	r15, r5
    7392:	a1 e0       	ldi	r26, 0x01	; 1
    7394:	b0 e0       	ldi	r27, 0x00	; 0
    7396:	ac 0f       	add	r26, r28
    7398:	bd 1f       	adc	r27, r29
    739a:	ea 0e       	add	r14, r26
    739c:	fb 1e       	adc	r15, r27
    739e:	d7 01       	movw	r26, r14
    73a0:	11 96       	adiw	r26, 0x01	; 1
    73a2:	bc 90       	ld	r11, X
    73a4:	02 c0       	rjmp	.+4      	; 0x73aa <dtoa_prf+0x29e>
    73a6:	90 e3       	ldi	r25, 0x30	; 48
    73a8:	b9 2e       	mov	r11, r25
    73aa:	61 50       	subi	r22, 0x01	; 1
    73ac:	71 09       	sbc	r23, r1
    73ae:	31 96       	adiw	r30, 0x01	; 1
    73b0:	c6 01       	movw	r24, r12
    73b2:	01 96       	adiw	r24, 0x01	; 1
    73b4:	7c 01       	movw	r14, r24
    73b6:	60 17       	cp	r22, r16
    73b8:	71 07       	cpc	r23, r17
    73ba:	24 f0       	brlt	.+8      	; 0x73c4 <dtoa_prf+0x2b8>
    73bc:	d6 01       	movw	r26, r12
    73be:	bc 92       	st	X, r11
    73c0:	6c 01       	movw	r12, r24
    73c2:	d5 cf       	rjmp	.-86     	; 0x736e <dtoa_prf+0x262>
    73c4:	64 17       	cp	r22, r20
    73c6:	75 07       	cpc	r23, r21
    73c8:	41 f4       	brne	.+16     	; 0x73da <dtoa_prf+0x2ce>
    73ca:	36 33       	cpi	r19, 0x36	; 54
    73cc:	20 f4       	brcc	.+8      	; 0x73d6 <dtoa_prf+0x2ca>
    73ce:	35 33       	cpi	r19, 0x35	; 53
    73d0:	21 f4       	brne	.+8      	; 0x73da <dtoa_prf+0x2ce>
    73d2:	a1 10       	cpse	r10, r1
    73d4:	02 c0       	rjmp	.+4      	; 0x73da <dtoa_prf+0x2ce>
    73d6:	81 e3       	ldi	r24, 0x31	; 49
    73d8:	b8 2e       	mov	r11, r24
    73da:	f6 01       	movw	r30, r12
    73dc:	b0 82       	st	Z, r11
    73de:	f7 01       	movw	r30, r14
    73e0:	82 2f       	mov	r24, r18
    73e2:	90 e2       	ldi	r25, 0x20	; 32
    73e4:	88 23       	and	r24, r24
    73e6:	19 f0       	breq	.+6      	; 0x73ee <dtoa_prf+0x2e2>
    73e8:	91 93       	st	Z+, r25
    73ea:	81 50       	subi	r24, 0x01	; 1
    73ec:	fb cf       	rjmp	.-10     	; 0x73e4 <dtoa_prf+0x2d8>
    73ee:	f7 01       	movw	r30, r14
    73f0:	e2 0f       	add	r30, r18
    73f2:	f1 1d       	adc	r31, r1
    73f4:	10 82       	st	Z, r1
    73f6:	80 e0       	ldi	r24, 0x00	; 0
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	29 96       	adiw	r28, 0x09	; 9
    73fc:	0f b6       	in	r0, 0x3f	; 63
    73fe:	f8 94       	cli
    7400:	de bf       	out	0x3e, r29	; 62
    7402:	0f be       	out	0x3f, r0	; 63
    7404:	cd bf       	out	0x3d, r28	; 61
    7406:	df 91       	pop	r29
    7408:	cf 91       	pop	r28
    740a:	1f 91       	pop	r17
    740c:	0f 91       	pop	r16
    740e:	ff 90       	pop	r15
    7410:	ef 90       	pop	r14
    7412:	df 90       	pop	r13
    7414:	cf 90       	pop	r12
    7416:	bf 90       	pop	r11
    7418:	af 90       	pop	r10
    741a:	9f 90       	pop	r9
    741c:	7f 90       	pop	r7
    741e:	6f 90       	pop	r6
    7420:	5f 90       	pop	r5
    7422:	4f 90       	pop	r4
    7424:	08 95       	ret

00007426 <__ftoa_engine>:
    7426:	28 30       	cpi	r18, 0x08	; 8
    7428:	08 f0       	brcs	.+2      	; 0x742c <__ftoa_engine+0x6>
    742a:	27 e0       	ldi	r18, 0x07	; 7
    742c:	33 27       	eor	r19, r19
    742e:	da 01       	movw	r26, r20
    7430:	99 0f       	add	r25, r25
    7432:	31 1d       	adc	r19, r1
    7434:	87 fd       	sbrc	r24, 7
    7436:	91 60       	ori	r25, 0x01	; 1
    7438:	00 96       	adiw	r24, 0x00	; 0
    743a:	61 05       	cpc	r22, r1
    743c:	71 05       	cpc	r23, r1
    743e:	39 f4       	brne	.+14     	; 0x744e <__ftoa_engine+0x28>
    7440:	32 60       	ori	r19, 0x02	; 2
    7442:	2e 5f       	subi	r18, 0xFE	; 254
    7444:	3d 93       	st	X+, r19
    7446:	30 e3       	ldi	r19, 0x30	; 48
    7448:	2a 95       	dec	r18
    744a:	e1 f7       	brne	.-8      	; 0x7444 <__ftoa_engine+0x1e>
    744c:	08 95       	ret
    744e:	9f 3f       	cpi	r25, 0xFF	; 255
    7450:	30 f0       	brcs	.+12     	; 0x745e <__ftoa_engine+0x38>
    7452:	80 38       	cpi	r24, 0x80	; 128
    7454:	71 05       	cpc	r23, r1
    7456:	61 05       	cpc	r22, r1
    7458:	09 f0       	breq	.+2      	; 0x745c <__ftoa_engine+0x36>
    745a:	3c 5f       	subi	r19, 0xFC	; 252
    745c:	3c 5f       	subi	r19, 0xFC	; 252
    745e:	3d 93       	st	X+, r19
    7460:	91 30       	cpi	r25, 0x01	; 1
    7462:	08 f0       	brcs	.+2      	; 0x7466 <__ftoa_engine+0x40>
    7464:	80 68       	ori	r24, 0x80	; 128
    7466:	91 1d       	adc	r25, r1
    7468:	df 93       	push	r29
    746a:	cf 93       	push	r28
    746c:	1f 93       	push	r17
    746e:	0f 93       	push	r16
    7470:	ff 92       	push	r15
    7472:	ef 92       	push	r14
    7474:	19 2f       	mov	r17, r25
    7476:	98 7f       	andi	r25, 0xF8	; 248
    7478:	96 95       	lsr	r25
    747a:	e9 2f       	mov	r30, r25
    747c:	96 95       	lsr	r25
    747e:	96 95       	lsr	r25
    7480:	e9 0f       	add	r30, r25
    7482:	ff 27       	eor	r31, r31
    7484:	e1 57       	subi	r30, 0x71	; 113
    7486:	fd 4f       	sbci	r31, 0xFD	; 253
    7488:	99 27       	eor	r25, r25
    748a:	33 27       	eor	r19, r19
    748c:	ee 24       	eor	r14, r14
    748e:	ff 24       	eor	r15, r15
    7490:	a7 01       	movw	r20, r14
    7492:	e7 01       	movw	r28, r14
    7494:	05 90       	lpm	r0, Z+
    7496:	08 94       	sec
    7498:	07 94       	ror	r0
    749a:	28 f4       	brcc	.+10     	; 0x74a6 <__ftoa_engine+0x80>
    749c:	36 0f       	add	r19, r22
    749e:	e7 1e       	adc	r14, r23
    74a0:	f8 1e       	adc	r15, r24
    74a2:	49 1f       	adc	r20, r25
    74a4:	51 1d       	adc	r21, r1
    74a6:	66 0f       	add	r22, r22
    74a8:	77 1f       	adc	r23, r23
    74aa:	88 1f       	adc	r24, r24
    74ac:	99 1f       	adc	r25, r25
    74ae:	06 94       	lsr	r0
    74b0:	a1 f7       	brne	.-24     	; 0x749a <__ftoa_engine+0x74>
    74b2:	05 90       	lpm	r0, Z+
    74b4:	07 94       	ror	r0
    74b6:	28 f4       	brcc	.+10     	; 0x74c2 <__ftoa_engine+0x9c>
    74b8:	e7 0e       	add	r14, r23
    74ba:	f8 1e       	adc	r15, r24
    74bc:	49 1f       	adc	r20, r25
    74be:	56 1f       	adc	r21, r22
    74c0:	c1 1d       	adc	r28, r1
    74c2:	77 0f       	add	r23, r23
    74c4:	88 1f       	adc	r24, r24
    74c6:	99 1f       	adc	r25, r25
    74c8:	66 1f       	adc	r22, r22
    74ca:	06 94       	lsr	r0
    74cc:	a1 f7       	brne	.-24     	; 0x74b6 <__ftoa_engine+0x90>
    74ce:	05 90       	lpm	r0, Z+
    74d0:	07 94       	ror	r0
    74d2:	28 f4       	brcc	.+10     	; 0x74de <__ftoa_engine+0xb8>
    74d4:	f8 0e       	add	r15, r24
    74d6:	49 1f       	adc	r20, r25
    74d8:	56 1f       	adc	r21, r22
    74da:	c7 1f       	adc	r28, r23
    74dc:	d1 1d       	adc	r29, r1
    74de:	88 0f       	add	r24, r24
    74e0:	99 1f       	adc	r25, r25
    74e2:	66 1f       	adc	r22, r22
    74e4:	77 1f       	adc	r23, r23
    74e6:	06 94       	lsr	r0
    74e8:	a1 f7       	brne	.-24     	; 0x74d2 <__ftoa_engine+0xac>
    74ea:	05 90       	lpm	r0, Z+
    74ec:	07 94       	ror	r0
    74ee:	20 f4       	brcc	.+8      	; 0x74f8 <__ftoa_engine+0xd2>
    74f0:	49 0f       	add	r20, r25
    74f2:	56 1f       	adc	r21, r22
    74f4:	c7 1f       	adc	r28, r23
    74f6:	d8 1f       	adc	r29, r24
    74f8:	99 0f       	add	r25, r25
    74fa:	66 1f       	adc	r22, r22
    74fc:	77 1f       	adc	r23, r23
    74fe:	88 1f       	adc	r24, r24
    7500:	06 94       	lsr	r0
    7502:	a9 f7       	brne	.-22     	; 0x74ee <__ftoa_engine+0xc8>
    7504:	84 91       	lpm	r24, Z
    7506:	10 95       	com	r17
    7508:	17 70       	andi	r17, 0x07	; 7
    750a:	41 f0       	breq	.+16     	; 0x751c <__ftoa_engine+0xf6>
    750c:	d6 95       	lsr	r29
    750e:	c7 95       	ror	r28
    7510:	57 95       	ror	r21
    7512:	47 95       	ror	r20
    7514:	f7 94       	ror	r15
    7516:	e7 94       	ror	r14
    7518:	1a 95       	dec	r17
    751a:	c1 f7       	brne	.-16     	; 0x750c <__ftoa_engine+0xe6>
    751c:	e5 e3       	ldi	r30, 0x35	; 53
    751e:	f2 e0       	ldi	r31, 0x02	; 2
    7520:	68 94       	set
    7522:	15 90       	lpm	r1, Z+
    7524:	15 91       	lpm	r17, Z+
    7526:	35 91       	lpm	r19, Z+
    7528:	65 91       	lpm	r22, Z+
    752a:	95 91       	lpm	r25, Z+
    752c:	05 90       	lpm	r0, Z+
    752e:	7f e2       	ldi	r23, 0x2F	; 47
    7530:	73 95       	inc	r23
    7532:	e1 18       	sub	r14, r1
    7534:	f1 0a       	sbc	r15, r17
    7536:	43 0b       	sbc	r20, r19
    7538:	56 0b       	sbc	r21, r22
    753a:	c9 0b       	sbc	r28, r25
    753c:	d0 09       	sbc	r29, r0
    753e:	c0 f7       	brcc	.-16     	; 0x7530 <__ftoa_engine+0x10a>
    7540:	e1 0c       	add	r14, r1
    7542:	f1 1e       	adc	r15, r17
    7544:	43 1f       	adc	r20, r19
    7546:	56 1f       	adc	r21, r22
    7548:	c9 1f       	adc	r28, r25
    754a:	d0 1d       	adc	r29, r0
    754c:	7e f4       	brtc	.+30     	; 0x756c <__ftoa_engine+0x146>
    754e:	70 33       	cpi	r23, 0x30	; 48
    7550:	11 f4       	brne	.+4      	; 0x7556 <__ftoa_engine+0x130>
    7552:	8a 95       	dec	r24
    7554:	e6 cf       	rjmp	.-52     	; 0x7522 <__ftoa_engine+0xfc>
    7556:	e8 94       	clt
    7558:	01 50       	subi	r16, 0x01	; 1
    755a:	30 f0       	brcs	.+12     	; 0x7568 <__ftoa_engine+0x142>
    755c:	08 0f       	add	r16, r24
    755e:	0a f4       	brpl	.+2      	; 0x7562 <__ftoa_engine+0x13c>
    7560:	00 27       	eor	r16, r16
    7562:	02 17       	cp	r16, r18
    7564:	08 f4       	brcc	.+2      	; 0x7568 <__ftoa_engine+0x142>
    7566:	20 2f       	mov	r18, r16
    7568:	23 95       	inc	r18
    756a:	02 2f       	mov	r16, r18
    756c:	7a 33       	cpi	r23, 0x3A	; 58
    756e:	28 f0       	brcs	.+10     	; 0x757a <__ftoa_engine+0x154>
    7570:	79 e3       	ldi	r23, 0x39	; 57
    7572:	7d 93       	st	X+, r23
    7574:	2a 95       	dec	r18
    7576:	e9 f7       	brne	.-6      	; 0x7572 <__ftoa_engine+0x14c>
    7578:	10 c0       	rjmp	.+32     	; 0x759a <__ftoa_engine+0x174>
    757a:	7d 93       	st	X+, r23
    757c:	2a 95       	dec	r18
    757e:	89 f6       	brne	.-94     	; 0x7522 <__ftoa_engine+0xfc>
    7580:	06 94       	lsr	r0
    7582:	97 95       	ror	r25
    7584:	67 95       	ror	r22
    7586:	37 95       	ror	r19
    7588:	17 95       	ror	r17
    758a:	17 94       	ror	r1
    758c:	e1 18       	sub	r14, r1
    758e:	f1 0a       	sbc	r15, r17
    7590:	43 0b       	sbc	r20, r19
    7592:	56 0b       	sbc	r21, r22
    7594:	c9 0b       	sbc	r28, r25
    7596:	d0 09       	sbc	r29, r0
    7598:	98 f0       	brcs	.+38     	; 0x75c0 <__ftoa_engine+0x19a>
    759a:	23 95       	inc	r18
    759c:	7e 91       	ld	r23, -X
    759e:	73 95       	inc	r23
    75a0:	7a 33       	cpi	r23, 0x3A	; 58
    75a2:	08 f0       	brcs	.+2      	; 0x75a6 <__ftoa_engine+0x180>
    75a4:	70 e3       	ldi	r23, 0x30	; 48
    75a6:	7c 93       	st	X, r23
    75a8:	20 13       	cpse	r18, r16
    75aa:	b8 f7       	brcc	.-18     	; 0x759a <__ftoa_engine+0x174>
    75ac:	7e 91       	ld	r23, -X
    75ae:	70 61       	ori	r23, 0x10	; 16
    75b0:	7d 93       	st	X+, r23
    75b2:	30 f0       	brcs	.+12     	; 0x75c0 <__ftoa_engine+0x19a>
    75b4:	83 95       	inc	r24
    75b6:	71 e3       	ldi	r23, 0x31	; 49
    75b8:	7d 93       	st	X+, r23
    75ba:	70 e3       	ldi	r23, 0x30	; 48
    75bc:	2a 95       	dec	r18
    75be:	e1 f7       	brne	.-8      	; 0x75b8 <__ftoa_engine+0x192>
    75c0:	11 24       	eor	r1, r1
    75c2:	ef 90       	pop	r14
    75c4:	ff 90       	pop	r15
    75c6:	0f 91       	pop	r16
    75c8:	1f 91       	pop	r17
    75ca:	cf 91       	pop	r28
    75cc:	df 91       	pop	r29
    75ce:	99 27       	eor	r25, r25
    75d0:	87 fd       	sbrc	r24, 7
    75d2:	90 95       	com	r25
    75d4:	08 95       	ret

000075d6 <__ctype_isfalse>:
    75d6:	99 27       	eor	r25, r25
    75d8:	88 27       	eor	r24, r24

000075da <__ctype_istrue>:
    75da:	08 95       	ret

000075dc <strrev>:
    75dc:	dc 01       	movw	r26, r24
    75de:	fc 01       	movw	r30, r24
    75e0:	67 2f       	mov	r22, r23
    75e2:	71 91       	ld	r23, Z+
    75e4:	77 23       	and	r23, r23
    75e6:	e1 f7       	brne	.-8      	; 0x75e0 <strrev+0x4>
    75e8:	32 97       	sbiw	r30, 0x02	; 2
    75ea:	04 c0       	rjmp	.+8      	; 0x75f4 <strrev+0x18>
    75ec:	7c 91       	ld	r23, X
    75ee:	6d 93       	st	X+, r22
    75f0:	70 83       	st	Z, r23
    75f2:	62 91       	ld	r22, -Z
    75f4:	ae 17       	cp	r26, r30
    75f6:	bf 07       	cpc	r27, r31
    75f8:	c8 f3       	brcs	.-14     	; 0x75ec <strrev+0x10>
    75fa:	08 95       	ret

000075fc <eeprom_read_byte>:
    75fc:	f9 99       	sbic	0x1f, 1	; 31
    75fe:	fe cf       	rjmp	.-4      	; 0x75fc <eeprom_read_byte>
    7600:	92 bd       	out	0x22, r25	; 34
    7602:	81 bd       	out	0x21, r24	; 33
    7604:	f8 9a       	sbi	0x1f, 0	; 31
    7606:	99 27       	eor	r25, r25
    7608:	80 b5       	in	r24, 0x20	; 32
    760a:	08 95       	ret

0000760c <eeprom_write_byte>:
    760c:	26 2f       	mov	r18, r22

0000760e <eeprom_write_r18>:
    760e:	f9 99       	sbic	0x1f, 1	; 31
    7610:	fe cf       	rjmp	.-4      	; 0x760e <eeprom_write_r18>
    7612:	1f ba       	out	0x1f, r1	; 31
    7614:	92 bd       	out	0x22, r25	; 34
    7616:	81 bd       	out	0x21, r24	; 33
    7618:	20 bd       	out	0x20, r18	; 32
    761a:	0f b6       	in	r0, 0x3f	; 63
    761c:	f8 94       	cli
    761e:	fa 9a       	sbi	0x1f, 2	; 31
    7620:	f9 9a       	sbi	0x1f, 1	; 31
    7622:	0f be       	out	0x3f, r0	; 63
    7624:	01 96       	adiw	r24, 0x01	; 1
    7626:	08 95       	ret

00007628 <__do_global_dtors>:
    7628:	12 e0       	ldi	r17, 0x02	; 2
    762a:	ce e2       	ldi	r28, 0x2E	; 46
    762c:	d2 e0       	ldi	r29, 0x02	; 2
    762e:	03 c0       	rjmp	.+6      	; 0x7636 <__do_global_dtors+0xe>
    7630:	fe 01       	movw	r30, r28
    7632:	b3 d8       	rcall	.-3738   	; 0x679a <__tablejump2__>
    7634:	21 96       	adiw	r28, 0x01	; 1
    7636:	c0 33       	cpi	r28, 0x30	; 48
    7638:	d1 07       	cpc	r29, r17
    763a:	d1 f7       	brne	.-12     	; 0x7630 <__do_global_dtors+0x8>
    763c:	f8 94       	cli

0000763e <__stop_program>:
    763e:	ff cf       	rjmp	.-2      	; 0x763e <__stop_program>
